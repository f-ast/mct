head	1.1;
access;
symbols
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070518-1300:1.1;
locks; strict;
comment	@# @;


1.1
date	2007.05.10.12.29.17;	author bblajer;	state Exp;
branches;
next	;
commitid	26ab4643101c4567;


desc
@@


1.1
log
@[185782]: Support label text access methods in lite GMF runtime;
FeatureLabelModelFacet: default view pattern is now LabelTextAccessMethod-dependent, thus moved to templates (both in full and lite versions)
@
text
@/**
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.edit.parts.labels;

import java.util.Arrays;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.util.EcoreUtil;

/**
 * An implementation of {@@link ILabelTextDisplayer} that uses native EMF mechanisms to convert a value of a datatype to 
 * its string representation and create an instance of the datatype from the literal value.
 * @@see EcoreUtil#convertToString(org.eclipse.emf.ecore.EDataType, Object)
 * @@see EcoreUtil#createFromString(org.eclipse.emf.ecore.EDataType, String)
 */
public class NativeLabelTextDisplayer extends AbstractFeatureBasedLabelTextDisplayer {
	public NativeLabelTextDisplayer(EAttribute feature) {
		super(feature);
	}

	public NativeLabelTextDisplayer(EAttribute[] features) {
		super(features);
		if (features.length != 1) {
			throw new IllegalArgumentException(Arrays.toString(features));
		}
	}

	protected EAttribute getAttribute() {
		return (EAttribute) getFeatures()[0];
	}

	@@Override
	protected String buildDisplayText(Object[] featureValues) {
		if (featureValues == null || featureValues.length != 1) {
			return null;
		}
		return EcoreUtil.convertToString(getAttribute().getEAttributeType(), featureValues[0]);
	}

	@@Override
	protected String buildEditText(Object[] featureValues) {
		return buildDisplayText(featureValues);
	}

	@@Override
	protected Object[] parseEditedValues(String newString) throws IllegalArgumentException {
		if (newString == null || (newString.length() == 0 && shouldReplaceEmptyStringsWithNulls(getAttribute()))) {
			return new Object[] {null};
		}
		Object result = EcoreUtil.createFromString(getAttribute().getEAttributeType(), newString);
		return result == null ? null : new Object[] {result};
	}

}
@
