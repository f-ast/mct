head	1.4;
access;
symbols
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070921-0000:1.3
	v20070903-0000:1.4
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070518-1300:1.3
	v20070427-0600:1.3
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.1;
locks; strict;
comment	@# @;


1.4
date	2007.07.04.13.22.22;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	4058468b9f0d4567;

1.3
date	2007.04.24.14.16.45;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	4252462e114b4567;

1.2
date	2007.04.12.13.06.49;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	245c461e2ee94567;

1.1
date	2007.04.04.11.04.45;	author bblajer;	state Exp;
branches;
next	;
commitid	18c24613864c4567;


desc
@@


1.4
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@/**
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.edit.parts.labels;

import org.eclipse.draw2d.AbstractLocator;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gmf.runtime.notation.Location;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;

public abstract class BaseExternalNodeLabelEditPart extends BaseExternalLabelEditPart {
	public BaseExternalNodeLabelEditPart(View view) {
		super(view);
	}

	public void refreshBounds() {
		Node node = (Node) getModel();
		if (node.getLayoutConstraint() == null) {
			return;
		}
		assert node.getLayoutConstraint() instanceof Location;
		final Location location = (Location) node.getLayoutConstraint();
		getFigure().getParent().setConstraint(getFigure(), new AbstractLocator() {
			protected Point getReferencePoint() {
				return getLabelLocation(((GraphicalEditPart) getParent()).getFigure()).translate(location.getX(), location.getY());
			}
			public int getRelativePosition() {
				return PositionConstants.SOUTH;
			}
		});
	}

	public Point getReferencePoint() {
		return getLabelLocation(((GraphicalEditPart) getParent()).getFigure());
	}

	protected Point getLabelLocation(IFigure parent) {
		Point result = parent.getBounds().getBottom();
		parent.translateToAbsolute(result);
		return result;
	}
}
@


1.3
log
@CanonicalStyle is taken into account while refreshing notational model to reflect changes in underlying domain model;
Update is now centralized and transactional;
Changes to visibility are dispatched to the parent of the affected view as well (was: only to the view itself);
Save options are not reused, for easy modification of the generated code;
Side-affixed children are not considered direct children;
Empty edit-patterns are treated the same way as null patterns (view pattern is used instead).
@
text
@a17 1
import org.eclipse.emf.common.notify.Notification;
a18 3
import org.eclipse.gef.editparts.AbstractGraphicalEditPart;
import org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart;
import org.eclipse.gmf.runtime.lite.edit.parts.update.UpdaterUtil;
a20 1
import org.eclipse.gmf.runtime.notation.NotationPackage;
d23 1
a23 1
public abstract class BaseExternalNodeLabelEditPart extends AbstractGraphicalEditPart {
d25 1
a25 1
		setModel(view);
a44 20
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshBounds();
	}

	protected IExternallyUpdatableEditPart.ExternalRefresher boundsRefresher = new IExternallyUpdatableEditPart.ExternalRefresher() {
		public void refresh() {
			refreshBounds();
		}
		public boolean isAffectingEvent(Notification msg) {
			if (NotationPackage.eINSTANCE.getLocation().getEStructuralFeatures().contains(msg.getFeature())) {
				return true;
			}
			if (NotationPackage.eINSTANCE.getNode_LayoutConstraint() == msg.getFeature()) {
				return UpdaterUtil.affects(msg, NotationPackage.eINSTANCE.getLocation());
			}
			return false;
		}
	};

@


1.2
log
@Organize imports
@
text
@d14 6
d21 6
d29 1
a29 1
	public BaseExternalNodeLabelEditPart(org.eclipse.gmf.runtime.notation.View view) {
d34 1
a34 1
		org.eclipse.gmf.runtime.notation.Node node = (org.eclipse.gmf.runtime.notation.Node) getModel();
d38 5
a42 5
		assert node.getLayoutConstraint() instanceof org.eclipse.gmf.runtime.notation.Location;
		final org.eclipse.gmf.runtime.notation.Location location = (org.eclipse.gmf.runtime.notation.Location) node.getLayoutConstraint();
		getFigure().getParent().setConstraint(getFigure(), new org.eclipse.draw2d.AbstractLocator() {
			protected org.eclipse.draw2d.geometry.Point getReferencePoint() {
				return getLabelLocation(((org.eclipse.gef.GraphicalEditPart) getParent()).getFigure()).translate(location.getX(), location.getY());
d45 1
a45 1
				return org.eclipse.draw2d.PositionConstants.SOUTH;
d55 1
a55 1
	protected org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart.Refresher boundsRefresher = new org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart.Refresher() {
d59 9
d70 2
a71 2
	public org.eclipse.draw2d.geometry.Point getReferencePoint() {
		return getLabelLocation(((org.eclipse.gef.GraphicalEditPart) getParent()).getFigure());
d74 2
a75 2
	protected org.eclipse.draw2d.geometry.Point getLabelLocation(org.eclipse.draw2d.IFigure parent) {
		org.eclipse.draw2d.geometry.Point result = parent.getBounds().getBottom();
@


1.1
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@a13 1
import org.eclipse.draw2d.IFigure;
@

