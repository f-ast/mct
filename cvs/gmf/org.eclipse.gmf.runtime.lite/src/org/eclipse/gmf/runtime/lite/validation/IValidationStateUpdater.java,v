head	1.1;
access;
symbols
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070518-1300:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070228-2000:1.1
	v20070208-1800:1.1;
locks; strict;
comment	@# @;


1.1
date	2007.02.02.17.14.35;	author bblajer;	state Exp;
branches;
next	;
commitid	78e045c371794567;


desc
@@


1.1
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@/**
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.validation;

/**
 * Allows to update the violations for a given validation state (and thus for a given diagram).
 * Violations may be updated using {@@link #addViolation(ViolationDescriptor)} and {@@link #removeViolation(ViolationDescriptor)} methods.
 * <p/>After the violations are updated, {@@link #commitChanges()} method should be used to commit the updated state 
 * and notify the listeners about the update. If changes are invalid for some reason, {@@link #discardChanges()} method
 * may be used to revert all the changes and invalidate the updater.
 * @@see ValidationState#startUpdate(boolean)
 */
public interface IValidationStateUpdater {
	public void addViolation(ViolationDescriptor violation);

	/**
	 * Completes the update and reports changes. 
	 * After this method has been called, this instance must not be used.
	 */
	public void commitChanges();
	/**
	 * Reverts all the changes. 
	 * After this method has been called, this instance must not be used.
	 */
	public void discardChanges();
}
@
