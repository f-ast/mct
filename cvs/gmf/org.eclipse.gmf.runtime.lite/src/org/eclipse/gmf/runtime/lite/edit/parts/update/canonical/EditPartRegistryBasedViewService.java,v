head	1.4;
access;
symbols
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070921-0000:1.2.2.1
	v20070903-0000:1.4
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070518-1300:1.2
	v20070427-0600:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.2
	v20070228-2000:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	M1_20:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.08.15.09.27.09;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	588d46c2c6ec4567;

1.3
date	2007.07.04.13.22.22;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	4058468b9f0d4567;

1.2
date	2006.09.21.10.11.54;	author atikhomirov;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.09.01.16.14.11;	author atikhomirov;	state Exp;
branches;
next	;

1.2.2.1
date	2007.09.17.16.01.51;	author bblajer;	state Exp;
branches;
next	;
commitid	7ad046eea4ed4567;


desc
@@


1.4
log
@Do not return edit parts that are inactive (prevents links pointing nowhere)
@
text
@/**
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.edit.parts.update.canonical;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.editparts.AbstractEditPart;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Implementation of {@@link IViewService} that uses EditPartRegistry to match views with domain elements.
 * In order for this service to work correctly, edit parts must register themselves against domain elements in {@@link AbstractEditPart#registerModel()} method.
 */
public class EditPartRegistryBasedViewService extends DelegatingViewService {
	public EditPartRegistryBasedViewService(EditPartViewer viewer) {
		super(new ExactMatchViewService(viewer));
	}

	private static class ExactMatchViewService implements IExactMatchFinder {
		private final EditPartViewer myViewer;

		public ExactMatchViewService(EditPartViewer viewer) {
			myViewer = viewer;
		}

		public View findView(EObject modelElement) {
			EditPart editPart = (EditPart) myViewer.getEditPartRegistry().get(modelElement);
			if (editPart != null && editPart.isActive() && editPart.getModel() instanceof View) {
				return (View) editPart.getModel();
			}
			return null;
		}

		public Diagram getDiagram() {
			return (Diagram) myViewer.getContents().getModel();
		}
	}
}
@


1.3
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@d39 1
a39 1
			if (editPart != null && editPart.getModel() instanceof View) {
@


1.2
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
@


1.2.2.1
log
@Fixed copyright statements throughout the lite RT
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.1
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@a13 2
import java.util.Iterator;

a18 1
import org.eclipse.gmf.runtime.notation.Edge;
d25 1
a25 3
public class EditPartRegistryBasedViewService implements IViewService {
	private final EditPartViewer myViewer;

d27 1
a27 1
		myViewer = viewer;
d30 5
a34 3
	public View findView(EObject modelElement) {
		if (modelElement == null) {
			return null;
d36 5
a40 9
		EditPart editPart = (EditPart) myViewer.getEditPartRegistry().get(modelElement);
		if (editPart != null && editPart.getModel() instanceof View) {
			return (View) editPart.getModel();
		}
		View parentView = findView(modelElement.eContainer());
		if (parentView != null) {
			View result = findNode(parentView, modelElement);
			if (result != null) {
				return result;
d42 1
a43 22
		return findEdge(modelElement);
	}
	
	/**
	 * Finds a notational node that corresponds to the given underlying domain element in a subtree starting from the given parent element. 
	 * @@generated
	 */
	private View findNode(View parentView, EObject modelElement) {
		for(Iterator it = parentView.getChildren().iterator(); it.hasNext(); ) {
			View next = (View) it.next();
			if (!next.isSetElement() || next.getElement() == parentView) {
				View result = findNode(next, modelElement);
				if (result != null) {
					return result;
				}
			}
			if (next.isSetElement() && next.getElement() == modelElement) {
				return next;
			}
		}
		return null;
	}
d45 2
a46 10
	/**
	 * Finds a notational edge that corresponds to the given underlying domain element. 
	 * @@generated
	 */
	private View findEdge(EObject modelElement) {
		for(Iterator it = getDiagram().getEdges().iterator(); it.hasNext(); ) {
			Edge next = (Edge) it.next();
			if (next.isSetElement() && next.getElement() == modelElement) {
				return next;
			}
a47 5
		return null;
	}

	private Diagram getDiagram() {
		return (Diagram) myViewer.getContents().getModel();
@

