head	1.3;
access;
symbols
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080425-1959:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070921-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070518-1300:1.3
	v20070427-0600:1.3
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.1
	v20070228-2000:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061218-1200:1.1
	v20061214-0000:1.1
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1
	M1_20:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.04.24.14.16.45;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	4252462e114b4567;

1.2
date	2007.03.15.16.43.32;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	61a145f977b34567;

1.1
date	2006.09.01.16.14.11;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@CanonicalStyle is taken into account while refreshing notational model to reflect changes in underlying domain model;
Update is now centralized and transactional;
Changes to visibility are dispatched to the parent of the affected view as well (was: only to the view itself);
Save options are not reused, for easy modification of the generated code;
Side-affixed children are not considered direct children;
Empty edit-patterns are treated the same way as null patterns (view pattern is used instead).
@
text
@/**
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.edit.parts.update;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EStructuralFeature;

public interface IUpdatableEditPart {
	public Refresher getRefresher(EStructuralFeature feature, Notification msg);

	public interface Refresher {
		public void refresh();
	}

	public interface ComposeableRefresher extends Refresher, Iterable<Refresher> {
		public void addRefresher(Refresher refresher);
	}

	public class CompositeRefresher implements Refresher {
		public void addRefresher(Refresher refresher) {
			if (refresher != null) {
				refreshers.add(refresher);
			}
		}

		public void removeRefresher(Refresher refresher) {
			if (refresher != null) {
				refreshers.remove(refresher);
			}
		}

		public void refresh() {
			for(Refresher next : new LinkedHashSet<Refresher>(refreshers)) {
				next.refresh();
			}
		}

		private Collection<Refresher> refreshers = new ArrayList<Refresher>();
	}
}
@


1.2
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@d16 1
d28 4
d34 3
a36 1
			refreshers.add(refresher);
d40 3
a42 1
			refreshers.remove(refresher);
d46 1
a46 1
			for(Refresher next : refreshers) {
@


1.1
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
a15 1
import java.util.Iterator;
d37 1
a37 2
			for(Iterator it = refreshers.iterator(); it.hasNext(); ) {
				Refresher next = (Refresher) it.next();
d42 1
a42 1
		private Collection/*<Refresher>*/ refreshers = new ArrayList();
@

