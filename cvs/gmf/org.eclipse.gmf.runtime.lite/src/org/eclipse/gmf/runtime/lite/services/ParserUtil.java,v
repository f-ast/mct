head	1.3;
access;
symbols
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080425-1959:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070921-0000:1.2.2.1
	v20070903-0000:1.3
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070518-1300:1.2
	v20070427-0600:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.2
	v20070228-2000:1.2
	v20070208-1800:1.2
	M4_20:1.1
	v20061222-1800:1.1
	v20061218-1200:1.1
	v20061214-0000:1.1
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1
	M1_20:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.07.04.13.22.23;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	4058468b9f0d4567;

1.2
date	2007.01.19.17.15.16;	author bblajer;	state Exp;
branches
	1.2.2.1;
next	1.1;
commitid	781245b0fca44567;

1.1
date	2006.09.01.16.14.12;	author atikhomirov;	state Exp;
branches;
next	;

1.2.2.1
date	2007.09.17.16.01.52;	author bblajer;	state Exp;
branches;
next	;
commitid	7ad046eea4ed4567;


desc
@@


1.3
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@/**
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.services;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EEnumLiteral;


public class ParserUtil {
	private ParserUtil() {
	}

	public static Object parseValue(EAttribute feature, Object value) throws IllegalArgumentException {
		if (value == null) {
			return null;
		}
		EDataType type = feature.getEAttributeType();
		Class iClass = type.getInstanceClass();
		if (Boolean.TYPE.equals(iClass) || Boolean.class.equals(iClass)) {
			if (value instanceof Boolean) {
				// ok
			} else if (value instanceof String) {
				value = Boolean.valueOf((String) value);
			} else {
				throw new IllegalArgumentException("Value of type Boolean is expected");
			}
		} else if (Character.TYPE.equals(iClass) || Character.class.equals(iClass)) {
			if (value instanceof Character) {
				// ok
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					throw new IllegalArgumentException();	//XXX: ?
				} else {
					value = new Character(s.charAt(0));
				}
			} else {
				throw new IllegalArgumentException("Value of type Character is expected");
			}
		} else if (Byte.TYPE.equals(iClass) || Byte.class.equals(iClass)) {
			if (value instanceof Byte) {
				// ok
			} else if (value instanceof Number) {
				value = new Byte(((Number) value).byteValue());
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					value = null;
				} else {
					try {
						value = Byte.valueOf(s);
					} catch (NumberFormatException nfe) {
						throw new IllegalArgumentException("String value does not convert to Byte value");
					}
				}
			} else {
				throw new IllegalArgumentException("Value of type Byte is expected");
			}
		} else if (Short.TYPE.equals(iClass) || Short.class.equals(iClass)) {
			if (value instanceof Short) {
				// ok
			} else if (value instanceof Number) {
				value = new Short(((Number) value).shortValue());
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					value = null;
				} else {
					try {
						value = Short.valueOf(s);
					} catch (NumberFormatException nfe) {
						throw new IllegalArgumentException("String value does not convert to Short value");
					}
				}
			} else {
				throw new IllegalArgumentException("Value of type Short is expected");
			}
		} else if (Integer.TYPE.equals(iClass) || Integer.class.equals(iClass)) {
			if (value instanceof Integer) {
				// ok
			} else if (value instanceof Number) {
				value = new Integer(((Number) value).intValue());
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					value = null;
				} else {
					try {
						value = Integer.valueOf(s);
					} catch (NumberFormatException nfe) {
						throw new IllegalArgumentException("String value does not convert to Integer value");
					}
				}
			} else {
				throw new IllegalArgumentException("Value of type Integer is expected");
			}
		} else if (Long.TYPE.equals(iClass) || Long.class.equals(iClass)) {
			if (value instanceof Long) {
				// ok
			} else if (value instanceof Number) {
				value = new Long(((Number) value).longValue());
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					value = null;
				} else {
					try {
						value = Long.valueOf(s);
					} catch (NumberFormatException nfe) {
						throw new IllegalArgumentException("String value does not convert to Long value");
					}
				}
			} else {
				throw new IllegalArgumentException("Value of type Long is expected");
			}
		} else if (Float.TYPE.equals(iClass) || Float.class.equals(iClass)) {
			if (value instanceof Float) {
				// ok
			} else if (value instanceof Number) {
				value = new Float(((Number) value).floatValue());
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					value = null;
				} else {
					try {
						value = Float.valueOf(s);
					} catch (NumberFormatException nfe) {
						throw new IllegalArgumentException("String value does not convert to Float value");
					}
				}
			} else {
				throw new IllegalArgumentException("Value of type Float is expected");
			}
		} else if (Double.TYPE.equals(iClass) || Double.class.equals(iClass)) {
			if (value instanceof Double) {
				// ok
			} else if (value instanceof Number) {
				value = new Double(((Number) value).doubleValue());
			} else if (value instanceof String) {
				String s = (String) value;
				if (s.length() == 0) {
					value = null;
				} else {
					try {
						value = Double.valueOf(s);
					} catch (NumberFormatException nfe) {
						throw new IllegalArgumentException("String value does not convert to Double value");
					}
				}
			} else {
				throw new IllegalArgumentException("Value of type Double is expected");
			}
		} else if (String.class.equals(iClass)) {
			value = String.valueOf(value);
		} else if (type instanceof EEnum) {
			if (value instanceof String) {
				EEnumLiteral literal = ((EEnum) type).getEEnumLiteralByLiteral((String) value);
				if (literal == null) {
					throw new IllegalArgumentException("Unknown literal: " + value);
				} else {
					value = literal.getInstance();
				}
			} else {
				throw new IllegalArgumentException("Value of type String is expected");
			}
		} else {
			throw new IllegalArgumentException("Unsupported type");
		}
		return value;
	}
}
@


1.2
log
@Default label text should be displayed instead of the "null" string when the corresponding feature is not set;
It should be possible to unset the value of a feature using a diagram label;
Fixed compilation errors when a label is not feature-based
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
@


1.2.2.1
log
@Fixed copyright statements throughout the lite RT
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.1
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d26 1
a26 1
			throw new IllegalArgumentException();
@

