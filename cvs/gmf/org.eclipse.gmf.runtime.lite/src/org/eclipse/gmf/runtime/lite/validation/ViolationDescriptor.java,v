head	1.1;
access;
symbols
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070518-1300:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070228-2000:1.1
	v20070208-1800:1.1;
locks; strict;
comment	@# @;


1.1
date	2007.02.02.17.14.35;	author bblajer;	state Exp;
branches;
next	;
commitid	78e045c371794567;


desc
@@


1.1
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@/**
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.validation;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Represents a description of a validation problem.
 * @@author bblajer
 */
public class ViolationDescriptor {
	private final String myMessage;
	private final URI myUri;
	private final Severity mySeverity;
	private final Object myReferent;

	/**
	 * Creates a new instance of a violation description with the specified attributes.
	 * @@param severity
	 * @@param message
	 * @@param uri
	 */
	public ViolationDescriptor(Severity severity, String message, URI uri, Object data) {
		mySeverity = severity;
		myMessage = message;
		myUri = uri;
		myReferent = data;
	}

	/**
	 * Returns the message associated with this violation
	 */
	public String getMessage() {
		return myMessage;
	}

	/**
	 * Returns the severity of this violation
	 */
	public Severity getSeverity() {
		return mySeverity;
	}

	/**
	 * Returns the URI of the element associated with this violation
	 */
	public URI getUri() {
		return myUri;
	}

	/**
	 * Returns the representation this descriptor was created from.
	 */
	public Object getReferent() {
		return myReferent;
	}

//	@@Override
//	public boolean equals(Object obj) {
//		if (obj == this) {
//			return true;
//		}
//		if (obj instanceof ViolationDescriptor) {
//			ViolationDescriptor that = (ViolationDescriptor) obj;
//			if (!this.myUri.equals(that.myUri)) {
//				return false;
//			}
//			if (!this.mySeverity.equals(that.mySeverity)) {
//				return false;
//			}
//			if (!this.myMessage.equals(that.myMessage)) {
//				return false;
//			}
//			return true;
//		}
//		return false;
//	}

	@@Override
	public int hashCode() {
		return myUri.hashCode() + 17*mySeverity.hashCode() + 31*myMessage.hashCode();
	}

	/**
	 * Returns an instance of <code>ViolationDescriptor</code> from the given status or <code>null</code> if the status cannot be
	 * represented as a violation descriptor. Children of the status are not taken into account.
	 */
	public static ViolationDescriptor create(View view, IStatus validationStatus) {
		Severity severity;
		switch (validationStatus.getSeverity()) {
		case IStatus.INFO:
			severity = Severity.INFO;
			break;
		case IStatus.WARNING:
			severity = Severity.WARNING;
			break;
		case IStatus.ERROR:
			severity = Severity.ERROR;
			break;
		default:
			return null;
		}
		return new ViolationDescriptor(severity, validationStatus.getMessage(), EcoreUtil.getURI(view), validationStatus);
	}

	/**
	 * Returns an instance of <code>ViolationDescriptor</code> from the given diagnostic or <code>null</code> if diagnostic cannot be
	 * represented as a violation descriptor. Children of the diagnostic are not taken into account.
	 */
	public static ViolationDescriptor create(View view, Diagnostic diagnostic) {
		Severity severity;
		switch (diagnostic.getSeverity()) {
		case Diagnostic.INFO:
			severity = Severity.INFO;
			break;
		case Diagnostic.WARNING:
			severity = Severity.WARNING;
			break;
		case Diagnostic.ERROR:
			severity = Severity.ERROR;
			break;
		default:
			return null;
		}
		return new ViolationDescriptor(severity, diagnostic.getMessage(), EcoreUtil.getURI(view), diagnostic);
	}
}
@
