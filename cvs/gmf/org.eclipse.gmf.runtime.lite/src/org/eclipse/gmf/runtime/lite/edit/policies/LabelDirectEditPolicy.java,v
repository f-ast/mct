head	1.1;
access;
symbols
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070518-1300:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1;
locks; strict;
comment	@# @;


1.1
date	2007.03.15.16.43.32;	author bblajer;	state Exp;
branches;
next	;
commitid	61a145f977b34567;


desc
@@


1.1
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@/**
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.edit.policies;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gef.editpolicies.DirectEditPolicy;
import org.eclipse.gef.requests.DirectEditRequest;
import org.eclipse.gmf.runtime.lite.commands.WrappingCommand;
import org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelTextDisplayer;
import org.eclipse.gmf.runtime.lite.edit.parts.labels.ILabelController;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Direct edit policy which uses label text displayer to edit values.
 */
public class LabelDirectEditPolicy extends DirectEditPolicy {
	@@Override
	public void setHost(EditPart host) {
		assert host instanceof ILabelController;
		super.setHost(host);
	}

	protected ILabelController getTextAwareEditPart() {
		return (ILabelController) getHost();
	}

	@@Override
	protected Command getDirectEditCommand(DirectEditRequest request) {
		ILabelTextDisplayer labelTextDisplayer = getTextAwareEditPart().getLabelTextDisplayer();
		if (labelTextDisplayer == null) {
			return UnexecutableCommand.INSTANCE;
		}
		String value = getCellEditorValue(request);
		if (value == null) {
			//Invalid value is transformed into a null by the validator.
			return UnexecutableCommand.INSTANCE;
		}
		View view = (View) getHost().getModel();
		if (view == null) {
			return UnexecutableCommand.INSTANCE;
		}
		EObject modelElement = view.getElement();
		return new WrappingCommand(TransactionUtil.getEditingDomain(view.getDiagram().getElement()), 
				labelTextDisplayer.getApplyCommand(modelElement, value));
	}

	@@Override
	protected void showCurrentEditValue(DirectEditRequest request) {
		getTextAwareEditPart().setLabelText(getCellEditorValue(request));
	}

	protected String getCellEditorValue(DirectEditRequest request) {
		return (String) request.getCellEditor().getValue();
	}
}
@
