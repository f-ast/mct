head	1.5;
access;
symbols
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20071108-0000:1.5
	v20071003-0000:1.5
	v20070921-0000:1.5
	v20070903-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070427-0600:1.5
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070405-1100:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.4
	v20070307-0700:1.3
	v20070228-2000:1.3
	v20070208-1800:1.3
	M4_20:1.2
	v20061222-1800:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	M1_20:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2007.03.16.18.54.19;	author bblajer;	state Exp;
branches;
next	1.4;
commitid	7fc945fae7db4567;

1.4
date	2007.03.15.16.43.32;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	61a145f977b34567;

1.3
date	2007.01.12.21.50.33;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	251e45a802a74567;

1.2
date	2006.09.21.10.11.54;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.01.16.14.11;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@EObjects that are not attached to any resource should be treated as not read only
@
text
@/**
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.commands;

import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.emf.common.command.Command;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.lite.services.IViewDecorator;
import org.eclipse.gmf.runtime.notation.Bounds;
import org.eclipse.gmf.runtime.notation.DrawerStyle;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationFactory;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Command to create a notational node within a given parent. 
 * @@author bblajer
 */
public class CreateNotationalNodeCommand extends CreateNotationalElementCommand {
	public final Command myExposeCommand;

	public CreateNotationalNodeCommand(View parent, EObject domainElement, Rectangle constraint, IViewDecorator decorator) {
		this(parent, domainElement, constraint, decorator, true);
	}
	/**
	 * Creates a command that, upon execution, will create a notational node as a child of the given parent view
	 * to represent the given domain element.
	 * The created node will be assigned the <code>Bounds</code> layout constraint with bounds taken from the given constraint
	 * parameter. The node will be decorated with the given {@@link IViewDecorator}.
	 * The node will be optionally made visible by expanding the parent's {@@link DrawerStyle}, if one is present. 
	 * @@param parent
	 * @@param domainElement
	 * @@param constraint
	 * @@param decorator
	 * @@param expose
	 */
	public CreateNotationalNodeCommand(View parent, EObject domainElement, Rectangle constraint, IViewDecorator decorator, boolean expose) {
		super(parent);
		Node createdNode = NotationFactory.eINSTANCE.createNode();
		setCreatedView(createdNode);
		createdNode.setElement(domainElement);
		decorator.decorateView(createdNode);
		if (constraint != null) {
			Bounds bounds = NotationFactory.eINSTANCE.createBounds();
			createdNode.setLayoutConstraint(bounds);
			bounds.setX(constraint.x);
			bounds.setY(constraint.y);
			bounds.setWidth(constraint.width);
			bounds.setHeight(constraint.height);
		}
		if (expose) {
			myExposeCommand = new ExpandDrawerCommand(parent);
		} else {
			myExposeCommand = null;
		}
	}

	protected boolean prepare() {
		if (getCreatedView() instanceof Node == false) {
			return false;
		}
		TransactionalEditingDomain domain = TransactionUtil.getEditingDomain(getParent());
		if (domain != null && domain.isReadOnly(getParent().eResource())) {
			return false;
		}
		if (myExposeCommand != null && !myExposeCommand.canExecute()) {
			return false;
		}
		return true;
	}

	public boolean canUndo() {
		if (myExposeCommand != null && !myExposeCommand.canUndo()) {
			return false;
		}
		return true;
	}

	public void execute() {
		if (myExposeCommand != null) {
			myExposeCommand.execute();
		}
		getParent().insertChild(getCreatedView());
	}

	public void undo() {
		getParent().removeChild(getCreatedView());
		if (myExposeCommand != null) {
			myExposeCommand.undo();
		}
	}

	public void redo() {
		execute();
	}
}
@


1.4
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@d74 1
a74 1
		if (domain == null || domain.isReadOnly(getParent().eResource())) {
@


1.3
log
@[170340]: Expand collapsed compartments automatically when new elements are added to it;
[170341]: Expand/Collapse handles should not be available for empty compartments.
@
text
@d17 2
d69 1
a69 1
	public boolean canExecute() {
d73 4
@


1.2
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
d15 1
d19 1
d24 4
d29 2
d32 15
d60 5
d68 7
a74 1
		return getCreatedView() instanceof Node;
d78 3
d85 3
d93 3
@


1.1
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d14 4
d19 1
d23 1
a23 1
	public CreateNotationalNodeCommand(View parent) {
d25 12
@

