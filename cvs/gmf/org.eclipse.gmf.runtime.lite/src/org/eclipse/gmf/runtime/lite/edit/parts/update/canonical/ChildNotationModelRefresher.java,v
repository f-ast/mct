head	1.4;
access;
symbols
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070921-0000:1.2.2.1
	v20070903-0000:1.4
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070518-1300:1.2
	v20070427-0600:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.2
	v20070228-2000:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	M1_20:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.08.13.14.11.05;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	660946c066784567;

1.3
date	2007.07.04.13.22.22;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	4058468b9f0d4567;

1.2
date	2006.09.06.20.09.25;	author atikhomirov;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.09.01.16.14.11;	author atikhomirov;	state Exp;
branches;
next	;

1.2.2.1
date	2007.09.17.16.01.51;	author bblajer;	state Exp;
branches;
next	;
commitid	7ad046eea4ed4567;


desc
@@


1.4
log
@1. Don't cache templates if dynamic templates option is on;
2. [199747] Support shortcuts in the Lite diagrams (including notation model update for links between alien shortcuts);
3. Decorations should be visible;
4. TransactionalUpdateManager: more notifications to be dispatched to parents, make it possible to add more in subclasses;
5. On element creation, it should be given an opportunity to contribute its notational update commands;
6. [199749]: Delete from View supported (request, edit policy, command, UI action);
7. Add @@generated tags where they were missing;
8. ChildNotationModelRefresher: if the child feature is derived transient, notation model refresher should listen to containment feature.
@
text
@/**
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.edit.parts.update.canonical;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.common.command.Command;
import org.eclipse.emf.common.command.CompoundCommand;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand;
import org.eclipse.gmf.runtime.lite.commands.RemoveNotationalElementCommand;
import org.eclipse.gmf.runtime.lite.commands.ReplaceNotationalElementCommand;
import org.eclipse.gmf.runtime.notation.View;

/**
 * A notation model refresher that is specifically suited to update children of the element.
 */
public abstract class ChildNotationModelRefresher extends AbstractNotationModelRefresher {
	public ChildNotationModelRefresher() {
	}

	@@SuppressWarnings("unchecked")
	public Command buildRefreshNotationModelCommand() {
		List<ElementDescriptor> semanticChildren = getSemanticChildNodes();
		List<View> notationalChildren = (List<View>) getHost().getChildren();
		if (semanticChildren.isEmpty() && notationalChildren.isEmpty()) {
			return null;
		}
		final Map<EObject, View> semanticToNotational = new HashMap<EObject, View>();
		for(Iterator<View> it = notationalChildren.iterator(); it.hasNext(); ) {
			View next = it.next();
			if (next.isSetElement()) {
				EObject nextSemantic = next.getElement();
				if (nextSemantic != null) {
					semanticToNotational.put(nextSemantic, next);
				}
			}
		}
		CompoundCommand command = new CompoundCommand();
		for(Iterator<ElementDescriptor> it = semanticChildren.iterator(); it.hasNext(); ) {
			ElementDescriptor next = it.next();
			EObject node = next.getElement();
			View currentView = semanticToNotational.remove(node);
			int nodeVisualID = next.getVisualID();
			if (currentView == null) {
				if (shouldCreateView(next)) {
					command.appendIfCanExecute(getCreateNotationalElementCommand(next));
				}
			} else if (nodeVisualID != getVisualID(currentView)) {
				CreateNotationalElementCommand notationalCommand = getCreateNotationalElementCommand(next);
				if (notationalCommand != null) {
					command.appendIfCanExecute(new ReplaceNotationalElementCommand(getHost(), notationalCommand, currentView));
				} else {
					command.appendIfCanExecute(new RemoveNotationalElementCommand(getHost(), currentView));
				}
			}
		}
		for(Iterator<View> it = semanticToNotational.values().iterator(); it.hasNext(); ) {
			View obsoleteView = it.next();
			if (shouldRemoveView(obsoleteView)) {
				command.appendIfCanExecute(new RemoveNotationalElementCommand(getHost(), obsoleteView));
			} else {
				command.appendIfCanExecute(getRefreshExternalElementCommand(obsoleteView));
			}
		}
		return command.getCommandList().isEmpty() ? null : command;
	}

	protected Command getRefreshExternalElementCommand(View externalView) {
		return null;
	}

	protected abstract List<ElementDescriptor> getSemanticChildNodes();

	protected boolean shouldRemoveView(View view) {
		return true;
	}
}
@


1.3
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
d34 1
d36 2
a37 2
		List/*<ElementDescriptor>*/ semanticChildren = getSemanticChildNodes();
		List/*<View>*/ notationalChildren = getHost().getChildren();
d41 3
a43 3
		final Map semanticToNotational = new HashMap();
		for(Iterator it = notationalChildren.iterator(); it.hasNext(); ) {
			View next = (View) it.next();
d52 2
a53 2
		for(Iterator it = semanticChildren.iterator(); it.hasNext(); ) {
			ElementDescriptor next = (ElementDescriptor) it.next();
d55 1
a55 1
			View currentView = (View) semanticToNotational.remove(node);
d70 7
a76 3
		for(Iterator it = semanticToNotational.values().iterator(); it.hasNext(); ) {
			View obsoleteView = (View) it.next();
			command.appendIfCanExecute(new RemoveNotationalElementCommand(getHost(), obsoleteView));
d81 9
a89 1
	protected abstract List/*<ElementDescriptor>*/ getSemanticChildNodes();
@


1.2
log
@[155955] bblajer -  Allow creation of child nodes directly in parent elements
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
@


1.2.2.1
log
@Fixed copyright statements throughout the lite RT
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.1
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d43 5
a47 3
			EObject nextSemantic = next.getElement();
			if (nextSemantic != null) {
				semanticToNotational.put(nextSemantic, next);
@

