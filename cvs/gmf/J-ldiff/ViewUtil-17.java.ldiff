2,2c2,2
<  * Copyright (c) 2005 IBM Corporation and others.
---
>  * Copyright (c) 2005, 2006 IBM Corporation and others.
11a50,50
>  * 
12,12d49
< 
56,56c56,56
< 	 * the append index, this is the index you should use to append a view
---
>      * the append index, this is the index you should use to append a view to a
57,57c57,57
< 	 * to a container
---
>      * container
61,61d60
< 	
63a63,64
>      * 
>      * @param views
64,64c65,65
< 	 * @param views a collection of Notation <code>View</code>s
---
>      *            a collection of Notation <code>View</code>s
80,80d80
< 	 * operation. 
81,81c81,81
< 	 * A view will get persisted if the following conditions are met
---
>      * operation. A view will get persisted if the following conditions are met
84,84c84,84
< 	 * <LI> the supplied view is in a transient list or owned by a transient container
---
>      * <LI> the supplied view is in a transient list or owned by a transient
84a85,85
>      * container
85a87,88
>      * 
>      * @param view
86,86c89,89
< 	 * @param view the <code>View</code> to persist
---
>      *            the <code>View</code> to persist
91a95,95
>             .getEditingDomain(view);
91,91c94,94
< 		TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(view);
---
>         TransactionalEditingDomain editingDomain = TransactionUtil
97a102,102
>                 PersistElementCommand pvc = new PersistElementCommand(
98,98d101
< 				PersistElementCommand pvc = 
99,99c103,103
< 					new PersistElementCommand(editingDomain, viewToPersist);
---
>                     editingDomain, viewToPersist);
117a122,126
>      * Returns the top view that should be persisted, starting from the passed
>      * view, it could return the passed view itself if it is a transient view,
>      * other wise it will check its parent and so on ...
>      * 
>      * @param view ,
118,121d121
< 	 * Returns the top view that should be persisted,
< 	 * starting from the passed view, it could return the passed view
< 	 * itself if it is a transient view, other wise it will check its
< 	 * parent and so on ...
122,122c127,127
< 	 * @param view , view to start from
---
>      *            view to start from
137,137c142,142
< 			if (dContainer.eIsSet(NotationPackage.eINSTANCE.getDiagram_TransientEdges()) &&
---
>             if (dContainer.eIsSet(NotationPackage.Literals
137a143,143
>                 .DIAGRAM__TRANSIENT_EDGES))
138,138d142
< 				dContainer.getTransientEdges().size()>0)
142,142d146
< 		}
143,143c147,147
< 		else if (container instanceof View){
---
>         } else if (container instanceof View) {
148a153,153
>                 .VIEW__TRANSIENT_CHILDREN))
148,148c152,152
< 			if (vContainer.eIsSet(NotationPackage.eINSTANCE.getView_TransientChildren()) &&
---
>             if (vContainer.eIsSet(NotationPackage.Literals
149,149d152
< 				vContainer.getTransientChildren().size()>0)
160a165,165
>      * @param view
161,161c166,166
< 	 * @param view view to destroy
---
>      *            view to destroy
165a171,173
>         Iterator it = new ArrayList(view.getChildren()).iterator();        
>         while (it.hasNext()) {
>             View child = (View) it.next();
166,168d170
< 		List children = view.getChildren();
< 		for ( int i = 0; i < children.size(); i++ ) {
< 			View child = (View)children.get(i);
175,175c180,180
< 	 * Returns the container view, or null if the container is not a view or null
---
>      * Returns the container view, or null if the container is not a view or
175a181,183
>      * null
>      * 
>      * @param eObject
176,176c184,184
< 	 * @param eObject  a notation view
---
>      *            a notation view
187,187d194
< 	
189a197,198
>      * inserted in the persisted collection if the <tt>persisted</tt> flag is
>      * <tt>true</tt>; otherwise it will be added to the transied collection.
189,189c196,196
< 	 * inserts a child  <code>View</code> in a container. the view will be inserted
---
>      * inserts a child <code>View</code> in a container. the view will be
190,191d196
< 	 * in the persisted collection if the <tt>persisted</tt> flag is <tt>true</tt>;
< 	 * otherwise it will be added to the transied collection.
192,192c199,199
< 	 * inserting a transient child does not dirty the model, inserting a persisted
---
>      * inserting a transient child does not dirty the model, inserting a
193,193c200,200
< 	 * child will dirty the model 
---
>      * persisted child will dirty the model
194a202,204
>      * @param containerView
>      *            the view's container
>      * @param childView
195,195d201
< 	 * @param containerView the view's container
196,196c205,205
< 	 * @param childView notation <code>View</Code> to insert 
---
>      *            notation <code>View</Code> to insert 
201,201c210,210
< 	public static void insertChildView(
---
>     public static void insertChildView(View containerView, View childView,
202,204d210
< 		View containerView,
< 		View childView,
< 		int index,
205,205c211,211
< 		boolean persisted) {
---
>             int index, boolean persisted) {
208,208d213
< 		}
209,209c214,214
< 		else {
---
>         } else {
215,215c220,220
< 	 * inserts a child into the transient list, inserting a transient child
---
>      * inserts a child into the transient list, inserting a transient child does
216a222,225
>      * 
>      * @param child ,
>      *            the child to insert
>      * @param container
216,216c221,221
< 	 * does not dirty
---
>      * not dirty
217,217d221
< 	 * @param child , the child to insert
218,218c226,226
< 	 * @param container notational element's container
---
>      *            notational element's container
220,220c228,228
< 	static private void insertTransientElement(final View container,final View child) {
---
>     static private void insertTransientElement(final View container,
220a229,229
>             final View child) {
231a241,246
>      * 
>      * @param container
>      *            the notational element's container
>      * @param child ,
>      *            the child to insert
>      * @param index
232,233d240
< 	 * @param container the notational element's container
< 	 * @param child , the child to insert
234,234c247,247
< 	 * @param index the notational element's position within the container.
---
>      *            the notational element's position within the container.
236,236c249,249
< 	static private void insertPersistedElement(View container,View child, int index) {
---
>     static private void insertPersistedElement(View container, View child,
236a250,250
>             int index) {
252a267,268
>      * 
>      * @param view
253,253c269,269
< 	  * @param view <code>View</code> to check
---
>      *            <code>View</code> to check
272,272c288,288
< 	 * gets a the first child in the passed <code>View</code> that had the same type as
---
>      * gets a the first child in the passed <code>View</code> that had the
272a289,291
>      * same type as the passed semantic hint.
>      * 
>      * @param view
273,273d288
< 	 * the passed semantic hint. 
274a293,293
>      * @param semanticHint
274,274c292,292
< 	 * @param view	the view to search inside
---
>      *            the view to search inside
275,275c294,294
< 	 * @param semanticHint	the semantic hint to look for
---
>      *            the semantic hint to look for
279a299,299
>             .hasNext();) {
279,279c298,298
< 		for(Iterator children = view.getChildren().iterator();children.hasNext();) {
---
>         for (Iterator children = view.getChildren().iterator(); children
288,288d307
< 	
290a310,311
>      * 
>      * @param view
291,291c312,312
< 	 * @param view  the view to use for the search
---
>      *            the view to use for the search
291a313,313
>      * @param id
292,292c314,314
< 	 * @param id	the property to look for
---
>      *            the property to look for
297a320,320
>                 .getElement((String) id);
297,297c319,319
< 			EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement((String)id);
---
>             EStructuralFeature feature = (EStructuralFeature) PackageUtil
299,299c322,322
< 				return isPropertySupported(view,feature, feature.getEContainingClass());
---
>                 return isPropertySupported(view, feature, feature
299a323,323
>                     .getEContainingClass());
306a331,332
>      * 
>      * @param view
307a334,334
>      * @param feature
307,307c333,333
< 	 * @param view  the view to use for the search
---
>      *            the view to use for the search
308,308c335,335
< 	 * @param feature	the feature to look for
---
>      *            the feature to look for
311,311c338,338
< 	public static boolean isFeatureSupported(View view,EStructuralFeature feature) {
---
>     public static boolean isFeatureSupported(View view,
311a339,339
>             EStructuralFeature feature) {
313a342,342
>                 .getEContainingClass());
313,313c341,341
< 			return isPropertySupported(view,feature, feature.getEContainingClass());
---
>             return isPropertySupported(view, feature, feature
319a349,350
>      * 
>      * @param view
320,320c351,351
< 	 * @param view  the view to use for the search
---
>      *            the view to use for the search
320a352,354
>      * @param feature
>      *            the feature to look for
>      * @param featureClass
321,321d351
< 	 * @param feature the feature to look for
322,322c355,355
< 	 * @param featureClass the feature's <code>EClass</code>
---
>      *            the feature's <code>EClass</code>
324a358,358
>     public static boolean isPropertySupported(View view,
325,325c359,359
< 	public static  boolean isPropertySupported(View view,EStructuralFeature feature, EClass featureClass) {
---
>             EStructuralFeature feature, EClass featureClass) {
341a376,377
>      * 
>      * @param view
342a379,379
>      * @param feature
342,342c378,378
< 	 * @param view the view to use to get the value
---
>      *            the view to use to get the value
343,343c380,380
< 	 * @param feature the feature to use
---
>      *            the feature to use
346,346c383,383
< 	static public final Object getStructuralFeatureValue(View view, EStructuralFeature feature) {
---
>     static public final Object getStructuralFeatureValue(View view,
346a384,384
>             EStructuralFeature feature) {
348,348c386,386
< 				return ViewUtil.getPropertyValue(view,feature, feature.getEContainingClass());
---
>             return ViewUtil.getPropertyValue(view, feature, feature
348a387,387
>                 .getEContainingClass());
354a394,400
>      * passed view
>      * 
>      * @param view
>      *            the view to use to get the value
>      * @param feature
>      *            the featrue to use to get the value
>      * @param featureClass
354,354c393,393
< 	 * Returns the value of the featrue inside a specific EClass within the passed view
---
>      * Returns the value of the featrue inside a specific EClass within the
355,356d393
< 	 * @param view the view to use to get the value
< 	 * @param feature the featrue to use to get the value
357,357c401,401
< 	 * @param featureClass the <code>EClass</code> to use to get the feature
---
>      *            the <code>EClass</code> to use to get the feature
359a404,404
>     public static Object getPropertyValue(View view,
360,360c405,405
< 	public static  Object getPropertyValue(View view,EStructuralFeature feature, EClass featureClass) {
---
>             EStructuralFeature feature, EClass featureClass) {
380,380c425,425
< 	 * Sets the passed feature if possible on the passed view
---
>      * Sets the passed feature if possible on the passed view to the passed
380a426,432
>      * value.
>      * 
>      * @param view
>      *            the view to set the value on
>      * @param feature
>      *            the feature to use
>      * @param value
381,383d425
< 	 * to the passed value.
< 	 * @param view the view to set the value on 
< 	 * @param feature the feature to use
384,384c433,433
< 	 * @param value  the value of the property being set
---
>      *            the value of the property being set
386a436,436
>             EStructuralFeature feature, Object value) {
386,386c435,435
< 	public static void setStructuralFeatureValue(View view,EStructuralFeature feature,Object value) {
---
>     public static void setStructuralFeatureValue(View view,
388,388c438,438
< 				ViewUtil.setPropertyValue(view,feature, feature.getEContainingClass(), value);
---
>             ViewUtil.setPropertyValue(view, feature, feature
388a439,439
>                 .getEContainingClass(), value);
394,394c445,445
< 	 * Sets the passed featrue on the passed EClass inside the passed view
---
>      * Sets the passed featrue on the passed EClass inside the passed view to
395,395c446,446
< 	 * to the new value if possible
---
>      * the new value if possible
395a447,454
>      * 
>      * @param view
>      *            the view to set the value on
>      * @param feature
>      *            the feature to set
>      * @param featureClass
>      *            <code> EClass </code> that owns the feature
>      * @param value
396,398d446
< 	 * @param view the view to set the value on 
< 	 * @param feature the feature to set
< 	 * @param featureClass <code> EClass </code> that owns the feature
399,399c455,455
< 	 * @param value  the value of the feature being set
---
>      *            the value of the feature being set
401,401c457,457
< 	public static void setPropertyValue(View view,EStructuralFeature feature, EClass featureClass, Object value) {
---
>     public static void setPropertyValue(View view, EStructuralFeature feature,
401a458,458
>             EClass featureClass, Object value) {
436a494,494
>                 .getEditingDomain(view);
436,436c493,493
<             TransactionalEditingDomain domain = TransactionUtil.getEditingDomain(view);
---
>             TransactionalEditingDomain domain = TransactionUtil
444a503,503
>      * resolves the passed element, and returns it. If the element is
445,445d502
< 	 * resolves the passed element, and returns it.
446,446c504,504
< 	 * If the element is unresolvable the method will returns <code>null</code>
---
>      * unresolvable the method will returns <code>null</code>
446a505,506
>      * 
>      * @param the
447,447c507,507
< 	 * @param the element to resolve
---
>      *            element to resolve
452,452c512,512
<             TransactionalEditingDomain domain = TransactionUtil.getEditingDomain(object);
---
>             TransactionalEditingDomain domain = TransactionUtil
452a513,513
>                 .getEditingDomain(object);
460,460c521,521
< 	 * gets the <code>View</code>'s semantic element Class Id, this could be used to
---
>      * gets the <code>View</code>'s semantic element Class Id, this could be
461a523,524
>      * 
>      * @param view
461,461c522,522
< 	 * check the semantic element type
---
>      * used to check the semantic element type
462,462c525,525
< 	 * @param view the owner of the semantic element
---
>      *            the owner of the semantic element
466a530,530
>         return element == null ? null
467,467c531,531
< 	    return element == null ? null : PackageUtil.getID(EMFCoreUtil.getProxyClass(element));
---
>             : PackageUtil.getID(EMFCoreUtil.getProxyClass(element));
471a536,537
>      * 
>      * @param view
472,472c538,538
< 	 * @param view the view to use
---
>      *            the view to use
476,476c542,542
< 		if (!view.eIsSet(NotationPackage.eINSTANCE.getView_SourceEdges()))
---
>         if (!view.eIsSet(NotationPackage.Literals.VIEW__SOURCE_EDGES))
482a549,550
>      * 
>      * @param view
483,483c551,551
< 	 * @param view the view to use
---
>      *            the view to use
487,487c555,555
< 		if (!view.eIsSet(NotationPackage.eINSTANCE.getView_TargetEdges()))
---
>         if (!view.eIsSet(NotationPackage.Literals.VIEW__TARGET_EDGES))
492a561,618
>      * gets all the <code>Edge</code>'s whose source is this view
>      * 
>      * @param view
>      *            the view to use
>      * @return List the edges list
>      */
>      public static List getSourceConnectionsConnectingVisibleViews(View view) {
>         if (!view.eIsSet(NotationPackage.Literals.VIEW__SOURCE_EDGES))
>             return Collections.EMPTY_LIST;
>         List sourceConnections = new ArrayList();
>         Iterator iter = view.getSourceEdges().iterator();
>         while (iter.hasNext()) {
>             Edge edge = (Edge)iter.next();
>             View target = edge.getTarget();
>             if (edge.isVisible() && isVisible(target)){
>                 sourceConnections.add(edge);
>             }
>             
>         }
>         return sourceConnections;
>      }
>     
>     
> 
>      private static boolean isVisible(View target) {
>         if (target.isVisible()){
>             EObject parent = target.eContainer();
>             if (parent instanceof View){
>                 return isVisible((View)parent);
>             }
>             return true;
>         }
>         return false;
>     }
>      
>     /**
>      * gets all the <code>Edge</code>'s whose target is this view
>      * 
>      * @param view
>      *            the view to use
>      * @return List the edges list
>      */
>      public static List getTargetConnectionsConnectingVisibleViews(View view) {
>         if (!view.eIsSet(NotationPackage.Literals.VIEW__TARGET_EDGES))
>             return Collections.EMPTY_LIST;
>         List targteConnections = new ArrayList();
>         Iterator iter = view.getTargetEdges().iterator();
>         while (iter.hasNext()) {
>             Edge edge = (Edge)iter.next();
>             View source = edge.getSource();
>             if (edge.isVisible() && isVisible(source)){
>                 targteConnections.add(edge);
>             }
>         }
>         return targteConnections;
>      }
> 
>     /**
493,493c619,619
< 	 * return eClass Name of the view's semantic element, this method 
---
>      * return eClass Name of the view's semantic element, this method works only
494a621,623
>      * Empty String
>      * 
>      * @param view
494,494c620,620
< 	 * works only if the semantic element is a NameElement, otherwise 
---
>      * if the semantic element is a NameElement, otherwise it will return an
495,495d620
< 	 * it will return an Empty String 
496,496c624,624
< 	 * @param  view	the view object
---
>      *            the view object
507a636,637
>      * 
>      * @param view
508,508c638,638
< 	 * @param view the view
---
>      *            the view
522a653,663
>      * 
>      * @param container
>      *            the view's container
>      * @param child
>      *            the child to reposition
>      * @param newIndex
>      *            (zero-based)
>      * @throws IndexOutOfBoundsException
>      *             if index is out of bounds
>      * @throws IllegalArgumentException
>      *             if the child is not contianed by the container, or if the new
523,527d652
< 	 * @param container the view's container
< 	 * @param child the child to reposition
< 	 * @param newIndex (zero-based)
< 	 * @throws IndexOutOfBoundsException if index is out of bounds
< 	 * @throws IllegalArgumentException if the child is not contianed by the container,
528,528c664,664
< 	 * or if the new position is the <code>ViewUtil.APPEND</code>position 
---
>      *             position is the <code>ViewUtil.APPEND</code>position
530a667,667
>             int newIndex) {
530,530c666,666
< 	static public void repositionChildAt(View container , View child, int newIndex) {
---
>     static public void repositionChildAt(View container, View child,
532a670,670
>             throw new IllegalArgumentException(
533,533c671,671
< 			throw new IllegalArgumentException("child is not an existing child of the view"); //$NON-NLS-1$
---
>                 "child is not an existing child of the view"); //$NON-NLS-1$
534a673,673
>             throw new IllegalArgumentException(
535,535c674,674
< 			throw new IllegalArgumentException("append position is not allowed for reposition"); //$NON-NLS-1$
---
>                 "append position is not allowed for reposition"); //$NON-NLS-1$
541a681,682
>      * 
>      * @param view
542a684,684
>      * @param idStr
542,542c683,683
< 	 * @param view the view to search in 
---
>      *            the view to search in
543,543c685,685
< 	 * @param idStr the child's id
---
>      *            the child's id
547a690,690
>             .hasNext();) {
547,547c689,689
< 		for(Iterator children = view.getChildren().iterator();children.hasNext();) {
---
>         for (Iterator children = view.getChildren().iterator(); children
557,557c700,700
<      * Sets the property with the given id if possible on the passed view
---
>      * Sets the property with the given id if possible on the passed view to the
557a701,705
>      * passed value.
>      * 
>      * @param view
>      *            the view to set the value on
>      * @param id
558,559d700
<      * to the passed value.
<      * @param view the view to set the value on 
560a707,707
>      * @param value
560,560c706,706
<      * @param id  the id of the property being set
---
>      *            the id of the property being set
561a709,709
>      * @deprecated use
561,561c708,708
<      * @param value  the value of the property being set
---
>      *            the value of the property being set
562,562c710,710
<      * @deprecated use {@link ViewUtil#setStructuralFeatureValue(View, EStructuralFeature, Object}} instead
---
>      *             {@link ViewUtil#setStructuralFeatureValue(View, EStructuralFeature, Object}}
562a711,711
>      *             instead
566a716,716
>                 .getElement((String) id);
566,566c715,715
<             EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement((String)id);
---
>             EStructuralFeature feature = (EStructuralFeature) PackageUtil
568a719,719
>                     .getEContainingClass(), value);
568,568c718,718
<                 ViewUtil.setPropertyValue(view,feature, feature.getEContainingClass(), value);
---
>                 ViewUtil.setPropertyValue(view, feature, feature
575,575c726,726
<      * Returns the value of the property with the given id inside the passed view
---
>      * Returns the value of the property with the given id inside the passed
575a727,731
>      * view
>      * 
>      * @param view
>      *            the view to use to get the value
>      * @param id
576,576d726
<      * @param view the view to use to get the value
577,577c732,732
<      * @param id the id of the property to get
---
>      *            the id of the property to get
578a734,734
>      * @deprecated use
579,579c735,735
<      * @deprecated use {@link ViewUtil#getStructuralFeatureValue(View, EStructuralFeature)} instead
---
>      *             {@link ViewUtil#getStructuralFeatureValue(View, EStructuralFeature)}
579a736,736
>      *             instead
583a741,741
>                 .getElement((String) id);
583,583c740,740
<             EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement((String)id);
---
>             EStructuralFeature feature = (EStructuralFeature) PackageUtil
585,585c743,743
<                 return ViewUtil.getPropertyValue(view,feature, feature.getEContainingClass());
---
>                 return ViewUtil.getPropertyValue(view, feature, feature
585a744,744
>                     .getEContainingClass());
