24a25,25
> import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
32a34,34
> import org.eclipse.gmf.runtime.notation.View;
82a85,103
>          * @param persisted
>          *            indicates if ths connector will be created as a persisted
>          *            connector or transient connector
>          * @param preferencesHint
>          *            The preference hint that is to be used to find the
>          *            appropriate preference store from which to retrieve
>          *            diagram preference values. The preference hint is mapped
>          *            to a preference store in the preference registry <@link
>          *            DiagramPreferencesRegistry>.
>          */
>         public ConnectionViewDescriptor(IAdaptable elementAdapter,
>                 boolean persisted, PreferencesHint preferencesHint) {
>             super(elementAdapter, Edge.class,persisted, preferencesHint);
>         }
> 
> 		/**
> 		 * Constructor.
> 		 * 
> 		 * @param elementAdapter
100a122,141
>          * @param persisted
>          *            Indicates if the connector will be created as a transient
>          *            or persisted connector 
>          * @param preferencesHint
>          *            The preference hint that is to be used to find the
>          *            appropriate preference store from which to retrieve
>          *            diagram preference values. The preference hint is mapped
>          *            to a preference store in the preference registry <@link
>          *            DiagramPreferencesRegistry>.
>          */
>         public ConnectionViewDescriptor(IAdaptable elementAdapter,
>                 String semanticHint,boolean persisted, PreferencesHint preferencesHint) {
>             super(elementAdapter, Edge.class, semanticHint,persisted, preferencesHint);
>         }
> 
> 		/**
> 		 * Constructor.
> 		 * 
> 		 * @param elementAdapter
> 		 * @param semanticHint
145a187,200
>      * @param element
>      *            a semantic element
>      * @param boolean
>      *            indicate if the connection will be persisted or not
>      */
>     public CreateConnectionViewRequest(EObject element,
>             boolean persisted, PreferencesHint preferencesHint) {
>         this(new ConnectionViewDescriptor(new EObjectAdapter(element),
>             persisted,preferencesHint));
>     }
> 
> 	/**
> 	 * Constructor.
> 	 * 
216a272,272
>         boolean transientTargetOrSource = hasTransientSourceOrTarget(sourceEditPart, targetEditPart);
219,219c275,275
< 			element, preferencesHint);
---
> 			element,!transientTargetOrSource, preferencesHint);
228a285,321
>     private static boolean hasTransientSourceOrTarget(EditPart sourceEditPart, EditPart targetEditPart) {
>         boolean transientTargetOrSource = hasTransientView(sourceEditPart);
>         if (!transientTargetOrSource){
>             transientTargetOrSource = hasTransientView(targetEditPart);
>         }
>         return transientTargetOrSource;
>     }
>     
>     private static boolean hasTransientSourceOrTarget(IAdaptable sourceView,IAdaptable targetView) {
>         boolean transientTargetOrSource = hasTransientView(sourceView);
>         if (!transientTargetOrSource){
>             transientTargetOrSource = hasTransientView(targetView);
>         }
>         return transientTargetOrSource;
>     }
> 
>     private static boolean hasTransientView(EditPart sourceEditPart) {
>         boolean transientTargetOrSource = false;
>         if (sourceEditPart.getModel() instanceof View){
>             View srcView = (View)sourceEditPart.getModel();
>             if (ViewUtil.isTransient(srcView)){
>                 transientTargetOrSource = true;
>             }
>         }
>         return transientTargetOrSource;
>     }
>     
>     private static boolean hasTransientView(IAdaptable adaptable) {
>         View view = (View)adaptable.getAdapter(View.class);
>         if (view !=null){
>             if (ViewUtil.isTransient(view)){
>                 return true;
>             }
>         }
>         return false;
>     }
> 
266a360,360
>         boolean transientTargetOrSource = hasTransientSourceOrTarget(sourceViewAdapter, targetViewAdapter);
268,268c362,362
< 			new ConnectionViewDescriptor(elementAdapter, preferencesHint),
---
> 			new ConnectionViewDescriptor(elementAdapter,!transientTargetOrSource, preferencesHint),
304,304d397
< 
307,307d399
<         
309,309d400
< 
314,314d404
< 		// sceCommand.setNewSourceTerminal("anchor"); //$NON-NLS-1$
316,327d405
< 		// sceCommand.setNewTargetTerminal("anchor"); //$NON-NLS-1$
< 
< 		// Need some bendpoints set, otherwise a null exception occurs
< 		// when the user tries to bend the .
< 		// SetBendpointsCommand sbbCommand = new SetBendpointsCommand();
< 		// sbbCommand.setConnectorAdapter(viewAdapter);
< 		// PointList pointList = new PointList();
< 		// pointList.addPoint(new Point(0, 0));
< 		// pointList.addPoint(new Point(0, 0));
< 		// sbbCommand.setNewPointList(pointList, new Point(0, 0), new Point(0,
< 		// 0));
< 
331,331d408
< 		// cc.compose(sbbCommand);
