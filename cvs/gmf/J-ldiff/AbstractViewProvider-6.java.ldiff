23,23c54,54
< 
---
> 
30,30c30,30
< import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateConnectorViewOperation;
---
> import org.eclipse.gmf.runtime.diagram.core.internal.services.view.CreateEdgeViewOperation;
46a46,46
>  * implementations invokes the approrpiate factory method by inspecting the
46,46c45,45
<  * Implements of the <code>IViewProvider</code> interface.  
---
>  * Implements of the <code>IViewProvider</code> interface. This
47,47d45
<  * This implementations invokes the approrpiate factory method by inspecting the supplied
48,48c47,47
<  * operation and provides the actual view creation functionality.
---
>  * supplied operation and provides the actual view creation functionality.
50a50,50
> 	extends AbstractProvider
50,50c49,49
< public class AbstractViewProvider extends AbstractProvider
---
> public class AbstractViewProvider
56,56c57,57
< 	static protected class ClassToCreationMethodMap extends HashMap{
---
> 	static protected class ClassToCreationMethodMap
56a58,59
> 		extends HashMap {
> 
67,67c70,70
< 	public static ClassToCreationMethodMap classToCreateMethod =
---
> 	public static ClassToCreationMethodMap classToCreateMethod = new ClassToCreationMethodMap();
68,68d70
< 		new ClassToCreationMethodMap();
71,71c73,73
< 	 * Determines whether this view provider can provide for the required operation
---
> 	 * Determines whether this view provider can provide for the required
71a74,74
> 	 * operation It inspects the type of view operation and calls the
72a76,76
> 	 * 
72,72c75,75
< 	 * It inspects the type of view operation and calls the corresponding <code>provides</code> method.
---
> 	 * corresponding <code>provides</code> method.
86,86c90,90
< 		else if (operation instanceof CreateConnectorViewOperation)
---
> 		else if (operation instanceof CreateEdgeViewOperation)
87,87c91,91
< 			return provides((CreateConnectorViewOperation) operation);
---
> 			return provides((CreateEdgeViewOperation) operation);
93,93c97,97
< 	public final Diagram createDiagram(
---
> 	public final Diagram createDiagram(IAdaptable contextElement,
94,94d97
< 			IAdaptable contextElement,
95a99,99
> 		return (Diagram) createNewView(getDiagramViewClass(contextElement,
96,97d98
< 		return (Diagram) createNewView(
< 					getDiagramViewClass(
98,98c100,100
< 						contextElement, diagramKind),
---
> 			diagramKind), new Object[] {contextElement, diagramKind,
99,101d100
< 					new Object[] {
< 						contextElement,
< 						diagramKind,
105,105c104,104
< 	public final Edge createEdge(
---
> 	public final Edge createEdge(IAdaptable semanticAdapter,
106,107d104
< 		IAdaptable semanticAdapter,
< 		View containerView,
108,108c105,105
< 		String semanticHint,
---
> 			View containerView, String semanticHint, int index,
109,109d105
< 		int index,
111a108,110
> 		return (Edge) createNewView(getEdgeViewClass(semanticAdapter,
> 			containerView, semanticHint), new Object[] {semanticAdapter,
> 			containerView, semanticHint, new Integer(index),
112,121d107
< 		return (Edge)createNewView(
< 			getConnectorViewClass(
< 				semanticAdapter,
< 				containerView,
< 				semanticHint),
< 			new Object[] {
< 				semanticAdapter,
< 				containerView,
< 				semanticHint,
< 				new Integer(index),
122,122c111,111
< 				Boolean.valueOf(persisted),
---
> 			Boolean.valueOf(persisted), preferencesHint});
123,123d111
< 				preferencesHint});
126,126c114,114
< 	public final Node createNode(
---
> 	public final Node createNode(IAdaptable semanticAdapter,
127,128d114
< 			IAdaptable semanticAdapter,
< 			View containerView,
129,129c115,115
< 			String semanticHint,
---
> 			View containerView, String semanticHint, int index,
130,130d115
< 			int index,
132a118,120
> 		return (Node) createNewView(getNodeViewClass(semanticAdapter,
> 			containerView, semanticHint), new Object[] {semanticAdapter,
> 			containerView, semanticHint, new Integer(index),
133,142d117
< 			return (Node)createNewView(
< 				getNodeViewClass(
< 					semanticAdapter,
< 					containerView,
< 					semanticHint),
< 				new Object[] {
< 					semanticAdapter,
< 					containerView,
< 					semanticHint,
< 					new Integer(index),
143,143c121,121
< 					Boolean.valueOf(persisted),
---
> 			Boolean.valueOf(persisted), preferencesHint});
144,144d121
< 					preferencesHint});
148a126,128
> 	 * creation operation
> 	 * 
> 	 * @param operation
148,148c125,125
< 	 * Determines whether this provider can provide for the specified view creation operation
---
> 	 * Determines whether this provider can provide for the specified view
149,149c129,129
< 	 * @param operation Contains a semantic kind and a containerView
---
> 	 *            Contains a semantic kind and a containerView
154,154c134,134
< 			return getNodeViewClass(op.getSemanticAdapter(), op.getContainerView(), op.getSemanticHint()) != null;
---
> 			return getNodeViewClass(op.getSemanticAdapter(), op
154a135,135
> 				.getContainerView(), op.getSemanticHint()) != null;
155a137,137
> 			return getEdgeViewClass(op.getSemanticAdapter(), op
156,156c138,138
< 			return getConnectorViewClass(op.getSemanticAdapter(), op.getContainerView(), op.getSemanticHint()) != null;
---
> 				.getContainerView(), op.getSemanticHint()) != null;
161,161c143,143
< 	 * Determines whether this provider can provide for the specified diagram view operation
---
> 	 * Determines whether this provider can provide for the specified diagram
161a144,145
> 	 * view operation
> 	 * 
166a151,151
> 			.getSemanticHint()) != null;
166,166c150,150
< 		return getDiagramViewClass(operation.getSemanticAdapter(), operation.getSemanticHint()) != null;
---
> 		return getDiagramViewClass(operation.getSemanticAdapter(), operation
170,170c155,155
< 	 * Determines whether this provider can provide for the specified connector view operation
---
> 	 * Determines whether this provider can provide for the specified edge view
170a156,157
> 	 * operation
> 	 * 
174,174c161,161
< 	protected boolean provides(CreateConnectorViewOperation operation) {
---
> 	protected boolean provides(CreateEdgeViewOperation operation) {
174a162,162
> 		return (getEdgeViewClass(operation.getSemanticAdapter(), operation
175,178d161
< 		return (
< 				getConnectorViewClass(
< 					operation.getSemanticAdapter(),
< 					operation.getContainerView(),
179,179c163,163
< 					operation.getSemanticHint())
---
> 			.getContainerView(), operation.getSemanticHint()) != null);
180,180d163
< 					!= null);
184,184c167,167
< 	 * Determines whether this provider can provide for the specified node view operation
---
> 	 * Determines whether this provider can provide for the specified node view
184a168,169
> 	 * operation
> 	 * 
188a174,174
> 		return (getNodeViewClass(operation.getSemanticAdapter(), operation
189,192d173
< 		return (
< 				getNodeViewClass(
< 					operation.getSemanticAdapter(),
< 					operation.getContainerView(),
193,193c175,175
< 					operation.getSemanticHint())
---
> 			.getContainerView(), operation.getSemanticHint()) != null);
194,194d175
< 					!= null);
198a180,180
> 	 * 
199,199c181,181
< 	 * @param semanticAdapter TODO
---
> 	 * @param semanticAdapter
199a182,182
> 	 *            TODO
203,203c186,186
< 	protected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {
---
> 	protected Class getDiagramViewClass(IAdaptable semanticAdapter,
203a187,187
> 			String diagramKind) {
208,208c192,192
< 	 * Returns the connector view class to instantiate based on the passed params
---
> 	 * Returns the edge view class to instantiate based on the passed params
208a193,193
> 	 * 
213a199,199
> 	protected Class getEdgeViewClass(IAdaptable semanticAdapter,
214,216d198
< 	protected Class getConnectorViewClass(
< 		IAdaptable semanticAdapter,
< 		View containerView,
217,217c200,200
< 		String semanticHint) {
---
> 			View containerView, String semanticHint) {
222a206,206
> 	 * 
228,228c212,212
< 	protected Class getNodeViewClass(
---
> 	protected Class getNodeViewClass(IAdaptable semanticAdapter,
229,230d212
< 		IAdaptable semanticAdapter,
< 		View containerView,
231,231c213,213
< 		String semanticHint) {
---
> 			View containerView, String semanticHint) {
236a219,220
> 	 * 
> 	 * @param constructorParams
237,237c221,221
< 	 * @param constructorParams the view's constructor parameters.
---
> 	 *            the view's constructor parameters.
245a230,233
> 				Log
> 					.error(
> 						DiagramPlugin.getInstance(),
> 						DiagramStatusCodes.SERVICE_FAILURE,
246,246c234,234
< 				Log.error(DiagramPlugin.getInstance(), DiagramStatusCodes.SERVICE_FAILURE, "View (" + viewClass + ") is missing a proper creation Factory");  //$NON-NLS-1$//$NON-NLS-2$
---
> 						"View (" + viewClass + ") is missing a proper creation Factory"); //$NON-NLS-1$//$NON-NLS-2$
252a241,244
> 				Log
> 					.error(
> 						DiagramPlugin.getInstance(),
> 						DiagramStatusCodes.SERVICE_FAILURE,
253,253c245,245
< 				Log.error(DiagramPlugin.getInstance(), DiagramStatusCodes.SERVICE_FAILURE, "View (" + viewClass + ") is missing a proper creation Factory");  //$NON-NLS-1$//$NON-NLS-2$
---
> 						"View (" + viewClass + ") is missing a proper creation Factory"); //$NON-NLS-1$//$NON-NLS-2$
258,258c250,250
< 			String eMsg = MessageFormat.format(  
---
> 			String eMsg = MessageFormat.format(DiagramResourceManager
258a251,251
> 				.getInstance().getString(
259,259c252,252
< 				DiagramResourceManager.getInstance().getString("AbstractViewProvider.create.view.failed_ERROR_"),//$NON-NLS-1$
---
> 					"AbstractViewProvider.create.view.failed_ERROR_"),//$NON-NLS-1$
285,285d277
< 			Method[] methods = 
286,286c278,278
< 				viewClass.getMethods();
---
> 			Method[] methods = viewClass.getMethods();
290,290c282,282
< 				if (methodName.equals(viewCreationMethodName)||
---
> 				if (methodName.equals(viewCreationMethodName)
291,291c283,283
< 					methodName.equals(diagramCreationMethodName)) {
---
> 					|| methodName.equals(diagramCreationMethodName)) {
301a294,294
> 	 * 
311,311c304,304
< 		IElementType type = (IElementType) semanticAdapter.getAdapter(IElementType.class);
---
> 		IElementType type = (IElementType) semanticAdapter
311a305,305
> 			.getAdapter(IElementType.class);
318a313,313
> 	 * 
327,327c322,322
< 			return ProxyUtil.resolve(MEditingDomainGetter.getMEditingDomain(eObject),
---
> 			return ProxyUtil.resolve(MEditingDomainGetter
327a323,323
> 				.getMEditingDomain(eObject), eObject);
328,328d322
< 				eObject);
333a329,329
> 	 * 
337,337c333,333
< 	protected EObject getSemanticElement(IAdaptable semanticAdapter, MEditingDomain domain) {
---
> 	protected EObject getSemanticElement(IAdaptable semanticAdapter,
337a334,334
> 			MEditingDomain domain) {
