17,17d16
< import org.eclipse.emf.codegen.jet.JETEmitter;
19,19c18,18
< import org.eclipse.emf.common.util.BasicMonitor;
---
> import org.eclipse.gmf.common.codegen.ImportAssistant;
20,20d18
< import org.eclipse.gmf.common.UnexpectedBehaviourException;
21a22,22
> import org.eclipse.gmf.gmfgraph.PolygonDecoration;
22,22c23,23
< import org.eclipse.gmf.gmfgraph.CustomFigure;
---
> import org.eclipse.gmf.gmfgraph.Polyline;
23,23d23
< import org.eclipse.gmf.gmfgraph.DecorationFigure;
26a25,26
> import org.eclipse.gmf.gmfgraph.PolylineDecoration;
> import org.eclipse.gmf.gmfgraph.RoundedRectangle;
27a28,35
> import org.eclipse.gmf.graphdef.codegen.templates.FigureAttrGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.FigureChildrenGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.LabelAttrGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.NewFigureGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.PolygonDecorationAttrGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.PolylineAttrGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.PolylineDecorationAttrGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.RoundedRectAttrGenerator;
28,31d27
< import org.eclipse.gmf.graphdef.codegen.templates.ConnectionGenerator;
< import org.eclipse.gmf.graphdef.codegen.templates.CustomFigureGenerator;
< import org.eclipse.gmf.graphdef.codegen.templates.DecorationFigureGenerator;
< import org.eclipse.gmf.graphdef.codegen.templates.LabelGenerator;
32,32c36,36
< import org.eclipse.gmf.graphdef.codegen.templates.ShapeAttrsGenerator;
---
> import org.eclipse.gmf.graphdef.codegen.templates.ShapeAttrGenerator;
32a37,38
> import org.eclipse.gmf.graphdef.codegen.templates.TopConnectionGenerator;
> import org.eclipse.gmf.graphdef.codegen.templates.TopFigureGenerator;
33,33c39,39
< import org.eclipse.gmf.graphdef.codegen.templates.ShapeGenerator;
---
> import org.eclipse.gmf.graphdef.codegen.templates.TopShapeGenerator;
34a41,41
> import org.eclipse.gmf.internal.graphdef.codegen.HierarchyKeyMap;
35a43,43
> import org.eclipse.gmf.internal.graphdef.codegen.KeyMap;
35,35c42,42
< import org.eclipse.gmf.internal.graphdef.codegen.NoSuchTemplateException;
---
> import org.eclipse.gmf.internal.graphdef.codegen.KeyChain;
47,47d54
< 	private YAEmitterFactory myFactory;
48,48c55,55
< 	private Dispatcher myDispatcher;
---
> 	private Dispatcher myTopDispatcher;
48a56,56
> 	private Dispatcher myInnerDispatcher;
63a72,87
> 		KeyMap keyMap = new HierarchyKeyMap() {
> 			/*
> 			 * Capture knowledge that we use classes and strings as keys
> 			 */
> 			public KeyChain map(Object key) {
> 				if (key instanceof String) {
> 					return super.map(key);
> 				} else {
> 					return super.map(key.getClass());
> 				}
> 			}
> 		};
> 		YAEmitterFactory topFactory = new YAEmitterFactory(thisBundle.getEntry("/"), fillTopLevel(), true, variables, true);
> 		myTopDispatcher = new DispatcherImpl(topFactory, keyMap);
> 		YAEmitterFactory innerFactory = new YAEmitterFactory(thisBundle.getEntry("/"), fillAttrs(), true, variables, true);
> 		myInnerDispatcher = new DispatcherImpl(innerFactory, keyMap);
64,65d71
< 		myFactory = new YAEmitterFactory(thisBundle.getEntry("/"), fill(), true, variables, true);
< 		myDispatcher = new DispatcherImpl(myFactory);
74a97,110
> 	private static TemplateRegistry fillTopLevel() {
> 		StaticTemplateRegistry tr = new StaticTemplateRegistry();
> 		tr.put(PolylineConnection.class, "/templates/PolylineConnection.javajet", TopConnectionGenerator.class);
> 		tr.put(Shape.class, "/templates/top/Shape.javajet", TopShapeGenerator.class);
> 		tr.put(Figure.class, "/templates/top/Figure.javajet", TopFigureGenerator.class);
> 		return tr;
> 	}
> 
> 	// XXX NOTE, the fact we use "instantiate" and "Children" strings
> 	// helps us to postpone resolution of the next problem (one we make these twwo overridable):
> 	// it's not possible to tell from single dispatcher.dispatch(Figure, args) what's the intention - 
> 	// whether to instantiate, look for children or initialize attributes
> 	// Perhaps, we should have distinct methods in the Dispatcher, or add "hint" as another argument
> 	private static TemplateRegistry fillAttrs() {
75,75d96
< 	private static TemplateRegistry fill() {
76a112,126
> 		tr.put(Figure.class, "/templates/attr/Figure.javajet", FigureAttrGenerator.class);
> 		tr.put(Shape.class, "/templates/attr/Shape.javajet", ShapeAttrGenerator.class);
> 		tr.put(Label.class, "/templates/attr/Label.javajet", LabelAttrGenerator.class);
> 		tr.put(Polyline.class, "/templates/attr/Polyline.javajet", PolylineAttrGenerator.class);
> 		tr.put(RoundedRectangle.class, "/templates/attr/RoundedRectangle.javajet", RoundedRectAttrGenerator.class);
> 		tr.put(PolygonDecoration.class, "/templates/attr/PolygonDecoration.javajet", PolygonDecorationAttrGenerator.class);
> 		tr.put(PolylineDecoration.class, "/templates/attr/PolylineDecoration.javajet", PolylineDecorationAttrGenerator.class);
> 		// instantiation templates - only single one now. FIXME - make it overridable
> 		tr.put("instantiate", "/templates/new/Figure.javajet", NewFigureGenerator.class);
> 		// children templates - only single one now. FIXME - make it overridable
> 		tr.put("Children", "/templates/children/Figure.javajet", FigureChildrenGenerator.class);
> 		// FIXME same template is registered twice
> 		tr.put("Shape", "/templates/attr/Shape.javajet", ShapeAttrGenerator.class);
> 		tr.put("Figure", "/templates/attr/Figure.javajet", FigureAttrGenerator.class);
> 		tr.put("PolylineDecoration", "/templates/attr/PolylineDecoration.javajet", PolylineDecorationAttrGenerator.class);
77,82d111
< 		tr.put(PolylineConnection.class, "/templates/PolylineConnection.javajet", ConnectionGenerator.class);
< 		tr.put(DecorationFigure.class, "/templates/DecorationFigure.javajet", DecorationFigureGenerator.class);
< 		tr.put(Shape.class, "/templates/ConcreteShape.javajet", ShapeGenerator.class);
< 		tr.put(Label.class, "/templates/Label.javajet", LabelGenerator.class);
< 		tr.put(CustomFigure.class, "/templates/CustomFigure.javajet", CustomFigureGenerator.class);
< 		tr.put("ShapeAttrs", "/templates/ShapeAttrs.javajet", ShapeAttrsGenerator.class);
86a131,131
> 		return go(fig, new NullImportAssistant());
87,98d130
< 		String res = null;
< 		try {
< 		if (fig instanceof PolylineConnection) {
< 			res = generate(fig, myFactory.acquireEmitter(PolylineConnection.class));
< 		} else if (fig instanceof DecorationFigure) {
< 			res = generate(fig, myFactory.acquireEmitter(DecorationFigure.class));
< 		} else if (fig instanceof Shape) {
< 			res = generate(fig, myFactory.acquireEmitter(Shape.class));
< 		} else if (fig instanceof CustomFigure) {
< 			res = generate(fig, myFactory.acquireEmitter(CustomFigure.class));
< 		} else if (fig instanceof Label) {
< 			res = generate(fig, myFactory.acquireEmitter(Label.class));
99a133,136
> 
> 	public String go(Figure fig, ImportAssistant importManager) {
> 		String res = null;
> 		res = myTopDispatcher.dispatch(fig, new Object[] {fig, importManager, myInnerDispatcher});
100,100d132
< // TODO: } else if (fig instanceof LabeledContainer) {
104,108d139
< 		} catch (UnexpectedBehaviourException ex) {
< 			throw new IllegalStateException(ex);
< 		} catch (NoSuchTemplateException ex) {
< 			throw new IllegalStateException(ex);
< 		}
111,115d141
< 
< 	private String generate(Figure fig, JETEmitter emitter) throws JETException {
< 		Object argument = new Object[] {fig, new NullImportAssistant(), myDispatcher};
< 		return emitter.generate(new BasicMonitor.Printing(System.out), new Object[] {argument});
< 	}
