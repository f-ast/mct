139,139c139,139
<  * A generic diagram editor with no palette.
---
>  * A generic diagram editor with no palette. DiagramEditorWithPalette will
140,140c140,140
<  * DiagramEditorWithPalette will provide a palette.
---
>  * provide a palette.
144a145,145
>     IShowInSource {
144,144c144,144
< 	implements IDiagramWorkbenchPart, ITabbedPropertySheetPageContributor, IShowInSource {
---
>     implements IDiagramWorkbenchPart, ITabbedPropertySheetPageContributor,
188a190,190
>         /*
189a192,192
>          * 
189,189c191,191
< 		/* (non-Javadoc)
---
>          * (non-Javadoc)
244a248,248
>             showOutlineAction
245,245c249,249
< 			showOutlineAction.setImageDescriptor(DiagramUIPluginImages.DESC_OUTLINE);
---
>                 .setImageDescriptor(DiagramUIPluginImages.DESC_OUTLINE);
252a257,257
>             showOverviewAction
253,253c258,258
< 			showOverviewAction.setImageDescriptor(DiagramUIPluginImages.DESC_OVERVIEW);
---
>                 .setImageDescriptor(DiagramUIPluginImages.DESC_OVERVIEW);
299,299c304,304
< 				TransactionUtil.getEditingDomain(getDiagram())
---
>                 TransactionUtil.getEditingDomain(getDiagram()).runExclusive(
300,300c305,305
< 					.runExclusive(new Runnable() {
---
>                     new Runnable() {
342,342c347,347
< 		 * show page with a specific ID, possibel values are 
---
>          * show page with a specific ID, possibel values are ID_OUTLINE and
343,343c348,348
< 		 * ID_OUTLINE and ID_OVERVIEW
---
>          * ID_OVERVIEW
343a349,349
>          * 
395a403,404
>     /**
>      * The workbench site This variable overrides another one defined in
396,396d402
< 	/** The workbench site
397,397c405,405
< 	 *  This variable overrides another one defined in <code>org.eclipse.ui.part<code>
---
>      * <code>org.eclipse.ui.part<code>
402a411,411
>     /**
403,403c412,412
< 	/** The RulerComposite used to enhance the graphical viewer to display
---
>      * The RulerComposite used to enhance the graphical viewer to display rulers
404,404d412
< 	 *  rulers
421a430,430
>      * 
422a432,432
>      *         mode
422,422c431,431
< 	 * @return int the integer value indicating the content-outline-page dispaly mode 
---
>      * @return int the integer value indicating the content-outline-page dispaly
435a446,446
>      * @param rulerComp
436,436c447,447
< 	 * @param rulerComp The rulerComp to set.
---
>      *            The rulerComp to set.
449,449c904,904
<         if (historyListener != null) {
---
>         if (historyListener != null) {
450a906,907
>                 historyListener);
>         }
450,450c905,905
<             getOperationHistory().addOperationHistoryListener(historyListener);
---
>             getOperationHistory().removeOperationHistoryListener(
451,451d905
< 	}
579,579c381,381
<         
---
>          * 
596a605,605
>             Trace.catching(DiagramUIPlugin.getInstance(),
597a607,607
>                 "init", e); //$NON-NLS-1$
597,597c606,606
< 			Trace.catching(DiagramUIPlugin.getInstance(), DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(), "init", e); //$NON-NLS-1$
---
>                 DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
602a613,613
>      * Disposes this editor by: <br>
603,603d612
< 	 * Disposes this editor by:
604,604c614,614
< 	 * <br> 3. Stops all registered listeners
---
>      * 3. Stops all registered listeners
604a615,615
>      * 
613a625,625
>          * the editor.
613,613c624,624
< 		 * RATLC00527385 DiagramRulerProvider wasn't uninitialized on dispose of the editor.
---
>          * RATLC00527385 DiagramRulerProvider wasn't uninitialized on dispose of
641,641c653,653
< 	 * Returns the KeyHandler with common bindings for both the Outline and Graphical Views.
---
>      * Returns the KeyHandler with common bindings for both the Outline and
642,642c654,654
< 	 * For example, delete is a common action.
---
>      * Graphical Views. For example, delete is a common action.
642a655,655
>      * 
699a713,713
>         getRulerComposite().setGraphicalViewer(
700,700d712
< 		getRulerComposite()
701,701c714,714
< 			.setGraphicalViewer((ScrollingGraphicalViewer) getGraphicalViewer());
---
>             (ScrollingGraphicalViewer) getGraphicalViewer());
723,723c736,736
< 		RootEditPart rootEP = EditPartService.getInstance()
---
>         RootEditPart rootEP = EditPartService.getInstance().createRootEditPart(
723a737,737
>             getDiagram());
724,724d736
< 			.createRootEditPart(getDiagram());
789a803,803
>                 getDiagramEditDomain());
789,789c802,802
<             DiagramCommandStack diagramStack = new DiagramCommandStack(getDiagramEditDomain());
---
>             DiagramCommandStack diagramStack = new DiagramCommandStack(
838a854,854
>      * 
867,867c883,883
< 		// Create a diagram event broker if there isn't already one for this editing domain.
---
>         // Create a diagram event broker if there isn't already one for this
867a884,884
>         // editing domain.
869a887,891
>             if (historyListener != null) {
>                 getOperationHistory().addOperationHistoryListener(
>                     historyListener);
>             }
> 
870a893,893
>                 .getInstance(domain);
870,870c892,892
< 			DiagramEventBroker eventBroker = DiagramEventBroker.getInstance(domain);
---
>             DiagramEventBroker eventBroker = DiagramEventBroker
881,881d903
< 		// do nothing
896a923,923
>      * commands. This is the action manager that is returned when I am asked to
897,897d922
< 	 * commands. This is the action manager that is returned when I am asked
898,898c924,924
< 	 * to adapt to an <code>ActionManager</code>.
---
>      * adapt to an <code>ActionManager</code>.
907,907c933,933
< 	 * A utility method to return the zoom manager from the graphical viewer's root
---
>      * A utility method to return the zoom manager from the graphical viewer's
907a934,935
>      * root
>      * 
929a958,959
>      * If subclasses have a known editing domain, they should override this
>      * method to return that editing domain as that will be more efficient that
930,931d957
<      * If subclasses have a known editing domain, they should override this method
<      * to return that editing domain as that will be more efficient that the
932,932c960,960
<      * generic implementation provided here.
---
>      * the generic implementation provided here.
1007a1036,1036
>     /*
1008,1008c1037,1037
< 	/* (non-Javadoc)
---
>      * (non-Javadoc)
1008a1038,1038
>      * 
1016a1047,1048
>      * 
>      * @param store
1017,1017c1049,1049
< 	 * @param store store to use
---
>      *            store to use
1024a1057,1057
>             PreferencesHint preferencesHint) {
1024,1024c1056,1056
< 	public static void addDefaultPreferences(PreferenceStore store, PreferencesHint preferencesHint) {
---
>     public static void addDefaultPreferences(PreferenceStore store,
1028,1028c1061,1061
< 		IPreferenceStore globalPreferenceStore = (IPreferenceStore) preferencesHint.getPreferenceStore();
---
>         IPreferenceStore globalPreferenceStore = (IPreferenceStore) preferencesHint
1028a1062,1062
>             .getPreferenceStore();
1053a1088,1088
>         // Point2D.Double point = (Point2D.Double)
1054,1054c1089,1089
< 		//Point2D.Double point = (Point2D.Double) nnn.getPaperSizesInInchesMap().get(pageSize);
---
>         // nnn.getPaperSizesInInchesMap().get(pageSize);
1058,1058c1093,1093
< 		//store.setValue(WorkspaceViewerProperties.USE_WORKSPACE_PRINT_SETTINGS, true);
---
>         // store.setValue(WorkspaceViewerProperties.USE_WORKSPACE_PRINT_SETTINGS,
1058a1094,1094
>         // true);
1059,1059c1095,1095
< 		//store.setValue(WorkspaceViewerProperties.USE_DIAGRAM_PRINT_SETTINGS, false);
---
>         // store.setValue(WorkspaceViewerProperties.USE_DIAGRAM_PRINT_SETTINGS,
1059a1096,1096
>         // false);
1063a1101,1102
>         // store.setValue(WorkspaceViewerProperties.PAGE_ORIENTATION_LANDSCAPE,
>         // false);
1064,1064d1100
< 		//store.setValue(WorkspaceViewerProperties.PAGE_ORIENTATION_LANDSCAPE, false);
1065,1065c1103,1103
< 		//store.setValue(WorkspaceViewerProperties.PAGE_ORIENTATION_PORTRAIT, true);
---
>         // store.setValue(WorkspaceViewerProperties.PAGE_ORIENTATION_PORTRAIT,
1065a1104,1104
>         // true);
1072,1072c1111,1111
< 		//store.setValue(WorkspaceViewerProperties.MARGIN_LEFT, marginSizes[0]);
---
>         // store.setValue(WorkspaceViewerProperties.MARGIN_LEFT,
1072a1112,1112
>         // marginSizes[0]);
1073a1114,1115
>         // store.setValue(WorkspaceViewerProperties.MARGIN_RIGHT,
>         // marginSizes[2]);
1074,1074d1113
< 		//store.setValue(WorkspaceViewerProperties.MARGIN_RIGHT, marginSizes[2]);
1075a1117,1117
>         // marginSizes[3]);
1075,1075c1116,1116
< 		//store.setValue(WorkspaceViewerProperties.MARGIN_BOTTOM, marginSizes[3]);
---
>         // store.setValue(WorkspaceViewerProperties.MARGIN_BOTTOM,
1077a1120,1134
>         store.setValue(WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS,
>             DefaultValues.DEFAULT_USE_WORKSPACE_SETTINGS);
>         store.setValue(WorkspaceViewerProperties.PREF_USE_DIAGRAM_SETTINGS,
>             DefaultValues.DEFAULT_USE_DIAGRAM_SETTINGS);
> 
>         store.setValue(WorkspaceViewerProperties.PREF_USE_INCHES,
>             DefaultValues.DEFAULT_INCHES);
>         store.setValue(WorkspaceViewerProperties.PREF_USE_MILLIM,
>             DefaultValues.DEFAULT_MILLIM);
> 
>         store.setValue(WorkspaceViewerProperties.PREF_USE_PORTRAIT,
>             DefaultValues.DEFAULT_PORTRAIT);
>         store.setValue(WorkspaceViewerProperties.PREF_USE_LANDSCAPE,
>             DefaultValues.DEFAULT_LANDSCAPE);
> 
1078,1080d1119
< 		store.setValue(WorkspaceViewerProperties.PREF_USE_WORKSPACE_SETTINGS, DefaultValues.DEFAULT_USE_WORKSPACE_SETTINGS);
< 		store.setValue(WorkspaceViewerProperties.PREF_USE_DIAGRAM_SETTINGS, DefaultValues.DEFAULT_USE_DIAGRAM_SETTINGS);
< 			
1081a1136,1136
>             .getLocaleSpecificPageType().getName());
1081,1081c1135,1135
< 		store.setValue(WorkspaceViewerProperties.PREF_USE_INCHES, DefaultValues.DEFAULT_INCHES);
---
>         store.setValue(WorkspaceViewerProperties.PREF_PAGE_SIZE, DefaultValues
1082,1082c1137,1137
< 		store.setValue(WorkspaceViewerProperties.PREF_USE_MILLIM, DefaultValues.DEFAULT_MILLIM);
---
>         store.setValue(WorkspaceViewerProperties.PREF_PAGE_WIDTH, DefaultValues
1082a1138,1141
>             .getLocaleSpecificPageType().getWidth());
>         store.setValue(WorkspaceViewerProperties.PREF_PAGE_HEIGHT,
>             DefaultValues.getLocaleSpecificPageType().getHeight());
> 
1083,1090d1137
< 		
< 		store.setValue(WorkspaceViewerProperties.PREF_USE_PORTRAIT, DefaultValues.DEFAULT_PORTRAIT);
< 		store.setValue(WorkspaceViewerProperties.PREF_USE_LANDSCAPE, DefaultValues.DEFAULT_LANDSCAPE);
< 		
< 		store.setValue(WorkspaceViewerProperties.PREF_PAGE_SIZE, DefaultValues.getLocaleSpecificPageType().getName());
< 		store.setValue(WorkspaceViewerProperties.PREF_PAGE_WIDTH, DefaultValues.getLocaleSpecificPageType().getWidth());
< 		store.setValue(WorkspaceViewerProperties.PREF_PAGE_HEIGHT, DefaultValues.getLocaleSpecificPageType().getHeight());
< 		
1091a1143,1145
>             DefaultValues.DEFAULT_MARGIN_TOP);
>         store.setValue(WorkspaceViewerProperties.PREF_MARGIN_BOTTOM,
>             DefaultValues.DEFAULT_MARGIN_BOTTOM);
1091,1091c1142,1142
< 		store.setValue(WorkspaceViewerProperties.PREF_MARGIN_TOP, DefaultValues.DEFAULT_MARGIN_TOP);
---
>         store.setValue(WorkspaceViewerProperties.PREF_MARGIN_TOP,
1092,1092d1142
< 		store.setValue(WorkspaceViewerProperties.PREF_MARGIN_BOTTOM, DefaultValues.DEFAULT_MARGIN_BOTTOM);
1093a1147,1147
>             DefaultValues.DEFAULT_MARGIN_LEFT);
1093,1093c1146,1146
< 		store.setValue(WorkspaceViewerProperties.PREF_MARGIN_LEFT, DefaultValues.DEFAULT_MARGIN_LEFT);
---
>         store.setValue(WorkspaceViewerProperties.PREF_MARGIN_LEFT,
1094a1149,1149
>             DefaultValues.DEFAULT_MARGIN_RIGHT);
1094,1094c1148,1148
< 		store.setValue(WorkspaceViewerProperties.PREF_MARGIN_RIGHT, DefaultValues.DEFAULT_MARGIN_RIGHT);
---
>         store.setValue(WorkspaceViewerProperties.PREF_MARGIN_RIGHT,
1099a1155,1155
>      * 
1107,1107c1163,1163
< 			IPath path = DiagramUIPlugin.getInstance()
---
>             IPath path = DiagramUIPlugin.getInstance().getStateLocation();
1108,1108d1163
< 				.getStateLocation();
1134a1190,1190
>             getPreferencesHint());
1134,1134c1189,1189
< 		addDefaultPreferences(workspaceViewerPreferenceStore, getPreferencesHint());
---
>         addDefaultPreferences(workspaceViewerPreferenceStore,
1138,1138c1194,1194
< 	 * Persists the viewer settings to which this RootEditPart belongs. This method should
---
>      * Persists the viewer settings to which this RootEditPart belongs. This
1139,1139c1195,1195
< 	 * be called when the diagram is being disposed.
---
>      * method should be called when the diagram is being disposed.
1166,1166c452,452
< 
---
> 
1168a1224,1224
>      * 
1176a1233,1233
>             WorkspaceViewerProperties.VIEWPAGEBREAKS)) {
1176,1176c1232,1232
< 		if (getWorkspaceViewerPreferenceStore().getBoolean(WorkspaceViewerProperties.VIEWPAGEBREAKS)) {
---
>         if (getWorkspaceViewerPreferenceStore().getBoolean(
1196a1254,1254
>             WorkspaceViewerProperties.RULERUNIT);
1196,1196c1253,1253
< 		int rulerUnits = getWorkspaceViewerPreferenceStore().getInt(WorkspaceViewerProperties.RULERUNIT);
---
>         int rulerUnits = getWorkspaceViewerPreferenceStore().getInt(
1201a845,845
>      * 
1202,1202d844
< 		
1209a1267,1267
>                 .getVerticalRuler();
1209,1209c1266,1266
< 			DiagramRuler verticalRuler = ((DiagramRootEditPart) getRootEditPart()).getVerticalRuler();
---
>             DiagramRuler verticalRuler = ((DiagramRootEditPart) getRootEditPart())
1212,1212c1270,1270
< 			DiagramRulerProvider vertProvider = new DiagramRulerProvider(getEditingDomain(),
---
>             DiagramRulerProvider vertProvider = new DiagramRulerProvider(
1213,1213c1271,1271
< 				verticalRuler, root.getMapMode());
---
>                 getEditingDomain(), verticalRuler, root.getMapMode());
1219a1278,1278
>                 .getHorizontalRuler();
1219,1219c1277,1277
< 			DiagramRuler horizontalRuler = ((DiagramRootEditPart) getRootEditPart()).getHorizontalRuler();
---
>             DiagramRuler horizontalRuler = ((DiagramRootEditPart) getRootEditPart())
1222,1222c1281,1281
< 			DiagramRulerProvider horzProvider = new DiagramRulerProvider(getEditingDomain(),
---
>             DiagramRulerProvider horzProvider = new DiagramRulerProvider(
1223,1223c1282,1282
< 				horizontalRuler, root.getMapMode());
---
>                 getEditingDomain(), horizontalRuler, root.getMapMode());
1265a1325,1326
>      * 
>      * @param selection
1266,1266c1327,1327
< 	 * @param selection  the selection
---
>      *            the selection
1282a1344,1345
>                                 for (Iterator i = structuredSelection
>                                     .iterator(); i.hasNext();) {
1283,1284d1343
< 								for (Iterator i = structuredSelection.iterator(); i
< 									.hasNext();) {
1312a1374,1374
>     /*
1313,1313c1375,1375
< 	/* (non-Javadoc)
---
>      * (non-Javadoc)
1313a1376,1376
>      * 
