4,4c4,4
<  * Copyright (c) 2005-2006 Sven Efftinge and others.
---
>  * Copyright (c) 2005-2007 Sven Efftinge and others.
16a17,18
> import java.util.ArrayList;
> import java.util.Collection;
30a33,33
> import org.eclipse.core.runtime.OperationCanceledException;
32a36,36
> import org.eclipse.gmf.internal.xpand.RootManager;
43a48,48
> 	private RootManager myRootManager;
43,43c47,47
< public class OawBuilder extends IncrementalProjectBuilder {
---
> public class OawBuilder extends IncrementalProjectBuilder implements RootManager.IRootChangeListener {
45a53,53
> 
45,45c52,52
< 	private boolean firstBuild = true; // XXX odd
---
> 	private boolean myRootsChanged = true;
46,46d52
< 	private WorkspaceResourceManager resourceManager;
59a65,66
> 		myRootManager = Activator.getRootManager(getProject());
> 		myRootManager.addRootChangeListener(this);
60,63d64
< 		resourceManager = new WorkspaceResourceManager(getProject());
< 		// FIXME if codesense has been activated, there's already manager instance and we fail with exception here
< 		Activator.registerResourceManager(getProject(), resourceManager);
< 		firstBuild = true;
70a93,108
> 
> 		myRootsChanged = false;
> 		Set<IProject> referencedProjects = myRootManager.getReferencedProjects();
> 		referencedProjects.remove(getProject());
> 		return referencedProjects.toArray(new IProject[referencedProjects.size()]);
> 	}
> 
> 	private void doBuild(int kind, Map<?, ?> args, IProgressMonitor monitor) throws CoreException {
> 		if ((kind == FULL_BUILD) || haveRootsChangedSinceLastBuild()) {
> 			fullBuild(monitor);
> 		} else {
> 			Set<IProject> referencedProjects = myRootManager.getReferencedProjects();
> 			referencedProjects.remove(getProject());
> 			Collection<IResourceDelta> deltas = new ArrayList<IResourceDelta>(referencedProjects.size());
> 			IResourceDelta projectDelta = getDelta(getProject());
> 			if (projectDelta == null) {
70a74,74
> 			doBuild(kind, args, monitor);
71,71d92
< 			if (firstBuild || (kind == FULL_BUILD)) {
72,72c109,109
< 				fullBuild(monitor);
---
> 				fullBuild(monitor);
72a110,113
> 				return;
> 			}
> 			for (IProject next : referencedProjects) {
> 				final IResourceDelta delta = getDelta(next);
73,74d109
< 			} else {
< 				final IResourceDelta delta = getDelta(getProject());
75,75c114,114
< 				if (delta == null) {
---
> 				if (delta == null) {
76,76c115,115
< 					fullBuild(monitor);
---
> 					fullBuild(monitor);
76a116,116
> 					return;
77,78d115
< 				} else {
< 					incrementalBuild(delta, monitor);
79a118,118
> 				deltas.add(delta);
79,79c117,117
< 				}
---
> 				}
80,80c119,119
< 			}
---
> 			}
80a120,129
> 			incrementalBuild(projectDelta, deltas, monitor);
> 		}
> 	}
> 
> 	public void rootsChanged(RootManager rootManager) {
> 		myRootsChanged = true;
> 	}
> 
> 	private boolean haveRootsChangedSinceLastBuild() {
> 		return myRootsChanged;
84,84d77
< 		firstBuild = false;
86,86c185,185
< 		
---
> 	}
88,88c80,80
< 	        final ExecutionContext ctx = ContextFactory.createXtendContext(getResourceManager());
---
> 	        final ExecutionContext ctx = ContextFactory.createXtendContext(getResourceManager(xtendResourcesToAnalyze.get(r)));
94,94c86,86
< 	        final XpandExecutionContext ctx = ContextFactory.createXpandContext(getResourceManager());
---
> 	        final XpandExecutionContext ctx = ContextFactory.createXpandContext(getResourceManager(xpandResourcesToAnalyze.get(r)));
99,99d90
< 		// XXX is builder's instance shared for several projects - if yes, we may get ConcurrentModificationEx here 
102,102d92
< 		return null;
109,109c133,133
< 		getResourceManager().forget(resource);
---
> 		getResourceManager(resource).forget(resource);
112,112c139,139
< 				XpandResource r = getResourceManager().loadXpandResource(resource);
---
> 				XpandResource r = getResourceManager(resource).loadXpandResource(resource);
117,117c144,144
< 				XtendResource r = getResourceManager().loadXtendResource(resource);
---
> 				XtendResource r = getResourceManager(resource).loadXtendResource(resource);
134,134c161,161
< 		getResourceManager().forget(resource);
---
> 		getResourceManager(resource).forget(resource);
134a162,167
> 	}
> 
> 	private WorkspaceResourceManager getResourceManager(IFile file) {
> 		WorkspaceResourceManager result = myRootManager.getResourceManager(file);
> 		assert result != null;
> 		return result;
137a171,177
> 		Set<IProject> referencedProjects = myRootManager.getReferencedProjects();
> 		referencedProjects.add(getProject());
> 		OawMarkerManager.deleteMarkers(getProject());	//to delete markers from obsolete roots.
> 		monitor.beginTask(null, 1 + referencedProjects.size());
> 		try {
> 			for (IProject next : referencedProjects) {
> 				checkCanceled(monitor);
138,138d170
< 		monitor.beginTask(null, 2);
139a179,180
> 			}
> 			checkCanceled(monitor);
139,139c178,178
< 		getProject().accept(new XpandResourceVisitor(new SubProgressMonitor(monitor, 1)));
---
> 				next.accept(new XpandResourceVisitor(new SubProgressMonitor(monitor, 1)));
140a182,182
> 		} finally {
144,144c187,187
< 	protected void incrementalBuild(final IResourceDelta delta, final IProgressMonitor monitor) throws CoreException {
---
> 	protected void incrementalBuild(final IResourceDelta projectDelta, final Collection<IResourceDelta> referencedProjectDeltas, final IProgressMonitor monitor) throws CoreException {
145,145c188,188
< 		monitor.beginTask(null, 2);
---
> 		monitor.beginTask(null, 2 + referencedProjectDeltas.size());
145a189,191
> 		try {
> 			for (IResourceDelta delta : referencedProjectDeltas) {
> 				checkCanceled(monitor);
146a193,196
> 			}
> 			checkCanceled(monitor);
> 			projectDelta.accept(new XpandResourceVisitor(new SubProgressMonitor(monitor, 1)));
> 			checkCanceled(monitor);
147a198,198
> 		} finally {
147,147c197,197
< 		modelRegistry.build(getProject(), delta, new SubProgressMonitor(monitor, 1));
---
> 			modelRegistry.build(getProject(), projectDelta, new SubProgressMonitor(monitor, 1));
149a201,201
> 	}
150a203,206
> 	private void checkCanceled(final IProgressMonitor monitor) {
> 		if (monitor.isCanceled()) {
> 			throw new OperationCanceledException();
> 		}
151,152d202
< 	private WorkspaceResourceManager getResourceManager() {
< 		return resourceManager;
173,173c227,227
< 	private static boolean isFileOfInterest(IFile file) {
---
> 	private boolean isFileOfInterest(IFile file) {
174,174c228,228
< 		return isXpand(file) || isXtend(file);
---
> 		if (!isXpand(file) && !isXtend(file)) {
174a229,234
> 			return false;
> 		}
> 		if (getResourceManager(file) == null) {
> 			return false;
> 		}
> 		return true;
225a286,286
> 
