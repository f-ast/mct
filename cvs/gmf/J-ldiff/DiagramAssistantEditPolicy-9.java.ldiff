2,2c2,2
<  * Copyright (c) 2005, 2006 IBM Corporation and others.
---
>  * Copyright (c) 2005, 2008 IBM Corporation and others.
25a14,16
> import org.eclipse.core.runtime.IProgressMonitor;
> import org.eclipse.core.runtime.IStatus;
> import org.eclipse.core.runtime.Status;
26,26c17,17
< import org.eclipse.swt.widgets.Display;
---
> import org.eclipse.core.runtime.jobs.Job;
30a34,34
> import org.eclipse.ui.progress.UIJob;
42,42c46,46
< 	 * The <code>Runnable</code> used when a timer is started to show the
---
> 	 * The <code>Job</code> used to show the diagram assistant after a certain
43,43c47,47
< 	 * diagram assistant after a certain amount of time has passed.
---
> 	 * amount of time has passed.
44a49,50
> 	private class ShowDiagramAssistantJob
> 		extends UIJob {
45,46d48
< 	private class ShowDiagramAssistantRunnable
< 		implements Runnable {
48,48c52,52
< 		/** the mouse location when the timer was started */
---
> 		/** the mouse location when the job was created */
51a56,63
>          * Creates a new instance.
>          */
>         protected ShowDiagramAssistantJob() {
>             super("Show Diagram Assistant"); //$NON-NLS-1$
>             setSystem(true);
>         }
> 
> 		/**
65a78,79
> 		public IStatus runInUIThread(IProgressMonitor monitor) {
> 			if (originalMouseLocation != null
66,66d77
< 		public void run() {
67,67c80,80
< 			if (originalMouseLocation != null && originalMouseLocation.equals(getMouseLocation())) {
---
> 				&& originalMouseLocation.equals(getMouseLocation())) {
72a86,97
> 
>                     // Cancel the hide diagram assistant job for this host if it
>                     // is waiting to run.
>                     hideDiagramAssistantJob.cancel();
> 
>                     // Schedule any hide diagram assistant jobs on other
>                     // editparts to run immediately to avoid duplicate diagram
>                     // assistants showing.
>                     if (getDiagramAssistantID() != null) {
>                         Job.getJobManager().wakeUp(getDiagramAssistantID());
>                     }
> 
75a101,101
> 			return Status.OK_STATUS;
80,80c106,106
< 	 * The <code>Runnable</code> used when a timer is started to hide the
---
> 	 * The <code>Job</code> used to hide the diagram assistant after a certain
81,81c107,107
< 	 * diagram assistant after a certain amount of time has passed.
---
> 	 * amount of time has passed.
82a109,115
> 	private class HideDiagramAssistantJob
>         extends UIJob {
> 
>         protected HideDiagramAssistantJob() {
>             super("Hide Diagram Assistant"); //$NON-NLS-1$
>             setSystem(true);
>         }
83,84d108
< 	private class HideDiagramAssistantRunnable implements Runnable
< 	{
89a121,121
> 		public IStatus runInUIThread(IProgressMonitor monitor) {
90,90d120
< 		public void run() {
94a126,130
> 			return Status.OK_STATUS;
> 		}
> 
>         public boolean belongsTo(Object family) {
>             return family == getDiagramAssistantID();
150a187,189
> 	private ShowDiagramAssistantJob showDiagramAssistantJob = new ShowDiagramAssistantJob();
> 
> 	private HideDiagramAssistantJob hideDiagramAssistantJob = new HideDiagramAssistantJob();
151,152d186
< 	private ShowDiagramAssistantRunnable showDiagramAssistantRunnable = new ShowDiagramAssistantRunnable();
< 	private HideDiagramAssistantRunnable hideDiagramAssistantRunnable = new HideDiagramAssistantRunnable();
292a330,334
> 		if (delay >= 0) {
>             showDiagramAssistantJob.setOriginalMouseLocation(getMouseLocation());
>             showDiagramAssistantJob.cancel();
>             showDiagramAssistantJob.schedule(delay);
> 		}
293,294d329
< 		showDiagramAssistantRunnable.setOriginalMouseLocation(getMouseLocation());
< 		Display.getCurrent().timerExec(delay,showDiagramAssistantRunnable);
303a344,346
> 		if (isDiagramAssistantShowing() && delay >= 0) {
>             hideDiagramAssistantJob.cancel();
>             hideDiagramAssistantJob.schedule(delay);
304,305d343
< 		if (isDiagramAssistantShowing()) {
< 			Display.getCurrent().timerExec(delay, hideDiagramAssistantRunnable);
459a501,514
> 	/**
>      * Gets an ID string used to identify the diagram assistant classification.
>      * This ID should be the same string for all instances of a particular type
>      * of diagram assistant. One use of this ID is to avoid having multiple
>      * diagram assistants of the same type showing at the same time on different
>      * editparts. A good ID string would be the class's name (e.g.
>      * ConnectionHandleEditPolicy.class.getName()).
>      * 
>      * @return a unique string for a diagram assistant type or null
>      */
>     protected String getDiagramAssistantID() {
>         return null;
>     }
> 
