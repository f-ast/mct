14,14d13
< import java.util.List;
19,19c15,15
< import org.eclipse.gef.commands.CompoundCommand;
---
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
20a20,23
> import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;
> import org.eclipse.gmf.runtime.diagram.core.commands.SetPropertyCommand;
> import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
> import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;
21,21c24,24
< import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;
---
> import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
22,22c25,25
< import org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart;
---
> import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
25a31,35
> import org.eclipse.gmf.runtime.notation.LayoutConstraint;
> import org.eclipse.gmf.runtime.notation.Location;
> import org.eclipse.gmf.runtime.notation.Node;
> import org.eclipse.gmf.runtime.notation.NotationPackage;
> import org.eclipse.gmf.runtime.notation.View;
25,25c30,30
< import org.eclipse.gmf.runtime.diagram.ui.requests.ChangePropertyValueRequest;
---
> import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
57a66,71
>             CompositeCommand cc = 
>                 new CompositeCommand(DiagramUIMessages.Command_hideLabel_Label);
>             Object model = getHost().getModel();
>             if (model instanceof View){
>                 View hostView = (View)model;
>        			Iterator iter = hostView.getChildren().iterator();
58,60d65
< 			CompoundCommand cc = new CompoundCommand();
< 			List children = getHost().getChildren();
< 			Iterator iter = children.iterator();
61a73,76
>                     View childView = (View)iter.next();
>                     if (isLabelView(getHost() ,hostView, childView)){
>                         cc.add(new SetPropertyCommand(getEditingDomain(),
>                             new EObjectAdapter(childView),
62,65d72
< 				GraphicalEditPart ep = (GraphicalEditPart) iter.next();	
< 				if (ep instanceof LabelEditPart) {
< 					ChangePropertyValueRequest req = new ChangePropertyValueRequest(
< 						DiagramUIMessages.Command_hideLabel_Label,
66a78,80
>                             DiagramUIMessages.Command_hideLabel_Label,
>                             Boolean.valueOf(showHide)));
>                     }
67,70d77
< 						Boolean.valueOf(showHide));
< 					Command setLabelVisCmd = ep.getCommand(req);
< 					if (setLabelVisCmd != null && setLabelVisCmd.canExecute())
< 						cc.add(setLabelVisCmd);
72a82,82
>         		return new ICommandProxy(cc);
73,73d81
< 			return cc;
77a88,135
>    protected TransactionalEditingDomain getEditingDomain() {
>        return ((IGraphicalEditPart) getHost()).getEditingDomain();
>    }
>     
>     
>    /**
>     * determines if the passed view is a label view or not
>     * the default provided implementation is just an educated/generic guss
>     * clients can override this method to provide more specific response
>     * @param node
>     * @return
>     */
>     protected boolean isLabelView(EditPart containerEditPart,View parentView, View view) {
>     	// labels are not compartments
>         // labels contained by Node Shape Edit Parts or connection edit parts
>         // labels had location constrain
>         // labels had the string Type set on them 
>         if ((containerEditPart instanceof ShapeNodeEditPart ||
>              containerEditPart instanceof ConnectionEditPart )
>              &&  view instanceof Node){
>             Node node = (Node)view;
>             String nodeType = node.getType();
>             if (!isCompartment(node) &&
>                 (nodeType != null && nodeType.length()>0)){
>                 LayoutConstraint lContraint = node.getLayoutConstraint();
>                 if (lContraint instanceof Location){
>                     return true;
>                 }
>             }
>         }
>                
>        return false;
>     }
>     
>     /**
>      * determines if the passed view is a compartment view or not
>      * the default provided implementation is just an educated/generic guss
>      * clients can override this method to provide more specific response
>      * @param node
>      * @return
>      */
>     protected boolean isCompartment(Node node) {
>         if (node.getStyle(NotationPackage.eINSTANCE.getDrawerStyle())!=null){
>               return true;
>         }
>         return false;
>     }
> 	
