2,2c2,2
<  * Copyright (c) 2002, 2003 IBM Corporation and others.
---
>  * Copyright (c) 2002, 2006 IBM Corporation and others.
18a19,21
> import org.eclipse.core.commands.ExecutionException;
> import org.eclipse.core.commands.operations.IUndoContext;
> import org.eclipse.core.commands.operations.IUndoableOperation;
22,22c40,40
< import org.eclipse.jface.text.ITextSelection;
---
> import org.eclipse.jface.text.ITextSelection;
23,23c41,41
< import org.eclipse.jface.viewers.IStructuredSelection;
---
> import org.eclipse.jface.viewers.IStructuredSelection;
24,24c42,42
< import org.eclipse.ui.IWorkbenchPage;
---
> import org.eclipse.ui.IWorkbenchPage;
25,25c43,43
< import org.eclipse.ui.IWorkbenchPart;
---
> import org.eclipse.ui.IWorkbenchPart;
26,26d43
< 
116a119,124
> 		/* Create the composite operation */
> 		IUndoableOperation operation = createCompositeCommand(list);
>         try {
>             IStatus status = getOperationHistory()
>                 .execute(operation, progressMonitor, null);
>             
117,120d118
< 		/* Create the compound command */
< 		CompositeCommand compositeCommand = createCompositeCommand(list);
< 		getCommandManager().execute(compositeCommand, progressMonitor);
< 		IStatus status = compositeCommand.getCommandResult().getStatus();
124a129,136
>         } catch (ExecutionException e) {
>             Trace.catching(CommonUIActionPlugin.getDefault(),
>                 CommonUIActionDebugOptions.EXCEPTIONS_CATCHING, getClass(),
>                 "doRun", e); //$NON-NLS-1$
>             Log.error(CommonUIActionPlugin.getDefault(),
>                 CommonUIActionStatusCodes.ACTION_FAILURE, e
>                     .getLocalizedMessage(), e);
>         }
189,189c201,201
< 	 * Returns a <code>CompositeCommand</code>
---
>      * Returns a <code>CompositeCommand</code> whose undo context is derived from my workbench part.
192,192c204,204
< 	 * @return CompositeCommand
---
>      * @return the CompositeCommand
195a208,229
>         
>         CompositeCommand result = new CompositeCommand(getLabel(), commands);
>         IUndoContext undoContext = getUndoContext();
>         
>         if (undoContext != null) {
>             result.addContext(undoContext);
>         }
>         return result;
>     }
>     
>     /**
>      * Gets the undo context from my workbench part. May be <code>null</code>.
>      * 
>      * @return my undo context
>      */
>     protected IUndoContext getUndoContext() {
>         IWorkbenchPart part = getWorkbenchPart();
> 
>         if (part != null) {
>             return (IUndoContext) part.getAdapter(IUndoContext.class);
>         }
>         return null;
196,196d207
< 		return new CompositeCommand(getLabel(), commands);
198a232,232
> 
