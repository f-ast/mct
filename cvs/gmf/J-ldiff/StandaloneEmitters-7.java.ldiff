2,2c2,2
<  * Copyright (c) 2006 Borland Software Corporation
---
>  * Copyright (c) 2006, 2007 Borland Software Corporation
15,15d14
< import java.lang.reflect.InvocationTargetException;
20,20d18
< import java.util.Map;
22,22d19
< import org.eclipse.core.runtime.IProgressMonitor;
25a23,23
> import org.eclipse.gmf.internal.common.codegen.XpandTextEmitter;
27,27d24
< import org.eclipse.gmf.internal.xpand.BufferOutput;
28,28c25,25
< import org.eclipse.gmf.internal.xpand.XpandFacade;
---
> import org.eclipse.gmf.internal.xpand.ResourceManager;
29,29d25
< import org.eclipse.gmf.internal.xpand.expression.Variable;
32,32c28,28
< 	private final MapModeCodeGenStrategy myMapModeStrategy;
---
> 	private final ResourceManager myResourceManager;
34a31,32
> 		assert mapModeStrategy != null;
> 		myResourceManager = Activator.createResourceEngine(mapModeStrategy);
35,35d30
< 		myMapModeStrategy = mapModeStrategy;
38a36,36
> 		return new XpandTextEmitter(myResourceManager, "plugin::BuildProperties::Init", getClass().getClassLoader());
39,45d35
< 		return new XpandTextEmitter(myMapModeStrategy) {
< 			public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
< 				StringBuilder result = new StringBuilder();
< 				createEngine(result).evaluate("plugin::BuildProperties::Init", new Object(), null);
< 				return result.toString();
< 			}
< 		};
48a40,42
> 		return new XpandTextEmitter(myResourceManager, "plugin::PluginProperties::Init", getClass().getClassLoader()) {
> 			@Override
> 			protected Object[] extractArguments(Object[] arguments) {
49,50d39
< 		return new XpandTextEmitter(myMapModeStrategy) {
< 			public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
53,53d44
< 				StringBuilder result = new StringBuilder();
54,54c45,45
< 				Object[] params = new Object[] {
---
> 				return new Object[] {
58,59d48
< 				createEngine(result).evaluate("plugin::PluginProperties::Init", new Object(), params);
< 				return result.toString();
64a54,57
> 		return new XpandTextEmitter(myResourceManager, "plugin::Manifest::Init", getClass().getClassLoader()) {
> 			@Override
> 			protected Object[] extractArguments(Object[] arguments) {
> 				assert arguments != null && arguments.length > 1 && arguments[0] instanceof Config && arguments[1] instanceof String[];
65,69d53
< 		return new XpandTextEmitter(myMapModeStrategy) {
< 			public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
< 				assert arguments != null && arguments.length > 0 && arguments[0] instanceof Object[];
< 				Object[] actualArgs = (Object[]) arguments[0];
< 				assert actualArgs.length > 1 && actualArgs[0] instanceof Config && actualArgs[1] instanceof String[];
70,70c58,58
< 				Config config = (Config) actualArgs[0];
---
> 				Config config = (Config) arguments[0];
75,75c63,63
< 				requiredBundles.addAll(Arrays.asList((String[]) actualArgs[1]));
---
> 				requiredBundles.addAll(Arrays.asList((String[]) arguments[1]));
77,77d64
< 				StringBuilder result = new StringBuilder();
78,78c65,65
< 				Object[] params = new Object[] {
---
> 				return new Object[] {
84,85d70
< 				createEngine(result).evaluate("plugin::Manifest::Init", new Object(), params);
< 				return result.toString();
90a76,78
> 		return new XpandTextEmitter(myResourceManager, "plugin::Activator::Init", getClass().getClassLoader()) {
> 			@Override
> 			protected Object[] extractArguments(Object[] arguments) {
91,93d75
< 		return new XpandTextEmitter(myMapModeStrategy) {
< 			public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
< 				// we do not use ImportAssistant argument
96,96d80
< 				StringBuilder result = new StringBuilder();
97,97c81,81
< 				Object[] params = new Object[] {
---
> 				return new Object[] {
102,103d85
< 				createEngine(result).evaluate("plugin::Activator::Init", new Object(), params);
< 				return result.toString();
107,120d88
< 
< 	private static abstract class XpandTextEmitter implements TextEmitter {
< 		protected final MapModeCodeGenStrategy myMapModeStrategy;
< 
< 		protected XpandTextEmitter(MapModeCodeGenStrategy mapModeStrategy) {
< 			myMapModeStrategy = mapModeStrategy;
< 		}
< 
< 		protected XpandFacade createEngine(StringBuilder result) {
< 			final Map<String, StringBuilder> slots = Collections.emptyMap();
< 			final List<Variable> globals = Collections.emptyList();
< 			return Activator.createTemplateEngine(myMapModeStrategy, new BufferOutput(result, slots), globals);
< 		}
< 	}
