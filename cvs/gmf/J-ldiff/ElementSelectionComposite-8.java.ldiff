15a16,17
> import java.util.regex.Matcher;
> import java.util.regex.Pattern;
18,18d19
< import org.eclipse.core.runtime.jobs.Job;
25a27,27
> import org.eclipse.jface.viewers.Viewer;
92,92c94,94
<     private Job job;
---
>     private ElementSelectionServiceJob job;
94a97,135
>      * The element selection service to use to search for elements.
>      */
>     private final ElementSelectionService elementSelectionService;
> 
>     /**
>      * Control character for the filter.
>      * <p>
>      * When the user enters the first character into the filterText, element
>      * selection service is called. When the user enters the second character
>      * after the first, we can use the existing results returned by the service.
>      * If the user enters text such that the first character has been changed,
>      * we need to query the service again.
>      * <p>
>      * For example, if the user enters "a" then "ab", we can use the existing
>      * results from "a". If the user enters "a" then "b", then we must query a
>      * second time.
>      * <p>
>      * We also must remember if the service has already been called. If the user
>      * enters "a" and then "b", we must cancel "a" and wait before calling the
>      * service for "b".
>      */
>     private char firstCharacter = Character.MIN_VALUE;
>     private String lastSearchedFor = StringStatics.BLANK;
>     private int lastScopeSearchedFor = 0;
> 
>     /**
>      * matching objects from the element selection service.
>      */
>     private List matchingObjects = new ArrayList();
> 
>     /**
>      * Pattern for the input filter.
>      */
>     private Pattern pattern;
>     
>     /**
>      * Constructs a new instance that will create the new composite.  I will use
>      * the default {@linkplain ElementSelectionService#getInstance() selection service}
>      * to process the <tt>input</tt>.
95,95d96
<      * Constructs a new instance that will create the new composite.
103a144,157
>         this(title, input, ElementSelectionService.getInstance());
>     }
>     
>     /**
>      * Constructs a new instance that will create the new composite.
>      * 
>      * @param title the dialog title
>      * @param input the element selection input
>      * @param elementSelectionService the selection service to use to process the
>      *     <tt>input</tt>
>      */
>     public ElementSelectionComposite(String title,
>     		AbstractElementSelectionInput input,
>     		ElementSelectionService elementSelectionService) {
106a161,162
>     	this.elementSelectionService = elementSelectionService;
>         this.lastScopeSearchedFor = input.getScope().intValue();
200a257,265
>         tableViewer.setSorter(new ViewerSorter() {
>             public int compare(Viewer viewer, Object e1, Object e2) {
>                 if (e1 instanceof IMatchingObject && e2 instanceof IMatchingObject)
>                     return ((IMatchingObject)e1).getName().toLowerCase().compareTo(
>                         ((IMatchingObject)e2).getName().toLowerCase());
>                 
>                 return super.compare(viewer, e1, e2);
>             }
>         });
201,201d256
<         tableViewer.setSorter(new ViewerSorter());
222a287,294
>     public void handleFilterChange() {
>         if (filterText.getText().equals(StringStatics.BLANK)) {
>             /* no filter, no results */
>             cancel();
>             matchingObjects.clear();
>             tableViewer.getTable().removeAll();            
>             firstCharacter = Character.MIN_VALUE;
>             return;
223,230d286
<     private void handleFilterChange() {
<         input.setInput(filterText.getText());
<         fillTableViewer();
<         Object element = tableViewer.getElementAt(0);
<         if (element != null) {
<             tableViewer.setSelection(new StructuredSelection(element), true);
<         }
<         handleSelectionChange();
232a297,311
>         String filter = validatePattern(filterText.getText());
>         pattern = Pattern.compile(filter);
>         if (firstCharacter != filterText.getText().charAt(0) ||
>                 this.input.getScope().intValue() != this.lastScopeSearchedFor ||
>                 !filterText.getText().startsWith(lastSearchedFor)) {
>             //scope changes, start from scratch...
>             cancel();
>             matchingObjects.clear();
>             tableViewer.getTable().removeAll();
>             
>             firstCharacter = filterText.getText().charAt(0);
>             this.lastScopeSearchedFor = this.input.getScope().intValue();
>             
>             startElementSelectionService();
>         } else {
233,233c329,329
<     /**
---
>     /**
234,234c330,330
<      * Fill the table viewer with results from the element selection service.
---
>      * Fill the table viewer with results from the element selection service.
235,235c331,331
<      */
---
>      */
236,236c332,332
<     private void fillTableViewer() {
---
>     private void startElementSelectionService() {
237a313,314
>              * clear the existing matches in the table and refilter results we have
>              * received
238,238d312
<          * Clean the previous list
240a317,327
>             for (Iterator i = matchingObjects.iterator(); i.hasNext();) {
>                 IMatchingObject matchingObject = (IMatchingObject) i.next();
>                 Matcher matcher = pattern.matcher(matchingObject.getName()
>                     .toLowerCase());
>                 if (matcher.matches()) {
>                     tableViewer.add(matchingObject);
>                     setSelection();
>                 }
>             }
>         }
>     }
245a337,339
>         input.setInput(filterText.getText());
>         lastSearchedFor = filterText.getText();
>         
246,247d336
<         if (!input.getInput().equals(StringStatics.BLANK)) {
<             filterText.setEnabled(false);
253,253c345,345
<             job = ElementSelectionService.getInstance().getMatchingObjects(
---
>         job = elementSelectionService.getMatchingObjects(input, this);
254,256d345
<                 input, this);
<         }
< 
317,318d405
<                 filterText.setEnabled(true);
<                 filterText.setFocus();
320a411,418
>                 progressBar.subTask(matchingObject.getName());
>                 matchingObjects.add(matchingObject);
>                 Matcher matcher = pattern.matcher(matchingObject.getName()
>                     .toLowerCase());
>                 if (matcher.matches()) {
>                     tableViewer.add(matchingObject);
>                     setSelection();
>                 }
320a408,408
>                 IMatchingObject matchingObject = matchingObjectEvent
321,321d407
<                 progressBar.subTask(matchingObjectEvent.getMatchingObject()
322,322c409,409
<                     .getName());
---
>                     .getMatchingObject();
323,323d409
<                 tableViewer.add(matchingObjectEvent.getMatchingObject());
332a428,475
>             elementSelectionService.cancelJob(job);
>             job = null;
>             progressBar.done();
>             progressBar.setVisible(false);
>         }
>     }
> 
>     /**
>      * Convert the UNIX style pattern entered by the user to a Java regex
>      * pattern (? = any character, * = any string).
>      * 
>      * @param string
>      *            the UNIX style pattern.
>      * @return a Java regex pattern.
>      */
>     private String validatePattern(String string) {
>         if (string.equals(StringStatics.BLANK)) {
>             return string;
>         }
>         StringBuffer result = new StringBuffer();
>         for (int i = 0; i < string.length(); i++) {
>             char c = Character.toLowerCase(string.charAt(i));
>             if (c == '?') {
>                 result.append('.');
>             } else if (c == '*') {
>                 result.append(".*"); //$NON-NLS-1$
>             } else {
>                 result.append(c);
>             }
>         }
>         result.append(".*"); //$NON-NLS-1$
>         return result.toString();
>     }
> 
>     /**
>      * If there is no selection in the composite, set the selection to the
>      * provided MatchingObject.
>      * 
>      * @param matchingObject
>      *            the MatchingObject to select.
>      */
>     protected void setSelection() {
>         StructuredSelection selection = (StructuredSelection) tableViewer
>             .getSelection();
>         if (selection.isEmpty()) {
>             tableViewer.getTable().setSelection(0);
>             handleSelectionChange();
>         }
333,333c406,406
<             job.cancel();
---
>                 job = null;
334a477,483
> 
>     
>     /**
>      * @return the job
>      */
>     public ElementSelectionServiceJob getSelectionServiceJob() {
>         return job;
