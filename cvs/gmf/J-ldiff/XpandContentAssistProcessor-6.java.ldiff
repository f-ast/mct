46a47,47
>     private final ProposalComparator comparator;
51a53,53
>         this.comparator = new ProposalComparator();
68,68c70,70
<             List<ICompletionProposal> proposals = new ArrayList<ICompletionProposal>();
---
>             List<ICompletionProposal> proposals = new ArrayList<ICompletionProposal>(20);
73a76,76
>     			Collections.sort(proposals, comparator);
76a80,82
>                 List<ICompletionProposal> ep = new ExpressionProposalComputer().computeProposals(expression, ctx, f);
>     			Collections.sort(ep, comparator);
> 				proposals.addAll(ep);
77,77d79
<                 proposals.addAll(new ExpressionProposalComputer().computeProposals(expression, ctx, f));
78a84,85
>     			Collections.sort(kp, comparator);
> 				proposals.addAll(kp);
78,78c83,83
<                 proposals.addAll(new KeywordProposalComputer(textPastInsertionPoint).computeProposals(txt, ctx, f));
---
>                 List<ICompletionProposal> kp = new KeywordProposalComputer(textPastInsertionPoint).computeProposals(txt, ctx, f);
81,81c88,88
<                 proposals.addAll(new ExpandProposalComputer().computeProposals(txt, ctx, f));
---
>                 List<ICompletionProposal> ep = new ExpandProposalComputer().computeProposals(txt, ctx, f);
81a89,90
>     			Collections.sort(ep, comparator);
> 				proposals.addAll(ep);
85a95,96
>     			Collections.sort(sp, comparator);
> 				proposals.addAll(sp);
85,85c94,94
<                 proposals.addAll(new StatementProposalComputer().computeProposals(txt, ctx, f));
---
>                 List<ICompletionProposal> sp = new StatementProposalComputer().computeProposals(txt, ctx, f);
87a126,127
> 
>     private static class ProposalComparator implements Comparator<ICompletionProposal> {
88,88d125
<             Collections.sort(proposals, new Comparator<ICompletionProposal>() {
89a129,129
>         	// XXX better would be put most matching proposal first!!!
89,89c128,128
<                 public int compare(final ICompletionProposal p1, final ICompletionProposal p2) {
---
>         public int compare(final ICompletionProposal p1, final ICompletionProposal p2) {
90,90d128
<                 	// XXX better would be put most matching proposal first!!!
91,91c130,130
<                     return p1.getDisplayString().compareTo(p2.getDisplayString());
---
>             return p1.getDisplayString().compareTo(p2.getDisplayString());
92,92d130
<                 }
93,93c131,131
<             });
---
>         }
93a132,132
>     }
