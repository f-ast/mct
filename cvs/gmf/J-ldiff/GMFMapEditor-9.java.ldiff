20a21,23
> import java.util.Map;
> import java.util.LinkedHashMap;
> 
36a40,42
> import org.eclipse.emf.common.util.BasicDiagnostic;
> import org.eclipse.emf.common.util.Diagnostic;
> 
37a44,45
> import org.eclipse.emf.common.notify.Notification;
> 
38a47,47
> import org.eclipse.emf.common.ui.editor.ProblemEditorPart;
44a54,56
> import org.eclipse.emf.ecore.util.EcoreUtil;
> import org.eclipse.emf.ecore.util.EContentAdapter;
> 
59a72,74
> import org.eclipse.emf.common.ui.MarkerHelper;
> import org.eclipse.emf.edit.ui.util.EditUIMarkerHelper;
> 
105a121,122
> import org.eclipse.ui.PartInitException;
> 
267a285,293
> 	 * The MarkerHelper is responsible for creating workspace resource markers presented
> 	 * in Eclipse's Problems View.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected MarkerHelper markerHelper = new EditUIMarkerHelper();
> 
> 	/**
307,307c333,333
< 	Collection removedResources = new ArrayList();
---
> 	protected Collection removedResources = new ArrayList();
313,313c339,339
< 	Collection changedResources = new ArrayList();
---
> 	protected Collection changedResources = new ArrayList();
318a345,393
> 	protected Collection savedResources = new ArrayList();
> 
> 	/**
> 	 * Map to store the diagnostic associated with a resource.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected Map resourceToDiagnosticMap = new LinkedHashMap();
> 	
> 	/**
> 	 * Controls whether the problem indication should be updated.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */	
> 	protected boolean updateProblemIndication = true;
> 
> 	/**
> 	 * Adapter used to update the problem indication when resources are demanded loaded.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */	
> 	protected EContentAdapter problemIndicationAdapter = 
> 		new EContentAdapter() {
> 			public void notifyChanged(Notification notification) {
> 				if (notification.getNotifier() instanceof Resource) {
> 					switch (notification.getFeatureID(Resource.class)) {
> 						case Resource.RESOURCE__IS_LOADED:
> 						case Resource.RESOURCE__ERRORS:
> 						case Resource.RESOURCE__WARNINGS: {
> 							Resource resource = (Resource)notification.getNotifier();
> 							Diagnostic diagnostic = analyzeResourceProblems((Resource)notification.getNotifier(), null);
> 							if (diagnostic.getSeverity() != Diagnostic.OK) {
> 								resourceToDiagnosticMap.put(resource, diagnostic);
> 							}
> 							else {
> 								resourceToDiagnosticMap.remove(resource);
> 							}
> 							updateProblemIndication();
> 						}
> 					}
> 				}
> 				else {
> 					super.notifyChanged(notification);
> 				}
> 			}
> 		};
319,319d344
< 	Collection savedResources = new ArrayList();
436a1103,1103
> 		}
437,437d1102
< 
445a519,519
> 			updateProblemIndication = false;
453a528,589
> 						if (!resourceToDiagnosticMap.containsKey(resource)) {
> 							resourceToDiagnosticMap.put(resource, analyzeResourceProblems(resource, exception));
> 						}
> 					}
> 				}
> 			}
> 			updateProblemIndication = true;
> 			updateProblemIndication();
> 		}
> 	}
>   
> 	/**
> 	 * Updates the problems indication with the information described in the specified diagnostic.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected void updateProblemIndication() {
> 		if (updateProblemIndication) {
> 			BasicDiagnostic diagnostic =
> 				new BasicDiagnostic
> 					(Diagnostic.OK,
> 					 "org.eclipse.gmf.map.edit", 
> 					 0,
> 					 null,
> 					 new Object [] { editingDomain.getResourceSet() });
> 			for (Iterator i = resourceToDiagnosticMap.values().iterator(); i.hasNext(); ) {
> 				Diagnostic childDiagnostic = (Diagnostic)i.next();
> 				if (childDiagnostic.getSeverity() != Diagnostic.OK) {
> 					diagnostic.add(childDiagnostic);
> 				}
> 			}
> 			
> 			int lastEditorPage = getPageCount() - 1;
> 			if (lastEditorPage >= 0 && getEditor(lastEditorPage) instanceof ProblemEditorPart) {
> 				((ProblemEditorPart)getEditor(lastEditorPage)).setDiagnostic(diagnostic);
> 				if (diagnostic.getSeverity() != Diagnostic.OK) {
> 					setActivePage(lastEditorPage);
> 				}
> 			}
> 			else if (diagnostic.getSeverity() != Diagnostic.OK) {
> 				ProblemEditorPart problemEditorPart = new ProblemEditorPart();
> 				problemEditorPart.setDiagnostic(diagnostic);
> 				problemEditorPart.setMarkerHelper(markerHelper);
> 				try {
> 					addPage(getPageCount(), problemEditorPart, getEditorInput());
> 					lastEditorPage++;
> 					setPageText(lastEditorPage, problemEditorPart.getPartName());
> 					setActivePage(lastEditorPage);
> 				}
> 				catch (PartInitException exception) {
> 					GMFMapEditPlugin.INSTANCE.log(exception);
> 				}
> 			}
> 
> 			if (markerHelper.hasMarkers(editingDomain.getResourceSet())) {
> 				markerHelper.deleteMarkers(editingDomain.getResourceSet());
> 				if (diagnostic.getSeverity() != Diagnostic.OK) {
> 					try {
> 						markerHelper.createMarkers(diagnostic);
> 					}
> 					catch (CoreException exception) {
707,707c843,843
< 		// I assume that the input is a file object.
---
> 		// Assumes that the input is a file object.
710,710d845
< 
713a852,852
> 			resource = editingDomain.getResourceSet().getResource(resourceURI, true);
714,714c846,846
< 			editingDomain.loadResource(URI.createPlatformResourceURI(modelFile.getFile().getFullPath().toString()).toString());
---
> 		URI resourceURI = URI.createPlatformResourceURI(modelFile.getFile().getFullPath().toString());;
714a847,848
> 		Exception exception = null;
> 		Resource resource = null;
715a854,895
> 		catch (Exception e) {
> 			exception = e;
> 			resource = editingDomain.getResourceSet().getResource(resourceURI, false);			
> 		}
> 
> 		Diagnostic diagnostic = analyzeResourceProblems(resource, exception);
> 		if (diagnostic.getSeverity() != Diagnostic.OK) {
> 			resourceToDiagnosticMap.put(resource,  analyzeResourceProblems(resource, exception));
> 		}
> 		editingDomain.getResourceSet().eAdapters().add(problemIndicationAdapter);		
> 	}
> 	
> 	/**
> 	 * Returns a dignostic describing the errors and warnings listed in the resource
> 	 * and the specified exception (if any).
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public Diagnostic analyzeResourceProblems(Resource resource, Exception exception) {
> 		if (!resource.getErrors().isEmpty() || !resource.getWarnings().isEmpty()) {
> 			BasicDiagnostic basicDiagnostic =
> 				new BasicDiagnostic
> 					(Diagnostic.ERROR,
> 					 "org.eclipse.gmf.map.edit", 
> 					 0,
> 					 getString("_UI_CreateModelError_message", resource.getURI()), 
> 					 new Object [] { exception == null ? (Object)resource : exception });
> 			basicDiagnostic.merge(EcoreUtil.computeDiagnostic(resource, true));
> 			return basicDiagnostic;
> 		}
> 		else if (exception != null) {
> 			return
> 				new BasicDiagnostic
> 					(Diagnostic.ERROR,
> 					 "org.eclipse.gmf.map.edit", 
> 					 0,
> 					 getString("_UI_CreateModelError_message", resource.getURI()), 
> 					 new Object[] { exception });
> 		}
> 		else {
> 			return Diagnostic.OK_INSTANCE;
716a1339,1339
> 								resourceToDiagnosticMap.put(resource, analyzeResourceProblems(resource, exception));
716,716c1338,1338
< 		catch (Exception exception) {
---
> 							catch (Exception exception) {
717,717d1338
< 			GMFMapEditPlugin.INSTANCE.log(exception);
731a910,913
> 		// Only creates the other pages if there is something that can be edited
> 		//
> 		if (!getEditingDomain().getResourceSet().getResources().isEmpty() &&
> 		    !((Resource)getEditingDomain().getResourceSet().getResources().get(0)).getContents().isEmpty()) {
921a1105,1107
> 		// Ensures that this editor will only display the page's tab
> 		// area if there are more than one page
> 		//		
932a1119,1120
> 
> 		updateProblemIndication();
1140,1140c1334,1334
< 					try {
---
> 							try {
1150,1150c1341,1341
< 							first = false;
---
> 							first = false;
1153,1154d1342
< 					catch (Exception exception) {
< 						GMFMapEditPlugin.INSTANCE.log(exception);
1158a1347,1347
> 		updateProblemIndication = false;
1173a1363,1365
> 		updateProblemIndication = true;
> 		
> 		updateProblemIndication();
1192,1192c1384,1384
< 		catch (IOException e) { }
---
> 		catch (IOException e) {
1192a1385,1385
> 		}
1193,1193d1384
< 
