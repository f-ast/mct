20,20d19
< import org.eclipse.core.runtime.IAdaptable;
56a56,62
> 	 */
> 	public ViewRefactorHelper() {
> 		this(PreferencesHint.USE_DEFAULTS);
> 	}
> 
> 	/**
> 	 * Constructs a new <code>ViewRefactorHelper</code> with a given preferences hint 
99a106,106
> 			if (!filteredObjects.contains(oldElement))
107a115,115
> 			if (!sortingObjects.contains(oldElement))
131a140,140
> 		return null;
132,132d139
< 		throw new RuntimeException("could not refactor a node for the morphed element"); //$NON-NLS-1$
152a161,161
> 		return null;
153,153d160
< 		throw new RuntimeException("could not refactor an edge for the morphed element"); //$NON-NLS-1$
170a179,179
> 				refactorDiagramLinks(oldDiagram, newDiagram);
173a183,191
> 		return null;
> 	}
> 
> 	protected void refactorDiagramLinks(Diagram oldDiagram, Diagram newDiagram) {
> 		Collection links = EObjectUtil.getReferencers(oldDiagram, new EReference[]{NotationPackage.eINSTANCE.getView_Element()});
> 		for (Iterator i = links.iterator(); i.hasNext();) {
> 			View view = (View) i.next();
> 			view.setElement(newDiagram);
> 		}
174,174d182
< 		throw new RuntimeException("could not refactor a diagram for the morphed element"); //$NON-NLS-1$
261,261c278,278
< 	 * Copies the style features of the old view to the new view
---
> 	 * Copies all styles feature from the old view to the new view
268,268c285,285
< 	protected void copyViewStyles(View oldView, View newView, final List excludeStyles) {
---
> 	protected void copyViewStyles(View oldView, View newView, List excludeStyles) {
270a288,290
> 			copyViewStyle(oldView, newView, oldStyle, excludeStyles);
> 		}
> 	}
271a292,300
> 	/**
> 	 * Copies the given style features of the old view to the new view
> 	 * 
> 	 * @param oldView The old view to copy style features from
> 	 * @param newView The new view to copy style features to
> 	 * @param oldStyle The old style to copy
> 	 * @param excludeStyles the list of <code>Style.eClass</code> types to exclude
> 	 */
> 	protected void copyViewStyle(View oldView, View newView, Style oldStyle, List excludeStyles) {
295,295d323
< 	}
310a339,341
> 	 * If the child view has the same element as the parent and also has a type, it is considered a subview
> 	 * and therefore only its properties are copied to matching subviews (if any) of the new parent.
> 	 * Otherwise, the default behavior is for the child view to be moved to the new parent
311,311d338
< 	 * Copies the notational properties of the old child node to a corresponding one on under the new view
350a381,396
> 		Collection views = EObjectUtil.getReferencers(element, new EReference[]{NotationPackage.eINSTANCE.getView_Element()});
> 
> 		// remove subviews since they will be refactored with their parent
> 		for (Iterator i = views.iterator(); i.hasNext();) {
> 			View view = (View) i.next();
> 			
> 			EObject parent = null;
> 			while ((parent = view.eContainer()) instanceof View) { 
> 				if (views.contains(parent)) {
> 					i.remove();
> 					break;
> 				}
> 				view = (View) parent;
> 			}
> 		}
> 		return views;
351,351d380
< 		return EObjectUtil.getReferencers(element, new EReference[]{NotationPackage.eINSTANCE.getView_Element()});
363a409,414
> 		return ViewService.getInstance().createNode(
> 			new EObjectAdapter(newElement), 
> 			(View)oldNode.eContainer(), 
> 			getNewViewType(oldNode, newElement), 
> 			ViewUtil.APPEND, 
> 			preferencesHint);
364,364d408
< 		return createNode(ViewUtil.getContainerView(oldNode), newElement, getNewViewType(oldNode, newElement));	
376a427,437
> 		Edge edge = (Edge) ViewService.getInstance().createEdge(
> 			new EObjectAdapter(newElement), 
> 			oldEdge.getDiagram(), 
> 			getNewViewType(oldEdge, newElement), 
> 			ViewUtil.APPEND, 
> 			preferencesHint);
> 		if (edge != null) {
> 			edge.setSource(oldEdge.getSource());
> 			edge.setTarget(oldEdge.getTarget());
> 		}
> 		return edge;
377,377d426
< 		return createEdge(oldEdge.getSource(), oldEdge.getTarget(), newElement, getNewViewType(oldEdge, newElement));	
389a450,451
> 		return ViewService.getInstance().createDiagram(
> 			new EObjectAdapter(newElement), 
390a453,453
> 			preferencesHint);
390,390c452,452
< 		return createDiagram(newElement, getNewViewType(oldDiagram, newElement));	
---
> 			getNewViewType(oldDiagram, newElement),
401,401d463
< 		if (oldView instanceof Diagram)
402,402c464,464
< 			return ((Diagram)oldView).getType();
---
> 		return oldView.getType();
403,403d464
< 		return null;
406,485d466
< 	/**
< 	 * Creates a diagram with the given context and kind
< 	 * 
< 	 * @param context The diagram element context
< 	 * @param kind diagram kind
< 	 * @param preferencesHint
< 	 *            The preference hint that is to be used to find the appropriate
< 	 *            preference store from which to retrieve diagram preference
< 	 *            values. The preference hint is mapped to a preference store in
< 	 *            the preference registry <@link DiagramPreferencesRegistry>.
< 	 * @return A newly created <code>Diagram</code>
< 	 */
< 	private Diagram createDiagram(EObject context, String kind) {
< 		IAdaptable viewModel = (context != null) ? new EObjectAdapter(context) : null;
< 		String viewType = (kind != null) ? kind : ""; //$NON-NLS-1$
< 		return ViewService.getInstance().createDiagram(viewModel, viewType, preferencesHint);
< 	}
< 	
< 	/**
< 	 * Creates a node for a given eObject and with a given type and inserts it into a given container
< 	 * 
< 	 * @param container The node view container
< 	 * @param eObject The node view object context
< 	 * @param type The node view type
< 	 * @param preferencesHint
< 	 *            The preference hint that is to be used to find the appropriate
< 	 *            preference store from which to retrieve diagram preference
< 	 *            values. The preference hint is mapped to a preference store in
< 	 *            the preference registry <@link DiagramPreferencesRegistry>.
< 	 * @return A newly created <code>Node</code>
< 	 */
< 	private Node createNode(View container, EObject eObject, String type) {
< 		IAdaptable viewModel = (eObject != null) ? new EObjectAdapter(eObject) : null;
< 		String viewType = (type != null) ? type : ""; //$NON-NLS-1$
< 		View view = ViewService.getInstance().createNode(viewModel, container, viewType, ViewUtil.APPEND, preferencesHint);
< 		return (view != null) ? (Node)view : null;
< 	}
< 	
< 	/**
< 	 * Creates an edge for a given eObject and with a given type in the given diagram
< 	 *
< 	 * @param diagram The container diagram 
< 	 * @param eObject The edge view object context
< 	 * @param type The edge view type
< 	 * @param preferencesHint
< 	 *            The preference hint that is to be used to find the appropriate
< 	 *            preference store from which to retrieve diagram preference
< 	 *            values. The preference hint is mapped to a preference store in
< 	 *            the preference registry <@link DiagramPreferencesRegistry>.
< 	 * @return A newly created <code>Edge</code>
< 	 */
< 	private Edge createEdge(Diagram diagram, EObject eObject, String type) {
< 		IAdaptable viewModel = (eObject != null) ? new EObjectAdapter(eObject) : null;
< 		String viewType = (type != null) ? type : ""; //$NON-NLS-1$
< 		View view = ViewService.getInstance().createEdge(viewModel, diagram, viewType, ViewUtil.APPEND, preferencesHint);
< 		return (view != null) ? (Edge) view : null;
< 	}
< 	
< 	/**
< 	 * Creates an edge for a given eObject and with a given type and connects it between a given source and a given target
< 	 * 
< 	 * @param source The edge's source view
< 	 * @param target The edge's target view
< 	 * @param eObject The edge view object context
< 	 * @param type The edge view type
< 	 * @param preferencesHint
< 	 *            The preference hint that is to be used to find the appropriate
< 	 *            preference store from which to retrieve diagram preference
< 	 *            values. The preference hint is mapped to a preference store in
< 	 *            the preference registry <@link DiagramPreferencesRegistry>.
< 	 * @return A newly created <code>Edge</code>
< 	 */
< 	private Edge createEdge(View source, View target, EObject eObject, String type) {
< 		Edge edge = createEdge(source.getDiagram(), eObject, type);
< 		if (edge != null) {
< 			edge.setSource(source);
< 			edge.setTarget(target);
< 		}
< 		return edge;
< 	}
