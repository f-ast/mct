695a696,704
> 	public EReference getElementInitializer_MappingEntry() {
> 		return (EReference)elementInitializerEClass.getEStructuralFeatures().get(0);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
731a741,749
> 	public EReference getFeatureValueSpec_FeatureSeqInitializer() {
> 		return (EReference)featureValueSpecEClass.getEStructuralFeatures().get(1);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
1029a1048,1048
> 		createEReference(elementInitializerEClass, ELEMENT_INITIALIZER__MAPPING_ENTRY);
1035a1055,1055
> 		createEReference(featureValueSpecEClass, FEATURE_VALUE_SPEC__FEATURE_SEQ_INITIALIZER);
1122,1122c1142,1142
< 		initEReference(getMappingEntry_DomainInitializer(), this.getElementInitializer(), null, "domainInitializer", null, 0, 1, MappingEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
---
> 		initEReference(getMappingEntry_DomainInitializer(), this.getElementInitializer(), this.getElementInitializer_MappingEntry(), "domainInitializer", null, 0, 1, MappingEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
1172a1193,1193
> 		initEReference(getElementInitializer_MappingEntry(), this.getMappingEntry(), this.getMappingEntry_DomainInitializer(), "mappingEntry", null, 1, 1, ElementInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
1175,1175c1196,1196
< 		initEReference(getFeatureSeqInitializer_Initializers(), this.getFeatureValueSpec(), null, "initializers", null, 1, -1, FeatureSeqInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
---
> 		initEReference(getFeatureSeqInitializer_Initializers(), this.getFeatureValueSpec(), this.getFeatureValueSpec_FeatureSeqInitializer(), "initializers", null, 1, -1, FeatureSeqInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
1178a1200,1200
> 		initEReference(getFeatureValueSpec_FeatureSeqInitializer(), this.getFeatureSeqInitializer(), this.getFeatureSeqInitializer_Initializers(), "featureSeqInitializer", null, 1, 1, FeatureValueSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
1220,1220c1244,1244
< 		// http://www.eclipse.org/gmf/2005/constraints/meta
---
> 		// http://www.eclipse.org/gmf/2005/constraints/meta
1221,1221c1245,1245
< 		createMetaAnnotations();
---
> 		createMetaAnnotations();
1276,1276c1298,1298
< 			 "ocl", "if linkMapping.domainMetaElement.oclIsUndefined() then linkMapping.linkMetaFeature.eContainingClass else linkMapping.containmentFeature.eContainingClass endif"
---
> 			 "ocl", "let lm:LinkMapping=linkMapping in if lm.sourceMetaFeature.oclIsUndefined() then (if lm.containmentFeature.oclIsUndefined() then lm.linkMetaFeature.eContainingClass else lm.containmentFeature.eContainingClass endif) else lm.sourceMetaFeature.oclAsType(ecore::EReference).eReferenceType endif"
1299,1299c1321,1321
< 			 "type.ocl", "if linkMapping.domainMetaElement.oclIsUndefined() then linkMapping.linkMetaFeature.eContainingClass else linkMapping.containmentFeature.eContainingClass endif"
---
> 			 "type.ocl", "let lm:LinkMapping=linkMapping in if lm.sourceMetaFeature.oclIsUndefined() then (if lm.containmentFeature.oclIsUndefined() then lm.linkMetaFeature.eContainingClass else lm.containmentFeature.eContainingClass endif) else lm.sourceMetaFeature.oclAsType(ecore::EReference).eReferenceType endif"
1348a1371,1377
> 		  (mappingEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "nodes->forAll(n|n.containmentFeature.oclIsUndefined() and not n.domainMetaElement.oclIsUndefined() implies links->exists(let r:ecore::EReference= linkMetaFeature.oclAsType(ecore::EReference) in r.containment and r.eReferenceType.isSuperTypeOf(n.domainMetaElement)))",
> 			 "description", "Phantom nodes that are not targeted by a link mapping exist"
> 		   });							
> 		addAnnotation
1351a1381,1382
> 			 "ocl", "not domainInitializer.oclIsUndefined() implies not domainMetaElement.oclIsUndefined()",
> 			 "description", "\'Domain Element\' must be set in mapping with \'Element Initializers\'"
1352,1352d1380
< 			 "ocl", "let i : FeatureSeqInitializer = domainInitializer.oclAsType( FeatureSeqInitializer) in i.oclIsUndefined() or i.initializers.feature.eContainingClass->forAll(c|c.isSuperTypeOf(domainMetaElement))"
1357a1388,1401
> 			 "ocl", "not containmentFeature.oclIsUndefined() implies containmentFeature.containment",
> 			 "description", "Containment EReference expected"
> 		   });		
> 		addAnnotation
> 		  (abstractNodeMappingEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not (domainMetaElement.oclIsUndefined()  and containmentFeature.oclIsUndefined())",
> 			 "description", "Either domain meta element or containment feature must be set in node mapping"
> 		   });		
> 		addAnnotation
> 		  (abstractNodeMappingEClass, 
> 		   source, 
> 		   new String[] {
1358a1403,1403
> 			 "description", "\'Domain Element\' must be the same or extend the type referenced by \'Containment Feature\'"
1358,1358c1402,1402
< 			 "ocl", "containmentFeature.oclIsUndefined() or (containmentFeature.containment and containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement))"
---
> 			 "ocl", "not domainMetaElement.oclIsUndefined() implies containmentFeature.oclIsUndefined() or containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement)",
1363a1409,1431
> 			 "ocl", "not editFeature.oclIsUndefined() implies getDomainContext().oclIsUndefined() or editFeature.eContainingClass.isSuperTypeOf(getDomainContext())",
> 			 "description", "The Edit Feature must be owned by the domain context EClass or its super type"
> 		   });				
> 		addAnnotation
> 		  (childNodeMappingEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not containmentFeature.oclIsUndefined() ",
> 			 "description", "The child node mapping containmentFeature must be set"
> 		   });			
> 		addAnnotation
> 		  (linkMappingEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "domainMetaElement.oclIsUndefined() implies containmentFeature.oclIsUndefined() and sourceMetaFeature.oclIsUndefined()",
> 			 "description", "Link mapping without \'Domain Element\' class does not use \'Containment Feature\' and \'Source Feature\'"
> 		   });		
> 		addAnnotation
> 		  (linkMappingEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not domainMetaElement.oclIsUndefined()  implies containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement)",
> 			 "description", "\'Containment Feature\' must reference the same class or super type of \'Domain Element\' EClass"
1364,1364d1408
< 			 "ocl", "editFeature.oclIsUndefined() or (not domainMetaElement.oclIsUndefined() and editFeature.eContainingClass.isSuperTypeOf(domainMetaElement)) or containmentFeature.eType.oclAsType(ecore::EClass).eAllAttributes->includes(editFeature)"
1370a1438,1438
> 			 "description", "\'Label Edit Feature\' must be owned by the domain context EClass or its super type"
1370,1370c1437,1437
< 			 "ocl", "labelEditFeature.oclIsUndefined() or labelEditFeature.eContainingClass.isSuperTypeOf(domainMetaElement)"
---
> 			 "ocl", "not labelEditFeature.oclIsUndefined() implies getDomainContext().oclIsUndefined() or labelEditFeature.eContainingClass.isSuperTypeOf(getDomainContext())",
1376,1376c1444,1444
< 			 "ocl", "labelDisplayFeature.oclIsUndefined() or labelDisplayFeature.eContainingClass.isSuperTypeOf(domainMetaElement)"
---
> 			 "ocl", "not labelDisplayFeature.oclIsUndefined() implies getDomainContext().oclIsUndefined() or labelDisplayFeature.eContainingClass.isSuperTypeOf(getDomainContext())",
1376a1445,1445
> 			 "description", "\'Label Display Feature\' must be owned by the domain context EClass or its super type"
1382,1382c1451,1451
< 			 "ocl", "domainMetaElement.oclIsUndefined() or sourceMetaFeature.eContainingClass.isSuperTypeOf(domainMetaElement)"
---
> 			 "ocl", "not domainMetaElement.oclIsUndefined() implies sourceMetaFeature.oclIsUndefined() or sourceMetaFeature.eContainingClass.isSuperTypeOf(domainMetaElement)",
1382a1452,1452
> 			 "description", "\'Source Feature\' must be owned by the link \'Domain Element\' or its super type"
1388,1388c1458,1458
< 			 "ocl", "domainMetaElement.oclIsUndefined() or linkMetaFeature.eContainingClass.isSuperTypeOf(domainMetaElement)"
---
> 			 "ocl", "not(domainMetaElement.oclIsUndefined() or linkMetaFeature.oclIsUndefined()) implies linkMetaFeature.eContainingClass.isSuperTypeOf(domainMetaElement)",
1388a1459,1473
> 			 "description", "\'Target Feature\' must be owned by the link \'Domain Element\' or its super type"
> 		   });						
> 		addAnnotation
> 		  (linkConstraintsEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not (sourceEnd.oclIsUndefined() and targetEnd.oclIsUndefined())",
> 			 "description", "Either \'sourceEnd\' or \'targetEnd\' constraint must be specified"
> 		   });																						
> 		addAnnotation
> 		  (getFeatureValueSpec_Feature(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "feature.eContainingClass.isSuperTypeOf(featureSeqInitializer.mappingEntry.getDomainContext())",
> 			 "description", "Initialized \'Feature\' must be owned by \'Domain Element\' or its super type"
