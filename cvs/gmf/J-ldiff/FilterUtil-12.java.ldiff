36,36d35
< import org.eclipse.gmf.mappings.LabelMapping;
52,52c51,51
< 	public static <T> List<T> filterByResourceSet(Collection<T> eClasses, ResourceSet resourceSet) {
---
> 	public static <T extends EObject> List<T> filterByResourceSet(Collection<T> eClasses, ResourceSet resourceSet) {
53,53c52,52
< 		return sort(getValidEClassesFrom(eClasses, resourceSet));
---
> 		return sort(filterValidEObjectsFrom(eClasses, resourceSet));
56,56c55,55
< 	public static List filterByContainmentFeature(Collection eClasses, MappingEntry mappingEntry) {
---
> 	public static List<EClass> filterByContainmentFeature(Collection<EClass> eClasses, MappingEntry mappingEntry) {
71,71c70,70
< 		return sort(getSubtypesOf(getValidEClassesFrom(eClasses, mappingEntry.eResource().getResourceSet()), superType));
---
> 		return sort(getSubtypesOf(filterValidEObjectsFrom(eClasses, mappingEntry.eResource().getResourceSet()), superType));
74,74c73,73
< 	public static List filterByContainerMetaclass(Collection eReferences, LinkMapping mappingEntry) {
---
> 	public static List<EStructuralFeature> filterByContainerMetaclass(Collection<EStructuralFeature> eReferences, MappingEntry mappingEntry) {
79,88d77
< 	public static List filterByContainerMetaclass(Collection eAttributes, LabelMapping labelMapping) {
< 		EClass containerMetaClass = labelMapping.getMapEntry().getDomainMetaElement();
< 		return sort(getEStructuralFeaturesOf(eAttributes, containerMetaClass));
< 	}
< 	
< 	public static List filterByContainerMetaclass(Collection eAttributes, MappingEntry mappingEntry) {
< 		EClass containerMetaClass = mappingEntry.getDomainMetaElement();
< 		return sort(getEStructuralFeaturesOf(eAttributes, containerMetaClass));
< 	}
< 
89,89c78,78
< 	public static List filterByContainerMetaclass(Collection eReferences, NodeReference nodeReference, boolean containmentOnly) {
---
> 	public static List<EReference> filterByContainerMetaclass(Collection<EReference> eReferences, NodeReference nodeReference, boolean containmentOnly) {
103,104d91
< 		// XXX hmm, outcome from getEStructuralFeaturesOf passed to getEReferences - 
< 		// neither implementation filters out elements of other types. just assumes and casts 
105,105c92,92
< 		List fromHierarchy = sort(getEReferences(getEStructuralFeaturesOf(eReferences, containerMetaClass), containmentOnly));
---
> 		List<EReference> fromHierarchy = sort(getEReferences(getEStructuralFeaturesOf(eReferences, containerMetaClass), containmentOnly));
110,110c97,97
< 		List targetsToChild = sort(getEReferences(getEReferencesOfType(eReferences, targetMetaClass), containmentOnly));
---
> 		List<EReference> targetsToChild = sort(getEReferences(getEReferencesOfType(eReferences, targetMetaClass), containmentOnly));
111,111c98,98
< 		for (Iterator it = targetsToChild.iterator(); it.hasNext();) {
---
> 		for (Iterator<EReference> it = targetsToChild.iterator(); it.hasNext();) {
116,116c103,103
< 		ArrayList rv = new ArrayList(fromHierarchy.size() + targetsToChild.size());
---
> 		ArrayList<EReference> rv = new ArrayList<EReference>(fromHierarchy.size() + targetsToChild.size());
122,122c109,109
< 	public static List filterByReferenceType(Collection eReferences, LinkMapping linkMapping) {
---
> 	public static List<EReference> filterByReferenceType(Collection<EReference> eReferences, LinkMapping linkMapping) {
127,127c114,114
< 	public static Collection filterByNodeMapping(Collection childReferences, CompartmentMapping mapping) {
---
> 	public static Collection<EObject> filterByNodeMapping(Collection<EObject> childReferences, CompartmentMapping mapping) {
131,131c118,118
< 	public static Collection filterByNodeMapping(Collection compartments, ChildReference childReference) {
---
> 	public static Collection<EObject> filterByNodeMapping(Collection<EObject> compartments, ChildReference childReference) {
135,135c122,122
< 	public static Collection filterBySuperClasses(Collection instances, Class[] classes) {
---
> 	public static Collection<?> filterBySuperClasses(Collection<?> instances, Class<?>[] classes) {
159,159c146,146
< 				for (Iterator it = eClasses.iterator(); it.hasNext();) {
---
> 				for (Iterator<EClass> it = eClasses.iterator(); it.hasNext();) {
160,160c147,147
< 					EClass nextEClass = (EClass) it.next();
---
> 					EClass nextEClass = it.next();
174,174c161,161
< 	private static Collection getSubtypesOf(Collection eClasses, EClass superType) {
---
> 	private static Collection<EClass> getSubtypesOf(Collection<EClass> eClasses, EClass superType) {
178,178c165,165
< 		for (Iterator it = eClasses.iterator(); it.hasNext();) {
---
> 		for (Iterator<EClass> it = eClasses.iterator(); it.hasNext();) {
179,179c166,166
< 			EClass nextEClass = (EClass) it.next();
---
> 			EClass nextEClass = it.next();
187,187c174,174
< 	private static Collection getEReferences(Collection eReferences, boolean containmentOnly) {
---
> 	private static Collection<EReference> getEReferences(Collection<EReference> eReferences, boolean containmentOnly) {
191,191c178,178
< 		for (Iterator it = eReferences.iterator(); it.hasNext();) {
---
> 		for (Iterator<EReference> it = eReferences.iterator(); it.hasNext();) {
192,192c179,179
< 			EReference nextReference = (EReference) it.next();
---
> 			EReference nextReference = it.next();
199a187,187
> 	private static <T extends EStructuralFeature> Collection<T> getEStructuralFeaturesOf(Collection<T> structuralFeatures, EClass featureContainerEClass) {
200,200d186
< 	private static Collection getEStructuralFeaturesOf(Collection structuralFeatures, EClass featureContainerEClass) {
201,201c188,188
< 		Collection result = getValidEStructuralFeatures(structuralFeatures);
---
> 		Collection<T> result = getValidEStructuralFeatures(structuralFeatures);
205,205c192,192
< 		for (Iterator it = result.iterator(); it.hasNext();) {
---
> 		for (Iterator<T> it = result.iterator(); it.hasNext();) {
206,206c193,193
< 			EStructuralFeature nextFeature = (EStructuralFeature) it.next();
---
> 			EStructuralFeature nextFeature = it.next();
213a201,201
> 	private static Collection<EReference> getEReferencesOfType(Collection<EReference> references, EClass referenceType) {
214,214d200
< 	private static Collection getEReferencesOfType(Collection references, EClass referenceType) {
215,215c202,202
< 		Collection result = getValidEStructuralFeatures(references);
---
> 		Collection<EReference> result = getValidEStructuralFeatures(references);
219,219c206,206
< 		for (Iterator it = result.iterator(); it.hasNext();) {
---
> 		for (Iterator<EReference> it = result.iterator(); it.hasNext();) {
220,220c207,207
< 			EReference nextFeature = (EReference) it.next();
---
> 			EReference nextFeature = it.next();
227a215,215
> 	private static <T extends EStructuralFeature> Collection<T> getValidEStructuralFeatures(Collection<T> structuralFeatures) {
228,228d214
< 	private static Collection<EStructuralFeature> getValidEStructuralFeatures(Collection structuralFeatures) {
229,229c216,216
< 		Collection result = getValidEObjects(structuralFeatures);
---
> 		Collection<T> result = getValidEObjects(structuralFeatures);
230,230c217,217
< 		for (Iterator it = result.iterator(); it.hasNext();) {
---
> 		for (Iterator<T> it = result.iterator(); it.hasNext();) {
231,231c218,218
< 			EStructuralFeature nextFeature = (EStructuralFeature) it.next();
---
> 			EStructuralFeature nextFeature = it.next();
238a226,227
> 	private static <T extends EObject> Collection<T> filterValidEObjectsFrom(Collection<T> eClasses, ResourceSet resourceSet) {
> 		Collection<T> result = getValidEObjects(eClasses);
239,240d225
< 	private static <T> Collection<T> getValidEClassesFrom(Collection<T> eClasses, ResourceSet resourceSet) {
< 		Collection result = getValidEObjects(eClasses);
241,241c228,228
< 		for (Iterator it = result.iterator(); it.hasNext();) {
---
> 		for (Iterator<T> it = result.iterator(); it.hasNext();) {
242,242c229,229
< 			EClass nextEClass = (EClass) it.next();
---
> 			EObject nextEClass = it.next();
252a240,240
> 	private static <T extends EObject> Collection<T> getValidEObjects(Collection<T> eObjects) {
253,253d239
< 	private static Collection<EObject> getValidEObjects(Collection<?> eObjects) {
254,254c241,241
< 		LinkedList<EObject> result = new LinkedList<EObject>();
---
> 		LinkedList<T> result = new LinkedList<T>();
255,255d241
< 		for (Iterator it = eObjects.iterator(); it.hasNext();) {
256,256c242,242
< 			EObject nextEObject = (EObject) it.next();
---
> 		for (T nextEObject : eObjects) {
265,265c251,251
< 	private static Collection getChildrenOf(Collection elements, EObject container, boolean addNull) {
---
> 	private static <T extends EObject> Collection<T> getChildrenOf(Collection<T> elements, EObject container, boolean addNull) {
266,266c252,252
< 		List result = new ArrayList();
---
> 		LinkedList<T> result = new LinkedList<T>();
267,267d252
< 		for (Iterator it = elements.iterator(); it.hasNext();) {
268,268c253,253
< 			EObject nextEObject = (EObject) it.next();
---
> 		for (T nextEObject : elements) {
276,276c261,261
< 	private static Collection getSubClassesOf(Collection instances, Class[] classes) {
---
> 	private static Collection<?> getSubClassesOf(Collection<?> instances, Class<?>[] classes) {
276a262,262
> 		LinkedList<Object> result = new LinkedList<Object>();
277,278d261
< 		List result = new ArrayList();
< 		for (Iterator it = instances.iterator(); it.hasNext();) {
279,279c263,263
< 			Object nextInstance = it.next();
---
> 		for (Object nextInstance : instances) {
