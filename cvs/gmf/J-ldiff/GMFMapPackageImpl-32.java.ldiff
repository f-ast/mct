1277a1278,1295
> 	public EAttribute getMetricRule_LowLimit() {
> 		return (EAttribute)metricRuleEClass.getEStructuralFeatures().get(3);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public EAttribute getMetricRule_HighLimit() {
> 		return (EAttribute)metricRuleEClass.getEStructuralFeatures().get(4);
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
1279,1279c1297,1297
< 		return (EReference)metricRuleEClass.getEStructuralFeatures().get(3);
---
> 		return (EReference)metricRuleEClass.getEStructuralFeatures().get(5);
1483a1502,1503
> 		createEAttribute(metricRuleEClass, METRIC_RULE__LOW_LIMIT);
> 		createEAttribute(metricRuleEClass, METRIC_RULE__HIGH_LIMIT);
1681a1702,1703
> 		initEAttribute(getMetricRule_LowLimit(), ecorePackage.getEDoubleObject(), "lowLimit", null, 0, 1, MetricRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
> 		initEAttribute(getMetricRule_HighLimit(), ecorePackage.getEDoubleObject(), "highLimit", null, 0, 1, MetricRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
2026a2049,2055
> 		  (metricRuleEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not lowLimit.oclIsUndefined() and not highLimit.oclIsUndefined()  implies lowLimit < highLimit",
> 			 "description", "Metric value \'lowLimit\' must be smaller then \'highLimit\'"
> 		   });			
> 		addAnnotation
