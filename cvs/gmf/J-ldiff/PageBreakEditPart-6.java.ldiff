64,64c64,64
< 			calculatePageBreakFigureBounds();
---
> 			calculatePageBreakFigureBounds(true, bounds.getSize());
70a71,79
> 			updatePageCount(width, height);			
> 			
> 			getPageBreaksFigure().setLocation(location);
> 			
> 			
> 		}	
> 	}
> 
> 	private void updatePageCount(int width, int height) {
81,81d89
< 			getPageBreaksFigure().setLocation(location);
82a91,91
> 	}
83a93,103
> 	/**
> 	 * Calculates the size of the page breaks figure and the
> 	 * number of rows and columns based on the print page size.
> 	 * This method updates the page breaks figure bounds directly.
> 	 * 
> 	 * @param center true to center the page breaks figure,
> 	 * false to not center it.
> 	 */
> 	public void calculatePageBreakFigureBounds(boolean center) {
> 		calculatePageBreakFigureBounds(center, diagramBounds.getSize());
> 	}
86,87d127
< 		//diagramBounds = bounds;
< 		//calculatePageBreakFigureSize();	
115a105,105
> 	/**
116,116c106,106
< 	 * Calculates the size of the page breaks figure and the
---
> 	 * Calculates the size of the page breaks figure and the
117,117c107,107
< 	 * number of rows and columns based on the print page size.
---
> 	 * number of rows and columns based on the print page size.
117a108,108
> 	 * This method will also center the page breaks figure.
118,121d107
< 	 * This method updates the page breaks figure bounds directly.
< 	 * 
< 	 * @param center true to center the page breaks figure,
< 	 * false to not center it.
122,122c109,109
< 	 */
---
> 	 */
122a110,112
> 	public void calculatePageBreakFigureBounds() {
> 		calculatePageBreakFigureBounds(true, diagramBounds.getSize());
> 	}	
123,140d109
< 	public void calculatePageBreakFigureBounds(boolean center) {
< 		Point printerPageSize = getPageSize();
< 		float numCols = ((float) diagramBounds.width) / printerPageSize.x;
< 		int cols = Math.max(1, (int) Math.ceil(numCols));
< 		float numRows = ((float) diagramBounds.height) / printerPageSize.y;
< 		int rows = Math.max(1, (int) Math.ceil(numRows));
< 
< 		int xInc = printerPageSize.x * cols;
< 		int yInc = printerPageSize.y * rows;
< 
< 		getPageBreaksFigure().setSize(new Dimension(xInc, yInc));
< 		getPageBreaksFigure().setPageCount(rows, cols);
< 		if (center) {
< 			centerPageBreaksFigure();
< 			//setSize won't affect x and y, just width and height
< 			updatePreferenceStore();
< 		}
< 	}
141,141c113,113
< 	
---
> 	
142,142c114,114
< 	/**
---
> 	/**
143,143c115,115
< 	 * Calculates the size of the page breaks figure and the
---
> 	 * Calculates the size of the page breaks figure and the
144,144c116,116
< 	 * number of rows and columns based on the print page size.
---
> 	 * number of rows and columns based on the print page size.
144a117,120
> 	 * This method updates the page breaks figure bounds directly.
> 	 * 
> 	 * @param center true to center the page breaks figure,
> 	 * false to not center it.
145,145d116
< 	 * This method will also center the page breaks figure.
146a122,123
> 	private void calculatePageBreakFigureBounds(boolean center, Dimension bounds) {
> 		updatePageCount(bounds.width, bounds.height);
146,146c121,121
< 	 */
---
> 	 */
147,148d121
< 	public void calculatePageBreakFigureBounds() {
< 		calculatePageBreakFigureBounds(true);
149a125,126
> 		if (center) {
> 			centerPageBreaksFigure();
149,149c124,124
< 	}	
---
> 		
150,151d124
< 	
< 	/**
366,366d369
< //		this.pageBreakBounds = getPageBreaksFigure().getBounds();
373,373c376,376
< 	private void updatePreferenceStore() {
---
> 	public void updatePreferenceStore() {
