23a24,25
> import org.eclipse.emf.ecore.EPackage;
> 
25a28,29
> import org.eclipse.emf.ecore.plugin.EcorePlugin;
> 
78a83,101
>      * Creates the default factory implementation.
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public static NotationFactory init() {
>         try {
>             NotationFactory theNotationFactory = (NotationFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/runtime/1.0.0/notation"); //$NON-NLS-1$ 
>             if (theNotationFactory != null) {
>                 return theNotationFactory;
>             }
>         }
>         catch (Exception exception) {
>             EcorePlugin.INSTANCE.log(exception);
>         }
>         return new NotationFactoryImpl();
>     }
> 
>     /**
135a517,520
>      * @generated
>      */
>     public Sorting createSortingFromString(EDataType eDataType, String initialValue) {
>         Sorting result = Sorting.get(initialValue);
135a159,176
>             case NotationPackage.SORTING:
>                 return createSortingFromString(eDataType, initialValue);
>             case NotationPackage.FILTERING:
>                 return createFilteringFromString(eDataType, initialValue);
>             case NotationPackage.ROUTING:
>                 return createRoutingFromString(eDataType, initialValue);
>             case NotationPackage.SMOOTHNESS:
>                 return createSmoothnessFromString(eDataType, initialValue);
>             case NotationPackage.JUMP_LINK_STATUS:
>                 return createJumpLinkStatusFromString(eDataType, initialValue);
>             case NotationPackage.JUMP_LINK_TYPE:
>                 return createJumpLinkTypeFromString(eDataType, initialValue);
>             case NotationPackage.ALIGNMENT:
>                 return createAlignmentFromString(eDataType, initialValue);
>             case NotationPackage.SORTING_DIRECTION:
>                 return createSortingDirectionFromString(eDataType, initialValue);
>             case NotationPackage.MEASUREMENT_UNIT:
>                 return createMeasurementUnitFromString(eDataType, initialValue);
136,137d516
< 			case NotationPackage.SORTING: {
< 				Sorting result = Sorting.get(initialValue);
138a522,540
>         return result;
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public String convertSortingToString(EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString();
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public Filtering createFilteringFromString(EDataType eDataType, String initialValue) {
>         Filtering result = Filtering.get(initialValue);
138,138c521,521
< 				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
---
>         if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
139,142d521
< 				return result;
< 			}
< 			case NotationPackage.FILTERING: {
< 				Filtering result = Filtering.get(initialValue);
143a542,560
>         return result;
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public String convertFilteringToString(EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString();
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public Routing createRoutingFromString(EDataType eDataType, String initialValue) {
>         Routing result = Routing.get(initialValue);
143,143c541,541
< 				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
---
>         if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
144,147d541
< 				return result;
< 			}
< 			case NotationPackage.ROUTING: {
< 				Routing result = Routing.get(initialValue);
148,148c561,561
< 				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
---
>         if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
148a562,580
>         return result;
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public String convertRoutingToString(EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString();
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public Smoothness createSmoothnessFromString(EDataType eDataType, String initialValue) {
>         Smoothness result = Smoothness.get(initialValue);
149,152d561
< 				return result;
< 			}
< 			case NotationPackage.SMOOTHNESS: {
< 				Smoothness result = Smoothness.get(initialValue);
153,153c581,581
< 				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
---
>         if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
153a582,600
>         return result;
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public String convertSmoothnessToString(EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString();
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public JumpLinkStatus createJumpLinkStatusFromString(EDataType eDataType, String initialValue) {
>         JumpLinkStatus result = JumpLinkStatus.get(initialValue);
154,157d581
< 				return result;
< 			}
< 			case NotationPackage.JUMP_LINK_STATUS: {
< 				JumpLinkStatus result = JumpLinkStatus.get(initialValue);
158a602,620
>         return result;
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public String convertJumpLinkStatusToString(EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString();
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public JumpLinkType createJumpLinkTypeFromString(EDataType eDataType, String initialValue) {
>         JumpLinkType result = JumpLinkType.get(initialValue);
158,158c601,601
< 				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
---
>         if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
159,162d601
< 				return result;
< 			}
< 			case NotationPackage.JUMP_LINK_TYPE: {
< 				JumpLinkType result = JumpLinkType.get(initialValue);
163,163c621,621
< 				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
---
>         if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
163a622,640
>         return result;
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public String convertJumpLinkTypeToString(EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString();
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public Alignment createAlignmentFromString(EDataType eDataType, String initialValue) {
>         Alignment result = Alignment.get(initialValue);
164,167d621
< 				return result;
< 			}
< 			case NotationPackage.ALIGNMENT: {
< 				Alignment result = Alignment.get(initialValue);
168a642,660
>         return result;
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public String convertAlignmentToString(EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString();
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public SortingDirection createSortingDirectionFromString(EDataType eDataType, String initialValue) {
>         SortingDirection result = SortingDirection.get(initialValue);
168,168c641,641
< 				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
---
>         if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
169,172d641
< 				return result;
< 			}
< 			case NotationPackage.SORTING_DIRECTION: {
< 				SortingDirection result = SortingDirection.get(initialValue);
173a662,680
>         return result;
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public String convertSortingDirectionToString(EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString();
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public MeasurementUnit createMeasurementUnitFromString(EDataType eDataType, String initialValue) {
>         MeasurementUnit result = MeasurementUnit.get(initialValue);
173,173c661,661
< 				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
---
>         if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
174,177d661
< 				return result;
< 			}
< 			case NotationPackage.MEASUREMENT_UNIT: {
< 				MeasurementUnit result = MeasurementUnit.get(initialValue);
178,178c681,681
< 				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
---
>         if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
179,179c682,682
< 				return result;
---
>         return result;
179a683,693
>     }
> 
>     /**
>      * <!-- begin-user-doc -->
>      * <!-- end-user-doc -->
>      * @generated
>      */
>     public String convertMeasurementUnitToString(EDataType eDataType, Object instanceValue) {
>         return instanceValue == null ? null : instanceValue.toString();
>     }
> 
180,180c694,694
< 			}
---
> 	/**
180a695,696
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
199a196,196
>                 return convertSortingToString(eDataType, instanceValue);
200,200d195
< 				return instanceValue == null ? null : instanceValue.toString();
201a198,198
>                 return convertFilteringToString(eDataType, instanceValue);
202,202d197
< 				return instanceValue == null ? null : instanceValue.toString();
203a200,200
>                 return convertRoutingToString(eDataType, instanceValue);
204,204d199
< 				return instanceValue == null ? null : instanceValue.toString();
205a202,202
>                 return convertSmoothnessToString(eDataType, instanceValue);
206,206d201
< 				return instanceValue == null ? null : instanceValue.toString();
207a204,204
>                 return convertJumpLinkStatusToString(eDataType, instanceValue);
208,208d203
< 				return instanceValue == null ? null : instanceValue.toString();
209a206,206
>                 return convertJumpLinkTypeToString(eDataType, instanceValue);
210,210d205
< 				return instanceValue == null ? null : instanceValue.toString();
211a208,208
>                 return convertAlignmentToString(eDataType, instanceValue);
212,212d207
< 				return instanceValue == null ? null : instanceValue.toString();
213a210,210
>                 return convertSortingDirectionToString(eDataType, instanceValue);
214,214d209
< 				return instanceValue == null ? null : instanceValue.toString();
215a212,212
>                 return convertMeasurementUnitToString(eDataType, instanceValue);
216,216d211
< 				return instanceValue == null ? null : instanceValue.toString();
