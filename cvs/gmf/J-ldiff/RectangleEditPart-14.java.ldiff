33a34,34
> import org.eclipse.gmf.gmfgraph.ColorConstants;
56a56,56
> import org.eclipse.gmf.runtime.notation.FillStyle;
57,57c57,57
< import org.eclipse.gmf.runtime.notation.ShapeStyle;
---
> import org.eclipse.gmf.runtime.notation.LineStyle;
187,187c189,189
< 	 * Body of this method does not depend on settings in generation model
---
> 	 * Body of this method does not depend on settings in generation model so
188,188c190,190
< 	 * so you may safely remove <i>generated</i> tag and modify it.
---
> 	 * you may safely remove <i>generated</i> tag and modify it.
202,202c204,204
< 	 * Default implementation treats passed figure as content pane.
---
> 	 * Default implementation treats passed figure as content pane. Respects
203a206,207
> 	 * 
> 	 * @param nodeShape
203,203c205,205
< 	 * Respects layout one may have set for generated figure.
---
> 	 * layout one may have set for generated figure.
204,204c208,208
< 	 * @param nodeShape instance of generated figure class
---
> 	 *            instance of generated figure class
459,459c463,463
< 		final ShapeStyle shapeStyle = (ShapeStyle) view.getStyle(NotationPackage.eINSTANCE.getShapeStyle());
---
> 		final FillStyle theFillStyle = (FillStyle) view.getStyle(NotationPackage.eINSTANCE.getFillStyle());
466a614,615
> 	public static int getRgbColor(ConstantColor modelColor) {
> 		final int rgbColor;
466a471,471
> 				rgbColor = getRgbColor(modelColor);
467,467c616,616
< 				switch (modelColor.getValue().getValue()) {
---
> 		switch (modelColor.getValue().getValue()) {
467a617,677
> 		case ColorConstants.WHITE: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.white.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.BLACK: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.black.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.LIGHT_GRAY: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.lightGray.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.GRAY: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.gray.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.DARK_GRAY: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.darkGray.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.RED: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.red.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.ORANGE: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.orange.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.YELLOW: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.yellow.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.GREEN: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.green.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.LIGHT_GREEN: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.lightGreen.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.DARK_GREEN: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.darkGreen.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.CYAN: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.cyan.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.LIGHT_BLUE: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.lightBlue.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.BLUE: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.blue.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.DARK_BLUE: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.darkBlue.getRGB().hashCode();
> 			break;
> 		}
> 		default:
468,474d616
< 				/*
< 				 case <nextValue>: {
< 				 rgbColor = org.eclipse.draw2d.ColorConstants.<nextColorLiteral.getName()>.getRGB().hashCode();
< 				 break;
< 				 }
< 				 */
< 				default:
475,475c678,678
< 					rgbColor = -1;
---
> 			rgbColor = -1;
476,476c679,679
< 				}
---
> 		}
476a680,685
> 		return rgbColor;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
478,478c473,473
< 			if (rgbColor != -1 && shapeStyle.getFillColor() != rgbColor) {
---
> 			if (rgbColor != -1 && theFillStyle.getFillColor() != rgbColor) {
483,483c478,478
< 						shapeStyle.setFillColor(rgbColor);
---
> 						theFillStyle.setFillColor(rgbColor);
490,490c485,485
< 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Background background color with the model", e); //$NON-NLS-1$
---
> 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Background color with the model", e); //$NON-NLS-1$
493a489,489
> 		final LineStyle theLineStyle = (LineStyle) view.getStyle(NotationPackage.eINSTANCE.getLineStyle());
500a497,497
> 				rgbColor = getRgbColor(modelColor);
501,505d496
< 				switch (modelColor.getValue().getValue()) {
< 				/*
< 				 case <nextValue>: {
< 				 rgbColor = org.eclipse.draw2d.ColorConstants.<nextColorLiteral.getName()>.getRGB().hashCode();
< 				 break;
507,511d498
< 				 */
< 				default:
< 					rgbColor = -1;
< 				}
< 			}
512,512c499,499
< 			if (rgbColor != -1 && shapeStyle.getLineColor() != rgbColor) {
---
> 			if (rgbColor != -1 && theLineStyle.getLineColor() != rgbColor) {
517,517c504,504
< 						shapeStyle.setLineColor(rgbColor);
---
> 						theLineStyle.setLineColor(rgbColor);
524,524c511,511
< 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Foreground background color with the model", e); //$NON-NLS-1$
---
> 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Foreground color with the model", e); //$NON-NLS-1$
527a515,517
> 
> 		final FillStyle theFillStyle1 = (FillStyle) view.getStyle(NotationPackage.eINSTANCE.getFillStyle());
> 		addListenerFilter("FillStyleListener", new NotificationListener() {
528,528d514
< 		addListenerFilter("ShapeStyleListener", new NotificationListener() {
532,532c521,521
< 					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model size with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
---
> 					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model Background color with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
534a524,525
> 							FillStyle theFillStyle = (FillStyle) notification.getNotifier();
> 							if (notification.getFeatureID(FillStyle.class) == NotationPackage.FILL_STYLE__FILL_COLOR) {
535,537d523
< 							ShapeStyle shapeStyle = (ShapeStyle) notification.getNotifier();
< 							switch (notification.getFeatureID(ShapeStyle.class)) {
< 							case NotationPackage.SHAPE_STYLE__FILL_COLOR: {
538,538c526,526
< 								int color = shapeStyle.getFillColor();
---
> 								int color = theFillStyle.getFillColor();
551,551d538
< 								break;
552a540,558
> 							return Status.OK_STATUS;
> 						}
> 					}.execute(new NullProgressMonitor(), null);
> 				} catch (ExecutionException e) {
> 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model Background color with the view", e); //$NON-NLS-1$
> 				}
> 			}
> 		}, theFillStyle1);
> 		final LineStyle theLineStyle1 = (LineStyle) view.getStyle(NotationPackage.eINSTANCE.getLineStyle());
> 		addListenerFilter("LineStyleListener", new NotificationListener() {
> 
> 			public void notifyChanged(final Notification notification) {
> 				try {
> 					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model Foreground color with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
> 
> 						protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
> 							LineStyle theLineStyle = (LineStyle) notification.getNotifier();
> 							if (notification.getFeatureID(LineStyle.class) == NotationPackage.LINE_STYLE__LINE_COLOR) {
> 								int color = theLineStyle.getLineColor();
553,554d539
< 							case NotationPackage.SHAPE_STYLE__LINE_COLOR: {
< 								int color = shapeStyle.getLineColor();
567,568d570
< 								break;
< 							}
574,574c576,576
< 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model size with the view", e); //$NON-NLS-1$			
---
> 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model Foreground color with the view", e); //$NON-NLS-1$
576a579,580
> 		}, theLineStyle1);
> 
577,577d578
< 		}, shapeStyle);
