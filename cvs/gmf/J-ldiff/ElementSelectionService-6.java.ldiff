20a21,22
> import org.eclipse.core.runtime.Platform;
> import org.eclipse.core.runtime.jobs.IJobManager;
24a27,27
> import org.eclipse.gmf.runtime.common.core.util.StringStatics;
61a65,66
>     protected class JobData {
>         public IElementSelectionInput elementSelectionInput;
62,62d64
<     private IElementSelectionInput elementSelectionInput;
64,64c68,68
<     private IElementSelectionListener elementSelectionListener;
---
>         public IElementSelectionListener elementSelectionListener;
65a70,89
>         public HashMap jobs = new HashMap();
>     }
>     
>     private Map jobs2Data = new HashMap();
>     
>     public JobData getJobData() {
>         Job currentJob = jobManager.currentJob();
>         assert currentJob != null;
>         
>         if(currentJob == null) {
>             return null;
>         }
>         
>         JobData data = null;
>         synchronized(jobs2Data) {
>             data = (JobData)jobs2Data.get(currentJob);
>         }
>         
>         return data;
>     }
66,66d69
<     private HashMap jobs = new HashMap();
74,74c97,97
<         instance.configureProviders(CommonUIServicesPlugin.getPluginId(),
---
>         instance.configureProviders();
75,75d97
<             "elementSelectionProviders"); //$NON-NLS-1$
110a133,135
>         ElementSelectionServiceJob job = createSelectionJob();
>         JobData data = new JobData();
>         data.elementSelectionInput = input;
111,111d132
<         elementSelectionInput = input;
112,112c136,136
<         elementSelectionListener = listener;
---
>         data.elementSelectionListener = listener;
113,113d136
<         ElementSelectionServiceJob job = new ElementSelectionServiceJob(
114a138,138
>         synchronized(jobs2Data) {
114,114c137,137
<             getJobName(), this);
---
>         job.setName(getJobName(data));
115,115c139,139
<         job.setPriority(Job.SHORT);
---
>             jobs2Data.put(job, data);
115a140,140
>         }
119a145,164
>     
>     protected String getJobName() {
>         return StringStatics.BLANK;
>     }
>     
>     /**
>      * Creates the selection service job that manages the individual provider
>      * search jobs.  This method should configure the new job with the appropriate
>      * priority, scheduling rules, etc. but should not schedule it.
>      * 
>      * @return a new selection service job
>      */
>     protected ElementSelectionServiceJob createSelectionJob() {
>         ElementSelectionServiceJob job = new ElementSelectionServiceJob(getJobName(), this);
>         job.setPriority(Job.SHORT);
>         return job;
>     }
>     
>     public static final IJobManager jobManager = Platform.getJobManager();
> 
123a169,172
>         JobData data = getJobData();
>         if(data == null)
>             return;
>         
126,126c175,175
<             elementSelectionInput);
---
>             data.elementSelectionInput);
144,144c193,193
<             addJob(provider);
---
>             addJob(data, provider);
150a200,200
>         synchronized (data) {
151,151d199
<         synchronized (jobs) {
152,152c201,201
<             jobsClone  = (HashMap)jobs.clone();
---
>             jobsClone  = (HashMap)data.jobs.clone();
155a205,206
>             IElementSelectionProvider provider = (IElementSelectionProvider) entry
>             	.getKey();
157a209,209
>             
158,158c210,210
<             job.schedule();
---
>             schedule(provider, job);
164,164c216,216
<         monitor.beginTask(getJobName(), 1000);
---
>         monitor.beginTask(getJobName(data), 1000);
165a218,218
>             synchronized (data) {
166,166d217
<             synchronized (jobs) {
167,167c219,219
<                 if (jobs.size() == 0) {
---
>                 if (data.jobs.size() == 0) {
175a228,230
>                 synchronized(data) {
>                     // nullify the element selection listener.
>                     data.elementSelectionListener = null;
179a235,235
>         }
183a240,249
>      * Schedules the specified selection provider job.
>      * 
>      * @param provider a selection provider
>      * @param job the <code>provider</code>'s job
>      */
>     protected void schedule(IElementSelectionProvider provider, ElementSelectionServiceJob job) {
>     	job.schedule();
>     }
> 
>     /**
199,199c265,265
<     protected String getJobName() {
---
>     protected String getJobName(JobData data) {
199a266,266
>         if((getJobName() != null && getJobName().equals(StringStatics.BLANK)) && data != null) {
202,202c269,269
<         String filter = elementSelectionInput.getInput();
---
>             String filter = data.elementSelectionInput.getInput();
206a274,275
>         return getJobName();
>     }
213,213c282,282
<     private void addJob(IElementSelectionProvider provider) {
---
>     private void addJob(JobData data, IElementSelectionProvider provider) {
215a285,285
>         synchronized (data) {
215,215c284,284
<             elementSelectionInput, this);
---
>             data.elementSelectionInput, this);
216,216d284
<         synchronized (jobs) {
217a287,290
>         }
>         
>         synchronized(jobs2Data) {
>             jobs2Data.put(job, data);
217,217c286,286
<             jobs.put(provider, job);
---
>             data.jobs.put(provider, job);
226,226c299,299
<     private void removeJob(IElementSelectionProvider provider) {
---
>     private void removeJob(JobData data, IElementSelectionProvider provider) {
227a301,303
>         Object job = null;
>         synchronized (data) {
>             job = data.jobs.remove(provider);
228,229d300
<         synchronized (jobs) {
<             jobs.remove(provider);
230,230c304,304
<             if (jobs.size() == 0) {
---
>             if (data.jobs.size() == 0) {
233a308,308
>         
239a315,318
> 
>         synchronized(jobs2Data) {
>             jobs2Data.remove(job);
>         }
249a329,341
>         final Job currentJob = jobManager.currentJob();
>         if(currentJob == null)
>             return;
>         
>         JobData data = null;
>         synchronized(jobs2Data) {
>             data = (JobData)jobs2Data.get(currentJob);
>         }
>         
>         if(data == null)
>             return;
>         
>         final JobData finalData = data;
252a345,346
>                 synchronized(finalData) { 
>                     if(finalData.elementSelectionListener != null) {
253,253c347,347
<                 elementSelectionListener
---
>                         finalData.elementSelectionListener
255a350,351
>                 }
>             }
273a370,372
>         JobData data = getJobData();
>         if(data == null)
>             return;
275,275c374,374
<             removeJob(matchingObjectEvent.getMatchingObject().getProvider());
---
>             removeJob(data, matchingObjectEvent.getMatchingObject().getProvider());
284a384,384
>         JobData data = getJobData();
285a386,386
>         synchronized (data) {
286,286d385
<         synchronized (jobs) {
287,287c387,387
<             jobsClone = (HashMap) jobs.clone();
---
>             jobsClone = (HashMap) data.jobs.clone();
295,295c395,395
<             removeJob(provider);
---
>             removeJob(data, provider);
302a403,424
>     
>     /**
>      * Configures my providers from the <tt>elementSelectionProviders</tt>
>      * extension point.
>      */
>     protected void configureProviders() {
>     	configureProviders(
>     		CommonUIServicesPlugin.getPluginId(),
>         	"elementSelectionProviders"); //$NON-NLS-1$
>     }
>     
>     public void cancelJob(ElementSelectionServiceJob job) {
>         JobData data = null;
>         synchronized(jobs2Data) {
>             data = (JobData)jobs2Data.get(job);
>         }
>         
>         synchronized(data) {
>             data.elementSelectionListener = null;
>         }
>         job.cancel();
>     }
