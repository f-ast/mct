30a116,116
>          * 
31,31d115
< 
48a48,48
>      * @param enable
49a50,51
>      *            disable updates on the figure canvas, <code>false</code>
>      *            indicates normal updates are to take place.
49,49c49,49
< 	 * @param enable <code>boolean</code> <code>true</code> if client wishes to disable
---
>      *            <code>boolean</code> <code>true</code> if client wishes to
50,51d49
< 	 * updates on the figure canvas, <code>false</code> indicates normal updates are
< 	 * to take place.
59a60,60
>     private class ToggleUpdateManager
60,60c61,61
< 	private class ToggleUpdateManager extends DeferredUpdateManager {
---
>         extends DeferredUpdateManager {
70a72,78
>         /* (non-Javadoc)
>          * @see org.eclipse.draw2d.DeferredUpdateManager#sendUpdateRequest()
>          */
>         protected void sendUpdateRequest() {
>             PlatformUI.getWorkbench().getDisplay().asyncExec(new UpdateRequest());
>         }
> 
71a80,80
>          * @param disableUpdates
72,72c81,81
< 		 * @param disableUpdates the disableUpdates to set
---
>          *            the disableUpdates to set
77,83d85
< 				PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
< 					/*
< 					 * (non-Javadoc)
< 					 * 
< 					 * @see java.lang.Runnable#run()
< 					 */
< 					public void run() {
85a144,144
>      * 
86,87d143
< 				});
< 			}
89a90,90
>         /*
90,90c91,91
< 		/* (non-Javadoc)
---
>          * (non-Javadoc)
90a92,92
>          * 
97a100,100
>         /*
98a102,102
>          * 
98,98c101,101
< 		/* (non-Javadoc)
---
>          * (non-Javadoc)
105,112d108
< 
< 		/* (non-Javadoc)
< 		 * @see org.eclipse.draw2d.DeferredUpdateManager#queueWork()
< 		 */
< 		public void queueWork() {
< 			if (!shouldDisableUpdates())
< 				super.queueWork();
< 		}
115,115c111,111
< 	private class LightweightSystemWithUpdateToggle extends LightweightSystem {
---
>     private class LightweightSystemWithUpdateToggle
115a112,112
>         extends LightweightSystem {
153a166,166
>      * 
154,154d165
< 
161,161c159,159
<      * A registry of editparts on the diagram, mapping an element's id string
---
>      * A registry of editparts on the diagram, mapping an element's id string to
162,162c160,160
<      * to a list of <code>EditParts</code>.  
---
>      * a list of <code>EditParts</code>.
164,164c162,162
<     private ElementToEditPartsMap elementToEditPartsMap =
---
>     private ElementToEditPartsMap elementToEditPartsMap = new ElementToEditPartsMap();
165,165d162
<         new ElementToEditPartsMap();
194,194c194,194
<      * Overriden to also flush pending selection events to account for 
---
>      * Overriden to also flush pending selection events to account for OS
195,195c195,195
<      * OS diffences, since we are firing selection change events asynchronously.
---
>      * diffences, since we are firing selection change events asynchronously.
214a215,215
> 
223a225,225
>      * 
228,228d229
<         SelectionChangedEvent event =
229,229c230,230
<             new SelectionChangedEvent(this, sel);
---
>         SelectionChangedEvent event = new SelectionChangedEvent(this, sel);
248a250,250
> 
265a268,268
>      *      java.lang.Class)
265,265c267,267
<      * @see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#findEditPartsForElement(java.lang.String, java.lang.Class)
---
>      * @see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#findEditPartsForElement(java.lang.String,
266a270,270
>     public List findEditPartsForElement(String elementIdStr, Class editPartClass) {
267,269d269
<     public List findEditPartsForElement(
<         String elementIdStr,
<         Class editPartClass) {
270,270c271,271
<         return elementToEditPartsMap.findEditPartsForElement(
---
>         return elementToEditPartsMap.findEditPartsForElement(elementIdStr,
271,271d271
<             elementIdStr,
276,276c276,276
<      * @see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#registerEditPartForElement(java.lang.String, org.eclipse.gef.EditPart)
---
>      * @see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#registerEditPartForElement(java.lang.String,
276a277,277
>      *      org.eclipse.gef.EditPart)
283a285,285
>      *      org.eclipse.gef.EditPart)
283,283c284,284
<      * @see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#unregisterEditPartForElement(java.lang.String, org.eclipse.gef.EditPart)
---
>      * @see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#unregisterEditPartForElement(java.lang.String,
285,285c287,287
<     public void unregisterEditPartForElement(
---
>     public void unregisterEditPartForElement(String elementIdStr, EditPart ep) {
286,287d287
<         String elementIdStr,
<         EditPart ep) {
290a175,175
>      * 
291,291d174
< 	
294a185,185
>      * 
295,295d184
< 	
297,297c295,295
< 	 * The editor manages the workspaces preferences store. So viewers not using a editor
---
>      * The editor manages the workspaces preferences store. So viewers not using
297a296,296
>      * a editor do not need to create a preference store. This method provides a
298,298d295
< 	 * do not need to create a preference store.  This method provides a hook for clients
299,299c297,297
< 	 * requiring access to the preference store.
---
>      * hook for clients requiring access to the preference store.
308,308c306,306
< 	 * Returns the workspace preference store managed by the <code>DiagramEditor</code>,
---
>      * Returns the workspace preference store managed by the
309,309c307,307
< 	 * if one is being used. May return null.
---
>      * <code>DiagramEditor</code>, if one is being used. May return null.
316a315,315
>     /*
317a317,317
>      * 
317,317c316,316
< 	/* (non-Javadoc)
---
>      * (non-Javadoc)
