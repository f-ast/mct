2,2c2,2
<  * Copyright (c) 2006 Borland Software Corporation and others.
---
>  *  Copyright (c) 2006, 2007 Borland Software Corporation and others.
16,16c16,16
< import java.util.Collections;
---
> import java.util.HashMap;
18a19,19
> import java.util.Map;
21a23,26
> import org.eclipse.core.resources.IResourceStatus;
> import org.eclipse.core.resources.IStorage;
> import org.eclipse.core.resources.IWorkspace;
> import org.eclipse.core.resources.ResourcesPlugin;
22a28,28
> import org.eclipse.core.runtime.IPath;
23a30,30
> import org.eclipse.core.runtime.IStatus;
24,24c31,31
< import org.eclipse.core.runtime.SubProgressMonitor;
---
> import org.eclipse.core.runtime.Path;
24a32,32
> import org.eclipse.core.runtime.Status;
27a39,40
> import org.eclipse.emf.ecore.resource.ResourceSet;
> import org.eclipse.emf.ecore.util.EContentAdapter;
27a37,37
> import org.eclipse.emf.common.notify.Notifier;
28,28c41,41
< import org.eclipse.emf.ecore.EObject;
---
> import org.eclipse.emf.ecore.xmi.XMLResource;
30,30c35,35
< import org.eclipse.emf.transaction.DemultiplexingListener;
---
> import org.eclipse.emf.common.notify.Adapter;
33a45,45
> import org.eclipse.gmf.runtime.diagram.core.DiagramEditingDomainFactory;
35,35c48,48
< import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramModificationListener;
---
> import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocumentProvider;
38,38c50,50
< import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileDiagramDocumentProvider;
---
> import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.StorageDocumentProvider;
38a51,51
> import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes;
39,39c52,52
< import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileDiagramModificationListener;
---
> import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.DiagramIOUtil;
40a54,55
> import org.eclipse.swt.widgets.Display;
> import org.eclipse.ui.IEditorInput;
41a57,58
> import org.eclipse.ui.IStorageEditorInput;
> import org.eclipse.ui.part.FileEditorInput;
46,46c63,63
< public class GMFGraphDocumentProvider extends FileDiagramDocumentProvider {
---
> public class GMFGraphDocumentProvider extends StorageDocumentProvider implements IDiagramDocumentProvider {
50a68,149
> 	protected ElementInfo createElementInfo(Object element) throws CoreException {
> 		if (false == element instanceof FileEditorInput) {
> 			throw new CoreException(new Status(IStatus.ERROR, GMFGraphDiagramEditorPlugin.ID, 0, "Incorrect element used: " + element + " instead of org.eclipse.ui.part.FileEditorInput", null)); //$NON-NLS-1$ //$NON-NLS-2$
> 		}
> 		FileEditorInput editorInput = (FileEditorInput) element;
> 		IDiagramDocument document = (IDiagramDocument) createDocument(editorInput);
> 
> 		ResourceSetInfo info = new ResourceSetInfo(document, editorInput);
> 		info.setModificationStamp(computeModificationStamp(info));
> 		info.fStatus = null;
> 		ResourceSetModificationListener modificationListener = new ResourceSetModificationListener(info);
> 		info.getResourceSet().eAdapters().add(modificationListener);
> 		return info;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	private long computeModificationStamp(ResourceSetInfo info) {
> 		int result = 0;
> 		for (Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
> 			Resource nextResource = (Resource) it.next();
> 			IFile file = WorkspaceSynchronizer.getFile(nextResource);
> 			if (file != null) {
> 				if (file.getLocation() != null) {
> 					result += file.getLocation().toFile().lastModified();
> 				} else {
> 					result += file.getModificationStamp();
> 				}
> 			}
> 		}
> 		return result;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected IDocument createEmptyDocument() {
> 		DiagramDocument document = new DiagramDocument();
> 		document.setEditingDomain(createEditingDomain());
> 		return document;
> 	}
> 
> 	private TransactionalEditingDomain createEditingDomain() {
> 		TransactionalEditingDomain editingDomain = DiagramEditingDomainFactory.getInstance().createEditingDomain();
> 		editingDomain.setID("org.eclipse.gmf.graphdef.editor.EditingDomain"); //$NON-NLS-1$
> 		final NotificationFilter diagramResourceModifiedFilter = NotificationFilter.createNotifierFilter(editingDomain.getResourceSet())
> 				.and(NotificationFilter.createEventTypeFilter(Notification.ADD)).and(NotificationFilter.createFeatureFilter(ResourceSet.class, ResourceSet.RESOURCE_SET__RESOURCES));
> 		editingDomain.getResourceSet().eAdapters().add(new Adapter() {
> 
> 			private Notifier myTarger;
> 
> 			public Notifier getTarget() {
> 				return myTarger;
> 			}
> 
> 			public boolean isAdapterForType(Object type) {
> 				return false;
> 			}
> 
> 			public void notifyChanged(Notification notification) {
> 				if (diagramResourceModifiedFilter.matches(notification)) {
> 					Object value = notification.getNewValue();
> 					if (value instanceof Resource) {
> 						((Resource) value).setTrackingModification(true);
> 					}
> 				}
> 			}
> 
> 			public void setTarget(Notifier newTarget) {
> 				myTarger = newTarget;
> 			}
> 
> 		});
> 
> 		return editingDomain;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected void setDocumentContentFromStorage(IDocument document, IStorage storage) throws CoreException {
51,53d67
< 	protected void saveDocumentToFile(IDocument document, IFile file, boolean overwrite, IProgressMonitor monitor) throws CoreException {
< 		Diagram diagram = (Diagram) document.getContent();
< 		Resource diagramResource = diagram.eResource();
54a151,161
> 		//	org.eclipse.gmf.runtime.notation.Diagram diagram = diagramDocument.getDiagram();
> 
> 		//	org.eclipse.emf.transaction.TransactionalEditingDomain domain = diagramDocument.getEditingDomain();
> 		//	diagram = org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.DiagramIOUtil.load(domain, storage, true, getProgressMonitor());
> 		//	if (myContentObjectURI != null && diagram != null && diagram.eResource() != null && !diagram.eResource().getURIFragment(diagram).equals(myContentObjectURI)) {
> 		//		org.eclipse.emf.ecore.EObject anotherContentObject = diagram.eResource().getEObject(myContentObjectURI);
> 		//		document.setContent(anotherContentObject);
> 		//	} else {
> 		//		document.setContent(diagram);
> 		//	}
> 
55a163,165
> 		Diagram diagram = DiagramIOUtil.load(domain, storage, true, getProgressMonitor());
> 		document.setContent(diagram);
> 	}
56,56d162
< 		List resources = domain.getResourceSet().getResources();
57a167,229
> 	/**
> 	 * @generated
> 	 */
> 	public long getModificationStamp(Object element) {
> 		ResourceSetInfo info = getResourceSetInfo(element);
> 		if (info != null) {
> 			return computeModificationStamp(info);
> 		}
> 		return super.getModificationStamp(element);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public long getSynchronizationStamp(Object element) {
> 		ResourceSetInfo info = getResourceSetInfo(element);
> 		if (info != null) {
> 			return info.getModificationStamp();
> 		}
> 		return super.getSynchronizationStamp(element);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public boolean isDeleted(Object element) {
> 		if (element instanceof IFileEditorInput) {
> 			IFileEditorInput input = (IFileEditorInput) element;
> 			IPath path = input.getFile().getLocation();
> 			if (path == null) {
> 				return true;
> 			}
> 			return !path.toFile().exists();
> 		}
> 		return super.isDeleted(element);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public ResourceSetInfo getResourceSetInfo(Object editorInput) {
> 		return (ResourceSetInfo) super.getElementInfo(editorInput);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected void disposeElementInfo(Object element, ElementInfo info) {
> 		if (info instanceof ResourceSetInfo) {
> 			ResourceSetInfo resourceSetInfo = (ResourceSetInfo) info;
> 			resourceSetInfo.dispose();
> 		}
> 		super.disposeElementInfo(element, info);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected void doValidateState(Object element, Object computationContext) throws CoreException {
> 		ResourceSetInfo info = getResourceSetInfo(element);
> 		if (info != null) {
> 			Collection files2Validate = new ArrayList();
> 			for (Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
58,60d166
< 		monitor.beginTask("Saving diagram", resources.size() + 1); //$NON-NLS-1$
< 		super.saveDocumentToFile(document, file, overwrite, new SubProgressMonitor(monitor, 1));
< 		for (Iterator it = resources.iterator(); it.hasNext();) {
61a231,233
> 				IFile file = WorkspaceSynchronizer.getFile(nextResource);
> 				if (file != null && file.isReadOnly()) {
> 					files2Validate.add(file);
62,67d230
< 			monitor.setTaskName("Saving " + nextResource.getURI()); //$NON-NLS-1$
< 			if (nextResource != diagramResource) {
< 				try {
< 					nextResource.save(Collections.EMPTY_MAP);
< 				} catch (IOException e) {
< 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to save resource: " + nextResource.getURI(), e); //$NON-NLS-1$
69a236,236
> 			ResourcesPlugin.getWorkspace().validateEdit((IFile[]) files2Validate.toArray(new IFile[files2Validate.size()]), computationContext);
70,70d235
< 			monitor.worked(1);
72,72d237
< 		monitor.done();
77a245,292
> 	public boolean isModifiable(Object element) {
> 		if (!isStateValidated(element)) {
> 			if (element instanceof FileEditorInput) {
> 				return true;
> 			}
> 		}
> 		return super.isModifiable(element);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected void updateCache(IStorageEditorInput input) throws CoreException {
> 		ResourceSetInfo info = getResourceSetInfo(input);
> 		if (info != null) {
> 			for (Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
> 				Resource nextResource = (Resource) it.next();
> 				IFile file = WorkspaceSynchronizer.getFile(nextResource);
> 				if (file != null && file.isReadOnly()) {
> 					info.fIsReadOnly = true;
> 					info.fIsModifiable = false;
> 					return;
> 				}
> 			}
> 			info.fIsReadOnly = false;
> 			info.fIsModifiable = true;
> 			return;
> 		}
> 		super.updateCache(input);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public boolean isSynchronized(Object element) {
> 		ResourceSetInfo info = getResourceSetInfo(element);
> 		if (info != null) {
> 			return info.isSynchronized();
> 		}
> 		return super.isSynchronized(element);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected ISchedulingRule getResetRule(Object element) {
> 		ResourceSetInfo info = getResourceSetInfo(element);
> 		if (info != null) {
78,82d244
< 	protected ISchedulingRule getSaveRule(Object element) {
< 		IDiagramDocument diagramDocument = getDiagramDocument(element);
< 		if (diagramDocument != null) {
< 			Diagram diagram = diagramDocument.getDiagram();
< 			if (diagram != null) {
83a294,296
> 			for (Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
> 				Resource nextResource = (Resource) it.next();
> 				IFile file = WorkspaceSynchronizer.getFile(nextResource);
84,85d293
< 				for (Iterator it = diagramDocument.getEditingDomain().getResourceSet().getResources().iterator(); it.hasNext();) {
< 					IFile nextFile = WorkspaceSynchronizer.getFile((Resource) it.next());
86,86c297,297
< 					if (nextFile != null) {
---
> 				if (file != null) {
86a298,298
> 					rules.add(ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(file));
87,87d297
< 						rules.add(computeSaveSchedulingRule(nextFile));
91a238,239
> 
> 		super.doValidateState(element, computationContext);
91a303,303
> 		return null;
92,93d237
< 		}
< 		return super.getSaveRule(element);
98a309,323
> 	protected ISchedulingRule getSaveRule(Object element) {
> 		ResourceSetInfo info = getResourceSetInfo(element);
> 		if (info != null) {
> 			Collection rules = new ArrayList();
> 			for (Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
> 				Resource nextResource = (Resource) it.next();
> 				IFile file = WorkspaceSynchronizer.getFile(nextResource);
> 				if (file != null) {
> 					rules.add(computeSchedulingRule(file));
> 				}
> 			}
> 			return new MultiRule((ISchedulingRule[]) rules.toArray(new ISchedulingRule[rules.size()]));
> 		}
> 		return null;
> 	}
99,100d308
< 	protected FileInfo createFileInfo(IDocument document, FileSynchronizer synchronizer, IFileEditorInput input) {
< 		assert document instanceof DiagramDocument;
101a325,342
> 	/**
> 	 * @generated
> 	 */
> 	protected ISchedulingRule getSynchronizeRule(Object element) {
> 		ResourceSetInfo info = getResourceSetInfo(element);
> 		if (info != null) {
> 			Collection rules = new ArrayList();
> 			for (Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
> 				Resource nextResource = (Resource) it.next();
> 				IFile file = WorkspaceSynchronizer.getFile(nextResource);
> 				if (file != null) {
> 					rules.add(ResourcesPlugin.getWorkspace().getRuleFactory().refreshRule(file));
> 				}
> 			}
> 			return new MultiRule((ISchedulingRule[]) rules.toArray(new ISchedulingRule[rules.size()]));
> 		}
> 		return null;
> 	}
102,103d324
< 		DiagramModificationListener diagramListener = new CustomModificationListener(this, (DiagramDocument) document, input);
< 		DiagramFileInfo info = new DiagramFileInfo(document, synchronizer, diagramListener);
104a344,360
> 	/**
> 	 * @generated
> 	 */
> 	protected ISchedulingRule getValidateStateRule(Object element) {
> 		ResourceSetInfo info = getResourceSetInfo(element);
> 		if (info != null) {
> 			Collection files = new ArrayList();
> 			for (Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
> 				Resource nextResource = (Resource) it.next();
> 				IFile file = WorkspaceSynchronizer.getFile(nextResource);
> 				if (file != null) {
> 					files.add(file);
> 				}
> 			}
> 			return ResourcesPlugin.getWorkspace().getRuleFactory().validateEditRule((IFile[]) files.toArray(new IFile[files.size()]));
> 		}
> 		return null;
105,106d343
< 		diagramListener.startListening();
< 		return info;
112a367,367
> 		if (toCreateOrModify.exists())
112,112c366,366
< 	private ISchedulingRule computeSaveSchedulingRule(IResource toCreateOrModify) {
---
> 	private ISchedulingRule computeSchedulingRule(IResource toCreateOrModify) {
113,113d366
< 		if (toCreateOrModify.exists() && toCreateOrModify.isSynchronized(IResource.DEPTH_ZERO))
114,114c368,368
< 			return fResourceRuleFactory.modifyRule(toCreateOrModify);
---
> 			return ResourcesPlugin.getWorkspace().getRuleFactory().modifyRule(toCreateOrModify);
118a373,374
> 			 * XXX This is a workaround for
> 			 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=67601
119,119d372
< 			 * XXX This is a workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=67601
120a376,376
> 			 * itself.
120,120c375,375
< 			 * IResourceRuleFactory.createRule should iterate the hierarchy itself.
---
> 			 * IResourceRuleFactory.createRule should iterate the hierarchy
123a380,505
> 		} while (parent != null && !parent.exists());
> 
> 		return ResourcesPlugin.getWorkspace().getRuleFactory().createRule(toCreateOrModify);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected void doSynchronize(Object element, IProgressMonitor monitor) throws CoreException {
> 		ResourceSetInfo info = getResourceSetInfo(element);
> 		if (info != null && element instanceof FileEditorInput) {
> 			for (Iterator it = info.getResourceSet().getResources().iterator(); it.hasNext();) {
> 				Resource nextResource = (Resource) it.next();
> 				handleElementChanged(info, nextResource, monitor);
> 			}
> 			return;
> 		}
> 		super.doSynchronize(element, monitor);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected void markWholeResourceSetAsDirty(ResourceSet resourceSet) {
> 		for (Iterator it = resourceSet.getResources().iterator(); it.hasNext();) {
> 			Resource nextResource = (Resource) it.next();
> 			nextResource.setModified(true);
> 		}
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected void doSaveDocument(IProgressMonitor monitor, Object element, IDocument document, boolean overwrite) throws CoreException {
> 		ResourceSetInfo info = getResourceSetInfo(element);
> 		if (info != null) {
> 			if (!overwrite && !info.isSynchronized()) {
> 				throw new CoreException(new Status(IStatus.ERROR, GMFGraphDiagramEditorPlugin.ID, IResourceStatus.OUT_OF_SYNC_LOCAL, "The file has been changed on the file system", null)); //$NON-NLS-1$
> 			}
> 			info.stopResourceListening();
> 			fireElementStateChanging(element);
> 			List resources = info.getResourceSet().getResources();
> 			try {
> 				monitor.beginTask("Saving diagram", resources.size() + 1);
> 				Map options = new HashMap();
> 				options.put(XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);
> 				for (Iterator it = resources.iterator(); it.hasNext();) {
> 					Resource nextResource = (Resource) it.next();
> 					monitor.setTaskName("Saving " + nextResource.getURI());
> 					if (nextResource.isLoaded() && (!nextResource.isTrackingModification() || nextResource.isModified())) {
> 						try {
> 							nextResource.save(options);
> 						} catch (IOException e) {
> 							fireElementStateChangeFailed(element);
> 							throw new CoreException(new Status(IStatus.ERROR, GMFGraphDiagramEditorPlugin.ID, EditorStatusCodes.RESOURCE_FAILURE, e.getLocalizedMessage(), null));
> 						}
> 					}
> 					monitor.worked(1);
> 				}
> 				monitor.done();
> 			} catch (RuntimeException x) {
> 				fireElementStateChangeFailed(element);
> 				throw x;
> 			} finally {
> 				info.startResourceListening();
> 			}
> 
> 			if (info != null) {
> 				info.setModificationStamp(computeModificationStamp(info));
> 				info.setSynchronized();
> 			}
> 		}
> 		super.doSaveDocument(monitor, element, document, overwrite);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected void handleElementChanged(ResourceSetInfo info, Resource changedResource, IProgressMonitor monitor) {
> 		IFile file = WorkspaceSynchronizer.getFile(changedResource);
> 		if (file != null) {
> 			try {
> 				file.refreshLocal(IResource.DEPTH_INFINITE, monitor);
> 			} catch (CoreException e) {
> 				handleCoreException(e, "FileDocumentProvider.handleElementContentChanged");
> 			}
> 		}
> 		changedResource.unload();
> 
> 		fireElementContentAboutToBeReplaced(info.getEditorInput());
> 		removeUnchangedElementListeners(info.getEditorInput(), info);
> 		info.fStatus = null;
> 		try {
> 			setDocumentContent(info.fDocument, info.getEditorInput());
> 		} catch (CoreException e) {
> 			info.fStatus = e.getStatus();
> 		}
> 		if (!info.fCanBeSaved) {
> 			info.setModificationStamp(computeModificationStamp(info));
> 		}
> 		addUnchangedElementListeners(info.getEditorInput(), info);
> 		fireElementContentReplaced(info.getEditorInput());
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected void handleElementMoved(FileEditorInput input, IPath path) {
> 		IWorkspace workspace = ResourcesPlugin.getWorkspace();
> 		IFile newFile = workspace.getRoot().getFile(path);
> 		fireElementMoved(input, newFile == null ? null : new FileEditorInput(newFile));
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected void handleElementDeleted(FileEditorInput input) {
> 		fireElementDeleted(input);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public IEditorInput createInputWithEditingDomain(IEditorInput editorInput, TransactionalEditingDomain domain) {
> 		return editorInput;
> 	}
124,124d379
< 		} while (parent != null && !parent.exists() && !parent.isSynchronized(IResource.DEPTH_ZERO));
125a507,513
> 	/**
> 	 * @generated
> 	 */
> 	public IDiagramDocument getDiagramDocument(Object element) {
> 		IDocument doc = getDocument(element);
> 		if (doc instanceof IDiagramDocument) {
> 			return (IDiagramDocument) doc;
126,126d506
< 		return fResourceRuleFactory.createRule(toCreateOrModify);
127a515,521
> 		return null;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected class ResourceSetInfo extends StorageInfo {
131a526,526
> 		private long myModificationStamp = IResource.NULL_STAMP;
132,132d525
< 	private class CustomModificationListener extends FileDiagramModificationListener {
136a531,531
> 		private WorkspaceSynchronizer mySynchronizer;
137,137d530
< 		private DemultiplexingListener myListener = null;
141a536,536
> 		private IDiagramDocument myDocument;
142,146d535
< 		public CustomModificationListener(GMFGraphDocumentProvider documentProviderParameter, DiagramDocument documentParameter, IFileEditorInput inputParameter) {
< 			super(documentProviderParameter, documentParameter, inputParameter);
< 			final DiagramDocument document = documentParameter;
< 			NotificationFilter diagramResourceModifiedFilter = NotificationFilter.createEventTypeFilter(Notification.SET);
< 			myListener = new DemultiplexingListener(diagramResourceModifiedFilter) {
147a538,576
> 		/**
> 		 * @generated
> 		 */
> 		private Collection myUnSynchronizedResources = new ArrayList();
> 
> 		/**
> 		 * @generated
> 		 */
> 		private FileEditorInput myEditorInput;
> 
> 		/**
> 		 * @generated
> 		 */
> 		public ResourceSetInfo(IDiagramDocument document, FileEditorInput editorInput) {
> 			super(document);
> 			myDocument = document;
> 			myEditorInput = editorInput;
> 			startResourceListening();
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		public long getModificationStamp() {
> 			return myModificationStamp;
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		public void setModificationStamp(long modificationStamp) {
> 			myModificationStamp = modificationStamp;
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		public ResourceSet getResourceSet() {
> 			return myDocument.getEditingDomain().getResourceSet();
148,152d537
< 				protected void handleNotification(TransactionalEditingDomain domain, Notification notification) {
< 					if (notification.getNotifier() instanceof EObject) {
< 						Resource modifiedResource = ((EObject) notification.getNotifier()).eResource();
< 						if (modifiedResource != document.getDiagram().eResource()) {
< 							document.setContent(document.getContent());
153a578,583
> 
> 		/**
> 		 * @generated
> 		 */
> 		public FileEditorInput getEditorInput() {
> 			return myEditorInput;
155a586,593
> 		/**
> 		 * @generated
> 		 */
> 		public void dispose() {
> 			stopResourceListening();
> 			for (Iterator it = getResourceSet().getResources().iterator(); it.hasNext();) {
> 				Resource resource = (Resource) it.next();
> 				resource.unload();
157,157d594
< 			};
162a600,608
> 		public boolean isSynchronized() {
> 			return myUnSynchronizedResources.size() == 0;
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		public void setSynchronized() {
> 			myUnSynchronizedResources.clear();
163,165d599
< 		public void startListening() {
< 			super.startListening();
< 			getEditingDomain().addResourceSetListener(myListener);
170a614,759
> 		public void setUnSynchronized(Resource resource) {
> 			myUnSynchronizedResources.add(resource);
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		public void setSynchronized(Resource resource) {
> 			myUnSynchronizedResources.remove(resource);
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		public final void stopResourceListening() {
> 			mySynchronizer.dispose();
> 			mySynchronizer = null;
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		public final void startResourceListening() {
> 			mySynchronizer = new WorkspaceSynchronizer(myDocument.getEditingDomain(), new SynchronizerDelegate());
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		private class SynchronizerDelegate implements WorkspaceSynchronizer.Delegate {
> 
> 			/**
> 			 * @generated
> 			 */
> 			public void dispose() {
> 			}
> 
> 			/**
> 			 * @generated
> 			 */
> 			public boolean handleResourceChanged(final Resource resource) {
> 				Display.getDefault().asyncExec(new Runnable() {
> 
> 					public void run() {
> 						handleElementChanged(ResourceSetInfo.this, resource, null);
> 					}
> 				});
> 				return true;
> 			}
> 
> 			/**
> 			 * @generated
> 			 */
> 			public boolean handleResourceDeleted(Resource resource) {
> 				Display.getDefault().asyncExec(new Runnable() {
> 
> 					public void run() {
> 						handleElementDeleted(ResourceSetInfo.this.getEditorInput());
> 					}
> 				});
> 				return true;
> 			}
> 
> 			/**
> 			 * @generated
> 			 */
> 			public boolean handleResourceMoved(Resource resource, final org.eclipse.emf.common.util.URI newURI) {
> 				IFile file = WorkspaceSynchronizer.getFile(resource);
> 				if (file != null && file.equals(ResourceSetInfo.this.getEditorInput().getFile())) {
> 					Display.getDefault().asyncExec(new Runnable() {
> 
> 						public void run() {
> 							handleElementMoved(ResourceSetInfo.this.getEditorInput(), new Path(org.eclipse.emf.common.util.URI.decode(newURI.path())).removeFirstSegments(1));
> 						}
> 					});
> 				} else {
> 					handleResourceDeleted(resource);
> 				}
> 				return true;
> 			}
> 
> 		}
> 
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	private class ResourceSetModificationListener extends EContentAdapter {
> 
> 		/**
> 		 * @generated
> 		 */
> 		private NotificationFilter myModifiedFilter;
> 
> 		/**
> 		 * @generated
> 		 */
> 		private ResourceSetInfo myInfo;
> 
> 		/**
> 		 * @generated
> 		 */
> 		public ResourceSetModificationListener(ResourceSetInfo info) {
> 			myInfo = info;
> 			myModifiedFilter = NotificationFilter.createEventTypeFilter(Notification.SET).or(NotificationFilter.createEventTypeFilter(Notification.UNSET)).and(
> 					NotificationFilter.createFeatureFilter(Resource.class, Resource.RESOURCE__IS_MODIFIED));
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		public void notifyChanged(Notification notification) {
> 			if (notification.getNotifier() instanceof ResourceSet) {
> 				super.notifyChanged(notification);
> 			}
> 			if (myModifiedFilter.matches(notification)) {
> 				if (notification.getNotifier() instanceof Resource) {
> 					Resource resource = (Resource) notification.getNotifier();
> 					if (resource.isLoaded()) {
> 						boolean modified = false;
> 						for (Iterator it = myInfo.getResourceSet().getResources().iterator(); it.hasNext() && !modified;) {
> 							Resource nextResource = (Resource) it.next();
> 							if (nextResource.isLoaded()) {
> 								modified = nextResource.isModified();
> 							}
> 						}
> 						boolean dirtyStateChanged = false;
> 						synchronized (myInfo) {
> 							if (modified != myInfo.fCanBeSaved) {
> 								myInfo.fCanBeSaved = modified;
> 								dirtyStateChanged = true;
> 							}
> 							if (!resource.isModified()) {
> 								myInfo.setSynchronized(resource);
> 							}
> 						}
> 						if (dirtyStateChanged) {
> 							fireElementDirtyStateChanged(myInfo.getEditorInput(), modified);
> 							if (!modified) {
> 								myInfo.setModificationStamp(computeModificationStamp(myInfo));
> 							}
> 						}
> 					}
> 				}
> 			}
171,173d613
< 		public void stopListening() {
< 			getEditingDomain().removeResourceSetListener(myListener);
< 			super.stopListening();
