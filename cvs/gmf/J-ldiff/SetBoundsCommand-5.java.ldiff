0a1,2
> /******************************************************************************
>  * Copyright (c) 2004 IBM Corporation and others.
1,3d0
< /**
<  * Copyright (c) 2006 Borland Software Corporation
<  * 
9a9,10
>  *    IBM Corporation - initial API and implementation 
>  ****************************************************************************/
10,12d8
<  *    bblajer - initial API and implementation
<  */
< package org.eclipse.gmf.runtime.lite.commands;
13a12,17
> package org.eclipse.gmf.runtime.diagram.ui.commands;
> 
> import org.eclipse.core.runtime.IAdaptable;
> import org.eclipse.core.runtime.IProgressMonitor;
> import org.eclipse.draw2d.geometry.Dimension;
> import org.eclipse.draw2d.geometry.Point;
14a19,24
> import org.eclipse.jface.util.Assert;
> 
> import org.eclipse.gmf.runtime.common.core.command.CommandResult;
> import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
> import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
> import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;
15,18d18
< import org.eclipse.emf.common.command.AbstractCommand;
< import org.eclipse.emf.transaction.TransactionalEditingDomain;
< import org.eclipse.emf.transaction.util.TransactionUtil;
< import org.eclipse.gmf.runtime.notation.Bounds;
19a26,26
> 
19,19c25,25
< import org.eclipse.gmf.runtime.notation.Node;
---
> import org.eclipse.gmf.runtime.notation.View;
20,20d25
< import org.eclipse.gmf.runtime.notation.NotationFactory;
22a29,31
>  * @author melaasar
>  *
>  * A command to set the bounds (location/size) of a <code>View</code>
23,23d28
<  * @author bblajer
24a33,33
> public class SetBoundsCommand extends AbstractModelCommand {
25,29d32
< public class SetBoundsCommand extends AbstractCommand {
< 	private final Node myNode;
< 	private final Rectangle myBounds;
< 
< 	private Rectangle myOldBounds;
30a35,37
> 	private IAdaptable  adapter;
> 	private Point location;
> 	private Dimension size;
31,35d34
< 	public SetBoundsCommand(Node node, Rectangle bounds) {
< 		super("Set node position/size");
< 		myNode = node;
< 		myBounds = bounds;
< 	}
36a39,52
> 	/**
> 	 * Creates a <code>SetBoundsCommand</code> for the given view adapter with a given bounds.
> 	 * 
> 	 * @param label The command label
> 	 * @param adapter An adapter to the <code>View</code>
> 	 * @param bounds The new bounds
> 	 */
> 	public SetBoundsCommand(String label,IAdaptable adapter, Rectangle bounds) {
> 		super(label,adapter);
> 		Assert.isNotNull(adapter, "view cannot be null"); //$NON-NLS-1$
> 		Assert.isNotNull(bounds, "bounds cannot be null"); //$NON-NLS-1$
> 		this.adapter = adapter;
> 		this.location = bounds.getLocation();
> 		this.size = bounds.getSize();
37,38d38
< 	public boolean canUndo() {
< 		return true;
40a55,67
> 	/**
> 	 * Creates a <code>SetBoundsCommand</code> for the given view adapter with a given location.
> 	 * 
> 	 * @param label The command label
> 	 * @param adapter An adapter to the <code>View</code>
> 	 * @param location The new location
> 	 */
> 	public SetBoundsCommand (String label,IAdaptable adapter, Point location) {
> 		super(label,adapter);
> 		Assert.isNotNull(adapter, "view cannot be null"); //$NON-NLS-1$
> 		Assert.isNotNull(location, "location cannot be null"); //$NON-NLS-1$
> 		this.adapter = adapter;
> 		this.location = location;
41,55d54
< 	protected boolean prepare() {
< 		TransactionalEditingDomain domain = TransactionUtil.getEditingDomain(myNode);
< 		if (domain != null && domain.isReadOnly(myNode.eResource())) {
< 			return false;
< 		}
< 		if (myNode.getLayoutConstraint() == null) {
< 			myOldBounds = null;
< 			return true;
< 		} else if (myNode.getLayoutConstraint() instanceof Bounds == false) {
< 			return false;
< 		}
< 		Bounds bounds = (Bounds) myNode.getLayoutConstraint();
< 		myOldBounds = new Rectangle(bounds.getX(),
< 				bounds.getY(), bounds.getWidth(), bounds.getHeight());
< 		return true;
57a70,82
> 	/**
> 	 * Creates a <code>SetBoundsCommand</code> for the given view adapter with a given size.
> 	 * 
> 	 * @param label The command label
> 	 * @param adapter An adapter to the <code>View</code>
> 	 * @param size The new size
> 	 */
> 	public SetBoundsCommand (String label, IAdaptable adapter, Dimension size) {
> 		super(label, adapter);
> 		Assert.isNotNull(adapter, "view cannot be null"); //$NON-NLS-1$
> 		Assert.isNotNull(size, "size cannot be null"); //$NON-NLS-1$
> 		this.adapter = adapter;
> 		this.size = size;
58,59d69
< 	public void redo() {
< 		execute();
61a85,90
> 	/* (non-Javadoc)
> 	 * @see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doExecute(org.eclipse.core.runtime.IProgressMonitor)
> 	 */
> 	protected CommandResult doExecute(IProgressMonitor progressMonitor) {
> 		if (adapter == null)
> 			return newErrorCommandResult("SetBoundsCommand: viewAdapter does not adapt to IView.class"); //$NON-NLS-1$
62,64d84
< 	public void execute() {
< 		execute(myBounds);
< 	}
65a92,92
> 		View view  = (View)adapter.getAdapter(View.class);
66,69d91
< 	@Override
< 	public void undo() {
< 		execute(myOldBounds);
< 	}
70a94,96
> 		if (location != null) {
> 			ViewUtil.setPropertyValue(view,Properties.ID_POSITIONX, new Integer(location.x));
> 			ViewUtil.setPropertyValue(view,Properties.ID_POSITIONY, new Integer(location.y));
71,74d93
< 	private void execute(Rectangle rect) {
< 		if (rect == null) {
< 			myNode.setLayoutConstraint(null);
< 			return;
75a98,100
> 		if (size != null) {
> 			ViewUtil.setPropertyValue(view,Properties.ID_EXTENTX, new Integer(size.width));
> 			ViewUtil.setPropertyValue(view,Properties.ID_EXTENTY, new Integer(size.height));
76,79d97
< 		Bounds bounds = (Bounds) myNode.getLayoutConstraint();
< 		if (bounds == null) {
< 			bounds = NotationFactory.eINSTANCE.createBounds();
< 			myNode.setLayoutConstraint(bounds);
80a102,102
> 		return newOKCommandResult();
81,84d101
< 		bounds.setX(rect.x);
< 		bounds.setY(rect.y);
< 		bounds.setWidth(rect.width);
< 		bounds.setHeight(rect.height);
