22,22c28,28
< import org.eclipse.jface.dialogs.ProgressMonitorDialog;
---
> import org.eclipse.jface.dialogs.ProgressMonitorDialog;
23,23c29,29
< import org.eclipse.jface.operation.IRunnableWithProgress;
---
> import org.eclipse.jface.operation.IRunnableWithProgress;
24,24c30,30
< import org.eclipse.swt.custom.BusyIndicator;
---
> import org.eclipse.swt.custom.BusyIndicator;
25,25d30
< 
32,32d27
< import org.eclipse.gmf.runtime.common.ui.internal.l10n.ResourceManager;
35,35c33,33
<  * Responsible for managing the running of repeatable actions. All repeatable
---
>  * Responsible for managing the running of actions. All
38,38c36,36
<  * fFires events to interested listeners whenever an action is run.
---
>  * fires events to interested listeners whenever an action is run.
48,53d45
< 
< 	/**
< 	 * The prefix for repeat action labels.
< 	 */
< 	public static final String REPEAT_LABEL_PREFIX = ResourceManager.getI18NString("ActionManager.repeat.label.prefix"); //$NON-NLS-1$
< 
72,72c64,64
< 	private IRepeatableAction action = null;
---
> 	private IActionWithProgress action = null;
120,120c112,112
< 	protected final IRepeatableAction getAction() {
---
> 	protected final IActionWithProgress getAction() {
130,130c122,122
< 	protected final void setAction(IRepeatableAction action) {
---
> 	protected final void setAction(IActionWithProgress action) {
144,153d135
< 	 * Retrieves the repeat label for the last action that was run.
< 	 * 
< 	 * @return The repeat label.
< 	 */
< 	public String getRepeatLabel() {
< 		return REPEAT_LABEL_PREFIX
< 			+ (canRepeat() ? SPACE + getAction().getLabel() : EMPTY_STRING);
< 	}
< 
< 	/**
198,208d179
< 	 * Retrieves a Boolean indicating whether the last action that was run
< 	 * can be repeated.
< 	 * 
< 	 * @return <code>false</code>. Repeat is no longer supported.
< 	 */
< 	public boolean canRepeat() {
< 		// RATLC00534581 - repeat no longer supported
< 		return false;
< 	}
< 
< 	/**
218,258d188
< 	 * Repeats the last action that was run.
< 	 * 
< 	 * @exception UnsupportedOperationException If an action cannot be
< 	 *                                           repeated.
< 	 */
< 	public void repeat() {
< 		if (!canRepeat()) {
< 			UnsupportedOperationException uoe =
< 				new UnsupportedOperationException();
< 			Trace.throwing(CommonUIPlugin.getDefault(), CommonUIDebugOptions.EXCEPTIONS_THROWING, getClass(), "repeat", uoe); //$NON-NLS-1$
< 			throw uoe;
< 		}
< 
< 		IRepeatableAction.WorkIndicatorType type =
< 			getAction().getWorkIndicatorType();
< 
< 		if (type == IRepeatableAction.WorkIndicatorType.PROGRESS_MONITOR) {
< 			repeatActionInProgressMonitorDialog(getAction(), false);
< 
< 		} else if (
< 			type
< 				== IRepeatableAction
< 					.WorkIndicatorType
< 					.CANCELABLE_PROGRESS_MONITOR) {
< 			repeatActionInProgressMonitorDialog(getAction(), true);
< 
< 		} else if (type == IRepeatableAction.WorkIndicatorType.BUSY) {
< 			// display hourglass cursor
< 			BusyIndicator.showWhile(null, new Runnable() {
< 				public void run() {
< 					getAction().repeat(new NullProgressMonitor());
< 				}
< 			});
< 		} else {
< 			getAction().run(new NullProgressMonitor());
< 		}
< 
< 		Trace.trace(CommonUIPlugin.getDefault(), CommonUIDebugOptions.ACTIONS_REPEAT, "Action '" + String.valueOf(getAction()) + "' repeated."); //$NON-NLS-1$ //$NON-NLS-2$
< 	}
< 
< 	/**
266,266c196,196
< 	public void run(final IRepeatableAction theAction) {
---
> 	public void run(final IActionWithProgress theAction) {
281,281c211,211
< 		IRepeatableAction.WorkIndicatorType type =
---
> 		IActionWithProgress.WorkIndicatorType type =
284,284c214,214
< 		if (type == IRepeatableAction.WorkIndicatorType.PROGRESS_MONITOR) {
---
> 		if (type == IActionWithProgress.WorkIndicatorType.PROGRESS_MONITOR) {
288a219,219
> 				== IActionWithProgress
289,289d218
< 				== IRepeatableAction
294,294c224,224
< 		} else if (type == IRepeatableAction.WorkIndicatorType.BUSY) {
---
> 		} else if (type == IActionWithProgress.WorkIndicatorType.BUSY) {
359,359c289,289
< 		final IRepeatableAction act,
---
> 		final IActionWithProgress act,
369,392d298
< 	
< 	/**
< 	 * Repeats <code>action</code> in the context of a progress monitor dialog.
< 	 * The action runs in the same thread as the dialog. The cancel button on
< 	 * the dialog is enabled if <code>cancelable</code> is <code>true</code>. 
< 	 * 
< 	 * @param act the action to run
< 	 * @param cancelable <code>true</code> if the progress monitor should have
< 	 * 					  an enabled cancel button, <code>false</code> otherwise.
< 	 * 
< 	 * @exception RuntimeException if any exception or error occurs 
< 	 * 									   while repeating the action
< 	 */
< 	private void repeatActionInProgressMonitorDialog(
< 		final IRepeatableAction act,
< 		boolean cancelable) {
< 
< 		IRunnableWithProgress runnable = new IRunnableWithProgress() {
< 			public void run(IProgressMonitor monitor) {
< 				act.repeat(monitor);
< 			}
< 		};
< 		runInProgressMonitorDialog(runnable, cancelable);
< 	}
