70a71,71
> import org.eclipse.emf.edit.ui.provider.UnwrappingSelectionProvider;
680a682,731
> 	 * This sets up the editing domain for the model editor.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected void initializeEditingDomain() {
> 		// Create an adapter factory that yields item providers.
> 		//
> 		adapterFactory = new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE);
> 
> 		adapterFactory.addAdapterFactory(new ResourceItemProviderAdapterFactory());
> 		adapterFactory.addAdapterFactory(new GMFGenItemProviderAdapterFactory());
> 		adapterFactory.addAdapterFactory(new EcoreItemProviderAdapterFactory());
> 		adapterFactory.addAdapterFactory(new GenModelItemProviderAdapterFactory());
> 		adapterFactory.addAdapterFactory(new ReflectiveItemProviderAdapterFactory());
> 
> 		// Create the command stack that will notify this editor as commands are executed.
> 		//
> 		BasicCommandStack commandStack = new BasicCommandStack();
> 
> 		// Add a listener to set the most recent command's affected objects to be the selection of the viewer with focus.
> 		//
> 		commandStack.addCommandStackListener
> 			(new CommandStackListener() {
> 				 public void commandStackChanged(final EventObject event) {
> 					 getContainer().getDisplay().asyncExec
> 						 (new Runnable() {
> 							  public void run() {
> 								  firePropertyChange(IEditorPart.PROP_DIRTY);
> 
> 								  // Try to select the affected objects.
> 								  //
> 								  Command mostRecentCommand = ((CommandStack)event.getSource()).getMostRecentCommand();
> 								  if (mostRecentCommand != null) {
> 									  setSelectionToViewer(mostRecentCommand.getAffectedObjects());
> 								  }
> 								  if (propertySheetPage != null && !propertySheetPage.getControl().isDisposed()) {
> 									  propertySheetPage.refresh();
> 								  }
> 							  }
> 						  });
> 				 }
> 			 });
> 
> 		// Create the editing domain with a special command stack.
> 		//
> 		editingDomain = new AdapterFactoryEditingDomain(adapterFactory, commandStack, new HashMap<Resource, Boolean>());
> 	}
> 
> 	/**
847,847c898,898
< 		getSite().registerContextMenu(contextMenu, viewer);
---
> 		getSite().registerContextMenu(contextMenu, new UnwrappingSelectionProvider(viewer));
1418a1470,1474
> 		// Save only resources that have actually changed.
> 		//
> 		final Map<Object, Object> saveOptions = new HashMap<Object, Object>();
> 		saveOptions.put(Resource.OPTION_SAVE_ONLY_IF_CHANGED, Resource.OPTION_SAVE_ONLY_IF_CHANGED_MEMORY_BUFFER);
> 
1434,1434c1490,1490
< 								resource.save(Collections.EMPTY_MAP);
---
> 								resource.save(saveOptions);
