15a16,17
> import org.eclipse.emf.ecore.EStructuralFeature;
> 
21a24,26
> import org.eclipse.emf.edit.provider.ViewerNotification;
> 
> import org.eclipse.gmf.mappings.GMFMapFactory;
23a29,30
> import org.eclipse.gmf.mappings.NodeMapping;
> 
31,31c38,38
< 	extends AbstractNodeMappingItemProvider
---
> 	extends MappingEntryItemProvider
57a65,67
> 			addContextMenuPropertyDescriptor(object);
> 			addToolPropertyDescriptor(object);
> 			addAppearanceStylePropertyDescriptor(object);
63a74,133
> 	 * This adds a property descriptor for the Context Menu feature.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected void addContextMenuPropertyDescriptor(Object object) {
> 		itemPropertyDescriptors.add
> 			(createItemPropertyDescriptor
> 				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
> 				 getResourceLocator(),
> 				 getString("_UI_MenuOwner_contextMenu_feature"),
> 				 getString("_UI_PropertyDescriptor_description", "_UI_MenuOwner_contextMenu_feature", "_UI_MenuOwner_type"),
> 				 GMFMapPackage.eINSTANCE.getMenuOwner_ContextMenu(),
> 				 true,
> 				 null,
> 				 getString("_UI_VisualrepresentationPropertyCategory"),
> 				 null));
> 	}
> 
> 	/**
> 	 * This adds a property descriptor for the Tool feature.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected void addToolPropertyDescriptor(Object object) {
> 		itemPropertyDescriptors.add
> 			(createItemPropertyDescriptor
> 				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
> 				 getResourceLocator(),
> 				 getString("_UI_ToolOwner_tool_feature"),
> 				 getString("_UI_PropertyDescriptor_description", "_UI_ToolOwner_tool_feature", "_UI_ToolOwner_type"),
> 				 GMFMapPackage.eINSTANCE.getToolOwner_Tool(),
> 				 true,
> 				 null,
> 				 getString("_UI_VisualrepresentationPropertyCategory"),
> 				 null));
> 	}
> 
> 	/**
> 	 * This adds a property descriptor for the Appearance Style feature.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected void addAppearanceStylePropertyDescriptor(Object object) {
> 		itemPropertyDescriptors.add
> 			(createItemPropertyDescriptor
> 				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
> 				 getResourceLocator(),
> 				 getString("_UI_AppearanceSteward_appearanceStyle_feature"),
> 				 getString("_UI_PropertyDescriptor_description", "_UI_AppearanceSteward_appearanceStyle_feature", "_UI_AppearanceSteward_type"),
> 				 GMFMapPackage.eINSTANCE.getAppearanceSteward_AppearanceStyle(),
> 				 true,
> 				 null,
> 				 getString("_UI_VisualrepresentationPropertyCategory"),
> 				 null));
> 	}
> 
> 	/**
83a154,182
> 	 * This specifies how to implement {@link #getChildren} and is used to deduce an appropriate feature for an
> 	 * {@link org.eclipse.emf.edit.command.AddCommand}, {@link org.eclipse.emf.edit.command.RemoveCommand} or
> 	 * {@link org.eclipse.emf.edit.command.MoveCommand} in {@link #createCommand}.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public Collection getChildrenFeatures(Object object) {
> 		if (childrenFeatures == null) {
> 			super.getChildrenFeatures(object);
> 			childrenFeatures.add(GMFMapPackage.eINSTANCE.getNodeMapping_Children());
> 			childrenFeatures.add(GMFMapPackage.eINSTANCE.getNodeMapping_Compartments());
> 		}
> 		return childrenFeatures;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected EStructuralFeature getChildFeature(Object object, Object child) {
> 		// Check the type of the specified child object and return the proper feature to use for
> 		// adding (see {@link AddCommand}) it as a child.
> 
> 		return super.getChildFeature(object, child);
> 	}
> 
> 	/**
99a199,207
> 		if (object instanceof NodeMapping) {
> 			NodeMapping mapping = (NodeMapping) object;
> 			String result = " <";
> 			if (mapping.getDiagramNode() != null) {
> 				result += mapping.getDiagramNode().getName();
> 			}
> 			result += ">";
> 			return getString("_UI_NodeMapping_type") + result;
> 		}
111a220,226
> 
> 		switch (notification.getFeatureID(NodeMapping.class)) {
> 			case GMFMapPackage.NODE_MAPPING__CHILDREN:
> 			case GMFMapPackage.NODE_MAPPING__COMPARTMENTS:
> 				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
> 				return;
> 		}
123a239,248
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFMapPackage.eINSTANCE.getNodeMapping_Children(),
> 				 GMFMapFactory.eINSTANCE.createChildReference()));
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFMapPackage.eINSTANCE.getNodeMapping_Compartments(),
> 				 GMFMapFactory.eINSTANCE.createCompartmentMapping()));
