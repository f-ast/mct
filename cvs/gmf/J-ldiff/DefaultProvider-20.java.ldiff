32a33,33
> import org.eclipse.draw2d.geometry.PrecisionDimension;
50a52,53
> import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;
> import org.eclipse.gmf.runtime.common.core.command.ICommand;
52a56,57
> import org.eclipse.gmf.runtime.diagram.core.commands.SetConnectionAnchorsCommand;
> import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
380a386,386
>                         && !checkSelfEdge(from, to, editPartToNodeDict)) {
381,381d385
<                         && !fromNode.equals(toNode)) {
407a413,413
>                 && !checkSelfEdge(from, to, editPartToNodeDict)) {
408,408d412
<                 && !fromNode.equals(toNode)) {
414a420,425
>     private boolean checkSelfEdge(EditPart from, EditPart to, Map dictionary) {
>    		Node graphSource = from instanceof IBorderItemEditPart ? (Node) dictionary.get(from.getParent()) : (Node) dictionary.get(from); 
>    		Node graphTarget = to instanceof IBorderItemEditPart ? (Node) dictionary.get(to.getParent()) : (Node) dictionary.get(to);
>     	return graphSource != null && graphTarget != null && graphSource.equals(graphTarget);
>     }
>     
758a770,770
> 		if (cep.getSource().equals(source.data)) {
776a789,791
> 					if (sourceAnchorCommand instanceof ICommandProxy) {
> 						updateNewSlidingAnchorReferenceRatio((ICommandProxy) sourceAnchorCommand, true, sourceRatio);
> 					}
783a799,801
> 		} else {
> 			resultantSourceAnchorReference = getNewAnchorReferencePoint(source, ((Connection)cep.getFigure()).getSourceAnchor().getReferencePoint());
> 		}
784a803,804
> 		if (cep.getTarget().equals(target.data)) {
> 			ReconnectRequest reconnectRequest = new ReconnectRequest(
785,785d802
< 		reconnectRequest
786,786c805,805
< 				.setType(org.eclipse.gef.RequestConstants.REQ_RECONNECT_TARGET);
---
> 					org.eclipse.gef.RequestConstants.REQ_RECONNECT_TARGET);
786a806,806
> 			reconnectRequest.setConnectionEditPart(cep);
801a822,824
> 					if (targetAnchorCommand instanceof ICommandProxy) {
> 						updateNewSlidingAnchorReferenceRatio((ICommandProxy) targetAnchorCommand, false, targetRatio);
> 					}
808a832,834
> 		} else {
> 			resultantTargetAnchorReference = getNewAnchorReferencePoint(target, ((Connection)cep.getFigure()).getTargetAnchor().getReferencePoint());
> 		}
812a839,882
> 	private void updateNewSlidingAnchorReferenceRatio(ICommandProxy setAnchorCommand, boolean source, PrecisionPoint ratio) {
> 		/*
> 		 * Find the SetConnectionAnchorsCommand
> 		 */
> 		SetConnectionAnchorsCommand cmd = findSetConnectionAnchorsCommand(setAnchorCommand.getICommand());
> 		if (cmd != null) {
> 			PrecisionPoint newRatio = null;
> 			if (source) {
> 				newRatio = cmd.getNewSourceTerminal() == null ? new PrecisionPoint(0.5, 0.5) : BaseSlidableAnchor.parseTerminalString(cmd.getNewSourceTerminal());
> 			} else {
> 				newRatio = cmd.getNewTargetTerminal() == null ? new PrecisionPoint(0.5, 0.5) : BaseSlidableAnchor.parseTerminalString(cmd.getNewTargetTerminal());
> 			}
> 			if (newRatio != null) {
> 				ratio.preciseX = newRatio.preciseX;
> 				ratio.preciseY = newRatio.preciseY;
> 				ratio.updateInts();
> 			}
> 		}
> 	}
> 	
> 	private SetConnectionAnchorsCommand findSetConnectionAnchorsCommand(ICommand cmd) {
> 		if (cmd instanceof SetConnectionAnchorsCommand) {
> 			return (SetConnectionAnchorsCommand) cmd;
> 		} else if (cmd instanceof CompositeCommand) {
> 			for (Iterator itr = ((CompositeCommand)cmd).listIterator(); itr.hasNext();) {
> 				ICommand childCmd = (ICommand) itr.next();
> 				SetConnectionAnchorsCommand setAnchorsCmd = findSetConnectionAnchorsCommand(childCmd);
> 				if (setAnchorsCmd != null) {
> 					return setAnchorsCmd;
> 				}
> 			}
> 		}
> 		return null;
> 	}
> 	
> 	private Point getNewAnchorReferencePoint(Node node, Point oldAbsReference) {
> 		GraphicalEditPart gep = (GraphicalEditPart)node.data;
> 		PrecisionPoint parentLocation = new PrecisionPoint(gep.getFigure().getBounds().getLocation());
> 		gep.getFigure().translateToAbsolute(parentLocation);
> 		PrecisionDimension diff = new PrecisionDimension(oldAbsReference.preciseX() - parentLocation.preciseX(), oldAbsReference.preciseY() - parentLocation.preciseY());
> 		getMapMode().DPtoLP(diff);
> 		return new Point(node.x, node.y).translate(diff);
> 	}
> 
