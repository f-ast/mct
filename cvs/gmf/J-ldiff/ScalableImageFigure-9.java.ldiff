15a16,16
> import org.eclipse.draw2d.ColorConstants;
49,49c50,50
< 	private RenderingListenerImpl renderingListener = new RenderingListenerImpl(
---
> 	private RenderingListenerImpl renderingListener = new RenderingListenerImpl();
50,50d50
< 		this);
52,52c52,52
< 	static private class RenderingListenerImpl
---
> 	private class RenderingListenerImpl
55,56d54
< 		private ScalableImageFigure fig;
< 
57,57c55,55
< 		public RenderingListenerImpl(ScalableImageFigure fig) {
---
> 		public RenderingListenerImpl() {
59,59d56
< 			this.fig = fig;
61a59,60
> 		/* (non-Javadoc)
> 		 * @see org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderingListener#paintFigureWhileRendering(org.eclipse.draw2d.Graphics)
62,62c78,78
< 		/**
---
> 		/**
63,63c79,79
< 		 * @return <code>IFigure</code> that the listener wraps
---
> 		 * @return <code>IFigure</code> that the listener wraps
63a80,84
> 		 */
> 		public ScalableImageFigure getFigure() {
> 			return ScalableImageFigure.this;
> 		}
> 		
64a62,63
> 		public void paintFigureWhileRendering(Graphics g) {
> 			ScalableImageFigure.this.paintFigureWhileRendering(g);
65,66d61
< 		public ScalableImageFigure getFigure() {
< 			return fig;
75,75c72,72
< 			if (getFigure().getParent() != null) {
---
> 			if (ScalableImageFigure.this.getParent() != null) {
76,76c73,73
< 				getFigure().setRenderedImage(rndImg);
---
> 				ScalableImageFigure.this.setRenderedImage(rndImg);
77,77c74,74
< 				getFigure().repaint();
---
> 				ScalableImageFigure.this.repaint();
101,101c105,105
< 			return getFigure().hashCode();
---
> 			return ScalableImageFigure.this.hashCode();
327a332,353
> 	/**
> 	 * If the rendering is occuring on a separate thread, this method is a hook to draw a temporary
> 	 * image onto the drawing surface.
> 	 * 
> 	 * @param g the <code>Graphics</code> object to paint the temporary image to
> 	 */
> 	protected void paintFigureWhileRendering(Graphics g) {
> 		Rectangle area = getClientArea().getCopy();
> 		
> 		g.pushState();
> 		g.setBackgroundColor(ColorConstants.white);
> 		g.fillRectangle(area.x, area.y, area.width - 1, area.height - 1);
> 		g.setForegroundColor(ColorConstants.red);
> 		g.drawRectangle(area.x, area.y, area.width - 1, area.height - 1);
> 		g.setLineStyle(SWT.LINE_DOT);
> 		g.drawLine(area.x, area.y, area.x + area.width, area.y
> 			+ area.height);
> 		g.drawLine(area.x + area.width, area.y, area.x, area.y
> 			+ area.height);
> 		g.popState();
> 	}
> 	
