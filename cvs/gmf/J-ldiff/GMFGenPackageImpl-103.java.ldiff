4140a4141,4149
> 			 "ocl", "notation::Diagram.oclAsType(ecore::EClass).isSuperTypeOf(diagramRunTimeClass.ecoreClass)",
> 			 "description", "\'Diagram Runtime Class\' must be a notation::Diagram or sub-class"
> 		   });															
> 		addAnnotation
> 		  (getGenCommonBase_VisualID(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "visualID >= 0",
> 			 "description", "Visual ID must be a non-negative integer"
4141,4141d4140
< 			 "ocl", "nodes->forAll(n : GenNode | self.links->forAll(l : GenLink | l.oclAsType(TypeLinkModelFacet).metaClass <> n.getDomainMetaClass()))"
4146a4155,4156
> 			 "ocl", "notation::Node.oclAsType(ecore::EClass).isSuperTypeOf(diagramRunTimeClass.ecoreClass)",
> 			 "description", "Node \'Diagram Runtime Class\' must be a notation::Node or sub-class"
4147,4147d4154
< 			 "ocl", "let c: ecore::EClass = diagramRunTimeClass.ecoreClass.oclAsType(ecore::EClass) in c = notation::Node or c.eAllSuperTypes->includes(notation::Node)"
4152a4162,4191
> 			 "ocl", "childNodes->forAll(n|n.modelFacet.containmentMetaFeature.genClass.ecoreClass.isSuperTypeOf(self.getDomainMetaClass().ecoreClass))",
> 			 "description", "Node contains child nodes with \'Containment Feature\' not available in the node \'Domain Element\'"
> 		   });				
> 		addAnnotation
> 		  (genTopLevelNodeEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not modelFacet.containmentMetaFeature.oclIsUndefined() implies modelFacet.containmentMetaFeature.genClass.ecoreClass.isSuperTypeOf(diagram.domainDiagramElement.ecoreClass)",
> 			 "description", "Top level node \'Containment Feature\' must be available in the diagram \'Domain Element\' or its super-class"
> 		   });		
> 		addAnnotation
> 		  (genChildNodeEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not modelFacet.containmentMetaFeature.oclIsUndefined()",
> 			 "description", "Child node must specify \'Containment Meta Feature\'"
> 		   });		
> 		addAnnotation
> 		  (getGenChildNode_Containers(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "containers->forAll(n|n.listLayout) or containers->forAll(n|not n.listLayout)",
> 			 "description", "Node is referenced from multiple containers with different \'List Layout\' value"
> 		   });			
> 		addAnnotation
> 		  (genCompartmentEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "childNodes->forAll(n|n.modelFacet.containmentMetaFeature.genClass.ecoreClass.isSuperTypeOf(node.getDomainMetaClass().ecoreClass))",
> 			 "description", "Compartment contains child nodes with \'Containment Feature\' not available in the compartment containing node \'Domain Element\'"
4153,4153d4161
< 			 "ocl", "containers->forAll(n|n.listLayout) or containers->forAll(n|not n.listLayout)"
4158a4197,4198
> 			 "ocl", "notation::Edge.oclAsType(ecore::EClass).isSuperTypeOf(diagramRunTimeClass.ecoreClass)",
> 			 "description", "Link \'Diagram Runtime Class\' must be a notation::Edge or sub-class"
4159,4159d4196
< 			 "ocl", "let c: ecore::EClass = diagramRunTimeClass.ecoreClass.oclAsType(ecore::EClass) in c = notation::Edge or c.eAllSuperTypes->includes(notation::Edge)"
4164a4204,4205
> 			 "ocl", "getMetaFeatures()->forAll(f|f.ecoreFeature.eContainingClass.isSuperTypeOf(node.getDomainMetaClass().ecoreClass))",
> 			 "description", "Node label meta features must be owned by the node \'Meta Class\' or its super-classes"
4165,4165d4203
< 			 "ocl", "modelFacet.metaFeature.ecoreFeature.eContainingClass.isSuperTypeOf(node.getDomainMetaClass().ecoreClass)"
4170a4211,4212
> 			 "ocl", "(modelFacet.oclIsTypeOf(FeatureLabelModelFacet) or modelFacet.oclIsTypeOf(CompositeFeatureLabelModelFacet))=true implies link.modelFacet.oclIsTypeOf(TypeLinkModelFacet)",
> 			 "description", "Feature based link labels can only be used on link with class (TypeLinkModelFacet)"
4171,4171c4218,4218
< 			 "ocl", "let tl: TypeLinkModelFacet = link.modelFacet.oclAsType(TypeLinkModelFacet) in tl.oclIsUndefined() or modelFacet.metaFeature.ecoreFeature.eContainingClass.isSuperTypeOf(tl.metaClass.ecoreClass)"
---
> 			 "ocl", "let tl: TypeLinkModelFacet = link.modelFacet.oclAsType(TypeLinkModelFacet) in not tl.oclIsUndefined() implies self.getMetaFeatures()->forAll(f|f.ecoreFeature.eContainingClass.isSuperTypeOf(tl.metaClass.ecoreClass))",
4171a4219,4219
> 			 "description", "Link label meta features must be owned by the node \'Meta Class\' or its super-classes"
4173a4215,4215
> 		  (genLinkLabelEClass, 
4174,4174d4214
< 		  (getTypeModelFacet_ContainmentMetaFeature(), 
4177,4177d4217
< 			 "ocl", "containmentMetaFeature.ecoreFeature.oclAsType(ecore::EReference).containment"
4182a4225,4231
> 			 "ocl", "let r: ecore::EReference=containmentMetaFeature.ecoreFeature.oclAsType(ecore::EReference) in not containmentMetaFeature.oclIsUndefined() implies r.containment or r.eReferenceType.isSuperTypeOf(metaClass.ecoreClass)",
> 			 "description", "\'Containment Meta Feature\' must reference \'Meta Class\' or its super-classes"
> 		   });			
> 		addAnnotation
> 		  (getTypeModelFacet_ChildMetaFeature(), 
> 		   source, 
> 		   new String[] {
4183a4233,4240
> 			 "description", "\'Child Meta Feature\' must reference \'Meta Class\' or its sub-classes"
> 		   });								
> 		addAnnotation
> 		  (typeLinkModelFacetEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not containmentMetaFeature.oclIsUndefined()",
> 			 "description", "Link \'Containment Meta Feature\' must be specified"
4183,4183c4232,4232
< 			 "ocl", "containmentMetaFeature.ecoreFeature.oclAsType(ecore::EReference).eReferenceType.isSuperTypeOf(metaClass.ecoreClass)"
---
> 			 "ocl", "not childMetaFeature.oclIsUndefined() implies childMetaFeature.ecoreFeature.oclAsType(ecore::EReference).eReferenceType.isSuperTypeOf(metaClass.ecoreClass)",
4188a4246,4247
> 			 "ocl", "not sourceMetaFeature.oclIsUndefined() implies sourceMetaFeature.genClass.ecoreClass.isSuperTypeOf(metaClass.ecoreClass)",
> 			 "description", "Link \'Source Meta Feature\' must be owned by link \'Meta Class\' or its super-class"
4189,4189d4245
< 			 "ocl", "sourceMetaFeature.oclIsUndefined() or sourceMetaFeature.ecoreFeature.oclAsType(ecore::EReference).eReferenceType.isSuperTypeOf(metaClass.ecoreClass)"
4195a4254,4254
> 			 "description", "Link \'Target Meta Feature\' must be owned by link \'Meta Class\' or its super-class"
4195,4195c4253,4253
< 			 "ocl", "targetMetaFeature.genClass.ecoreClass.isSuperTypeOf(metaClass.ecoreClass)"
---
> 			 "ocl", "not targetMetaFeature.oclIsUndefined() implies targetMetaFeature.genClass.ecoreClass.isSuperTypeOf(metaClass.ecoreClass)",
4201,4201c4260,4260
< 			 "ocl", "initializers.feature->forAll(f| f.ecoreFeature.eContainingClass.isSuperTypeOf(typeModelFacet.metaClass.ecoreClass))"
---
> 			 "ocl", "initializers.feature->forAll(f| f.ecoreFeature.eContainingClass.isSuperTypeOf(typeModelFacet.metaClass.ecoreClass))",
4201a4261,4261
> 			 "description", "All initializer features must be available in initialized element \'Meta Class\'"
4206a4267,4289
> 			 "ocl", "not sourceEnd.oclIsUndefined() or not targetEnd.oclIsUndefined()",
> 			 "description", "Either \'sourceEnd\' or \'targetEnd\' constraint must be specified"
> 		   });																															
> 		addAnnotation
> 		  (getGenAuditRule_Id(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not id.oclIsUndefined() implies container.audits->one(i | i.id = self.id)",
> 			 "description", "Audit rule with the same ID already exists"
> 		   });																	
> 		addAnnotation
> 		  (getGenNotationElementTarget_Element(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "notation::View.oclAsType(ecore::EClass).isSuperTypeOf(element.ecoreClass)",
> 			 "description", "Notation model element expected"
> 		   });			
> 		addAnnotation
> 		  (getGenMetricRule_Key(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not key.oclIsUndefined() implies container.metrics->one(i | i.key = self.key)",
> 			 "description", "Metric rule with the same \'key\' already exists"
4207,4207d4266
< 			 "ocl", "not sourceEnd.oclIsUndefined() or not targetEnd.oclIsUndefined()"
4305,4305c4387,4387
< 			 "ocl", "target.ecoreClass"
---
> 			 "ocl", "target.getContext()"
4313a4396,4402
> 		addAnnotation
> 		  (getGenMetricRule_Rule(), 
> 		   source, 
> 		   new String[] {
> 			 "def", "type",
> 			 "ocl", "\'ecore::EDoubleObject\'"
> 		   });							
