0a1,1
> /*
1,1d0
< /*******************************************************************************
2,2c2,2
<  * Copyright (c) 2006, 2007 Borland Software Corporation
---
>  * Copyright (c) 2006, 2008 Borland Software Corporation
6a7,7
>  */
7,7d6
<  *******************************************************************************/
21a22,22
> import org.eclipse.gmf.internal.xpand.util.ParserException.ErrorLocationInfo;
59a61,64
> 	protected void handleParserException(ParserException ex) {
> 		Activator.logWarn(ex.getResourceName() + ":" + ex.getClass().getName());
> 		for (ErrorLocationInfo ei : ex.getParsingErrors()) {
> 			Activator.logWarn(ei.startLine + ":" + ei.message);
60,73d60
< 	protected Reader resolve(String fullyQualifiedName, String extension) throws IOException {
< 		final String urlPath = fullyQualifiedName.replaceAll(SyntaxConstants.NS_DELIM, "/") + '.' + extension;
< 		for (int i = 0; i < paths.length; i++) {
< 			try {
< 				return createReader(urlPath, paths[i]);
< 			} catch (MalformedURLException ex) {
< 				/*IGNORE*/
< 			} catch (IOException ex) {
< 				// XXX perhaps, conditionally turn logging on to debug template loading issues?
< 				/*IGNORE*/
< 			} catch (Exception ex) {
< 				// just in case
< 				Activator.logError(ex);
< 			}
75,75d65
< 		throw new FileNotFoundException(fullyQualifiedName);
