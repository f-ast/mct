2,2c2,2
<  * Copyright (c) 2004, 2007 IBM Corporation and others.
---
>  * Copyright (c) 2004 IBM Corporation and others.
26,26c29,29
< import org.eclipse.gmf.runtime.draw2d.ui.geometry.LineSeg;
---
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.LineSeg;
27,27c30,30
< import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;
---
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;
27a31,31
> 
31a33,33
>  * @author oboyko
32,34d32
<  * Implements sliding connection anchor functionality for Image figures
<  * 
<  * @author aboyko
35a35,35
>  * Window - Preferences - Java - Code Style - Code Templates
42,42c42,42
< 		static private Map<Image, ImageAnchorLocation> imageAnchorLocationMap = new WeakHashMap<Image, ImageAnchorLocation>();
---
> 		static private Map imageAnchorLocationMap = new WeakHashMap();
54,54c54,54
< 			ImageAnchorLocation imgAnchorLoc = imageAnchorLocationMap
---
> 			ImageAnchorLocation imgAnchorLoc = (ImageAnchorLocation) imageAnchorLocationMap
64,64c64,64
< 		private Map<Integer, Point> locationMap = new HashMap<Integer, Point>();
---
> 		private Map locationMap = new HashMap();
163,163c163,163
< 				ptIntersect = locationMap.get(new Integer(angle));
---
> 				ptIntersect = (Point) locationMap.get(new Integer(angle));
299a300,300
> 	/* 
300,300c301,301
< 	/* (non-Javadoc)
---
> 	 * (non-Javadoc)
301,301c302,302
< 	 * @see org.eclipse.gmf.runtime.draw2d.ui.figures.BaseSlidableAnchor#getLocation(org.eclipse.draw2d.geometry.Point, org.eclipse.draw2d.geometry.Point)
---
> 	 * @see org.eclipse.gmf.runtime.gef.ui.figures.SlidableAnchor#getLocation(org.eclipse.draw2d.geometry.Point, org.eclipse.draw2d.geometry.Point)
306a308,308
> 		Rectangle ownerRect = new Rectangle(getBox());
307,307d307
< 		Rectangle ownerRect = getBox();
308,308c309,309
< 		PointList intersections = getIntersectionPoints(ownReference,
---
> 		PointList intersections = getIntersectionPoints(ownReference, foreignReference);
309,309d309
< 				foreignReference);
310a311,314
> 			Point ptRef = PointListUtilities.pickFarestPoint(intersections, foreignReference);
> 			Point ptEdge = PointListUtilities.pickClosestPoint(intersections,foreignReference);
> 			Point loc = ImageAnchorLocation.getInstance(getImage()).getLocation(ptRef, ptEdge, ownerRect, isDefaultAnchor());
> 			if (loc != null)
311,318d310
< 			Point ptRef = PointListUtilities.pickFarestPoint(intersections,
< 					foreignReference);
< 			Point ptEdge = PointListUtilities.pickClosestPoint(intersections,
< 					foreignReference);
< 			Point location = ImageAnchorLocation.getInstance(getImage())
< 					.getLocation(ptRef, ptEdge, ownerRect,
< 							getReferencePoint().equals(ownReference) && isDefaultAnchor());
< 			if (location != null) {
319,319c315,315
< 				location = normalizeToStraightlineTolerance(foreignReference,
---
> 				loc = normalizeToStraightlineTolerance(foreignReference, loc, 3);
320,321d315
< 						location, 3);
< 			}
322,322c316,316
< 			return location;
---
> 			return loc;
326,326d319
< 
