2,2c2,2
<  * Copyright (c) 2008 IBM Corporation and others.
---
>  * Copyright (c) 2002, 2005 IBM Corporation and others.
12,12c12,12
< package org.eclipse.gmf.runtime.diagram.ui.printing.render.util;
---
> package org.eclipse.gmf.runtime.common.ui.printing;
14a15,15
> import java.util.Locale;
15a20,24
> import org.eclipse.gmf.runtime.common.core.util.Log;
> import org.eclipse.gmf.runtime.common.core.util.StringStatics;
> import org.eclipse.gmf.runtime.common.core.util.Trace;
> import org.eclipse.gmf.runtime.common.ui.printing.internal.CommonPrintingDebugOptions;
> import org.eclipse.gmf.runtime.common.ui.printing.internal.CommonPrintingStatusCodes;
16,16c25,25
< import org.eclipse.gmf.runtime.common.ui.printing.IPrintHelper;
---
> import org.eclipse.gmf.runtime.common.ui.printing.internal.PrintingPlugin;
16a26,26
> 
17,19d25
< import org.eclipse.gmf.runtime.diagram.ui.printing.render.dialogs.JPSPrintDialog;
< import org.eclipse.gmf.runtime.diagram.ui.printing.render.model.PrintOptions;
< import org.eclipse.jface.dialogs.IDialogConstants;
23a28,31
>  * The PrintHelper implements the IPrintHelper interface for the platform
>  * specfic print code.
>  * 
>  * This is for Win32.
24,24d27
<  * Default implementation of a print-helper.
25a33,33
>  * @author wdiu, Wayne Diu
26,27d32
<  * @author Christian W. Damus (cdamus)
<  * @author James Bruck (jbruck)
28a35,35
> public class PrintHelper
29,29c36,36
< public class PrintHelper implements IPrintHelper {
---
> 	implements IPrintHelper {
30,32d36
< 	private final PrintOptions options = new PrintOptions();
< 
< 	List<String> diagramList;
33a38,41
> 	/**
> 	 * Dynamic link library name without the extension
> 	 */
> 	private static final String DLL_NAME = "DiagramPrint"; //$NON-NLS-1$
34,36d37
< 	public PrintHelper() {
< 		initPrintOptions();
< 	}
38a44,44
> 	 * Country and language separator
39,39d43
< 	 * Initialize the default options.
40a46,46
> 	private static final String SEPARATOR = StringStatics.UNDER_SCORE;
41,45d45
< 	private void initPrintOptions() {
< 		options.setPercentScaling(true);
< 		options.setScaleFactor(100);
< 		options.setFitToPagesWidth(1);
< 		options.setFitToPagesHeight(1);
46a48,50
> 	//to avoid throwing exceptions because of trying to load dlls for
> 	//unsupported locales, maintain an array of supported countries and
> 	//languages
47,49d47
< 		options.setAllPages(true);
< 		options.setRangeFrom(1);
< 		options.setRangeTo(1);
50a52,53
> 	//in the array below, if there are multiple entries for the same
> 	//language, put the country specific one first
51,52d51
< 		options.setCopies(1);
< 		options.setCollate(false);
53a55,63
> 	/**
> 	 * Supported languages strings.  Default locale is SUPPORTED[0].
> 	 */
> 	private static final String SUPPORTED[] = {"en", "de", "es", "fr", "it", "ja", "ko", "pt_BR", "zh_CN", "zh_TW"}; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ //$NON-NLS-8$ //$NON-NLS-9$ //$NON-NLS-10$
> 
> 	/**
> 	 * Default locale, English language
> 	 */
> 	private static final String DEFAULT_LOCALE = SUPPORTED[0];
54,56d54
< 		options.setQualityHigh(true);
< 		options.setSideOneSided(true);
< 		options.setChromaticityColor(true);
58,59d64
< 		options.setDiagramCurrent(true);
< 	}
61a67,67
> 	 * Load the dll
62,63d66
< 	 * (non-Javadoc)
< 	 * @see org.eclipse.gmf.runtime.common.ui.printing.IPrintHelper#openPrintDlg(java.util.List)
64a69,69
> 	static {
65,71d68
< 	@SuppressWarnings("unchecked")
< 	public PrinterData openPrintDlg(List availableDiagramList) {
< 		PrinterData result = null;
< 		this.diagramList = availableDiagramList;
< 
< 		JPSPrintDialog dlg = new JPSPrintDialog(PlatformUI.getWorkbench()
< 				.getActiveWorkbenchWindow(), options, this.diagramList);
72a71,137
> 		//Although a far nicer way to do this dll loading is by using
> 		//Bundle-NativeCode in manifest.mf, I am not doing it that way
> 		//because of Bugzilla https://bugs.eclipse.org/bugs/show_bug.cgi?id=116497
> 		
> 		//When the Bugzilla has been fixed, this static block can be replaced
> 		//with one line of code
> 		//System.loadLibrary("DiagramPrint");
> 
> 		//These lines would need to be added to the manifest.mf
> 		//Bundle-NativeCode: os/win32/x86/de/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; language=de,
> 		// os/win32/x86/es/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; language=es,
> 		// os/win32/x86/fr/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; language=fr,
> 		// os/win32/x86/it/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; language=it,
> 		// os/win32/x86/ja/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; language=ja,
> 		// os/win32/x86/ko/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; language=ko,
> 		// os/win32/x86/pt_BR/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; selection-filter = "(osgi.nl = pt_BR)",	
> 		// os/win32/x86/zh_CN/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; selection-filter = "(osgi.nl = zh_CN)",
> 		// os/win32/x86/zh_TW/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; selection-filter = "(osgi.nl = zh_TW)",
> 		// os/win32/x86/en/DiagramPrint.dll ; osname=WindowsXP ; processor = x86		
> 
> 		
> 		boolean success = false;
> 		String language = Locale.getDefault().getLanguage().toLowerCase();
> 		String country = Locale.getDefault().getCountry().toUpperCase();
> 
> 		//try from most specific to least specific, following osgi
> 		//guidelines
> 
> 		if (language != null) {
> 
> 			String localizedVersion = (country != null) ? language + SEPARATOR + country : language;
> 
> 			for (int i = 0; i < SUPPORTED.length; i++) {
> 				
> 				if (localizedVersion.equals(SUPPORTED[i])) {
> 					success = true;
> 				}
> 				else if (language.equals(SUPPORTED[i])) {
> 					//this check is redundant in the unlikely event that country
> 					//is null and language equals the localizedVersion
> 					localizedVersion = language;
> 					success = true;
> 				}
> 				
> 				if (success) {
> 					success = false;
> 					//Runtime.getRuntime().findLibrary() is protected,
> 					//surround loadLibrary() with try catch
> 					try {
> 						System.loadLibrary(DLL_NAME + SEPARATOR
> 							+ localizedVersion);
> 						success = true;
> 						break;
> 					} catch (UnsatisfiedLinkError ule) {
> 						//try without the country
> 						//loadedDLL is still false
> 						Trace.catching(PrintingPlugin.getDefault(),
> 							CommonPrintingDebugOptions.EXCEPTIONS_CATCHING,
> 							PrintHelper.class, "Link", ule); //$NON-NLS-1$
> 						Log.error(PrintingPlugin.getDefault(),
> 							CommonPrintingStatusCodes.RESOURCE_FAILURE,
> 							"Failed to load DiagramPrint dll for " //$NON-NLS-1$
> 								+ localizedVersion);
> 						Trace.throwing(PrintingPlugin.getDefault(),
> 							CommonPrintingDebugOptions.EXCEPTIONS_THROWING,
> 							PrintHelper.class, "Link", ule); //$NON-NLS-1$*/
> 					}
73,75d70
< 		if (dlg.open() == IDialogConstants.OK_ID) {
< 			if (options.getDestination() != null) {
< 				result = options.getDestination().getPrinterData();
77,79d138
< 		} else {
< 			// revert
< 			initPrintOptions();
81,81d139
< 		return result;
83a142,156
> 		if (!success) {
> 			try {
> 				System.loadLibrary(DLL_NAME + SEPARATOR + DEFAULT_LOCALE);
> 			} catch (UnsatisfiedLinkError ule) {
> 				Trace.catching(PrintingPlugin.getDefault(),
> 					CommonPrintingDebugOptions.EXCEPTIONS_CATCHING,
> 					PrintHelper.class, "Link", ule); //$NON-NLS-1$
> 				Log.error(PrintingPlugin.getDefault(),
> 					CommonPrintingStatusCodes.RESOURCE_FAILURE,
> 					"Failed to load DiagramPrint_en.dll for language " + ((language == null) ? "null" : language) + " and country " + ((country == null) ? "null" : country), ule); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
> 				Trace.throwing(PrintingPlugin.getDefault(),
> 					CommonPrintingDebugOptions.EXCEPTIONS_THROWING,
> 					PrintHelper.class, "Link", ule); //$NON-NLS-1$*/
> 				throw ule;
> 			}
84,85d141
< 	public boolean getDlgCollate() {
< 		return options.isCollate();
88,89d158
< 	public int getDlgNumberOfCopies() {
< 		return options.getCopies();
91a161,349
> 	/*
> 	 * Static methods from dll
> 	 */
> 
> 	/*
> 	 * Set methods
> 	 */
> 
> 	/**
> 	 * Init print dialog box's scale fit to.
> 	 * 
> 	 * @param m
> 	 * @param n
> 	 */
> 	public static native void initScaleFitTo(int m, int n);
> 
> 	/**
> 	 * Init print dialog box's scale percent.
> 	 * 
> 	 * @param percent 
> 	 */
> 	public static native void initScalePercent(int percent);
> 
> 	/**
> 	 * Resets the dialog. Call this before addDiagramString if you've already
> 	 * added strings.
> 	 */
> 	public static native void resetDialog();
> 
> 	/**
> 	 * Add a string to the diagrams list of the dialog box.
> 	 * 
> 	 * @param string 
> 	 */
> 	public static native void addDiagramString(String string);
> 
> 	/**
> 	 * Set the owner hwnd so that the displyed print dialog is modal.
> 	 * 
> 	 * @param windowClass	String with class
> 	 * @param title			String with shell title
> 	 */
> 	public static native void setHwndOwner(String windowClass, String title);
> 
> 	/*
> 	 * Get methods
> 	 */
> 
> 	/**
> 	 * If not > 0 then user has clicked percent scaling
> 	 * 
> 	 * @return scale to m int
> 	 */
> 	public static native int getScaleFitToM();
> 
> 	/**
> 	 * If not > 0 then user has clicked percent scaling
> 	 * 
> 	 * @return scale to n int
> 	 */
> 	public static native int getScaleFitToN();
> 
> 	/**
> 	 * If not > 0 then user has clicked fit to m x n scaling
> 	 * 
> 	 * @return scale percent int
> 	 */
> 	public static native int getScalePercent();
> 
> 	/**
> 	 * Returns true if the diagram at the index was selected
> 	 * 
> 	 * @param index
> 	 *            the index of the diagrams you passed in
> 	 * @return true if selected, false if not selected
> 	 */
> 	public static native boolean isDiagramSelected(int index);
> 
> 	//one of the three is unnecssary, but it makes more sense
> 	/**
> 	 * Returns if diagram print range all was selected
> 	 * 
> 	 * @return true if selected, false if not selected
> 	 */
> 	public static native boolean getDiagramPrintRangeAll();
> 
> 	/**
> 	 * Returns if diagram print range current was selected
> 	 * 
> 	 * @return true if selected, false if not selected
> 	 */
> 	public static native boolean getDiagramPrintRangeCurrent();
> 
> 	/**
> 	 * Returns if diagram print range selection was selected
> 	 * 
> 	 * @return true if selected, false if not selected
> 	 */
> 	public static native boolean getDiagramPrintRangeSelection();
> 
> 	//one of the three is unnecssary, but it makes more sense
> 	/**
> 	 * Returns if print range all was selected
> 	 * 
> 	 * @return true if selected, false if not selected
> 	 */
> 	public static native boolean getPrintRangeAll();
> 
> 	/**
> 	 * Returns if print range pages was selected
> 	 * 
> 	 * @return true if selected, false if not selected
> 	 */
> 	public static native boolean getPrintRangePages();
> 
> 	/**
> 	 * Returns if collate was selected
> 	 * 
> 	 * @return true if selected, false if not selected
> 	 */
> 	public static native boolean getCollate();
> 
> 	/**
> 	 * Returns the pages from int value, check if (getPrintRangesPages()) first.
> 	 * 
> 	 * @return int of the pages from box
> 	 */
> 	public static native int getPagesFrom();
> 
> 	/**
> 	 * Returns the pages from int value, check if (getPrintRangesPages()) first.
> 	 * 
> 	 * @return int of the pages to box
> 	 */
> 	public static native int getPagesTo();
> 
> 	/**
> 	 * Returns the number of copies the user wants to print. This is nCopies
> 	 * from PRINTDLG
> 	 * 
> 	 * @return int with the number of copies
> 	 */
> 	public static native int getNumberOfCopies();
> 
> 	/*
> 	 * Don't do getDevMode() and gethDevNames() for hDevMode and hDevNames from
> 	 * PRINTDLG because they are filled by passing in PrinterData to open..
> 	 */
> 
> 	/**
> 	 * Opens the dialog box.
> 	 * 
> 	 * @param pd
> 	 * @return <code>true</code> if dialog box opened succesfully, <code>false</code> otherwise
> 	 */
> 	public static native boolean open(PrinterData pd);
> 
> 	/**
> 	 * Open the print dialog box with the diagram list.
> 	 * 
> 	 * XXX: internal access SWT_Window0 is a hardcoded internal access string
> 	 * 
> 	 * @param diagramList
> 	 */
> 	public PrinterData openPrintDlg(List diagramList) {
> 
> 		//set owner to make it modal
> 		String title = PlatformUI.getWorkbench().getActiveWorkbenchWindow()
> 			.getShell().getText();
> 		
> 		assert null!=title : "title cannot be null"; //$NON-NLS-1$
> 
> 		//XXX: internal access
> 		//SWT_Window0 is a hardcoded internal access string of the class
> 		//name and it could change. However, setHwndOwner will try to
> 		//obtain the window even if it can't find that matching class by
> 		//using the window's title.
> 		setHwndOwner("SWT_Window0", title); //$NON-NLS-1$
> 
> 		//initialize dialog
> 		resetDialog();
> 		initScaleFitTo(1, 1);
> 		initScalePercent(100);
> 
> 		if (diagramList != null) {
> 			for (int c = 0; c < diagramList.size(); c++) {
> 				assert (diagramList.get(c) instanceof String);
> 				addDiagramString((String) diagramList.get(c));
> 			}
92,93d160
< 	public int getDlgPagesFrom() {
< 		return options.getRangeFrom();
95a352,362
> 		//prevent default initialization from empty constructor
> 		PrinterData printerData = new PrinterData(StringStatics.BLANK,
> 			StringStatics.BLANK);
> 		if (open(printerData)) {
> 			//save the printerData
> 			if (getPrintRangePages()) {
> 				printerData.scope = PrinterData.PAGE_RANGE;
> 				printerData.startPage = getPagesFrom();
> 				printerData.endPage = getPagesTo();
> 			} else /* if (getPrintRangeAll()) */{
> 				printerData.scope = PrinterData.ALL_PAGES;
96,97d351
< 	public int getDlgPagesTo() {
< 		return options.getRangeTo();
98a364,365
> 			printerData.printToFile = false;
> 			//not supported by dialog, no need to set printerData.fileName
99a367,371
> 			printerData.copyCount = getNumberOfCopies();
> 			printerData.collate = getCollate();
> 
> 		} else {
> 			return null;
100,101d366
< 	public boolean getDlgPrintRangeAll() {
< 		return options.isAllPages();
103a374,382
> 		return printerData;
> 
> 	}
> 
> 	/**
> 	 * Make an instance of PrintHelper
> 	 */
> 	public PrintHelper() {
> 		/* empty constructor */
104,105d373
< 	public boolean getDlgPrintRangePages() {
< 		return !getDlgPrintRangeAll();
107a385,393
> 	/*
> 	 * The get methods to hide the static methods
> 	 */
> 
> 	/**
> 	 * If not > 0 then user has clicked percent scaling
> 	 * 
> 	 * @return scale to m int
> 	 */
108a395,395
> 		return getScaleFitToM();
109,109d394
< 		return options.getFitToPagesWidth();
111a398,402
> 	/**
> 	 * If not > 0 then user has clicked percent scaling
> 	 * 
> 	 * @return scale to n int
> 	 */
112a404,404
> 		return getScaleFitToN();
113,113d403
< 		return options.getFitToPagesHeight();
115a407,411
> 	/**
> 	 * If not > 0 then user has clicked fit to m x n scaling
> 	 * 
> 	 * @return scale percent int
> 	 */
116a413,413
> 		return getScalePercent();
117,117d412
< 		return options.isPercentScaling() ? options.getScaleFactor() : -1;
119a416,424
> 	/**
> 	 * Returns true if the diagram at the index was selected
> 	 * 
> 	 * @param index
> 	 *            the index of the diagrams you passed in
> 	 * @return true if selected, false if not selected
> 	 */
> 	public boolean isDlgDiagramSelected(int index) {
> 		return isDiagramSelected(index);
120,121d415
< 	public void setDlgOrientation(boolean landscape) {
< 		// TODO Auto-generated method stub
123a427,434
> 	//one of the three is unnecssary, but it makes more sense
> 	/**
> 	 * Returns if diagram print range all was selected
> 	 * 
> 	 * @return true if selected, false if not selected
> 	 */
> 	public boolean getDlgDiagramPrintRangeAll() {
> 		return getDiagramPrintRangeAll();
124,125d426
< 	public void setDlgPaperSize(int index, double width, double length) {
< 		// TODO Auto-generated method stub
127a437,441
> 	/**
> 	 * Returns if diagram print range current was selected
> 	 * 
> 	 * @return true if selected, false if not selected
> 	 */
128a443,443
> 		return getDiagramPrintRangeCurrent();
129,129d442
< 		return options.isDiagramCurrent();
131a446,450
> 	/**
> 	 * Returns if diagram print range selection was selected
> 	 * 
> 	 * @return true if selected, false if not selected
> 	 */
132a452,452
> 		return getDiagramPrintRangeSelection();
133,133d451
< 		return options.isDiagramSelection();
135a455,462
> 	//one of the three is unnecssary, but it makes more sense
> 	/**
> 	 * Returns if print range all was selected
> 	 * 
> 	 * @return true if selected, false if not selected
> 	 */
> 	public boolean getDlgPrintRangeAll() {
> 		return getPrintRangeAll();
136,139d454
< 	public boolean isDlgDiagramSelected(int index) {
< 		String diagramToPrint = diagramList.get(index);
< 		if (options.getDiagramsToPrint() != null) {
< 			return options.getDiagramsToPrint().contains(diagramToPrint);
140a464,471
> 
> 	/**
> 	 * Returns if print range pages was selected
> 	 * 
> 	 * @return true if selected, false if not selected
> 	 */
> 	public boolean getDlgPrintRangePages() {
> 		return getPrintRangePages();
141,141d463
< 		return false;
143a474,490
> 	/**
> 	 * Returns if collate was selected
> 	 * 
> 	 * @return true if selected, false if not selected
> 	 */
> 	public boolean getDlgCollate() {
> 		return getCollate();
> 	}
> 
> 	/**
> 	 * Returns the pages from int value, check if (getDlgPrintRangesPages())
> 	 * first.
> 	 * 
> 	 * @return int of the pages from box
> 	 */
> 	public int getDlgPagesFrom() {
> 		return getPagesFrom();
144,146d473
< 	public boolean getDlgDiagramPrintRangeAll() {
< 		// TODO Not supported by the JPS dialog
< 		return false;
148a493,500
> 	/**
> 	 * Returns the pages from int value, check if (getDlgPrintRangesPages())
> 	 * first.
> 	 * 
> 	 * @return int of the pages to box
> 	 */
> 	public int getDlgPagesTo() {
> 		return getPagesTo();
149,150d492
< 	public PrintOptions getPrintOptions() {
< 		return options;
152a503,511
> 	/**
> 	 * Returns the number of copies the user wants to print. This is nCopies
> 	 * from PRINTDLG
> 	 * 
> 	 * @return int with the number of copies
> 	 */
> 	public int getDlgNumberOfCopies() {
> 		return getNumberOfCopies();
> 	}
