14,14d13
< import java.util.ArrayList;
17,18d15
< import java.util.ListIterator;
< import java.util.Map;
21,21d17
< import org.eclipse.draw2d.geometry.Dimension;
23,23d34
< import org.eclipse.gef.GraphicalEditPart;
24,24c35,35
< import org.eclipse.jface.util.Assert;
---
> import org.eclipse.jface.util.Assert;
25,25c36,36
< import org.eclipse.ui.IEditorPart;
---
> import org.eclipse.ui.IEditorPart;
26,26c37,37
< import org.eclipse.ui.IWorkbenchWindow;
---
> import org.eclipse.ui.IWorkbenchWindow;
27,27c38,38
< import org.eclipse.ui.PlatformUI;
---
> import org.eclipse.ui.PlatformUI;
28,29d38
< 
< import org.eclipse.gmf.runtime.common.core.util.ObjectAdapter;
34,34d27
< import org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.LayoutNode;
35,35c28,28
< import org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.LayoutService;
---
> import org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutService;
38a22,22
> import org.eclipse.gmf.runtime.diagram.core.util.ViewType;
39,39c23,23
< import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
---
> import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
46,46d34
< 
58a51,53
> 	 * @param context
> 	 *            The diagram element context
> 	 * @param kind
59,59d50
< 	 * @param context The diagram element context
60,60c54,54
< 	 * @param kind diagram kind, check {@link ViewType} for predefined values
---
> 	 *            diagram kind, check {@link ViewType} for predefined values
67a62,63
> 	public static Diagram createDiagram(EObject context, String kind,
> 			PreferencesHint preferencesHint) {
68,68d61
< 	public static Diagram createDiagram(EObject context, String kind, PreferencesHint preferencesHint) {
69a65,65
> 				: null;
69,69c64,64
< 		IAdaptable viewModel = (context != null) ? new EObjectAdapter(context) : null;
---
> 		IAdaptable viewModel = (context != null) ? new EObjectAdapter(context)
71,71c67,67
< 		return ViewService.getInstance().createDiagram(viewModel, viewType, preferencesHint);
---
> 		return ViewService.getInstance().createDiagram(viewModel, viewType,
71a68,68
> 				preferencesHint);
75,75c72,72
< 	 * Creates a node for a given eObject and with a given type and inserts it into a given container
---
> 	 * Creates a node for a given eObject and with a given type and inserts it
75a73,73
> 	 * into a given container
76a75,79
> 	 * @param container
> 	 *            The node view container
> 	 * @param eObject
> 	 *            The node view object context
> 	 * @param type
77,78d74
< 	 * @param container The node view container
< 	 * @param eObject The node view object context
79a81,81
> 	 *            values
79,79c80,80
< 	 * @param type The node view type, check {@link ViewType} for predefined values
---
> 	 *            The node view type, check {@link ViewType} for predefined
87,87c89,89
< 	public static Node createNode(View container, EObject eObject, String type, PreferencesHint preferencesHint) {
---
> 	public static Node createNode(View container, EObject eObject, String type,
87a90,90
> 			PreferencesHint preferencesHint) {
89,89c92,92
< 		IAdaptable viewModel = (eObject != null) ? new EObjectAdapter(eObject) : null;
---
> 		IAdaptable viewModel = (eObject != null) ? new EObjectAdapter(eObject)
89a93,93
> 				: null;
91a96,96
> 				viewType, ViewUtil.APPEND, preferencesHint);
91,91c95,95
< 		View view = ViewService.getInstance().createNode(viewModel, container, viewType, ViewUtil.APPEND, preferencesHint);
---
> 		View view = ViewService.getInstance().createNode(viewModel, container,
96,96c101,101
< 	 * Creates an edge for a given eObject and with a given type in the given diagram
---
> 	 * Creates an edge for a given eObject and with a given type in the given
96a102,102
> 	 * diagram
97a104,108
> 	 * @param diagram
> 	 *            The container diagram
> 	 * @param eObject
> 	 *            The edge view object context
> 	 * @param type
98,99d103
< 	 * @param diagram The container diagram 
< 	 * @param eObject The edge view object context
100a110,110
> 	 *            values
100,100c109,109
< 	 * @param type The edge view type, check {@link ViewType} for predefined values
---
> 	 *            The edge view type, check {@link ViewType} for predefined
108,108c118,118
< 	public static Edge createEdge(Diagram diagram, EObject eObject, String type, PreferencesHint preferencesHint) {
---
> 	public static Edge createEdge(Diagram diagram, EObject eObject,
108a119,119
> 			String type, PreferencesHint preferencesHint) {
110,110c121,121
< 		IAdaptable viewModel = (eObject != null) ? new EObjectAdapter(eObject) : null;
---
> 		IAdaptable viewModel = (eObject != null) ? new EObjectAdapter(eObject)
110a122,122
> 				: null;
112,112c124,124
< 		View view = ViewService.getInstance().createEdge(viewModel, diagram, viewType, ViewUtil.APPEND, preferencesHint);
---
> 		View view = ViewService.getInstance().createEdge(viewModel, diagram,
112a125,125
> 				viewType, ViewUtil.APPEND, preferencesHint);
117a131,131
> 	 * between a given source and a given target
117,117c130,130
< 	 * Creates an edge for a given eObject and with a given type and connects it between a given source and a given target
---
> 	 * Creates an edge for a given eObject and with a given type and connects it
118a133,139
> 	 * @param source
> 	 *            The edge's source view
> 	 * @param target
> 	 *            The edge's target view
> 	 * @param eObject
> 	 *            The edge view object context
> 	 * @param type
119,121d132
< 	 * @param source The edge's source view
< 	 * @param target The edge's target view
< 	 * @param eObject The edge view object context
122a141,141
> 	 *            values
122,122c140,140
< 	 * @param type The edge view type, check {@link ViewType} for predefined values
---
> 	 *            The edge view type, check {@link ViewType} for predefined
130a150,150
> 			String type, PreferencesHint preferencesHint) {
130,130c149,149
< 	public static Edge createEdge(View source, View target, EObject eObject, String type, PreferencesHint preferencesHint) {
---
> 	public static Edge createEdge(View source, View target, EObject eObject,
135,135c155,155
< 		Edge edge = createEdge(source.getDiagram(), eObject, type, preferencesHint);
---
> 		Edge edge = createEdge(source.getDiagram(), eObject, type,
135a156,156
> 				preferencesHint);
145a167,167
> 	 * @param view
146,146c168,168
< 	 * @param view The view to be destroyed
---
> 	 *            The view to be destroyed
153a176,177
> 	 * 
> 	 * @param diagram
154,154c178,178
< 	 * @param diagram The diagram to be opened
---
> 	 *            The diagram to be opened
163a188,188
> 	 * @param node
164,164c189,189
< 	 * @param node Node to get the layout node equivalent from
---
> 	 *            Node to get the layout node equivalent from
168a194,196
> 	 * @deprecated use
> 	 *             {@link org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutService#getLayoutNode(Node)}
> 	 *             Will be removed on December 16th / 2005
170a199,199
> 		return LayoutService.getInstance().getLayoutNode(node);
171,205d198
< 		if (null == node) {
< 			throw new NullPointerException("Argument 'node' is null"); //$NON-NLS-1$
< 		}
< 		
< 		Diagram diagram = node.getDiagram(); 
< 		DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance().createDiagramEditPart(diagram);
< 		Map registry = diagramEP.getViewer().getEditPartRegistry();
< 		GraphicalEditPart gep = (GraphicalEditPart)registry.get(node);
< 		Dimension size = gep.getFigure().getBounds().getSize();
< 		
< 		return new LayoutNode(node, size.width, size.height);
< 	}
< 	
< 	private static void checkValidNodes(List nodes) {
< 		if (null == nodes) {
< 			throw new NullPointerException("Argument 'nodes' is null"); //$NON-NLS-1$
< 		}
< 		if (nodes.size() == 0) {
< 			throw new IllegalArgumentException("Argument 'nodes' is empty"); //$NON-NLS-1$
< 		}
< 				
< 		ListIterator li = nodes.listIterator();
< 		EObject parent = null;
< 		while (li.hasNext()) {
< 			Object next = li.next();
< 			if (!(next instanceof Node))
< 				throw new IllegalArgumentException("Argument 'nodes' contains objects which aren't of type 'Node'"); //$NON-NLS-1$
< 			Node node = (Node)next;
< 			
< 			if (parent == null)
< 				parent =  ViewUtil.getContainerView(node);
< 			else
< 				if (ViewUtil.getContainerView(node) != parent)
< 					throw new IllegalArgumentException("Argument 'nodes' contains objects which have a different parent containment"); //$NON-NLS-1$
< 		} 
208a203,205
> 	 * @param diagramEP
> 	 *            the diagram edit part to use
> 	 * @param nodes
209,209d202
< 	 * @param diagramEP	the diagram edit part to use
210,210c206,206
< 	 * @param nodes List of <code>Node</code> objects 
---
> 	 *            List of <code>Node</code> objects
211a208,210
> 	 * @deprecated use
> 	 *             {@link org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutService#getLayoutNodes(DiagramEditPart, List)}
> 	 *             Will be removed on December 16th / 2005
213a213,213
> 		return LayoutService.getInstance().getLayoutNodes(diagramEP, nodes);
214,232d212
< 		checkValidNodes(nodes);
< 		
< 		if (diagramEP == null){
< 			Diagram diagram = ((Node)nodes.get(0)).getDiagram(); 
< 			diagramEP = OffscreenEditPartFactory.getInstance().createDiagramEditPart(diagram);
< 		}
< 		Map registry = diagramEP.getViewer().getEditPartRegistry();
< 		
< 		List layoutNodes = new ArrayList(nodes.size());
< 		ListIterator li = nodes.listIterator();
< 		while (li.hasNext()) {
< 			Node node = (Node)li.next();
< 			GraphicalEditPart gep = (GraphicalEditPart)registry.get(node);
< 			Dimension size = gep.getFigure().getBounds().getSize();
< 			
< 			layoutNodes.add(new LayoutNode(node,size.width, size.height));
< 		}
< 		
< 		return layoutNodes;
237a219,224
> 	 * @param view
> 	 *            View object that is the container whose children will be laid
> 	 *            out.
> 	 * @param hint
> 	 *            String representing a hint for what kind of layout will be
> 	 *            applied. Value can be one of
238,239d218
< 	 * @param view View object that is the container whose children will be laid out.
< 	 * @param hint String representing a hint for what kind of layout will be applied.  Value can be one of
240a226,226
> 	 *            or
240,240c225,225
< 	 * <code>org.eclipse.gmf.runtime.diagram.ui.services.layout.ILayoutNodesProvider.DEFAULT_LAYOUT</code> or 
---
> 	 *            <code>org.eclipse.gmf.runtime.diagram.ui.services.layout.ILayoutNodesProvider.DEFAULT_LAYOUT</code>
243a230,230
> 	 * @throws NullPointerException
244a232,232
> 	 * @throws NullPointerException
244,244c231,231
< 	 * @throws NullPointerException <code>View</code> is <code>null</code>
---
> 	 *             <code>View</code> is <code>null</code>
245a234,236
> 	 * @deprecated use
> 	 *             {@link org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutService#layout(View, String)}
> 	 *             Will be removed on December 16th / 2005
245,245c233,233
< 	 * @throws NullPointerException <code>hint</code> is <code>null</code>
---
> 	 *             <code>hint</code> is <code>null</code>
247a239,239
> 		LayoutService.getInstance().layout(view, hint);
248,263d238
< 		if (null == view) {
< 			throw new NullPointerException("Argument 'view' is null"); //$NON-NLS-1$
< 		}
< 		if (null == hint) {
< 			throw new NullPointerException("Argument 'hint' is null"); //$NON-NLS-1$
< 		}
< 				
< 		Diagram diagram = view.getDiagram();
< 		DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance().createDiagramEditPart(diagram);
< 		
< 		List hints = new ArrayList(2);
< 		hints.add(hint);
< 		hints.add(diagramEP);
< 		IAdaptable layoutHint = new ObjectAdapter(hints);
< 		final Runnable layoutRun =  LayoutService.getInstance().layoutNodes(getLayoutNodes(diagramEP,view.getChildren()), false, layoutHint);
< 		layoutRun.run();
268a245,245
> 	 * @param nodes
269a247,247
> 	 * @param hint
269,269c246,246
< 	 * @param nodes List of Node objects
---
> 	 *            List of Node objects
270,270c248,248
< 	 * @param hint String representing a hint for what kind of layout will be applied.  Value can be one of
---
> 	 *            String representing a hint for what kind of layout will be
270a249,249
> 	 *            applied. Value can be one of
274a254,254
> 	 * @throws NullPointerException
275,275c255,255
< 	 * @throws NullPointerException  <code>nodes</code> is <code>null</code>
---
> 	 *             <code>nodes</code> is <code>null</code>
275a256,258
> 	 * @throws IllegalArgumentException
> 	 *             nodes is an empty list
> 	 * @throws NullPointerException
276,276d255
< 	 * @throws IllegalArgumentException nodes is an empty list
277a260,260
> 	 * @throws IllegalArgumentException
277,277c259,259
< 	 * @throws NullPointerException  <code>hint</code> is <code>null</code>
---
> 	 *             <code>hint</code> is <code>null</code>
278a262,263
> 	 *             of type <code>Node</code>
> 	 * @throws IllegalArgumentException
278,278c261,261
< 	 * @throws IllegalArgumentException Argument <code>nodes</code> contains objects which aren't of type <code>Node</code>
---
> 	 *             Argument <code>nodes</code> contains objects which aren't
279,279c264,264
< 	 * @throws IllegalArgumentException Argument <code>nodes</code> contains objects which have a different parent containment
---
> 	 *             Argument <code>nodes</code> contains objects which have a
279a265,268
> 	 *             different parent containment
> 	 * @deprecated use
> 	 *             {@link org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutService#layout(List, String)}
> 	 *             Will be removed on December 16th / 2005
281a271,271
> 		LayoutService.getInstance().layoutNodes(nodes, true, hint);
282,285d270
< 		checkValidNodes(nodes);
< 		
< 		if (null == hint) {
< 			throw new NullPointerException("Argument 'hint' is null"); //$NON-NLS-1$
288,301d273
< 		Node nodeFirst = (Node)nodes.get(0);
< 		Diagram diagram = nodeFirst.getDiagram();
< 		DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance().createDiagramEditPart(diagram);
< 		
< 		List hints = new ArrayList(2);
< 		hints.add(hint);
< 		hints.add(diagramEP);
< 		IAdaptable layoutHint = new ObjectAdapter(hints);
< 		final Runnable layoutRun =  LayoutService.getInstance().layoutNodes(getLayoutNodes(diagramEP,nodes), true, layoutHint);
< 		layoutRun.run();
< 	}
< 
< 
< 	
303,303c275,275
< 	 * Rerturns an open editor for the given diagram in the given workbench window
---
> 	 * Rerturns an open editor for the given diagram in the given workbench
304a277,277
> 	 * considered
304,304c276,276
< 	 * if the window is null, the active window in the platform is considered
---
> 	 * window if the window is null, the active window in the platform is
305a279,281
> 	 * @param diagram
> 	 *            The given diagram
> 	 * @param window
306,306d278
< 	 * @param diagram The given diagram
307,307c282,282
< 	 * @param window The given window (or null to mean the active one)
---
> 	 *            The given window (or null to mean the active one)
310a286,286
> 			IWorkbenchWindow window) {
310,310c285,285
< 	public static IDiagramWorkbenchPart getOpenedDiagramEditor(Diagram diagram, IWorkbenchWindow window) {
---
> 	public static IDiagramWorkbenchPart getOpenedDiagramEditor(Diagram diagram,
