2,2c2,2
<  * Copyright (c) 2002, 2003 IBM Corporation and others.
---
>  * Copyright (c) 2002, 2006 IBM Corporation and others.
16a17,17
> import java.util.EventObject;
21a23,30
> import org.eclipse.core.commands.ExecutionException;
> import org.eclipse.core.commands.operations.IOperationHistory;
> import org.eclipse.core.commands.operations.IOperationHistoryListener;
> import org.eclipse.core.commands.operations.IUndoContext;
> import org.eclipse.core.commands.operations.IUndoableOperation;
> import org.eclipse.core.commands.operations.ObjectUndoContext;
> import org.eclipse.core.commands.operations.OperationHistoryEvent;
> import org.eclipse.core.commands.operations.OperationHistoryFactory;
27,27c40,40
< import org.eclipse.gmf.runtime.common.core.command.CommandManager;
---
> import org.eclipse.gmf.runtime.common.core.command.ICompositeCommand;
27a41,41
> import org.eclipse.gmf.runtime.common.core.util.Log;
28,28c42,42
< import org.eclipse.gmf.runtime.common.core.command.CommandManagerChangeEvent;
---
> import org.eclipse.gmf.runtime.common.core.util.Trace;
32,32d43
< import org.eclipse.gmf.runtime.common.core.command.ICommandManagerChangeListener;
33,33c44,44
< import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
---
> import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
33a45,48
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
> import org.eclipse.gmf.runtime.diagram.ui.internal.tools.ConnectionHandleTool;
35,35c32,32
< import org.eclipse.gmf.runtime.diagram.ui.commands.XtoolsProxyCommand;
---
> import org.eclipse.core.runtime.NullProgressMonitor;
36,36d32
< import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;
39a52,52
>  * GEF command stack that delegates to an {@link IOperationHistory}.
40a55,56
>  * @author Tauseef A, Israr
>  * @author ldamus
40,40c54,54
<  * @author sshaw
---
>  * @author sshaw
42,45d53
<  * <p>
<  * Editted by Tauseef A, Israr Feb 7, 2003 Included a protected get method for
<  * the edit domain.
<  * </p>
55a67,89
>     private IOperationHistory delegate;
> 
>     private IUndoContext undoContext;
> 
>     private final class HistoryEventObject
>         extends EventObject {
> 
>         private final OperationHistoryEvent event;
> 
>         private HistoryEventObject(OperationHistoryEvent event) {
>             super(event.getHistory());
>             this.event = event;
>         }
> 
>         /**
>          * Gets my operation history event.
>          * 
>          * @return my operation history event.
>          */
>         public OperationHistoryEvent getOperationHistoryEvent() {
>             return event;
>         }
>     }
56,56d66
< 	private CommandManager commandManager;
58a92,94
>      * Initializes me with my diagram edit domain and undo context.
>      * 
>      * @param editDomain
59,59d91
< 	 * constructor
60,60c95,95
< 	 * @param editDomain the editing domain assoicated with this stack
---
>      *            the editing domain assoicated with this stack
60a96,97
>      * @param undoContext
>      *            my undo context
77a116,119
> 
>         IOperationHistoryListener cmcl = new IOperationHistoryListener() {
> 
>             public void historyNotification(OperationHistoryEvent event) {
78,79d115
< 		ICommandManagerChangeListener cmcl = new ICommandManagerChangeListener() {
< 			public void commandManagerChanged(CommandManagerChangeEvent event) {
80,80c120,120
< 				if (csl != null)
---
>                 if (csl != null) {
81,81c121,121
< 					csl.commandStackChanged(event);
---
>                     csl.commandStackChanged(new HistoryEventObject(event));
81a122,122
>                 }
85a127,127
>         getOperationHistory().addOperationHistoryListener(cmcl);
86,86d126
< 		getCommandManager().addCommandManagerChangeListener(cmcl);
95,95c136,136
< 		return getCommandManager().canRedo();
---
>         return getOperationHistory().canRedo(getUndoContext());
104,104c145,145
< 		return getCommandManager().canUndo();
---
>         return getOperationHistory().canUndo(getUndoContext());
119a161,161
>      * @param command
120,120c162,162
< 	 * @param command The Command to execute.
---
>      *            The Command to execute.
129,129c110,110
< 
---
> 
131a173,174
>      * 
>      * @param command
132,132c175,175
< 	 * @param command the command to execute
---
>      *            the command to execute
139a183,184
>      * 
>      * @param command
140,140c185,185
< 	 * @param command the command to exectue
---
>      *            the command to exectue
150a197,205
>                 command.addContext(getUndoContext());
>                 getOperationHistory().execute(command, progressMonitor, null);
> 
>             } catch (ExecutionException e) {
>                 Trace.catching(DiagramUIPlugin.getInstance(),
>                     DiagramUIDebugOptions.EXCEPTIONS_CATCHING,
>                     getClass(), "execute", e); //$NON-NLS-1$
>                 Log.error(DiagramUIPlugin.getInstance(),
>                     DiagramUIStatusCodes.COMMAND_FAILURE, "execute", e); //$NON-NLS-1$
151,151d196
< 				getCommandManager().execute(command, progressMonitor);
155a210,221
>         } else {
>             try {
>                 command.addContext(getUndoContext());
>                 getOperationHistory().execute(command,
>                     new NullProgressMonitor(), null);
> 
>             } catch (ExecutionException e) {
>                 Trace.catching(DiagramUIPlugin.getInstance(),
>                     DiagramUIDebugOptions.EXCEPTIONS_CATCHING,
>                     getClass(), "execute", e); //$NON-NLS-1$
>                 Log.error(DiagramUIPlugin.getInstance(),
>                     DiagramUIStatusCodes.COMMAND_FAILURE, "execute", e); //$NON-NLS-1$
156a223,224
>         }
> 
157,158d222
< 		else
< 			getCommandManager().execute(command);
166a233,233
>                 .getDiagramEditorPart();
166,166c232,232
< 			IDiagramWorkbenchPart dgrmWP = ((DiagramEditDomain)ded).getDiagramEditorPart();
---
>             IDiagramWorkbenchPart dgrmWP = ((DiagramEditDomain) ded)
167a235,235
>                 IDiagramGraphicalViewer dgv = ((DiagramEditDomain) ded)
168,168c236,236
< 				IDiagramGraphicalViewer dgv = ((DiagramEditDomain)ded).getDiagramEditorPart().getDiagramGraphicalViewer();
---
>                     .getDiagramEditorPart().getDiagramGraphicalViewer();
177,177c245,245
< 	 * A method to convert a GEF Command into Xtools ICommand
---
>      * Converts a GEF {@link Command} into a GMF {@link ICommand}
180,180d247
< 	 * @return <code>ICommand</code>
182a252,252
> 
183a254,254
> 
184a256,256
>                 command.getLabel());
184,184c255,255
< 			CompositeCommand cc = new CompositeCommand(command.getLabel());
---
>             CompositeCommand composite = new CompositeCommand(
185a258,258
> 
187,187c260,260
< 				cc.compose(getICommand((Command) subCommands[i]));
---
>                 composite.compose(getICommand((Command) subCommands[i]));
188a262,262
>             return composite.reduce();
189,189d261
< 			return cc.unwrap();
190a264,264
> 
193a268,268
> 
197a273,277
>      * Removes redundancies from <code>command</code> by stripping out layers
>      * of command wrappers used to accomodate the use of GEF commands on an
>      * {@link IOperationHistory} and {@link ICommand}s on the GEF
>      * {@link CommandStack}.
>      * 
198,198d272
< 	 * A method to remove redundancies from an Xtools ICommand
199a279,281
>      *            the command to be processed
>      * @return a command representing the simplified form of the input command.
>      *         May be a new command.
200,200d278
< 	 * @return <code>ICommand</code>
203a285,308
>         ICommand result = command;
> 
>         if (command instanceof ICompositeCommand) {
>             // process composite command
>             List processedCommands = new ArrayList();
> 
>             ICompositeCommand composite = (ICompositeCommand) command;
> 
>             if (!composite.isEmpty()) {
> 
>                 for (Iterator i = composite.iterator(); i.hasNext();) {
>                     IUndoableOperation nextOperation = (IUndoableOperation) i
>                         .next();
> 
>                     // remove the next child from the composite
>                     i.remove();
> 
>                     // convert any GEF commands to GMF commands
>                     if (nextOperation instanceof ICommand) {
>                         ICommand nextCommand = (ICommand) nextOperation;
>                         processedCommands.add(getICommand(nextCommand));
> 
>                     } else {
>                         processedCommands.add(nextOperation);
204,228d284
< //		if (command instanceof CompositeModelActionCommand) {
< //			CompositeModelActionCommand cc = new CompositeModelActionCommand(
< //				command.getLabel());
< //			List subCommands = ((CompositeCommand) command).getCommands();
< //			for (int i = 0; i < subCommands.size(); i++) {
< //				cc.compose(getICommand((ICommand) subCommands.get(i)));
< //			}
< //			return cc;
< //		}
< 
< 		if (command instanceof CompositeModelCommand) {
< 			CompositeModelCommand cc = new CompositeModelCommand(command
< 				.getLabel());
< 			List subCommands = ((CompositeCommand) command).getCommands();
< 			for (int i = 0; i < subCommands.size(); i++) {
< 				cc.compose(getICommand((ICommand) subCommands.get(i)));
< 			}
< 			return cc.unwrap();
< 		}
< 
< 		if (command instanceof CompositeCommand) {
< 			CompositeCommand cc = new CompositeCommand(command.getLabel());
< 			List subCommands = ((CompositeCommand) command).getCommands();
< 			for (int i = 0; i < subCommands.size(); i++) {
< 				cc.compose(getICommand((ICommand) subCommands.get(i)));
230,230d309
< 			return cc.unwrap();
231a311,320
> 
>                 // add all the children back
>                 for (Iterator i = processedCommands.iterator(); i.hasNext();) {
>                     composite.add((IUndoableOperation) i.next());
>                 }
> 
>                 // reduce to the simplest equivalent form
>                 result = composite.reduce();
>             }
> 
232,233d310
< 		if (command instanceof XtoolsProxyCommand) {
< 			return getICommand(((XtoolsProxyCommand) command).getCommand());
234a322,322
>         	// process GEF command proxy
237a248,248
>      *            the GEF command
238,238c249,249
< 		return command;
---
>      * @return the GMF command
241a330,330
>      * Flushes my undo context from my delegate operation history.
242,243d329
< 	 * Clears both the undo and redo stacks, then sends a notification to any
< 	 * object listening to the CommandStack.
245a333,342
>         getOperationHistory().dispose(getUndoContext(), true, true, false);
>         super.flush();
>     }
>     
>     /**
>      * Flushes my operation history delegate.
>      */
>     public void dispose() {
>         super.dispose();
>         flush();
246,246d332
< 		getCommandManager().clear();
263a360,360
>         if (getOperationHistory().canRedo(getUndoContext())) {
264,264d359
< 		if (getCommandManager().canRedo()) {
268a365,367
>             IUndoableOperation redo = getOperationHistory().getRedoOperation(
>                 getUndoContext());
>             emptyCmd.setLabel(redo.getLabel());
269,269d364
< 			emptyCmd.setLabel(getCommandManager().getRedoLabel());
281a380,380
>         if (getOperationHistory().canUndo(getUndoContext())) {
282,282d379
< 		if (getCommandManager().canUndo()) {
286a385,387
>             IUndoableOperation undo = getOperationHistory().getUndoOperation(
>                 getUndoContext());
>             emptyCmd.setLabel(undo.getLabel());
287,287d384
< 			emptyCmd.setLabel(getCommandManager().getUndoLabel());
298a399,410
> 
>         try {
>             getOperationHistory().redo(getUndoContext(),
>                 new NullProgressMonitor(), null);
> 
>         } catch (ExecutionException e) {
>             Trace.catching(DiagramUIPlugin.getInstance(),
>                 DiagramUIDebugOptions.EXCEPTIONS_CATCHING,
>                 ConnectionHandleTool.class, "redo", e); //$NON-NLS-1$
>             Log.error(DiagramUIPlugin.getInstance(),
>                 DiagramUIStatusCodes.COMMAND_FAILURE, "redo", e); //$NON-NLS-1$
>         }
299,299d398
< 		getCommandManager().redo();
309a421,421
> 
310a423,423
>             IOperationHistoryListener historyListener = (IOperationHistoryListener) stackToManager
311,311d422
< 			ICommandManagerChangeListener cmcl = (ICommandManagerChangeListener) stackToManager
312a425,429
> 
>             if (historyListener != null) {
>                 getOperationHistory().removeOperationHistoryListener(
>                     historyListener);
>             }
313,314d424
< 			if (cmcl != null)
< 				getCommandManager().removeCommandManagerChangeListener(cmcl);
324a440,451
> 
>         try {
>             getOperationHistory().undo(getUndoContext(),
>                 new NullProgressMonitor(), null);
> 
>         } catch (ExecutionException e) {
>             Trace.catching(DiagramUIPlugin.getInstance(),
>                 DiagramUIDebugOptions.EXCEPTIONS_CATCHING,
>                 ConnectionHandleTool.class, "undo", e); //$NON-NLS-1$
>             Log.error(DiagramUIPlugin.getInstance(),
>                 DiagramUIStatusCodes.COMMAND_FAILURE, "undo", e); //$NON-NLS-1$
>         }
325,325d439
< 		getCommandManager().undo();
337a464,464
>      * Gets my operation history delegate.
338,338d463
< 	 * Returns the commandManager.
339a326,326
>         return result;
339a466,466
>      * @return my operation history delegate
340,340d325
< 	 * @return CommandManager
341a468,473
>     protected IOperationHistory getOperationHistory() {
> 
>         if (delegate == null) {
>             delegate = OperationHistoryFactory.getOperationHistory();
>         }
>         return delegate;
342,345d467
< 	protected CommandManager getCommandManager() {
< 		if (commandManager == null)
< 			return CommandManager.getDefault();
< 		return commandManager;
348a477,477
>      * Sets my operation history delegate.
349,349d476
< 	 * Sets the commandManager.
350a479,480
>      * @param operationHistory
>      *            my operation history delegate
351,352d478
< 	 * @param commandManager
< 	 *            The commandManager to set
353a482,483
>     public void setOperationHistory(IOperationHistory operationHistory) {
>         this.delegate = operationHistory;
354,355d481
< 	protected void setCommandManager(CommandManager commandManager) {
< 		this.commandManager = commandManager;
360a489,489
>      * @param c
361,361c490,490
< 	 * @param c The command
---
>      *            The command
372,372d500
< 		} 
373,373c501,501
< 		else if ( c instanceof EtoolsProxyCommand ) {
---
>         } else if (c instanceof EtoolsProxyCommand) {
380a509,510
>      * 
>      * @param cmd
381,381c511,511
< 	 * @param cmd command to use
---
>      *            command to use
387a518,519
> 
>     
388,395d517
< 	/**
< 	 * gets the return the values for the supplied command.
< 	 * @param cmd command to use
< 	 * @return a collection of return values
< 	 */
< 	public static Collection getReturnValues( XtoolsProxyCommand cmd ) {
< 		return getReturnValues( cmd.getCommand() );
< 	}
406,406d188
<     
407,407c189,189
< 
---
> 
409a532,533
>      * 
>      * @param cmd
410,410c534,534
< 	 * @param cmd command to use
---
>      *            command to use
413a538,538
>         
414,414c539,539
< 		if ( cmd instanceof CompositeCommand ) {
---
>         if (cmd instanceof ICompositeCommand) {
415,415c540,540
< 			CompositeCommand cc = (CompositeCommand)cmd;
---
>             ICompositeCommand cc = (ICompositeCommand) cmd;
417,417c542,542
< 			for (Iterator i = cc.getCommands().iterator(); i.hasNext();)
---
>             for (Iterator i = cc.iterator(); i.hasNext();)
419a545,545
>             
420,427d544
< 		}
< 		else if ( cmd instanceof XtoolsProxyCommand ) {	//
< 			// Need to recurse into the proxy command(s) since they
< 			// will not have set the CommandProxy result
< 			// This Could be moved into CommandProxy but
< 			// #getCommandResult() can no longer be final.
< 			return getReturnValues((XtoolsProxyCommand)cmd);
< 		}
428,428c546,546
<         else if ( cmd instanceof CommandProxy ) { //
---
>         } else if ( cmd instanceof CommandProxy ) { //
434,434c552,552
<         }
---
>         
435,435c553,553
< 		else {
---
>         } else {
437,437c555,555
< 			Object o = r != null ? r.getReturnValue() : null;
---
>             Object o = r != null ? r.getReturnValue()
437a556,557
>                 : null;
>             
439a560,560
>                 
440,440d559
< 			}
441,441c561,561
< 			else if (o != null) {
---
>             } else if (o != null) {
444a565,565
>         
445a567,575
>     }
> 
>     /**
>      * Gets my undo context. I add my context to all commands executed through
>      * me.
>      * 
>      * @return my undo context
>      */
>     public IUndoContext getUndoContext() {
446a577,590
>         if (undoContext == null) {
>             undoContext = new ObjectUndoContext(this);
>         }
>         return undoContext;
>     }
>     
>     /**
>      * Sets my undo context.
>      * 
>      * @param undoContext
>      *            my undo context
>      */
>     public void setUndoContext(IUndoContext undoContext) {
>         this.undoContext = undoContext;
