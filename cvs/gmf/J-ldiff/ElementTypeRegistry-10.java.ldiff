26a27,28
> import org.eclipse.core.runtime.IExtension;
> import org.eclipse.core.runtime.IExtensionPoint;
27a30,32
> import org.eclipse.core.runtime.dynamichelpers.ExtensionTracker;
> import org.eclipse.core.runtime.dynamichelpers.IExtensionChangeHandler;
> import org.eclipse.core.runtime.dynamichelpers.IExtensionTracker;
101a107,109
> 	private ExtensionTracker extensionTracker;
> 	private IExtensionChangeHandler extensionListener;
> 
114a123,124
> 
> 		startExtensionTracking();
117a128,154
> 	private void startExtensionTracking() {
> 		extensionListener = new IExtensionChangeHandler() {
> 			public void addExtension(IExtensionTracker tracker, IExtension extension) {
> 				load(extension.getConfigurationElements());
> 			}
> 
> 			public void removeExtension(IExtension extension, Object[] objects) {
> 				// FIXME implement extension removal
> 			}
> 		};
> 		final IExtensionPoint pt = Platform.getExtensionRegistry().getExtensionPoint(EMFTypePlugin.getPluginId(), ELEMENT_TYPES_EXT_P_NAME);
> 		extensionTracker = new ExtensionTracker();
> 		extensionTracker.registerHandler(extensionListener, ExtensionTracker.createExtensionPointFilter(pt));
> 	}
> 
> 	private void stopExtensionTracking() {
> 		if (extensionTracker != null) {
> 			extensionTracker.unregisterHandler(extensionListener);
> 			extensionTracker = null;
> 			extensionListener = null;
> 		}
> 	}
> 
> 	public void shutdown() {
> 		stopExtensionTracking();
> 	}
> 
895,895c932,932
< 	private void load(IConfigurationElement[] configs) {
---
> 	private synchronized void load(IConfigurationElement[] configs) {
