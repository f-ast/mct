13a14,14
> import java.util.HashSet;
14a16,16
> import java.util.Set;
21a24,34
> import org.eclipse.jface.viewers.IColorProvider;
> import org.eclipse.jface.viewers.ILabelProviderListener;
> import org.eclipse.jface.viewers.ISelectionChangedListener;
> import org.eclipse.jface.viewers.IStructuredContentProvider;
> import org.eclipse.jface.viewers.IStructuredSelection;
> import org.eclipse.jface.viewers.ITableLabelProvider;
> import org.eclipse.jface.viewers.SelectionChangedEvent;
> import org.eclipse.jface.viewers.StructuredSelection;
> import org.eclipse.jface.viewers.TableViewer;
> import org.eclipse.jface.viewers.Viewer;
> import org.eclipse.jface.viewers.ViewerComparator;
22a36,38
> import org.eclipse.swt.custom.ScrolledComposite;
> import org.eclipse.swt.events.ControlAdapter;
> import org.eclipse.swt.events.ControlEvent;
24a41,42
> import org.eclipse.swt.graphics.Color;
> import org.eclipse.swt.graphics.Image;
30a50,50
> import org.eclipse.swt.widgets.TableColumn;
31,31c48,48
< import org.eclipse.swt.widgets.List;
---
> import org.eclipse.swt.widgets.Display;
48a68,68
> 	private ScrolledComposite referencedPathVariablesScroll;
49a70,71
> 	private StringsContentProvider referencedPathVariablesContent;
> 	private ScrolledComposite pathVariablesScroll;
49,49c69,69
< 	private List referencedPathVariables;
---
> 	private TableViewer referencedPathVariables;
50a73,73
> 	private StringsContentProvider pathVariablesContent;
50,50c72,72
< 	private List pathVariables;
---
> 	private TableViewer pathVariables;
51a75,75
> 	private Button remove;
97a122,125
> 		pathVariablesScroll = new ScrolledComposite(
> 				pathVariablesComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
> 		pathVariablesScroll.setExpandHorizontal(true);
> 		pathVariablesScroll.setExpandVertical(true);
98,98d121
< 		pathVariables = new List(pathVariablesComposite, SWT.MULTI | SWT.BORDER);
102a130,145
> 		pathVariablesScroll.setLayoutData(gridData);
> 		pathVariables = new TableViewer(pathVariablesScroll, SWT.MULTI);
> 		pathVariablesScroll.setContent(pathVariables.getTable());
> 		
> 		TableColumn column = new TableColumn(pathVariables.getTable(), SWT.LEFT);
> 		column.setMoveable(false);
> 		column.setResizable(false);
> 		pathVariables.getTable().addControlListener(new ControlAdapter() {
> 			public void controlResized(ControlEvent e) {
> 				pathVariables.getTable().getColumn(0).setWidth(
> 						pathVariables.getTable().getClientArea().width);
> 			}});
> 		pathVariablesContent = new StringsContentProvider();
> 		pathVariables.setContentProvider(pathVariablesContent);
> 		pathVariables.setLabelProvider(new StringsLabelProvider());
> 		pathVariables.setComparator(new StringsViewerComparator());
103,103d129
< 		pathVariables.setLayoutData(gridData);
120,120c162,162
< 		Button remove = new Button(buttonComposite,SWT.CENTER);
---
> 		remove = new Button(buttonComposite,SWT.CENTER);
158a201,204
> 		referencedPathVariablesScroll = new ScrolledComposite(
> 				referencedPathVariablesComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
> 		referencedPathVariablesScroll.setExpandHorizontal(true);
> 		referencedPathVariablesScroll.setExpandVertical(true);
159,159d200
< 		referencedPathVariables = new List(referencedPathVariablesComposite,SWT.MULTI | SWT.BORDER);
163a209,236
> 		referencedPathVariablesScroll.setLayoutData(gridData);
> 		referencedPathVariables = new TableViewer(referencedPathVariablesScroll, SWT.MULTI);
> 		referencedPathVariablesScroll.setContent(referencedPathVariables.getTable());
> 		
> 		column = new TableColumn(referencedPathVariables.getTable(), SWT.LEFT);
> 		column.setMoveable(false);
> 		column.setResizable(false);
> 		referencedPathVariables.getTable().addControlListener(new ControlAdapter() {
> 			public void controlResized(ControlEvent e) {
> 				referencedPathVariables.getTable().getColumn(0).setWidth(
> 						referencedPathVariables.getTable().getClientArea().width);
> 			}});
> 		referencedPathVariablesContent = new StringsContentProvider();
> 		referencedPathVariables.setContentProvider(referencedPathVariablesContent);
> 		referencedPathVariables.setLabelProvider(new StringsLabelProvider(true));
> 		referencedPathVariables.setComparator(new StringsViewerComparator());
> 		
> 		// adjust the scroll bars whenever the preference page is resized
> 		composite.addControlListener(new ControlAdapter() {
> 			public void controlResized(ControlEvent e) {
> 				adjustScrollpanes();
> 			}});
> 		
> 		pathVariables.addSelectionChangedListener(new ISelectionChangedListener() {
> 			public void selectionChanged(SelectionChangedEvent event) {
> 				if (!event.getSelection().isEmpty()) { // prevent oscillation
> 					referencedPathVariables.setSelection(new StructuredSelection());
> 					remove.setEnabled(true);
164,164d208
< 		referencedPathVariables.setLayoutData(gridData);
165a238,238
> 					if (!validateAdditions((IStructuredSelection) event.getSelection(), true)) {
166,171d237
< 		pathVariables.addSelectionListener(new SelectionListener() {
< 			public void widgetSelected(SelectionEvent e) {
< 				referencedPathVariables.deselectAll();
< 				
< 				if (!validateSelections(pathVariables.getSelection())) {
< 					setMessage(EMFUIMessages.PathmapsPreferencePage_incompatiblePathVariableErrorMessage,ERROR);
178,180d244
< 
< 			public void widgetDefaultSelected(SelectionEvent e) {
< 				// No action necessary
183a248,250
> 		referencedPathVariables.addSelectionChangedListener(new ISelectionChangedListener() {
> 			public void selectionChanged(SelectionChangedEvent event) {
> 				if (!event.getSelection().isEmpty()) { // prevent oscillation
184,186d247
< 		referencedPathVariables.addSelectionListener(new SelectionListener() {
< 			public void widgetSelected(SelectionEvent e) {
< 				setMessage(null);
187a252,252
> 					pathVariables.setSelection(new StructuredSelection());
188,189d251
< 				pathVariables.deselectAll();
< 			}
190a254,260
> 					if (!validateRemovals((IStructuredSelection) event.getSelection(), true)) {
> 						remove.setEnabled(false);
> 					} else {
> 						setMessage(null);
> 						remove.setEnabled(true);
> 					}
> 				}
191,192d253
< 			public void widgetDefaultSelected(SelectionEvent e) {
< 				// No action necessary
197a266,267
> 				IStructuredSelection selection =
> 					(IStructuredSelection) pathVariables.getSelection();
198,198d265
< 				String[] selections = pathVariables.getSelection();
199a269,273
> 				for (Iterator iter = selection.iterator(); iter.hasNext();) {
> 					String name = (String) iter.next();
> 					pathVariablesContent.remove(name);
> 					referencedPathVariablesContent.add(name);
> 					adjustScrollpanes();
200,202d268
< 				for (int i=0; i<selections.length; i++) {
< 					referencedPathVariables.add(selections[i]);
< 					pathVariables.remove(selections[i]);
216a288,288
> 				Object[] items = pathVariablesContent.getElements(null);
217,217d287
< 				String[] items = pathVariables.getItems();
218a290,293
> 				for (int i=items.length - 1; i >= 0; i--) {
> 					if (validateAdditions(new StructuredSelection(items[i]), false)) {
> 						String name = (String) items[i];
> 						pathVariablesContent.remove(name);
219,220d289
< 				for (int i=0; i<items.length; i++) {
< 					if (validateSelections(new String[]{items[i]})) {
221a295,295
> 						adjustScrollpanes();
221,221c294,294
< 						referencedPathVariables.add(items[i]);
---
> 						referencedPathVariablesContent.add(name);
222,222d294
< 						pathVariables.remove(items[i]);
229a303,304
> 				IStructuredSelection selection =
> 					(IStructuredSelection) referencedPathVariables.getSelection();
230,230d302
< 				String[] selections = referencedPathVariables.getSelection();
231a306,310
> 				for (Iterator iter = selection.iterator(); iter.hasNext();) {
> 					String name = (String) iter.next();
> 					referencedPathVariablesContent.remove(name);
> 					pathVariablesContent.add(name);
> 					adjustScrollpanes();
232,234d305
< 				for (int i=0; i<selections.length; i++) {
< 					pathVariables.add(selections[i]);
< 					referencedPathVariables.remove(selections[i]);
248a325,325
> 				Object[] items = referencedPathVariablesContent.getElements(null);
249,249d324
< 				String[] items = referencedPathVariables.getItems();
250a327,329
> 				for (int i=items.length - 1; i >= 0; i--) {
> 					if (validateRemovals(new StructuredSelection(items[i]), false)) {
> 						String name = (String) items[i];
251,252d326
< 				for (int i=0; i<items.length; i++) {
< 					pathVariables.add(items[i]);
253a331,333
> 						pathVariablesContent.add(name);
> 						adjustScrollpanes();
> 					}
253,253c330,330
< 					referencedPathVariables.remove(items[i]);
---
> 						referencedPathVariablesContent.remove(name);
264,264c344,344
< 				referencedPathVariables.getShell().getDisplay().asyncExec(new Runnable() {
---
> 				referencedPathVariables.getTable().getDisplay().asyncExec(new Runnable() {
281a362,396
> 	private void adjustScrollpanes() {
> 		pathVariablesScroll.setMinSize(
> 				pathVariables.getTable().computeSize(SWT.DEFAULT, SWT.DEFAULT));
> 		pathVariablesScroll.layout();
> 		referencedPathVariablesScroll.setMinSize(
> 				referencedPathVariables.getTable().computeSize(SWT.DEFAULT, SWT.DEFAULT));
> 		referencedPathVariablesScroll.layout();
> 	}
> 	
> 	private boolean validateAdditions(IStructuredSelection selection, boolean showError) {
> 		if (selection.isEmpty())
> 			return false;
> 		
> 		for (Iterator iter = selection.iterator(); iter.hasNext();) {
> 			String name = (String) iter.next();
> 			
> 			if (!PathmapManager.isCompatiblePathVariable(name)) {
> 				if (showError) {
> 					setMessage(EMFUIMessages.PathmapsPreferencePage_incompatiblePathVariableErrorMessage,ERROR);
> 				}
> 				return false;
> 			}
> 			
> 			if (PathmapManager.isRegisteredPathVariable(name)) {
> 				if (showError) {
> 					setMessage(EMFUIMessages.PathmapsPreferencePage_registeredPathVariableErrorMessage,ERROR);
> 				}
> 				return false;
> 			}
> 		}
> 		return true;
> 	}
> 
> 	private boolean validateRemovals(IStructuredSelection selection, boolean showError) {
> 		if (selection.isEmpty())
282,283d361
< 	private boolean validateSelections(String[] selections) {
< 		if (selections.length == 0)
285a399,400
> 		for (Iterator iter = selection.iterator(); iter.hasNext();) {
> 			String name = (String) iter.next();
286,287d398
< 		for (int i=0; i<selections.length; i++) {
< 			String selection = selections[i];
288a402,405
> 			if (PathmapManager.isRegisteredPathVariable(name)) {
> 				if (showError) {
> 					setMessage(EMFUIMessages.PathmapsPreferencePage_registeredPathVariableErrorMessage,ERROR);
> 				}
289,289d401
< 			if (!PathmapManager.isCompatiblePathVariable(selection)) {
298a415,419
> 		remove.setEnabled(true);
> 		
> 		referencedPathVariables.setInput(new HashSet(PathmapManager.getAllPathVariables()));
> 		
> 		Set currentVariables = PathmapManager.getPathVariableReferences();
299,300d414
< 		referencedPathVariables.removeAll();
< 		pathVariables.removeAll();
301a421,421
> 		Set available = new HashSet();
303a424,424
> 			if (!currentVariables.contains(pathVariableNames[i])) {
304,304c425,425
< 			pathVariables.add(pathVariableNames[i]);
---
> 				available.add(pathVariableNames[i]);
306,310d426
< 		
< 		for (Iterator i = PathmapManager.getPathVariableReferences().iterator(); i.hasNext();) {
< 			String pathVariable = (String)i.next();
< 			referencedPathVariables.add(pathVariable);
< 			pathVariables.remove(pathVariable);
311a428,429
> 		
> 		pathVariables.setInput(available);
323a442,442
> 		Object[] nonReferencedPathVariables = pathVariablesContent.getElements(null);
324,324d441
< 		String[] nonReferencedPathVariables = pathVariables.getItems();
325a444,444
> 			String variableName = (String) nonReferencedPathVariables[i];
326,326c445,445
< 			PathmapManager.removePathVariableReference(nonReferencedPathVariables[i]);
---
> 			PathmapManager.removePathVariableReference(variableName);
328a448,449
> 		Set currentVariables = PathmapManager.getAllPathVariables();
> 		Object[] variablesToReference = referencedPathVariablesContent.getElements(null);
329,329d447
< 		String[] variablesToReference = referencedPathVariables.getItems();
330a451,453
> 			String variableName = (String) variablesToReference[i];
> 			
> 			if (!currentVariables.contains(variableName)) {
331,331c454,454
< 			PathmapManager.addPathVariableReference(variablesToReference[i]);
---
> 				PathmapManager.addPathVariableReference(variableName);
331a455,455
> 			}
346a471,566
> 	
> 	private static class StringsContentProvider implements IStructuredContentProvider {
> 		private Set strings;
> 		private TableViewer table;
> 		
> 		StringsContentProvider() {
> 			strings = new HashSet();
> 		}
> 		
> 		void add(String string) {
> 			if (!strings.contains(string)) {
> 				strings.add(string);
> 				table.add(string);
> 			}
> 		}
> 		
> 		void remove(String string) {
> 			if (strings.contains(string)) {
> 				strings.remove(string);
> 				table.remove(string);
> 			}
> 		}
> 		
> 		public Object[] getElements(Object inputElement) {
> 			return strings.toArray();
> 		}
> 
> 		public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
> 			strings = (Set) newInput;
> 			table = (TableViewer) viewer;
> 		}
> 
> 		public void dispose() {
> 			// nothing to clean up
> 		}
> 	}
> 	
> 	private static class StringsLabelProvider implements ITableLabelProvider, IColorProvider {
> 		private final boolean isReferencedPathVariables;
> 		
> 		StringsLabelProvider() {
> 			this(false);
> 		}
> 		
> 		StringsLabelProvider(boolean isReferencedPathVariables) {
> 			this.isReferencedPathVariables = isReferencedPathVariables;
> 		}
> 		
> 		public Image getColumnImage(Object element, int columnIndex) {
> 			return null;
> 		}
> 
> 		public String getColumnText(Object element, int columnIndex) {
> 			return (columnIndex == 0) ? (String) element : null;
> 		}
> 
> 		public void dispose() {
> 			// nothing to dispose (the colors are all shared system colors)
> 		}
> 
> 		public boolean isLabelProperty(Object element, String property) {
> 			return false;
> 		}
> 
> 		public void addListener(ILabelProviderListener listener) {
> 			// not using listeners
> 		}
> 
> 		public void removeListener(ILabelProviderListener listener) {
> 			// not using listeners
> 		}
> 
> 		public Color getBackground(Object element) {
> 			if (isReferencedPathVariables && PathmapManager.isRegisteredPathVariable((String) element)) {
> 				return Display.getDefault().getSystemColor(
> 						SWT.COLOR_TITLE_INACTIVE_BACKGROUND);
> 			}
> 			
> 			return null;
> 		}
> 
> 		public Color getForeground(Object element) {
> 			return null;
> 		}
> 	}
> 	
> 	private static class StringsViewerComparator extends ViewerComparator {
> 		StringsViewerComparator() {
> 			super();
> 		}
> 		
> 		public int category(Object element) {
> 			// sort statically-registered variables to the end of the list
> 			return PathmapManager.isRegisteredPathVariable((String) element)? 1 : 0;
> 		}
> 	}
