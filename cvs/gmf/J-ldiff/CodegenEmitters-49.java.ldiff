13a14,14
> import java.net.MalformedURLException;
14a16,16
> import java.util.ArrayList;
16a19,19
> import org.eclipse.core.runtime.IStatus;
17a21,21
> import org.eclipse.core.runtime.Status;
23,27d27
< import org.eclipse.gmf.codegen.templates.expressions.AbstractExpressionGenerator;
< import org.eclipse.gmf.codegen.templates.expressions.OCLExpressionFactoryGenerator;
< import org.eclipse.gmf.codegen.templates.expressions.RegexpExpressionFactoryGenerator;
< import org.eclipse.gmf.codegen.templates.lite.providers.MetricProviderGenerator;
< import org.eclipse.gmf.codegen.templates.lite.providers.ValidationProviderGenerator;
29,33d28
< import org.eclipse.gmf.internal.codegen.dispatch.CachingEmitterFactory;
< import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactory;
< import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactoryImpl;
< import org.eclipse.gmf.internal.codegen.dispatch.NoSuchTemplateException;
< import org.eclipse.gmf.internal.codegen.dispatch.StaticTemplateRegistry;
37,37c26,26
< import org.eclipse.gmf.internal.common.codegen.JETEmitterAdapter;
---
> import org.eclipse.emf.common.CommonPlugin;
47,47c41,41
<  * Provides JET templates.
---
>  * Provides Xpand templates.
55,56d48
< 	private final EmitterFactory myFactory;
< 
59,60d50
< 	private static StaticTemplateRegistry myRegistry;
< 
62a53,66
> 		ArrayList<URL> templatesURI = new ArrayList<URL>(3);
> 		templatesURI.add(getTemplatesBundle().getEntry("/templates/"));	//$NON-NLS-1$
> 		templatesURI.add(getCodegenTemplatesBundle().getEntry("/templates/"));	//$NON-NLS-1$
> 		URL dynamicTemplatesPath = getDynamicTemplatesURL(templateDirectory);
> 		if (dynamicTemplatesPath != null) {
> 			templatesURI.add(dynamicTemplatesPath);
> 		}
> 		myResourceManager = new BundleResourceManager(templatesURI.toArray(new URL[templatesURI.size()]));
> 
> 		myTemplatePath = new String[templatesURI.size()];
> 		for (int i = 0; i < templatesURI.size(); i++) {
> 			myTemplatePath[i] = templatesURI.get(i).toString();
> 		}
> 	}
63,71d52
< 		myRegistry = initRegistry();
< 		String[] variables = new String[] { "org.eclipse.emf.codegen", "org.eclipse.emf.codegen.ecore", "org.eclipse.emf.common", "org.eclipse.emf.ecore", "org.eclipse.gmf.common",
< 				"org.eclipse.gmf.codegen" };
< 		URL liteTemplatesPath = getTemplatesBundle().getEntry("/templates/");
< 		URL runtimeTemplatesPath = Platform.getBundle(CODEGEN_PLUGIN_ID).getEntry("/templates/");
< 		myTemplatePath = new String[] {
< 				usePrecompiled ? null : templateDirectory != null && templateDirectory.indexOf(":") == -1 ? URI.createPlatformResourceURI(templateDirectory, true).toString() : templateDirectory,
< 				liteTemplatesPath.toString(), runtimeTemplatesPath.toString() };
< 		myFactory = new CachingEmitterFactory(new EmitterFactoryImpl(getTemplatePath(), myRegistry, usePrecompiled, variables));
72a68,77
> 	private static URL getDynamicTemplatesURL(String templateDirectory) {
> 		if (templateDirectory != null) {
> 			URI templatesURI = templateDirectory.indexOf(":") == -1 ? URI.createPlatformResourceURI(templateDirectory, true) : URI.createURI(templateDirectory); //$NON-NLS-1$
> 			try {
> 				return new URL(CommonPlugin.resolve(templatesURI).toString());
> 			} catch (MalformedURLException e) {
> 				Activator.getInstance().getLog().log(new Status(IStatus.ERROR, Activator.getPluginID(), 0, "Incorrect dynamic templates location", e)); //$NON-NLS-1$
> 			}
> 		}
> 		return null;
73,73d67
< 		myResourceManager = new BundleResourceManager(liteTemplatesPath, runtimeTemplatesPath);
89,100d92
< 	private static StaticTemplateRegistry initRegistry() {
< 		final StaticTemplateRegistry tr = new StaticTemplateRegistry(CodegenEmitters.class.getClassLoader());
< 
< 		put(tr, "/providers/ValidationProvider.javajet", ValidationProviderGenerator.class);
< 		put(tr, "/providers/MetricProvider.javajet", MetricProviderGenerator.class); //$NON-NLS-1$
< 		put(tr, "/expressions/AbstractExpression.javajet", AbstractExpressionGenerator.class);
< 		put(tr, "/expressions/OCLExpressionFactory.javajet", OCLExpressionFactoryGenerator.class);
< 		put(tr, "/expressions/RegexpExpressionFactory.javajet", RegexpExpressionFactoryGenerator.class);
< 
< 		return tr;
< 	}
< 
104a97,100
> 	public TextEmitter getCreateNodeCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::commands::CreateNodeCommand::qualifiedClassName");	//$NON-NLS-1$
> 	}
> 
108a105,108
> 	public TextEmitter getAddNodeCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::commands::AddNodeCommand::qualifiedClassName");	//$NON-NLS-1$
> 	}
> 
112a113,116
> 	public TextEmitter getCloneNodeCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::commands::CloneNodeCommand::qualifiedClassName");	//$NON-NLS-1$
> 	}
> 
116a121,124
> 	public TextEmitter getCreateLinkStartCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::commands::CreateLinkStartCommand::qualifiedClassName");	//$NON-NLS-1$
> 	}
> 
120a129,132
> 	public TextEmitter getCreateLinkCompleteCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::commands::CreateLinkCompleteCommand::qualifiedClassName");	//$NON-NLS-1$
> 	}
> 
124a137,140
> 	public TextEmitter getReconnectLinkSourceCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::commands::ReconnectLinkSourceCommand::qualifiedClassName");	//$NON-NLS-1$
> 	}
> 
128a145,148
> 	public TextEmitter getReconnectLinkTargetCommandQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::commands::ReconnectLinkTargetCommand::qualifiedClassName");	//$NON-NLS-1$
> 	}
> 
136a157,160
> 	public TextEmitter getComponentEditPolicyQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::diagram::policies::ComponentEditPolicy::qualifiedClassName");	//$NON-NLS-1$
> 	}
> 
140a165,168
> 	public TextEmitter getLayoutEditPolicyQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::diagram::policies::LayoutEditPolicy::qualifiedClassName");	//$NON-NLS-1$
> 	}
> 
144a173,184
> 	public TextEmitter getGraphicalEditPolicyQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::diagram::policies::GraphicalNodeEditPolicy::qualifiedClassName");	//$NON-NLS-1$
> 	}
> 
> 	public TextEmitter getConnectionEndpointEditPolicyEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::diagram::policies::ConnectionEndpointEditPolicy::ConnectionEndpointEditPolicy");	//$NON-NLS-1$
> 	}
> 
> 	public TextEmitter getConnectionEndpointEditPolicyQualifiedClassNameEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::diagram::policies::ConnectionEndpointEditPolicy::qualifiedClassName");	//$NON-NLS-1$
> 	}
> 
145a186,194
> 		return retrieveXpand("xpt::providers::ValidationProvider::ValidationProvider");	//$NON-NLS-1$
> 	}
> 
> 	public TextEmitter getValidateActionGenerator() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::providers::ValidateAction::ValidateAction");	//$NON-NLS-1$
> 	}
> 
> 	public TextEmitter getValidateActionQualifiedNameGenerator() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::providers::ValidateAction::qualifiedClassName");	//$NON-NLS-1$
146,146d185
< 		return retrieve(ValidationProviderGenerator.class);
149a198,206
> 		return retrieveXpand("xpt::providers::MetricProvider::MetricProvider");	//$NON-NLS-1$
> 	}	
> 
> 	public TextEmitter getMetricsActionEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::providers::MetricsAction::MetricsAction");	//$NON-NLS-1$
> 	}	
> 
> 	public TextEmitter getMetricsActionQualifiedNameEmitter() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::providers::MetricsAction::qualifiedClassName");	//$NON-NLS-1$
150,150d197
< 		return retrieve(MetricProviderGenerator.class);
204a261,264
> 	public TextEmitter getOpenDiagramInViewActionQualifiedClassNameGenerator() throws UnexpectedBehaviourException {
> 		return retrieveXpand("xpt::editor::OpenDiagramInViewAction::qualifiedClassName");	//$NON-NLS-1$
> 	}
> 
265a326,326
> 		return retrieveXpand("xpt::expressions::AbstractExpression::AbstractExpression");
266,266d325
< 		return retrieve(AbstractExpressionGenerator.class);
269a330,330
> 		return retrieveXpand("xpt::expressions::OCLExpressionFactory::OCLExpressionFactory");
270,270d329
< 		return retrieve(OCLExpressionFactoryGenerator.class);
273a334,334
> 		return retrieveXpand("xpt::expressions::RegexpExpressionFactory::RegexpExpressionFactory");
274,274d333
< 		return retrieve(RegexpExpressionFactoryGenerator.class);
296,315d355
< 
< 	/**
< 	 * @see #retrieve(Class)
< 	 */
< 	private static void put(StaticTemplateRegistry tr, String path, Class<?> precompiledTemplate) {
< 		tr.put(precompiledTemplate, path, precompiledTemplate);
< 	}
< 
< 	/**
< 	 * depends on {@link #put(StaticTemplateRegistry, String, Class) } impl -
< 	 * class object of precompiled template serves as a key
< 	 */
< 	private TextEmitter retrieve(Class<?> key) throws UnexpectedBehaviourException {
< 		try {
< 			return new JETEmitterAdapter(myFactory.acquireEmitter(key));
< 		} catch (NoSuchTemplateException ex) {
< 			throw new UnexpectedBehaviourException(ex.getMessage(), ex);
< 		}
< 	}
< 
339a380,383
> 	private static Bundle getCodegenTemplatesBundle() {
> 		return Platform.getBundle(CODEGEN_PLUGIN_ID);
> 	}
> 
341,341c385,385
< 		return getTemplatesBundle().getEntry("/templates/emf-merge.xml");
---
> 		return getCodegenTemplatesBundle().getEntry("/templates/emf-merge.xml");
