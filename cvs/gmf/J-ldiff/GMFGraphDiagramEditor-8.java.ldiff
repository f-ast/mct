2,2c2,2
<  * Copyright (c) 2006 Borland Software Corporation and others.
---
>  * Copyright (c) 2006, 2007 Borland Software Corporation and others.
12a13,13
> import org.eclipse.gef.palette.PaletteRoot;
13,17d12
< import org.eclipse.draw2d.DelegatingLayout;
< import org.eclipse.draw2d.FreeformLayer;
< import org.eclipse.draw2d.LayeredPane;
< import org.eclipse.gef.LayerConstants;
< import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;
18,18c14,14
< import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditor;
---
> import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;
19,20d14
< import org.eclipse.ui.IEditorInput;
< import org.eclipse.ui.ide.IGotoMarker;
21a16,21
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.HashSet;
> import java.util.Iterator;
> import java.util.List;
> 
22a23,51
> import org.eclipse.core.resources.IMarker;
> import org.eclipse.core.resources.IWorkspaceRoot;
> import org.eclipse.core.resources.ResourcesPlugin;
> 
> import org.eclipse.core.runtime.CoreException;
> import org.eclipse.core.runtime.IPath;
> import org.eclipse.core.runtime.IProgressMonitor;
> import org.eclipse.core.runtime.IStatus;
> import org.eclipse.core.runtime.NullProgressMonitor;
> 
> import org.eclipse.emf.common.ui.URIEditorInput;
> 
> import org.eclipse.emf.common.util.URI;
> 
> import org.eclipse.emf.ecore.EObject;
> 
> import org.eclipse.emf.ecore.resource.Resource;
> 
> import org.eclipse.emf.edit.ui.dnd.LocalTransfer;
> 
> import org.eclipse.gef.EditPartViewer;
> 
> import org.eclipse.gmf.graphdef.editor.navigator.GMFGraphNavigatorItem;
> 
> import org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService;
> 
> import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
> 
> import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener;
23a53,53
> import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;
24,24c54,54
< import org.eclipse.gmf.graphdef.editor.edit.parts.GMFGraphEditPartFactory;
---
> import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;
24a55,55
> import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider;
27a59,89
> import org.eclipse.gmf.runtime.notation.View;
> 
> import org.eclipse.jface.dialogs.ErrorDialog;
> import org.eclipse.jface.dialogs.IMessageProvider;
> import org.eclipse.jface.dialogs.MessageDialog;
> 
> import org.eclipse.jface.util.LocalSelectionTransfer;
> 
> import org.eclipse.jface.viewers.IStructuredSelection;
> 
> import org.eclipse.jface.window.Window;
> 
> import org.eclipse.osgi.util.NLS;
> 
> import org.eclipse.swt.dnd.Transfer;
> import org.eclipse.swt.dnd.TransferData;
> 
> import org.eclipse.swt.widgets.Shell;
> 
> import org.eclipse.ui.IEditorInput;
> import org.eclipse.ui.IEditorMatchingStrategy;
> import org.eclipse.ui.IEditorReference;
> import org.eclipse.ui.IFileEditorInput;
> import org.eclipse.ui.PlatformUI;
> 
> import org.eclipse.ui.dialogs.SaveAsDialog;
> 
> import org.eclipse.ui.ide.IGotoMarker;
> 
> import org.eclipse.ui.part.FileEditorInput;
> 
31,31c93,93
< public class GMFGraphDiagramEditor extends FileDiagramEditor implements IGotoMarker {
---
> public class GMFGraphDiagramEditor extends DiagramDocumentEditor implements IGotoMarker {
47a110,113
> 	protected PaletteRoot createPaletteRoot(PaletteRoot existingPaletteRoot) {
> 		PaletteRoot root = super.createPaletteRoot(existingPaletteRoot);
> 		new GMFGraphPaletteFactory().fillPalette(root);
> 		return root;
48,49d109
< 	protected String getEditingDomainID() {
< 		return "org.eclipse.gmf.graphdef.editor.EditingDomain"; //$NON-NLS-1$
54a119,148
> 	protected PreferencesHint getPreferencesHint() {
> 		return GMFGraphDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public String getContributorId() {
> 		return GMFGraphDiagramEditorPlugin.ID;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected IDocumentProvider getDocumentProvider(IEditorInput input) {
> 		if (input instanceof URIEditorInput) {
> 			return new URIDiagramDocumentProvider();
> 		}
> 		return super.getDocumentProvider(input);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public TransactionalEditingDomain getEditingDomain() {
> 		IDocument document = getEditorInput() != null ? getDocumentProvider().getDocument(getEditorInput()) : null;
> 		if (document instanceof IDiagramDocument) {
> 			return ((IDiagramDocument) document).getEditingDomain();
> 		}
> 		return super.getEditingDomain();
55,58d118
< 	protected TransactionalEditingDomain createEditingDomain() {
< 		TransactionalEditingDomain domain = super.createEditingDomain();
< 		domain.setID(getEditingDomainID());
< 		return domain;
64a155,158
> 		if (input instanceof IFileEditorInput) {
> 			setDocumentProvider(GMFGraphDiagramEditorPlugin.getInstance().getDocumentProvider());
> 		} else if (input instanceof URIEditorInput) {
> 			setDocumentProvider(new URIDiagramDocumentProvider());
65,66d154
< 		if (input.getAdapter(IFile.class) != null) {
< 			setDocumentProvider(new GMFGraphDocumentProvider());
74a167,316
> 	public void gotoMarker(IMarker marker) {
> 		MarkerNavigationService.getInstance().gotoMarker(this, marker);
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public boolean isSaveAsAllowed() {
> 		return true;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	public void doSaveAs() {
> 		performSaveAs(new NullProgressMonitor());
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected void performSaveAs(IProgressMonitor progressMonitor) {
> 		Shell shell = getSite().getShell();
> 		IEditorInput input = getEditorInput();
> 		SaveAsDialog dialog = new SaveAsDialog(shell);
> 		IFile original = input instanceof IFileEditorInput ? ((IFileEditorInput) input).getFile() : null;
> 		if (original != null) {
> 			dialog.setOriginalFile(original);
> 		}
> 		dialog.create();
> 		IDocumentProvider provider = getDocumentProvider();
> 		if (provider == null) {
> 			// editor has been programmatically closed while the dialog was open
> 			return;
> 		}
> 		if (provider.isDeleted(input) && original != null) {
> 			String message = NLS.bind("The original file ''{0}'' has been deleted.", original.getName());
> 			dialog.setErrorMessage(null);
> 			dialog.setMessage(message, IMessageProvider.WARNING);
> 		}
> 		if (dialog.open() == Window.CANCEL) {
> 			if (progressMonitor != null) {
> 				progressMonitor.setCanceled(true);
> 			}
> 			return;
> 		}
> 		IPath filePath = dialog.getResult();
> 		if (filePath == null) {
> 			if (progressMonitor != null) {
> 				progressMonitor.setCanceled(true);
> 			}
> 			return;
> 		}
> 		IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
> 		IFile file = workspaceRoot.getFile(filePath);
> 		final IEditorInput newInput = new FileEditorInput(file);
> 		// Check if the editor is already open
> 		IEditorMatchingStrategy matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();
> 		IEditorReference[] editorRefs = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
> 		for (int i = 0; i < editorRefs.length; i++) {
> 			if (matchingStrategy.matches(editorRefs[i], newInput)) {
> 				MessageDialog.openWarning(shell, "Problem During Save As...", "Save could not be completed. Target file is already open in another editor.");
> 				return;
> 			}
> 		}
> 		boolean success = false;
> 		try {
> 			provider.aboutToChange(newInput);
> 			getDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);
> 			success = true;
> 		} catch (CoreException x) {
> 			IStatus status = x.getStatus();
> 			if (status == null || status.getSeverity() != IStatus.CANCEL) {
> 				ErrorDialog.openError(shell, "Save Problems", "Could not save file.", x.getStatus());
> 			}
> 		} finally {
> 			provider.changed(newInput);
> 			if (success) {
> 				setInput(newInput);
> 			}
> 		}
> 		if (progressMonitor != null) {
> 			progressMonitor.setCanceled(!success);
> 		}
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	protected void initializeGraphicalViewer() {
> 		super.initializeGraphicalViewer();
> 		getDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), LocalSelectionTransfer.getTransfer()) {
> 
> 			protected Object getJavaObject(TransferData data) {
> 				return LocalSelectionTransfer.getTransfer().nativeToJava(data);
> 			}
> 
> 		});
> 		getDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), LocalTransfer.getInstance()) {
> 
> 			protected Object getJavaObject(TransferData data) {
> 				return LocalTransfer.getInstance().nativeToJava(data);
> 			}
> 
> 		});
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
> 	private abstract class DropTargetListener extends DiagramDropTargetListener {
> 
> 		/**
> 		 * @generated
> 		 */
> 		public DropTargetListener(EditPartViewer viewer, Transfer xfer) {
> 			super(viewer, xfer);
> 		}
> 
> 		/**
> 		 * @generated
> 		 */
> 		protected List getObjectsBeingDropped() {
> 			TransferData data = getCurrentEvent().currentDataType;
> 			Collection uris = new HashSet();
> 
> 			Object transferedObject = getJavaObject(data);
> 			if (transferedObject instanceof IStructuredSelection) {
> 				IStructuredSelection selection = (IStructuredSelection) transferedObject;
> 				for (Iterator it = selection.iterator(); it.hasNext();) {
> 					Object nextSelectedObject = it.next();
> 					if (nextSelectedObject instanceof GMFGraphNavigatorItem) {
> 						View view = ((GMFGraphNavigatorItem) nextSelectedObject).getView();
> 						nextSelectedObject = view.getElement();
> 					}
> 					if (nextSelectedObject instanceof EObject) {
> 						EObject modelElement = (EObject) nextSelectedObject;
> 						Resource modelElementResource = modelElement.eResource();
> 						uris.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));
> 					}
> 				}
> 			}
> 
> 			List result = new ArrayList();
> 			for (Iterator it = uris.iterator(); it.hasNext();) {
> 				URI nextURI = (URI) it.next();
> 				EObject modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);
> 				result.add(modelObject);
> 			}
> 			return result;
75,85d166
< 	protected void configureGraphicalViewer() {
< 		super.configureGraphicalViewer();
< 		DiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();
< 		LayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);
< 		FreeformLayer extLabelsLayer = new FreeformLayer();
< 		extLabelsLayer.setLayoutManager(new DelegatingLayout());
< 		printableLayers.addLayerAfter(extLabelsLayer, GMFGraphEditPartFactory.EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);
< 		LayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);
< 		FreeformLayer scaledFeedbackLayer = new FreeformLayer();
< 		scaledFeedbackLayer.setEnabled(false);
< 		scalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);
86a318,325
> 
> 		/**
> 		 * @generated
> 		 */
> 		protected abstract Object getJavaObject(TransferData data);
> 
> 	}
> 
