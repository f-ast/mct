0a1,6
> /******************************************************************************
>  * Copyright (c) 2004 IBM Corporation and others.
>  * All rights reserved. This program and the accompanying materials
>  * are made available under the terms of the Eclipse Public License v1.0
>  * which accompanies this distribution, and is available at
>  * http://www.eclipse.org/legal/epl-v10.html
1,3d0
< /**
<  * <copyright>
<  * </copyright>
4a8,10
>  * Contributors:
>  *    IBM Corporation - initial API and implementation 
>  ****************************************************************************/
5,6d11
<  * $Id$
<  */
7,7c12,12
< package org.eclipse.gmf.gmfgraph;
---
> package org.eclipse.gmf.runtime.notation;
9,11d11
< import java.util.Arrays;
< import java.util.Collections;
< import java.util.List;
13,13d13
< import org.eclipse.emf.common.util.AbstractEnumerator;
17a18,20
>  * <p>
>  * The font style is a style to be installed on views with text
>  * </p>
17,17c17,17
<  * A representation of the literals of the enumeration '<em><b>Font Style</b></em>',
---
>  * A representation of the model object '<em><b>Font Style</b></em>'.
18,18d17
<  * and utility methods for working with them.
19a22,36
>  *
>  * <p>
>  * The following features are supported:
>  * <ul>
>  *   <li>{@link org.eclipse.gmf.runtime.notation.FontStyle#getFontColor <em>Font Color</em>}</li>
>  *   <li>{@link org.eclipse.gmf.runtime.notation.FontStyle#getFontName <em>Font Name</em>}</li>
>  *   <li>{@link org.eclipse.gmf.runtime.notation.FontStyle#getFontHeight <em>Font Height</em>}</li>
>  *   <li>{@link org.eclipse.gmf.runtime.notation.FontStyle#isBold <em>Bold</em>}</li>
>  *   <li>{@link org.eclipse.gmf.runtime.notation.FontStyle#isItalic <em>Italic</em>}</li>
>  *   <li>{@link org.eclipse.gmf.runtime.notation.FontStyle#isUnderline <em>Underline</em>}</li>
>  *   <li>{@link org.eclipse.gmf.runtime.notation.FontStyle#isStrikeThrough <em>Strike Through</em>}</li>
>  * </ul>
>  * </p>
>  *
>  * @see org.eclipse.gmf.runtime.notation.NotationPackage#getFontStyle()
20,20d21
<  * @see org.eclipse.gmf.gmfgraph.GMFGraphPackage#getFontStyle()
23a40,43
> /*
>  * @canBeSeenBy %partners
>  */
> public interface FontStyle extends Style {
24,24d39
< public final class FontStyle extends AbstractEnumerator {
25a147,148
>      * Returns the value of the '<em><b>Underline</b></em>' attribute.
>      * The default value is <code>"false"</code>.
26,26d146
< 	 * The '<em><b>NORMAL</b></em>' literal value.
28a49,49
> 	 * The fontName property specified the font typeface name
29,30d48
< 	 * If the meaning of '<em><b>NORMAL</b></em>' literal object isn't clear,
< 	 * there really should be more of a description here...
32a52,55
>      * @return the value of the '<em>Font Name</em>' attribute.
>      * @see #setFontName(String)
>      * @see org.eclipse.gmf.runtime.notation.NotationPackage#getFontStyle_FontName()
>      * @model default="Tahoma"
33,34d51
< 	 * @see #NORMAL_LITERAL
< 	 * @model
36,36d56
< 	 * @ordered
37a58,58
> 	String getFontName();
38,38d57
< 	public static final int NORMAL = 0;
40a61,61
>      * Sets the value of the '{@link org.eclipse.gmf.runtime.notation.FontStyle#getFontName <em>Font Name</em>}' attribute.
40a124,125
>      * Returns the value of the '<em><b>Italic</b></em>' attribute.
>      * The default value is <code>"false"</code>.
41,41d123
< 	 * The '<em><b>BOLD</b></em>' literal value.
43a64,64
> 	 * The fontName property specifies the font typeface name
44,45d63
< 	 * If the meaning of '<em><b>BOLD</b></em>' literal object isn't clear,
< 	 * there really should be more of a description here...
47a67,68
>      * @param value the new value of the '<em>Font Name</em>' attribute.
>      * @see #getFontName()
48,49d66
< 	 * @see #BOLD_LITERAL
< 	 * @model
51,51d69
< 	 * @ordered
52a71,71
> 	void setFontName(String value);
53,53d70
< 	public static final int BOLD = 1;
55a170,171
>      * Returns the value of the '<em><b>Strike Through</b></em>' attribute.
>      * The default value is <code>"false"</code>.
56,56d169
< 	 * The '<em><b>ITALIC</b></em>' literal value.
58a78,78
> 	 * The fontHeight property specifies the font size
59,60d77
< 	 * If the meaning of '<em><b>ITALIC</b></em>' literal object isn't clear,
< 	 * there really should be more of a description here...
62a81,108
>      * @return the value of the '<em>Font Height</em>' attribute.
>      * @see #setFontHeight(int)
>      * @see org.eclipse.gmf.runtime.notation.NotationPackage#getFontStyle_FontHeight()
>      * @model default="9"
>      * @generated
>      */
> 	int getFontHeight();
> 
>     /**
>      * Sets the value of the '{@link org.eclipse.gmf.runtime.notation.FontStyle#getFontHeight <em>Font Height</em>}' attribute.
>      * <!-- begin-user-doc -->
> 	 * The fontHeight property specifies the font size
> 	 * <!-- end-user-doc -->
>      * @param value the new value of the '<em>Font Height</em>' attribute.
>      * @see #getFontHeight()
>      * @generated
>      */
> 	void setFontHeight(int value);
> 
>     /**
>      * Returns the value of the '<em><b>Bold</b></em>' attribute.
>      * The default value is <code>"false"</code>.
>      * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
>      * @return the value of the '<em>Bold</em>' attribute.
>      * @see #setBold(boolean)
>      * @see org.eclipse.gmf.runtime.notation.NotationPackage#getFontStyle_Bold()
>      * @model default="false"
63,64d80
< 	 * @see #ITALIC_LITERAL
< 	 * @model
66,66d109
< 	 * @ordered
67a111,111
> 	boolean isBold();
68,68d110
< 	public static final int ITALIC = 2;
70a114,114
>      * Sets the value of the '{@link org.eclipse.gmf.runtime.notation.FontStyle#isBold <em>Bold</em>}' attribute.
71,71d113
< 	 * The '<em><b>NORMAL</b></em>' literal object.
73a117,118
>      * @param value the new value of the '<em>Bold</em>' attribute.
>      * @see #isBold()
74,74d116
< 	 * @see #NORMAL
76,76d119
< 	 * @ordered
77a121,121
> 	void setBold(boolean value);
78,78d120
< 	public static final FontStyle NORMAL_LITERAL = new FontStyle(NORMAL, "NORMAL", "NORMAL");
81,81d123
< 	 * The '<em><b>BOLD</b></em>' literal object.
83a128,131
>      * @return the value of the '<em>Italic</em>' attribute.
>      * @see #setItalic(boolean)
>      * @see org.eclipse.gmf.runtime.notation.NotationPackage#getFontStyle_Italic()
>      * @model default="false"
84,84d127
< 	 * @see #BOLD
86,86d132
< 	 * @ordered
87a134,134
> 	boolean isItalic();
88,88d133
< 	public static final FontStyle BOLD_LITERAL = new FontStyle(BOLD, "BOLD", "BOLD");
90a137,137
>      * Sets the value of the '{@link org.eclipse.gmf.runtime.notation.FontStyle#isItalic <em>Italic</em>}' attribute.
91,91d136
< 	 * The '<em><b>ITALIC</b></em>' literal object.
93a140,141
>      * @param value the new value of the '<em>Italic</em>' attribute.
>      * @see #isItalic()
94,94d139
< 	 * @see #ITALIC
96,96d142
< 	 * @ordered
97a144,144
> 	void setItalic(boolean value);
98,98d143
< 	public static final FontStyle ITALIC_LITERAL = new FontStyle(ITALIC, "ITALIC", "ITALIC");
101,101d146
< 	 * An array of all the '<em><b>Font Style</b></em>' enumerators.
103a151,154
>      * @return the value of the '<em>Underline</em>' attribute.
>      * @see #setUnderline(boolean)
>      * @see org.eclipse.gmf.runtime.notation.NotationPackage#getFontStyle_Underline()
>      * @model default="false"
105a157,157
> 	boolean isUnderline();
106,111d156
< 	private static final FontStyle[] VALUES_ARRAY =
< 		new FontStyle[] {
< 			NORMAL_LITERAL,
< 			BOLD_LITERAL,
< 			ITALIC_LITERAL,
< 		};
113a160,160
>      * Sets the value of the '{@link org.eclipse.gmf.runtime.notation.FontStyle#isUnderline <em>Underline</em>}' attribute.
114,114d159
< 	 * A public read-only list of all the '<em><b>Font Style</b></em>' enumerators.
116a163,164
>      * @param value the new value of the '<em>Underline</em>' attribute.
>      * @see #isUnderline()
118a167,167
> 	void setUnderline(boolean value);
119,119d166
< 	public static final List VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));
121a74,75
>      * Returns the value of the '<em><b>Font Height</b></em>' attribute.
>      * The default value is <code>"9"</code>.
122,122d73
< 	 * Returns the '<em><b>Font Style</b></em>' literal with the specified literal value.
124a174,177
>      * @return the value of the '<em>Strike Through</em>' attribute.
>      * @see #setStrikeThrough(boolean)
>      * @see org.eclipse.gmf.runtime.notation.NotationPackage#getFontStyle_StrikeThrough()
>      * @model default="false"
126a180,180
> 	boolean isStrikeThrough();
127,135d179
< 	public static FontStyle get(String literal) {
< 		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
< 			FontStyle result = VALUES_ARRAY[i];
< 			if (result.toString().equals(literal)) {
< 				return result;
< 			}
< 		}
< 		return null;
< 	}
137a183,183
>      * Sets the value of the '{@link org.eclipse.gmf.runtime.notation.FontStyle#isStrikeThrough <em>Strike Through</em>}' attribute.
137a193,194
>      * Returns the value of the '<em><b>Font Color</b></em>' attribute.
>      * The default value is <code>"0"</code>.
138,138d192
< 	 * Returns the '<em><b>Font Style</b></em>' literal with the specified name.
140a186,187
>      * @param value the new value of the '<em>Strike Through</em>' attribute.
>      * @see #isStrikeThrough()
142a190,190
> 	void setStrikeThrough(boolean value);
143,151d189
< 	public static FontStyle getByName(String name) {
< 		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
< 			FontStyle result = VALUES_ARRAY[i];
< 			if (result.getName().equals(name)) {
< 				return result;
< 			}
< 		}
< 		return null;
< 	}
153a45,46
>      * Returns the value of the '<em><b>Font Name</b></em>' attribute.
>      * The default value is <code>"Tahoma"</code>.
154,154d44
< 	 * Returns the '<em><b>Font Style</b></em>' literal with the specified integer value.
155a196,198
> 	 * <p>
> 	 * The font color is the color used in painting the texts inside node visuals
> 	 * </p>
156a200,203
>      * @return the value of the '<em>Font Color</em>' attribute.
>      * @see #setFontColor(int)
>      * @see org.eclipse.gmf.runtime.notation.NotationPackage#getFontStyle_FontColor()
>      * @model default="0"
158a206,206
> 	int getFontColor();
159,166d205
< 	public static FontStyle get(int value) {
< 		switch (value) {
< 			case NORMAL: return NORMAL_LITERAL;
< 			case BOLD: return BOLD_LITERAL;
< 			case ITALIC: return ITALIC_LITERAL;
< 		}
< 		return null;	
< 	}
168a209,209
>      * Sets the value of the '{@link org.eclipse.gmf.runtime.notation.FontStyle#getFontColor <em>Font Color</em>}' attribute.
169,169d208
< 	 * Only this class can construct instances.
170a211,213
> 	 * <p>
> 	 * The font color is the color used in painting the texts inside node visuals
> 	 * </p>
171a215,216
>      * @param value the new value of the '<em>Font Color</em>' attribute.
>      * @see #getFontColor()
173a219,219
> 	void setFontColor(int value);
174,176d218
< 	private FontStyle(int value, String name, String literal) {
< 		super(value, name, literal);
< 	}
