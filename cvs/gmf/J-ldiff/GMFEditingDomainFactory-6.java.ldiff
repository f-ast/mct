2,2c2,2
<  * Copyright (c) 2006 IBM Corporation and others.
---
>  * Copyright (c) 2006, 2008 IBM Corporation and others.
13a14,17
> import java.util.Collection;
> import java.util.HashMap;
> import java.util.Map;
> 
14a19,21
> import org.eclipse.core.resources.IFile;
> import org.eclipse.core.runtime.IStatus;
> import org.eclipse.core.runtime.Status;
15a23,23
> import org.eclipse.emf.transaction.Transaction;
16a25,26
> import org.eclipse.emf.transaction.impl.InternalTransactionalEditingDomain;
> import org.eclipse.emf.transaction.util.TransactionUtil;
17a28,31
> import org.eclipse.emf.workspace.util.WorkspaceValidateEditSupport;
> import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator;
> import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator.ISyncExecHelper;
> import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator.SyncExecHelper;
31,31d44
< public class GMFEditingDomainFactory
32,32c45,45
< 	extends WorkspaceEditingDomainFactory {
---
> public class GMFEditingDomainFactory extends WorkspaceEditingDomainFactory {
32a46,50
> 
> 	static public TransactionalSyncExecHelper transactionalSyncExecHelper = new TransactionalSyncExecHelper();
> 	static {
> 		SyncExecHelper.setInstance(transactionalSyncExecHelper);
> 	}
78,78c96,96
< 	protected void configure(TransactionalEditingDomain domain) {
---
> 	protected void configure(final TransactionalEditingDomain domain) {
89a108,126
> 			
> 		TransactionalEditingDomain.DefaultOptions options = (TransactionalEditingDomain.DefaultOptions) (TransactionUtil
> 				.getAdapter(domain,
> 						TransactionalEditingDomain.DefaultOptions.class));
> 
> 		Map<Object, Object> aMap = new HashMap<Object, Object>();
> 		aMap.put(Transaction.OPTION_VALIDATE_EDIT,
> 				new WorkspaceValidateEditSupport() {
> 
> 					@SuppressWarnings("unchecked")
> 					protected IStatus doValidateEdit(Transaction transaction,
> 							Collection resources, Object context) {
> 						return GMFEditingDomainFactory.transactionalSyncExecHelper
> 								.approveFileModification(getFiles(resources),
> 										domain);
> 					}
> 				});
> 
> 		options.setDefaultTransactionOptions(aMap);
90a128,207
> 		
> 	
> 	/**
> 	 * A helper that knows about the specific editing domain.
> 	 * During the approval process, calls to validateEdit() will require the
> 	 * domain in order to execute in a thread safe manner.
> 	 * 
> 	 * @author James Bruck (jbruck)
> 	 *
> 	 */
> 	public static class TransactionalSyncExecHelper implements ISyncExecHelper {
> 
> 		private final ThreadLocal<TransactionalEditingDomain> domain = new ThreadLocal<TransactionalEditingDomain>();
> 
> 		private void setDomain(TransactionalEditingDomain domain) {
> 			this.domain.set(domain);
> 		}
> 
> 		/**
> 		 * Sets the thread specific transactional domain before the approval
> 		 * process since subsequent calls to validateEdit() requires it and
> 		 * clears it afterward.
> 		 * 
> 		 * @param files
> 		 *            The files to be validated.
> 		 * 
> 		 * @param transactionalDomain
> 		 *            The current editing domain.
> 		 * 
> 		 * @return The resulting status.
> 		 */
> 		public IStatus approveFileModification(IFile[] files,
> 				TransactionalEditingDomain transactionalDomain) {
> 
> 			setDomain(transactionalDomain);
> 			IStatus status = Status.OK_STATUS;
> 			try {
> 				status = FileModificationValidator
> 						.approveFileModification(files);
> 			} finally {
> 				setDomain(null);
> 			}
> 			return status;
> 		}
> 		
> 		/**
> 		 * Delegates to the specified domain to obtain a thread safe wrapper
> 		 * for the specified <code>runnable</code> 
> 		 * 
> 		 * @param runnable a runnable to execute in the context of the active
> 		 *     transaction, on any thread
> 		 *     
> 		 *  @return the privileged runnable if the transaction is on the current
> 		 *  	thread, otherwise just return itself.
> 		 */
> 		public Runnable safeRunnable(Runnable runnable) {
> 			if( isTransactionOnCurrentThread()) {
> 				return domain.get().createPrivilegedRunnable(runnable);
> 			}
> 			return null;
> 		}
> 
> 		/**
> 		 * Checks if the active transaction is on the current thread.
> 		 * 
> 		 * @return true if the active transaction is on the current thread.
> 		 */
> 		private boolean isTransactionOnCurrentThread() {
> 			if (domain.get() != null) {
> 				
> 				Transaction tx = ((InternalTransactionalEditingDomain) domain
> 						.get()).getActiveTransaction();
> 				
> 				return ((tx != null) && (tx.getOwner() == Thread
> 						.currentThread()));
> 			}
> 			return false;
> 		}
> 	}
> 		
