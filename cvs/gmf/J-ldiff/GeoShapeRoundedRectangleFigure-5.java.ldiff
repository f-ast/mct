15a16,19
> import org.eclipse.draw2d.geometry.Point;
> import org.eclipse.draw2d.geometry.PointList;
> import org.eclipse.draw2d.geometry.PrecisionPoint;
> import org.eclipse.draw2d.geometry.PrecisionRectangle;
16a21,23
> import org.eclipse.gmf.runtime.draw2d.ui.figures.IPolygonAnchorableFigure;
> import org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx;
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;
22,22c29,29
< public class GeoShapeRoundedRectangleFigure extends GeoShapeFigure {
---
> public class GeoShapeRoundedRectangleFigure extends GeoShapeFigure implements IPolygonAnchorableFigure {
25a33,35
>     // cache the anchor border point list since the calculation is costly.
>     private PointList anchorBorderPointList;
>     
44,44d53
< 
50,50d58
< 	
51,51c59,59
< 		Rectangle r = getBounds();
---
> 	    Rectangle r = getBounds().getCopy();
52,54d59
< 		
< 		Rectangle insideRect = new Rectangle( r.x, r.y, r.width - 1, r.height - 1 );
< 		
60a66,150
> 		g.drawRoundRectangle( r, cornerRadius, cornerRadius );
>    	}
>       
>      /**
>      * Estimate the anchor intersection points by using a polyline smoothed
>      * with bezier curves for the rounded top and bottom arcs.
>      * 
>      * @return PointList of the border of the shape
>      */
>     public PointList getAnchorBorderPointList() {
>         int arcSize = getCornerRadius();
> 
>         PrecisionRectangle rBounds = new PrecisionRectangle(getBounds());
> 
>         // working our way counter-clockwise find key points.
>         Point keyPoint1 = new PrecisionPoint(rBounds.getTopLeft().x + arcSize/2, rBounds.getTopLeft().y);
>         Point keyPoint2 = new PrecisionPoint(rBounds.getTopLeft().x, rBounds.getTopLeft().y  + arcSize/2);
>         Point keyPoint3 = new PrecisionPoint(rBounds.getBottomLeft().x, rBounds .getBottomLeft().y - arcSize/2);
>         Point keyPoint4 = new PrecisionPoint(rBounds.getBottomLeft().x + arcSize/2, rBounds.getBottomLeft().y);
>         Point keyPoint5 = new PrecisionPoint(rBounds.getBottomRight().x - arcSize/2, rBounds.getBottomRight().y);
>         Point keyPoint6 = new PrecisionPoint(rBounds.getBottomRight().x, rBounds.getBottomRight().y - arcSize/2);
>         Point keyPoint7 = new PrecisionPoint(rBounds.getTopRight().x, rBounds.getTopRight().y  + arcSize/2);
>         Point keyPoint8 = new PrecisionPoint(rBounds.getTopRight().x - arcSize/2, rBounds.getTopRight().y);
>         
>         // create point lists for the corners
>         PointList upperLeftPointList = new PointList();
>         upperLeftPointList.addPoint(keyPoint1); 
>         upperLeftPointList.addPoint(rBounds.getTopLeft().x + arcSize/4, rBounds.getTopLeft().y + arcSize/16);
>         upperLeftPointList.addPoint(rBounds.getTopLeft().x + arcSize/16, rBounds.getTopLeft().y + arcSize/4);
>         upperLeftPointList.addPoint(keyPoint2); 
>        
>         PointList lowerLeftPointList = new PointList();
>         lowerLeftPointList.addPoint(keyPoint3);
>         lowerLeftPointList.addPoint(rBounds.getBottomLeft().x + arcSize/16, rBounds.getBottomLeft().y - arcSize/4);
>         lowerLeftPointList.addPoint(rBounds.getBottomLeft().x + arcSize/4, rBounds.getBottomLeft().y - arcSize/16);
>         lowerLeftPointList.addPoint(keyPoint4);
>         
>         PointList lowerRightPointList = new PointList();
>         lowerRightPointList.addPoint(keyPoint5);
>         lowerRightPointList.addPoint(rBounds.getBottomRight().x - arcSize/4, rBounds.getBottomRight().y - arcSize/16);
>         lowerRightPointList.addPoint(rBounds.getBottomRight().x - arcSize/16, rBounds.getBottomRight().y - arcSize/4);
>         lowerRightPointList.addPoint(keyPoint6);
>        
>         PointList upperRightPointList = new PointList();
>         upperRightPointList.addPoint(keyPoint7);
>         upperRightPointList.addPoint(rBounds.getTopRight().x - arcSize/16, rBounds.getTopRight().y + arcSize/4);
>         upperRightPointList.addPoint(rBounds.getTopRight().x - arcSize/4, rBounds.getTopRight().y + arcSize/16);
>         upperRightPointList.addPoint(keyPoint8);
>         
>         // combine all the points and smooth out the corners with bezier curves.
>         PointList combinedPointList = new PointList();
>         combinedPointList.addPoint(keyPoint1);
>         combinedPointList.addAll(PointListUtilities.calcSmoothPolyline(
>             upperLeftPointList, PolylineConnectionEx.SMOOTH_MORE,
>             PointListUtilities.DEFAULT_BEZIERLINES));
>         combinedPointList.addPoint(keyPoint2);
>         combinedPointList.addPoint(keyPoint3);
>         combinedPointList.addAll(PointListUtilities.calcSmoothPolyline(
>             lowerLeftPointList, PolylineConnectionEx.SMOOTH_MORE,
>             PointListUtilities.DEFAULT_BEZIERLINES));
>         combinedPointList.addPoint(keyPoint4);
>         combinedPointList.addPoint(keyPoint5);
>         combinedPointList.addAll(PointListUtilities.calcSmoothPolyline(
>             lowerRightPointList, PolylineConnectionEx.SMOOTH_MORE,
>             PointListUtilities.DEFAULT_BEZIERLINES));
>         combinedPointList.addPoint(keyPoint6);
>         combinedPointList.addPoint(keyPoint7);
>         combinedPointList.addAll(PointListUtilities.calcSmoothPolyline(
>             upperRightPointList, PolylineConnectionEx.SMOOTH_MORE,
>             PointListUtilities.DEFAULT_BEZIERLINES));
>         combinedPointList.addPoint(keyPoint8);
>         combinedPointList.addPoint(keyPoint1); 
> 
>         PointListUtilities.normalizeSegments(combinedPointList);
> 
>         return combinedPointList;
>     }
>     
>     /*
>      * (non-Javadoc)
>      * @see org.eclipse.draw2d.Figure#setBounds(org.eclipse.draw2d.geometry.Rectangle)
>      */
>     public void setBounds(Rectangle rect) {
>         super.setBounds(rect);
>         anchorBorderPointList = null;
61,61d65
< 		g.drawRoundRectangle( insideRect, cornerRadius, cornerRadius );
63a153,163
>     /*
>      * @see org.eclipse.gmf.runtime.draw2d.ui.figures.IPolygonAnchorableFigure#getPolygonPoints()
>      */
>     public PointList getPolygonPoints() {
>         if (anchorBorderPointList == null) {
>             anchorBorderPointList = getAnchorBorderPointList();
>         }
>         return anchorBorderPointList.getCopy();
>     }
>          
>     
