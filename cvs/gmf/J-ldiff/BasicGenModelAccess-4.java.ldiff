15,16d14
< import java.util.Collections;
< import java.util.HashSet;
20,20d17
< import java.util.Map;
25,26d21
< import org.eclipse.emf.codegen.ecore.genmodel.GenModelFactory;
< import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
29,29d23
< import org.eclipse.emf.ecore.EClass;
35,35d28
< import org.eclipse.emf.ecore.util.EcoreUtil;
153a147,153
> 		return createDummy(null);
> 	}
> 
> 	public IStatus createDummy(Collection<EPackage> additionalPackages) {
> 		genModel = new DummyGenModel(model, additionalPackages).create();
> 		confineInResource();
> 		return Status.OK_STATUS;
154,154d146
< 		return createDummy(false, null);
157a157,158
> 	private void confineInResource() {
> 		Resource r = new ResourceSetImpl().createResource(URI.createGenericURI("uri", genModel.getModelPluginID(), null));
158,184d156
< 	public IStatus createDummy(boolean includeAllReferencedPackages, Collection<EPackage> additionalPackages) {
< 		if (additionalPackages == null) {
< 			additionalPackages = Collections.emptyList();
< 		}
< 		String pluginID = "org.sample." + model.getName();
< 		genModel = GenModelFactory.eINSTANCE.createGenModel();
< 		if (includeAllReferencedPackages) {
< 			HashSet<EPackage> allPacks = new HashSet<EPackage>();
< 			allPacks.add(model);
< 			allPacks.addAll(additionalPackages);
< 			// TODO override method in crossReferencer to get only EClasses
< 			Map m = EcoreUtil.ExternalCrossReferencer.find(model);
< 			for (Iterator it = m.keySet().iterator(); it.hasNext(); ) {
< 				Object next = it.next();
< 				if (next instanceof EClass) {
< 					allPacks.add(((EClass) next).getEPackage());
< 				}
< 			}
< 			genModel.initialize(allPacks);
< 		} else {
< 			genModel.initialize(Collections.singleton(model));
< 		}
< 		genModel.setModelName(model.getName() + "Gen");
< 		genModel.setModelPluginID(pluginID);
< 		genModel.setModelDirectory("/" + pluginID + "/src/");
< 		genModel.setEditDirectory(genModel.getModelDirectory());
< 		Resource r = new ResourceSetImpl().createResource(URI.createGenericURI("uri", pluginID, null));
186,194d159
< 
< 		// need different prefix to avoid name collisions with code generated
< 		// for domain model
< 		
< 		for (Iterator it = genModel.getGenPackages().iterator(); it.hasNext();) {
< 			GenPackage genPackage = (GenPackage) it.next();
< 			genPackage.setPrefix(genPackage.getEcorePackage().getName() + "Gen");
< 		}
< 		return Status.OK_STATUS;
