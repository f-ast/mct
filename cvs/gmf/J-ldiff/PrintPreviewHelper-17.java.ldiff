33a36,37
> import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.PageBreakEditPart;
> import org.eclipse.gmf.runtime.diagram.ui.internal.figures.PageBreaksFigure;
53a58,58
> import org.eclipse.jface.dialogs.Dialog;
66a72,72
> import org.eclipse.swt.widgets.Button;
67a74,74
> import org.eclipse.swt.widgets.Control;
68a76,76
> import org.eclipse.swt.widgets.Group;
72a81,81
> import org.eclipse.swt.widgets.Text;
83a93,94
>  * This class should be combined with the DiagramPrinter to reuse functionality.
>  * 
281a293,293
> 	 * userScale is a value between 0 and 1.
285a298,302
> 	 * Determine if we should consider fit to page options or not.
> 	 */
> 	private boolean fitToPage = false;
> 
> 	/**
339a357,358
> 		setUserScale(PrintHelperUtil.getScale());
> 		
383,383c402,402
<         //check for rtl orientation...
---
>         //check for rtl Torientation...
415a435,435
> 				
473a494,494
> 				refreshComposite();
474,477d493
< 				updateLeftRightUpDownButtonsForToolbar();
< 
< 				updateCompositeForNumberOfColumns(numberOfRowsToDisplay,
< 					numberOfColumnsToDisplay);
555a573,573
> 					refreshComposite();
556,558d572
< 					updateCompositeForNumberOfColumns(numberOfRowsToDisplay,
< 						numberOfColumnsToDisplay);
< 					updateLeftRightUpDownButtonsForToolbar();
591a607,607
> 					refreshComposite();
592,594d606
< 					updateCompositeForNumberOfColumns(numberOfRowsToDisplay,
< 						numberOfColumnsToDisplay);
< 					updateLeftRightUpDownButtonsForToolbar();
617a631,631
> 					refreshComposite();
618,620d630
< 					updateCompositeForNumberOfColumns(numberOfRowsToDisplay,
< 						numberOfColumnsToDisplay);
< 					updateLeftRightUpDownButtonsForToolbar();
643a655,655
> 					refreshComposite();
644,646d654
< 					updateCompositeForNumberOfColumns(numberOfRowsToDisplay,
< 						numberOfColumnsToDisplay);
< 					updateLeftRightUpDownButtonsForToolbar();
658a668,735
> 							
> 		ToolItem separator = new ToolItem(bar, SWT.SEPARATOR);
> 		final Text textField = new Text(bar, SWT.SINGLE | SWT.BORDER);
> 		textField.setText("XXXXX");//$NON-NLS-1$
> 		textField.setEnabled(true);
> 		textField.pack();
> 		textField.setText(getDisplayScale(PrintHelperUtil.getScale()));
> 		
> 		separator.setWidth(textField.getBounds().width);
> 		separator.setControl(textField);
> 		
> 		textField.addSelectionListener(new SelectionListener() {
> 
> 			public void widgetSelected(SelectionEvent e) {
> 				// do nothing.
> 			}
> 
> 			public void widgetDefaultSelected(SelectionEvent e) {
> 				String scaleFactor = ((Text) e.getSource()).getText();
> 
> 				int percentageIndex = scaleFactor.indexOf("%"); //$NON-NLS-1$
> 				if (percentageIndex > 0) {
> 					scaleFactor = scaleFactor.substring(0, percentageIndex);
> 				}
> 				int scalePercentage = Integer.parseInt(scaleFactor);
> 				setPercentScaling(scalePercentage);
> 				refreshComposite();
> 				((Text) e.getSource()).setText(getDisplayScale(scalePercentage));
> 			}
> 		});
> 		
> 		new ToolItem(bar, SWT.SEPARATOR);
> 		
> 		ToolItem fitToPageSeparator = new ToolItem(bar, SWT.SEPARATOR);
> 		Button buttonFitToPage = new Button(bar, SWT.PUSH);
> 		buttonFitToPage.setText(DiagramUIPrintingMessages.PrintPreview_FitToPage_ButtonText);
> 		buttonFitToPage.setEnabled(true);
> 		buttonFitToPage.pack();
> 			
> 		fitToPageSeparator.setWidth(buttonFitToPage.getBounds().width);
> 		fitToPageSeparator.setControl(buttonFitToPage);
> 		
> 		buttonFitToPage.addSelectionListener(new SelectionListener() {
> 
> 			public void widgetSelected(SelectionEvent e) {
> 
> 				FitToPagesDialog fitToPages = new FitToPagesDialog(shell);
> 				if (fitToPages.open() == Dialog.OK) {
> 					int pagesWide = fitToPages.getPagesWide();
> 					int pagesTall = fitToPages.getPagesTall();
> 					PrintHelperUtil.setScaleToWidth(pagesWide);
> 					PrintHelperUtil.setScaleToHeight(pagesTall);
> 
> 					setFitToPage(pagesWide, pagesTall);
> 					refreshComposite();
> 					textField.setText(getDisplayScale(PrintHelperUtil
> 							.getScale()));
> 				}
> 			}
> 
> 			public void widgetDefaultSelected(SelectionEvent e) {
> 				// do nothing
> 			}
> 		});
> 								
> 		
> 								
> 		new ToolItem(bar, SWT.SEPARATOR);
693a771,771
> 		refreshComposite();
694,696d770
< 		updateCompositeForNumberOfColumns(numberOfRowsToDisplay, numberOfColumnsToDisplay);
< 
< 		updateLeftRightUpDownButtonsForToolbar();
703a779,779
> 		dispose();
928a1005,1015
> 	* A convenience method for refreshing the displayed image in the preview.
>     */
> 	private void refreshComposite(){
> 		
> 		updateCompositeForNumberOfColumns(numberOfRowsToDisplay,
> 				numberOfColumnsToDisplay);
> 		
> 		updateLeftRightUpDownButtonsForToolbar();
> 	}	
> 	
> 	/**
986a1084,1085
> 			margins.left /= userScale;   
> 			margins.right /= userScale;
987,988d1083
< 		margins.left /= userScale;
< 		margins.right /= userScale;
989,989c1086,1086
< 		margins.bottom /= userScale;
---
> 			margins.bottom /= userScale;
990,990c1087,1087
< 		margins.top /= userScale;
---
> 			margins.top /= userScale;
990a1088,1088
> 									
1010,1010c14,14
< 
---
> 
1010a15,15
> 
1093a1181,1181
> 	
1099,1100d1284
< 
< 	}
1101,1101c1285,1285
< 	
---
> 	
1102,1102c1286,1286
< 	/**
---
> 	/**
1103,1103c1287,1287
< 	 * Convenience method to determine if a page at row y and
---
> 	 * Convenience method to determine if a page at row y and
1104,1104c1288,1288
< 	 * column x exists.
---
> 	 * column x exists.
1105,1105c1289,1289
< 	 * Pages start at 1.
---
> 	 * Pages start at 1.
1106,1106c1290,1290
< 	 * 
---
> 	 * 
1107,1107c1291,1291
< 	 * For example, the first page is 1-1.
---
> 	 * For example, the first page is 1-1.
1108,1108c1292,1292
< 	 * 
---
> 	 * 
1109,1109c1293,1293
< 	 * @param x, column number of the page to check
---
> 	 * @param x, column number of the page to check
1110,1110c1294,1294
< 	 * @param y, row number of the page to check
---
> 	 * @param y, row number of the page to check
1111,1111c1295,1295
< 	 * 
---
> 	 * 
1112,1112c1296,1296
< 	 * @return boolean true if the page exists, false if it doesn't
---
> 	 * @return boolean true if the page exists, false if it doesn't
1113,1113c1297,1297
< 	 */
---
> 	 */
1114,1114c1298,1298
< 	private boolean doesPageExist(int x, int y) {
---
> 	private boolean doesPageExist(int x, int y) {
1115,1115c1299,1299
< 		return x > 0 && y > 0 && x <= getTotalNumberOfColumns() && y <= getTotalNumberOfRows();
---
> 		return x > 0 && y > 0 && x <= getTotalNumberOfColumns() && y <= getTotalNumberOfRows();
1115a1300,1302
> 	}
> 	
> 
1139a1211,1211
> 		
1146a1219,1222
> 		if (PrintHelperUtil.getScaleToWidth() == 1	&& PrintHelperUtil.getScaleToHeight() == 1 && fitToPage) {
> 			bounds = getDiagramEditPart().getChildrenBounds();
> 		}		
> 							
1274a1369,1733
> 	/**
> 	 * Sets the scale factor.
> 	 * 
> 	 * @param scale : valid input is an integer larger than 0 representing a scale percentage 
> 	 */
> 	private void setUserScale(int scale){
> 		userScale = scale/100f;
> 		PrintHelperUtil.setScale(scale);
> 	}
> 				
> 	/**
> 	 * Prepare a string appropriate to show the scale factor to the user.
> 	 * 
> 	 * @param scale the scale factor, an integer greater than 0.
> 	 * @return A string of the scale factor to be displayed to the user.
> 	 */
> 	private String getDisplayScale(int scale) {
> 		return String.valueOf(scale) + "%"; //$NON-NLS-1$
> 	}
> 
> 	
> 	/**
> 	 * Determine the page count when fit to page is used.
> 	 * 
> 	 * @param dgrmEP - The diagram edit part
> 	 * @param figureBounds - The bounds of the figure
> 	 * @param pageSize - Page size  
> 	 * @param applyUserScale - The user scale
> 	 * @return Point.x contains the total number of pages that span in a column
> 	 *         Point.y contains the total number of pages that span in a row
> 	 */
> 	protected org.eclipse.draw2d.geometry.Point getPageCount(
> 			DiagramEditPart dgrmEP, Rectangle figureBounds,
> 			org.eclipse.draw2d.geometry.Point pageSize, boolean applyUserScale) {
> 		RootEditPart rootEditPart = dgrmEP.getRoot();
> 
> 		if (rootEditPart instanceof DiagramRootEditPart) {
> 
> 			DiagramRootEditPart diagramRootEditPart = (DiagramRootEditPart) rootEditPart;
> 			PageBreakEditPart pageBreakEditPart = diagramRootEditPart
> 					.getPageBreakEditPart();
> 
> 			double fNumCols = ((PageBreaksFigure) pageBreakEditPart.getFigure())
> 					.getPageCount().y
> 					* (applyUserScale ? userScale : 1);
> 
> 			double fNumRows = ((PageBreaksFigure) pageBreakEditPart.getFigure())
> 					.getPageCount().x
> 					* (applyUserScale ? userScale : 1);
> 
> 			int numCols = (int) Math.ceil(fNumCols);
> 			int numRows = (int) Math.ceil(fNumRows);
> 
> 			return new org.eclipse.draw2d.geometry.Point(numCols, numRows);
> 
> 		} else {
> 			double fNumRows = (figureBounds.height * (applyUserScale ? userScale : 1))
> 					/ pageSize.y;
> 			int numRows = (int) Math.ceil(fNumRows);
> 
> 			double fNumCols = (figureBounds.width * (applyUserScale ? userScale	: 1))
> 					/ pageSize.x;
> 			int numCols = (int) Math.ceil(fNumCols);
> 
> 			return new org.eclipse.draw2d.geometry.Point(numCols, numRows);
> 		}
> 	}
> 
> 	/**
> 	 * Reset the fit to page flag and set the user scale when the
> 	 * preview is triggered from the print dialog.
> 	 * 
> 	 * @param userScale a whole number greater than zero
> 	 */
> 	public void setPercentScaling(int userScale){
> 		fitToPage = false;
> 		setUserScale(userScale);
> 	}
> 	
> 	/**
> 	 * Recalculates a zoom ratio that can be used when displaying fit to page.
> 	 * 
> 	 * @param rows  The number of rows to fit the display to.
> 	 * @param columns The number of columns to fit the display to.
> 	 */
> 	public void setFitToPage(int width, int height) {
> 
> 		fitToPage = true;
> 
> 		initializeMapMode();
> 		
> 		Rectangle figureBounds = PrintHelperUtil.getPageBreakBounds(
> 				getDiagramEditPart(), true);
> 
> 		org.eclipse.draw2d.geometry.Point pageBounds = PageInfoHelper
> 				.getPageSize(getPreferenceStore(), getMapMode());
> 		org.eclipse.draw2d.geometry.Point pageCount = getPageCount(
> 				getDiagramEditPart(), figureBounds, pageBounds, false);
> 		int numCols = pageCount.x;
> 		int numRows = pageCount.y;
> 
> 		float actualWidth = 0;
> 		float actualHeight = 0;
> 
> 		if (height == 1 && width == 1) {
> 			figureBounds = getDiagramEditPart().getChildrenBounds();
> 			actualWidth = figureBounds.width;
> 			actualHeight = figureBounds.height;
> 		} else {
> 			actualWidth = numCols * pageBounds.x;
> 			actualHeight = numRows * pageBounds.y;
> 		}
> 
> 		int totalHeight = (height * pageBounds.y);
> 		int totalWidth = (width * pageBounds.x);
> 
> 		int vScale = (int) ((totalHeight * 100) / actualHeight);
> 		int hScale = (int) ((totalWidth * 100) / actualWidth);
> 
> 		setUserScale(Math.min(hScale, vScale));
> 	}
> 	
> 	
> 	/**
> 	 * A dialog that prompts the user for scaling the print settings
> 	 * to the number of pages wide and tall.
> 	 * Scale to Pages will affect zoom and offsets.  It will maximize the 
> 	 * scaling factor and modify offsets to fit the entire image within 
> 	 * the pages specified.
> 	 * 
> 	 * @author James Bruck (jbruck)
> 	 *
> 	 */
> 	private class FitToPagesDialog extends Dialog {
> 
> 		/**
> 		 *  The text field that holds the pages width
> 		 */
> 		private Text textWide;
> 		/**
> 		 *  The text field that holds the pages height
> 		 */
> 		private Text textTall;
> 		/**
> 		 *  The number of pages wide
> 		 */
> 		private int pagesWide = 0;
> 		/**
> 		 *  The number of pages tall
> 		 */
> 		private int pagesTall = 0;
> 		
> 		public FitToPagesDialog(Shell parent) {
> 			super(parent);
> 		}
> 		
> 		/*
> 		 * (non-Javadoc)
> 		 * @see org.eclipse.jface.window.Window#configureShell(org.eclipse.swt.widgets.Shell)
> 		 */
> 		protected void configureShell(Shell newShell) {
> 			super.configureShell(newShell);
> 
> 			newShell.setText(DiagramUIPrintingMessages.PrintPreview_FitToPage_DialogTitle);
> 		}
> 
> 		/**
> 		 * A helper that creates a label.
> 		 * 
> 		 * @param parent
> 		 * @param text
> 		 * @return a newly created label.
> 		 */
> 		Label label(Composite parent, String text) {
> 			Label result = new Label(parent, SWT.NONE);
> 			result.setText(text);
> 			return result;
> 		}
> 
> 		/**
> 		 * A helper that gets layout data or creates 
> 		 * it as necessary.
> 		 * 
> 		 * @param control
> 		 * @return GridData for the layout
> 		 */
> 		GridData getLayoutData(Control control) {
> 			GridData result = (GridData) control.getLayoutData();
> 
> 			if (result == null) {
> 				result = new GridData();
> 				control.setLayoutData(result);
> 			}
> 			return result;
> 		}
> 
> 		/**
> 		 * A helper to layout items horizontally.
> 		 * 
> 		 * @param control
> 		 * @param inset
> 		 * @return The layed out control
> 		 */
> 		Control layoutHorizontalIndent(Control control, int inset) {
> 			GridData data = getLayoutData(control);
> 			data.horizontalIndent = inset;
> 
> 			return control;
> 		}
> 
> 		/**
> 		 * A helper to right justify a control.
> 		 * 
> 		 * @param control
> 		 * @return The layed out control
> 		 */
> 		Control layoutAlignRight(Control control) {
> 			GridData data = getLayoutData(control);
> 
> 			data.horizontalAlignment = SWT.END;
> 			data.grabExcessHorizontalSpace = false;
> 
> 			return control;
> 		}
> 
> 		/**
> 		 * A helper to layout a certain number of dialog units wide.
> 		 * @param control
> 		 * @param dlus
> 		 * @return the aligned out control
> 		 */
> 		Control layoutWidth(Control control, int dlus) {
> 			if (dlus > 0) {
> 				GridData data = getLayoutData(control);
> 				data.widthHint = convertHorizontalDLUsToPixels(dlus);
> 			}
> 			return control;
> 		}
> 
> 		/**
> 		 * A helper that lays out the given control horizontally.
> 		 * 
> 		 * @param control
> 		 * @param grab
> 		 * @return The aligned control
> 		 */
> 		Control layoutFillHorizontal(Control control, boolean grab) {
> 			GridData data = getLayoutData(control);
> 
> 			data.horizontalAlignment = SWT.FILL;
> 			data.grabExcessHorizontalSpace = grab;
> 
> 			return control;
> 		}
> 
> 		/**
> 		 * A helper that creates a new text field.
> 		 * 
> 		 * @param parent
> 		 * @param width
> 		 * @return a newly created text field
> 		 */
> 		Text text(Composite parent, int width) {
> 			Text result = new Text(parent, SWT.SINGLE | SWT.BORDER);
> 			layoutFillHorizontal(result, false);
> 			layoutWidth(result, width);
> 
> 			return result;
> 		}
> 
> 		/**
> 		 * A helper that lays out a control grabbing both horizontal and
> 		 * vertical extra spacing.
> 		 * 
> 		 * @param control
> 		 * @return 
> 		 */
> 		Control layoutFillBoth(Control control) {
> 			GridData data = getLayoutData(control);
> 
> 			data.horizontalAlignment = SWT.FILL;
> 			data.grabExcessHorizontalSpace = true;
> 			data.verticalAlignment = SWT.FILL;
> 			data.grabExcessVerticalSpace = true;
> 
> 			return control;
> 		}
> 
> 		/**
> 		 * A helper that creates a new group.
> 		 * 
> 		 * @param parent
> 		 * @param text
> 		 * @return A newly created group.
> 		 */
> 		Group group(Composite parent, String text) {
> 			Group result = new Group(parent, SWT.NONE);
> 			result.setText(text);
> 			layoutFillBoth(result);
> 			return result;
> 		}
> 
> 		/**
> 		 * Layout the given control with the number of columns specified.
> 		 * 
> 		 * @param composite
> 		 * @param columns
> 		 * @return The aligned out control
> 		 */
> 		Composite layout(Composite composite, int columns) {
> 			GridLayout g = new GridLayout(columns, false);
> 			g.marginLeft = 6;
> 			g.marginRight = 6;
> 			g.marginTop = 6;
> 			g.marginBottom = 3;
> 			composite.setLayout(g);
> 
> 			return composite;
> 		}
> 
> 		/*
> 		 * (non-Javadoc)
> 		 * @see org.eclipse.jface.dialogs.Dialog#createDialogArea(org.eclipse.swt.widgets.Composite)
> 		 */
> 		protected Control createDialogArea(Composite parent) {
> 
> 			Composite composite = new Composite(parent, SWT.NONE);
> 			layout(composite, 1);
> 			Composite scaleGroup = group(composite,
> 					DiagramUIPrintingMessages.JPSPrintDialog_Scaling);
> 			layout(scaleGroup, 5);
> 
> 			layoutHorizontalIndent(layoutAlignRight(label(scaleGroup,
> 					DiagramUIPrintingMessages.JPSPrintDialog_PagesWide)), 15);
> 
> 			textWide = text(scaleGroup, 20);
> 			textWide.setText(String.valueOf(PrintHelperUtil.getScaleToWidth()));
> 
> 			layoutHorizontalIndent(layoutAlignRight(label(scaleGroup,
> 					DiagramUIPrintingMessages.JPSPrintDialog_PagesTall)), 15);
> 			textTall = text(scaleGroup, 20);
> 			textTall
> 					.setText(String.valueOf(PrintHelperUtil.getScaleToHeight()));
> 
> 			return composite;
> 		}
> 
> 		public int getPagesWide() {
> 			return pagesWide;
> 		}
> 
> 		public int getPagesTall() {
> 			return pagesTall;
> 		}
> 
> 		/*
> 		 * (non-Javadoc)
> 		 * @see org.eclipse.jface.dialogs.Dialog#okPressed()
> 		 */
> 		@Override
> 		protected void okPressed() {
> 			pagesWide = Integer.parseInt(textWide.getText());
> 			pagesTall = Integer.parseInt(textTall.getText());
> 			super.okPressed();
> 		}
1275,1276d1368
< 	public void setUserScale(double userScale){
< 		this.userScale = userScale;
