1707,1708d1706
< 		// constraint
< 		createConstraintAnnotations();
1820a1819,1840
> 			 "ref", "target"
> 		   });								
> 		addAnnotation
> 		  (domainElementTargetEClass, 
> 		   source, 
> 		   new String[] {
> 			 "def", "context",
> 			 "ocl", "element"
> 		   });				
> 		addAnnotation
> 		  (diagramElementTargetEClass, 
> 		   source, 
> 		   new String[] {
> 			 "def", "context",
> 			 "ocl", "if element.oclIsKindOf(NodeMapping) then \'notation::Node\' else \'notation::Edge\' endif"
> 		   });				
> 		addAnnotation
> 		  (notationElementTargetEClass, 
> 		   source, 
> 		   new String[] {
> 			 "def", "context",
> 			 "ocl", "element"
1821,1821c1847,1847
< 			 "ocl", "target"
---
> 			 "ref", "target"
1828,1828d1846
< 			 "ocl", "target.getContext()"
1830,1839d1848
< 	}
< 
< 	/**
< 	 * Initializes the annotations for <b>constraint</b>.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	protected void createConstraintAnnotations() {
< 		String source = "constraint";																				
1840a1850,1850
> 		  (getMetricRule_Rule(), 
1841,1841d1849
< 		  (getCanvasMapping_DomainMetaElement(), 
1843a1853,1861
> 			 "def", "type",
> 			 "ocl", "\'ecore::EDoubleObject\'"
> 		   });					
> 		addAnnotation
> 		  (auditedMetricTargetEClass, 
> 		   source, 
> 		   new String[] {
> 			 "def", "context",
> 			 "ocl", "\'ecore::EDoubleObject\'"
1843a1978,1981
> 		  (getCanvasMapping_DomainMetaElement(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not domainMetaElement.oclIsUndefined() implies not(domainMetaElement.abstract or domainMetaElement.interface)",
1844,1844d1977
< 			 "ocl", "not domainMetaElement.oclIsUndefined implies not(domainMetaElement.isAbstract or domainMetaElement.isInterface)",
1845,1845c1982,1982
< 			 "description", "Top-level diagram container must be concrete"
---
> 			 "description", "Top-level diagram container must be concrete"
1845a1983,1991
> 		   });			
> 		addAnnotation
> 		  (getLabelMapping_Features(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "features->forAll(f | f.eContainingClass.isSuperTypeOf(mapEntry.domainMetaElement))",
> 			 "description", "Label attributes must be available in \'Domain Element\' EClass of the labeled mapping entry"
> 		   });							
> 		addAnnotation
1857a1874,1879
> 		  (this, 
> 		   source, 
> 		   new String[] {
> 			 "import", "platform:/resource/org.eclipse.gmf.runtime.notation/model/notation.ecore"
> 		   });		
> 		addAnnotation
1861,1861c1883,1883
< 			 "ocl", "nodes->forAll(n|n.containmentFeature.oclIsUndefined() and not n.domainMetaElement.oclIsUndefined() implies links->exists(let r:ecore::EReference= linkMetaFeature.oclAsType(ecore::EReference) in r.containment and r.eReferenceType.isSuperTypeOf(n.domainMetaElement)))",
---
> 			 "ocl", "nodes->forAll(n|n.containmentFeature.oclIsUndefined() and not n.child.domainMetaElement.oclIsUndefined() implies links->exists(let r:ecore::EReference= linkMetaFeature.oclAsType(ecore::EReference) in r.containment and r.eReferenceType.isSuperTypeOf(n.child.domainMetaElement)))",
1864a1887,1893
> 		  (getMappingEntry_DomainSpecialization(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not domainSpecialization.oclIsUndefined() implies not domainMetaElement.oclIsUndefined()",
> 			 "description", "Using \'Domain Specialization\' requires \'Domain Meta Element\' to be set"
> 		   });				
> 		addAnnotation
1879,1879d1907
< 		  (nodeMappingEClass, 
1882,1882c1932,1932
< 			 "ocl", "not (domainMetaElement.oclIsUndefined()  and containmentFeature.oclIsUndefined())",
---
> 			 "ocl", "not (ownedChild.oclIsUndefined() and referencedChild.oclIsUndefined())",
1883,1883c1933,1933
< 			 "description", "Either domain meta element or containment feature must be set in node mapping"
---
> 			 "description", "Either \'ownedChild\' or \'referencedChild\' NodeMapping must be set"
1885a1936,1936
> 		  (childReferenceEClass, 
1886,1886d1935
< 		  (nodeMappingEClass, 
1888a1908,1917
> 		  (nodeReferenceEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not (child.domainMetaElement.oclIsUndefined() and containmentFeature.oclIsUndefined())",
> 			 "description", "Either \'domainMetaElement\' or \'containmentFeature\' must be specified"
> 		   });		
> 		addAnnotation
> 		  (nodeReferenceEClass, 
> 		   source, 
> 		   new String[] {
1888a1939,1947
> 			 "ocl", "not childrenFeature.oclIsUndefined() implies childrenFeature.eContainingClass.isSuperTypeOf(parentNode.domainMetaElement)",
> 			 "description", "\'Children Feature\' must be owned by \'Domain Meta Element\' or its super type of this reference parent Node Mapping"
> 		   });		
> 		addAnnotation
> 		  (childReferenceEClass, 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not containmentFeature.oclIsUndefined() implies containmentFeature.eContainingClass.isSuperTypeOf(parentNode.domainMetaElement)",
> 			 "description", "\'Children Feature\' must be owned by \'Domain Meta Element\' or its super type of this reference parent Node Mapping"
1889,1889c1918,1918
< 			 "ocl", "not domainMetaElement.oclIsUndefined() implies containmentFeature.oclIsUndefined() or containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement)",
---
> 			 "ocl", "not containmentFeature.oclIsUndefined() implies containmentFeature.eReferenceType.isSuperTypeOf(child.domainMetaElement)",
1890a1920,1929
> 		   });		
> 		addAnnotation
> 		  (getNodeReference_ChildrenFeature(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not childrenFeature.oclIsUndefined() implies childrenFeature.eReferenceType.isSuperTypeOf(child.domainMetaElement)",
> 			 "description", "\'Children Feature\' must reference the same class or super type of \'Domain Meta Element\' of the referenced node"
> 		   });		
> 		addAnnotation
> 		  (childReferenceEClass, 
1890,1890c1919,1919
< 			 "description", "\'Domain Element\' must be the same or extend the type referenced by \'Containment Feature\'"
---
> 			 "description", "\'Containment Feature\' must reference the same class or super type of \'Domain Meta Element\' of the referenced node"
1933a2005,2032
> 		addAnnotation
> 		  (getAuditContainer_Id(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not parentContainer.oclIsUndefined() implies parentContainer.childContainers->one(i | i.id = self.id)",
> 			 "description", "Audit container with the same ID already exists"
> 		   });									
> 		addAnnotation
> 		  (getAuditRule_Id(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not id.oclIsUndefined() implies container.audits->one(i | i.id = self.id)",
> 			 "description", "Audit rule with the same ID already exists"
> 		   });																		
> 		addAnnotation
> 		  (getNotationElementTarget_Element(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "element.oclIsKindOf(notation::View)",
> 			 "description", "Notation model element expected"
> 		   });			
> 		addAnnotation
> 		  (getMetricRule_Key(), 
> 		   source, 
> 		   new String[] {
> 			 "ocl", "not key.oclIsUndefined() implies container.metrics->one(i | i.key = self.key)",
> 			 "description", "Metric rule with the same \'key\' already exists"
> 		   });										
