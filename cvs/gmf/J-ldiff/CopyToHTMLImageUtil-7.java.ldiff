52a53,53
> import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
123,123c124,124
< 		createHTMLFileForTiledImage(destination, exportInfo.commonTileFileName,
---
> 		createHTMLFileForTiledImage(destination, exportInfo);
124,125d124
< 				format.getName().toLowerCase(), exportInfo.tiles.y,
< 				exportInfo.tiles.x);
147a147,183
> 		createHTMLFileForTiledImage(destination, exportInfo);
> 	}
> 	
> 	/**
> 	 * Generates image files and returns the HTML content as a String
> 	 * 
> 	 * @param diagram diagram model
> 	 * @param destination a path to image files with common image file name
> 	 * @param format image format
> 	 * @param monitor progress monitor
> 	 * @return HTML content as a string
> 	 * @throws CoreException
> 	 */
> 	public String generateHTMLImage(Diagram diagram, IPath destination, ImageFileFormat format, IProgressMonitor monitor) throws CoreException {
> 		ExportInfo exportInfo = null;
> 		DiagramEditor openedDiagramEditor = DiagramEditorUtil
> 				.findOpenedDiagramEditorForID(ViewUtil.getIdStr(diagram));
> 		if (openedDiagramEditor != null) {
> 			DiagramEditPart diagramEditPart = openedDiagramEditor
> 					.getDiagramEditPart();
> 			exportInfo = copyToImageAndReturnInfo(diagramEditPart,
> 					diagramEditPart.getPrimaryEditParts(), destination, format,
> 					monitor);
> 		} else {
> 			Shell shell = new Shell();
> 			try {
> 				DiagramEditPart diagramEditPart = createDiagramEditPart(
> 						diagram, shell, null);
> 				Assert.isNotNull(diagramEditPart);
> 				exportInfo = copyToImageAndReturnInfo(diagramEditPart,
> 						diagramEditPart.getPrimaryEditParts(), destination,
> 						format, monitor);
> 			} finally {
> 				shell.dispose();
> 			}
> 		}
> 		return createHTMLString(exportInfo);
148,150d146
< 		createHTMLFileForTiledImage(destination, exportInfo.commonTileFileName,
< 				format.getName().toLowerCase(), exportInfo.tiles.y,
< 				exportInfo.tiles.x);
181,181c214,214
< 	private Point exportImage(DiagramGenerator gen, List editParts,
---
> 	private ExportInfo exportImage(DiagramGenerator gen, List editParts,
182a216,216
> 			ImageFileFormat imageFormat, Dimension logTileSize,
182a221,222
> 		int logTileWidth = logTileSize.width;
> 		int logTileHeight = logTileSize.height;
183,183d220
< 			ImageFileFormat imageFormat, int logTileWidth, int logTileHeight,
224a260,260
> 		return new ExportInfo(gen, new Point(columns, rows), fileName, destinationFolder, imageFormat, new Dimension(logTileWidth, logTileHeight));
225,225d259
< 		return new Point(columns, rows);
243a279,279
> 			ExportInfo info) {
244,244d278
< 			String fileName, String fileExtension, int numRows, int numColumns) {
248a301,332
> 	private String createHTMLString(ExportInfo info) {
> 		Assert.isNotNull(info);
> 		StringBuffer buffer = new StringBuffer(
> 				"<html>\n<body>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" align=\"CENTER\">\n");//$NON-NLS-1$
> 		String commonFileNamePath = new Path("file://", info.directory.toString()).append(info.commonTileFileName).makeAbsolute().toString(); 
> 		for (int i = 0; i < info.tiles.y; i++) {
> 			buffer.append("<tr>\n");//$NON-NLS-1$
> 			for (int j = 0; j < info.tiles.x; j++) {
> 				String fileName = commonFileNamePath
> 						+ getTileImageFileNameIndexDelimiter() + i
> 						+ getTileImageFileNameIndexDelimiter() + j
> 						+ StringStatics.PERIOD
> 						+ info.imageFormat.getName().toLowerCase();
> 				if (ImageFileFormat.SVG.equals(info.imageFormat)) {
> 					buffer.append("\t<td>\n\t\t<object data=\"");//$NON-NLS-1$
> 					buffer.append(fileName);
> 					buffer.append("\" type=\"image/svg+xml\" width=\"");//$NON-NLS-1$
> 					buffer.append(info.tileSize.width);//$NON-NLS-1$
> 					buffer.append("\" height=\"");
> 					buffer.append(info.tileSize.height);
> 					buffer.append("\">\n");//$NON-NLS-1$
> 					buffer.append("\t\t<embed src=\"");//$NON-NLS-1$
> 					buffer.append(fileName);
> 					buffer.append("\" type=\"image/svg+xml\" width=\"");//$NON-NLS-1$
> 					buffer.append(info.tileSize.width);
> 					buffer.append("\" height=\"");//$NON-NLS-1$
> 					buffer.append(info.tileSize.height);
> 					buffer.append("\"/></td>\n");
> 				} else {
> 					buffer.append("\t<td><img src=\"");//$NON-NLS-1$
> 					buffer.append(fileName);
> 					buffer.append("\"/></td>\n");//$NON-NLS-1$
248a284,284
> 					.write(createHTMLString(info));
249,257d300
< 					.write("<html>\n<body>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" align=\"RIGHT\">\n");//$NON-NLS-1$
< 			for (int i = 0; i < numRows; i++) {
< 				out.write("<tr>\n");//$NON-NLS-1$
< 				for (int j = 0; j < numColumns; j++) {
< 					out.write("\t<td><img src=\"");//$NON-NLS-1$
< 					out.write(fileName + getTileImageFileNameIndexDelimiter()
< 							+ i + getTileImageFileNameIndexDelimiter() + j
< 							+ StringStatics.PERIOD + fileExtension);
< 					out.write("\"></td>\n");//$NON-NLS-1$
258,258c333,333
< 				}
---
> 				}
259,259d333
< 				out.write("</tr>\n");//$NON-NLS-1$
260a335,336
> 			buffer.append("</tr>\n");//$NON-NLS-1$
> 		}
260,260c334,334
< 			}
---
> 			}
261a338,340
> 		return buffer.toString();
> 	}
> 
261,261c337,337
< 			out.write("</table>\n</body>\n</html>");//$NON-NLS-1$
---
> 		buffer.append("</table>\n</body>\n</html>");//$NON-NLS-1$
316a380,386
> 	public class ExportInfo {
> 		final public DiagramGenerator diagramGenerator;
> 		final public Point tiles;
> 		final public String commonTileFileName;
> 		final public IPath directory;
> 		final public ImageFileFormat imageFormat;
> 		final public Dimension tileSize;
317,320d379
< 	private class ExportInfo {
< 		DiagramGenerator diagramGenerator;
< 		Point tiles;
< 		String commonTileFileName;
322a389,389
> 				String commonTileFileName, IPath directory, ImageFileFormat imageFormat, Dimension tileSize) {
323,323d388
< 				String commonTileFileName) {
326a393,395
> 			this.directory = directory;
> 			this.imageFormat = imageFormat;
> 			this.tileSize = tileSize;
348,348c417,417
< 	private ExportInfo copyToImageAndReturnInfo(DiagramEditPart diagramEP,
---
> 	public ExportInfo copyToImageAndReturnInfo(DiagramEditPart diagramEP,
352a422,422
> 		IMapMode mm = MapModeUtil.getMapMode(
353,353d421
< 		Dimension dimension = (Dimension) MapModeUtil.getMapMode(
354a424,425
> 
> 		Dimension dimension = (Dimension) mm.DPtoLP(
354,354c423,423
< 				diagramEP.getFigure()).DPtoLP(
---
> 				diagramEP.getFigure()); 
367a439,447
> 		ExportInfo info  = exportImage(gen, selection, destinationFolder, fileName,
> 				format, dimension, monitor);
> 		
> 		/*
> 		 * The tile dimension returned with the ExportInfo object is in logical units. We need to translate it
> 		 * to the device units - pixels. We can't simply use the pixel tile size from the imageFormatToTilesSizeMap
> 		 * since tile size (x,y), where x<=0 and y<=0 will use the diagram width and/or height 
> 		 */
> 		mm.LPtoDP(info.tileSize);
368,369d438
< 		Point tiles = exportImage(gen, selection, destinationFolder, fileName,
< 				format, dimension.width, dimension.height, monitor);
370a449,449
> 		return info;
371,371d448
< 		return new ExportInfo(gen, tiles, fileName);
423,423c501,501
< 		return createTilesPartsInfoList(exportInfo, partsInfo, format);
---
> 		return createTilesPartsInfoList(exportInfo);
441,441c519,519
< 	private List<List<List<PartPositionInfo>>> createTilesPartsInfoList(
---
> 	public static List<List<List<PartPositionInfo>>> createTilesPartsInfoList(
442a521,521
> 		List partsInfo = exportInfo.diagramGenerator.getDiagramPartInfo();
442,442c520,520
< 			ExportInfo exportInfo, List partsInfo, ImageFileFormat format) {
---
> 			ExportInfo exportInfo) {
458,458c537,537
< 				Dimension tileSize = imageFormatToTileSizeMap.get(format);
---
> 				Dimension tileSize = exportInfo.tileSize;
607,607c686,686
< 	private List<List<List<PartPositionInfo>>> initializeTilesPartsInfoList(
---
> 	private static List<List<List<PartPositionInfo>>> initializeTilesPartsInfoList(
629,629c708,708
< 	private class LineSegmentPointsComparator implements Comparator<Point> {
---
> 	private static class LineSegmentPointsComparator implements Comparator<Point> {
667,667c746,746
< 	private HashMap<Point, LineSeg> getMapOfLineSegments(Point startPoint,
---
> 	private static HashMap<Point, LineSeg> getMapOfLineSegments(Point startPoint,
721,721c800,800
< 			Collections.sort(linePoints, new LineSegmentPointsComparator(
---
> 			Collections.sort(linePoints, new CopyToHTMLImageUtil.LineSegmentPointsComparator(
780,780c859,859
< 	private List<Point> createCellPolyline(Dimension cellSize,
---
> 	private static List<Point> createCellPolyline(Dimension cellSize,
817,817c896,896
< 	private List<Point> connectLineSegmentsEndsViaCellEdges(Dimension cellSize,
---
> 	private static List<Point> connectLineSegmentsEndsViaCellEdges(Dimension cellSize,
839,839c918,918
< 	private List<Point> createClockwiseListOfCellVertices(Dimension cellSize) {
---
> 	private static List<Point> createClockwiseListOfCellVertices(Dimension cellSize) {
858,858c937,937
< 	private int indexOfCellEdgePointClockwise(Dimension cellSize, Point pt) {
---
> 	private static int indexOfCellEdgePointClockwise(Dimension cellSize, Point pt) {
