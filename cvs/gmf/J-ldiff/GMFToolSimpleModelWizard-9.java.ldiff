13a14,15
> import java.util.List;
> 
14a17,17
> import org.eclipse.emf.ecore.EClass;
15a19,21
> import org.eclipse.emf.ecore.EPackage;
> import org.eclipse.emf.ecore.resource.Resource;
> import org.eclipse.gmf.internal.bridge.resolver.DomainModelSourceImpl;
17a24,24
> import org.eclipse.gmf.internal.bridge.ui.Plugin;
20a28,28
> import org.eclipse.gmf.internal.common.ui.ModelSelectionPage;
21a30,30
> import org.eclipse.gmf.tooldef.ToolRegistry;
28a38,70
> 	protected ModelSelectionPage toolingModelSelectionPage;
> 
> 	protected DefinitionPage toolingDefinitionPage;
> 
> 	protected WizardOperationMode mode = new WizardOperationMode("gmftool", WizardOperationMode.CREATE); //$NON-NLS-1$
> 
> 	public void setMode(String mode) {
> 		this.mode.setMode(mode);
> 	}
> 
> 	/**
> 	 * Returns true if wizard operates in reconcile mode.
> 	 * Resource must be available if returns true.
> 	 */
> 	protected boolean isInReconcileMode() {
> 		return toolingModelSelectionPage != null && toolingModelSelectionPage.getResource() != null;
> 	}
> 
> 	public boolean performFinish() {
> 		if (isInReconcileMode()) {
> 			reconcileModel();
> 			try {
> 				WizardUtil.saveModel(getContainer(), toolingModelSelectionPage.getResource());
> 			} catch (Exception exception) {
> 				Plugin.log(exception);
> 				return false;
> 			}
> 			WizardUtil.openEditor(toolingModelSelectionPage.getResource().getURI());
> 			return true;
> 		} else {
> 			return super.performFinish();
> 		}
> 	}
29,29d37
< 	protected DefinitionPage toolDefinitionPage;
31a73,90
> 		ToolDefBuilder builder = new ToolDefBuilder(null);
> 		return builder.process(toolingDefinitionPage.getModel());
> 	}
> 
> 	@SuppressWarnings("unchecked")
> 	protected void reconcileModel() {
> 		ToolRegistry existingToolRegistry = null;
> 		for (EObject element : (List<? extends EObject>) toolingModelSelectionPage.getResource().getContents()) {
> 			if (element instanceof ToolRegistry) {
> 				existingToolRegistry = (ToolRegistry) element;
> 				break;
> 			}
> 		}
> 		ToolDefBuilder builder = new ToolDefBuilder(existingToolRegistry);
> 		ToolRegistry toolRegistry = builder.process(toolingDefinitionPage.getModel());
> 		if (toolRegistry != null && existingToolRegistry != toolRegistry) {
> 			toolingModelSelectionPage.getResource().getContents().add(toolRegistry);
> 		}
32,33d72
< 		ToolDefBuilder builder = new ToolDefBuilder();
< 		return builder.process(toolDefinitionPage.getModel());
36a94,96
> 		ResourceLocationProvider rloc = new ResourceLocationProvider(selection);
> 		if (mode.detectReconcile(rloc)) {
> 			toolingModelSelectionPage = new ModelSelectionPage("ToolingModelSelectionPage", rloc) { //$NON-NLS-1$
37,37d93
< 		super.addPages();
38a98,112
> 				protected String getModelFileExtension() {
> 					return "gmftool"; //$NON-NLS-1$
> 				}
> 
> 				protected void setResource(Resource resource) {
> 					super.setResource(resource);
> 					setPageComplete(getResource() != null);
> 				}
> 			};
> 			toolingModelSelectionPage.setPageComplete(false);
> 			toolingModelSelectionPage.setTitle("Tooling Definition Model");
> 			toolingModelSelectionPage.setDescription("Select tooling definition model to update. New tools will be added to this model.");
> 			addPage(toolingModelSelectionPage);
> 		} else {
> 			super.addPages();
44a119,119
> 		}
46,46d120
< 		ResourceLocationProvider rloc = new ResourceLocationProvider(selection);
47,47c121,121
< 		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", rloc);
---
> 		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", rloc); //$NON-NLS-1$
51a126,140
> 		toolingDefinitionPage = new DefinitionPage("ToolingDefinitionPage", new StructureBuilder(new StructureResolver(), false), domainModelSelectionPage) { //$NON-NLS-1$
> 
> 			protected DomainModelSourceImpl createDomainModelSource(EPackage contents, EClass diagramElement) {
> 				if (isInReconcileMode()) {
> 					return new DomainModelSourceImpl(contents, diagramElement) {
> 
> 						public boolean isDisabled(EObject domainElement) {
> 							return ToolDefBuilder.getCreationTool(toolingModelSelectionPage.getResource().getAllContents(), domainElement) != null;
> 						}
> 					};
> 				}
> 				return super.createDomainModelSource(contents, diagramElement);
> 			}
> 		};
> 		toolingDefinitionPage.setTitle("Tooling Definition");
52,53d125
< 		toolDefinitionPage = new DefinitionPage("ToolDefinitionPage", new StructureBuilder(new StructureResolver(), false), domainModelSelectionPage); //$NON-NLS-1$
< 		toolDefinitionPage.setTitle("Tooling Definition");
54,54c141,141
< 		toolDefinitionPage.setDescription("Specify basic tooling definition of the domain model");
---
> 		toolingDefinitionPage.setDescription("Specify basic tooling definition of the domain model");
55,55c142,142
< 		addPage(toolDefinitionPage);
---
> 		addPage(toolingDefinitionPage);
