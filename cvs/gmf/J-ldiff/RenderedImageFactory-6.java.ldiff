28a29,29
> import org.eclipse.gmf.runtime.draw2d.ui.render.internal.AbstractRenderedImage;
53a55,55
> 	 * @param fill
54a57,62
> 	 *            into image formats that support dynamic color replacement.
> 	 *            Typically, this would replace colors in the image which are
> 	 *            "white" i.e. RGB(255,255,255)
> 	 * @param outline
> 	 *            the <code>Color</code> of the outline that could
> 	 *            instrumented into image formats that support dynamic color
54,54c56,56
< 	 * @param fill the <code>Color</code> of the fill that could instrumented into image formats that
---
> 	 *            the <code>Color</code> of the fill that could instrumented
55,55c63,63
< 	 * support dynamic color replacement.  Typically, this would replace colors in the image which are "white"
---
> 	 *            replacement. Typically, this would replace colors in the image
56,58d63
< 	 * i.e. RGB(255,255,255)
< 	 * @param outline the <code>Color</code> of the outline that could instrumented into image formats that
< 	 * support dynamic color replacement.  Typically, this would replace colors in the image which are "black"
59,59c64,64
< 	 * i.e. RGB(0,0,0)
---
> 	 *            which are "black" i.e. RGB(0,0,0)
61,61c66,66
< 	 *            <code>boolean</code> <code>true</code> if aspect ratio of original vector file is
---
> 	 *            <code>boolean</code> <code>true</code> if aspect ratio of
62a68,68
> 	 *            otherwise
62,62c67,67
< 	 *            maintained, <code>false</code> otherwise
---
> 	 *            original vector file is maintained, <code>false</code>
63a70,72
> 	 *            <code>boolean</code> <code>true</code> if the image is to
> 	 *            be rendered using anti-aliasing (removing "jaggies" producing
> 	 *            smoother lines), <code>false</code> otherwise
64,65d69
< 	 * 			  <code>boolean</code> <code>true</code> if the image is to be rendered using anti-aliasing
< 	 * 			 (removing "jaggies" producing smoother lines), <code>false</code> otherwise
66,66c73,73
< 	 * @return <code>RenderInfo</code> object that contains information about the rendered
---
> 	 * @return <code>RenderInfo</code> object that contains information about
67,67c74,74
< 	 *         image.
---
> 	 *         the rendered image.
89,89c96,96
< 	 * instance of the immutable class <code>RenderedImage</code>. This method is used to read
---
> 	 * instance of the immutable class <code>RenderedImage</code>. This
90,90c97,97
< 	 * svg images from JARs.
---
> 	 * method is used to read svg images from JARs.
94a102,102
> 	 *         requested.
94,94c101,101
< 	 * @return <code>RenderedImage</code> instance with the size dimensions requested.
---
> 	 * @return <code>RenderedImage</code> instance with the size dimensions
102,102c110,110
< 	 * instance of the immutable class <code>RenderedImage</code>. This method is used to read
---
> 	 * instance of the immutable class <code>RenderedImage</code>. This
103,103c111,111
< 	 * svg images from JARs.
---
> 	 * method is used to read svg images from JARs.
111a120,120
> 	 *         requested.
111,111c119,119
< 	 * @return <code>RenderedImage</code> instance with the size dimensions requested.
---
> 	 * @return <code>RenderedImage</code> instance with the size dimensions
140,140c149,149
< 	 * @return <code>RenderedImage</code> instance with the size dimensions requested.
---
> 	 * @return <code>RenderedImage</code> instance with the size dimensions
140a150,150
> 	 *         requested.
152a163,165
> 	 *            <code>RenderInfo</code> object containing information about
> 	 *            the size and general data regarding how the image will be
> 	 *            rendered.
153,154d162
< 	 * 			  <code>RenderInfo</code> object containing information about the size and general data
< 	 *            regarding how the image will be rendered.
155a167,167
> 	 *         requested.
155,155c166,166
< 	 * @return <code>RenderedImage</code> instance with the size dimensions requested.
---
> 	 * @return <code>RenderedImage</code> instance with the size dimensions
181,181c193,193
< 	 *            <code>byte[]</code> array containing an cached SVG image file.
---
> 	 *            <code>byte[]</code> array containing an cached SVG image
181a194,194
> 	 *            file.
182,182c195,195
< 	 * @return the <code>RenderedImage</code> that encapsulates the contents of the given byte buffer.
---
> 	 * @return the <code>RenderedImage</code> that encapsulates the contents
182a196,196
> 	 *         of the given byte buffer.
188a203,233
> 	 * Returns a related instance of the given <code>RenderedImage</code> that
> 	 * is based on the same byte stream or file info but instrumented for the
> 	 * passed in <code>RenderInfo</code> object
> 	 * 
> 	 * @param image
> 	 *            <code>RenderedImage</code> that is used as a base to
> 	 *            retrieve the related instance.
> 	 * @param info
> 	 *            <code>RenderInfo</code> object containing information about the size 
> 	 *            and general data regarding how the image will be rendered.
> 	 * @return <code>RenderedImage</code> instance with the size dimensions
> 	 *         requested.  May return <code>null</code> if no related instance
> 	 *         can be found or if the original buffer cannot be retrieved.
> 	 */
> 	static public RenderedImage getRelatedInstance(RenderedImage image, RenderInfo info) {
> 		if (image instanceof AbstractRenderedImage) {
> 			RenderedImageKey oldKey = ((AbstractRenderedImage)image).getKey();
> 			RenderedImageKey key = new RenderedImageKey(oldKey.getChecksum(), info, oldKey.getExtraData());
> 			WeakReference ref = (WeakReference)instanceMap.get(key);
> 			if (ref != null) {
> 				return (RenderedImage)ref.get();
> 			}
> 			else {
> 				return autodetectImage(((AbstractRenderedImage)image).getBuffer(), key);
> 			}
> 		}
> 		
> 		return null;
> 	}
> 	
> 	/**
197,197c242,242
< 	 * @return <code>RenderedImage</code> instance with the size dimensions requested.
---
> 	 * @return <code>RenderedImage</code> instance with the size dimensions
197a243,243
> 	 *         requested.
205,205c251,251
< 		final RenderedImageKey key = new RenderedImageKey(checksum.getValue(), info);
---
> 		final RenderedImageKey key = new RenderedImageKey(checksum.getValue(), info, null);
209a256,263
> 		else
> 			image = autodetectImage(buffer, key);
> 	
> 		return image;
> 	}
> 
> 	private static RenderedImage autodetectImage(byte[] buffer, final RenderedImageKey key) {
> 		RenderedImage image = null;
211,211c288,288
< 		if (image == null) {
---
> 		if (image != null) {
235,235d287
< 			if (image != null)
