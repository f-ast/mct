23,23c23,23
< import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;
---
> import org.eclipse.gef.commands.CompoundCommand;
24,24c24,24
< import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
---
> import org.eclipse.gef.commands.UnexecutableCommand;
33,33d32
< import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
945,953d943
< 	 * Applies changes to all pages in the dialog
< 	 */
< 	public boolean performOk() {
< 		if (sortChanged || filterChanged)
< 			performApply();
< 		return true;
< 	}
< 
< 	/**
958,958c966,966
< 		if (pageType == CHILD_PAGE) {
---
> 		if (pageType == CHILD_PAGE) {
969,969c1008,1008
< 		} else if (pageType == ROOT_PAGE) {
---
> 		} else if (pageType == ROOT_PAGE) {
970,970d1008
< 
971,971c1009,1009
< 			PreferenceManager preferenceManager =
---
> 			PreferenceManager preferenceManager =
972,972c1010,1010
< 				((SortFilterDialog) getContainer()).getPreferenceManager();
---
> 				((SortFilterDialog) getContainer()).getPreferenceManager();
973,973c1011,1011
< 			Iterator nodes =
---
> 			Iterator nodes =
974,974c1012,1012
< 				preferenceManager
---
> 				preferenceManager
975,975c1013,1013
< 					.getElements(PreferenceManager.PRE_ORDER)
---
> 					.getElements(PreferenceManager.PRE_ORDER)
976,976c1014,1014
< 					.iterator();
---
> 					.iterator();
977,977c1015,1015
< 			SortFilterRootPreferenceNode rootNode = null;
---
> 			SortFilterRootPreferenceNode rootNode = null;
977a1016,1018
> 			CompoundCommand cc = new CompoundCommand(
> 	            DiagramUIMessages.Command_SortFilterCommand);
> 	        while (nodes.hasNext()) {
978,981d1015
< 			CompositeTransactionalCommand cc = new CompositeTransactionalCommand(
<                 editPart.getEditingDomain(),
<                 DiagramUIMessages.Command_SortFilterCommand);
<             while (nodes.hasNext()) {
982,982c1019,1019
< 				PreferenceNode node = (PreferenceNode) nodes.next();
---
> 				PreferenceNode node = (PreferenceNode) nodes.next();
983,983c1020,1020
< 				SortFilterPage page = (SortFilterPage) node.getPage();
---
> 				SortFilterPage page = (SortFilterPage) node.getPage();
984,984c1021,1021
< 				if (page == this) {
---
> 				if (page == this) {
985,985c1022,1022
< 					rootNode = (SortFilterRootPreferenceNode) node;
---
> 					rootNode = (SortFilterRootPreferenceNode) node;
986,986c1023,1023
< 					continue;
---
> 					continue;
987a1025,1025
> 	
987,987c1024,1024
< 				}
---
> 				}
988,988d1024
< 
989,989c1026,1026
< 				// We must build the page if it is already not done because each
---
> 				// We must build the page if it is already not done because each
990,990c1027,1027
< 				// page
---
> 				// page
991,991c1028,1028
< 				// in the dialog knows how to filter itself.
---
> 				// in the dialog knows how to filter itself.
992,992c1029,1029
< 				((SortFilterDialog) rootNode.getPreferenceDialog()).showPage(
---
> 				((SortFilterDialog) rootNode.getPreferenceDialog()).showPage(
993a1031,1031
> 	
993,993c1030,1030
< 					node);
---
> 					node);
994,994d1030
< 
995,995c1032,1032
< 				// We set the child's filter criteria to the root's
---
> 				// We set the child's filter criteria to the root's
996,996c1033,1033
< 				// criteria if the child is using the same filtering criteria.
---
> 				// criteria if the child is using the same filtering criteria.
997,997c1034,1034
< 				if (compareFilters(page.getFilterList())) {
---
> 				if (compareFilters(page.getFilterList())) {
998,998c1035,1035
< 					page.setFilterCriteria(filters.getItems());
---
> 					page.setFilterCriteria(filters.getItems());
999,999c1036,1036
< 					page.setCriteria(filterList.getItems());
---
> 					page.setCriteria(filterList.getItems());
1000a1038,1039
> 				}				
> 				cc.add(page.getApplyCommand());
1000,1000c1037,1037
< 					page.filterItemsFromList();
---
> 					page.filterItemsFromList();
1001,1006d1037
< 				}
< 				
< 				
< 				//page.performApply();
< 				
< 				cc.compose(new CommandProxy(page.getApplyCommand()));
1007,1007c1040,1040
< 			}
---
> 			}
1007a1041,1041
> 	        return cc;
1008,1010d1040
< 			
< 			editPart.getRoot().getViewer().getEditDomain().getCommandStack()
< 				.execute(new ICommandProxy(cc));
1011a1043,1043
> 		return UnexecutableCommand.INSTANCE;
1011,1011c1042,1042
< 		}
---
> 		}
1409a1393,1404
> 	/**
> 	 * Creates the command that needs to be executed for this page when "Ok" is
> 	 * pressed. It's different from {@link #getApplyCommand()}, because it checks
> 	 * whether the page is dirty or not.
> 	 * @return <code>Command</code> to be executed per this page
> 	 */
> 	public Command getCommand() {
> 		if (filterChanged || sortChanged)
> 			return getApplyCommand();
> 		return null;
> 	}
> 	
