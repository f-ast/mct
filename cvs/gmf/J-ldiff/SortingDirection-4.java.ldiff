63,63c63,63
< 	public static final SortingDirection ASCENDING_LITERAL = new SortingDirection(ASCENDING, "Ascending"); //$NON-NLS-1$
---
> 	public static final SortingDirection ASCENDING_LITERAL = new SortingDirection(ASCENDING, "Ascending", "Ascending"); //$NON-NLS-2$//$NON-NLS-1$
73,73c73,73
< 	public static final SortingDirection DESCENDING_LITERAL = new SortingDirection(DESCENDING, "Descending"); //$NON-NLS-1$
---
> 	public static final SortingDirection DESCENDING_LITERAL = new SortingDirection(DESCENDING, "Descending", "Descending"); //$NON-NLS-2$//$NON-NLS-1$
95a96,111
>      * Returns the '<em><b>Sorting Direction</b></em>' literal with the specified literal value.
>      * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
>      * @generated
>      */
> 	public static SortingDirection get(String literal) {
>         for (int i = 0; i < VALUES_ARRAY.length; ++i) {
>             SortingDirection result = VALUES_ARRAY[i];
>             if (result.toString().equals(literal)) {
>                 return result;
>             }
>         }
>         return null;
>     }
> 
>     /**
101,101c117,117
< 	public static SortingDirection get(String name) {
---
>     public static SortingDirection getByName(String name) {
104,104c120,120
< 			if (result.toString().equals(name)) {
---
>             if (result.getName().equals(name)) {
112,112c128,128
< 	 * Returns the '<em><b>Sorting Direction</b></em>' literal with the specified value.
---
>      * Returns the '<em><b>Sorting Direction</b></em>' literal with the specified integer value.
131,131c147,147
< 	private SortingDirection(int value, String name) {
---
>     private SortingDirection(int value, String name, String literal) {
132,132c148,148
< 		super(value, name);
---
>         super(value, name, literal);
