10a11,11
> import java.io.FileNotFoundException;
26,26d26
< 			if (r == null) {
27,27c27,27
< 				return null;
---
> 			assert r != null;
28,28d27
< 			}
29a29,30
> 		} catch (FileNotFoundException ex) {
> 			return delegateLoadXtendResource(fullyQualifiedName);
47a68,72
> 	protected XtendResource delegateLoadXtendResource(String fullyQualifiedName) {
> 		for (ResourceManager next : getDependenies()) {
> 			XtendResource r = next.loadXtendResource(fullyQualifiedName);
> 			if (r != null) {
> 				return r;
47a49,49
> 			assert r != null; // exception should be thrown to indicate issues with resolve
48,49d67
< 			if (r == null) {
< 				return null;
50a74,87
> 		}
> 		return null;
> 	}
> 
> 	protected XpandResource delegateLoadXpandResource(String fullyQualifiedName) {
> 		for (ResourceManager next : getDependenies()) {
> 			XpandResource r = next.loadXpandResource(fullyQualifiedName);
> 			if (r != null) {
> 				return r;
> 			}
> 		}
> 		return null;
> 	}
> 
50,50c73,73
< 			}
---
> 			}
51a51,52
> 		} catch (FileNotFoundException ex) {
> 			return delegateLoadXpandResource(fullyQualifiedName);
53,53c54,54
< 			// XXX come up with better handling - e.g. no need to notify if there's no aspects/ file
---
> 			// XXX come up with better handling
70a92,95
> 	/**
> 	 * @return never return <code>null</code>, throw exception instead
> 	 * @throws IOException in case resource can't be read. Throw {@link java.io.FileNotFoundException} to indicate resource was not found. 
> 	 */
72a98,105
> 	/**
> 	 * Override if your implementation supports dependenices
> 	 * @return never null
> 	 */
> 	protected ResourceManager[] getDependenies() {
> 		return new ResourceManager[0];
> 	}
> 
80,80d112
< 
