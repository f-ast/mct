2,2c2,2
<  * Copyright (c) 2004, 2007 IBM Corporation and others.
---
>  * Copyright (c) 2004, 2008 IBM Corporation and others.
23,23c24,24
< import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
---
> import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
35a36,36
>  * as well as using context menu "Delete from model"
43a45,48
> 	/**
> 	 * used to distinguish context menu calls from keyboard calls (the only difference is in calculating enablement) 
> 	 */
> 	private boolean calledFromContextMenu;
51a57,57
> 		calledFromContextMenu = false;
59a66,66
> 		calledFromContextMenu = false;
62,62c93,93
< 	
---
> 	}
63a70,71
> 	 * Creates a <code>PromptingDeleteFromModelAction</code> with a default label.
> 	 * @param workbenchPage The page this action will be associated with.
63a124,124
> 	/**
64,64c125,125
< 	 *  Return the semantic request to destroy the element
---
> 	 *  Return the semantic request to destroy the element
65a127,136
> 	 */
> 	protected Request createTargetRequest() {		
> 		TransactionalEditingDomain editingDomain = getEditingDomain();
>         if (editingDomain != null) {
>             DestroyElementRequest destroyRequest = new DestroyElementRequest(
>                 editingDomain, false);
>             return new EditCommandRequestWrapper(destroyRequest);
>         }
>         return null;
> 	}
65,65c126,126
< 	 * @see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#createTargetRequest()
---
> 	 * @see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#createTargetRequest()
66a73,75
> 	public PromptingDeleteFromModelAction(IWorkbenchPage workbenchPage, boolean fromContextMenu) {
> 		super(workbenchPage);
> 		calledFromContextMenu = fromContextMenu;
67,79d72
< 	protected Request createTargetRequest() {
< 		
< 		boolean shouldPrompt = ((IPreferenceStore) getPreferencesHint()
< 			.getPreferenceStore())
< 			.getBoolean(IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_MODEL);
<         
< 		TransactionalEditingDomain editingDomain = getEditingDomain();
<         if (editingDomain != null) {
<             DestroyElementRequest destroyRequest = new DestroyElementRequest(
<                 editingDomain, shouldPrompt);
<             return new EditCommandRequestWrapper(destroyRequest);
<         }
<         return null;
81a78,82
> 	/**
> 	 * Calculates enablement of this action. 
> 	 * 
> 	 * @return <code>true</code> if call is made via keyboard, or from context menu and action should be enabled,
> 	 *         <code>false</code> otherwise
82,83d77
< 	
< 	/* (non-Javadoc)
86a86,90
> 		if (calledFromContextMenu) {
> 			// Need to calculate enablement.
> 			return super.calculateEnabled();
> 		} else {
> 			// for calls from keyboard, always return true for performance reasons
90a96,98
> 	/** First gets the delete command, where target request is modified to include the information about
> 	 * whether confirmation prompt should be issued. Then it runs the obtained command.
> 	 * 
91,91d95
< 	/* (non-Javadoc)
94a102,108
> 		Request req = getTargetRequest();
> 		boolean showInformationDialog = ((IPreferenceStore) getPreferencesHint()
> 					.getPreferenceStore())
> 					.getBoolean(IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_MODEL);
> 		DestroyElementRequest targetRequest = (DestroyElementRequest)((EditCommandRequestWrapper)req).getEditCommandRequest();		
> 		targetRequest.setConfirm(showInformationDialog);
> 
95,95d101
< 		setTargetRequest(null);
