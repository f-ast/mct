15,15d14
< import java.util.Iterator;
19,22d17
< import org.eclipse.core.resources.IWorkspace;
< import org.eclipse.core.runtime.IPath;
< import org.eclipse.core.runtime.IStatus;
< import org.eclipse.core.runtime.Status;
26,26d20
< import org.eclipse.emf.common.util.UniqueEList;
28,28d21
< import org.eclipse.emf.ecore.EObject;
38,38d30
< import org.eclipse.gmf.internal.bridge.ui.Plugin;
45,45d36
< import org.eclipse.gmf.tooldef.GMFToolFactory;
48,48d38
< import org.eclipse.jface.dialogs.IMessageProvider;
53a44,44
> 
53,53c43,43
< public class WizardInput {
---
> public abstract class WizardInput {
58,60d48
< 	private EPackage myDomainModel;
< 	private Canvas myCanvas;
< 	private ToolRegistry myRegistry;
64,64c52,52
< 	private IFile myResultFile = null;
---
> 	private IFile myResultFile;
66,72d53
< 	private String initialECoreFile = null;
< 	private String initialGraphFile = null;
< 	private String initialToolFile = null;
< 	private boolean myIsBlankToolDef = false;
< 
< 	public WizardInput() {
< 	}
82,82d62
< 
98a79,79
> 	public abstract EPackage getDomainModel();
99,102d78
< 	public void setDomainModel(EPackage aPackage) {
< 		checkUnload(myDomainModel);
< 		myDomainModel = aPackage;
< 	}
103a81,81
> 	public abstract Canvas getCanvasDef();
104,107d80
< 	public void setGraphDef(Canvas canvas) {
< 		checkUnload(myCanvas);
< 		myCanvas = canvas;
< 	}
109,141d82
< 	public Canvas getCanvasDef() {
< 		return myCanvas;
< 	}
< 
< 	public boolean isNewBlankToolDef() {
< 		return myIsBlankToolDef;
< 	}
< 
< 	@SuppressWarnings("unchecked")
< 	public URI createBlankToolDef() {
< 		checkUnload(myRegistry);
< 		myRegistry = null;
< 		IPath toolDefFile = getMappingFile().getFullPath().removeFileExtension().addFileExtension(TOOLDEF_FILE_EXT);
< 		String baseName = getMappingFile().getFullPath().removeFileExtension().lastSegment();
< 		int i = 1;
< 		final IWorkspace wr = getMappingFile().getProject().getWorkspace(); 
< 		while (wr.getRoot().findMember(toolDefFile) != null) {
< 			toolDefFile = toolDefFile.removeLastSegments(1).append(baseName + i).addFileExtension(TOOLDEF_FILE_EXT);
< 			i++;
< 		}
< 		URI toolDefURI = URI.createPlatformResourceURI(toolDefFile.toString());
< 		myRegistry = GMFToolFactory.eINSTANCE.createToolRegistry();
< 		myRegistry.setPalette(GMFToolFactory.eINSTANCE.createPalette());
< 		getResourceSet().createResource(toolDefURI).getContents().add(myRegistry);
< 		myIsBlankToolDef  = true;
< 		return toolDefURI;
< 	}
< 
< 	public void setToolDef(ToolRegistry registry) {
< 		checkUnload(myRegistry);
< 		myRegistry = registry;
< 		myIsBlankToolDef = false;
< 	}
142a85,85
> 	public abstract boolean isNewBlankToolDef();
143,143c83,83
< 	public ToolRegistry getToolDef() {
---
> 	public abstract ToolRegistry getToolDef();
144,145d83
< 		return myRegistry;
< 	}
169,207d110
< 	/**
< 	 * @return status with code field set to constant from IMessageProvider
< 	 */
< 	public IStatus isReady2Go() {
< 		if (myDomainModel != null && myCanvas != null && myRegistry != null) {
< 			return Status.OK_STATUS;
< 		}
< 		if (myDomainModel == null) {
< 			return new Status(Status.WARNING, Plugin.getPluginID(), IMessageProvider.WARNING, Messages.inputNeedDomain, null);
< 		}
< 		if (myCanvas == null) {
< 			return new Status(Status.WARNING, Plugin.getPluginID(), IMessageProvider.WARNING, Messages.inputNeedCanvas, null);
< 		} else {
< 			return new Status(Status.WARNING, Plugin.getPluginID(), IMessageProvider.WARNING, Messages.inputNeedToolDef, null);
< 		}
< 	}
< 
< 	private void checkUnload(EObject eobj) {
< 		if (eobj == null) {
< 			return;
< 		}
< 		if (eobj.eResource().getResourceSet() == getResourceSet() && eobj.eResource().isLoaded()) {
< 			eobj.eResource().unload();
< 		}
< 	}
< 	public List/*<EClass>*/ getCanvasElementCandidates() {
< 		UniqueEList rv = new UniqueEList();
< 		for (Iterator it = myDomainModel.getEClassifiers().iterator(); it.hasNext();) {
< 			Object next = it.next();
< 			if (next instanceof EClass) {
< 				EClass eClass = (EClass) next;
< 				if (!eClass.isAbstract() && !eClass.isInterface() && !eClass.getEAllContainments().isEmpty()) {
< 					rv.add(eClass);
< 				}
< 			}
< 		}
< 		return rv;
< 	}
< 
209a113,113
> 		CanvasMapping cm = getMapping().getDiagram();
209,209c112,112
< 		assert eClass.getEPackage() == myDomainModel;
---
> 		assert eClass.getEPackage() == getDomainModel();
210,212d112
< 		CanvasMapping cm;
< 		if (getMapping().getDiagram() == null) {
< 			cm =  GMFMapFactory.eINSTANCE.createCanvasMapping();
213,213c114,114
< 			cm.setDiagramCanvas(myCanvas);
---
> 		cm.setDiagramCanvas(getCanvasDef());
214,217d114
< 			// +palette/gmfgraph.canvas
< 		} else {
< 			cm = getMapping().getDiagram();
< 		}
219a105,105
> 			CanvasMapping cm = GMFMapFactory.eINSTANCE.createCanvasMapping();
220,220c106,106
< 		getMapping().setDiagram(cm);
---
> 			mapInstance.setDiagram(cm);
243,266d138
< 	
< 	public String getInitialECoreFile() {
< 		return initialECoreFile;
< 	}
< 
< 	public void setInitialECoreFile(String initialECoreFile) {
< 		this.initialECoreFile = initialECoreFile;
< 	}
< 
< 	public String getInitialGraphFile() {
< 		return initialGraphFile;
< 	}
< 
< 	public void setInitialGraphFile(String initialGraphFile) {
< 		this.initialGraphFile = initialGraphFile;
< 	}
< 
< 	public String getInitialToolFile() {
< 		return initialToolFile;
< 	}
< 
< 	public void setInitialToolFile(String initialToolFile) {
< 		this.initialToolFile = initialToolFile;
< 	}
