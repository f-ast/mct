18a19,19
> import org.eclipse.core.runtime.Plugin;
19,19d18
< 
20a21,22
> import org.eclipse.gmf.runtime.common.core.util.Trace;
> import org.osgi.framework.BundleContext;
20,20c20,20
< import org.eclipse.gmf.runtime.common.core.plugin.XToolsPlugin;
---
> import org.eclipse.gmf.runtime.common.core.util.Log;
28,28c30,30
< 	extends XToolsPlugin {
---
> 	extends Plugin {
40,51d41
< //	/**
< //	 * The navigator category registry for loading and retrieving the navigator
< //	 * category extensions in the workspace.
< //	 */
< //	private NavigatorCategoryRegistry navigatorCategoryRegistry;
< //
< //	/**
< //	 * The navigator content type registry for loading and retrieving the
< //	 * navigator content type extensions in the workspace.
< //	 */
< //	private NavigatorContentTypeRegistry navigatorContentTypeRegistry;
< 
81a72,74
> 	public void start(BundleContext context)
> 		throws Exception {
> 		super.start(context);
82,82d71
< 	protected void doStartup() {
84,87d75
< 		//configureIconProviders();
< 		//configureViewerContentProviders();
< 		//configureViewerSorterProviders();
< 		//configureViewerFilterProviders();
95a84,84
> 			getPluginId(), LOG_LISTENER_EXT_P_NAME);
95,95c83,83
< 		IConfigurationElement[] elements = reg.getConfigurationElementsFor(getPluginId(), LOG_LISTENER_EXT_P_NAME);
---
> 		IConfigurationElement[] elements = reg.getConfigurationElementsFor(
99a89,90
> 				listener = (ILogListener) elements[i]
> 					.createExecutableExtension("class"); //$NON-NLS-1$
100,100d88
< 				listener = (ILogListener) elements[i].createExecutableExtension("class"); //$NON-NLS-1$
101a92,92
> 					listener);
101,101c91,91
< 				Platform.getLog(getDefault().getBundle()).addLogListener(listener);
---
> 				Platform.getLog(getDefault().getBundle()).addLogListener(
103a95,99
> 			Trace.catching(CommonCorePlugin.getDefault(),
> 				CommonCoreDebugOptions.EXCEPTIONS_CATCHING, getClass(),
> 				"configureLogListeners", e); //$NON-NLS-1$
> 			Log.error(CommonCorePlugin.getDefault(),
> 				CommonCoreStatusCodes.SERVICE_FAILURE, e.getMessage());
104,104d94
< 			e.printStackTrace();
108,178d102
< //	/**
< //	 * Configures icon providers based on icon provider extension
< //	 */
< //	private void configureIconProviders() {
< //		IconService.getInstance().configureProviders(
< //			Platform.getExtensionRegistry().getExtensionPoint(getPluginId(),
< //				ICON_PROVIDERS_EXT_P_NAME).getConfigurationElements());
< //	}
< 
< 
< //	/**
< //	 * Configures content providers based on content provider extension
< //	 * configurations.
< //	 *  
< //	 */
< //	private void configureViewerContentProviders() {
< //		ViewerContentService.getInstance().configureProviders(
< //			Platform.getExtensionRegistry().getExtensionPoint(getPluginId(),
< //				ViewerContentService.getInstance().getExtensionPointId())
< //				.getConfigurationElements());
< //	}
< //
< //	/**
< //	 * Configures content providers based on sorter provider extension
< //	 * configurations.
< //	 *  
< //	 */
< //	private void configureViewerSorterProviders() {
< //		ViewerSorterService.getInstance().configureProviders(
< //			Platform.getExtensionRegistry().getExtensionPoint(getPluginId(),
< //				ViewerSorterService.getInstance().getExtensionPointId())
< //				.getConfigurationElements());
< //	}
< //
< //	/**
< //	 * Configures content providers based on sorter provider extension
< //	 * configurations.
< //	 *  
< //	 */
< //	private void configureViewerFilterProviders() {
< //		ViewerFilterService.getInstance().configureProviders(
< //			Platform.getExtensionRegistry().getExtensionPoint(getPluginId(),
< //				ViewerFilterService.getInstance().getExtensionPointId())
< //				.getConfigurationElements());
< //	}
< //
< //	/**
< //	 * Returns the navigator category registry.
< //	 * 
< //	 * @return the navigator category registry.
< //	 */
< //	public NavigatorCategoryRegistry getNavigatorCategoryRegistry() {
< //		if (navigatorCategoryRegistry == null) {
< //			navigatorCategoryRegistry = new NavigatorCategoryRegistry();
< //			navigatorCategoryRegistry.load();
< //		}
< //		return navigatorCategoryRegistry;
< //	}
< //
< //	/**
< //	 * Returns the navigator content type registry.
< //	 * 
< //	 * @return the navigator content type registry.
< //	 */
< //	public NavigatorContentTypeRegistry getNavigatorContentTypeRegistry() {
< //		if (navigatorContentTypeRegistry == null) {
< //			navigatorContentTypeRegistry = new NavigatorContentTypeRegistry();
< //			navigatorContentTypeRegistry.load();
< //		}
< //		return navigatorContentTypeRegistry;
< //	}
