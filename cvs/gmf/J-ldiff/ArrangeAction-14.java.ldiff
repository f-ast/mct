2,2c2,2
<  * Copyright (c) 2002, 2007 IBM Corporation and others.
---
>  * Copyright (c) 2002, 2008 IBM Corporation and others.
24,24d23
< import org.eclipse.draw2d.XYLayout;
27,27d25
< import org.eclipse.gef.GraphicalEditPart;
37,37d34
< import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
40,40d36
< import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.IEditableEditPart;
88,88d87
<             List elements = getOperationSet();
89,89c88,88
<             for (Iterator iter = elements.iterator(); iter.hasNext();) {
---
>             for (Iterator iter = operationSet.iterator(); iter.hasNext();) {
94a94,96
>         } else {
>             EditPart targetEP = getTargetEditPartForArrangeSelection(operationSet);
>             if (targetEP != null) {
95,97d93
<         } else if (getOperationSet().size() >= 2) {
<             EditPart parent = getSelectionParent(getOperationSet());
<             if (parent != null) {
98,98c97,97
<                 Command cmd = parent.getCommand(getTargetRequest());
---
>                 Command cmd = targetEP.getCommand(getTargetRequest());
105a105,105
>     private EditPart getTargetEditPartForArrangeSelection(List editparts) {
106,113d104
<     /**
<      * Action is enabled if arrange all. If arrange selection, action is enabled
<      * if the operation set's parent has XYLayout and there is atleast 2
<      * siblings to arrange
<      * 
<      * @see org.eclipse.gef.ui.actions.EditorPartAction#calculateEnabled()
<      */
<     protected boolean calculateEnabled() {
114a107,107
>         if (editparts.size() == 1) {
115,115c82,82
<         List operationSet = getOperationSet();
---
>         List operationSet = getOperationSet();
115a83,85
>         if (operationSet.isEmpty()) {
>             return null;
>         }
116a109,113
>             // If there is only one editpart selected, then the Arrange
>             // Selected request gets sent to this editpart's target editpart to
>             // allow clients to do as they wish.
>             return ((EditPart) editparts.get(0))
>                 .getTargetEditPart(getTargetRequest());
117,120d108
<         //arrange all, always enable
<         if( isArrangeAll() && !operationSet.isEmpty()){
<             return true;
<         }
121a115,115
>         } else {
122,122d114
<         EditPart parentEP = getSelectionParent(operationSet);
123a117,121
>             // If there is more than one editpart selected, then the Arrange
>             // Selected request gets sent to the common parent.
>             EditPart parentEP = getSelectionParent(editparts);
>             if (parentEP == null)
>                 return null;
124,129d116
<         // bugzilla 156733: disable this action if the parent or selected edit parts are not editable
<         if ((parentEP instanceof IEditableEditPart)
<                 && !((IEditableEditPart) parentEP)
<                         .isEditModeEnabled()) {
<             return false;
<         }
131,137d122
<         for (Iterator i = operationSet.iterator(); i.hasNext();) {
<             Object next = i.next();
<             if ((next instanceof IEditableEditPart)
<                     && !((IEditableEditPart) next)
<                             .isEditModeEnabled()) {
<                 return false;
<             }
138a128,131
>                 // if there is no common parent, then Arrange Selected isn't
>                 // supported.
>                 if (part.getParent() != parentEP)
>                     return null;
139,145d127
<         
<         //arrange selection
<         if (operationSet.size() >= 2) {
<             if (parentEP instanceof GraphicalEditPart) {
<                 GraphicalEditPart parent = (GraphicalEditPart)parentEP;
<                 if ((parent != null) &&(parent.getContentPane().getLayoutManager() instanceof XYLayout))
<                     return true;
147,149d132
<         } else if (operationSet.size() == 1
<             && operationSet.get(0) instanceof GroupEditPart) {
<             return true;
151,151c133,133
<         return false;
---
>             return parentEP;
162a146,146
> 
164a164,164
>         }
164,164c163,163
<                 return getElementsToArrange(selection);
---
>             return selection;
165a150,150
>             if (getDiagramEditPart() != null) {
166,166d149
<             if( getDiagramEditPart() != null )              
167,167c151,151
<                 return createOperationSet(getDiagramEditPart().getChildren());
---
>                 return getDiagramEditPart().getChildren();
168,169d151
< 
<             return Collections.EMPTY_LIST;
170a153,153
>             return Collections.EMPTY_LIST;
171a155,158
>         } else {
> 
>             // this is the case of Arrange Selection
>             if (selection.isEmpty()
172,172d154
<         if (selection.isEmpty() ||
173,173c159,159
<                 !(selection.get(0) instanceof IGraphicalEditPart))
---
>                 || !(selection.get(0) instanceof IGraphicalEditPart))
177,177c148,148
<         return createOperationSet(selection);
---
>                 return createOperationSetForArrangeAll(selection);
181,181d167
<      * getSelectionParent
182,182c168,168
<      * Utility to return the logical parent of the selection list
---
>      * getSelectionParent Utility to return the logical parent of the selection
182a169,169
>      * list
183a171,172
>      * @param editparts
>      *            List to parse for a common parent.
184,184d170
<      * @param editparts List to parse for a common parent.
185a174,174
>      *         exist.
185,185c173,173
<      * @return EditPart that is the parent or null if a common parent doesn't exist.
---
>      * @return EditPart that is the parent or null if a common parent doesn't
198a123,123
>             for (int i = 1; i < editparts.size(); i++) {
199,215d122
<     private List createOperationSet(List editparts) {
<         if (editparts == null || editparts.isEmpty())
<             return Collections.EMPTY_LIST;
<         
<         EditPart parent;
<         if (editparts.size() == 1 && editparts.get(0) instanceof GroupEditPart) {
<              GroupEditPart groupEP = (GroupEditPart) editparts.get(0);
<             parent = groupEP;
<             editparts = groupEP.getChildren();
<         } else {
<             parent = getSelectionParent(editparts);
<         }
<         
<         if (parent == null)
<             return Collections.EMPTY_LIST;
<         
<         for (int i = 1; i < editparts.size(); i++) {
216,216c124,124
<             EditPart part = (EditPart) editparts.get(i);
---
>                 EditPart part = (EditPart) editparts.get(i);
217,217c125,125
<             if (part instanceof ConnectionEditPart){
---
>                 if (part instanceof ConnectionEditPart) {
218,218c126,126
<                 continue;
---
>                     continue;
219,225d126
<             }
<             if (part.getParent() != parent)
<                 return Collections.EMPTY_LIST;
<         }
<         return editparts;
<     }
< 
347,347c309,309
<     private List getElementsToArrange(List selection) {
---
>     private List createOperationSetForArrangeAll(List selection) {
370a333,337
>     public String getLabel() {
>         return isArrangeAll() ? DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeAll_ActionLabelText
>             : DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeSelection_ActionLabelText;
>     }
> 
