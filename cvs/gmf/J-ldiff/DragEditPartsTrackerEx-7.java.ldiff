16a17,18
> import org.eclipse.draw2d.FigureCanvas;
> import org.eclipse.draw2d.Viewport;
17a20,20
> import org.eclipse.draw2d.geometry.Rectangle;
19a23,23
> import org.eclipse.gef.SharedCursors;
28a33,34
> import org.eclipse.swt.graphics.Cursor;
> import org.eclipse.swt.widgets.Control;
153a160,201
>     protected boolean handleDragInProgress() {
>         boolean returnValue = super.handleDragInProgress();
>         if (isInState(STATE_DRAG_IN_PROGRESS)
>             || isInState(STATE_ACCESSIBLE_DRAG_IN_PROGRESS)) {
>             
>             // Expose the diagram as the user scrolls in the area handled by the
>             // autoexpose helper.
>             updateAutoexposeHelper();
>         }
>         return returnValue;
>     }
> 
>     protected Cursor calculateCursor() {
>         if (isInState(STATE_DRAG_IN_PROGRESS)
>             || isInState(STATE_ACCESSIBLE_DRAG_IN_PROGRESS)) {
> 
>             // Give some feedback so the user knows the area where autoscrolling
>             // will occur.
>             if (getAutoexposeHelper() != null) {
>                 return SharedCursors.HAND;
>             } else {
> 
>                 // Give some feedback so the user knows that they can't drag
>                 // outside the viewport.
>                 Control control = getCurrentViewer().getControl();
>                 if (control instanceof FigureCanvas) {
>                     Viewport viewport = ((FigureCanvas) control).getViewport();
>                     Rectangle rect = Rectangle.SINGLETON;
>                     viewport.getClientArea(rect);
>                     viewport.translateToParent(rect);
>                     viewport.translateToAbsolute(rect);
> 
>                     if (!rect.contains(getLocation())) {
>                         return getDisabledCursor();
>                     }
>                 }
>             }
>         }
>         return super.calculateCursor();
>     }
> 
>     
