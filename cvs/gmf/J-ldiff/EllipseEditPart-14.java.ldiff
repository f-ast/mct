33a34,34
> import org.eclipse.gmf.gmfgraph.ColorConstants;
57a57,57
> import org.eclipse.gmf.runtime.notation.FillStyle;
58,58c58,58
< import org.eclipse.gmf.runtime.notation.ShapeStyle;
---
> import org.eclipse.gmf.runtime.notation.LineStyle;
188,188c190,190
< 	 * Body of this method does not depend on settings in generation model
---
> 	 * Body of this method does not depend on settings in generation model so
189,189c191,191
< 	 * so you may safely remove <i>generated</i> tag and modify it.
---
> 	 * you may safely remove <i>generated</i> tag and modify it.
203,203c205,205
< 	 * Default implementation treats passed figure as content pane.
---
> 	 * Default implementation treats passed figure as content pane. Respects
204,204c206,206
< 	 * Respects layout one may have set for generated figure.
---
> 	 * layout one may have set for generated figure.
204a207,208
> 	 * 
> 	 * @param nodeShape
205,205c209,209
< 	 * @param nodeShape instance of generated figure class
---
> 	 *            instance of generated figure class
460,460c464,464
< 		final ShapeStyle shapeStyle = (ShapeStyle) view.getStyle(NotationPackage.eINSTANCE.getShapeStyle());
---
> 		final FillStyle theFillStyle = (FillStyle) view.getStyle(NotationPackage.eINSTANCE.getFillStyle());
467a615,616
> 	public static int getRgbColor(ConstantColor modelColor) {
> 		final int rgbColor;
467a472,472
> 				rgbColor = getRgbColor(modelColor);
468,468c617,617
< 				switch (modelColor.getValue().getValue()) {
---
> 		switch (modelColor.getValue().getValue()) {
468a618,678
> 		case ColorConstants.WHITE: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.white.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.BLACK: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.black.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.LIGHT_GRAY: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.lightGray.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.GRAY: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.gray.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.DARK_GRAY: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.darkGray.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.RED: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.red.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.ORANGE: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.orange.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.YELLOW: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.yellow.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.GREEN: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.green.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.LIGHT_GREEN: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.lightGreen.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.DARK_GREEN: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.darkGreen.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.CYAN: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.cyan.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.LIGHT_BLUE: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.lightBlue.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.BLUE: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.blue.getRGB().hashCode();
> 			break;
> 		}
> 		case ColorConstants.DARK_BLUE: {
> 			rgbColor = org.eclipse.draw2d.ColorConstants.darkBlue.getRGB().hashCode();
> 			break;
> 		}
> 		default:
469,475d617
< 				/*
< 				 case <nextValue>: {
< 				 rgbColor = org.eclipse.draw2d.ColorConstants.<nextColorLiteral.getName()>.getRGB().hashCode();
< 				 break;
< 				 }
< 				 */
< 				default:
476,476c679,679
< 					rgbColor = -1;
---
> 			rgbColor = -1;
477,477c680,680
< 				}
---
> 		}
477a681,686
> 		return rgbColor;
> 	}
> 
> 	/**
> 	 * @generated
> 	 */
479,479c474,474
< 			if (rgbColor != -1 && shapeStyle.getFillColor() != rgbColor) {
---
> 			if (rgbColor != -1 && theFillStyle.getFillColor() != rgbColor) {
484,484c479,479
< 						shapeStyle.setFillColor(rgbColor);
---
> 						theFillStyle.setFillColor(rgbColor);
491,491c486,486
< 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Background background color with the model", e); //$NON-NLS-1$
---
> 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Background color with the model", e); //$NON-NLS-1$
494a490,490
> 		final LineStyle theLineStyle = (LineStyle) view.getStyle(NotationPackage.eINSTANCE.getLineStyle());
501a498,498
> 				rgbColor = getRgbColor(modelColor);
502,506d497
< 				switch (modelColor.getValue().getValue()) {
< 				/*
< 				 case <nextValue>: {
< 				 rgbColor = org.eclipse.draw2d.ColorConstants.<nextColorLiteral.getName()>.getRGB().hashCode();
< 				 break;
508,512d499
< 				 */
< 				default:
< 					rgbColor = -1;
< 				}
< 			}
513,513c500,500
< 			if (rgbColor != -1 && shapeStyle.getLineColor() != rgbColor) {
---
> 			if (rgbColor != -1 && theLineStyle.getLineColor() != rgbColor) {
518,518c505,505
< 						shapeStyle.setLineColor(rgbColor);
---
> 						theLineStyle.setLineColor(rgbColor);
525,525c512,512
< 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Foreground background color with the model", e); //$NON-NLS-1$
---
> 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize view Foreground color with the model", e); //$NON-NLS-1$
528a516,518
> 
> 		final FillStyle theFillStyle1 = (FillStyle) view.getStyle(NotationPackage.eINSTANCE.getFillStyle());
> 		addListenerFilter("FillStyleListener", new NotificationListener() {
529,529d515
< 		addListenerFilter("ShapeStyleListener", new NotificationListener() {
533,533c522,522
< 					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model size with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
---
> 					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model Background color with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
535a525,526
> 							FillStyle theFillStyle = (FillStyle) notification.getNotifier();
> 							if (notification.getFeatureID(FillStyle.class) == NotationPackage.FILL_STYLE__FILL_COLOR) {
536,538d524
< 							ShapeStyle shapeStyle = (ShapeStyle) notification.getNotifier();
< 							switch (notification.getFeatureID(ShapeStyle.class)) {
< 							case NotationPackage.SHAPE_STYLE__FILL_COLOR: {
539,539c527,527
< 								int color = shapeStyle.getFillColor();
---
> 								int color = theFillStyle.getFillColor();
552,552d539
< 								break;
553a541,559
> 							return Status.OK_STATUS;
> 						}
> 					}.execute(new NullProgressMonitor(), null);
> 				} catch (ExecutionException e) {
> 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model Background color with the view", e); //$NON-NLS-1$
> 				}
> 			}
> 		}, theFillStyle1);
> 		final LineStyle theLineStyle1 = (LineStyle) view.getStyle(NotationPackage.eINSTANCE.getLineStyle());
> 		addListenerFilter("LineStyleListener", new NotificationListener() {
> 
> 			public void notifyChanged(final Notification notification) {
> 				try {
> 					new AbstractEMFOperation(getEditingDomain(), "Synchronizing model Foreground color with the view", Collections.singletonMap(Transaction.OPTION_UNPROTECTED, Boolean.TRUE)) { //$NON-NLS-1$
> 
> 						protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
> 							LineStyle theLineStyle = (LineStyle) notification.getNotifier();
> 							if (notification.getFeatureID(LineStyle.class) == NotationPackage.LINE_STYLE__LINE_COLOR) {
> 								int color = theLineStyle.getLineColor();
554,555d540
< 							case NotationPackage.SHAPE_STYLE__LINE_COLOR: {
< 								int color = shapeStyle.getLineColor();
568,569d571
< 								break;
< 							}
575,575c577,577
< 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model size with the view", e); //$NON-NLS-1$			
---
> 					GMFGraphDiagramEditorPlugin.getInstance().logError("Unable to synchronize model Foreground color with the view", e); //$NON-NLS-1$
577a580,581
> 		}, theLineStyle1);
> 
578,578d579
< 		}, shapeStyle);
