15,18d14
< import java.io.IOException;
< import java.io.InputStream;
< import java.io.InputStreamReader;
< import java.io.Reader;
41,42d36
< import org.eclipse.emf.codegen.merge.java.JControlModel;
< import org.eclipse.emf.codegen.merge.java.JMerger;
65,65d58
< 	private JControlModel myJControlModel;
73a67,67
> 	private TextMerger myMerger;
75,75c69,69
< 	protected abstract URL getJMergeControlFile();
---
> 	protected final URL getJMergeControlFile() {
75a70,71
> 		return null;
> 	}
218,218c214,214
< 			pm.beginTask(null, 4);
---
> 			pm.beginTask(null, 5);
223,223c219,219
< 			boolean propertyFile = "properties".equals(filePath.getFileExtension());
---
> 			final boolean propertyFile = "properties".equals(filePath.getFileExtension());
230,230c226,226
< 				oldText = getFileContents(f);
---
> 				oldText = FileServices.getFileContents(f);
233,236d228
< 				TextMerger merger = TextMerger.getForFile(f.getName());
< 				if (merger != null) {
< 					genText = merger.process(oldText, genText);
< 				}
243,243c236,236
< 				f.create(new ByteArrayInputStream(genText.getBytes(charset)), true, new SubProgressMonitor(pm, 1));
---
> 				f.create(new ByteArrayInputStream(genText.getBytes(charset)), true, new SubProgressMonitor(pm, 2));
259,281d251
< 	private static String getFileContents(IFile file) {
< 		StringBuffer contents = new StringBuffer();
< 		char[] buffer = new char[1024];
< 		int count;
< 		try {
< 			Reader in = new InputStreamReader(file.getContents(true), file.getCharset());
< 			try {
< 				while ((count = in.read(buffer)) > 0) {
< 					contents.append(buffer, 0, count);
< 				}
< 			} finally {
< 				in.close();
< 			}
< 		} catch (CoreException ce) {
< 			ce.printStackTrace();
< 			return null;
< 		} catch (IOException ioe) {
< 			ioe.printStackTrace();
< 			return null;
< 		}
< 		return contents.toString();
< 	}
< 
318,340d287
< 	/**
< 	 * @return <code>true</code> if the file contains the input stream contents
< 	 */
< 	protected boolean contains(IFile f, InputStream is) {
< 		int fc = 0;
< 		int ic = 0;
< 		InputStream fs = null;
< 		try {
< 			fs = f.getContents(true);
< 			while ((fc = fs.read()) == (ic = is.read()) && fc >= 0);
< 		} catch (CoreException ce) {
< 		} catch (IOException ioe) {
< 		} finally {
< 			if (fs != null) {
< 				try {
< 					fs.close();
< 				} catch (IOException ioe) {
< 				}
< 			}
< 		}
< 		return fc <0 && ic < 0;
< 	}
< 
357a305,311
> 			String oldContents = null;
> 			if (cu.exists()) {
> 				oldContents = cu.getSource();
> 				genText = mergeJavaCode(oldContents, genText, new SubProgressMonitor(pm, 1));
> 			} else {
> 				pm.worked(1);
> 			}
358,358c229,229
< 			genText = mergeJavaCode(genText, cu, new SubProgressMonitor(pm, 1));
---
> 				genText = mergePlainText(oldText, genText, f, new SubProgressMonitor(pm, 1));
360,360c313,313
< 			if (!cu.exists() || !genText.equals(cu.getSource())) {
---
> 			if (!genText.equals(oldContents)) {
402,402c355,355
< 	protected final String mergeJavaCode(String generatedText, ICompilationUnit oldCU, IProgressMonitor pm) throws JavaModelException {
---
> 	protected String mergeJavaCode(String oldContents, String generatedText, IProgressMonitor pm) throws JavaModelException {
404a358,361
> 			return getMergeService().mergeJava(oldContents, generatedText);
> 		} finally {
> 			pm.done();
> 		}
405,412d357
< 			if (oldCU != null && oldCU.exists() && getJControlModel() != null) {
< 				JMerger jMerge = new JMerger(getJControlModel());
< 				jMerge.setSourceCompilationUnit(jMerge.createCompilationUnitForContents(generatedText));
< 				jMerge.setTargetCompilationUnit(jMerge.createCompilationUnitForContents(oldCU.getSource()));
< 				jMerge.merge();
< 				return jMerge.getTargetCompilationUnitContents();
< 			} else {
< 				return generatedText;
413a363,367
> 
> 	protected String mergePlainText(String oldText, String genText, IFile oldRes, IProgressMonitor pm) {
> 		pm.beginTask(GeneratorBaseMessages.merge, 1);
> 		try {
> 			return getMergeService().process(oldRes.getFileExtension(), oldText, genText);
418a373,388
> 	private TextMerger getMergeService() {
> 		if (myMerger == null) {
> 			myMerger = createMergeService();
> 			assert myMerger != null;
> 		}
> 		return myMerger;
> 	}
> 
> 	/**
> 	 * By default, provides facility that doesn't perform any merge at all.
> 	 * @return facility to perform merges, should never return null. 
> 	 */
> 	protected TextMerger createMergeService() {
> 		return new TextMerger();
> 	}
> 
455,468d424
< 	private JControlModel getJControlModel() {
< 		if (myJControlModel == null) {
< 			URL controlFile = getJMergeControlFile();
< 			if (controlFile != null){
< 				myJControlModel = new JControlModel();
< 				myJControlModel.initialize(CodeGenUtil.instantiateFacadeHelper(JMerger.DEFAULT_FACADE_HELPER_CLASS), controlFile.toString());
< 				if (!myJControlModel.canMerge()){
< 					throw new IllegalStateException("Can not initialize JControlModel");
< 				}
< 			}
< 		}
< 		return myJControlModel;
< 	}
< 
