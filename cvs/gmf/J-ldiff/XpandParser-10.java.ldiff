750,750c750,750
<             // Rule 89:  template ::= $Empty
---
>             // Rule 89:  template ::= emptyTemplate
758,758c758,758
<             // Rule 90:  template ::= lgOpt commentTextPairAny imports extensionImports defineOrAroundSeq
---
>             // Rule 92:  template ::= LG commentTextPairAny imports extensionImports defineOrAroundSeq
760,760c793,793
<             case 90: {
---
>             case 94: {
780,780c780,780
<             // Rule 91:  defineOrAroundSeq ::= define TEXT commentTextPairAny defineOrAroundSuffix
---
>             // Rule 93:  defineOrAroundSeq ::= define TEXT commentTextPairAny defineOrAroundSuffix
782,782c804,804
<             case 91: {
---
>             case 95: {
791,791c791,791
<             // Rule 92:  defineOrAroundSeq ::= around TEXT commentTextPairAny defineOrAroundSuffix
---
>             // Rule 94:  defineOrAroundSeq ::= around TEXT commentTextPairAny defineOrAroundSuffix
793,793c760,760
<             case 92: {
---
>             case 92: {
802,802c802,802
<             // Rule 93:  defineOrAroundSuffix ::= $Empty
---
>             // Rule 95:  defineOrAroundSuffix ::= $Empty
804,804c782,782
<             case 93: {
---
>             case 93: {
810,810c810,810
<             // Rule 99:  imports ::= $Empty
---
>             // Rule 101:  imports ::= $Empty
812,812c910,910
<             case 99: {
---
>             case 112: {
818,818c818,818
<             // Rule 100:  imports ::= anImport imports
---
>             // Rule 102:  imports ::= anImport imports
820,820c969,969
<             case 100: {
---
>             case 119: {
829,829c829,829
<             // Rule 101:  anImport ::= IMPORT STRING TEXT commentTextPairAny
---
>             // Rule 103:  anImport ::= IMPORT STRING TEXT commentTextPairAny
831,831c812,812
<             case 101: {
---
>             case 101: {
837,837c837,837
<             // Rule 102:  extensionImports ::= $Empty
---
>             // Rule 104:  extensionImports ::= $Empty
839,839c820,820
<             case 102: {
---
>             case 102: {
845,845c845,845
<             // Rule 103:  extensionImports ::= anExtensionImport extensionImports
---
>             // Rule 105:  extensionImports ::= anExtensionImport extensionImports
847,847c831,831
<             case 103: {
---
>             case 103: {
856,856c856,856
<             // Rule 104:  anExtensionImport ::= EXTENSION simpleType TEXT commentTextPairAny
---
>             // Rule 106:  anExtensionImport ::= EXTENSION simpleType TEXT commentTextPairAny
858,858c839,839
<             case 104: {
---
>             case 104: {
864,864c864,864
<             // Rule 105:  around ::= AROUND pointcut FOR type sequence ENDAROUND
---
>             // Rule 107:  around ::= AROUND pointcut FOR type sequence ENDAROUND
866,866c847,847
<             case 105: {
---
>             case 105: {
872,872c872,872
<             // Rule 106:  around ::= AROUND pointcut LPAREN declaredParameterList RPAREN FOR type sequence ENDAROUND
---
>             // Rule 108:  around ::= AROUND pointcut LPAREN declaredParameterList RPAREN FOR type sequence ENDAROUND
874,874c858,858
<             case 106: {
---
>             case 106: {
880,880c880,880
<             // Rule 107:  around ::= AROUND pointcut LPAREN declaredParameterList COMMA MULTI RPAREN FOR type sequence ENDAROUND
---
>             // Rule 109:  around ::= AROUND pointcut LPAREN declaredParameterList COMMA MULTI RPAREN FOR type sequence ENDAROUND
882,882c866,866
<             case 107: {
---
>             case 107: {
888,888c888,888
<             // Rule 108:  around ::= AROUND pointcut LPAREN MULTI RPAREN FOR type sequence ENDAROUND
---
>             // Rule 110:  around ::= AROUND pointcut LPAREN MULTI RPAREN FOR type sequence ENDAROUND
890,890c874,874
<             case 108: {
---
>             case 108: {
896,896c896,896
<             // Rule 109:  pointcut ::= MULTI pointcutSuffix
---
>             // Rule 111:  pointcut ::= MULTI pointcutSuffix
898,898c882,882
<             case 109: {
---
>             case 109: {
908,908c908,908
<             // Rule 110:  pointcut ::= IDENT pointcutSuffix
---
>             // Rule 112:  pointcut ::= IDENT pointcutSuffix
910,910c890,890
<             case 110: {
---
>             case 110: {
920,920c920,920
<             // Rule 111:  pointcutSuffix ::= $Empty
---
>             // Rule 113:  pointcutSuffix ::= $Empty
922,922c898,898
<             case 111: {
---
>             case 111: {
928,928c928,928
<             // Rule 113:  pointcutSuffix ::= DCOLON pointcutSuffix
---
>             // Rule 115:  pointcutSuffix ::= DCOLON pointcutSuffix
930,930c922,922
<             case 113: {
---
>             case 113: {
940,940c940,940
<             // Rule 114:  define ::= DEFINE IDENT FOR type sequence ENDDEFINE
---
>             // Rule 116:  define ::= DEFINE IDENT FOR type sequence ENDDEFINE
942,942c977,977
<             case 114: {
---
>             case 120: {
948,948c948,948
<             // Rule 115:  define ::= DEFINE IDENT LPAREN declaredParameterList RPAREN FOR type sequence ENDDEFINE
---
>             // Rule 117:  define ::= DEFINE IDENT LPAREN declaredParameterList RPAREN FOR type sequence ENDDEFINE
950,950c930,930
<             case 115: {
---
>             case 115: {
956,956c956,956
<             // Rule 116:  sequence ::= text sequenceSuffix
---
>             // Rule 118:  sequence ::= text sequenceSuffix
958,958c942,942
<             case 116: {
---
>             case 116: {
967,967c967,967
<             // Rule 117:  sequenceSuffix ::= $Empty
---
>             // Rule 119:  sequenceSuffix ::= $Empty
969,969c950,950
<             case 117: {
---
>             case 117: {
975,975c975,975
<             // Rule 118:  sequenceSuffix ::= statement text sequenceSuffix
---
>             // Rule 120:  sequenceSuffix ::= statement text sequenceSuffix
977,977c958,958
<             case 118: {
---
>             case 118: {
987,987c1006,1006
<             // Rule 125:  text ::= minusOpt TEXT textSuffix
---
>             // Rule 129:  textSuffix ::= minusOpt TEXT textSuffix
989,989c1019,1019
<             case 125: {
---
>             case 130: {
998,998c998,998
<             // Rule 126:  textSuffix ::= $Empty
---
>             // Rule 128:  textSuffix ::= $Empty
1000,1000c1027,1027
<             case 126: {
---
>             case 131: {
1006,1006c987,987
<             // Rule 127:  textSuffix ::= minusOpt TEXT textSuffix
---
>             // Rule 127:  text ::= minusOpt TEXT textSuffix
1008,1008c989,989
<             case 127: {
---
>             case 127: {
1017,1017c1017,1017
<             // Rule 128:  minusOpt ::= $Empty
---
>             // Rule 130:  minusOpt ::= $Empty
1019,1019c1000,1000
<             case 128: {
---
>             case 128: {
1025,1025c1025,1025
<             // Rule 129:  minusOpt ::= MINUS
---
>             // Rule 131:  minusOpt ::= MINUS
1027,1027c1008,1008
<             case 129: {
---
>             case 129: {
1033,1033c1033,1033
<             // Rule 133:  errorStatement ::= ERROR expression
---
>             // Rule 135:  errorStatement ::= ERROR expression
1035,1035c1067,1067
<             case 133: {
---
>             case 139: {
1041,1041c1041,1041
<             // Rule 134:  expandStatement ::= EXPAND definitionName parameterListOpt
---
>             // Rule 136:  expandStatement ::= EXPAND definitionName parameterListOpt
1043,1043c1228,1228
<             case 134: {
---
>             case 158: {
1049,1049c1049,1049
<             // Rule 135:  expandStatement ::= EXPAND definitionName parameterListOpt FOR expression
---
>             // Rule 137:  expandStatement ::= EXPAND definitionName parameterListOpt FOR expression
1051,1051c1035,1035
<             case 135: {
---
>             case 135: {
1057,1057c1057,1057
<             // Rule 136:  expandStatement ::= EXPAND definitionName parameterListOpt FOREACH expression separatorOpt
---
>             // Rule 138:  expandStatement ::= EXPAND definitionName parameterListOpt FOREACH expression separatorOpt
1059,1059c1043,1043
<             case 136: {
---
>             case 136: {
1065,1065c1065,1065
<             // Rule 137:  parameterListOpt ::= $Empty
---
>             // Rule 139:  parameterListOpt ::= $Empty
1067,1067c1051,1051
<             case 137: {
---
>             case 137: {
1073,1073c1073,1073
<             // Rule 138:  parameterListOpt ::= LPAREN parameterList RPAREN
---
>             // Rule 140:  parameterListOpt ::= LPAREN parameterList RPAREN
1075,1075c1059,1059
<             case 138: {
---
>             case 138: {
1081,1081c1081,1081
<             // Rule 140:  expressionStmt ::= expression
---
>             // Rule 142:  expressionStmt ::= expression
1083,1083c1075,1075
<             case 140: {
---
>             case 140: {
1089,1089c1089,1089
<             // Rule 141:  fileStatement ::= FILE expression identOpt sequence ENDFILE
---
>             // Rule 143:  fileStatement ::= FILE expression identOpt sequence ENDFILE
1091,1091c1236,1236
<             case 141: {
---
>             case 159: {
1097,1097c1097,1097
<             // Rule 142:  identOpt ::= $Empty
---
>             // Rule 144:  identOpt ::= $Empty
1099,1099c1083,1083
<             case 142: {
---
>             case 142: {
1105,1105c1105,1105
<             // Rule 143:  identOpt ::= IDENT
---
>             // Rule 145:  identOpt ::= IDENT
1107,1107c1091,1091
<             case 143: {
---
>             case 143: {
1113,1113c1113,1113
<             // Rule 144:  foreachStatement ::= FOREACH expression AS IDENT iteratorOpt separatorOpt sequence ENDFOREACH
---
>             // Rule 146:  foreachStatement ::= FOREACH expression AS IDENT iteratorOpt separatorOpt sequence ENDFOREACH
1115,1115c1099,1099
<             case 144: {
---
>             case 144: {
1121,1121c1121,1121
<             // Rule 145:  iteratorOpt ::= $Empty
---
>             // Rule 147:  iteratorOpt ::= $Empty
1123,1123c1107,1107
<             case 145: {
---
>             case 145: {
1129,1129c1129,1129
<             // Rule 146:  iteratorOpt ::= ITERATOR IDENT
---
>             // Rule 148:  iteratorOpt ::= ITERATOR IDENT
1131,1131c1115,1115
<             case 146: {
---
>             case 146: {
1137,1137c1137,1137
<             // Rule 147:  separatorOpt ::= $Empty
---
>             // Rule 149:  separatorOpt ::= $Empty
1139,1139c1123,1123
<             case 147: {
---
>             case 147: {
1145,1145c1145,1145
<             // Rule 148:  separatorOpt ::= SEPARATOR expression
---
>             // Rule 150:  separatorOpt ::= SEPARATOR expression
1147,1147c1131,1131
<             case 148: {
---
>             case 148: {
1153,1153c1153,1153
<             // Rule 149:  ifStatement ::= IF expression sequence elseifAny elseOpt ENDIF
---
>             // Rule 151:  ifStatement ::= IF expression sequence elseifAny elseOpt ENDIF
1155,1155c1139,1139
<             case 149: {
---
>             case 149: {
1175,1175c1175,1175
<             // Rule 150:  elseifAny ::= $Empty
---
>             // Rule 152:  elseifAny ::= $Empty
1177,1177c1147,1147
<             case 150: {
---
>             case 150: {
1183,1183c1183,1183
<             // Rule 151:  elseifAny ::= ELSEIF expression sequence elseifAny
---
>             // Rule 153:  elseifAny ::= ELSEIF expression sequence elseifAny
1185,1185c1155,1155
<             case 151: {
---
>             case 151: {
1194,1194c1194,1194
<             // Rule 152:  elseOpt ::= $Empty
---
>             // Rule 154:  elseOpt ::= $Empty
1196,1196c1177,1177
<             case 152: {
---
>             case 152: {
1202,1202c1202,1202
<             // Rule 153:  elseOpt ::= ELSE sequence
---
>             // Rule 155:  elseOpt ::= ELSE sequence
1204,1204c1185,1185
<             case 153: {
---
>             case 153: {
1210,1210c1210,1210
<             // Rule 154:  letStatement ::= LET expression AS IDENT sequence ENDLET
---
>             // Rule 156:  letStatement ::= LET expression AS IDENT sequence ENDLET
1212,1212c1196,1196
<             case 154: {
---
>             case 154: {
1218,1218c1218,1218
<             // Rule 155:  protectStatement ::= PROTECT CSTART expression CEND expression ID expression disabledOpt sequence ENDPROTECT
---
>             // Rule 157:  protectStatement ::= PROTECT CSTART expression CEND expression ID expression disabledOpt sequence ENDPROTECT
1220,1220c1204,1204
<             case 155: {
---
>             case 155: {
1226,1226c1226,1226
<             // Rule 156:  disabledOpt ::= $Empty
---
>             // Rule 158:  disabledOpt ::= $Empty
1228,1228c1212,1212
<             case 156: {
---
>             case 156: {
1234,1234c1234,1234
<             // Rule 157:  disabledOpt ::= DISABLE
---
>             // Rule 159:  disabledOpt ::= DISABLE
1236,1236c1220,1220
<             case 157: {
---
>             case 157: {
