15a16,17
> import java.util.List;
> import java.util.Set;
33a36,36
> import org.eclipse.gmf.codegen.gmfgen.GenNavigatorChildReference;
72a76,76
> 	@SuppressWarnings("unchecked")
107,107d110
< 		for (Iterator it = myDiagram.getAllNodes().iterator(); it.hasNext(); ) {
108,108c111,111
< 			final GenNode next = (GenNode) it.next();
---
> 		for (GenNode next : (List<? extends GenNode>) myDiagram.getAllNodes()) {
128,128d130
< 		for (Iterator it = myDiagram.getLinks().iterator(); it.hasNext();) {
129,129c131,131
< 			final GenLink next = (GenLink) it.next();
---
> 		for (GenLink next : (List<? extends GenLink>) myDiagram.getLinks()) {
131,131d132
< 			for (Iterator it2 = next.getLabels().iterator(); it2.hasNext();) {
132,132c133,133
< 				final GenLinkLabel label = (GenLinkLabel) it2.next();
---
> 			for (GenLinkLabel label : (List<? extends GenLinkLabel>) next.getLabels()) {
161a163,173
> 		if (!myEditorGen.getDomainGenModel().isRichClientPlatform() && myEditorGen.getNavigator() != null) {
> 			generateNavigatorContentProvider();
> 			generateNavigatorLabelProvider();
> 			generateNavigatorLinkHelper();
> 			generateNavigatorSorter();
> 			generateNavigatorActionProvider();
> 			generateAbstractNavigatorItem();
> 			generateNavigatorGroup();
> 			generateNavigatorItem();
> 			generateNavigatorGroupIcons();
> 		}
169a182,182
> 	@SuppressWarnings("unchecked")
179,179d191
< 		for (Iterator it = providerContainer.getProviders().iterator(); it.hasNext();) {
180,180c192,192
< 			GenExpressionProviderBase nextProvider = (GenExpressionProviderBase) it.next();
---
> 		for (GenExpressionProviderBase nextProvider : (List<? extends GenExpressionProviderBase>) providerContainer.getProviders()) {
276a289,380
> 	private void generateNavigatorContentProvider() throws InterruptedException, UnexpectedBehaviourException {
> 		internalGenerateJavaClass(
> 				myEmitters.getNavigatorContentProviderEmitter(),
> 				myEditorGen.getNavigator().getPackageName(),
> 				myEditorGen.getNavigator().getContentProviderClassName(),
> 				myEditorGen.getNavigator()
> 			);
> 	}
> 
> 	private void generateNavigatorLabelProvider() throws InterruptedException, UnexpectedBehaviourException {
> 		internalGenerateJavaClass(
> 				myEmitters.getNavigatorLabelProviderEmitter(),
> 				myEditorGen.getNavigator().getPackageName(),
> 				myEditorGen.getNavigator().getLabelProviderClassName(),
> 				myEditorGen.getNavigator()
> 			);
> 	}
> 	
> 	private void generateNavigatorLinkHelper() throws InterruptedException, UnexpectedBehaviourException {
> 		if (!myEditorGen.getEditor().isEclipseEditor()) {
> 			return;
> 		}
> 		internalGenerateJavaClass(
> 				myEmitters.getNavigatorLinkHelperEmitter(),
> 				myEditorGen.getNavigator().getPackageName(),
> 				myEditorGen.getNavigator().getLinkHelperClassName(), 
> 				myEditorGen.getNavigator()
> 			);
> 	}
> 	
> 	private void generateNavigatorSorter() throws InterruptedException, UnexpectedBehaviourException {
> 		internalGenerateJavaClass(
> 				myEmitters.getNavigatorSorterEmitter(),
> 				myEditorGen.getNavigator().getPackageName(),
> 				myEditorGen.getNavigator().getSorterClassName(), 
> 				myEditorGen.getNavigator()
> 			);
> 	}
> 	
> 	private void generateNavigatorActionProvider() throws InterruptedException, UnexpectedBehaviourException {
> 		internalGenerateJavaClass(
> 				myEmitters.getNavigatorActionProviderEmitter(),
> 				myEditorGen.getNavigator().getPackageName(),
> 				myEditorGen.getNavigator().getActionProviderClassName(), 
> 				myEditorGen.getNavigator()
> 			);
> 	}
> 	
> 	private void generateAbstractNavigatorItem() throws InterruptedException, UnexpectedBehaviourException {
> 		doGenerateJavaClass(
> 				myEmitters.getAbstractNavigatorItemEmitter(),
> 				myEditorGen.getNavigator().getPackageName(),
> 				myEditorGen.getNavigator().getAbstractNavigatorItemClassName(),
> 				myEditorGen.getNavigator()
> 			);
> 	}
> 	
> 	private void generateNavigatorGroup() throws InterruptedException, UnexpectedBehaviourException {
> 		internalGenerateJavaClass(
> 				myEmitters.getNavigatorGroupEmitter(),
> 				myEditorGen.getNavigator().getPackageName(),
> 				myEditorGen.getNavigator().getNavigatorGroupClassName(),
> 				myEditorGen.getNavigator()
> 			);
> 	}
> 	
> 	private void generateNavigatorItem() throws InterruptedException, UnexpectedBehaviourException {
> 		internalGenerateJavaClass(
> 				myEmitters.getNavigatorItemEmitter(),
> 				myEditorGen.getNavigator().getPackageName(),
> 				myEditorGen.getNavigator().getNavigatorItemClassName(),
> 				myEditorGen.getNavigator()
> 			);
> 	}
> 	
> 	@SuppressWarnings("unchecked")
> 	private void generateNavigatorGroupIcons() throws InterruptedException, UnexpectedBehaviourException {
> 		Set<String> groupIcons = new HashSet<String>();
> 		for (GenNavigatorChildReference nextReference : (List<? extends GenNavigatorChildReference>) myEditorGen.getNavigator().getChildReferences()) {
> 			if (nextReference.getGroupIcon() != null && nextReference.getGroupIcon().length() > 0) {
> 				groupIcons.add(nextReference.getGroupIcon());
> 			}
> 		}
> 		for (String iconPath : groupIcons) {
> 			generateGroupIcon(new Path(iconPath));
> 		}
> 	}
> 	
> 	private void generateGroupIcon(Path groupIconPath) throws InterruptedException, UnexpectedBehaviourException {
> 		doGenerateBinaryFile(myEmitters.getGroupIconEmitter(), groupIconPath, null);	
> 	}
> 
