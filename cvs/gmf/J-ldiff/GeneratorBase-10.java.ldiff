0a1,11
> /*
>  * Copyright (c) 2005, 2006 Borland Software Corporation
>  * 
>  * All rights reserved. This program and the accompanying materials
>  * are made available under the terms of the Eclipse Public License v1.0
>  * which accompanies this distribution, and is available at
>  * http://www.eclipse.org/legal/epl-v10.html
>  *
>  * Contributors:
>  *    Artem Tikhomirov (Borland) - initial API and implementation
>  */
11a23,24
> import java.util.HashMap;
> import java.util.Iterator;
31a45,46
> import org.eclipse.emf.ecore.EClass;
> import org.eclipse.emf.ecore.EObject;
48a64,64
> 
471a488,540
> 
> 	protected static final class Counter {
> 		private final HashMap<EClass, Integer> myCounters = new HashMap<EClass, Integer>();
> 		private final HashMap<EClass, Integer> myCache = new HashMap<EClass, Integer>();
> 		private final Integer CACHE_MISS = new Integer(0);
> 	
> 		public Counter() {
> 		}
> 	
> 		public void registerFactor(EClass eClass, int count) {
> 			myCounters.put(eClass, count);
> 		}
> 	
> 		public int getTotal(EObject from) {
> 			int total = process(from);
> 			for (Iterator it = from.eAllContents(); it.hasNext();) {
> 				total += process((EObject) it.next());
> 			}
> 			return total;
> 		}
> 	
> 		@SuppressWarnings("unchecked")
> 		protected int process(EObject next) {
> 			final EClass nextKey = next.eClass();
> 			Integer cachedValue = checkCached(nextKey);
> 			if (cachedValue != null) {
> 				return cachedValue; 
> 			}
> 			LinkedList<EClass> checkQueue = new LinkedList<EClass>();
> 			checkQueue.add(nextKey);
> 			do {
> 				EClass key = checkQueue.removeFirst();
> 				if (myCounters.containsKey(key)) {
> 					final Integer value = myCounters.get(key);
> 					cache(nextKey, value);
> 					return value;
> 				} else {
> 					// add immeditate superclasses to check first
> 					checkQueue.addAll(key.getESuperTypes());
> 				}
> 			} while (!checkQueue.isEmpty());
> 			cache(nextKey, CACHE_MISS);
> 			return 0;
> 		}
> 	
> 		private Integer checkCached(EClass nextKey) {
> 			return myCache.get(nextKey);
> 		}
> 	
> 		private void cache(EClass nextKey, Integer value) {
> 			myCache.put(nextKey, value);
> 		}
> 	}
