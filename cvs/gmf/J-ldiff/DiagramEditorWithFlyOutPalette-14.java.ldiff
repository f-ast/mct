2,2c2,2
<  * Copyright (c) 2002, 2007 IBM Corporation and others.
---
>  * Copyright (c) 2002, 2008 IBM Corporation and others.
26a27,27
> import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
34a36,36
> import org.eclipse.jface.preference.IPreferenceStore;
322,322c324,324
< 			FlyoutPaletteComposite.FlyoutPreferences flyoutPrefs = new FlyoutPreferencesImpl();
---
> 			FlyoutPaletteComposite.FlyoutPreferences flyoutPrefs = new FlyoutPreferencesImpl(
322a325,325
>                 getPreferenceStore());
323,324d324
< 			flyoutPrefs.setPaletteState(getInitialPaletteState());
< 			flyoutPrefs.setPaletteWidth(getInitialPaletteSize());
352a354,366
>      * Returns a preference store where GMF global workspace preferences can be
>      * saved. For example, the palette customizations are saved in this
>      * preference store. These settings are workspace-wide and not specific to
>      * any particular diagram.  Override to customize.
>      * 
>      * @return the preference store
>      * @since 2.1
>      */
>     protected IPreferenceStore getPreferenceStore() {
>         return DiagramUIPlugin.getInstance().getPreferenceStore();
>     }
> 	
> 	/**
524a550,550
>      * flyout palette settings in the given Preferences.
524,524c549,549
< 	 * An implementation of the fly-out palette preferences.
---
>      * An implementation of the fly-out palette preferences that stores the
526,526c552,552
< 	private static final class FlyoutPreferencesImpl
---
> 	private final class FlyoutPreferencesImpl
528a555,557
>         private static final String PALETTE_DOCK_LOCATION = "org.eclipse.gmf.pdock"; //$NON-NLS-1$
>         private static final String PALETTE_SIZE = "org.eclipse.gmf.psize"; //$NON-NLS-1$
>         private static final String PALETTE_STATE = "org.eclipse.gmf.pstate"; //$NON-NLS-1$
528a459,466
>     /**
>      * Returns the initial docking location of the palette either
>      * {@link PositionConstants#EAST} or {@link PositionConstants#WEST}. The
>      * 
>      * @return the initial dock location either {@link PositionConstants#EAST}
>      *         or {@link PositionConstants#WEST}
>      */
>     protected int getInitialDockLocation() {
529,529d458
< 		// 'EAST' is the default dock location
530a468,469
>     }
> 
530,530c467,467
< 		private int dockLocation = PositionConstants.EAST;
---
>         return PositionConstants.EAST;
531a559,559
>         private IPreferenceStore preferences;
532,534d558
< 		// '4' is the value of the FlyoutPaletteComposite.STATE_UNCOLLAPSED constant
< 		//   which is private.
< 		private int paletteState = UNCOLLAPSED_PINNED;
535a561,563
>         private FlyoutPreferencesImpl(IPreferenceStore preferenceStore) {
>             preferences = preferenceStore;
>         }
536,538d560
< 		// '125' is the value of the FlyoutPaletteComposite.DEFAULT_PALETTE_SIZE constant
< 		//   which was formerly public but is now private
< 		private int paletteWidth = 125;
540,542d564
< 		/* (non-Javadoc)
< 		 * @see org.eclipse.gef.ui.palette.FlyoutPaletteComposite.FlyoutPreferences#getDockLocation()
< 		 */
543a566,570
>             if (preferences.contains(PALETTE_DOCK_LOCATION)) {
>                 return preferences.getInt(PALETTE_DOCK_LOCATION);
>             } else {
>                 return getInitialDockLocation();
>             }
544,544d565
< 			return dockLocation;
547,549d572
< 		/* (non-Javadoc)
< 		 * @see org.eclipse.gef.ui.palette.FlyoutPaletteComposite.FlyoutPreferences#getPaletteState()
< 		 */
550a574,578
>             if (preferences.contains(PALETTE_STATE)) {
>                 return preferences.getInt(PALETTE_STATE);
>             } else {
>                 return getInitialPaletteState();
>             }
551,551d573
< 			return paletteState;
554,556d580
< 		/* (non-Javadoc)
< 		 * @see org.eclipse.gef.ui.palette.FlyoutPaletteComposite.FlyoutPreferences#getPaletteWidth()
< 		 */
557a582,586
>             if (preferences.contains(PALETTE_SIZE)) {
>                 return preferences.getInt(PALETTE_SIZE);
>             } else {
>                 return getInitialPaletteSize();
>             }
558,558d581
< 			return paletteWidth;
561,563d588
< 		/* (non-Javadoc)
< 		 * @see org.eclipse.gef.ui.palette.FlyoutPaletteComposite.FlyoutPreferences#setDockLocation(int)
< 		 */
564a590,590
>             preferences.setValue(PALETTE_DOCK_LOCATION, location);
565,565d589
< 			dockLocation = location;
568,570d592
< 		/* (non-Javadoc)
< 		 * @see org.eclipse.gef.ui.palette.FlyoutPaletteComposite.FlyoutPreferences#setPaletteState(int)
< 		 */
571a594,594
>             preferences.setValue(PALETTE_STATE, state);
572,572d593
< 			paletteState = state;
575,577d596
< 		/* (non-Javadoc)
< 		 * @see org.eclipse.gef.ui.palette.FlyoutPaletteComposite.FlyoutPreferences#setPaletteWidth(int)
< 		 */
578a598,598
>             preferences.setValue(PALETTE_SIZE, width);
579,579d597
< 			paletteWidth = width;
625,625c644,644
<         return new PaletteCustomizerEx();
---
>         return new PaletteCustomizerEx(getPreferenceStore());
