2,2c2,2
<  * Copyright (c) 2002, 2005 IBM Corporation and others.
---
>  * Copyright (c) 2002, 2006 IBM Corporation and others.
18a19,19
> import org.eclipse.core.commands.ExecutionException;
29,29c21,21
< import org.eclipse.gmf.runtime.common.core.command.CommandResult;
---
> import org.eclipse.core.runtime.IProgressMonitor;
29a22,26
> import org.eclipse.core.runtime.IStatus;
> import org.eclipse.core.runtime.Status;
> import org.eclipse.emf.edit.domain.EditingDomain;
> import org.eclipse.emf.edit.domain.IEditingDomainProvider;
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
41,41c48,48
< import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
---
> import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
54,54c60,60
< import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;
---
> import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
105,105c111,111
< 			CompoundCommand deleteCC = getDeleteCommand(cntxt);
---
> 			CompoundCommand deleteCC = getDeleteCommand(diagramPart, cntxt);
165a172,177
>         TransactionalEditingDomain editingDomain = getEditingDomain(diagramPart);
>         
>         if (editingDomain == null) {
>             return null;
>         }
>         
166,166c178,178
< 		return new CopyCommand(cntxt.getLabel(), diagramPart.getDiagram(),
---
>         return new CopyCommand(editingDomain, cntxt.getLabel(), diagramPart.getDiagram(),
169,169c181,181
< 			public boolean isUndoable() {
---
> 			public boolean canUndo() {
173,173c185,185
< 			public boolean isRedoable() {
---
> 			public boolean canRedo() {
176a189,196
> 		
>             protected IStatus doUndo(IProgressMonitor monitor, IAdaptable info)
>                 throws ExecutionException {
> 
>                 if (isUndoable) {
>                     return Status.OK_STATUS;
>                 }
>                 return super.doUndo(monitor, info);
177,179d188
< 			protected CommandResult doUndo() {
< 				return isUndoable ? newOKCommandResult()
< 					: super.doUndo();
181a199,205
> 			protected IStatus doRedo(IProgressMonitor monitor, IAdaptable info)
>                 throws ExecutionException {
> 
>                 if (isUndoable) {
>                     return Status.OK_STATUS;
>                 }
>                 return super.doRedo(monitor, info);
182,184d198
< 			protected CommandResult doRedo() {
< 				return isUndoable ? newOKCommandResult()
< 					: super.doRedo();
202a224,232
>         
>         TransactionalEditingDomain editingDomain = getEditingDomain(diagramPart);
> 
>         if (editingDomain == null) {
>             return null;
>         }
>         
>         CompositeTransactionalCommand cut = new CompositeTransactionalCommand(editingDomain, cntxt
>             .getLabel());
203,203d223
< 		CompositeModelCommand cut = new CompositeModelCommand(cntxt.getLabel());
228,228c257,257
< 		if (!cut.isEmpty() && cut.isExecutable())
---
> 		if (!cut.isEmpty() && cut.canExecute())
259a289,289
>      * @param part the workbench part
265a296,296
>             IGlobalActionContext cntxt) {
265,265c295,295
< 	private CompoundCommand getDeleteCommand(IGlobalActionContext cntxt) {
---
> 	private CompoundCommand getDeleteCommand(IDiagramWorkbenchPart part,
270a302,308
>         TransactionalEditingDomain editingDomain = getEditingDomain(part);
>         
>         if (editingDomain == null) {
>             return deleteCC;
>         }
> 
> 		CompositeTransactionalCommand compositeCommand = new CompositeTransactionalCommand(editingDomain, 
271,271d301
< 		CompositeModelCommand compositeCommand = new CompositeModelCommand(
272a310,310
>         
286,286c324,324
< 		if (compositeCommand.getCommands().size() > 0) {
---
> 		if (!compositeCommand.isEmpty()) {
489,489c527,527
< 			if (command != null && command.isExecutable()) {
---
> 			if (command != null && command.canExecute()) {
641a680,706
>     
>     /**
>      * Gets the transactional editing domain associated with the workbench
>      * <code>part</code>.
>      * 
>      * @param part
>      *            the diagram workbench part
>      * @return the editing domain, or <code>null</code> if there is none.
>      */
>     private TransactionalEditingDomain getEditingDomain(
>             IDiagramWorkbenchPart part) {
> 
>         TransactionalEditingDomain result = null;
> 
>         IEditingDomainProvider provider = (IEditingDomainProvider) part
>             .getAdapter(IEditingDomainProvider.class);
> 
>         if (provider != null) {
>             EditingDomain domain = provider.getEditingDomain();
> 
>             if (domain != null && domain instanceof TransactionalEditingDomain) {
>                 result = (TransactionalEditingDomain) domain;
>             }
>         }
> 
>         return result;
>     }
