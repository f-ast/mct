11,11c11,11
< package org.eclipse.gmf.internal.map.util;
---
> package org.eclipse.gmf.internal.codegen.util;
12a13,14
> import java.util.ArrayList;
> import java.util.Collection;
13a16,16
> import java.util.LinkedHashMap;
16,16d18
< import org.eclipse.emf.common.util.EList;
23,24d23
< import org.eclipse.gmf.mappings.FeatureLabelMapping;
< import org.eclipse.gmf.mappings.FeatureValueSpec;
25,25c24,24
< import org.eclipse.gmf.mappings.GMFMapFactory;
---
> import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;
26,26c25,25
< import org.eclipse.gmf.mappings.GMFMapPackage;
---
> import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
26a26,31
> import org.eclipse.gmf.codegen.gmfgen.GenAuditContainer;
> import org.eclipse.gmf.codegen.gmfgen.GenAuditRoot;
> import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;
> import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
> import org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter;
> import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
27,27d25
< import org.eclipse.gmf.mappings.LabelMapping;
28,28c32,32
< import org.eclipse.gmf.mappings.Language;
---
> import org.eclipse.gmf.codegen.gmfgen.GenPlugin;
29,30d32
< import org.eclipse.gmf.mappings.MappingEntry;
< import org.eclipse.gmf.mappings.ValueExpression;
32a36,37
> 	private EReference myGenAuditContainer_ChildContainers;
> 	private EReference myGenAuditRoot_Audits;
33,34d35
< 	private Map<LabelMapping, FeatureLabelMapping> myLabelMappingMigrations;
< 	private EAttribute myLabelMapping_ViewPattern;
35,35c38,38
< 	private EAttribute myLabelMapping_EditPattern;
---
> 	private EAttribute myGenAuditRoot_Id;
36,36d38
< 	private EReference myLabelMapping_Features;
37,37c39,39
< 	private EAttribute myFeatureValueSpec_Body;
---
> 	private EAttribute myGenAuditRoot_Name;
38a41,43
> 	private GenAuditContainer myRootContainer;
> 	private Map<GenExpressionInterpreter, Collection<String>> myRequiredPlugins;
> 	private GenExpressionProviderContainer myProvidersContainer;
38,38c40,40
< 	private EAttribute myFeatureValueSpec_Language;
---
> 	private EAttribute myGenAuditRoot_Description;
43a49,66
> 		registerDeletedAttributes(GMFGenPackage.eINSTANCE.getEditorCandies(),
> 						"diagramFileCreatorClassName", //$NON-NLS-1$
> 						"preferenceInitializerClassName" //$NON-NLS-1$
> 		);
> 		registerDeletedAttributes(GMFGenPackage.eINSTANCE.getProviderClassNames(), 
> 						"abstractParserClassName", //$NON-NLS-1$
> 						"structuralFeatureParserClassName", //$NON-NLS-1$
> 						"structuralFeaturesParserClassName", //$NON-NLS-1$
> 						"paletteProviderClassName", //$NON-NLS-1$
> 						"paletteProviderPriority", //$NON-NLS-1$
> 						"propertyProviderClassName", //$NON-NLS-1$
> 						"propertyProviderPriority" //$NON-NLS-1$
> 		);
> 		registerDeletedAttributes(GMFGenPackage.eINSTANCE.getEditPartCandies(), 
> 						"referenceConnectionEditPolicyClassName", //$NON-NLS-1$
> 						"externalNodeLabelHostLayoutEditPolicyClassName" //$NON-NLS-1$
> 		);
> 		registerDeletedAttributes(GMFGenPackage.eINSTANCE.getTypeLinkModelFacet(), "createCommandClassName"); //$NON-NLS-1$
44,52d48
< 		//registerNarrowReferenceType(GMFMapPackage.eINSTANCE.getFeatureSeqInitializer_Initializers(), GMFMapPackage.eINSTANCE.getFeatureValueSpec());
< 		// -->
< 		registerNarrowedAbstractType("FeatureInitializer", GMFMapPackage.eINSTANCE.getFeatureValueSpec());
< 		
< 		//registerNarrowReferenceType(GMFMapPackage.eINSTANCE.getMappingEntry_LabelMappings(), GMFMapPackage.eINSTANCE.getFeatureLabelMapping());
< 		// -->
< 		myLabelMapping_Features = (EReference) EcoreUtil.copy(GMFMapPackage.eINSTANCE.getFeatureLabelMapping_Features());
< 		myLabelMapping_ViewPattern = (EAttribute) EcoreUtil.copy(GMFMapPackage.eINSTANCE.getFeatureLabelMapping_ViewPattern());
< 		myLabelMapping_EditPattern = (EAttribute) EcoreUtil.copy(GMFMapPackage.eINSTANCE.getFeatureLabelMapping_EditPattern());
54a69,70
> 			renamings.put("requiredPluginIDs", GMFGenPackage.eINSTANCE.getGenPlugin_RequiredPlugins()); //$NON-NLS-1$
> 			registerRenamedAttributes(GMFGenPackage.eINSTANCE.getGenExpressionInterpreter(), renamings);
55,58d68
< 			renamings.put(myLabelMapping_ViewPattern.getName(), myLabelMapping_ViewPattern);
< 			renamings.put(myLabelMapping_EditPattern.getName(), myLabelMapping_EditPattern);
< 			renamings.put(myLabelMapping_Features.getName(), myLabelMapping_Features);
< 			registerRenamedAttributes(GMFMapPackage.eINSTANCE.getLabelMapping(), renamings);
60,62d71
< 		
< 		myFeatureValueSpec_Body = (EAttribute) EcoreUtil.copy(GMFMapPackage.eINSTANCE.getValueExpression_Body());
< 		myFeatureValueSpec_Language = (EAttribute) EcoreUtil.copy(GMFMapPackage.eINSTANCE.getValueExpression_Language());
64a74,95
> 			renamings.put("metaFeature", GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_MetaFeatures()); //$NON-NLS-1$
> 			registerRenamedAttributes(GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet(), renamings);
> 		}
> 		registerRenamedType("CompositeFeatureLabelModelFacet", GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet()); //$NON-NLS-1$
> 		myGenAuditContainer_ChildContainers = createNewReference("childContainers", GMFGenPackage.eINSTANCE.getGenAuditContainer(), true); //$NON-NLS-1$
> 		{
> 			Map<String, EStructuralFeature> renamings = new HashMap<String, EStructuralFeature>();
> 			renamings.put(myGenAuditContainer_ChildContainers.getName(), myGenAuditContainer_ChildContainers);
> 			registerRenamedAttributes(GMFGenPackage.eINSTANCE.getGenAuditContainer(), renamings);
> 		}
> 		myGenAuditRoot_Id = (EAttribute) EcoreUtil.copy(GMFGenPackage.eINSTANCE.getGenAuditContainer_Id());
> 		myGenAuditRoot_Name = (EAttribute) EcoreUtil.copy(GMFGenPackage.eINSTANCE.getGenAuditContainer_Name());
> 		myGenAuditRoot_Description = (EAttribute) EcoreUtil.copy(GMFGenPackage.eINSTANCE.getGenAuditContainer_Description());
> 		myGenAuditRoot_Audits = createNewReference("audits", GMFGenPackage.eINSTANCE.getGenAuditRule(), true); //$NON-NLS-1$
> 		{
> 			Map<String, EStructuralFeature> renamings = new HashMap<String, EStructuralFeature>();
> 			renamings.put(myGenAuditRoot_Audits.getName(), myGenAuditRoot_Audits);
> 			renamings.put(myGenAuditContainer_ChildContainers.getName(), myGenAuditContainer_ChildContainers);
> 			renamings.put(myGenAuditRoot_Id.getName(), myGenAuditRoot_Id);
> 			renamings.put(myGenAuditRoot_Name.getName(), myGenAuditRoot_Name);
> 			renamings.put(myGenAuditRoot_Description.getName(), myGenAuditRoot_Description);
> 			registerRenamedAttributes(GMFGenPackage.eINSTANCE.getGenAuditRoot(), renamings);
65,67d73
< 			renamings.put(myFeatureValueSpec_Body.getName(), myFeatureValueSpec_Body);
< 			renamings.put(myFeatureValueSpec_Language.getName(), myFeatureValueSpec_Language);
< 			registerRenamedAttributes(GMFMapPackage.eINSTANCE.getFeatureValueSpec(), renamings);
69a98,104
> 		//registerNarrowReferenceType(GMFGenPackage.eINSTANCE.getGenFeatureSeqInitializer_Initializers(), GMFGenPackage.eINSTANCE.getGenFeatureValueSpec());
> 		// --->
> 		registerNarrowedAbstractType("GenFeatureInitializer", GMFGenPackage.eINSTANCE.getGenFeatureValueSpec()); //$NON-NLS-1$
> 
> 		myRootContainer = null;
> 		myProvidersContainer = null;
> 		myRequiredPlugins = null;
70,70d97
< 		myLabelMappingMigrations = null;
74a109,152
> 		if (GMFGenPackage.eINSTANCE.getGenPlugin_RequiredPlugins().equals(feature) && object instanceof GenExpressionInterpreter) {
> 			GenExpressionInterpreter expressionInterpreter = (GenExpressionInterpreter) object;
> 			String requiredPlugin = (String) value;
> 			saveRequiredPlugin(expressionInterpreter, requiredPlugin);
> 	    } else if (myGenAuditRoot_Id.equals(feature)) {
> 			GenAuditRoot root = (GenAuditRoot) object;
> 			String id = (String) value;
> 			GenAuditContainer rootContainer = getOrCreateRootContainerOnce(root);
> 			rootContainer.setId(id);
> 			fireMigrationApplied(true);
> 		} else if (myGenAuditRoot_Name.equals(feature)) {
> 			GenAuditRoot root = (GenAuditRoot) object;
> 			String name = (String) value;
> 			GenAuditContainer rootContainer = getOrCreateRootContainerOnce(root);
> 			rootContainer.setName(name);
> 			fireMigrationApplied(true);
> 		} else if (myGenAuditRoot_Description.equals(feature)) {
> 			GenAuditRoot root = (GenAuditRoot) object;
> 			String description = (String) value;
> 			GenAuditContainer rootContainer = getOrCreateRootContainerOnce(root);
> 			rootContainer.setDescription(description);
> 			fireMigrationApplied(true);
> 		} else if (myGenAuditContainer_ChildContainers.equals(feature) && object instanceof GenAuditRoot) {
> 			GenAuditRoot root = (GenAuditRoot)object;
> 			GenAuditContainer container = (GenAuditContainer)value;
> 			if (myRootContainer != null) {
> 				container.getPath().add(myRootContainer);
> 			}
> 			root.getCategories().add(container);
> 			fireMigrationApplied(true);
> 		} else if (myGenAuditRoot_Audits.equals(feature) && object instanceof GenAuditRoot) {
> 			GenAuditRoot root = (GenAuditRoot)object;
> 			GenAuditRule rule = (GenAuditRule)value;
> 			if (myRootContainer != null) {
> 				rule.setCategory(myRootContainer);
> 				fireMigrationApplied(true);
> 			}
> 			root.getRules().add(rule);
> 		} else if (myGenAuditContainer_ChildContainers.equals(feature) && object instanceof GenAuditContainer) {
> 			GenAuditContainer parent = (GenAuditContainer)object;
> 			GenAuditContainer container = (GenAuditContainer)value;
> 			container.getPath().addAll(parent.getPath());
> 			container.getPath().add(parent);
> 			getOrCreateRoot(parent).getCategories().add(container);
75,103d108
< 		if (myLabelMapping_ViewPattern.equals(feature)) {
< 			LabelMapping mapping = (LabelMapping) object;
< 			String viewPattern = (String) value;
< 			FeatureLabelMapping migratedMapping = saveFeatureLabelMappingFor(mapping);
< 			migratedMapping.setViewPattern(viewPattern);
< 			fireMigrationApplied(true);
< 		} else if (myLabelMapping_EditPattern.equals(feature)) {
< 			LabelMapping mapping = (LabelMapping) object;
< 			String editPattern = (String) value;
< 			FeatureLabelMapping migratedMapping = saveFeatureLabelMappingFor(mapping);
< 			migratedMapping.setViewPattern(editPattern);
< 			fireMigrationApplied(true);
< 		} else if (myLabelMapping_Features.equals(feature)) {
< 			LabelMapping mapping = (LabelMapping) object;
< 			EAttribute attribute = (EAttribute) value;
< 			FeatureLabelMapping migratedMapping = saveFeatureLabelMappingFor(mapping);
< 			migratedMapping.getFeatures().add(attribute);
< 			fireMigrationApplied(true);
< 		} else if (myFeatureValueSpec_Body.equals(feature)) {
< 			FeatureValueSpec featureRef = (FeatureValueSpec) object;
< 			String body = (String) value;
< 			ValueExpression constraint = getOrCreateValueExpression(featureRef);
< 			constraint.setBody(body);
< 			fireMigrationApplied(true);
< 		} else if (myFeatureValueSpec_Language.equals(feature)) {
< 			FeatureValueSpec featureRef = (FeatureValueSpec) object;
< 			ValueExpression constraint = getOrCreateValueExpression(featureRef);
< 			Language lang = Language.get((String) value);
< 			constraint.setLanguage(lang);
104a154,158
> 		} else if (GMFGenPackage.eINSTANCE.getGenAuditContainer_Audits().equals(feature) && object instanceof GenAuditContainer) {
> 			GenAuditContainer container = (GenAuditContainer)object;
> 			GenAuditRule rule = (GenAuditRule)value;
> 			rule.setCategory(container);
> 			getOrCreateRoot(container).getRules().add(rule);
111a166,168
> 	private void saveRequiredPlugin(GenExpressionInterpreter expressionProvider, String requiredPlugin) {
> 		if (myRequiredPlugins == null) {
> 			myRequiredPlugins = new LinkedHashMap<GenExpressionInterpreter, Collection<String>>();
112,116d165
< 	private ValueExpression getOrCreateValueExpression(FeatureValueSpec featureRef) {
< 		ValueExpression constraint = featureRef.getValue();
< 		if (constraint == null) {
< 			constraint = GMFMapFactory.eINSTANCE.createValueExpression();
< 			featureRef.setValue(constraint);
117a170,172
> 		Collection<String> requiredPlugins = myRequiredPlugins.get(expressionProvider);
> 		if (requiredPlugins == null) {
> 			requiredPlugins = new ArrayList<String>();
118,118c236,236
< 		return constraint;
---
> 		return result;
119a174,175
> 		requiredPlugins.add(requiredPlugin);
> 		myRequiredPlugins.put(expressionProvider, requiredPlugins);
120,130d173
< 
< 	private FeatureLabelMapping saveFeatureLabelMappingFor(LabelMapping labelMapping) {
< 		if (myLabelMappingMigrations == null) {
< 			myLabelMappingMigrations = new HashMap<LabelMapping, FeatureLabelMapping>();
< 		}
< 		FeatureLabelMapping migrated = myLabelMappingMigrations.get(labelMapping);
< 		if (migrated == null) {
< 			migrated = GMFMapFactory.eINSTANCE.createFeatureLabelMapping();
< 			myLabelMappingMigrations.put(labelMapping, migrated);
< 		}
< 		return migrated;
132a178,179
> 	private Map<GenExpressionInterpreter, Collection<String>> getSavedRequiredPlugins() {
> 		return myRequiredPlugins;
133,134d177
< 	private Map<LabelMapping, FeatureLabelMapping> getSavedLabelMappingMigrations() {
< 		return myLabelMappingMigrations;
139,139c184,184
< 		if (getSavedLabelMappingMigrations() == null) {
---
> 		if (getSavedRequiredPlugins() == null) {
141a187,202
> 		for (GenExpressionInterpreter expressionProvider : getSavedRequiredPlugins().keySet()) {
> 			GenExpressionProviderContainer container = expressionProvider.getContainer();
> 			if (container == null) {
> 				container = getOrCreateParenlessProvidersContainerOnce(expressionProvider);
> 				container.getProviders().add(expressionProvider);
> 			}
> 			GenEditorGenerator editor = container.getEditorGen();
> 			if (editor == null) {
> 				editor = GMFGenFactory.eINSTANCE.createGenEditorGenerator();
> 				container.eResource().getContents().add(editor);
> 				editor.setExpressionProviders(container);
> 			}
> 			GenPlugin plugin = editor.getPlugin();
> 			if (plugin == null) {
> 				plugin = GMFGenFactory.eINSTANCE.createGenPlugin();
> 				editor.setPlugin(plugin);
142,151d186
< 		for (LabelMapping mapping : getSavedLabelMappingMigrations().keySet()) {
< 			FeatureLabelMapping migrated = getSavedLabelMappingMigrations().get(mapping);
< 			if (!migrated.getFeatures().isEmpty()) {
< 				MappingEntry entry = mapping.getMapEntry();
< 				EList<LabelMapping> labelMappings = entry.getLabelMappings();
< 				int originalIndex = labelMappings.indexOf(mapping);
< 				if (originalIndex != -1) {
< 					migrated.setDiagramLabel(mapping.getDiagramLabel());
< 					if (mapping.isReadOnly()) {
< 						migrated.setReadOnly(true);
152a204,213
> 			plugin.getRequiredPlugins().addAll(getSavedRequiredPlugins().get(expressionProvider));
> 			fireMigrationApplied(true);
> 		}
> 		getSavedRequiredPlugins().clear();
> 	}
> 
> 	private GenExpressionProviderContainer getOrCreateParenlessProvidersContainerOnce(GenExpressionInterpreter expressionProvider) {
> 		if (myProvidersContainer == null) {
> 			myProvidersContainer = GMFGenFactory.eINSTANCE.createGenExpressionProviderContainer();
> 			expressionProvider.eResource().getContents().add(myProvidersContainer);
153,153d203
< 					labelMappings.set(originalIndex, migrated);
154a215,232
> 		return myProvidersContainer;
> 	}
> 
> 	private GenAuditContainer getOrCreateRootContainerOnce(GenAuditRoot root) {
> 		if (myRootContainer == null) {
> 			myRootContainer = GMFGenFactory.eINSTANCE.createGenAuditContainer();
> 			root.getCategories().add(myRootContainer);
> 		}
> 		return myRootContainer;
> 	}
> 
> 	private GenAuditRoot getOrCreateRoot(GenAuditContainer auditContainer) {
> 		GenAuditRoot result = auditContainer.getRoot();
> 		if (result == null) {
> 			result = GMFGenFactory.eINSTANCE.createGenAuditRoot();
> 			if (auditContainer.eContainer() == null) {
> 				auditContainer.eResource().getContents().add(result);
> 				fireMigrationApplied(true);
155a234,234
> 			result.getCategories().add(auditContainer);
