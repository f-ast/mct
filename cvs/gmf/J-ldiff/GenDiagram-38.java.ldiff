10,10d10
< import org.eclipse.emf.codegen.ecore.genmodel.GenModel;
11,11c11,11
< import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
---
> import org.eclipse.gmf.common.codegen.ImportAssistant;
22,22d20
<  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.GenDiagram#getDomainMetaModel <em>Domain Meta Model</em>}</li>
28,28d26
<  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.GenDiagram#getAudits <em>Audits</em>}</li>
30,30c21,21
<  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.GenDiagram#getPlugin <em>Plugin</em>}</li>
---
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.GenDiagram#getEditorGen <em>Editor Gen</em>}</li>
42,42d38
< 	 * Returns the value of the '<em><b>Domain Meta Model</b></em>' reference.
45,45c43,43
< 	 * If the meaning of the '<em>Domain Meta Model</em>' reference isn't clear,
---
> 	 * If the meaning of the '<em>Editor Gen</em>' container reference isn't clear,
48a47,47
> 	 * @return the value of the '<em>Editor Gen</em>' container reference.
49,50d46
< 	 * @return the value of the '<em>Domain Meta Model</em>' reference.
< 	 * @see #setDomainMetaModel(GenPackage)
51a49,49
> 	 * @see org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator#getDiagram
51,51c48,48
< 	 * @see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenDiagram_DomainMetaModel()
---
> 	 * @see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenDiagram_EditorGen()
52,52c50,50
< 	 * @model required="true"
---
> 	 * @model opposite="diagram" changeable="false"
53,53d50
< 	 *        annotation="http://www.eclipse.org/gmf/2006/deprecated documentation='Don\'t use it as it\'s misleading in case of domain model classes residing in several packages'"
55a53,53
> 	GenEditorGenerator getEditorGen();
56,66d52
< 	GenPackage getDomainMetaModel();
< 
< 	/**
< 	 * Sets the value of the '{@link org.eclipse.gmf.codegen.gmfgen.GenDiagram#getDomainMetaModel <em>Domain Meta Model</em>}' reference.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @param value the new value of the '<em>Domain Meta Model</em>' reference.
< 	 * @see #getDomainMetaModel()
< 	 * @generated
< 	 */
< 	void setDomainMetaModel(GenPackage value);
167,195d153
< 	 * Returns the value of the '<em><b>Audits</b></em>' containment reference.
< 	 * <!-- begin-user-doc -->
< 	 * <p>
< 	 * If the meaning of the '<em>Audits</em>' containment reference isn't clear,
< 	 * there really should be more of a description here...
< 	 * </p>
< 	 * <!-- end-user-doc -->
< 	 * <!-- begin-model-doc -->
< 	 * Domain meta-model  audit rules definitions
< 	 * <!-- end-model-doc -->
< 	 * @return the value of the '<em>Audits</em>' containment reference.
< 	 * @see #setAudits(GenAuditContainer)
< 	 * @see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenDiagram_Audits()
< 	 * @model containment="true"
< 	 * @generated
< 	 */
< 	GenAuditContainer getAudits();
< 
< 	/**
< 	 * Sets the value of the '{@link org.eclipse.gmf.codegen.gmfgen.GenDiagram#getAudits <em>Audits</em>}' containment reference.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @param value the new value of the '<em>Audits</em>' containment reference.
< 	 * @see #getAudits()
< 	 * @generated
< 	 */
< 	void setAudits(GenAuditContainer value);
< 
< 	/**
223a39,39
> 	 * Returns the value of the '<em><b>Editor Gen</b></em>' container reference.
224,224d38
< 	 * Returns the value of the '<em><b>Plugin</b></em>' containment reference.
225,225c40,40
< 	 * It is bidirectional and its opposite is '{@link org.eclipse.gmf.codegen.gmfgen.GenPlugin#getDiagram <em>Diagram</em>}'.
---
> 	 * It is bidirectional and its opposite is '{@link org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator#getDiagram <em>Diagram</em>}'.
226,251d40
< 	 * <!-- begin-user-doc -->
< 	 * <p>
< 	 * If the meaning of the '<em>Plugin</em>' containment reference isn't clear,
< 	 * there really should be more of a description here...
< 	 * </p>
< 	 * <!-- end-user-doc -->
< 	 * @return the value of the '<em>Plugin</em>' containment reference.
< 	 * @see #setPlugin(GenPlugin)
< 	 * @see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenDiagram_Plugin()
< 	 * @see org.eclipse.gmf.codegen.gmfgen.GenPlugin#getDiagram
< 	 * @model opposite="diagram" containment="true" required="true"
< 	 * @generated
< 	 */
< 	GenPlugin getPlugin();
< 
< 	/**
< 	 * Sets the value of the '{@link org.eclipse.gmf.codegen.gmfgen.GenDiagram#getPlugin <em>Plugin</em>}' containment reference.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @param value the new value of the '<em>Plugin</em>' containment reference.
< 	 * @see #getPlugin()
< 	 * @generated
< 	 */
< 	void setPlugin(GenPlugin value);
< 
< 	/**
305,315d234
< 	 * <!-- begin-model-doc -->
< 	 * == domainMetaModel.getGenModel()
< 	 * <!-- end-model-doc -->
< 	 * @model kind="operation"
< 	 * @generated
< 	 */
< 	GenModel getEMFGenModel();
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
358a278,285
> 	// Custom additions, to ease template authoring
> 
> 	/**
> 	 * Shorthand for <code>importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedPackageInterfaceName())</code>
> 	 * NOTE: genPackage for domainDiagramElement only (not editor-wide domain model!), don't use it for
> 	 * features/classes/references found in GenLink/GenNodes!
> 	 */
> 	String getMetaPackageName(ImportAssistant importManager);
