7,7c7,7
< package org.eclipse.gmf.tooldef.impl;
---
> package org.eclipse.gmf.codegen.gmfgen.impl;
8a9,9
> import java.util.Collection;
9a12,12
> import org.eclipse.emf.common.util.EList;
9,9c11,11
< import org.eclipse.emf.common.notify.Notification;
---
> import org.eclipse.emf.common.notify.NotificationChain;
12a15,20
> import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
> import org.eclipse.emf.ecore.util.InternalEList;
> import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
> import org.eclipse.gmf.codegen.gmfgen.LinkEntry;
> import org.eclipse.gmf.codegen.gmfgen.NodeEntry;
> import org.eclipse.gmf.codegen.gmfgen.Palette;
13,17d14
< 
< import org.eclipse.emf.ecore.impl.ENotificationImpl;
< 
< import org.eclipse.gmf.tooldef.AbstractTool;
< import org.eclipse.gmf.tooldef.GMFToolPackage;
18,18c21,21
< import org.eclipse.gmf.tooldef.ToolGroup;
---
> import org.eclipse.gmf.codegen.gmfgen.ToolGroup;
26a30,31
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.ToolGroupImpl#getNodeTools <em>Node Tools</em>}</li>
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.ToolGroupImpl#getLinkTools <em>Link Tools</em>}</li>
27,28d29
<  *   <li>{@link org.eclipse.gmf.tooldef.impl.ToolGroupImpl#isCollapsible <em>Collapsible</em>}</li>
<  *   <li>{@link org.eclipse.gmf.tooldef.impl.ToolGroupImpl#isStack <em>Stack</em>}</li>
29,29c32,32
<  *   <li>{@link org.eclipse.gmf.tooldef.impl.ToolGroupImpl#getActive <em>Active</em>}</li>
---
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.ToolGroupImpl#getPalette <em>Palette</em>}</li>
34a38,38
> public class ToolGroupImpl extends EntryBaseImpl implements ToolGroup {
35,66d37
< public class ToolGroupImpl extends ToolContainerImpl implements ToolGroup {
< 
< 	/**
< 	 * The default value of the '{@link #isCollapsible() <em>Collapsible</em>}' attribute.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @see #isCollapsible()
< 	 * @generated
< 	 * @ordered
< 	 */
< 	protected static final boolean COLLAPSIBLE_EDEFAULT = false;
< 
< 	/**
< 	 * The cached value of the '{@link #isCollapsible() <em>Collapsible</em>}' attribute.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @see #isCollapsible()
< 	 * @generated
< 	 * @ordered
< 	 */
< 	protected boolean collapsible = COLLAPSIBLE_EDEFAULT;
< 
< 	/**
< 	 * The default value of the '{@link #isStack() <em>Stack</em>}' attribute.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @see #isStack()
< 	 * @generated
< 	 * @ordered
< 	 */
< 	protected static final boolean STACK_EDEFAULT = false;
< 
68,68c50,50
< 	 * The cached value of the '{@link #isStack() <em>Stack</em>}' attribute.
---
> 	 * The cached value of the '{@link #getLinkTools() <em>Link Tools</em>}' containment reference list.
71,71c43,43
< 	 * @see #isStack()
---
> 	 * @see #getNodeTools()
75,75d46
< 	protected boolean stack = STACK_EDEFAULT;
78,78c40,40
< 	 * The cached value of the '{@link #getActive() <em>Active</em>}' reference.
---
> 	 * The cached value of the '{@link #getNodeTools() <em>Node Tools</em>}' containment reference list.
81,81c53,53
< 	 * @see #getActive()
---
> 	 * @see #getLinkTools()
84a57,57
> 	protected EList linkTools = null;
85,85c47,47
< 	protected AbstractTool active = null;
---
> 	protected EList nodeTools = null;
102,102c74,74
< 		return GMFToolPackage.eINSTANCE.getToolGroup();
---
> 		return GMFGenPackage.eINSTANCE.getToolGroup();
109a82,84
> 	public EList getNodeTools() {
> 		if (nodeTools == null) {
> 			nodeTools = new EObjectContainmentWithInverseEList(NodeEntry.class, this, GMFGenPackage.TOOL_GROUP__NODE_TOOLS, GMFGenPackage.NODE_ENTRY__GROUP);
110,111d81
< 	public boolean isCollapsible() {
< 		return collapsible;
113,123d85
< 
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public void setCollapsible(boolean newCollapsible) {
< 		boolean oldCollapsible = collapsible;
< 		collapsible = newCollapsible;
< 		if (eNotificationRequired())
< 			eNotify(new ENotificationImpl(this, Notification.SET, GMFToolPackage.TOOL_GROUP__COLLAPSIBLE, oldCollapsible, collapsible));
130a94,98
> 	public EList getLinkTools() {
> 		if (linkTools == null) {
> 			linkTools = new EObjectContainmentWithInverseEList(LinkEntry.class, this, GMFGenPackage.TOOL_GROUP__LINK_TOOLS, GMFGenPackage.LINK_ENTRY__GROUP);
> 		}
> 		return linkTools;
131,132d93
< 	public boolean isStack() {
< 		return stack;
139a106,108
> 	public Palette getPalette() {
> 		if (eContainerFeatureID != GMFGenPackage.TOOL_GROUP__PALETTE) return null;
> 		return (Palette)eContainer();
140,144d105
< 	public void setStack(boolean newStack) {
< 		boolean oldStack = stack;
< 		stack = newStack;
< 		if (eNotificationRequired())
< 			eNotify(new ENotificationImpl(this, Notification.SET, GMFToolPackage.TOOL_GROUP__STACK, oldStack, stack));
151a116,125
> 	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
> 		switch (featureID) {
> 			case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
> 				return ((InternalEList)getNodeTools()).basicAdd(otherEnd, msgs);
> 			case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
> 				return ((InternalEList)getLinkTools()).basicAdd(otherEnd, msgs);
> 			case GMFGenPackage.TOOL_GROUP__PALETTE:
> 				if (eInternalContainer() != null)
> 					msgs = eBasicRemoveFromContainer(msgs);
> 				return eBasicSetContainer(otherEnd, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
152,159d115
< 	public AbstractTool getActive() {
< 		if (active != null && active.eIsProxy()) {
< 			InternalEObject oldActive = (InternalEObject) active;
< 			active = (AbstractTool) eResolveProxy(oldActive);
< 			if (active != oldActive) {
< 				if (eNotificationRequired())
< 					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFToolPackage.TOOL_GROUP__ACTIVE, oldActive, active));
< 			}
160a127,127
> 		return super.eInverseAdd(otherEnd, featureID, msgs);
161,161c86,86
< 		return active;
---
> 		return nodeTools;
168a135,144
> 	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
> 		switch (featureID) {
> 			case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
> 				return ((InternalEList)getNodeTools()).basicRemove(otherEnd, msgs);
> 			case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
> 				return ((InternalEList)getLinkTools()).basicRemove(otherEnd, msgs);
> 			case GMFGenPackage.TOOL_GROUP__PALETTE:
> 				return eBasicSetContainer(null, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
> 		}
> 		return super.eInverseRemove(otherEnd, featureID, msgs);
169,170d134
< 	public AbstractTool basicGetActive() {
< 		return active;
177a152,157
> 	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
> 		switch (eContainerFeatureID) {
> 			case GMFGenPackage.TOOL_GROUP__PALETTE:
> 				return eInternalContainer().eInverseRemove(this, GMFGenPackage.PALETTE__GROUPS, Palette.class, msgs);
> 		}
> 		return super.eBasicRemoveFromContainerFeature(msgs);
178,182d151
< 	public void setActive(AbstractTool newActive) {
< 		AbstractTool oldActive = active;
< 		active = newActive;
< 		if (eNotificationRequired())
< 			eNotify(new ENotificationImpl(this, Notification.SET, GMFToolPackage.TOOL_GROUP__ACTIVE, oldActive, active));
191a167,172
> 			case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
> 				return getNodeTools();
> 			case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
> 				return getLinkTools();
> 			case GMFGenPackage.TOOL_GROUP__PALETTE:
> 				return getPalette();
192,199d166
< 		case GMFToolPackage.TOOL_GROUP__COLLAPSIBLE:
< 			return isCollapsible() ? Boolean.TRUE : Boolean.FALSE;
< 		case GMFToolPackage.TOOL_GROUP__STACK:
< 			return isStack() ? Boolean.TRUE : Boolean.FALSE;
< 		case GMFToolPackage.TOOL_GROUP__ACTIVE:
< 			if (resolve)
< 				return getActive();
< 			return basicGetActive();
210a184,190
> 			case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
> 				getNodeTools().clear();
> 				getNodeTools().addAll((Collection)newValue);
> 				return;
> 			case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
> 				getLinkTools().clear();
> 				getLinkTools().addAll((Collection)newValue);
211,218d183
< 		case GMFToolPackage.TOOL_GROUP__COLLAPSIBLE:
< 			setCollapsible(((Boolean) newValue).booleanValue());
< 			return;
< 		case GMFToolPackage.TOOL_GROUP__STACK:
< 			setStack(((Boolean) newValue).booleanValue());
< 			return;
< 		case GMFToolPackage.TOOL_GROUP__ACTIVE:
< 			setActive((AbstractTool) newValue);
230a203,204
> 			case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
> 				getNodeTools().clear();
231,232d202
< 		case GMFToolPackage.TOOL_GROUP__COLLAPSIBLE:
< 			setCollapsible(COLLAPSIBLE_EDEFAULT);
233a206,207
> 			case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
> 				getLinkTools().clear();
234,238d205
< 		case GMFToolPackage.TOOL_GROUP__STACK:
< 			setStack(STACK_EDEFAULT);
< 			return;
< 		case GMFToolPackage.TOOL_GROUP__ACTIVE:
< 			setActive((AbstractTool) null);
250a220,225
> 			case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
> 				return nodeTools != null && !nodeTools.isEmpty();
> 			case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
> 				return linkTools != null && !linkTools.isEmpty();
> 			case GMFGenPackage.TOOL_GROUP__PALETTE:
> 				return getPalette() != null;
251,256d219
< 		case GMFToolPackage.TOOL_GROUP__COLLAPSIBLE:
< 			return collapsible != COLLAPSIBLE_EDEFAULT;
< 		case GMFToolPackage.TOOL_GROUP__STACK:
< 			return stack != STACK_EDEFAULT;
< 		case GMFToolPackage.TOOL_GROUP__ACTIVE:
< 			return active != null;
261,278d229
< 	/**
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public String toString() {
< 		if (eIsProxy())
< 			return super.toString();
< 
< 		StringBuffer result = new StringBuffer(super.toString());
< 		result.append(" (collapsible: ");
< 		result.append(collapsible);
< 		result.append(", stack: ");
< 		result.append(stack);
< 		result.append(')');
< 		return result.toString();
< 	}
< 
