9,11d8
< import java.util.ArrayList;
< import java.util.Collection;
< import java.util.Collections;
13,14d9
< import java.util.Iterator;
< import java.util.List;
15a19,19
> import org.eclipse.core.runtime.Path;
16,18d18
< import java.util.MissingResourceException;
< import java.util.StringTokenizer;
< 
19a21,21
> import org.eclipse.emf.ecore.EObject;
19,19c20,20
< import org.eclipse.emf.common.util.URI;
---
> import org.eclipse.emf.common.util.URI;
20,23d20
< 
< import org.eclipse.emf.ecore.EClass;
< import org.eclipse.emf.ecore.EClassifier;
< 
24,24c22,22
< import org.eclipse.emf.ecore.resource.Resource;
---
> import org.eclipse.emf.ecore.resource.Resource;
25,25c23,23
< import org.eclipse.emf.ecore.resource.ResourceSet;
---
> import org.eclipse.emf.ecore.resource.ResourceSet;
26,26d23
< 
27,27c24,24
< import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
---
> import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
28,30d24
< 
< import org.eclipse.emf.ecore.EObject;
< 
31,31c25,25
< import org.eclipse.emf.ecore.xmi.XMLResource;
---
> import org.eclipse.emf.ecore.xmi.XMLResource;
32,32d25
< 
33,33c26,26
< import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;
---
> import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;
33a27,28
> import org.eclipse.gmf.tooldef.GMFToolPackage;
> import org.eclipse.gmf.tooldef.provider.GMFToolEditPlugin;
41,41d17
< 
43,43d18
< 
45,45d29
< 
46a32,32
> import org.eclipse.jface.viewers.StructuredSelection;
47,47d31
< 
49,49c30,30
< import org.eclipse.jface.wizard.WizardPage;
---
> import org.eclipse.jface.viewers.ISelection;
50,62d30
< 
< import org.eclipse.swt.SWT;
< 
< import org.eclipse.swt.events.ModifyListener;
< import org.eclipse.swt.events.ModifyEvent;
< 
< import org.eclipse.swt.layout.GridData;
< import org.eclipse.swt.layout.GridLayout;
< 
< import org.eclipse.swt.widgets.Combo;
< import org.eclipse.swt.widgets.Composite;
< import org.eclipse.swt.widgets.Label;
< 
65,65d39
< 
66,66c40,40
< import org.eclipse.ui.actions.WorkspaceModifyOperation;
---
> import org.eclipse.ui.actions.WorkspaceModifyOperation;
67,67d40
< 
68,68c41,41
< import org.eclipse.ui.dialogs.WizardNewFileCreationPage;
---
> import org.eclipse.ui.dialogs.WizardNewFileCreationPage;
69,69d41
< 
70,70c42,42
< import org.eclipse.ui.part.FileEditorInput;
---
> import org.eclipse.ui.part.FileEditorInput;
71,71c43,43
< import org.eclipse.ui.part.ISetSelectionTarget;
---
> import org.eclipse.ui.part.ISetSelectionTarget;
72,81d43
< 
< import org.eclipse.gmf.tooldef.GMFToolFactory;
< import org.eclipse.gmf.tooldef.GMFToolPackage;
< import org.eclipse.gmf.tooldef.provider.GMFToolEditPlugin;
< 
< import org.eclipse.core.runtime.Path;
< 
< import org.eclipse.jface.viewers.ISelection;
< import org.eclipse.jface.viewers.StructuredSelection;
< 
91,91c49,49
<  * @generated
---
>  * @generated NOT
94,108d51
< 	/**
< 	 * This caches an instance of the model package.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	protected GMFToolPackage gmfToolPackage = GMFToolPackage.eINSTANCE;
< 
< 	/**
< 	 * This caches an instance of the model factory.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	protected GMFToolFactory gmfToolFactory = gmfToolPackage.getGMFToolFactory();
119,126d61
< 	 * This is the initial object creation page.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	protected GMFToolModelWizardInitialObjectCreationPage initialObjectCreationPage;
< 
< 	/**
143,150d77
< 	 * Caches the names of the types that can be created as the root object.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	protected List initialObjectNames;
< 
< 	/**
164,186d90
< 	 * Returns the names of the types that can be created as the root object.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	protected Collection getInitialObjectNames() {
< 		if (initialObjectNames == null) {
< 			initialObjectNames = new ArrayList();
< 			for (Iterator classifiers = gmfToolPackage.getEClassifiers().iterator(); classifiers.hasNext();) {
< 				EClassifier eClassifier = (EClassifier) classifiers.next();
< 				if (eClassifier instanceof EClass) {
< 					EClass eClass = (EClass) eClassifier;
< 					if (!eClass.isAbstract()) {
< 						initialObjectNames.add(eClass.getName());
< 					}
< 				}
< 			}
< 			Collections.sort(initialObjectNames, java.text.Collator.getInstance());
< 		}
< 		return initialObjectNames;
< 	}
< 
< 	/**
193,193c97,97
< 		return gmfToolFactory.createToolRegistry();
---
> 		return GMFToolPackage.eINSTANCE.getGMFToolFactory().createToolRegistry();
204,205d107
< 			// Remember the file.
< 			//
207a117,117
> 	protected void createModelFile(final IFile modelFile) throws Exception {
208,209d116
< 			// Do the work within an operation.
< 			//
244,244d151
< 
245a153,155
> 	}
> 
> 	protected boolean openEditor(IFile modelFile) {
270a109,110
> 			createModelFile(modelFile);
> 			return openEditor(modelFile);
271,271c111,111
< 		} catch (Exception exception) {
---
> 		} catch (Exception exception) {
272,272c112,112
< 			GMFToolEditPlugin.INSTANCE.log(exception);
---
> 			GMFToolEditPlugin.INSTANCE.log(exception);
273,273c113,113
< 			return false;
---
> 			return false;
274a115,115
> 	}
274,274c114,114
< 		}
---
> 		}
328,533d233
< 	 * This is the page where the type of object to create is selected.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 * @generated
< 	 */
< 	public class GMFToolModelWizardInitialObjectCreationPage extends WizardPage {
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		protected Combo initialObjectField;
< 
< 		/**
< 		 * @generated
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 */
< 		protected List encodings;
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		protected Combo encodingField;
< 
< 		/**
< 		 * Pass in the selection.
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		public GMFToolModelWizardInitialObjectCreationPage(String pageId) {
< 			super(pageId);
< 		}
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		public void createControl(Composite parent) {
< 			Composite composite = new Composite(parent, SWT.NONE);
< 			{
< 				GridLayout layout = new GridLayout();
< 				layout.numColumns = 1;
< 				layout.verticalSpacing = 12;
< 				composite.setLayout(layout);
< 
< 				GridData data = new GridData();
< 				data.verticalAlignment = GridData.FILL;
< 				data.grabExcessVerticalSpace = true;
< 				data.horizontalAlignment = GridData.FILL;
< 				composite.setLayoutData(data);
< 			}
< 
< 			Label containerLabel = new Label(composite, SWT.LEFT);
< 			{
< 				containerLabel.setText(GMFToolEditPlugin.INSTANCE.getString("_UI_ModelObject"));
< 
< 				GridData data = new GridData();
< 				data.horizontalAlignment = GridData.FILL;
< 				containerLabel.setLayoutData(data);
< 			}
< 
< 			initialObjectField = new Combo(composite, SWT.BORDER);
< 			{
< 				GridData data = new GridData();
< 				data.horizontalAlignment = GridData.FILL;
< 				data.grabExcessHorizontalSpace = true;
< 				initialObjectField.setLayoutData(data);
< 			}
< 
< 			for (Iterator i = getInitialObjectNames().iterator(); i.hasNext();) {
< 				initialObjectField.add(getLabel((String) i.next()));
< 			}
< 
< 			if (initialObjectField.getItemCount() == 1) {
< 				initialObjectField.select(0);
< 			}
< 			initialObjectField.addModifyListener(validator);
< 
< 			Label encodingLabel = new Label(composite, SWT.LEFT);
< 			{
< 				encodingLabel.setText(GMFToolEditPlugin.INSTANCE.getString("_UI_XMLEncoding"));
< 
< 				GridData data = new GridData();
< 				data.horizontalAlignment = GridData.FILL;
< 				encodingLabel.setLayoutData(data);
< 			}
< 			encodingField = new Combo(composite, SWT.BORDER);
< 			{
< 				GridData data = new GridData();
< 				data.horizontalAlignment = GridData.FILL;
< 				data.grabExcessHorizontalSpace = true;
< 				encodingField.setLayoutData(data);
< 			}
< 
< 			for (Iterator i = getEncodings().iterator(); i.hasNext();) {
< 				encodingField.add((String) i.next());
< 			}
< 
< 			encodingField.select(0);
< 			encodingField.addModifyListener(validator);
< 
< 			setPageComplete(validatePage());
< 			setControl(composite);
< 		}
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		protected ModifyListener validator = new ModifyListener() {
< 			public void modifyText(ModifyEvent e) {
< 				setPageComplete(validatePage());
< 			}
< 		};
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		protected boolean validatePage() {
< 			return getInitialObjectName() != null && getEncodings().contains(encodingField.getText());
< 		}
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		public void setVisible(boolean visible) {
< 			super.setVisible(visible);
< 			if (visible) {
< 				if (initialObjectField.getItemCount() == 1) {
< 					initialObjectField.clearSelection();
< 					encodingField.setFocus();
< 				} else {
< 					encodingField.clearSelection();
< 					initialObjectField.setFocus();
< 				}
< 			}
< 		}
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		public String getInitialObjectName() {
< 			String label = initialObjectField.getText();
< 
< 			for (Iterator i = getInitialObjectNames().iterator(); i.hasNext();) {
< 				String name = (String) i.next();
< 				if (getLabel(name).equals(label)) {
< 					return name;
< 				}
< 			}
< 			return null;
< 		}
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		public String getEncoding() {
< 			return encodingField.getText();
< 		}
< 
< 		/**
< 		 * Returns the label for the specified type name.
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		protected String getLabel(String typeName) {
< 			try {
< 				return GMFToolEditPlugin.INSTANCE.getString("_UI_" + typeName + "_type");
< 			} catch (MissingResourceException mre) {
< 				GMFToolEditPlugin.INSTANCE.log(mre);
< 			}
< 			return typeName;
< 		}
< 
< 		/**
< 		 * <!-- begin-user-doc -->
< 		 * <!-- end-user-doc -->
< 		 * @generated
< 		 */
< 		protected Collection getEncodings() {
< 			if (encodings == null) {
< 				encodings = new ArrayList();
< 				for (StringTokenizer stringTokenizer = new StringTokenizer(GMFToolEditPlugin.INSTANCE.getString("_UI_XMLEncodingChoices")); stringTokenizer.hasMoreTokens();) {
< 					encodings.add(stringTokenizer.nextToken());
< 				}
< 			}
< 			return encodings;
< 		}
< 	}
< 
< 	/**
