0a1,3
> /**
>  * <copyright>
>  * </copyright>
1,6d0
< /******************************************************************************
<  * Copyright (c) 2004, 2006 IBM Corporation and others.
<  * All rights reserved. This program and the accompanying materials
<  * are made available under the terms of the Eclipse Public License v1.0
<  * which accompanies this distribution, and is available at
<  * http://www.eclipse.org/legal/epl-v10.html
7a5,6
>  * $Id$
>  */
8,11d4
<  * Contributors:
<  *    IBM Corporation - initial API and implementation 
<  ****************************************************************************/
< 
12,12c7,7
< package org.eclipse.gmf.runtime.notation.provider;
---
> package org.eclipse.gmf.gmfgraph.provider;
20,20c19,19
< import org.eclipse.emf.ecore.EObject;
---
> import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
22,22d15
< import org.eclipse.emf.ecore.EStructuralFeature;
30a25,25
> import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
31,31d24
< 
32,32c26,26
< import org.eclipse.gmf.runtime.notation.Node;
---
> import org.eclipse.gmf.gmfgraph.Node;
33,35d26
< import org.eclipse.gmf.runtime.notation.NotationEditPlugin;
< import org.eclipse.gmf.runtime.notation.NotationFactory;
< import org.eclipse.gmf.runtime.notation.NotationPackage;
38,38c29,29
<  * This is the item provider adapter for a {@link org.eclipse.gmf.runtime.notation.Node} object.
---
>  * This is the item provider adapter for a {@link org.eclipse.gmf.gmfgraph.Node} object.
44,44c35,35
< 	extends ViewItemProvider
---
> 	extends DiagramElementItemProvider
64a56,56
> 	 * @generated
65a58,58
> 	@Override
66,66c59,59
< 	public List getPropertyDescriptors(Object object) {
---
> 	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
70,70c63,63
< 			addLayoutConstraintPropertyDescriptor(object);
---
> 			addResizeConstraintPropertyDescriptor(object);
70a64,64
> 			addAffixedParentSidePropertyDescriptor(object);
75a70,70
> 	 * This adds a property descriptor for the Resize Constraint feature.
76,78d69
< 	 * This specifies how to implement {@link #getChildren} and is used to deduce an appropriate feature for an
< 	 * {@link org.eclipse.emf.edit.command.AddCommand}, {@link org.eclipse.emf.edit.command.RemoveCommand} or
< 	 * {@link org.eclipse.emf.edit.command.MoveCommand} in {@link #createCommand}.
82a75,88
> 	protected void addResizeConstraintPropertyDescriptor(Object object) {
> 		itemPropertyDescriptors.add
> 			(createItemPropertyDescriptor
> 				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
> 				 getResourceLocator(),
> 				 getString("_UI_Node_resizeConstraint_feature"),
> 				 getString("_UI_PropertyDescriptor_description", "_UI_Node_resizeConstraint_feature", "_UI_Node_type"),
> 				 GMFGraphPackage.eINSTANCE.getNode_ResizeConstraint(),
> 				 true,
> 				 false,
> 				 false,
> 				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
> 				 null,
> 				 null));
83,88d74
< 	public Collection getChildrenFeatures(Object object) {
< 		if (childrenFeatures == null) {
< 			super.getChildrenFeatures(object);
< 			childrenFeatures.add(NotationPackage.Literals.NODE__LAYOUT_CONSTRAINT);
< 		}
< 		return childrenFeatures;
91a92,92
> 	 * This adds a property descriptor for the Affixed Parent Side feature.
95a97,97
> 	protected void addAffixedParentSidePropertyDescriptor(Object object) {
96,108d96
< 	protected EStructuralFeature getChildFeature(Object object, Object child) {
< 		// Check the type of the specified child object and return the proper feature to use for
< 		// adding (see {@link AddCommand}) it as a child.
< 
< 		return super.getChildFeature(object, child);
< 	}
< 
< 	/**
< 	 * This adds a property descriptor for the LayoutConstraint feature.
< 	 * <!-- begin-user-doc -->
< 	 * <!-- end-user-doc -->
< 	 */
< 	protected void addLayoutConstraintPropertyDescriptor(Object object) {
109a99,99
> 			(createItemPropertyDescriptor
110,110d98
< 			(new ItemPropertyDescriptor
111a101,106
> 				 getResourceLocator(),
> 				 getString("_UI_Node_affixedParentSide_feature"),
> 				 getString("_UI_PropertyDescriptor_description", "_UI_Node_affixedParentSide_feature", "_UI_Node_type"),
> 				 GMFGraphPackage.eINSTANCE.getNode_AffixedParentSide(),
> 				 true,
> 				 false,
112,114d100
< 				 getString("_UI_Node_layoutConstraint_feature"), //$NON-NLS-1$
< 				 getString("_UI_PropertyDescriptor_description", "_UI_Node_layoutConstraint_feature", "_UI_Node_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
< 				 NotationPackage.Literals.NODE__LAYOUT_CONSTRAINT,
115a108,109
> 				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
> 				 null,
124a119,119
> 	@Override
126,126c121,121
< 		return overlayImage(object, getResourceLocator().getImage("full/obj16/Node")); //$NON-NLS-1$
---
> 		return overlayImage(object, getResourceLocator().getImage("full/obj16/Node"));
134a130,130
> 	@Override
135a132,135
> 		String label = ((Node)object).getName();
> 		return label == null || label.length() == 0 ?
> 			getString("_UI_Node_type") :
> 			getString("_UI_Node_type") + " " + label;
136,137d131
< 		Node node = (Node)object;
< 		return getString("_UI_Node_type") + " " + node.isVisible(); //$NON-NLS-1$ //$NON-NLS-2$
146a145,145
> 	@Override
150a150,151
> 			case GMFGraphPackage.NODE__RESIZE_CONSTRAINT:
> 			case GMFGraphPackage.NODE__AFFIXED_PARENT_SIDE:
151,151d149
< 			case NotationPackage.NODE__LAYOUT_CONSTRAINT:
152,152c152,152
< 				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
---
> 				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
164a165,165
> 	@Override
165,165c166,166
< 	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
---
> 	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
167,186d167
< 
< 		newChildDescriptors.add
< 			(createChildParameter
< 				(NotationPackage.Literals.NODE__LAYOUT_CONSTRAINT,
< 				 NotationFactory.eINSTANCE.createSize()));
< 
< 		newChildDescriptors.add
< 			(createChildParameter
< 				(NotationPackage.Literals.NODE__LAYOUT_CONSTRAINT,
< 				 NotationFactory.eINSTANCE.createLocation()));
< 
< 		newChildDescriptors.add
< 			(createChildParameter
< 				(NotationPackage.Literals.NODE__LAYOUT_CONSTRAINT,
< 				 NotationFactory.eINSTANCE.createBounds()));
< 
< 		newChildDescriptors.add
< 			(createChildParameter
< 				(NotationPackage.Literals.NODE__LAYOUT_CONSTRAINT,
< 				 NotationFactory.eINSTANCE.createRatio()));
189a171,171
> 	 * Return the resource locator for this item provider's resources.
190,190d170
< 	 * This returns the label text for {@link org.eclipse.emf.edit.command.CreateChildCommand}.
194a176,178
> 	@Override
> 	public ResourceLocator getResourceLocator() {
> 		return GMFGraphEditPlugin.INSTANCE;
195,208d175
< 	public String getCreateChildText(Object owner, Object feature, Object child, Collection selection) {
< 		Object childFeature = feature;
< 		Object childObject = child;
< 
< 		boolean qualify =
< 			childFeature == NotationPackage.Literals.VIEW__PERSISTED_CHILDREN ||
< 			childFeature == NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN;
< 
< 		if (qualify) {
< 			return getString
< 				("_UI_CreateChild_text2", //$NON-NLS-1$
< 				 new Object[] { getTypeText(childObject), getFeatureText(childFeature), getTypeText(owner) });
< 		}
< 		return super.getCreateChildText(owner, feature, child, selection);
