17,17d16
< import java.util.HashSet;
19,19d17
< import java.util.Set;
24,24d21
< import org.eclipse.emf.ecore.util.EcoreUtil;
30,30c34,34
< import org.eclipse.gmf.common.codegen.ImportAssistant;
---
> import org.eclipse.gmf.gmfgraph.FigureDescriptor;
38,38c27,27
< import org.eclipse.gmf.gmfgraph.FigureHandle;
---
> import org.eclipse.gmf.gmfgraph.ChildAccess;
47,47c36,36
< import org.eclipse.gmf.internal.common.codegen.NullImportAssistant;
---
> import org.eclipse.gmf.gmfgraph.RealFigure;
50,50d46
<  * Stateful. Don't reuse.
57,57d52
< 	private final Set<Figure> processedFigures;
66,66d60
< 		processedFigures = new HashSet<Figure>();
67,67c61,61
< 		figureGenerator = new FigureGenerator(runtimeToken, mapModeCodeGenStrategy, null, true, dynamicFigureTemplates);
---
> 		figureGenerator = new FigureGenerator(runtimeToken, null, mapModeCodeGenStrategy, null, true, dynamicFigureTemplates);
69a64,64
> 	@Override
74,74c69,69
< 		final Viewmap viewmap = createViewmap(node.getNodeFigure());
---
> 		final Viewmap viewmap = createViewmap(node.getFigure());
80a76,76
> 	@Override
85,85c81,81
< 		return createViewmap(link.getConnectionFigure());
---
> 		return createViewmap(link.getFigure());
87a84,84
> 	@Override
88,88c85,85
< 	public Viewmap create(DiagramLabel label) {
---
> 	public Viewmap create(DiagramLabel diagramLabel) {
89,89c86,86
< 		if (label.getFigure() == null) {
---
> 		if (diagramLabel.getFigure() == null) {
90,90c87,87
< 			return super.create(label);
---
> 			return super.create(diagramLabel);
90a88,92
> 		}
> 		if (diagramLabel.getAccessor() == null) {
> 			return createViewmap(diagramLabel.getFigure());
> 		} else {
> 			return createViewmap(diagramLabel.getFigure(), diagramLabel.getAccessor());
91a103,103
> 		} else {
92,92c104,104
< 		return createViewmap(label.getFigure());
---
> 			return createViewmap(compartment.getFigure(), compartment.getAccessor());
92a105,105
> 		}
94a96,96
> 	@Override
96,96d97
< 		FigureHandle handle = compartment.getFigure();
97,97c98,98
< 		if (handle == null){
---
> 		if (compartment.getFigure() == null){
99a101,101
> 		if (compartment.getAccessor() == null) {
102a108,108
> 	private Viewmap createViewmap(FigureDescriptor figureDescriptor) {
103,103d107
< 	private Viewmap createFigureViewmap(Figure figure) {
104a110,114
> 		if (figureDescriptor.getActualFigure() == null) {
> 			throw new NullPointerException();
> 		}
> 		final Figure figure = figureDescriptor.getActualFigure();
> 		if (figure instanceof RealFigure && isBareInstance((RealFigure) figure)) {
104a130,130
> 	private Viewmap createViewmap(FigureDescriptor owner, ChildAccess labelAccess) {
105,108d129
< 		if (EcoreUtil.isAncestor(processedFigures, figure.getParent())) {
< 			// we generated code for parent, thus (if figure generation logic not changed)
< 			// all inner figures were generated as well (with accessors), thus, everything
< 			// we need here is just reference one
109a132,132
> 		// XXX yet another assumption - getter name
109,109c131,131
< 			ParentAssignedViewmap v = GMFGenFactory.eINSTANCE.createParentAssignedViewmap();
---
> 		ParentAssignedViewmap v = GMFGenFactory.eINSTANCE.createParentAssignedViewmap();
110,110d131
< 			// XXX yet another assumption - getter name
111,111c133,133
< 			// FIXME introduce feedback to FigureGenerator to let us know exact names
---
> 		// FIXME introduce feedback to FigureGenerator to let us know exact names
112,112c134,134
< 			v.setGetterName(NamingStrategy.INSTANCE.getChildFigureGetterName(figure));
---
> 		v.setGetterName(NamingStrategy.getChildFigureGetterName(labelAccess));
113a136,136
> 		setupStyleAttributes(v, labelAccess.getFigure());
113,113c135,135
< 			v.setFigureQualifiedClassName(fqnSwitch.get(figure));
---
> 		v.setFigureQualifiedClassName(figureGenerator.fqnSwitch(labelAccess.getFigure()));
114,114c137,137
< 			result = v;
---
> 		return v;
115,116d137
< 		} else {
< 			if (isBareInstance(figure)) {
118,118c116,116
< 				v.setFigureQualifiedClassName(fqnSwitch.get(figure));
---
> 			v.setFigureQualifiedClassName(figureGenerator.fqnSwitch(figure));
123,123d120
< 				ImportAssistant importManager = new NullImportAssistant(null, CodeGenUtil.validJavaIdentifier(figure.getName())); 
124,124c121,121
< 				v.setClassBody(figureGenerator.go(figure, importManager));
---
> 			v.setClassBody(figureGenerator.go(figureDescriptor));
125,125c122,122
< 				v.setClassName(importManager.getCompilationUnitName());
---
> 			v.setClassName(getCompilationUnitName(figureDescriptor));
127a125,126
> 		setupPluginDependencies(result, figureDescriptor.getActualFigure());
> 		setupStyleAttributes(result, figureDescriptor.getActualFigure());
128,132d124
< 		}
< 		if (false == result instanceof ParentAssignedViewmap) {
< 			setupPluginDependencies(result, figure);
< 		} // otherwise, dependencies are already there
< 		processedFigures.add(figure);
136,146d129
< 	private Viewmap createViewmap(FigureHandle figure) {
< 		Viewmap result;
< 		if (figure instanceof Figure) {
< 			result = createFigureViewmap((Figure) figure);
< 		} else if (figure instanceof FigureAccessor) {
< 			result = createFigureAccessorViewmap((FigureAccessor) figure);
< 		} else {
< 			throw new IllegalStateException();
< 		}
< 		setupStyleAttributes(result, figure);
< 		return result;
148a140,140
> 	// XXX needs review
153,153c145,145
< 			v.setFigureQualifiedClassName(figureAccess.getTypedFigure().getQualifiedClassName());
---
> 			v.setFigureQualifiedClassName(figureGenerator.fqnSwitch(figureAccess.getTypedFigure()));
169,169d165
< 			if (next instanceof Figure){
170,170c166,166
< 				current = next;
---
> 				current = next;
170a167,167
> 			}
173a161,161
> 			if (next == null){
174,174c162,162
< 				return null;
---
> 				return null;
176a170,173
> 
> 	private static String getCompilationUnitName(FigureDescriptor fd) {
> 		// XXX either use Util.ext or have some template to invoke
> 		return CodeGenUtil.validJavaIdentifier(CodeGenUtil.capName(fd.getName()));
179,179c176,176
< 	private static boolean isBareInstance(Figure figure){
---
> 	private static boolean isBareInstance(RealFigure figure) {
183a181,181
> 		featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getRealFigure_Name());
184,184d180
< 		featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getIdentity_Name());
185,185c182,182
< 		featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getFigure_Children());
---
> 		featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getRealFigure_Children());
186,187d182
< 		featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getFigureMarker_Parent());
< 		featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getFigureHandle_ReferencingElements());
189,189d183
< 			featuresToCheck.remove(GMFGraphPackage.eINSTANCE.getCustomClass_BundleName());
