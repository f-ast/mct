1,20d0
< /******************************************************************************
<  * Copyright (c) 2005 IBM Corporation and others.
<  * All rights reserved. This program and the accompanying materials
<  * are made available under the terms of the Eclipse Public License v1.0
<  * which accompanies this distribution, and is available at
<  * http://www.eclipse.org/legal/epl-v10.html
<  *
<  * Contributors:
<  *    IBM Corporation - initial API and implementation 
<  ****************************************************************************/
< 
< package org.eclipse.gmf.runtime.emf.type.core;
< 
< import java.net.URL;
< 
< import org.eclipse.emf.ecore.EClass;
< 
< import org.eclipse.gmf.runtime.common.core.command.ICommand;
< import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
< 
21a2,3
>  * <copyright>
>  * </copyright>
22,22d1
<  * Abstract implementation for application element types.
23a5,5
>  * $Id$
24,24d4
<  * @author ldamus
25a7,7
> package org.eclipse.gmf.codegen.gmfgen;
26,27d6
< public abstract class ElementType
< 	implements IElementType {
28a9,9
> import org.eclipse.emf.ecore.EObject;
29,37d8
< 	/**
< 	 * The type id.
< 	 */
< 	private final String id;
< 
< 	/**
< 	 * The URL for the icon.
< 	 */
< 	private final URL iconURL;
39a12,136
>  * <!-- begin-user-doc -->
>  * A representation of the model object '<em><b>Element Type</b></em>'.
>  * <!-- end-user-doc -->
>  *
>  * <!-- begin-model-doc -->
>  * Base element type
>  * <!-- end-model-doc -->
>  *
>  * <p>
>  * The following features are supported:
>  * <ul>
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.ElementType#getDiagramElement <em>Diagram Element</em>}</li>
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.ElementType#getUniqueIdentifier <em>Unique Identifier</em>}</li>
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.ElementType#getDisplayName <em>Display Name</em>}</li>
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.ElementType#isDefinedExternally <em>Defined Externally</em>}</li>
>  * </ul>
>  * </p>
>  *
>  * @see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getElementType()
>  * @model abstract="true"
>  * @generated
>  */
> public interface ElementType extends EObject {
> 	/**
> 	 * Returns the value of the '<em><b>Diagram Element</b></em>' container reference.
> 	 * It is bidirectional and its opposite is '{@link org.eclipse.gmf.codegen.gmfgen.GenCommonBase#getElementType <em>Element Type</em>}'.
> 	 * <!-- begin-user-doc -->
> 	 * <p>
> 	 * If the meaning of the '<em>Diagram Element</em>' container reference isn't clear,
> 	 * there really should be more of a description here...
> 	 * </p>
> 	 * <!-- end-user-doc -->
> 	 * @return the value of the '<em>Diagram Element</em>' container reference.
> 	 * @see #setDiagramElement(GenCommonBase)
> 	 * @see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getElementType_DiagramElement()
> 	 * @see org.eclipse.gmf.codegen.gmfgen.GenCommonBase#getElementType
> 	 * @model opposite="elementType" required="true"
> 	 * @generated
> 	 */
> 	GenCommonBase getDiagramElement();
> 
> 	/**
> 	 * Sets the value of the '{@link org.eclipse.gmf.codegen.gmfgen.ElementType#getDiagramElement <em>Diagram Element</em>}' container reference.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @param value the new value of the '<em>Diagram Element</em>' container reference.
> 	 * @see #getDiagramElement()
> 	 * @generated
> 	 */
> 	void setDiagramElement(GenCommonBase value);
> 
> 	/**
> 	 * Returns the value of the '<em><b>Unique Identifier</b></em>' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <p>
> 	 * If the meaning of the '<em>Unique Identifier</em>' attribute isn't clear,
> 	 * there really should be more of a description here...
> 	 * </p>
> 	 * <!-- end-user-doc -->
> 	 * @return the value of the '<em>Unique Identifier</em>' attribute.
> 	 * @see #setUniqueIdentifier(String)
> 	 * @see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getElementType_UniqueIdentifier()
> 	 * @model required="true"
> 	 * @generated
> 	 */
> 	String getUniqueIdentifier();
> 
> 	/**
> 	 * Sets the value of the '{@link org.eclipse.gmf.codegen.gmfgen.ElementType#getUniqueIdentifier <em>Unique Identifier</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @param value the new value of the '<em>Unique Identifier</em>' attribute.
> 	 * @see #getUniqueIdentifier()
> 	 * @generated
> 	 */
> 	void setUniqueIdentifier(String value);
> 
> 	/**
> 	 * Returns the value of the '<em><b>Display Name</b></em>' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * <!-- begin-model-doc -->
> 	 * When there's palette, defaults to title of first tool that uses element with this type
> 	 * <!-- end-model-doc -->
> 	 * @return the value of the '<em>Display Name</em>' attribute.
> 	 * @see #setDisplayName(String)
> 	 * @see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getElementType_DisplayName()
> 	 * @model
> 	 * @generated
> 	 */
> 	String getDisplayName();
> 
> 	/**
> 	 * Sets the value of the '{@link org.eclipse.gmf.codegen.gmfgen.ElementType#getDisplayName <em>Display Name</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @param value the new value of the '<em>Display Name</em>' attribute.
> 	 * @see #getDisplayName()
> 	 * @generated
> 	 */
> 	void setDisplayName(String value);
> 
> 	/**
> 	 * Returns the value of the '<em><b>Defined Externally</b></em>' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <p>
> 	 * If the meaning of the '<em>Defined Externally</em>' attribute isn't clear,
> 	 * there really should be more of a description here...
> 	 * </p>
> 	 * <!-- end-user-doc -->
> 	 * @return the value of the '<em>Defined Externally</em>' attribute.
> 	 * @see #setDefinedExternally(boolean)
> 	 * @see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getElementType_DefinedExternally()
> 	 * @model
> 	 * @generated
> 	 */
> 	boolean isDefinedExternally();
> 
> 	/**
> 	 * Sets the value of the '{@link org.eclipse.gmf.codegen.gmfgen.ElementType#isDefinedExternally <em>Defined Externally</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @param value the new value of the '<em>Defined Externally</em>' attribute.
> 	 * @see #isDefinedExternally()
> 	 * @generated
40,40d11
< 	 * The display name.
41a138,138
> 	void setDefinedExternally(boolean value);
42,42d137
< 	private final String displayName;
43a140,140
> } // ElementType
44,160d139
< 	/**
< 	 * The metaclass.
< 	 */
< 	private final EClass eClass;
< 	
< 	/**
< 	 * The supertypes of this element type.
< 	 */
< 	private IElementType[] supertypes;
< 
< 	/**
< 	 * Constructs a new element type.
< 	 * 
< 	 * @param id
< 	 *            the type ID
< 	 * @param iconURL
< 	 *            the URL for the icon, or <cOode>null</code> if none.
< 	 * @param displayName
< 	 *            the display name
< 	 */
< 	protected ElementType(String id, URL iconURL, String displayName) {
< 		this(id, iconURL, displayName, null);
< 	}
< 
< 	/**
< 	 * Constructs a new element type.
< 	 * 
< 	 * @param id
< 	 *            the type ID
< 	 * @param iconURL
< 	 *            the URL for the icon, or <cOode>null</code> if none.
< 	 * @param displayName
< 	 *            the display name
< 	 * @param eClass
< 	 *            the metaclass associated with the element type
< 	 */
< 	protected ElementType(String id, URL iconURL, String displayName,
< 			EClass eClass) {
< 		super();
< 		this.id = id;
< 		this.iconURL = iconURL;
< 		this.displayName = displayName;
< 		this.eClass = eClass;
< 	}
< 
< 	/**
< 	 * Gets the unique identifier.
< 	 * 
< 	 * @return the unique identifier.
< 	 */
< 	public String getId() {
< 		return id;
< 	}
< 
< 	/**
< 	 * Gets the icon.
< 	 * 
< 	 * @return the icon.
< 	 */
< 	public URL getIconURL() {
< 		return iconURL;
< 	}
< 
< 	/**
< 	 * Gets the display name.
< 	 * 
< 	 * @return the display name.
< 	 */
< 	public String getDisplayName() {
< 		return displayName;
< 	}
< 
< 	/**
< 	 * Gets the metamodel type.
< 	 * 
< 	 * @return the metamodel type.
< 	 */
< 	public EClass getEClass() {
< 		return eClass;
< 	}
< 
< 	/*
< 	 * (non-Javadoc)
< 	 * 
< 	 * @see org.eclipse.gmf.runtime.emf.core.type.IElementType#getConfigureCommand()
< 	 */
< 	public ICommand getEditCommand(IEditCommandRequest request) {
< 		return getEditHelper().getEditCommand(request);
< 	}
<     
<     // documentation copied from interface
<     public boolean canEdit(IEditCommandRequest req) {
<         return getEditHelper().canEdit(req);
<     }
< 
< 	/* (non-Javadoc)
< 	 * @see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
< 	 */
< 	public Object getAdapter(Class adapter) {
< 		if (adapter.isAssignableFrom(this.getClass())) {
< 			return this;
< 		}
< 		return null;
< 	}
< 	
< 	
< 	/* (non-Javadoc)
< 	 * @see org.eclipse.gmf.runtime.emf.type.core.IElementType#getAllSuperTypes()
< 	 */
< 	public IElementType[] getAllSuperTypes() {
< 		return supertypes;
< 	}
< 	
< 	protected void setAllSupertypes(IElementType[] supertypes) {
< 		this.supertypes = supertypes;
< 	}
< }