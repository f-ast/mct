22a23,23
> import org.eclipse.draw2d.geometry.Translatable;
41a43,43
> import org.eclipse.gmf.runtime.diagram.ui.internal.util.MeasurementUnitHelper;
50a53,53
> import org.eclipse.gmf.runtime.notation.MeasurementUnit;
66a70,138
> 	private WrapperMapMode mm;
> 	
> 	/**
> 	 * @author sshaw
> 	 * This pattern is necessary because, the constructor of the ScalableFreeformRootEditPart forces
> 	 * the scalable layered pane class to be instantiated where it gets initialized with the MapMode
> 	 * of the this root editpart.  However, we haven't had a chance to initialize the mapmode value yet since
> 	 * super must be called first.  So, this pattern allows us to set the mapmode into this container after
> 	 * super is called, but still have the scalable layered pane initialized with the mapmode value.
> 	 */
> 	private class WrapperMapMode implements IMapMode {
> 
> 		public WrapperMapMode() {
> 			super();
> 		}
> 
> 		IMapMode containedMM = MapModeTypes.DEFAULT_MM;
> 		public void setContainedMapMode(IMapMode mm) {
> 			this.containedMM = mm;
> 		}
> 		
> 		/* (non-Javadoc)
> 		 * @see org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode#DPtoLP(int)
> 		 */
> 		public int DPtoLP(int deviceUnit) {
> 			return containedMM.DPtoLP(deviceUnit);
> 		}
> 
> 		/* (non-Javadoc)
> 		 * @see org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode#DPtoLP(org.eclipse.draw2d.geometry.Translatable)
> 		 */
> 		public Translatable DPtoLP(Translatable t) {
> 			return containedMM.DPtoLP(t);
> 		}
> 
> 		/* (non-Javadoc)
> 		 * @see org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode#LPtoDP(int)
> 		 */
> 		public int LPtoDP(int logicalUnit) {
> 			return containedMM.LPtoDP(logicalUnit);
> 		}
> 
> 		/* (non-Javadoc)
> 		 * @see org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode#LPtoDP(org.eclipse.draw2d.geometry.Translatable)
> 		 */
> 		public Translatable LPtoDP(Translatable t) {
> 			return containedMM.LPtoDP(t);
> 		}
> 		
> 	}
> 	
> 	/**
> 	 * Default constructor
> 	 */
> 	public DiagramRootEditPart() {
> 		super();
> 	}
> 	
> 	/**
> 	 * @param mu the <code>MeasurementUnit</code> that is used to display all contents
> 	 * within the root edit part.
> 	 */
> 	public DiagramRootEditPart(MeasurementUnit mu) {
> 		super();
> 		
> 		if (getMapMode() != null)
> 			mm.setContainedMapMode(MeasurementUnitHelper.getMapMode(mu));
> 	}
> 
686a759,761
> 	 * Clients must define the measurement unit in the <code>Diagram</code> notation
> 	 * object for their editor to affect this mapping mode object value.
> 	 * 
687,688d758
< 	 * Override this if the Editor wishes to support a coordinate system other then the default 
< 	 * (usually HiMetric coordinates).  
691a765,768
> 	final public IMapMode getMapMode() {
> 		if (mm == null)
> 			mm = new WrapperMapMode();
> 		return mm;
692,693d764
< 	public IMapMode getMapMode() {
< 		return MapModeTypes.DEFAULT_MM;
