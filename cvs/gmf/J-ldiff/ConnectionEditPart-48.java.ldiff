31a32,32
> import org.eclipse.draw2d.Graphics;
32a34,35
> import org.eclipse.draw2d.PolygonDecoration;
> import org.eclipse.draw2d.PolylineDecoration;
33a37,37
> import org.eclipse.draw2d.RotatableDecoration;
108a113,114
> import org.eclipse.gmf.runtime.notation.ArrowStyle;
> import org.eclipse.gmf.runtime.notation.ArrowType;
114a121,122
> import org.eclipse.gmf.runtime.notation.LineType;
> import org.eclipse.gmf.runtime.notation.LineTypeStyle;
1213,1213d1220
< //          	rbp.setWeight((i + 1) / ((float) modelConstraint.size() + 1));
1862a1870,2026
> 	/**
> 	 * Set the line width of the connection. Clients need to override if they
> 	 * support line width.
> 	 * 
> 	 * @param width
> 	 *            the line width.
> 	 */
> 	protected void setLineWidth(int width) {
> 		/* not implemented */
> 	}
> 	
> 	/**
> 	 * Get the line width of the connection.
> 	 * 
> 	 * @return width
> 	 *            the line width.
> 	 */
> 	protected int getLineWidth() {
> 		/* a default of -1 means the diagram does not implement line width */
> 		int lineWidth = -1;
> 		
> 		LineStyle style = (LineStyle) getPrimaryView().getStyle(NotationPackage.eINSTANCE.getLineStyle());
> 		if (style != null) {
> 			lineWidth = style.getLineWidth();
> 		}
> 
> 		return lineWidth;
> 	}
> 	
> 	/**
> 	 * Set the line type of the connection. Clients need to override if they
> 	 * support line type.
> 	 * 
> 	 * @param lineType
> 	 *            the line type.
> 	 */
> 	protected void setLineType(int lineType) {
> 		/* not implemented */
> 	}
> 	
> 	/**
> 	 * Get the line type of the connection.
> 	 * 
> 	 * @return the line type.
> 	 */
> 	protected int getLineType() {
> 		// default to Graphics.LINE_SOLID.
> 		int lineType = Graphics.LINE_SOLID;
> 
> 		LineTypeStyle style = (LineTypeStyle) getPrimaryView().getStyle(
> 				NotationPackage.eINSTANCE.getLineTypeStyle());
> 		if (style != null) {
> 			if (style.getLineType() == LineType.SOLID_LITERAL) {
> 				lineType = Graphics.LINE_SOLID;
> 			} else if (style.getLineType() == LineType.DASH_LITERAL) {
> 				lineType = Graphics.LINE_DASH;
> 			} else if (style.getLineType() == LineType.DOT_LITERAL) {
> 				lineType = Graphics.LINE_DOT;
> 			} else if (style.getLineType() == LineType.DASH_DOT_LITERAL) {
> 				lineType = Graphics.LINE_DASHDOT;
> 			} else if (style.getLineType() == LineType.DASH_DOT_DOT_LITERAL) {
> 				lineType = Graphics.LINE_DASHDOTDOT;
> 			}
> 		}
> 		
> 		return lineType;
> 	}
> 
> 	/**
> 	 * Set the arrow decoration on the connection source end. Clients need to override if they
> 	 * support arrow decorations.
> 	 * 
> 	 * @param arrowDecoration
> 	 *            the arrow decoration.
> 	 */
> 	protected void setArrowSource(RotatableDecoration arrowDecoration) {
> 		/* not implemented */
> 	}
> 	
> 	/**
> 	 * Set the arrow decoration on the connection target end. Clients need to override if they
> 	 * support arrow decorations.
> 	 * 
> 	 * @param arrowDecoration
> 	 *            the arrow type.
> 	 */
> 	protected void setArrowTarget(RotatableDecoration arrowDecoration) {
> 		/* not implemented */
> 	}
> 	
> 	/**
> 	 * Get the arrow decoration for the arrow type.
> 	 * 
> 	 * @param arrowType
> 	 *            the arrow type.
> 	 */
> 	protected RotatableDecoration getArrowDecoration(int arrowType) {
> 		
> 		RotatableDecoration decoration = null;
> 		if (arrowType == ArrowType.OPEN_ARROW) {
> 			decoration = new PolylineDecoration();
> 			((PolylineDecoration)decoration).setScale(11 + getLineWidth(), 6 + getLineWidth());
> 			((PolylineDecoration)decoration).setTemplate(PolylineDecoration.TRIANGLE_TIP);
> 			((PolylineDecoration)decoration).setLineWidth(getLineWidth());
> 		} else if (arrowType == ArrowType.SOLID_ARROW) {
> 			decoration = new PolygonDecoration();
> 			((PolygonDecoration)decoration).setScale(11 + getLineWidth(), 6 + getLineWidth());
> 			((PolygonDecoration)decoration).setTemplate(PolygonDecoration.TRIANGLE_TIP);
> 			((PolygonDecoration)decoration).setLineWidth(getLineWidth());
> 			((PolygonDecoration)decoration).setFill(true);
> 		}
> 		return decoration;
> 	}
> 	
> 	/**
> 	 * Refreshes the line type property.
> 	 */
> 	protected void refreshLineWidth() {
> 		setLineWidth(getLineWidth());
> 	}
> 
> 	/**
> 	 * Refreshes the line type property.
> 	 */
> 	protected void refreshLineType() {
> 		setLineType(getLineType());
> 	}
> 
> 	/**
> 	 * Refreshes the arrow decoration on the source end property.
> 	 */
> 	protected void refreshArrowSource() {
> 		// default to no decoration.
> 		int arrowType = ArrowType.NONE;
> 		
> 		ArrowStyle style = (ArrowStyle) getPrimaryView().getStyle(NotationPackage.eINSTANCE.getArrowStyle());
> 		if (style != null) {
> 			arrowType = style.getArrowSource().getValue();
> 		}
> 		
> 		setArrowSource(getArrowDecoration(arrowType));
> 	}
> 
> 	/**
> 	 * Refreshes the arrow decoration on the target end property.
> 	 */
> 	protected void refreshArrowTarget() {
> 		// default to no decoration.
> 		int arrowType = ArrowType.NONE;
> 		
> 		ArrowStyle style = (ArrowStyle) getPrimaryView().getStyle(NotationPackage.eINSTANCE.getArrowStyle());
> 		if (style != null) {
> 			arrowType = style.getArrowTarget().getValue();
> 		}
> 		
> 		setArrowTarget(getArrowDecoration(arrowType));
> 	}
