10,10c12,12
< import java.io.BufferedReader;
---
> import java.io.InputStream;
16,16c15,15
< import java.util.LinkedList;
---
> import java.net.URL;
16a16,16
> import java.nio.charset.Charset;
18,18c22,22
< import org.eclipse.core.resources.ICommand;
---
> import org.eclipse.core.resources.ResourcesPlugin;
24a26,26
> import org.eclipse.core.runtime.Platform;
25,26d25
< import org.eclipse.gmf.internal.xpand.Activator;
< import org.eclipse.gmf.internal.xpand.ResourceManager;
32a33,33
> import org.osgi.framework.Bundle;
36a38,38
> 	private final IPath[] myConfiguredRoots;
37,38d37
< 	private long configStamp = IResource.NULL_STAMP;
< 	private IPath[] configuredRoots;
40,40c40,40
< 	public WorkspaceResourceManager(IProject context) {
---
> 	public WorkspaceResourceManager(IProject context, IPath[] configuredRoots) {
47a49,51
> 		String fullyQualifiedName = toFullyQualifiedName(file);
> 		if (fullyQualifiedName == null) {
> 			return null;
48,56d48
< 		assert file.getProject() == contextProject;
< 		Reader r = null;
< 		try {
< 			r = new StreamConverter().toContentsReader(file);
< 			return super.loadXtendResource(r, toFullyQualifiedName(file));
< 		} finally {
< 			if (r != null) {
< 				r.close();
< 			}
57a53,53
> 		return super.loadXtendResource(fullyQualifiedName);
63a60,62
> 		String fullyQualifiedName = toFullyQualifiedName(file);
> 		if (fullyQualifiedName == null) {
> 			return null;
64,72d59
< 		assert file.getProject() == contextProject;
< 		Reader r = null;
< 		try {
< 			r = new StreamConverter().toContentsReader(file);
< 			return super.loadXpandResource(r, toFullyQualifiedName(file));
< 		} finally {
< 			if (r != null) {
< 				r.close();
< 			}
73a64,65
> 		fullyQualifiedName = getNonAspectsTemplateName(fullyQualifiedName);
> 		return super.loadXpandResource(fullyQualifiedName);
106a99,108
> 
> 	@Override
> 	protected Reader[] resolveMultiple(String fqn, String ext) throws IOException {
> 		IPath fp = new Path(fqn.replaceAll(SyntaxConstants.NS_DELIM, "/")).addFileExtension(ext);
> 		IPath[] resolutions = getResolutions(fp);
> 		ArrayList<Reader> result = new ArrayList<Reader>(resolutions.length);
> 		for (IPath p : getResolutions(fp)) {
> 			Reader nextReader = getReader(p);
> 			if (nextReader != null) {
> 				result.add(nextReader);
107,107c154,154
< 	private IPath[] getResolutions(IPath p) {
---
> 	private IPath[] getResolutions(IPath p) {
108,108c155,155
< 		IPath[] configured = getConfiguredRoots();
---
> 		IPath[] configured = getConfiguredRoots();
108a156,156
> 		IPath[] rv = new IPath[configured.length];
109,110d155
< 		IPath[] rv = new IPath[configured.length + 1];
< 		rv[0] = p;
111,111c157,157
< 		for (int i = 0; i < configured.length; i++) {
---
> 		for (int i = 0; i < configured.length; i++) {
112,112c158,158
< 			rv[i+1] = configured[i].append(p);
---
> 			rv[i] = configured[i].append(p);
113,114d158
< 		}
< 		return rv;
116,131d109
< 	private IPath[] getConfiguredRoots() {
< 		IFile config = contextProject.getFile(".xpand-root");
< 		if (!config.exists()) {
< 			return new IPath[] { new Path("templates/") };
< 		}
< 		if (config.getModificationStamp() != configStamp) {
< 			configuredRoots = new IPath[0];
< 			final ArrayList<IPath> read = new ArrayList<IPath>();
< 			BufferedReader in = null;
< 			try {
< 				in = new BufferedReader(new InputStreamReader(config.getContents(), config.getCharset()));
< 				String line;
< 				while((line = in.readLine()) != null) {
< 					line = line.trim();
< 					if (line.length() > 0 && line.charAt(0) != '#') {
< 						read.add(new Path(line));
132a111,112
> 		if (result.isEmpty()) {
> 			throw new FileNotFoundException(fp.toString());
133a114,114
> 		return result.toArray(new Reader[result.size()]);
134,143d113
< 			} catch (CoreException ex) {
< 				// IGNORE
< 			} catch (IOException ex) {
< 				// IGNORE
< 			} finally {
< 				if (in != null) {
< 					try {
< 						in.close();
< 					} catch (IOException ex) {
< 						/* IGNORE */
144a116,131
> 
> 	private Reader getReader(IPath p) throws IOException {
> 		if (p.isAbsolute()) {
> 			assert p.segmentCount() > 1;
> 			//Try workspace-relative first.
> 			IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(p.segment(0));
> 			if (project.isAccessible()) {
> 				return getWorkspaceFileReader(project, p.removeFirstSegments(1));
> 			}
> 			//Fallback to platform location
> 			Bundle platformBundle = Platform.getBundle(p.segment(0));
> 			if (platformBundle != null) {
> 				URL url = platformBundle.getEntry(p.removeFirstSegments(1).toString());
> 				if (url != null) {
> 					InputStream is = url.openStream();
> 					return new InputStreamReader(is, Charset.forName("ISO-8859-1"));	//$NON-NLS-1$
146a134,135
> 		} else {
> 			return getWorkspaceFileReader(contextProject, p);
147,148d133
< 			configuredRoots = read.toArray(new IPath[read.size()]);
< 			configStamp = config.getModificationStamp();
150,150c42,42
< 		return configuredRoots;
---
> 		myConfiguredRoots = configuredRoots;
152a140,142
> 	private Reader getWorkspaceFileReader(IProject project, IPath path) throws IOException {
> 		IResource r = project.findMember(path);
> 		if (r instanceof IFile) {
153,154d139
< 	protected ResourceManager[] getDependenies() {
< 		LinkedList<ResourceManager> rv = new LinkedList<ResourceManager>();
155a144,148
> 				return new StreamConverter().toContentsReader((IFile) r);
> 			} catch (CoreException ex) {
> 				IOException wrap = new IOException(ex.getStatus().getMessage());
> 				wrap.initCause(ex);
> 				throw wrap;
156,161d143
< 			IProject[] referencedProjects = contextProject.getReferencedProjects();
< 				for (IProject next : referencedProjects) {
< 					if (!next.isAccessible() || !hasXpandBuilder(next)) {
< 						continue;
< 					}
< 					rv.add(Activator.getResourceManager(next));
163,164d149
< 		} catch (CoreException e) {
< 			//ignore
165a160,160
> 		return rv;
165a151,151
> 		return null;
166,166d159
< 		return rv.toArray(new ResourceManager[rv.size()]);
169,172d153
< 	private static boolean hasXpandBuilder(IProject p) throws CoreException {
< 		for (ICommand c : p.getDescription().getBuildSpec()) {
< 			if (OawBuilder.getBUILDER_ID().equals(c.getBuilderName())) {
< 				return true;
174a162,163
> 	private IPath[] getConfiguredRoots() {
> 		return myConfiguredRoots;
175,175c137,137
< 		return false;
---
> 		return null;
178a167,182
> 		for (IPath nextRoot : getConfiguredRoots()) {
> 			if (!nextRoot.isAbsolute()) {
> 				if (file.getProject().equals(contextProject) && nextRoot.isPrefixOf(file.getProjectRelativePath())) {
> 					return toFullyQualifiedName(file.getProjectRelativePath().removeFirstSegments(nextRoot.segmentCount()));
> 				}
> 			} else {
> 				if (nextRoot.isPrefixOf(file.getFullPath())) {
> 					return toFullyQualifiedName(file.getFullPath().removeFirstSegments(nextRoot.segmentCount()));
> 				}
> 			}
> 		}
> 		return null;
> 	}
> 
> 	private String toFullyQualifiedName(IPath filePath) {
> 		return filePath.removeFileExtension().toString().replace("/", SyntaxConstants.NS_DELIM);
179,179d166
< 		return file.getProjectRelativePath().toString().replaceAll("/", SyntaxConstants.NS_DELIM);
