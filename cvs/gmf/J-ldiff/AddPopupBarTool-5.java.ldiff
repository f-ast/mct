15,18d14
< import org.eclipse.draw2d.geometry.Point;
< import org.eclipse.emf.ecore.EObject;
< import org.eclipse.emf.transaction.util.TransactionUtil;
< import org.eclipse.gef.DragTracker;
20,21d15
< import org.eclipse.gef.Request;
< import org.eclipse.gef.commands.Command;
23,28d16
< 
< import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
< import org.eclipse.gmf.runtime.diagram.ui.internal.tools.AbstractPopupBarTool;
< import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequestFactory;
< import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;
< import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
30,31d17
< import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
< import org.eclipse.gmf.runtime.notation.View;
38a25,25
>  * @deprecated Use {@link PopupBarTool instead}
41a29,29
> public class AddPopupBarTool extends PopupBarTool {
42,50d28
< public class AddPopupBarTool extends AbstractPopupBarTool implements DragTracker {
< 
< 	/** When creating shapes on a dgrm using the abar, we do not
< 	 * want to cover the new shape with the abar, so we offset
< 	 * the creation pnt by a y-offset
< 	 * 32 is not not arbitrary it is 2x16 which is the height of an icon.
< 	 * and 2 pixels bigger than the height of an action-bar row.
< 	 */
< 	static private int Y_OFFSET 				= 32;	
70,146d48
< 	/**
< 	 * @see org.eclipse.gef.tools.TargetingTool#createTargetRequest()
< 	 */
< 	protected Request createTargetRequest() {
< 
< 		/* if we have a request, use it */
< 		if (myRequest != null) {
< 			return myRequest;
< 		}
< 
< 		return CreateViewRequestFactory.getCreateShapeRequest(getElementType(), getPreferencesHint());
< 	}
< 	
< 	/**
< 	 * First tries to get a command based on the target request (a create view
< 	 * and element request). If this fails, tries to get a command with a
< 	 * request to create an element only.
< 	 * 
< 	 * @see org.eclipse.gef.tools.TargetingTool#getCommand()
< 	 */
< 	protected Command getCommand() {
< 		Request theRequest = this.getTargetRequest();
< 
< 		if (theRequest instanceof CreateRequest) {
< 			Point thePoint = this.getCurrentInput().getMouseLocation();
< 			thePoint.y += Y_OFFSET;
< 			((CreateRequest) theRequest).setLocation(thePoint);
< 		}
< 		
< 		Command theCmd = myHostEditPart.getCommand(theRequest);
< 		// if we return a cmd that cannot execute then later downstream an
< 		// NPE can be generated.
< 		if (theCmd != null && theCmd.canExecute()) {
< 			return theCmd;
< 		}
< 
< 		return getCommandToCreateElementOnly();	
< 	}	
< 	
< 	/**
< 	 * Tries to get a command to create a new semantic element only.
< 	 * 
< 	 * @return the command if valid; null otherwise
< 	 */
< 	private Command getCommandToCreateElementOnly() {
< 		EObject hostElement = ViewUtil
< 			.resolveSemanticElement((View) myHostEditPart.getModel());
< 
< 		if (hostElement != null && getElementType() != null) {
< 			CreateElementRequest theReq = new CreateElementRequest(
<                 TransactionUtil.getEditingDomain(hostElement), hostElement,
<                 getElementType());
< 			EditCommandRequestWrapper semReq = new EditCommandRequestWrapper(theReq);
< 
< 			// an EtoolsProxyCommand that wraps the ICommand of the from the
< 			// semantic provider
< 			Command theRealCmd = ((IGraphicalEditPart) myHostEditPart)
< 				.getCommand(semReq);
< 
< 			// if we return a cmd that cannot execute then later downstream an
< 			// NPE can be generated.
< 			if (theRealCmd != null && theRealCmd.canExecute()) {
< 				return theRealCmd;
< 			}
< 		}
< 		return null;
< 	}
< 	
< 	/**
< 	 * Asks the target editpart to show target feedback and sets the target
< 	 * feedback flag.
< 	 */
< 	protected void showTargetFeedback() {
< 		//After adding items to the action bar, the targeting tool sends createViewRequests
< 		//potentially causing incorrect feedback updates.  We must prevent these from
< 		//getting though.
< 	}
