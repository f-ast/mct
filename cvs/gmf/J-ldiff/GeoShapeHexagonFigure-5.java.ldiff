2,2c2,2
<  * Copyright (c) 2003, 2004 IBM Corporation and others.
---
>  * Copyright (c) 2003, 2008 IBM Corporation and others.
16a17,17
> import org.eclipse.draw2d.geometry.PrecisionPoint;
17a19,19
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.PrecisionPointList;
20a23,23
>  * @author aboyko
36a40,48
> 	 * Constructor - Creates a proper hexagon with a given default height
> 	 * @param height initial height of the figure
> 	 * @param spacing <code>int</code> that is the margin between children in logical units
> 	 */
> 	public GeoShapeHexagonFigure(int height, int spacing) {
> 		super((int) Math.round(2 * height / Math.sqrt(3)), height, spacing);
> 	}
> 	
> 	/**
44,44c56,56
< 		PointList points = new PointList();
---
> 		PointList points = new PrecisionPointList();
45a58,61
> 		Point p1 = new PrecisionPoint( rect.preciseX() + rect.preciseWidth() - 1, rect.preciseY() + rect.preciseHeight() / 2 );
> 		Point p2 = new PrecisionPoint( rect.preciseX() + 0.75 * rect.preciseWidth() , rect.preciseY() );
> 		Point p3 = new PrecisionPoint( rect.preciseX() + rect.preciseWidth() / 4, rect.preciseY() );
> 		Point p4 = new PrecisionPoint( rect.preciseX(), rect.preciseY() + rect.preciseHeight() / 2 );
46,49d57
< 		Point p1 = new Point( rect.x + rect.width - 1, rect.y + ( rect.height / 2 ) );
< 		Point p2 = new Point( rect.x + rect.width - (rect.width * 0.225 ), rect.y );
< 		Point p3 = new Point( rect.x + (rect.width * 0.225 ), rect.y );
< 		Point p4 = new Point( rect.x, rect.y + (rect.height / 2 ) );
50,50c62,62
< 		Point p5 = new Point( p3.x, rect.y + rect.height - 1 );
---
> 		Point p5 = new PrecisionPoint( p3.preciseX(), rect.preciseY() + rect.preciseHeight() - 1 );
51,51c63,63
< 		Point p6 = new Point( p2.x, p5.y );
---
> 		Point p6 = new PrecisionPoint( p2.preciseX(), p5.preciseY() );
