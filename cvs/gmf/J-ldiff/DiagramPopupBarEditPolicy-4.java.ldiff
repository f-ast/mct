16a17,17
> import org.eclipse.gef.GraphicalEditPart;
29a31,35
> import org.eclipse.jface.resource.ImageDescriptor;
> import org.eclipse.swt.SWT;
> import org.eclipse.swt.graphics.Image;
> import org.eclipse.swt.graphics.ImageData;
> import org.eclipse.swt.graphics.RGB;
164a171,177
> 								
> 								Image image = IconService.getInstance().getIcon(theToolType);
> 								
> 								// Workaround for mirroring and SWT.ICON issue
> 								if (image.type == SWT.ICON && isMirrored()) {
> 									image = convert(image);
> 								}
165,165c178,178
< 								addPopupBarDescriptor(theToolType, IconService
---
> 								addPopupBarDescriptor(theToolType, image);
166,166d178
< 									.getInstance().getIcon(theToolType));
178a191,223
> 	private boolean isMirrored() {
> 		return ((getHost().getViewer().getControl().getStyle() & SWT.MIRRORED) != 0);
> 	}
> 	
> 	private Image convert( Image srcImage) {
> 		int height = srcImage.getBounds().height;
> 		int width = srcImage.getBounds().width;
> 		
> 		ImageData srcImageData = srcImage.getImageData();
> 		
> 		RGB backgroundRGB = ((GraphicalEditPart) getHost()).getFigure().getBackgroundColor().getRGB();
> 		int backgroundColor = srcImageData.palette.getPixel(backgroundRGB);		
> 
> 		// Set the transparent pixels to the background color
> 		int count = 0;
> 		for (int y = 0; y < height; y++) {
> 			for (int x = 0; x < width; x++) {
> 				if (((srcImageData.maskData[count>>3] >> (7-(count % 8))) & 1) == 0) {
> 					srcImageData.setPixel(x, y, backgroundColor);
> 				}
> 				count++;				
> 			}
> 		}
> 		srcImageData.maskData = null;
> 
> 		Image convertedImage = ImageDescriptor.createFromImageData(srcImageData).createImage(srcImage.getDevice());
> 		
> 		imagesToBeDisposed.add(convertedImage);
> 		
> 		return convertedImage;
> 	}	
> 	
> 
