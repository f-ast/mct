17a18,19
> import org.eclipse.emf.ecore.EStructuralFeature;
> 
28a31,31
> import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;
302a306,335
> 	 * This specifies how to implement {@link #getChildren} and is used to deduce an appropriate feature for an
> 	 * {@link org.eclipse.emf.edit.command.AddCommand}, {@link org.eclipse.emf.edit.command.RemoveCommand} or
> 	 * {@link org.eclipse.emf.edit.command.MoveCommand} in {@link #createCommand}.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public Collection getChildrenFeatures(Object object) {
> 		if (childrenFeatures == null) {
> 			super.getChildrenFeatures(object);
> 			childrenFeatures.add(GMFGenPackage.eINSTANCE.getGenApplication_SharedContributionItems());
> 			childrenFeatures.add(GMFGenPackage.eINSTANCE.getGenApplication_MainMenu());
> 			childrenFeatures.add(GMFGenPackage.eINSTANCE.getGenApplication_MainToolBar());
> 		}
> 		return childrenFeatures;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	protected EStructuralFeature getChildFeature(Object object, Object child) {
> 		// Check the type of the specified child object and return the proper feature to use for
> 		// adding (see {@link AddCommand}) it as a child.
> 
> 		return super.getChildFeature(object, child);
> 	}
> 
> 	/**
347a381,385
> 			case GMFGenPackage.GEN_APPLICATION__SHARED_CONTRIBUTION_ITEMS:
> 			case GMFGenPackage.GEN_APPLICATION__MAIN_MENU:
> 			case GMFGenPackage.GEN_APPLICATION__MAIN_TOOL_BAR:
> 				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
> 				return;
360a399,461
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFGenPackage.eINSTANCE.getGenApplication_SharedContributionItems(),
> 				 GMFGenFactory.eINSTANCE.createGenSharedContributionItem()));
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFGenPackage.eINSTANCE.getGenApplication_SharedContributionItems(),
> 				 GMFGenFactory.eINSTANCE.createGenGroupMarker()));
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFGenPackage.eINSTANCE.getGenApplication_SharedContributionItems(),
> 				 GMFGenFactory.eINSTANCE.createGenSeparator()));
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFGenPackage.eINSTANCE.getGenApplication_SharedContributionItems(),
> 				 GMFGenFactory.eINSTANCE.createGenActionFactoryContributionItem()));
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFGenPackage.eINSTANCE.getGenApplication_SharedContributionItems(),
> 				 GMFGenFactory.eINSTANCE.createGenMenuManager()));
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFGenPackage.eINSTANCE.getGenApplication_SharedContributionItems(),
> 				 GMFGenFactory.eINSTANCE.createGenToolBarManager()));
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFGenPackage.eINSTANCE.getGenApplication_MainMenu(),
> 				 GMFGenFactory.eINSTANCE.createGenMenuManager()));
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFGenPackage.eINSTANCE.getGenApplication_MainToolBar(),
> 				 GMFGenFactory.eINSTANCE.createGenToolBarManager()));
> 	}
> 
> 	/**
> 	 * This returns the label text for {@link org.eclipse.emf.edit.command.CreateChildCommand}.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public String getCreateChildText(Object owner, Object feature, Object child, Collection selection) {
> 		Object childFeature = feature;
> 		Object childObject = child;
> 
> 		boolean qualify =
> 			childFeature == GMFGenPackage.eINSTANCE.getGenApplication_SharedContributionItems() ||
> 			childFeature == GMFGenPackage.eINSTANCE.getGenApplication_MainMenu() ||
> 			childFeature == GMFGenPackage.eINSTANCE.getGenApplication_MainToolBar();
> 
> 		if (qualify) {
> 			return getString
> 				("_UI_CreateChild_text2",
> 				 new Object[] { getTypeText(childObject), getFeatureText(childFeature), getTypeText(owner) });
> 		}
> 		return super.getCreateChildText(owner, feature, child, selection);
