2,2c2,2
<  * Copyright (c) 2003, 2005 IBM Corporation and others.
---
>  * Copyright (c) 2003, 2006 IBM Corporation and others.
15a16,18
> import org.eclipse.core.commands.ExecutionException;
> import org.eclipse.core.commands.operations.IOperationHistory;
> import org.eclipse.core.runtime.IAdaptable;
16a20,22
> import org.eclipse.emf.ecore.EObject;
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
> import org.eclipse.emf.transaction.util.TransactionUtil;
17,17c35,35
< import org.eclipse.ui.views.properties.IPropertySource;
---
> import org.eclipse.ui.views.properties.IPropertySource;
18,19d35
< 
< import org.eclipse.gmf.runtime.common.core.command.CommandManager;
21a25,27
> import org.eclipse.gmf.runtime.common.core.command.ICompositeCommand;
> import org.eclipse.gmf.runtime.common.core.util.Log;
> import org.eclipse.gmf.runtime.common.core.util.Trace;
22,22c28,28
< import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;
---
> import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
24a31,33
> import org.eclipse.gmf.runtime.emf.ui.properties.internal.EMFPropertiesDebugOptions;
> import org.eclipse.gmf.runtime.emf.ui.properties.internal.EMFPropertiesPlugin;
> import org.eclipse.gmf.runtime.emf.ui.properties.internal.EMFPropertiesStatusCodes;
39,41d48
<      * Constructs a new instance with a command manager for executing property
<      * change commands. This instance must be the root entry because only the
<      * root entry keeps track of the command manager.
42a65,66
>      * @param operationHistory
>      *            my operation history
43,45d64
<      * @param manager
<      *            the command manager with which this entry will execute
<      *            property change commands.
46a68,69
>     public UndoableModelPropertySheetEntry(IOperationHistory operationHistory) {
>         this.operationHistory = operationHistory;
47,48d67
<     public UndoableModelPropertySheetEntry(CommandManager manager) {
<         commandManager = manager;
51a73,76
>      * Sets my editing domain.
>      * 
>      * @param editingDomain
>      *            my editing domain
51a49,49
>      * The operation history used by this entry to execute property change
52,52d48
<      * The command manager used by this entry to execute property change
53,53c50,50
<      * commands. <code>Null</code> if I am not the root entry. Only the root
---
>      * commands. <code>Null</code> if I am not the root entry. Only the root
53a51,51
>      * entry keeps track of the history on behalf of all of the child
54,54d50
<      * entry keeps track of the command manager on behalf of all of the child
55a53,63
>      */
>     private final IOperationHistory operationHistory;
>     
>     /**
>      * My editing domain.
>      */
>     private TransactionalEditingDomain editingDomain;
>     
>     /**
>      * Intializes me with an operation history through
>      * which property change commands will be executed, undone and redone.
55,55c52,52
<      * entries.
---
>      * entries.
56a78,96
>     public void setEditingDomain(TransactionalEditingDomain editingDomain) {
>         this.editingDomain = editingDomain;
>     }
>     
>     /**
>      * Gets my editing domain. The root entry stores the editing domain.
>      * 
>      * @return my editing domain
>      */
>     public TransactionalEditingDomain getEditingDomain() {
> 
>         UndoableModelPropertySheetEntry parentEntry = getParentEntry();
> 
>         if (parentEntry == null || editingDomain != null) {
>             return editingDomain;
>         }
> 
>         return parentEntry.getEditingDomain();
>     }
57,57d77
<     private CommandManager commandManager;
123,123c162,162
<                 restoreCommand = new RestoreDefaultPropertyValueCommand(
---
>                 restoreCommand = new RestoreDefaultPropertyValueCommand(getEditingDomain(), 
131a171,182
>             try {
>                 getOperationHistory().execute(cc, new NullProgressMonitor(), null);
>                 
>             } catch (ExecutionException e) {
>                 Trace.catching(EMFPropertiesPlugin.getDefault(),
>                     EMFPropertiesDebugOptions.EXCEPTIONS_CATCHING,
>                     UndoableModelPropertySheetEntry.class,
>                     "resetPropertyValue", e); //$NON-NLS-1$
>                 Log.error(EMFPropertiesPlugin.getDefault(),
>                     EMFPropertiesStatusCodes.COMMAND_FAILURE, e
>                         .getLocalizedMessage(), e);
>             }
132,132d170
<             getCommandManager().execute(cc);
160a211,213
>         // Remember the new value so that we don't apply this same value more
>         // than once.
>         editValue = newValue;
174a228,229
>      * @param command
>      *            the command into which to compose my property chnage command
177,177c232,232
<             CompositeCommand command) {
---
>             ICommand command) {
191a247,285
>             try {
>                 getOperationHistory().execute(command, new NullProgressMonitor(), null);
>           
>             } catch (ExecutionException e) {
>                 Trace.catching(EMFPropertiesPlugin.getDefault(),
>                     EMFPropertiesDebugOptions.EXCEPTIONS_CATCHING,
>                     UndoableModelPropertySheetEntry.class,
>                     "valueChanged", e); //$NON-NLS-1$
>                 Log.error(EMFPropertiesPlugin.getDefault(),
>                     EMFPropertiesStatusCodes.COMMAND_FAILURE, e
>                         .getLocalizedMessage(), e);
>             }
>         }
>     }
>     
>     /**
>      * Extracts the editing domain from the <code>objects</code> if I am the
>      * root entry.
>      */
>     public void setValues(Object[] objects) {
>         super.setValues(objects);
> 
>         if (getParentEntry() == null) {
>             // I'm the root
>             for (int i = 0; i < objects.length; i++) {
>                 EObject eObject = null;
> 
>                 if (objects[i] instanceof EObject) {
>                     eObject = (EObject) objects[i];
> 
>                 } else if (objects[i] instanceof IAdaptable) {
>                     eObject = (EObject) ((IAdaptable) objects[i])
>                         .getAdapter(EObject.class);
>                 }
> 
>                 if (eObject != null) {
>                     setEditingDomain(TransactionUtil.getEditingDomain(eObject));
>                 }
>             }
192,192d246
<             command.execute(new NullProgressMonitor());
196a290,290
>      * Gets my operation history.
197,197d289
<      * Gets the command manager used to execute property change commands.
198a292,292
>      * @return my operation history
199,199d291
<      * @return <code>CommandManager</code> used to execute property change commands.
200a294,295
>     protected final IOperationHistory getOperationHistory() {
>         return operationHistory;
201,202d293
<     protected CommandManager getCommandManager() {
<         return commandManager;
223,223c316,316
<         return new SetModelPropertyValueCommand(propertyName, object,
---
>         return new SetModelPropertyValueCommand(getEditingDomain(), propertyName, object,
227,231d319
<     /*
<      * (non-Javadoc)
<      * 
<      * @see org.eclipse.gmf.runtime.common.ui.internal.views.properties.UndoablePropertySheetEntry#getCompositeCommand(java.lang.String)
<      */
232,232c320,320
<     protected CompositeCommand getCompositeCommand(String propertyName) {
---
>     protected ICompositeCommand getCompositeCommand(String propertyName) {
233,233c321,321
<         return new CompositeModelCommand(propertyName);
---
>         return new CompositeTransactionalCommand(getEditingDomain(), propertyName);
251,251c339,339
<         return new UndoableModelPropertySheetEntry(getCommandManager());
---
>         return new UndoableModelPropertySheetEntry(getOperationHistory());
