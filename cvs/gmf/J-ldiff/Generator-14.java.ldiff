2,2c2,2
<  * Copyright (c) 2005 Borland Software Corporation
---
>  * Copyright (c) 2005,2006 Borland Software Corporation
15,15d14
< import java.util.ArrayList;
17,17d15
< import java.util.List;
21,22d18
< import org.eclipse.emf.ecore.EClass;
< import org.eclipse.emf.ecore.EObject;
42,42c38,38
<  * Invokes JET templates to populate diagram editor project.
---
>  * Invokes templates to populate diagram editor project.
185a182,182
> 		c.registerFactor(GMFGenPackage.eINSTANCE.getGenNode(), 2);
186,186d181
< 		c.curiousAbout(GMFGenPackage.eINSTANCE.getGenNode());
187a184,184
> 		c.registerFactor(GMFGenPackage.eINSTANCE.getGenLink(), 2);
187,187c183,183
< 		c.curiousAbout(GMFGenPackage.eINSTANCE.getGenCompartment());
---
> 		c.registerFactor(GMFGenPackage.eINSTANCE.getGenCompartment(), 2);
188,188d183
< 		c.curiousAbout(GMFGenPackage.eINSTANCE.getGenLink());
189,189c185,185
< 		c.curiousAbout(GMFGenPackage.eINSTANCE.getGenNodeLabel());
---
> 		c.registerFactor(GMFGenPackage.eINSTANCE.getGenNodeLabel(), 2);
190,190c186,186
< 		c.curiousAbout(GMFGenPackage.eINSTANCE.getGenLinkLabel());
---
> 		c.registerFactor(GMFGenPackage.eINSTANCE.getGenLinkLabel(), 2);
191,191c187,187
< 		c.count(myDiagram);
---
> 		int total = c.getTotal(myDiagram);
192,196d187
< 		int total = 2 * c.getCount(GMFGenPackage.eINSTANCE.getGenNode());
< 		total += 2 * c.getCount(GMFGenPackage.eINSTANCE.getGenCompartment());
< 		total += 2 * c.getCount(GMFGenPackage.eINSTANCE.getGenLink());
< 		total += 2 * c.getCount(GMFGenPackage.eINSTANCE.getGenNodeLabel());
< 		total += 2 * c.getCount(GMFGenPackage.eINSTANCE.getGenLinkLabel());
199a191,191
> 		setupProgressMonitor(null, total);
200,235d190
< 		setupProgressMonitor("Generation in progress...", total);
< 	}
< 
< 	private static final class Counter {
< 		private final List/*<EClass>*/ myAttractions = new ArrayList();
< 		private int[] myHits;
< 		
< 		public void curiousAbout(EClass eClass) {
< 			myAttractions.add(eClass);
< 		}
< 
< 		public void count(EObject start) {
< 			myHits = new int[myAttractions.size()];
< 			final EClass[] attractions = (EClass[]) myAttractions.toArray(new EClass[myAttractions.size()]);
< 			doCount(start.eClass(), attractions);
< 			for (Iterator it = start.eAllContents(); it.hasNext(); ) {
< 				EObject next = (EObject) it.next();
< 				doCount(next.eClass(), attractions);
< 			}
< 		}
< 
< 		private void doCount(EClass eClass, EClass[] attractions) {
< 			for (int i = 0; i < attractions.length; i++) {
< 				if (attractions[i].isSuperTypeOf(eClass)) {
< 					myHits[i]++;
< 				}
< 			}
< 		}
< 
< 		public int getCount(EClass eClass) {
< 			int index = myAttractions.indexOf(eClass);
< 			if (index == -1) {
< 				throw new IllegalArgumentException("No class " + eClass + " was previously registered with curiousAbout(EClass)");
< 			}
< 			return myHits[index];
< 		}
