12,12d11
< 
17,17c15,15
< import org.eclipse.swt.graphics.Image;
---
> import org.eclipse.draw2d.geometry.Dimension;
18,18d15
< 
19a18,18
> import org.eclipse.gmf.runtime.draw2d.ui.internal.mapmode.DiagramMapModeUtil;
21,21c22,22
< import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
---
> import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderHelper;
21a23,23
> import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderingListener;
24,24d21
< 
31a31,44
> 	extends MapModeGraphics
> 	implements DrawableRenderedImage {
> 
> 	boolean allowDelayRender = false;
> 	Dimension maximumRenderSize = null;
> 
> 	/*
> 	 * (non-Javadoc)
> 	 * 
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#allowDelayRender()
> 	 */
> 	public boolean shouldAllowDelayRender() {
> 		return allowDelayRender;
> 	}
32,32d30
< 	extends MapModeGraphics implements DrawableRenderedImage {
35a48,51
> 	 * 
> 	 * @param g
> 	 *            <code>Graphics</code> element to delegate render to
> 	 * @param mm
36,36d47
< 	 * @param g <code>Graphics</code> element to delegate render to
37,37c52,52
< 	 * @param mm <code>IMapMode</code> to retrieve the scale factor from.
---
> 	 *            <code>IMapMode</code> to retrieve the scale factor from.
39a55,68
> 		this(g, mm, false, null);
> 	}
> 
> 	/**
> 	 * Constructor
> 	 * 
> 	 * @param g
> 	 *            <code>Graphics</code> element to delegate render to
> 	 * @param mm
> 	 *            <code>IMapMode</code> to retrieve the scale factor from.
> 	 * @param allowDelayRender
> 	 */
> 	public RenderedMapModeGraphics(Graphics g, IMapMode mm,
> 			boolean allowDelayRender, Dimension maximumRenderSize) {
40a70,71
> 		this.allowDelayRender = allowDelayRender;
> 		this.maximumRenderSize = maximumRenderSize;
44a76,76
> 	 * 
45a78,79
> 	 *      org.eclipse.draw2d.geometry.Rectangle,
> 	 *      org.eclipse.gmf.runtime.draw2d.ui.render.RenderingListener)
45,45c77,77
< 	 * @see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#drawRenderedImage(org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage, int, int, int, int)
---
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#drawRenderedImage(org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage,
46a81,85
> 	public RenderedImage drawRenderedImage(RenderedImage srcImage,
> 			Rectangle rect, RenderingListener listener) {
> 		return RenderHelper.getInstance(
> 			DiagramMapModeUtil.getScale(getMapMode()), true, shouldAllowDelayRender(), getMaximumRenderSize()).drawRenderedImage(getGraphics(),
> 			srcImage, rect, listener);
47,64d80
< 	public RenderedImage drawRenderedImage(RenderedImage srcImage, int x, int y, int width, int height) {
< 		if (getGraphics() instanceof DrawableRenderedImage) {
< 			Rectangle r = zoomRect(x, y, width, height);
< 			return ((DrawableRenderedImage)getGraphics()).drawRenderedImage(srcImage, r.x, r.y, r.width, r.height);
< 		}
< 		else {
< 			Rectangle r = zoomRect(x, y, width, height);
< 			RenderInfo info = srcImage.getRenderInfo();
< 			info.setValues(r.width, r.height, 
< 							info.getFillColor(), info.getOutlineColor(), 
< 							info.shouldMaintainAspectRatio(), info.shouldAntiAlias());
< 			
< 			RenderedImage img = srcImage.getNewRenderedImage(info);
< 			
< 			Image swtImg = img.getSWTImage();
< 			if (swtImg!=null)
< 				getGraphics().drawImage(swtImg, r.x, r.y + r.height - swtImg.getBounds().height);
< 			return img;
65a87,93
> 	
> 	/* (non-Javadoc)
> 	 * @see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#getMaximumRenderSize()
> 	 */
> 	public Dimension getMaximumRenderSize() {
> 		// TODO Auto-generated method stub
> 		return maximumRenderSize;
