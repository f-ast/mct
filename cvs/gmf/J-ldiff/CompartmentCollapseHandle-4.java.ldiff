0a1,8
> /*
>  *+------------------------------------------------------------------------+
>  *| Licensed Materials - Property of IBM                                   |
>  *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
>  *|                                                                        |
>  *| US Government Users Restricted Rights - Use, duplication or disclosure |
>  *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
>  *+------------------------------------------------------------------------+
1,10d0
< /**
<  * Copyright (c) 2007 Borland Software Corporation
<  * 
<  * All rights reserved. This program and the accompanying materials
<  * are made available under the terms of the Eclipse Public License v1.0
<  * which accompanies this distribution, and is available at
<  * http://www.eclipse.org/legal/epl-v10.html
<  *
<  * Contributors:
<  *    bblajer - initial API and implementation
12,12c10,10
< package org.eclipse.gmf.runtime.lite.handles;
---
> package org.eclipse.gmf.runtime.diagram.ui.handles;
13a12,16
> import java.beans.PropertyChangeEvent;
> import java.beans.PropertyChangeListener;
> 
> import org.eclipse.draw2d.Cursors;
> import org.eclipse.draw2d.IFigure;
14,14c17,17
< import org.eclipse.emf.transaction.NotificationFilter;
---
> import org.eclipse.draw2d.Locator;
14a18,19
> import org.eclipse.draw2d.StackLayout;
> import org.eclipse.draw2d.TreeSearch;
15,17d17
< import org.eclipse.emf.transaction.ResourceSetChangeEvent;
< import org.eclipse.emf.transaction.ResourceSetListener;
< import org.eclipse.emf.transaction.ResourceSetListenerImpl;
18,18c20,20
< import org.eclipse.emf.transaction.util.TransactionUtil;
---
> import org.eclipse.draw2d.geometry.Dimension;
18a21,21
> import org.eclipse.draw2d.geometry.Rectangle;
20,20c23,23
< import org.eclipse.gef.GraphicalEditPart;
---
> import org.eclipse.gef.handles.AbstractHandle;
21,21c24,24
< import org.eclipse.gmf.internal.runtime.lite.PluginImages;
---
> import org.eclipse.gmf.runtime.diagram.core.listener.PresentationListener;
21a25,31
> import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
> import org.eclipse.gmf.runtime.diagram.ui.editparts.IResizableCompartmentEditPart;
> import org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure;
> import org.eclipse.gmf.runtime.diagram.ui.internal.figures.CollapseFigure;
> import org.eclipse.gmf.runtime.diagram.ui.internal.tools.CompartmentCollapseTracker;
> import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
> import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
25,25d34
< import org.eclipse.swt.graphics.Image;
26a36,43
> /**
>  * A handle for collapsing resizable compartments
>  *  
>  * @author melaasar
>  */
> public class CompartmentCollapseHandle
> 	extends AbstractHandle
> 	implements PropertyChangeListener {
27,28d35
< public class CompartmentCollapseHandle extends CompartmentNameHandle {
< 	private ResourceSetListener myResourceSetListener;
29a45,53
> 	/** 
> 	 * Positions the supplied figure in its owner's top left corner offset by [1,1] 
> 	 */
> 	private class CollapseHandleLocator implements Locator {
> 		public void relocate(IFigure target) {
> 			Rectangle theBounds = getOwnerFigure().getClientArea().getCopy();
> 			getOwnerFigure().translateToAbsolute(theBounds);
> 			target.translateToRelative(theBounds);
> 			target.setLocation(theBounds.getLocation());
30,50d44
< 	public CompartmentCollapseHandle(GraphicalEditPart owner, String title) {
< 		super(owner, title);	//XXX: temporary
< 		View ownerView = getOwnerView();
< 		NotificationFilter filter = NotificationFilter.createNotifierFilter(ownerView).and(NotificationFilter.createFeatureFilter(NotationPackage.eINSTANCE.getView_Styles()));
< 		NotificationFilter childrenFilter = NotificationFilter.createNotifierFilter(ownerView).and(
< 			NotificationFilter.createFeatureFilter(NotationPackage.eINSTANCE.getView_PersistedChildren()).or(
< 				NotificationFilter.createFeatureFilter(NotationPackage.eINSTANCE.getView_TransientChildren())));
< 		filter = filter.or(childrenFilter);
< 		DrawerStyle drawerStyle = (DrawerStyle) ownerView.getStyle(NotationPackage.eINSTANCE.getDrawerStyle());
< 		if (drawerStyle != null) {
< 			NotificationFilter styleFilter = NotificationFilter.createNotifierFilter(drawerStyle).and(NotificationFilter.createFeatureFilter(NotationPackage.eINSTANCE.getDrawerStyle_Collapsed()));
< 			filter = filter.or(styleFilter);
< 		}
< 		myResourceSetListener = new ResourceSetListenerImpl(filter) {
< 			@Override
< 			public boolean isAggregatePrecommitListener() {
< 				return true;
< 			}
< 			@Override
< 			public void resourceSetChanged(ResourceSetChangeEvent event) {
< 				updateIcon();
52,53d54
< 		};
< 		updateIcon();
55a57,64
> 	/** handle figure dimension */
> 	public static Dimension SIZE =
> 		new Dimension(
> 			MapMode.LPtoDP(ResizableCompartmentFigure.MIN_CLIENT_SIZE),
> 			MapMode.LPtoDP(ResizableCompartmentFigure.MIN_CLIENT_SIZE));
> 
> 	/** the handle figure */
> 	protected CollapseFigure collapseFigure = null;
56,58d56
< 	private void updateIcon() {
< 		getLabel().setIcon(getCollapseIcon());
< 	}
59a66,82
> 	/**
> 	 * Creates a new Compartment Collapse Handle 
> 	 * @param owner
> 	 */
> 	public CompartmentCollapseHandle(IGraphicalEditPart owner) {
> 		setOwner(owner);
> 		setLocator(new CollapseHandleLocator());
> 		setCursor(Cursors.ARROW);
> 		setSize(SIZE);
> 		setLayoutManager(new StackLayout());
> 		add(collapseFigure = new CollapseFigure());
> 		View view = owner.getNotationView();
> 		if (view!=null){
> 			DrawerStyle style = (DrawerStyle) view.getStyle(NotationPackage.eINSTANCE.getDrawerStyle());
> 			if (style != null){
> 				collapseFigure.setCollapsed(style.isCollapsed());
> 				return;
60,62d65
< 	private Image getCollapseIcon() {
< 		if (isEmptyContents()) {
< 			return null;
64,67d83
< 		if (isCollapsed()) {
< 			return PluginImages.get(PluginImages.IMG_HANDLE_COLLAPSE);
< 		} else {
< 			return PluginImages.get(PluginImages.IMG_HANDLE_EXPAND);
68a85,85
> 		collapseFigure.setCollapsed(false);
70a88,93
> 	/**
> 	 * @see org.eclipse.draw2d.IFigure#findFigureAt(int, int, TreeSearch)
> 	 */
> 	public IFigure findFigureAt(int x, int y, TreeSearch search) {
> 		IFigure found = super.findFigureAt(x, y, search);
> 		return (collapseFigure.equals(found)) ? this : found;
71,74d87
< 	private boolean isCollapsed() {
< 		View ownerView = getOwnerView();
< 		if (ownerView == null) {
< 			return false;
75a95,101
> 
> 	/**
> 	 * @see org.eclipse.gef.handles.AbstractHandle#createDragTracker()
> 	 */
> 	protected DragTracker createDragTracker() {
> 		return new CompartmentCollapseTracker(
> 			(IResizableCompartmentEditPart) getOwner());
76,77d94
< 		DrawerStyle drawerStyle = (DrawerStyle) ownerView.getStyle(NotationPackage.eINSTANCE.getDrawerStyle());
< 		return drawerStyle != null && drawerStyle.isCollapsed();
79a104,110
> 	/**
> 	 * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
> 	 */
> 	public void propertyChange(PropertyChangeEvent evt) {
> 		if (evt.getPropertyName().equals(Properties.ID_COLLAPSED))
> 			collapseFigure.setCollapsed(
> 				((Boolean) evt.getNewValue()).booleanValue());
80,81d103
< 	private View getOwnerView() {
< 		return getOwner().getModel() instanceof View ? (View) getOwner().getModel() : null;
83a113,115
> 	/**
> 	 * @see org.eclipse.draw2d.IFigure#addNotify()
> 	 */
84,84d112
< 	@Override
86a118,121
> 		IGraphicalEditPart owner = (IGraphicalEditPart) getOwner();
> 		View view = owner.getNotationView();
> 		if (view!=null){
> 			PresentationListener.getInstance().addPropertyChangeListener(owner.getNotationView(),CompartmentCollapseHandle.this);
87,88d117
< 		View ownerView = getOwnerView();
< 		TransactionUtil.getEditingDomain(ownerView).addResourceSetListener(myResourceSetListener);
90,103d122
< 
< 	@Override
< 	public void removeNotify() {
< 		View ownerView = getOwnerView();
< 		TransactionUtil.getEditingDomain(ownerView).removeResourceSetListener(myResourceSetListener);
< 		super.removeNotify();
< 	}
< 
< 	@Override
< 	public DragTracker getDragTracker() {
< 		if (getOwnerView() != null && !isEmptyContents()) {
< 			return new CompartmentCollapseTracker(getOwner());
< 		}
< 		return null;
106a126,126
> 	 * @see org.eclipse.draw2d.IFigure#removeNotify()
107,107d125
< 	 * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=170341
108a128,131
> 	public void removeNotify() {
> 		IGraphicalEditPart owner = (IGraphicalEditPart) getOwner();
> 		PresentationListener.getInstance().removePropertyChangeListener(owner.getNotationView(),this);
> 		super.removeNotify();
109,114d127
< 	protected boolean isEmptyContents() {
< 		if (isCollapsed()) {
< 			return getOwnerView() == null || getOwnerView().getVisibleChildren().isEmpty();
< 		} else {
< 			return getOwner().getChildren().isEmpty();
< 		}
115a133,133
> 
