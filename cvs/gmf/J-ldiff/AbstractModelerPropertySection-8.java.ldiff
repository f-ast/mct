2,2c2,2
<  * Copyright (c) 2003, 2005 IBM Corporation and others.
---
>  * Copyright (c) 2003, 2006 IBM Corporation and others.
14a15,15
> import java.util.Collections;
17a19,21
> import org.eclipse.core.commands.ExecutionException;
> import org.eclipse.core.commands.operations.IOperationHistory;
> import org.eclipse.core.commands.operations.OperationHistoryFactory;
19a24,25
> import org.eclipse.core.runtime.IStatus;
> import org.eclipse.core.runtime.NullProgressMonitor;
23a30,32
> import org.eclipse.emf.transaction.TransactionalEditingDomain;
> import org.eclipse.emf.transaction.util.TransactionUtil;
> import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
24,24c54,54
< import org.eclipse.jface.viewers.ISelection;
---
> import org.eclipse.jface.viewers.ISelection;
25,25c55,55
< import org.eclipse.jface.viewers.IStructuredSelection;
---
> import org.eclipse.jface.viewers.IStructuredSelection;
26,26c56,56
< import org.eclipse.swt.graphics.GC;
---
> import org.eclipse.swt.graphics.GC;
27,27c57,57
< import org.eclipse.swt.widgets.Composite;
---
> import org.eclipse.swt.widgets.Composite;
28,28c58,58
< import org.eclipse.ui.IWorkbenchPart;
---
> import org.eclipse.ui.IWorkbenchPart;
29,29c59,59
< import org.eclipse.ui.views.properties.tabbed.AbstractPropertySection;
---
> import org.eclipse.ui.views.properties.tabbed.AbstractPropertySection;
30,30c60,60
< import org.eclipse.ui.views.properties.tabbed.ITabbedPropertySheetPageContributor;
---
> import org.eclipse.ui.views.properties.tabbed.ITabbedPropertySheetPageContributor;
31,31c61,61
< import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;
---
> import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;
32,33d61
< 
< import org.eclipse.gmf.runtime.common.core.command.CommandManager;
41,41c42,42
< import org.eclipse.gmf.runtime.diagram.ui.properties.internal.DiagramPropertiesStatusCodes;
---
> import org.eclipse.gmf.runtime.diagram.ui.properties.internal.DiagramPropertiesStatusCodes;
47,47c46,46
< import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;
---
> import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
267a275,275
>         IOperationHistory history = OperationHistoryFactory.getOperationHistory();
267,267c274,274
< 		CompositeCommand compCmd = new CompositeCommand(actionName, commands);
---
>         CompositeCommand command = new CompositeCommand(actionName, commands);
268a277,279
>         try {
>             IStatus status = history.execute(command,
>                 new NullProgressMonitor(), null);
269,269d276
< 		CommandResult result = CommandManager.getDefault().execute(compCmd);
271,271c281,281
< 		if (result.getStatus().getCode() == DiagramPropertiesStatusCodes.CANCELLED)
---
>             if (status.getCode() == DiagramPropertiesStatusCodes.CANCELLED) {
272a283,292
>             }
> 
>         } catch (ExecutionException e) {
>             Trace.catching(DiagramPropertiesPlugin.getDefault(),
>                 DiagramPropertiesDebugOptions.EXCEPTIONS_CATCHING, getClass(),
>                 "executeAsCompositeCommand", e); //$NON-NLS-1$
>             Log.error(DiagramPropertiesPlugin.getDefault(),
>                 DiagramPropertiesStatusCodes.IGNORED_EXCEPTION_WARNING, e
>                     .getLocalizedMessage(), e);
>         }
275a296,296
> 		return command.getCommandResult();
276,276d295
< 		return result;
560,560c580,580
< 		return createCommandInternal(name, res, runnable);
---
> 		return createCommandInternal(name, res.eResource(), runnable);
566,566c586,586
< 	private ICommand createCommandInternal(String name, Object res,
---
> 	private ICommand createCommandInternal(String name, Resource res,
568a589,594
>         ICommand command = new AbstractTransactionalCommand(getEditingDomain(), name,
>             Collections.singletonList(WorkspaceSynchronizer.getFile(res))) {
> 
>             protected CommandResult doExecuteWithResult(
>                     IProgressMonitor monitor, IAdaptable info)
>                 throws ExecutionException {
569,569d588
< 		ICommand command = new AbstractModelCommand(name, res) {
571,571d595
< 			protected CommandResult doExecute(IProgressMonitor progressMonitor) {
574,574c598,598
< 				return newOKCommandResult();
---
>                 return CommandResult.newOKCommandResult();
580a605,620
>     /**
>      * Gets the editing domain from my EObject input.
>      * 
>      * @return my editing domain
>      */
>     protected TransactionalEditingDomain getEditingDomain() {
> 
>         EObject eObjectInput = getEObject();
> 
>         if (eObjectInput != null) {
>             return TransactionUtil.getEditingDomain(eObjectInput);
>         }
> 
>         return null;
>     }
> 
