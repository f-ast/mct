5,5c5,5
<  * $Id: GenExpressionProviderBaseItemProvider.java,v 1.5 2008/03/03 18:38:19 atikhomirov Exp $
---
>  * $Id: GenExpressionProviderBaseItemProvider.java,v 1.6 2008/06/27 15:59:06 atikhomirov Exp $
15a16,16
> import org.eclipse.emf.ecore.EStructuralFeature;
24a26,27
> import org.eclipse.emf.edit.provider.ViewerNotification;
> import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;
25a29,29
> import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;
62,62d65
< 			addExpressionsPropertyDescriptor(object);
67a71,73
> 	 * This specifies how to implement {@link #getChildren} and is used to deduce an appropriate feature for an
> 	 * {@link org.eclipse.emf.edit.command.AddCommand}, {@link org.eclipse.emf.edit.command.RemoveCommand} or
> 	 * {@link org.eclipse.emf.edit.command.MoveCommand} in {@link #createCommand}.
68,68d70
< 	 * This adds a property descriptor for the Expressions feature.
72a78,97
> 	@Override
> 	public Collection<? extends EStructuralFeature> getChildrenFeatures(Object object) {
> 		if (childrenFeatures == null) {
> 			super.getChildrenFeatures(object);
> 			childrenFeatures.add(GMFGenPackage.eINSTANCE.getGenExpressionProviderBase_Expressions());
> 		}
> 		return childrenFeatures;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	@Override
> 	protected EStructuralFeature getChildFeature(Object object, Object child) {
> 		// Check the type of the specified child object and return the proper feature to use for
> 		// adding (see {@link AddCommand}) it as a child.
> 
> 		return super.getChildFeature(object, child);
73,86d77
< 	protected void addExpressionsPropertyDescriptor(Object object) {
< 		itemPropertyDescriptors.add
< 			(createItemPropertyDescriptor
< 				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
< 				 getResourceLocator(),
< 				 getString("_UI_GenExpressionProviderBase_expressions_feature"),
< 				 getString("_UI_PropertyDescriptor_description", "_UI_GenExpressionProviderBase_expressions_feature", "_UI_GenExpressionProviderBase_type"),
< 				 GMFGenPackage.eINSTANCE.getGenExpressionProviderBase_Expressions(),
< 				 true,
< 				 false,
< 				 false,
< 				 null,
< 				 null,
< 				 null));
120a132,137
> 
> 		switch (notification.getFeatureID(GenExpressionProviderBase.class)) {
> 			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS:
> 				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
> 				return;
> 		}
133a151,160
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFGenPackage.eINSTANCE.getGenExpressionProviderBase_Expressions(),
> 				 GMFGenFactory.eINSTANCE.createValueExpression()));
> 
> 		newChildDescriptors.add
> 			(createChildParameter
> 				(GMFGenPackage.eINSTANCE.getGenExpressionProviderBase_Expressions(),
> 				 GMFGenFactory.eINSTANCE.createGenConstraint()));
