33,33d32
< import org.eclipse.gmf.runtime.common.core.util.StringStatics;
35,35d33
< import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;
43,46d40
< import org.eclipse.jface.dialogs.IDialogConstants;
< import org.eclipse.jface.dialogs.MessageDialogWithToggle;
< import org.eclipse.jface.preference.IPreferenceStore;
< import org.eclipse.swt.widgets.Display;
51,58d44
< 	private static String TITLE_OPEN = EditorMessages.compatibility_title_open;
< 
< 	private static String MESSAGE1_OPEN = EditorMessages.compatibility_message1_open;
< 
< 	private static String MESSAGE2_OPEN = EditorMessages.compatibility_message2_open;
< 
< 	private static String MESSAGE3_OPEN = EditorMessages.compatibility_message3_open;
< 
63,68d48
< 	private static String TITLE_SAVE = EditorMessages.compatibility_title_save;
< 
< 	private static String MESSAGE1_SAVE = EditorMessages.compatibility_message1_save;
< 
< 	private static String MESSAGE2_SAVE = EditorMessages.compatibility_message2_save;
< 
254a235,236
> 		// no compatibility support at present
> 		return false;
255,313d234
< 
< 		boolean bLoadAgain = false;
< 
< 		// Check prefs to see how we handle compatibility issues.
< 		IPreferenceStore prefs = CommonUIPlugin.getDefault()
< 			.getPreferenceStore();
< 		// The pref is available on globalPreferancesPage.java
< 		prefs
< 			.setDefault(
< 				org.eclipse.gmf.runtime.common.ui.preferences.IPreferenceConstants.OPEN_UNRECOGNIZED_VERSIONS,
< 				MessageDialogWithToggle.PROMPT);
< 		String szOption = prefs
< 			.getString(org.eclipse.gmf.runtime.common.ui.preferences.IPreferenceConstants.OPEN_UNRECOGNIZED_VERSIONS);
< 
< 		// Are we prompting the user?
< 		if (szOption == MessageDialogWithToggle.PROMPT) {
< 
< 			// Prepare the message
< 			StringBuffer displayErrors = new StringBuffer();
< 			displayErrors.append(MESSAGE1_OPEN);
< 			displayErrors.append(StringStatics.PLATFORM_NEWLINE);
< 
< 			if (errMsg != null && errMsg.trim().length() > 0) {
< 				displayErrors.append(StringStatics.PLATFORM_NEWLINE);
< 				displayErrors.append(errMsg);
< 			}
< 
< 			displayErrors.append(StringStatics.PLATFORM_NEWLINE);
< 			displayErrors.append(StringStatics.PLATFORM_NEWLINE);
< 			displayErrors.append(MESSAGE2_OPEN);
< 			displayErrors.append(StringStatics.PLATFORM_NEWLINE);
< 			displayErrors.append(StringStatics.PLATFORM_NEWLINE);
< 			displayErrors.append(MESSAGE3_OPEN);
< 
< 			// Show the message
< 			MessageDialogWithToggle dlg = MessageDialogWithToggle
< 				.openYesNoQuestion(Display.getDefault().getActiveShell(),
< 					TITLE_OPEN, displayErrors.toString(), null, false, null,
< 					null);
< 
< 			// Respond to the user's decisions
< 			bLoadAgain = (dlg.getReturnCode() == IDialogConstants.YES_ID);
< 
< 			//	More Responding to the user's decisions
< 			if (true == dlg.getToggleState()) {
< 				String state = MessageDialogWithToggle.ALWAYS;
< 				if (false == bLoadAgain) {
< 					state = MessageDialogWithToggle.NEVER;
< 				}
< 				prefs
< 					.setValue(
< 						org.eclipse.gmf.runtime.common.ui.preferences.IPreferenceConstants.OPEN_UNRECOGNIZED_VERSIONS,
< 						state);
< 			}
< 		} else {
< 			bLoadAgain = (szOption == MessageDialogWithToggle.ALWAYS);
< 		}
< 
< 		return bLoadAgain;
320a244,245
> 		// no compatibility support at present
> 		return false;
321,372d243
< 		boolean bKeepUnrecognizedData = false;
< 		// Do we have any tags?
< 		if ((resource instanceof XMLResource)
< 			&& (false == ((XMLResource) resource).getEObjectToExtensionMap()
< 				.isEmpty())) {
< 
< 			// Check prefs to see how we handle compatibility issues.
< 			// The pref is available on globalPreferancesPage.java which is in
< 			// presentation
< 			IPreferenceStore prefs = CommonUIPlugin.getDefault()
< 				.getPreferenceStore();
< 			prefs
< 				.setDefault(
< 					org.eclipse.gmf.runtime.common.ui.preferences.IPreferenceConstants.SAVE_UNRECOGNIZED_VERSIONS,
< 					MessageDialogWithToggle.PROMPT);
< 			String szOption = prefs
< 				.getString(org.eclipse.gmf.runtime.common.ui.preferences.IPreferenceConstants.SAVE_UNRECOGNIZED_VERSIONS);
< 
< 			// Are we prompting the user?
< 			if (szOption == MessageDialogWithToggle.PROMPT) {
< 
< 				// Prepare the message
< 				String display = MESSAGE1_SAVE + StringStatics.PLATFORM_NEWLINE
< 					+ StringStatics.PLATFORM_NEWLINE + MESSAGE2_SAVE;
< 
< 				// Show the message
< 				MessageDialogWithToggle dlg = MessageDialogWithToggle
< 					.openYesNoQuestion(Display.getDefault().getActiveShell(),
< 						TITLE_SAVE, display, null, false, null, null);
< 
< 				// Respond to the user's decisions
< 				bKeepUnrecognizedData = (dlg.getReturnCode() == IDialogConstants.YES_ID);
< 
< 				//	More Responding to the user's decisions
< 				if (true == dlg.getToggleState()) {
< 
< 					//Warnings say this is not used
< 					//String state = MessageDialogWithToggle.ALWAYS;
< 					//if (false == bKeepUnrecognizedData) {
< 					//	state = MessageDialogWithToggle.NEVER;
< 					//}
< 					prefs
< 						.setValue(
< 							org.eclipse.gmf.runtime.common.ui.preferences.IPreferenceConstants.SAVE_UNRECOGNIZED_VERSIONS,
< 							szOption);
< 				}
< 			} else if (MessageDialogWithToggle.ALWAYS.equals(szOption)) {
< 				bKeepUnrecognizedData = true;
< 			}
< 		}
< 
< 		return bKeepUnrecognizedData;
