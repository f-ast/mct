19a20,20
> import org.eclipse.gmf.runtime.draw2d.ui.internal.mapmode.DiagramMapModeUtil;
24a26,26
> import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderingListener;
24,24c25,25
< import org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage;
---
> import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderHelper;
29a330,330
> 	 * 
29a32,32
> import org.eclipse.swt.graphics.RGB;
30,30d329
< 
33,33c35,35
<  * An implementation of {@link org.eclipse.draw2d.ImageFigure} that allows scaling the 
---
>  * An implementation of {@link org.eclipse.draw2d.ImageFigure} that allows
34,34c36,36
<  * underlying image to the containing Figure's bounds, rather then being fixed to the image size.
---
>  * scaling the underlying image to the containing Figure's bounds, rather then
34a37,37
>  * being fixed to the image size.
35a39,39
>  * <p>
36a41,42
>  * supported.
>  * </p>
36,36c40,40
<  * <p>Any image that can be implemented inside the RenderedImage interface can be supported.</p>
---
>  * Any image that can be implemented inside the RenderedImage interface can be
39a46,104
> public class ScalableImageFigure
> 	extends ImageFigure {
> 
> 	private RenderingListenerImpl renderingListener = new RenderingListenerImpl(
> 		this);
> 
> 	static private class RenderingListenerImpl
> 		implements RenderingListener {
> 
> 		private ScalableImageFigure fig;
> 
> 		public RenderingListenerImpl(ScalableImageFigure fig) {
> 			super();
> 			this.fig = fig;
> 		}
> 
> 		/**
> 		 * @return <code>IFigure</code> that the listener wraps
> 		 */
> 		public ScalableImageFigure getFigure() {
> 			return fig;
> 		}
> 
> 		/*
> 		 * (non-Javadoc)
> 		 * 
> 		 * @see org.eclipse.gmf.runtime.draw2d.ui.render.RenderingListener#imageRendered(org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage)
> 		 */
> 		public void imageRendered(RenderedImage rndImg) {
> 			if (getFigure().getParent() != null) {
> 				getFigure().setRenderedImage(rndImg);
> 				getFigure().repaint();
> 			}
> 		}
> 
> 		/*
> 		 * (non-Javadoc)
> 		 * 
> 		 * @see java.lang.Object#equals(java.lang.Object)
> 		 */
> 		public boolean equals(Object obj) {
> 			if (obj instanceof RenderingListenerImpl) {
> 				return ((RenderingListenerImpl) obj).getFigure().equals(
> 					getFigure());
> 			}
> 
> 			return false;
> 		}
> 
> 		/*
> 		 * (non-Javadoc)
> 		 * 
> 		 * @see java.lang.Object#hashCode()
> 		 */
> 		public int hashCode() {
> 			return getFigure().hashCode();
> 		}
> 
> 	}
40,40d45
< public class ScalableImageFigure extends ImageFigure {
45,45d108
< 	private static final int
46,46c109,109
< 		FLAG_USE_DEFAULT_IMAGESIZE = MAX_FLAG << 1,
---
> 	private static final int FLAG_USE_DEFAULT_IMAGESIZE = MAX_FLAG << 1,
51,51c114,114
< 	/** The original <code>RenderedImage</code> at 100% device coordinate size */
---
> 	/** The last rendered <code>RenderedImage</code> */
52,54d114
<     private RenderedImage origRenderedImage = null;
<     
<     /** The cached <code>RenderedImage</code> that was last painted to the graphics context */
58,58c118,118
< 	 * Accessor to determine if the rendered image will be anti-aliased (if possible).
---
> 	 * Accessor to determine if the rendered image will be anti-aliased (if
58a119,119
> 	 * possible).
60,60c121,121
< 	 * @return <code>boolean</code> <code>true</code> if anti aliasing is on, <code>false</code> otherwise.
---
> 	 * @return <code>boolean</code> <code>true</code> if anti aliasing is
60a122,122
> 	 *         on, <code>false</code> otherwise.
67,67c129,129
< 	 * Sets a property to determine if the rendered image will be anti-aliased (if possible).
---
> 	 * Sets a property to determine if the rendered image will be anti-aliased
67a130,130
> 	 * (if possible).
68a132,132
> 	 * @param antiAlias
69,69c133,133
< 	 * @param antiAlias <code>boolean</code> <code>true</code> if anti-aliasing is to be turned on, 
---
> 	 *            <code>boolean</code> <code>true</code> if anti-aliasing is
70,70c134,134
< 	 * <code>false</code> otherwise
---
> 	 *            to be turned on, <code>false</code> otherwise
78,78c142,142
< 	 * Accessor to determine if the rendered image will respect the original aspect 
---
> 	 * Accessor to determine if the rendered image will respect the original
79,79c143,143
< 	 * ratio of the default image when resized.
---
> 	 * aspect ratio of the default image when resized.
81,81c145,145
< 	 * @return <code>boolean</code> <code>true</code> if maintain aspect ratio is on, <code>false</code> otherwise.
---
> 	 * @return <code>boolean</code> <code>true</code> if maintain aspect
81a146,146
> 	 *         ratio is on, <code>false</code> otherwise.
88,88c153,153
< 	 * Sets a property to determine if the rendered image will respect the original aspect 
---
> 	 * Sets a property to determine if the rendered image will respect the
89,89c154,154
< 	 * ratio of the default image when resized.
---
> 	 * original aspect ratio of the default image when resized.
90a156,156
> 	 * @param maintainAspectRatio
91,91c157,157
< 	 * @param maintainAspectRatio <code>boolean</code> <code>true</code> if maintain aspect ratio is to be turned on, 
---
> 	 *            <code>boolean</code> <code>true</code> if maintain aspect
92,92c158,158
< 	 * <code>false</code> otherwise
---
> 	 *            ratio is to be turned on, <code>false</code> otherwise
99a166,166
> 	 * @param img
100,100c167,167
< 	 * @param img the <code>Image</code> to render
---
> 	 *            the <code>Image</code> to render
109,109c176,176
< 		this.origRenderedImage = RenderedImageFactory.getInstance(byteOS.toByteArray());
---
> 		this.lastRenderedImage = RenderedImageFactory.getInstance(byteOS
109a177,177
> 			.toByteArray());
126a195,195
> 	 * @param renderedImage
127,127c196,196
< 	 * @param renderedImage the <code>RenderedImage</code> that is used for rendering the image.
---
> 	 *            the <code>RenderedImage</code> that is used for rendering
127a197,197
> 	 *            the image.
135a206,206
> 	 * @param renderedImage
136a208,213
> 	 *            the image.
> 	 * @param useDefaultImageSize
> 	 *            <code>boolean</code> indicating whether to initialize the
> 	 *            preferred size with the default image size. Otherwise, a set
> 	 *            default will be used instead.
> 	 * @param useOriginalColors
136,136c207,207
< 	 * @param renderedImage the <code>RenderedImage</code> that is used for rendering the image.
---
> 	 *            the <code>RenderedImage</code> that is used for rendering
137,138d207
< 	 * @param useDefaultImageSize <code>boolean</code> indicating whether to initialize the preferred size 
< 	 * with the default image size.  Otherwise, a set default will be used instead.
139a215,215
> 	 *            colors of the <code>RenderedImage</code> or to replace black
139,139c214,214
< 	 * @param useOriginalColors <code>boolean</code> indicating whether to use the original colors of the
---
> 	 *            <code>boolean</code> indicating whether to use the original
140,140c216,216
< 	 * <code>RenderedImage</code> or to replace black with outline color and white with the fill color.
---
> 	 *            with outline color and white with the fill color.
142a219,220
> 			boolean useDefaultImageSize, boolean useOriginalColors,
> 			boolean antiAlias) {
143,143d218
< 				boolean useDefaultImageSize, boolean useOriginalColors, boolean antiAlias) {
144,144c221,221
< 		origRenderedImage = renderedImage;
---
> 		lastRenderedImage = renderedImage;
153a231,233
> 	 * @param w
> 	 *            the preferred width of the image
> 	 * @param h
154,154d230
< 	 * @param w the preferred width of the image
155,155c234,234
< 	 * @param h the preferred height of the image
---
> 	 *            the preferred height of the image
162,162c241,241
< 	 * Returns the size set specified by setPreferredImageSize() or 
---
> 	 * Returns the size set specified by setPreferredImageSize() or the size
163,163c242,242
< 	 * the size specified by the image. In the case of meta-images
---
> 	 * specified by the image. In the case of meta-images a preferred size of
164,164c243,243
< 	 * a preferred size of 32x32 is returned. 
---
> 	 * 32x32 is returned.
168,170d246
< 			if (getImage() == null)
< 				return preferredSize;
< 			
180,180c256,256
< 						org.eclipse.swt.graphics.Rectangle imgRect = swtImage.getBounds();
---
> 						org.eclipse.swt.graphics.Rectangle imgRect = swtImage
180a257,257
> 							.getBounds();
181,181c258,258
< 						preferredSize.width = MapModeUtil.getMapMode(this).DPtoLP(imgRect.width);
---
> 						preferredSize.width = MapModeUtil.getMapMode(this)
181a259,259
> 							.DPtoLP(imgRect.width);
182a261,261
> 							.DPtoLP(imgRect.height);
182,182c260,260
< 						preferredSize.height = MapModeUtil.getMapMode(this).DPtoLP(imgRect.height);
---
> 						preferredSize.height = MapModeUtil.getMapMode(this)
189a269,269
> 	/*
190,190d268
< 	
191a271,271
> 	 * 
191,191c270,270
< 	/* (non-Javadoc)
---
> 	 * (non-Javadoc)
203,203c283,283
< 	 * Override to return an image that is scaled to fit the bounds of the figure.
---
> 	 * Override to return an image that is scaled to fit the bounds of the
203a284,284
> 	 * figure.
213a295,295
> 	 * <code>Dimension</code>
213,213c294,294
< 	 * Gets the <code>RenderedImage</code> that is the for the specified <code>Dimension</code>
---
> 	 * Gets the <code>RenderedImage</code> that is the for the specified
218a301,304
> 		Color fill = getBackgroundColor();
> 		Color outline = getForegroundColor();
> 		RenderInfo newRenderInfo = getRenderedImage().getRenderInfo();
> 		newRenderInfo.setValues(dim.width,
219,221d300
< 		RenderInfo newRenderInfo =
< 			RenderedImageFactory.createInfo(
< 				dim.width,
223,224d305
< 				useOriginalColors() ? null : translateSWTColorToAWTColor(getBackgroundColor()),
< 				useOriginalColors() ? null : translateSWTColorToAWTColor(getForegroundColor()),
225a307,311
> 			isAntiAlias(),
> 			useOriginalColors() ? (RGB)null
> 				: new RGB(fill.getRed(), fill.getGreen(), fill.getBlue()),
> 			useOriginalColors() ? (RGB)null
> 				: new RGB(outline.getRed(), outline.getGreen(), outline.getBlue())); // antialias
226,226d306
< 				isAntiAlias()); // antialias
228,228c313,313
< 		RenderedImage newRenderedImage = getRenderedImage().getNewRenderedImage(newRenderInfo);
---
> 		RenderedImage newRenderedImage = getRenderedImage()
228a314,314
> 			.getNewRenderedImage(newRenderInfo);
231,231d316
< 
233,233c318,318
< 	 * @return a <code>boolean</code> <code>true</code> if the original colors of the image should be used for
---
> 	 * @return a <code>boolean</code> <code>true</code> if the original
233a319,319
> 	 *         colors of the image should be used for rendering, or
234a321,321
> 	 *         replaced by the specified outline and fill colors respectively of
234,234c320,320
< 	 * rendering, or <code>false</code> indicates that black and white colors can replaced by the specified outline
---
> 	 *         <code>false</code> indicates that black and white colors can
235,235c322,322
< 	 * and fill colors respectively of the <code>RenderInfo</code>.
---
> 	 *         the <code>RenderInfo</code>.
246,246d333
< 		int x, y;
248a336,339
> 		setRenderedImage(RenderHelper.getInstance(
> 			DiagramMapModeUtil.getScale(MapModeUtil.getMapMode(this)), false,
> 			false, null).drawRenderedImage(graphics, getRenderedImage(), area,
> 			renderingListener));
249,270d335
< 		y = (area.height - getBounds().height) / 2 + area.y;
< 		x = (area.width - getBounds().width) / 2 + area.x;		
< 		
< 		if (graphics instanceof DrawableRenderedImage) {
<            	lastRenderedImage = ((DrawableRenderedImage) graphics).drawRenderedImage(getRenderedImage(new Dimension(getBounds().width, getBounds().height)),
<                        x, y, getBounds().width, getBounds().height);
<            	assert lastRenderedImage != null;
< 		} else { 
< 			graphics.drawImage(getRenderedImage().getSWTImage(), x, y); 
<         }
< 	}	
< 	
<     /**
<      * Returns the corresponding java.awt.Color given an org.eclipse.swt.graphics.Color
<      * 
<      * @param swtColor to be translated
<      * @return the corresponding java.awt.Color
<      */    
<     private java.awt.Color translateSWTColorToAWTColor(Color swtColor) {
< 		return (swtColor == null) ? null
< 			: new java.awt.Color(swtColor.getRed(), swtColor.getGreen(),
< 				swtColor.getBlue());
274a344,344
> 	 * figure.
274,274c343,343
< 	 * Gets the <code>RenderedImage</code> that is being displayed by this figure.
---
> 	 * Gets the <code>RenderedImage</code> that is being displayed by this
276,276c346,346
< 	 * @return <code>RenderedImage</code> that is being displayed by this figure.
---
> 	 * @return <code>RenderedImage</code> that is being displayed by this
276a347,347
> 	 *         figure.
279,279c350,350
< 		return origRenderedImage;
---
> 		return lastRenderedImage;
283a355,355
> 	 * figure
283,283c354,354
< 	 * Sets the <code>RenderedImage</code> that is to be displayed by this figure
---
> 	 * Sets the <code>RenderedImage</code> that is to be displayed by this
284a357,357
> 	 * @param the
285a359,359
> 	 *            this figure
285,285c358,358
< 	 * @param the <code>RenderedImage</code> that is to being displayed by this figure
---
> 	 *            <code>RenderedImage</code> that is to being displayed by
288,288c362,362
< 		this.origRenderedImage = renderedImage;
---
> 		this.lastRenderedImage = renderedImage;
