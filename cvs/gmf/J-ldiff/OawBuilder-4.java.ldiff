32,32c38,38
< import org.eclipse.gmf.internal.xpand.ResourceManager;
---
> import org.eclipse.gmf.internal.xpand.util.ParserException;
32a39,39
> import org.eclipse.gmf.internal.xpand.util.ParserException.ErrorLocationInfo;
43a45,45
> 	private WorkspaceResourceManager resourceManager;
44a149,152
> 	private static void updateMarkers(IFile resource, Set<AnalysationIssue> issues) {
>         OawMarkerManager.deleteMarkers(resource);
>         OawMarkerManager.addMarkers(resource, issues.toArray(new AnalysationIssue[issues.size()]));
> 	}
45,46d148
< 	class OawDeltaVisitor implements IResourceDeltaVisitor {
< 		private IProgressMonitor monitor;
47a154,157
> 	private static void updateMarkers(IFile resource, ErrorLocationInfo[] parsingErrors) {
>         OawMarkerManager.deleteMarkers(resource);
>         OawMarkerManager.addMarkers(resource, parsingErrors);
> 	}
47,47c153,153
< 
---
> 
48,50d153
< 		public OawDeltaVisitor(final IProgressMonitor monitor) {
< 			this.monitor = monitor;
< 		}
51,51c158,158
< 
---
> 
51a159,168
> 	private class XpandResourceVisitor implements IResourceVisitor, IResourceDeltaVisitor {
> 		private IProgressMonitor monitor;
> 
> 		public XpandResourceVisitor(final IProgressMonitor monitor) {
> 			this.monitor = monitor;
> 		}
> 
> 		public boolean visit(final IResource resource) {
> 			if (!resource.isDerived() && (resource instanceof IFile) && isFileOfInterest((IFile) resource)) {
> 				reloadResource((IFile) resource);
52,55d158
< 		public boolean visit(final IResourceDelta delta) throws CoreException {
< 			final IResource resource = delta.getResource();
< 			if (resource.isDerived()) {
< 				return false;
56a170,178
> 			monitor.worked(1);
> 			return true;
> 		}
> 
> 		public boolean visit(final IResourceDelta delta) throws CoreException {
> 			final IResource resource = delta.getResource();
> 			if (resource.isDerived()) {
> 				return false;
> 			}
56,56c169,169
< 			}
---
> 			}
57,57c179,179
< 			if ((resource instanceof IFile)) {
---
> 			if ((resource instanceof IFile)) {
58,58c180,180
< 				IFile file = (IFile) resource;
---
> 				IFile file = (IFile) resource;
59,59c181,181
< 				if (!isFileOfInterest(file)) {
---
> 				if (!isFileOfInterest(file)) {
60,60c182,182
< 					return false;
---
> 					return false;
61,61c183,183
< 				}
---
> 				}
62,62c184,184
< 				switch (delta.getKind()) {
---
> 				switch (delta.getKind()) {
63,63c185,185
< 				case IResourceDelta.ADDED:
---
> 				case IResourceDelta.ADDED:
64,64c186,186
< 					reloadResource(file);
---
> 					reloadResource(file);
65,65c187,187
< 					break;
---
> 					break;
66,66c188,188
< 				case IResourceDelta.REMOVED:
---
> 				case IResourceDelta.REMOVED:
67,67c189,189
< 					handleRemovement(file);
---
> 					handleRemovement(file);
68,68c190,190
< 					break;
---
> 					break;
69,69c191,191
< 				case IResourceDelta.CHANGED:
---
> 				case IResourceDelta.CHANGED:
70,70c192,192
< 					reloadResource(file);
---
> 					reloadResource(file);
71,71c193,193
< 					break;
---
> 					break;
72a195,202
> 			} else if (resource instanceof IProject) {
> 				// forget about project in resource manager
> 				if (delta.getKind() == IResourceDelta.REMOVED) {
> 					System.err.println("Project removed:" + resource.getName());
> 				}
> 				if (delta.getKind() == IResourceDelta.OPEN) {
> 					System.err.println("Project open:" + ((IProject) resource).isOpen());
> 				}
72,72c194,194
< 				}
---
> 				}
73,73c203,203
< 			}
---
> 			}
74,74c204,204
< 			monitor.worked(1);
---
> 			monitor.worked(1);
75,75c205,205
< 			return true;
---
> 			return true;
76,76c206,206
< 		}
---
> 		}
77,94d206
< 
< 	}
< 
< 	private class XpandResourceVisitor implements IResourceVisitor {
< 		private IProgressMonitor monitor;
< 
< 		public XpandResourceVisitor(final IProgressMonitor monitor) {
< 			this.monitor = monitor;
< 		}
< 
< 		public boolean visit(final IResource resource) {
< 			if (!resource.isDerived() && (resource instanceof IFile) && isFileOfInterest((IFile) resource)) {
< 				reloadResource((IFile) resource);
< 			}
< 			monitor.worked(1);
< 			return true;
< 		}
< 	}
103a59,64
> 	@Override
> 	protected void startupOnInitialize() {
> 		// TODO Auto-generated method stub
> 		super.startupOnInitialize();
> 		resourceManager = new WorkspaceResourceManager(getProject());
> 	}
104,104c47,47
< 	// XXX again, using map as mere pairs
---
> 	// XXX again, using map as mere pairs
105,105c48,48
< 	private final Map<XtendResource, IFile> xtendResourcesToAnalyze = new HashMap<XtendResource, IFile>();
---
> 	private final Map<XtendResource, IFile> xtendResourcesToAnalyze = new HashMap<XtendResource, IFile>();
106,106c49,49
< 	private final Map<XpandResource, IFile> xpandResourcesToAnalyze = new HashMap<XpandResource, IFile>();
---
> 	private final Map<XpandResource, IFile> xpandResourcesToAnalyze = new HashMap<XpandResource, IFile>();
111a70,70
> 				System.err.println("First build, kind:" + kind + " and is FULLBUILD:" + (kind == FULL_BUILD));
145,149d103
< 	private static void updateMarkers(IFile resource, Set<AnalysationIssue> issues) {
<         OawMarkerManager.deleteMarkers(resource);
<         OawMarkerManager.addMarkers(resource, issues.toArray(new AnalysationIssue[issues.size()]));
< 	}
< 
154a109,109
> 		try {
165a121,128
> 		} catch (ParserException ex) {
> 			updateMarkers(resource, ex.getParsingErrors());
> 		} catch (Exception ex) {
> 			Activator.logError(ex);
> 			// perhaps, depending on exception type (Core|IO) we can decide to keep old markers? 
> 			OawMarkerManager.deleteMarkers(resource);
> 			OawMarkerManager.addErrorMarker(resource, ex.getMessage(), -1, -1);
> 		}
167a131,131
> 
178a143,146
> 	}
> 
> 	private WorkspaceResourceManager getResourceManager() {
> 		return resourceManager;
178,178c142,142
< 		delta.accept(new OawDeltaVisitor(monitor));
---
> 		delta.accept(new XpandResourceVisitor(monitor));
181,182d148
< 	protected ResourceManager getResourceManager() {
< 		return Activator.getResourceManager(getProject());
