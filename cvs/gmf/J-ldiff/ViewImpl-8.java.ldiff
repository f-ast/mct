23a24,24
> import org.eclipse.emf.common.util.URI;
30a32,32
> import org.eclipse.emf.ecore.util.ECrossReferenceEList;
37a40,40
> import org.eclipse.gmf.runtime.notation.NotationObject;
47a51,51
>  *   <li>{@link org.eclipse.gmf.runtime.notation.impl.ViewImpl#getUUID <em>UUID</em>}</li>
70a75,136
> 	 * The default value of the '{@link #getUUID() <em>UUID</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @see #getUUID()
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected static final byte[] UUID_EDEFAULT = null;
> 
> 	/**
> 	 * The cached value of the '{@link #getUUID() <em>UUID</em>}' attribute.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @see #getUUID()
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected byte[] uUID = UUID_EDEFAULT;
> 
> 		protected URI eProxyURI;
> 
>   @Override
>   protected EPropertiesHolder eProperties()
>   {
>     if (eProperties == null)
>     {
>       eProperties = new EPropertiesHolderBaseImpl() {};
>     }
>     return eProperties;
>   }
> 
>   @Override
>   public boolean eIsProxy()
>   {
>     return eProxyURI != null;
>   }
>   
>   @Override
>   public URI eProxyURI()
>   {
>     return eProxyURI;
>   }
> 
>   @Override
>   public void eSetProxyURI(URI uri)
>   {
>     eProxyURI = uri;
>   }
> 
>   @Override
>   public EList<EObject> eContents()
>   {
>     return EContentsEList.createEContentsEList(this);
>   }
> 
>   @Override
>   public EList<EObject> eCrossReferences()
>   {
>     return ECrossReferenceEList.createECrossReferenceEList(this);
>   }
>   
>     /**
186a253,253
>     // EATM
187,187c254,254
<     private EContentsEList allChildren = null;
---
>     // private EContentsEList allChildren = null;
210a278,298
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public byte[] getUUID() {
> 		return uUID;
> 	}
> 
> 				/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public void setUUID(byte[] newUUID) {
> 		byte[] oldUUID = uUID;
> 		uUID = newUUID;
> 		if (eNotificationRequired())
> 			eNotify(new ENotificationImpl(this, Notification.SET, NotationPackage.VIEW__UUID, oldUUID, uUID));
> 	}
> 
> 				/**
306a395,396
>         return new EContentsEList(this, childrenFeatures);
>         // if (allChildren == null) {
307,307d394
<         if (allChildren == null) {
308,308c397,397
<             allChildren = new EContentsEList(this, childrenFeatures);
---
>         //     allChildren = new EContentsEList(this, childrenFeatures);
308a398,398
>         // }
309,309d397
<         }
310,310c399,399
<         return allChildren;
---
>         // return allChildren;
525a615,616
> 			case NotationPackage.VIEW__UUID:
> 				return getUUID();
561a653,655
> 			case NotationPackage.VIEW__UUID:
> 				setUUID((byte[])newValue);
> 				return;
606a701,703
> 			case NotationPackage.VIEW__UUID:
> 				setUUID(UUID_EDEFAULT);
> 				return;
645a743,744
> 			case NotationPackage.VIEW__UUID:
> 				return UUID_EDEFAULT == null ? uUID != null : !UUID_EDEFAULT.equals(uUID);
670a770,799
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public int eBaseStructuralFeatureID(int derivedFeatureID, Class baseClass) {
> 		if (baseClass == NotationObject.class) {
> 			switch (derivedFeatureID) {
> 				case NotationPackage.VIEW__UUID: return NotationPackage.NOTATION_OBJECT__UUID;
> 				default: return -1;
> 			}
> 		}
> 		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
> 	}
> 
> 				/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public int eDerivedStructuralFeatureID(int baseFeatureID, Class baseClass) {
> 		if (baseClass == NotationObject.class) {
> 			switch (baseFeatureID) {
> 				case NotationPackage.NOTATION_OBJECT__UUID: return NotationPackage.VIEW__UUID;
> 				default: return -1;
> 			}
> 		}
> 		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
> 	}
> 
> 				/**
677a807,808
> 		result.append(" (uUID: "); //$NON-NLS-1$
> 		result.append(uUID);
678,678c809,809
< 		result.append(" (visible: "); //$NON-NLS-1$
---
> 		result.append(", visible: "); //$NON-NLS-1$
