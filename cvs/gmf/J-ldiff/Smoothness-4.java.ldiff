85,85c85,85
< 	public static final Smoothness NONE_LITERAL = new Smoothness(NONE, "None"); //$NON-NLS-1$
---
> 	public static final Smoothness NONE_LITERAL = new Smoothness(NONE, "None", "None"); //$NON-NLS-2$//$NON-NLS-1$
95,95c95,95
< 	public static final Smoothness NORMAL_LITERAL = new Smoothness(NORMAL, "Normal"); //$NON-NLS-1$
---
> 	public static final Smoothness NORMAL_LITERAL = new Smoothness(NORMAL, "Normal", "Normal"); //$NON-NLS-2$//$NON-NLS-1$
105,105c105,105
< 	public static final Smoothness LESS_LITERAL = new Smoothness(LESS, "Less"); //$NON-NLS-1$
---
> 	public static final Smoothness LESS_LITERAL = new Smoothness(LESS, "Less", "Less"); //$NON-NLS-2$//$NON-NLS-1$
115,115c115,115
< 	public static final Smoothness MORE_LITERAL = new Smoothness(MORE, "More"); //$NON-NLS-1$
---
> 	public static final Smoothness MORE_LITERAL = new Smoothness(MORE, "More", "More"); //$NON-NLS-2$//$NON-NLS-1$
139a140,155
>      * Returns the '<em><b>Smoothness</b></em>' literal with the specified literal value.
>      * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
>      * @generated
>      */
> 	public static Smoothness get(String literal) {
>         for (int i = 0; i < VALUES_ARRAY.length; ++i) {
>             Smoothness result = VALUES_ARRAY[i];
>             if (result.toString().equals(literal)) {
>                 return result;
>             }
>         }
>         return null;
>     }
> 
>     /**
145,145c161,161
< 	public static Smoothness get(String name) {
---
>     public static Smoothness getByName(String name) {
148,148c164,164
< 			if (result.toString().equals(name)) {
---
>             if (result.getName().equals(name)) {
156,156c172,172
< 	 * Returns the '<em><b>Smoothness</b></em>' literal with the specified value.
---
>      * Returns the '<em><b>Smoothness</b></em>' literal with the specified integer value.
177,177c193,193
< 	private Smoothness(int value, String name) {
---
>     private Smoothness(int value, String name, String literal) {
178,178c194,194
< 		super(value, name);
---
>         super(value, name, literal);
