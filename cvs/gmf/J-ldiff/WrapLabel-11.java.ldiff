2,2c2,2
<  * Copyright (c) 2002, 2005  IBM Corporation and others.
---
>  * Copyright (c) 2002, 2006 IBM Corporation and others.
13a14,14
> import java.lang.ref.WeakReference;
14a16,17
> import java.util.Map;
> import java.util.WeakHashMap;
19a23,23
> import org.eclipse.draw2d.LayoutManager;
24a29,31
> 
> import org.eclipse.gmf.runtime.draw2d.ui.internal.mapmode.IMapModeHolder;
> import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
26a34,34
> import org.eclipse.swt.graphics.FontMetrics;
56a65,65
> 
56,56c64,64
< 	private static String _ellipse = "..."; //$NON-NLS-1$
---
> 	private static final String _ellipse = "..."; //$NON-NLS-1$
58a68,131
> 	private static final Map mapModeConstantsMap = new WeakHashMap();
> 
> 	private static class MapModeConstants {
> 
> 		private static final int MAX_IMAGE_INFO = 12;
> 
> 		public final WeakReference mapModeRef;
> 
> 		public final int nDPtoLP_3;
> 
> 		public final int nDPtoLP_2;
> 
> 		public final int nDPtoLP_0;
> 
> 		public final Dimension dimension_nDPtoLP_0;
> 
> 		public final WeakHashMap fontToEllipseTextSize = new WeakHashMap();
> 
> 		public final SingleIconInfo[] singleIconInfos = new SingleIconInfo[MAX_IMAGE_INFO];
> 
> 		public MapModeConstants(IMapMode mapMode) {
> 			this.mapModeRef = new WeakReference(mapMode);
> 			nDPtoLP_2 = mapMode.DPtoLP(2);
> 			nDPtoLP_3 = mapMode.DPtoLP(3);
> 			nDPtoLP_0 = mapMode.DPtoLP(0);
> 			dimension_nDPtoLP_0 = new Dimension(nDPtoLP_0, nDPtoLP_0);
> 		}
> 
> 		public Dimension getEllipseTextSize(Font f) {
> 			Dimension d = (Dimension) fontToEllipseTextSize.get(f);
> 			if (d == null) {
> 				IMapMode mapMode = (IMapMode) mapModeRef.get();
> 				d = FigureUtilities.getTextExtents(_ellipse, f);
> 				d.height = FigureUtilities.getFontMetrics(f).getHeight();
> 				d = new Dimension(mapMode.DPtoLP(d.width), mapMode
> 					.DPtoLP(d.height));
> 				fontToEllipseTextSize.put(f, d);
> 			}
> 			return d;
> 		}
> 
> 		public SingleIconInfo getSingleIconInfo(Image image) {
> 			if (image == null) {
> 				return SingleIconInfo.NULL_INFO;
> 			}
> 			SingleIconInfo info;
> 			for (int i = 0; i < MAX_IMAGE_INFO; ++i) {
> 				info = singleIconInfos[i];
> 				if (info == null) {
> 					info = new SingleIconInfo(image);
> 					singleIconInfos[i] = info;
> 					return info;
> 				}
> 				if (info.icon == image) {
> 					return info;
> 				}
> 			}
> 			int index = SingleIconInfo.count % MAX_IMAGE_INFO;
> 			info = new SingleIconInfo(image);
> 			singleIconInfos[index] = info;
> 			return info;
> 		}
> 	}
> 
68a147,147
> 
69a149,149
> 
70a151,151
> 
72a154,154
> 	private MapModeConstants mapModeConstants;
74a157,157
> 	private String text;
75,75c424,424
< 	private String text = "";//$NON-NLS-1$
---
> 		text = "";//$NON-NLS-1$
82a165,166
> 	private Dimension ellipseTextSize;
> 
86a171,171
> 	private int cachedPrefSizeHint_width;
87,90d170
< 	private Dimension cachedPrefSizeHint = new Dimension(-1, -1);
< 
< 	/** the cached hint used to calculate text size */
< 	private Dimension cachedTextSizeHint = new Dimension(-1, -1);
91a173,173
> 	private int cachedPrefSizeHint_height;
95a178,308
> 	private static abstract class IconInfo {
> 		/**
> 		 * Gets the icon at the index location.
> 		 * 
> 		 * @param i
> 		 *            the index to retrieve the icon of
> 		 * @return <code>Image</code> that corresponds to the given index.
> 		 */
> 		public abstract Image getIcon(int i);
> 		
> 		/**
> 		 * Gets the icon size of the icon at the given index.
> 		 * 
> 		 * @param i
> 		 * @return the <code>Dimension</code> that is the size of the icon at
> 		 *         the given index.
> 		 */
> 		public abstract Dimension getIconSize(IMapMode mapMode, int i);
> 
> 		/**
> 		 * @return the number of icons
> 		 */
> 		public abstract int getNumberofIcons();
> 		
> 		/**
> 		 * @return the <code>Dimension</code> that is the total size of all
> 		 *         the icons.
> 		 */
> 		public abstract Dimension getTotalIconSize(IMapMode mapMode);
> 
> 		public abstract void invalidate();
> 		
> 		/**
> 		 * Sets the icon at the index location.
> 		 * 
> 		 * @param icon
> 		 * @param i
> 		 */
> 		public abstract void setIcon(Image icon, int i);
> 		
> 		/**
> 		 * 
> 		 */
> 		public abstract int getMaxIcons();
> 
> 	}	
> 
> 	private static class SingleIconInfo
> 		extends IconInfo {	
> 
> 		static int count;
> 		
> 		public static final SingleIconInfo NULL_INFO = new SingleIconInfo(){
> 			public int getNumberofIcons() {
> 				return 0;
> 			}
> 		};
> 
> 		final Image icon;
> 
> 		/** total icon size */
> 		private Dimension totalIconSize;
> 
> 		private SingleIconInfo() {
> 			icon = null;//don't increment count, used only for NULL_INFO
> 		}
> 
> 		public SingleIconInfo(Image icon) {
> 			this.icon = icon;
> 			++count;
> 		}
> 
> 		public final int getMaxIcons() {
> 			return 1;
> 		}
> 
> 		
> 		public Image getIcon(int i) {
> 			if (i == 0) {
> 				return icon;
> 			} else if (i > 0) {
> 				return null;
> 			}
> 			throw new IndexOutOfBoundsException();
> 		}
> 
> 		
> 		public void setIcon(Image img, int i) {
> 			throw new UnsupportedOperationException();
> 		}
> 
> 		
> 		public Dimension getIconSize(IMapMode mapMode, int i) {
> 			if (i == 0) {
> 				return getTotalIconSize(mapMode);
> 			}
> 
> 			throw new IndexOutOfBoundsException();
> 		}
> 
> 		
> 		public int getNumberofIcons() {
> 			return 1;
> 		}
> 
> 		
> 		public Dimension getTotalIconSize(IMapMode mapMode) {
> 			if (totalIconSize != null)
> 				return totalIconSize;
> 
> 			if (icon != null && !icon.isDisposed()) {
> 				org.eclipse.swt.graphics.Rectangle imgBounds = icon.getBounds();
> 				totalIconSize = new Dimension(mapMode.DPtoLP(imgBounds.width),
> 					mapMode.DPtoLP(imgBounds.height));
> 			} else {
> 				totalIconSize = EMPTY_DIMENSION;
> 			}
> 
> 			return totalIconSize;
> 		}
> 
> 		
> 		public void invalidate() {
> 			totalIconSize = null;
> 		}
> 
> 	}
> 
> 	private static class MultiIconInfo
> 		extends IconInfo {
> 
96,96d177
< 	private class IconInfo {
98,98c310,310
< 		private ArrayList icons = new ArrayList();
---
> 		private ArrayList icons = new ArrayList(2);
98a311,311
> 
101a315,322
> 		public MultiIconInfo() {
> 			super();
> 		}
> 
> 		public int getMaxIcons() {
> 			return -1;
> 		}
> 
104a326,326
> 		 * @param i
105,105c327,327
< 		 * @param i the index to retrieve the icon of
---
> 		 *            the index to retrieve the icon of
122,122c344,344
< 			if (i >= icons.size())
---
> 			int size = icons.size();
122a345,345
> 			if (i >= size) {
123,123d344
< 			{
124,124c346,346
< 				for (int j=icons.size(); j<i; j++)
---
> 				for (int j = size; j < i; j++)
128,128d349
< 			}
129,129c350,350
< 			else
---
> 			} else
134a356,356
> 		 * 
136,136c358,358
< 		 * @return the <code>Dimension</code> that is the size of the icon at the given index.
---
> 		 * @return the <code>Dimension</code> that is the size of the icon at
136a359,359
> 		 *         the given index.
138,138c361,361
< 		public Dimension getIconSize(int i) {
---
> 		public Dimension getIconSize(IMapMode mapMode, int i) {
142,142c365,365
< 				return new Dimension(MapModeUtil.getMapMode(WrapLabel.this).DPtoLP(imgBounds.width), 
---
> 				return new Dimension(mapMode.DPtoLP(imgBounds.width), mapMode
143,143c366,366
< 									MapModeUtil.getMapMode(WrapLabel.this).DPtoLP(imgBounds.height));
---
> 					.DPtoLP(imgBounds.height));
156a380,380
> 		 *         the icons.
156,156c379,379
< 		 * @return the <code>Dimension</code> that is the total size of all the icons.
---
> 		 * @return the <code>Dimension</code> that is the total size of all
158,158c382,382
< 		public Dimension getTotalIconSize() {
---
> 		public Dimension getTotalIconSize(IMapMode mapMode) {
160a385,388
> 			int iconNum = getNumberofIcons();
> 			if (iconNum == 0) {
> 				return totalIconSize = EMPTY_DIMENSION;
> 			}
162,162c390,390
< 			totalIconSize = new Dimension(0, 0);
---
> 			totalIconSize = new Dimension();
162a391,391
> 			for (int i = 0; i < iconNum; i++) {
163,164d390
< 			
< 			for (int i = 0; i < getNumberofIcons(); i++) {
165,165c392,392
< 				Dimension iconSize = getIconSize(i);
---
> 				Dimension iconSize = getIconSize(mapMode, i);
166,166d392
< 				if (iconSize != null) {
170a134,134
> 
171,171d133
< 			}
183a409,416
> 	private IconInfo iconInfo;
> 
> 	/** the cached hint used to calculate text size */	
> 	private int cachedTextSizeHint_width;
> 
> 	private int cachedTextSizeHint_height;
> 	
> 	
184,184d408
< 	private IconInfo iconInfo = null;
192a426,430
> 		setAlignmentFlags(CENTER, FLAG_TEXT_ALIGN);
> 		setAlignmentFlags(CENTER, FLAG_ICON_ALIGN);
> 		setAlignmentFlags(CENTER, FLAG_LABEL_ALIGN);
> 		setAlignmentFlags(LEFT, FLAG_WRAP_ALIGN);
> 		setPlacementFlags(EAST, FLAG_TEXT_PLACEMENT);
193,197d425
< 		setTextAlignment(CENTER);
< 		setIconAlignment(CENTER);
< 		setLabelAlignment(CENTER);
< 		setTextWrapAlignment(LEFT);
< 		setTextPlacement(EAST);
206a440,444
> 		if (s != null) {
> 			text = s;
> 		} else {
> 			text = "";//$NON-NLS-1$
> 		}
207,207d439
< 		setText(s);
217a455,456
> 		text = "";//$NON-NLS-1$
> 		iconInfo = new SingleIconInfo(i);
218,218d454
< 		setIcon(i);
229a468,498
> 		if (s != null) {
> 			text = s;
> 		} else {
> 			text = "";//$NON-NLS-1$
> 		}
> 		iconInfo = new SingleIconInfo(i);
> 	}
> 	
> 	/**
> 	 * @return <code>IMapMode</code> used by this figure.
> 	 *         <code>IMapMode</code> that allows for the coordinate mapping
> 	 *         from device to logical units.
> 	 */
> 	private IMapMode getMapMode() {
> 		return (IMapMode) getMapModeConstants().mapModeRef.get();
> 	}
> 
> 	private MapModeConstants getMapModeConstants() {
> 		if (mapModeConstants == null) {
> 			IMapMode mapMode = MapModeUtil.getMapMode(this);
> 			while (mapMode instanceof IMapModeHolder) {
> 				mapMode = ((IMapModeHolder) mapMode).getMapMode();
> 			}
> 			mapModeConstants = (MapModeConstants) mapModeConstantsMap
> 				.get(mapMode);
> 			if (mapModeConstants == null) {
> 				mapModeConstants = new MapModeConstants(mapMode);
> 				mapModeConstantsMap.put(mapMode, mapModeConstants);
> 			}
> 		}
> 		return mapModeConstants;
230,231d467
< 		setText(s);
< 		setIcon(i);
235,235d501
< 		Insets insets = getInsets();
238,238c504,504
< 				loc.y = insets.top;
---
> 				loc.y = getInsets().top;
241,241c507,507
< 				loc.y = bounds.height - size.height - insets.bottom;
---
> 				loc.y = bounds.height - size.height - getInsets().bottom;
249,249d514
< 		Insets insets = getInsets();
252,252c517,517
< 				loc.x = insets.left;
---
> 				loc.x = getInsets().left;
255,255c520,520
< 				loc.x = bounds.width - size.width - insets.right;
---
> 				loc.x = bounds.width - size.width - getInsets().right;
261a527,527
> 	private void calculateAlignment(Dimension iconSize, int textPlacement) {
262,263d526
< 	private void calculateAlignment() {
< 		Dimension iconSize = getTotalIconSize();
264,264c528,528
< 		switch (getTextPlacement()) {
---
> 		switch (textPlacement) {
287a625,626
> 	private void calculatePlacement(Dimension iconSize, int textPlacement) {
> 		int gap = (getText().length() == 0 || (iconSize.width == 0 && iconSize.height == 0)) ? 0
288,288c627,627
< 		int gap = getIconTextGap();
---
> 			: getIconTextGap();
289,291d627
< 		if (!hasIcons() || getText().equals("")) //$NON-NLS-1$
< 			gap = 0;
< 		Dimension d = new Dimension(0, 0);
292a553,562
> 		boolean isEmpty = (iconSize.width == 0 && iconSize.height == 0);
> 		int len = getText().length();
> 		if (len == 0 && isEmpty) {
> 			return new Dimension(txtSize.width, txtSize.height);
> 		}
> 		int gap = (len == 0 || isEmpty) ? 0
> 			: getIconTextGap();
> 		int placement = getTextPlacement();
> 		if (placement == WEST || placement == EAST) {
> 			return new Dimension(iconSize.width + gap + txtSize.width, Math
293,294d552
< 		if (getTextPlacement() == WEST || getTextPlacement() == EAST) {
< 			d.width = iconSize.width + gap + txtSize.width;
295,295c563,563
< 			d.height = Math.max(iconSize.height, txtSize.height);
---
> 				.max(iconSize.height, txtSize.height));
296a565,565
> 			return new Dimension(Math.max(iconSize.width, txtSize.width),
297,297d564
< 			d.width = Math.max(iconSize.width, txtSize.width);
298,298c566,566
< 			d.height = iconSize.height + gap + txtSize.height;
---
> 				iconSize.height + gap + txtSize.height);
299a1705,1707
> 			IMapMode mapMode = getMapMode();
> 			d.width = mapMode.DPtoLP(d.width);
> 			d.height = fontHeight * new StringTokenizer(s, "\n").countTokens();//$NON-NLS-1$
300,300c1708,1708
< 		return d;
---
> 			return d;			
305a573,584
> 		Dimension iconSize = getTotalIconSize();
> 		int textPlacement = getTextPlacement();
> 		calculatePlacement(iconSize, textPlacement);
> 		calculateAlignment(iconSize, textPlacement);
> 		Rectangle r = getBounds();
> 		Dimension ps = getPreferredSize(r.width, r.height);
> 		int w = (r.width - ps.width)
> 			+ (getTextSize().width - getSubStringTextSize().width);
> 		int h = r.height - ps.height;
> 		if (w == 0 && h == 0) {
> 			return;
> 		}
306a586,586
> 		Dimension offset = new Dimension(w, h);
307,311d585
< 		calculatePlacement();
< 		calculateAlignment();
< 		Dimension offset = getSize().getDifference(
< 			getPreferredSize(getSize().width, getSize().height));
< 		offset.width += getTextSize().width - getSubStringTextSize().width;
335,335c610,610
< 		switch (getTextPlacement()) {
---
> 		switch (textPlacement) {
350,353d624
< 	private void calculatePlacement() {
< 		int gap = getIconTextGap();
< 		if (!hasIcons() || text.equals("")) //$NON-NLS-1$
< 			gap = 0;
354a629,629
> 		switch (textPlacement) {
355,357d628
< 		Dimension iconSize = getTotalIconSize();
< 		
< 		switch (getTextPlacement()) {
376,376c136,136
< 
---
> 
387,387d657
< 		return getTextExtents(getSubStringText(), getFont()); 
401a674,674
> 		Font f = getFont();
402,402c675,675
< 		return getTextExtents(getWrappedText(wHint, hHint), getFont());
---
> 		return getTextExtents(getWrappedText(wHint, hHint), f,getMapMode().DPtoLP(FigureUtilities.getFontMetrics(f).getHeight()));
436a710,710
> 		return (getNumberofIcons() > 0);
437,437d709
< 		return !Dimension.SINGLETON.equals(getTotalIconSize());
480a754,754
> 		return getMapModeConstants().nDPtoLP_3;
481,481d753
< 		return MapModeUtil.getMapMode(this).DPtoLP(3);
490a764,765
> 		LayoutManager layoutManager = getLayoutManager();
> 		if (layoutManager != null)
491,491d763
< 		if (getLayoutManager() != null)
492a767,769
> 		Font f = getFont();
> 		Dimension d = getEllipseTextSize().getIntersected(
> 			getTextExtents(getText(), f, getMapMode().DPtoLP(FigureUtilities.getFontMetrics(f).getHeight())));		
492,492c766,766
< 			minSize.setSize(getLayoutManager().getMinimumSize(this, w, h));
---
> 			minSize.setSize(layoutManager.getMinimumSize(this, w, h));
494,495d770
< 		Dimension d = getTextExtents(getEllipse(), getFont()).intersect(
< 			getTextExtents(getText(), getFont()));
508,508c783,783
< 		if (prefSize == null || wHint != cachedPrefSizeHint.width || hHint != cachedPrefSizeHint.height) {
---
> 		if (prefSize == null || wHint != cachedPrefSizeHint_width || hHint != cachedPrefSizeHint_height) {
511a787,788
> 			LayoutManager layoutManager = getLayoutManager();
> 			if (layoutManager != null) {
512,512d786
< 			if (getLayoutManager() != null)
513,513c789,789
< 				prefSize.union(getLayoutManager().getPreferredSize(this, wHint,
---
> 				prefSize.union(layoutManager.getPreferredSize(this, wHint,
514a791,791
> 			}
515a793,794
> 			cachedPrefSizeHint_width = wHint;
> 			cachedPrefSizeHint_height = hHint;
516,517d792
< 			cachedPrefSizeHint.width = wHint;
< 			cachedPrefSizeHint.height= hHint;
540a818,824
> 		String theText = getText();
> 		int textLen = theText.length();
> 		if (textLen == 0) {
> 			return subStringText = "";//$NON-NLS-1$;;
> 		}
> 		Dimension size = getSize();
> 		Dimension shrink = getPreferredSize(size.width, size.height).getDifference(size);
541,541d817
< 		Dimension shrink = getPreferredSize(getSize().width, getSize().height).getDifference(getSize());
543a827,830
> 		if (effectiveSize.height == 0) {
> 			return subStringText = "";//$NON-NLS-1$;
> 		}
> 		
544a832,835
> 		FontMetrics metrics = FigureUtilities.getFontMetrics(f);
> 		IMapMode mm = getMapMode();
> 		int fontHeight = mm.DPtoLP(metrics.getHeight());
> 		int charAverageWidth = mm.DPtoLP(metrics.getAverageCharWidth());
545,545c902,902
< 		int fontHeight = MapModeUtil.getMapMode(this).DPtoLP(FigureUtilities.getFontMetrics(f).getHeight());
---
> 		int fontHeight = getMapMode().DPtoLP(FigureUtilities.getFontMetrics(f).getHeight());
546a837,839
> 		if (maxLines == 0) {
> 			return subStringText = "";//$NON-NLS-1$
> 		}
549,549c912,912
< 		StringBuffer remainingText = new StringBuffer(getText());
---
> 		StringBuffer remainingText = new StringBuffer(theText);
550,550d912
< 		int i = 0, j = 0;
553,553c849,849
< 			i = getLineWrapPosition(remainingText.toString(), f, effectiveSize.width);
---
> 			i = getLineWrapPosition(remainingText.toString(), f, effectiveSizeWidth, fontHeight);
556,556c852,852
< 				accumlatedText.append("\n"); //$NON-NLS-1$
---
> 				accumlatedText.append('\n');
558a844,847
> 		int effectiveSizeWidth = effectiveSize.width;
> 		int widthHint = Math.max(effectiveSizeWidth
> 			- getEllipseTextSize().width, 0);
> 		int i = 0, j = 0;
558a855,855
> 				i = getLargestSubstringConfinedTo(remainingText.toString(), f, widthHint, fontHeight, charAverageWidth);
559,560d843
< 				int dotsWidth = getTextExtents(getEllipse(), f).width;
< 				i = getLargestSubstringConfinedTo(remainingText.toString(), f, Math.max(effectiveSize.width - dotsWidth, 0));
569a865,867
> 	
> 	
> 	
578a877,878
> 		String theText = getText();		
> 		if (wHint == -1 || theText.length() == 0 || !isTextWrapped())
579,579d876
< 		if (!isTextWrapped() || wHint == -1)
580,580c879,879
< 			return getText();
---
> 			return theText;
582a882,882
> 		if (!(iconSize.width == 0 && iconSize.height == 0)) {
582a1178,1178
> 			if (isUnderlined)
583,583d1177
< 		if (hasIcons()) {
596a896,900
> 		
> 		if ((hHint == 0)||(wHint == 0)) {
> 			return "";//$NON-NLS-1$;
> 		}
> 		
599a658,658
> 		Font f = getFont();
600,600c659,659
< 			int fontHeight = MapModeUtil.getMapMode(this).DPtoLP(FigureUtilities.getFontMetrics(f).getHeight());
---
> 		return getTextExtents(getSubStringText(), f, getMapMode().DPtoLP(FigureUtilities.getFontMetrics(f).getHeight())); 
601a906,908
> 			if (maxLines == 0) {
> 				return "";//$NON-NLS-1$;;
> 			}
605,605c842,842
< 		StringBuffer remainingText = new StringBuffer(getText());
---
> 		StringBuffer remainingText = new StringBuffer(theText);
609,609c916,916
< 			if ((i = getLineWrapPosition(remainingText.toString(), f, wHint)) == 0)
---
> 			if ((i = getLineWrapPosition(remainingText.toString(), f, wHint, fontHeight)) == 0)
613,613c920,920
< 				accumlatedText.append("\n"); //$NON-NLS-1$
---
> 				accumlatedText.append('\n');
632a940,955
> 	 * Returns the size of the String constant "..." the ellipse based on
> 	 * the currently used Map mode
> 	 * size.
> 	 * 
> 	 * @return the size of ellipse text
> 	 * 
> 	 */
> 	private Dimension getEllipseTextSize() {
> 		if (ellipseTextSize == null) {
> 			ellipseTextSize = getMapModeConstants().getEllipseTextSize(
> 				getFont());
> 		}
> 		return ellipseTextSize;
> 	}
> 
> 	/**
715,715c1038,1038
< 		if (textSize == null || wHint != cachedTextSizeHint.width || hHint != cachedTextSizeHint.height) {
---
> 		if (textSize == null || wHint != cachedTextSizeHint_width || hHint != cachedTextSizeHint_height) {
716a1040,1041
> 			cachedTextSizeHint_width = wHint;
> 			cachedTextSizeHint_height= hHint;
717,718d1039
< 			cachedTextSizeHint.width = wHint;
< 			cachedTextSizeHint.height= hHint;
726a1050,1051
> 		Rectangle r = getBounds();
> 		return getTextSize(r.width, r.height);		
727,727d1049
< 		return getTextSize(getSize().width, getSize().height);
736a1061,1061
> 		ellipseTextSize = null;
781a1107,1108
> 		String subString = getSubStringText();
> 		if (subString.length() > 0) {
785,785c1112,1112
< 			paintText(graphics);
---
> 				paintText(graphics, subString);
788a1115,1115
> 			} else {
789,789c1116,1116
< 		paintText(graphics);
---
> 				paintText(graphics, subString);
789a1117,1117
> 			}
796a1126,1126
> 	 * @param subString The string to draw
798,798c1128,1128
< 	private void paintText(Graphics graphics) {
---
> 	private void paintText(Graphics graphics, String subString) {		
799,799d1128
< 		String subString = getSubStringText();
801,801c138,138
< 
---
> 
802a1131,1134
> 		FontMetrics fontMetrics = FigureUtilities.getFontMetrics(f);
> 		int fontHeight = getMapMode().DPtoLP(fontMetrics.getHeight());
> 		int fontHeightHalf = fontHeight / 2;
> 		int textWidth = getTextExtents(subString, f, fontHeight).width;
803,805d1130
< 		int fontHeight = MapModeUtil.getMapMode(this).DPtoLP(FigureUtilities.getFontMetrics(f)
< 			.getHeight());
< 		int textWidth = getTextExtents(subString, f).width;
806a1136,1143
> 		int y = p.y;
> 		int x = p.x;
> 		final int wrapAlignment = getTextWrapAlignment();
> 		boolean isUnderlined = isTextUnderlined();
> 		boolean isStrikedThrough = isTextStrikedThrough();
> 		Rectangle clipRect = new Rectangle();
> 		graphics.getClip(clipRect);
> 		int clipRectTopRight_x = clipRect.getTopRight().x;
806,806c1135,1135
< 		int y = getTextLocation().y;
---
> 		Point p = getTextLocation();
807,807d1135
< 		
809a1146,1146
> 		if (0 == fontMetrics.getLeading()) {
810,810d1145
< 		if (0 == FigureUtilities.getFontMetrics(f).getLeading()) {
811,811c1147,1147
< 			int offset = MapModeUtil.getMapMode(this).DPtoLP(2); // 2 is the leading area for default English
---
> 			y +=  getMapModeConstants().nDPtoLP_2; // 2 is the leading area for default English			
812,812d1147
< 			y += offset;
817,817c1152,1152
< 			int tokenWidth = getTextExtents(token, f).width;
---
> 			int tokenWidth = getTextExtents(token, f, fontHeight).width;
817a1153,1153
> 			
818,818d1152
< 			int x = getTextLocation().x;
819,819c1154,1154
< 			switch (getTextWrapAlignment()) {
---
> 			switch (wrapAlignment) {
830,831d1164
< 			Rectangle clipRect = new Rectangle();
< 			graphics.getClip(clipRect);
832a1166,1166
> 			
833,833c1167,1167
< 			if (tokenWidth + x <= clipRect.getTopRight().x) {
---
> 			if (tokenWidth + x <= clipRectTopRight_x) {
844,844d1177
< 			if (isTextUnderlined())
845a1180,1180
> 			if (isStrikedThrough)
846,846d1179
< 			if (isTextStrikedThrough())
847,847c1181,1181
< 				graphics.drawLine(x, y - fontHeight / 2 + 1, x + tokenWidth, y
---
> 				graphics.drawLine(x, y - fontHeightHalf + 1, x + tokenWidth, y
848,848c1182,1182
< 					- fontHeight / 2 + 1);
---
> 					- fontHeightHalf + 1);
888a1223,1225
> 			if (index == 0) {
> 				iconInfo = getMapModeConstants().getSingleIconInfo(image);
> 			} else {
888,888c1222,1222
< 		if (iconInfo == null)
---
> 		if (iconInfo == null) {
889,889c1226,1226
< 			iconInfo = new IconInfo();
---
> 				iconInfo = new MultiIconInfo();
889a1227,1227
> 				iconInfo.setIcon(image, index);
890,890c1228,1228
< 			
---
> 			}
890a1229,1230
> 			revalidate();
> 			repaint();// Call repaint, in case the image dimensions are the same.           
891,891c1231,1231
< 		if (iconInfo.getIcon(index) == image)
---
> 		} else if (iconInfo.getIcon(index) != image) {
891a1232,1236
> 			if (iconInfo.getMaxIcons() == 1) {
> 				if (index == 0) {
> 					iconInfo = getMapModeConstants().getSingleIconInfo(image);
> 					revalidate();
> 					repaint();// Call repaint, in case the image dimensions are the same.
892a140,140
> 
892a1238,1242
> 				}
> 				IconInfo oldIconInfo = iconInfo;
> 				iconInfo = new MultiIconInfo();
> 				iconInfo.setIcon(oldIconInfo.getIcon(0), 0);
> 			}
893,893d139
< 		
897a1247,1247
> 	}
926,926c1276,1276
< 		return iconInfo.getIconSize(index);
---
> 		return iconInfo.getIconSize(getMapMode(), index);
947,947c1297,1297
< 		return iconInfo.getTotalIconSize();
---
> 		return iconInfo.getTotalIconSize(getMapMode());
1096a145,145
> 
1096a1447,1448
> 		 */
> 	}
1097,1097d144
< 		 */}
1257a1609,1610
> 		int expansion = getMapModeConstants().nDPtoLP_2;
> 		figBounds.resize(expansion, expansion);
1258,1260d1608
< 		figBounds
< 			.expand(new Insets(MapModeUtil.getMapMode(this).DPtoLP(2), 
< 							MapModeUtil.getMapMode(this).DPtoLP(2), 0, 0));
1272a1623,1623
> 	 * @param fontHeight int <b>mapped already to logical units</b>.
1274a1626,1628
> 		if (getTextExtents(s, f, fontHeight).width <= w) {
> 			return s.length();
> 		}
1274,1274c1625,1625
< 	private int getLineWrapPosition(String s, Font f, int w) {
---
> 	private int getLineWrapPosition(String s, Font f, int w, int fontHeight) {
1283,1283c1637,1637
< 		if (getTextExtents(s.substring(start, end), f).width > w) {
---
> 		if (getTextExtents(s.substring(start, end), f, fontHeight).width > w) {
1293,1293c1647,1647
< 			&& getTextExtents(s.substring(start, end), f).width <= w);
---
> 			&& getTextExtents(s.substring(start, end), f, fontHeight).width <= w);
1304a1659,1660
> 	 * @param fontHeight int <b>mapped already to logical units</b>.
> 	 * @param charAverageWidth int <b>mapped already to logical units</b>.
1307a1664,1666
> 	private int getLargestSubstringConfinedTo(String s, Font f, int w, int fontHeight, int charAverageWidth) {		
> 		float avg = charAverageWidth;
> 		int min = 0;
1308,1312d1663
< 	private int getLargestSubstringConfinedTo(String s, Font f, int w) {
< 		int min, max;
< 		float avg = MapModeUtil.getMapMode(this).DPtoLP(FigureUtilities.getFontMetrics(f)
< 			.getAverageCharWidth());
< 		min = 0;
1313,1313c1667,1667
< 		max = s.length() + 1;
---
> 		int max = s.length() + 1;
1329,1329c1683,1683
< 			guessSize = getTextExtents(s.substring(0, guess), f).width;
---
> 			guessSize = getTextExtents(s.substring(0, guess), f, fontHeight).width;
1344,1344d1697
< 	private Dimension getTextExtents(String s, Font f) {
1345a1698,1701
> 	private Dimension getTextExtents(String s, Font f, int fontHeight) {
> 		if (s.length() == 0) {
> 			return getMapModeConstants().dimension_nDPtoLP_0;
> 		} else {
1346,1346c1702,1702
<         // height should be set using the font height and the number of lines
---
> 			// height should be set using the font height and the number of
1347,1347c1703,1703
<         // in the string 
---
> 			// lines in the string			
1348,1351d1703
<         int lineCount = getLineCount(s);
<         d.height = FigureUtilities.getFontMetrics(f).getHeight()*lineCount;
<      	return new Dimension(MapModeUtil.getMapMode(this).DPtoLP(d.width), 
< 							MapModeUtil.getMapMode(this).DPtoLP(d.height));
1353,1356d1709
< 
<     private int getLineCount(String s) {
<         StringTokenizer tokenizer = new StringTokenizer(s, "\n"); //$NON-NLS-1$
<         return tokenizer.countTokens();
1358a1712,1713
>     
> 	
