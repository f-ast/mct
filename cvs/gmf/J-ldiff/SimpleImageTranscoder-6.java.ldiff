13a14,15
> import java.awt.RenderingHints;
> import java.awt.Shape;
18a21,23
> import org.apache.batik.gvt.renderer.ImageRenderer;
> import org.apache.batik.gvt.renderer.StaticRenderer;
> import org.apache.batik.transcoder.SVGAbstractTranscoder;
25,25c30,30
< public class SimpleImageTranscoder extends ImageTranscoder {
---
> public class SimpleImageTranscoder extends SVGAbstractTranscoder {
30a36,36
> 	private RenderingHints renderingHints;
33a40,40
> 		renderingHints = new RenderingHints(null);
39a47,50
> 	public final RenderingHints getRenderingHints() {
> 		return renderingHints;
> 	}
> 
135a147,163
> 	protected void transcode(Document document, String uri, TranscoderOutput output) throws TranscoderException {
> 		super.transcode(document, uri, output);
> 		int w = (int) (width + 0.5);
> 		int h = (int) (height + 0.5);
> 		ImageRenderer renderer = createImageRenderer();
> 		renderer.updateOffScreen(w, h);
> 		// curTxf.translate(0.5, 0.5);
> 		renderer.setTransform(curTxf);
> 		renderer.setTree(this.root);
> 		this.root = null; // We're done with it...
> 		try {
> 			Shape raoi = new Rectangle2D.Float(0, 0, width, height);
> 			// Warning: the renderer's AOI must be in user space
> 			renderer.repaint(curTxf.createInverse().createTransformedShape(raoi));
> 			bufferedImage = renderer.getOffScreen();
> 		} catch (Exception ex) {
> 			throw new TranscoderException(ex);
136,136c173,173
< 	public final BufferedImage getBufferedImage() {
---
> 	public final BufferedImage getBufferedImage() {
137,137c174,174
< 		if (bufferedImage == null) {
---
> 		if (bufferedImage == null) {
138a176,177
> 		}
> 		return bufferedImage;
138,138c175,175
< 			updateImage();
---
> 			updateImage();
140,140d164
< 		return bufferedImage;
142a167,170
> 	protected ImageRenderer createImageRenderer() {
> 		StaticRenderer renderer = new StaticRenderer();
> 		renderer.getRenderingHints().add(renderingHints);
> 		return renderer;
143,145d166
< 	@Override
< 	public final BufferedImage createImage(int width, int height) {
< 		return new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
148,150d172
< 	@Override
< 	public final void writeImage(BufferedImage img, TranscoderOutput output) throws TranscoderException {
< 		bufferedImage = img;
