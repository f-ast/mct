36,36d35
< import org.eclipse.emf.ecore.resource.ResourceSet;
38,38d36
< import org.eclipse.gmf.gmfgraph.Canvas;
45,45d42
< import org.eclipse.gmf.internal.graphdef.codegen.StandaloneGalleryConverter;
114,115d110
< 		FigureGallery[] figures = findFigures(input);
< 		assert(figures.length > 0);
122a118,120
> 		final ConverterOptions options = newConverterOptions();
> 		final ConverterOutcome converterOutcome = new ConverterOutcome(options, new Resource[] {input});
> 		assert converterOutcome.checkInputAgainstOptions().isOK();
123,123c121,121
< 		StandaloneGenerator generator = new StandaloneGenerator(figures, config, fqnSwitch);
---
> 		StandaloneGenerator generator = new StandaloneGenerator(converterOutcome.getProcessor(), config, fqnSwitch);
132a131,134
> 			IStatus s = converterOutcome.createResources(new ResourceSetImpl(), URI.createFileURI(myOutputGalleryPathOption.getText()), URI.createFileURI(myOutputDiagramElementsPathOption.getText()), config);
> 			if (s.getSeverity() == IStatus.ERROR) {
> 				throw new CoreException(s);
> 			}
133,133d130
< 			createSeparateResources(generator.getGenerationInfo(), input);
147a149,154
> 	private ConverterOptions newConverterOptions() {
> 		final ConverterOptions options = new ConverterOptions();
> 		options.needMirroredGalleries = shouldGenerate(myOutputGalleryPathOption);
> 		options.needMirroredCanvas = shouldGenerate(myOutputDiagramElementsPathOption);
> 		options.separateMirrorFiles = options.needMirroredCanvas && myOutputGalleryPathOption.getText().equals(myOutputDiagramElementsPathOption.getText());
> 		return options;
148,163d148
< 	private void createSeparateResources(StandaloneGenerator.GenerationInfo info, Resource input) throws CoreException {
< 		if (shouldGenerate(myOutputGalleryPathOption)){
< 			String figureGalleryPath = myOutputGalleryPathOption.getText();
< 			ResourceSet separateResourceSet = new ResourceSetImpl();
< 			StandaloneGalleryConverter converter = new StandaloneGalleryConverter(info);
< 			
< 			Resource galleryResource = separateResourceSet.createResource(URI.createFileURI(figureGalleryPath));
< 			galleryResource.getContents().add(converter.convertFigureGallery());
< 			
< 			Resource diagramElementsResource = null;
< 			if (shouldGenerate(myOutputDiagramElementsPathOption)){
< 				Canvas mirror = converter.mirrorDiagramElements(Collections.singleton(input));
< 				if (mirror != null){
< 					diagramElementsResource = separateResourceSet.createResource(URI.createFileURI(myOutputDiagramElementsPathOption.getText()));
< 					diagramElementsResource.getContents().add(mirror);
< 				}
165a157,157
> 	private static boolean shouldGenerate(FileNameOption option){
166,177d156
< 			try {
< 				galleryResource.save(null);
< 				if (diagramElementsResource != null){
< 					diagramElementsResource.save(null);
< 				}
< 			} catch (IOException e) {
< 				throw new CoreException(new Status(IStatus.ERROR, MY_PLUGIN_ID, 0, e.getMessage(), e));
< 			}
< 		}
< 	}
< 	
< 	private boolean shouldGenerate(FileNameOption option){
201,204d180
< 	private FigureGallery[] findFigures(Resource resource) {
< 		return new FigureFinder().findFigures(resource);
< 	}
< 	
