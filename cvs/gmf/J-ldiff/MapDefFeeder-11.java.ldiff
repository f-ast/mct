15a16,16
> import java.util.HashSet;
17a19,19
> import java.util.Set;
19,19c24,24
< import org.eclipse.emf.common.util.BasicEList;
---
> import org.eclipse.emf.ecore.EObject;
48a51,51
> 	private List<EClass> myNodeCandidates;
49,49d50
< 	private List/*EClass*/ myNodeCandidates;
50,50c52,52
< 	private List/*EObject*/ myLinkCandidates;
---
> 	private List<EObject> myLinkCandidates;
62a65,65
> 	@SuppressWarnings("unchecked")
90,90c93,93
< 		return new CompositeStrategy(new Strategy[] {
---
> 		return new CompositeStrategy(new AccessibleClassNodeStrategy(), new LeafNodeStrategy());
91,93d93
< 				new AccessibleClassNodeStrategy(),
< 				new LeafNodeStrategy(),
< 		});
102a103,104
> 			public void filter(Collection<EObject> soFar, Hierarchy hierarchy) {
> 				Set<EClass> linkCandidates = new HashSet<EClass>(hierarchy.getAccessibleLinkClasses());
103,104d102
< 			public void filter(Collection soFar, Hierarchy hierarchy) {
< 				List linkCandidates = new UniqueEList(hierarchy.getAccessibleLinkClasses());
105,105c105,105
< 				for (Iterator iter = linkCandidates.iterator(); iter.hasNext();) {
---
> 				for (Iterator<EClass> iter = linkCandidates.iterator(); iter.hasNext();) {
106,106c106,106
< 					EClass element = (EClass) iter.next();
---
> 					EClass element = iter.next();
117,117c117,117
< 	private List/*<NodeReference>*/ nodesFrom(List candidates) {
---
> 	private List<NodeReference> nodesFrom(List<EClass> candidates) {
118,118c118,118
< 		BasicEList rv = new BasicEList(candidates.size());
---
> 		ArrayList<NodeReference> rv = new ArrayList<NodeReference>(candidates.size());
134,134c134,134
< 	private List/*<LinkMapping>*/ linksFrom(List candidates) {
---
> 	private List<LinkMapping> linksFrom(List<EObject> candidates) {
135,135c135,135
< 		BasicEList rv = new BasicEList(candidates.size());
---
> 		ArrayList<LinkMapping> rv = new ArrayList<LinkMapping>(candidates.size());
154a155,155
> 	@SuppressWarnings("unchecked")
170,170c171,171
< 		return (NodeReference[]) nodesFrom(myNodeCandidates).toArray(new NodeReference[0]);
---
> 		return nodesFrom(myNodeCandidates).toArray(new NodeReference[0]);
174,174c175,175
< 		return (LinkMapping[]) linksFrom(myLinkCandidates).toArray(new LinkMapping[0]);
---
> 		return linksFrom(myLinkCandidates).toArray(new LinkMapping[0]);
