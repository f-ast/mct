13a14,14
> import java.awt.BasicStroke;
31a33,33
> import javax.print.attribute.standard.Chromaticity;
38a41,41
> import javax.print.attribute.standard.PrintQuality;
40a44,44
> import javax.print.attribute.standard.Sides;
64a69,70
> import org.eclipse.gmf.runtime.diagram.ui.printing.render.model.PrintOptions;
> import org.eclipse.gmf.runtime.diagram.ui.printing.render.util.PrintHelper;
72,72c74,74
< import org.eclipse.gmf.runtime.draw2d.ui.render.internal.graphics.RenderedScaledGraphics;
---
> import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScaledGraphics;
94a104,104
> 	// The print service used during printing.
95a106,107
> 	
> 	// Page information that is collected up front and used during the async printing calls.
96a110,110
> 	// The print helper contains page information.
97,97c111,111
< 	private IPrintHelper printHelper;
---
> 	private IPrintHelper printHelper;
353a367,373
> 									.getHeight())) {
> 				/*
> 				 * (non-Javadoc)
> 				 * @see org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.graphics.GraphicsToGraphics2DAdaptor#setLineWidth(int)
> 				 */
> 				public void setLineWidth(int width) {
> 					super.setLineWidth(width);
354,354d366
< 									.getHeight()));
355a375,375
> 					BasicStroke scaledStroke = getStroke();
356a392,392
> 			graphics.scale(AWT_DPI_CONST / display_dpi.x);
356,356c391,391
< 			graphics = createMapModeGraphics(createPrinterGraphics(swtGraphics));
---
> 			graphics = createMapModeGraphics(createPrinterGraphics(swtGraphics));
357a377,378
> 					// Make a special case for line thickness to take the printer
> 					// resolution into account.
357a100,100
> 	// A constant that takes into account screen display DPI and the graphic DPI
358,358d99
< 			// Take into account screen display DPI and the graphic DPI
359,359c101,101
< 			// 72.0 DPI is an AWT constant @see java.awt.Graphics2D
---
> 	// 72.0 DPI is an AWT constant @see java.awt.Graphics2D
359a102,102
> 	private static double AWT_DPI_CONST = 72.0;
360a380,389
> 					scaledStroke = new BasicStroke(
> 							(float) (width * AWT_DPI_CONST / 100), 
> 							scaledStroke.getEndCap(),
> 							scaledStroke.getLineJoin(), 
> 							scaledStroke.getMiterLimit(), 
> 							scaledStroke.getDashArray(), 0);
> 
> 					getGraphics2D().setStroke(scaledStroke);
> 				}
> 			};
361,361d379
< 			graphics.scale(72.0 / display_dpi.x);
364,365d393
< 		} catch (Exception e) {
< 			System.out.println(e);
381,381d409
< 	
382,382c410,410
< 	protected RenderedScaledGraphics createPrinterGraphics(Graphics theGraphics) {
---
> 	protected ScaledGraphics createPrinterGraphics(Graphics theGraphics) {
383,383c411,411
< 		return new RenderedScaledGraphics(theGraphics);
---
> 		return new ScaledGraphics(theGraphics);
386,386c394,394
< 	
---
> 			
400a428,429
> 		PrintOptions advancedOptions = ((PrintHelper) (printHelper)).getPrintOptions();
> 
430a460,480
> 		if (advancedOptions.isQualityLow()) {
> 			printRequestAttributeSet.add(PrintQuality.DRAFT);
> 		} else if (advancedOptions.isQualityMed()) {
> 			printRequestAttributeSet.add(PrintQuality.NORMAL);
> 		} else if (advancedOptions.isQualityHigh()) {
> 			printRequestAttributeSet.add(PrintQuality.HIGH);
> 		}
> 		if (advancedOptions.isSideDuplex()) {
> 			printRequestAttributeSet.add(Sides.DUPLEX);
> 		} else if (advancedOptions.isSideOneSided()) {
> 			printRequestAttributeSet.add(Sides.ONE_SIDED);
> 		} else if (advancedOptions.isSideTumble()) {
> 			printRequestAttributeSet.add(Sides.TUMBLE);
> 		}
> 
> 		if (advancedOptions.isChromaticityColor()) {
> 			printRequestAttributeSet.add(Chromaticity.COLOR);
> 		} else {
> 			printRequestAttributeSet.add(Chromaticity.MONOCHROME);
> 		}
> 
447a498,501
> 		String userJobName = advancedOptions.getJobName();
> 		if (userJobName != null && userJobName.length() > 0) {
> 			jobName = userJobName;
> 		}
