16a17,17
> import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;
30a32,32
>  *   <li>{@link org.eclipse.gmf.codegen.gmfgen.impl.ViewmapImpl#getRequiredPluginIDs <em>Required Plugin IDs</em>}</li>
37a40,49
> 	 * The cached value of the '{@link #getRequiredPluginIDs() <em>Required Plugin IDs</em>}' attribute list.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @see #getRequiredPluginIDs()
> 	 * @generated
> 	 * @ordered
> 	 */
> 	protected EList requiredPluginIDs = null;
> 
> 	/**
69a82,93
> 	public EList getRequiredPluginIDs() {
> 		if (requiredPluginIDs == null) {
> 			requiredPluginIDs = new EDataTypeUniqueEList(String.class, this, GMFGenPackage.VIEWMAP__REQUIRED_PLUGIN_IDS);
> 		}
> 		return requiredPluginIDs;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
113a138,139
> 			case GMFGenPackage.VIEWMAP__REQUIRED_PLUGIN_IDS:
> 				return getRequiredPluginIDs();
128a155,158
> 			case GMFGenPackage.VIEWMAP__REQUIRED_PLUGIN_IDS:
> 				getRequiredPluginIDs().clear();
> 				getRequiredPluginIDs().addAll((Collection)newValue);
> 				return;
142a173,175
> 			case GMFGenPackage.VIEWMAP__REQUIRED_PLUGIN_IDS:
> 				getRequiredPluginIDs().clear();
> 				return;
155a189,190
> 			case GMFGenPackage.VIEWMAP__REQUIRED_PLUGIN_IDS:
> 				return requiredPluginIDs != null && !requiredPluginIDs.isEmpty();
159a195,209
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public String toString() {
> 		if (eIsProxy()) return super.toString();
> 
> 		StringBuffer result = new StringBuffer(super.toString());
> 		result.append(" (requiredPluginIDs: ");
> 		result.append(requiredPluginIDs);
> 		result.append(')');
> 		return result.toString();
> 	}
> 
