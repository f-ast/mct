40,40c40,40
<  * An adapter that maintains itself as an adapter for all contained objects. It
---
>  * An adapter that maintains itself as an adapter for all contained objects.
41,41c41,41
<  * can be installed for an {@link EObject}, a {@link Resource}, or a
---
>  * It can be installed for an {@link EObject}, a {@link Resource}, or a {@link ResourceSet}.
42,42d41
<  * {@link ResourceSet}.
44,44c43,43
<  * This adapter maintain information on inverse references, resource imports,
---
>  * This adapter maintain information on inverse references, resource imports, and resource
45,45c44,44
<  * and resource exports.
---
>  * exports.
58a58,63
> 	 * Flag used to check if the invocations of the setTarget are occuring
> 	 * due to containment change notifications.
> 	 */
> 	private boolean isProcessingNotification = false;
> 	
> 	/**
68,68d72
< 	 * @param resolve
69,69c73,73
< 	 *            flag to determine if the proxies need to be resolved
---
> 	 * @param resolve flag to determine if the proxies need to be resolved
80,80d83
< 	 * @param notification
81,81c84,84
< 	 *            the event notification
---
> 	 * @param notification the event notification
91,91c94,94
< 			if (notification.getFeatureID(Resource.class) == Resource.RESOURCE__IS_LOADED ) {
---
> 			if (notification.getFeatureID(Resource.class) == Resource.RESOURCE__IS_LOADED
92,92c95,95
< 				if ( notification.getNewBooleanValue() ) {
---
> 					&& !notification.getNewBooleanValue()) {
93,94d95
< 					updateImportsAndExports((Resource) notifier);
< 				} else {
97,97d564
< 			}
98,98c565,565
< 
---
> 
104a104,104
> 		if (!(notifier instanceof EObject)
105,105c105,105
< 		if (!(notifier instanceof EObject) || !(feature instanceof EReference)) {
---
> 				|| !(feature instanceof EReference)) {
115a111,111
> 			return;
115,115c110,110
< 			if (reference.isContainment()) {
---
> 		if (reference.isContainment()) {
116,116d110
< 				break;
117,117c112,112
< 			}
---
> 		}
118,118d112
< 
120a120,121
> 					deregisterReference(
> 							((EObject)notification.getNotifier()).eResource(),
121,121d119
< 				deregisterReference(((EObject) notification.getNotifier())
122,122c122,122
< 						.eResource(), oldValue.eResource());
---
> 							oldValue.eResource());
125a126,127
> 					registerReference(
> 							((EObject)notification.getNotifier()).eResource(),
126,126d125
< 				registerReference(((EObject) notification.getNotifier())
127,127c128,128
< 						.eResource(), newValue.eResource());
---
> 							newValue.eResource());
133a135,136
> 					registerReference(
> 							((EObject)notification.getNotifier()).eResource(),
134,135d134
< 				if (!reference.isContainment()) {
< 					registerReference(((EObject) notification.getNotifier())
136,136c137,137
< 							.eResource(), newValue.eResource());
---
> 							newValue.eResource());
137,139d137
< 				} else {
< 					updateImportsAndExports(newValue, true);
< 				}
146a145,146
> 					registerReference(
> 							((EObject)notification.getNotifier()).eResource(),
147,148d144
< 				if (!reference.isContainment()) {
< 					registerReference(((EObject) notification.getNotifier())
149,149c147,147
< 							.eResource(), newValue.eResource());
---
> 							newValue.eResource());
150,152d147
< 				} else {
< 					updateImportsAndExports(newValue, true);
< 				}
158a154,155
> 					deregisterReference(
> 							((EObject)notification.getNotifier()).eResource(),
159,160d153
< 				if (!reference.isContainment()) {
< 					deregisterReference(((EObject) notification.getNotifier())
161,161c156,156
< 							.eResource(), oldValue.eResource());
---
> 							oldValue.eResource());
162,164d156
< 				} else {
< 					updateImportsAndExports(oldValue, false);
< 				}
171a164,165
> 					deregisterReference(
> 							((EObject)notification.getNotifier()).eResource(),
172,173d163
< 				if (!reference.isContainment()) {
< 					deregisterReference(((EObject) notification.getNotifier())
174,174c166,166
< 							.eResource(), oldValue.eResource());
---
> 							oldValue.eResource());
175,177d166
< 				} else {
< 					updateImportsAndExports(oldValue, false);
< 				}
208,208c197,197
< 					resource = ((EObject) notification.getNotifier())
---
> 					resource = ((EObject) notification.getNotifier()).eResource();
209,209d197
< 							.eResource();
247,247c235,235
< 	private void remove(Resource resource, EObject eObject) {
---
> 	protected void remove(Resource resource, EObject eObject) {
248,248c236,236
< 		for (Iterator allContents = EcoreUtil.getAllContents(Collections
---
> 		for (Iterator allContents = EcoreUtil.getAllContents(Collections.singleton(eObject)); allContents.hasNext();) {
249,249d236
< 				.singleton(eObject)); allContents.hasNext();) {
253,253c240,240
< 			EContentsEList.FeatureIterator crossReferences = (EContentsEList.FeatureIterator) next
---
> 		    EContentsEList.FeatureIterator crossReferences =
254,254c241,241
< 					.eCrossReferences().iterator();
---
> 		    	(EContentsEList.FeatureIterator) next.eCrossReferences().iterator();
259,259c246,246
< 					EReference eReference = (EReference) crossReferences
---
> 					EReference eReference = (EReference) crossReferences.feature();
260,260d246
< 							.feature();
275a262,262
> 			for (Iterator iter = getNonNavigableInverseReferencers(next, null, null).iterator(); iter.hasNext();) {
276,277d261
< 			for (Iterator iter = getNonNavigableInverseReferencers(next, null,
< 					null).iterator(); iter.hasNext();) {
278,278c263,263
< 				deregisterReference(((EObject) iter.next()).eResource(),
---
> 				deregisterReference(((EObject)iter.next()).eResource(), resource);
279,279d263
< 						resource);
303,303c287,287
< 					EReference eReference = (EReference) crossReferences
---
> 					EReference eReference = (EReference) crossReferences.feature();
304,304d287
< 							.feature();
329,329d320
< 	 * @param referencer
330,330c321,321
< 	 *            the resource to retrieve imports for
---
> 	 * @param referencer the resource to retrieve imports for
347,347d337
< 	 * @param referenced
348,348c338,338
< 	 *            the resource to retrieve exports for
---
> 	 * @param referenced the resource to retrieve exports for
383,383c373,373
< 	 * Registers a reference updating the imports and exports maps accordingly.
---
> 	 * Registers a reference updating the imports and exports maps
383a374,374
> 	 * accordingly.
385,385d375
< 	 * @param referencer
386,386c376,376
< 	 *            the referencing resource
---
> 	 * @param referencer the referencing resource
387,387d376
< 	 * @param referenced
388,388c377,377
< 	 *            the referenced resouce
---
> 	 * @param referenced the referenced resouce
437a427,428
> 	 * import of the <code>referenced</code> resource by the <code>referencer</code>.
> 	 * This implementation does nothing; subclasses need not call <code>super</code>.
438,440d426
< 	 * import of the <code>referenced</code> resource by the
< 	 * <code>referencer</code>. This implementation does nothing; subclasses
< 	 * need not call <code>super</code>.
441,441c429,429
< 	 * 
---
> 	 * 
442,442d429
< 	 * @param referencer
443,443c430,430
< 	 *            the referencing resource (doing the importing)
---
> 	 * @param referencer the referencing resource (doing the importing)
444,444d430
< 	 * @param referenced
445,445c431,431
< 	 *            the resource that it references
---
> 	 * @param referenced the resource that it references
451a438,440
> 	 * Hook to be implemented by subclasses upon the elimination of an
> 	 * import of the <code>referenced</code> resource by the <code>referencer</code>.
> 	 * This implementation does nothing; subclasses need not call <code>super</code>.
452,455d437
< 	 * Hook to be implemented by subclasses upon the elimination of an import of
< 	 * the <code>referenced</code> resource by the <code>referencer</code>.
< 	 * This implementation does nothing; subclasses need not call
< 	 * <code>super</code>.
456,456c441,441
< 	 * 
---
> 	 * 
457,457d441
< 	 * @param referencer
458,458c442,442
< 	 *            the formerly referencing resource (doing the importing)
---
> 	 * @param referencer the formerly referencing resource (doing the importing)
459,459d442
< 	 * @param referenced
460,460c443,443
< 	 *            the resource that it had referenced
---
> 	 * @param referenced the resource that it had referenced
467a451,452
> 	 * export of the <code>referenced</code> resource to the <code>referencer</code>.
> 	 * This implementation does nothing; subclasses need not call <code>super</code>.
468,470d450
< 	 * export of the <code>referenced</code> resource to the
< 	 * <code>referencer</code>. This implementation does nothing; subclasses
< 	 * need not call <code>super</code>.
471,471c453,453
< 	 * 
---
> 	 * 
472,472d453
< 	 * @param referenced
473,473c454,454
< 	 *            the resource being referenced (doing the exporting)
---
> 	 * @param referenced the resource being referenced (doing the exporting)
474,474d454
< 	 * @param referencer
475,475c455,455
< 	 *            the referencing resource
---
> 	 * @param referencer the referencing resource
481a462,464
> 	 * Hook to be implemented by subclasses upon the elimination of an
> 	 * export of the <code>referenced</code> resource to the <code>referencer</code>.
> 	 * This implementation does nothing; subclasses need not call <code>super</code>.
482,485d461
< 	 * Hook to be implemented by subclasses upon the elimination of an export of
< 	 * the <code>referenced</code> resource to the <code>referencer</code>.
< 	 * This implementation does nothing; subclasses need not call
< 	 * <code>super</code>.
486,486c465,465
< 	 * 
---
> 	 * 
487,487d465
< 	 * @param referenced
488,488c466,466
< 	 *            the resource formerly being referenced (doing the exporting)
---
> 	 * @param referenced the resource formerly being referenced (doing the exporting)
489,489d466
< 	 * @param referencer
490,490c467,467
< 	 *            the formerly referencing resource
---
> 	 * @param referencer the formerly referencing resource
500,500d476
< 	 * @param referencer
501,501c477,477
< 	 *            the referencing resource
---
> 	 * @param referencer the referencing resource
502,502d477
< 	 * @param referenced
503,503c478,478
< 	 *            the referenced resource
---
> 	 * @param referenced the referenced resource
549a296,303
> 			
> 			// need to process containment changes. This will compute references
> 			// from existing EObjects to the added EObjects. This would happen when detached
> 			// EObjects are referenced by the existing EObjects
> 			if (isProcessingNotification) {
> 				for (Iterator iter = getInverseReferencers(eObject, null, null).iterator(); iter.hasNext();) {
> 					registerReference(((EObject)iter.next()).eResource(), resource);
> 				}
550,561d295
< 	 * Updates the imports and exports by walking the contents of the specified
< 	 * resource and finding any referencers to these EObjects. This is for the
< 	 * cross reference adapter to synchronize the imports and exports when
< 	 * resources are loaded after the adapter is already attached
< 	 */
< 	private void updateImportsAndExports(Resource resource) {
< 		for (Iterator i = EcoreUtil.getAllContents(resource, resolve()); i
< 				.hasNext();) {
< 			EObject next = (EObject) i.next();
< 			for (Iterator iter = getInverseReferencers(next, null, null)
< 					.iterator(); iter.hasNext();) {
< 				registerReference(((EObject) iter.next()).eResource(), resource);
562,562c304,304
< 			}
---
> 			}
563,601d304
< 		}
< 	}
< 
< 	/**
< 	 * Updates the imports and exports by walking the contents of the specified
< 	 * EObject and finding any referencers to these EObjects. This is for the
< 	 * cross reference adapter to synchronize the imports and exports when
< 	 * eObjects are added or removed
< 	 */
< 	private void updateImportsAndExports(EObject eObject, boolean register) {
< 		Resource resource = eObject.eResource();
< 
< 		for (Iterator iter = getInverseReferencers(eObject, null, null)
< 				.iterator(); iter.hasNext();) {
< 			if (register) {
< 				registerReference(((EObject) iter.next()).eResource(), resource);
< 			} else {
< 				deregisterReference(((EObject) iter.next()).eResource(),
< 						resource);
< 			}
< 		}
< 
< 		for (Iterator i = EcoreUtil.getAllContents(eObject, resolve()); i
< 				.hasNext();) {
< 			EObject next = (EObject) i.next();
< 			for (Iterator iter = getInverseReferencers(next, null, null)
< 					.iterator(); iter.hasNext();) {
< 				if (register) {
< 					registerReference(((EObject) iter.next()).eResource(),
< 							resource);
< 				} else {
< 					deregisterReference(((EObject) iter.next()).eResource(),
< 							resource);
< 				}
< 			}
< 		}
< 	}
< 
< 	/**
604,604d526
< 	 * @param referencer
605,605c527,527
< 	 *            the referencing resource
---
> 	 * @param referencer the referencing resource
643a567,571
> 	 * Returns a Set of EObjects that reference the given EObject.
> 	 * If an EReference is specified, the scope of the search is limited
> 	 * only to that EReference. To include all references specify a value of null.
> 	 * If an EClass type is specified, the returned Set will only include those
> 	 * referencers that match the given type. To include all types specify a value of null.
644,649d566
< 	 * Returns a Set of EObjects that reference the given EObject. If an
< 	 * EReference is specified, the scope of the search is limited only to that
< 	 * EReference. To include all references specify a value of null. If an
< 	 * EClass type is specified, the returned Set will only include those
< 	 * referencers that match the given type. To include all types specify a
< 	 * value of null.
650,650c572,572
< 	 * 
---
> 	 * 
650a573,574
> 	 * @param referenced the referenced EObject
> 	 * @param reference the reference to find referencers on, null for any reference
651,655d572
< 	 * @param referenced
< 	 *            the referenced EObject
< 	 * @param reference
< 	 *            the reference to find referencers on, null for any reference
< 	 * @param type
656,656c575,575
< 	 *            the type of the referencers, use null for any type
---
> 	 * @param type the type of the referencers, use null for any type
659,659c578,578
< 	public Set getInverseReferencers(EObject referenced, EReference reference,
---
> 	public Set getInverseReferencers(EObject referenced, EReference reference, EClass type) {
660,660d578
< 			EClass type) {
666a585,588
> 	 * search is limited only to that EReference. To include all references specify
> 	 * a value of null. If an EClass type is specified, the returned Set will only
> 	 * include those referencers that match the given type. To include all types
> 	 * specify a value of null.
667,670d584
< 	 * search is limited only to that EReference. To include all references
< 	 * specify a value of null. If an EClass type is specified, the returned Set
< 	 * will only include those referencers that match the given type. To include
< 	 * all types specify a value of null.
671,671c589,589
< 	 * 
---
> 	 * 
671a590,591
> 	 * @param referenced the referenced EObject
> 	 * @param reference the reference to find referencers on, null for any reference
672,676d589
< 	 * @param referenced
< 	 *            the referenced EObject
< 	 * @param reference
< 	 *            the reference to find referencers on, null for any reference
< 	 * @param type
677,677c592,592
< 	 *            the type of the referencers, use null for any type
---
> 	 * @param type the type of the referencers, use null for any type
679a595,595
> 	public Set getNonNavigableInverseReferencers(EObject referenced, EReference reference, EClass type) {
680,681d594
< 	public Set getNonNavigableInverseReferencers(EObject referenced,
< 			EReference reference, EClass type) {
682,682c596,596
< 		return getReferencers(getNonNavigableInverseReferences(referenced),
---
> 		return getReferencers(getNonNavigableInverseReferences(referenced), reference, type);
683,683d596
< 				reference, type);
686a600,601
> 	 * Extracts the EObjects from the EStructuralFeature.Setting references
> 	 * and returns a filtered Set based on the given reference and type.
687,688d599
< 	 * Extracts the EObjects from the EStructuralFeature.Setting references and
< 	 * returns a filtered Set based on the given reference and type.
689,689c602,602
< 	 * 
---
> 	 * 
689a603,604
> 	 * @param references a collection of EStructuralFeature.Setting
> 	 * @param reference the reference to find referencers on, null for any reference
690,694d602
< 	 * @param references
< 	 *            a collection of EStructuralFeature.Setting
< 	 * @param reference
< 	 *            the reference to find referencers on, null for any reference
< 	 * @param type
695,695c605,605
< 	 *            the type of the referencers, use null for any type
---
> 	 * @param type the type of the referencers, use null for any type
698,698c608,608
< 	private Set getReferencers(Collection references, EReference reference,
---
> 	private Set getReferencers(Collection references, EReference reference, EClass type) {
699,699d608
< 			EClass type) {
704,704d612
< 				if (reference == null
705,705c613,613
< 						|| reference == setting.getEStructuralFeature()) {
---
> 				if (reference == null || reference == setting.getEStructuralFeature()) {
707,707d614
< 					if (referencer != null
708,708c615,615
< 							&& (type == null || type.isInstance(referencer))) {
---
> 					if (referencer != null && (type == null || type.isInstance(referencer))) {
718,718c625,625
< 	 * Searches the adapter list of the given Notifier for a
---
> 	 * Searches the adapter list of the given Notifier for a CrossReferenceAdapter.
719,719c626,626
< 	 * CrossReferenceAdapter. If not found, returns null.
---
> 	 * If not found, returns null.
721,721d627
< 	 * @param notifier
722,722c628,628
< 	 *            the notifier to search
---
> 	 * @param notifier the notifier to search
725,725c631,631
< 	public static CrossReferenceAdapter getExistingCrossReferenceAdapter(
---
> 	public static CrossReferenceAdapter getExistingCrossReferenceAdapter(Notifier notifier) {
726,726d631
< 			Notifier notifier) {
743,743c648,648
< 	 * Obtains the cross-reference adapter for the specified resource set, if
---
> 	 * Obtains the cross-reference adapter for the specified resource set,
744,744c649,649
< 	 * necessary creating it and attaching it.
---
> 	 * if necessary creating it and attaching it.
746,746c651,651
< 	 * @param resourceSet
---
> 	 * @param resourceSet the resource set
747,747d651
< 	 *            the resource set
751,751c655,655
< 	public static CrossReferenceAdapter getCrossReferenceAdapter(
---
> 	public static CrossReferenceAdapter getCrossReferenceAdapter(ResourceSet resourceSet) {
752,752d655
< 			ResourceSet resourceSet) {
757a661,661
> 			resourceSet);
757,757c660,660
< 		CrossReferenceAdapter result = getExistingCrossReferenceAdapter(resourceSet);
---
> 		CrossReferenceAdapter result = getExistingCrossReferenceAdapter(
799,799c703,703
< 		 * @return <code>true</code> if I am now zero; <code>false</code>,
---
> 		 * @return <code>true</code> if I am now zero; <code>false</code>, otherwise
800,800d703
< 		 *         otherwise
825a729,731
> 	    for (Iterator i = eObject.eClass().getEAllReferences().iterator(); i.hasNext(); )
> 	    {
> 	      EReference eReference = (EReference)i.next();
826,830d728
< 	    EContentsEList.FeatureIterator crossReferences =
< 	    	(EContentsEList.FeatureIterator) eObject.eCrossReferences().iterator();
< 		while (crossReferences.hasNext()) {
< 			InternalEObject referent = (InternalEObject) crossReferences.next();
< 			EReference eReference = (EReference) crossReferences.feature();
831a733,750
> 	      if (eOpposite != null && !eReference.isContainer() && !eReference.isContainment() && eObject.eIsSet(eReference))
> 	      {
> 	        if (eReference.isMany())
> 	        {
> 	          for (Iterator j = ((Collection)eObject.eGet(eReference)).iterator(); j.hasNext(); )
> 	          {
> 	            InternalEObject referencingEObject = (InternalEObject)j.next();
> 	            result.add(referencingEObject.eSetting(eOpposite));
> 	          }
> 	        }
> 	        else
> 	        {
> 	        	// although the reference is set, the value could be null
> 	        	InternalEObject referencingEObject = ((InternalEObject)eObject.eGet(eReference));
> 	        	if ( referencingEObject != null ) {
> 	        		result.add(referencingEObject.eSetting(eOpposite));
> 	        	}
> 	        }
832,834d732
< 			
< 			if (referent != null && eOpposite != null) {
< 				result.add(referent.eSetting(eOpposite));
839a756,764
> 
> 	public final void notifyChanged(Notification notification) {
> 		try {
> 			isProcessingNotification = true;
> 			super.notifyChanged(notification);
> 		} finally {
> 			isProcessingNotification = false;
> 		}
> 	}	
