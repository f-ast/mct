13a14,15
> import org.eclipse.swt.graphics.Color;
> import org.eclipse.swt.graphics.RGB;
14,14d13
< import java.awt.Color;
20a22,25
>  * 
>  * IMPORTANT: This interface is <EM>not</EM> intended to be implemented by
>  * clients. 
>  * New methods may be added in the future.
40a46,65
> 	 * @return <code>RGB</code> value that is the fill color of the rendered
> 	 *         image. Note: a <code>null</code> return value is valid and
> 	 *         means that the fill color defaults to the values stored in the
> 	 *         vector graphics file.
> 	 */
> 	public abstract RGB getBackgroundColor();
> 
> 	/**
> 	 * Accessor method to return the outline color of the rendered image.
> 	 * 
> 	 * @return <code>RGB</code> value that is the outline color of the
> 	 *         rendered image. Note: a <code>null</code> return value is valid
> 	 *         and means that the outline color defaults to the values stored in
> 	 *         the vector graphics file.
> 	 */
> 	public abstract RGB getForegroundColor();
> 
> 	/**
> 	 * Accessor method to return the fill color of the rendered image.
> 	 * 
41a67,68
> 	 *         image. Note: a <code>null</code> return value is valid and
> 	 *         means that the fill color defaults to the values stored in the
41,41c66,66
< 	 * @return <code>Color</code> value that is the fill color of the rendered image.
---
> 	 * @return <code>Color</code> value that is the fill color of the rendered
42,42d66
< 	 * Note: a <code>null</code> return value is valid and means that the fill color defaults 
43a70,70
> 	 * @deprecated use {@link RenderInfo#getBackgroundColor()}
43,43c69,69
< 	 * to the values stored in the vector graphics file.
---
> 	 *         vector graphics file.
45,45c72,72
< 	public abstract Color getFillColor();
---
> 	public abstract java.awt.Color getFillColor();
50a78,79
> 	 *         rendered image. Note: a <code>null</code> return value is valid
> 	 *         and means that the outline color defaults to the values stored in
50,50c77,77
< 	 * @return <code>Color</code> value that is the outline color of the rendered image.
---
> 	 * @return <code>Color</code> value that is the outline color of the
51,51d77
< 	 * Note: a <code>null</code> return value is valid and means that the outline color defaults 
52,52c80,80
< 	 * to the values stored in the vector graphics file.
---
> 	 *         the vector graphics file.
52a81,81
> 	 * @deprecated use {@link RenderInfo#getForegroundColor()}
54,54c83,83
< 	public abstract Color getOutlineColor();
---
> 	public abstract java.awt.Color getOutlineColor();
59,59c88,88
< 	 * @return <code>boolean</code> <code>true</code> if aspect ratio of original vector file is maintained, 
---
> 	 * @return <code>boolean</code> <code>true</code> if aspect ratio of
59a89,89
> 	 *         original vector file is maintained, <code>false</code>
60,60c90,90
< 	 * <code>false</code> otherwise.
---
> 	 *         otherwise.
67,67c97,97
< 	 * @return <code>boolean</code> <code>true</code> if vector graphic is to be rendered wih anti-aliasing, 
---
> 	 * @return <code>boolean</code> <code>true</code> if vector graphic is
68,68c98,98
< 	 * <code>false</code> otherwise.
---
> 	 *         to be rendered wih anti-aliasing, <code>false</code> otherwise.
72a103,105
> 	 * Generic setter to set values in the RenderInfo data structure. This is
> 	 * useful when retrieving a RenderInfo structure from a RenderedImage object
> 	 * and then wishing to re-render the image with new values.
73,75d102
< 	 * Generic setter to set values in the RenderInfo data structure.  This is useful
< 	 * when retrieving a RenderInfo structure from a RenderedImage object and then 
< 	 * wishing to re-render the image with new values.
76a107,126
> 	 * @param width
> 	 *            the width of the rendered image to set
> 	 * @param height
> 	 *            the height of the rendered image to set
> 	 * @param maintainAspectRatio
> 	 *            <code>boolean</code> <code>true</code> if aspect ratio of
> 	 *            original vector file is maintained, <code>false</code>
> 	 *            otherwise
> 	 * @param antialias
> 	 *            <code>boolean</code> <code>true</code> if vector graphic
> 	 *            is to be rendered wih anti-aliasing, <code>false</code>
> 	 *            otherwise.
> 	 * @param background
> 	 *            <code>Color</code> fill color for the whole image: null
> 	 *            value defaults to stored values for each element in the vector
> 	 *            file.
> 	 * @param outline
> 	 *            <code>Color</code> outline color for the whole image: null
> 	 *            value defaults to stored foreground for each element in the
> 	 *            vector file.
76,76c106,106
< 	 * 
---
> 	 * 
77,86d106
< 	 * @param width the width of the rendered image to set
< 	 * @param height the height of the rendered image to set
< 	 * @param fill <code>Color</code> fill color for the whole image: null value defaults to 
< 	 * stored values for each element in the vector file.
< 	 * @param outline <code>Color</code> outline color for the whole image: null value defaults to 
< 	 * stored values for each element in the vector file.
< 	 * @param maintainAspectRatio <code>boolean</code> <code>true</code> if aspect ratio of original vector file 
< 	 * is maintained, <code>false</code> otherwise
< 	 * @param antialias <code>boolean</code> <code>true</code> if vector graphic is to be rendered wih anti-aliasing, 
< 	 * <code>false</code> otherwise.
87,87c127,127
< 	 */
---
> 	 */
87a128,148
> 	public abstract void setValues(int width, int height,
> 			boolean maintainAspectRatio, boolean antialias, RGB background,
> 			RGB foreground);
> 
> 	/**
> 	 * Generic setter to set values in the RenderInfo data structure. This is
> 	 * useful when retrieving a RenderInfo structure from a RenderedImage object
> 	 * and then wishing to re-render the image with new values.
> 	 * 
> 	 * @param width
> 	 *            the width of the rendered image to set
> 	 * @param height
> 	 *            the height of the rendered image to set
> 	 * @param fill
> 	 *            <code>Color</code> fill color for the whole image: null
> 	 *            value defaults to stored values for each element in the vector
> 	 *            file.
> 	 * @param outline
> 	 *            <code>Color</code> outline color for the whole image: null
> 	 *            value defaults to stored values for each element in the vector
> 	 *            file.
88,91d127
< 	public abstract void setValues(
< 		int width,
< 		int height,
< 		Color fill, Color outline,
92a150,161
> 	 *            <code>boolean</code> <code>true</code> if aspect ratio of
> 	 *            original vector file is maintained, <code>false</code>
> 	 *            otherwise
> 	 * @param antialias
> 	 *            <code>boolean</code> <code>true</code> if vector graphic
> 	 *            is to be rendered wih anti-aliasing, <code>false</code>
> 	 *            otherwise.
> 	 * @deprecated use
> 	 *             {@link RenderInfo#setValues(int, int, Color, Color, boolean, boolean)}
> 	 */
> 	public abstract void setValues(int width, int height, java.awt.Color fill,
> 			java.awt.Color outline, boolean maintainAspectRatio,
92,92c149,149
< 		boolean maintainAspectRatio,
---
> 	 * @param maintainAspectRatio
