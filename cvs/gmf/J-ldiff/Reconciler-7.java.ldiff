26,30d25
< 	/**
< 	 * Expected max breadth of the node in the reconciled tree
< 	 */
< 	private static final int PAIRS_POOL_SIZE = 100;
< 	
36,36c32,32
< 		myMatchingSession = new MatchingSession(new PairsPool(PAIRS_POOL_SIZE));
---
> 		myMatchingSession = new MatchingSession();
48a45,45
> 	@SuppressWarnings("unchecked")
52a50,50
> 	@SuppressWarnings("unchecked")
68,68c66,66
< 	private void reconcileContents(EObject currentParent, Collection allCurrents, Collection allOlds){
---
> 	private void reconcileContents(EObject currentParent, Collection<EObject> allCurrents, Collection<EObject> allOlds){
80,81d77
< 			myMatchingSession.releasePair(next);
< 			
99,103d94
< 		
< 		public void reset(){
< 			current = null;
< 			old = null;
< 		}
106a109,109
> 			final Collection<EObject> myOlds;
107,107c110,110
< 		private final Collection myCurrents;
---
> 			final Collection<EObject> myCurrents;
108,109d110
< 		private final Collection myOlds;
< 		private final PairsPool myPool;
111a100,100
> 		public MatchingSession(){
112,114d113
< 		public MatchingSession(PairsPool pool){
< 			myPool = pool;
< 			myCurrents = new LinkedList();
115,115c114,114
< 			myOlds = new LinkedHashSet();
---
> 				myOlds = new LinkedHashSet<EObject>(olds);
115a115,115
> 				myCurrents = new LinkedList<EObject>(currents);
118,118c103,103
< 		public void match(Collection currents, Collection olds, Collection<Pair> output){
---
> 		public void match(Collection<EObject> currents, Collection<EObject> olds, Collection<Pair> output){
120,121d104
< 			assert myOlds.isEmpty();
< 			assert myCurrents.isEmpty();
125a27,27
> 
126,126d26
< 			
130,131d113
< 				myCurrents.addAll(currents);
< 				myOlds.addAll(olds);
133,133c117,117
< 				for (Iterator currentContents = myCurrents.iterator(); !myOlds.isEmpty() && currentContents.hasNext();){
---
> 				for (Iterator<EObject> currentContents = myCurrents.iterator(); !myOlds.isEmpty() && currentContents.hasNext();){
134,134c118,118
< 					EObject nextCurrent = (EObject) currentContents.next();
---
> 					EObject nextCurrent = currentContents.next();
142,142c126,126
< 				for (Iterator notMatchedOlds = myOlds.iterator(); notMatchedOlds.hasNext();){
---
> 				for (Iterator<EObject> notMatchedOlds = myOlds.iterator(); notMatchedOlds.hasNext();){
145,145c129,129
< 					nextPair.old = (EObject)notMatchedOlds.next();
---
> 					nextPair.old = notMatchedOlds.next();
150,151d133
< 				myCurrents.clear();
< 				myOlds.clear();
173,197d154
< 			return myPool.acquire();
< 		}
< 		
< 		public void releasePair(Pair pair){
< 			myPool.release(pair);
< 		}
< 		
< 	}
< 	
< 	private static class PairsPool extends AbstractPool {
< 		public PairsPool(int capacity) {
< 			super(capacity);
< 		}
< 		
< 		public Pair acquire(){
< 			return (Pair)internalAcquire();
< 		}
< 		
< 		public void release(Pair pair){
< 			pair.current = null;
< 			pair.old = null;
< 			internalRelease(pair);
< 		}
< 		
< 		protected Object createNew() {
