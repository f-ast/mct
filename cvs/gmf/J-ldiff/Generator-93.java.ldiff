14,14d13
< import java.io.ByteArrayInputStream;
16,16d14
< import java.lang.reflect.InvocationTargetException;
23,25d20
< import org.eclipse.core.resources.IFile;
< import org.eclipse.core.resources.IResource;
< import org.eclipse.core.runtime.CoreException;
27,27d21
< import org.eclipse.core.runtime.IProgressMonitor;
29,29d22
< import org.eclipse.core.runtime.SubProgressMonitor;
31,31d23
< import org.eclipse.emf.codegen.util.CodeGenUtil.EclipseUtil;
202a195,206
> 		if (isPathInsideGenerationTarget(myDiagram.getCreationWizardIconPathX()) || isPathInsideGenerationTarget(myEditorGen.getEditor().getIconPathX())) {
> 			// only these two at the moment may produce path that reference generated icon file, thus
> 			// skip generation if neither path specifies relative path
> 			generateDiagramIcon(isPathInsideGenerationTarget(myDiagram.getCreationWizardIconPathX()) ? myDiagram.getCreationWizardIconPathX() : myEditorGen.getEditor().getIconPathX());
> 		}
> 		generateWizardBanner();
> 	}
> 
> 	private static boolean isPathInsideGenerationTarget(String path) {
> 		assert path != null;
> 		Path p = new Path(path);
> 		return !p.isAbsolute() && !p.segment(0).equals("..");
872a877,877
> 		doGenerateBinaryFile(myEmitters.getShortcutImageEmitter(), new Path("icons/shortcut.gif"), null);
873,885d876
< 		Path iconPath = new Path("icons/shortcut.gif");
< 		IProgressMonitor pm = getNextStepMonitor();
< 		try {
< 			pm.beginTask(iconPath.lastSegment(), 4);
< 			IPath containerPath = getDestProject().getFullPath().append(iconPath.removeLastSegments(1));
< 			EclipseUtil.findOrCreateContainer(containerPath, false, (IPath) null, new SubProgressMonitor(pm, 1));
< 			IFile f = getDestProject().getFile(iconPath);
< 			byte[] contents = myEmitters.getShortcutImageEmitter().generate(new SubProgressMonitor(pm, 1), null);
< 			if (f.exists()) {
< 				if (!contains(f, new ByteArrayInputStream(contents))) {
< 					f.setContents(new ByteArrayInputStream(contents), true, true, new SubProgressMonitor(pm, 1));
< 				} else {
< 					pm.worked(1);
886a879,884
> 
> 	private void generateDiagramIcon(String path) throws UnexpectedBehaviourException, InterruptedException {
> 		// use genModel.prefix if available to match colors of model icons and diagram icons
> 		// @see GenPackageImpl#generateEditor - it passes prefix to ModelGIFEmitter 
> 		Object[] args = new Object[] {myDiagram.getDomainDiagramElement() == null ? myEditorGen.getDiagramFileExtension() : myDiagram.getDomainDiagramElement().getGenPackage().getPrefix() };
> 		doGenerateBinaryFile(myEmitters.getDiagramIconEmitter(), new Path(path), args);
887,896d878
< 			} else {
< 				f.create(new ByteArrayInputStream(contents), true, new SubProgressMonitor(pm, 1));
< 			}
< 			f.getParent().refreshLocal(IResource.DEPTH_ONE, new SubProgressMonitor(pm, 1));
< 		} catch (InvocationTargetException ex) {
< 			handleException(ex.getCause());
< 		} catch (CoreException ex) {
< 			handleException(ex);
< 		} finally {
< 			pm.done();
897a886,891
> 
> 	private void generateWizardBanner() throws UnexpectedBehaviourException, InterruptedException {
> 		String stem = myDiagram.getDomainDiagramElement() == null ? "" : myDiagram.getDomainDiagramElement().getGenPackage().getPrefix();
> 		// @see GenPackageImpl#generateEditor - it passes prefix to ModelWizardGIFEmitter
> 		Object[] args = new Object[] {stem.length() == 0 ? myEditorGen.getDiagramFileExtension() : stem };
> 		doGenerateBinaryFile(myEmitters.getWizardBannerImageEmitter(), new Path("icons/wizban/New" + stem + "Wizard.gif"), args);
923,923c917,917
< 		c.registerValue(GMFGenPackage.eINSTANCE.getGenPlugin(), 6);
---
> 		c.registerValue(GMFGenPackage.eINSTANCE.getGenPlugin(), 8);
