25a27,27
> import org.eclipse.draw2d.IFigure;
30,30c33,33
< import org.eclipse.draw2d.geometry.PrecisionDimension;
---
> import org.eclipse.draw2d.geometry.PrecisionRectangle;
46a49,49
> import org.eclipse.gef.requests.ReconnectRequest;
59a63,63
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.LineSeg;
60a65,65
> import org.eclipse.gmf.runtime.draw2d.ui.geometry.PrecisionPointList;
64,64c25,25
< import org.eclipse.jface.util.Assert;
---
> import org.eclipse.core.runtime.Assert;
267a272,272
>         PrecisionRectangle preciseRect = new PrecisionRectangle(rect);
268,268c273,273
<         return translateFromGraph(rect);
---
>         return translateFromGraph(preciseRect);
629,629c634,634
<         int totalEdgeDiffX = diffX ;
---
>         double totalEdgeDiffX = diffX ;
630,630c635,635
<         int totalEdgeDiffY = diffY ;
---
>         double totalEdgeDiffY = diffY ;
637,637c642,642
<             totalEdgeDiffX += targetExt.x;
---
>             totalEdgeDiffX += targetExt.preciseX();
638,638c643,643
<             totalEdgeDiffY += targetExt.y;
---
>             totalEdgeDiffY += targetExt.preciseY();
641,641d645
<         
642,642c646,646
<         PointList allPoints = new PointList(routePoints.size());
---
>         PrecisionPointList allPoints = new PrecisionPointList(routePoints.size());
644,644c648,648
<             allPoints.addPoint(routePoints.getPoint(i).x + totalEdgeDiffX, routePoints
---
>             allPoints.addPrecisionPoint(routePoints.getPoint(i).preciseX() + totalEdgeDiffX, routePoints
645,645c649,649
<                 .getPoint(i).y
---
>                 .getPoint(i).preciseY()
649,654d652
<         Rectangle sourceExt = getNodeMetrics(source);
<         Point ptSourceReference = sourceExt.getCenter().getTranslated(diffX,
<             diffY);
<         Rectangle targetExt = getNodeMetrics(target);
<         Point ptTargetReference = targetExt.getCenter().getTranslated(diffX,
<             diffY);
657a659,659
>                 anchorReferencePoints.getOrigin(), anchorReferencePoints.getTerminus());
658,658d658
<             ptSourceReference, ptTargetReference);
660,660c653,653
<         CompoundCommand cc = new CompoundCommand(""); //$NON-NLS-1$
---
>         CompoundCommand cc = new CompoundCommand(""); //$NON-NLS-1$
660a654,655
>         
>         LineSeg anchorReferencePoints = addAnchorsCommands(cc, allPoints.getFirstPoint(), allPoints.getLastPoint(), source, target, connectEP, diffX, diffY);
681a682,789
> 	 * Creates source and target anchor commands and appends them to the
> 	 * compound command passed in. Returns a line segment ends of which are the
> 	 * new source and target anchor reference points for further use in the
> 	 * command setting the bend points.
> 	 * 
> 	 * @param cc
> 	 *            command to add anchors commands to
> 	 * @param sourceAnchorLocation
> 	 *            the source anchor location coordinates
> 	 * @param targetAnchorLocation
> 	 *            the target anchor location coordinates
> 	 * @param source
> 	 *            source node
> 	 * @param target
> 	 *            target node
> 	 * @param cep
> 	 *            connection editpart
> 	 * @param diffX
> 	 *            x axis offset
> 	 * @param diffY
> 	 *            y axis offset
> 	 * @return <code>LineSeg</code> origin is the new source anchor reference
> 	 *         point and origin is the new target anchor reference point
> 	 */
> 	protected LineSeg addAnchorsCommands(CompoundCommand cc,
> 			Point sourceAnchorLocation, Point targetAnchorLocation,
> 			Node source, Node target, ConnectionEditPart cep, int diffX,
> 			int diffY) {
> 		Rectangle sourceExt = getNodeMetrics(source);
> 		Rectangle targetExt = getNodeMetrics(target);
> 		sourceExt.performTranslate(diffX, diffY);
> 		targetExt.performTranslate(diffX, diffY);
> 
> 		/*
> 		 * If source or target anchor command won't be created or will be non-executable,
> 		 * source or target reference point is assumed to be the geometric centre of a shape.
> 		 */
> 		Point resultantSourceAnchorReference = sourceExt.getCenter();
> 		Point resultantTargetAnchorReference = targetExt.getCenter();
> 
> 		PrecisionPoint sourceRatio = new PrecisionPoint((sourceAnchorLocation
> 				.preciseX() - sourceExt.preciseX())
> 				/ sourceExt.preciseWidth(),
> 				(sourceAnchorLocation.preciseY() - sourceExt.preciseY())
> 						/ sourceExt.preciseHeight());
> 		PrecisionPoint targetRatio = new PrecisionPoint((targetAnchorLocation
> 				.preciseX() - targetExt.preciseX())
> 				/ targetExt.preciseWidth(),
> 				(targetAnchorLocation.preciseY() - targetExt.preciseY())
> 						/ targetExt.preciseHeight());
> 
> 		/*
> 		 * Need to fake reconnection of the ends of the connection. Currently
> 		 * existing figure coordinates (old coordinates) needs to be used for
> 		 * this, since the reconnection location is passed in absolute
> 		 * coordinates.
> 		 */
> 		ReconnectRequest reconnectRequest = new ReconnectRequest(
> 				org.eclipse.gef.RequestConstants.REQ_RECONNECT_SOURCE);
> 		reconnectRequest.setConnectionEditPart(cep);
> 		reconnectRequest.setTargetEditPart((EditPart) source.data);
> 		IFigure sourceFig = ((GraphicalEditPart) source.data).getFigure();
> 		Point sourceAnchorReference = new PrecisionPoint(
> 				sourceFig.getBounds().preciseX() + sourceRatio.preciseX()
> 						* sourceFig.getBounds().preciseWidth(), sourceFig
> 						.getBounds().preciseY()
> 						+ sourceRatio.preciseY()
> 						* sourceFig.getBounds().preciseHeight());
> 		sourceFig.translateToAbsolute(sourceAnchorReference);
> 		reconnectRequest.setLocation(sourceAnchorReference);
> 		Command sourceAnchorCommand = ((EditPart) source.data)
> 				.getCommand(reconnectRequest);
> 		if (sourceAnchorCommand != null && sourceAnchorCommand.canExecute()) {
> 			cc.add(sourceAnchorCommand);
> 			resultantSourceAnchorReference = new PrecisionPoint(sourceExt
> 					.preciseWidth()
> 					* sourceRatio.preciseX() + sourceExt.preciseX(), targetExt
> 					.preciseHeight()
> 					* sourceRatio.preciseY() + sourceExt.preciseY());
> 		}
> 
> 		reconnectRequest
> 				.setType(org.eclipse.gef.RequestConstants.REQ_RECONNECT_TARGET);
> 		reconnectRequest.setTargetEditPart((EditPart) target.data);
> 		IFigure targetFig = ((GraphicalEditPart) target.data).getFigure();
> 		Point targetAnchorReference = new PrecisionPoint(
> 				targetFig.getBounds().preciseX() + targetRatio.preciseX()
> 						* targetFig.getBounds().preciseWidth(), targetFig
> 						.getBounds().preciseY()
> 						+ targetRatio.preciseY()
> 						* targetFig.getBounds().preciseHeight());
> 		targetFig.translateToAbsolute(targetAnchorReference);
> 		reconnectRequest.setLocation(targetAnchorReference);
> 		Command targetAnchorCommand = ((EditPart) target.data)
> 				.getCommand(reconnectRequest);
> 		if (targetAnchorCommand != null && targetAnchorCommand.canExecute()) {
> 			cc.add(targetAnchorCommand);
> 			resultantTargetAnchorReference = new PrecisionPoint(targetExt
> 					.preciseWidth()
> 					* targetRatio.preciseX + targetExt.preciseX(), targetExt
> 					.preciseHeight()
> 					* targetRatio.preciseY() + targetExt.preciseY());
> 		}
> 		return new LineSeg(resultantSourceAnchorReference,
> 				resultantTargetAnchorReference);
> 	}
> 
>     /**
729,729c837,837
<         PointList points = new PointList(10);
---
>         PointList points = new PrecisionPointList(10);
768,768c876,876
<         points.addPoint(start.getTopLeft());
---
>         points.addPoint(start.getLocation());
773a882,882
>                 points.addPoint(nodeExt.getCenter());
774,777d881
<                 int x = nodeExt.x;
<                 int y = nodeExt.y;
< 
<                 points.addPoint(x + nodeExt.width / 2, y + nodeExt.height / 2);
782,782c887,887
<         points.addPoint(end.getTopLeft());
---
>         points.addPoint(end.getLocation());
804a910,910
>                 Point ptLocation = new PrecisionPoint(nodeExt.preciseX() + diff.preciseX(), nodeExt.preciseY()
805,805d909
<                 Point ptLocation = new Point(nodeExt.x + diff.x, nodeExt.y
806,806c911,911
<                     + diff.y);
---
>                     + diff.preciseY());
811a917,918
>                 PrecisionPoint delta = new PrecisionPoint(ptLocation.preciseX()
>                     - ptOldLocation.preciseX(), ptLocation.preciseY()
812,813d916
<                 PrecisionPoint delta = new PrecisionPoint(ptLocation.x
<                     - ptOldLocation.preciseX, ptLocation.y
814,814c919,919
<                     - ptOldLocation.preciseY);
---
>                     - ptOldLocation.preciseY());
