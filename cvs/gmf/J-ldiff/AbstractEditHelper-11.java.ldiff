2,2c2,2
<  * Copyright (c) 2005 IBM Corporation and others.
---
>  * Copyright (c) 2005, 2006 IBM Corporation and others.
91a92,105
>         // Get the matching edit helper advice
>         IEditHelperAdvice[] advice = getEditHelperAdvice(req);
>         
>         // Consult advisors to allow them to configure the request
>         configureRequest(req, advice);
>         
>         // Consult advisors to allow them approve the request
>         boolean approved = approveRequest(req, advice);
>         
>         if (!approved) {
>             return false;
>         }
>         
>         ICommand command = getEditCommand(req, advice);
92,92d91
<         ICommand command = getEditCommand(req);
96a110,110
>      * Builds and returns the edit command, which is a composite command
97,97d109
<      * Implements the default edit command algorithm, which returns a composite
98,98c111,111
<      * command containing the following:
---
>      * containing the following:
103a117,119
>      * <P>
>      * Verifies that the edit request is approved before constructing the edit
>      * command.
106a123,148
> 		// Get the matching edit helper advice
> 		IEditHelperAdvice[] advice = getEditHelperAdvice(req);
>         
> 		// Consult advisors to allow them to configure the request
>         configureRequest(req, advice);
>         
> 		// Consult advisors to allow them approve the request
>         boolean approved = approveRequest(req, advice);
>         
>         if (!approved) {
>             return null;
>         }
>         
>         return getEditCommand(req, advice);
> 	}
>     
>     /**
>      * Template method that implements the default edit command algorithm, which
>      * returns a composite command containing the following:
>      * <OL>
>      * <LI>'before' commands from matching element type specializations</LI>
>      * <LI>'instead' command from this edit helper</LI>
>      * <LI>'after' commands from matching element type specializations</LI>
>      * </OL>
>      */
>     private ICommand getEditCommand(IEditCommandRequest req, IEditHelperAdvice[] advice) { 
111,112d152
< 		IEditHelperAdvice[] advice = getEditHelperAdvice(req);
< 
173a214,300
>      * Template method that consults the edit helper advice to configure the
>      * edit request.
>      * 
>      * @param req
>      *            the edit request
>      * @param advice
>      *            array of applicable edit helper advice
>      */
>     private void configureRequest(IEditCommandRequest req,
>             IEditHelperAdvice[] advice) {
> 
>         if (advice != null) {
> 
>             for (int i = 0; i < advice.length; i++) {
>                 IEditHelperAdvice nextAdvice = advice[i];
>                 nextAdvice.configureRequest(req);
>             }
>         }
>         // All advice has configured the request. Now consult this edit helper.
>         configureRequest(req);
>     }
>     
>     /**
>      * Template method that consults the edit helper advice to see whether or
>      * not they approve the request. If all advice approves the request, then
>      * {@link #approveRequest(IEditCommandRequest)} is called to determine if
>      * this edit helper approves the request.
>      * 
>      * @param req
>      *            the edit request
>      * @param advice
>      *            array of applicable edit helper advice
>      * @return <code>true</code> if the edit request is approved,
>      *         <code>false</code> otherwise. No edit command will be
>      *         constructed if the request is not approved.
>      */
>     private boolean approveRequest(IEditCommandRequest req,
>             IEditHelperAdvice[] advice) {
> 
>         if (advice != null) {
> 
>             for (int i = 0; i < advice.length; i++) {
>                 IEditHelperAdvice nextAdvice = advice[i];
>                 boolean approved = nextAdvice.approveRequest(req);
> 
>                 if (!approved) {
>                     // An advice doesn't approve this request
>                     return false;
>                 }
>             }
>         }
>         // All advice has approved the request. Now consult this edit helper.
>         return approveRequest(req);
>     }
>    
>     /**
>      * Approves the edit gesture described in the <code>request</code>. This
>      * method will be consulted before the edit request is approved.
>      * <P>
>      * The default implementation does nothing. Subclasses should override if
>      * they wish to change the request parameters.
>      * 
>      * @param request
>      *            the edit request
>      */
>     protected void configureRequest(IEditCommandRequest request) {
>         // does nothing, by default
>     }
>     
>     /**
>      * Approves the edit gesture described in the <code>request</code>. This
>      * method will be consulted before the edit command is constructed.
>      * <P>
>      * The default implementation returns <code>true</code>. Subclasses
>      * should override if they wish to provide a different answer.
>      * 
>      * @param req
>      *            the edit request
>      * @return <code>true</code> if the edit request is approved,
>      *         <code>false</code> otherwise. No edit command will be
>      *         constructed if the request is not approved.
>      */
>     protected boolean approveRequest(IEditCommandRequest request) {
>         return true;
>     }
> 	
> 	/**
