2,2c2,2
<  * Copyright (c) 2006 Eclipse.org
---
>  * Copyright (c) 2006, 2007 Borland Software Corporation
14a15,15
> import org.eclipse.emf.common.command.Command;
17a19,19
> import org.eclipse.gmf.runtime.notation.DrawerStyle;
21a24,27
> /**
>  * Command to create a notational node within a given parent. 
>  * @author bblajer
>  */
22a29,30
> 	public final Command myExposeCommand;
> 
23a32,46
> 		this(parent, domainElement, constraint, decorator, true);
> 	}
> 	/**
> 	 * Creates a command that, upon execution, will create a notational node as a child of the given parent view
> 	 * to represent the given domain element.
> 	 * The created node will be assigned the <code>Bounds</code> layout constraint with bounds taken from the given constraint
> 	 * parameter. The node will be decorated with the given {@link IViewDecorator}.
> 	 * The node will be optionally made visible by expanding the parent's {@link DrawerStyle}, if one is present. 
> 	 * @param parent
> 	 * @param domainElement
> 	 * @param constraint
> 	 * @param decorator
> 	 * @param expose
> 	 */
> 	public CreateNotationalNodeCommand(View parent, EObject domainElement, Rectangle constraint, IViewDecorator decorator, boolean expose) {
36a60,64
> 		if (expose) {
> 			myExposeCommand = new ExpandDrawerCommand(parent);
> 		} else {
> 			myExposeCommand = null;
> 		}
40a69,74
> 			return false;
> 		}
> 		if (myExposeCommand != null && !myExposeCommand.canExecute()) {
> 			return false;
> 		}
> 		return true;
40,40c68,68
< 		return getCreatedView() instanceof Node;
---
> 		if (getCreatedView() instanceof Node == false) {
43a78,80
> 		if (myExposeCommand != null && !myExposeCommand.canUndo()) {
> 			return false;
> 		}
47a85,87
> 		if (myExposeCommand != null) {
> 			myExposeCommand.execute();
> 		}
52a93,95
> 		if (myExposeCommand != null) {
> 			myExposeCommand.undo();
> 		}
