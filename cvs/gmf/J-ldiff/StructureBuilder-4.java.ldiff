30a31,31
> import org.eclipse.gmf.internal.bridge.wizards.pages.simple.ResolvedItem.Resolution;
52a54,56
> 	/**
> 	 * Entry point to the structure builder. It walks over the domain model and builds resolutions tree.
> 	 */
54,54c58,58
< 		ResolvedItem item = new ResolvedItem(null, dms.getContents(), null, ResolvedItem.NO_RESOLUTIONS, false);
---
> 		ResolvedItem item = new ResolvedItem(null, dms.getContents(), null, ResolvedItem.NO_RESOLUTIONS, false); // root of the resolutions tree
65,65c69,69
< 		final EClass diagramClass = dms.getDiagramElement();
---
> 		final EClass diagramClass = dms.getDiagramElement(); // containment root of diagram elements
68,68c72,72
< 		Resolution[] resolutions = ResolvedItem.NODE_LINK_RESOLUTIONS;
---
> 		Resolution[] resolutions = ResolvedItem.NODE_LINK_RESOLUTIONS; // class may be resolved only as node or link
72a77,77
> 				resolution = null; // class is not in diagram containment hierarchy
73,73d76
< 				resolution = null;
78a83,85
> 				if (linkPattern.getSource() != null &&
> 						!containmentClosure.contains(diagramClass, linkPattern.getSource().getEReferenceType(), domainPackage)) {
> 					resolution = null; // source is not in diagram containment hierarchy
79,80d82
< 				if (linkPattern.getSource() != null && !containmentClosure.contains(diagramClass, linkPattern.getSource().getEReferenceType(), domainPackage)) {
< 					resolution = null;
81a87,87
> 				if (linkPattern.getTarget() != null &&
81,81c86,86
< 				}
---
> 				}
82,82c88,88
< 				if (linkPattern.getTarget() != null && !containmentClosure.contains(diagramClass, linkPattern.getTarget().getEReferenceType(), domainPackage)) {
---
> 						!containmentClosure.contains(diagramClass, linkPattern.getTarget().getEReferenceType(), domainPackage)) {
82a89,89
> 					resolution = null; // target is not in diagram containment hierarchy
83,83d88
< 					resolution = null;
102,102c108,108
< 		Resolution baseResolution = typeItem.getResolution() == null ? null : Resolution.LABEL;
---
> 		Resolution baseResolution = typeItem.getResolution() == null ? null : Resolution.LABEL; // exclude label if parent is excluded
107,107c113,113
< 		Resolution[] possibleResolutions = Arrays.equals(typeItem.getPossibleResolutions(), ResolvedItem.NO_RESOLUTIONS) ? ResolvedItem.NO_RESOLUTIONS : ResolvedItem.LABEL_RESOLUTIONS;
---
> 		Resolution[] possibleResolutions = Arrays.equals(typeItem.getPossibleResolutions(), ResolvedItem.NO_RESOLUTIONS) ?
107a114,114
> 				ResolvedItem.NO_RESOLUTIONS : ResolvedItem.LABEL_RESOLUTIONS; // exclude label if parent is excluded
109,109c116,116
< 			Resolution resolution = resolvedAttrs.contains(attribute) ? baseResolution : null;
---
> 			Resolution resolution = resolvedAttrs.contains(attribute) ? baseResolution : null; // include only attributes resolved as labels
115,115c122,122
< 		Resolution baseResolution = typeItem.getResolution() != Resolution.NODE ? null : Resolution.LINK;
---
> 		Resolution baseResolution = typeItem.getResolution() != Resolution.NODE ? null : Resolution.LINK; // ref links are available only for nodes
120a128,128
> 				ResolvedItem.NO_RESOLUTIONS : ResolvedItem.LINK_RESOLUTIONS; // exclude link if parent is excluded
120,120c127,127
< 		Resolution[] possibleResolutions = Arrays.equals(typeItem.getPossibleResolutions(), ResolvedItem.NO_RESOLUTIONS) ? ResolvedItem.NO_RESOLUTIONS : ResolvedItem.LINK_RESOLUTIONS;
---
> 		Resolution[] possibleResolutions = Arrays.equals(typeItem.getPossibleResolutions(), ResolvedItem.NO_RESOLUTIONS) ?
122,122c130,130
< 			Resolution resolution = resolvedRefs.contains(reference) ? baseResolution : null;
---
> 			Resolution resolution = resolvedRefs.contains(reference) ? baseResolution : null; // include only refs resolved as links
