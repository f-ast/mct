46a47,62
> 	 * The name of the metaclass that this type represents.
> 	 */
> 	private String eClassName;
> 
> 	/**
> 	 * Flag indicating that a metaclass could not be found with the specified
> 	 * name.
> 	 */
> 	private boolean eClassNotFound = false;
> 
> 	/**
> 	 * Describes the metamodel in which to find the metaclass.
> 	 */
> 	private final MetamodelDescriptor metamodelDescriptor;
> 
> 	/**
73a90,90
> 		this.metamodelDescriptor = null;
89a107,108
> 		this.metamodelDescriptor = metamodelDescriptor;
> 
91,91c110,110
< 		String eClassName = configElement
---
> 		eClassName = configElement
98a148,150
> 		if (eClass == null && !eClassNotFound && metamodelDescriptor != null) {
> 			EPackage ePackage = metamodelDescriptor.getEPackage();
> 			ENamedElement namedElement = ePackage.getEClassifier(getEClassName());
99,100d147
< 		EPackage ePackage = metamodelDescriptor.getEPackage();
< 		ENamedElement namedElement = ePackage.getEClassifier(eClassName);
101a152,154
> 			if (namedElement instanceof EClass) {
> 				eClass = (EClass) namedElement;
> 			}
101,101c151,151
< 
---
> 
102,104d151
< 		if (namedElement instanceof EClass) {
< 			eClass = (EClass) namedElement;
< 		}
105a156,167
> 			if (eClass == null) {
> 				eClassNotFound = true;
> 				Log
> 				.error(
> 						EMFTypePlugin.getPlugin(),
> 						EMFTypePluginStatusCodes.TYPE_NOT_INITED,
> 						EMFTypeCoreMessages
> 								.bind(
> 										EMFTypeCoreMessages.type_not_init_WARN_,
> 										getEClassName(),
> 										EMFTypeCoreMessages.type_reason_eclass_not_found_WARN_));
> 			}
105,105c155,155
< 
---
> 
106,108d155
< 		if (eClass == null) {
< 			throw EMFTypePluginStatusCodes.getTypeInitException(getId(),
< 				EMFTypeCoreMessages.type_reason_eclass_not_found_WARN_, null);
109,109c168,168
< 		}
---
> 		}
110,115d168
< 
< 		// NAME
< 		if (getName() == null || getName().length() < 1) {
< 			setName(eClass.getName());
< 		}
< 
141a144,145
> 	/**
> 	 * Gets the <code>EClass</code> that this type represents.
142,145d143
< 	/*
< 	 * (non-Javadoc)
< 	 * 
< 	 * @see org.eclipse.gmf.runtime.emf.type.core.IMetamodelTypeDescriptor#getEClass()
150a172,198
> 	/**
> 	 * Gets the name of the <code>EClass</code> that this type represents.
> 	 * @return the name of the EClass, or <code>null</code> if this type doesn't represent an EClass.
> 	 */
> 	public String getEClassName() {
> 		if (eClassName == null && eClass != null) {
> 			eClassName = eClass.getName();
> 		}
> 		return eClassName;
> 	}
> 	
> 	/**
> 	 * Gets the namespace URI of the metamodel that owns the <code>EClass</code>
> 	 * that I represent.
> 	 * 
> 	 * @return the namespace URI, or <code>null</code> if I don't have one
> 	 */
> 	public String getNsURI() {
> 		if (metamodelDescriptor == null) {
> 			if (eClass != null) {
> 				return eClass.getEPackage().getNsURI();
> 			}
> 			return null;
> 		}
> 		return metamodelDescriptor.getNsURI();
> 	}
> 
183a232,245
> 	/**
> 	 * Gets my name. If no name is specified, uses the name of the
> 	 * <code>EClass</code> that I represent.
> 	 */
> 	public String getName() {
> 		String name = super.getName();
> 		
> 		if ((name == null || name.length() < 1) && getEClass() != null) {
> 			name = getEClass().getName();
> 			setName(name);
> 		}
> 		return name;
> 	}
> 	
185,185c247,247
< 		return "MetamodelTypeDescriptor[" + getId()+ "]";
---
> 		return "MetamodelTypeDescriptor[" + getId()+ "]"; //$NON-NLS-1$ //$NON-NLS-2$
