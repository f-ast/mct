54a55,56
> 	private int interval;
> 	
66a69,69
> 	 * @param interval interval between border items used in collision resolving (must be > 0)
69,69c72,72
< 	public BorderItemLocator(IFigure parentFigure) {
---
> 	public BorderItemLocator(int interval, IFigure parentFigure) {
69a73,73
> 		Assert.isTrue(interval > 0);
71a76,85
> 		this.interval = interval;
> 	}
> 
> 	/**
> 	 * The preferred side determines placement of figure.
> 	 * 
> 	 * @param parentFigure
> 	 */
> 	public BorderItemLocator(IFigure parentFigure) {
> 		this(MapModeUtil.getMapMode(parentFigure).DPtoLP(8), parentFigure);
87a102,115
> 	 * The preferred side determines placement of figure.
> 	 * 
> 	 * @param parentFigure
> 	 * @param preferredSide
> 	 *            the preferred side of the parent figure on which to place this
> 	 *            border item as defined in {@link PositionConstants}
> 	 * @param interval interval between border items used in collision resolving (must be > 0)
> 	 */
> 	public BorderItemLocator(IFigure parentFigure, int preferredSide, int interval) {
> 		this(interval, parentFigure);
> 		this.preferredSide = preferredSide;
> 	}
> 	
> 	/**
98a127,139
> 	/**
> 	 * The preferred location overrides the preferred side.
> 	 * 
> 	 * @param parentFigure
> 	 * @param constraint
> 	 * @param interval interval between border items used in collision resolving (must be > 0)
> 	 */
> 	public BorderItemLocator(IFigure borderItem, IFigure parentFigure,
> 			Rectangle constraint, int interval) {
> 		this(interval, parentFigure);
> 		setConstraint(constraint);
> 	}
> 
294,296d334
< 		int vertical_gap = MapModeUtil.getMapMode(getParentFigure()).DPtoLP(8);
< 		int horizontal_gap = MapModeUtil.getMapMode(getParentFigure())
< 			.DPtoLP(8);
303a342,342
> 					calculateNextNonConflictingPosition(recommendedLocation,
304,305d341
< 					recommendedLocation.y = calculateNextNonConflictingPosition(
< 							conflictingBorderItem.getBounds().getBottomLeft().y,
306,306c343,343
< 							vertical_gap, suggestedSide, borderItem);
---
> 							interval, suggestedSide, borderItem, conflictingBorderItem.getBounds());
320a358,358
> 					calculateNextNonConflictingPosition(recommendedLocation,
321,322d357
< 					recommendedLocation.x = calculateNextNonConflictingPosition(
< 							conflictingBorderItem.getBounds().getTopRight().x,
323,323c359,359
< 							horizontal_gap, suggestedSide, borderItem);
---
> 							interval, suggestedSide, borderItem, conflictingBorderItem.getBounds());
337a374,374
> 					calculateNextNonConflictingPosition(recommendedLocation,
338,339d373
< 					recommendedLocation.y = calculateNextNonConflictingPosition(
< 							conflictingBorderItem.getBounds().getLocation().y,
340,340c375,375
< 							vertical_gap, suggestedSide, borderItem);
---
> 							interval, suggestedSide, borderItem, conflictingBorderItem.getBounds());
353a389,389
> 					calculateNextNonConflictingPosition(recommendedLocation,
354,355d388
< 					recommendedLocation.x = calculateNextNonConflictingPosition(
< 							conflictingBorderItem.getBounds().getLocation().x,
356,356c390,390
< 							horizontal_gap, suggestedSide, borderItem);
---
> 							interval, suggestedSide, borderItem, conflictingBorderItem.getBounds());
371a406,407
> 	 * Modifies the location of the border item (currentLocation) to avoid
> 	 * overlapping with the obstacle rectangle (another border item bounds)
372,374d405
< 	 * Default behavior is to simply check in a counter clockwise direction.
< 	 * Note:  if the currentSide is EAST or WEST, the y co-oridinate is passed as the current position.  Otherwise,
< 	 * if NORTH or SOUTH is the currentSide, then the x co-oridinate of the borderitem is passed.
375a409,421
> 	 * @param currentLocation
> 	 *            The current location of the border item
> 	 * @param interval
> 	 *            The suggested spacing to try to find the next non-conflicting
> 	 *            position
> 	 * @param currentSide
> 	 *            The current side of the border item
> 	 * @param borderItem
> 	 *            The borderItem being relocated (here to be used by subclasses
> 	 *            if needed)
> 	 * @param obstacle
> 	 *            The bounds of the border item conflicting with the border item
> 	 *            currently being relocated
375,375c408,408
< 	 * 
---
> 	 * 
376,380d408
< 	 * @param currentPosition	The current x or y co-ordinate of the border item
< 	 * @param interval			The suggested spacing to try to find the next non-conflicting position
< 	 * @param currentSide		The current side of the border item 
< 	 * @param borderItem 		The borderItem being relocated (here to be used by subclasses if needed)
< 	 * @return the next possible non-conflicting position
381,381c422,422
< 	 */
---
> 	 */
382a424,425
> 			int interval, int currentSide, IFigure borderItem,
> 			Rectangle obstacle) {
382,382c423,423
< 	protected int calculateNextNonConflictingPosition(int currentPosition, int interval, int currentSide, IFigure borderItem) {
---
> 	protected void calculateNextNonConflictingPosition(Point currentLocation,
383a427,429
> 		case PositionConstants.WEST:
> 			currentLocation.y = obstacle.getBottomLeft().y + interval;
> 			break;
384,384d426
< 			case PositionConstants.WEST:  // Fall through  -- Move down the west side
385a431,445
> 			currentLocation.x = obstacle.getBottomRight().x + interval;
> 			break;
> 		case PositionConstants.EAST:
> 			currentLocation.y = obstacle.getTopRight().y - interval
> 					- borderItem.getBounds().height;
> 			break;
> 		case PositionConstants.NORTH: // Move towards the west side
> 			currentLocation.x = obstacle.getTopLeft().x - interval
> 					- borderItem.getBounds().width;
> 			break;
> 		default:
> 			throw new IllegalArgumentException(
> 					"Invalid side argument: " //$NON-NLS-1$
> 							+ currentSide
> 							+ ". Should be the value from PositionConstants: WEST, EAST, NORTH or SOUTH"); //$NON-NLS-1$
386,390d430
< 				return currentPosition + interval;
< 			case PositionConstants.EAST:  // Fall through - Move towards the north side
< 			case PositionConstants.NORTH: // Fall through - Move towards the west side
< 			default: /* Should never get here, but if we do, we'll default to subtraction */
< 				return currentPosition - interval;
