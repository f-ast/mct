15a16,16
> import java.util.HashMap;
16a18,18
> import java.util.Map;
26a29,31
> import org.eclipse.gmf.bridge.ui.dashboard.DashboardAction;
> import org.eclipse.gmf.bridge.ui.dashboard.DashboardFacade;
> import org.eclipse.gmf.bridge.ui.dashboard.DashboardState;
33,33c34,34
< import org.eclipse.gmf.internal.codegen.popup.actions.ExecuteTemplatesAction;
---
> import org.eclipse.gmf.internal.bridge.ui.dashboard.DashboardActionRegistry.DashboardActionDescriptor;
34,34d34
< import org.eclipse.gmf.internal.codegen.popup.actions.TransformToGenModel;
57,57c61,61
< public class DashboardMediator {
---
> public class DashboardMediator implements DashboardFacade {
68a73,74
> 	private Map<String, ActionContainer> locations;
> 
70a77,77
> 		locations = new HashMap<String, ActionContainer>();
73a81,84
> 	public boolean isStrict() {
> 		return STRICT;
> 	}
> 
75a87,93
> 		locations.put(DashboardFacade.LOCATION_DM, view.getDMFigure());
> 		locations.put(DashboardFacade.LOCATION_DGM, view.getDGMFigure());
> 		locations.put(DashboardFacade.LOCATION_GDM, view.getGDMFigure());
> 		locations.put(DashboardFacade.LOCATION_TDM, view.getTDMFigure());
> 		locations.put(DashboardFacade.LOCATION_MM, view.getMMFigure());
> 		locations.put(DashboardFacade.LOCATION_GM, view.getGMFigure());
> 		locations.put(DashboardFacade.LOCATION_MM2GM, view.getMM2GMFigure());
94,94d111
< 		view.getGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_5, new GenerateDEAction()));
98a116,118
> 		for (DashboardActionDescriptor descriptor : Plugin.getDefault().getDashboardActionRegistry().getDescriptors()) {
> 			addDashboardAction(descriptor);
> 		}
99,99d115
< 		view.getMM2GMFigure().addAction(createLinkFigure(Messages.DashboardMediator_7, new GenerateGMAction()));
102a122,135
> 	protected void addDashboardAction(DashboardActionDescriptor descriptor) {
> 		ActionContainer location = locations.get(descriptor.getLocation());
> 		if (location == null) {
> 			Plugin.getDefault().getLog().log(Plugin.createError("Unknown GMF Dashboard location: " + descriptor.getLocation(), null)); //$NON-NLS-1$
> 			return;
> 		}
> 		DashboardAction action = descriptor.createDashboardAction();
> 		if (action == null) {
> 			return;
> 		}
> 		action.init(this);
> 		location.addAction(createLinkFigure(descriptor.getLabel(), action), descriptor.isStandard());
> 	}
> 
109,109c142,142
< 	protected IFile getFile(String fileName) {
---
> 	public IFile getFile(String fileName) {
113,113c146,146
< 	protected String getName(IFile file) {
---
> 	public String getName(IFile file) {
137,137c170,170
< 	protected void updateStatus() {
---
> 	public void updateStatus() {
160a194,196
> 		public void init(DashboardFacade context) {
> 		}
> 
186a223,225
> 		public void init(DashboardFacade context) {
> 		}
> 
214a254,256
> 		public void init(DashboardFacade context) {
> 		}
> 
482a525,527
> 		public void init(DashboardFacade context) {
> 		}
> 
581,631d625
< 
< 	private class GenerateGMAction implements DashboardAction {
< 
< 		public boolean isEnabled() {
< 			if (STRICT) {
< 				if (state.dmFileName == null || state.dgmFileName == null || state.tdmFileName == null) {
< 					return false;
< 				}
< 			}
< 			return project != null && state.mmFileName != null;
< 		}
< 
< 		public void run() {
< 			IFile file = getFile(state.mmFileName);
< 			TransformToGenModel action = new TransformToGenModel();
< 			IAction uiAction = new Action() {
< 			};
< 			uiAction.setText(Messages.DashboardMediator_13);
< 			IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
< 			action.setActivePart(uiAction, window.getPartService().getActivePart());
< 			action.selectionChanged(uiAction, new StructuredSelection(file));
< 			action.run(uiAction);
< 			IFile gfile = action.getGenModelFile();
< 			state.gmFileName = getName(gfile);
< 			updateStatus();
< 		}
< 	}
< 
< 	private class GenerateDEAction implements DashboardAction {
< 
< 		public boolean isEnabled() {
< 			if (STRICT) {
< 				if (state.dmFileName == null || state.dgmFileName == null) {
< 					return false;
< 				}
< 			}
< 			return project != null && state.gmFileName != null;
< 		}
< 
< 		public void run() {
< 			IFile file = getFile(state.gmFileName);
< 			ExecuteTemplatesAction action = new ExecuteTemplatesAction();
< 			IAction uiAction = new Action() {
< 			};
< 			uiAction.setText(Messages.DashboardMediator_14);
< 			IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
< 			action.setActivePart(uiAction, window.getPartService().getActivePart());
< 			action.selectionChanged(uiAction, new StructuredSelection(file));
< 			action.run(uiAction);
< 		}
< 	}
