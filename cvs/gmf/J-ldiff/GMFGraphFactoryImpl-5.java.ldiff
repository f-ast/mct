11a12,12
> import org.eclipse.emf.ecore.EPackage;
12a14,15
> import org.eclipse.emf.ecore.plugin.EcorePlugin;
> import org.eclipse.gmf.gmfgraph.BasicFont;
15a23,23
> import org.eclipse.gmf.gmfgraph.CustomBorder;
15,15c22,22
< import org.eclipse.gmf.gmfgraph.ColorStyle;
---
> import org.eclipse.gmf.gmfgraph.ConstantColor;
16a20,20
> import org.eclipse.gmf.gmfgraph.CompoundBorder;
20a27,27
> import org.eclipse.gmf.gmfgraph.Dimension;
29a37,37
> import org.eclipse.gmf.gmfgraph.Insets;
31a40,40
> import org.eclipse.gmf.gmfgraph.LineBorder;
32a42,42
> import org.eclipse.gmf.gmfgraph.MarginBorder;
39a50,50
> import org.eclipse.gmf.gmfgraph.RGBColor;
42,42c18,18
< import org.eclipse.gmf.gmfgraph.SizeStyle;
---
> import org.eclipse.gmf.gmfgraph.ColorConstants;
51a62,80
> 	 * Creates the default factory implementation.
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public static GMFGraphFactory init() {
> 		try {
> 			GMFGraphFactory theGMFGraphFactory = (GMFGraphFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/2005/GraphicalDefinition"); 
> 			if (theGMFGraphFactory != null) {
> 				return theGMFGraphFactory;
> 			}
> 		}
> 		catch (Exception exception) {
> 			EcorePlugin.INSTANCE.log(exception);
> 		}
> 		return new GMFGraphFactoryImpl();
> 	}
> 
> 	/**
89a119,119
> 			case GMFGraphPackage.RGB_COLOR: return createRGBColor();
90,91d118
< 			case GMFGraphPackage.COLOR_STYLE: return createColorStyle();
< 			case GMFGraphPackage.SIZE_STYLE: return createSizeStyle();
92,92c120,120
< 			case GMFGraphPackage.FONT_STYLE: return createFontStyle();
---
> 			case GMFGraphPackage.CONSTANT_COLOR: return createConstantColor();
92a121,121
> 			case GMFGraphPackage.BASIC_FONT: return createBasicFont();
93a123,128
> 			case GMFGraphPackage.DIMENSION: return createDimension();
> 			case GMFGraphPackage.INSETS: return createInsets();
> 			case GMFGraphPackage.LINE_BORDER: return createLineBorder();
> 			case GMFGraphPackage.MARGIN_BORDER: return createMarginBorder();
> 			case GMFGraphPackage.COMPOUND_BORDER: return createCompoundBorder();
> 			case GMFGraphPackage.CUSTOM_BORDER: return createCustomBorder();
105a439,500
> 	public Dimension createDimension() {
> 		DimensionImpl dimension = new DimensionImpl();
> 		return dimension;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public Insets createInsets() {
> 		InsetsImpl insets = new InsetsImpl();
> 		return insets;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public LineBorder createLineBorder() {
> 		LineBorderImpl lineBorder = new LineBorderImpl();
> 		return lineBorder;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public MarginBorder createMarginBorder() {
> 		MarginBorderImpl marginBorder = new MarginBorderImpl();
> 		return marginBorder;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public CompoundBorder createCompoundBorder() {
> 		CompoundBorderImpl compoundBorder = new CompoundBorderImpl();
> 		return compoundBorder;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public CustomBorder createCustomBorder() {
> 		CustomBorderImpl customBorder = new CustomBorderImpl();
> 		return customBorder;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public ColorConstants createColorConstantsFromString(EDataType eDataType, String initialValue) {
> 		ColorConstants result = ColorConstants.get(initialValue);
105a141,148
> 			case GMFGraphPackage.COLOR_CONSTANTS:
> 				return createColorConstantsFromString(eDataType, initialValue);
> 			case GMFGraphPackage.FONT_STYLE:
> 				return createFontStyleFromString(eDataType, initialValue);
> 			case GMFGraphPackage.DIRECTION:
> 				return createDirectionFromString(eDataType, initialValue);
> 			case GMFGraphPackage.LINE_KIND:
> 				return createLineKindFromString(eDataType, initialValue);
106,107d438
< 			case GMFGraphPackage.DIRECTION: {
< 				Direction result = Direction.get(initialValue);
108a502,520
> 		return result;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public String convertColorConstantsToString(EDataType eDataType, Object instanceValue) {
> 		return instanceValue == null ? null : instanceValue.toString();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public FontStyle createFontStyleFromString(EDataType eDataType, String initialValue) {
> 		FontStyle result = FontStyle.get(initialValue);
108,108c501,501
< 				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
---
> 		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
109,112d501
< 				return result;
< 			}
< 			case GMFGraphPackage.LINE_KIND: {
< 				LineKind result = LineKind.get(initialValue);
113,113c521,521
< 				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
---
> 		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
114,114c522,522
< 				return result;
---
> 		return result;
115a524,578
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public String convertFontStyleToString(EDataType eDataType, Object instanceValue) {
> 		return instanceValue == null ? null : instanceValue.toString();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public Direction createDirectionFromString(EDataType eDataType, String initialValue) {
> 		Direction result = Direction.get(initialValue);
> 		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
> 		return result;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public String convertDirectionToString(EDataType eDataType, Object instanceValue) {
> 		return instanceValue == null ? null : instanceValue.toString();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public LineKind createLineKindFromString(EDataType eDataType, String initialValue) {
> 		LineKind result = LineKind.get(initialValue);
> 		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
> 		return result;
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
> 	public String convertLineKindToString(EDataType eDataType, Object instanceValue) {
> 		return instanceValue == null ? null : instanceValue.toString();
> 	}
> 
> 	/**
> 	 * <!-- begin-user-doc -->
> 	 * <!-- end-user-doc -->
> 	 * @generated
> 	 */
115,115c523,523
< 			}
---
> 	}
127a161,164
> 			case GMFGraphPackage.COLOR_CONSTANTS:
> 				return convertColorConstantsToString(eDataType, instanceValue);
> 			case GMFGraphPackage.FONT_STYLE:
> 				return convertFontStyleToString(eDataType, instanceValue);
128a166,166
> 				return convertDirectionToString(eDataType, instanceValue);
129,129d165
< 				return instanceValue == null ? null : instanceValue.toString();
130a168,168
> 				return convertLineKindToString(eDataType, instanceValue);
131,131d167
< 				return instanceValue == null ? null : instanceValue.toString();
361a399,401
> 	public RGBColor createRGBColor() {
> 		RGBColorImpl rgbColor = new RGBColorImpl();
> 		return rgbColor;
362,364d398
< 	public ColorStyle createColorStyle() {
< 		ColorStyleImpl colorStyle = new ColorStyleImpl();
< 		return colorStyle;
371a409,411
> 	public ConstantColor createConstantColor() {
> 		ConstantColorImpl constantColor = new ConstantColorImpl();
> 		return constantColor;
372,374d408
< 	public SizeStyle createSizeStyle() {
< 		SizeStyleImpl sizeStyle = new SizeStyleImpl();
< 		return sizeStyle;
381a419,421
> 	public BasicFont createBasicFont() {
> 		BasicFontImpl basicFont = new BasicFontImpl();
> 		return basicFont;
382,384d418
< 	public FontStyle createFontStyle() {
< 		FontStyleImpl fontStyle = new FontStyleImpl();
< 		return fontStyle;
