2,2c2,2
<  * Copyright (c) 2006 Borland Software Corporation
---
>  * Copyright (c) 2006, 2007 Borland Software Corporation
33a34,34
> 	@SuppressWarnings("unchecked")
35,35c36,36
< 		List/*<ElementDescriptor>*/ semanticChildren = getSemanticChildNodes();
---
> 		List<ElementDescriptor> semanticChildren = getSemanticChildNodes();
36,36c37,37
< 		List/*<View>*/ notationalChildren = getHost().getChildren();
---
> 		List<View> notationalChildren = (List<View>) getHost().getChildren();
39a41,41
> 		final Map<EObject, View> semanticToNotational = new HashMap<EObject, View>();
40,40d40
< 		final Map semanticToNotational = new HashMap();
41,41c42,42
< 		for(Iterator it = notationalChildren.iterator(); it.hasNext(); ) {
---
> 		for(Iterator<View> it = notationalChildren.iterator(); it.hasNext(); ) {
42,42c43,43
< 			View next = (View) it.next();
---
> 			View next = it.next();
51,51c52,52
< 		for(Iterator it = semanticChildren.iterator(); it.hasNext(); ) {
---
> 		for(Iterator<ElementDescriptor> it = semanticChildren.iterator(); it.hasNext(); ) {
52,52c53,53
< 			ElementDescriptor next = (ElementDescriptor) it.next();
---
> 			ElementDescriptor next = it.next();
54,54c55,55
< 			View currentView = (View) semanticToNotational.remove(node);
---
> 			View currentView = semanticToNotational.remove(node);
69,69c70,70
< 		for(Iterator it = semanticToNotational.values().iterator(); it.hasNext(); ) {
---
> 		for(Iterator<View> it = semanticToNotational.values().iterator(); it.hasNext(); ) {
70,70c71,71
< 			View obsoleteView = (View) it.next();
---
> 			View obsoleteView = it.next();
70a72,72
> 			if (shouldRemoveView(obsoleteView)) {
71a74,76
> 			} else {
> 				command.appendIfCanExecute(getRefreshExternalElementCommand(obsoleteView));
> 			}
75a81,84
> 	protected Command getRefreshExternalElementCommand(View externalView) {
> 		return null;
> 	}
> 
76a86,89
> 
> 	protected boolean shouldRemoveView(View view) {
> 		return true;
> 	}
76,76c85,85
< 	protected abstract List/*<ElementDescriptor>*/ getSemanticChildNodes();
---
> 	protected abstract List<ElementDescriptor> getSemanticChildNodes();
