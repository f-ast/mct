head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080924-1925:1.4
	v20080917-1925:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060925-1700:1.3.2.1
	v20060919-0800:1.3.2.1
	M1_20:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2006.10.03.15.07.37;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.20.38;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.27.24;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.30;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.09.13.16.48.13;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.providers.internal.copypaste;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.gmf.runtime.emf.clipboard.core.ClipboardSupportUtil;
import org.eclipse.gmf.runtime.emf.clipboard.core.ObjectInfo;
import org.eclipse.gmf.runtime.emf.clipboard.core.PasteChildOperation;
import org.eclipse.gmf.runtime.emf.clipboard.core.PostPasteChildOperation;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@author Yasser Lulu
 */
class ConnectorViewPostPasteChildOperation
	extends PostPasteChildOperation {

	private boolean pasteSemanticElement;

	private List semanticElementPasteOperations;

	ConnectorViewPostPasteChildOperation(
			ConnectorViewPasteOperation connectorViewPasteOperation,
			boolean pasteSemanticElement) {
		super(connectorViewPasteOperation, EMPTY_ARRAY);
		this.pasteSemanticElement = pasteSemanticElement;
	}

	private ConnectorViewPasteOperation getConnectorViewPasteOperation() {
		return (ConnectorViewPasteOperation) getPasteChildOperation();
	}

	public void paste()
		throws Exception {

		EObject pastedElement = doPaste();
		//did we succeed?
		if (pastedElement != null) {
			setPastedElement(pastedElement);
			addPastedElement(pastedElement);
		} else {
			addPasteFailuresObject(getEObject());
		}

	}


	/**
	 * @@return
	 * @@throws Exception
	 */
	private EObject doPaste()
		throws Exception {

		View sourceView = getConnectorViewPasteOperation().getSourceView();
		View targetView = getConnectorViewPasteOperation().getTargetView();

		if ((sourceView == null) || (targetView == null)) {
			return null;
		}

		EObject sourceViewContainer = sourceView.eContainer();
		EObject targetViewContainer = targetView.eContainer();

		if ((sourceViewContainer == null) || (targetViewContainer == null)) {
			return null;
		}

		if (sourceViewContainer.equals(targetViewContainer) == false) {
			//not in the same container, let's try to see if they are in the
			// same diagram at least
			Diagram sourceViewDiagram = NotationClipboardOperationHelper
				.getContainingDiagram((View) sourceViewContainer);
			Diagram targetViewDiagram = NotationClipboardOperationHelper
				.getContainingDiagram((View) targetViewContainer);
			if ((sourceViewDiagram == null) || (targetViewDiagram == null)
				|| (sourceViewDiagram.equals(targetViewDiagram) == false)) {
				return null;
			}
		}
		
		Edge connectorView = getConnectorViewPasteOperation()
			.getConnectorView();

		if (pasteSemanticElement) {			
			EObject semanticElement = connectorView.getElement();
			if (semanticElement != null) {
				if (semanticElement.eIsProxy()) {
					semanticElement = ClipboardSupportUtil.resolve(semanticElement,
						getParentPasteProcess().getLoadedIDToEObjectMapCopy());
				}
				String loadedId = getLoadedEObjectID(semanticElement);
				if (loadedId != null) {
					//even if we failed to paste the semantic element, we'll
					// proceed to paste the edge view
					doPasteSemanticElement();
					//should have been pasted by now, if not then return
					String newId = getEObjectID(semanticElement);
					if (newId == null) {
						return null;
					}
				}
			}
		}
		EObject pastedElement = null;
		Diagram pasteTargetDiagram = NotationClipboardOperationHelper
			.getContainingDiagram((View) sourceViewContainer);
		if (pasteTargetDiagram != null) {
			//if we reached here then we should paste the connector and set
			// refs to it accordingly
			pastedElement = ClipboardSupportUtil.appendEObjectAt(
				pasteTargetDiagram, getContainmentFeature(), connectorView);
			if (pastedElement != null) {
				ClipboardSupportUtil.appendEObjectAt(sourceView,
					NotationPackage.eINSTANCE.getView_SourceEdges(),
					connectorView);
				ClipboardSupportUtil.appendEObjectAt(targetView,
					NotationPackage.eINSTANCE.getView_TargetEdges(),
					connectorView);
			}
		}

		return pastedElement;
	}

	private void doPasteSemanticElement()
		throws Exception {
		List list = new ArrayList();
		Iterator it = getSemanticElementPasteOperations().iterator();
		while (it.hasNext()) {
			PasteChildOperation operation = (PasteChildOperation) it.next();
			operation.paste();
			PasteChildOperation postPasteOperation = operation
				.getPostPasteOperation();
			if (postPasteOperation != null) {
				list.add(postPasteOperation);
			}
		}
		performSemanticElementPostPasteOperations(list);
	}

	private void performSemanticElementPostPasteOperations(List operations)
		throws Exception {
		if (operations.isEmpty() == false) {
			List postPasteOperations = new ArrayList();
			Iterator it = operations.iterator();
			while (it.hasNext()) {
				PasteChildOperation pasteOperation = (PasteChildOperation) it
					.next();
				pasteOperation.paste();
				PasteChildOperation postPasteOperation = pasteOperation
					.getPostPasteOperation();
				if (postPasteOperation != null) {
					postPasteOperations.add(postPasteOperation);
				}
			}
			//perform those newly added post paste operations
			performSemanticElementPostPasteOperations(postPasteOperations);
		}
	}

	protected List getPostPasteOperations()
		throws Exception {
		return Collections.EMPTY_LIST;
	}

	/**
	 * @@return
	 */
	private List getSemanticElementPasteOperations() {
		if (semanticElementPasteOperations == null) {
			semanticElementPasteOperations = new ArrayList();
			//use either source or target views since by now they should have
			// been pasted already
			EObject semanticPasteTarget = NotationClipboardOperationHelper
				.getSemanticPasteTarget(getConnectorViewPasteOperation()
					.getSourceView());
			if (semanticPasteTarget != null) {
				Iterator alwaysCopyEObjectInfoIt = getChildObjectInfo()
					.getCopyAlwaysObjectInfoList().iterator();
				while (alwaysCopyEObjectInfoIt.hasNext()) {
					ObjectInfo alwaysCopyObjectInfo = (ObjectInfo) alwaysCopyEObjectInfoIt
						.next();
					PasteChildOperation pasteOperation = new PasteChildOperation(
						getParentPasteProcess().clone(semanticPasteTarget),
						alwaysCopyObjectInfo);
					semanticElementPasteOperations.add(pasteOperation);
				} //while always-copy
			}
		}
		return semanticElementPasteOperations;
	}

}@


1.3
log
@bugzilla 117592 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
@


1.3.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d65 1
d67 2
a68 1
	 * @@see com.ibm.xtools.bml.emf.internal.copypaste.PasteChildOperation#paste()
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

