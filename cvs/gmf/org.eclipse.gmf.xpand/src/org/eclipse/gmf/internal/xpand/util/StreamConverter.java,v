head	1.3;
access;
symbols
	v20081022-1925:1.3
	v20081020-0700:1.3
	ocl_qvt:1.3.0.4
	Root_ocl_qvt:1.3
	v20080722-1827:1.3
	v20080718-1731:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080528-1052:1.3
	v20080516-1143:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070921-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070420-1000:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	M3_20:1.2;
locks; strict;
comment	@# @;


1.3
date	2008.02.22.16.03.40;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	3d8447bef25b4567;

1.2
date	2006.10.25.17.23.40;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.51;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@restored behaviour to populate problems view on parsing error instead of plain parser exception logging.
@
text
@/*******************************************************************************
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package org.eclipse.gmf.internal.xpand.util;

import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.gmf.internal.xpand.Activator;

/**
 * @@author artem
 */
public class StreamConverter {

	/**
	 * If this method completes successfully, whole input will be consumed, however, it won't be
	 * 'closed', so it's up to invoker to close the input
	 * @@throws IOException
	 */
	public char[] toCharArray(Reader input) throws IOException {
		return toCharWriter(input).toCharArray();
	}

	/**
	 * @@throws CoreException
	 * @@throws UnsupportedEncodingException
	 * @@throws IOException
	 */
	public char[] toCharArray(IFile file) throws CoreException, UnsupportedEncodingException, IOException {
		Reader r = null;
		try {
			r = toContentsReader(file);
			return toCharArray(r);
		} finally {
			if (r != null) {
				try {
					r.close();
				} catch (IOException ex) {
					Activator.logError(ex);
				}
			}
		}
	}

	/**
	 * It's caller's responsibility to close reader once it's no longer needed
	 * @@throws CoreException
	 * @@throws UnsupportedEncodingException
	 */
	public Reader toContentsReader(IFile file) throws CoreException, UnsupportedEncodingException {
		InputStream is = file.getContents();
		return new InputStreamReader(is, Charset.forName(file.getCharset(true)));
	}

	/**
	 * @@param input it's invoker's responsibility to close input
	 * @@return writer full of data taken from input
	 * @@throws IOException
	 */
	public CharArrayWriter toCharWriter(Reader input) throws IOException {
		CharArrayWriter buffer = new CharArrayWriter(4096);
		int r;
		char[] cbuf = new char[4096];
		while ((r = input.read(cbuf)) != -1) {
			buffer.write(cbuf, 0, r);
		}
		return buffer;
	}
}
@


1.2
log
@refactored resource manager into capable working in workspace and working with uris, added experimental extended error reporting to provide more details on parsing errors
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d28 5
d37 5
d43 1
a43 1
		InputStream is = null;
d45 2
a46 2
			is = file.getContents();
			return toCharArray(is, Charset.forName(file.getCharset(true)));
d48 1
a48 1
			if (is != null) {
d50 1
a50 1
					is.close();
d58 8
a65 2
	public char[] toCharArray(InputStream is, Charset charSet) throws IOException {
		return toCharWriter(new InputStreamReader(is, charSet)).toCharArray();
d71 1
@

