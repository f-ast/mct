head	1.1;
access;
symbols
	v20081022-1925:1.1
	v20081020-0700:1.1
	ocl_qvt:1.1.0.6
	Root_ocl_qvt:1.1
	v20080722-1827:1.1
	v20080718-1731:1.1
	v20080716-1600:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080528-1052:1.1
	v20080516-1143:1.1
	v20080417-1610:1.1
	v20080322-0000:1.1
	v20080222-1200:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070518-1300:1.1
	v20070420-1000:1.1
	v20070405-1100:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	M3_20:1.1;
locks; strict;
comment	@# @;


1.1
date	2006.10.18.20.33.50;	author atikhomirov;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2008.08.05.12.49.25;	author atikhomirov;	state Exp;
branches;
next	1.1.6.2;
commitid	546c48984c4a4567;

1.1.6.2
date	2008.08.06.14.05.35;	author atikhomirov;	state Exp;
branches;
next	1.1.6.3;
commitid	35b4899afa74567;

1.1.6.3
date	2008.08.08.16.33.25;	author atikhomirov;	state Exp;
branches;
next	;
commitid	a21489c75534567;


desc
@@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@/*******************************************************************************
 * Copyright (c) 2005, 2006 committers of openArchitectureWare and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     committers of openArchitectureWare - initial API and implementation
 *******************************************************************************/
package org.eclipse.gmf.internal.xpand.model;

import org.eclipse.gmf.internal.xpand.ast.Advice;
import org.eclipse.gmf.internal.xpand.expression.Variable;
import org.eclipse.gmf.internal.xpand.expression.ast.DeclaredParameter;

public class AdvicedDefinition implements XpandDefinition {

    private XpandAdvice advice;

    private XpandDefinition definition;

    public AdvicedDefinition(final XpandAdvice adv, final XpandDefinition def) {
        advice = adv;
        definition = def;
    }

    public XpandResource getOwner() {
        return definition.getOwner();
    }

    public void evaluate(final XpandExecutionContext ctx) {
        final XpandExecutionContext ctx1 = (XpandExecutionContext) ctx.cloneWithVariable(new Variable(
                Advice.DEF_VAR_NAME, new XpandDefinitionWrap(definition, ctx)));
        advice.evaluate(ctx1);
    }

    public DeclaredParameter[] getParams() {
        return definition.getParams();
    }

    public String getTargetType() {
        return definition.getTargetType();
    }

    public String getName() {
        return definition.getName();
    }

    @@Override
    public String toString() {
        return definition.toString() + " adviced by " + advice.toString();
    }
}@


1.1.6.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d1 2
a2 2
/*
 * Copyright (c) 2005, 2008 committers of openArchitectureWare and others.
d10 1
a10 2
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
 */
d15 1
a15 2
import org.eclipse.gmf.internal.xpand.ocl.DeclaredParameter;
import org.eclipse.gmf.internal.xpand.ocl.TypeHelper;
d42 1
a42 1
    public TypeHelper getTargetType() {
@


1.1.6.2
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d15 1
d34 2
a35 2
    public void evaluate(final ExecutionContext ctx) {
        final ExecutionContext ctx1 = (ExecutionContext) ctx.cloneWithVariable(new Variable(
@


1.1.6.3
log
@[243154] Use OCL instead of home-grown expression language - populate ocl environment with variable types (hence, need to tell var value from var type)
@
text
@a13 1
import org.eclipse.gmf.internal.xpand.BuiltinMetaModel;
d35 1
a35 1
                Advice.DEF_VAR_NAME, BuiltinMetaModel.DEFINITION_TYPE, new XpandDefinitionWrap(definition, ctx)));
@


