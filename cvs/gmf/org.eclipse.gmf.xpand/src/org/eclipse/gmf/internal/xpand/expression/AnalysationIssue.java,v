head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081020-0700:1.2
	ocl_qvt:1.2.0.6
	Root_ocl_qvt:1.2
	v20080722-1827:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080528-1052:1.2
	v20080516-1143:1.2
	v20080417-1610:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070921-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070420-1000:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	M3_20:1.2;
locks; strict;
comment	@# @;


1.2
date	2006.11.09.18.00.11;	author atikhomirov;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2006.10.18.20.33.51;	author atikhomirov;	state Exp;
branches;
next	;

1.2.6.1
date	2008.08.05.12.49.25;	author atikhomirov;	state Exp;
branches;
next	1.2.6.2;
commitid	546c48984c4a4567;

1.2.6.2
date	2008.08.06.14.05.36;	author atikhomirov;	state dead;
branches;
next	;
commitid	35b4899afa74567;


desc
@@


1.2
log
@issue's type converted to enum, added decreased (warning) severity option toease development with xpand
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.expression;

import org.eclipse.gmf.internal.xpand.expression.ast.SyntaxElement;

/**
 * @@author Sven Efftinge
 * @@author Arno Haase
 */
public class AnalysationIssue {

    public enum Type {
        INCOMPATIBLE_TYPES("Incompatible types"),
        UNNECESSARY_CAST("Unnecessary cast"),
        FEATURE_NOT_FOUND("Callable not found"),
        TYPE_NOT_FOUND ("Type not found"),
        INTERNAL_ERROR("Internal error"),
        JAVA_TYPE_NOT_FOUND("Java Type not found"),
        SYNTAX_ERROR("Syntax error"),
        DEFINITION_NOT_FOUND("Definition not found");

        private String name;

        private Type(final String name) {
            this.name = name;
        }

        @@Override
        public String toString() {
            return name;
        }
    }

    private final Type type;

    private final String message;

    private final SyntaxElement element;

    private final boolean isWarningNotError;

    public AnalysationIssue(final Type type, final String message, final SyntaxElement element) {
    	this(type, message, element, false);
    }

    public AnalysationIssue(final Type type, final String message, final SyntaxElement element, boolean isWarningNotError) {
        this.type = type;
        this.message = message;
        this.element = element;
        this.isWarningNotError = isWarningNotError;
    }

    public boolean isWarningNotError() {
    	return isWarningNotError;
    }

    public SyntaxElement getElement() {
        return element;
    }

    public String getMessage() {
        return message;
    }

    public Type getType() {
        return type;
    }

    @@Override
    public String toString() {
        return "[" + type.name + "] - " + message + " : " + element;
    }
}
@


1.2.6.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
a13 1
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
a17 1
import org.eclipse.gmf.internal.xpand.ocl.ExpressionHelper;
a19 1
 * FIXME: refactor - hide enum type into factory method, check all types are still in use, get rid of isWarningNotError
a58 5
    // FIXME Hack to get over compilation issues. need to deal with absence of line information in the CST anyway.
    public AnalysationIssue(final Type type, final String message, final ExpressionHelper exprHelper) {
    	this(type, message, null, false);
    }

@


1.2.6.2
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d25 9
a33 1
    public final static Type INCOMPATIBLE_TYPES = new Type("Incompatible types");
a34 13
    public final static Type UNNECESSARY_CAST = new Type("Unnecessary cast");

    public final static Type FEATURE_NOT_FOUND = new Type("Callable not found");

    public static final Type TYPE_NOT_FOUND = new Type("Type not found");

    public static final Type INTERNAL_ERROR = new Type("Internal error");

    public static final Type JAVA_TYPE_NOT_FOUND = new Type("Java Type not found");

    public static final Type SYNTAX_ERROR = new Type("Syntax error");

    public final static class Type {
d37 1
a37 1
        public Type(final String name) {
d47 1
a47 1
    private Type type;
d49 1
a49 1
    private String message;
d51 3
a53 1
    private SyntaxElement element;
d56 4
d63 5
@

