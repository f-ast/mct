head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081020-0700:1.5
	ocl_qvt:1.5.0.6
	Root_ocl_qvt:1.5
	v20080722-1827:1.5
	v20080718-1731:1.5
	v20080716-1600:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080528-1052:1.5
	v20080516-1143:1.5
	v20080417-1610:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071108-0000:1.5
	v20071003-0000:1.5
	v20070921-0000:1.5
	v20070903-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070608-1300:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	v20070420-1000:1.5
	v20070405-1100:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20070208-1800:1.5
	v20070103-0300:1.5
	M4_20:1.5
	M3_20:1.5;
locks; strict;
comment	@# @;


1.5
date	2006.11.09.18.00.11;	author atikhomirov;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	2006.11.08.21.33.09;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.25.17.23.40;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.23.21.10.46;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.51;	author atikhomirov;	state Exp;
branches;
next	;

1.5.6.1
date	2008.08.06.14.05.34;	author atikhomirov;	state Exp;
branches;
next	;
commitid	35b4899afa74567;


desc
@@


1.5
log
@issue's type converted to enum, added decreased (warning) severity option toease development with xpand
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.util;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IWorkspaceRunnable;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.gmf.internal.xpand.Activator;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.util.ParserException.ErrorLocationInfo;

/**
 * FIXME fix syntax elements to keep not (only) line-relative column info, but buffer-related - otherwise
 * it makes no much sense for us to show markers
 */
public class OawMarkerManager {

	public static void addMarkers(final IFile file, AnalysationIssue... issues) {
		MarkerData[] data = new MarkerData[issues.length];
		int i = 0;
		for (AnalysationIssue issue : issues) {
			data[i++] = createMarkerData(issue);
		}
		internalAddMarker(file, data);
	}

	public static void addMarkers(IFile file, ErrorLocationInfo... issues) {
		MarkerData[] data = new MarkerData[issues.length];
		int i = 0;
		for (ErrorLocationInfo issue : issues) {
			int start = issue.startLine == issue.endLine ? issue.startColumn : -1;
			int end = issue.startLine == issue.endLine ? issue.endColumn : -1;
			data[i++] = new MarkerData(issue.message, IMarker.SEVERITY_ERROR, start, end, issue.startLine);
		}
		internalAddMarker(file, data);
	}

	public static void addErrorMarker(final IFile file, final String message, final int start, final int end) {
		internalAddMarker(file, new MarkerData(message, IMarker.SEVERITY_ERROR, start, end));
	}

	private static MarkerData createMarkerData(AnalysationIssue issue) {
		int start = -1, end = -1, line = -1;
		if (issue.getElement() != null) {
			start = issue.getElement().getStart() - 1;
			end = issue.getElement().getEnd() - 1;
			line = issue.getElement().getLine();
		}
		int severity = issue.isWarningNotError() ? IMarker.SEVERITY_WARNING : IMarker.SEVERITY_ERROR;
		return new MarkerData(issue.getMessage(), severity, start, end, line);
	}

	private static class MarkerData {
		final String message;
		final int severity;
		final int start;
		final int end;
		final int line;

		MarkerData(String message, int severity, int start, int end) {
			this(message, severity, start, end, -1);
		}

		MarkerData(String message, int severity, int start, int end, int line) {
			this.message = message;
			this.severity = severity;
			this.start = start;
			this.end = end;
			this.line = line;
		}
	}

	private static final String getMARKER_TYPE() {
		return Activator.getId() + ".problem";
	}

	private final static void internalAddMarker(final IFile file, final MarkerData... markerData) {
        try {
            file.getWorkspace().run(new IWorkspaceRunnable() {

            	public void run(IProgressMonitor monitor) throws CoreException {
					for (MarkerData d : markerData) {
						createMarker(d);
					}
                }

				private void createMarker(MarkerData data) throws CoreException {
					final IMarker marker = file.createMarker(getMARKER_TYPE());
                    marker.setAttribute(IMarker.MESSAGE, data.message);
                    marker.setAttribute(IMarker.SEVERITY, data.severity);
                    if (data.line != -1) {
                    	marker.setAttribute(IMarker.LINE_NUMBER, data.line);
                        marker.setAttribute(IMarker.LOCATION, toLocationString(data));
                    } else {
                    	// "else" clause here because in case we possess line number info, most probably
                    	// start and end are relative to that line, and are not file buffer positions (as it seems to be assumed by CHAR_START|END).
                    	if (data.start != -1 && data.end != -1) {
                    		marker.setAttribute(IMarker.CHAR_START, data.start);
                    		marker.setAttribute(IMarker.CHAR_END, data.end);
                    		marker.setAttribute(IMarker.LOCATION, toLocationString(data));
                    	}
                    }
				}

				private String toLocationString(MarkerData data) {
					StringBuilder sb = new StringBuilder();
					if (data.line != -1) {
						sb.append("line: ");
						sb.append(data.line);
					}
					if (data.start != -1 && data.end != -1) {
						boolean theOnlyData = sb.length() == 0;
						if (!theOnlyData) {
							sb.append(" (");
						}
						sb.append(data.start);
						sb.append(" .. ");
						sb.append(data.end);
						if (!theOnlyData) {
							sb.append(")");
						}
					}
					return sb.toString();
				}

            }, file.getWorkspace().getRuleFactory().markerRule(file), 0, new NullProgressMonitor());
        } catch (final CoreException e) {
            Activator.log(e.getStatus());
        }
    }

	public static void deleteMarkers(final IResource file) {
		try {
			if (!file.exists()) {
				return;
			}
			file.getWorkspace().run(new IWorkspaceRunnable() {

				public void run(final IProgressMonitor monitor) throws CoreException {
					file.deleteMarkers(getMARKER_TYPE(), true, IResource.DEPTH_INFINITE);
				}

			}, file.getWorkspace().getRuleFactory().markerRule(file), 0, new NullProgressMonitor());
		} catch (CoreException ce) {
			Activator.log(ce.getStatus());
		}
	}
}
@


1.5.6.1
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
d25 1
a25 1
import org.eclipse.gmf.internal.xpand.model.AnalysationIssue;
@


1.4
log
@use line positions if error fits single line
@
text
@d65 2
a66 1
		return new MarkerData(issue.getMessage(), IMarker.SEVERITY_ERROR, start, end, line);
@


1.3
log
@refactored resource manager into capable working in workspace and working with uris, added experimental extended error reporting to provide more details on parsing errors
@
text
@d47 3
a49 1
			data[i++] = new MarkerData(issue.message, IMarker.SEVERITY_ERROR, -1, -1, issue.startLine);
@


1.2
log
@markers refactored not to parse file when there's information about line number already available
@
text
@d26 1
d28 4
d43 9
a67 1

a68 1

a69 1

a70 1

@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@a16 3
import org.eclipse.core.filebuffers.FileBuffers;
import org.eclipse.core.filebuffers.ITextFileBuffer;
import org.eclipse.core.filebuffers.ITextFileBufferManager;
a21 1
import org.eclipse.core.runtime.IPath;
a25 2
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.jface.text.IDocument;
d29 50
a78 3
    private static final String getMARKER_TYPE() {
        return Activator.getId() + ".problem";
    }
d80 1
a80 1
    public static void addMarker(final IFile file, final AnalysationIssue issue) {
d82 1
a82 11
            final IMarker marker = file.createMarker(getMARKER_TYPE());
            final int severity = IMarker.SEVERITY_ERROR;
            int start = -1, end = -1;
            if (issue.getElement() != null) {
                start = issue.getElement().getStart() - 1;
                end = issue.getElement().getEnd() - 1;
            }
            internalAddMarker(file, marker, issue.getMessage(), severity, start, end);
        } catch (final CoreException e) {
        }
    }
d84 5
a88 9
    public static void addErrorMarker(final IFile file, final String message, final int severity, final int start,
            final int end) {
        try {
            final IMarker marker = file.createMarker(getMARKER_TYPE());
            internalAddMarker(file, marker, message, severity, start, end);
        } catch (final CoreException e) {
            Activator.log(e.getStatus());
        }
    }
d90 17
a106 13
    public static void addWarningMarker(final IFile file, final String message, final int severity, final int start,
            final int end) {
        try {
            final IMarker marker = file.createMarker(getMARKER_TYPE());
            internalAddMarker(file, marker, message, severity, start, end);
        } catch (final CoreException e) {
        }
    }

    private final static void internalAddMarker(final IFile file, final IMarker marker, final String message,
            final int severity, final int start, final int end) {
        try {
            file.getWorkspace().run(new IWorkspaceRunnable() {
d108 20
a127 34
				public void run(IProgressMonitor monitor) throws CoreException {
                    marker.setAttribute(IMarker.MESSAGE, message);
                    marker.setAttribute(IMarker.SEVERITY, severity);
                    int s = start;
                    if (start == -1) {
                        s = 1;
                    }
                    int e = end;
                    if (end <= start) {
                        e = start + 1;
                    }
                    marker.setAttribute(IMarker.CHAR_START, s);
                    marker.setAttribute(IMarker.CHAR_END, e);
                    final ITextFileBufferManager mgr = FileBuffers.getTextFileBufferManager();
                    if (mgr != null) {
                        final IPath location = file.getFullPath();
                        try {
                            mgr.connect(location, new NullProgressMonitor());
                            final ITextFileBuffer buff = mgr.getTextFileBuffer(file.getFullPath());
                            if (buff != null) {
                                final IDocument doc = buff.getDocument();
                                final int line = doc.getLineOfOffset(start);
                                if (line > 0) {
                                    marker.setAttribute(IMarker.LINE_NUMBER, doc.getLineOfOffset(start));
                                    marker.setAttribute(IMarker.LOCATION, "line: " + line);
                                }
                            }
                        } catch (BadLocationException ex) {
                        	// IGNORE
						} finally {
                            mgr.disconnect(location, new NullProgressMonitor());
                        }
                    }
                }
d129 1
a129 1
            }, file, 0, new NullProgressMonitor());
d135 16
a150 15
    public static void deleteMarkers(final IResource file) {
        try {
            if (file.exists()) {
                file.getWorkspace().run(new IWorkspaceRunnable() {

                    public void run(final IProgressMonitor monitor) throws CoreException {
                        file.deleteMarkers(getMARKER_TYPE(), true, IResource.DEPTH_INFINITE);
                    }

                }, file, 0, new NullProgressMonitor());
            }
        } catch (CoreException ce) {
            Activator.log(ce.getStatus());
        }
    }
@

