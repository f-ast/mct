head	1.6;
access;
symbols
	v20081022-1925:1.6
	v20081020-0700:1.6
	ocl_qvt:1.6.0.6
	Root_ocl_qvt:1.6
	v20080722-1827:1.6
	v20080718-1731:1.6
	v20080716-1600:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080528-1052:1.6
	v20080516-1143:1.6
	v20080417-1610:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070921-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070518-1300:1.6
	v20070420-1000:1.6
	v20070405-1100:1.6
	v20070403-1500:1.6
	v20070330-1300:1.6
	v20070208-1800:1.6
	v20070103-0300:1.6
	M4_20:1.6
	M3_20:1.6;
locks; strict;
comment	@# @;


1.6
date	2006.11.08.11.37.22;	author atikhomirov;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	2006.11.06.16.36.18;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.10.24.18.33.35;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.23.18.39.37;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.23.17.53.44;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.48;	author atikhomirov;	state Exp;
branches;
next	;

1.6.6.1
date	2008.07.29.15.57.04;	author ashatalin;	state dead;
branches;
next	;
commitid	337c488f3dcd4567;


desc
@@


1.6
log
@polishing templates - parser:added initialization code macro, lexer:getKind implementation made overridable, useless methods removed, braces styles updated
@
text
@--
-- Copyright (c) 2006 Borland Software Corp.
-- 
-- All rights reserved. This program and the accompanying materials
-- are made available under the terms of the Eclipse Public License v1.0
-- which accompanies this distribution, and is available at
-- http://www.eclipse.org/legal/epl-v10.html
--
-- Contributors:
--    Artem Tikhomirov (Borland)
--

%options fp=XtendParser,prefix=TK_
%options programming_language=java
%options package=org.eclipse.gmf.internal.xpand.xtend.parser
%options template=../../expression/parser/dtParserTemplateD.g
%options ast_type=ExtensionFile
%options import_terminals=XtendLexer.g
%options lalr=2

$Globals
	/.
	import org.eclipse.gmf.internal.xpand.expression.parser.ExpressionFactory;
	import org.eclipse.gmf.internal.xpand.xtend.ast.*;
	./
$End

$Headers
	/.
		private final ExtensionFactory xtendFactory;
	./
$End

$Start
	extensionFile
$End

$Import
	../../expression/parser/ExpressionParser.g
$End

$Define
	$initialization_code /.xtendFactory = new ExtensionFactory(lexStream.getFileName());
            factory = new ExpressionFactory(lexStream.getFileName());./
$End

$Terminals
	import extension reexport private create cached
	JAVA GLOBALVAR 

	SEMI ::= ';'
$End

$Rules
	extensionFile ::= nsImportsList extImportsList extensions
		/.$BeginJava
			setResult(xtendFactory.createExtensionFile((List) getRhsSym(1) , (List) getRhsSym(2), (List) getRhsSym(3)));
		$EndJava./

	nsImportsList ::= $empty
		/.$BeginJava
			setResult(Collections.EMPTY_LIST);
		$EndJava./
	nsImportsList ::= nsImport nsImportsList
		/.$BeginJava
			List res = new LinkedList();
			res.add(getRhsSym(1));
			res.addAll((List) getRhsSym(2));
			setResult(res);
		$EndJava./

	nsImport ::= 'import' STRING SEMI
		/.$BeginJava
			StringLiteral st = xtendFactory.createStringLiteral(getRhsIToken(2));
			setResult(xtendFactory.createNsImport(getLeftIToken(), getRightIToken(), st));
		$EndJava./


	extImportsList ::= $empty
		/.$BeginJava
			setResult(Collections.EMPTY_LIST);
		$EndJava./
	extImportsList ::= extImport extImportsList
		/.$BeginJava
			List res = new LinkedList();
			res.add(getRhsSym(1));
			res.addAll((List) getRhsSym(2));
			setResult(res);
		$EndJava./

	extImport ::= 'extension' type SEMI
		/.$BeginJava
			setResult(xtendFactory.createExtensionFileImport(getLeftIToken(), getRightIToken(), (Identifier) getRhsSym(2), null));
		$EndJava./

	extImport ::= 'extension' type 'reexport' SEMI
		/.$BeginJava
			setResult(xtendFactory.createExtensionFileImport(getLeftIToken(), getRightIToken(), (Identifier) getRhsSym(2), getRhsIToken(3)));
		$EndJava./

	extensions ::= $empty
		/.$BeginJava
			setResult(Collections.EMPTY_LIST);
		$EndJava./
	extensions ::= extensionDef extensions
		/.$BeginJava
			List res = new LinkedList();
			res.add(getRhsSym(1));
			res.addAll((List) getRhsSym(2));
			setResult(res);
		$EndJava./

	extensionDef -> regularExtension | createExtension

	-- though both JavaExtension and WorkflowExtensions do require type specified, changing typeOpt to type leads to grammar not being LALR(2), hence need more exploration
	regularExtension ::= visibilityOpt cachedOpt typeOpt IDENT LPAREN declaredParameterListOpt RPAREN COLON 'JAVA' instanceSlotOpt javaType LPAREN javaParamsOpt RPAREN SEMI
		/.$BeginJava
			setResult(xtendFactory.createJavaExtension(getRhsIToken(4), getRightIToken(), (Identifier) getRhsSym(3), (List) getRhsSym(6), (Identifier) getRhsSym(11), (List) getRhsSym(13), (IToken) getRhsSym(2), (IToken) getRhsSym(1), (Identifier) getRhsSym(10)));
		$EndJava./
	regularExtension ::= visibilityOpt cachedOpt typeOpt IDENT LPAREN declaredParameterListOpt RPAREN COLON 'GLOBALVAR' slot SEMI
		/.$BeginJava
			setResult(xtendFactory.createWorkflowSlotExtension(getRhsIToken(4), getRightIToken(), (Identifier) getRhsSym(3), (List) getRhsSym(6), (Identifier) getRhsSym(10), (IToken) getRhsSym(2), (IToken) getRhsSym(1)));
		$EndJava./
	regularExtension ::= visibilityOpt cachedOpt typeOpt IDENT LPAREN declaredParameterListOpt RPAREN COLON expression SEMI
		/.$BeginJava
			setResult(xtendFactory.createExpressionExtension(getRhsIToken(4), getRightIToken(), (Identifier) getRhsSym(3), (List) getRhsSym(6), (Expression) getRhsSym(9), (IToken) getRhsSym(2), (IToken) getRhsSym(1)));
		$EndJava./

	createExtension ::= visibilityOpt 'create' type identOpt IDENT LPAREN declaredParameterListOpt RPAREN COLON expression SEMI
		/.$BeginJava
			setResult(xtendFactory.createCreateExtension(getRhsIToken(2), getRightIToken(), (Identifier) getRhsSym(3), (IToken) getRhsSym(4), getRhsIToken(5), (List) getRhsSym(7), (Expression) getRhsSym(10), (IToken) getRhsSym(1)));
		$EndJava./

	visibilityOpt ::= $empty
		/.$BeginJava
			setResult(null);
		$EndJava./
	visibilityOpt ::= 'private'
		/.$BeginJava
			setResult(getLeftIToken());
		$EndJava./

	cachedOpt ::= $empty
		/.$BeginJava
			setResult(null);
		$EndJava./
	cachedOpt ::= 'cached'
		/.$BeginJava
			setResult(getLeftIToken());
		$EndJava./

	typeOpt ::= $empty
		/.$BeginJava
			setResult(null);
		$EndJava./
	typeOpt -> type

	identOpt ::= $empty
		/.$BeginJava
			setResult(null);
		$EndJava./
	identOpt ::= IDENT
		/.$BeginJava
			setResult(getLeftIToken());
		$EndJava./

	instanceSlotOpt ::= $empty
		/.$BeginJava
			setResult(null);
		$EndJava./
	instanceSlotOpt ::= '[' slot ']'
		/.$BeginJava
			setResult(getRhsSym(2));
		$EndJava./

	javaType ::= IDENT javaTypeSuffix
		/.$BeginJava
			Identifier res = xtendFactory.createIdentifier(getRhsIToken(1));
			for (Object o : (List) getRhsSym(2)) {
				res = res.append(factory.createIdentifier((IToken) o));
			}
			setResult(res);
		$EndJava./

	javaTypeSuffix ::= $empty
		/.$BeginJava
			setResult(Collections.EMPTY_LIST);
		$EndJava./
	javaTypeSuffix ::= DOT IDENT javaTypeSuffix
		/.$BeginJava
			List res = new LinkedList();
			res.add(getRhsIToken(1));
			res.add(getRhsIToken(2));
			res.addAll((List) getRhsSym(3));
			setResult(res);
		$EndJava./
	javaTypeSuffix ::= DOT 'Collection' javaTypeSuffix
		/.$BeginJava
			List res = new LinkedList();
			res.add(getRhsIToken(1));
			res.add(getRhsIToken(2));
			res.addAll((List) getRhsSym(3));
			setResult(res);
		$EndJava./
	javaTypeSuffix ::= DOT 'List' javaTypeSuffix
		/.$BeginJava
			List res = new LinkedList();
			res.add(getRhsIToken(1));
			res.add(getRhsIToken(2));
			res.addAll((List) getRhsSym(3));
			setResult(res);
		$EndJava./
	javaTypeSuffix ::= DOT 'Set' javaTypeSuffix
		/.$BeginJava
			List res = new LinkedList();
			res.add(getRhsIToken(1));
			res.add(getRhsIToken(2));
			res.addAll((List) getRhsSym(3));
			setResult(res);
		$EndJava./

	javaParamsOpt ::= $empty
		/.$BeginJava
			setResult(Collections.EMPTY_LIST);
		$EndJava./
	javaParamsOpt -> javaParams
	javaParams ::= javaType
		/.$BeginJava
			setResult(Collections.singletonList(getRhsSym(1)));
		$EndJava./
	javaParams ::= javaType COMMA javaParams
		/.$BeginJava
			List res = new LinkedList();
			res.add(getRhsSym(1));
			res.addAll((List) getRhsSym(3));
			setResult(res);
		$EndJava./

	slot ::= IDENT
		/.$BeginJava
			setResult(xtendFactory.createIdentifier(getLeftIToken()));
		$EndJava./

$End@


1.6.6.1
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@@


1.5
log
@handle dollar sign ($) correctly inside strings/comments
do not use external includes and copy external templates locally to be able to tweak them
minor changes to the includes
@
text
@d42 5
@


1.4
log
@support for instance method access in JAVA extensions added
@
text
@d16 1
a16 1
%options template=dtParserTemplateD.g
@


1.3
log
@unmodifiable model, and refactored Identifiers as the only place that required ast to be modified
@
text
@d30 1
a30 1
		private final ExtensionFactory xtendFactory = new ExtensionFactory();
d110 2
a111 1
	regularExtension ::= visibilityOpt cachedOpt typeOpt IDENT LPAREN declaredParameterListOpt RPAREN COLON 'JAVA' javaType LPAREN javaParamsOpt RPAREN SEMI
d113 1
a113 1
			setResult(xtendFactory.createJavaExtension(getRhsIToken(4), getRightIToken(), (Identifier) getRhsSym(3), (List) getRhsSym(6), (Identifier) getRhsSym(10), (List) getRhsSym(12), (IToken) getRhsSym(2), (IToken) getRhsSym(1)));
d162 9
@


1.2
log
@updated copyrights
@
text
@d165 1
a165 1
				res.append((IToken) o);
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d2 1
a2 1
-- Copyright (c) 2006 Eclipse.org
a20 11
$Notice
/*******************************************************************************
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
$End

d24 1
a24 1
	import org.eclipse.xpand.internal.xtend.ast.*;
@

