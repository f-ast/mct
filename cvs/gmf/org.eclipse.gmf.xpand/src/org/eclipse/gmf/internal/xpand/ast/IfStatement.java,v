head	1.3;
access;
symbols
	v20081022-1925:1.3
	v20081020-0700:1.3
	ocl_qvt:1.3.0.6
	Root_ocl_qvt:1.3
	v20080722-1827:1.3
	v20080718-1731:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080528-1052:1.3
	v20080516-1143:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070921-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	v20070420-1000:1.3
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20070208-1800:1.3
	v20070103-0300:1.3
	M4_20:1.3
	M3_20:1.3;
locks; strict;
comment	@# @;


1.3
date	2006.11.09.18.00.11;	author atikhomirov;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	2006.10.23.18.58.22;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.51;	author atikhomirov;	state Exp;
branches;
next	;

1.3.6.1
date	2008.08.05.12.49.25;	author atikhomirov;	state Exp;
branches;
next	1.3.6.2;
commitid	546c48984c4a4567;

1.3.6.2
date	2008.08.06.14.05.35;	author atikhomirov;	state Exp;
branches;
next	1.3.6.3;
commitid	35b4899afa74567;

1.3.6.3
date	2008.08.07.23.23.37;	author atikhomirov;	state Exp;
branches;
next	1.3.6.4;
commitid	55a7489b83f64567;

1.3.6.4
date	2008.08.08.18.15.51;	author atikhomirov;	state Exp;
branches;
next	;
commitid	51ea489c8d554567;


desc
@@


1.3
log
@issue's type converted to enum, added decreased (warning) severity option toease development with xpand
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.ast;

import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.internal.xpand.BuiltinMetaModel;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.EvaluationException;
import org.eclipse.gmf.internal.xpand.expression.ast.Expression;
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;

/**
 * @@author Sven Efftinge
 */
public class IfStatement extends Statement {

    private final Expression condition;

    private final Statement[] thenPart;

    private IfStatement elseIf;

    public IfStatement(final int start, final int end, final int line, final Expression condition,
            final Statement[] thenPart, final IfStatement elseIf) {
        super(start, end, line);
        this.condition = condition;
        this.thenPart = thenPart;
        this.elseIf = elseIf;
    }

    public Expression getCondition() {
        return condition;
    }

    public IfStatement getElseIf() {
        return elseIf;
    }

    // XXX modifiable AST
    public void setElseIf(final IfStatement elseIf) {
        this.elseIf = elseIf;
    }

    public Statement[] getThenPart() {
        return thenPart;
    }

    public void analyze(final XpandExecutionContext ctx, final Set<AnalysationIssue> issues) {
        if (condition != null) {
            final EClassifier conType = getCondition().analyze(ctx, issues);
            if ((conType != null) && !BuiltinMetaModel.isAssignableFrom(EcorePackage.eINSTANCE.getEBoolean(), conType)) {
                issues.add(new AnalysationIssue(AnalysationIssue.Type.INCOMPATIBLE_TYPES, "Boolean expected!",
                        getCondition()));
            }
        }
        for (int i = 0; i < getThenPart().length; i++) {
            getThenPart()[i].analyze(ctx, issues);
        }
        if (getElseIf() != null) {
            getElseIf().analyze(ctx, issues);
        }
    }

    @@Override
    public void evaluateInternal(final XpandExecutionContext ctx) {
        if (condition != null) {
            final Object result = getCondition().evaluate(ctx);
            if (result == null) {
				throw new EvaluationException("Nullevaluation!", getCondition());
			}
            if (!(result instanceof Boolean)) {
				throw new EvaluationException("Boolean expected!", getCondition());
			}
            if (((Boolean) result).booleanValue()) {
                for (int i = 0; i < getThenPart().length; i++) {
                    getThenPart()[i].evaluate(ctx);
                }
            } else if (getElseIf() != null) {
                getElseIf().evaluate(ctx);
            }
        } else {
            for (int i = 0; i < getThenPart().length; i++) {
                getThenPart()[i].evaluate(ctx);
            }
        }
    }

}
@


1.3.6.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
a13 1
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
d24 1
a25 2
import org.eclipse.gmf.internal.xpand.ocl.ExpressionHelper;
import org.eclipse.ocl.cst.OCLExpressionCS;
d32 1
a32 1
    private final ExpressionHelper condition;
d38 1
a38 1
    public IfStatement(final int start, final int end, final int line, final OCLExpressionCS condition,
d41 1
a41 1
        this.condition = new ExpressionHelper(condition);
d46 7
a52 3
	public IfStatement getElseIf() {
		return elseIf;
	}
d59 4
d65 1
a65 1
            final EClassifier conType = condition.analyze(ctx, issues);
d67 2
a68 1
                issues.add(new AnalysationIssue(AnalysationIssue.Type.INCOMPATIBLE_TYPES, "Boolean expected!", condition));
d71 2
a72 2
        for (int i = 0; i < thenPart.length; i++) {
            thenPart[i].analyze(ctx, issues);
d74 2
a75 2
        if (elseIf != null) {
            elseIf.analyze(ctx, issues);
d82 1
a82 1
            final Object result = condition.evaluate(ctx);
d84 1
a84 1
				throw new EvaluationException("Nullevaluation!", this, condition.getCST());
d87 1
a87 1
				throw new EvaluationException("Boolean expected!", this, condition.getCST());
d90 2
a91 2
                for (int i = 0; i < thenPart.length; i++) {
                    thenPart[i].evaluate(ctx);
d93 2
a94 2
            } else if (elseIf != null) {
                elseIf.evaluate(ctx);
d97 2
a98 2
            for (int i = 0; i < thenPart.length; i++) {
                thenPart[i].evaluate(ctx);
d102 1
@


1.3.6.2
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d19 3
a21 3
import org.eclipse.gmf.internal.xpand.model.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.model.EvaluationException;
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
d53 1
a53 1
    public void analyze(final ExecutionContext ctx, final Set<AnalysationIssue> issues) {
d69 1
a69 1
    public void evaluateInternal(final ExecutionContext ctx) {
@


1.3.6.3
log
@[243154] Use OCL instead of home-grown expression language - fixing and running tests.
@
text
@d39 1
a39 1
        this.condition = condition == null ? null : new ExpressionHelper(condition);
a43 7
    /**
	 * FIXME used in tests only, should I keep it?
	 */
	public ExpressionHelper getCondition() {
		return condition;
	}

@


1.3.6.4
log
@[243154] Use OCL instead of home-grown expression language - AOP tests fixed, though with sort of hack to pass proceed() java method implementation to OCL
@
text
@d17 2
d63 1
a63 1
            if (conType != ctx.getOCLEnvironment().getOCLStandardLibrary().getBoolean()) {
@


1.2
log
@finals
@
text
@d67 1
a67 1
                issues.add(new AnalysationIssue(AnalysationIssue.INCOMPATIBLE_TYPES, "Boolean expected!",
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d28 1
a28 3
 * *
 * 
 * @@author Sven Efftinge *
d32 1
a32 1
    private Expression condition;
d34 1
a34 1
    private Statement[] thenPart;
d54 1
@

