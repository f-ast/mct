head	1.3;
access;
symbols
	v20081022-1925:1.3
	v20081020-0700:1.3
	ocl_qvt:1.3.0.6
	Root_ocl_qvt:1.3
	v20080722-1827:1.3
	v20080718-1731:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080528-1052:1.3
	v20080516-1143:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070921-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	v20070420-1000:1.3
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20070208-1800:1.3
	v20070103-0300:1.3
	M4_20:1.3
	M3_20:1.3;
locks; strict;
comment	@# @;


1.3
date	2006.11.09.18.00.11;	author atikhomirov;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	2006.10.23.18.58.22;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.51;	author atikhomirov;	state Exp;
branches;
next	;

1.3.6.1
date	2008.08.05.12.49.25;	author atikhomirov;	state Exp;
branches;
next	1.3.6.2;
commitid	546c48984c4a4567;

1.3.6.2
date	2008.08.06.14.05.36;	author atikhomirov;	state Exp;
branches;
next	1.3.6.3;
commitid	35b4899afa74567;

1.3.6.3
date	2008.08.07.23.23.37;	author atikhomirov;	state Exp;
branches;
next	1.3.6.4;
commitid	55a7489b83f64567;

1.3.6.4
date	2008.08.08.16.32.18;	author atikhomirov;	state Exp;
branches;
next	1.3.6.5;
commitid	9a2489c75114567;

1.3.6.5
date	2008.08.08.18.15.51;	author atikhomirov;	state Exp;
branches;
next	;
commitid	51ea489c8d554567;


desc
@@


1.3
log
@issue's type converted to enum, added decreased (warning) severity option toease development with xpand
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.ast;

import java.util.Collection;
import java.util.Iterator;
import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.internal.xpand.BuiltinMetaModel;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.EvaluationException;
import org.eclipse.gmf.internal.xpand.expression.Variable;
import org.eclipse.gmf.internal.xpand.expression.ast.Expression;
import org.eclipse.gmf.internal.xpand.expression.ast.Identifier;
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;
import org.eclipse.gmf.internal.xpand.model.XpandIterator;

/**
 * @@author Sven Efftinge
 */
public class ForEachStatement extends Statement {

    public static final String ITERATOR_VAR_NAME = "iterator";

    private final Statement[] body;

    private final Expression target;

    private final Expression separator;

    private final Identifier variable;

    private final Identifier iteratorName;

    public ForEachStatement(final int start, final int end, final int line, final Identifier variable,
            final Expression target, final Statement[] body, final Expression separator, final Identifier iterator) {
        super(start, end, line);
        this.variable = variable;
        this.target = target;
        this.body = body;
        this.separator = separator;
        iteratorName = iterator;
    }

    public Statement[] getBody() {
        return body;
    }

    public Expression getSeparator() {
        return separator;
    }

    public Expression getTarget() {
        return target;
    }

    public Identifier getVariable() {
        return variable;
    }

    public void analyze(XpandExecutionContext ctx, final Set<AnalysationIssue> issues) {
    	EClassifier t = getTarget().analyze(ctx, issues);
        if (getSeparator() != null) {
            final EClassifier sepT = getSeparator().analyze(ctx, issues);
            if (!BuiltinMetaModel.isAssignableFrom(EcorePackage.eINSTANCE.getEString(), sepT)) {
                issues.add(new AnalysationIssue(AnalysationIssue.Type.INCOMPATIBLE_TYPES, "String expected!", target));
            }
        }
        if (t != null) {
            if (BuiltinMetaModel.isCollectionType(t)) {
                if (BuiltinMetaModel.isParameterizedType(t)) {
                    t = BuiltinMetaModel.getInnerType(t);
                } else {
                    t = EcorePackage.eINSTANCE.getEJavaObject();
                }
            } else {
                issues.add(new AnalysationIssue(AnalysationIssue.Type.INCOMPATIBLE_TYPES, "Collection type expected!",
                        target));
                return;
            }
        }
        ctx = ctx.cloneWithVariable(new Variable(getVariable().getValue(), t));
        if (iteratorName != null) {
            ctx = ctx.cloneWithVariable(new Variable(iteratorName.getValue(), BuiltinMetaModel.ITERATOR_TYPE));
        }
        for (Statement statement : getBody()) {
            statement.analyze(ctx, issues);
        }
    }

    @@Override
    public void evaluateInternal(XpandExecutionContext ctx) {
        final Object o = getTarget().evaluate(ctx);

        if (!(o instanceof Collection)) {
			throw new EvaluationException("Collection expected!", getTarget());
		}
        final Collection<?> col = (Collection<?>) o;
        final String sep = (String) (getSeparator() != null ? getSeparator().evaluate(ctx) : null);
        final XpandIterator iterator = new XpandIterator(col.size());

        if (iteratorName != null) {
            ctx = ctx.cloneWithVariable(new Variable(iteratorName.getValue(), iterator));
        }
        for (final Iterator<?> iter = col.iterator(); iter.hasNext();) {
            final Object element = iter.next();
            ctx = ctx.cloneWithVariable(new Variable(getVariable().getValue(), element));
            for (int i = 0; i < getBody().length; i++) {
                getBody()[i].evaluate(ctx);
            }
            if ((sep != null) && iter.hasNext()) {
                ctx.getOutput().write(sep);
            }
            iterator.increment();
        }
    }
}
@


1.3.6.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
a13 1
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
d27 1
a30 2
import org.eclipse.gmf.internal.xpand.ocl.ExpressionHelper;
import org.eclipse.ocl.cst.OCLExpressionCS;
d41 1
a41 1
    private final ExpressionHelper target;
d43 1
a43 1
    private final ExpressionHelper separator;
d50 1
a50 1
            final OCLExpressionCS target, final Statement[] body, final OCLExpressionCS separator, final Identifier iterator) {
d53 1
a53 1
        this.target = new ExpressionHelper(target);
d55 1
a55 1
        this.separator = new ExpressionHelper(separator);
d59 16
d76 3
a78 3
    	EClassifier t = target.analyze(ctx, issues);
        if (separator != null) {
            final EClassifier sepT = separator.analyze(ctx, issues);
d91 2
a92 1
                issues.add(new AnalysationIssue(AnalysationIssue.Type.INCOMPATIBLE_TYPES, "Collection type expected!", target));
d96 1
a96 1
        ctx = ctx.cloneWithVariable(new Variable(variable.getValue(), t));
d100 1
a100 1
        for (Statement statement : body) {
d107 1
a107 1
        final Object o = target.evaluate(ctx);
d110 1
a110 1
			throw new EvaluationException("Collection expected!", this, target.getCST());
d113 1
a113 1
        final String sep = (String) (separator != null ? separator.evaluate(ctx) : null);
d121 3
a123 3
            ctx = ctx.cloneWithVariable(new Variable(variable.getValue(), element));
            for (int i = 0; i < body.length; i++) {
                body[i].evaluate(ctx);
@


1.3.6.2
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d21 3
d25 1
a25 4
import org.eclipse.gmf.internal.xpand.model.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.model.EvaluationException;
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
import org.eclipse.gmf.internal.xpand.model.Variable;
d57 1
a57 1
    public void analyze(ExecutionContext ctx, final Set<AnalysationIssue> issues) {
d87 1
a87 1
    public void evaluateInternal(ExecutionContext ctx) {
d107 1
a107 1
                ctx.getScope().getOutput().write(sep);
@


1.3.6.3
log
@[243154] Use OCL instead of home-grown expression language - fixing and running tests.
@
text
@d53 1
a53 1
        this.separator = separator == null ? null : new ExpressionHelper(separator);
@


1.3.6.4
log
@[243154] Use OCL instead of home-grown expression language - use appropriate way to tell if type is collection or not
@
text
@a28 1
import org.eclipse.ocl.ecore.CollectionType;
d35 1
a35 1
	public static final String ITERATOR_VAR_NAME = "iterator";
d37 1
a37 1
	private final Statement[] body;
d39 1
a39 1
	private final ExpressionHelper target;
d41 1
a41 1
	private final ExpressionHelper separator;
d43 46
a88 38
	private final Identifier variable;

	private final Identifier iteratorName;

	public ForEachStatement(final int start, final int end, final int line, final Identifier variable, final OCLExpressionCS target, final Statement[] body, final OCLExpressionCS separator, final Identifier iterator) {
		super(start, end, line);
		this.variable = variable;
		this.target = new ExpressionHelper(target);
		this.body = body;
		this.separator = separator == null ? null : new ExpressionHelper(separator);
		iteratorName = iterator;
	}

	public void analyze(ExecutionContext ctx, final Set<AnalysationIssue> issues) {
		EClassifier t = target.analyze(ctx, issues);
		if (separator != null) {
			final EClassifier sepT = separator.analyze(ctx, issues);
			if (!BuiltinMetaModel.isAssignableFrom(EcorePackage.eINSTANCE.getEString(), sepT)) {
				issues.add(new AnalysationIssue(AnalysationIssue.Type.INCOMPATIBLE_TYPES, "String expected!", target));
			}
		}
		if (t != null) {
			if (t instanceof CollectionType) {
				t = ((CollectionType) t).getElementType();
			} else {
				issues.add(new AnalysationIssue(AnalysationIssue.Type.INCOMPATIBLE_TYPES, "Collection type expected!", target));
				return;
			}
		}
		// XXX odd - is t == null ok here?
		ctx = ctx.cloneWithVariable(new Variable(variable.getValue(), t, null));
		if (iteratorName != null) {
			ctx = ctx.cloneWithVariable(new Variable(iteratorName.getValue(), BuiltinMetaModel.ITERATOR_TYPE, null));
		}
		for (Statement statement : body) {
			statement.analyze(ctx, issues);
		}
	}
d90 1
a90 5
	@@Override
	public void evaluateInternal(ExecutionContext ctx) {
		final Object o = target.evaluate(ctx);

		if (!(o instanceof Collection)) {
d93 19
a111 19
		final Collection<?> col = (Collection<?>) o;
		final String sep = (String) (separator != null ? separator.evaluate(ctx) : null);
		final XpandIterator iterator = new XpandIterator(col.size());

		if (iteratorName != null) {
			ctx = ctx.cloneWithVariable(new Variable(iteratorName.getValue(), BuiltinMetaModel.ITERATOR_TYPE, iterator));
		}
		for (final Iterator<?> iter = col.iterator(); iter.hasNext();) {
			final Object element = iter.next();
			ctx = ctx.cloneWithVariable(new Variable(variable.getValue(), null, element));
			for (int i = 0; i < body.length; i++) {
				body[i].evaluate(ctx);
			}
			if ((sep != null) && iter.hasNext()) {
				ctx.getScope().getOutput().write(sep);
			}
			iterator.increment();
		}
	}
@


1.3.6.5
log
@[243154] Use OCL instead of home-grown expression language - AOP tests fixed, though with sort of hack to pass proceed() java method implementation to OCL
@
text
@d19 1
d61 1
a61 1
			if (ctx.getOCLEnvironment().getOCLStandardLibrary().getString() != sepT) {
@


1.2
log
@finals
@
text
@d80 1
a80 1
                issues.add(new AnalysationIssue(AnalysationIssue.INCOMPATIBLE_TYPES, "String expected!", target));
d91 1
a91 1
                issues.add(new AnalysationIssue(AnalysationIssue.INCOMPATIBLE_TYPES, "Collection type expected!",
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d33 1
a33 3
 * *
 * 
 * @@author Sven Efftinge *
d39 1
a39 1
    private Statement[] body;
d41 1
a41 1
    private Expression target;
d43 1
a43 1
    private Expression separator;
d45 1
a45 1
    private Identifier variable;
d47 1
a47 1
    private Identifier iteratorName;
a130 1

@

