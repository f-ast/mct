head	1.1;
access;
symbols
	v20081022-1925:1.1
	v20081020-0700:1.1
	ocl_qvt:1.1.0.4
	Root_ocl_qvt:1.1
	v20080722-1827:1.1
	v20080718-1731:1.1
	v20080716-1600:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.2
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080528-1052:1.1
	v20080516-1143:1.1
	v20080417-1610:1.1
	v20080322-0000:1.1
	v20080222-1200:1.1
	v20071130-1111:1.1
	v20071108-0000:1.1;
locks; strict;
comment	@# @;


1.1
date	2007.10.29.16.58.24;	author atikhomirov;	state Exp;
branches
	1.1.4.1;
next	;
commitid	5b914726112d4567;

1.1.4.1
date	2008.07.29.15.57.04;	author ashatalin;	state Exp;
branches;
next	1.1.4.2;
commitid	337c488f3dcd4567;

1.1.4.2
date	2008.08.05.12.49.26;	author atikhomirov;	state Exp;
branches;
next	1.1.4.3;
commitid	546c48984c4a4567;

1.1.4.3
date	2008.08.06.14.05.34;	author atikhomirov;	state Exp;
branches;
next	;
commitid	35b4899afa74567;


desc
@@


1.1
log
@[207437] Resources to be composed from several sources
@
text
@/**
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.internal.xpand.util;

import java.util.Arrays;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.model.XpandDefinition;
import org.eclipse.gmf.internal.xpand.xtend.ast.Extension;

final class DefinitionSignature {
	private final String myName;
	private final EClassifier myType;
	private final EClassifier[] myArgs;

	public static DefinitionSignature create(ExecutionContext ctx, XpandDefinition def) {
		if (def == null || ctx == null) {
			return null;
		}
		EClassifier type = ctx.getTypeForName(def.getTargetType());
		if (type == null) {
			return null;
		}
		EClassifier[] args = new EClassifier[def.getParams().length];
		for (int i = 0; i < def.getParams().length; i++) {
			EClassifier nextArg = ctx.getTypeForName(def.getParams()[i].getType().getValue());
			if (nextArg == null) {
				return null;
			}
			args[i] = nextArg;
		}
		return new DefinitionSignature(def.getName(), type, args);
	}

	public static DefinitionSignature create(ExecutionContext ctx, Extension extension) {
		if (extension == null || ctx == null) {
			return null;
		}
		extension.init(ctx);
		return new DefinitionSignature(extension.getName(), null, extension.getParameterTypes().toArray(new EClassifier[extension.getParameterTypes().size()]));
	}

	private DefinitionSignature(String name, EClassifier type, EClassifier[] args) {
		myName = name;
		myType = type;
		myArgs = args;
		assert myName != null;
		assert myArgs != null;
		for (EClassifier nextArg : myArgs) {
			assert nextArg != null;
		}
	}
	public boolean equals(Object o) {
		if (o instanceof DefinitionSignature) {
			DefinitionSignature that = (DefinitionSignature) o;
			return this.myName.equals(that.myName) && ((this.myType == null && that.myType == null) || this.myType.equals(that.myType)) && Arrays.equals(this.myArgs, that.myArgs);
		}
		return false;
	}
	@@Override
	public int hashCode() {
		return myName.hashCode() + (myType == null ? 0 : 17*myType.hashCode()) + 31*Arrays.hashCode(myArgs);
	}
}
@


1.1.4.1
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@d19 1
d45 8
@


1.1.4.2
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d1 2
a2 2
/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
d17 1
a18 1
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;
d25 1
a25 1
	public static DefinitionSignature create(XpandExecutionContext ctx, XpandDefinition def) {
d29 1
a29 1
		EClassifier type = def.getTargetType().getTypeForName(ctx);
d35 1
a35 1
			EClassifier nextArg = def.getParams()[i].getTypeForName(ctx);
@


1.1.4.3
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d18 1
a18 1
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
d25 1
a25 1
	public static DefinitionSignature create(ExecutionContext ctx, XpandDefinition def) {
@


