head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081020-0700:1.2
	ocl_qvt:1.2.0.6
	Root_ocl_qvt:1.2
	v20080722-1827:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080528-1052:1.2
	v20080516-1143:1.2
	v20080417-1610:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070921-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070420-1000:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	M3_20:1.2;
locks; strict;
comment	@# @;


1.2
date	2006.10.23.18.58.22;	author atikhomirov;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2006.10.18.20.33.50;	author atikhomirov;	state Exp;
branches;
next	;

1.2.6.1
date	2008.08.05.12.49.25;	author atikhomirov;	state Exp;
branches;
next	1.2.6.2;
commitid	546c48984c4a4567;

1.2.6.2
date	2008.08.06.14.05.35;	author atikhomirov;	state Exp;
branches;
next	;
commitid	35b4899afa74567;


desc
@@


1.2
log
@finals
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.ast;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.TypeNameUtil;
import org.eclipse.gmf.internal.xpand.expression.ast.SyntaxElement;
import org.eclipse.gmf.internal.xpand.model.XpandAdvice;
import org.eclipse.gmf.internal.xpand.model.XpandDefinition;
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;
import org.eclipse.gmf.internal.xpand.model.XpandResource;

/**
 * @@author Sven Efftinge
 */
public class Template extends SyntaxElement implements XpandResource {
    private final NamespaceImport[] imports;

    private final Definition[] definitions;

    private final ImportDeclaration[] extensions;

    private final Advice[] advices;

	private String qualifiedName;

    public ImportDeclaration[] getExtensions() {
        return extensions;
    }

    public String getFullyQualifiedName() {
    	// XXX what's the reason to have both file name and qualified name?
        return qualifiedName == null ? getFileName() : qualifiedName;
    }

    public void setFullyQualifiedName(String name) {
    	qualifiedName = name;
    }

    public Template(final int start, final int end, final int line, final NamespaceImport[] imports,
            final ImportDeclaration[] extensions, final Definition[] definitions, final Advice[] advices) {
        super(start, end, line);
        this.imports = imports;
        this.extensions = extensions;
        for (Definition element : definitions) {
            element.setOwner(this);
        }
        this.definitions = definitions;
        for (Advice element : advices) {
            element.setOwner(this);
        }
        this.advices = advices;
    }

    public XpandDefinition[] getDefinitions() {
        return definitions;
    }

    public NamespaceImport[] getImports() {
        return imports;
    }

    public void analyze(XpandExecutionContext ctx, final Set<AnalysationIssue> issues) {
        ctx = (XpandExecutionContext) ctx.cloneWithResource(this);
        for (Definition element : definitions) {
            element.analyze(ctx, issues);
        }
        for (Advice element : advices) {
            element.analyze(ctx, issues);
        }
    }

    private String[] commonPrefixes = null;

    public String[] getImportedNamespaces() {
        if (commonPrefixes == null) {
            final List<String> l = new ArrayList<String>();
            // FIXME no fqn in imported ns!
            final String thisNs = TypeNameUtil.withoutLastSegment(getFullyQualifiedName());

            if (thisNs != null) {
				l.add(thisNs);
			}
            for (NamespaceImport anImport : getImports()) {
                l.add(anImport.getImportString());
            }
            commonPrefixes = l.toArray(new String[l.size()]);
        }
        return commonPrefixes;
    }

    String[] importedExtensions = null;

    public String[] getImportedExtensions() {
        if (importedExtensions == null) {
            final List<String> l = new ArrayList<String>();
            for (int i = 0; i < getExtensions().length; i++) {
                final ImportDeclaration anImport = getExtensions()[i];
                l.add(anImport.getImportString().getValue());
            }
            importedExtensions = l.toArray(new String[l.size()]);
        }
        return importedExtensions;
    }

    public XpandAdvice[] getAdvices() {
        return advices;
    }

}
@


1.2.6.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
a13 1
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
d17 2
d22 1
a29 2
 * XXX why it's SyntaxElement? What does 'getLine()' means?
 * 
d33 1
a33 1
	private final NamespaceImport[] imports;
d35 1
a35 1
	private final Definition[] definitions;
d37 1
a37 1
	private final ImportDeclaration[] extensions;
d39 1
a39 1
	private final Advice[] advices;
d43 53
a95 1
	private String[] importStrings = null;
d97 28
a124 1
	private String[] importedExtensions = null;
a125 62
	public Template(final int start, final int end, final int line, final NamespaceImport[] imports, final ImportDeclaration[] extensions, final Definition[] definitions, final Advice[] advices) {
		super(start, end, line);
		this.imports = imports;
		this.extensions = extensions;
		for (Definition element : definitions) {
			element.setOwner(this);
		}
		this.definitions = definitions;
		for (Advice element : advices) {
			element.setOwner(this);
		}
		this.advices = advices;
	}

	public String getFullyQualifiedName() {
		// XXX what's the reason to have both file name and qualified name?
		return qualifiedName == null ? getFileName() : qualifiedName;
	}

	public void setFullyQualifiedName(String name) {
		qualifiedName = name;
	}

	public XpandDefinition[] getDefinitions() {
		return definitions;
	}

	public void analyze(XpandExecutionContext ctx, final Set<AnalysationIssue> issues) {
		ctx = (XpandExecutionContext) ctx.cloneWithResource(this);
		for (Definition element : definitions) {
			element.analyze(ctx, issues);
		}
		for (Advice element : advices) {
			element.analyze(ctx, issues);
		}
	}

	// XXX is it really worth it to kepp imports as ast nodes?
	// Is it performance gain to duplicate them here with string[]?
	public String[] getImportedNamespaces() {
		if (importStrings == null) {
			importStrings = new String[imports.length];
			for (int i = 0; i < importStrings.length; i++) {
				importStrings[i] = imports[i].getImportString();
			}
		}
		return importStrings;
	}

	public String[] getImportedExtensions() {
		if (importedExtensions == null) {
			importedExtensions = new String[extensions.length];
			for (int i = 0; i < extensions.length; i++) {
				importedExtensions[i] = extensions[i].getImportString();
			}
		}
		return importedExtensions;
	}

	public XpandAdvice[] getAdvices() {
		return advices;
	}
@


1.2.6.2
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d16 1
a17 1
import org.eclipse.gmf.internal.xpand.model.AnalysationIssue;
d20 1
a20 1
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
d70 2
a71 2
	public void analyze(ExecutionContext ctx, final Set<AnalysationIssue> issues) {
		ctx = (ExecutionContext) ctx.cloneWithResource(this);
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d30 1
a30 3
 * *
 * 
 * @@author Sven Efftinge *
d33 1
a33 1
    private NamespaceImport[] imports;
d35 1
a35 1
    private Definition[] definitions;
d37 1
a37 1
    private ImportDeclaration[] extensions;
d39 1
a39 1
    private Advice[] advices;
@

