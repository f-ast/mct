head	1.3;
access;
symbols
	v20081022-1925:1.3
	v20081020-0700:1.3
	ocl_qvt:1.3.0.6
	Root_ocl_qvt:1.3
	v20080722-1827:1.3
	v20080718-1731:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080528-1052:1.3
	v20080516-1143:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070921-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	v20070420-1000:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	M3_20:1.2;
locks; strict;
comment	@# @;


1.3
date	2007.05.14.11.13.35;	author atikhomirov;	state Exp;
branches
	1.3.6.1;
next	1.2;
commitid	44814648445e4567;

1.2
date	2006.11.09.18.00.11;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.49;	author atikhomirov;	state Exp;
branches;
next	;

1.3.6.1
date	2008.08.05.12.49.24;	author atikhomirov;	state dead;
branches;
next	;
commitid	546c48984c4a4567;


desc
@@


1.3
log
@basic debug support for xpand
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.expression.ast;

import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.gmf.internal.xpand.eval.EvaluationListener;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.Analyzable;
import org.eclipse.gmf.internal.xpand.expression.Evaluatable;
import org.eclipse.gmf.internal.xpand.expression.EvaluationException;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;

public abstract class Expression extends SyntaxElement implements Analyzable, Evaluatable {

    public Expression(final int start, final int end, final int line) {
        super(start, end, line);
    }

    protected EClassifier findType(final Identifier type, final ExecutionContext ctx, final Set<AnalysationIssue> issues) {
        final EClassifier toCast = ctx.getTypeForName(type.getValue());
        if (toCast == null) {
            issues.add(new AnalysationIssue(AnalysationIssue.Type.TYPE_NOT_FOUND, type.getValue(), type));
        }
        return toCast;
    }

    public final Object evaluate(final ExecutionContext ctx) {
        try {
        	notifyEnter(ctx);
            return evaluateInternal(ctx);
        } catch (final EvaluationException eve) {
            throw eve;
        } catch (final RuntimeException ex) {
            throw new EvaluationException(ex, this);
        } finally {
            notifyLeave(ctx);
        }
    }

    protected abstract Object evaluateInternal(ExecutionContext ctx);

    private void notifyEnter(ExecutionContext ctx) {
    	EvaluationListener l = ctx.getEvaluationListener();
    	if (l != null) {
    		l.enter(this, ctx);
    	}
    }

    private void notifyLeave(ExecutionContext ctx) {
    	EvaluationListener l = ctx.getEvaluationListener();
    	if (l != null) {
    		l.leave(this, ctx);
    	}
    }
}
@


1.3.6.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@@


1.2
log
@issue's type converted to enum, added decreased (warning) severity option toease development with xpand
@
text
@d20 1
d43 1
d49 2
d56 13
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d35 1
a35 1
            issues.add(new AnalysationIssue(AnalysationIssue.TYPE_NOT_FOUND, type.getValue(), type));
@

