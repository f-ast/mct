head	1.4;
access;
symbols
	v20081022-1925:1.4
	v20081020-0700:1.4
	ocl_qvt:1.4.0.6
	Root_ocl_qvt:1.4
	v20080722-1827:1.4
	v20080718-1731:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080528-1052:1.4
	v20080516-1143:1.4
	v20080417-1610:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20071130-1111:1.4
	v20071124-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070921-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070420-1000:1.4
	v20070405-1100:1.4
	v20070403-1500:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	v20070103-0300:1.4
	M4_20:1.4
	M3_20:1.4;
locks; strict;
comment	@# @;


1.4
date	2006.11.09.18.00.11;	author atikhomirov;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	2006.10.23.18.58.22;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.23.16.13.10;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.51;	author atikhomirov;	state Exp;
branches;
next	;

1.4.6.1
date	2008.08.05.12.49.25;	author atikhomirov;	state Exp;
branches;
next	1.4.6.2;
commitid	546c48984c4a4567;

1.4.6.2
date	2008.08.06.14.05.35;	author atikhomirov;	state Exp;
branches;
next	1.4.6.3;
commitid	35b4899afa74567;

1.4.6.3
date	2008.08.07.23.23.37;	author atikhomirov;	state Exp;
branches;
next	1.4.6.4;
commitid	55a7489b83f64567;

1.4.6.4
date	2008.08.08.16.33.25;	author atikhomirov;	state Exp;
branches;
next	;
commitid	a21489c75534567;


desc
@@


1.4
log
@issue's type converted to enum, added decreased (warning) severity option toease development with xpand
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.ast;

import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.expression.Variable;
import org.eclipse.gmf.internal.xpand.expression.ast.DeclaredParameter;
import org.eclipse.gmf.internal.xpand.expression.ast.Identifier;
import org.eclipse.gmf.internal.xpand.expression.ast.SyntaxElement;
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;
import org.eclipse.gmf.internal.xpand.model.XpandResource;

public abstract class AbstractDefinition extends SyntaxElement implements XpandAnalyzable, XpandEvaluatable {

    private final Identifier type;

    private final DeclaredParameter[] params;

    private final Statement[] body;

    private Template owner = null;

    public void setOwner(final Template owner) {
        this.owner = owner;
    }

    public AbstractDefinition(final int start, final int end, final int line, final Identifier type,
            final DeclaredParameter[] params, final Statement[] body) {
        super(start, end, line);
        this.type = type;
        this.params = params;
        this.body = body;
    }

    public Identifier getType() {
        return type;
    }

    public Statement[] getBody() {
        return body;
    }

    public DeclaredParameter[] getParams() {
        return params;
    }

    public XpandResource getOwner() {
        return owner;
    }

    public void analyze(XpandExecutionContext ctx, final Set<AnalysationIssue> issues) {
        final EClassifier thisType = ctx.getTypeForName(getType().getValue());
        if (thisType == null) {
            issues.add(new AnalysationIssue(AnalysationIssue.Type.TYPE_NOT_FOUND, "Couldn't find " + getType().getValue(),
                    getType()));
        }
        ctx = ctx.cloneWithVariable(new Variable(ExecutionContext.IMPLICIT_VARIABLE, thisType));
        for (int i = 0; i < getParams().length; i++) {
            final DeclaredParameter param = getParams()[i];
            EClassifier paramType = ctx.getTypeForName(param.getType().getValue());
            if (paramType == null) {
                issues.add(new AnalysationIssue(AnalysationIssue.Type.TYPE_NOT_FOUND, "Couldn't find "
                        + param.getType().getValue(), param.getType()));
                paramType = EcorePackage.eINSTANCE.getEObject();
            }
            final String name = param.getName().getValue();
            ctx = ctx.cloneWithVariable(new Variable(name, paramType));
        }
        for (int i = 0; i < getBody().length; i++) {
            getBody()[i].analyze(ctx, issues);
        }
    }

    public void evaluate(XpandExecutionContext ctx) {
        ctx = (XpandExecutionContext) ctx.cloneWithResource(getOwner());
        for (int i = 0; i < getBody().length; i++) {
            getBody()[i].evaluate(ctx);
        }
    }

    public String getTargetType() {
        return getType().getValue();
    }
}
@


1.4.6.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d2 3
a4 1
 * Copyright (c) 2005,2008 Sven Efftinge and others.
d12 2
a13 1
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
d24 2
d28 1
a28 3
import org.eclipse.gmf.internal.xpand.ocl.DeclaredParameter;
import org.eclipse.gmf.internal.xpand.ocl.TypeHelper;
import org.eclipse.ocl.cst.TypeCS;
d32 1
a32 1
    protected final TypeHelper type;
d34 1
a34 1
    protected final DeclaredParameter[] params;
d38 1
a38 1
    protected Template owner = null;
d40 6
a45 1
    public AbstractDefinition(final int start, final int end, final int line, final TypeCS type, final DeclaredParameter[] params, final Statement[] body) {
d47 1
a47 1
        this.type = new TypeHelper(type);
d52 14
a65 2
	public void setOwner(final Template owner) {
        this.owner = owner;
d69 1
a69 1
        final EClassifier thisType = type.getTypeForName(ctx);
d71 2
a72 1
            issues.add(new AnalysationIssue(AnalysationIssue.Type.TYPE_NOT_FOUND, "Couldn't find " + type.getName(), this));
d75 3
a77 3
        Variable[] vars = new Variable[params.length];
        for (int i = 0; i < params.length; i++) {
            EClassifier paramType = params[i].getTypeForName(ctx);
d80 1
a80 1
                        + params[i].getTypeName(), this /* FIXME: was: params[i].getType()*/));
d83 2
a84 2
            final String name = params[i].getVarName();
            vars[i] = new Variable(name, paramType);
d86 2
a87 3
        ctx = ctx.cloneWithVariable(vars);
        for (int i = 0; i < body.length; i++) {
            body[i].analyze(ctx, issues);
d92 3
a94 3
        ctx = (XpandExecutionContext) ctx.cloneWithResource(owner);
        for (int i = 0; i < body.length; i++) {
            body[i].evaluate(ctx);
d97 4
@


1.4.6.2
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d18 3
d22 1
a22 5
import org.eclipse.gmf.internal.xpand.model.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
import org.eclipse.gmf.internal.xpand.model.Variable;
import org.eclipse.gmf.internal.xpand.model.XpandAnalyzable;
import org.eclipse.gmf.internal.xpand.model.XpandEvaluatable;
d48 1
a48 1
    public void analyze(ExecutionContext ctx, final Set<AnalysationIssue> issues) {
d71 2
a72 2
    public void evaluate(ExecutionContext ctx) {
        ctx = (ExecutionContext) ctx.cloneWithResource(owner);
@


1.4.6.3
log
@[243154] Use OCL instead of home-grown expression language - fixing and running tests.
@
text
@a44 7
    /**
	 * FIXME used only in tests, should I keep it?
	 */
	public Statement[] getBody() {
		return body;
	}

@


1.4.6.4
log
@[243154] Use OCL instead of home-grown expression language - populate ocl environment with variable types (hence, need to tell var value from var type)
@
text
@d61 1
a61 1
        ctx = ctx.cloneWithVariable(new Variable(ExecutionContext.IMPLICIT_VARIABLE, thisType, null));
d71 1
a71 1
            vars[i] = new Variable(name, paramType, null);
d80 1
a80 1
        ctx = ctx.cloneWithResource(owner);
@


1.3
log
@finals
@
text
@d71 1
a71 1
            issues.add(new AnalysationIssue(AnalysationIssue.TYPE_NOT_FOUND, "Couldn't find " + getType().getValue(),
d79 1
a79 1
                issues.add(new AnalysationIssue(AnalysationIssue.TYPE_NOT_FOUND, "Couldn't find "
@


1.2
log
@refactored use of variables (no need to expose Map)
@
text
@d32 1
a32 1
    private Identifier type;
d34 1
a34 1
    private DeclaredParameter[] params;
d36 1
a36 1
    private Statement[] body;
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d84 1
a84 1
            ctx = (XpandExecutionContext) ctx.cloneWithVariable(new Variable(name, paramType));
@

