head	1.4;
access;
symbols
	v20081022-1925:1.4
	v20081020-0700:1.4
	ocl_qvt:1.4.0.6
	Root_ocl_qvt:1.4
	v20080722-1827:1.4
	v20080718-1731:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080528-1052:1.4
	v20080516-1143:1.4
	v20080417-1610:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20071130-1111:1.4
	v20071124-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070921-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070420-1000:1.3
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20070208-1800:1.3
	v20070103-0300:1.3
	M4_20:1.3
	M3_20:1.3;
locks; strict;
comment	@# @;


1.4
date	2007.05.15.09.42.46;	author atikhomirov;	state Exp;
branches
	1.4.6.1;
next	1.3;
commitid	1f4b464980964567;

1.3
date	2006.11.03.18.58.23;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.03.14.37.04;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.02.17.35.04;	author atikhomirov;	state Exp;
branches;
next	;

1.4.6.1
date	2008.08.08.16.30.30;	author atikhomirov;	state Exp;
branches;
next	;
commitid	90c489c74a54567;


desc
@@


1.4
log
@don't use debug.internal code; redirect output to console right away; redirect error stream as well
@
text
@package org.eclipse.gmf.internal.xpand;

import java.util.Collections;
import java.util.Map;
import java.util.Stack;

public class BufferOutput extends AbstractOutput {
	/**
	 * INV: size > 0
	 */
	private final Stack<StringBuilder> outletStack;

	private final Map<String, StringBuilder> namedSlots;

	public BufferOutput(StringBuilder buffer) {
		this(buffer, null);
	}

	// XXX not map but config to show whether to append/overwrite content
	public BufferOutput(StringBuilder buffer, Map<String, StringBuilder> namedSlots) {
		assert buffer != null;
		outletStack = new Stack<StringBuilder>();
		outletStack.push(buffer);
		if (namedSlots != null) {
			this.namedSlots = namedSlots;
		} else {
			this.namedSlots = Collections.emptyMap();
		}
	}

	public void closeFile() {
		if (outletStack.size() == 1) {
			String msg = "CLOSE FILE without previous openFile";
			System.err.println("<<<" + msg);
			throw new UnsupportedOperationException(msg);
		}
		outletStack.pop();
	}

	public void openFile(String path, String outletName) {
		if (!namedSlots.containsKey(outletName)) {
			String msg = "OPEN FILE ('" + path + "', " + outletName + ")";
			System.err.println(">>>" + msg);
			throw new UnsupportedOperationException(msg);
		}
		outletStack.push(namedSlots.get(outletName));
		assert outletStack.peek() != null;
	}

	@@Override
	protected void doAppend(String text) {
		outletStack.peek().append(text);
	}
}@


1.4.6.1
log
@fixed copyrights
@
text
@a0 8
/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
@


1.3
log
@convenience constructor
@
text
@d7 1
a7 5
import org.eclipse.gmf.internal.xpand.ast.TextStatement;
import org.eclipse.gmf.internal.xpand.expression.ast.SyntaxElement;
import org.eclipse.gmf.internal.xpand.model.Output;

public class BufferOutput implements Output {
a12 2
	private boolean deleteLine = false;

d50 3
a52 31
	public void enterStatement(SyntaxElement stmt) {
		if (stmt instanceof TextStatement) {
			deleteLine = ((TextStatement) stmt).isDeleteLine();
		}
	}

	public void exitStatement(SyntaxElement stmt) {
		deleteLine = false;
	}

	public void write(String text) {
		if (deleteLine) {
			int i = 0;
			while (i < text.length()) {
				char charAt = text.charAt(i);
				if (Character.isWhitespace(charAt)) {
					if ((charAt == '\r' || charAt == '\n') && (i+1 < text.length())) {
						char nextToLF = text.charAt(++i);
						if (nextToLF != charAt && (nextToLF == '\n' || nextToLF == '\r')) {
							i++;
						}
						break;
					}
				}
				i++;
			}
			outletStack.peek().append(text.substring(i));
			deleteLine = false;
		} else {
			outletStack.peek().append(text);
		}
@


1.2
log
@correctly handle single-char newlines (unix-style)
@
text
@d3 1
d21 4
a27 1
		assert namedSlots != null;
d30 5
a34 1
		this.namedSlots = namedSlots;
d88 1
a88 2

}
@


1.1
log
@buffer-based output implementation
@
text
@d64 1
a64 1
					if (charAt == '\r' || charAt == '\n') {
@

