head	1.1;
access;
symbols
	v20081022-1925:1.1
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.07.24.16.21.35;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	7c4a4888ac0d4567;

1.1.2.1
date	2008.07.24.16.21.35;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	7c4a4888ac0d4567;

1.1.2.2
date	2008.07.30.11.31.31;	author ashatalin;	state Exp;
branches;
next	1.1.2.3;
commitid	e56489051124567;

1.1.2.3
date	2008.08.05.12.49.26;	author atikhomirov;	state Exp;
branches;
next	1.1.2.4;
commitid	546c48984c4a4567;

1.1.2.4
date	2008.08.06.14.05.34;	author atikhomirov;	state Exp;
branches;
next	1.1.2.5;
commitid	35b4899afa74567;

1.1.2.5
date	2008.08.10.15.10.44;	author atikhomirov;	state Exp;
branches;
next	;
commitid	2d13489f04f14567;


desc
@@


1.1
log
@file QvtFile.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@Initial commit of extend->qvt migration in xpand.
@
text
@a0 63
/**
 * Copyright (c) 2008 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.xpand.xtend.ast;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.ecore.EOperation;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.m2m.internal.qvt.oml.QvtMessage;
import org.eclipse.m2m.internal.qvt.oml.compiler.CompiledModule;
import org.eclipse.m2m.internal.qvt.oml.expressions.ImperativeOperation;
import org.eclipse.m2m.internal.qvt.oml.expressions.Module;

public class QvtFile implements QvtResource {

	private CompiledModule compiledModule;
	private List<GenericExtension> extensions;
	private String fileName;

	public QvtFile(CompiledModule module, String fullyQualifiedName) {
		this.compiledModule = module;
		fileName = fullyQualifiedName;
	}

	public List<GenericExtension> getExtensions() {
		if (extensions == null && compiledModule.getErrors().length == 0) {
			extensions = new ArrayList<GenericExtension>();
			Module module = compiledModule.getModule();
			if (module != null) {
				for (EOperation operation : module.getEOperations()) {
					if (operation instanceof ImperativeOperation) {
						extensions.add(new QvtExtension((ImperativeOperation) operation, this, fileName));	
					}
				}
			}
		}
		return extensions;
	}

	public void analyze(ExecutionContext ctx, Set<AnalysationIssue> issues) {
		if (compiledModule.getErrors().length > 0) {
			for (int i = 0; i < compiledModule.getErrors().length; i++) {
				QvtMessage qvtMessage = compiledModule.getErrors()[i];
				if (qvtMessage.getSeverity() == QvtMessage.SEVERITY_ERROR) {
					issues.add(new AnalysationIssue(AnalysationIssue.Type.SYNTAX_ERROR, qvtMessage.toString(), null));
				}
			}
		}
	}

}
@


1.1.2.2
log
@New version of QVT API for query execution used.
@
text
@a14 1
import java.util.Collections;
d23 1
a23 1
import org.eclipse.m2m.internal.qvt.oml.expressions.Helper;
a24 1
import org.eclipse.m2m.qvt.oml.runtime.util.NonTransformationExecutionContext;
a41 1
				NonTransformationExecutionContext context = new NonTransformationExecutionContext(Collections.singleton(module));
d43 2
a44 2
					if (operation instanceof Helper) {
						extensions.add(new QvtExtension(context.createHelperCall((Helper) operation), this, fileName));
@


1.1.2.3
log
@[243154] Use OCL instead of home-grown expression language
@
text
@a21 1
import org.eclipse.gmf.internal.xpand.expression.ast.SyntaxElement;
d60 1
a60 1
					issues.add(new AnalysationIssue(AnalysationIssue.Type.SYNTAX_ERROR, qvtMessage.toString(), (SyntaxElement) null));
@


1.1.2.4
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d20 2
a22 2
import org.eclipse.gmf.internal.xpand.model.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
a66 9
	public String[] getImportedExtensions() {
		// no-op now, not sure it's possible to use this data
		return new String[0];
	}

	public String[] getImportedNamespaces() {
		// no-op now, not sure it's possible to use this data
		return new String[0];
	}
@


1.1.2.5
log
@[243154] Use OCL instead of home-grown expression language - most (what's feasible) of the extension invocation fixed. A lot of hacks and questions, though.
@
text
@a23 1
import org.eclipse.m2m.internal.qvt.oml.ast.env.QvtOperationalEnv;
d32 1
a32 1
	private List<QvtExtension> extensions;
d40 1
a40 4
	public QvtOperationalEnv getEnvironment() {
		return compiledModule.getSyntaxElement().getEnvironment();
	}
	public List<QvtExtension> getExtensions() {
d42 1
a42 1
			extensions = new ArrayList<QvtExtension>();
@


