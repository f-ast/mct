head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081020-0700:1.2
	ocl_qvt:1.2.0.4
	Root_ocl_qvt:1.2
	v20080722-1827:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.2
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080528-1052:1.2
	v20080516-1143:1.2
	v20080417-1610:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20071130-1111:1.2
	v20071108-0000:1.2;
locks; strict;
comment	@# @;


1.2
date	2007.10.29.17.40.17;	author atikhomirov;	state Exp;
branches
	1.2.4.1;
next	1.1;
commitid	10ff47261b014567;

1.1
date	2007.10.29.16.58.22;	author atikhomirov;	state Exp;
branches;
next	;
commitid	5b914726112d4567;

1.2.4.1
date	2008.08.08.16.30.30;	author atikhomirov;	state Exp;
branches;
next	;
commitid	90c489c74a54567;


desc
@@


1.2
log
@[207437] Resources to be composed from several sources - fix/support and test for local calls from non-resource-based templates (hanging in the air wiith "nofile"), simplified default root handling for ws resources.
@
text
@/**
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.internal.xpand;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.gmf.internal.xpand.build.WorkspaceResourceManager;

/**
 * Tracks template roots for a given project.
 */
public class RootManager {
	static final IPath PROJECT_RELATIVE_PATH_TO_CONFIG_FILE = new Path(".xpand-root");	//$NON-NLS-1$
	private final IFile myConfig;
	private List<RootDescription> myRoots;
	private List<IRootChangeListener> myListeners = new ArrayList<IRootChangeListener>(2);
	private RootDescription myFallbackRoot;

	public RootManager(IProject project) {
		myConfig = project.getFile(PROJECT_RELATIVE_PATH_TO_CONFIG_FILE);
	}

	public void addRootChangeListener(IRootChangeListener l) {
		if (l != null && !myListeners.contains(l)) {
			myListeners.add(l);
		}
	}

	public void removeRootChangeListener(IRootChangeListener l) {
		myListeners.remove(l);
	}

	void rootsChanged() {
		myRoots = null;
		for (IRootChangeListener next : myListeners) {
			next.rootsChanged(this);
		}
	}

	protected IProject getProject() {
		return myConfig.getProject();
	}

	public WorkspaceResourceManager getResourceManager(IFile file) {
		for (RootDescription nextDescription : getRoots()) {
			if (nextDescription.contains(file)) {
				return nextDescription.getManager();
			}
		}
		return getFallbackRoot().getManager();
	}

	private RootDescription getFallbackRoot() {
		if (myFallbackRoot == null) {
			myFallbackRoot = new RootDescription(Collections.<IPath>singletonList(new Path("")));
		}
		return myFallbackRoot;
	}

	private List<RootDescription> getRoots() {
		if (myRoots == null) {
			reloadRoots();
		}
		return myRoots;
	}

	private void reloadRoots() {
		if (!myConfig.exists()) {
			myRoots = Collections.singletonList(new RootDescription(DEFAULT_ROOTS));
			return;
		}
		final ArrayList<RootDescription> read = new ArrayList<RootDescription>();
		BufferedReader in = null;
		try {
			in = new BufferedReader(new InputStreamReader(myConfig.getContents(), myConfig.getCharset()));
			String line;
			while((line = in.readLine()) != null) {
				line = line.trim();
				if (line.length() > 0 && line.charAt(0) != '#') {
					String[] split = line.split(",");
					ArrayList<IPath> nextPaths = new ArrayList<IPath>(split.length);
					for (String nextPath : split) {
						nextPath = nextPath.trim();
						if (nextPath.length() > 0) {
							IPath toAdd = new Path(nextPath);
							//Absolute paths specify resources relative to workbench and/or 
							if (toAdd.isAbsolute() && toAdd.segmentCount() < 2) {
								continue;
							}
							nextPaths.add(toAdd);
						}
					}
					read.add(new RootDescription(nextPaths));
				}
			}
		} catch (CoreException ex) {
			// IGNORE
		} catch (IOException ex) {
			// IGNORE
		} finally {
			if (in != null) {
				try {
					in.close();
				} catch (IOException ex) {
					/* IGNORE */
				}
			}
		}
		myRoots = read;
	}

	public Set<IProject> getReferencedProjects() {
		Set<IProject> result = new LinkedHashSet<IProject>();
		for (RootDescription nextDescription : getRoots()) {
			for (IPath next : nextDescription.getRoots()) {
				if (next.isAbsolute() && next.segmentCount() > 1) {
					IProject candidate = ResourcesPlugin.getWorkspace().getRoot().getProject(next.segment(0));
					if (candidate.isAccessible()) {
						result.add(candidate);
					}
				}
			}
		}
		return result;
	}

	boolean containsProject(IPath projectPath) {
		if (myRoots == null) {
			return false;
		}
		for (RootDescription nextRoots : myRoots) {
			for (IPath next : nextRoots.getRoots()) {
				if (next.isAbsolute() && projectPath.isPrefixOf(next)) {
					return true;
				}
			}
		}
		return false;
	}

	private static final List<IPath> DEFAULT_ROOTS = Collections.<IPath>singletonList(new Path("templates"));	//$NON-NLS-1$

	public interface IRootChangeListener {
		public void rootsChanged(RootManager rootManager);
	}

	private class RootDescription {
		private final List<IPath> myRoots;
		private WorkspaceResourceManager myManager;
		public RootDescription(List<IPath> roots) {
			myRoots = roots;
		}
		public List<IPath> getRoots() {
			return myRoots;
		}
		public WorkspaceResourceManager getManager() {
			if (myManager == null) {
				myManager = new WorkspaceResourceManager(getProject(), myRoots.toArray(new IPath[myRoots.size()]));
			}
			return myManager;
		}
		public boolean contains(IResource resource) {
			if (resource == null) {
				return false;
			}
			for (IPath nextRoot : myRoots) {
				if (nextRoot.isAbsolute()) {
					if (nextRoot.isPrefixOf(resource.getFullPath())) {
						return true;
					}
				} else {
					if (resource.getProject().equals(getProject()) && nextRoot.isPrefixOf(resource.getProjectRelativePath())) {
						return true;
					}
				}
			}
			return false;
		}
	}
}
@


1.2.4.1
log
@fixed copyrights
@
text
@d1 1
a1 1
/*
@


1.1
log
@[207437] Resources to be composed from several sources
@
text
@a25 1
import org.eclipse.core.resources.IResourceDelta;
d40 1
d68 1
a68 1
		for (IRootDescription nextDescription : getRoots()) {
d73 1
a73 1
		return null;
d76 8
a83 1
	public List<? extends IRootDescription> getRoots() {
d137 1
a137 1
		for (IRootDescription nextDescription : getRoots()) {
d170 1
a170 7
	public interface IRootDescription {
		public List<IPath> getRoots();
		public boolean contains(IResource resource);
		public WorkspaceResourceManager getManager();
	}

	private class RootDescription implements IRootDescription {
@

