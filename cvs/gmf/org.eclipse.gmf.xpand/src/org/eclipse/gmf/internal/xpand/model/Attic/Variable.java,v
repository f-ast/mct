head	1.1;
access;
symbols
	v20081022-1925:1.1
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2008.08.06.14.05.35;	author atikhomirov;	state dead;
branches
	1.1.2.1;
next	;
commitid	35b4899afa74567;

1.1.2.1
date	2008.08.06.14.05.35;	author atikhomirov;	state Exp;
branches;
next	1.1.2.2;
commitid	35b4899afa74567;

1.1.2.2
date	2008.08.08.16.33.25;	author atikhomirov;	state Exp;
branches;
next	;
commitid	a21489c75534567;


desc
@@


1.1
log
@file Variable.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@a0 83
/*
 * Copyright (c) 2005,2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 */
package org.eclipse.gmf.internal.xpand.model;

/**
 * FIXME !!! either make value final or do not use it to calculate hash code!!!
 * @@author Sven Efftinge
 * @@author Arno Haase
 */
public class Variable {

    private String name;

    private Object value;

    public Variable(final String name, final Object value) {
        if (name == null) {
			throw new IllegalArgumentException("name must not be null!");
		}
        this.name = name;
        this.value = value;
    }

    public Object getValue() {
        return value;
    }

    public void setValue(final Object value) {
        this.value = value;
    }

    public String getName() {
        return name;
    }

    @@Override
    public int hashCode() {
        final int PRIME = 31;
        int result = 1;
        result = PRIME * result + ((name == null) ? 0 : name.hashCode());
        result = PRIME * result + ((value == null) ? 0 : value.hashCode());
        return result;
    }

    @@Override
    public boolean equals(Object obj) {
        if (this == obj) {
			return true;
		}
        if (obj == null) {
			return false;
		}
        if (getClass() != obj.getClass()) {
			return false;
		}
        final Variable other = (Variable) obj;
        if (name == null) {
            if (other.name != null) {
				return false;
			}
        } else if (!name.equals(other.name)) {
			return false;
		}
        if (value == null) {
            return other.value == null;
        } else {
			return value.equals(other.value);
		}
    }

    @@Override
	public String toString () {
        return "Variable [" + name + "="+ value + "]";
    }
}
@


1.1.2.2
log
@[243154] Use OCL instead of home-grown expression language - populate ocl environment with variable types (hence, need to tell var value from var type)
@
text
@a12 2
import org.eclipse.emf.ecore.EClassifier;

d14 1
a14 1
 * FIXME Do we need Variables now, with explicit OCLEnvironment available? 
d20 1
a20 1
    private final String name;
d22 1
a22 1
    private final Object value;
d24 3
a26 8
	private final EClassifier type;

	/**
	 * type and value may be null 
	 */
    public Variable(final String name, final EClassifier type, final Object value) {
		if (name == null) {
			throw new NullPointerException("name must not be null!");
a28 1
        this.type = type;
d36 4
a43 4
    public EClassifier getType() {
		return type;
	}

@


