head	1.1;
access;
symbols
	v20081022-1925:1.1
	v20081020-0700:1.1
	ocl_qvt:1.1.0.6
	Root_ocl_qvt:1.1
	v20080722-1827:1.1
	v20080718-1731:1.1
	v20080716-1600:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080528-1052:1.1
	v20080516-1143:1.1
	v20080417-1610:1.1
	v20080322-0000:1.1
	v20080222-1200:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070518-1300:1.1
	v20070420-1000:1.1
	v20070405-1100:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	M3_20:1.1;
locks; strict;
comment	@# @;


1.1
date	2006.11.09.21.03.46;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.1
log
@moving towards supporting models from development workspace
@
text
@package org.eclipse.gmf.internal.xpand.build;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IResourceDelta;
import org.eclipse.core.resources.IResourceDeltaVisitor;
import org.eclipse.core.resources.IResourceVisitor;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;

class EcoreModelResourceVisitor implements IResourceVisitor, IResourceDeltaVisitor {
	private static String ECORE_FILE_EXT = "ecore";

	private final IProgressMonitor monitor;
	private final Set<IFile> newEcoreModelFiles = new HashSet<IFile>();
	private final Set<IFile> changedEcoreModelFiles = new HashSet<IFile>();
	private final Set<IFile> removedEcoreModelFiles = new HashSet<IFile>();

	public EcoreModelResourceVisitor(IProgressMonitor progress) {
		monitor = progress;
	}

	public Set<IFile> getNewModelFiles() {
		return Collections.unmodifiableSet(newEcoreModelFiles);
	}

	public Set<IFile> getChangedModelFiles() {
		return Collections.unmodifiableSet(changedEcoreModelFiles);
	}

	public Set<IFile> getRemovedModelFiles() {
		return Collections.unmodifiableSet(removedEcoreModelFiles);
	}

	private void handleNewResource(IFile file) {
		newEcoreModelFiles.add(file);
	}

	private void handleChangedResource(IFile file) {
		changedEcoreModelFiles.add(file);
	}

	private void handleRemoved(IFile file) {
		removedEcoreModelFiles.add(file);
	}

	public boolean visit(IResource resource) throws CoreException {
		if (resource.isDerived()) {
			return false;
		}
		if (resource.getType() == IResource.FILE && isEcoreModel(resource)) {
			handleNewResource((IFile) resource);
			monitor.worked(1);
			return false;
		}
		return true;
	}

	public boolean visit(IResourceDelta delta) throws CoreException {
		final IResource resource = delta.getResource();
		if (resource.isDerived()) {
			return false;
		}
		if (resource.getType() == IResource.FILE && isEcoreModel(resource)) {
			switch (delta.getKind()) {
			case IResourceDelta.ADDED:
				handleNewResource((IFile) resource);
				break;
			case IResourceDelta.REMOVED:
				handleRemoved((IFile) resource);
				break;
			case IResourceDelta.CHANGED:
				handleChangedResource((IFile) resource);
				break;
			}
			monitor.worked(1);
			return false;
		}
		return true;
	}

	private static boolean isEcoreModel(IResource file) {
		return ECORE_FILE_EXT.equals(file.getFileExtension());
	}
}
@
