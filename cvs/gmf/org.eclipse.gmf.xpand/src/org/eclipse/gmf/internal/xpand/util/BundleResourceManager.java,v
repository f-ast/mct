head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081020-0700:1.7
	ocl_qvt:1.7.0.4
	Root_ocl_qvt:1.7
	v20080722-1827:1.7
	v20080718-1731:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080528-1052:1.7
	v20080516-1143:1.7
	v20080417-1610:1.7
	v20080322-0000:1.7
	v20080222-1200:1.6
	v20071130-1111:1.6
	v20071124-0000:1.5
	v20071108-0000:1.6
	v20071003-0000:1.5
	v20070921-0000:1.5
	v20070903-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070608-1300:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	v20070420-1000:1.5
	v20070405-1100:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	v20070103-0300:1.3
	M4_20:1.3
	M3_20:1.3;
locks; strict;
comment	@# @;


1.7
date	2008.02.22.16.03.40;	author atikhomirov;	state Exp;
branches
	1.7.4.1;
next	1.6;
commitid	3d8447bef25b4567;

1.6
date	2007.10.29.16.58.24;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	5b914726112d4567;

1.5
date	2007.04.06.11.31.08;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	526546162f7b4567;

1.4
date	2007.02.05.17.10.11;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	517745c764f34567;

1.3
date	2006.11.03.16.49.33;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.26.14.23.02;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.25.17.23.40;	author atikhomirov;	state Exp;
branches;
next	;

1.7.4.1
date	2008.08.05.12.49.26;	author atikhomirov;	state Exp;
branches;
next	1.7.4.2;
commitid	546c48984c4a4567;

1.7.4.2
date	2008.08.06.14.05.34;	author atikhomirov;	state Exp;
branches;
next	;
commitid	35b4899afa74567;


desc
@@


1.7
log
@restored behaviour to populate problems view on parsing error instead of plain parser exception logging.
@
text
@/*
 * Copyright (c) 2006, 2008 Borland Software Corporation
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.eclipse.gmf.internal.xpand.util;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;

import org.eclipse.gmf.internal.xpand.Activator;
import org.eclipse.gmf.internal.xpand.expression.SyntaxConstants;
import org.eclipse.gmf.internal.xpand.util.ParserException.ErrorLocationInfo;

/**
 * Node: no support for relative paths (i.e. '..::templates::SomeTemplate.xpt')
 * @@author artem
 */
public class BundleResourceManager extends ResourceManagerImpl {
	private final URL[] paths;

	public BundleResourceManager(URL... paths) {
		assert paths != null && paths.length > 0; 
		this.paths = new URL[paths.length];
		for (int i = 0; i < paths.length; i++) {
			this.paths[i] = fixTrailingSlash(paths[i]);
		}
	}

	/**
	 * new URL("base:url/path1/withoutTrailingSlash", "path2/noLeadingSlash")
	 * results in "base:url/path/path2/noLeadingSlash" - note lost "withoutTrailingSlash" part
	 * XXX Perhaps, would be better for clients do this 'normalization'?
	 */
	private static URL fixTrailingSlash(URL u) {
		try {
			if (u.getPath() != null && !u.getPath().endsWith("/")) {
				return new URL(u, u.getPath() + '/');
			}
		} catch (MalformedURLException ex) {
			/*IGNORE*/
		}
		return u;
	}

	@@Override
	protected boolean shouldCache() {
		return true;
	}

	@@Override
	protected void handleParserException(ParserException ex) {
		Activator.logWarn(ex.getResourceName() + ":" + ex.getClass().getName());
		for (ErrorLocationInfo ei : ex.getParsingErrors()) {
			Activator.logWarn(ei.startLine + ":" + ei.message);
		}
	}

	private Reader createReader(String urlPath, URL baseUrl) throws MalformedURLException, IOException {
		URL u = new URL(baseUrl, urlPath);
		InputStream is = u.openStream();
		// XXX here we ignore the fact baseUrl may point to workspace location
		// and hence charset can be derived from IFile
		return new InputStreamReader(is, Charset.forName("ISO-8859-1"));
	}

	@@Override
	protected Reader[] resolveMultiple(String fullyQualifiedName, String extension) throws IOException {
		final String urlPath = fullyQualifiedName.replaceAll(SyntaxConstants.NS_DELIM, "/") + '.' + extension;
		ArrayList<Reader> result = new ArrayList<Reader>(paths.length);
		for (int i = 0; i < paths.length; i++) {
			try {
				result.add(createReader(urlPath, paths[i]));
			} catch (MalformedURLException ex) {
				/*IGNORE*/
			} catch (IOException ex) {
				// XXX perhaps, conditionally turn logging on to debug template loading issues?
				/*IGNORE*/
			} catch (Exception ex) {
				// just in case
				Activator.logError(ex);
			}
		}
		if (result.isEmpty()) {
			throw new FileNotFoundException(fullyQualifiedName);
		}
		return result.toArray(new Reader[result.size()]);
	}
}
@


1.7.4.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@a2 1
 *
a6 3
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
d21 1
a21 1
import org.eclipse.gmf.internal.xpand.expression.TypeNameUtil;
d78 1
a78 1
		final String urlPath = fullyQualifiedName.replaceAll(TypeNameUtil.NS_DELIM, "/") + '.' + extension;
@


1.7.4.2
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d25 1
@


1.6
log
@[207437] Resources to be composed from several sources
@
text
@d1 2
a2 2
/*******************************************************************************
 * Copyright (c) 2006, 2007 Borland Software Corporation
d7 1
a7 1
 *******************************************************************************/
d22 1
d61 4
a64 14
	protected Reader resolve(String fullyQualifiedName, String extension) throws IOException {
		final String urlPath = fullyQualifiedName.replaceAll(SyntaxConstants.NS_DELIM, "/") + '.' + extension;
		for (int i = 0; i < paths.length; i++) {
			try {
				return createReader(urlPath, paths[i]);
			} catch (MalformedURLException ex) {
				/*IGNORE*/
			} catch (IOException ex) {
				// XXX perhaps, conditionally turn logging on to debug template loading issues?
				/*IGNORE*/
			} catch (Exception ex) {
				// just in case
				Activator.logError(ex);
			}
a65 1
		throw new FileNotFoundException(fullyQualifiedName);
@


1.5
log
@cache parsed templates and xtend files to speed upa and to make cached extensions actually cached
@
text
@d1 7
d18 1
d64 1
a64 5
				URL u = new URL(paths[i], urlPath);
				InputStream is = u.openStream();
				// XXX here we ignore the fact paths[i] may point to workspace location
				// and hence charset can be derived from IFile
				return new InputStreamReader(is, Charset.forName("ISO-8859-1"));
d77 31
@


1.4
log
@0.8.18 - 172853 Consider resources from referenced projects while resolving qualified template names
@
text
@d47 5
@


1.3
log
@charset for templates to deal with linux/mac issues
@
text
@d3 1
d66 1
a66 1
		return null;
@


1.2
log
@fix to work with non-slash terminated urls
@
text
@d9 1
d54 1
a54 1
				return new InputStreamReader(is);
@


1.1
log
@refactored resource manager into capable working in workspace and working with uris, added experimental extended error reporting to provide more details on parsing errors
@
text
@d14 1
a14 1
 * Node: no support for relative paths
d22 20
a41 1
		this.paths = paths;
d57 1
@

