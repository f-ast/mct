head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081020-0700:1.2
	ocl_qvt:1.2.0.6
	Root_ocl_qvt:1.2
	v20080722-1827:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080528-1052:1.2
	v20080516-1143:1.2
	v20080417-1610:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070921-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070420-1000:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	M3_20:1.2;
locks; strict;
comment	@# @;


1.2
date	2006.10.23.18.58.22;	author atikhomirov;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2006.10.18.20.33.51;	author atikhomirov;	state Exp;
branches;
next	;

1.2.6.1
date	2008.08.05.12.49.25;	author atikhomirov;	state Exp;
branches;
next	1.2.6.2;
commitid	546c48984c4a4567;

1.2.6.2
date	2008.08.06.14.05.36;	author atikhomirov;	state Exp;
branches;
next	1.2.6.3;
commitid	35b4899afa74567;

1.2.6.3
date	2008.08.08.16.33.25;	author atikhomirov;	state Exp;
branches;
next	;
commitid	a21489c75534567;


desc
@@


1.2
log
@finals
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.ast;

import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.Variable;
import org.eclipse.gmf.internal.xpand.expression.ast.Expression;
import org.eclipse.gmf.internal.xpand.expression.ast.Identifier;
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;

/**
 * @@author Sven Efftinge
 */
public class LetStatement extends Statement {

	private final Identifier varName;

	private final Expression varValue;

	private final Statement[] body;

	public LetStatement(final int start, final int end, final int line, final Identifier varName, final Expression value, final Statement[] body) {
		super(start, end, line);
		this.varName = varName;
		this.varValue = value;
		this.body = body;
	}

	public Statement[] getBody() {
		return body;
	}

	public Identifier getVarName() {
		return varName;
	}

	public Expression getVarValue() {
		return varValue;
	}

	public void analyze(XpandExecutionContext ctx, final Set<AnalysationIssue> issues) {
		EClassifier t = getVarValue().analyze(ctx, issues);
		if (t == null) {
			t = EcorePackage.eINSTANCE.getEObject();
		}
		ctx = ctx.cloneWithVariable(new Variable(getVarName().getValue(), t));
		for (Statement statement : getBody()) {
			statement.analyze(ctx, issues);
		}
	}

	@@Override
	public void evaluateInternal(XpandExecutionContext ctx) {
		ctx = ctx.cloneWithVariable(new Variable(getVarName().getValue(), getVarValue().evaluate(ctx)));
		for (Statement statement : getBody()) {
			statement.evaluate(ctx);
		}
	}

}
@


1.2.6.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
a13 1
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
d23 1
a25 2
import org.eclipse.gmf.internal.xpand.ocl.ExpressionHelper;
import org.eclipse.ocl.cst.OCLExpressionCS;
d34 1
a34 1
	private final ExpressionHelper varValue;
d38 1
a38 1
	public LetStatement(final int start, final int end, final int line, final Identifier varName, final OCLExpressionCS value, final Statement[] body) {
d41 1
a41 1
		this.varValue = new ExpressionHelper(value);
d45 12
d58 1
a58 1
		EClassifier t = varValue.analyze(ctx, issues);
d62 2
a63 2
		ctx = ctx.cloneWithVariable(new Variable(varName.getValue(), t));
		for (Statement statement : body) {
d70 2
a71 2
		ctx = ctx.cloneWithVariable(new Variable(varName.getValue(), varValue.evaluate(ctx)));
		for (Statement statement : body) {
@


1.2.6.2
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d18 2
d21 1
a21 3
import org.eclipse.gmf.internal.xpand.model.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
import org.eclipse.gmf.internal.xpand.model.Variable;
d43 1
a43 1
	public void analyze(ExecutionContext ctx, final Set<AnalysationIssue> issues) {
d55 1
a55 1
	public void evaluateInternal(ExecutionContext ctx) {
@


1.2.6.3
log
@[243154] Use OCL instead of home-grown expression language - populate ocl environment with variable types (hence, need to tell var value from var type)
@
text
@d48 1
a48 1
		ctx = ctx.cloneWithVariable(new Variable(varName.getValue(), t, null));
d56 1
a56 1
		ctx = ctx.cloneWithVariable(new Variable(varName.getValue(), null, varValue.evaluate(ctx)));
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d28 1
a28 3
 * *
 * 
 * @@author Sven Efftinge *
d32 1
a32 1
    private Identifier varName;
d34 1
a34 1
    private Expression varValue;
d36 1
a36 1
    private Statement[] body;
d38 37
a74 39
    public LetStatement(final int start, final int end, final int line, final Identifier varName,
            final Expression value, final Statement[] body) {
        super(start, end, line);
        this.varName = varName;
        varValue = value;
        this.body = body;
    }

    public Statement[] getBody() {
        return body;
    }

    public Identifier getVarName() {
        return varName;
    }

    public Expression getVarValue() {
        return varValue;
    }

    public void analyze(XpandExecutionContext ctx, final Set<AnalysationIssue> issues) {
    	EClassifier t = getVarValue().analyze(ctx, issues);
        if (t == null) {
            t = EcorePackage.eINSTANCE.getEObject();
        }
        ctx = ctx.cloneWithVariable(new Variable(getVarName().getValue(), t));
        for (Statement statement : getBody()) {
            statement.analyze(ctx, issues);
        }
    }

    @@Override
    public void evaluateInternal(XpandExecutionContext ctx) {
        ctx = ctx.cloneWithVariable(new Variable(getVarName().getValue(), getVarValue()
                .evaluate(ctx)));
        for (Statement statement : getBody()) {
            statement.evaluate(ctx);
        }
    }
@

