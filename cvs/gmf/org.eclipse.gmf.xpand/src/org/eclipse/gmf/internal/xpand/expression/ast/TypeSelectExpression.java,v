head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081020-0700:1.2
	ocl_qvt:1.2.0.6
	Root_ocl_qvt:1.2
	v20080722-1827:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080528-1052:1.2
	v20080516-1143:1.2
	v20080417-1610:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070921-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070420-1000:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	M3_20:1.2;
locks; strict;
comment	@# @;


1.2
date	2006.11.09.18.00.11;	author atikhomirov;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2006.10.18.20.33.49;	author atikhomirov;	state Exp;
branches;
next	;

1.2.6.1
date	2008.08.05.12.49.24;	author atikhomirov;	state dead;
branches;
next	;
commitid	546c48984c4a4567;


desc
@@


1.2
log
@issue's type converted to enum, added decreased (warning) severity option toease development with xpand
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.expression.ast;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.gmf.internal.xpand.BuiltinMetaModel;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.EvaluationException;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.expression.Variable;

/**
 * @@author Sven Efftinge
 * @@author Arno Haase
 */
public class TypeSelectExpression extends FeatureCall {

    private Identifier typeLiteral;

    public TypeSelectExpression(final int end, final Identifier opName, final Identifier typeLiteral,
            final Expression target) {
        super(opName.getStart(), end, opName.getLine(), opName, target);
        this.typeLiteral = typeLiteral;
    }

    @@Override
    public String toString() {
        return super.toString() + "(" + typeLiteral + ")";
    }

    @@Override
    public Object evaluateInternal(final ExecutionContext ctx) {
        Object targetObj = null;
        if (getTarget() == null) {
            final Variable v = ctx.getVariable(ExecutionContext.IMPLICIT_VARIABLE);
            if (v != null) {
				targetObj = v.getValue();
			}
        } else {
            targetObj = getTarget().evaluate(ctx);
        }
        if (targetObj == null) {
			return null;
		}
        if (!(targetObj instanceof Collection)) {

        }

        return executeTypeSelect((Collection) targetObj, ctx);
    }

    private Object executeTypeSelect(final Collection collection, final ExecutionContext ctx) {
        final Collection<Object> resultCol = new ArrayList<Object>();
        final EClassifier t = ctx.getTypeForName(typeLiteral.getValue());
        if (t == null) {
            throw new EvaluationException("Unkown type '" + typeLiteral + "'", typeLiteral);
        }
        for (final Iterator iter = collection.iterator(); iter.hasNext();) {
            final Object ele = iter.next();
            if ((ele!=null) && BuiltinMetaModel.isAssignableFrom(t, BuiltinMetaModel.getType(ele))) {
                resultCol.add(ele);
            }
        }
        return resultCol;
    }

    @@Override
    public EClassifier analyze(final ExecutionContext ctx, final Set<AnalysationIssue> issues) {
        EClassifier targetType = null;
        if (getTarget() == null) {
            final Variable v = ctx.getVariable(ExecutionContext.IMPLICIT_VARIABLE);
            if (v != null) {
				targetType = (EClassifier) v.getValue();
			}
        } else {
            targetType = getTarget().analyze(ctx, issues);
        }
        if (targetType == null) {
			return null;
		}

        if (!BuiltinMetaModel.isParameterizedType(targetType)) {
            issues.add(new AnalysationIssue(AnalysationIssue.Type.INCOMPATIBLE_TYPES, "Collection type expected! was : "
                    + targetType, getTarget()));
            return null;
        }

        final EClassifier closureEClassifier = ctx.getTypeForName(typeLiteral.getValue());
        if (closureEClassifier == null) {
            issues.add(new AnalysationIssue(AnalysationIssue.Type.TYPE_NOT_FOUND, "Couldn't find type " + typeLiteral,
                    typeLiteral));
            return null;
        }

        return BuiltinMetaModel.getListType(closureEClassifier);
    }

}
@


1.2.6.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d100 1
a100 1
            issues.add(new AnalysationIssue(AnalysationIssue.INCOMPATIBLE_TYPES, "Collection type expected! was : "
d107 1
a107 1
            issues.add(new AnalysationIssue(AnalysationIssue.TYPE_NOT_FOUND, "Couldn't find type " + typeLiteral,
@

