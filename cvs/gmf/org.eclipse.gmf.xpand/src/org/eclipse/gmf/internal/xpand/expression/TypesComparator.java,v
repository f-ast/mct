head	1.1;
access;
symbols
	v20081022-1925:1.1
	v20081020-0700:1.1
	ocl_qvt:1.1.0.6
	Root_ocl_qvt:1.1
	v20080722-1827:1.1
	v20080718-1731:1.1
	v20080716-1600:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080528-1052:1.1
	v20080516-1143:1.1
	v20080417-1610:1.1
	v20080322-0000:1.1
	v20080222-1200:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070518-1300:1.1
	v20070420-1000:1.1
	v20070405-1100:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	M3_20:1.1;
locks; strict;
comment	@# @;


1.1
date	2006.10.18.20.33.51;	author atikhomirov;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2008.08.05.12.49.25;	author atikhomirov;	state Exp;
branches;
next	1.1.6.2;
commitid	546c48984c4a4567;

1.1.6.2
date	2008.08.06.14.05.36;	author atikhomirov;	state dead;
branches;
next	;
commitid	35b4899afa74567;


desc
@@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.expression;

import java.util.Comparator;
import java.util.List;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.gmf.internal.xpand.BuiltinMetaModel;

public final class TypesComparator implements Comparator<List<? extends EClassifier>> {
    /**
     * 
     * returns -1 if the second list of types is not assignable to the first
     * list of types returns 0 if the second list of types exactly matches the
     * first list of types returns 1 if the second list of types is assignable
     * to the first list of types
     */
    public int compare(final List<? extends EClassifier> types1, final List<? extends EClassifier> types2) {
        if ((types1 == null) || (types2 == null)) {
			throw new NullPointerException();
		}
        if (types1.size() != types2.size()) {
			return -1;
		}
        boolean directMatch = true;
        for (int i = 0, x = types1.size(); i < x; i++) {
            final EClassifier type1 = types1.get(i);
            final EClassifier type2 = types2.get(i);
            if (BuiltinMetaModel.isAssignableFrom(type1, type2)) {
                if (!type1.equals(type2)) {
                    directMatch = false;
                }
            } else {
				return -1;
			}
        }
        if (directMatch) {
			return 0;
		} else {
			return 1;
		}
    }

}@


1.1.6.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
a13 1
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
d21 1
a21 3
import org.eclipse.ocl.ecore.EcoreEnvironment;
import org.eclipse.ocl.util.TypeUtil;
import org.eclipse.ocl.utilities.UMLReflection;
d24 1
a24 8

	private final EcoreEnvironment env;

	public TypesComparator(EcoreEnvironment env) {
		this.env = env;
	}
	
	/**
d40 6
a45 8
            final EClassifier type1 = TypeUtil.resolveType(env, types1.get(i));
            final EClassifier type2 = TypeUtil.resolveType(env, types2.get(i));
            int rel = TypeUtil.getRelationship(env, type2, type1);
            if ((rel & UMLReflection.SUBTYPE) != 0) {
            	if (rel != UMLReflection.SAME_TYPE) {
            		 // sic! Update directMatch *conditionally*
            		directMatch = false;
            	}
@


1.1.6.2
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@@


