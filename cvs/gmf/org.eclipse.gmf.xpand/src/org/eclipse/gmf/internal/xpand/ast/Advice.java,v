head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081020-0700:1.5
	ocl_qvt:1.5.0.4
	Root_ocl_qvt:1.5
	v20080722-1827:1.5
	v20080718-1731:1.5
	v20080716-1600:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080528-1052:1.5
	v20080516-1143:1.5
	v20080417-1610:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20071130-1111:1.5
	v20071124-0000:1.2.2.1
	v20071108-0000:1.5
	v20071003-0000:1.2
	v20070921-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070420-1000:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	M3_20:1.2;
locks; strict;
comment	@# @;


1.5
date	2007.10.29.16.58.24;	author atikhomirov;	state Exp;
branches
	1.5.4.1;
next	1.4;
commitid	5b914726112d4567;

1.4
date	2007.10.12.18.07.53;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	776b470fb7f94567;

1.3
date	2007.10.12.18.01.06;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	633a470fb6614567;

1.2
date	2006.10.23.18.58.22;	author atikhomirov;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.10.18.20.33.50;	author atikhomirov;	state Exp;
branches;
next	;

1.2.2.1
date	2007.10.12.18.07.08;	author atikhomirov;	state Exp;
branches;
next	;
commitid	74af470fb7cc4567;

1.5.4.1
date	2008.08.05.12.49.25;	author atikhomirov;	state Exp;
branches;
next	1.5.4.2;
commitid	546c48984c4a4567;

1.5.4.2
date	2008.08.06.14.05.36;	author atikhomirov;	state Exp;
branches;
next	1.5.4.3;
commitid	35b4899afa74567;

1.5.4.3
date	2008.08.08.16.33.25;	author atikhomirov;	state Exp;
branches;
next	1.5.4.4;
commitid	a21489c75534567;

1.5.4.4
date	2008.08.08.18.15.51;	author atikhomirov;	state Exp;
branches;
next	;
commitid	51ea489c8d554567;


desc
@@


1.5
log
@[207437] Resources to be composed from several sources
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2007 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.ast;

import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.gmf.internal.xpand.BuiltinMetaModel;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.SyntaxConstants;
import org.eclipse.gmf.internal.xpand.expression.Variable;
import org.eclipse.gmf.internal.xpand.expression.ast.DeclaredParameter;
import org.eclipse.gmf.internal.xpand.expression.ast.Identifier;
import org.eclipse.gmf.internal.xpand.model.XpandAdvice;
import org.eclipse.gmf.internal.xpand.model.XpandDefinition;
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;

/**
 * @@author Sven Efftinge
 */
public class Advice extends AbstractDefinition implements XpandAdvice {

    public final static String DEF_VAR_NAME = "targetDef";

    private final Identifier pointCut;

    private final boolean wildParams;

    public Advice(final int start, final int end, final int line, final Identifier pointCut, final Identifier type,
            final DeclaredParameter[] params, final boolean wildParams, final Statement[] body) {
        super(start, end, line, type, params, body);
        this.pointCut = pointCut;
        this.wildParams = wildParams;
    }

    public Identifier getPointCut() {
        return pointCut;
    }

    @@Override
    public String toString() {
        return getOwner().getFullyQualifiedName() + " " + pointCut.getValue() + getParamString() + " FOR "
                + getType().getValue();
    }

    @@Override
    public void analyze(XpandExecutionContext ctx, final Set<AnalysationIssue> issues) {
        ctx = ctx.cloneWithVariable(new Variable(DEF_VAR_NAME, BuiltinMetaModel.DEFINITION_TYPE));
        super.analyze(ctx, issues);
    }

    private String getParamString() {
        if ((getParams() == null) || (getParams().length == 0)) {
			return wildParams ? "(*)" : "";
		}
        final StringBuffer buff = new StringBuffer("(");
        for (int i = 0; i < getParams().length; i++) {
            final DeclaredParameter p = getParams()[i];
            buff.append(p.getName().getValue()).append(" ").append(p.getType().getValue());
            if (i + 1 < getParams().length) {
                buff.append(",");
            }
        }
        if (wildParams) {
            buff.append(",*");
        }
        return buff.append(")").toString();
    }

    private Pattern p = null;

    public boolean matches(final XpandDefinition def, XpandExecutionContext ctx) {
        if (p == null) {
            p = Pattern.compile(pointCut.getValue().replaceAll("\\*", ".*"));
        }
        // 1) AROUND simpleName
        final Matcher m1 = p.matcher(def.getName());
        // 2) AROUND fully::qualified::name
        final Matcher m2 = p.matcher(def.getOwner().getFullyQualifiedName() + SyntaxConstants.NS_DELIM + def.getName());
        if (m1.matches() || m2.matches()) {
            ctx = ctx.cloneWithResource(def.getOwner());
            final EClassifier t = ctx.getTypeForName(def.getTargetType());
            final EClassifier[] paramTypes = new EClassifier[def.getParams().length];
            for (int i = 0; i < paramTypes.length; i++) {
                paramTypes[i] = ctx.getTypeForName(def.getParams()[i].getType().getValue());
            }
            if ((getParams().length == paramTypes.length) || (wildParams && (getParams().length <= paramTypes.length))) {

                ctx = (XpandExecutionContext) ctx.cloneWithResource(this.getOwner());	//need to resolve in the context of the aspect
                final EClassifier at = ctx.getTypeForName(getTargetType());
                if (BuiltinMetaModel.isAssignableFrom(at, t)) {
                    for (int i = 0; i < getParams().length; i++) {
                        final EClassifier pt = ctx.getTypeForName(getParams()[i].getType().getValue());
                        if (!BuiltinMetaModel.isAssignableFrom(pt, paramTypes[i])) {
							return false;
						}
                    }
                    return true;
                }
            }
        }
        return false;
    }

}
@


1.5.4.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
a13 1
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
d24 1
a24 1
import org.eclipse.gmf.internal.xpand.expression.TypeNameUtil;
d26 1
a30 2
import org.eclipse.gmf.internal.xpand.ocl.DeclaredParameter;
import org.eclipse.ocl.cst.TypeCS;
d43 1
a43 1
    public Advice(final int start, final int end, final int line, final Identifier pointCut, final TypeCS type,
d56 2
a57 1
        return owner.getFullyQualifiedName() + " " + pointCut.getValue() + getParamString() + " FOR " + type.toString();
d67 1
a67 1
        if ((params == null) || (params.length == 0)) {
d70 5
a74 5
        final StringBuilder buff = new StringBuilder("(");
        for (int i = 0; i < params.length; i++) {
            final DeclaredParameter p = params[i];
            buff.append(p.getVarName()).append(" ").append(p.getTypeName());
            if (i + 1 < params.length) {
d93 1
a93 1
        final Matcher m2 = p.matcher(def.getOwner().getFullyQualifiedName() + TypeNameUtil.NS_DELIM + def.getName());
d96 1
a96 1
            final EClassifier t = def.getTargetType().getTypeForName(ctx);
d99 1
a99 1
                paramTypes[i] = def.getParams()[i].getTypeForName(ctx);
d101 1
a101 1
            if ((params.length == paramTypes.length) || (wildParams && (params.length <= paramTypes.length))) {
d103 2
a104 2
                ctx = (XpandExecutionContext) ctx.cloneWithResource(this.owner);	//need to resolve in the context of the aspect
                final EClassifier at = type.getTypeForName(ctx);
d106 2
a107 2
                    for (int i = 0; i < params.length; i++) {
                        final EClassifier pt = params[i].getTypeForName(ctx);
@


1.5.4.2
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d20 3
a23 2
import org.eclipse.gmf.internal.xpand.model.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.model.Variable;
d26 1
a26 1
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
a27 1
import org.eclipse.gmf.internal.xpand.util.TypeNameUtil;
d58 1
a58 1
    public void analyze(ExecutionContext ctx, final Set<AnalysationIssue> issues) {
d83 1
a83 1
    public boolean matches(final XpandDefinition def, ExecutionContext ctx) {
d100 1
a100 1
                ctx = (ExecutionContext) ctx.cloneWithResource(this.owner);	//need to resolve in the context of the aspect
@


1.5.4.3
log
@[243154] Use OCL instead of home-grown expression language - populate ocl environment with variable types (hence, need to tell var value from var type)
@
text
@d59 1
a59 1
        ctx = ctx.cloneWithVariable(new Variable(DEF_VAR_NAME, BuiltinMetaModel.DEFINITION_TYPE, null));
d100 1
a100 1
                ctx = ctx.cloneWithResource(this.owner);	//need to resolve in the context of the aspect
@


1.5.4.4
log
@[243154] Use OCL instead of home-grown expression language - AOP tests fixed, though with sort of hack to pass proceed() java method implementation to OCL
@
text
@a97 1
            // FIXME next check can be done earlier
d102 1
a102 1
                if (BuiltinMetaModel.isAssignableFrom(ctx, at, t)) {
d105 1
a105 1
                        if (!BuiltinMetaModel.isAssignableFrom(ctx, pt, paramTypes[i])) {
@


1.4
log
@copyright year
@
text
@d103 1
a103 1
                ctx = (XpandExecutionContext) ctx.cloneWithResource(def.getOwner());
@


1.3
log
@[202257] additions aspect get invoked for each sub-template
@
text
@d4 1
a4 1
 * Copyright (c) 2005-2006 Sven Efftinge and others.
@


1.2
log
@finals
@
text
@d24 1
d90 5
a94 2
        final Matcher m = p.matcher(def.getName());
        if (m.matches()) {
@


1.2.2.1
log
@[202257] additions aspect get invoked for each sub-template
@
text
@d4 1
a4 1
 * Copyright (c) 2005-2007 Sven Efftinge and others.
a23 1
import org.eclipse.gmf.internal.xpand.expression.SyntaxConstants;
d89 2
a90 5
        // 1) AROUND simpleName
        final Matcher m1 = p.matcher(def.getName());
        // 2) AROUND fully::qualified::name
        final Matcher m2 = p.matcher(def.getOwner().getFullyQualifiedName() + SyntaxConstants.NS_DELIM + def.getName());
        if (m1.matches() || m2.matches()) {
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d32 1
a32 3
 * *
 * 
 * @@author Sven Efftinge *
d38 1
a38 1
    private Identifier pointCut = null;
d40 1
a40 1
    private boolean wildParams;
@

