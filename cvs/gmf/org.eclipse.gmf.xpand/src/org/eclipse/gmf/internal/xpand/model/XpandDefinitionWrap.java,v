head	1.1;
access;
symbols
	v20081022-1925:1.1
	v20081020-0700:1.1
	ocl_qvt:1.1.0.6
	Root_ocl_qvt:1.1
	v20080722-1827:1.1
	v20080718-1731:1.1
	v20080716-1600:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080528-1052:1.1
	v20080516-1143:1.1
	v20080417-1610:1.1
	v20080322-0000:1.1
	v20080222-1200:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070518-1300:1.1
	v20070420-1000:1.1
	v20070405-1100:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	M3_20:1.1;
locks; strict;
comment	@# @;


1.1
date	2006.10.18.20.33.50;	author atikhomirov;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2008.08.05.12.49.25;	author atikhomirov;	state Exp;
branches;
next	1.1.6.2;
commitid	546c48984c4a4567;

1.1.6.2
date	2008.08.06.14.05.34;	author atikhomirov;	state Exp;
branches;
next	1.1.6.3;
commitid	35b4899afa74567;

1.1.6.3
date	2008.08.08.16.33.25;	author atikhomirov;	state Exp;
branches;
next	;
commitid	a21489c75534567;


desc
@@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@/*******************************************************************************
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package org.eclipse.gmf.internal.xpand.model;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.expression.Variable;
import org.eclipse.gmf.internal.xpand.expression.ast.DeclaredParameter;

public class XpandDefinitionWrap {

    private final XpandDefinition def;

    private final XpandExecutionContext ctx;

    public XpandDefinitionWrap(final XpandDefinition def, final XpandExecutionContext ctx) {
        this.def = def;
        this.ctx = ctx;
    }

    public String getName() {
        return def.getName();
    }

    public EClassifier getTargetType() {
        return ctx.getTypeForName(def.getTargetType());
    }

    public List<EClassifier> getParamTypes() {
        final DeclaredParameter[] p = def.getParams();
        final List<EClassifier> result = new ArrayList<EClassifier>();
        for (DeclaredParameter element : p) {
            result.add(ctx.getTypeForName(element.getType().getValue()));
        }
        return result;
    }

    public List<String> getParamNames() {
        final DeclaredParameter[] p = def.getParams();
        final List<String> result = new ArrayList<String>();
        for (DeclaredParameter element : p) {
            result.add(element.getName().getValue());
        }
        return result;
    }

    public void proceed() {
        def.evaluate(ctx);
    }

    public void proceed(final Object target, final List<?> list) {
        XpandExecutionContext context = ctx;
        if (target != null) {
            context = (XpandExecutionContext) context.cloneWithVariable(new Variable(ExecutionContext.IMPLICIT_VARIABLE, target));
        }
        if (list != null) {
            final List<String> n = getParamNames();
            for (int i = 0, x = list.size(); i < x;) {
                final Object o = list.get(i);
                if ((o != null) && (n.size() >= i)) {
                    context = context.cloneWithVariable(new Variable(n.get(i), o));
                }
            }
        }
        def.evaluate(context);
    }

    @@Override
    public String toString() {
        return getClass().getSimpleName() + '[' + def.toString() + ']';
    }
}

@


1.1.6.1
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d1 2
a2 2
/*
 * Copyright (c) 2006, 2008 committers of openArchitectureWare and others.
d8 1
a8 1
 */
d17 1
a17 1
import org.eclipse.gmf.internal.xpand.ocl.DeclaredParameter;
d34 4
d42 1
a42 1
            result.add(element.getTypeForName(ctx));
d51 1
a51 1
            result.add(element.getVarName());
@


1.1.6.2
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d15 2
d23 1
a23 1
    private final ExecutionContext ctx;
d25 1
a25 1
    public XpandDefinitionWrap(final XpandDefinition def, final ExecutionContext ctx) {
d57 1
a57 1
        ExecutionContext context = ctx;
d59 1
a59 1
            context = (ExecutionContext) context.cloneWithVariable(new Variable(ExecutionContext.IMPLICIT_VARIABLE, target));
@


1.1.6.3
log
@[243154] Use OCL instead of home-grown expression language - populate ocl environment with variable types (hence, need to tell var value from var type)
@
text
@d57 1
a57 1
            context = context.cloneWithVariable(new Variable(ExecutionContext.IMPLICIT_VARIABLE, null, target));
d64 1
a64 1
                    context = context.cloneWithVariable(new Variable(n.get(i), null, o));
@


