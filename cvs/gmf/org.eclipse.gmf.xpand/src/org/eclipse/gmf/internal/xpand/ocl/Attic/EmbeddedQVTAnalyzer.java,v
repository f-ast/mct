head	1.1;
access;
symbols
	v20081022-1925:1.1
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2008.08.10.15.10.44;	author atikhomirov;	state dead;
branches
	1.1.2.1;
next	;
commitid	2d13489f04f14567;

1.1.2.1
date	2008.08.10.15.10.44;	author atikhomirov;	state Exp;
branches;
next	;
commitid	2d13489f04f14567;


desc
@@


1.1
log
@file EmbeddedQVTAnalyzer.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@[243154] Use OCL instead of home-grown expression language - most (what's feasible) of the extension invocation fixed. A lot of hacks and questions, though.
@
text
@a0 56
/*
 * Copyright (c) 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */

package org.eclipse.gmf.internal.xpand.ocl;

import lpg.lpgjavaruntime.Monitor;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.m2m.internal.qvt.oml.ast.parser.QvtOperationalVisitorCS;
import org.eclipse.m2m.internal.qvt.oml.compiler.QvtCompilerOptions;
import org.eclipse.m2m.internal.qvt.oml.cst.parser.AbstractQVTParser;
import org.eclipse.ocl.cst.CSTNode;
import org.eclipse.ocl.cst.OCLExpressionCS;
import org.eclipse.ocl.ecore.EcoreEnvironment;
import org.eclipse.ocl.expressions.OCLExpression;

/**
 * @@author artem
 *
 */
class EmbeddedQVTAnalyzer extends QvtOperationalVisitorCS {

	EmbeddedQVTAnalyzer(EcoreEnvironment env) {
		super(new AbstractQVTParser(env) {
			@@Override
			public String getTokenKindName(int kind) {
				throw new UnsupportedOperationException();
			}

			@@Override
			public CSTNode parseTokensToCST(Monitor monitor, int error_repair_count) {
				throw new UnsupportedOperationException();
			}
		}, options());
	}

	public OCLExpression<EClassifier> analyzeExpression(OCLExpressionCS oclExpressionCS) {
		return super.oclExpressionCS(oclExpressionCS, getOCLEnvironment());
	}

	private static QvtCompilerOptions options() {
		QvtCompilerOptions options = new QvtCompilerOptions();
		options.setGenerateCompletionData(false);
		options.setShowAnnotations(false);
		return options;
	}
}
@

