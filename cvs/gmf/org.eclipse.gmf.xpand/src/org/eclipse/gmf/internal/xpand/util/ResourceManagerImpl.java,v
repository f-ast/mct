head	1.8;
access;
symbols
	v20081022-1925:1.8
	v20081020-0700:1.8
	ocl_qvt:1.8.0.4
	Root_ocl_qvt:1.8
	v20080722-1827:1.8
	v20080718-1731:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080528-1052:1.8
	v20080516-1143:1.8
	v20080417-1610:1.8
	v20080322-0000:1.8
	v20080222-1200:1.7
	v20071130-1111:1.7
	v20071124-0000:1.6
	v20071108-0000:1.7
	v20071003-0000:1.6
	v20070921-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070518-1300:1.6
	v20070420-1000:1.6
	v20070405-1100:1.6
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20070208-1800:1.5
	v20070103-0300:1.3
	M4_20:1.3
	M3_20:1.3;
locks; strict;
comment	@# @;


1.8
date	2008.02.22.16.03.40;	author atikhomirov;	state Exp;
branches
	1.8.4.1;
next	1.7;
commitid	3d8447bef25b4567;

1.7
date	2007.10.29.16.58.24;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	5b914726112d4567;

1.6
date	2007.04.06.11.31.08;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	526546162f7b4567;

1.5
date	2007.02.05.17.10.12;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	517745c764f34567;

1.4
date	2007.01.10.16.45.29;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	56de45a518284567;

1.3
date	2006.10.26.14.24.19;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.25.17.23.40;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.51;	author atikhomirov;	state Exp;
branches;
next	;

1.8.4.1
date	2008.07.24.16.21.35;	author ashatalin;	state Exp;
branches;
next	1.8.4.2;
commitid	7c4a4888ac0d4567;

1.8.4.2
date	2008.07.29.15.57.04;	author ashatalin;	state Exp;
branches;
next	1.8.4.3;
commitid	337c488f3dcd4567;

1.8.4.3
date	2008.07.30.11.31.31;	author ashatalin;	state Exp;
branches;
next	1.8.4.4;
commitid	e56489051124567;

1.8.4.4
date	2008.07.30.11.57.59;	author ashatalin;	state Exp;
branches;
next	1.8.4.5;
commitid	242f489057464567;

1.8.4.5
date	2008.08.05.12.49.25;	author atikhomirov;	state Exp;
branches;
next	1.8.4.6;
commitid	546c48984c4a4567;

1.8.4.6
date	2008.08.06.14.05.34;	author atikhomirov;	state Exp;
branches;
next	1.8.4.7;
commitid	35b4899afa74567;

1.8.4.7
date	2008.08.10.15.10.44;	author atikhomirov;	state Exp;
branches;
next	1.8.4.8;
commitid	2d13489f04f14567;

1.8.4.8
date	2008.10.24.17.50.52;	author atikhomirov;	state Exp;
branches;
next	;
commitid	cb8049020afb4567;


desc
@@


1.8
log
@restored behaviour to populate problems view on parsing error instead of plain parser exception logging.
@
text
@/*
 * Copyright (c) 2006, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Artem Tikhomirov (Borland)
 *     Boris Blajer (Borland) - support for composite resources
 */
package org.eclipse.gmf.internal.xpand.util;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.util.Map;
import java.util.TreeMap;

import org.eclipse.gmf.internal.xpand.Activator;
import org.eclipse.gmf.internal.xpand.ResourceManager;
import org.eclipse.gmf.internal.xpand.expression.SyntaxConstants;
import org.eclipse.gmf.internal.xpand.model.XpandResource;
import org.eclipse.gmf.internal.xpand.xtend.ast.XtendResource;

// FIXME it's not a good idea to parse file on every proposal computation
public abstract class ResourceManagerImpl implements ResourceManager {
	private final Map<String, XtendResource> cachedXtend = new TreeMap<String, XtendResource>();
	private final Map<String, XpandResource> cachedXpand = new TreeMap<String, XpandResource>();

	public XtendResource loadXtendResource(String fullyQualifiedName) {
		try {
			return loadXtendThroughCache(fullyQualifiedName);
		} catch (FileNotFoundException ex) {
			return null;	//Missing resource is an anticipated situation, not a error that should be handled
		} catch (IOException ex) {
			Activator.logError(ex);
		} catch (ParserException ex) {
			handleParserException(ex);
		}
		return null;
	}

	protected XtendResource loadXtendThroughCache(String qualifiedName) throws IOException, ParserException {
		if (hasCachedXtend(qualifiedName)) {
			return cachedXtend.get(qualifiedName);
		}
		final XtendResource loaded = doLoadXtendResource(qualifiedName);
		assert loaded != null; // this is the contract of loadXtendResource
		if (shouldCache()) {
			cachedXtend.put(qualifiedName, loaded);
		}
		return loaded;
	}
	
	private XtendResource doLoadXtendResource(String fullyQualifiedName) throws IOException, ParserException {
		Reader[] rs = resolveMultiple(fullyQualifiedName, XtendResource.FILE_EXTENSION);
		assert rs != null && rs.length > 0;
		XtendResource[] result = loadXtendResources(rs, fullyQualifiedName);
		if (result.length == 1) {
			return result[0];
		}
		return new CompositeXtendResource(this, result);
	}

	public XpandResource loadXpandResource(String fullyQualifiedName) {
		try {
			return loadXpandThroughCache(fullyQualifiedName);
		} catch (FileNotFoundException ex) {
			return null;	//Missing resource is an anticipated situation, not a error that should be handled
		} catch (IOException ex) {
			// XXX come up with better handling
			Activator.logWarn(ex.getMessage());
		} catch (ParserException ex) {
			handleParserException(ex);
		}
		return null;
	}

	protected XpandResource loadXpandThroughCache(String qualifiedName) throws IOException, ParserException {
		if (hasCachedXpand(qualifiedName)) {
			return cachedXpand.get(qualifiedName);
		}
		final XpandResource loaded = doLoadXpandResource(qualifiedName);
		if (shouldCache()) {
			cachedXpand.put(qualifiedName, loaded);
		}
		return loaded;
	}

	private XpandResource doLoadXpandResource(String fullyQualifiedName) throws IOException, ParserException {
		Reader[] rs1 = resolveMultiple(fullyQualifiedName, XpandResource.TEMPLATE_EXTENSION);
		assert rs1 != null && rs1.length > 0; // exception should be thrown to indicate issues with resolve
		XpandResource[] unadvised = loadXpandResources(rs1, fullyQualifiedName);
		XpandResource[] advices = null;
		try {
	    	String aspectsTemplateName = getAspectsTemplateName(fullyQualifiedName);
	    	Reader[] rs2 = resolveMultiple(aspectsTemplateName, XpandResource.TEMPLATE_EXTENSION);
	    	// XXX relax resolveMultiple to return empty array and use length==0 here instead of exception
	    	advices = loadXpandResources(rs2, aspectsTemplateName);
		} catch (FileNotFoundException e) {
		} catch (IOException ex) {
			// XXX come up with better handling
			Activator.logWarn(ex.getMessage());
		} catch (ParserException ex) {
			handleParserException(ex);
		}
		if (advices == null && unadvised.length == 1) {
			return unadvised[0];
		}
		return new CompositeXpandResource(this, unadvised, advices);
	}

	/**
	 * XXX: only to simplify tests, should be private or inlined
	 */
	protected String getAspectsTemplateName(String fullyQualifiedName) {
		return ASPECT_PREFIX + fullyQualifiedName;
	}

	/**
	 * If the given fully-qualified name is an aspect, transforms it to its "host" fully-qualified name. Otherwise,
	 * returns the given fully-qualified name.
	 */
	protected String getNonAspectsTemplateName(String possiblyAspectedFullyQualifiedName) {
		if (possiblyAspectedFullyQualifiedName == null) {
			return null;
		}
		if (possiblyAspectedFullyQualifiedName.startsWith(ASPECT_PREFIX)) {
			return possiblyAspectedFullyQualifiedName.substring(ASPECT_PREFIX.length());
		}
		return possiblyAspectedFullyQualifiedName;
	}

	protected abstract void handleParserException(ParserException ex);

	/**
	 * Returns an array of resolutions, in the order from newest to oldest. 
	 * This is to enable one template to partially override only a subset of parent templates.
	 *  
	 * @@return never return <code>null</code> or an empty array, throw exception instead
	 * @@throws IOException in case resource can't be read. Throw {@@link java.io.FileNotFoundException} to indicate resource was not found. 
	 */
	protected abstract Reader[] resolveMultiple(String fullyQualifiedName, String extension) throws IOException;

	/**
	 * Readers get closed after parse attempt. 
	 */
	protected XtendResource[] loadXtendResources(Reader[] readers, String fullyQualifiedName) throws IOException, ParserException {
		XtendResource[] result = new XtendResource[readers.length];
		for (int i = 0; i < readers.length; i++) {
			assert readers[i] != null;
			try {
				result[i] = new XtendResourceParser().parse(readers[i], fullyQualifiedName);
				assert result[i] != null; // this is the contract of loadXpandResource
			} finally {
				try {
					readers[i].close();
				} catch (Exception ex) {/*IGNORE*/}
			}
		}
		return result;
	}

	/**
	 * Readers get closed after parse attempt.
	 */
	protected XpandResource[] loadXpandResources(Reader[] readers, String fullyQualifiedName) throws IOException, ParserException {
		XpandResource[] result = new XpandResource[readers.length];
		for (int i = 0; i < readers.length; i++) {
			assert readers[i] != null;
			try {
				result[i] = new XpandResourceParser().parse(readers[i], fullyQualifiedName);
				assert result[i] != null; // this is the contract of parse
			} finally {
				try {
					readers[i].close();
				} catch (Exception ex) {/*IGNORE*/}
			}
		}
		return result;
	}

	protected abstract boolean shouldCache();

	protected final boolean hasCachedXpand(String fullyQualifiedName) {
		return shouldCache() && cachedXpand.containsKey(fullyQualifiedName);
	}
	protected final boolean hasCachedXtend(String fullyQualifiedName) {
		return shouldCache() && cachedXtend.containsKey(fullyQualifiedName);
	}
	protected final void forgetCachedXpand(String fullyQualifiedName) {
		cachedXpand.remove(fullyQualifiedName);
	}
	protected final void forgetCachedXtend(String fullyQualifiedName) {
		cachedXtend.remove(fullyQualifiedName);
	}
	protected final void forgetAll() {
		cachedXpand.clear();
		cachedXtend.clear();
	}

	private static final String ASPECT_PREFIX = "aspects" + SyntaxConstants.NS_DELIM;	//$NON-NLS-1$
}
@


1.8.4.1
log
@Initial commit of extend->qvt migration in xpand.
@
text
@a14 1
import java.io.ByteArrayInputStream;
a16 1
import java.io.InputStream;
a17 1
import java.io.StringWriter;
a20 1
import org.eclipse.core.filesystem.IFileStore;
a24 2
import org.eclipse.gmf.internal.xpand.xtend.ast.QvtFile;
import org.eclipse.gmf.internal.xpand.xtend.ast.QvtResource;
a25 7
import org.eclipse.m2m.internal.qvt.oml.common.MdaException;
import org.eclipse.m2m.internal.qvt.oml.common.io.CFile;
import org.eclipse.m2m.internal.qvt.oml.common.io.CFolder;
import org.eclipse.m2m.internal.qvt.oml.compiler.CompiledModule;
import org.eclipse.m2m.internal.qvt.oml.compiler.QvtCompiler;
import org.eclipse.m2m.internal.qvt.oml.compiler.QvtCompilerOptions;
import org.eclipse.m2m.internal.qvt.oml.runtime.project.DeployedImportResolver;
a28 72

	public final class InputStreadCFile implements CFile {

		private byte[] bytes;

		private String name;

		public InputStreadCFile(Reader reader, String name) throws IOException {
			StringWriter sw = new StringWriter();
			for (int ch = reader.read(); ch != -1; ch = reader.read()) {
				sw.write(ch);
			}
			bytes = sw.toString().getBytes(getCharset());
			this.name = name;
		}

		public void create(InputStream contents) throws IOException {
			throw new UnsupportedOperationException("TODO");
		}

		public String getCharset() throws IOException {
			return "UTF-8";
		}

		public InputStream getContents() throws IOException {
			return new ByteArrayInputStream(bytes);
		}

		public CFolder getParent() {
			return null;
		}

		public long getTimeStamp() {
			return -1;
		}

		public String getUnitName() {
			return name;
		}

		public void setContents(InputStream contents) throws IOException {
			throw new UnsupportedOperationException("TODO");
		}

		public void delete() throws IOException {
			throw new UnsupportedOperationException("TODO");
		}

		public boolean exists() {
			return true;
		}

		public String getExtension() {
			return QvtResource.FILE_EXTENSION;
		}

		public IFileStore getFileStore() throws IOException {
			throw new UnsupportedOperationException("TODO");
		}

		public String getFullPath() {
			return name;
		}

		public String getName() {
			return name;
		}

		public void refresh() throws IOException {
		}
	}

a30 47
	private final Map<String, QvtResource> cachedQvt = new TreeMap<String, QvtResource>();

	public QvtResource loadQvtResource(String fullyQualifiedName) {
		try {
			return loadQvtResourceThroughCache(fullyQualifiedName);
		} catch (FileNotFoundException ex) {
			return null; // Missing resource is an anticipated situation, not a
			// error that should be handled
		} catch (IOException e) {
			Activator.logError(e);
		} catch (ParserException e) {
			// TODO: check if any exceptions present here at all..
			handleParserException(e);
		}
		return null;
	}

	protected QvtResource loadQvtResourceThroughCache(String qualifiedName) throws IOException, ParserException {
		if (hasCachedQvt(qualifiedName)) {
			return cachedQvt.get(qualifiedName);
		}
		final QvtResource loaded = doLoadQvtResource(qualifiedName);
		assert loaded != null; // this is the contract of loadXtendResource
		if (shouldCache()) {
			cachedQvt.put(qualifiedName, loaded);
		}
		return loaded;
	}

	private QvtResource doLoadQvtResource(String fullyQualifiedName) throws IOException, ParserException {
		Reader[] readers = resolveMultiple(fullyQualifiedName, QvtResource.FILE_EXTENSION);
		assert readers.length == 1;
		CFile cFile = new InputStreadCFile(readers[0], fullyQualifiedName);
		// TODO: use different kind of ImportResolver being able to construct
		// referenced CFiles using ResourceManagerImpl
		QvtCompiler qvtCompiler = new QvtCompiler(new DeployedImportResolver());
		QvtCompilerOptions options = new QvtCompilerOptions();
		options.setGenerateCompletionData(false);
		options.setShowAnnotations(false);
		try {
			CompiledModule module = qvtCompiler.compile(cFile, options, null).getModule();
//			assert module.getModule() instanceof Library;
			return new QvtFile(module, fullyQualifiedName);	
		} catch (MdaException e) {
			throw new ParserException(fullyQualifiedName, new ParserException.ErrorLocationInfo(e.toString()));
		}
	}
a192 4
	protected final boolean hasCachedQvt(String fullyQualifiedName) {
		return shouldCache() && cachedQvt.containsKey(fullyQualifiedName);
	}

a198 5

	protected final void forgetCachedQvt(String fullyQualifiedName) {
		cachedQvt.remove(fullyQualifiedName);
	}

a201 1
		cachedQvt.clear();
@


1.8.4.2
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@d31 1
d114 1
d164 35
d280 19
d322 3
d332 3
d342 1
@


1.8.4.3
log
@New version of QVT API for query execution used.
@
text
@d149 1
a149 1
		QvtCompiler qvtCompiler = new QvtCompiler(DeployedImportResolver.INSTANCE);
@


1.8.4.4
log
@Custom (Dummy) ImportResolver class used.
@
text
@a34 1
import org.eclipse.m2m.internal.qvt.oml.compiler.IImportResolver;
d37 1
d42 1
a42 1
	private final class InputStreadCFile implements CFile {
a111 20
	
	// TODO: implement this import resolved to use resolveMultiple() method
	private final class ImportResolverImpl implements IImportResolver {

		public String getPackageName(CFolder folder) {
			// TODO Auto-generated method stub
			return null;
		}

		public CFile resolveImport(String importedUnitName) {
			// TODO Auto-generated method stub
			return null;
		}

		public CFile resolveImport(CFile parentFile, String importedUnitName) {
			// TODO Auto-generated method stub
			return null;
		}

	}
d149 1
a149 1
		QvtCompiler qvtCompiler = new QvtCompiler(new ImportResolverImpl());
@


1.8.4.5
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d27 1
a27 1
import org.eclipse.gmf.internal.xpand.expression.TypeNameUtil;
d303 1
a303 1
	private static final String ASPECT_PREFIX = "aspects" + TypeNameUtil.NS_DELIM;	//$NON-NLS-1$
@


1.8.4.6
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d27 1
@


1.8.4.7
log
@[243154] Use OCL instead of home-grown expression language - most (what's feasible) of the extension invocation fixed. A lot of hacks and questions, though.
@
text
@d41 1
a41 1
	private final static class InputStreamCFile implements CFile {
d47 1
a47 1
		public InputStreamCFile(Reader reader, String name) throws IOException {
d111 1
a111 1

d126 2
a127 11
			try {
				String unitName = parentFile.getUnitName();
				unitName = unitName.substring(0, unitName.lastIndexOf(':') + 1) + importedUnitName;
				Reader[] readers = resolveMultiple(unitName, QvtResource.FILE_EXTENSION);
				assert readers.length == 1;
				CFile cFile = new InputStreamCFile(readers[0], unitName);
				return cFile;
			} catch (IOException ex) {
				ex.printStackTrace();
				return null;
			}
a132 1

d165 1
a165 1
		CFile cFile = new InputStreamCFile(readers[0], fullyQualifiedName);
d174 2
a175 2
			// assert module.getModule() instanceof Library;
			return new QvtFile(module, fullyQualifiedName);
d185 1
a185 2
			// Missing resource is an anticipated situation, not a error that should be handled
			return null; 
d208 1
a208 2
		assert rs1 != null && rs1.length > 0; // exception should be thrown to
												// indicate issues with resolve
d212 4
a215 5
			String aspectsTemplateName = getAspectsTemplateName(fullyQualifiedName);
			Reader[] rs2 = resolveMultiple(aspectsTemplateName, XpandResource.TEMPLATE_EXTENSION);
			// XXX relax resolveMultiple to return empty array and use length==0
			// here instead of exception
			advices = loadXpandResources(rs2, aspectsTemplateName);
d237 2
a238 3
	 * If the given fully-qualified name is an aspect, transforms it to its
	 * "host" fully-qualified name. Otherwise, returns the given fully-qualified
	 * name.
d253 5
a257 10
	 * Returns an array of resolutions, in the order from newest to oldest. This
	 * is to enable one template to partially override only a subset of parent
	 * templates.
	 * 
	 * @@return never return <code>null</code> or an empty array, throw exception
	 *         instead
	 * @@throws IOException
	 *             in case resource can't be read. Throw
	 *             {@@link java.io.FileNotFoundException} to indicate resource
	 *             was not found.
d274 1
a274 2
				} catch (Exception ex) {/* IGNORE */
				}
a284 1

d302 1
a302 1
	private static final String ASPECT_PREFIX = "aspects" + TypeNameUtil.NS_DELIM; //$NON-NLS-1$
@


1.8.4.8
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d180 1
a180 1
		options.setGenerateCompletionData(true);
@


1.7
log
@[207437] Resources to be composed from several sources
@
text
@d1 2
a2 2
/*******************************************************************************
 * Copyright (c) 2006, 2007 Eclipse.org
d8 5
a12 1
 *******************************************************************************/
a32 3
		if (hasCachedXtend(fullyQualifiedName)) {
			return cachedXtend.get(fullyQualifiedName);
		}
d34 1
a34 6
			final XtendResource loaded = doLoadXtendResource(fullyQualifiedName);
			assert loaded != null; // this is the contract of loadXtendResource
			if (shouldCache()) {
				cachedXtend.put(fullyQualifiedName, loaded);
			}
			return loaded;
d40 1
a40 1
			handleParserException(fullyQualifiedName, ex);
d45 12
d60 1
a60 13
		XtendResource[] result = new XtendResource[rs.length];
		for (int i = 0; i < rs.length; i++) {
			Reader r = rs[i];
			assert r != null;
			try {
				result[i] = loadXtendResource(r, fullyQualifiedName);
				assert result[i] != null; // this is the contract of loadXpandResource
			} finally {
				try {
					r.close();
				} catch (Exception ex) {/*IGNORE*/}
			}
		}
a67 3
		if (hasCachedXpand(fullyQualifiedName)) {
			return cachedXpand.get(fullyQualifiedName);
		}
d69 1
a69 5
			final XpandResource loaded = doLoadXpandResource(fullyQualifiedName);
			if (shouldCache()) {
				cachedXpand.put(fullyQualifiedName, loaded);
			}
			return loaded;
d76 1
a76 1
			handleParserException(fullyQualifiedName, ex);
d81 11
d93 3
a95 1
		XpandResource[] unadvised = internalLoadXpandResources(fullyQualifiedName);
d99 3
a101 1
	    	advices = internalLoadXpandResources(aspectsTemplateName);
d107 1
a107 1
			handleParserException(fullyQualifiedName, ex);
d136 18
a153 7
	private XpandResource[] internalLoadXpandResources(String fullyQualifiedName) throws IOException, ParserException {
		Reader[] rs = resolveMultiple(fullyQualifiedName, XpandResource.TEMPLATE_EXTENSION);
		assert rs != null && rs.length > 0; // exception should be thrown to indicate issues with resolve
		XpandResource[] result = new XpandResource[rs.length];
		for (int i = 0; i < rs.length; i++) {
			Reader r = rs[i];
			assert r != null;
d155 1
a155 1
				result[i] = loadXpandResource(r, fullyQualifiedName);
d159 1
a159 1
					r.close();
a165 4
	protected void handleParserException(String name, ParserException ex) {
		Activator.logWarn(name + ":" + ex.getClass().getName());
	}

d167 1
a167 3
	 * @@return never return <code>null</code>, throw exception instead
	 * @@throws IOException in case resource can't be read. Throw {@@link java.io.FileNotFoundException} to indicate resource was not found. 
	 * @@deprecated use {@@link #resolveMultiple(String, String)} instead.
d169 14
a182 21
	@@Deprecated
	protected abstract Reader resolve(String fullyQualifiedName, String extension) throws IOException;

	/**
	 * Returns an array of resolutions, in the order from newest to oldest. 
	 * This is to enable one template to partially override only a subset of parent templates. 
	 * By default, returns an array consisting of one Reader, the one that {@@link #resolve(String, String)} returns.
	 * Subclasses should override.
	 * @@return never return <code>null</code> or an empty array, throw exception instead
	 * @@throws IOException in case resource can't be read. Throw {@@link java.io.FileNotFoundException} to indicate resource was not found. 
	 */
	protected Reader[] resolveMultiple(String fullyQualifiedName, String extension) throws IOException {
		return new Reader[] {resolve(fullyQualifiedName, extension)};
	}

	protected XtendResource loadXtendResource(Reader reader, String fullyQualifiedName) throws IOException, ParserException {
		return new XtendResourceParser().parse(reader, fullyQualifiedName);
	}

	protected XpandResource loadXpandResource(Reader reader, String fullyQualifiedName) throws IOException, ParserException {
		return new XpandResourceParser().parse(reader, fullyQualifiedName);
@


1.6
log
@cache parsed templates and xtend files to speed upa and to make cached extensions actually cached
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
d19 1
d29 3
a31 1
		Reader r = null;
d33 1
a33 6
			if (hasCachedXtend(fullyQualifiedName)) {
				return cachedXtend.get(fullyQualifiedName);
			}
			r = resolve(fullyQualifiedName, XtendResource.FILE_EXTENSION);
			assert r != null;
			final XtendResource loaded = loadXtendResource(r, fullyQualifiedName);
d40 1
a40 1
			return delegateLoadXtendResource(fullyQualifiedName);
d45 15
a59 2
		} finally {
			if (r != null) {
d65 4
a68 1
		return null;
d72 3
a74 1
		Reader r = null;
d76 1
a76 7
			if (hasCachedXpand(fullyQualifiedName)) {
				return cachedXpand.get(fullyQualifiedName);
			}
			r = resolve(fullyQualifiedName, XpandResource.TEMPLATE_EXTENSION);
			assert r != null; // exception should be thrown to indicate issues with resolve
			final XpandResource loaded = loadXpandResource(r, fullyQualifiedName);
			assert loaded != null; // this is the contract of loadXpandResource
d82 1
a82 1
			return delegateLoadXpandResource(fullyQualifiedName);
a87 6
		} finally {
			if (r != null) {
				try {
					r.close();
				} catch (Exception ex) {/*IGNORE*/}
			}
d92 36
a127 6
	protected XtendResource delegateLoadXtendResource(String fullyQualifiedName) {
		for (ResourceManager next : getDependenies()) {
			XtendResource r = next.loadXtendResource(fullyQualifiedName);
			if (r != null) {
				return r;
			}
d129 1
a129 1
		return null;
d132 14
a145 5
	protected XpandResource delegateLoadXpandResource(String fullyQualifiedName) {
		for (ResourceManager next : getDependenies()) {
			XpandResource r = next.loadXpandResource(fullyQualifiedName);
			if (r != null) {
				return r;
d148 1
a148 1
		return null;
d158 1
d160 1
d164 6
a169 2
	 * Override if your implementation supports dependenices
	 * @@return never null
d171 2
a172 2
	protected ResourceManager[] getDependenies() {
		return new ResourceManager[0];
d201 2
@


1.5
log
@0.8.18 - 172853 Consider resources from referenced projects while resolving qualified template names
@
text
@d14 2
d24 2
d30 3
d35 6
a40 1
			return loadXtendResource(r, fullyQualifiedName);
d60 3
d65 6
a70 1
			return loadXpandResource(r, fullyQualifiedName);
d133 19
@


1.4
log
@cleaner log
@
text
@d11 1
d27 1
a27 3
			if (r == null) {
				return null;
			}
d29 2
d49 1
a49 3
			if (r == null) {
				return null;
			}
d51 2
d54 1
a54 1
			// XXX come up with better handling - e.g. no need to notify if there's no aspects/ file
d68 20
d92 4
d98 8
a112 1

@


1.3
log
@handle ordinary null from resolves (null is not being considered as error since those overriding resolve are free to return error as an IOException)
@
text
@d53 2
a54 1
			Activator.logError(ex);
@


1.2
log
@refactored resource manager into capable working in workspace and working with uris, added experimental extended error reporting to provide more details on parsing errors
@
text
@d26 3
d48 3
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d11 4
a14 4
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
a15 1
import org.eclipse.gmf.internal.xpand.expression.SyntaxConstants;
d20 1
a20 1
public class ResourceManagerImpl implements ResourceManager {
d22 17
a38 4
	private final IProject contextProject;

	public ResourceManagerImpl(IProject context) {
		this.contextProject = context;
d41 17
a57 2
	public XtendResource loadXtendResource(String fullyQualifiedName) {
		return loadXtendResource(resolve(fullyQualifiedName, XtendResource.FILE_EXTENSION));
d60 2
a61 3
	public XtendResource loadXtendResource(IFile file) {
		assert file.getProject() == contextProject;
		return new XtendResourceParser().parse(file);
d64 1
a64 3
	public XpandResource loadXpandResource(String fullyQualifiedName) {
		return loadXpandResource(resolve(fullyQualifiedName, XpandResource.TEMPLATE_EXTENSION));
	}
d66 2
a67 6
	public XpandResource loadXpandResource(IFile file) {
		if (file == null) {
			return null;
		}
		assert file.getProject() == contextProject;
		return new XpandResourceParser().parse(file);
d70 2
a71 3
	public void forget(IFile resource) {
		// TODO Auto-generated method stub
		// implement when caching
a73 5
	private IFile resolve(String fqn, String ext) {
		IPath p = new Path(fqn.replaceAll(SyntaxConstants.NS_DELIM, "/")).addFileExtension(ext);
		// FIXME handle CCE
		return (IFile) contextProject.findMember(p);
	}
@

