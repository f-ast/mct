head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081020-0700:1.2
	ocl_qvt:1.2.0.6
	Root_ocl_qvt:1.2
	v20080722-1827:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080528-1052:1.2
	v20080516-1143:1.2
	v20080417-1610:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070921-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070420-1000:1.1
	v20070405-1100:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	M3_20:1.1;
locks; strict;
comment	@# @;


1.2
date	2007.05.14.11.13.35;	author atikhomirov;	state Exp;
branches
	1.2.6.1;
next	1.1;
commitid	44814648445e4567;

1.1
date	2006.10.18.20.33.51;	author atikhomirov;	state Exp;
branches;
next	;

1.2.6.1
date	2008.08.06.14.05.35;	author atikhomirov;	state Exp;
branches;
next	;
commitid	35b4899afa74567;


desc
@@


1.2
log
@basic debug support for xpand
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.ast;

import org.eclipse.gmf.internal.xpand.eval.EvaluationListener;
import org.eclipse.gmf.internal.xpand.expression.ast.SyntaxElement;
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;

public abstract class Statement extends SyntaxElement implements XpandAnalyzable, XpandEvaluatable {
    public Statement(final int start, final int end, final int line) {
        super(start, end, line);
    }

    public final void evaluate(final XpandExecutionContext ctx) {
        try {
        	notifyEnter(ctx);
            ctx.getOutput().enterStatement(this);
        	evaluateInternal(ctx);
            ctx.getOutput().exitStatement(null);
        } finally {
        	notifyLeave(ctx);
        }
    }

    protected abstract void evaluateInternal(XpandExecutionContext ctx);

    private void notifyEnter(XpandExecutionContext ctx) {
    	EvaluationListener l = ctx.getEvaluationListener();
    	if (l != null) {
    		l.enter(this, ctx);
    	}
    }

    private void notifyLeave(XpandExecutionContext ctx) {
    	EvaluationListener l = ctx.getEvaluationListener();
    	if (l != null) {
    		l.leave(this, ctx);
    	}
    }
}
@


1.2.6.1
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
a13 1
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
d19 1
a19 3
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
import org.eclipse.gmf.internal.xpand.model.XpandAnalyzable;
import org.eclipse.gmf.internal.xpand.model.XpandEvaluatable;
d26 1
a26 1
    public final void evaluate(final ExecutionContext ctx) {
d29 1
a29 1
            ctx.getScope().getOutput().enterStatement(this);
d31 1
a31 1
            ctx.getScope().getOutput().exitStatement(null);
d37 1
a37 1
    protected abstract void evaluateInternal(ExecutionContext ctx);
d39 2
a40 2
    private void notifyEnter(ExecutionContext ctx) {
    	EvaluationListener l = ctx.getScope().getEvaluationListener();
d46 2
a47 2
    private void notifyLeave(ExecutionContext ctx) {
    	EvaluationListener l = ctx.getScope().getEvaluationListener();
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d17 1
d27 8
a34 3
        ctx.getOutput().enterStatement(this);
        evaluateInternal(ctx);
        ctx.getOutput().exitStatement(null);
d38 14
@

