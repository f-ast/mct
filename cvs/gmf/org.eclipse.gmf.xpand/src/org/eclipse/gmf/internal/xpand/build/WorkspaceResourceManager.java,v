head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081020-0700:1.7
	ocl_qvt:1.7.0.4
	Root_ocl_qvt:1.7
	v20080722-1827:1.7
	v20080718-1731:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080528-1052:1.7
	v20080516-1143:1.7
	v20080417-1610:1.7
	v20080322-0000:1.7
	v20080222-1200:1.6
	v20071130-1111:1.6
	v20071124-0000:1.4.2.1
	v20071108-0000:1.6
	v20071003-0000:1.5
	v20070921-0000:1.4.2.1
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070420-1000:1.4
	v20070405-1100:1.4
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20070208-1800:1.3
	v20070103-0300:1.2
	M4_20:1.2
	M3_20:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.02.22.16.03.40;	author atikhomirov;	state Exp;
branches
	1.7.4.1;
next	1.6;
commitid	3d8447bef25b4567;

1.6
date	2007.10.29.16.58.24;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	5b914726112d4567;

1.5
date	2007.09.21.11.18.02;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	580046f3a86a4567;

1.4
date	2007.04.06.11.31.08;	author atikhomirov;	state Exp;
branches
	1.4.2.1;
next	1.3;
commitid	526546162f7b4567;

1.3
date	2007.02.05.17.10.12;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	517745c764f34567;

1.2
date	2006.11.02.17.34.00;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.25.17.23.40;	author atikhomirov;	state Exp;
branches;
next	;

1.4.2.1
date	2007.09.21.11.16.05;	author atikhomirov;	state Exp;
branches;
next	;
commitid	525846f3a7f54567;

1.7.4.1
date	2008.07.29.15.57.05;	author ashatalin;	state Exp;
branches;
next	1.7.4.2;
commitid	337c488f3dcd4567;

1.7.4.2
date	2008.08.05.12.49.24;	author atikhomirov;	state Exp;
branches;
next	1.7.4.3;
commitid	546c48984c4a4567;

1.7.4.3
date	2008.08.06.14.05.34;	author atikhomirov;	state Exp;
branches;
next	;
commitid	35b4899afa74567;


desc
@@


1.7
log
@restored behaviour to populate problems view on parsing error instead of plain parser exception logging.
@
text
@/*
 * Copyright (c) 2006, 2008 Borland Software Corporation
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Artem Tikhomirov (Borland)
 *     Boris Blajer (Borland) - support for composite resources
 */
package org.eclipse.gmf.internal.xpand.build;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import org.eclipse.gmf.internal.xpand.Activator;
import org.eclipse.gmf.internal.xpand.expression.SyntaxConstants;
import org.eclipse.gmf.internal.xpand.model.XpandResource;
import org.eclipse.gmf.internal.xpand.util.ParserException;
import org.eclipse.gmf.internal.xpand.util.ResourceManagerImpl;
import org.eclipse.gmf.internal.xpand.util.StreamConverter;
import org.eclipse.gmf.internal.xpand.xtend.ast.XtendResource;
import org.osgi.framework.Bundle;

// FIXME package-local?, refactor Activator.getResourceManager uses
public class WorkspaceResourceManager extends ResourceManagerImpl {
	private final IProject contextProject;
	private final IPath[] myConfiguredRoots;

	public WorkspaceResourceManager(IProject context, IPath[] configuredRoots) {
		this.contextProject = context;
		myConfiguredRoots = configuredRoots;
	}

	public XtendResource loadXtendResource(IFile file) throws CoreException, IOException, ParserException {
		String fullyQualifiedName;
		if (file == null || (fullyQualifiedName = toFullyQualifiedName(file)) == null) {
			return null;
		}
		// try file directly, to get IO/Parse exceptions, if any.
		Reader r = new StreamConverter().toContentsReader(file);
		loadXtendResources(new Reader[] { r }, fullyQualifiedName);
		//
		try {
			return loadXtendThroughCache(fullyQualifiedName);
		} catch (FileNotFoundException ex) {
			return null;	//Missing resource is an anticipated situation, not a error that should be handled
		}
	}

	public XpandResource loadXpandResource(IFile file) throws CoreException, IOException, ParserException {
		String fullyQualifiedName;
		if (file == null || (fullyQualifiedName = toFullyQualifiedName(file)) == null) {
			return null;
		}
		// try file directly, to get IO/Parse exceptions, if any.
		Reader r = new StreamConverter().toContentsReader(file);
		loadXpandResources(new Reader[] { r }, fullyQualifiedName);
		//
		fullyQualifiedName = getNonAspectsTemplateName(fullyQualifiedName);
		try {
			return loadXpandThroughCache(fullyQualifiedName);
		} catch (FileNotFoundException ex) {
			return null;	//Missing resource is an anticipated situation, not a error that should be handled
		}
	}

	@@Override
	protected void handleParserException(ParserException ex) {
		// may get here only when some referenced template/xtend file is
		// broken. Since it's expected to get compiled anyway (either prior
		// to compilation of its use or afterwards), error messages should get
		// into problems view sooner or later.
		Activator.logWarn(ex.getClass().getSimpleName() + ":" + ex.getResourceName());
	}

	@@Override
	protected boolean shouldCache() {
		// we don't cache workspace resources for now (for the sake of reducing 
		// underemined problems that may arise), although may do this later
		return false;
	}

	public void forget(IFile resource) {
		// implement when caching
	}

	@@Override
	protected Reader[] resolveMultiple(String fqn, String ext) throws IOException {
		IPath fp = new Path(fqn.replaceAll(SyntaxConstants.NS_DELIM, "/")).addFileExtension(ext);
		IPath[] resolutions = getResolutions(fp);
		ArrayList<Reader> result = new ArrayList<Reader>(resolutions.length);
		for (IPath p : getResolutions(fp)) {
			Reader nextReader = getReader(p);
			if (nextReader != null) {
				result.add(nextReader);
			}
		}
		if (result.isEmpty()) {
			throw new FileNotFoundException(fp.toString());
		}
		return result.toArray(new Reader[result.size()]);
	}

	private Reader getReader(IPath p) throws IOException {
		if (p.isAbsolute()) {
			assert p.segmentCount() > 1;
			//Try workspace-relative first.
			IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(p.segment(0));
			if (project.isAccessible()) {
				return getWorkspaceFileReader(project, p.removeFirstSegments(1));
			}
			//Fallback to platform location
			Bundle platformBundle = Platform.getBundle(p.segment(0));
			if (platformBundle != null) {
				URL url = platformBundle.getEntry(p.removeFirstSegments(1).toString());
				if (url != null) {
					InputStream is = url.openStream();
					return new InputStreamReader(is, Charset.forName("ISO-8859-1"));	//$NON-NLS-1$
				}
			}
		} else {
			return getWorkspaceFileReader(contextProject, p);
		}
		return null;
	}

	private Reader getWorkspaceFileReader(IProject project, IPath path) throws IOException {
		IResource r = project.findMember(path);
		if (r instanceof IFile) {
			try {
				return new StreamConverter().toContentsReader((IFile) r);
			} catch (CoreException ex) {
				IOException wrap = new IOException(ex.getStatus().getMessage());
				wrap.initCause(ex);
				throw wrap;
			}
		}
		return null;
	}

	private IPath[] getResolutions(IPath p) {
		IPath[] rv = new IPath[myConfiguredRoots.length];
		for (int i = 0; i < myConfiguredRoots.length; i++) {
			rv[i] = myConfiguredRoots[i].append(p);
		}
		return rv;
	}
	private String toFullyQualifiedName(IFile file) {
		for (IPath nextRoot : myConfiguredRoots) {
			if (!nextRoot.isAbsolute()) {
				if (file.getProject().equals(contextProject) && nextRoot.isPrefixOf(file.getProjectRelativePath())) {
					return toFullyQualifiedName(file.getProjectRelativePath().removeFirstSegments(nextRoot.segmentCount()));
				}
			} else {
				if (nextRoot.isPrefixOf(file.getFullPath())) {
					return toFullyQualifiedName(file.getFullPath().removeFirstSegments(nextRoot.segmentCount()));
				}
			}
		}
		return null;
	}

	private static String toFullyQualifiedName(IPath filePath) {
		return filePath.removeFileExtension().toString().replace("/", SyntaxConstants.NS_DELIM);
	}
}@


1.7.4.1
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@d37 1
d50 16
@


1.7.4.2
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d32 1
a32 1
import org.eclipse.gmf.internal.xpand.expression.TypeNameUtil;
d88 1
a88 1
		IPath fp = new Path(fqn.replaceAll(TypeNameUtil.NS_DELIM, "/")).addFileExtension(ext);
d163 1
a163 1
		return filePath.removeFileExtension().toString().replace("/", TypeNameUtil.NS_DELIM);
@


1.7.4.3
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d32 1
a36 1
import org.eclipse.gmf.internal.xpand.util.TypeNameUtil;
@


1.6
log
@[207437] Resources to be composed from several sources
@
text
@d1 2
a2 2
/*******************************************************************************
 * Copyright (c) 2006, 2007 Borland Software Corporation
d7 5
a11 1
 *******************************************************************************/
d31 1
d51 2
a52 1
		if (file == null) {
d55 8
a62 3
		String fullyQualifiedName = toFullyQualifiedName(file);
		if (fullyQualifiedName == null) {
			return null;
a63 1
		return super.loadXtendResource(fullyQualifiedName);
d67 2
a68 1
		if (file == null) {
d71 9
a79 3
		String fullyQualifiedName = toFullyQualifiedName(file);
		if (fullyQualifiedName == null) {
			return null;
d81 9
a89 2
		fullyQualifiedName = getNonAspectsTemplateName(fullyQualifiedName);
		return super.loadXpandResource(fullyQualifiedName);
a102 21
	protected Reader resolve(String fqn, String ext) throws IOException {
		IPath fp = new Path(fqn.replaceAll(SyntaxConstants.NS_DELIM, "/")).addFileExtension(ext);
		IResource r = null;
		for (IPath p : getResolutions(fp)) {
			r = contextProject.findMember(p);
			if (r != null) {
				break;
			}
		}
		if (false == r instanceof IFile) {
			throw new FileNotFoundException(fp.toString());
		}
		try {
			return new StreamConverter().toContentsReader((IFile) r);
		} catch (CoreException ex) {
			IOException wrap = new IOException(ex.getStatus().getMessage());
			wrap.initCause(ex);
			throw wrap;
		}
	}

d158 3
a160 4
		IPath[] configured = getConfiguredRoots();
		IPath[] rv = new IPath[configured.length];
		for (int i = 0; i < configured.length; i++) {
			rv[i] = configured[i].append(p);
a163 4
	private IPath[] getConfiguredRoots() {
		return myConfiguredRoots;
	}

d165 1
a165 1
		for (IPath nextRoot : getConfiguredRoots()) {
d179 1
a179 1
	private String toFullyQualifiedName(IPath filePath) {
@


1.5
log
@use config file to find out roject roots with xpand templates
@
text
@a9 1
import java.io.BufferedReader;
d12 1
d15 2
a17 1
import java.util.LinkedList;
a18 1
import org.eclipse.core.resources.ICommand;
d22 1
d26 1
a26 2
import org.eclipse.gmf.internal.xpand.Activator;
import org.eclipse.gmf.internal.xpand.ResourceManager;
d33 1
d38 1
a38 2
	private long configStamp = IResource.NULL_STAMP;
	private IPath[] configuredRoots;
d40 1
a40 1
	public WorkspaceResourceManager(IProject context) {
d42 1
d49 3
a51 9
		assert file.getProject() == contextProject;
		Reader r = null;
		try {
			r = new StreamConverter().toContentsReader(file);
			return super.loadXtendResource(r, toFullyQualifiedName(file));
		} finally {
			if (r != null) {
				r.close();
			}
d53 1
d60 3
a62 9
		assert file.getProject() == contextProject;
		Reader r = null;
		try {
			r = new StreamConverter().toContentsReader(file);
			return super.loadXpandResource(r, toFullyQualifiedName(file));
		} finally {
			if (r != null) {
				r.close();
			}
d64 2
d99 37
a135 6
	private IPath[] getResolutions(IPath p) {
		IPath[] configured = getConfiguredRoots();
		IPath[] rv = new IPath[configured.length + 1];
		rv[0] = p;
		for (int i = 0; i < configured.length; i++) {
			rv[i+1] = configured[i].append(p);
d137 1
a137 1
		return rv;
d139 4
a142 9
	private IPath[] getConfiguredRoots() {
		IFile config = contextProject.getFile(".xpand-root");
		if (!config.exists()) {
			return new IPath[] { new Path("templates/") };
		}
		if (config.getModificationStamp() != configStamp) {
			configuredRoots = new IPath[0];
			final ArrayList<IPath> read = new ArrayList<IPath>();
			BufferedReader in = null;
d144 1
a144 8
				in = new BufferedReader(new InputStreamReader(config.getContents(), config.getCharset()));
				String line;
				while((line = in.readLine()) != null) {
					line = line.trim();
					if (line.length() > 0 && line.charAt(0) != '#') {
						read.add(new Path(line));
					}
				}
d146 3
a148 11
				// IGNORE
			} catch (IOException ex) {
				// IGNORE
			} finally {
				if (in != null) {
					try {
						in.close();
					} catch (IOException ex) {
						/* IGNORE */
					}
				}
a149 2
			configuredRoots = read.toArray(new IPath[read.size()]);
			configStamp = config.getModificationStamp();
d151 1
a151 1
		return configuredRoots;
d154 5
a158 12
	protected ResourceManager[] getDependenies() {
		LinkedList<ResourceManager> rv = new LinkedList<ResourceManager>();
		try {
			IProject[] referencedProjects = contextProject.getReferencedProjects();
				for (IProject next : referencedProjects) {
					if (!next.isAccessible() || !hasXpandBuilder(next)) {
						continue;
					}
					rv.add(Activator.getResourceManager(next));
				}
		} catch (CoreException e) {
			//ignore
d160 4
a163 1
		return rv.toArray(new ResourceManager[rv.size()]);
d166 10
a175 4
	private static boolean hasXpandBuilder(IProject p) throws CoreException {
		for (ICommand c : p.getDescription().getBuildSpec()) {
			if (OawBuilder.getBUILDER_ID().equals(c.getBuilderName())) {
				return true;
d178 1
a178 1
		return false;
d181 2
a182 2
	private String toFullyQualifiedName(IFile file) {
		return file.getProjectRelativePath().toString().replaceAll("/", SyntaxConstants.NS_DELIM);
@


1.4
log
@cache parsed templates and xtend files to speed upa and to make cached extensions actually cached
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
d10 1
d13 1
d15 1
d37 2
d88 7
a94 5
		IPath p = new Path(fqn.replaceAll(SyntaxConstants.NS_DELIM, "/")).addFileExtension(ext);
		IResource r = contextProject.findMember(p);
		if (r == null) {
			// XXX confiugre manager with path defined as preference/resource variable
			r = contextProject.findMember(new Path("templates/").append(p));
d97 1
a97 1
			throw new FileNotFoundException(p.toString());
d107 45
@


1.4.2.1
log
@use config file to find out roject roots with xpand templates
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2007 Borland Software Corporation
a9 1
import java.io.BufferedReader;
a11 1
import java.io.InputStreamReader;
a12 1
import java.util.ArrayList;
a33 2
	private long configStamp = IResource.NULL_STAMP;
	private IPath[] configuredRoots = new IPath[0];
d83 5
a87 7
		IPath fp = new Path(fqn.replaceAll(SyntaxConstants.NS_DELIM, "/")).addFileExtension(ext);
		IResource r = null;
		for (IPath p : getResolutions(fp)) {
			r = contextProject.findMember(p);
			if (r != null) {
				break;
			}
d90 1
a90 1
			throw new FileNotFoundException(fp.toString());
a99 45
	private IPath[] getResolutions(IPath p) {
		IPath[] configured = getConfiguredRoots();
		IPath[] rv = new IPath[configured.length + 1];
		rv[0] = p;
		for (int i = 0; i < configured.length; i++) {
			rv[i+1] = configured[i].append(p);
		}
		return rv;
	}
	private IPath[] getConfiguredRoots() {
		IFile config = contextProject.getFile(".xpand-root");
		if (!config.exists()) {
			return new IPath[] { new Path("templates/") };
		}
		if (config.getModificationStamp() != configStamp) {
			configuredRoots = new IPath[0];
			final ArrayList<IPath> read = new ArrayList<IPath>();
			BufferedReader in = null;
			try {
				in = new BufferedReader(new InputStreamReader(config.getContents(), config.getCharset()));
				String line;
				while((line = in.readLine()) != null) {
					line = line.trim();
					if (line.length() > 0 && line.charAt(0) != '#') {
						read.add(new Path(line));
					}
				}
			} catch (CoreException ex) {
				// IGNORE
			} catch (IOException ex) {
				// IGNORE
			} finally {
				if (in != null) {
					try {
						in.close();
					} catch (IOException ex) {
						/* IGNORE */
					}
				}
			}
			configuredRoots = read.toArray(new IPath[read.size()]);
			configStamp = config.getModificationStamp();
		}
		return configuredRoots;
	}
@


1.3
log
@0.8.18 - 172853 Consider resources from referenced projects while resolving qualified template names
@
text
@a23 1
import org.eclipse.gmf.internal.xpand.ResourceMarker;
d47 1
a47 1
			return remember(file, super.loadXtendResource(r, toFullyQualifiedName(file)));
d63 1
a63 1
			return remember(file, super.loadXpandResource(r, toFullyQualifiedName(file)));
d71 5
a75 5
	protected <T extends ResourceMarker> T remember(IFile resource, T loadedResource) {
		// TODO cache.
		// TODO move to superclass - odd if caching will happen to templates accessed via IFile only
		// XXX Do I need cache?
		return loadedResource;
a78 1
		// TODO Auto-generated method stub
@


1.2
log
@workaround to deal with non-full paths
@
text
@d13 1
d15 1
d22 2
d103 25
@


1.1
log
@refactored resource manager into capable working in workspace and working with uris, added experimental extended error reporting to provide more details on parsing errors
@
text
@d83 4
@

