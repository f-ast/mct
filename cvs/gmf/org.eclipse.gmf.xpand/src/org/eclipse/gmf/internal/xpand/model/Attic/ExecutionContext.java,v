head	1.1;
access;
symbols
	v20081022-1925:1.1
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2008.08.06.14.05.35;	author atikhomirov;	state dead;
branches
	1.1.2.1;
next	;
commitid	35b4899afa74567;

1.1.2.1
date	2008.08.06.14.05.35;	author atikhomirov;	state Exp;
branches;
next	1.1.2.2;
commitid	35b4899afa74567;

1.1.2.2
date	2008.08.07.23.23.37;	author atikhomirov;	state Exp;
branches;
next	1.1.2.3;
commitid	55a7489b83f64567;

1.1.2.3
date	2008.08.08.16.33.25;	author atikhomirov;	state Exp;
branches;
next	1.1.2.4;
commitid	a21489c75534567;

1.1.2.4
date	2008.08.10.15.10.44;	author atikhomirov;	state Exp;
branches;
next	1.1.2.5;
commitid	2d13489f04f14567;

1.1.2.5
date	2008.08.19.17.25.21;	author atikhomirov;	state Exp;
branches;
next	1.1.2.6;
commitid	380048ab02014567;

1.1.2.6
date	2008.10.24.17.50.52;	author atikhomirov;	state Exp;
branches;
next	;
commitid	cb8049020afb4567;


desc
@@


1.1
log
@file ExecutionContext.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@a0 53
/*
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
 */
package org.eclipse.gmf.internal.xpand.model;

import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.gmf.internal.xpand.ResourceMarker;
import org.eclipse.gmf.internal.xpand.xtend.ast.GenericExtension;
import org.eclipse.ocl.ecore.EcoreEnvironment;

/**
 * @@author Sven Efftinge
 * @@author Arno Haase
 * XXX [artem] I'd better split this into two parts, "Scope" (no subtypes) with Variables and Resource - the part that 
 * is actually being changed/cloned, and "Context" itself, with methods to access types/definition/templates/output/whatever
 * XXX leave this as "Context" and add "Environment"?
 * Plus, would be great to have some cancellation behavior avialable from environment (i.e. for debuger to be able to stop execution)
 * XXX move to xpand.model out from xpand.expression package 
 */
public interface ExecutionContext {

	/**
	 * XXX during analyze, we treat value of this variable as EClassifier,
	 * and during evaluate - as Object (i.e. rather instance than meta-type)
	 */
	public final static String IMPLICIT_VARIABLE = "this";

	ExecutionContext cloneWithVariable(Variable... v);

	ExecutionContext cloneWithResource(ResourceMarker ns);

	Variable getVariable(String name);

	GenericExtension getExtension(String functionName, EClassifier[] parameterTypes);

	Set<? extends GenericExtension> getAllExtensions();

	XpandDefinition findDefinition(String name, EClassifier target, EClassifier[] paramTypes);
	
	EcoreEnvironment getOCLEnvironment();

	Scope getScope();
}
@


1.1.2.2
log
@[243154] Use OCL instead of home-grown expression language - fixing and running tests.
@
text
@a19 1
import org.eclipse.ocl.ecore.EcoreEvaluationEnvironment;
d24 5
a28 1
 * XXX would be great to have some cancellation behavior avialable from environment (i.e. for debuger to be able to stop execution)
a50 1
	void populate(EcoreEvaluationEnvironment ee);
@


1.1.2.3
log
@[243154] Use OCL instead of home-grown expression language - populate ocl environment with variable types (hence, need to tell var value from var type)
@
text
@d25 1
a25 1
 * XXX would be great to have some cancellation behavior available from environment (i.e. for debuger to be able to stop execution)
d29 4
a44 1
	// may return null if no definition found
@


1.1.2.4
log
@[243154] Use OCL instead of home-grown expression language - most (what's feasible) of the extension invocation fixed. A lot of hacks and questions, though.
@
text
@d18 1
a18 1
import org.eclipse.gmf.internal.xpand.xtend.ast.QvtExtension;
d37 3
a39 1
	Set<QvtExtension> getAllExtensions();
a47 1

@


1.1.2.5
log
@[243154] Use OCL instead of home-grown expression language - moving towards no explicit use of 'this' keyword
@
text
@d35 1
a35 1
	Variable getImplicitVariable();
@


1.1.2.6
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d43 1
a43 1
	EcoreEvaluationEnvironment createEvaluationEnvironment();
@


