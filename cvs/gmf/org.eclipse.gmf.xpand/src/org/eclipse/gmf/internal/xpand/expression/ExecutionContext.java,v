head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081020-0700:1.5
	ocl_qvt:1.5.0.6
	Root_ocl_qvt:1.5
	v20080722-1827:1.5
	v20080718-1731:1.5
	v20080716-1600:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080528-1052:1.5
	v20080516-1143:1.5
	v20080417-1610:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071108-0000:1.5
	v20071003-0000:1.5
	v20070921-0000:1.5
	v20070903-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070608-1300:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	v20070420-1000:1.3
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20070208-1800:1.3
	v20070103-0300:1.3
	M4_20:1.3
	M3_20:1.3;
locks; strict;
comment	@# @;


1.5
date	2007.05.14.17.55.50;	author atikhomirov;	state Exp;
branches
	1.5.6.1;
next	1.4;
commitid	75ac4648a2a64567;

1.4
date	2007.05.14.11.13.35;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	44814648445e4567;

1.3
date	2006.10.23.16.13.10;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.23.14.59.15;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.51;	author atikhomirov;	state Exp;
branches;
next	;

1.5.6.1
date	2008.07.24.16.21.35;	author ashatalin;	state Exp;
branches;
next	1.5.6.2;
commitid	7c4a4888ac0d4567;

1.5.6.2
date	2008.08.05.12.49.25;	author atikhomirov;	state Exp;
branches;
next	1.5.6.3;
commitid	546c48984c4a4567;

1.5.6.3
date	2008.08.06.14.05.36;	author atikhomirov;	state dead;
branches;
next	;
commitid	35b4899afa74567;


desc
@@


1.5
log
@abstract class loading concept
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.expression;

import java.util.Collection;
import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.gmf.internal.xpand.ResourceMarker;
import org.eclipse.gmf.internal.xpand.eval.EvaluationListener;
import org.eclipse.gmf.internal.xpand.xtend.ast.Extension;

/**
 * @@author Sven Efftinge
 * @@author Arno Haase
 * XXX [artem] I'd better split this into two parts, "Scope" (no subtypes) with Variables and Resource - the part that 
 * is actually being changed/cloned, and "Context" itself, with methods to access types/definition/templates/output/whatever
 * XXX leave this as "Context" and add "Environment"?
 * Plus, would be great to have some cancellation behavior avialable from environment (i.e. for debuger to be able to stop execution)
 * XXX move to xpand.model out from xpand.expression package 
 */
public interface ExecutionContext {

	/**
	 * XXX during analyze, we treat value of this variable as EClassifier,
	 * and during evaluate - as Object (i.e. rather instance than meta-type)
	 */
	public final static String IMPLICIT_VARIABLE = "this";

	<T extends ExecutionContext> T cloneWithVariable(Variable... v);
	<T extends ExecutionContext> T cloneWithVariable(Collection<Variable> v);

	<T extends ExecutionContext> T cloneWithoutVariables();

	<T extends ExecutionContext> T cloneWithResource(ResourceMarker ns);

	Variable getVariable(String name);

	Collection<Variable> getVisibleVariables();

	/**
	 * accessible only through special extension methods
	 */
	Collection<Variable> getGlobalVariables();

	Variable getGlobalVariable(String name);

	ResourceMarker currentResource();

	Extension getExtension(String functionName, EClassifier[] parameterTypes);

	Set<? extends Extension> getAllExtensions();

	EClassifier getTypeForName(String name);//		!!!getImportedNamespaces()

	public EClassifier[] findTypesForPrefix(final String prefix);
	
	// instead of ResourceLoaderFactory.createResourceLoader()
	Class<?> loadClass(String value);

	// [artem] if not null, should be notified about entering/leaving xpand ast elements
	EvaluationListener getEvaluationListener();
}
@


1.5.6.1
log
@Initial commit of extend->qvt migration in xpand.
@
text
@d23 1
a23 1
import org.eclipse.gmf.internal.xpand.xtend.ast.GenericExtension;
d62 1
a62 1
	GenericExtension getExtension(String functionName, EClassifier[] parameterTypes);
d64 1
a64 1
	Set<? extends GenericExtension> getAllExtensions();
@


1.5.6.2
log
@[243154] Use OCL instead of home-grown expression language
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
a13 1
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
d17 1
a23 1
import org.eclipse.ocl.ecore.EcoreEnvironment;
d43 1
d51 7
d66 4
a72 2
	EcoreEnvironment getOCLEnvironment();

@


1.5.6.3
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@@


1.4
log
@basic debug support for xpand
@
text
@d71 1
a71 1
	Class loadClass(String value);
@


1.3
log
@refactored use of variables (no need to expose Map)
@
text
@d22 1
d30 3
a32 1
 * XXX leave this as "Context" and add "Environment"? 
d72 3
@


1.2
log
@useless cloneWithoutResource removed
@
text
@d17 1
a17 1
import java.util.Map;
d27 3
d39 2
a40 1
	<T extends ExecutionContext> T cloneWithVariable(Variable v);
d48 1
a48 1
	Map<String, Variable> getVisibleVariables();
d53 3
a55 1
	Map<String, Variable> getGlobalVariables();
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@a41 2
	<T extends ExecutionContext> T cloneWithoutResource();

@

