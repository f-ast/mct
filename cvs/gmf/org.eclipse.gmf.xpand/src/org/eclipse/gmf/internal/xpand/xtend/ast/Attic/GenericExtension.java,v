head	1.1;
access;
symbols
	v20081022-1925:1.1
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2008.07.24.16.21.35;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	7c4a4888ac0d4567;

1.1.2.1
date	2008.07.24.16.21.35;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	7c4a4888ac0d4567;

1.1.2.2
date	2008.08.06.14.05.34;	author atikhomirov;	state Exp;
branches;
next	1.1.2.3;
commitid	35b4899afa74567;

1.1.2.3
date	2008.08.10.15.10.44;	author atikhomirov;	state Exp;
branches;
next	;
commitid	2d13489f04f14567;


desc
@@


1.1
log
@file GenericExtension.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@Initial commit of extend->qvt migration in xpand.
@
text
@a0 37
/**
 * Copyright (c) 2008 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.xpand.xtend.ast;

import java.util.List;
import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;

public interface GenericExtension {

	String getName();
	
	String getFileName();
	
	EClassifier getReturnType(final EClassifier[] parameters, ExecutionContext ctx, final Set<AnalysationIssue> issues);

	List<EClassifier> getParameterTypes();
	
	List<String> getParameterNames();

	void init(final ExecutionContext ctx);
	
	Object evaluate(final Object[] parameters, ExecutionContext ctx);

}
@


1.1.2.2
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@d18 2
a19 2
import org.eclipse.gmf.internal.xpand.model.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
@


1.1.2.3
log
@[243154] Use OCL instead of home-grown expression language - most (what's feasible) of the extension invocation fixed. A lot of hacks and questions, though.
@
text
@a17 1
import org.eclipse.emf.ecore.EOperation;
a26 4
	EClassifier getContext();
	EOperation getOperation();

	// XXX odd parameters param, as if return type may depend from them?
@


