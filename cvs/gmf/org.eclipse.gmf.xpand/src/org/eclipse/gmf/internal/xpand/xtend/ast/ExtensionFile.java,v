head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081020-0700:1.2
	ocl_qvt:1.2.0.6
	Root_ocl_qvt:1.2
	v20080722-1827:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080528-1052:1.2
	v20080516-1143:1.2
	v20080417-1610:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070921-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070420-1000:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	M3_20:1.2;
locks; strict;
comment	@# @;


1.2
date	2006.10.23.18.58.22;	author atikhomirov;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2006.10.18.20.33.50;	author atikhomirov;	state Exp;
branches;
next	;

1.2.6.1
date	2008.07.29.15.57.04;	author ashatalin;	state dead;
branches;
next	;
commitid	337c488f3dcd4567;


desc
@@


1.2
log
@finals
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.xtend.ast;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.eclipse.gmf.internal.xpand.ResourceManager;
import org.eclipse.gmf.internal.xpand.expression.AnalysationIssue;
import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.expression.ast.SyntaxElement;

public class ExtensionFile extends SyntaxElement implements XtendResource {

    private final List<ImportStatement> nsImports;

    private final List<ImportStatement> extImports;

    private final List<Extension> extensions;

    @@SuppressWarnings("unchecked")
	public ExtensionFile(final int start, final int end, final int line, final List<? extends SyntaxElement> nsImports, final List<? extends SyntaxElement> extImports,
            final List<? extends SyntaxElement> extensions) {
        super(start, end, line);
        this.nsImports = (List<ImportStatement>) nsImports;
        this.extImports = (List<ImportStatement>) extImports;
        this.extensions = (List<Extension>) extensions;
        for (Extension ext: this.extensions) {
            ext.setExtensionFile(this);
        }
    }

    public List<Extension> getExtensions() {
        return extensions;
    }

    public List<ImportStatement> getExtImports() {
        return extImports;
    }

    public List<ImportStatement> getNsImports() {
        return nsImports;
    }

    public String[] getImportedNamespaces() {
        final List<String> namespaces = new ArrayList<String>(getNsImports().size());
        for (ImportStatement nsImport : getNsImports()) {
            namespaces.add(nsImport.getValue());
        }
        return namespaces.toArray(new String[namespaces.size()]);
    }

    public String[] getImportedExtensions() {
        final List<String> result = new ArrayList<String>(getExtImports().size());
        for (ImportStatement nsImport : getExtImports()) {
            result.add(nsImport.getValue());
        }
        return result.toArray(new String[result.size()]);
    }

    public void analyze(ExecutionContext ctx, final Set<AnalysationIssue> issues) {
        ctx = ctx.cloneWithResource(this);
        for (Extension ext : getExtensions()) {
            ext.analyze(ctx, issues);
        }
    }

    private String fullyQualifiedName;

    public void setFullyQualifiedName(final String fullyQualifiedName) {
        this.fullyQualifiedName = fullyQualifiedName;
    }

    /**
     * XXX who cares?
     */
    public String getFullyQualifiedName() {
        return fullyQualifiedName;
    }

    public List<Extension> getPublicExtensions(ResourceManager rm) {
        final List<Extension> result = new ArrayList<Extension>();
        for (Extension element : getExtensions()) {
            if (!element.isPrivate()) {
                result.add(element);
            }
        }
        for (ImportStatement imp  : getExtImports()) {
            if (imp.isExported()) {
                final XtendResource xf = rm.loadXtendResource(imp.getImportedId().getValue());
                result.addAll(xf.getPublicExtensions(rm));
            }
        }
        return result;
    }
}
@


1.2.6.1
log
@Xtend-based implementation of XPand extensions was separated into .migration plugin.
@
text
@@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d28 1
a28 1
    private List<ImportStatement> nsImports;
d30 1
a30 1
    private List<ImportStatement> extImports;
d32 1
a32 1
    private List<Extension> extensions;
@

