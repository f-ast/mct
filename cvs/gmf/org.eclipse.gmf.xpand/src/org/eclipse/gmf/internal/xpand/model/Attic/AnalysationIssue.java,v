head	1.1;
access;
symbols
	v20081022-1925:1.1
	ocl_qvt:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2008.08.06.14.05.35;	author atikhomirov;	state dead;
branches
	1.1.2.1;
next	;
commitid	35b4899afa74567;

1.1.2.1
date	2008.08.06.14.05.35;	author atikhomirov;	state Exp;
branches;
next	;
commitid	35b4899afa74567;


desc
@@


1.1
log
@file AnalysationIssue.java was initially added on branch ocl_qvt.
@
text
@@


1.1.2.1
log
@[243154] Use OCL instead of home-grown expression language. Refactored to eliminate context specific to expressions (moving towards using OCL environment for that), split modifiable (context-specific) and static execution data.
@
text
@a0 90
/*
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *     Artem Tikhomirov (Borland) - Migration to OCL expressions
 */
package org.eclipse.gmf.internal.xpand.model;

import org.eclipse.gmf.internal.xpand.expression.ast.SyntaxElement;
import org.eclipse.gmf.internal.xpand.ocl.ExpressionHelper;

/**
 * FIXME: refactor - hide enum type into factory method, check all types are still in use, get rid of isWarningNotError
 * @@author Sven Efftinge
 * @@author Arno Haase
 */
public class AnalysationIssue {

    public enum Type {
        INCOMPATIBLE_TYPES("Incompatible types"),
        UNNECESSARY_CAST("Unnecessary cast"),
        FEATURE_NOT_FOUND("Callable not found"),
        TYPE_NOT_FOUND ("Type not found"),
        INTERNAL_ERROR("Internal error"),
        JAVA_TYPE_NOT_FOUND("Java Type not found"),
        SYNTAX_ERROR("Syntax error"),
        DEFINITION_NOT_FOUND("Definition not found");

        private String name;

        private Type(final String name) {
            this.name = name;
        }

        @@Override
        public String toString() {
            return name;
        }
    }

    private final Type type;

    private final String message;

    private final SyntaxElement element;

    private final boolean isWarningNotError;

    public AnalysationIssue(final Type type, final String message, final SyntaxElement element) {
    	this(type, message, element, false);
    }

    // FIXME Hack to get over compilation issues. need to deal with absence of line information in the CST anyway.
    public AnalysationIssue(final Type type, final String message, final ExpressionHelper exprHelper) {
    	this(type, message, null, false);
    }

    public AnalysationIssue(final Type type, final String message, final SyntaxElement element, boolean isWarningNotError) {
        this.type = type;
        this.message = message;
        this.element = element;
        this.isWarningNotError = isWarningNotError;
    }

    public boolean isWarningNotError() {
    	return isWarningNotError;
    }

    public SyntaxElement getElement() {
        return element;
    }

    public String getMessage() {
        return message;
    }

    public Type getType() {
        return type;
    }

    @@Override
    public String toString() {
        return "[" + type.name + "] - " + message + " : " + element;
    }
}
@

