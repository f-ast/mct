head	1.1;
access;
symbols
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20080222-1200:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070608-1300:1.1
	v20070601-1400:1.1
	v20070520-1200:1.1
	v20070330-1300:1.1
	v20061121-0030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2006.10.23.19.26.00;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.1
log
@[114199] Provide a graphical surface for mapping definitions
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */
package org.eclipse.gmf.map.editor.navigator;

import java.util.Collection;
import java.util.LinkedList;

/**
 * @@generated
 */
public class GMFMapNavigatorGroup extends GMFMapAbstractNavigatorItem {

	/**
	 * @@generated
	 */
	private String myGroupName;

	/**
	 * @@generated
	 */
	private String myIcon;

	/**
	 * @@generated
	 */
	private String myModelID;

	/**
	 * @@generated
	 */
	private Collection myChildren = new LinkedList();

	/**
	 * @@generated
	 */
	GMFMapNavigatorGroup(String groupName, String icon, String modelID, Object parent) {
		super(parent);
		myGroupName = groupName;
		myIcon = icon;
		myModelID = modelID;
	}

	/**
	 * @@generated
	 */
	public String getGroupName() {
		return myGroupName;
	}

	/**
	 * @@generated
	 */
	public String getIcon() {
		return myIcon;
	}

	/**
	 * @@generated
	 */
	public Object[] getChildren() {
		return myChildren.toArray();
	}

	/**
	 * @@generated
	 */
	public void addChildren(Collection children) {
		myChildren.addAll(children);
	}

	/**
	 * @@generated
	 */
	public void addChild(Object child) {
		myChildren.add(child);
	}

	/**
	 * @@generated
	 */
	public boolean isEmpty() {
		return myChildren.size() == 0;
	}

	/**
	 * @@generated
	 */
	public String getModelID() {
		return myModelID;
	}

	/**
	 * @@generated
	 */
	public boolean equals(Object obj) {
		if (obj instanceof GMFMapNavigatorGroup) {
			GMFMapNavigatorGroup anotherGroup = (GMFMapNavigatorGroup) obj;
			if (getGroupName().equals(anotherGroup.getGroupName())) {
				return getParent().equals(anotherGroup.getParent());
			}
		}
		return super.equals(obj);
	}

}
@
