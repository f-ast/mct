head	1.1;
access;
symbols
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20080222-1200:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070608-1300:1.1
	v20070601-1400:1.1
	v20070520-1200:1.1
	v20070330-1300:1.1
	v20061121-0030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2006.10.23.19.25.59;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.1
log
@[114199] Provide a graphical surface for mapping definitions
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */
package org.eclipse.gmf.map.editor.edit.parts;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart;
import org.eclipse.gmf.runtime.diagram.ui.figures.LabelLocator;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/**
 * @@generated
 */
public class GMFMapExtNodeLabelEditPart extends LabelEditPart {

	/**
	 * @@generated
	 */
	public GMFMapExtNodeLabelEditPart(View view) {
		super(view);
	}

	/**
	 * @@generated
	 */
	public void refreshBounds() {
		IFigure refFigure = ((GraphicalEditPart) getParent()).getFigure();
		int dx = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getLocation_X())).intValue();
		int dy = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getLocation_Y())).intValue();
		Point offset = new Point(dx, dy);
		getFigure().getParent().setConstraint(getFigure(), new LabelLocator(refFigure, offset, getKeyPoint()) {

			public void relocate(IFigure target) {
				Point location = getReferencePoint().getTranslated(getOffset());
				location.translate(-target.getBounds().width / 2, 0);
				target.setLocation(location);
				target.setSize(new Dimension(target.getPreferredSize().width, target.getPreferredSize().height));
			}

			protected Point getReferencePoint() {
				return getLabelLocation(parent);
			}
		});
	}

	/**
	 * @@generated
	 */
	public Point getReferencePoint() {
		return getLabelLocation(((GraphicalEditPart) getParent()).getFigure());
	}

	/**
	 * @@generated
	 */
	protected Point getLabelLocation(IFigure parent) {
		return parent.getBounds().getBottom();
	}
}
@
