head	1.1;
access;
symbols
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20080222-1200:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070608-1300:1.1
	v20070601-1400:1.1
	v20070520-1200:1.1
	v20070330-1300:1.1
	v20061121-0030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2006.10.23.19.25.58;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.1
log
@[114199] Provide a graphical surface for mapping definitions
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */
package org.eclipse.gmf.map.editor.providers;

import java.util.Map;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.diagram.ui.services.palette.IPaletteProvider;
import org.eclipse.ui.IEditorPart;
import org.eclipse.gmf.map.editor.part.GMFMapPaletteFactory;

/**
 * @@generated
 */
public class GMFMapPaletteProvider extends AbstractProvider implements IPaletteProvider {

	/**
	 * @@generated
	 */
	public void contributeToPalette(IEditorPart editor, Object content, PaletteRoot root, Map predefinedEntries) {
		GMFMapPaletteFactory factory = new GMFMapPaletteFactory();
		factory.fillPalette(root);
	}

	/**
	 * @@generated
	 */
	public void setContributions(IConfigurationElement configElement) {
		// no configuration
	}

	/**
	 * @@generated
	 */
	public boolean provides(IOperation operation) {
		return false; // all logic is done in the service
	}
}
@
