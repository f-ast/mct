head	1.6;
access;
symbols
	v20080917-1925:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.3;
locks; strict;
comment	@# @;


1.6
date	2005.11.25.19.36.47;	author cmahoney;	state dead;
branches;
next	1.5;

1.5
date	2005.11.04.21.27.52;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.02.23.29.17;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.28.14;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.47.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.49;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Bugzilla#113157 gmf_head cmahoney 051125 Removing deprecated classes
@
text
@/******************************************************************************
 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.actions;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.RequestConstants;
import org.eclipse.gef.RootEditPart;
import org.eclipse.gef.requests.CreateRequest;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeEditPart;
import org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IWorkbenchPage;


/**
 * Provides support for action which add an attached shapes to another
 * shape.  Puts the added shape in direct edit mode after all the shapes
 * and connectors are created.
 * 
 * @@author jcorchis
 * @@deprecated Renamed to {@@link org.eclipse.gmf.runtime.diagram.ui.actions.AttachShapeAction}
 */
public abstract class AttachedShapeAction
	extends DiagramAction {
	
	/**
	 * Constructor 
	 * @@param workbenchPage the active workbenchPage
	 */
	public AttachedShapeAction(IWorkbenchPage workbenchPage) {
		super(workbenchPage);
	}	
	
	/**
	 * Method selectAddedObject.  Selects 
	 * Select the newly added shape view by default
	 * 
	 * @@param request the request object that holds a reference for the newly created object
	 * @@param viewer the viewer that contains the shapes to be selected. The shapes 
	 * correspond to the newly created object.	 
	 */
	protected void selectAddedObject(EditPartViewer viewer,CreateRequest request) {
		final Object model = request.getNewObject();
		if (model == null || !(model instanceof Collection))
			return;
		final Iterator models = ((Collection) model).iterator();
		final List editparts = new ArrayList();

		while (models.hasNext()) {
			IAdaptable viewAdapter = (IAdaptable) models.next();
			if (viewAdapter != null) {
				Object editPart =
					viewer.getEditPartRegistry().get(
						viewAdapter.getAdapter(View.class));
				if (editPart != null)
					editparts.add(editPart);
			}
		}

		if (!editparts.isEmpty()) {
			viewer.setSelection(new StructuredSelection(editparts));
		
			// automatically put the first shape into edit-mode
			Display.getCurrent().asyncExec(new Runnable() {
				public void run(){
					EditPart editPart = (EditPart) editparts.get(0);
					editPart.performRequest(new Request(RequestConstants.REQ_DIRECT_EDIT));
				}
			});
		}
	}
	
	/**
	 * Determines the location of for the shape to be created in relation to the
	 * some other shape.
	 * 
	 * @@param editParts
	 *            the existing editparts of the shapes whose location is used to
	 *            determine the location of the to be created shape
	 * @@return Point the point representing the location of the to be created
	 *         shape
	 */
	protected Point getLocation(List editParts) {

		Point referenceLocation = new Point(0, 0);

		Rect compoundBounds =
			new Rect(
				Integer.MAX_VALUE,
				Integer.MAX_VALUE,
				Integer.MIN_VALUE,
				Integer.MIN_VALUE);

		for (int i = 0; i < editParts.size(); i++) {
			GraphicalEditPart part = (GraphicalEditPart) editParts.get(i);
			Rectangle bounds = null;
			if (part.getFigure() instanceof PolylineConnectionEx)
				bounds =
					((PolylineConnectionEx) part.getFigure()).getSimpleBounds();
			else
				bounds = part.getFigure().getBounds();
			compoundBounds = compoundRectangle(compoundBounds, bounds);
		}

		referenceLocation =
			new Point(
				(compoundBounds.x1 + compoundBounds.x2) / 2,
				compoundBounds.y1);

		Dimension noteSize = new Dimension(0, 0);

		GraphicalEditPart part = (GraphicalEditPart) editParts.get(0);
		int vertOffset = MapModeUtil.getMapMode(part.getFigure()).DPtoLP(60);
		Point location = new Point();
		location.x = referenceLocation.x;
		location.y = referenceLocation.y - noteSize.height - vertOffset;
		

		// convert the location to screen coordinates as that is what the creation command expects
		//this is done so that the new node don;t hide up in the scrollpane of the shapecompartment.
		if ((location.y < 0)&&(part.getParent() instanceof ShapeCompartmentEditPart)){
				location.y = referenceLocation.y;
				location.x = part.getFigure().getBounds().getRight().x + vertOffset;
		}
		part.getFigure().translateToAbsolute(location);

		return location;
	}

	/**
	 * Builds a compound rectangle out of contributing rectangles
	 * 	 
	 * @@param base the base rectangle to start with
	 * @@param added the newly added rectangle to be compounded
	 * @@return Rect the resulting compound rectangle
	 *
	 */
	private Rect compoundRectangle(Rect base, Rectangle added) {
		if (added == null)
			return base;

		if (added.x + added.width > base.x2)
			base.x2 = added.x + added.width;
		if (added.y + added.height > base.y2)
			base.y2 = added.y + added.height;
		if (added.x < base.x1)
			base.x1 = added.x;
		if (added.y < base.y1)
			base.y1 = added.y;

		return base;
	}

	private class Rect {
		public int x1, y1, x2, y2;
		Rect(int x1, int y1, int x2, int y2) {
			this.x1 = x1;
			this.y1 = y1;
			this.x2 = x2;
			this.y2 = y2;
		}
		public Rectangle toRectangle() {
			return new Rectangle(x1, y1, x2 - x1 + 1, y2 - y1 + 1);
		}
	}
	
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractActionHandler#isSelectionListener()
	 */
	protected boolean isSelectionListener() {
		return true;
	}

	/**
	 *  Return null since this action doesn't use request to execute its commands.
	 * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#createTargetRequest()
	 */
	protected Request createTargetRequest() {
		return null;
	}	
	
	/**
	 * Return the first non {@@link ShapeEditPart} and non {@@link ConnectionEditPart} instance in the
	 * supplied editparts editpart hierarchy.
	 * @@param editPart starting editpart
	 * @@return an editpart the first non <code>ShapeEditPart</code> non <code>ConnectionEditPart</code> 
	 * 			it found traversing the hierarchy upwards.
	 */
	protected EditPart getContainer(EditPart editPart) {
		EditPart walker = editPart;
		while (walker != null
			&& (walker instanceof ShapeEditPart || walker instanceof ConnectionEditPart)) { 
			walker = walker.getParent();
		}
		if (walker instanceof RootEditPart) {
			return ((RootEditPart) walker).getContents();
		}
		return walker;
	}

}
@


1.5
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@@


1.4
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a29 4
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IWorkbenchPage;

d34 1
a34 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d36 3
a51 3
	/** Offset from first selected shape */
	protected static final int VERT_OFFSET = MapMode.DPtoLP(60);	

d138 2
d142 1
a142 1
		location.y = referenceLocation.y - noteSize.height - VERT_OFFSET;
a145 1
		GraphicalEditPart part = (GraphicalEditPart) editParts.get(0);
d149 1
a149 1
				location.x = part.getFigure().getBounds().getRight().x + VERT_OFFSET;
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d48 1
d51 1
a51 1
	extends PresentationAction {
d206 1
a206 1
	 * @@see org.eclipse.gmf.runtime.diagram.ui.actions.PresentationAction#createTargetRequest()
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d37 1
a37 1
import com.ibm.xtools.notation.View;
@

