head	1.14;
access;
symbols
	v20081020-0700:1.14
	v20080917-1925:1.14
	v20080916-2008:1.13.2.1
	v20080722-1827:1.14
	v20080718-1700:1.13.2.1
	v20080718-1731:1.14
	R2_1_maintenance:1.13.0.2
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080603-1553:1.13
	v20080503-1740:1.13
	v20080425-1959:1.13
	v20080409-1326:1.13
	v20080407-2250:1.13
	v20080328-1605:1.13
	v20080222-1200:1.13
	v20080201-2010:1.13
	v20080118-1129:1.11
	v20080114-2222:1.11
	v20071130-1111:1.12
	v20071124-0000:1.11
	v20071108-0000:1.11
	v20070903-0000:1.11
	v20070809-0000:1.11
	R2_0_maintenance:1.11.0.4
	R2_0:1.11
	R4_20:1.11
	v20070621-0000:1.11
	RC3_20:1.11
	v20070608-1300:1.11
	v20070601-1400:1.11
	v20070518-1300:1.11
	bugzilla111892_group_support:1.11.0.2
	Root_bugzilla111892_group_support:1.11
	v20070427-0600:1.11
	v20070405-2000:1.11
	v20070330-1300:1.11
	v20070322-1100:1.11
	v20060316-0600:1.11
	v20070221-1500:1.11
	v20070208-1800:1.11
	v20070119-1200:1.9.2.3
	M4_20:1.10
	v20061218-1500:1.9.2.1
	v20061214-0000:1.10
	M3_20:1.10
	v20061117-0800:1.10
	v20061027-1200:1.9.2.1
	v20061013-1330:1.10
	v20061012-1100:1.9.2.1
	v20060919-0800:1.9.2.1
	v20060907-1100:1.9
	M1_20:1.9
	v20060803-1200:1.9
	v20060721-1130:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060616-1200:1.9
	v20060531-1730:1.9
	v20060519-0800:1.9
	v20060512-1000:1.9
	I20060512-1000:1.9
	I20060424-0500:1.9
	I20060424-0300:1.9
	M6_10:1.9
	I20060407-1200:1.9
	I20060331-1000:1.9
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.8
	I20060216-1945:1.8
	I20060210-1715:1.8
	I20060209-1815:1.8
	I20060203-0830:1.8
	I20060202-1415:1.8
	I20060129-1145:1.8
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051201-1800:1.7
	I20051124-2000:1.6
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.4
	v20051030:1.2;
locks; strict;
comment	@# @;


1.14
date	2008.07.18.21.17.22;	author ahunter;	state Exp;
branches;
next	1.13;
commitid	6f94488108624567;

1.13
date	2008.01.16.16.51.01;	author crevells;	state Exp;
branches
	1.13.2.1;
next	1.12;
commitid	36c478e35f54567;

1.12
date	2007.11.21.17.57.22;	author crevells;	state Exp;
branches;
next	1.11;
commitid	49a2474471824567;

1.11
date	2007.01.11.18.33.00;	author aboyko;	state Exp;
branches
	1.11.2.1;
next	1.10;
commitid	7b2f45a682dc4567;

1.10
date	2006.10.03.15.01.48;	author ahunter;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.24.21.52.22;	author mmostafa;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2006.01.27.20.04.22;	author sshaw;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.25.19.38.23;	author cmahoney;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.21.16.01.29;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.08.19.34.25;	author mmostafa;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.02.23.29.17;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.01.15.29.18;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.28.14;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.42;	author sshaw;	state Exp;
branches;
next	;

1.9.2.1
date	2006.09.11.16.35.06;	author ldamus;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2007.01.11.18.17.26;	author aboyko;	state Exp;
branches;
next	1.9.2.3;
commitid	38ee45a67f354567;

1.9.2.3
date	2007.01.11.18.23.36;	author aboyko;	state Exp;
branches;
next	;
commitid	408445a680a84567;

1.11.2.1
date	2007.05.18.17.36.39;	author crevells;	state Exp;
branches;
next	;
commitid	1849464de4254567;

1.13.2.1
date	2008.07.18.21.21.21;	author ahunter;	state Exp;
branches;
next	;
commitid	10c9488109514567;


desc
@@


1.14
log
@[240732] gmf-R2_1_maintenance wdiu 080718 ArrangeAction making diagram refresh very slow
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.draw2d.Animation;
import org.eclipse.draw2d.XYLayout;
import org.eclipse.gef.ConnectionEditPart;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.tools.ToolUtilities;
import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;
import org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction;
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramUIActionsMessages;
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramUIActionsPluginImages;
import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.IEditableEditPart;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.diagram.ui.requests.ArrangeRequest;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.ui.IWorkbenchPage;

/**
 * The Arrange Action: arranges a container editpart or a set of selected editparts
 * 
 * @@author melaasar
 * @@canBeSeenBy %level1
 */
public class ArrangeAction extends DiagramAction {

    private boolean selectionOnly;

    /**
     * @@param workbenchPage
     */
    protected ArrangeAction(
        IWorkbenchPage workbenchPage,
        boolean selectionOnly) {
        super(workbenchPage);
        this.selectionOnly = selectionOnly;
    }

    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#createTargetRequest()
     */
    protected Request createTargetRequest() {
        return new ArrangeRequest(getId());
    }

    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#updateTargetRequest()
     */
    protected void updateTargetRequest() {
        ArrangeRequest request = (ArrangeRequest) getTargetRequest();
        request.setPartsToArrange(getOperationSet());
    }

    private boolean isArrangeAll() {
        return !selectionOnly;
    }

    protected Command getCommand() {
        List operationSet = getOperationSet();
        if (operationSet.isEmpty()) {
            return null;
        }
        CompoundCommand arrangeCC = new CompoundCommand(getLabel());
        if (isArrangeAll()) {
            for (Iterator iter = operationSet.iterator(); iter.hasNext();) {
                EditPart element = (EditPart) iter.next();
                Command cmd = element.getCommand(getTargetRequest());
                if (cmd != null)
                    arrangeCC.add(cmd);
            }
        } else {
            EditPart targetEP = getTargetEditPartForArrangeSelection(operationSet);
            if (targetEP != null) {
                Command cmd = targetEP.getCommand(getTargetRequest());
                if (cmd != null)
                    arrangeCC.add(cmd);
            }
        }
        return arrangeCC;
    }
    
    private EditPart getTargetEditPartForArrangeSelection(List editparts) {

        if (editparts.size() == 1) {
            
            // If there is only one editpart selected, then the Arrange
            // Selected request gets sent to this editpart's target editpart to
            // allow clients to do as they wish.
            return ((EditPart) editparts.get(0))
                .getTargetEditPart(getTargetRequest());
            
        } else {
            
            // If there is more than one editpart selected, then the Arrange
            // Selected request gets sent to the common parent.
            EditPart parentEP = getSelectionParent(editparts);
            if (parentEP == null)
                return null;

            for (int i = 1; i < editparts.size(); i++) {
                EditPart part = (EditPart) editparts.get(i);
                if (part instanceof ConnectionEditPart) {
                    continue;
                }
                // if there is no common parent, then Arrange Selected isn't
                // supported.
                if (part.getParent() != parentEP)
                    return null;
            }
            return parentEP;
        }
    }

    /* 
     * The operation set is the shapes, connections or both on the diagrm edit part
     * (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#createOperationSet()
     */
    protected List createOperationSet() {
        List selection = getSelectedObjects();

        if (isArrangeAll()) {

            if (!selection.isEmpty()) {
                return createOperationSetForArrangeAll(selection);
            }
            if (getDiagramEditPart() != null) {
                return getDiagramEditPart().getChildren();
            }
            return Collections.EMPTY_LIST;

        } else {

            // this is the case of Arrange Selection
            if (selection.isEmpty()
                || !(selection.get(0) instanceof IGraphicalEditPart))
                return Collections.EMPTY_LIST;

            selection = ToolUtilities.getSelectionWithoutDependants(selection);
            return selection;
        }
    }

    /**
     * getSelectionParent Utility to return the logical parent of the selection
     * list
     * 
     * @@param editparts
     *            List to parse for a common parent.
     * @@return EditPart that is the parent or null if a common parent doesn't
     *         exist.
     */
    private EditPart getSelectionParent(List editparts) {
        ListIterator li = editparts.listIterator();
        while (li.hasNext()) {
            Object obj = li.next();
            if (!(obj instanceof ConnectionEditPart) && obj instanceof EditPart) {
                return ((EditPart)obj).getParent();
            }
        }
        
        return null;
    }

    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractActionHandler#isSelectionListener()
     */
    protected boolean isSelectionListener() {
        return true;
    }

    /**
     * Creates the Arrange All action
     * @@param workbenchPage
     */
    public static ArrangeAction createArrangeAllAction(IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction(workbenchPage,false);
        action.setId(ActionIds.ACTION_ARRANGE_ALL);
        action.setText(DiagramUIActionsMessages.ArrangeAction_ArrangeAll_ActionLabelText);
        action.setToolTipText(DiagramUIActionsMessages.ArrangeAction_ArrangeAll_ActionToolTipText);
        
        action
            .setImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
        action
            .setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL_DISABLED);
        action
            .setHoverImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
        return action;
    }
    
    /**
     * Creates the Arrange All action for the toolbar menu
     * @@param workbenchPage
     */
    public static ArrangeAction createToolbarArrangeAllAction(IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction(workbenchPage, false);
        action.setId(ActionIds.ACTION_TOOLBAR_ARRANGE_ALL);
        action.setText(DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeAll_ActionLabelText);
        action.setToolTipText(DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeAll_ActionToolTipText);
        
        action
            .setImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
        action
            .setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL_DISABLED);
        action
            .setHoverImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
        return action;
    }

    /**
     * Creates the Arrange Selection Only action
     * @@param workbenchPage
     */
    public static ArrangeAction createArrangeSelectionAction(IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction(workbenchPage, true);
        action.setId(ActionIds.ACTION_ARRANGE_SELECTION);
        action.setText(DiagramUIActionsMessages.ArrangeAction_ArrangeSelection_ActionLabelText);
        action.setToolTipText(DiagramUIActionsMessages.ArrangeAction_ArrangeSelection_ActionToolTipText);
        
        action
            .setImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
        action
            .setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED_DISABLED);
        action
            .setHoverImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
        return action;
    }
    
    /**
     * Creates the Arrange Selection Only action for the toolbar menu
     * @@param workbenchPage
     */
    public static ArrangeAction createToolbarArrangeSelectionAction(IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction(workbenchPage, true);
        action.setId(ActionIds.ACTION_TOOLBAR_ARRANGE_SELECTION);
        action.setText(DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeSelection_ActionLabelText);
        action.setToolTipText(DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeSelection_ActionToolTipText);
        
        action
            .setImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
        action
            .setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED_DISABLED);
        action
            .setHoverImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
        return action;
    }
    
    protected void doRun(IProgressMonitor progressMonitor) {
        IPreferenceStore preferenceStore = (IPreferenceStore) getDiagramEditPart().getDiagramPreferencesHint().getPreferenceStore();
        boolean animatedLayout = preferenceStore.getBoolean(
            IPreferenceConstants.PREF_ENABLE_ANIMATED_LAYOUT);
        
        if (animatedLayout)
            Animation.markBegin();
            
        super.doRun(progressMonitor);
        
        if (animatedLayout) {
            int durationInc = 800;
            int factor = 10;
            int size = 0;
            
            List operationSet = getOperationSet();
            if (isArrangeAll()){
                for (Iterator iter = operationSet.iterator(); iter.hasNext();) {
                    IGraphicalEditPart element = (IGraphicalEditPart) iter.next();
                    size += element.getFigure().getChildren().size();
                }
            }
            else if (operationSet != null && !operationSet.isEmpty()) {
                IGraphicalEditPart container = (IGraphicalEditPart)getSelectionParent(operationSet);
                size += container.getFigure().getChildren().size();
            }
            
            int totalDuration = Math.min(durationInc * factor / 2, Math.max(durationInc, (size / 
                    factor) * durationInc));
            
            Animation.run(totalDuration);
        }
    }
    
    /**
     * @@param selection
     * @@return
     */
    private List createOperationSetForArrangeAll(List selection) {
        Set parentsSet = new HashSet();
        for (Iterator iter = selection.iterator(); iter.hasNext();) {
            Object element = iter.next();
            if (element instanceof ShapeCompartmentEditPart || element instanceof DiagramEditPart){
                parentsSet.add(element);
            } else if (element instanceof EditPart){
                EditPart gEditPart = 
                    (EditPart)element;
                EditPart parentEditPart = gEditPart.getParent();
                if (parentEditPart instanceof ShapeCompartmentEditPart ||
                    parentEditPart instanceof DiagramEditPart){
                    if (!parentsSet.contains(parentEditPart))
                        parentsSet.add(parentEditPart);
                }
            }
        }
        if (parentsSet.isEmpty())
            return Collections.EMPTY_LIST;
        List elements = new ArrayList();
        elements.addAll(parentsSet);            
        return elements;
    }
    
    public String getLabel() {
        return isArrangeAll() ? DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeAll_ActionLabelText
            : DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeSelection_ActionLabelText;
    }
    
    protected boolean calculateEnabled() {
        
        List operationSet = getOperationSet();
        
        //arrange all, always enable
        if( isArrangeAll() && !operationSet.isEmpty()){
            return true;
        }

        EditPart parentEP = getSelectionParent(operationSet);
        
        // bugzilla 156733: disable this action if the parent or selected edit parts are not editable
        if ((parentEP instanceof IEditableEditPart)
                && !((IEditableEditPart) parentEP)
                        .isEditModeEnabled()) {
            return false;
        }
        
        for (Iterator i = operationSet.iterator(); i.hasNext();) {
            Object next = i.next();
            if ((next instanceof IEditableEditPart)
                    && !((IEditableEditPart) next)
                            .isEditModeEnabled()) {
                return false;
            }
        }
        
        //arrange selection
        if (operationSet.size() >= 2) {
            if (parentEP instanceof GraphicalEditPart) {
                GraphicalEditPart parent = (GraphicalEditPart)parentEP;
                if ((parent != null) &&(parent.getContentPane().getLayoutManager() instanceof XYLayout))
                    return true;
            }
        } else if (operationSet.size() == 1) {
            if (operationSet.get(0) instanceof GroupEditPart) {
                return true;
            }
            else {
                EditPart host = (EditPart) operationSet.get(0);
                for (Iterator iterator = host.getChildren().iterator(); iterator
                    .hasNext();) {
                    Object childEP = iterator.next();
                    if (childEP instanceof CompartmentEditPart
                        && ((CompartmentEditPart) childEP).getContentPane()
                            .getLayoutManager() instanceof XYLayout) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

}

@


1.13
log
@[215505] gmf_head crevells 080116 Should be able to right-click a Circuit and arrange contents of its compartment
@
text
@d24 1
d27 1
d36 1
d38 1
d41 1
d342 54
@


1.13.2.1
log
@[240732] gmf-head wdiu 080718 ArrangeAction maknig diagram refresh very slow
@
text
@a23 1
import org.eclipse.draw2d.XYLayout;
a25 1
import org.eclipse.gef.GraphicalEditPart;
a33 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;
a34 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
a36 1
import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.IEditableEditPart;
a336 54
    
    protected boolean calculateEnabled() {
        
        List operationSet = getOperationSet();
        
        //arrange all, always enable
        if( isArrangeAll() && !operationSet.isEmpty()){
            return true;
        }

        EditPart parentEP = getSelectionParent(operationSet);
        
        // bugzilla 156733: disable this action if the parent or selected edit parts are not editable
        if ((parentEP instanceof IEditableEditPart)
                && !((IEditableEditPart) parentEP)
                        .isEditModeEnabled()) {
            return false;
        }
        
        for (Iterator i = operationSet.iterator(); i.hasNext();) {
            Object next = i.next();
            if ((next instanceof IEditableEditPart)
                    && !((IEditableEditPart) next)
                            .isEditModeEnabled()) {
                return false;
            }
        }
        
        //arrange selection
        if (operationSet.size() >= 2) {
            if (parentEP instanceof GraphicalEditPart) {
                GraphicalEditPart parent = (GraphicalEditPart)parentEP;
                if ((parent != null) &&(parent.getContentPane().getLayoutManager() instanceof XYLayout))
                    return true;
            }
        } else if (operationSet.size() == 1) {
            if (operationSet.get(0) instanceof GroupEditPart) {
                return true;
            }
            else {
                EditPart host = (EditPart) operationSet.get(0);
                for (Iterator iterator = host.getChildren().iterator(); iterator
                    .hasNext();) {
                    Object childEP = iterator.next();
                    if (childEP instanceof CompartmentEditPart
                        && ((CompartmentEditPart) childEP).getContentPane()
                            .getLayoutManager() instanceof XYLayout) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
@


1.12
log
@[111892] gmf_head crevells 071121 Group/Ungroup support
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
a23 1
import org.eclipse.draw2d.XYLayout;
a25 1
import org.eclipse.gef.GraphicalEditPart;
a34 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
a36 1
import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.IEditableEditPart;
d82 4
d88 1
a88 2
            List elements = getOperationSet();
            for (Iterator iter = elements.iterator(); iter.hasNext();) {
d94 4
a97 4
        } else if (getOperationSet().size() >= 2) {
            EditPart parent = getSelectionParent(getOperationSet());
            if (parent != null) {
                Command cmd = parent.getCommand(getTargetRequest());
d104 2
d107 25
a131 40
    /**
     * Action is enabled if arrange all. If arrange selection, action is enabled
     * if the operation set's parent has XYLayout and there is atleast 2
     * siblings to arrange
     * 
     * @@see org.eclipse.gef.ui.actions.EditorPartAction#calculateEnabled()
     */
    protected boolean calculateEnabled() {
        
        List operationSet = getOperationSet();
        
        //arrange all, always enable
        if( isArrangeAll() && !operationSet.isEmpty()){
            return true;
        }

        EditPart parentEP = getSelectionParent(operationSet);
        
        // bugzilla 156733: disable this action if the parent or selected edit parts are not editable
        if ((parentEP instanceof IEditableEditPart)
                && !((IEditableEditPart) parentEP)
                        .isEditModeEnabled()) {
            return false;
        }
        
        for (Iterator i = operationSet.iterator(); i.hasNext();) {
            Object next = i.next();
            if ((next instanceof IEditableEditPart)
                    && !((IEditableEditPart) next)
                            .isEditModeEnabled()) {
                return false;
            }
        }
        
        //arrange selection
        if (operationSet.size() >= 2) {
            if (parentEP instanceof GraphicalEditPart) {
                GraphicalEditPart parent = (GraphicalEditPart)parentEP;
                if ((parent != null) &&(parent.getContentPane().getLayoutManager() instanceof XYLayout))
                    return true;
d133 1
a133 3
        } else if (operationSet.size() == 1
            && operationSet.get(0) instanceof GroupEditPart) {
            return true;
a134 1
        return false;
d144 8
a151 4
        
        if( isArrangeAll() ) {
            if( !selection.isEmpty()){
                return getElementsToArrange(selection);
d153 1
a153 2
            if( getDiagramEditPart() != null )              
                return createOperationSet(getDiagramEditPart().getChildren());
d155 1
a155 2
            return Collections.EMPTY_LIST;
        }
d157 4
a160 3
        if (selection.isEmpty() ||
                !(selection.get(0) instanceof IGraphicalEditPart))
            return Collections.EMPTY_LIST;
d162 3
a164 2
        selection = ToolUtilities.getSelectionWithoutDependants(selection);
        return createOperationSet(selection);
d168 2
a169 2
     * getSelectionParent
     * Utility to return the logical parent of the selection list
d171 4
a174 2
     * @@param editparts List to parse for a common parent.
     * @@return EditPart that is the parent or null if a common parent doesn't exist.
a186 27
    
    private List createOperationSet(List editparts) {
        if (editparts == null || editparts.isEmpty())
            return Collections.EMPTY_LIST;
        
        EditPart parent;
        if (editparts.size() == 1 && editparts.get(0) instanceof GroupEditPart) {
             GroupEditPart groupEP = (GroupEditPart) editparts.get(0);
            parent = groupEP;
            editparts = groupEP.getChildren();
        } else {
            parent = getSelectionParent(editparts);
        }
        
        if (parent == null)
            return Collections.EMPTY_LIST;
        
        for (int i = 1; i < editparts.size(); i++) {
            EditPart part = (EditPart) editparts.get(i);
            if (part instanceof ConnectionEditPart){
                continue;
            }
            if (part.getParent() != parent)
                return Collections.EMPTY_LIST;
        }
        return editparts;
    }
d309 1
a309 1
    private List getElementsToArrange(List selection) {
d332 5
@


1.11
log
@[170224] gmf_head aboyko 070111 CompositeCommand#reduce() should propogate command label
@
text
@d37 1
d54 1
a54 1
	private boolean selectionOnly;
d56 314
a369 302
	/**
	 * @@param workbenchPage
	 */
	protected ArrangeAction(
		IWorkbenchPage workbenchPage,
		boolean selectionOnly) {
		super(workbenchPage);
		this.selectionOnly = selectionOnly;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#createTargetRequest()
	 */
	protected Request createTargetRequest() {
		return new ArrangeRequest(getId());
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#updateTargetRequest()
	 */
	protected void updateTargetRequest() {
		ArrangeRequest request = (ArrangeRequest) getTargetRequest();
		request.setPartsToArrange(getOperationSet());
	}

	private boolean isArrangeAll() {
		return !selectionOnly;
	}

	protected Command getCommand() {
		CompoundCommand arrangeCC = new CompoundCommand(getLabel());
		if (isArrangeAll()) {
			List elements = getOperationSet();
			for (Iterator iter = elements.iterator(); iter.hasNext();) {
				EditPart element = (EditPart) iter.next();
				Command cmd = element.getCommand(getTargetRequest());
				if (cmd != null)
					arrangeCC.add(cmd);
			}
		} else if (getOperationSet().size() >= 2) {
			EditPart parent = getSelectionParent(getOperationSet());
			if (parent != null) {
				Command cmd = parent.getCommand(getTargetRequest());
				if (cmd != null)
					arrangeCC.add(cmd);
			}
		}
		return arrangeCC;
	}

	/**
	 * Action is enabled if arrange all. If arrange selection, action is enabled
	 * if the operation set's parent has XYLayout and there is atleast 2
	 * siblings to arrange
	 * 
	 * @@see org.eclipse.gef.ui.actions.EditorPartAction#calculateEnabled()
	 */
	protected boolean calculateEnabled() {
		
		List operationSet = getOperationSet();
		
		//arrange all, always enable
		if( isArrangeAll() && !operationSet.isEmpty()){
			return true;
		}

		EditPart parentEP = getSelectionParent(operationSet);
		
		// bugzilla 156733: disable this action if the parent or selected edit parts are not editable
		if ((parentEP instanceof IEditableEditPart)
				&& !((IEditableEditPart) parentEP)
						.isEditModeEnabled()) {
			return false;
		}
		
		for (Iterator i = operationSet.iterator(); i.hasNext();) {
			Object next = i.next();
			if ((next instanceof IEditableEditPart)
					&& !((IEditableEditPart) next)
							.isEditModeEnabled()) {
				return false;
			}
		}
		
		//arrange selection
		if (operationSet.size() >= 2) {
			if (parentEP instanceof GraphicalEditPart) {
				GraphicalEditPart parent = (GraphicalEditPart)parentEP;
				if ((parent != null) &&(parent.getContentPane().getLayoutManager() instanceof XYLayout))
					return true;
			}
		}
		return false;
	}

	/* 
	 * The operation set is the shapes, connections or both on the diagrm edit part
	 * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#createOperationSet()
	 */
	protected List createOperationSet() {
		List selection = getSelectedObjects();
		
		if( isArrangeAll() ) {
			if( !selection.isEmpty()){
				return getElementsToArrange(selection);
			}
			if( getDiagramEditPart() != null )				
				return createOperationSet(getDiagramEditPart().getChildren());

			return Collections.EMPTY_LIST;
		}

		if (selection.isEmpty() ||
				!(selection.get(0) instanceof IGraphicalEditPart))
			return Collections.EMPTY_LIST;

		selection = ToolUtilities.getSelectionWithoutDependants(selection);
		return createOperationSet(selection);
	}

	/**
	 * getSelectionParent
	 * Utility to return the logical parent of the selection list
	 * 
	 * @@param editparts List to parse for a common parent.
	 * @@return EditPart that is the parent or null if a common parent doesn't exist.
	 */
	private EditPart getSelectionParent(List editparts) {
		ListIterator li = editparts.listIterator();
		while (li.hasNext()) {
			Object obj = li.next();
			if (!(obj instanceof ConnectionEditPart) && obj instanceof EditPart) {
				return ((EditPart)obj).getParent();
			}
		}
		
		return null;
	}
	
	private List createOperationSet(List editparts) {
		if (editparts == null || editparts.isEmpty())
			return Collections.EMPTY_LIST;
		EditPart parent = getSelectionParent(editparts);
		if (parent == null)
			return Collections.EMPTY_LIST;
		
		for (int i = 1; i < editparts.size(); i++) {
			EditPart part = (EditPart) editparts.get(i);
			if (part instanceof ConnectionEditPart){
				continue;
			}
			if (part.getParent() != parent)
				return Collections.EMPTY_LIST;
		}
		return editparts;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractActionHandler#isSelectionListener()
	 */
	protected boolean isSelectionListener() {
		return true;
	}

	/**
	 * Creates the Arrange All action
	 * @@param workbenchPage
	 */
	public static ArrangeAction createArrangeAllAction(IWorkbenchPage workbenchPage) {
		ArrangeAction action = new ArrangeAction(workbenchPage,false);
		action.setId(ActionIds.ACTION_ARRANGE_ALL);
		action.setText(DiagramUIActionsMessages.ArrangeAction_ArrangeAll_ActionLabelText);
		action.setToolTipText(DiagramUIActionsMessages.ArrangeAction_ArrangeAll_ActionToolTipText);
		
		action
			.setImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
		action
			.setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL_DISABLED);
		action
			.setHoverImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
		return action;
	}
	
	/**
	 * Creates the Arrange All action for the toolbar menu
	 * @@param workbenchPage
	 */
	public static ArrangeAction createToolbarArrangeAllAction(IWorkbenchPage workbenchPage) {
		ArrangeAction action = new ArrangeAction(workbenchPage, false);
		action.setId(ActionIds.ACTION_TOOLBAR_ARRANGE_ALL);
		action.setText(DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeAll_ActionLabelText);
		action.setToolTipText(DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeAll_ActionToolTipText);
		
		action
			.setImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
		action
			.setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL_DISABLED);
		action
			.setHoverImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
		return action;
	}

	/**
	 * Creates the Arrange Selection Only action
	 * @@param workbenchPage
	 */
	public static ArrangeAction createArrangeSelectionAction(IWorkbenchPage workbenchPage) {
		ArrangeAction action = new ArrangeAction(workbenchPage, true);
		action.setId(ActionIds.ACTION_ARRANGE_SELECTION);
		action.setText(DiagramUIActionsMessages.ArrangeAction_ArrangeSelection_ActionLabelText);
		action.setToolTipText(DiagramUIActionsMessages.ArrangeAction_ArrangeSelection_ActionToolTipText);
		
		action
			.setImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
		action
			.setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED_DISABLED);
		action
			.setHoverImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
		return action;
	}
	
	/**
	 * Creates the Arrange Selection Only action for the toolbar menu
	 * @@param workbenchPage
	 */
	public static ArrangeAction createToolbarArrangeSelectionAction(IWorkbenchPage workbenchPage) {
		ArrangeAction action = new ArrangeAction(workbenchPage, true);
		action.setId(ActionIds.ACTION_TOOLBAR_ARRANGE_SELECTION);
		action.setText(DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeSelection_ActionLabelText);
		action.setToolTipText(DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeSelection_ActionToolTipText);
		
		action
			.setImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
		action
			.setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED_DISABLED);
		action
			.setHoverImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
		return action;
	}
	
	protected void doRun(IProgressMonitor progressMonitor) {
		IPreferenceStore preferenceStore = (IPreferenceStore) getDiagramEditPart().getDiagramPreferencesHint().getPreferenceStore();
		boolean animatedLayout = preferenceStore.getBoolean(
			IPreferenceConstants.PREF_ENABLE_ANIMATED_LAYOUT);
		
		if (animatedLayout)
			Animation.markBegin();
			
		super.doRun(progressMonitor);
		
		if (animatedLayout) {
			int durationInc = 800;
			int factor = 10;
			int size = 0;
			
			List operationSet = getOperationSet();
			if (isArrangeAll()){
				for (Iterator iter = operationSet.iterator(); iter.hasNext();) {
					IGraphicalEditPart element = (IGraphicalEditPart) iter.next();
					size += element.getFigure().getChildren().size();
				}
			}
			else if (operationSet != null && !operationSet.isEmpty()) {
				IGraphicalEditPart container = (IGraphicalEditPart)getSelectionParent(operationSet);
				size += container.getFigure().getChildren().size();
			}
			
			int totalDuration = Math.min(durationInc * factor / 2, Math.max(durationInc, (size / 
					factor) * durationInc));
			
			Animation.run(totalDuration);
		}
	}
	
	/**
	 * @@param selection
	 * @@return
	 */
	private List getElementsToArrange(List selection) {
		Set parentsSet = new HashSet();
		for (Iterator iter = selection.iterator(); iter.hasNext();) {
			Object element = iter.next();
			if (element instanceof ShapeCompartmentEditPart || element instanceof DiagramEditPart){
				parentsSet.add(element);
			} else if (element instanceof EditPart){
				EditPart gEditPart = 
					(EditPart)element;
				EditPart parentEditPart = gEditPart.getParent();
				if (parentEditPart instanceof ShapeCompartmentEditPart ||
					parentEditPart instanceof DiagramEditPart){
					if (!parentsSet.contains(parentEditPart))
						parentsSet.add(parentEditPart);
				}
			}
		}
		if (parentsSet.isEmpty())
			return Collections.EMPTY_LIST;
		List elements = new ArrayList();
		elements.addAll(parentsSet);			
		return elements;
	}
@


1.11.2.1
log
@[111892] gmf_head crevells 070518 First milestone of group/ungroup support (painting issues when grouping shapes with border items)
@
text
@a36 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
d53 1
a53 1
    private boolean selectionOnly;
d55 302
a356 314
    /**
     * @@param workbenchPage
     */
    protected ArrangeAction(
        IWorkbenchPage workbenchPage,
        boolean selectionOnly) {
        super(workbenchPage);
        this.selectionOnly = selectionOnly;
    }

    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#createTargetRequest()
     */
    protected Request createTargetRequest() {
        return new ArrangeRequest(getId());
    }

    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#updateTargetRequest()
     */
    protected void updateTargetRequest() {
        ArrangeRequest request = (ArrangeRequest) getTargetRequest();
        request.setPartsToArrange(getOperationSet());
    }

    private boolean isArrangeAll() {
        return !selectionOnly;
    }

    protected Command getCommand() {
        CompoundCommand arrangeCC = new CompoundCommand(getLabel());
        if (isArrangeAll()) {
            List elements = getOperationSet();
            for (Iterator iter = elements.iterator(); iter.hasNext();) {
                EditPart element = (EditPart) iter.next();
                Command cmd = element.getCommand(getTargetRequest());
                if (cmd != null)
                    arrangeCC.add(cmd);
            }
        } else if (getOperationSet().size() >= 2) {
            EditPart parent = getSelectionParent(getOperationSet());
            if (parent != null) {
                Command cmd = parent.getCommand(getTargetRequest());
                if (cmd != null)
                    arrangeCC.add(cmd);
            }
        }
        return arrangeCC;
    }

    /**
     * Action is enabled if arrange all. If arrange selection, action is enabled
     * if the operation set's parent has XYLayout and there is atleast 2
     * siblings to arrange
     * 
     * @@see org.eclipse.gef.ui.actions.EditorPartAction#calculateEnabled()
     */
    protected boolean calculateEnabled() {
        
        List operationSet = getOperationSet();
        
        //arrange all, always enable
        if( isArrangeAll() && !operationSet.isEmpty()){
            return true;
        }

        EditPart parentEP = getSelectionParent(operationSet);
        
        // bugzilla 156733: disable this action if the parent or selected edit parts are not editable
        if ((parentEP instanceof IEditableEditPart)
                && !((IEditableEditPart) parentEP)
                        .isEditModeEnabled()) {
            return false;
        }
        
        for (Iterator i = operationSet.iterator(); i.hasNext();) {
            Object next = i.next();
            if ((next instanceof IEditableEditPart)
                    && !((IEditableEditPart) next)
                            .isEditModeEnabled()) {
                return false;
            }
        }
        
        //arrange selection
        if (operationSet.size() >= 2) {
            if (parentEP instanceof GraphicalEditPart) {
                GraphicalEditPart parent = (GraphicalEditPart)parentEP;
                if ((parent != null) &&(parent.getContentPane().getLayoutManager() instanceof XYLayout))
                    return true;
            }
        } else if (operationSet.size() == 1
            && operationSet.get(0) instanceof GroupEditPart) {
            return true;
        }
        return false;
    }

    /* 
     * The operation set is the shapes, connections or both on the diagrm edit part
     * (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#createOperationSet()
     */
    protected List createOperationSet() {
        List selection = getSelectedObjects();
        
        if( isArrangeAll() ) {
            if( !selection.isEmpty()){
                return getElementsToArrange(selection);
            }
            if( getDiagramEditPart() != null )              
                return createOperationSet(getDiagramEditPart().getChildren());

            return Collections.EMPTY_LIST;
        }

        if (selection.isEmpty() ||
                !(selection.get(0) instanceof IGraphicalEditPart))
            return Collections.EMPTY_LIST;

        selection = ToolUtilities.getSelectionWithoutDependants(selection);
        return createOperationSet(selection);
    }

    /**
     * getSelectionParent
     * Utility to return the logical parent of the selection list
     * 
     * @@param editparts List to parse for a common parent.
     * @@return EditPart that is the parent or null if a common parent doesn't exist.
     */
    private EditPart getSelectionParent(List editparts) {
        ListIterator li = editparts.listIterator();
        while (li.hasNext()) {
            Object obj = li.next();
            if (!(obj instanceof ConnectionEditPart) && obj instanceof EditPart) {
                return ((EditPart)obj).getParent();
            }
        }
        
        return null;
    }
    
    private List createOperationSet(List editparts) {
        if (editparts == null || editparts.isEmpty())
            return Collections.EMPTY_LIST;
        
        EditPart parent;
        if (editparts.size() == 1 && editparts.get(0) instanceof GroupEditPart) {
             GroupEditPart groupEP = (GroupEditPart) editparts.get(0);
            parent = groupEP;
            editparts = groupEP.getChildren();
        } else {
            parent = getSelectionParent(editparts);
        }
        
        if (parent == null)
            return Collections.EMPTY_LIST;
        
        for (int i = 1; i < editparts.size(); i++) {
            EditPart part = (EditPart) editparts.get(i);
            if (part instanceof ConnectionEditPart){
                continue;
            }
            if (part.getParent() != parent)
                return Collections.EMPTY_LIST;
        }
        return editparts;
    }

    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractActionHandler#isSelectionListener()
     */
    protected boolean isSelectionListener() {
        return true;
    }

    /**
     * Creates the Arrange All action
     * @@param workbenchPage
     */
    public static ArrangeAction createArrangeAllAction(IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction(workbenchPage,false);
        action.setId(ActionIds.ACTION_ARRANGE_ALL);
        action.setText(DiagramUIActionsMessages.ArrangeAction_ArrangeAll_ActionLabelText);
        action.setToolTipText(DiagramUIActionsMessages.ArrangeAction_ArrangeAll_ActionToolTipText);
        
        action
            .setImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
        action
            .setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL_DISABLED);
        action
            .setHoverImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
        return action;
    }
    
    /**
     * Creates the Arrange All action for the toolbar menu
     * @@param workbenchPage
     */
    public static ArrangeAction createToolbarArrangeAllAction(IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction(workbenchPage, false);
        action.setId(ActionIds.ACTION_TOOLBAR_ARRANGE_ALL);
        action.setText(DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeAll_ActionLabelText);
        action.setToolTipText(DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeAll_ActionToolTipText);
        
        action
            .setImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
        action
            .setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL_DISABLED);
        action
            .setHoverImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_ALL);
        return action;
    }

    /**
     * Creates the Arrange Selection Only action
     * @@param workbenchPage
     */
    public static ArrangeAction createArrangeSelectionAction(IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction(workbenchPage, true);
        action.setId(ActionIds.ACTION_ARRANGE_SELECTION);
        action.setText(DiagramUIActionsMessages.ArrangeAction_ArrangeSelection_ActionLabelText);
        action.setToolTipText(DiagramUIActionsMessages.ArrangeAction_ArrangeSelection_ActionToolTipText);
        
        action
            .setImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
        action
            .setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED_DISABLED);
        action
            .setHoverImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
        return action;
    }
    
    /**
     * Creates the Arrange Selection Only action for the toolbar menu
     * @@param workbenchPage
     */
    public static ArrangeAction createToolbarArrangeSelectionAction(IWorkbenchPage workbenchPage) {
        ArrangeAction action = new ArrangeAction(workbenchPage, true);
        action.setId(ActionIds.ACTION_TOOLBAR_ARRANGE_SELECTION);
        action.setText(DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeSelection_ActionLabelText);
        action.setToolTipText(DiagramUIActionsMessages.ArrangeAction_toolbar_ArrangeSelection_ActionToolTipText);
        
        action
            .setImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
        action
            .setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED_DISABLED);
        action
            .setHoverImageDescriptor(DiagramUIActionsPluginImages.DESC_ARRANGE_SELECTED);
        return action;
    }
    
    protected void doRun(IProgressMonitor progressMonitor) {
        IPreferenceStore preferenceStore = (IPreferenceStore) getDiagramEditPart().getDiagramPreferencesHint().getPreferenceStore();
        boolean animatedLayout = preferenceStore.getBoolean(
            IPreferenceConstants.PREF_ENABLE_ANIMATED_LAYOUT);
        
        if (animatedLayout)
            Animation.markBegin();
            
        super.doRun(progressMonitor);
        
        if (animatedLayout) {
            int durationInc = 800;
            int factor = 10;
            int size = 0;
            
            List operationSet = getOperationSet();
            if (isArrangeAll()){
                for (Iterator iter = operationSet.iterator(); iter.hasNext();) {
                    IGraphicalEditPart element = (IGraphicalEditPart) iter.next();
                    size += element.getFigure().getChildren().size();
                }
            }
            else if (operationSet != null && !operationSet.isEmpty()) {
                IGraphicalEditPart container = (IGraphicalEditPart)getSelectionParent(operationSet);
                size += container.getFigure().getChildren().size();
            }
            
            int totalDuration = Math.min(durationInc * factor / 2, Math.max(durationInc, (size / 
                    factor) * durationInc));
            
            Animation.run(totalDuration);
        }
    }
    
    /**
     * @@param selection
     * @@return
     */
    private List getElementsToArrange(List selection) {
        Set parentsSet = new HashSet();
        for (Iterator iter = selection.iterator(); iter.hasNext();) {
            Object element = iter.next();
            if (element instanceof ShapeCompartmentEditPart || element instanceof DiagramEditPart){
                parentsSet.add(element);
            } else if (element instanceof EditPart){
                EditPart gEditPart = 
                    (EditPart)element;
                EditPart parentEditPart = gEditPart.getParent();
                if (parentEditPart instanceof ShapeCompartmentEditPart ||
                    parentEditPart instanceof DiagramEditPart){
                    if (!parentsSet.contains(parentEditPart))
                        parentsSet.add(parentEditPart);
                }
            }
        }
        if (parentsSet.isEmpty())
            return Collections.EMPTY_LIST;
        List elements = new ArrayList();
        elements.addAll(parentsSet);            
        return elements;
    }
@


1.10
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
a30 1
import org.eclipse.gef.commands.UnexecutableCommand;
a83 3
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#getCommand()
	 */
d85 2
a86 2
		if (isArrangeAll()){
			CompoundCommand arrangeCC = new CompoundCommand(getLabel());
d90 3
a92 3
                Command cmd = element.getCommand(getTargetRequest());
                if (cmd !=null)
                    arrangeCC.add(cmd);
d94 1
a94 6
            if (!arrangeCC.isEmpty())
                return arrangeCC;
            else
                return UnexecutableCommand.INSTANCE;
        }
		else if (getOperationSet().size() >= 2) {
d96 5
a100 2
			if (parent != null)
				return parent.getCommand(getTargetRequest());
d102 1
a102 1
		return UnexecutableCommand.INSTANCE;
d106 4
a109 4
	 * Action is enabled if arrange all.   
	 * If arrange selection, action is enabled if the 
	 * operation set's parent has XYLayout 
	 * and there is atleast 2 siblings to arrange
@


1.9
log
@bugzilla 130671 gmf-head mmostafa 060324 Executing an Arrange All with no nodes causes exception
@
text
@d40 1
d120 2
d123 1
a123 1
		if( isArrangeAll() && !getOperationSet().isEmpty()){
d127 18
d146 1
a146 2
		if (getOperationSet().size() >= 2) {
			EditPart parentEP = getSelectionParent(getOperationSet());
@


1.9.2.1
log
@[156733] gmf_R1_0_maintenance ldamus 060911 org.eclipse.gmf.runtime.diagram.ui.actions AddNoteAction, ZOrderAction, ArrangeAction do not respect org.eclipse.gmf.runtime.diagram.ui.internal.editparts.IEditableEditPart
@
text
@a39 1
import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.IEditableEditPart;
a118 2
		List operationSet = getOperationSet();
		
d120 1
a120 1
		if( isArrangeAll() && !operationSet.isEmpty()){
a123 18
		EditPart parentEP = getSelectionParent(operationSet);
		
		// bugzilla 156733: disable this action if the parent or selected edit parts are not editable
		if ((parentEP instanceof IEditableEditPart)
				&& !((IEditableEditPart) parentEP)
						.isEditModeEnabled()) {
			return false;
		}
		
		for (Iterator i = operationSet.iterator(); i.hasNext();) {
			Object next = i.next();
			if ((next instanceof IEditableEditPart)
					&& !((IEditableEditPart) next)
							.isEditModeEnabled()) {
				return false;
			}
		}
		
d125 2
a126 1
		if (operationSet.size() >= 2) {
@


1.9.2.2
log
@[170224] gmf_R1_maintenance aboyko 070111 CompositeCommand#reduce() should propogate command label
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
d85 3
d89 2
a90 2
		CompoundCommand arrangeCC = new CompoundCommand(getLabel());
		if (isArrangeAll()) {
d94 3
a96 3
				Command cmd = element.getCommand(getTargetRequest());
				if (cmd != null)
					arrangeCC.add(cmd);
d98 6
a103 1
		} else if (getOperationSet().size() >= 2) {
d105 2
a106 5
			if (parent != null) {
				Command cmd = parent.getCommand(getTargetRequest());
				if (cmd != null)
					arrangeCC.add(cmd);
			}
d108 1
a108 1
		return arrangeCC;
d112 4
a115 4
	 * Action is enabled if arrange all. If arrange selection, action is enabled
	 * if the operation set's parent has XYLayout and there is atleast 2
	 * siblings to arrange
	 * 
@


1.9.2.3
log
@[170224] gmf_R1_maintenance aboyko 070111 CompositeCommand#reduce() should propogate command label (Just ArrangeAction to get rid of warning)
@
text
@d31 1
@


1.8
log
@bugzilla 125158 gmf-head sshaw 060126 Migrate GMF animation support to use GEF 3.2 infrastructure for animation
@
text
@d93 9
a101 4
				arrangeCC.add(element.getCommand(getTargetRequest()));
			}
			return arrangeCC;
		}
@


1.7
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
d23 1
a41 1
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.AnimationFigureHelper;
a277 2
		super.doRun(progressMonitor);
		
d282 5
d288 4
d296 1
a296 1
					AnimationFigureHelper.getInstance().animate(element.getFigure());
d301 1
a301 1
				AnimationFigureHelper.getInstance().animate(container.getFigure());
d303 5
@


1.6
log
@Bugzilla#116030 gmf_head cmahoney 051121 Diagram ActionIds should be public
@
text
@a31 1
import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;
d34 2
a35 1
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramActionsResourceManager;
d39 1
a42 1
import org.eclipse.jface.resource.ImageDescriptor;
d208 2
a209 2
		action.setText(DiagramActionsResourceManager.getI18NString("ArrangeAction.ArrangeAll.ActionLabelText")); //$NON-NLS-1$
		action.setToolTipText(DiagramActionsResourceManager.getI18NString("ArrangeAction.ArrangeAll.ActionToolTipText")); //$NON-NLS-1$
d211 6
a216 8
		ImageDescriptor enabledImage = DiagramActionsResourceManager
			.getInstance().getImageDescriptor(
				DiagramActionsResourceManager.IMAGE_ARRANGE_ALL);
		action.setImageDescriptor(enabledImage);
		action.setDisabledImageDescriptor(DiagramActionsResourceManager
			.getInstance().getImageDescriptor(
				DiagramActionsResourceManager.IMAGE_ARRANGE_ALL_DISABLED));
		action.setHoverImageDescriptor(enabledImage);
d227 2
a228 2
		action.setText(DiagramActionsResourceManager.getI18NString("ArrangeAction.toolbar.ArrangeAll.ActionLabelText")); //$NON-NLS-1$
		action.setToolTipText(DiagramActionsResourceManager.getI18NString("ArrangeAction.toolbar.ArrangeAll.ActionToolTipText")); //$NON-NLS-1$
d230 6
a235 8
		ImageDescriptor enabledImage = DiagramActionsResourceManager
			.getInstance().getImageDescriptor(
				DiagramActionsResourceManager.IMAGE_ARRANGE_ALL);
		action.setImageDescriptor(enabledImage);
		action.setDisabledImageDescriptor(DiagramActionsResourceManager
			.getInstance().getImageDescriptor(
				DiagramActionsResourceManager.IMAGE_ARRANGE_ALL_DISABLED));
		action.setHoverImageDescriptor(enabledImage);
d246 2
a247 2
		action.setText(DiagramActionsResourceManager.getI18NString("ArrangeAction.ArrangeSelection.ActionLabelText")); //$NON-NLS-1$
		action.setToolTipText(DiagramActionsResourceManager.getI18NString("ArrangeAction.ArrangeSelection.ActionToolTipText")); //$NON-NLS-1$
d249 6
a254 8
		ImageDescriptor enabledImage = DiagramActionsResourceManager
			.getInstance().getImageDescriptor(
				DiagramActionsResourceManager.IMAGE_ARRANGE_SELECTED);
		action.setImageDescriptor(enabledImage);
		action.setDisabledImageDescriptor(DiagramActionsResourceManager
			.getInstance().getImageDescriptor(
				DiagramActionsResourceManager.IMAGE_ARRANGE_SELECTED_DISABLED));
		action.setHoverImageDescriptor(enabledImage);
d265 2
a266 2
		action.setText(DiagramActionsResourceManager.getI18NString("ArrangeAction.toolbar.ArrangeSelection.ActionLabelText")); //$NON-NLS-1$
		action.setToolTipText(DiagramActionsResourceManager.getI18NString("ArrangeAction.toolbar.ArrangeSelection.ActionToolTipText")); //$NON-NLS-1$
d268 6
a273 8
		ImageDescriptor enabledImage = DiagramActionsResourceManager
			.getInstance().getImageDescriptor(
				DiagramActionsResourceManager.IMAGE_ARRANGE_SELECTED);
		action.setImageDescriptor(enabledImage);
		action.setDisabledImageDescriptor(DiagramActionsResourceManager
			.getInstance().getImageDescriptor(
				DiagramActionsResourceManager.IMAGE_ARRANGE_SELECTED_DISABLED));
		action.setHoverImageDescriptor(enabledImage);
@


1.5
log
@Bugzilla 115532 gmf-head mmostafa 051108 : Arrange all does not work on nested shapes
@
text
@d33 1
a38 1
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;
@


1.4
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d14 1
d16 2
d20 1
d29 1
d32 1
d35 1
a38 1
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
d88 10
a97 1
		if (!getOperationSet().isEmpty()) {
d99 1
a99 1
			if (parent != null) {
a101 1
		}
a136 1

d140 3
a142 3
			if( !selection.isEmpty() && selection.get(0) instanceof ShapeCompartmentEditPart )
				return createOperationSet( ((ShapeCompartmentEditPart)selection.get(0)).getChildren());

d294 7
a300 1
			if (operationSet != null && !operationSet.isEmpty()) {
d306 28
@


1.3
log
@bugzilla 114359  gmf-head sshaw 051101 ArrangeAllAction prevents command redirection

Contributed by Michael Hanner
@
text
@d27 2
a28 7
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.ui.IWorkbenchPage;

import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;
import org.eclipse.gmf.runtime.diagram.ui.actions.PresentationAction;
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.Images;
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.Messages;
d32 1
d35 3
d45 1
a45 1
public class ArrangeAction extends PresentationAction {
d60 1
a60 1
	 * @@see org.eclipse.gmf.runtime.diagram.ui.actions.PresentationAction#createTargetRequest()
d67 1
a67 1
	 * @@see org.eclipse.gmf.runtime.diagram.ui.actions.PresentationAction#updateTargetRequest()
d79 1
a79 1
	 * @@see org.eclipse.gmf.runtime.diagram.ui.actions.PresentationAction#getCommand()
d86 1
a86 1
			}
d118 1
a118 1
	 * The operation set is the shapes, connectors or both on the diagrm edit part
d120 1
a120 1
	 * @@see org.eclipse.gmf.runtime.diagram.ui.actions.PresentationAction#createOperationSet()
d195 11
a205 5
		action.setText(Messages.getString("ArrangeAction.ArrangeAll.ActionLabelText")); //$NON-NLS-1$
		action.setToolTipText(Messages.getString("ArrangeAction.ArrangeAll.ActionToolTipText")); //$NON-NLS-1$
		action.setImageDescriptor(Images.DESC_ACTION_ARRANGE_ALL);
		action.setDisabledImageDescriptor(Images.DESC_ACTION_ARRANGE_ALL_DISABLED);
		action.setHoverImageDescriptor(Images.DESC_ACTION_ARRANGE_ALL);
d216 11
a226 5
		action.setText(Messages.getString("ArrangeAction.toolbar.ArrangeAll.ActionLabelText")); //$NON-NLS-1$
		action.setToolTipText(Messages.getString("ArrangeAction.toolbar.ArrangeAll.ActionToolTipText")); //$NON-NLS-1$
		action.setImageDescriptor(Images.DESC_ACTION_ARRANGE_ALL);
		action.setDisabledImageDescriptor(Images.DESC_ACTION_ARRANGE_ALL_DISABLED);
		action.setHoverImageDescriptor(Images.DESC_ACTION_ARRANGE_ALL);
d237 11
a247 5
		action.setText(Messages.getString("ArrangeAction.ArrangeSelection.ActionLabelText")); //$NON-NLS-1$
		action.setToolTipText(Messages.getString("ArrangeAction.ArrangeSelection.ActionToolTipText")); //$NON-NLS-1$
		action.setImageDescriptor(Images.DESC_ACTION_ARRANGE_SELECTED);
		action.setDisabledImageDescriptor(Images.DESC_ACTION_ARRANGE_SELECTED_DISABLED);
		action.setHoverImageDescriptor(Images.DESC_ACTION_ARRANGE_SELECTED);
d258 11
a268 5
		action.setText(Messages.getString("ArrangeAction.toolbar.ArrangeSelection.ActionLabelText")); //$NON-NLS-1$
		action.setToolTipText(Messages.getString("ArrangeAction.toolbar.ArrangeSelection.ActionToolTipText")); //$NON-NLS-1$
		action.setImageDescriptor(Images.DESC_ACTION_ARRANGE_SELECTED);
		action.setDisabledImageDescriptor(Images.DESC_ACTION_ARRANGE_SELECTED_DISABLED);
		action.setHoverImageDescriptor(Images.DESC_ACTION_ARRANGE_SELECTED);
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d83 1
a83 1
		if (getOperationSet().size() >= 2) {
d85 1
a85 1
			if (parent != null)
d87 1
d102 1
a102 1
		if( isArrangeAll() ){
d165 1
a165 1
		if (editparts.size() < 2)
d259 1
a259 1
				IGraphicalEditPart container = (IGraphicalEditPart)((EditPart)operationSet.get(0)).getParent();
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

