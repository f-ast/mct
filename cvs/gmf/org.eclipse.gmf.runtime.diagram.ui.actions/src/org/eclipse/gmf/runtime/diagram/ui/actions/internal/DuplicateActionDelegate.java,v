head	1.10;
access;
symbols
	v20081020-0700:1.10
	v20080917-1925:1.10
	v20080916-2008:1.10
	v20080722-1827:1.10
	v20080718-1700:1.10
	v20080718-1731:1.10
	R2_1_maintenance:1.10.0.4
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080603-1553:1.10
	v20080503-1740:1.10
	v20080425-1959:1.10
	v20080409-1326:1.10
	v20080407-2250:1.10
	v20080328-1605:1.10
	v20080222-1200:1.10
	v20080201-2010:1.10
	v20080118-1129:1.10
	v20080114-2222:1.10
	v20071130-1111:1.10
	v20071124-0000:1.10
	v20071108-0000:1.10
	v20070903-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.2
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.9
	v20070608-1300:1.9
	v20070601-1400:1.9
	v20070518-1300:1.9
	bugzilla111892_group_support:1.9.0.2
	Root_bugzilla111892_group_support:1.9
	v20070427-0600:1.9
	v20070405-2000:1.9
	v20070330-1300:1.9
	v20070322-1100:1.9
	v20060316-0600:1.9
	v20070221-1500:1.9
	v20070208-1800:1.9
	v20070119-1200:1.6.2.3
	M4_20:1.8
	v20061218-1500:1.6.2.3
	v20061214-0000:1.8
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.6.2.2
	v20061013-1330:1.7
	v20061012-1100:1.6.2.2
	v20060919-0800:1.6.2.2
	v20060907-1100:1.6.2.1
	M1_20:1.6
	v20060803-1200:1.6
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060531-1730:1.6
	v20060519-0800:1.6
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.10
date	2007.06.18.19.14.14;	author ahunter;	state Exp;
branches;
next	1.9;
commitid	1be14676d9854567;

1.9
date	2007.02.07.18.37.42;	author crevells;	state Exp;
branches
	1.9.2.1;
next	1.8;
commitid	30ce45ca1c764567;

1.8
date	2006.12.08.22.10.26;	author mmostafa;	state Exp;
branches;
next	1.7;
commitid	4c604579e2d24567;

1.7
date	2006.10.03.15.01.47;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.15.15.26.18;	author cmahoney;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.02.13.19.10.30;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.01.20.17.36;	author mmostafa;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.28.13;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.47.55;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.43;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.09.01.14.17.55;	author ldamus;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2006.09.13.16.43.26;	author ahunter;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2006.12.08.22.10.03;	author mmostafa;	state Exp;
branches;
next	;
commitid	72844579e2bb4567;

1.9.2.1
date	2007.05.18.17.36.38;	author crevells;	state Exp;
branches;
next	;
commitid	1849464de4254567;


desc
@@


1.10
log
@gmf_head ahunter 070618 Update Copyright for files changed in 2007 for GMF 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.IHandler;
import org.eclipse.core.commands.IHandlerListener;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.action.AbstractActionDelegate;
import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;
import org.eclipse.gmf.runtime.diagram.ui.requests.DuplicateRequest;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IObjectActionDelegate;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;

/**
 * An action delegate that handles duplication of selected model elements and
 * views on a diagram.
 * 
 * @@author cmahoney
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.ui.actions.*
 */
public class DuplicateActionDelegate
	extends AbstractActionDelegate
	implements IObjectActionDelegate, IWorkbenchWindowActionDelegate, IHandler{
    
	/**
	 * Runs this duplicate action delegate by executing a duplicate command on
	 * the selected model elements or views.
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.internal.action.AbstractActionDelegate#doRun(IProgressMonitor)
	 */
	protected void doRun(IProgressMonitor progressMonitor) {
		Object request;
		ICommand cmd;
		if (getWorkbenchPart() instanceof IDiagramWorkbenchPart) {
			request = new DuplicateRequest();
			cmd = getDuplicateViewCommand(getStructuredSelection(),
				getWorkbenchPart(), (DuplicateRequest) request);
		} else {
			request = new DuplicateElementsRequest(getEditingDomain(getStructuredSelection()));
			cmd = getDuplicateElementsCommand(getStructuredSelection(),
				(DuplicateElementsRequest) request);
		}
		if (cmd != null && cmd.canExecute()) {
            try {
                IStatus status = getActionManager().getOperationHistory()
                    .execute(cmd, progressMonitor, null);
                if (status.isOK()) {
                    if (request instanceof DuplicateRequest) {
                        selectViews(((DuplicateRequest) request)
                            .getDuplicatedViews());
                    }
                }
            } catch (ExecutionException e) {
                Trace.catching(DiagramActionsPlugin.getInstance(),
                    DiagramActionsDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                    "doRun", e); //$NON-NLS-1$
                Log.error(DiagramActionsPlugin.getInstance(),
                    DiagramActionsStatusCodes.IGNORED_EXCEPTION_WARNING,
                    "doRun", e); //$NON-NLS-1$
            }
		}
	}

	/**
     * Determines if the selection can be duplicated by trying to get a command
     * to do so.
     * 
     * @@param selection
     * @@param workbenchPart
     * @@return true if the selection can be duplicated; false otherwise.
     */
	static boolean canDuplicate(IStructuredSelection selection,
			IWorkbenchPart workbenchPart) {

		ICommand cmd = (workbenchPart instanceof IDiagramWorkbenchPart) ? getDuplicateViewCommand(
			selection, workbenchPart, new DuplicateRequest())
			: getDuplicateElementsCommand(selection,
				new DuplicateElementsRequest(getEditingDomain(selection)));

		return (cmd != null && cmd.canExecute());
	}

	/**
	 * Tries to get a command to duplicate the selected elements by going to the
	 * semantic service.
	 * 
	 * @@param selection
	 *            the selected elements
	 * @@param request
	 *            the empty <code>DuplicateElementsRequest</code>
	 * @@return a command to duplicate the elements, or null if one could not be
	 *         found.
	 */
	private static ICommand getDuplicateElementsCommand(
			IStructuredSelection selection, DuplicateElementsRequest request) {
		HashSet elements = new HashSet();
		for (Iterator i = selection.iterator(); i.hasNext();) {
			EObject element = (EObject) ((IAdaptable) i.next())
				.getAdapter(EObject.class);
			if (null != element) {
				elements.add(element);
			}
		}

		if (!elements.isEmpty()) {
			request.setElementsToBeDuplicated(new ArrayList(elements));
            
            IElementType elementType = ElementTypeRegistry.getInstance()
                .getElementType(request.getEditHelperContext());
            
            if (elementType != null) {
                return elementType.getEditCommand(request);
            }
		}
		return null;
	}

	/**
	 * Tries to get a command to duplicate the selected views by sending a
	 * request to the diagram editpart.
	 * 
	 * @@param selection
	 *            the selected editparts
	 * @@param workbenchPart
	 *            the workbench part from which the diagram editpart can be
	 *            found
	 * @@param request
	 *            the empty <code>DuplicateElementsRequest</code>
	 * @@return a command to duplicate the views (and underlying elements), or
	 *         null if one could not be found.
	 */
	private static ICommand getDuplicateViewCommand(
			IStructuredSelection selection, IWorkbenchPart workbenchPart,
			DuplicateRequest request) {
		List eps = new ArrayList();
		for (Iterator i = selection.iterator(); i.hasNext();) {
			Object selectedItem = i.next();
			if (selectedItem instanceof IGraphicalEditPart) {
				eps.add(selectedItem);
			}
		}

		if (!eps.isEmpty()) {
			request.setEditParts(eps);
			Command cmd = ((IDiagramWorkbenchPart) workbenchPart)
				.getDiagramEditPart().getCommand(request);
			if (cmd != null && cmd.canExecute()) {
				return new CommandProxy(cmd);
			}
		}
		return null;
	}

	/**
	 * Selects the newly added views on the diagram.
	 */
	private void selectViews(List views) {
		IDiagramGraphicalViewer viewer = ((IDiagramWorkbenchPart) getWorkbenchPart())
			.getDiagramGraphicalViewer();
		if (viewer != null && views != null && !views.isEmpty()) {

			List editparts = new ArrayList();
			for (Iterator iter = views.iterator(); iter.hasNext();) {
				Object view = iter.next();
				if (view instanceof View) {
					Object ep = viewer.getEditPartRegistry().get(view);
					if (ep != null) {
						editparts.add(ep);
					}
				}
			}

			if (!editparts.isEmpty()) {
				viewer.setSelection(new StructuredSelection(editparts));
			}
		}
	}
    
    public static TransactionalEditingDomain getEditingDomain(
            IStructuredSelection selection) {

        for (Iterator i = selection.iterator(); i.hasNext();) {
            EObject element = (EObject) ((IAdaptable) i.next())
                .getAdapter(EObject.class);

            if (element != null) {
                TransactionalEditingDomain editingDomain = TransactionUtil
                    .getEditingDomain(element);

                if (editingDomain != null) {
                    return editingDomain;
                }
            }
        }
        return null;
    }
    
    // Documentation copied from superclass
    protected TransactionalEditingDomain getEditingDomain() {
        return getEditingDomain(getStructuredSelection());
    }

    public void addHandlerListener(IHandlerListener handlerListener) {
        // nothing
    }

    public Object execute(ExecutionEvent event)
        throws ExecutionException {
        return null;
    }

    public boolean isEnabled() {
        return true;
    }

    public boolean isHandled() {
        return true;
    }

    public void removeHandlerListener(IHandlerListener handlerListener) {
        // nothing
        
    }

}@


1.9
log
@[172854] gmf_head crevells 070207 Duplicated views not selected
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.9.2.1
log
@[111892] gmf_head crevells 070518 First milestone of group/ungroup support (painting issues when grouping shapes with border items)
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2007 IBM Corporation and others.
a34 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
a172 6
            
            // Disable duplicate on groups for now.  See bugzilla 182972.
            if (selectedItem instanceof GroupEditPart) {
                return null;
            }
            
@


1.8
log
@[167300]   gmf_head mmostafa 061208 DuplicateActionDelegate should implement the IHandler interface
@
text
@d31 3
a41 1
import org.eclipse.gmf.runtime.emf.ui.action.AbstractModelActionDelegate;
d57 1
a57 1
	extends AbstractModelActionDelegate
d79 17
a95 11
            IStatus status = execute(cmd, progressMonitor, null);

			if (status.isOK()) {
				if (request instanceof DuplicateRequest) {
					selectViews(((DuplicateRequest) request)
						.getDuplicatedViews());
				} else {
					// This should select the new elements in ME. Once
					// RATLC00533879 is fixed, this can be implemented.
				}
			}
@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d19 1
d21 2
a25 1
import org.eclipse.core.runtime.Status;
a30 2
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
a32 3
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
d56 2
a57 2
	implements IObjectActionDelegate, IWorkbenchWindowActionDelegate {

d230 22
@


1.6
log
@Bugzilla#140166 gmf_head cmahoney 060515 Move necessary client accessed internal classes into public API
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d80 11
a90 27
            try {
                IStatus status = cmd.execute(progressMonitor, null);
                setStatus(status);

    			if (status.isOK()) {
    				if (request instanceof DuplicateRequest) {
    					selectViews(((DuplicateRequest) request)
    						.getDuplicatedViews());
    				} else {
    					// This should select the new elements in ME. Once
    					// RATLC00533879 is fixed, this can be implemented.
    				}
    			}
            } catch (ExecutionException e) {
                IStatus status = new Status(Status.ERROR, DiagramUIPlugin
                    .getPluginId(), DiagramUIStatusCodes.COMMAND_FAILURE, e
                    .getLocalizedMessage(), e);
                setStatus(status);

                Trace.catching(DiagramUIPlugin.getInstance(),
                    DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                    "doRun", e); //$NON-NLS-1$

                Log.error(DiagramUIPlugin.getInstance(),
                    DiagramUIStatusCodes.COMMAND_FAILURE, e
                        .getLocalizedMessage(), e);
            }
@


1.6.2.1
log
@[155418] gmf_R1_0_maintenance ldamus 060901 Read-only files are modifed because validate edit is not being called
@
text
@d80 27
a106 11
            IStatus status = execute(cmd, progressMonitor, null);

			if (status.isOK()) {
				if (request instanceof DuplicateRequest) {
					selectViews(((DuplicateRequest) request)
						.getDuplicatedViews());
				} else {
					// This should select the new elements in ME. Once
					// RATLC00533879 is fixed, this can be implemented.
				}
			}
@


1.6.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.6.2.3
log
@[167300]   gmf_R1_0_maintenace mmostafa 061208 DuplicateActionDelegate should implement the IHandler interface
@
text
@a18 1
import org.eclipse.core.commands.ExecutionEvent;
a19 2
import org.eclipse.core.commands.IHandler;
import org.eclipse.core.commands.IHandlerListener;
d23 1
d29 2
d33 3
d59 2
a60 2
	implements IObjectActionDelegate, IWorkbenchWindowActionDelegate, IHandler{
    
a232 22
    public void addHandlerListener(IHandlerListener handlerListener) {
        // nothing
    }

    public Object execute(ExecutionEvent event)
        throws ExecutionException {
        return null;
    }

    public boolean isEnabled() {
        return true;
    }

    public boolean isHandled() {
        return true;
    }

    public void removeHandlerListener(IHandlerListener handlerListener) {
        // nothing
        
    }

@


1.5
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@a35 1
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.DuplicateRequest;
d38 1
@


1.4
log
@bugzilla 109923 gmf-head mmostafa 060201 Class names contain 'xtools'
@
text
@d19 1
d22 2
d25 2
a27 7
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IObjectActionDelegate;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;

import org.eclipse.gmf.runtime.common.core.command.CommandResult;
d29 2
a30 2
import org.eclipse.gmf.runtime.diagram.core.internal.services.semantic.DuplicateElementsRequest;
import org.eclipse.gmf.runtime.diagram.core.internal.services.semantic.SemanticService;
d33 3
d39 3
d44 5
d75 1
a75 1
			request = new DuplicateElementsRequest();
d79 28
a106 14
		if (cmd != null && cmd.isExecutable())
			;
		{
			CommandResult result = getCommandManager().execute(cmd);

			if (result.getStatus().isOK()) {
				if (request instanceof DuplicateRequest) {
					selectViews(((DuplicateRequest) request)
						.getDuplicatedViews());
				} else {
					// This should select the new elements in ME. Once
					// RATLC00533879 is fixed, this can be implemented.
				}
			}
d111 7
a117 7
	 * Determines if the selection can be duplicated by trying to get a command
	 * to do so.
	 * 
	 * @@param selection
	 * @@param workbenchPart
	 * @@return true if the selection can be duplicated; false otherwise.
	 */
d124 1
a124 1
				new DuplicateElementsRequest());
d126 1
a126 1
		return (cmd != null && cmd.isExecutable());
d153 7
a159 1
			return SemanticService.getInstance().getCommand(request);
d224 24
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d33 1
a33 1
import org.eclipse.gmf.runtime.diagram.ui.commands.XtoolsProxyCommand;
d165 1
a165 1
				return new XtoolsProxyCommand(cmd);
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d37 1
a37 1
import com.ibm.xtools.notation.View;
@

