head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080917-1925:1.3
	v20080916-2008:1.3
	v20080722-1827:1.3
	v20080718-1700:1.3
	v20080718-1731:1.3
	R2_1_maintenance:1.3.0.8
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080603-1553:1.3
	v20080503-1740:1.3
	v20080425-1959:1.3
	v20080409-1326:1.3
	v20080407-2250:1.3
	v20080328-1605:1.3
	v20080222-1200:1.3
	v20080201-2010:1.3
	v20080118-1129:1.3
	v20080114-2222:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071108-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.6
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070608-1300:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	bugzilla111892_group_support:1.3.0.4
	Root_bugzilla111892_group_support:1.3
	v20070427-0600:1.3
	v20070405-2000:1.3
	v20070330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070119-1200:1.3
	M4_20:1.3
	v20061218-1500:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061027-1200:1.3
	v20061013-1330:1.3
	v20061012-1100:1.3
	v20060919-0800:1.3
	v20060907-1100:1.3
	M1_20:1.3
	v20060803-1200:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060202-1415:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.04.06.20.30.59;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.13.19.10.30;	author ldamus;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.23.29.17;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[135386] gmf_head ldamus 060406 Runtime plugin dependencies must specify required plugin versions
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.actions;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.DiagramActionsDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.DiagramActionsPlugin;
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.DiagramActionsStatusCodes;
import org.eclipse.gmf.runtime.emf.ui.action.AbstractModelActionDelegate;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;

/**
 * Abstract action delegate for diagram actions that work with selected
 * <code>EObject</code> in a model.
 * 
 * @@author ldamus
 */
public abstract class AbstractDiagramModelActionDelegate
	extends AbstractModelActionDelegate {

	/**
	 * Returns the elements in the given selection.
	 * 
	 * @@return a list of <code>EObject</code>
	 */
	protected List getElements(final ISelection selection) {
        final List result = new ArrayList();

        if (selection instanceof IStructuredSelection) {
            try {

                getEditingDomain().runExclusive(new Runnable() {

                    public void run() {
                        if (selection instanceof IStructuredSelection) {
                            IStructuredSelection structuredSelection = (IStructuredSelection) selection;

                            for (Iterator i = structuredSelection.iterator(); i
                                .hasNext();) {
                                Object next = i.next();

                                View view = (View) ((IAdaptable) next)
                                    .getAdapter(View.class);
                                if (view != null) {
                                    EObject eObject = ViewUtil
                                        .resolveSemanticElement(view);
                                    if (eObject != null) {
                                        result.add(eObject);
                                    } else {
                                        result.add(view);
                                    }
                                }
                            }
                        }
                    }
                });
            } catch (InterruptedException e) {
                Trace.catching(DiagramActionsPlugin.getInstance(),
                    DiagramActionsDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                    "getElements", e); //$NON-NLS-1$

                Log.error(DiagramActionsPlugin.getInstance(),
                    DiagramActionsStatusCodes.IGNORED_EXCEPTION_WARNING, e
                        .getLocalizedMessage(), e);
            }
        }
        return result;
    }

}
@


1.2
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d23 3
a26 3
import org.eclipse.gmf.runtime.emf.ui.internal.MslUIDebugOptions;
import org.eclipse.gmf.runtime.emf.ui.internal.MslUIPlugin;
import org.eclipse.gmf.runtime.emf.ui.internal.MslUIStatusCodes;
d77 2
a78 2
                Trace.catching(MslUIPlugin.getDefault(),
                    MslUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
d81 2
a82 2
                Log.error(MslUIPlugin.getDefault(),
                    MslUIStatusCodes.IGNORED_EXCEPTION_WARNING, e
@


1.1
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
a14 1
import java.util.Collections;
d20 2
a21 1
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
a22 1
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
d24 3
d46 42
a87 33
		if (selection instanceof IStructuredSelection) {
			return (List) MEditingDomainGetter.getMEditingDomain(
				((IStructuredSelection) selection).toList()).runAsRead(
				new MRunnable() {

					public Object run() {
						List retval = new ArrayList();
						if (selection instanceof IStructuredSelection) {
							IStructuredSelection structuredSelection = (IStructuredSelection) selection;

							for (Iterator i = structuredSelection.iterator(); i
								.hasNext();) {
								Object next = i.next();

								View view = (View) ((IAdaptable) next)
									.getAdapter(View.class);
								if (view != null) {
									EObject eObject = ViewUtil
										.resolveSemanticElement(view);
									if (eObject != null) {
										retval.add(eObject);
									} else {
										retval.add(view);
									}
								}
							}
						}
						return retval;
					}
				});
		}
		return Collections.EMPTY_LIST;
	}
@

