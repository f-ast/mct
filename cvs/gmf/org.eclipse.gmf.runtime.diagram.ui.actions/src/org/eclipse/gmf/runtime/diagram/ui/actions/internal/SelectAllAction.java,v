head	1.11;
access;
symbols
	v20081020-0700:1.11
	v20080917-1925:1.11
	v20080916-2008:1.11
	v20080722-1827:1.11
	v20080718-1700:1.11
	v20080718-1731:1.11
	R2_1_maintenance:1.11.0.2
	Root_R2_1_maintenance:1.11
	R2_1_0:1.11
	v20080603-1553:1.11
	v20080503-1740:1.11
	v20080425-1959:1.11
	v20080409-1326:1.11
	v20080407-2250:1.11
	v20080328-1605:1.11
	v20080222-1200:1.11
	v20080201-2010:1.11
	v20080118-1129:1.10
	v20080114-2222:1.10
	v20071130-1111:1.11
	v20071124-0000:1.10
	v20071108-0000:1.10
	v20070903-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.4
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070608-1300:1.10
	v20070601-1400:1.10
	v20070518-1300:1.10
	bugzilla111892_group_support:1.10.0.2
	Root_bugzilla111892_group_support:1.10
	v20070427-0600:1.10
	v20070405-2000:1.10
	v20070330-1300:1.10
	v20070322-1100:1.10
	v20060316-0600:1.10
	v20070221-1500:1.10
	v20070208-1800:1.10
	v20070119-1200:1.8.2.3
	M4_20:1.10
	v20061218-1500:1.8.2.3
	v20061214-0000:1.10
	M3_20:1.9
	v20061117-0800:1.9
	v20061027-1200:1.8.2.2
	v20061013-1330:1.9
	v20061012-1100:1.8.2.2
	v20060919-0800:1.8.2.2
	v20060907-1100:1.8
	M1_20:1.8
	v20060803-1200:1.8
	v20060721-1130:1.8
	v20060713-1700:1.8
	R1_0_maintenance:1.8.0.2
	R1_0:1.8
	v20060627-1200:1.8
	v20060616-1200:1.8
	v20060531-1730:1.8
	v20060519-0800:1.8
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.8
	I20060216-1945:1.8
	I20060210-1715:1.8
	I20060209-1815:1.8
	I20060203-0830:1.8
	I20060202-1415:1.8
	I20060129-1145:1.8
	I20060127-0900:1.8
	I20060120-1530:1.8
	I20060113-1700:1.8
	M4_10:1.8
	I20060107-1100:1.8
	I20060105-1630:1.8
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051201-1800:1.7
	I20051124-2000:1.6
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.11
date	2007.11.21.17.57.22;	author crevells;	state Exp;
branches;
next	1.10;
commitid	49a2474471824567;

1.10
date	2006.11.22.22.42.15;	author crevells;	state Exp;
branches
	1.10.2.1;
next	1.9;
commitid	3184564d2474567;

1.9
date	2006.10.03.15.01.48;	author ahunter;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.04.19.15.33;	author cmahoney;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2005.11.25.19.38.22;	author cmahoney;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.23.15.48.49;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.21.16.01.27;	author cmahoney;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.16.22.40.46;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.02.23.29.16;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.28.13;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.43;	author sshaw;	state Exp;
branches;
next	;

1.8.2.1
date	2006.09.12.20.28.21;	author cmahoney;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2006.09.13.16.43.26;	author ahunter;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2006.11.22.22.38.59;	author crevells;	state Exp;
branches;
next	;
commitid	705f4564d1834567;

1.10.2.1
date	2007.05.18.17.36.38;	author crevells;	state Exp;
branches;
next	;
commitid	1849464de4254567;


desc
@@


1.11
log
@[111892] gmf_head crevells 071121 Group/Ungroup support
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.gef.ConnectionEditPart;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.Request;
import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;
import org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction;
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramUIActionsMessages;
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramUIActionsPluginImages;
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ISurfaceEditPart;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.actions.ActionFactory;

/**
 * 
 * @@author melaasar
 * @@canBeSeenBy %level1
 * 
 */
public class SelectAllAction extends DiagramAction {
	/** whether to select shapes */
	private boolean selectShapes;
	/** whether to select connections */
	private boolean selectConnections;

	/**
	 * @@param partService
	 * @@param selectShapes
	 * @@param selectConnections
	 */
	private SelectAllAction(
		IWorkbenchPage partService,
		boolean selectShapes,
		boolean selectConnections) {
		super(partService);
		this.selectShapes = selectShapes;
		this.selectConnections = selectConnections;
	}

	protected Request createTargetRequest() {
		return null;
	}

	/**
	 * The operation set is the shapes, connections or both on the diagrm edit part
	 */
	protected List createOperationSet() {
		List selection = getSelectedObjects();
		if (selection.isEmpty() || !(selection.get(0) instanceof IGraphicalEditPart))
			return Collections.EMPTY_LIST;

		List selectables = new ArrayList();

		EditPart primaryEP = (EditPart) selection.get(selection.size() - 1);
		List nodeEditParts = new ArrayList();
		nodeEditParts.addAll(getSelectableNodes(primaryEP));

		if (selectShapes)
			selectables.addAll(nodeEditParts);
		if (selectConnections)
			selectables.addAll(addSelectableConnections(nodeEditParts));
		return filterEditPartsMatching(selectables, getSelectionConditional());
	}

	/**
	 * Determines the candidate list of node editparts for selection
	 * 
	 * @@param editpart
	 * @@return
	 */
	protected List getSelectableNodes(EditPart editpart) {
		if (editpart == null) {
			return Collections.EMPTY_LIST;
		}
			
		List retval = new ArrayList();
		getSelectableNodesInside(editpart, true, retval);
		return retval;
	}
			
	/**
	 * Determines the candidate list of node editparts for selection
	 * 
	 * @@param editpart
	 * @@param topLevel <code>boolean</code> is this the initial entry point into the recursive method.
	 * @@param retval <code>List</code> to modify
	 */
	private void getSelectableNodesInside(EditPart editpart, boolean topLevel, List retval) {

		if ( editpart instanceof ISurfaceEditPart) {
			getSelectableChildrenNodes(editpart, retval);
			}
		else if (editpart instanceof IPrimaryEditPart) {
			if (topLevel) {
		if (editpart instanceof ConnectionEditPart) {
			ConnectionEditPart connection = (ConnectionEditPart) editpart;
			EditPart source = connection.getSource();
			EditPart target = connection.getTarget();
			if (source != null && target != null) {
						getSelectableNodesInside(source, true, retval);
				if (target.getParent() != source.getParent())
							getSelectableNodesInside(target, true, retval);
			}
		}
				else
					getSelectableNodesInside(editpart.getParent(), true, retval);
			}
			else {
				if (editpart.isSelectable())
					retval.add(editpart);

                // Do not dig into groups -- just select the group, but not the
                // shapes inside.
                if (!(editpart instanceof GroupEditPart)) {
                    getSelectableChildrenNodes(editpart, retval);
                }
			}
		}
	}

	private void getSelectableChildrenNodes(EditPart editpart, List retval) {
		Iterator iter = editpart.getChildren().iterator();
		while( iter.hasNext() ) {
			EditPart child = (EditPart)iter.next();
			getSelectableNodesInside(child, false, retval);
	}
	}

	/**
	 * This method searches an edit part for a child that is a border item edit part
	 * @@param parent part needed to search
	 * @@param set to be modified of border item edit parts that are direct children of the parent
	 */
	private void getBorderItemEditParts(EditPart parent, Set retval) {
		
		Iterator iter = parent.getChildren().iterator();
		while(iter.hasNext()) {
			EditPart child = (EditPart)iter.next();
			if( child instanceof IBorderItemEditPart ) {
				retval.add(child);
				retval.addAll(child.getChildren());
			}
			getBorderItemEditParts(child, retval);
		}
	}
	
	/**
	 * Determines the candidate list of connection edit for selection
	 * A connection is included if atleast the source or the target is
	 * included in the given list
	 * 
	 * @@param editparts
	 */
	protected List addSelectableConnections(List editparts) {
		List selectableConnections = new ArrayList();

		DiagramEditPart diagramEditPart = getDiagramEditPart();
		Set connnectableEditParts = new HashSet(editparts);
		ListIterator li = editparts.listIterator();
		while (li.hasNext()) {
            EditPart ep = (EditPart)li.next();
			getBorderItemEditParts(ep, connnectableEditParts);
            if (ep instanceof GroupEditPart) {
                connnectableEditParts.addAll(((GroupEditPart)ep).getShapeChildren());
            }
		}
		
		if (diagramEditPart != null) {
			Iterator connections = diagramEditPart.getConnections().iterator();
			while (connections.hasNext()) {
				ConnectionEditPart connection =
					(ConnectionEditPart) connections.next();
				if (canSelectConnection(connection, connnectableEditParts))
					selectableConnections.add(connection);
			}
		}
		return selectableConnections;
	}
    
    /**
     * Determines whether the given connection can be selected.  First checks
     * whether the source or target of the connection is in the given
     * connetableEditPart list. If it isn't it checks recursively whether the source
     * or target of the connection is another connection and if that connection's
     * source or target is in the given connectableEditPart list.  This is in 
     * response to Bugzilla #162083.
     * 
     * @@param connection connection to check
     * @@param connectableEditParts 
     */
    private boolean canSelectConnection(ConnectionEditPart connection, Set connectableEditParts)
    {
        EditPart connectionSource = connection.getSource();
        EditPart connectionTarget = connection.getTarget();
        boolean sourceHasSelectable = false;
        boolean targetHasSelectable = false;
        
        if (connectableEditParts.contains(connectionSource)
                    || connectableEditParts.contains(connectionTarget))
            return true;
        
        if (connectionSource instanceof ConnectionEditPart)
            sourceHasSelectable = canSelectConnection((ConnectionEditPart)connectionSource, connectableEditParts);
              
        if (!sourceHasSelectable && connectionTarget instanceof ConnectionEditPart)
            targetHasSelectable = canSelectConnection((ConnectionEditPart)connectionTarget, connectableEditParts);
        
        return sourceHasSelectable || targetHasSelectable;
    }
    
	/**
	 * @@return The Selection Conditional which tests if the editpart is selectable
	 */
	protected EditPartViewer.Conditional getSelectionConditional() {
		return new EditPartViewer.Conditional() {
			public boolean evaluate(EditPart editpart) {
				return editpart.isSelectable();
			}
		};
	}

	/**
	 * Returns true if the operation set is not empty and only if the diagram is selected. 
	 */
	protected boolean calculateEnabled() {
		return !getOperationSet().isEmpty();
	}

	protected void doRun(IProgressMonitor progressMonitor) {
		getDiagramGraphicalViewer().setSelection(
			new StructuredSelection(getOperationSet()));
	}

	protected boolean isSelectionListener() {
		return true;
	}

    protected boolean isOperationHistoryListener() {
        //certain undo/redo actions can cause selection to change. see bugzilla#156261
        return true;
    }

	/**
	 * Create the SelectAll action
	 * 
	 * @@return The SelectAll action
	 */
	public static SelectAllAction createSelectAllAction(IWorkbenchPage partService) {
		SelectAllAction action = new SelectAllAction(partService, true, true);
		action.setId(ActionFactory.SELECT_ALL.getId());
		action.setText(DiagramUIActionsMessages.SelectAllAction_SelectAll);
		action.setToolTipText(DiagramUIActionsMessages.SelectAllAction_SelectAll);
		action.setImageDescriptor(DiagramUIActionsPluginImages.DESC_SELECTALL);
		action.setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_SELECTALL_DISABLED);
		return action;
	}
	
	/**
	 * Create the SelectAll toolbar action
	 * 
	 * @@return The SelectAll toobar action
	 */
	public static SelectAllAction createToolbarSelectAllAction(IWorkbenchPage partService) {
		SelectAllAction action = new SelectAllAction(partService, true, true);
		action.setId(ActionIds.ACTION_TOOLBAR_SELECT_ALL);
		action.setText(DiagramUIActionsMessages.SelectAllAction_toolbar_SelectAll);
		action.setToolTipText(DiagramUIActionsMessages.SelectAllAction_toolbar_SelectAll);
		action.setImageDescriptor(DiagramUIActionsPluginImages.DESC_SELECTALL);
		action.setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_SELECTALL_DISABLED);
		return action;
	}

	/**
	 * Create the SelectAllShapes action
	 * 
	 * @@return The SelectAllShapes action
	 */
	public static SelectAllAction createSelectAllShapesAction(IWorkbenchPage partService) {
		SelectAllAction action = new SelectAllAction(partService, true, false);
		action.setId(ActionIds.ACTION_SELECT_ALL_SHAPES);
		action.setText(DiagramUIActionsMessages.SelectAllAction_SelectShapes);
		action.setToolTipText(DiagramUIActionsMessages.SelectAllAction_SelectShapes);
		action.setImageDescriptor(DiagramUIActionsPluginImages.DESC_SELECTSHAPES);
		action.setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_SELECTSHAPES_DISABLED);
		return action;
	}
	
	/**
	 * Create the SelectAllShapes toolbar action
	 * 
	 * @@return The SelectAllShapes toolbar action
	 */
	public static SelectAllAction createToolbarSelectAllShapesAction(IWorkbenchPage partService) {
		SelectAllAction action = new SelectAllAction(partService, true, false);
		action.setId(ActionIds.ACTION_TOOLBAR_SELECT_ALL_SHAPES);
		action.setText(DiagramUIActionsMessages.SelectAllAction_toolbar_SelectShapes);
		action.setToolTipText(DiagramUIActionsMessages.SelectAllAction_toolbar_SelectShapes);
		action.setImageDescriptor(DiagramUIActionsPluginImages.DESC_SELECTSHAPES);
		action.setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_SELECTSHAPES_DISABLED);
		return action;
	}

	/**
	 * Create the SelectAllConnections action
	 * 
	 * @@return The SelectAllConnections action
	 */
	public static SelectAllAction createSelectAllConnectionsAction(IWorkbenchPage partService) {
		SelectAllAction action = new SelectAllAction(partService, false, true);
		action.setId(ActionIds.ACTION_SELECT_ALL_CONNECTIONS);
		action.setText(DiagramUIActionsMessages.SelectAllAction_SelectConnections);
		action.setToolTipText(DiagramUIActionsMessages.SelectAllAction_SelectConnections);
		action.setImageDescriptor(DiagramUIActionsPluginImages.DESC_SELECTCONNECTIONS);
		action.setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_SELECTCONNECTIONS_DISABLED);
		return action;
	}
	
	/**
	 * Create the SelectAllConnections toolbar action
	 * 
	 * @@return The SelectAllConnections toolbar action
	 */
	public static SelectAllAction createToolbarSelectAllConnectionsAction(IWorkbenchPage partService) {
		SelectAllAction action = new SelectAllAction(partService, false, true);
		action.setId(ActionIds.ACTION_TOOLBAR_SELECT_ALL_CONNECTIONS);
		action.setText(DiagramUIActionsMessages.SelectAllAction_toolbar_SelectConnections);
		action.setToolTipText(DiagramUIActionsMessages.SelectAllAction_toolbar_SelectConnections);
		action.setImageDescriptor(DiagramUIActionsPluginImages.DESC_SELECTCONNECTIONS);
		action.setDisabledImageDescriptor(DiagramUIActionsPluginImages.DESC_SELECTCONNECTIONS_DISABLED);
		return action;
	}
}
@


1.10
log
@[162083] gmf_head gmf_head crevells 061122 Select all ignores connections between connections
Contributed by: David Cummings
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d31 1
d138 6
a143 1
				getSelectableChildrenNodes(editpart, retval);
d188 5
a192 1
			getBorderItemEditParts((EditPart)li.next(), connnectableEditParts);
@


1.10.2.1
log
@[111892] gmf_head crevells 070518 First milestone of group/ungroup support (painting issues when grouping shapes with border items)
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
a30 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
d137 1
a137 6

                // Do not dig into groups -- just select the group, but not the
                // shapes inside.
                if (!(editpart instanceof GroupEditPart)) {
                    getSelectableChildrenNodes(editpart, retval);
                }
d182 1
a182 5
            EditPart ep = (EditPart)li.next();
			getBorderItemEditParts(ep, connnectableEditParts);
            if (ep instanceof GroupEditPart) {
                connnectableEditParts.addAll(((GroupEditPart)ep).getFlattenedChildren());
            }
@


1.9
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d177 1
d190 1
a190 2
				if (connnectableEditParts.contains(connection.getSource())
					|| connnectableEditParts.contains(connection.getTarget()))
d196 32
a227 1

@


1.8
log
@Bugzilla#111935 gmf_head cmahoney 060104 Border Item Infrastructure Consistency Issues
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
d224 5
a317 1

@


1.8.2.1
log
@Bugzilla#156261 gmf_R1_0_maintenance cmahoney 060912 Can not select All items in the Model View
Contributed by: Syed Atif Ali
@
text
@a223 5
    protected boolean isOperationHistoryListener() {
        //certain undo/redo actions can cause selection to change. see bugzilla#156261
        return true;
    }

d313 1
@


1.8.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.8.2.3
log
@[162083] gmf_head gmf_R1_0_maintenance crevells 061122 Select all ignores connections between connections
Contributed by: David Cummings
@
text
@a176 1

d189 2
a190 1
				if (canSelectConnection(connection, connnectableEditParts))
d196 1
a196 32
    
    /**
     * Determines whether the given connection can be selected.  First checks
     * whether the source or target of the connection is in the given
     * connetableEditPart list. If it isn't it checks recursively whether the source
     * or target of the connection is another connection and if that connection's
     * source or target is in the given connectableEditPart list.  This is in 
     * response to Bugzilla #162083.
     * 
     * @@param connection connection to check
     * @@param connectableEditParts 
     */
    private boolean canSelectConnection(ConnectionEditPart connection, Set connectableEditParts)
    {
        EditPart connectionSource = connection.getSource();
        EditPart connectionTarget = connection.getTarget();
        boolean sourceHasSelectable = false;
        boolean targetHasSelectable = false;
        
        if (connectableEditParts.contains(connectionSource)
                    || connectableEditParts.contains(connectionTarget))
            return true;
        
        if (connectionSource instanceof ConnectionEditPart)
            sourceHasSelectable = canSelectConnection((ConnectionEditPart)connectionSource, connectableEditParts);
              
        if (!sourceHasSelectable && connectionTarget instanceof ConnectionEditPart)
            targetHasSelectable = canSelectConnection((ConnectionEditPart)connectionTarget, connectableEditParts);
        
        return sourceHasSelectable || targetHasSelectable;
    }
    
@


1.7
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d31 1
a31 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.BorderItemEditPart;
d160 1
a160 1
			if( child instanceof BorderItemEditPart ) {
@


1.6
log
@bugzilla 116039 gmf-head sshaw 051122 SelectAllActtion does not drill down into shapecompartments
@
text
@d29 2
a30 1
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.DiagramActionsResourceManager;
d101 1
a101 1
		
d106 1
a106 1
	
d115 1
a115 1
		
d118 1
a118 1
		}
d121 5
a125 5
				if (editpart instanceof ConnectionEditPart) {
					ConnectionEditPart connection = (ConnectionEditPart) editpart;
					EditPart source = connection.getSource();
					EditPart target = connection.getTarget();
					if (source != null && target != null) {
d127 1
a127 1
						if (target.getParent() != source.getParent())
d129 2
a130 2
					}
				}
d147 1
a147 1
		}
d232 4
a235 4
		action.setText(DiagramActionsResourceManager.getI18NString("SelectAllAction.SelectAll")); //$NON-NLS-1$
		action.setToolTipText(DiagramActionsResourceManager.getI18NString("SelectAllAction.SelectAll")); //$NON-NLS-1$
		action.setImageDescriptor(DiagramActionsResourceManager.getInstance().getImageDescriptor(DiagramActionsResourceManager.IMAGE_SELECTALL));
		action.setDisabledImageDescriptor(DiagramActionsResourceManager.getInstance().getImageDescriptor(DiagramActionsResourceManager.IMAGE_SELECTALL_DISABLED));
d247 4
a250 4
		action.setText(DiagramActionsResourceManager.getI18NString("SelectAllAction.toolbar.SelectAll")); //$NON-NLS-1$
		action.setToolTipText(DiagramActionsResourceManager.getI18NString("SelectAllAction.toolbar.SelectAll")); //$NON-NLS-1$
		action.setImageDescriptor(DiagramActionsResourceManager.getInstance().getImageDescriptor(DiagramActionsResourceManager.IMAGE_SELECTALL));
		action.setDisabledImageDescriptor(DiagramActionsResourceManager.getInstance().getImageDescriptor(DiagramActionsResourceManager.IMAGE_SELECTALL_DISABLED));
d262 4
a265 4
		action.setText(DiagramActionsResourceManager.getI18NString("SelectAllAction.SelectShapes")); //$NON-NLS-1$
		action.setToolTipText(DiagramActionsResourceManager.getI18NString("SelectAllAction.SelectShapes")); //$NON-NLS-1$
		action.setImageDescriptor(DiagramActionsResourceManager.getInstance().getImageDescriptor(DiagramActionsResourceManager.IMAGE_SELECTSHAPES));
		action.setDisabledImageDescriptor(DiagramActionsResourceManager.getInstance().getImageDescriptor(DiagramActionsResourceManager.IMAGE_SELECTSHAPES_DISABLED));
d277 4
a280 4
		action.setText(DiagramActionsResourceManager.getI18NString("SelectAllAction.toolbar.SelectShapes")); //$NON-NLS-1$
		action.setToolTipText(DiagramActionsResourceManager.getI18NString("SelectAllAction.toolbar.SelectShapes")); //$NON-NLS-1$
		action.setImageDescriptor(DiagramActionsResourceManager.getInstance().getImageDescriptor(DiagramActionsResourceManager.IMAGE_SELECTSHAPES));
		action.setDisabledImageDescriptor(DiagramActionsResourceManager.getInstance().getImageDescriptor(DiagramActionsResourceManager.IMAGE_SELECTSHAPES_DISABLED));
d292 4
a295 4
		action.setText(DiagramActionsResourceManager.getI18NString("SelectAllAction.SelectConnections")); //$NON-NLS-1$
		action.setToolTipText(DiagramActionsResourceManager.getI18NString("SelectAllAction.SelectConnections")); //$NON-NLS-1$
		action.setImageDescriptor(DiagramActionsResourceManager.getInstance().getImageDescriptor(DiagramActionsResourceManager.IMAGE_SELECTCONNECTIONS));
		action.setDisabledImageDescriptor(DiagramActionsResourceManager.getInstance().getImageDescriptor(DiagramActionsResourceManager.IMAGE_SELECTCONNECTIONS_DISABLED));
d307 4
a310 4
		action.setText(DiagramActionsResourceManager.getI18NString("SelectAllAction.toolbar.SelectConnections")); //$NON-NLS-1$
		action.setToolTipText(DiagramActionsResourceManager.getI18NString("SelectAllAction.toolbar.SelectConnections")); //$NON-NLS-1$
		action.setImageDescriptor(DiagramActionsResourceManager.getInstance().getImageDescriptor(DiagramActionsResourceManager.IMAGE_SELECTCONNECTIONS));
		action.setDisabledImageDescriptor(DiagramActionsResourceManager.getInstance().getImageDescriptor(DiagramActionsResourceManager.IMAGE_SELECTCONNECTIONS_DISABLED));
@


1.5
log
@Bugzilla#116030 gmf_head cmahoney 051121 Diagram ActionIds should be public
@
text
@a17 1
import java.util.LinkedList;
d33 2
a34 2
import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart;
d91 4
a94 3
	 * This method searches an edit part for a child that is a border item edit part
	 * @@param parent part needed to search
	 * @@return list of border item edit parts that are direct children of the parent
d96 3
a98 12
	private List getBorderItemEditParts(EditPart parent) {
		List list = new LinkedList();
		
		
		Iterator iter = parent.getChildren().iterator();
		while(iter.hasNext()) {
			EditPart child = (EditPart)iter.next();
			if( child instanceof BorderItemEditPart ) {
				list.add(child);
				list.addAll(child.getChildren());
			}
			list.addAll( getBorderItemEditParts(child) );
d101 3
a103 4
		if( list.isEmpty() )
			return Collections.EMPTY_LIST;
		
		return list;
d105 1
a105 1

d110 2
a111 1
	 * @@return
d113 4
a116 3
	protected List getSelectableNodes(EditPart editpart) {
		if (editpart == null) {
			return Collections.EMPTY_LIST;
d118 19
a136 13
			
		if (editpart instanceof DiagramEditPart
			|| editpart instanceof ShapeCompartmentEditPart
			|| editpart instanceof ListCompartmentEditPart) {
			
			List list = new LinkedList();

			Iterator iter = editpart.getChildren().iterator();
			while( iter.hasNext() ) {
				EditPart child = (EditPart)iter.next();
				list.add( child );
				if (!(editpart instanceof DiagramEditPart))
					list.addAll( getBorderItemEditParts( child ) );
d138 2
d141 5
a145 1
			return list;
d147 8
d156 6
a161 10
		if (editpart instanceof ConnectionEditPart) {
			ConnectionEditPart connection = (ConnectionEditPart) editpart;
			EditPart source = connection.getSource();
			EditPart target = connection.getTarget();
			if (source != null && target != null) {
				List list = new ArrayList();
				list.addAll(getSelectableNodes(source));
				if (target.getParent() != source.getParent())
					list.addAll(getSelectableNodes(target));
				return list;
d163 1
a164 2

		return getSelectableNodes(editpart.getParent());
d166 1
a166 1

d180 1
a180 1
			connnectableEditParts.addAll(getBorderItemEditParts((EditPart)li.next()));
@


1.4
log
@bugzilla 112976 gmf-head sshaw 051116 Select All Does Not Select Connectors in the Logic Diagram Example
@
text
@d28 1
a35 1
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;
@


1.3
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d16 1
d20 2
d30 1
a31 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.BorderItemEditPart;
d92 1
a92 1
	 * This method searches an edit part for a child that is a gate edit part
d94 1
a94 1
	 * @@return list of gated edit parts that are direct children of the parent
d96 1
a96 1
	private List getGateEditParts(EditPart parent) {
d107 1
a107 1
			list.addAll( getGateEditParts(child) );
d138 1
a138 1
					list.addAll( getGateEditParts( child ) );
d170 6
d181 2
a182 2
				if (editparts.contains(connection.getSource())
					|| editparts.contains(connection.getTarget()))
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d25 2
a26 7
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.actions.ActionFactory;

import org.eclipse.gmf.runtime.diagram.ui.actions.PresentationAction;
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.Images;
import org.eclipse.gmf.runtime.diagram.ui.actions.internal.l10n.Messages;
d28 1
a28 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GateEditPart;
d33 3
d43 1
a43 1
public class SelectAllAction extends PresentationAction {
d46 2
a47 2
	/** whether to select connectors */
	private boolean selectConnectors;
d52 1
a52 1
	 * @@param selectConnectors
d57 1
a57 1
		boolean selectConnectors) {
d60 1
a60 1
		this.selectConnectors = selectConnectors;
a62 3
	/**
	 * @@see com.ibm.xtools.presentation.internal.ui.actions.PresentationAction#createTargetRequest()
	 */
d68 1
a68 3
	 * The operation set is the shapes, connectors or both on the diagrm edit part
	 * 
	 * @@see com.ibm.xtools.presentation.internal.ui.actions.PresentationAction#createOperationSet()
d83 2
a84 2
		if (selectConnectors)
			selectables.addAll(addSelectableConnectors(nodeEditParts));
d100 1
a100 1
			if( child instanceof GateEditPart ) {
d158 2
a159 2
	 * Determines the candidate list of connector edit for selection
	 * A connector is included if atleast the source or the target is
d164 2
a165 2
	protected List addSelectableConnectors(List editparts) {
		List selectableConnectors = new ArrayList();
d168 2
a169 2
			Iterator connectors = diagramEditPart.getConnectors().iterator();
			while (connectors.hasNext()) {
d171 1
a171 1
					(ConnectionEditPart) connectors.next();
d174 1
a174 1
					selectableConnectors.add(connection);
d177 1
a177 1
		return selectableConnectors;
a192 1
	 * @@see com.ibm.xtools.presentation.internal.ui.actions.PresentationAction#calculateEnabled()
a197 3
	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractActionHandler#doRun(org.eclipse.core.runtime.IProgressMonitor)
	 */
a202 3
	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractActionHandler#isSelectionListener()
	 */
d215 4
a218 4
		action.setText(Messages.getString("SelectAllAction.SelectAll")); //$NON-NLS-1$
		action.setToolTipText(Messages.getString("SelectAllAction.SelectAll")); //$NON-NLS-1$
		action.setImageDescriptor(Images.DESC_ACTION_SELECTALL);
		action.setDisabledImageDescriptor(Images.DESC_ACTION_SELECTALL_DISABLED);
d230 4
a233 4
		action.setText(Messages.getString("SelectAllAction.toolbar.SelectAll")); //$NON-NLS-1$
		action.setToolTipText(Messages.getString("SelectAllAction.toolbar.SelectAll")); //$NON-NLS-1$
		action.setImageDescriptor(Images.DESC_ACTION_SELECTALL);
		action.setDisabledImageDescriptor(Images.DESC_ACTION_SELECTALL_DISABLED);
d245 4
a248 4
		action.setText(Messages.getString("SelectAllAction.SelectShapes")); //$NON-NLS-1$
		action.setToolTipText(Messages.getString("SelectAllAction.SelectShapes")); //$NON-NLS-1$
		action.setImageDescriptor(Images.DESC_ACTION_SELECTSHAPES);
		action.setDisabledImageDescriptor(Images.DESC_ACTION_SELECTSHAPES_DISABLED);
d260 4
a263 4
		action.setText(Messages.getString("SelectAllAction.toolbar.SelectShapes")); //$NON-NLS-1$
		action.setToolTipText(Messages.getString("SelectAllAction.toolbar.SelectShapes")); //$NON-NLS-1$
		action.setImageDescriptor(Images.DESC_ACTION_SELECTSHAPES);
		action.setDisabledImageDescriptor(Images.DESC_ACTION_SELECTSHAPES_DISABLED);
d268 1
a268 1
	 * Create the SelectAllConnectors action
d270 1
a270 1
	 * @@return The SelectAllConnectors action
d272 1
a272 1
	public static SelectAllAction createSelectAllConnectorsAction(IWorkbenchPage partService) {
d274 5
a278 5
		action.setId(ActionIds.ACTION_SELECT_ALL_CONNECTORS);
		action.setText(Messages.getString("SelectAllAction.SelectConnectors")); //$NON-NLS-1$
		action.setToolTipText(Messages.getString("SelectAllAction.SelectConnectors")); //$NON-NLS-1$
		action.setImageDescriptor(Images.DESC_ACTION_SELECTCONNECTORS);
		action.setDisabledImageDescriptor(Images.DESC_ACTION_SELECTCONNECTORS_DISABLED);
d283 1
a283 1
	 * Create the SelectAllConnectors toolbar action
d285 1
a285 1
	 * @@return The SelectAllConnectors toolbar action
d287 1
a287 1
	public static SelectAllAction createToolbarSelectAllConnectorsAction(IWorkbenchPage partService) {
d289 5
a293 5
		action.setId(ActionIds.ACTION_TOOLBAR_SELECT_ALL_CONNECTORS);
		action.setText(Messages.getString("SelectAllAction.toolbar.SelectConnectors")); //$NON-NLS-1$
		action.setToolTipText(Messages.getString("SelectAllAction.toolbar.SelectConnectors")); //$NON-NLS-1$
		action.setImageDescriptor(Images.DESC_ACTION_SELECTCONNECTORS);
		action.setDisabledImageDescriptor(Images.DESC_ACTION_SELECTCONNECTORS_DISABLED);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

