head	1.7;
access;
symbols
	v20081015-1925:1.7
	v20080917-1925:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.2
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2006.06.06.12.19.39;	author dstadnik;	state dead;
branches;
next	1.6;

1.6
date	2006.06.06.08.16.35;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.07.14.08.50;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.23.15.45.36;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.22.22.01.15;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.13.18.37.50;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.18.19.28.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.7
log
@rename strategy Name -> Naming
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.naming;

import java.util.Iterator;

import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.gmf.common.IncrementalNamesDispenser;
import org.eclipse.gmf.common.NamesDispenser;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.MappingEntry;
import org.eclipse.gmf.mappings.NodeMapping;

/**
 * @@author artem
 */
public class ClassNameStrategy extends AbstractNamingStrategy {

	private final String mySuffix;

	public ClassNameStrategy(String suffix) {
		this(suffix, null, new IncrementalNamesDispenser());
	}

	public ClassNameStrategy(String suffix, NamingStrategy chained, NamesDispenser dispenser) {
		super(chained);
		assert suffix != null;
		mySuffix = suffix;
		setNamesDispenser(dispenser);
	}

	public String get(CanvasMapping cme) {
		if (cme.getDomainMetaElement() == null) {
			return super.get(cme);
		}
		return createClassName(cme.getDomainMetaElement().getName());
	}

	public String get(NodeMapping nme) {
		if (nme.getDomainContext() == null) {
			return super.get(nme);
		}
		return createClassName(nme.getDomainContext().getName());
	}

	public String get(LinkMapping lme) {
		if (lme.getDomainMetaElement() != null) {
			return createClassName(lme.getDomainMetaElement().getName());
		} else if (lme.getLinkMetaFeature() != null) {
			return createClassName(lme.getLinkMetaFeature().getName());
		}
		return super.get(lme);
	}

	public String get(CompartmentMapping cm) {
		if (cm.getParentNode().getDomainContext() == null || cm.getCompartment() == null) {
			return super.get(cm);
		}
		return createClassName(cm.getParentNode().getDomainContext().getName() + '_' + cm.getCompartment().getName());
	}

	private String getQualifier(LabelMapping mapping) {
		if (mapping.getFeatures().isEmpty()) {
			return "Unknown";
		}
		// FIXME gmfmap model says features are 0..*, assert contradicts?  
		assert mapping.getFeatures().size() > 0;
		StringBuffer sb = new StringBuffer();
		for (Iterator features = mapping.getFeatures().iterator(); features.hasNext();) {
			EAttribute feature = (EAttribute) features.next();
			if (sb.length() > 0) {
				sb.append('_');
			}
			sb.append(feature.getName());
		}
		return sb.toString();
	}

	public String get(LabelMapping labelMapping) {
		MappingEntry mapEntry = labelMapping.getMapEntry();
		if (mapEntry instanceof NodeMapping) {
			return getForNode((NodeMapping) mapEntry, labelMapping);
		} else if (mapEntry instanceof LinkMapping) {
			return getForLink((LinkMapping) mapEntry, labelMapping);
		}
		throw new IllegalStateException("Don't know how to handle mapEntry:" + mapEntry);
	}

	private String getForNode(NodeMapping nme, LabelMapping labelMapping) {
		if (nme.getDomainContext() == null) {
			return super.get(labelMapping);
		}
		String qualifier = getQualifier(labelMapping);
		return createClassName(nme.getDomainContext().getName() + '_' + qualifier);
	}

	private String getForLink(LinkMapping lme, LabelMapping labelMapping) {
		String qualifier = getQualifier(labelMapping);
		if (lme.getDomainMetaElement() != null) {
			return createClassName(lme.getDomainMetaElement().getName() + '_' + qualifier);
		} else if (lme.getLinkMetaFeature() != null) {
			return createClassName(lme.getLinkMetaFeature().getName() + '_' + qualifier);
		}
		return super.get(labelMapping);
	}

	protected String createClassName(String name) {
		name = CodeGenUtil.validJavaIdentifier(name);
		if (name == null) {
			name = "Unspecified";
		} else if (name.length() > 0) {
			name = Character.toUpperCase(name.charAt(0)) + name.substring(1);
		}
		return getNamesDispenser() == null ? name + mySuffix : getNamesDispenser().get(name, mySuffix);
	}
}
@


1.6
log
@#144872 Unique figure and diagram element names should be used when graph def is generated for domain model with abstract class
@
text
@@


1.5
log
@#130715 Use default label text defined in gmfgraph model
@
text
@d18 2
d35 1
a35 1
		this(suffix, null, new CollectingDispenser());
d38 1
a38 1
	public ClassNameStrategy(String suffix, NamingStrategy chained, UniqueValueDispenser dispenser) {
d42 1
a42 1
		setCache(dispenser);
d101 1
a101 1
	
d122 3
a124 1
		if (name.length() > 0) {
d127 1
a127 22
		String fullName = ensureUnique(name, mySuffix);
		cacheName(fullName);
		return fullName;
	}

	protected String ensureUnique(String name, String suffix) {
		int i = 2;
		String uniqueName = name;
		while (isCachedName(uniqueName + suffix)) {
			uniqueName = name + i++;
		}
		return uniqueName + suffix;
	}

	private boolean isCachedName(String string) {
		return getCache() == null ? false : !getCache().isUnique(string);
	}

	private void cacheName(String fullName) {
		if (getCache() != null) {
			getCache().remember(fullName);
		}
a128 1

@


1.4
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d74 2
a75 3
		String text = mapping.getText();
		if (text != null && text.length() > 0) {
			return text.length() > 8 ? text.substring(0, 8) : text;
@


1.3
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@a17 1
import org.eclipse.gmf.mappings.AbstractNodeMapping;
a18 1
import org.eclipse.gmf.mappings.ChildNodeMapping;
a65 7
	public String get(ChildNodeMapping nme) {
		if (nme.getDomainContext() == null) {
			return super.get(nme);
		}
		return createClassName(nme.getDomainContext().getName());
	}

d67 1
a67 1
		if (cm.getParentNodeMapping().getDomainContext() == null || cm.getCompartment() == null) {
d70 1
a70 1
		return createClassName(cm.getParentNodeMapping().getDomainContext().getName() + '_' + cm.getCompartment().getName());
d93 2
a94 2
		if (mapEntry instanceof AbstractNodeMapping) {
			return getForNode((AbstractNodeMapping) mapEntry, labelMapping);
d101 1
a101 1
	private String getForNode(AbstractNodeMapping nme, LabelMapping labelMapping) {
@


1.2
log
@#127461 Support multiple labels definition in the mapping model
@
text
@a22 1
import org.eclipse.gmf.mappings.LinkLabelMapping;
d24 1
a24 1
import org.eclipse.gmf.mappings.NodeLabelMapping;
d87 1
d100 11
a110 1
	public String getForEditFeature(AbstractNodeMapping nme, NodeLabelMapping labelMapping) {
d112 1
a112 7
			return super.getForEditFeature(nme, labelMapping);
		}
		String qualifier;
		if (labelMapping == null) {
			qualifier = nme.getEditFeature().getName();
		} else {
			qualifier = getQualifier(labelMapping);
d114 1
d118 2
a119 10
	public String getForEditFeature(LinkMapping lme, LinkLabelMapping labelMapping) {
		if (lme.getLabelEditFeature() == null) {
			return super.getForEditFeature(lme, labelMapping);
		}
		String qualifier;
		if (labelMapping == null) {
			qualifier = lme.getLabelEditFeature().getName();
		} else {
			qualifier = getQualifier(labelMapping);
		}
d125 1
a125 1
		return super.getForEditFeature(lme, labelMapping);
@


1.1
log
@refactor NamingStrategy: extracted all className setters to provisional NamingMediator
@
text
@d14 2
d17 1
d22 2
d25 1
d83 18
a100 1
	public String getForEditFeature(AbstractNodeMapping nme) {
d102 7
a108 1
			return super.getForEditFeature(nme);
d110 1
a110 1
		return createClassName(nme.getDomainContext().getName() + '_' + nme.getEditFeature().getName());
d113 1
a113 1
	public String getForEditFeature(LinkMapping lme) {
d115 7
a121 1
			return super.getForEditFeature(lme);
d124 1
a124 1
			return createClassName(lme.getDomainMetaElement().getName() + '_' + lme.getLabelEditFeature().getName());
d126 1
a126 1
			return createClassName(lme.getLinkMetaFeature().getName() + '_' + lme.getLabelEditFeature().getName());
d128 1
a128 1
		return super.getForEditFeature(lme);
@

