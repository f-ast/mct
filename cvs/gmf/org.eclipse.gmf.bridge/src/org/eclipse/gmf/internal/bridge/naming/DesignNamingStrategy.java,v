head	1.4;
access;
symbols
	v20081015-1925:1.4
	v20080917-1925:1.4
	v20080903-1520:1.4
	v20080827-1520:1.4
	v20080813-1520:1.4
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.6
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080528-1052:1.4
	v20080507-1326:1.4
	v20080417-1610:1.4
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070518-1300:1.4
	v20070504-1000:1.4
	v20070427-0600:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070405-1100:1.4
	v20070330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070228-2000:1.4
	v20070208-1800:1.4
	M4_20:1.4
	v20061222-1800:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061013-1330:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.06.26.14.23.20;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.08.13.28.17;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.07.14.31.09;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.07.13.52.13;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.4
log
@not ready for API, internal for now
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.naming;

import org.eclipse.gmf.internal.common.NamesDispenser;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.NodeMapping;

/**
 * Uses names from graphical definition elements if available.
 * 
 * @@author dstadnik
 */
public class DesignNamingStrategy extends AbstractNamingStrategy {

	public DesignNamingStrategy(String suffix, NamesDispenser namesDispenser, NamingStrategy chainedNamingStrategy, NamingStrategy prefixNamingStrategy) {
		super(suffix, namesDispenser, chainedNamingStrategy, prefixNamingStrategy);
	}

	public String get(CanvasMapping mapping) {
		if (mapping.getDiagramCanvas() != null) {
			String name = mapping.getDiagramCanvas().getName();
			if (!isEmpty(name)) {
				return createClassName(name);
			}
		}
		return super.get(mapping);
	}

	public String get(NodeMapping mapping) {
		if (mapping.getDiagramNode() != null) {
			String name = mapping.getDiagramNode().getName();
			if (!isEmpty(name)) {
				return createClassName(name);
			}
		}
		return super.get(mapping);
	}

	public String get(LinkMapping mapping) {
		if (mapping.getDiagramLink() != null) {
			String name = mapping.getDiagramLink().getName();
			if (!isEmpty(name)) {
				return createClassName(name);
			}
		}
		return super.get(mapping);
	}

	public String get(CompartmentMapping mapping) {
		if (mapping.getCompartment() != null) {
			String name = mapping.getCompartment().getName();
			if (!isEmpty(name)) {
				name = Character.toUpperCase(name.charAt(0)) + name.substring(1);
				name = getCompartmentHostPrefix(mapping) + name;
				return createClassName(name);
			}
		}
		return super.get(mapping);
	}

	public String get(LabelMapping mapping) {
		if (mapping.getDiagramLabel() != null) {
			String name = mapping.getDiagramLabel().getName();
			if (!isEmpty(name)) {
				name = Character.toUpperCase(name.charAt(0)) + name.substring(1);
				// Since names should be unique in gmfgraph model names of
				// labels most likely will contain their host names appended
				// as prefixes so we do not add them to make names smaller.
				//name = getLabelHostPrefix(mapping) + name;
				return createClassName(name);
			}
		}
		return super.get(mapping);
	}
}
@


1.3
log
@#144680 Use diagram element name from gmfgraph model for pure design elements
@
text
@d14 1
a14 1
import org.eclipse.gmf.common.NamesDispenser;
@


1.2
log
@do not expose names dispenser in api
@
text
@a13 2
import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.gmf.common.IncrementalNamesDispenser;
d16 1
d28 2
a29 14
	private final String suffix;

	private final NamesDispenser namesDispenser;

	public DesignNamingStrategy(String suffix) {
		this(suffix, null, new IncrementalNamesDispenser());
	}

	public DesignNamingStrategy(String suffix, NamingStrategy chained, NamesDispenser namesDispenser) {
		super(chained);
		assert suffix != null;
		this.suffix = suffix;
		assert namesDispenser != null;
		this.namesDispenser = namesDispenser;
d62 12
d78 5
a87 7

	protected String createClassName(String name) {
		assert !isEmpty(name);
		name = CodeGenUtil.validJavaIdentifier(name);
		name = Character.toUpperCase(name.charAt(0)) + name.substring(1);
		return namesDispenser.get(name, suffix);
	}
@


1.1
log
@#145502 Naming strategy and gmfgen model objects should generate consistent class names
@
text
@d31 2
d37 1
a37 1
	public DesignNamingStrategy(String suffix, NamingStrategy chained, NamesDispenser dispenser) {
d41 2
a42 1
		setNamesDispenser(dispenser);
d89 1
a89 1
		return getNamesDispenser() == null ? name + suffix : getNamesDispenser().get(name, suffix);
@

