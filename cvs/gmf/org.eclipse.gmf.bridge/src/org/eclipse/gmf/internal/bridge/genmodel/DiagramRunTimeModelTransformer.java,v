head	1.4;
access;
symbols
	v20081015-1925:1.4
	v20080917-1925:1.4
	v20080903-1520:1.4
	v20080827-1520:1.4
	v20080813-1520:1.4
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080528-1052:1.4
	v20080507-1326:1.4
	v20080417-1610:1.4
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.2
	v20070228-2000:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.06.21.14.04.51;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	1329467a85824567;

1.3
date	2007.03.19.16.49.06;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	5c9c45febf004567;

1.2
date	2006.09.04.15.11.59;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.26.14.05.04;	author atikhomirov;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.20;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.4
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.genmodel;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.gmf.gmfgraph.Identity;
import org.eclipse.gmf.mappings.AuditContainer;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.MetricContainer;
import org.eclipse.gmf.mappings.TopNodeReference;
import org.eclipse.gmf.runtime.notation.NotationPackage;

/**
 * Creates bare extended version of basic Diagram Run-Time model from gmfmap. 
 * This extended version is expected to be modified by toolsmith to capture additional
 * attributes/features of diagram.
 * @@author artem
 */
public class DiagramRunTimeModelTransformer extends MappingTransformer {
	private final EPackage myPackage;

	public DiagramRunTimeModelTransformer(String modelName, String modelNsURI) {
		myPackage = EcoreFactory.eINSTANCE.createEPackage();
		myPackage.setName(modelName);
		myPackage.setNsPrefix(modelName+"-drt");
		myPackage.setNsURI(modelNsURI);
	}

	public EPackage getResult() {
		return myPackage;
	}

	protected void process(CanvasMapping cme) {
		addEClass(cme.getDiagramCanvas(), NotationPackage.eINSTANCE.getDiagram());
	}

	protected void process(TopNodeReference topNode) {
		addEClass(topNode.getChild().getDiagramNode(), NotationPackage.eINSTANCE.getNode());
	}

	protected void process(LinkMapping lme) {
		addEClass(lme.getDiagramLink(), NotationPackage.eINSTANCE.getEdge());
	}

	private void addEClass(Identity diaDefElement, EClass superClass) {
		EClass c = createEClass(diaDefElement.getName(), superClass);
		myPackage.getEClassifiers().add(c);
//		for (Iterator it = diaDefElement.getProperties().iterator(); it.hasNext();) {
//			RunTimeProperty p = (RunTimeProperty) it.next();
//			EAttribute a = EcoreFactory.eINSTANCE.createEAttribute();
//			a.setName(p.getName());
//			a.setEType(EcorePackage.eINSTANCE.getEString());
//			c.getEStructuralFeatures().add(a);
//		}
	}

	private EClass createEClass(String name, EClass superClass) {
		EClass c = EcoreFactory.eINSTANCE.createEClass();
		c.setName(name);
		c.getESuperTypes().add(superClass);
		return c;
	}

	protected void process(AuditContainer audits) {
	}

	protected void process(MetricContainer metrics) {
	}
}
@


1.3
log
@EMF 2.3 M5 and Java 5 cleanup
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
@


1.2
log
@use generics wherever possible
@
text
@a56 1
	@@SuppressWarnings("unchecked")
a68 1
	@@SuppressWarnings("unchecked")
@


1.1
log
@no api packages, classes are for internal use only
@
text
@d57 1
d70 1
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@


