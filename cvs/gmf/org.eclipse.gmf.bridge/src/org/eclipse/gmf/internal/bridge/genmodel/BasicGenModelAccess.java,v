head	1.6;
access;
symbols
	v20081015-1925:1.6
	v20080917-1925:1.6
	v20080903-1520:1.6
	v20080827-1520:1.6
	v20080813-1520:1.6
	v20080722-1827:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080528-1052:1.6
	v20080507-1326:1.6
	v20080417-1610:1.6
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070518-1300:1.6
	v20070504-1000:1.6
	v20070427-0600:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070405-1100:1.6
	v20070330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.5
	v20070228-2000:1.5
	v20070208-1800:1.5
	M4_20:1.3
	v20061222-1800:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.3
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.03.19.16.49.06;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	5c9c45febf004567;

1.5
date	2007.02.06.18.18.38;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	7c7c45c8c67a4567;

1.4
date	2007.02.06.15.48.18;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	360e45c8a3414567;

1.3
date	2006.09.06.18.22.31;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.04.15.11.59;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.26.14.05.04;	author atikhomirov;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.20;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.6
log
@EMF 2.3 M5 and Java 5 cleanup
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.genmodel;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.MultiStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.codegen.ecore.genmodel.GenModel;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.common.util.WrappedException;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;

/**
 * @@author artem
 */
public class BasicGenModelAccess implements GenModelAccess {
	private final EPackage model;

	private GenModel genModel;

	private final List<URI> locations = new LinkedList<URI>();

	private boolean needUnload;

	public BasicGenModelAccess(EPackage aModel) {
		this.model = aModel;
	}

	public void initDefault() {
		registerLocation(constructDefaultFromModel());
		registerLocation(fromExtpoint());
	}

	protected final URI fromExtpoint() {
		return fromExtpoint(model.getNsURI());
	}

	/**
	 * Useful when nsURI changed over time to reference old URI of the model.
	 * Otherwise {@@link #fromExtpoint()} is enough.
	 * 
	 * @@param nsURI
	 * @@return uri registered in ecore's extpoint, if any
	 */
	protected final URI fromExtpoint(String nsURI) {
		return EcorePlugin.getEPackageNsURIToGenModelLocationMap().get(nsURI);
	}

	protected final URI constructDefaultFromModel() {
		if (model.eResource() == null || model.getNsURI() == null) {
			return null;
		}
		URI domainModelURI = model.eResource().getURI();
		if (model.getNsURI().equals(domainModelURI.toString())) {
			return null;
		}
		URI genModelURI = domainModelURI.trimFileExtension().appendFileExtension("genmodel");
		if (genModelURI.equals(domainModelURI)) {
			return null;
		}
		// XXX should keep distinct resourceSet with URI to use different rs
		// while loading?
		/*
		 * //
		 * 
		 * @@see org.eclipse.emf.importer.ModelImporter.getExternalGenModels()
		 *      Resource genModelResource = rs.getResource(genModelURI, false);
		 *      if (genModelResource == null) { genModelResource =
		 *      rs.getResource(genModelURI, true); if (genModelResource != null) {
		 *      return (GenModel) genModelResource.getContents().get(0); } }
		 */
		return genModelURI;
	}

	protected final EPackage original() {
		return model;
	}

	public GenModel model() {
		// if genModel == null load()?
		return genModel;
	}

	public IStatus ensure() {
		IStatus loadStatus = load();
		if (loadStatus.isOK()) {
			return loadStatus;
		}
		return createDummy();
	}

	public IStatus load() {
		ResourceSet rs = model.eResource() == null || model.eResource().getResourceSet() == null ? new ResourceSetImpl() : model.eResource().getResourceSet();
		return load(rs);
	}

	public IStatus load(ResourceSet rs) {
		assert !locations.isEmpty(); // XXX if isEmpty() initDefault?

		List<IStatus> exceptions = new LinkedList<IStatus>();
		final String id = "org.eclipse.gmf.bridge"; //$NON-NLS-1$
		for (URI uri : locations) {
			try {
				Resource r = rs.getResource(uri, false);
				needUnload = r == null || !r.isLoaded();
				r = rs.getResource(uri, true);
				if (r != null) {
					genModel = (GenModel) r.getContents().get(0);
					return Status.OK_STATUS;
				}
			} catch (WrappedException ex) {
				exceptions.add(new Status(IStatus.ERROR, id, ex.getMessage(), ex.getCause()));
			}
		}
		needUnload = false;
		if (exceptions.isEmpty()) {
			return Status.CANCEL_STATUS;
		}
		IStatus[] sa = exceptions.toArray(new IStatus[exceptions.size()]);
		return new MultiStatus(id, 0, sa, "Problems while loading GenModel", null); //$NON-NLS-1$
	}

	/**
	 * Use with care, model elements obtained earlier will become proxies.
	 */
	public void unload() {
		if (needUnload && genModel != null) {
			genModel.eResource().unload();
			genModel = null;
		}
		needUnload = false;
	}

	public IStatus createDummy() {
		return createDummy(null);
	}

	public IStatus createDummy(Collection<EPackage> additionalPackages) {
		genModel = new DummyGenModel(model, additionalPackages).create();
		confineInResource();
		return Status.OK_STATUS;
	}

	private void confineInResource() {
		Resource r = new ResourceSetImpl().createResource(URI.createGenericURI("uri", genModel.getModelPluginID(), null));
		r.getContents().add(genModel);
	}

	public boolean hasLocations() {
		return locations != null && !locations.isEmpty();
	}

	protected void registerLocation(URI location) {
		if (location != null) {
			locations.add(location);
		}
	}

	protected void unregsiterLocation(URI location) {
		locations.remove(location);
	}
}
@


1.5
log
@[167247] afedorov -  BasicGenModelAccess load method doesn't collect WrappedException into IStatus
@
text
@a160 1
	@@SuppressWarnings("unchecked")
@


1.4
log
@clear few warnings
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
a14 1
import java.util.Iterator;
d19 1
d116 4
a119 1
		for (Iterator/* <URI> */it = locations.iterator(); it.hasNext();) {
a120 1
				URI uri = (URI) it.next();
d129 1
a129 2
				// FIXME collect into status
				System.err.println(ex.getMessage());
d133 5
a137 1
		return Status.CANCEL_STATUS; // FIXME
@


1.3
log
@refactor Create GenModel action, added support for automated .genmodel creation and alternative to launch EMF wizard to do the same
@
text
@d63 1
a63 1
		return (URI) EcorePlugin.getEPackageNsURIToGenModelLocationMap().get(nsURI);
@


1.2
log
@use generics wherever possible
@
text
@a14 2
import java.util.Collections;
import java.util.HashSet;
a17 1
import java.util.Map;
a21 2
import org.eclipse.emf.codegen.ecore.genmodel.GenModelFactory;
import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
a23 1
import org.eclipse.emf.ecore.EClass;
a28 1
import org.eclipse.emf.ecore.util.EcoreUtil;
d147 7
a153 1
		return createDummy(false, null);
d157 2
a158 27
	public IStatus createDummy(boolean includeAllReferencedPackages, Collection<EPackage> additionalPackages) {
		if (additionalPackages == null) {
			additionalPackages = Collections.emptyList();
		}
		String pluginID = "org.sample." + model.getName();
		genModel = GenModelFactory.eINSTANCE.createGenModel();
		if (includeAllReferencedPackages) {
			HashSet<EPackage> allPacks = new HashSet<EPackage>();
			allPacks.add(model);
			allPacks.addAll(additionalPackages);
			// TODO override method in crossReferencer to get only EClasses
			Map m = EcoreUtil.ExternalCrossReferencer.find(model);
			for (Iterator it = m.keySet().iterator(); it.hasNext(); ) {
				Object next = it.next();
				if (next instanceof EClass) {
					allPacks.add(((EClass) next).getEPackage());
				}
			}
			genModel.initialize(allPacks);
		} else {
			genModel.initialize(Collections.singleton(model));
		}
		genModel.setModelName(model.getName() + "Gen");
		genModel.setModelPluginID(pluginID);
		genModel.setModelDirectory("/" + pluginID + "/src/");
		genModel.setEditDirectory(genModel.getModelDirectory());
		Resource r = new ResourceSetImpl().createResource(URI.createGenericURI("uri", pluginID, null));
a159 9

		// need different prefix to avoid name collisions with code generated
		// for domain model
		
		for (Iterator it = genModel.getGenPackages().iterator(); it.hasNext();) {
			GenPackage genPackage = (GenPackage) it.next();
			genPackage.setPrefix(genPackage.getEcorePackage().getName() + "Gen");
		}
		return Status.OK_STATUS;
@


1.1
log
@no api packages, classes are for internal use only
@
text
@d45 1
a45 1
	private final List/* <URI> */locations = new LinkedList();
d154 1
a154 1
		return createDummy(false, Collections.EMPTY_LIST);
d157 5
a161 1
	public IStatus createDummy(boolean includeAllReferencedPackages, Collection/*<EPackage>*/ additionalPackages) {
d165 1
a165 1
			HashSet allPacks = new HashSet();
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@


