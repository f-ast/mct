head	1.4;
access;
symbols
	v20081015-1925:1.4
	v20080917-1925:1.4
	v20080903-1520:1.4
	v20080827-1520:1.4
	v20080813-1520:1.4
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080528-1052:1.4
	v20080507-1326:1.4
	v20080417-1610:1.4
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.2
	v20070228-2000:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.06.21.14.04.51;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	1329467a85824567;

1.3
date	2007.03.19.16.49.06;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	5c9c45febf004567;

1.2
date	2006.09.04.15.11.59;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.26.14.05.04;	author atikhomirov;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.20;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.4
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.genmodel;

import java.util.Map;
import java.util.TreeMap;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
import org.eclipse.emf.codegen.ecore.genmodel.GenModel;
import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.NodeMapping;

/**
 * Provides user-tuned runtime diagram presentation.
 * @@author artem
 */
public class SpecificDiagramRunTimeModelHelper extends BasicDiagramRunTimeModelHelper {
	private final Map<String, GenClass> myName2GenClassMap;

	/**
	 * @@param drtGenModel user-defined diagram run-time model (still, should extend basic RT model)
	 */
	public SpecificDiagramRunTimeModelHelper(GenModel drtGenModel) {
		assert !drtGenModel.getGenPackages().isEmpty();
		myName2GenClassMap = collectGenClasses(drtGenModel);
	}
	
	public GenClass get(NodeMapping nodeMapping) {
		GenClass gc = getGenClass(nodeMapping.getDiagramNode().getName());
		if (gc != null) {
			return gc;
		}
		return super.get(nodeMapping);
	}

	public GenClass get(LinkMapping linkMapping) {
		GenClass gc = getGenClass(linkMapping.getDiagramLink().getName());
		if (gc != null) {
			return gc;
		}
		return super.get(linkMapping);
	}

	public GenClass get(CanvasMapping canvasMapping) {
		GenClass gc = getGenClass(canvasMapping.getDiagramCanvas().getName());
		if (gc != null) {
			return gc;
		}
		return super.get(canvasMapping);
	}

	public GenClass get(LabelMapping labelMapping) {
		GenClass gc = getGenClass(labelMapping.getDiagramLabel().getName());
		if (gc != null) {
			return gc;
		}
		return super.get(labelMapping);
	}

	private Map<String, GenClass> collectGenClasses(GenModel drtGenModel) {
		TreeMap<String, GenClass> rv = new TreeMap<String, GenClass>();
		GenPackage genPack = drtGenModel.getGenPackages().get(0);
		for (GenClass next : genPack.getGenClasses()) {
			rv.put(next.getName(), next);
		}
		return rv;
	}

	private GenClass getGenClass(String name) {
		return myName2GenClassMap.get(name);
	}
}
@


1.3
log
@EMF 2.3 M5 and Java 5 cleanup
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
@


1.2
log
@use generics wherever possible
@
text
@a13 1
import java.util.Iterator;
d74 2
a75 3
		GenPackage genPack = (GenPackage) drtGenModel.getGenPackages().get(0);
		for (Iterator it =  genPack.getGenClasses().iterator(); it.hasNext();) {
			GenClass next = (GenClass) it.next();
@


1.1
log
@no api packages, classes are for internal use only
@
text
@d31 1
a31 1
	private final Map myName2GenClassMap;
d73 2
a74 2
	private Map collectGenClasses(GenModel drtGenModel) {
		TreeMap rv = new TreeMap();
d84 1
a84 1
		return (GenClass) myName2GenClassMap.get(name);
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@


