head	1.9;
access;
symbols
	v20081015-1925:1.9
	v20080917-1925:1.9
	v20080903-1520:1.9
	v20080827-1520:1.9
	v20080813-1520:1.9
	v20080722-1827:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.6
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080528-1052:1.9
	v20080507-1326:1.9
	v20080417-1610:1.9
	v20080222-1200:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.4
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070518-1300:1.9
	v20070504-1000:1.9
	v20070427-0600:1.9
	v20070420-1000:1.9
	v20070413-1300:1.9
	v20070405-1100:1.9
	v20070330-1300:1.9
	v20070322-1100:1.9
	v20060316-0600:1.9
	v20070228-2000:1.9
	v20070208-1800:1.9
	M4_20:1.9
	v20061222-1800:1.9
	v20061214-0000:1.9
	M3_20:1.9
	v20061117-0800:1.9
	v20061013-1330:1.9
	v20060925-1700:1.9
	v20060919-0800:1.9
	M1_20:1.9
	v20060904-1500:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060626-1420:1.9
	v20060620-0400:1.8
	v20060616-1200:1.8
	v20060609-1400:1.8
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.2
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2006.06.26.14.23.20;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.08.13.28.17;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.07.14.31.09;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.07.13.52.14;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.06.08.16.35;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.23.15.45.36;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.22.22.01.15;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.13.18.37.50;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.18.19.28.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.9
log
@not ready for API, internal for now
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.naming;

import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
import org.eclipse.gmf.internal.common.NamesDispenser;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.MappingEntry;
import org.eclipse.gmf.mappings.NodeMapping;

/**
 * @@author artem
 */
public abstract class AbstractNamingStrategy implements NamingStrategy {

	private final String suffix;

	private final NamesDispenser namesDispenser;

	private final NamingStrategy chainedNamingStrategy;

	private final NamingStrategy prefixNamingStrategy;

	public AbstractNamingStrategy(String suffix, NamesDispenser namesDispenser, NamingStrategy chainedNamingStrategy, NamingStrategy prefixNamingStrategy) {
		this.suffix = suffix;
		this.namesDispenser = namesDispenser;
		this.chainedNamingStrategy = chainedNamingStrategy;
		this.prefixNamingStrategy = prefixNamingStrategy;
	}

	protected String createClassName(String s) {
		s = getValidClassName(s);
		if (namesDispenser == null) {
			return suffix == null ? s : s + suffix;
		}
		return namesDispenser.get(s, suffix);
	}

	protected String getValidClassName(String s) {
		assert !isEmpty(s);
		s = CodeGenUtil.validJavaIdentifier(s);
		return Character.toUpperCase(s.charAt(0)) + s.substring(1);
	}

	protected boolean isEmpty(String s) {
		return s == null || s.length() == 0;
	}

	protected final NamingStrategy getChainedNamingStrategy() {
		return chainedNamingStrategy;
	}

	protected final NamingStrategy getPrefixNamingStrategy() {
		return prefixNamingStrategy;
	}

	public String get(CanvasMapping mapping) {
		if (chainedNamingStrategy != null) {
			return chainedNamingStrategy.get(mapping);
		}
		return null;
	}

	public String get(NodeMapping mapping) {
		if (chainedNamingStrategy != null) {
			return chainedNamingStrategy.get(mapping);
		}
		return null;
	}

	public String get(LinkMapping mapping) {
		if (chainedNamingStrategy != null) {
			return chainedNamingStrategy.get(mapping);
		}
		return null;
	}

	public String get(CompartmentMapping mapping) {
		if (chainedNamingStrategy != null) {
			return chainedNamingStrategy.get(mapping);
		}
		return null;
	}

	public String get(LabelMapping mapping) {
		if (chainedNamingStrategy != null) {
			return chainedNamingStrategy.get(mapping);
		}
		return null;
	}

	protected String getCompartmentHostPrefix(CompartmentMapping mapping) {
		return getPrefixNamingStrategy() != null ? getPrefixNamingStrategy().get(mapping.getParentNode()) : GenNode.CLASS_NAME_PREFIX;
	}

	protected String getLabelHostPrefix(LabelMapping mapping) {
		MappingEntry parentMapping = mapping.getMapEntry();
		if (parentMapping instanceof NodeMapping) {
			return getPrefixNamingStrategy() != null ? getPrefixNamingStrategy().get((NodeMapping) parentMapping) : GenNode.CLASS_NAME_PREFIX;
		} else if (parentMapping instanceof LinkMapping) {
			return getPrefixNamingStrategy() != null ? getPrefixNamingStrategy().get((LinkMapping) parentMapping) : GenLink.CLASS_NAME_PREFIX;
		} else {
			throw new IllegalArgumentException(String.valueOf(mapping));
		}
	}
}
@


1.8
log
@#144680 Use diagram element name from gmfgraph model for pure design elements
@
text
@d17 1
a17 1
import org.eclipse.gmf.common.NamesDispenser;
@


1.7
log
@do not expose names dispenser in api
@
text
@d14 4
d22 1
d30 1
a30 1
	private final NamingStrategy myDelegate;
d32 19
a50 2
	public AbstractNamingStrategy() {
		this(null);
d53 4
a56 2
	public AbstractNamingStrategy(NamingStrategy chained) {
		myDelegate = chained;
d59 15
a73 3
	public String get(CanvasMapping cme) {
		if (myDelegate != null) {
			return myDelegate.get(cme);
d78 3
a80 3
	public String get(NodeMapping nme) {
		if (myDelegate != null) {
			return myDelegate.get(nme);
d85 3
a87 3
	public String get(LinkMapping lme) {
		if (myDelegate != null) {
			return myDelegate.get(lme);
d92 3
a94 3
	public String get(CompartmentMapping cm) {
		if (myDelegate != null) {
			return myDelegate.get(cm);
d99 3
a101 3
	public String get(LabelMapping labelMapping) {
		if (myDelegate != null) {
			return myDelegate.get(labelMapping);
d106 2
a107 2
	protected final NamingStrategy getDelegate() {
		return myDelegate;
d110 9
a118 2
	protected static boolean isEmpty(String s) {
		return s == null || s.length() == 0;
@


1.6
log
@#145502 Naming strategy and gmfgen model objects should generate consistent class names
@
text
@a13 1
import org.eclipse.gmf.common.NamesDispenser;
a26 2
	private NamesDispenser myDispenser;

a34 17
	public void setNamesDispenser(NamesDispenser dispenser) {
		myDispenser = dispenser;
		if (myDelegate != null) {
			myDelegate.setNamesDispenser(dispenser);
		}
	}

	public NamesDispenser getNamesDispenser() {
		if (myDispenser != null) {
			return myDispenser;
		}
		if (myDelegate != null) {
			return myDelegate.getNamesDispenser();
		}
		return null;
	}

@


1.5
log
@#144872 Unique figure and diagram element names should be used when graph def is generated for domain model with abstract class
@
text
@d93 4
@


1.4
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d14 1
d27 2
a28 1
	private UniqueValueDispenser myDispenser;
d38 1
a38 1
	public void setCache(UniqueValueDispenser dispenser) {
d41 1
a41 1
			myDelegate.setCache(dispenser);
d45 1
a45 1
	public UniqueValueDispenser getCache() {
d50 1
a50 1
			return myDelegate.getCache();
@


1.3
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@a14 1
import org.eclipse.gmf.mappings.ChildNodeMapping;
a73 7
	public String get(ChildNodeMapping nme) {
		if (myDelegate != null) {
			return myDelegate.get(nme);
		}
		return null;
	}

@


1.2
log
@#127461 Support multiple labels definition in the mapping model
@
text
@a13 1
import org.eclipse.gmf.mappings.AbstractNodeMapping;
d17 1
a17 1
import org.eclipse.gmf.mappings.LinkLabelMapping;
a18 1
import org.eclipse.gmf.mappings.NodeLabelMapping;
d89 1
a89 1
	public String getForEditFeature(AbstractNodeMapping nme, NodeLabelMapping labelMapping) {
d91 1
a91 8
			return myDelegate.getForEditFeature(nme, labelMapping);
		}
		return null;
	}

	public String getForEditFeature(LinkMapping lme, LinkLabelMapping labelMapping) {
		if (myDelegate != null) {
			return myDelegate.getForEditFeature(lme, labelMapping);
@


1.1
log
@refactor NamingStrategy: extracted all className setters to provisional NamingMediator
@
text
@d18 1
d20 1
d91 1
a91 1
	public String getForEditFeature(AbstractNodeMapping nme) {
d93 1
a93 1
			return myDelegate.getForEditFeature(nme);
d98 1
a98 1
	public String getForEditFeature(LinkMapping lme) {
d100 1
a100 1
			return myDelegate.getForEditFeature(lme);
@

