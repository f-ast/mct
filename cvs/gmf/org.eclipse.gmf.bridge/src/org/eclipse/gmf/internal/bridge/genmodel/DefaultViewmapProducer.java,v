head	1.7;
access;
symbols
	v20081015-1925:1.7
	v20080917-1925:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	v20080722-1827:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080528-1052:1.7
	v20080507-1326:1.6
	v20080417-1610:1.6
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070504-1000:1.5
	v20070427-0600:1.5
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070405-1100:1.5
	v20070330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.4
	v20070228-2000:1.4
	v20070208-1800:1.4
	M4_20:1.4
	v20061222-1800:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061013-1330:1.4
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2008.05.21.17.08.12;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	9af483456fb4567;

1.6
date	2007.05.28.13.33.38;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	3e0b465ada314567;

1.5
date	2007.03.19.16.49.06;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	5c9c45febf004567;

1.4
date	2006.09.04.15.11.59;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.01.17.49.37;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.25.19.02.06;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.26.14.05.04;	author atikhomirov;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.20;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[139126] respect implementation bundle of custom borders and layouts - dereference LayoutRef when detecting Viewmap layout
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.genmodel;

import org.eclipse.gmf.codegen.gmfgen.DefaultSizeAttributes;
import org.eclipse.gmf.codegen.gmfgen.FigureViewmap;
import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;
import org.eclipse.gmf.codegen.gmfgen.ResizeConstraints;
import org.eclipse.gmf.codegen.gmfgen.StyleAttributes;
import org.eclipse.gmf.codegen.gmfgen.Viewmap;
import org.eclipse.gmf.codegen.gmfgen.ViewmapLayoutType;
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.Compartment;
import org.eclipse.gmf.gmfgraph.Connection;
import org.eclipse.gmf.gmfgraph.DefaultSizeFacet;
import org.eclipse.gmf.gmfgraph.DiagramElement;
import org.eclipse.gmf.gmfgraph.DiagramLabel;
import org.eclipse.gmf.gmfgraph.Dimension;
import org.eclipse.gmf.gmfgraph.Direction;
import org.eclipse.gmf.gmfgraph.Figure;
import org.eclipse.gmf.gmfgraph.FlowLayout;
import org.eclipse.gmf.gmfgraph.Layout;
import org.eclipse.gmf.gmfgraph.LayoutRef;
import org.eclipse.gmf.gmfgraph.Node;
import org.eclipse.gmf.gmfgraph.VisualFacet;
import org.eclipse.gmf.gmfgraph.XYLayout;
import org.eclipse.gmf.gmfgraph.util.GMFGraphSwitch;

/**
 * @@author artem
 */
public class DefaultViewmapProducer extends ViewmapProducer {
	private final LayoutTypeSwitch myLayoutTypeSwitch = new LayoutTypeSwitch();
	
	public DefaultViewmapProducer() {
	}

	public Viewmap create(Canvas canvasElement) {
		FigureViewmap v = GMFGenFactory.eINSTANCE.createFigureViewmap();
		v.setFigureQualifiedClassName("org.eclipse.draw2d.FreeformLayer");
		return v;
	}

	public Viewmap create(Node node) {
		FigureViewmap v = GMFGenFactory.eINSTANCE.createFigureViewmap();
		v.setFigureQualifiedClassName("org.eclipse.draw2d.RoundedRectangle");
		return v;
	}

	public Viewmap create(Connection link) {
		FigureViewmap v = GMFGenFactory.eINSTANCE.createFigureViewmap();
		v.setFigureQualifiedClassName("org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx");
		return v;
	}

	public Viewmap create(Compartment compartment) {
		FigureViewmap v = GMFGenFactory.eINSTANCE.createFigureViewmap();
		// ShapeCompartmentFigure | NestedResizableCompartmentFigure
		v.setFigureQualifiedClassName("XXX");
		return v;
	}

	public Viewmap create(DiagramLabel label) {
		FigureViewmap v = GMFGenFactory.eINSTANCE.createFigureViewmap();
		v.setFigureQualifiedClassName("org.eclipse.draw2d.Label");
		return v;
	}

	protected final void setupResizeConstraints(Viewmap viewmap, Node diagramNode){
		Direction direction = diagramNode.getResizeConstraint();
		if (direction == null || direction.getValue() == Direction.NSEW){
			return;
		}
		ResizeConstraints constraints = GMFGenFactory.eINSTANCE.createResizeConstraints();
		constraints.setResizeHandles(direction.getValue());
		viewmap.getAttributes().add(constraints);
	}
	
	protected final void setupLayoutType(Viewmap viewmap, Node diagramNode){
		Figure figure = diagramNode.getFigure().getActualFigure();
		ViewmapLayoutType type = myLayoutTypeSwitch.getLayoutType(figure.getLayout());
		viewmap.setLayoutType(type);
	}
	
	protected final void setupStyleAttributes(Viewmap viewmap, Figure figure){
		if (viewmap == null || figure == null) {
			return;
		}
		StyleAttributes attributes = GMFGenFactory.eINSTANCE.createStyleAttributes();
		boolean fixedSomething = false;
		if (figure.getFont() != null){
			attributes.setFixedFont(true);
			fixedSomething = true;
		}
		if (figure.getForegroundColor() != null){
			attributes.setFixedForeground(true);
			fixedSomething = true;
		}
		if (figure.getBackgroundColor() != null){
			attributes.setFixedBackground(true);
			fixedSomething = true;
		}
		
		if (fixedSomething){
			viewmap.getAttributes().add(attributes);
		}
	}
	
	/**
	 * Intentionally limited to Node's.
	 * It does not make sense to setup default size for labels, compartments, etc.
	 */
	protected final void setupDefaultSize(Viewmap viewmap, Node node) {
		Figure figure = node.getFigure().getActualFigure();
		Dimension defaultSize;
		DefaultSizeFacet facet = findVF(node, DefaultSizeFacet.class);
		if (facet != null){
			defaultSize = facet.getDefaultSize();
		} else {
			defaultSize = figure.getPreferredSize();
		}
		
		if (defaultSize != null){
			DefaultSizeAttributes attributes = GMFGenFactory.eINSTANCE.createDefaultSizeAttributes();
			attributes.setHeight(defaultSize.getDy());
			attributes.setWidth(defaultSize.getDx());
			viewmap.getAttributes().add(attributes);
		}
	}

	protected static <T extends VisualFacet> T findVF(DiagramElement de, Class<T> facetClass) {
		for (VisualFacet vf : de.getFacets()) {
			if (facetClass.isInstance(vf)) {
				return facetClass.cast(vf);
			}
		}
		return null;
	}

	private static class LayoutTypeSwitch extends GMFGraphSwitch<ViewmapLayoutType> {
		
		public ViewmapLayoutType getLayoutType(Layout layout){
			if (layout == null) {
				return ViewmapLayoutType.UNKNOWN_LITERAL;
			}
			return doSwitch(layout instanceof LayoutRef ? ((LayoutRef) layout).getActual() : layout);
		}
		
		@@Override
		public ViewmapLayoutType caseLayout(Layout object) {
			return ViewmapLayoutType.UNKNOWN_LITERAL;
		}
		
		@@Override
		public ViewmapLayoutType caseFlowLayout(FlowLayout layout) {
			return layout.isForceSingleLine() ? ViewmapLayoutType.TOOLBAR_LAYOUT_LITERAL : ViewmapLayoutType.FLOW_LAYOUT_LITERAL;
		}
		
		@@Override
		public ViewmapLayoutType caseXYLayout(XYLayout object) {
			return ViewmapLayoutType.XY_LAYOUT_LITERAL;
		}
	}
}
@


1.6
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@d32 1
d152 4
a155 1
			return layout == null ? ViewmapLayoutType.UNKNOWN_LITERAL : doSwitch(layout);
d158 1
d163 1
d168 1
@


1.5
log
@EMF 2.3 M5 and Java 5 cleanup
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
d25 1
a29 1
import org.eclipse.gmf.gmfgraph.FigureHandle;
a31 1
import org.eclipse.gmf.gmfgraph.Layoutable;
d33 1
d88 2
a89 5
		FigureHandle figure = diagramNode.getFigure();
		if (false == figure instanceof Layoutable){
			return;
		}
		ViewmapLayoutType type = myLayoutTypeSwitch.getLayoutType(((Layoutable) figure).getLayout());
d93 2
a94 2
	protected final void setupStyleAttributes(Viewmap viewmap, FigureHandle handle){
		if (viewmap == null || false == handle instanceof Figure){
a96 1
		Figure figure = (Figure)handle;
d122 21
a142 16
		FigureHandle handle = node.getFigure();
		if (handle instanceof Figure){
			Figure figure = (Figure)handle;
			Dimension defaultSize;
			DefaultSizeFacet facet = (DefaultSizeFacet) node.find(DefaultSizeFacet.class);
			if (facet != null){
				defaultSize = facet.getDefaultSize();
			} else {
				defaultSize = figure.getPreferredSize();
			}
			
			if (defaultSize != null){
				DefaultSizeAttributes attributes = GMFGenFactory.eINSTANCE.createDefaultSizeAttributes();
				attributes.setHeight(defaultSize.getDy());
				attributes.setWidth(defaultSize.getDx());
				viewmap.getAttributes().add(attributes);
d145 1
@


1.4
log
@use generics wherever possible
@
text
@a76 1
	@@SuppressWarnings("unchecked")
a95 1
	@@SuppressWarnings("unchecked")
a124 1
	@@SuppressWarnings("unchecked")
d146 1
a146 1
	private static class LayoutTypeSwitch extends GMFGraphSwitch {
d149 1
a149 1
			return layout == null ? ViewmapLayoutType.UNKNOWN_LITERAL : (ViewmapLayoutType)doSwitch(layout);
d152 1
a152 1
		public Object caseLayout(Layout object) {
d156 1
a156 1
		public Object caseFlowLayout(FlowLayout layout) {
d160 1
a160 1
		public Object caseXYLayout(XYLayout object) {
@


1.3
log
@[155230] mgolubev - Provide means to specify default size for figure
@
text
@d77 1
d97 1
d127 1
@


1.2
log
@[155230] mgolubev ViewmapProducer to deduce DefaultSizeAttributes from figure's preferred size
@
text
@d24 1
d129 13
a141 6
			Dimension prefSize = figure.getPreferredSize();
			if (prefSize != null){
				DefaultSizeAttributes defaultSize = GMFGenFactory.eINSTANCE.createDefaultSizeAttributes();
				defaultSize.setHeight(prefSize.getDy());
				defaultSize.setWidth(prefSize.getDx());
				viewmap.getAttributes().add(defaultSize);
@


1.1
log
@no api packages, classes are for internal use only
@
text
@d14 1
d25 1
d119 18
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@


