head	1.3;
access;
symbols
	v20081015-1925:1.3
	v20080917-1925:1.3
	v20080903-1520:1.3
	v20080827-1520:1.3
	v20080813-1520:1.3
	v20080722-1827:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.6
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080528-1052:1.3
	v20080507-1326:1.3
	v20080417-1610:1.3
	v20080222-1200:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070228-2000:1.3
	v20070208-1800:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.3
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060904-1500:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060620-0400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.05.24.18.12.43;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.19.19.42.08;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.19.19.45.18;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@#139128 Preserve visualID of the .gmfgen model nodes on modifying .gmfmap model.
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge;

import org.eclipse.gmf.codegen.gmfgen.GenChildNode;
import org.eclipse.gmf.codegen.gmfgen.GenCompartment;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.GenLinkLabel;
import org.eclipse.gmf.codegen.gmfgen.GenNodeLabel;
import org.eclipse.gmf.codegen.gmfgen.GenTopLevelNode;
import org.eclipse.gmf.codegen.gmfgen.ToolGroup;

/**
 * Doesn't expect <code>get(whatever)</code> to be invoked more then once for the same argument instance.
 * @@author artem
 */
public class NaiveIdentifierDispenser implements VisualIdentifierDispenser {
	protected static final int CANVAS_COUNT_BASE = 79;
	protected static final int NODE_COUNT_BASE = 1000;
	protected static final int CHILD_COUNT_BASE = 2000;
	protected static final int LINK_COUNT_BASE = 3000;
	protected static final int LABEL_COUNT_BASE = 4000;
	protected static final int COMPARTMENT_COUNT_BASE = 5000;
	
	protected static final int TOOL_GROUP_COUNT_BASE = 0;

	private int myNodeCount = 0;
	private int myLinkCount = 0;
	private int myChildCount = 0;
	private int myLabelCount = 0;
	private int myCompartmentCount = 0;
	private int myToolGroupCount = 0;

	public NaiveIdentifierDispenser() {
	}

	public int get(GenDiagram diagram) {
		return CANVAS_COUNT_BASE;
	}

	public int get(GenTopLevelNode node) {
		return NODE_COUNT_BASE + (++myNodeCount);
	}

	public int get(GenNodeLabel nodeLabel) {
		return LABEL_COUNT_BASE + (++myLabelCount);
	}

	public int get(GenLink link) {
		return LINK_COUNT_BASE + (++myLinkCount);
	}

	public int get(GenChildNode childNode) {
		return CHILD_COUNT_BASE + (++myChildCount );
	}

	public int get(GenCompartment compartment) {
		return COMPARTMENT_COUNT_BASE + (++myCompartmentCount);
	}

	public int get(GenLinkLabel label) {
		return get((GenNodeLabel) null);
	}

	public int get(ToolGroup toolGroup) {
		return TOOL_GROUP_COUNT_BASE + (++myToolGroupCount);
	}
}
@


1.2
log
@#131270 Duplicated tool entries when same tool definition is referenced from gmfmap.
@
text
@a18 1
import org.eclipse.gmf.codegen.gmfgen.GenNode;
d20 1
d51 1
a51 1
	public int get(GenNode node) {
@


1.1
log
@visual id construction was factored out
@
text
@a20 2
import org.eclipse.gmf.codegen.gmfgen.LinkEntry;
import org.eclipse.gmf.codegen.gmfgen.NodeEntry;
a35 2
	protected static final int TOOL_NODE_COUNT_BASE = 1000;
	protected static final int TOOL_LINK_COUNT_BASE = 2000;
a42 2
	private int myToolNodeCount = 0;
	private int myToolLinkCount = 0;
a74 8
	public int get(LinkEntry linkTool) {
		return TOOL_LINK_COUNT_BASE + (++myToolLinkCount);
	}

	public int get(NodeEntry nodeTool) {
		return TOOL_NODE_COUNT_BASE + (++myToolNodeCount);
	}

@

