head	1.4;
access;
symbols
	v20081015-1925:1.4
	v20080917-1925:1.4
	v20080903-1520:1.4
	v20080827-1520:1.4
	v20080813-1520:1.4
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080528-1052:1.4
	v20080507-1326:1.4
	v20080417-1610:1.4
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070518-1300:1.4
	v20070504-1000:1.4
	v20070427-0600:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070405-1100:1.4
	v20070330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070228-2000:1.3
	v20070208-1800:1.2
	M4_20:1.1
	v20061222-1800:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.03.14.14.38.50;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	43c945f808fa4567;

1.3
date	2007.02.28.16.46.19;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	742f45e5b1da4567;

1.2
date	2007.02.06.15.48.18;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	360e45c8a3414567;

1.1
date	2006.09.06.18.22.31;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.genmodel;

import java.util.Collection;
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.StringTokenizer;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.codegen.ecore.genmodel.GenModel;
import org.eclipse.emf.codegen.ecore.genmodel.GenModelFactory;
import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.jdt.core.JavaConventions;
import org.eclipse.jdt.core.JavaCore;

/**
 * @@see org.eclipse.emf.codegen.ecore.Generator#run(java.lang.Object) (-ecore2GenModel key)
 * @@author artem
 */
public class DummyGenModel {
	protected final EPackage myModel;
	protected final Collection<EPackage> myAdditionalPackages;
	private String myPluginID;

	public DummyGenModel(EPackage primaryPackage, Collection<EPackage> additionalPackages) {
		assert primaryPackage != null;
		myModel = primaryPackage;
		myAdditionalPackages = additionalPackages;
	}

	public GenModel create() {
		GenModel genModel = GenModelFactory.eINSTANCE.createGenModel();
		if (myAdditionalPackages == null) {
			genModel.initialize(Collections.singleton(myModel));
		} else {
			LinkedHashSet<EPackage> allPacks = new LinkedHashSet<EPackage>();
			allPacks.add(myModel);
			allPacks.addAll(myAdditionalPackages);
			genModel.initialize(allPacks);
		}
		final String pluginID = getPluginID();
		genModel.setModelName(getModelName());
		genModel.setModelPluginID(pluginID);
		genModel.setModelDirectory("/" + pluginID + "/src/"); //$NON-NLS-1$ //$NON-NLS-2$

		// need different prefix to avoid name collisions with code generated
		// for domain model
		final String basePackage = asValidPackageName(pluginID);
		for (GenPackage genPackage : genModel.getGenPackages()) {
			if (basePackage != null) {
				if (basePackage.endsWith('.' + genPackage.getEcorePackage().getName())) {
					genPackage.setBasePackage(basePackage.substring(0, basePackage.lastIndexOf('.')));
				} else {
					genPackage.setBasePackage(basePackage);
				}
			}
			genPackage.setPrefix(constructGenPackagePrefix(genPackage));
		}
		return genModel;
	}

	protected String constructGenPackagePrefix(GenPackage genPackage) {
		return CodeGenUtil.capName(genPackage.getEcorePackage().getName());
	}

	protected String getModelName() {
		return CodeGenUtil.capName(myModel.getName());
	}

	public void setPluginID(String pluginID) {
		myPluginID = pluginID;
	}

	private String getPluginID() {
		if (myPluginID == null) {
			return "org.sample." + getModelName().toLowerCase(); //$NON-NLS-1$
		}
		return myPluginID;
	}

	private String asValidPackageName(String pluginID) {
		String rv = pluginID.toLowerCase();
		final String complianceLevel = JavaCore.VERSION_1_4;
		if (JavaConventions.validatePackageName(rv, complianceLevel, complianceLevel).getSeverity() != IStatus.ERROR) {
			return rv;
		}
		StringBuilder sb = new StringBuilder(rv.length());
		StringTokenizer st = new StringTokenizer(rv, "."); //$NON-NLS-1$
		while (st.hasMoreTokens()) {
			if (appendOnlyJavaChars(sb, st.nextToken())) {
				sb.append('.');
			}
		}
		if (sb.length() == 0) {
			return null;
		}
		sb.setLength(sb.length() - 1); // strip last dot
		if (!Character.isJavaIdentifierStart(sb.charAt(0))) {
			sb.insert(0, 'a');
		}
		assert JavaConventions.validatePackageName(sb.toString(), complianceLevel, complianceLevel).isOK();
		return sb.toString();
	}

	private static boolean appendOnlyJavaChars(StringBuilder sb, String rv) {
		boolean added = false;
		for (int i = 0; i < rv.length(); i++) {
			if (Character.isJavaIdentifierPart(rv.charAt(i))) {
				sb.append(rv.charAt(i));
				added = true;
			}
		}
		return added;
	}
}
@


1.3
log
@fix sporadical testMultiPackageSetup failures (due to changing order of genpackages and moving PrimEditPlugin class)
@
text
@a15 1
import java.util.Iterator;
d26 1
d61 1
a61 2
		for (Iterator it = genModel.getGenPackages().iterator(); it.hasNext();) {
			GenPackage genPackage = (GenPackage) it.next();
d95 1
a95 1
		final String complianceLevel = "1.3"; //$NON-NLS-1$
@


1.2
log
@clear few warnings
@
text
@a15 1
import java.util.HashSet;
d17 1
d48 1
a48 1
			HashSet<EPackage> allPacks = new HashSet<EPackage>();
@


1.1
log
@refactor Create GenModel action, added support for automated .genmodel creation and alternative to launch EMF wizard to do the same
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
d56 1
a56 1
		genModel.setModelDirectory("/" + pluginID + "/src/");
d89 1
a89 1
			return "org.sample." + getModelName().toLowerCase();
d96 2
a97 1
		if (JavaConventions.validatePackageName(rv).getSeverity() != IStatus.ERROR) {
d101 1
a101 1
		StringTokenizer st = new StringTokenizer(rv, ".");
d114 1
a114 1
		assert JavaConventions.validatePackageName(sb.toString()).isOK();
@

