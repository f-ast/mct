head	1.3;
access;
symbols
	v20081015-1925:1.3
	v20080917-1925:1.3
	v20080903-1520:1.3
	v20080827-1520:1.3
	v20080813-1520:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.06.07.14.31.09;	author dstadnik;	state dead;
branches;
next	1.2;

1.2
date	2006.06.06.08.16.35;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.18.19.28.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@do not expose names dispenser in api
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.naming;

import org.eclipse.gmf.common.NamesDispenser;


/**
 * Will utilize original strategies uniquenessDispensers unless 
 * {@@link #setNamesDispenser(UniqueValueDispenser)} is expicitly invoked.
 * @@author artem
 */
public abstract class CompositeNamingStrategy implements NamingStrategy {

	private final NamingStrategy[] myStrategies;
	private NamesDispenser myCache = null;

	public CompositeNamingStrategy(NamingStrategy[] strategies) {
		myStrategies = strategies;
	}

	/**
	 * Once set, all comprised strategies will use it. 
	 */
	public void setNamesDispenser(NamesDispenser dispenser) {
		myCache = dispenser;
		for (int i = 0; i < myStrategies.length; i++) {
			myStrategies[i].setNamesDispenser(dispenser);
		}
	}

	/**
	 * @@return value previously passed to {@@link #setNamesDispenser(UniqueValueDispenser)}, or <code>null</code> otherwise.
	 */
	public NamesDispenser getNamesDispenser() {
		return myCache;
	}

}
@


1.2
log
@#144872 Unique figure and diagram element names should be used when graph def is generated for domain model with abstract class
@
text
@@


1.1
log
@refactor NamingStrategy: extracted all className setters to provisional NamingMediator
@
text
@d14 2
d19 1
a19 1
 * {@@link #setCache(UniqueValueDispenser)} is expicitly invoked.
d25 1
a25 1
	private UniqueValueDispenser myCache = null;
d34 1
a34 1
	public void setCache(UniqueValueDispenser dispenser) {
d37 1
a37 1
			myStrategies[i].setCache(dispenser);
d42 1
a42 1
	 * @@return value previously passed to {@@link #setCache(UniqueValueDispenser)}, or <code>null</code> otherwise.
d44 1
a44 1
	public UniqueValueDispenser getCache() {
@

