head	1.4;
access;
symbols
	v20081015-1925:1.4
	v20080917-1925:1.4
	v20080903-1520:1.4
	v20080827-1520:1.4
	v20080813-1520:1.4
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.6
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080528-1052:1.4
	v20080507-1326:1.4
	v20080417-1610:1.4
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070518-1300:1.4
	v20070504-1000:1.4
	v20070427-0600:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070405-1100:1.4
	v20070330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070228-2000:1.4
	v20070208-1800:1.4
	M4_20:1.4
	v20061222-1800:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061013-1330:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.06.26.14.23.20;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.08.13.28.17;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.07.14.31.09;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.07.13.52.14;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.4
log
@not ready for API, internal for now
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.naming;

import org.eclipse.gmf.codegen.gmfgen.GenCompartment;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.GenLabel;
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
import org.eclipse.gmf.internal.common.NamesDispenser;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.NodeMapping;

/**
 * Provides default names that do not reflect element semantic.
 * 
 * @@author dstadnik
 */
public class DefaultNamingStrategy extends AbstractNamingStrategy {

	public DefaultNamingStrategy(String suffix, NamesDispenser namesDispenser, NamingStrategy chainedNamingStrategy, NamingStrategy prefixNamingStrategy) {
		super(suffix, namesDispenser, chainedNamingStrategy, prefixNamingStrategy);
	}

	public String get(CanvasMapping mapping) {
		return createClassName(GenDiagram.CLASS_NAME_PREFIX);
	}

	public String get(NodeMapping mapping) {
		return createClassName(GenNode.CLASS_NAME_PREFIX);
	}

	public String get(LinkMapping mapping) {
		return createClassName(GenLink.CLASS_NAME_PREFIX);
	}

	public String get(CompartmentMapping mapping) {
		return createClassName(getCompartmentHostPrefix(mapping) + GenCompartment.CLASS_NAME_PREFIX);
	}

	public String get(LabelMapping mapping) {
		return createClassName(getLabelHostPrefix(mapping) + GenLabel.CLASS_NAME_PREFIX);
	}
}
@


1.3
log
@#144680 Use diagram element name from gmfgraph model for pure design elements
@
text
@d19 1
a19 1
import org.eclipse.gmf.common.NamesDispenser;
@


1.2
log
@do not expose names dispenser in api
@
text
@a18 1
import org.eclipse.gmf.common.IncrementalNamesDispenser;
d31 1
a31 1
public class DefaultNamingStrategy implements NamingStrategy {
d33 2
a34 13
	private final String suffix;

	private final NamesDispenser namesDispenser;

	public DefaultNamingStrategy(String suffix) {
		this(suffix, new IncrementalNamesDispenser());
	}

	public DefaultNamingStrategy(String suffix, NamesDispenser namesDispenser) {
		assert suffix != null;
		this.suffix = suffix;
		assert namesDispenser != null;
		this.namesDispenser = namesDispenser;
d50 1
a50 1
		return createClassName(GenCompartment.CLASS_NAME_PREFIX);
d54 1
a54 5
		return createClassName(GenLabel.CLASS_NAME_PREFIX);
	}

	protected String createClassName(String name) {
		return namesDispenser.get(name, suffix);
@


1.1
log
@#145502 Naming strategy and gmfgen model objects should generate consistent class names
@
text
@d36 1
a36 1
	private NamesDispenser namesDispenser;
d45 1
a45 8
		setNamesDispenser(namesDispenser);
	}

	public final NamesDispenser getNamesDispenser() {
		return namesDispenser;
	}

	public final void setNamesDispenser(NamesDispenser namesDispenser) {
d70 1
a70 1
		return getNamesDispenser() == null ? name + suffix : getNamesDispenser().get(name, suffix);
@

