head	1.21;
access;
symbols
	v20081015-1925:1.21
	v20080917-1925:1.21
	v20080903-1520:1.21
	v20080827-1520:1.21
	v20080813-1520:1.21
	v20080722-1827:1.21
	v20080716-1642:1.21
	R2_1_maintenance:1.21.0.4
	Root_R2_1_maintenance:1.21
	R2_1_0:1.21
	v20080528-1052:1.21
	v20080507-1326:1.21
	v20080417-1610:1.21
	v20080222-1200:1.21
	v20070809-0000:1.21
	R2_0_maintenance:1.21.0.2
	R2_0:1.21
	R4_20:1.21
	v20070621-0000:1.21
	RC3_20:1.20
	v20070608-1300:1.20
	v20070605-1400:1.20
	v20070601-1400:1.20
	v20070525-1500:1.20
	v20070518-1300:1.20
	v20070504-1000:1.20
	v20070427-0600:1.20
	v20070420-1000:1.20
	v20070413-1300:1.20
	v20070405-1100:1.16
	v20070330-1300:1.16
	v20070322-1100:1.16
	v20060316-0600:1.16
	v20070228-2000:1.15
	v20070208-1800:1.15
	M4_20:1.15
	v20061222-1800:1.15
	v20061214-0000:1.15
	M3_20:1.13
	v20061117-0800:1.13
	v20061013-1330:1.13
	v20060925-1700:1.13
	v20060919-0800:1.13
	M1_20:1.13
	v20060904-1500:1.13
	v20060713-1700:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060626-1420:1.13
	v20060620-0400:1.12
	v20060616-1200:1.12
	v20060609-1400:1.12
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-0800:1.6
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.21
date	2007.06.21.14.04.51;	author atikhomirov;	state Exp;
branches;
next	1.20;
commitid	1329467a85824567;

1.20
date	2007.04.11.08.10.28;	author dstadnik;	state Exp;
branches;
next	1.19;
commitid	74a1461c97f44567;

1.19
date	2007.04.10.15.31.48;	author dstadnik;	state Exp;
branches;
next	1.18;
commitid	c57461bade44567;

1.18
date	2007.04.10.09.48.56;	author dstadnik;	state Exp;
branches;
next	1.17;
commitid	225b461b5d884567;

1.17
date	2007.04.10.08.29.17;	author dstadnik;	state Exp;
branches;
next	1.16;
commitid	2320461b4adc4567;

1.16
date	2007.03.15.16.11.42;	author dstadnik;	state Exp;
branches;
next	1.15;
commitid	61e645f9703e4567;

1.15
date	2006.12.11.18.40.53;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	7ffe457da6334567;

1.14
date	2006.11.24.22.25.22;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	5fa0456771524567;

1.13
date	2006.06.26.14.23.20;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.08.13.28.17;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.07.13.52.14;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.06.12.19.39;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.06.09.56.10;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.06.08.16.35;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.05.12.55.40;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.13.11.01.53;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.23.15.45.36;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.22.22.01.15;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.18.37.50;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.19.00.10.39;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.18.19.28.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.21
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.naming.gen;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;
import org.eclipse.gmf.codegen.gmfgen.GenChildNode;
import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;
import org.eclipse.gmf.codegen.gmfgen.GenCompartment;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.GenLinkLabel;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
import org.eclipse.gmf.codegen.gmfgen.GenNodeLabel;
import org.eclipse.gmf.codegen.gmfgen.GenTopLevelNode;
import org.eclipse.gmf.codegen.gmfgen.MetamodelType;
import org.eclipse.gmf.codegen.gmfgen.SpecializationType;
import org.eclipse.gmf.internal.bridge.naming.ClassNamingStrategy;
import org.eclipse.gmf.internal.bridge.naming.DefaultNamingStrategy;
import org.eclipse.gmf.internal.bridge.naming.DesignNamingStrategy;
import org.eclipse.gmf.internal.bridge.naming.NamingStrategy;
import org.eclipse.gmf.internal.common.IncrementalNamesDispenser;
import org.eclipse.gmf.internal.common.NamesDispenser;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.NodeMapping;

/**
 * @@deprecated use GenNamingMeditor; see http://wiki.eclipse.org/index.php/GMF_Reconciler
 * 
 * @@author artem
 */
public class GenModelNamingMediatorImpl implements GenModelNamingMediator {

	private NamesDispenser myDispenser;

	private NamingStrategy myViewFactory;

	private NamingStrategy myEditPart;

	private NamingStrategy myItemSemanticPolicy;

	private NamingStrategy myCanonicalPolicy;

	private NamingStrategy myNodeGraphicalPolicy;

	private NamingStrategy myEditHelper;

	private NamingStrategy myEditHelperAdvice;

	private NamingStrategy myTypeLinkCreateCommand;

	private NamingStrategy myNodeCreateCommand;

	private NamingStrategy myLinkReorientCommand;

	public GenModelNamingMediatorImpl() {
		this(new IncrementalNamesDispenser());
	}

	public GenModelNamingMediatorImpl(NamesDispenser dispenser) {
		myDispenser = dispenser;
		setViewFactory(createNamingStrategy(GenCommonBase.NOTATION_VIEW_FACTORY_SUFFIX));
		setEditPart(createNamingStrategy(GenCommonBase.EDIT_PART_SUFFIX));
		setItemSemanticPolicy(createNamingStrategy(GenCommonBase.ITEM_SEMANTIC_EDIT_POLICY_SUFFIX));
		setCanonicalPolicy(createNamingStrategy(GenChildContainer.CANONICAL_EDIT_POLICY_SUFFIX));
		setNodeGraphicalPolicy(createNamingStrategy(GenNode.GRAPHICAL_NODE_EDIT_POLICY_SUFFIX));
		setEditHelper(createNamingStrategy(MetamodelType.EDIT_HELPER_SUFFIX));
		setEditHelperAdvice(createNamingStrategy(SpecializationType.EDIT_HELPER_ADVICE_SUFFIX));
		setTypeLinkCreateCommand(createNamingStrategy(GenLink.CREATE_COMMAND_SUFFIX));
		setNodeCreateCommand(createNamingStrategy(GenNode.CREATE_COMMAND_SUFFIX));
		setLinkReorientCommand(createNamingStrategy(GenLink.REORIENT_COMMAND_SUFFIX));
	}

	protected NamingStrategy createNamingStrategy(String suffixPart) {
		// prefix stack
		NamingStrategy pns = new DefaultNamingStrategy(null, null, null, null);
		pns = new DesignNamingStrategy(null, null, pns, null);
		pns = new ClassNamingStrategy(null, null, pns, null);
		// primary stack
		NamingStrategy ns = new DefaultNamingStrategy(suffixPart, myDispenser, null, pns);
		ns = new DesignNamingStrategy(suffixPart, myDispenser, ns, pns);
		ns = new ClassNamingStrategy(suffixPart, myDispenser, ns, pns);
		return ns;
	}

	public void setViewFactory(NamingStrategy viewFactory) {
		myViewFactory = viewFactory;
	}

	public NamingStrategy getViewFactory() {
		return myViewFactory;
	}

	public void setEditPart(NamingStrategy editPart) {
		myEditPart = editPart;
	}

	public NamingStrategy getEditPart() {
		return myEditPart;
	}

	public void setItemSemanticPolicy(NamingStrategy itemSemanticPolicy) {
		myItemSemanticPolicy = itemSemanticPolicy;
	}

	public NamingStrategy getItemSemanticPolicy() {
		return myItemSemanticPolicy;
	}

	public void setCanonicalPolicy(NamingStrategy canonicalPolicy) {
		myCanonicalPolicy = canonicalPolicy;
	}

	public NamingStrategy getCanonicalPolicy() {
		return myCanonicalPolicy;
	}

	private void setNodeGraphicalPolicy(NamingStrategy nodeGraphicalPolicy) {
		myNodeGraphicalPolicy = nodeGraphicalPolicy;
	}

	private void setNodeCreateCommand(NamingStrategy nodeCreateCommand) {
		myNodeCreateCommand = nodeCreateCommand;
	}

	private void setLinkReorientCommand(NamingStrategy strategy) {
		myLinkReorientCommand = strategy;
	}

	private NamingStrategy getNodeGraphicalPolicy() {
		return myNodeGraphicalPolicy;
	}

	public void setEditHelper(NamingStrategy editHelper) {
		this.myEditHelper = editHelper;
	}

	public NamingStrategy getEditHelper() {
		return myEditHelper;
	}

	public void setEditHelperAdvice(NamingStrategy editHelperAdvice) {
		this.myEditHelperAdvice = editHelperAdvice;
	}

	public NamingStrategy getEditHelperAdvice() {
		return myEditHelperAdvice;
	}

	public void setTypeLinkCreateCommand(NamingStrategy typeLinkCreateCommand) {
		this.myTypeLinkCreateCommand = typeLinkCreateCommand;
	}

	public NamingStrategy getTypeLinkCreateCommand() {
		return myTypeLinkCreateCommand;
	}

	public NamingStrategy getNodeCreateCommand() {
		return myNodeCreateCommand;
	}

	public NamingStrategy getLinkReorientCommand() {
		return myLinkReorientCommand;
	}

	public void feed(GenDiagram genDiagram, CanvasMapping cme) {
		genDiagram.setNotationViewFactoryClassName(getViewFactory().get(cme));
		myDispenser.add(genDiagram.getBaseExternalNodeLabelEditPartClassName());
		genDiagram.setEditPartClassName(getEditPart().get(cme));
		myDispenser.add(genDiagram.getBaseItemSemanticEditPolicyClassName());
		genDiagram.setItemSemanticEditPolicyClassName(getItemSemanticPolicy().get(cme));
		genDiagram.setCanonicalEditPolicyClassName(getCanonicalPolicy().get(cme));
		myDispenser.add(genDiagram.getBaseGraphicalNodeEditPolicyClassName());
		myDispenser.add(genDiagram.getBaseEditHelperClassName());
		feedElementType(genDiagram, cme);
	}

	public void feed(GenTopLevelNode genNode, NodeMapping nme) {
		genNode.setNotationViewFactoryClassName(getViewFactory().get(nme));
		genNode.setEditPartClassName(getEditPart().get(nme));
		genNode.setItemSemanticEditPolicyClassName(getItemSemanticPolicy().get(nme));
		genNode.setCanonicalEditPolicyClassName(getCanonicalPolicy().get(nme));
		genNode.setGraphicalNodeEditPolicyClassName(getNodeGraphicalPolicy().get(nme));
		genNode.setCreateCommandClassName(getNodeCreateCommand().get(nme));
		feedElementType(genNode, nme);
	}

	public void feed(GenChildNode childNode, NodeMapping nme) {
		childNode.setNotationViewFactoryClassName(getViewFactory().get(nme));
		childNode.setEditPartClassName(getEditPart().get(nme));
		childNode.setItemSemanticEditPolicyClassName(getItemSemanticPolicy().get(nme));
		childNode.setCanonicalEditPolicyClassName(getCanonicalPolicy().get(nme));
		childNode.setGraphicalNodeEditPolicyClassName(getNodeGraphicalPolicy().get(nme));
		childNode.setCreateCommandClassName(getNodeCreateCommand().get(nme));
		feedElementType(childNode, nme);
	}

	public void feed(GenLink genLink, LinkMapping lme) {
		genLink.setNotationViewFactoryClassName(getViewFactory().get(lme));
		genLink.setEditPartClassName(getEditPart().get(lme));
		genLink.setItemSemanticEditPolicyClassName(getItemSemanticPolicy().get(lme));
		feedElementType(genLink, lme);
		genLink.setCreateCommandClassName(getTypeLinkCreateCommand().get(lme));
		genLink.setReorientCommandClassName(getLinkReorientCommand().get(lme));
	}

	public void feed(GenCompartment genCompartment, CompartmentMapping mapping) {
		genCompartment.setNotationViewFactoryClassName(getViewFactory().get(mapping));
		genCompartment.setEditPartClassName(getEditPart().get(mapping));
		genCompartment.setItemSemanticEditPolicyClassName(getItemSemanticPolicy().get(mapping));
		genCompartment.setCanonicalEditPolicyClassName(getCanonicalPolicy().get(mapping));
	}

	public void feed(GenNodeLabel label, LabelMapping labelMapping) {
		label.setNotationViewFactoryClassName(getViewFactory().get(labelMapping));
		label.setEditPartClassName(getEditPart().get(labelMapping));
		label.setItemSemanticEditPolicyClassName(getItemSemanticPolicy().get(labelMapping));
		feedElementType(label, labelMapping);
	}

	public void feed(GenLinkLabel label, LabelMapping labelMapping) {
		label.setNotationViewFactoryClassName(getViewFactory().get(labelMapping));
		label.setEditPartClassName(getEditPart().get(labelMapping));
		label.setItemSemanticEditPolicyClassName(getItemSemanticPolicy().get(labelMapping));
		feedElementType(label, labelMapping);
	}

	public void reset() {
		if (myDispenser != null) {
			myDispenser.clear();
		}
	}

	protected void feedElementType(GenCommonBase element, EObject mapping) {
		if (element.getElementType() instanceof MetamodelType) {
			MetamodelType type = (MetamodelType) element.getElementType();
			type.setEditHelperClassName(getName(getEditHelper(), mapping));
		} else if (element.getElementType() instanceof SpecializationType) {
			SpecializationType type = (SpecializationType) element.getElementType();
			type.setEditHelperAdviceClassName(getName(getEditHelperAdvice(), mapping));
		}
	}

	protected static String getName(NamingStrategy strategy, EObject mapping) {
		if (mapping instanceof CanvasMapping) {
			return strategy.get((CanvasMapping) mapping);
		} else if (mapping instanceof NodeMapping) {
			return strategy.get((NodeMapping) mapping);
		} else if (mapping instanceof LinkMapping) {
			return strategy.get((LinkMapping) mapping);
		} else if (mapping instanceof CompartmentMapping) {
			return strategy.get((CompartmentMapping) mapping);
		} else if (mapping instanceof LabelMapping) {
			return strategy.get((LabelMapping) mapping);
		}
		throw new IllegalArgumentException();
	}
}
@


1.20
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.19
log
@[155332] Reconcile edit part class names
@
text
@a26 1
import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;
d81 1
a81 1
		setTypeLinkCreateCommand(createNamingStrategy(TypeLinkModelFacet.CREATE_COMMAND_SUFFIX));
d215 1
a215 4
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			modelFacet.setCreateCommandClassName(getTypeLinkCreateCommand().get(lme));
		}
@


1.18
log
@remove stale code
@
text
@d41 2
@


1.17
log
@format
@
text
@a56 2
	private NamingStrategy myTextViewFactory;

a128 8
	public void setTextViewFactory(NamingStrategy textViewFactory) {
		myTextViewFactory = textViewFactory;
	}

	public NamingStrategy getTextViewFactory() {
		return myTextViewFactory;
	}

@


1.16
log
@[114348] Generate command to reorient link
@
text
@d142 1
a142 1
	
d166 1
a166 1
	
d174 1
a174 1
	
d178 1
a178 1
	
d186 1
a186 1
	
@


1.15
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d67 2
d84 1
d147 4
d182 4
d228 1
@


1.14
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d65 2
d81 1
d139 4
d172 4
d194 1
d204 1
@


1.13
log
@not ready for API, internal for now
@
text
@d27 1
d63 2
d78 1
d152 1
a152 1

d157 8
d200 4
@


1.12
log
@#144680 Use diagram element name from gmfgraph model for pure design elements
@
text
@a26 2
import org.eclipse.gmf.common.IncrementalNamesDispenser;
import org.eclipse.gmf.common.NamesDispenser;
d31 2
@


1.11
log
@#145502 Naming strategy and gmfgen model objects should generate consistent class names
@
text
@d78 8
a85 3
		NamingStrategy ns = new DefaultNamingStrategy(suffixPart, myDispenser);
		ns = new DesignNamingStrategy(suffixPart, ns, myDispenser);
		ns = new ClassNamingStrategy(suffixPart, ns, myDispenser);
@


1.10
log
@rename strategy Name -> Naming
@
text
@d30 2
d68 14
a81 7
		setViewFactory(new ClassNamingStrategy(GenCommonBase.NOTATION_VIEW_FACTORY_SUFFIX, null, dispenser));
		setEditPart(new ClassNamingStrategy(GenCommonBase.EDIT_PART_SUFFIX, null, dispenser));
		setItemSemanticPolicy(new ClassNamingStrategy(GenCommonBase.ITEM_SEMANTIC_EDIT_POLICY_SUFFIX, null, dispenser));
		setCanonicalPolicy(new ClassNamingStrategy(GenChildContainer.CANONICAL_EDIT_POLICY_SUFFIX, null, dispenser));
		setNodeGraphicalPolicy(new ClassNamingStrategy(GenNode.GRAPHICAL_NODE_EDIT_POLICY_SUFFIX, null, dispenser));
		setEditHelper(new ClassNamingStrategy(MetamodelType.EDIT_HELPER_SUFFIX, null, dispenser));
		setEditHelperAdvice(new ClassNamingStrategy(SpecializationType.EDIT_HELPER_ADVICE_SUFFIX, null, dispenser));
@


1.9
log
@#145486 Ensure that edit helper names are unique after gmfgen model generation from gmfmap
@
text
@d29 1
a29 1
import org.eclipse.gmf.internal.bridge.naming.ClassNameStrategy;
d66 7
a72 7
		setViewFactory(new ClassNameStrategy(GenCommonBase.NOTATION_VIEW_FACTORY_SUFFIX, null, dispenser));
		setEditPart(new ClassNameStrategy(GenCommonBase.EDIT_PART_SUFFIX, null, dispenser));
		setItemSemanticPolicy(new ClassNameStrategy(GenCommonBase.ITEM_SEMANTIC_EDIT_POLICY_SUFFIX, null, dispenser));
		setCanonicalPolicy(new ClassNameStrategy(GenChildContainer.CANONICAL_EDIT_POLICY_SUFFIX, null, dispenser));
		setNodeGraphicalPolicy(new ClassNameStrategy(GenNode.GRAPHICAL_NODE_EDIT_POLICY_SUFFIX, null, dispenser));
		setEditHelper(new ClassNameStrategy(MetamodelType.EDIT_HELPER_SUFFIX, null, dispenser));
		setEditHelperAdvice(new ClassNameStrategy(SpecializationType.EDIT_HELPER_ADVICE_SUFFIX, null, dispenser));
@


1.8
log
@#144872 Unique figure and diagram element names should be used when graph def is generated for domain model with abstract class
@
text
@d14 1
d25 2
d56 4
d71 2
d123 16
d141 1
d143 1
d146 3
a148 1
		getNodeGraphicalPolicy().getNamesDispenser().add(genDiagram.getBaseGraphicalNodeEditPolicyClassName()); // #127310
d157 1
d166 1
d173 1
d187 1
d194 1
d202 25
@


1.7
log
@#127310 GraphicalNodeEditPolicy Name conflict when Canvas and Node Mapping have the same domain element
@
text
@d24 2
a26 1
import org.eclipse.gmf.internal.bridge.naming.CollectingDispenser;
a27 1
import org.eclipse.gmf.internal.bridge.naming.UniqueValueDispenser;
d39 2
a40 1
	private UniqueValueDispenser myDispenser;
d42 1
d44 1
d46 1
d48 1
d50 1
d54 1
a54 1
		this(new CollectingDispenser());
d57 2
a58 1
	public GenModelNamingMediatorImpl(UniqueValueDispenser dispenser) {
a65 4
	public UniqueValueDispenser getDispenser() {
		return myDispenser;
	}

a105 8
	public void feed(GenDiagram genDiagram, CanvasMapping cme) {
		genDiagram.setNotationViewFactoryClassName(getViewFactory().get(cme));
		genDiagram.setEditPartClassName(getEditPart().get(cme));
		genDiagram.setItemSemanticEditPolicyClassName(getItemSemanticPolicy().get(cme));
		genDiagram.setCanonicalEditPolicyClassName(getCanonicalPolicy().get(cme));
		getNodeGraphicalPolicy().getCache().remember(genDiagram.getBaseGraphicalNodeEditPolicyClassName()); // #127310
	}

d114 8
d162 6
@


1.6
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d108 1
@


1.5
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@a44 1
	private NamingStrategy myTextEditPart;
a56 2
		setTextEditPart(new ClassNameStrategy(GenLinkLabel.TEXT_EDIT_PART_SUFFIX, null, dispenser));
		setTextViewFactory(new ClassNameStrategy(GenLinkLabel.TEXT_NOTATION_VIEW_FACTORY_SUFFIX, null, dispenser));
a117 8
	private void setTextEditPart(NamingStrategy textEditPart) {
		myTextEditPart = textEditPart;
	}

	private NamingStrategy getTextEditPart() {
		return myTextEditPart;
	}

a154 1
		label.setTextNotationViewFactoryClassName(getTextViewFactory().get(labelMapping));
a155 1
		label.setTextEditPartClassName(getTextEditPart().get(labelMapping));
@


1.4
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@a28 1
import org.eclipse.gmf.mappings.ChildNodeMapping;
d137 1
a137 1
	public void feed(GenChildNode childNode, ChildNodeMapping nme) {
@


1.3
log
@#127461 Support multiple labels definition in the mapping model
@
text
@d25 1
a26 1
import org.eclipse.gmf.internal.bridge.naming.CollectingDispenser;
a27 1
import org.eclipse.gmf.mappings.AbstractNodeMapping;
d31 1
a31 1
import org.eclipse.gmf.mappings.LinkLabelMapping;
a32 1
import org.eclipse.gmf.mappings.NodeLabelMapping;
d159 4
a162 4
	public void feed(GenNodeLabel label, AbstractNodeMapping mapping, NodeLabelMapping labelMapping) {
		label.setNotationViewFactoryClassName(getViewFactory().getForEditFeature(mapping, labelMapping));
		label.setEditPartClassName(getEditPart().getForEditFeature(mapping, labelMapping));
		label.setItemSemanticEditPolicyClassName(getItemSemanticPolicy().getForEditFeature(mapping, labelMapping));
d165 6
a170 6
	public void feed(GenLinkLabel label, LinkMapping mapping, LinkLabelMapping labelMapping) {
		label.setNotationViewFactoryClassName(getViewFactory().getForEditFeature(mapping, labelMapping));
		label.setTextNotationViewFactoryClassName(getTextViewFactory().getForEditFeature(mapping, labelMapping));
		label.setEditPartClassName(getEditPart().getForEditFeature(mapping, labelMapping));
		label.setTextEditPartClassName(getTextEditPart().getForEditFeature(mapping, labelMapping));
		label.setItemSemanticEditPolicyClassName(getItemSemanticPolicy().getForEditFeature(mapping, labelMapping));
@


1.2
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d32 1
d34 1
d161 4
a164 4
	public void feed(GenNodeLabel label, AbstractNodeMapping mapping) {
		label.setNotationViewFactoryClassName(getViewFactory().getForEditFeature(mapping));
		label.setEditPartClassName(getEditPart().getForEditFeature(mapping));
		label.setItemSemanticEditPolicyClassName(getItemSemanticPolicy().getForEditFeature(mapping));
d167 6
a172 6
	public void feed(GenLinkLabel label, LinkMapping mapping) {
		label.setNotationViewFactoryClassName(getViewFactory().getForEditFeature(mapping));
		label.setTextNotationViewFactoryClassName(getTextViewFactory().getForEditFeature(mapping));
		label.setEditPartClassName(getEditPart().getForEditFeature(mapping));
		label.setTextEditPartClassName(getTextEditPart().getForEditFeature(mapping));
		label.setItemSemanticEditPolicyClassName(getItemSemanticPolicy().getForEditFeature(mapping));
@


1.1
log
@refactor NamingStrategy: extracted all className setters to provisional NamingMediator
@
text
@d23 1
d130 1
a130 1
	public void feed(GenNode genNode, NodeMapping nme) {
@

