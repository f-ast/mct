head	1.11;
access;
symbols
	v20081015-1925:1.11
	v20080917-1925:1.11
	v20080903-1520:1.11
	v20080827-1520:1.11
	v20080813-1520:1.11
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	v20060620-0400:1.10
	v20060616-1200:1.10
	v20060609-1400:1.10
	v20060531-1730:1.10
	v20060530-1930:1.10
	v20060526-1200:1.10
	v20060519-0800:1.10
	v20060512-1000:1.10
	I20060512-1000:1.10
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.7
	I20060324-0300:1.7
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.7
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.6
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3
	v20050828:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2006.06.26.14.05.05;	author atikhomirov;	state dead;
branches;
next	1.10;

1.10
date	2006.05.11.09.42.06;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.10.15.12.36;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.03.12.53.10;	author radvorak;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.03.11.36.23;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.23.15.45.36;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.06.22.21.18;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.14.12.55.56;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.04.18.28.27;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.04.20.06.45;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.19.10;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.11
log
@no api packages, classes are for internal use only
@
text
@/*
 * Copyright (c) 2005 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.bridge.genmodel;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.gmf.gmfgraph.Identity;
import org.eclipse.gmf.mappings.AuditContainer;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.MetricContainer;
import org.eclipse.gmf.mappings.TopNodeReference;
import org.eclipse.gmf.runtime.notation.NotationPackage;

/**
 * Creates bare extended version of basic Diagram Run-Time model from gmfmap. 
 * This extended version is expected to be modified by toolsmith to capture additional
 * attributes/features of diagram.
 * @@author artem
 */
public class DiagramRunTimeModelTransformer extends MappingTransformer {
	private final EPackage myPackage;

	public DiagramRunTimeModelTransformer(String modelName, String modelNsURI) {
		myPackage = EcoreFactory.eINSTANCE.createEPackage();
		myPackage.setName(modelName);
		myPackage.setNsPrefix(modelName+"-drt");
		myPackage.setNsURI(modelNsURI);
	}

	public EPackage getResult() {
		return myPackage;
	}

	protected void process(CanvasMapping cme) {
		addEClass(cme.getDiagramCanvas(), NotationPackage.eINSTANCE.getDiagram());
	}

	protected void process(TopNodeReference topNode) {
		addEClass(topNode.getChild().getDiagramNode(), NotationPackage.eINSTANCE.getNode());
	}

	protected void process(LinkMapping lme) {
		addEClass(lme.getDiagramLink(), NotationPackage.eINSTANCE.getEdge());
	}

	private void addEClass(Identity diaDefElement, EClass superClass) {
		EClass c = createEClass(diaDefElement.getName(), superClass);
		myPackage.getEClassifiers().add(c);
//		for (Iterator it = diaDefElement.getProperties().iterator(); it.hasNext();) {
//			RunTimeProperty p = (RunTimeProperty) it.next();
//			EAttribute a = EcoreFactory.eINSTANCE.createEAttribute();
//			a.setName(p.getName());
//			a.setEType(EcorePackage.eINSTANCE.getEString());
//			c.getEStructuralFeatures().add(a);
//		}
	}

	private EClass createEClass(String name, EClass superClass) {
		EClass c = EcoreFactory.eINSTANCE.createEClass();
		c.setName(name);
		c.getESuperTypes().add(superClass);
		return c;
	}

	protected void process(AuditContainer audits) {
	}

	protected void process(MetricContainer metrics) {
	}
}
@


1.10
log
@revert to gmfmap model compatibility
@
text
@@


1.9
log
@#133836 Creating a child node without a label causes error
@
text
@a21 1
import org.eclipse.gmf.mappings.ShapeNodeMapping;
d50 1
a50 1
		addEClass(((ShapeNodeMapping) topNode.getChild()).getDiagramNode(), NotationPackage.eINSTANCE.getNode());
@


1.8
log
@#134085 Implement metrics transformation from gmfmap to gmfgen model
@
text
@d22 1
d51 1
a51 1
		addEClass(topNode.getChild().getDiagramNode(), NotationPackage.eINSTANCE.getNode());
@


1.7
log
@#130009 Enable audit rules on diagram (notation model) elements in gmfmap model
@
text
@d21 1
d79 2
@


1.6
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d18 1
d74 4
@


1.5
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@d20 1
a20 1
import org.eclipse.gmf.mappings.NodeMapping;
d47 2
a48 2
	protected void process(NodeMapping nme) {
		addEClass(nme.getDiagramNode(), NotationPackage.eINSTANCE.getNode());
@


1.4
log
@spelling (Transofrmer -> Transformer)
@
text
@a13 3
import java.util.Iterator;

import org.eclipse.emf.ecore.EAttribute;
d17 1
a17 3
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.diadef.CommonBase;
import org.eclipse.gmf.diadef.RunTimeProperty;
d55 1
a55 1
	private void addEClass(CommonBase diaDefElement, EClass superClass) {
d58 7
a64 7
		for (Iterator it = diaDefElement.getProperties().iterator(); it.hasNext();) {
			RunTimeProperty p = (RunTimeProperty) it.next();
			EAttribute a = EcoreFactory.eINSTANCE.createEAttribute();
			a.setName(p.getName());
			a.setEType(EcorePackage.eINSTANCE.getEString());
			c.getEStructuralFeatures().add(a);
		}
@


1.3
log
@get rid of old diagramrt, use o.e.gmf.diagram.notation instead
@
text
@d34 1
a34 1
public class DiagramRunTimeModelTransformer extends MappingTransofrmer {
@


1.2
log
@use appropriate strcutural feature
@
text
@a22 1
import org.eclipse.gmf.diagramrt.DiagramRTPackage;
d26 1
d49 1
a49 1
		addEClass(cme.getDiagramCanvas(), DiagramRTPackage.eINSTANCE.getDiagramCanvas());
d53 1
a53 1
		addEClass(nme.getDiagramNode(), DiagramRTPackage.eINSTANCE.getDiagramNode());
d57 1
a57 1
		addEClass(lme.getDiagramLink(), DiagramRTPackage.eINSTANCE.getDiagramLink());
@


1.1
log
@*** empty log message ***
@
text
@d68 1
a68 1
			c.getEAttributes().add(a);
@

