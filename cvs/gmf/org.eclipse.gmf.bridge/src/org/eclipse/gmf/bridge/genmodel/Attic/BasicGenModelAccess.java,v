head	1.7;
access;
symbols
	v20081015-1925:1.7
	v20080917-1925:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060620-0400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-0800:1.6
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2006.06.26.14.05.05;	author atikhomirov;	state dead;
branches;
next	1.6;

1.6
date	2006.02.14.20.09.53;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.09.19.10.05;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.19.17.27.34;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.14.10.43.54;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.06.19.40.11;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.06.18.58.23;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.7
log
@no api packages, classes are for internal use only
@
text
@/*
 * Copyright (c) 2005 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.bridge.genmodel;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.codegen.ecore.genmodel.GenModel;
import org.eclipse.emf.codegen.ecore.genmodel.GenModelFactory;
import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.common.util.WrappedException;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;

/**
 * @@author artem
 */
public class BasicGenModelAccess implements GenModelAccess {
	private final EPackage model;

	private GenModel genModel;

	private final List/* <URI> */locations = new LinkedList();

	private boolean needUnload;

	public BasicGenModelAccess(EPackage aModel) {
		this.model = aModel;
	}

	public void initDefault() {
		registerLocation(constructDefaultFromModel());
		registerLocation(fromExtpoint());
	}

	protected final URI fromExtpoint() {
		return fromExtpoint(model.getNsURI());
	}

	/**
	 * Useful when nsURI changed over time to reference old URI of the model.
	 * Otherwise {@@link #fromExtpoint()} is enough.
	 * 
	 * @@param nsURI
	 * @@return uri registered in ecore's extpoint, if any
	 */
	protected final URI fromExtpoint(String nsURI) {
		return (URI) EcorePlugin.getEPackageNsURIToGenModelLocationMap().get(nsURI);
	}

	protected final URI constructDefaultFromModel() {
		if (model.eResource() == null || model.getNsURI() == null) {
			return null;
		}
		URI domainModelURI = model.eResource().getURI();
		if (model.getNsURI().equals(domainModelURI.toString())) {
			return null;
		}
		URI genModelURI = domainModelURI.trimFileExtension().appendFileExtension("genmodel");
		if (genModelURI.equals(domainModelURI)) {
			return null;
		}
		// XXX should keep distinct resourceSet with URI to use different rs
		// while loading?
		/*
		 * //
		 * 
		 * @@see org.eclipse.emf.importer.ModelImporter.getExternalGenModels()
		 *      Resource genModelResource = rs.getResource(genModelURI, false);
		 *      if (genModelResource == null) { genModelResource =
		 *      rs.getResource(genModelURI, true); if (genModelResource != null) {
		 *      return (GenModel) genModelResource.getContents().get(0); } }
		 */
		return genModelURI;
	}

	protected final EPackage original() {
		return model;
	}

	public GenModel model() {
		// if genModel == null load()?
		return genModel;
	}

	public IStatus ensure() {
		IStatus loadStatus = load();
		if (loadStatus.isOK()) {
			return loadStatus;
		}
		return createDummy();
	}

	public IStatus load() {
		ResourceSet rs = model.eResource() == null || model.eResource().getResourceSet() == null ? new ResourceSetImpl() : model.eResource().getResourceSet();
		return load(rs);
	}

	public IStatus load(ResourceSet rs) {
		assert !locations.isEmpty(); // XXX if isEmpty() initDefault?
		for (Iterator/* <URI> */it = locations.iterator(); it.hasNext();) {
			try {
				URI uri = (URI) it.next();
				Resource r = rs.getResource(uri, false);
				needUnload = r == null || !r.isLoaded();
				r = rs.getResource(uri, true);
				if (r != null) {
					genModel = (GenModel) r.getContents().get(0);
					return Status.OK_STATUS;
				}
			} catch (WrappedException ex) {
				// FIXME collect into status
				System.err.println(ex.getMessage());
			}
		}
		needUnload = false;
		return Status.CANCEL_STATUS; // FIXME
	}

	/**
	 * Use with care, model elements obtained earlier will become proxies.
	 */
	public void unload() {
		if (needUnload && genModel != null) {
			genModel.eResource().unload();
			genModel = null;
		}
		needUnload = false;
	}

	public IStatus createDummy() {
		return createDummy(false, Collections.EMPTY_LIST);
	}

	public IStatus createDummy(boolean includeAllReferencedPackages, Collection/*<EPackage>*/ additionalPackages) {
		String pluginID = "org.sample." + model.getName();
		genModel = GenModelFactory.eINSTANCE.createGenModel();
		if (includeAllReferencedPackages) {
			HashSet allPacks = new HashSet();
			allPacks.add(model);
			allPacks.addAll(additionalPackages);
			// TODO override method in crossReferencer to get only EClasses
			Map m = EcoreUtil.ExternalCrossReferencer.find(model);
			for (Iterator it = m.keySet().iterator(); it.hasNext(); ) {
				Object next = it.next();
				if (next instanceof EClass) {
					allPacks.add(((EClass) next).getEPackage());
				}
			}
			genModel.initialize(allPacks);
		} else {
			genModel.initialize(Collections.singleton(model));
		}
		genModel.setModelName(model.getName() + "Gen");
		genModel.setModelPluginID(pluginID);
		genModel.setModelDirectory("/" + pluginID + "/src/");
		genModel.setEditDirectory(genModel.getModelDirectory());
		Resource r = new ResourceSetImpl().createResource(URI.createGenericURI("uri", pluginID, null));
		r.getContents().add(genModel);

		// need different prefix to avoid name collisions with code generated
		// for domain model
		
		for (Iterator it = genModel.getGenPackages().iterator(); it.hasNext();) {
			GenPackage genPackage = (GenPackage) it.next();
			genPackage.setPrefix(genPackage.getEcorePackage().getName() + "Gen");
		}
		return Status.OK_STATUS;
	}

	public boolean hasLocations() {
		return locations != null && !locations.isEmpty();
	}

	protected void registerLocation(URI location) {
		if (location != null) {
			locations.add(location);
		}
	}

	protected void unregsiterLocation(URI location) {
		locations.remove(location);
	}
}
@


1.6
log
@#116432 - ask user to supply genmodel if we notice several domain packages
and #123608 to some extent - with genModel set, no more easy-to-get NPEs should occur while transforming
@
text
@@


1.5
log
@#116432 support domain models comprising of several packages
@
text
@d74 3
d117 5
a122 1
		ResourceSet rs = model.eResource() == null || model.eResource().getResourceSet() == null ? new ResourceSetImpl() : model.eResource().getResourceSet();
d146 1
a146 1
		if (needUnload) {
d148 1
d193 4
@


1.4
log
@refrain from unloading genmodel for rt to avoid proxy resolution
@
text
@d14 1
d16 1
d20 1
d29 1
d35 1
a38 1
 *
d42 5
a46 2
	private GenModel genModel; 
	private final List/*<URI>*/ locations = new LinkedList();
d63 1
a63 1
	 * Useful when nsURI changed over time to reference old URI of the model. 
d65 1
d82 11
a92 11
		// XXX should keep distinct resourceSet with URI to use different rs while loading?  
/*
		// @@see org.eclipse.emf.importer.ModelImporter.getExternalGenModels()
		Resource genModelResource = rs.getResource(genModelURI, false);
		if (genModelResource == null) {
			genModelResource = rs.getResource(genModelURI, true);
			if (genModelResource != null) {
				return (GenModel) genModelResource.getContents().get(0);
			}
		}
*/
d116 1
a116 1
		for (Iterator/*<URI>*/ it = locations.iterator(); it.hasNext();) {
d146 4
d151 32
a182 13
        genModel = GenModelFactory.eINSTANCE.createGenModel();
        genModel.initialize(Collections.singleton(model));
        GenPackage genPackage = (GenPackage) genModel.getGenPackages().get(0);
        genModel.setModelName(model.getName() + "Gen");
        genModel.setModelPluginID(pluginID);
        genModel.setModelDirectory("/" + pluginID + "/src/");
        genModel.setEditDirectory(genModel.getModelDirectory());
        Resource r = new ResourceSetImpl().createResource(URI.createGenericURI("uri", pluginID, null));
        r.getContents().add(genModel);
        
        // need different prefix to avoid name collisions with code generated for domain model
        genPackage.setPrefix(model.getName() + "Gen");
        return Status.OK_STATUS;
@


1.3
log
@first try location next to domainModel.ecore (from dev/runtime workspaces), then fall back to extension point (from dev workspace/installation)
Especially useful in case both dev and runtime workbenches contains same model/genmodel files
@
text
@d127 3
@


1.2
log
@refactor GenModel access with dedicated hack to get Notation/Runtime GenModel
@
text
@d47 1
a48 1
		registerLocation(constructDefaultFromModel());
@


1.1
log
@refactor GenModel access with dedicated hack to get Notation/Runtime GenModel
@
text
@d25 1
d46 1
a46 1
	protected void initDefault() {
d66 4
a69 1
		URI domainModelURI = model.eResource().getURI(); 
d106 2
a107 1
		ResourceSet rs = model.eResource() == null ? new ResourceSetImpl() : model.eResource().getResourceSet();
d109 12
a120 7
			URI uri = (URI) it.next();
			Resource r = rs.getResource(uri, false);
			needUnload = r == null || !r.isLoaded();
			r = rs.getResource(uri, true);
			if (r != null) {
				genModel = (GenModel) r.getContents().get(0);
				return Status.OK_STATUS;
@

