head	1.5;
access;
symbols
	v20081015-1925:1.5
	v20080917-1925:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060620-0400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.2
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1
	M3_10:1.1
	I20051118-1245:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.06.26.14.05.05;	author atikhomirov;	state dead;
branches;
next	1.4;

1.4
date	2006.04.03.12.53.10;	author radvorak;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.03.11.36.23;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.23.15.45.36;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.14.12.55.56;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@no api packages, classes are for internal use only
@
text
@/*
 * Copyright (c) 2005 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.bridge.genmodel;

import java.util.Iterator;

import org.eclipse.gmf.mappings.AuditContainer;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.Mapping;
import org.eclipse.gmf.mappings.MetricContainer;
import org.eclipse.gmf.mappings.TopNodeReference;

/**
 * Encapsulates iteration over diagram definition.
 * @@author artem
 */
public abstract class MappingTransformer {

	public void transform(Mapping m) {
		process(m.getDiagram());
		for (Iterator it = m.getNodes().iterator(); it.hasNext();) {
			process((TopNodeReference) it.next());
		}
		for (Iterator it = m.getLinks().iterator(); it.hasNext();) {
			process((LinkMapping) it.next());
		}
		
		process(m.getMetrics());		
		process(m.getAudits());
	}

	protected abstract void process(CanvasMapping cme);
	protected abstract void process(TopNodeReference topNode);
	protected abstract void process(LinkMapping lme);
	protected abstract void process(AuditContainer audits);
	protected abstract void process(MetricContainer metrics);	
}@


1.4
log
@#134085 Implement metrics transformation from gmfmap to gmfgen model
@
text
@@


1.3
log
@#130009 Enable audit rules on diagram (notation model) elements in gmfmap model
@
text
@d20 1
d37 2
d46 1
@


1.2
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d16 1
d36 1
d42 1
@


1.1
log
@spelling (Transofrmer -> Transformer)
@
text
@d19 1
a19 1
import org.eclipse.gmf.mappings.NodeMapping;
d30 1
a30 1
			process((NodeMapping) it.next());
d38 1
a38 1
	protected abstract void process(NodeMapping nme);
@

