head	1.2;
access;
symbols
	v20081015-1925:1.2
	v20080917-1925:1.2
	v20080903-1520:1.2
	v20080827-1520:1.2
	v20080813-1520:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2005.11.14.12.55.56;	author atikhomirov;	state dead;
branches;
next	1.1;

1.1
date	2005.08.03.22.19.10;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@spelling (Transofrmer -> Transformer)
@
text
@/*
 * Copyright (c) 2005 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.bridge.genmodel;

import java.util.Iterator;

import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.Mapping;
import org.eclipse.gmf.mappings.NodeMapping;

/**
 * Encapsulates iteration over diagram definition.
 * @@author artem
 */
public abstract class MappingTransofrmer {

	public void transform(Mapping m) {
		process(m.getDiagram());
		for (Iterator it = m.getNodes().iterator(); it.hasNext();) {
			process((NodeMapping) it.next());
		}
		for (Iterator it = m.getLinks().iterator(); it.hasNext();) {
			process((LinkMapping) it.next());
		}
	}

	protected abstract void process(CanvasMapping cme);
	protected abstract void process(NodeMapping nme);
	protected abstract void process(LinkMapping lme);
}@


1.1
log
@*** empty log message ***
@
text
@@

