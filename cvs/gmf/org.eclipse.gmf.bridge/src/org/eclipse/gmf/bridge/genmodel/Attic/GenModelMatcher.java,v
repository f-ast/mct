head	1.7;
access;
symbols
	v20081015-1925:1.7
	v20080917-1925:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060620-0400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-0800:1.6
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.5
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2006.06.26.14.05.05;	author atikhomirov;	state dead;
branches;
next	1.6;

1.6
date	2006.02.24.18.05.39;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.14.20.09.54;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.06.19.40.11;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.06.18.58.23;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.15.28.58;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.04.13.18.12;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.7
log
@no api packages, classes are for internal use only
@
text
@/*
 * Copyright (c) 2005 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.bridge.genmodel;

import java.util.Iterator;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
import org.eclipse.emf.codegen.ecore.genmodel.GenModel;
import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EStructuralFeature;

/**
 * @@author artem
 */
public class GenModelMatcher {
	private final GenModel myEMFGenModel;

	public GenModelMatcher(GenModel genModel) {
		assert genModel != null;
		myEMFGenModel = genModel;
	}

	/**
	 * Rather use some subtype of {@@link GenModelAccess} to 
	 * get {@@link GenModel} and {@@link #GenModelMatcher(GenModel)}.
	 * @@param domainModel
	 * @@throws IllegalStateException if genmodel could not be found
	 */
	public GenModelMatcher(EPackage domainModel) {
		BasicGenModelAccess gma = new BasicGenModelAccess(domainModel);
		gma.initDefault();
		if (gma.load().isOK()) {
			myEMFGenModel = gma.model();
		} else {
			throw new IllegalStateException("Can't find genModel for domain model with nsURI=" + domainModel.getNsURI());
		}
	}

	public GenModel getGenModel() {
		return myEMFGenModel;
	}

	/**
	 * @@param domainPackage
	 * @@return <code>null</code> in case <code>domainPackage</code> is <code>null</code> or no matching package found.
	 */
	public GenPackage findGenPackage(EPackage domainPackage) {
		return domainPackage == null ? null : getGenModel().findGenPackage(domainPackage);
	}

	/**
	 * @@param domainMetaClass
	 * @@return respective <code>GenClass</code>, or <code>null</code> if <code>domainMetaClass</code> is <code>null</code>.
	 * @@throws IllegalStateException if no matching <code>GenClass</code> found.
	 */
	public GenClass findGenClass(EClass domainMetaClass) {
		if (domainMetaClass == null) {
			return null;
		}
		GenPackage gp = findGenPackage(domainMetaClass.getEPackage());
		if (gp == null) {
			throw new IllegalStateException("Can't find genPackage for " + domainMetaClass.getEPackage());
		}
		for (Iterator it = gp.getGenClasses().iterator(); it.hasNext();) {
			GenClass genClass = (GenClass) it.next();
			if (genClass.getEcoreClass().equals(domainMetaClass)) {
				return genClass;
			}
		}
		throw new IllegalStateException("Can't find genClass for class '" + domainMetaClass.getName() + "' in package " + gp.getPackageName());
	}

	/**
	 * 
	 * @@param domainMetaFeature
	 * @@return respective <code>GenFeature</code>, or <code>null</code> if <code>domainMetaFeature</code> is <code>null</code>.
	 * @@throws IllegalStateException if no matching <code>GenFeature</code> found.
	 */
	public GenFeature findGenFeature(EStructuralFeature domainMetaFeature) {
		if (domainMetaFeature == null) {
			return null;
		}
		GenClass genClass = findGenClass(domainMetaFeature.getEContainingClass());
		for (Iterator it = genClass.getGenFeatures().iterator(); it.hasNext();) {
			GenFeature next = (GenFeature) it.next();
			if (next.getEcoreFeature().equals(domainMetaFeature)) {
				return next;
			}
		}
		throw new IllegalStateException("Can't find genFeature for feature '" + domainMetaFeature.getName() + "' in class " + genClass.getName());
	}
}
@


1.6
log
@IllegalStateException with message is better than NPE
@
text
@@


1.5
log
@#116432 - ask user to supply genmodel if we notice several domain packages
and #123608 to some extent - with genModel set, no more easy-to-get NPEs should occur while transforming
@
text
@d73 3
@


1.4
log
@refactor GenModel access with dedicated hack to get Notation/Runtime GenModel
@
text
@d47 1
a47 1
			throw new IllegalStateException();
@


1.3
log
@refactor GenModel access with dedicated hack to get Notation/Runtime GenModel
@
text
@d43 1
@


1.2
log
@fix NPE
few doc lines
@
text
@a19 1
import org.eclipse.emf.common.util.URI;
a22 3
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
d35 6
d42 4
a45 2
		myEMFGenModel = findGenModel(domainModel);
		if (myEMFGenModel == null) {
a99 27

	public static GenModel findGenModel(EPackage model) {
		if (model == null) {
			return null;
		}
		URI genModelURI = (URI) EcorePlugin.getEPackageNsURIToGenModelLocationMap().get(model.getNsURI());
		if (genModelURI == null) {
			URI domainModelURI = model.eResource().getURI(); 
			genModelURI = domainModelURI.trimFileExtension().appendFileExtension("genmodel");
			if (genModelURI.equals(domainModelURI)) {
				genModelURI = null; // don't even try, then
			}
		}
		if (genModelURI == null) {
			return null;
		}
		ResourceSet rs = model.eResource().getResourceSet();
		// @@see org.eclipse.emf.importer.ModelImporter.getExternalGenModels()
		Resource genModelResource = rs.getResource(genModelURI, false);
		if (genModelResource == null) {
			genModelResource = rs.getResource(genModelURI, true);
			if (genModelResource != null) {
				return (GenModel) genModelResource.getContents().get(0);
			}
		}
		return null;
	}
@


1.1
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@a29 1
 *
d50 4
d55 1
a55 1
		return getGenModel().findGenPackage(domainPackage);
d58 5
d64 3
d77 6
d84 3
d98 3
@

