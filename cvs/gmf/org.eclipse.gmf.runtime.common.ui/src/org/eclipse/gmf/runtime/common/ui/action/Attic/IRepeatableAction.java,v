head	1.4;
access;
symbols
	v20081022-1925:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4;
locks; strict;
comment	@# @;


1.4
date	2005.10.14.18.28.07;	author ldamus;	state dead;
branches;
next	1.3;

1.3
date	2005.10.05.17.12.46;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.23.49;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.13;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Bugzilla Bug 111637 gmf_head ldamus 051014 IRepeatableAction should be deprecated
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.action;

import org.eclipse.core.runtime.IProgressMonitor;

/**
 * The interface for all actions that could potentially be repeated.
 * 
 * @@author khussey
 * @@deprecated Repeatable actions are no longer supported. Use
 *             {@@link org.eclipse.gmf.runtime.common.ui.action.IActionWithProgress}
 *             instead.
 */
public interface IRepeatableAction extends IActionWithProgress {
 
    /**
     * Retrieves a Boolean indicating whether this repeatable action can be
     * repeated.
     * 
     * @@return <code>true</code> if this repeatable action can be repeated;
     *          <code>false</code> otherwise.
     */
    public boolean isRepeatable();

    /**
     * Re-runs this repeatable action.
     * 
     * @@param progressMonitor <code>IProgressMonitor</code> monitoring the execution of this action
     */
    public void repeat(IProgressMonitor progressMonitor);
}
@


1.3
log
@Bugzilla 111637 gmf_head ldamus 051005 IRepeatableAction should be deprecated
@
text
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a13 4
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

a15 2
import org.eclipse.gmf.runtime.common.core.util.EnumeratedType;

d20 3
d24 2
a25 58
public interface IRepeatableAction {
    /**
     * Enumerated type for work indicator type
     */
    public class WorkIndicatorType extends EnumeratedType {
        private static int nextOrdinal = 0;
    
        /** No work indicator. */
        public static final WorkIndicatorType NONE = new WorkIndicatorType("None"); //$NON-NLS-1$
    
        /** Busy work indicator. */
        public static final WorkIndicatorType BUSY = new WorkIndicatorType("Busy"); //$NON-NLS-1$
    
        /** Progress monitor work indicator. */
        public static final WorkIndicatorType PROGRESS_MONITOR = new WorkIndicatorType("Progress Monitor"); //$NON-NLS-1$
    
        /** Cancelable progress monitor work indicator. */
    	public static final WorkIndicatorType CANCELABLE_PROGRESS_MONITOR = new WorkIndicatorType("Cancelable Progress Monitor"); //$NON-NLS-1$
    	
        /**
         * The list of values for this enumerated type.
         */
        private static final WorkIndicatorType[] VALUES =
            { NONE, BUSY, PROGRESS_MONITOR, CANCELABLE_PROGRESS_MONITOR };
    
        /**
         * Constructor for WorkIndicatorType.
         * @@param name The name for the WorkIndicatorType
         * @@param ordinal The ordinal for theWorkIndicatorType
         */
        protected WorkIndicatorType(String name, int ordinal) {
            super(name, ordinal);
        }
    
        /**
         * Constructor for WorkIndicatorType.
         * @@param name The name for the WorkIndicatorType
         */
        private WorkIndicatorType(String name) {
            this(name, nextOrdinal++);
        }
    
        /**
         * Retrieves the list of constants for this enumerated type.
         * @@return The list of constants for this enumerated type.
         */
        protected List getValues() {
            return Collections.unmodifiableList(Arrays.asList(VALUES));
        }
    }

    /**
     * Retrieves the label for this repeatable action.
     * 
     * @@return The label for this repeatable action.
     */
    public String getLabel();

a35 23
     * Retrieves a Boolean indicating whether this repeatable action can be
     * run.
     * 
     * @@return <code>true</code> if this repeatable action can be run;
     *          <code>false</code> otherwise.
     */
    public boolean isRunnable();

    /**
     * Refreshes various aspects of this repeatable action, such as its label
     * and whether or not it is enabled.
     */
    public void refresh();
    
    /**
     * Sets up the action. Should always be called before
     * {@@link #run(IProgressMonitor)} is called.
     * @@return <code>true</code> if the setup completed successfully,
     * 		   <code>false</code> otherwise.
     */
    public boolean setup();

    /**
a40 14

    /**
     * Runs this repeatable action.
     * 
     * @@param progressMonitor <code>IProgressMonitor</code> monitoring the execution of this action
     */
    public void run(IProgressMonitor progressMonitor);

    /**
     * Gets type of work indicator (progress monitor, hourglass, or none).
     * 
     * @@return type of work indicator
     */
    public WorkIndicatorType getWorkIndicatorType();
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

