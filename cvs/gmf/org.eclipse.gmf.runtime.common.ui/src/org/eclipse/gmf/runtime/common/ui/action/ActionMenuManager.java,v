head	1.5;
access;
symbols
	v20081023-2107:1.5
	v20081022-1925:1.5
	v20081022-1104:1.5
	v20081020-0700:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080512-1200:1.5
	v20080503-1740:1.5
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080407-2250:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20071003-0000:1.4
	v20070921-0000:1.4
	v20070915-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070504-1000:1.4
	v20070330-1300:1.3
	v20070208-1800:1.3
	M4_20:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061020-1000:1.2.2.2
	v20061013-1330:1.3
	v20061012-1100:1.2.2.2
	v20060925-1700:1.2.2.2
	v20060919-0800:1.2.2.2
	M1_20:1.2
	v20060824-1600:1.2
	v20060803-1200:1.2
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060526-1200:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2008.05.02.17.58.33;	author crevells;	state Exp;
branches;
next	1.4;
commitid	7a40481b56494567;

1.4
date	2007.05.02.15.20.12;	author crevells;	state Exp;
branches;
next	1.3;
commitid	2fa94638ac2c4567;

1.3
date	2006.10.03.14.51.25;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.23.49;	author sshaw;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2005.08.30.03.16.13;	author sshaw;	state Exp;
branches;
next	;

1.2.2.1
date	2006.09.13.15.35.31;	author ldamus;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2006.09.13.16.41.24;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[230005] gmf_head crevells 080502 Extra separator at bottom of context menu for UI reduced menus
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.action;

import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;
import org.eclipse.jface.action.AbstractGroupMarker;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.ActionContributionItem;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.action.IContributionItem;
import org.eclipse.jface.action.IContributionManager;
import org.eclipse.jface.action.IMenuCreator;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.action.SubContributionItem;
import org.eclipse.jface.util.PropertyChangeEvent;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.ui.actions.LabelRetargetAction;

/**
 * An implementation of an <code>IMenuManager</code> that inherits its
 * UI (text + icon + hints) from a given action. 
 * 
 * When filled in a toolbar, the menu is rendered as a tool item
 * with two parts: a button, whose icon comes from the supplied
 * action handler, and a drop-down menu arrow.
 * When the arrow is pressed, the drop-down menu is shown. When the
 * button is pressed, the associated action is executed. The manager can have
 * an optional style to retarget the last executed action. In this
 * case the tool item UI reflects the last executed sub-action from the menu.
 * 
 * When filled in a menu, this menu shows up as a normal cascading menu with 
 * its GUI inherited from the supplied action.
 *  
 * @@author melaasar
 */
public class ActionMenuManager extends MenuManager {

    /**
     * An action that provides a menu and fills it from the contribution
     * items of the enclosing menu manager. It also retargets to the
     * manager's supplied action handler.
     */
    public class MenuCreatorAction
        extends LabelRetargetAction
        implements IMenuCreator {
        // the menu widget
        private Menu menu;

        // menu item selection listener: listens to selection events
        private Listener menuItemListener = new Listener() {
            public void handleEvent(Event event) {
                if (SWT.Selection == event.type
                    && !event.widget.isDisposed()) {
                    ActionContributionItem item =
                        (ActionContributionItem) event.widget.getData();
                    if (retargetLastAction) {
                        setActionHandler(item.getAction());
                        setDefaultAction(item.getAction());
                    }
                    subActionSelected(item.getAction());
                }
            }
        };

        /**
         * Creates a new menu creator action
         * 
         * @@param actionHandler the action handler
         */
        public MenuCreatorAction(IAction actionHandler) {
            super(actionHandler.getId(), actionHandler.getText());
            setEnabled(false); // initially untill a menu item is added
            setActionHandler(actionHandler);
            setMenuCreator(this);
        }

        /* (non-Javadoc)
         * @@see org.eclipse.jface.action.IMenuCreator#getMenu(org.eclipse.swt.widgets.Control)
         */
        public Menu getMenu(Control parent) {
            if (menu != null)
                menu.dispose();

            menu = new Menu(parent);
            return createMenu(menu);
        }

        /* (non-Javadoc)
         * @@see org.eclipse.jface.action.IMenuCreator#getMenu(org.eclipse.swt.widgets.Menu)
         */
        public Menu getMenu(Menu parent) {
            if (menu != null)
                menu.dispose();
            menu = new Menu(parent);
            return createMenu(menu);
        }

        /* (non-Javadoc)
         * @@see org.eclipse.ui.actions.ActionFactory.IWorkbenchAction#dispose()
         */
        public void dispose() {
            if (menu != null) {
                menu.dispose();
                menu = null;
            }
            super.dispose();
            ActionMenuManager.this.dispose();
        }

        /**
         * Create the drop-down/pop-up menu.
         * 
         * @@param mnu <code>Menu</code> for which to create the drop-down/pop-up menu
         * @@return <code>Menu</code> the drop-down/pop-up menu 
         */
        protected Menu createMenu(Menu mnu) {
            IContributionItem[] items = getRealItems();
            IContributionItem lastGroupMarker = null;
            for (int i = 0; i < items.length; i++) {
                IContributionItem item = items[i];
                if (item instanceof AbstractGroupMarker) {
                    if (i == 0
                        || i == items.length - 1
                        || items[i + 1] instanceof AbstractGroupMarker
                        || mnu.getItemCount() < 1 
                        || !item.isVisible()) {
                        continue;
                    } else {
                        // Do not add last group marker until we know that there
                        // will be items following it.
                        lastGroupMarker = item;
                    }
                } else {
                    if (!item.isVisible()) {
                        continue;
                    }
                    try {
                        if (lastGroupMarker != null) {
                            lastGroupMarker.fill(menu, -1);
                            lastGroupMarker = null;
                        }
                        item.fill(menu, -1);
                    } catch (Exception e) {
                        Log.info(CommonUIPlugin.getDefault(), CommonUIStatusCodes.GENERAL_UI_FAILURE, "The contribution item (" + item.getId() + ") failed to fill within the menu"); //$NON-NLS-1$ //$NON-NLS-2$
                    }
                }
            }
            MenuItem menuItems[] = mnu.getItems();
            for (int i = 0; i < menuItems.length; i++) {
                if (menuItems[i].getStyle() == SWT.SEPARATOR)
                    continue;
                menuItems[i].addListener(SWT.Selection, menuItemListener);
            }
            return mnu;
        }

        /**
         * Ignores the action handler's "enable" event since "enablement"
         * is determined by the sub-action(s) enablement state
         * 
         */
        protected void propagateChange(PropertyChangeEvent event) {
            if (!event.getProperty().equals(Action.ENABLED))
                super.propagateChange(event);
        }

        /**
         * Ignores the action handler's "enable" event since "enablement"
         * is determined by the sub-action(s)
         * 
         */
        protected void setActionHandler(IAction handler) {
            boolean enabled = MenuCreatorAction.this.isEnabled();
            super.setActionHandler(handler);
            MenuCreatorAction.this.setEnabled(enabled);
        }
        
        /**
         * Only run the action handler if it is enabled
         * 
         */
        public void run() {
            if (getActionHandler() != null && getActionHandler().isEnabled())
                super.run();
            else if (getDefaultAction().isEnabled()) {
                setActionHandler(getDefaultAction());
                super.run();
           }
        }

        /**
         * Only run the action handler if it is enabled
         * 
         */
        public void runWithEvent(Event event) {
            if (getActionHandler() != null && getActionHandler().isEnabled())
                super.runWithEvent(event);
            else if (getDefaultAction().isEnabled()) {
                 setActionHandler(getDefaultAction());
                 super.runWithEvent(event);
            }
        }

    }

    /** the associated menu action */
    protected final MenuCreatorAction action;

    /** the associated menu action */
    protected IAction defaultAction = null;

    /** the delege action contribution item */
    private final ActionContributionItem actionContributionItem;

    /** an option to retarget the last action */
    private boolean retargetLastAction;

    /**
     * Creates a new instance of <code>ActionMenuManager</code> with
     * a given action handler. The manager does not retarget the last
     * selected action from the menu
     * 
     * @@param id The menu manager id
     * @@param actionHandler the menu associated action handler
     */
    public ActionMenuManager(String id, IAction actionHandler) {
        this(id, actionHandler, false);
    }

    /**
     * Creates a new instance of <code>ActionMenuManager</code> with
     * a given action handler and an option to retarget the last 
     * executed menu action.
     * 
     * @@param id The menu manager id
     * @@param actionHandler the menu associated action handler
     * @@param retargetLastAction whether to retarget the last action or not
     */
    public ActionMenuManager(
        String id,
        IAction actionHandler,
        boolean retargetLastAction) {
        super(actionHandler.getText(), id);
        assert null != actionHandler;
        action = new MenuCreatorAction(actionHandler);
        defaultAction = actionHandler;
        actionContributionItem = new ActionContributionItem(action);
        this.retargetLastAction = retargetLastAction;
    }

    /**
     * Returns whether the option to retarget last action was requested
     * 
     * @@return <code>true</code> if retargetLastAction is enabled, <code>false</code> otherwise
     */
    protected boolean isRetargetLastAction() {
        return retargetLastAction;
    }

    /**
     * Handle subaction selection
     * 
     * @@param subActionHandler The selected sub action handler
     */
    protected void subActionSelected(IAction subActionHandler) {
         /* method not implemented */
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#fill(org.eclipse.swt.widgets.Composite)
     */
    public void fill(Composite parent) {
        // this is only relevant in toolbars
        retargetLastAction = false;
        actionContributionItem.fill(parent);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#fill(org.eclipse.swt.widgets.Menu, int)
     */
    public void fill(Menu parent, int index) {
        // this is only relevant in toolbars
        retargetLastAction = false;
        actionContributionItem.fill(parent, index);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#fill(org.eclipse.swt.widgets.ToolBar, int)
     */
    public void fill(ToolBar parent, int index) {
        actionContributionItem.fill(parent, index);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#dispose()
     */
    public void dispose() {
        actionContributionItem.dispose();
        super.dispose();
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#isEnabled()
     */
    public boolean isEnabled() {
        return actionContributionItem.isEnabled();
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionManager#isDirty()
     */
    public boolean isDirty() {
        return actionContributionItem.isDirty();
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#isDynamic()
     */
    public boolean isDynamic() {
        return actionContributionItem.isDynamic();
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#isGroupMarker()
     */
    public boolean isGroupMarker() {
        return actionContributionItem.isGroupMarker();
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#isSeparator()
     */
    public boolean isSeparator() {
        return actionContributionItem.isSeparator();
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#isVisible()
     */
    public boolean isVisible() {
        IContributionItem[] items = getRealItems();
        for (int i = 0; i < items.length; i++) {
            IContributionItem item = items[i];
            if (!(item instanceof AbstractGroupMarker) && item.isVisible()) {
                return actionContributionItem.isVisible();
            }
        }
        return false;
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#setParent(org.eclipse.jface.action.IContributionManager)
     */
    public void setParent(IContributionManager parent) {
        actionContributionItem.setParent(parent);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#setVisible(boolean)
     */
    public void setVisible(boolean visible) {
        actionContributionItem.setVisible(visible);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#update()
     */
    public void update() {
        actionContributionItem.update();
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionItem#update(java.lang.String)
     */
    public void update(String id) {
        actionContributionItem.update(id);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IMenuManager#updateAll(boolean)
     */
    public void updateAll(boolean force) {
        update(force);

        IContributionItem[] items = getRealItems();
        for (int i = 0; i < items.length; ++i) {
            IContributionItem ci = items[i];
            if (ci instanceof IMenuManager) {
                IMenuManager mm = (IMenuManager) ci;
                if (mm.isVisible()) {
                    mm.updateAll(force);
                }
            }
        }
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.IContributionManager#update(boolean)
     */
    public void update(boolean force) {
        update();
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.ContributionManager#itemAdded(org.eclipse.jface.action.IContributionItem)
     */
    protected void itemAdded(IContributionItem item) {
        super.itemAdded(item);
        if (item instanceof SubContributionItem)
            item = ((SubContributionItem) item).getInnerItem();
        if (!item.isGroupMarker())
            action.setEnabled(true);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.jface.action.ContributionManager#itemRemoved(org.eclipse.jface.action.IContributionItem)
     */
    protected void itemRemoved(IContributionItem item) {
        super.itemRemoved(item);
        if (item instanceof SubContributionItem)
            item = ((SubContributionItem) item).getInnerItem();
        if (!item.isGroupMarker()) {
            action.setEnabled(false);
            IContributionItem[] items = getItems();
            for (int i = 0; i < items.length; i++)
                if (!items[i].isGroupMarker()){
                    action.setEnabled(true);
                    break;
                }
        }
    }

    /**
     * Returns the contribution items of this manager. If an item
     * is wrapper in a SubContributionItem instance it extracts the
     * real item instance
     * 
     * @@return An array of real items of this contribution manager 
     */
    protected IContributionItem[] getRealItems() {
        IContributionItem[] items = getItems();
        IContributionItem[] realItems = new IContributionItem[items.length];
        for (int i = 0; i < items.length; i++) {
                if (items[i] instanceof SubContributionItem) {
                realItems[i] = ((SubContributionItem) items[i]).getInnerItem();
                } else {
                    realItems[i] = items[i];
                }
        }
        return realItems;
    }

    
    public IAction getDefaultAction() {
        return defaultAction;
    }

    
    protected void setDefaultAction(IAction defaultAction) {
        this.defaultAction = defaultAction;
    }

}
@


1.4
log
@[181934] gmf_head crevells 070502 ContributionItemService does not filter actions on submenus of the context menu
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
d137 1
d144 2
a145 1
                        || mnu.getItemCount() < 1)
d147 18
a164 8
                }
                if (!item.isVisible()) {
                    continue;
                }
                try {
                    item.fill(menu, -1);
                } catch (Exception e) {
                    Log.info(CommonUIPlugin.getDefault(), CommonUIStatusCodes.GENERAL_UI_FAILURE, "The contribution item (" + item.getId() + ") failed to fill within the menu"); //$NON-NLS-1$ //$NON-NLS-2$
@


1.3
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d14 3
a37 4
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;

d57 21
a77 21
	/**
	 * An action that provides a menu and fills it from the contribution
	 * items of the enclosing menu manager. It also retargets to the
	 * manager's supplied action handler.
	 */
	public class MenuCreatorAction
		extends LabelRetargetAction
		implements IMenuCreator {
		// the menu widget
		private Menu menu;

		// menu item selection listener: listens to selection events
		private Listener menuItemListener = new Listener() {
			public void handleEvent(Event event) {
				if (SWT.Selection == event.type
					&& !event.widget.isDisposed()) {
					ActionContributionItem item =
						(ActionContributionItem) event.widget.getData();
					if (retargetLastAction) {
						setActionHandler(item.getAction());
						setDefaultAction(item.getAction());
d79 113
a191 110
					subActionSelected(item.getAction());
				}
			}
		};

		/**
		 * Creates a new menu creator action
		 * 
		 * @@param actionHandler the action handler
		 */
		public MenuCreatorAction(IAction actionHandler) {
			super(actionHandler.getId(), actionHandler.getText());
			setEnabled(false); // initially untill a menu item is added
			setActionHandler(actionHandler);
			setMenuCreator(this);
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.jface.action.IMenuCreator#getMenu(org.eclipse.swt.widgets.Control)
		 */
		public Menu getMenu(Control parent) {
			if (menu != null)
				menu.dispose();

			menu = new Menu(parent);
			return createMenu(menu);
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.jface.action.IMenuCreator#getMenu(org.eclipse.swt.widgets.Menu)
		 */
		public Menu getMenu(Menu parent) {
			if (menu != null)
				menu.dispose();
			menu = new Menu(parent);
			return createMenu(menu);
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.ui.actions.ActionFactory.IWorkbenchAction#dispose()
		 */
		public void dispose() {
			if (menu != null) {
				menu.dispose();
				menu = null;
			}
			super.dispose();
			ActionMenuManager.this.dispose();
		}

		/**
		 * Create the drop-down/pop-up menu.
		 * 
		 * @@param mnu <code>Menu</code> for which to create the drop-down/pop-up menu
		 * @@return <code>Menu</code> the drop-down/pop-up menu 
		 */
		protected Menu createMenu(Menu mnu) {
			IContributionItem[] items = getRealItems();
			for (int i = 0; i < items.length; i++) {
				IContributionItem item = items[i];
				if (item instanceof AbstractGroupMarker) {
					if (i == 0
						|| i == items.length - 1
						|| items[i + 1] instanceof AbstractGroupMarker
						|| mnu.getItemCount() < 1)
						continue;
				}
				try {
					item.fill(menu, -1);
				} catch (Exception e) {
					Log.info(CommonUIPlugin.getDefault(), CommonUIStatusCodes.GENERAL_UI_FAILURE, "The contribution item (" + item.getId() + ") failed to fill within the menu"); //$NON-NLS-1$ //$NON-NLS-2$
				}
			}
			MenuItem menuItems[] = mnu.getItems();
			for (int i = 0; i < menuItems.length; i++) {
				if (menuItems[i].getStyle() == SWT.SEPARATOR)
					continue;
				menuItems[i].addListener(SWT.Selection, menuItemListener);
			}
			return mnu;
		}

		/**
		 * Ignores the action handler's "enable" event since "enablement"
		 * is determined by the sub-action(s) enablement state
		 * 
		 */
		protected void propagateChange(PropertyChangeEvent event) {
			if (!event.getProperty().equals(Action.ENABLED))
				super.propagateChange(event);
		}

		/**
		 * Ignores the action handler's "enable" event since "enablement"
		 * is determined by the sub-action(s)
		 * 
		 */
		protected void setActionHandler(IAction handler) {
			boolean enabled = MenuCreatorAction.this.isEnabled();
			super.setActionHandler(handler);
			MenuCreatorAction.this.setEnabled(enabled);
		}
		
		/**
		 * Only run the action handler if it is enabled
		 * 
		 */
		public void run() {
			if (getActionHandler() != null && getActionHandler().isEnabled())
				super.run();
d196 1
a196 1
		}
d198 7
a204 7
		/**
		 * Only run the action handler if it is enabled
		 * 
		 */
		public void runWithEvent(Event event) {
			if (getActionHandler() != null && getActionHandler().isEnabled())
				super.runWithEvent(event);
d209 1
a209 1
		}
d211 1
a211 1
	}
d213 2
a214 2
	/** the associated menu action */
	protected final MenuCreatorAction action;
d219 2
a220 2
	/** the delege action contribution item */
	private final ActionContributionItem actionContributionItem;
d222 2
a223 2
	/** an option to retarget the last action */
	private boolean retargetLastAction;
d225 28
a252 28
	/**
	 * Creates a new instance of <code>ActionMenuManager</code> with
	 * a given action handler. The manager does not retarget the last
	 * selected action from the menu
	 * 
	 * @@param id The menu manager id
	 * @@param actionHandler the menu associated action handler
	 */
	public ActionMenuManager(String id, IAction actionHandler) {
		this(id, actionHandler, false);
	}

	/**
	 * Creates a new instance of <code>ActionMenuManager</code> with
	 * a given action handler and an option to retarget the last 
	 * executed menu action.
	 * 
	 * @@param id The menu manager id
	 * @@param actionHandler the menu associated action handler
	 * @@param retargetLastAction whether to retarget the last action or not
	 */
	public ActionMenuManager(
		String id,
		IAction actionHandler,
		boolean retargetLastAction) {
		super(actionHandler.getText(), id);
		assert null != actionHandler;
		action = new MenuCreatorAction(actionHandler);
d254 205
a458 198
		actionContributionItem = new ActionContributionItem(action);
		this.retargetLastAction = retargetLastAction;
	}

	/**
	 * Returns whether the option to retarget last action was requested
	 * 
	 * @@return <code>true</code> if retargetLastAction is enabled, <code>false</code> otherwise
	 */
	protected boolean isRetargetLastAction() {
		return retargetLastAction;
	}

	/**
	 * Handle subaction selection
	 * 
	 * @@param subActionHandler The selected sub action handler
	 */
	protected void subActionSelected(IAction subActionHandler) {
		 /* method not implemented */
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#fill(org.eclipse.swt.widgets.Composite)
	 */
	public void fill(Composite parent) {
		// this is only relevant in toolbars
		retargetLastAction = false;
		actionContributionItem.fill(parent);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#fill(org.eclipse.swt.widgets.Menu, int)
	 */
	public void fill(Menu parent, int index) {
		// this is only relevant in toolbars
		retargetLastAction = false;
		actionContributionItem.fill(parent, index);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#fill(org.eclipse.swt.widgets.ToolBar, int)
	 */
	public void fill(ToolBar parent, int index) {
		actionContributionItem.fill(parent, index);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#dispose()
	 */
	public void dispose() {
		actionContributionItem.dispose();
		super.dispose();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#isEnabled()
	 */
	public boolean isEnabled() {
		return actionContributionItem.isEnabled();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionManager#isDirty()
	 */
	public boolean isDirty() {
		return actionContributionItem.isDirty();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#isDynamic()
	 */
	public boolean isDynamic() {
		return actionContributionItem.isDynamic();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#isGroupMarker()
	 */
	public boolean isGroupMarker() {
		return actionContributionItem.isGroupMarker();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#isSeparator()
	 */
	public boolean isSeparator() {
		return actionContributionItem.isSeparator();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#isVisible()
	 */
	public boolean isVisible() {
		return actionContributionItem.isVisible();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#setParent(org.eclipse.jface.action.IContributionManager)
	 */
	public void setParent(IContributionManager parent) {
		actionContributionItem.setParent(parent);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#setVisible(boolean)
	 */
	public void setVisible(boolean visible) {
		actionContributionItem.setVisible(visible);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#update()
	 */
	public void update() {
		actionContributionItem.update();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionItem#update(java.lang.String)
	 */
	public void update(String id) {
		actionContributionItem.update(id);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IMenuManager#updateAll(boolean)
	 */
	public void updateAll(boolean force) {
		update(force);

		IContributionItem[] items = getRealItems();
		for (int i = 0; i < items.length; ++i) {
			IContributionItem ci = items[i];
			if (ci instanceof IMenuManager) {
				IMenuManager mm = (IMenuManager) ci;
				if (mm.isVisible()) {
					mm.updateAll(force);
				}
			}
		}
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.IContributionManager#update(boolean)
	 */
	public void update(boolean force) {
		update();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.ContributionManager#itemAdded(org.eclipse.jface.action.IContributionItem)
	 */
	protected void itemAdded(IContributionItem item) {
		super.itemAdded(item);
		if (item instanceof SubContributionItem)
			item = ((SubContributionItem) item).getInnerItem();
		if (!item.isGroupMarker())
			action.setEnabled(true);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.jface.action.ContributionManager#itemRemoved(org.eclipse.jface.action.IContributionItem)
	 */
	protected void itemRemoved(IContributionItem item) {
		super.itemRemoved(item);
		if (item instanceof SubContributionItem)
			item = ((SubContributionItem) item).getInnerItem();
		if (!item.isGroupMarker()) {
			action.setEnabled(false);
			IContributionItem[] items = getItems();
			for (int i = 0; i < items.length; i++)
				if (!items[i].isGroupMarker()){
					action.setEnabled(true);
					break;
				}
		}
	}

	/**
	 * Returns the contribution items of this manager. If an item
	 * is wrapper in a SubContributionItem instance it extracts the
	 * real item instance
	 * 
	 * @@return An array of real items of this contribution manager 
	 */
	protected IContributionItem[] getRealItems() {
		IContributionItem[] items = getItems();
		IContributionItem[] realItems = new IContributionItem[items.length];
		for (int i = 0; i < items.length; i++) {
			if (items[i] instanceof SubContributionItem) {
				realItems[i] = ((SubContributionItem) items[i]).getInnerItem();
			} else {
				realItems[i] = items[i];
			}
		}
		return realItems;
	}
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d76 1
a76 1
					if (retargetLastAction)
d78 2
d190 4
d203 4
d214 3
d251 1
d451 10
@


1.2.2.1
log
@[155549] gmf_R1_0_maintenance tmacdoug 0609013 The arrange button does not work on first press and [155842] gmf_R1_0_maintenance tmacdoug 0609013 SelectMenuManager appears to be leaking an action when constructed
@
text
@d76 1
a76 1
					if (retargetLastAction) {
a77 2
						setDefaultAction(item.getAction());
                    }
a187 4
            else if (getDefaultAction().isEnabled()) {
                setActionHandler(getDefaultAction());
                super.run();
           }
a196 4
            else if (getDefaultAction().isEnabled()) {
                 setActionHandler(getDefaultAction());
                 super.runWithEvent(event);
            }
a203 3
    /** the associated menu action */
    protected IAction defaultAction = null;

a237 1
        defaultAction = actionHandler;
a436 10
    
    public IAction getDefaultAction() {
        return defaultAction;
    }

    
    protected void setDefaultAction(IAction defaultAction) {
        this.defaultAction = defaultAction;
    }

@


1.2.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

