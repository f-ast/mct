head	1.7;
access;
symbols
	v20081023-2107:1.7
	v20081022-1925:1.7
	v20081022-1104:1.7
	v20081020-0700:1.7
	v20080722-1827:1.7
	R2_1_maintenance:1.7.0.6
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080512-1200:1.7
	v20080503-1740:1.7
	v20080501-1739:1.7
	v20080425-1959:1.7
	v20080407-2250:1.7
	v20080222-1200:1.7
	v20080215-1500:1.7
	v20071003-0000:1.7
	v20070921-0000:1.7
	v20070915-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	RC3_20:1.7
	v20070601-1400:1.7
	v20070504-1000:1.7
	v20070330-1300:1.7
	v20070208-1800:1.7
	M4_20:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061020-1000:1.7
	v20061013-1330:1.7
	v20061012-1100:1.7
	v20060925-1700:1.7
	v20060919-0800:1.7
	M1_20:1.7
	v20060824-1600:1.7
	v20060803-1200:1.7
	v20060728-0500:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1200:1.7
	v20060531-1730:1.7
	v20060526-1200:1.7
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.7
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4;
locks; strict;
comment	@# @;


1.7
date	2006.03.27.21.12.46;	author ldamus;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.13.19.10.46;	author ldamus;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.22.19.37.57;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.28.17.50.33;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.05.17.12.46;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.23.49;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.13;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[112826] gmf_head ldamus 060327 Adopt Eclipse 3.1 Operation History Framework - removing deprecated API
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.action;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.commands.operations.IOperationHistory;
import org.eclipse.core.commands.operations.OperationHistoryFactory;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.swt.custom.BusyIndicator;

/**
 * Responsible for managing the running of actions. All
 * actions (delegates and handlers) channel their run requests through an action
 * manager. An action manager keeps track of the action that was last run and
 * fires events to interested listeners whenever an action is run.
 * 
 * @@author khussey
 */
public class ActionManager {

	/**
	 * The empty string.
	 */
	protected static final String EMPTY_STRING = ""; //$NON-NLS-1$
	/**
	 * A string containing only a space character.
	 */
	protected static final String SPACE = " "; //$NON-NLS-1$

	/**
	 * The default action manager.
	 */
	private static ActionManager actionManager = null;
    
    private final IOperationHistory operationHistory;

	/**
	 * The last action that was run.
	 */
	private IActionWithProgress action = null;

	/**
	 * The action manager change listeners.
	 */
	private final List listeners =
		Collections.synchronizedList(new ArrayList());
    
    /**
     * Intializes me with an operation history.
     * 
     * @@param operationHistory The operation history for this action manager.
     */
    public ActionManager(IOperationHistory operationHistory) {
        super();

        assert null != operationHistory;
        this.operationHistory = operationHistory;
    }

	/**
	 * Retrieves the default action manager.
	 * 
	 * @@return The default action manager.
	 */
	public static ActionManager getDefault() {
		if (null == actionManager) {
			actionManager = new ActionManager(OperationHistoryFactory.getOperationHistory());
		}

		return actionManager;
	}
    
    /**
     * Gets my operation history.
     * 
     * @@return my operation history
     */
    public final IOperationHistory getOperationHistory() {
        return operationHistory;
    }
	
	/**
	 * Retrieves the value of the <code>action</code> instance variable.
	 * 
	 * @@return The value of the <code>action</code> instance variable.
	 */
	protected final IActionWithProgress getAction() {
		return action;
	}

	/**
	 * Sets the <code>action</code> instance variable to the specified value.
	 * 
	 * @@param action The new value for the <code>action</code> instance
	 *                variable.
	 */
	protected final void setAction(IActionWithProgress action) {
		this.action = action;
	}

	/**
	 * Retrieves the value of the <code>listeners</code> instance variable.
	 * 
	 * @@return The value of the <code>listeners</code> instance varible.
	 */
	protected final List getListeners() {
		return listeners;
	}

	/**
	 * Adds the specified listener to the list of action manager change
	 * listeners for this action manager.
	 * 
	 * @@param listener The listener to be added.
	 */
	public void addActionManagerChangeListener(IActionManagerChangeListener listener) {
		assert null != listener;

		getListeners().add(listener);
	}

	/**
	 * Removes the specified listener from the list of action manager change
	 * listeners for this action manager.
	 * 
	 * @@param listener The listener to be removed.
	 */
	public void removeActionManagerChangeListener(IActionManagerChangeListener listener) {
		assert null != listener;

		getListeners().remove(listener);
	}

	/**
	 * Notifies the listeners for this action manager that the specified
	 * event has occurred.
	 * 
	 * @@param event The action manager change event to be fired.
	 */
	protected void fireActionManagerChange(ActionManagerChangeEvent event) {
		assert null != event;

		List targets = null;
		synchronized (getListeners()) {
			targets = new ArrayList(getListeners());
		}

		for (Iterator i = targets.iterator(); i.hasNext();) {
			((IActionManagerChangeListener) i.next()).actionManagerChanged(
				event);
		}
	}

	/**
	 * Clears this action manager by discarding the last action that was run.
	 */
	public void clear() {
		setAction(null);

		fireActionManagerChange(new ActionManagerChangeEvent(this));
	}

	/**
	 * Runs the specified action.
	 * 
	 * @@param theAction The action to be run.
	 * @@exception UnsupportedOperationException If the action cannot be run.
	 * @@exception RuntimeException if any exception or error occurs 
	 * 									   while running the action
	 */
	public void run(final IActionWithProgress theAction) {
		if (!theAction.isRunnable()) {
			UnsupportedOperationException uoe =
				new UnsupportedOperationException();
			Trace.throwing(CommonUIPlugin.getDefault(), CommonUIDebugOptions.EXCEPTIONS_THROWING, getClass(), "run", uoe); //$NON-NLS-1$
			throw uoe;
		}
		
		boolean setup = theAction.setup();
		if (!setup) {
			// The setup did not occur (e.g. the user cancelled
			// a dialog presented in the setup). Do not proceed.
			return;
		}

		IActionWithProgress.WorkIndicatorType type =
			theAction.getWorkIndicatorType();

		if (type == IActionWithProgress.WorkIndicatorType.PROGRESS_MONITOR) {
			runActionInProgressMonitorDialog(theAction, false);

		} else if (
			type
				== IActionWithProgress
					.WorkIndicatorType
					.CANCELABLE_PROGRESS_MONITOR) {
			runActionInProgressMonitorDialog(theAction, true);

		} else if (type == IActionWithProgress.WorkIndicatorType.BUSY) {
			// display hourglass cursor
			BusyIndicator.showWhile(null, new Runnable() {
				public void run() {
					theAction.run(new NullProgressMonitor());
				}
			});
		} else {
			theAction.run(new NullProgressMonitor());
		}

		setAction(theAction);

		fireActionManagerChange(new ActionManagerChangeEvent(this, theAction));
		Trace.trace(CommonUIPlugin.getDefault(), CommonUIDebugOptions.ACTIONS_RUN, "Action '" + String.valueOf(getAction()) + "' run."); //$NON-NLS-1$ //$NON-NLS-2$
	}

	/**
	 * Runs <code>runnable</code> in a progress monitor dialog. The runnable runs in
	 * the same thread as the dialog. The cancel button on the dialog is enabled
	 * if <code>cancelable</code> is <code>true</code>. 
	 * 
	 * @@param runnable the runnable to run in the context of the progress dialog
	 * @@param cancelable <code>true</code> if the progress monitor should have
	 * 					  an enabled cancel button, <code>false</code> otherwise.
	 * 
	 * @@exception RuntimeException if any exception or error occurs 
	 * 									   while running the runnable
	 */
	private void runInProgressMonitorDialog(
		IRunnableWithProgress runnable,
		boolean cancelable) {

		try {
			if (System.getProperty("RUN_PROGRESS_IN_UI_HACK") != null) { //$NON-NLS-1$
				new ProgressMonitorDialog(null).run(false, cancelable, runnable);
			} else {
				new ProgressMonitorDialog(null).run(true, cancelable, runnable);
			}

		} catch (InvocationTargetException ite) {
			Trace.catching(CommonUIPlugin.getDefault(), CommonUIDebugOptions.EXCEPTIONS_CATCHING, getClass(), "run", ite); //$NON-NLS-1$
			Log.error(CommonUIPlugin.getDefault(), CommonUIStatusCodes.SERVICE_FAILURE, "run", ite); //$NON-NLS-1$

			RuntimeException cre =
				new RuntimeException(ite.getTargetException());

			Trace.throwing(CommonUIPlugin.getDefault(), CommonUIDebugOptions.EXCEPTIONS_THROWING, getClass(), "run", cre); //$NON-NLS-1$
			throw cre;

		} catch (InterruptedException ie) {
			Trace.catching(CommonUIPlugin.getDefault(), CommonUIDebugOptions.EXCEPTIONS_CATCHING, getClass(), "run", ie); //$NON-NLS-1$
		}
	}

	/**
	 * Runs <code>action</code> in the context of a progress monitor dialog.
	 * The action runs in the same thread as the dialog. The cancel button on
	 * the dialog is enabled if <code>cancelable</code> is <code>true</code>. 
	 * 
	 * @@param act the action to repeat
	 * @@param cancelable <code>true</code> if the progress monitor should have
	 * 					  an enabled cancel button, <code>false</code> otherwise.
	 * 
	 * @@exception RuntimeException if any exception or error occurs 
	 * 									   while running the action
	 */
	private void runActionInProgressMonitorDialog(
		final IActionWithProgress act,
		boolean cancelable) {

		IRunnableWithProgress runnable = new IRunnableWithProgress() {
			public void run(IProgressMonitor monitor) {
				act.run(monitor);
			}
		};
		runInProgressMonitorDialog(runnable, cancelable);
	}
}
@


1.6
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@a23 1
import org.eclipse.gmf.runtime.common.core.command.CommandManager;
a80 10
    	
   	/**
	 * Constructs a new action manager for the specified command manager.
	 * 
	 * @@param commandManager The command manager for this action manager.
     * @@deprecated Use {@@link #ActionManager(IOperationHistory)} instead.
	 */
	public ActionManager(CommandManager commandManager) {
		this(OperationHistoryFactory.getOperationHistory());
	}
a102 10

	/**
	 * Retrieves the value of the <code>commandManager</code> instance variable.
	 * 
	 * @@return The value of the <code>commandManager</code> instance variable.
     * @@deprecated Use {@@link #getOperationHistory()} instead.
	 */
	public final CommandManager getCommandManager() {
		return CommandManager.getDefault();
	}
@


1.5
log
@[112829] gmf_head ahunter 051222 Progress Monitor Dialog usage in GMF
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d20 2
d57 2
a58 5

	/**
	 * The command manager with which this action manager is associated.
	 */
	private final CommandManager commandManager;
d70 14
a83 2

	/**
d87 1
d90 1
a90 5
		super();

		assert null != commandManager;

		this.commandManager = commandManager;
d100 1
a100 1
			actionManager = new ActionManager(CommandManager.getDefault());
d105 9
d119 1
d122 1
a122 1
		return commandManager;
d124 1
a124 1

@


1.4
log
@Bugzilla Bug 112829 gmf_head ahunter 051028 Progress Monitor Dialog usage in GMF
@
text
@d258 3
a260 1
			if (System.getProperty("RUN_PROGRESS_IN_THREAD") != null) { //$NON-NLS-1$
a261 2
			} else {
				new ProgressMonitorDialog(null).run(false, cancelable, runnable);
@


1.3
log
@Bugzilla 111637 gmf_head ldamus 051005 IRepeatableAction should be deprecated
@
text
@d258 5
a262 2
			//TODO: RATLC00538018 Cancel button does not work.
			new ProgressMonitorDialog(null).run(false, cancelable, runnable);
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a21 4
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.swt.custom.BusyIndicator;

d28 3
a30 1
import org.eclipse.gmf.runtime.common.ui.internal.l10n.ResourceManager;
d33 1
a33 1
 * Responsible for managing the running of repeatable actions. All repeatable
d36 1
a36 1
 * fFires events to interested listeners whenever an action is run.
a45 6

	/**
	 * The prefix for repeat action labels.
	 */
	public static final String REPEAT_LABEL_PREFIX = ResourceManager.getI18NString("ActionManager.repeat.label.prefix"); //$NON-NLS-1$

d64 1
a64 1
	private IRepeatableAction action = null;
d112 1
a112 1
	protected final IRepeatableAction getAction() {
d122 1
a122 1
	protected final void setAction(IRepeatableAction action) {
a134 10
	/** 
	 * Retrieves the repeat label for the last action that was run.
	 * 
	 * @@return The repeat label.
	 */
	public String getRepeatLabel() {
		return REPEAT_LABEL_PREFIX
			+ (canRepeat() ? SPACE + getAction().getLabel() : EMPTY_STRING);
	}

a179 11
	 * Retrieves a Boolean indicating whether the last action that was run
	 * can be repeated.
	 * 
	 * @@return <code>false</code>. Repeat is no longer supported.
	 */
	public boolean canRepeat() {
		// RATLC00534581 - repeat no longer supported
		return false;
	}

	/**
a188 41
	 * Repeats the last action that was run.
	 * 
	 * @@exception UnsupportedOperationException If an action cannot be
	 *                                           repeated.
	 */
	public void repeat() {
		if (!canRepeat()) {
			UnsupportedOperationException uoe =
				new UnsupportedOperationException();
			Trace.throwing(CommonUIPlugin.getDefault(), CommonUIDebugOptions.EXCEPTIONS_THROWING, getClass(), "repeat", uoe); //$NON-NLS-1$
			throw uoe;
		}

		IRepeatableAction.WorkIndicatorType type =
			getAction().getWorkIndicatorType();

		if (type == IRepeatableAction.WorkIndicatorType.PROGRESS_MONITOR) {
			repeatActionInProgressMonitorDialog(getAction(), false);

		} else if (
			type
				== IRepeatableAction
					.WorkIndicatorType
					.CANCELABLE_PROGRESS_MONITOR) {
			repeatActionInProgressMonitorDialog(getAction(), true);

		} else if (type == IRepeatableAction.WorkIndicatorType.BUSY) {
			// display hourglass cursor
			BusyIndicator.showWhile(null, new Runnable() {
				public void run() {
					getAction().repeat(new NullProgressMonitor());
				}
			});
		} else {
			getAction().run(new NullProgressMonitor());
		}

		Trace.trace(CommonUIPlugin.getDefault(), CommonUIDebugOptions.ACTIONS_REPEAT, "Action '" + String.valueOf(getAction()) + "' repeated."); //$NON-NLS-1$ //$NON-NLS-2$
	}

	/**
d196 1
a196 1
	public void run(final IRepeatableAction theAction) {
d211 1
a211 1
		IRepeatableAction.WorkIndicatorType type =
d214 1
a214 1
		if (type == IRepeatableAction.WorkIndicatorType.PROGRESS_MONITOR) {
d219 1
a219 1
				== IRepeatableAction
d224 1
a224 1
		} else if (type == IRepeatableAction.WorkIndicatorType.BUSY) {
d289 1
a289 1
		final IRepeatableAction act,
a298 24
	
	/**
	 * Repeats <code>action</code> in the context of a progress monitor dialog.
	 * The action runs in the same thread as the dialog. The cancel button on
	 * the dialog is enabled if <code>cancelable</code> is <code>true</code>. 
	 * 
	 * @@param act the action to run
	 * @@param cancelable <code>true</code> if the progress monitor should have
	 * 					  an enabled cancel button, <code>false</code> otherwise.
	 * 
	 * @@exception RuntimeException if any exception or error occurs 
	 * 									   while repeating the action
	 */
	private void repeatActionInProgressMonitorDialog(
		final IRepeatableAction act,
		boolean cancelable) {

		IRunnableWithProgress runnable = new IRunnableWithProgress() {
			public void run(IProgressMonitor monitor) {
				act.repeat(monitor);
			}
		};
		runInProgressMonitorDialog(runnable, cancelable);
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

