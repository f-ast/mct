head	1.5;
access;
symbols
	v20081023-2107:1.5
	v20081022-1925:1.5
	v20081022-1104:1.5
	v20081020-0700:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080512-1200:1.5
	v20080503-1740:1.5
	v20080501-1739:1.5
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20071003-0000:1.4
	v20070921-0000:1.4
	v20070915-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070504-1000:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	M4_20:1.4
	v20061218-1200:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061020-1000:1.4
	v20061013-1330:1.4
	v20061012-1100:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060824-1600:1.4
	v20060803-1200:1.4
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060526-1200:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2008.04.08.02.16.25;	author ahunter;	state Exp;
branches;
next	1.4;
commitid	4c4e47fad5794567;

1.4
date	2005.12.12.21.22.18;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.02.19.43.06;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.23.50;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.15;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[226065] gmf-head ahunter 080407 Fix warning: The type Assert is deprecated
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.preferences;

import org.eclipse.core.runtime.Assert;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.preference.FieldEditor;
import org.eclipse.jface.preference.PreferenceConverter;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.jface.resource.StringConverter;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.FontDialog;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;


/**
 * A field editor for a font type preference.
 * 
 * Very similar to the org.eclipse.jface.preference.FontFieldEditor.
 * The difference is that the ability to change the selected font 
 * without a user action (using the change font button) is provided.
 * Subclassing from the jface FontFieldEditor was not an option because
 * the needed methods and instance variables were private.
 * 
 * @@author schafe
 */
public class FontFieldEditor extends FieldEditor {

	/**
	 * The change font button, or <code>null</code> if none
	 * (before creation and after disposal).
	 */
	private Button changeFontButton = null;

	/**
	 * The text for the change font button, or <code>null</code>
	 * if missing.
	 */
	private String changeButtonText;

	/**
	 * The text for the preview, or <code>null</code> if no preview is desired
	 */
	private String previewText;

	/**
	 * Font data for the chosen font button, or <code>null</code> if none.
	 */
	private FontData[] chosenFont;

	/**
	 * The label that displays the selected font, or <code>null</code> if none.
	 */
	private Label valueControl;

	/**
	 * The previewer, or <code>null</code> if none.
	 */
	private DefaultPreviewer previewer;

	/**
	 * Internal font previewer implementation.
	 */
	private static class DefaultPreviewer {
		private Text text;
		private String string;
		private Font font;
		
		/**
		 * Constructor for the previewer.
		 * @@param s
		 * @@param parent
		 */
		public DefaultPreviewer(String s, Composite parent) {
			string = s;
			text = new Text(parent, SWT.READ_ONLY | SWT.BORDER);
			text.addDisposeListener(new DisposeListener() {
				public void widgetDisposed(DisposeEvent e) {
					if (font != null)
						font.dispose();
				}
			});
			if (string != null)
				text.setText(string);
		}

		/**
		 * @@return the control the previewer is using
		 */
		public Control getControl() {
			return text;
		}

		/**
		 * Set the font to display with
		 * @@param fontData
		 */
		public void setFont(FontData[] fontData) {
			if (font != null)
				font.dispose();
			font = new Font(text.getDisplay(), fontData);
			text.setFont(font);
		}
		
		/**
		 * @@return the preferred size of the previewer.
		 */
		public int getPreferredExtent() {
			return 40;
		}
	}
	
	/**
	 * Creates a font field editor with an optional preview area.
	 * 
	 * @@param name the name of the preference this field editor works on
	 * @@param labelText the label text of the field editor
	 * @@param previewAreaText the text used for the preview window. If it is
	 * <code>null</code> there will be no preview area,
	 * @@param parent the parent of the field editor's control
	 */
	public FontFieldEditor(
		String name,
		String labelText,
		String previewAreaText,
		Composite parent) {
		init(name, labelText);
		previewText = previewAreaText;
		changeButtonText = JFaceResources.getString("openChange"); //$NON-NLS-1$
		createControl(parent);

	}
	/**
	 * Creates a font field editor without a preview.
	 * 
	 * @@param name the name of the preference this field editor works on
	 * @@param labelText the label text of the field editor
	 * @@param parent the parent of the field editor's control
	 */
	public FontFieldEditor(String name, String labelText, Composite parent) {
		this(name, labelText, null, parent);

	}
	/* (non-Javadoc)
	 * Method declared on FieldEditor.
	 */
	protected void adjustForNumColumns(int numColumns) {

		GridData data = new GridData();
		if (valueControl.getLayoutData() != null)
			data = (GridData) valueControl.getLayoutData();

		data.horizontalSpan = numColumns - getNumberOfControls() + 1;
		valueControl.setLayoutData(data);
	}

	/* (non-Javadoc)
	 * Method declared on FieldEditor.
	 */
	protected void applyFont() {
		if (chosenFont != null && previewer != null)
			previewer.setFont(chosenFont);
	}
	/* (non-Javadoc)
	 * Method declared on FieldEditor.
	 */
	protected void doFillIntoGrid(Composite parent, int numColumns) {
		getLabelControl(parent);

		valueControl = getValueControl(parent);

		GridData gd =
			new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
		gd.horizontalSpan = numColumns - getNumberOfControls() + 1;
		valueControl.setLayoutData(gd);
		if (previewText != null) {
			previewer = new DefaultPreviewer(previewText, parent);
			gd = new GridData(GridData.FILL_HORIZONTAL);
			gd.heightHint = previewer.getPreferredExtent();
			gd.widthHint = previewer.getPreferredExtent();
			previewer.getControl().setLayoutData(gd);
		}

		changeFontButton = getChangeControl(parent);
		gd = new GridData();
		gd.heightHint =
			convertVerticalDLUsToPixels(
				changeFontButton,
				14);
		int widthHint =
			convertHorizontalDLUsToPixels(
				changeFontButton,
				IDialogConstants.BUTTON_WIDTH);
		gd.widthHint =
			Math.max(
				widthHint,
				changeFontButton.computeSize(SWT.DEFAULT, SWT.DEFAULT, true).x);
		changeFontButton.setLayoutData(gd);

	}
	/* (non-Javadoc)
	 * Method declared on FieldEditor.
	 */
	protected void doLoad() {
		if (changeFontButton == null)
			return;
		updateFont(
			PreferenceConverter.getFontDataArray(
				getPreferenceStore(),
				getPreferenceName()));
	}
	/* (non-Javadoc)
	 * Method declared on FieldEditor.
	 */
	protected void doLoadDefault() {
		if (changeFontButton == null)
			return;
		updateFont(
			PreferenceConverter.getDefaultFontDataArray(
				getPreferenceStore(),
				getPreferenceName()));
	}
	/* (non-Javadoc)
	 * Method declared on FieldEditor.
	 */
	protected void doStore() {
		if (chosenFont != null)
			PreferenceConverter.setValue(
				getPreferenceStore(),
				getPreferenceName(),
				chosenFont);
	}
	/**
	 * Returns the change button for this field editor.
	 *
	 * @@param parent The Composite to create the button in if required.
	 * @@return the change button
	 */
	protected Button getChangeControl(Composite parent) {
		if (changeFontButton == null) {
			changeFontButton = new Button(parent, SWT.PUSH);
			if (changeButtonText != null)
				changeFontButton.setText(changeButtonText);
			changeFontButton.addSelectionListener(new SelectionAdapter() {
				public void widgetSelected(SelectionEvent event) {
					FontDialog fontDialog =
						new FontDialog(changeFontButton.getShell());
					if (chosenFont != null)
						fontDialog.setFontList(chosenFont);
					FontData font = fontDialog.open();
					if (font != null) {
						FontData[] oldFont = chosenFont;
						if(oldFont == null)
							oldFont = JFaceResources.getDefaultFont().getFontData();
						setPresentsDefaultValue(false);
						FontData[] newData = new FontData[1];
						newData[0] = font;
						updateFont(newData);
						fireValueChanged(VALUE, oldFont[0], font);
					}

				}
			});
			changeFontButton.addDisposeListener(new DisposeListener() {
				public void widgetDisposed(DisposeEvent event) {
					changeFontButton = null;
				}
			});
			changeFontButton.setFont(parent.getFont());
			setButtonLayoutData(changeFontButton);
		} else {
			checkParent(changeFontButton, parent);
		}
		return changeFontButton;
	}
	/* (non-Javadoc)
	 * Method declared on FieldEditor.
	 */
	public int getNumberOfControls() {
		if (previewer == null)
			return 3;
		else
			return 4;
	}
	/**
	 * Returns the preferred preview height. 
	 *
	 * @@return the height, or <code>-1</code> if no previewer
	 *  is installed
	 */
	public int getPreferredPreviewHeight() {
		if (previewer == null)
			return -1;
		return previewer.getPreferredExtent();
	}
	/**
	 * Returns the preview control for this field editor.
	 *
	 * @@return the preview control
	 */
	public Control getPreviewControl() {
		if (previewer == null)
			return null;

		return previewer.getControl();
	}
	/**
	 * Returns the value control for this field editor. The value control
	 * displays the currently selected font name.
	 * @@param parent The Composite to create the viewer in if required
	 * @@return the value control
	 */
	protected Label getValueControl(Composite parent) {
		if (valueControl == null) {
			valueControl = new Label(parent, SWT.LEFT);
			valueControl.setFont(parent.getFont());
			valueControl.addDisposeListener(new DisposeListener() {
				public void widgetDisposed(DisposeEvent event) {
					valueControl = null;
				}
			});
		} else {
			checkParent(valueControl, parent);
		}
		return valueControl;
	}
	/**
	 * Sets the text of the change button.
	 *
	 * @@param text the new text
	 */
	public void setChangeButtonText(String text) {
		Assert.isNotNull(text);
		changeButtonText = text;
		if (changeFontButton != null)
			changeFontButton.setText(text);
	}
	/**
	 * Updates the change font button and the previewer to reflect the
	 * newly selected font.
	 * @@param font The FontData[] to update with.
	 */
	private void updateFont(FontData font[]) {
		FontData[] bestFont =
			JFaceResources.getFontRegistry().filterData(
				font,
				valueControl.getDisplay());

		//if we have nothing valid do as best we can
		if (bestFont == null)
			bestFont = getDefaultFontData();

		//Now cache this value in the receiver
		this.chosenFont = bestFont;

		if (valueControl != null) {
			valueControl.setText(StringConverter.asString(chosenFont[0]));
		}
		if (previewer != null) {
			previewer.setFont(bestFont);
		}
	}
	/**
	 * Store the default preference for the field
	 * being edited
	 */
	protected void setToDefault() {
		FontData[] defaultFontData =
			PreferenceConverter.getDefaultFontDataArray(
				getPreferenceStore(),
				getPreferenceName());
		PreferenceConverter.setValue(
			getPreferenceStore(),
			getPreferenceName(),
			defaultFontData);
	}

	/**
	 * Get the system default font data.
	 * @@return FontData[]
	 */
	private FontData[] getDefaultFontData() {
		return valueControl.getDisplay().getSystemFont().getFontData();
	}

	/*
	 * @@see FieldEditor.setEnabled(boolean,Composite).
	 */
	public void setEnabled(boolean enabled, Composite parent) {
		super.setEnabled(enabled, parent);
		getChangeControl(parent).setEnabled(enabled);
		getValueControl(parent).setEnabled(enabled);
	}
	
	/**
	 * Sets the displayed/selected font to be the font
	 * for FontData newFont.
	 * @@param newFont
	 */
	public void setFont(FontData newFont){
		FontData[] oldFont = chosenFont;
		if(oldFont == null)
			oldFont = JFaceResources.getDefaultFont().getFontData();
		setPresentsDefaultValue(false);
		FontData[] newData = new FontData[1];
		newData[0] = newFont;
		updateFont(newData);
		fireValueChanged(VALUE, oldFont[0], newFont);	
	}

}
@


1.4
log
@[110317] gmf_head ahunter 051212 Compiler warning count should be 0 - runtime foundation layer components
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d14 1
a19 1
import org.eclipse.jface.util.Assert;
@


1.3
log
@Bugzilla Bug 110317 gmf_head ahunter 051102 Compiler warning count should be 0 - runtime foundation layer components
@
text
@d365 1
a365 1
			JFaceResources.getFontRegistry().bestDataArray(
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d209 1
a209 1
				IDialogConstants.BUTTON_HEIGHT);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

