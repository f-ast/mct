head	1.2;
access;
symbols
	v20081023-2107:1.2
	v20081022-1925:1.2
	v20081022-1104:1.2
	v20081020-0700:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080512-1200:1.2
	v20080503-1740:1.2
	v20080501-1739:1.2
	v20080425-1959:1.2
	v20080407-2250:1.2
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20071003-0000:1.2
	v20070921-0000:1.2
	v20070915-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070504-1000:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061020-1000:1.2
	v20061013-1330:1.2
	v20061012-1100:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060824-1600:1.2
	v20060803-1200:1.2
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060526-1200:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.2
date	2005.09.12.21.23.49;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.15;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@/******************************************************************************
 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.dialogs;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.gmf.runtime.common.core.util.StringStatics;

/**
 * Show Related Elements Presets helper.
 * 
 * Includes methods for serializing and deserializing and also a converter
 * interface for the serializer and deserializer.
 * 
 * @@author wdiu, Wayne Diu
 */
public class ShowRelatedElementsPresetHelper {

	/**
	 * Key separator for serialzing
	 */
	public static final String KEY_SEPARATOR = StringStatics.COLON;

	/**
	 * Value separator for serialzing
	 */
	public static final String VALUE_SEPARATOR = StringStatics.COMMA;

	/**
	 * Methods for the serializer and deserializer which should be implemented
	 * to convert the serialized String into an object and to convert the object
	 * into a serialzed String.
	 */
	public interface IConversionMethods {

		/**
		 * Convert the string to an object for the ShowRelatedElementsPreset's
		 * custom data.
		 * 
		 * @@param string
		 *            to be converted
		 * @@return Object converted from string
		 */
		public Object convertSerializableStringToCustomData(String string);

		/**
		 * Convert the objet into a serializable string for the serialization
		 * 
		 * @@param object
		 *            to be converted
		 * @@return String converted from object
		 */
		public String convertCustomDataToSerializableString(Object object);
	}

	/**
	 * Do not instantiate this private class
	 */
	private ShowRelatedElementsPresetHelper() {
		//do nothing
	}

	/**
	 * Convenience method to find a preset from the list.
	 * 
	 * @@param list
	 *            List of ShowRelatedElementsPreset objects.
	 * @@param name
	 *            name to match
	 * 
	 * @@return the first matching ShowRelatedElementsPreset.
	 */
	public static ShowRelatedElementsPreset findPresetFromList(List list,
			String name) {
		Iterator it = list.iterator();
		while (it.hasNext()) {
			Object obj = it.next();
			assert (obj instanceof ShowRelatedElementsPreset);
			ShowRelatedElementsPreset preset = (ShowRelatedElementsPreset) obj;
			if (preset.getName().equals(name))
				return preset;
		}

		return null;

	}

	/**
	 * Return a list of ShowRelatedElementsPreset objects.
	 * 
	 * @@param nameToIgnore
	 *            ignore this name when reading in the presets. Can be null if
	 *            you do not want to ignore anything and read everything in.
	 * @@param settings
	 *            string array of settings
	 * @@param conversionMethod
	 *            see the IConversionMethods class above
	 * 
	 * @@return List of the presets. Items in the List are
	 *         ShowRelatedElementsPreset objects
	 */
	public static List readPresets(String nameToIgnore, String[] settings,
			IConversionMethods conversionMethod) {
		java.util.List presets = new ArrayList();

		if (settings == null)
			return presets;

		String name, ids, custom, type, levels;
		ShowRelatedElementsPreset preset;

		for (int i = 0; i < settings.length; i++) {
			preset = null;

			String[] split = settings[i].split(KEY_SEPARATOR);

			//TODO make sure it has a next token
			name = split[0];
			if (nameToIgnore != null
				&& name.toUpperCase().equals(nameToIgnore.toUpperCase())) {
				//skip;
				continue;
			}

			//TODO make sure it has a next token
			ids = split[1];
			java.util.List readIds = new ArrayList();
			String[] splitIds = ids.split(VALUE_SEPARATOR);
			for (int j = 0; j < splitIds.length; j++) {
				if (!splitIds[j].equals(StringStatics.SPACE))
					readIds.add(splitIds[j]);
			}

			//TODO make sure it has a next token
			custom = split[2];
			/*
			 * java.util.List readCustoms = new ArrayList(); String[]
			 * splitCustoms = custom.split(VALUE_SEPARATOR); for (int j = 0; j <
			 * splitCustoms.length; j++) { if
			 * (!splitCustoms[j].equals(StringStatics.SPACE))
			 * readCustoms.add(splitCustoms[j]); }
			 */

			//TODO make sure it has a next token
			type = split[3];

			levels = split[4];

			//TODO better error checking when parsing int
			preset = new ShowRelatedElementsPreset(name, false, Integer
				.parseInt(type), Integer.parseInt(levels));
			preset.addIds(readIds);
			if (conversionMethod == null) {
				preset.setCustom(custom);
			} else {
				preset.setCustom(conversionMethod
					.convertSerializableStringToCustomData(custom));
			}

			presets.add(preset);
		}
		return presets;
	}

	/**
	 * Convert the presets to a string array used for serializing
	 * 
	 * @@param presets
	 *            List of ShowRelatedElementsPresets objects
	 * @@param conversionMethod
	 *            see the IConversionMethods class above
	 * 
	 * @@return String array that contains the data of the presets
	 */
	public static String[] convertPresetsToString(java.util.List presets,
			IConversionMethods conversionMethod) {

		String[] array = new String[presets.size()];
		int i = 0;
		Iterator it = presets.iterator();
		while (it.hasNext()) {
			Object obj = it.next();
			assert (obj instanceof ShowRelatedElementsPreset);
			ShowRelatedElementsPreset preset = (ShowRelatedElementsPreset) obj;
			String string = preset.name
				+ ShowRelatedElementsPresetHelper.KEY_SEPARATOR;

			Iterator idsIt = preset.getIds().iterator();
			while (idsIt.hasNext()) {
				obj = idsIt.next();
				assert (obj instanceof String);

				string += (String) obj;

				if (idsIt.hasNext())
					string += ShowRelatedElementsPresetHelper.VALUE_SEPARATOR;

			}

			string += ShowRelatedElementsPresetHelper.KEY_SEPARATOR;

			string += (conversionMethod != null) ? conversionMethod
				.convertCustomDataToSerializableString(preset.getCustom())
				: StringStatics.BLANK;

			string += ShowRelatedElementsPresetHelper.KEY_SEPARATOR
				+ preset.getExpansionType()
				+ ShowRelatedElementsPresetHelper.KEY_SEPARATOR
				+ preset.getLevels();

			array[i] = string;
			i++;
		}
		return array;
	}

}@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

