head	1.5;
access;
symbols
	v20081023-2107:1.5
	v20081022-1925:1.5
	v20081022-1104:1.5
	v20081020-0700:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080512-1200:1.5
	v20080503-1740:1.4
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080407-2250:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20071003-0000:1.4
	v20070921-0000:1.4
	v20070915-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070504-1000:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	M4_20:1.4
	v20061218-1200:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061020-1000:1.3.2.1
	v20061013-1330:1.4
	v20061012-1100:1.3.2.1
	v20060925-1700:1.3.2.1
	v20060919-0800:1.3.2.1
	M1_20:1.3
	v20060824-1600:1.3
	v20060803-1200:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060526-1200:1.3
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2008.05.09.20.45.38;	author ahunter;	state Exp;
branches;
next	1.4;
commitid	22384824b7f24567;

1.4
date	2006.10.03.14.51.25;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.24.16.00.12;	author ahunter;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.23.49;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.20;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.09.13.16.41.25;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[227658] gmf-head cvogt 080509 Update file observer to support resource links to non local file system resources
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.resources;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.runtime.content.IContentType;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;
import org.eclipse.gmf.runtime.common.ui.internal.resources.FileChangeEvent;
import org.eclipse.gmf.runtime.common.ui.internal.resources.FileChangeEventType;
import org.eclipse.gmf.runtime.common.ui.internal.resources.FileObserverFilter;
import org.eclipse.gmf.runtime.common.ui.internal.resources.FileObserverFilterType;
import org.eclipse.gmf.runtime.common.ui.internal.resources.MarkerChangeEvent;
import org.eclipse.gmf.runtime.common.ui.internal.resources.MarkerChangeEventType;

/**
 * Manage the list of file observers for the file change manager.
 * 
 * @@author Anthony Hunter <a
 *         href="mailto:ahunter@@rational.com">ahunter@@rational.com </a>
 */
public class FileObserverManager {

	/**
	 * list of file observers.
	 */
	private Hashtable fileObserverList = new Hashtable();

	/**
	 * Add a file observer with no filter.
	 * 
	 * @@param fileObserver
	 *            the file observer class implementing the IFileObserver
	 *            interface.
	 */
	protected void add(IFileObserver fileObserver) {
		trace("...FileObserverManager: addFileObserver " //$NON-NLS-1$
			+ fileObserver.toString() + " filter ALL"); //$NON-NLS-1$
		FileObserverFilter filter = new FileObserverFilter(
			FileObserverFilterType.ALL);
		fileObserverList.put(fileObserver, filter);
	}

	/**
	 * Add a file observer with a file filter.
	 * 
	 * @@param fileObserver
	 *            the file observer class implementing the IFileObserver
	 *            interface.
	 * @@param fileFilter
	 *            the file filter.
	 */
	protected void add(IFileObserver fileObserver, IFile fileFilter) {
		trace("...FileObserverManager: addFileObserver " //$NON-NLS-1$
			+ fileObserver.toString()
			+ " filter " + fileFilter.getLocationURI().toString()); //$NON-NLS-1$
		FileObserverFilter filter = new FileObserverFilter(
			FileObserverFilterType.FILE, fileFilter);
		fileObserverList.put(fileObserver, filter);
	}

	/**
	 * Add a file observer with a content type filter.
	 * 
	 * @@param fileObserver
	 *            the file observer class implementing the IFileObserver
	 *            interface.
	 * @@param contentTypeFilter
	 *            the content type array filter.
	 */
	protected void add(IFileObserver fileObserver, IContentType[] contentTypeFilter) {
		trace("...FileObserverManager: addFileObserver " //$NON-NLS-1$
			+ fileObserver.toString()
			+ " filter " + contentTypeFilter.toString()); //$NON-NLS-1$
		FileObserverFilter filter = new FileObserverFilter(
			FileObserverFilterType.CONTENT_TYPE, contentTypeFilter);
		fileObserverList.put(fileObserver, filter);
	}

	/**
	 * Add a file observer with a folder filter.
	 * 
	 * @@param fileObserver
	 *            the file observer class implementing the IFileObserver
	 *            interface.
	 * @@param folderFilter
	 *            the folder filter.
	 */
	protected void add(IFileObserver fileObserver, IFolder folderFilter) {
		trace("...FileObserverManager: addFileObserver " //$NON-NLS-1$
			+ fileObserver.toString()
			+ " filter folder" + folderFilter.getLocationURI().toString()); //$NON-NLS-1$
		FileObserverFilter filter = new FileObserverFilter(
			FileObserverFilterType.FOLDER, folderFilter);
		fileObserverList.put(fileObserver, filter);
	}

	/**
	 * Add a file observer with a file extension filter.
	 * 
	 * @@param fileObserver
	 *            the file observer class implementing the IFileObserver
	 *            interface.
	 * @@param extensionFilter
	 *            the file extension array filter.
	 */
	protected void add(IFileObserver fileObserver, String[] extensionFilter) {
		trace("...FileObserverManager: addFileObserver " //$NON-NLS-1$
			+ fileObserver.toString() + " filter " + extensionFilter[0]); //$NON-NLS-1$
		FileObserverFilter filter = new FileObserverFilter(
			FileObserverFilterType.EXTENSION, extensionFilter);
		fileObserverList.put(fileObserver, filter);
	}

	/**
	 * Remove a file observer.
	 * 
	 * @@param fileObserver
	 *            the file observer class implementing the IFileObserver
	 *            interface.
	 */
	protected void remove(IFileObserver fileObserver) {
		if (fileObserverList.containsKey(fileObserver)) {
			trace("...FileObserverManager: removeFileObserver " + fileObserver.toString()); //$NON-NLS-1$
			fileObserverList.remove(fileObserver);
		}
	}

	/**
	 * Notify file observers of a file change event.
	 * 
	 * @@param event
	 *            the file change event.
	 */
	protected void notify(FileChangeEvent event) {

		// Avoid concurrency problems when multiple threads are modifying
		// the fileObserverList
		Hashtable fileObserverListCopy = (Hashtable) fileObserverList.clone();

		for (Iterator i = fileObserverListCopy.entrySet().iterator(); i
			.hasNext();) {
			Map.Entry entry = (Map.Entry) i.next();
			IFileObserver fileObserver = (IFileObserver) entry.getKey();
			FileObserverFilter filter = (FileObserverFilter) entry.getValue();
			if (event.getEventType() == FileChangeEventType.MOVED) {
				if (filter.matches(event.getOldFile())) {
					trace("...FileObserverManager: Notify " //$NON-NLS-1$
						+ fileObserver.toString() + " handleFileMoved"); //$NON-NLS-1$
					fileObserver.handleFileMoved(event.getOldFile(), event
						.getFile());
				}
			} else if (event.getEventType() == FileChangeEventType.RENAMED) {
				if (filter.matches(event.getOldFile())) {
					trace("...FileObserverManager: Notify " //$NON-NLS-1$
						+ fileObserver.toString() + " handleFileRenamed"); //$NON-NLS-1$
					fileObserver.handleFileRenamed(event.getOldFile(), event
						.getFile());
				}
			} else if (event.getEventType() == FileChangeEventType.DELETED) {
				if (filter.matches(event.getFile())) {
					trace("...FileObserverManager: Notify " //$NON-NLS-1$
						+ fileObserver.toString() + " handleFileDeleted"); //$NON-NLS-1$
					fileObserver.handleFileDeleted(event.getFile());
				}
			} else if (event.getEventType() == FileChangeEventType.CHANGED) {
				if (filter.matches(event.getFile())) {
					trace("...FileObserverManager: Notify " //$NON-NLS-1$
						+ fileObserver.toString() + " handleFileChanged"); //$NON-NLS-1$
					fileObserver.handleFileChanged(event.getFile());
				}
			}
		}
	}

	/**
	 * Notify file observers of a marker change event.
	 * 
	 * @@param event
	 *            the marker change event.
	 */
	protected void notify(MarkerChangeEvent event) {

		// Avoid concurrency problems when multiple threads are modifying
		// the fileObserverList
		Hashtable fileObserverListCopy = (Hashtable) fileObserverList.clone();

		for (Iterator i = fileObserverListCopy.entrySet().iterator(); i
			.hasNext();) {
			Map.Entry entry = (Map.Entry) i.next();
			IFileObserver fileObserver = (IFileObserver) entry.getKey();
			FileObserverFilter filter = (FileObserverFilter) entry.getValue();
			if (filter.matches(event.getMarker().getResource())) {
				if (event.getEventType() == MarkerChangeEventType.ADDED) {
					trace("...FileObserverManager: Notify " //$NON-NLS-1$
						+ fileObserver.toString() + " handleMarkerAdded"); //$NON-NLS-1$
					fileObserver.handleMarkerAdded(event.getMarker());
				} else if (event.getEventType() == MarkerChangeEventType.CHANGED) {
					trace("...FileObserverManager: Notify " //$NON-NLS-1$
						+ fileObserver.toString() + " handleMarkerChanged"); //$NON-NLS-1$
					fileObserver.handleMarkerChanged(event.getMarker());
				} else if (event.getEventType() == MarkerChangeEventType.REMOVED) {
					trace("...FileObserverManager: Notify " //$NON-NLS-1$
						+ fileObserver.toString() + " handleMarkerDeleted"); //$NON-NLS-1$
					fileObserver.handleMarkerDeleted(event.getMarker(), event
						.getAttributes());
				}
			}
		}
	}

	/**
	 * Print a trace message if tracing is on for file change management.
	 * 
	 * @@param message
	 *            the trace message to print.
	 */
	private void trace(String message) {
		if (Trace.shouldTrace(CommonUIPlugin.getDefault(),
			CommonUIDebugOptions.RESOURCE)) {
			Trace.trace(CommonUIPlugin.getDefault(), message);
		}
	}
}@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d71 1
a71 1
			+ " filter " + fileFilter.getLocation().toOSString()); //$NON-NLS-1$
d107 1
a107 1
			+ " filter folder" + folderFilter.getLocation().toOSString()); //$NON-NLS-1$
d124 1
a124 1
			+ fileObserver.toString() + " filter " + extensionFilter); //$NON-NLS-1$
@


1.3
log
@[117778] gmf_head ahunter 060524 IFileChangeManager does not support filtering of Resource Change Events based on Content Type
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
@


1.3.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d20 1
a20 1

d78 18
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

