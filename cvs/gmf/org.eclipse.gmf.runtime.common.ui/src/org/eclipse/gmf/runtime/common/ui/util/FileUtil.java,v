head	1.3;
access;
symbols
	v20081023-2107:1.3
	v20081022-1925:1.3
	v20081022-1104:1.3
	v20081020-0700:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.6
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080512-1200:1.3
	v20080503-1740:1.3
	v20080501-1739:1.3
	v20080425-1959:1.3
	v20080407-2250:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20071003-0000:1.3
	v20070921-0000:1.3
	v20070915-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070504-1000:1.3
	v20070330-1300:1.3
	v20070208-1800:1.3
	M4_20:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061020-1000:1.3
	v20061013-1330:1.3
	v20061012-1100:1.3
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060824-1600:1.3
	v20060803-1200:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060526-1200:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.3
date	2005.12.12.21.22.18;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.23.49;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.17;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[110317] gmf_head ahunter 051212 Compiler warning count should be 0 - runtime foundation layer components
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.util;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IResourceStatus;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.OperationCanceledException;
import org.eclipse.core.runtime.Path;

import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;

/**
 * This class provides general methods for operating on files.
 * @@author wdiu
 */
public class FileUtil {
	/**
	 * Creates a file resource given the file handle and contents.
	 *
	 * @@param fileHandle the file handle to create a file resource with
	 * @@param contents the initial contents of the new file resource, or
	 *   <code>null</code> if none (equivalent to an empty stream)
	 * @@param monitor the progress monitor to show visual progress with
	 * @@exception CoreException if the operation fails
	 */
	static public void createFile(
		IFile fileHandle,
		InputStream contents,
		IProgressMonitor monitor)
		throws CoreException {
		if (contents == null)
			contents = new ByteArrayInputStream(new byte[0]);

		try {
			// Create a new file resource in the workspace
			fileHandle.create(contents, false, monitor);
		} catch (CoreException e) {
			// If the file already existed locally, just refresh to get contents
			if (e.getStatus().getCode() == IResourceStatus.PATH_OCCUPIED)
				fileHandle.refreshLocal(IResource.DEPTH_ZERO, null);
			else {
				Trace.catching(CommonUIPlugin.getDefault(), CommonUIDebugOptions.EXCEPTIONS_CATCHING, CommonUIPlugin.getDefault().getClass(), "createFile", e); //$NON-NLS-1$
				Log.error(CommonUIPlugin.getDefault(), CommonUIStatusCodes.SERVICE_FAILURE, "createFile", e); //$NON-NLS-1$
				Trace.throwing(CommonUIPlugin.getDefault(), CommonUIDebugOptions.EXCEPTIONS_THROWING, CommonUIPlugin.getDefault().getClass(), "createFile", e); //$NON-NLS-1$
				throw e;
			}
		}

		if (monitor.isCanceled())
			throw new OperationCanceledException();
	}

	/**
	 * Deletes a file resource given the file handle.
	 *
	 * @@param fileHandle the file handle to delete.
	 * @@param monitor the progress monitor to show visual progress with
	 * @@exception CoreException if the operation fails
	 */
	static public void deleteFile(IFile fileHandle, IProgressMonitor monitor)
		throws CoreException {
		try {
			// Delete a file resource in the workspace
			fileHandle.delete(true, monitor);
		} catch (CoreException e) {
			Trace.catching(CommonUIPlugin.getDefault(), CommonUIDebugOptions.EXCEPTIONS_CATCHING, CommonUIPlugin.getDefault().getClass(), "createFile", e); //$NON-NLS-1$
			Log.error(CommonUIPlugin.getDefault(), CommonUIStatusCodes.SERVICE_FAILURE, "createFile", e); //$NON-NLS-1$
			Trace.throwing(CommonUIPlugin.getDefault(), CommonUIDebugOptions.EXCEPTIONS_THROWING, CommonUIPlugin.getDefault().getClass(), "createFile", e); //$NON-NLS-1$
			throw e;
		}

		if (monitor.isCanceled())
			throw new OperationCanceledException();
	}
	
	private static final String RELATIVE_STR = ".."; //$NON-NLS-1$

	/**
	 * Build the relative path according to the url path and model path
	 * 
	 * @@param urlPathstr
	 *            the url path, make sure the url is a file path, otherwise do
	 *            not change.
	 * @@param modelPathstr
	 *            the model's path
	 * @@return the relative path
	 */
	public static String getRelativePath(String urlPathstr, String modelPathstr) {
		StringBuffer res = new StringBuffer();
		IPath urlPath = new Path(urlPathstr);
		IPath modelPath = new Path(modelPathstr);
		if (urlPathstr.indexOf("://") > 0) { //$NON-NLS-1$
			return urlPathstr;
		}
		int matchingSegments = urlPath.matchingFirstSegments(modelPath);
		int backSegments = modelPath.segmentCount() - matchingSegments - 1;
		while (backSegments > 0) {
			res.append(RELATIVE_STR); 
			res.append(File.separatorChar);
			backSegments--;
		}
		int segCount = urlPath.segmentCount();
		for (int i = matchingSegments; i < segCount; i++) {
			if (i > matchingSegments) {
				res.append(File.separatorChar);
			}
			res.append(urlPath.segment(i));
		}
		return res.toString();
	}
	
	
	/**
	 * make the absolute path from relative url path and base model path
	 * 
	 * @@param strurlPath
	 *            the URL Path String
	 * @@param strmodelPath
	 *            the absolute Model Path
	 * @@return the relative path String
	 */
	public static String getAbsolutePath(String strurlPath, String strmodelPath) {
		IPath urlPath = new Path(strurlPath);
		
		// RATLC00535293 - if the file path is already absolute, just return it
		if (urlPath.isAbsolute())
			return strurlPath;
		 
		IPath modelPath = new Path(strmodelPath);
		int rel_level = 0;
		for (int i = 0; i < urlPath.segmentCount(); i++) {
			if (urlPath.segment(i).equals(RELATIVE_STR)) {
				rel_level++;
			}
		}
		urlPath = urlPath.removeFirstSegments(rel_level);
		modelPath = modelPath.removeLastSegments(rel_level + 1);
		urlPath = modelPath.append(urlPath);
		return urlPath.toOSString();
	}
}@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d119 1
a119 1
			res.append(RELATIVE_STR); //$NON-NLS-1$
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

