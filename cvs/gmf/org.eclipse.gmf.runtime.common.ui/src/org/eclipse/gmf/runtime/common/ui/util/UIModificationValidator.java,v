head	1.5;
access;
symbols
	v20081023-2107:1.5
	v20081022-1925:1.5
	v20081022-1104:1.5
	v20081020-0700:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080512-1200:1.5
	v20080503-1740:1.5
	v20080501-1739:1.5
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20071003-0000:1.4
	v20070921-0000:1.4
	v20070915-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070504-1000:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	M4_20:1.4
	v20061218-1200:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061020-1000:1.3.2.1
	v20061013-1330:1.3
	v20061012-1100:1.3
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060824-1600:1.3
	v20060803-1200:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060526-1200:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.5
date	2008.02.08.21.42.40;	author ldamus;	state Exp;
branches;
next	1.4;
commitid	38e747acccd04567;

1.4
date	2006.10.13.19.53.22;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.28.19.58.48;	author ahunter;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.23.49;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.17;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.10.13.19.28.44;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[212178] gmf_head jbruck 080208 GMF validation enhancements
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.util;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Status;
import org.eclipse.gmf.runtime.common.core.command.IModificationValidator;
import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator.ISyncExecHelper;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.ui.internal.l10n.CommonUIMessages;
import org.eclipse.gmf.runtime.common.ui.resources.FileModificationValidator;
import org.eclipse.jface.operation.ModalContext;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IWindowListener;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;

/**
 * A validator responsible for doing the actual validation on files. The
 * validation determines whether files may be modified. It delegates to
 * IWorkspace's validateEdit and supplies a UI context from the active shell if
 * available.
 * 
 * @@author wdiu, Wayne Diu
 */
public class UIModificationValidator
	implements IModificationValidator {

    /**
     * Window listener
     */
    private WindowListener listener;
    
    /**
     * Window listener to obtain the active shell
     * 
     * @@author wdiu, Wayne Diu
     */
    private class WindowListener implements IWindowListener {
        /**
         * A shell that can be specified as a parameter in the constructor
         */
        protected Shell shell;
        
        /* (non-Javadoc)
         * @@see org.eclipse.ui.IWindowListener#windowActivated(org.eclipse.ui.IWorkbenchWindow)
         */
        public void windowActivated(IWorkbenchWindow window) {
            shell = window.getShell();
        }

        /* (non-Javadoc)
         * @@see org.eclipse.ui.IWindowListener#windowClosed(org.eclipse.ui.IWorkbenchWindow)
         */
        public void windowClosed(IWorkbenchWindow window) {
            //do nothing
        }

        /* (non-Javadoc)
         * @@see org.eclipse.ui.IWindowListener#windowDeactivated(org.eclipse.ui.IWorkbenchWindow)
         */
        public void windowDeactivated(IWorkbenchWindow window) {
            //do nothing
        }

        /* (non-Javadoc)
         * @@see org.eclipse.ui.IWindowListener#windowOpened(org.eclipse.ui.IWorkbenchWindow)
         */
        public void windowOpened(IWorkbenchWindow window) {
            //do nothing
        }
        
        /**
         * Constructor that takes a shell
         * @@param theShell initial active shell
         */
        public WindowListener(Shell theShell) {
            this.shell = theShell;
        }
        
        /**
         * Returns the active shell
         * @@return active Shell
         */
        public Shell getShell() {
            return shell;
        }
    }
    
	/**
	 * Error status code. The OK status code is defined by Eclipse's Status
	 * class.
	 */
	private static final Status ERROR_STATUS = new Status(Status.ERROR,
		Platform.PI_RUNTIME, 1, StringStatics.BLANK, null);

    /**
     * Constructs a UI modification validator and initializes the UI context
     */
    public UIModificationValidator() {
        Display.getDefault().asyncExec(new Runnable() {
            public void run() {
                IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
                Shell shell = window == null ? null : window.getShell();
                listener = new WindowListener(shell);
                PlatformUI.getWorkbench().addWindowListener(listener);
            }
        });
    }
            
   /**
    *  Helper class that allows us to return status information 
    *  in addition to providing the option of clearing the 
    *  shell variable before running doValidate().
    *  
    * @@author James Bruck (jbruck)
    */
    class RunnableWithStatus implements Runnable {

		private final IFile[] files;
		private IStatus status;
		private Shell shell;
		
		RunnableWithStatus(IFile[] files, Shell shell) {
			this.files = files;
			this.shell = shell;
		}

		public void run() {
			status = doValidateEdit(files, shell);
		}
		public IStatus getResult() {
			return status;
		}
		
		public void setShell(Shell shell) {
			this.shell = shell;
		}
	}
        
    /**
     * This is the where the real call to validate the files takes place.
     * 
     * @@param files list of files to validate.
     * @@param shell the shell to use when displaying error messages.
     * @@return the status indicating whether the validate succeeded or not.
     */
    protected IStatus doValidateEdit(IFile[] files, Shell shell) {

		boolean ok = FileModificationValidator.getInstance().okToEdit(files,
				CommonUIMessages.UIModificationValidator_ModificationMessage,
				shell);
		return ok ? Status.OK_STATUS : ERROR_STATUS;
	}
	    
    /*
     * (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.common.core.command.IModificationValidator#validateEdit(org.eclipse.core.resources.IFile[])
     */
    public IStatus validateEdit(IFile[] files) {

		Shell shell = listener == null ? null : listener.getShell();
		RunnableWithStatus r = new RunnableWithStatus(files, shell);

		ISyncExecHelper syncExecHelper = org.eclipse.gmf.runtime.common.core.command.FileModificationValidator.SyncExecHelper
				.getInstance();

		if (ModalContext.isModalContextThread(Thread.currentThread())) {
			Runnable safeRunnable = syncExecHelper.safeRunnable(r);
			if( safeRunnable != null){
				Display.getDefault().syncExec(safeRunnable);
			} else {
				r.run();
			}
		} else {
			if (Display.getCurrent() == null) {
				r.setShell(null);
			}
			r.run();
		}
		return r.getResult();
	}
    
    /**
	 * Disposes this UI modification validator.
	 */
    public void dispose() {
        if (listener != null) {
            Display.getDefault().asyncExec(new Runnable() {
                public void run() {
                    PlatformUI.getWorkbench().removeWindowListener(listener);
                }
            });
        }
    }
}@


1.4
log
@[160385] gmf_head ahunter 061013 Merge 1.0.2 fix to HEAD
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d19 1
d23 1
d122 40
a161 6
    
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.core.command.IModificationValidator#validateEdit(org.eclipse.core.resources.IFile[])
	 */
	public IStatus validateEdit(IFile[] files) {
        Shell shell = listener == null ? null : listener.getShell(); 
d163 16
a178 1
			CommonUIMessages.UIModificationValidator_ModificationMessage, shell);
d180 14
a193 2
		return ok ? Status.OK_STATUS
			: ERROR_STATUS;
d197 2
a198 2
     * Disposes this UI modification validator.
     */
a207 1

@


1.3
log
@Bugzilla Bug 109445 gmf_head etworkow 051028 New Eclipse Resources Bundles Should Be Used
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
a17 1

d22 5
d39 61
d107 14
d125 1
d127 1
a127 1
			CommonUIMessages.UIModificationValidator_ModificationMessage);
d132 13
@


1.3.2.1
log
@[160385] gmf_R1_0_maintenance wdiu 061013 Validation for file modification is missing the UI context
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d18 1
a22 5
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IWindowListener;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
a34 61
    /**
     * Window listener
     */
    private WindowListener listener;
    
    /**
     * Window listener to obtain the active shell
     * 
     * @@author wdiu, Wayne Diu
     */
    private class WindowListener implements IWindowListener {
        /**
         * A shell that can be specified as a parameter in the constructor
         */
        protected Shell shell;
        
        /* (non-Javadoc)
         * @@see org.eclipse.ui.IWindowListener#windowActivated(org.eclipse.ui.IWorkbenchWindow)
         */
        public void windowActivated(IWorkbenchWindow window) {
            shell = window.getShell();
        }

        /* (non-Javadoc)
         * @@see org.eclipse.ui.IWindowListener#windowClosed(org.eclipse.ui.IWorkbenchWindow)
         */
        public void windowClosed(IWorkbenchWindow window) {
            //do nothing
        }

        /* (non-Javadoc)
         * @@see org.eclipse.ui.IWindowListener#windowDeactivated(org.eclipse.ui.IWorkbenchWindow)
         */
        public void windowDeactivated(IWorkbenchWindow window) {
            //do nothing
        }

        /* (non-Javadoc)
         * @@see org.eclipse.ui.IWindowListener#windowOpened(org.eclipse.ui.IWorkbenchWindow)
         */
        public void windowOpened(IWorkbenchWindow window) {
            //do nothing
        }
        
        /**
         * Constructor that takes a shell
         * @@param theShell initial active shell
         */
        public WindowListener(Shell theShell) {
            this.shell = theShell;
        }
        
        /**
         * Returns the active shell
         * @@return active Shell
         */
        public Shell getShell() {
            return shell;
        }
    }
    
a41 14
    /**
     * Constructs a UI modification validator and initializes the UI context
     */
    public UIModificationValidator() {
        Display.getDefault().asyncExec(new Runnable() {
            public void run() {
                IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
                Shell shell = window == null ? null : window.getShell();
                listener = new WindowListener(shell);
                PlatformUI.getWorkbench().addWindowListener(listener);
            }
        });
    }
    
a45 1
        Shell shell = listener == null ? null : listener.getShell(); 
d47 1
a47 1
			CommonUIMessages.UIModificationValidator_ModificationMessage, shell);
a51 13
    
    /**
     * Disposes this UI modification validator.
     */
    public void dispose() {
        if (listener != null) {
            Display.getDefault().asyncExec(new Runnable() {
                public void run() {
                    PlatformUI.getWorkbench().removeWindowListener(listener);
                }
            });
        }
    }
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d21 1
a21 1
import org.eclipse.gmf.runtime.common.ui.internal.l10n.ResourceManager;
a35 6
	 * Modification message
	 */
	private static final String MODIFICATION = ResourceManager
		.getI18NString("UIModificationValidator.ModificationMessage"); //$NON-NLS-1$

	/**
d47 1
a47 1
			MODIFICATION);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

