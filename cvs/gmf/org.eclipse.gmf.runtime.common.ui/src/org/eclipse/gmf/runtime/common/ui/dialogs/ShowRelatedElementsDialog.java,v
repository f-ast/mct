head	1.7;
access;
symbols
	v20081023-2107:1.7
	v20081022-1925:1.7
	v20081022-1104:1.7
	v20081020-0700:1.7
	v20080722-1827:1.7
	R2_1_maintenance:1.7.0.4
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080512-1200:1.7
	v20080503-1740:1.7
	v20080501-1739:1.7
	v20080425-1959:1.7
	v20080407-2250:1.7
	v20080222-1200:1.7
	v20080215-1500:1.7
	v20071003-0000:1.7
	v20070921-0000:1.7
	v20070915-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	RC3_20:1.7
	v20070601-1400:1.7
	v20070504-1000:1.7
	v20070330-1300:1.7
	v20070208-1800:1.7
	M4_20:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061020-1000:1.6.2.1
	v20061013-1330:1.7
	v20061012-1100:1.6.2.1
	v20060925-1700:1.6.2.1
	v20060919-0800:1.6.2.1
	M1_20:1.6
	v20060824-1600:1.6
	v20060803-1200:1.6
	v20060728-0500:1.6
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060531-1730:1.6
	v20060526-1200:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4;
locks; strict;
comment	@# @;


1.7
date	2006.10.03.14.51.25;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.06.19.56.45;	author ahunter;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2005.12.12.21.22.18;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.28.19.58.48;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.06.20.26.11;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.23.49;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.15;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.09.13.16.41.24;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.dialogs;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.IDialogSettings;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.PlatformUI;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;
import org.eclipse.gmf.runtime.common.ui.internal.l10n.CommonUIMessages;

/**
 * Show related elements dialog box, called from an action.
 * 
 * When OK is clicked, returns Window.OK and result of the dialog is saved.
 * 
 * When Cancel is clicked, returns Window.Cancel and result of dialog is not
 * saved.
 * 
 * This dialog does not include a listbox for models.
 * 
 * @@author Wayne Diu, wdiu
 */
public class ShowRelatedElementsDialog
	extends Dialog
	implements IShowRelatedElementsWithDetails {

	/* Controls */

	/**
	 * The root element
	 */
	private SelectableElement rootElement;

	/**
	 * The help context id
	 */
	private String helpContextId;

	/**
	 * ShowRelatedElementsComposite
	 */
	private ShowRelatedElementsComposite showRelatedElementsComposite;

	/**
	 * True if the details pane is shown, false if hidden
	 */
	protected boolean detailsShown = false;

	/**
	 * For storing whether the details pane was shown or hidden
	 */
	IDialogSettings dialogSettings = CommonUIPlugin.getDefault()
		.getDialogSettings();

	/**
	 * Dialog settings key True if the details pane is shown, false if hidden
	 */
	protected static final String DIALOG_SETTINGS_KEY = "ShowRelatedElementsDetails"; //$NON-NLS-1$

	/**
	 * List of queries.
	 */
	protected List queriesList;

	/**
	 * Cached levels of expansion -1 for indefinite. Default 1
	 */
	protected int cachedExpandLevels = 1;

	/**
	 * Cached expansion types. See ExpansionTypes for values. Default both
	 */
	protected int cachedExpansionType = ExpansionType.BOTH.getOrdinal();

	/**
	 * Cached relationship types.
	 */
	protected List cachedRelationshipTypes;

	/**
	 * Predefined composite placeholder.
	 */
	protected Composite placeholderForShowRelatedElementsComposite = null;

	/**
	 * Predefined composite.
	 */
	protected ShowRelatedElementsPredefinedComposite showRelatedElementsPredefinedComposite;

	/**
	 * Composite body that contains the interesting controls.
	 */
	protected Composite body;

	/**
	 * Preferred viewer width, cached
	 */
	protected int preferredViewerWidth = -1;

	/**
	 * Tree viewer control's width for the hint
	 */
	public static int MAX_VIEWER_WIDTH = 360;

	static {
		try {
			MAX_VIEWER_WIDTH = Integer
				.parseInt(CommonUIMessages.ShowRelatedElementsDialog_MAX_VIEWER_WIDTH);
		} catch (NumberFormatException e) {
			Trace.catching(CommonUIPlugin.getDefault(),
				CommonUIDebugOptions.EXCEPTIONS_CATCHING, CommonUIPlugin
					.getDefault().getClass(), "NumberFormatException", e); //$NON-NLS-1$
			/* already initialized with defaults */
			Log
				.error(
					CommonUIPlugin.getDefault(),
					CommonUIStatusCodes.RESOURCE_FAILURE,
					"Failed to parse Show Related Elements Composite's localized size", e); //$NON-NLS-1$
		}
	}

	/**
	 * Constructor takes the parent shell and root SelectableElement to add into
	 * the viewer.
	 * 
	 * @@param parentShell
	 *            the parent Shell
	 * @@param aRootElement
	 *            the root SelectableElement to add into the viewer
	 */
	public ShowRelatedElementsDialog(Shell parentShell,
			SelectableElement aRootElement) {
		this(parentShell, aRootElement, null);
	}

	/**
	 * Constructor takes the parent shell and root SelectableElement to add into
	 * the viewer. It also sets a list of predefined queries.
	 * 
	 * @@param parentShell
	 *            the parent Shell
	 * @@param aRootElement
	 *            the root SelectableElement to add into the viewer
	 * @@param aQueriesList
	 *            list of hardcoded queries
	 */
	public ShowRelatedElementsDialog(Shell parentShell,
			SelectableElement aRootElement, List aQueriesList) {
		super(parentShell);
		this.rootElement = aRootElement;
		this.queriesList = aQueriesList;

		initDialogSettings();
	}

	/**
	 * Make the predefined composite
	 * 
	 * @@param parent
	 *            parent Composite
	 * @@param root
	 *            root SelectableElement
	 * @@param queries
	 *            saved queries List
	 * @@param viewerWidth
	 *            desired width of listbox viewer
	 * @@return the predefined queries composite
	 */
	protected ShowRelatedElementsPredefinedComposite makePredefinedComposite(
			Composite parent, SelectableElement root, List queries,
			int viewerWidth) {
		return new ShowRelatedElementsPredefinedComposite(parent, this, root,
			queries, viewerWidth, detailsShown);
	}

	/**
	 * Cache the preferred viewer width after figuring it out from the longest
	 * string length of the root element.
	 * 
	 * @@return int, preferred viewer width
	 */
	protected int getPreferredViewerWidth() {
		if (preferredViewerWidth == -1) {
			// viewerWidth is based on the right side's control
			preferredViewerWidth = SelectableElement
				.calculateLongestStringLength(rootElement, getShell()) + 96;
			if (preferredViewerWidth > MAX_VIEWER_WIDTH)
				preferredViewerWidth = MAX_VIEWER_WIDTH;
		}

		return preferredViewerWidth;
	}

	/**
	 * Suggested that you override makeShowRelatedElementsComposite instead,
	 * unless you have a good reason for overriding the plcaeholder composite
	 * too.
	 * 
	 * @@param parent
	 *            the parent Composite that we will be adding the placeholder
	 *            into
	 * @@param root
	 *            root SelectableElement
	 * @@return the composite that we made inside a placeholder
	 */
	protected ShowRelatedElementsComposite makeShowRelatedElementsCompositeInPlaceholder(
			Composite parent, SelectableElement root) {
		if (placeholderForShowRelatedElementsComposite == null) {
			placeholderForShowRelatedElementsComposite = new Composite(parent,
				SWT.NULL);
			GridLayout gridLayout = new GridLayout(1, false);
			gridLayout.marginHeight = 0;
			gridLayout.marginWidth = 0;
			placeholderForShowRelatedElementsComposite.setLayout(gridLayout);
		}

		if (detailsShown) {
			ShowRelatedElementsComposite sreComposite = makeShowRelatedElementsComposite(
				placeholderForShowRelatedElementsComposite, root,
				getPreferredViewerWidth());
			sreComposite.setDetailsChangedListener(this);
			placeholderForShowRelatedElementsComposite
				.setLayoutData(new GridData(GridData.FILL_VERTICAL
					| GridData.VERTICAL_ALIGN_BEGINNING));
			return sreComposite;
		} else {
			placeholderForShowRelatedElementsComposite
				.setLayoutData(new GridData(0, 0));
			return null;

		}

	}

	/**
	 * Make the show related elements composite
	 * 
	 * @@param parent
	 *            parent Composite we will be adding into.
	 * @@param root
	 *            root SelectableElement
	 * @@param aViewerWidth
	 *            int hint for viewer width
	 * @@return the composite that we made
	 */
	protected ShowRelatedElementsComposite makeShowRelatedElementsComposite(
			Composite parent, SelectableElement root, int aViewerWidth) {
		return new ShowRelatedElementsComposite(parent, root, aViewerWidth);
	}

	/**
	 * Make the composites in the dialog
	 * 
	 * @@param parent
	 *            the parent Composite
	 * @@return the parent Composite
	 */
	protected Control createDialogArea(Composite parent) {
		body = new Composite(parent, SWT.NONE);
		body.setLayout(new GridLayout(2, false));

		showRelatedElementsPredefinedComposite = makePredefinedComposite(body,
			rootElement, queriesList, getPreferredViewerWidth());

		showRelatedElementsComposite = makeShowRelatedElementsCompositeInPlaceholder(
			body, rootElement);

		assert (!detailsShown || (detailsShown && showRelatedElementsComposite != null));

		if (showRelatedElementsComposite != null) {
			this.showRelatedElementsComposite.getTreeViewer().refresh();
		}

		getShell().setText(CommonUIMessages.ShowRelatedElementsDialog_Title);

		// set context sensitive help
		if (helpContextId != null) {
			PlatformUI.getWorkbench().getHelpSystem().setHelp(parent,
				helpContextId);
        } else {
            PlatformUI.getWorkbench().getHelpSystem().setHelp(parent, 
                "org.eclipse.gmf.runtime.common.ui.egmf0200"); //$NON-NLS-1$
        }

		return parent;
	}

	/**
	 * Create contents and give focus to the OK button
	 * 
	 * @@param parent
	 *            the parent Composite
	 * @@return Control created from superclass
	 */
	protected Control createContents(Composite parent) {
		Control control = super.createContents(parent);

		getButton(IDialogConstants.OK_ID).setFocus();

		return control;
	}

	/**
	 * OK button click handler.
	 * 
	 * Dialog is not closed if validation fails. Otherwise, the dialog closes.
	 */
	protected void okPressed() {
		// do not continue if levels box is not ok
		if (getShowRelatedElementsComposite() != null) {
			if (getShowRelatedElementsComposite().validate(true) != null)
				return;
			getShowRelatedElementsComposite().saveCachedValues();
			saveCachedValues();
		}

		setReturnCode(Window.OK);
		close();
	}

	/**
	 * Cancel button click handler
	 * 
	 * Dialog is not closed if validation fails. Otherwise, the dialog closes.
	 */
	protected void cancelPressed() {
		// dialog settings should be saved even when cancel pressed
		setReturnCode(Window.CANCEL);
		close();
	}

	/**
	 * Returns if the expand indefinitely box was checked, even if it is
	 * disposed.
	 * 
	 * @@return true if checked, false if not checked
	 */
	public boolean getExpandIndefinitely() {
		return (cachedExpandLevels == -1);
	}

	/**
	 * Returns the int value in the expand levels box, even if it is disposed
	 * and even if the user did not enter an int.
	 * 
	 * @@return int with the number of expand levels. 1 is returned if the user
	 *         did not enter an int and this was not caught earlier.
	 */
	public int getExpandLevels() {
		return cachedExpandLevels;
	}

	/**
	 * Returns if the selection to consumer radio or both radio was selected
	 * This will be deprecated when all SRE implementors implement the all
	 * connected option. Use getExpansionType() instead.
	 * 
	 * @@return true if selected, false if not selected
	 */
	public boolean getConsumerToSelection() { // useOutgoingRelationships
		return (cachedExpansionType == ExpansionType.INCOMING.getOrdinal() || cachedExpansionType == ExpansionType.BOTH
			.getOrdinal());
	}

	/**
	 * Returns if the selection to supplier radio or both radio was selected
	 * This will be deprecated when all SRE implementors implement the all
	 * connected option. Use getExpansionType() instead.
	 * 
	 * @@return true if selected, false if not selected
	 */
	public boolean getSelectionToSupplier() { // useIncomingRelationships
		return (cachedExpansionType == ExpansionType.OUTGOING.getOrdinal() || cachedExpansionType == ExpansionType.BOTH
			.getOrdinal());
	}

	/**
	 * Returns the expansion type
	 * 
	 * @@return true if selected, false if not selected
	 */
	public ExpansionType getExpansionType() {
		return ExpansionType.VALUES[cachedExpansionType];
	}

	/**
	 * Returns list of selected RelationshipTypes.
	 * 
	 * @@return List of relationship types that were from SelectableElement
	 *         objects under the root that had a SelectedType of SELECTED.
	 */
	public List getSelectedRelationshipTypes() {
		return (cachedRelationshipTypes != null) ? cachedRelationshipTypes
			: getRootElement().getSelectedElementTypes();
	}

	/**
	 * Returns the root element of the RelatedElements that were in the viewer
	 * control at the left of the dialog.
	 * 
	 * @@return SelectableElement with the root element.
	 */
	public SelectableElement getRootElement() {
		return rootElement;
	}

	/**
	 * Method getShowRelatedElementsComposite.
	 * 
	 * @@return the ShowRelatedElementsComposite contained in the dialog
	 */
	public ShowRelatedElementsComposite getShowRelatedElementsComposite() {
		return this.showRelatedElementsComposite;
	}

	/**
	 * Initialize the context sensitive help id.
	 * 
	 * @@param helpId
	 *            the help context id string
	 */
	public void initHelpContextId(String helpId) {
		this.helpContextId = helpId;
	}

	/**
	 * Save the cached values of the composite in our own cache.
	 */
	protected void saveCachedValues() {
		showRelatedElementsComposite.saveCachedValues();
		if (getShowRelatedElementsComposite().getExpandIndefinitely()) {
			cachedExpandLevels = -1;
		} else {
			cachedExpandLevels = getShowRelatedElementsComposite()
				.getExpandLevel();
		}

		cachedExpansionType = getShowRelatedElementsComposite()
			.getExpansionType().getOrdinal();

		cachedRelationshipTypes = getShowRelatedElementsComposite()
			.getSelectedRelationshipTypes();
	}

	/**
	 * Toggle showing or hiding details.
	 */
	public void showOrHideDetails() {
		if (detailsShown) {
			detailsShown = false;
			saveCachedValues();

			// don't just hide it
			showRelatedElementsComposite.dispose();

			showRelatedElementsComposite = makeShowRelatedElementsCompositeInPlaceholder(
				body, rootElement);

		} else {
			detailsShown = true;

			showRelatedElementsComposite = makeShowRelatedElementsCompositeInPlaceholder(
				body, rootElement);
		}

		placeholderForShowRelatedElementsComposite.pack();

		placeholderForShowRelatedElementsComposite.getParent().pack();
		getShell().pack();

	}

	/**
	 * Update relationshpips according to the preset
	 * 
	 * @@param preset
	 *            ShowRelatedElementsPreset containing new relationhips.
	 * 
	 */
	public void updateRelationships(ShowRelatedElementsPreset preset) {
		if (detailsShown) {
			showRelatedElementsComposite.updateRelationships(preset);
		} else {
			// do not change settings if the preset is null,
			// because that happens when there is a custom setting
			if (preset == null)
				return;

			// just cache it
			cachedExpandLevels = preset.getLevels();
			cachedExpansionType = preset.getExpansionType();

			cachedRelationshipTypes = new ArrayList();
			rootElement.getHintsThatMatchTheseIds(cachedRelationshipTypes,
				preset.getIds());
		}

	}

	/**
	 * Return the current preset settings
	 * 
	 * @@return custom ShowRelatedElementsPreset settings
	 */
	public ShowRelatedElementsPreset getCurrentSettings() {
		if (detailsShown) {
			return showRelatedElementsComposite.getCurrentSettings();
		}
		return null;
	}

	/**
	 * Notify the composite the details were changed
	 */
	public void detailsChanged() {
		if (showRelatedElementsPredefinedComposite != null) {
			showRelatedElementsPredefinedComposite.detailsChanged();
		}

	}

	/**
	 * Return the predefined composite.
	 * 
	 * @@return the ShowRelatedElementsPredefinedComposite
	 */
	protected ShowRelatedElementsPredefinedComposite getPredefinedComposite() {
		return showRelatedElementsPredefinedComposite;
	}

	/**
	 * Read in dialog settings and update based on that.
	 * 
	 * For now, only take care of the detailsShown instance variable for
	 * deciding whether or not we should show the details pane.
	 * 
	 */
	protected void initDialogSettings() {
		detailsShown = dialogSettings.getBoolean(DIALOG_SETTINGS_KEY);
	}

	/**
	 * Store the dialog settings from our current dialog.
	 * 
	 * For now, only take care of the detailsShown instance variable for
	 * deciding whether or not we should show the details pane.
	 * 
	 */
	protected void saveDialogSettings() {
		dialogSettings.put(DIALOG_SETTINGS_KEY, detailsShown);
	}

	/**
	 * Save settings before close
	 * 
	 * @@return boolean, superclass result
	 */
	public boolean close() {
		saveDialogSettings();
		return super.close();
	}
}@


1.6
log
@[135376] gmf_head ahunter 060406 Clients would like context sensitive help ids for GMF dialogs
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
@


1.6.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.5
log
@[110317] gmf_head ahunter 051212 Compiler warning count should be 0 - runtime foundation layer components
@
text
@d301 1
a301 1
		if (helpContextId != null)
d304 4
@


1.4
log
@Bugzilla Bug 109445 gmf_head etworkow 051028 New Eclipse Resources Bundles Should Be Used
@
text
@d131 2
a132 1
			MAX_VIEWER_WIDTH = Integer.parseInt(CommonUIMessages.ShowRelatedElementsDialog_MAX_VIEWER_WIDTH); //$NON-NLS-1$
d147 2
a148 2
	 * Constructor takes the parent shell and root SelectableElement to add
	 * into the viewer.
d161 2
a162 2
	 * Constructor takes the parent shell and root SelectableElement to add
	 * into the viewer.  It also sets a list of predefined queries.
d208 1
a208 1
			//viewerWidth is based on the right side's control
d300 1
a300 1
		//set context sensitive help
d302 2
a303 1
			PlatformUI.getWorkbench().getHelpSystem().setHelp(parent, helpContextId);
d329 1
a329 1
		//do not continue if levels box is not ok
d347 1
a347 1
		//dialog settings should be saved even when cancel pressed
d380 1
a380 1
	public boolean getConsumerToSelection() { //useOutgoingRelationships
d392 1
a392 1
	public boolean getSelectionToSupplier() { //useIncomingRelationships
d473 1
a473 1
			//don't just hide it
d498 1
a498 1
	 *  
d504 2
a505 2
			//do not change settings if the preset is null,
			//because that happens when there is a custom setting
d509 1
a509 1
			//just cache it
d556 1
a556 1
	 *  
d567 1
a567 1
	 *  
@


1.3
log
@Bugzilla 110317 gmf_head etworkow 051006 Compiler warning count should be 0 - runtime foundation layer components
@
text
@d33 1
a33 1
import org.eclipse.gmf.runtime.common.ui.internal.l10n.ResourceManager;
d131 1
a131 2
			MAX_VIEWER_WIDTH = Integer.parseInt(ResourceManager
				.getI18NString("ShowRelatedElementsDialog.MAX_VIEWER_WIDTH")); //$NON-NLS-1$
d297 1
a297 2
		getShell().setText(
			ResourceManager.getI18NString("ShowRelatedElementsDialog.Title")); //$NON-NLS-1$
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d27 1
a27 2
import org.eclipse.ui.help.WorkbenchHelp;

d303 1
a303 1
			WorkbenchHelp.setHelp(parent, helpContextId);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

