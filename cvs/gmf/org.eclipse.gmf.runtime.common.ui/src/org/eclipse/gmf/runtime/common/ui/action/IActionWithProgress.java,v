head	1.2;
access;
symbols
	v20081023-2107:1.2
	v20081022-1925:1.2
	v20081022-1104:1.2
	v20081020-0700:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080512-1200:1.2
	v20080503-1740:1.2
	v20080501-1739:1.2
	v20080425-1959:1.2
	v20080407-2250:1.2
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20071003-0000:1.2
	v20070921-0000:1.2
	v20070915-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070504-1000:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061020-1000:1.2
	v20061013-1330:1.2
	v20061012-1100:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060824-1600:1.2
	v20060803-1200:1.2
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060526-1200:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2005.12.13.20.32.06;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.05.17.12.46;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.2
log
@[110317] gmf_head ahunter 051312 Compiler warning count should be 0 - runtime foundation layer components
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.action;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;

import org.eclipse.gmf.runtime.common.core.util.EnumeratedType;

/**
 * The interface for all actions that could potentially be run with a progress
 * indicator.
 * 
 * @@author khussey
 * @@author ldamus
 */
public interface IActionWithProgress {
    /**
     * Enumerated type for work indicator type
     */
    public class WorkIndicatorType extends EnumeratedType {
        private static int nextOrdinal = 0;
    
    	private static final long serialVersionUID = 1L;

        /** No work indicator. */
        public static final WorkIndicatorType NONE = new WorkIndicatorType("None"); //$NON-NLS-1$
    
        /** Busy work indicator. */
        public static final WorkIndicatorType BUSY = new WorkIndicatorType("Busy"); //$NON-NLS-1$
    
        /** Progress monitor work indicator. */
        public static final WorkIndicatorType PROGRESS_MONITOR = new WorkIndicatorType("Progress Monitor"); //$NON-NLS-1$
    
        /** Cancelable progress monitor work indicator. */
    	public static final WorkIndicatorType CANCELABLE_PROGRESS_MONITOR = new WorkIndicatorType("Cancelable Progress Monitor"); //$NON-NLS-1$
    	
        /**
         * The list of values for this enumerated type.
         */
        private static final WorkIndicatorType[] VALUES =
            { NONE, BUSY, PROGRESS_MONITOR, CANCELABLE_PROGRESS_MONITOR };
    
        /**
         * Constructor for WorkIndicatorType.
         * @@param name The name for the WorkIndicatorType
         * @@param ordinal The ordinal for theWorkIndicatorType
         */
        protected WorkIndicatorType(String name, int ordinal) {
            super(name, ordinal);
        }
    
        /**
         * Constructor for WorkIndicatorType.
         * @@param name The name for the WorkIndicatorType
         */
        private WorkIndicatorType(String name) {
            this(name, nextOrdinal++);
        }
    
        /**
         * Retrieves the list of constants for this enumerated type.
         * @@return The list of constants for this enumerated type.
         */
        protected List getValues() {
            return Collections.unmodifiableList(Arrays.asList(VALUES));
        }
    }

    /**
     * Retrieves the label for this action.
     * 
     * @@return The label for this action.
     */
    public String getLabel();

    /**
     * Retrieves a Boolean indicating whether this action can be
     * run.
     * 
     * @@return <code>true</code> if this action can be run;
     *          <code>false</code> otherwise.
     */
    public boolean isRunnable();

    /**
     * Refreshes various aspects of this action, such as its label
     * and whether or not it is enabled.
     */
    public void refresh();
    
    /**
     * Sets up the action. Should always be called before
     * {@@link #run(IProgressMonitor)} is called.
     * @@return <code>true</code> if the setup completed successfully,
     * 		   <code>false</code> otherwise.
     */
    public boolean setup();

    /**
     * Runs this action.
     * 
     * @@param progressMonitor <code>IProgressMonitor</code> monitoring the execution of this action
     */
    public void run(IProgressMonitor progressMonitor);

    /**
     * Gets type of work indicator (progress monitor, hourglass, or none).
     * 
     * @@return type of work indicator
     */
    public WorkIndicatorType getWorkIndicatorType();
}
@


1.1
log
@Bugzilla 111637 gmf_head ldamus 051005 IRepeatableAction should be deprecated
@
text
@d36 2
@

