head	1.5;
access;
symbols
	v20081022-1925:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.5
date	2006.02.02.21.10.06;	author ahunter;	state dead;
branches;
next	1.4;

1.4
date	2005.12.12.21.22.36;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.12.20.55.07;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.23.50;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.21;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[114587] gmf_head ahunter 060202 Migrate GMF plug-ins to conform with Eclipse standard way of managing Images and Fonts
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.l10n;

import java.text.MessageFormat;

import org.eclipse.jface.resource.FontRegistry;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.widgets.Display;

import org.eclipse.gmf.runtime.common.core.internal.CommonCorePlugin;
import org.eclipse.gmf.runtime.common.core.internal.CommonCoreStatusCodes;
import org.eclipse.gmf.runtime.common.core.util.Log;

/**
 * Class represents a font registry that is always empty. It is designed as a 
 * default value to be returned whenever users try to load a regsitry that does
 * not exist. An empty font resitry will always return a default font for all 
 * queries and log all attempts to access it to the error log.
 * 
 * @@author Natalia Balaba
 * @@canBeSeenBy %partners
 * @@deprecated used by AbstractUIResourceManager which is deprecated.
 * This class was deprecated November 9, 2005 for https://bugs.eclipse.org/bugs/show_bug.cgi?id=114587
 * This class will be removed December 19, 2005 before declaration of the M4 milestone.
 */
public final class EmptyFontRegistry extends FontRegistry {

	// --------------------------------------------------------------------//
	// ------------  STATIC VARIABLES BEGIN -------------------------------//
	// --------------------------------------------------------------------//

	/**
	 * error message
	 */
	private static String MISSING_REGISTRY_MESSAGE = "Font registry ({0}) is missing."; //$NON-NLS-1$

	/**
	 * error message
	 */
	private static String INVALID_ACCESS_MESSAGE = "Attempt to access font in missing registry ({0})."; //$NON-NLS-1$

	// --------------------------------------------------------------------//
	// ------------  STATIC VARIABLES END -----------------------------//
	// --------------------------------------------------------------------//	

	// --------------------------------------------------------------------//
	// ------------  INSTANCE VARIABLES BEGIN -----------------------------//
	// --------------------------------------------------------------------//

	/**
	 *  name of the font regsitry that was not accessible
	 */
	private String registryName = null;

	// --------------------------------------------------------------------//
	// ------------  INSTANCE VARIABLES END -------------------------------//
	// --------------------------------------------------------------------//    

	// --------------------------------------------------------------------//
	// ------------  CONSTRUCTORS BEGIN -----------------------------------//
	// --------------------------------------------------------------------//
	/**
	 * Constructor for EmptyFontRegistry.
	 * 
	 * @@param registryName empty <code>FontRegistry</code>
	 */
	public EmptyFontRegistry(String registryName) {
		super();

		this.registryName = registryName;

		Log.warning(
			CommonCorePlugin.getDefault(),
			CommonCoreStatusCodes.L10N_FAILURE,
			MessageFormat.format(
				MISSING_REGISTRY_MESSAGE,
				new Object[] { getRegistryName()}));
	}

	// --------------------------------------------------------------------//
	// ------------  CONSTRUCTORS END -------------------------------------//
	// --------------------------------------------------------------------//

	// --------------------------------------------------------------------//
	// ------------  INSTANCE METHODS BEGIN -------------------------------//
	// --------------------------------------------------------------------//    
	/**
	 * Method getRegistryName.
	 * @@return name of the missing registry
	 */
	private String getRegistryName() {
		return registryName;
	}

	/* Do nothing - the registry is always empty
	 * @@see org.eclipse.jface.resource.FontRegistry#put(String, FontData[])
	 */
	public void put(String symbolicName, FontData[] fontData) {
		/* empty method body */
	}

	/**
	 * Returns the default font data . Logs error to the log
	 *
	 * @@param symbolicName symbolic font name
	 * @@return the font with the given symbolic name
	 */
	public FontData[] getFontData(String symbolicName) {
		Log.warning(
			CommonCorePlugin.getDefault(),
			CommonCoreStatusCodes.L10N_FAILURE,
			MessageFormat.format(
				INVALID_ACCESS_MESSAGE,
				new Object[] { getRegistryName()}));

		return super.getFontData(symbolicName);
	}
	
    /**
     * @@see org.eclipse.jface.resource.FontRegistry#bestDataArray(org.eclipse.swt.graphics.FontData[], org.eclipse.swt.widgets.Display)
     */
    public FontData[] bestDataArray(FontData[] fonts, Display display) {
		Log.warning(
			CommonCorePlugin.getDefault(),
			CommonCoreStatusCodes.L10N_FAILURE,
			MessageFormat.format(
				INVALID_ACCESS_MESSAGE,
				new Object[] { getRegistryName()}));

        return super.bestDataArray(fonts, display);
    }

	// --------------------------------------------------------------------//
	// ------------  INSTANCE MEHTODS END ---------------------------------//
	// --------------------------------------------------------------------//
}
@


1.4
log
@[114587] gmf_head ahunter 051212 Migrate GMF plug-ins to conform with Eclipse standard way of managing Images and Fonts
@
text
@@


1.3
log
@Bugzilla 110653 gmf_head ahunter 051012 Eroneous references to xtools in gmf common namespace
@
text
@d32 3
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d103 1
a103 1
	 * @@see com.ibm.xtools.common.l10n.FontRegistry#put(String, FontData[])
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

