head	1.4;
access;
symbols
	v20081022-1925:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	I20051217-0925:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.4
date	2005.12.22.19.37.57;	author ahunter;	state dead;
branches;
next	1.3;

1.3
date	2005.10.28.17.50.33;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.23.49;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.17;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[112829] gmf_head ahunter 051222 Progress Monitor Dialog usage in GMF
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.util;

import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;

import org.eclipse.gmf.runtime.common.core.command.CommandManager;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIDebugOptions;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIPlugin;
import org.eclipse.gmf.runtime.common.ui.internal.CommonUIStatusCodes;

/**
 * This class defines convenience methods for executing a command and monitoring
 * the progress of that command in a cancelable
 * {@@link org.eclipse.gmf.runtime.common.ui.dialogs.DispatchingProgressMonitorDialog}.
 * <P>
 * These convenience methods should be used for executing commands that interact
 * with the model server.
 * <P>
 * Because these convenience methods will instantiate a
 * DispatchingProgressMonitorDialog, they should only be used in code that is
 * meant to depend on the UI.
 * 
 * @@author ldamus
 * @@deprecated Clients should use the Eclipse ProgressMonitorDialog
 * @@see org.eclipse.jface.dialogs.ProgressMonitorDialog
 */
public class DispatchingProgressDialogUtil {

	/**
	 * Runs <code>runnableWithProgress</code> in a cancelable
	 * {@@link DispatchingProgressMonitorDialog}. The runnable runs in the same
	 * thread as the dialog.
	 * 
	 * @@param runnableWithProgress
	 *            the runnable to run in the dialog
	 */
	public static void runWithDispatchingProgressDialog(
			IRunnableWithProgress runnableWithProgress) {

		try {
			if (System.getProperty("RUN_PROGRESS_IN_THREAD") != null) { //$NON-NLS-1$
				new ProgressMonitorDialog(null).run(true, true, runnableWithProgress);
			} else {
				new ProgressMonitorDialog(null).run(false, true, runnableWithProgress);
			}

		} catch (InvocationTargetException ite) {
			Trace.catching(CommonUIPlugin.getDefault(),
				CommonUIDebugOptions.EXCEPTIONS_CATCHING,
				DispatchingProgressDialogUtil.class,
				"runWithDispatchingProgressDialog", ite); //$NON-NLS-1$
			Log.error(CommonUIPlugin.getDefault(),
				CommonUIStatusCodes.SERVICE_FAILURE,
				"runWithDispatchingProgressDialog", ite); //$NON-NLS-1$
		} catch (InterruptedException ie) {
			Trace.catching(CommonUIPlugin.getDefault(),
				CommonUIDebugOptions.EXCEPTIONS_CATCHING,
				DispatchingProgressDialogUtil.class,
				"runWithDispatchingProgressDialog", ie); //$NON-NLS-1$
		}
	}

	/**
	 * Executes <code>command</code> in a cancelable
	 * {@@link DispatchingProgressMonitorDialog}. The command runs in the same
	 * thread as the dialog.
	 * 
	 * @@param command
	 *            the command to execute
	 */
	public static void executeWithDispatchingProgressDialog(
			final ICommand command) {

		IRunnableWithProgress runnableWithProgress = new IRunnableWithProgress() {

			public void run(IProgressMonitor monitor)
				throws InvocationTargetException, InterruptedException {

				CommandManager.getDefault().execute(command, monitor);

			}
		};
		runWithDispatchingProgressDialog(runnableWithProgress);
	}

}@


1.3
log
@Bugzilla Bug 112829 gmf_head ahunter 051028 Progress Monitor Dialog usage in GMF
@
text
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d17 1
a23 1
import org.eclipse.gmf.runtime.common.ui.dialogs.DispatchingProgressMonitorDialog;
d41 2
d58 5
a62 2
			new DispatchingProgressMonitorDialog(null).run(true,
				runnableWithProgress);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

