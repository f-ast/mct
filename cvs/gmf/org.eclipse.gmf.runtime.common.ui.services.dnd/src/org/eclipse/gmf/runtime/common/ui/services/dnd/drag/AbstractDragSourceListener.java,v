head	1.2;
access;
symbols
	v20081020-0700:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080425-1959:1.2
	v20080222-1200:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070330-1300:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.2
date	2005.09.12.21.27.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.23;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.services.dnd.drag;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import org.eclipse.swt.dnd.DragSourceEvent;

/**
 * Abstract parent of all the drag source listeners
 * 
 * @@author Vishy Ramaswamy
 */
public abstract class AbstractDragSourceListener
	implements IDragSourceListener {

	/**
	 * Attribute for the drag source context.
	 */
	private IDragSourceContext context = null;

	/**
	 * Attribute for the supporting transfer ids.
	 */
	private final String[] transferIds;

	/**
	 * Constructor for AbstractDragSourceListener.
	 * 
	 * @@param transferIdArray
	 *            The transfer agent ids
	 */
	public AbstractDragSourceListener(String[] transferIdArray) {
		super();

		assert null != transferIdArray : "transferIdArray cannot be null"; //$NON-NLS-1$
		assert transferIdArray.length > 0 : "transferIdArray cannot be empty"; //$NON-NLS-1$

		this.transferIds = transferIdArray;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.services.dnd.drag.IDragSourceListener#isDraggable(org.eclipse.gmf.runtime.common.ui.services.dnd.drag.IDragSourceContext)
	 */
	public final boolean isDraggable(IDragSourceContext cntxt) {
		/* Set the context */
		this.context = cntxt;

		/* Check if draggable */
		return isDraggable();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.services.dnd.drag.IDragSourceListener#getSupportingTransferIds()
	 */
	public final String[] getSupportingTransferIds() {
		return transferIds;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.swt.dnd.DragSourceListener#dragStart(org.eclipse.swt.dnd.DragSourceEvent)
	 */
	public final void dragStart(DragSourceEvent event) {
		event.doit = true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.swt.dnd.DragSourceListener#dragSetData(org.eclipse.swt.dnd.DragSourceEvent)
	 */
	public void dragSetData(DragSourceEvent event) {
		/* method not implemented */
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.swt.dnd.DragSourceListener#dragFinished(org.eclipse.swt.dnd.DragSourceEvent)
	 */
	public void dragFinished(DragSourceEvent event) {
		/* method not implemented */
	}

	/**
	 * Returns the context.
	 * 
	 * @@return IDragSourceContext
	 */
	protected final IDragSourceContext getContext() {
		return context;
	}

	/**
	 * Checks if the selection contained in the context is draggable. Derived
	 * classes can get context using the <code>getContext()</code> method.
	 * 
	 * @@return true if draggable, false otherwise
	 */
	protected abstract boolean isDraggable();

	/**
	 * Combines the arrays in the passed list into one array.
	 * 
	 * @@param list
	 *            The List of arrays to combine together
	 * @@param resultingArrayType
	 *            the Object[] used to define the type of the combined array
	 * 
	 * @@return Object[] the combined array of the proper type
	 */
	protected final Object[] combineArraysInList(List list,
			Object[] resultingArrayType) {
		List listEntry = null;
		Iterator it = list.iterator();
		ArrayList results = new ArrayList();
		while (it.hasNext()) {
			listEntry = Arrays.asList((Object[]) it.next());
			results.addAll(listEntry);
		}

		return results.toArray(resultingArrayType);
	}
}@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

