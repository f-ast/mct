head	1.6;
access;
symbols
	v20081020-0700:1.6
	v20080722-1827:1.6
	R2_1_maintenance:1.6.0.6
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080425-1959:1.6
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.4
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070601-1400:1.6
	v20070330-1300:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	v20060925-1700:1.6
	v20060919-0800:1.6
	M1_20:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060531-1730:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.4
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.6
date	2006.02.13.19.10.37;	author ldamus;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.22.19.37.56;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.13.20.31.50;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.28.17.50.31;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.16;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.services.dnd.drop;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Vector;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.operations.IOperationHistory;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.swt.custom.BusyIndicator;
import org.eclipse.swt.dnd.DND;
import org.eclipse.swt.dnd.DropTargetEvent;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IWorkbenchPartSite;

import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.common.core.util.EnumeratedType;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.services.dnd.core.ITransferAgent;
import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.CommonUIServicesDNDDebugOptions;
import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.CommonUIServicesDNDPlugin;
import org.eclipse.gmf.runtime.common.ui.services.dnd.internal.CommonUIServicesDNDStatusCodes;

/**
 * Abstract parent of all the drop target listeners
 * 
 * @@author Vishy Ramaswamy
 */
public abstract class AbstractDropTargetListener
	implements IDropTargetListener {

	/**
	 * Attribute for the drop target context.
	 */
	private IDropTargetContext context = null;

	/**
	 * Attribute for the current transfer agent.
	 */
	private ITransferAgent currentAgent = null;

	/**
	 * Attribute for the current event.
	 */
	private IDropTargetEvent currentEvent = null;

	/**
	 * Attribute for the supporting transfer ids.
	 */
	private final List transferIds = new Vector();

	/**
	 * Enumerated type for work indicator type
	 */
	public static class WorkIndicatorType
		extends EnumeratedType {

		private static final long serialVersionUID = 1L;

		private static int nextOrdinal = 0;

		/** None work indicator type. */
		public static final WorkIndicatorType NONE = new WorkIndicatorType(
			"None"); //$NON-NLS-1$

		/** Busy work indicator type. */
		public static final WorkIndicatorType BUSY = new WorkIndicatorType(
			"Busy"); //$NON-NLS-1$

		/** Progress monitor indicator type. */
		public static final WorkIndicatorType PROGRESS_MONITOR = new WorkIndicatorType(
			"Progress Monitor"); //$NON-NLS-1$

		/** Cancelable progress monitor indicator type. */
		public static final WorkIndicatorType CANCELABLE_PROGRESS_MONITOR = new WorkIndicatorType(
			"Cancelable Progress Monitor"); //$NON-NLS-1$

		/**
		 * The list of values for this enumerated type.
		 */
		private static final WorkIndicatorType[] VALUES = {NONE, BUSY,
			PROGRESS_MONITOR, CANCELABLE_PROGRESS_MONITOR};

		/**
		 * Constructor for WorkIndicatorType.
		 * 
		 * @@param name
		 *            The name for the WorkIndicatorType
		 * @@param ordinal
		 *            The ordinal for theWorkIndicatorType
		 */
		protected WorkIndicatorType(String name, int ordinal) {
			super(name, ordinal);
		}

		/**
		 * Constructor for WorkIndicatorType.
		 * 
		 * @@param name
		 *            The name for the WorkIndicatorType
		 */
		private WorkIndicatorType(String name) {
			this(name, nextOrdinal++);
		}

		/**
		 * Retrieves the list of constants for this enumerated type.
		 * 
		 * @@return The list of constants for this enumerated type.
		 */
		protected List getValues() {
			return Collections.unmodifiableList(Arrays.asList(VALUES));
		}
	}

	/**
	 * Constructor for AbstractDropTargetListener.
	 * 
	 * @@param transferIdArray
	 *            The transfer agent ids
	 */
	public AbstractDropTargetListener(String[] transferIdArray) {
		super();

		assert null!=transferIdArray : "transferIdArray cannot be null"; //$NON-NLS-1$
		assert transferIdArray.length > 0 : "transferIdArray cannot be empty"; //$NON-NLS-1$

		this.transferIds.addAll(Arrays.asList(transferIdArray));
	}

	/**
	 * Default Constructor for AbstractDropTargetListener.
	 *  
	 */
	public AbstractDropTargetListener() {
		super();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetListener#getSupportingTransferIds()
	 */
	public final String[] getSupportingTransferIds() {
		return (String[]) transferIds.toArray(new String[transferIds.size()]);
	}

	/**
	 * Add transfer id to the list of transferIds.
	 * 
	 * @@param transferId
	 *            String id to add
	 */
	public final void addSupportingTransferId(String transferId) {
		assert null != transferId : "transferId cannot be null"; //$NON-NLS-1$
		
		if (!transferIds.contains(transferId)) {
			transferIds.add(transferId);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.swt.dnd.DropTargetListener#dragEnter(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void dragEnter(DropTargetEvent event) {
		/* method not implemented */
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.swt.dnd.DropTargetListener#dragLeave(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void dragLeave(DropTargetEvent event) {
		/* method not implemented */
		currentAgent = null;
		currentEvent = null;
		context = null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.swt.dnd.DropTargetListener#dragOperationChanged(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void dragOperationChanged(DropTargetEvent event) {
		/* method not implemented */
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.swt.dnd.DropTargetListener#dragOver(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void dragOver(DropTargetEvent event) {
		/* method not implemented */
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.swt.dnd.DropTargetListener#drop(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public final void drop(DropTargetEvent event) {
		/* Check the target and data */
		// Fix for RATLC00528158 - Linux: Cannot DnD Tables or Database from
		// Data Definition View to Class Diagram
		// Removed check "event.data == null"
		if (getContext().getCurrentTarget() == null) {
			event.detail = DND.DROP_NONE;
			return;
		}

		/* Get the command */
		final ICommand command = getExecutableContext(event);

		/* Get the command manager */
		final IOperationHistory manager = (IOperationHistory) getContext()
			.getActivePart().getAdapter(IOperationHistory.class);

		/* Check the manager and command */
		if (manager == null || command == null) {
			event.detail = DND.DROP_NONE;
			return;
		}

		WorkIndicatorType type = getWorkIndicatorType();

		if (type == WorkIndicatorType.PROGRESS_MONITOR) {
			runCommandInProgressMonitorDialog(command, false);

		} else if (type == WorkIndicatorType.CANCELABLE_PROGRESS_MONITOR) {
			runCommandInProgressMonitorDialog(command, true);

		} else if (type == WorkIndicatorType.BUSY) {
            /* display hour glass cursor */
            BusyIndicator.showWhile(null, new Runnable() {

                public void run() {
                    try {
                        manager.execute(command, new NullProgressMonitor(),
                            null);
                    } catch (ExecutionException e) {
                        Trace
                            .catching(
                                CommonUIServicesDNDPlugin.getDefault(),
                                CommonUIServicesDNDDebugOptions.EXCEPTIONS_CATCHING,
                                getClass(), "drop", e); //$NON-NLS-1$
                        Log.error(CommonUIServicesDNDPlugin.getDefault(),
                            CommonUIServicesDNDStatusCodes.SERVICE_FAILURE,
                            "drop", e); //$NON-NLS-1$
                    }

                }
            });
        } else {
            try {
                manager.execute(command, new NullProgressMonitor(), null);
            } catch (ExecutionException e) {
                Trace.catching(CommonUIServicesDNDPlugin.getDefault(),
                    CommonUIServicesDNDDebugOptions.EXCEPTIONS_CATCHING,
                    getClass(), "drop", e); //$NON-NLS-1$
                Log.error(CommonUIServicesDNDPlugin.getDefault(),
                    CommonUIServicesDNDStatusCodes.SERVICE_FAILURE, "drop", e); //$NON-NLS-1$
            }
        }

		/* Set the event detail */
		event.detail = (command.getCommandResult().getStatus().isOK()) ? event.detail
			: DND.DROP_NONE;

		currentAgent = null;
		currentEvent = null;
		context = null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.swt.dnd.DropTargetListener#dropAccept(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void dropAccept(DropTargetEvent event) {
		/* method not implemented */
	}

	/**
	 * Returns the context.
	 * 
	 * @@return IDropTargetContext
	 */
	protected final IDropTargetContext getContext() {
		return context;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetListener#getExecutableContext(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public ICommand getExecutableContext(DropTargetEvent event) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetListener#setFeedback(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void setFeedback(DropTargetEvent event) {
		event.feedback |= DND.FEEDBACK_EXPAND | DND.FEEDBACK_SCROLL;
		switch (getContext().getRelativeLocation()) {
			case IDropTargetContext.LOCATION_BEFORE:
				event.feedback |= DND.FEEDBACK_INSERT_BEFORE;
				break;
			case IDropTargetContext.LOCATION_AFTER:
				event.feedback |= DND.FEEDBACK_INSERT_AFTER;
				break;
			case IDropTargetContext.LOCATION_ON:
			default:
				event.feedback |= DND.FEEDBACK_SELECT;
				break;
		}
	}

	/**
	 * Returns whether the listener can support handling drop operations on the
	 * current target context and the current event.
	 * 
	 * @@return true or false
	 */
	public abstract boolean canSupport();

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetListener#canSupport(org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetContext,
	 *      org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetEvent,
	 *      org.eclipse.gmf.runtime.common.ui.services.dnd.core.ITransferAgent)
	 */
	public final boolean canSupport(IDropTargetContext cntxt,
			IDropTargetEvent currEvent, ITransferAgent currAgent) {
		/* Set the context */
		this.context = cntxt;
		/* Set the event */
		this.currentEvent = currEvent;
		/* Set the agent */
		this.currentAgent = currAgent;

		return canSupport();
	}

	/**
	 * Returns the current event.
	 * 
	 * @@return IDropTargetEvent
	 */
	protected final IDropTargetEvent getCurrentEvent() {
		return currentEvent;
	}

	/**
	 * Returns the current transfer agent.
	 * 
	 * @@return ITransferAgent
	 */
	protected final ITransferAgent getCurrentAgent() {
		return currentAgent;
	}

	/**
	 * Returns the current shell.
	 * 
	 * @@return Shell
	 */
	protected final Shell getShell() {
		IWorkbenchPartSite site = getContext().getActivePart().getSite();

		return site != null ? site.getShell()
			: null;
	}

	/**
	 * Gets type of work indicator (progress monitor, hourglass, or none).
	 * 
	 * @@return type of work indicator
	 */
	protected WorkIndicatorType getWorkIndicatorType() {
		return WorkIndicatorType.BUSY;
	}

	/**
	 * Runs <code>command</code> in the context of a progress monitor dialog.
	 * The command runs in the same thread as the dialog. The cancel button on
	 * the dialog is enabled if <code>cancelable</code> is <code>true</code>.
	 * 
	 * @@param command
	 *            the command to run
	 * @@param cancelable
	 *            <code>true</code> if the progress monitor should have an
	 *            enabled cancel button, <code>false</code> otherwise.
	 * 
	 * @@exception RuntimeException
	 *                if any exception or error occurs while running the action
	 */
	private void runCommandInProgressMonitorDialog(final ICommand command,
			boolean cancelable) {

		/* Get the operation history */
		final IOperationHistory manager = (IOperationHistory) getContext()
			.getActivePart().getAdapter(IOperationHistory.class);

		IRunnableWithProgress runnable = new IRunnableWithProgress() {

			public void run(IProgressMonitor monitor) {
                try {
                    manager.execute(command, monitor, null);
                    
                } catch (ExecutionException e) {
                    Trace.catching(CommonUIServicesDNDPlugin.getDefault(),
                        CommonUIServicesDNDDebugOptions.EXCEPTIONS_CATCHING,
                        getClass(), "drop", e); //$NON-NLS-1$
                    Log.error(CommonUIServicesDNDPlugin.getDefault(),
                        CommonUIServicesDNDStatusCodes.SERVICE_FAILURE, "drop", e); //$NON-NLS-1$
                    
                    RuntimeException re = new RuntimeException(e);

                    Trace.throwing(CommonUIServicesDNDPlugin.getDefault(),
                        CommonUIServicesDNDDebugOptions.EXCEPTIONS_THROWING,
                        getClass(), "runCommandInProgressMonitorDialog", re); //$NON-NLS-1$
                    throw re;
                }

			}
		};
		runInProgressMonitorDialog(runnable, cancelable);
	}

	/**
	 * Runs <code>runnable</code> in a progress monitor dialog. The runnable
	 * runs in the same thread as the dialog. The cancel button on the dialog is
	 * enabled if <code>cancelable</code> is <code>true</code>.
	 * 
	 * @@param runnable
	 *            the runnable to run in the context of the progress dialog
	 * @@param cancelable
	 *            <code>true</code> if the progress monitor should have an
	 *            enabled cancel button, <code>false</code> otherwise.
	 * 
	 * @@exception RuntimeException
	 *                if any exception or error occurs while running the
	 *                runnable
	 */
	private void runInProgressMonitorDialog(IRunnableWithProgress runnable,
			boolean cancelable) {

		try {
			if (System.getProperty("RUN_PROGRESS_IN_UI_HACK") != null) { //$NON-NLS-1$
				new ProgressMonitorDialog(null).run(false, cancelable, runnable);
			} else {
				new ProgressMonitorDialog(null).run(true, cancelable, runnable);
			}

		} catch (InvocationTargetException ite) {
			Trace.catching(CommonUIServicesDNDPlugin.getDefault(),
				CommonUIServicesDNDDebugOptions.EXCEPTIONS_CATCHING,
				getClass(), "runInProgressMonitorDialog", ite); //$NON-NLS-1$
			Log.error(CommonUIServicesDNDPlugin.getDefault(),
				CommonUIServicesDNDStatusCodes.SERVICE_FAILURE,
				"runInProgressMonitorDialog", ite); //$NON-NLS-1$

			RuntimeException cre = new RuntimeException(ite
				.getTargetException());

			Trace.throwing(CommonUIServicesDNDPlugin.getDefault(),
				CommonUIServicesDNDDebugOptions.EXCEPTIONS_THROWING,
				getClass(), "runInProgressMonitorDialog", cre); //$NON-NLS-1$
			throw cre;

		} catch (InterruptedException ie) {
			Trace.catching(CommonUIServicesDNDPlugin.getDefault(),
				CommonUIServicesDNDDebugOptions.EXCEPTIONS_CATCHING,
				getClass(), "runInProgressMonitorDialog", ie); //$NON-NLS-1$
		}
	}

}@


1.5
log
@[112829] gmf_head ahunter 051222 Progress Monitor Dialog usage in GMF
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d20 2
a31 1
import org.eclipse.gmf.runtime.common.core.command.CommandManager;
d237 2
a238 2
		final CommandManager manager = (CommandManager) getContext()
			.getActivePart().getAdapter(CommandManager.class);
d255 2
a256 2
			/* display hour glass cursor */
			BusyIndicator.showWhile(null, new Runnable() {
d258 28
a285 8
				public void run() {
					manager.execute(command, new NullProgressMonitor());

				}
			});
		} else {
			manager.execute(command, new NullProgressMonitor());
		}
d427 3
a429 3
		/* Get the command manager */
		final CommandManager manager = (CommandManager) getContext()
			.getActivePart().getAdapter(CommandManager.class);
d434 17
a450 1
				manager.execute(command, monitor);
@


1.4
log
@[110317] gmf_head ahunter 051312 Compiler warning count should be 0 - runtime foundation layer components
@
text
@d439 3
a441 1
			if (System.getProperty("RUN_PROGRESS_IN_THREAD") != null) { //$NON-NLS-1$
a442 2
			} else {
				new ProgressMonitorDialog(null).run(false, cancelable, runnable);
@


1.3
log
@Bugzilla Bug 112829 gmf_head ahunter 051028 Progress Monitor Dialog usage in GMF
@
text
@d74 2
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d22 1
a34 1
import org.eclipse.gmf.runtime.common.ui.dialogs.DispatchingProgressMonitorDialog;
d437 5
a441 2
			new DispatchingProgressMonitorDialog(getShell()).run(cancelable,
				runnable);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

