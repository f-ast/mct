head	1.2;
access;
symbols
	v20081020-0700:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080425-1959:1.2
	v20080222-1200:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070330-1300:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.2
date	2005.09.12.21.27.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.17;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.services.dnd.internal.core;

import java.util.Hashtable;

import org.eclipse.jface.viewers.ISelection;
import org.eclipse.swt.dnd.FileTransfer;
import org.eclipse.swt.dnd.RTFTransfer;
import org.eclipse.swt.dnd.TextTransfer;
import org.eclipse.swt.dnd.TransferData;
import org.eclipse.ui.part.PluginTransfer;

import org.eclipse.gmf.runtime.common.ui.services.dnd.core.AbstractTransferAdapterProvider;
import org.eclipse.gmf.runtime.common.ui.services.dnd.core.SelectionTransfer;
import org.eclipse.gmf.runtime.common.ui.services.dnd.core.TransferAgent;
import org.eclipse.gmf.runtime.common.ui.services.dnd.core.TransferId;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drag.ITransferDragSourceListener;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drag.SelectionDragAdapter;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drag.TransferDragSourceAdapter;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.ITransferDropTargetListener;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.SelectionDropAdapter;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.TransferDropTargetAdapter;
import org.eclipse.gmf.runtime.common.ui.util.CustomDataTransfer;

/**
 * Concrete implementation for common transfer adapters
 * 
 * @@author Vishy Ramaswamy
 */
public final class TransferAdapterProvider
	extends AbstractTransferAdapterProvider {

	/**
	 * Attribute for the table of transfer ids and their drag adapters
	 */
	private Hashtable transferDragSourceTable = new Hashtable();

	/**
	 * Attribute for the table of transfer ids and their drop adapters
	 */
	private Hashtable transferDropTargetTable = new Hashtable();

	/**
	 * Constructor for TransferAdapterProvider.
	 */
	public TransferAdapterProvider() {
		super();
		
		/*
		 * Initialize the table of transfer Ids and their drag adapters for
		 * pre-defined ids
		 */
		getTransferDragSourceTable().put(
			new Integer(TransferId.CUSTOM_DATA_TRANSFER.hashCode()),
			new TransferDragSourceAdapter(new TransferAgent(
				TransferId.CUSTOM_DATA_TRANSFER, CustomDataTransfer
					.getInstance(), false)));
		getTransferDragSourceTable().put(
			new Integer(TransferId.FILE_TRANSFER.hashCode()),
			new TransferDragSourceAdapter(new TransferAgent(
				TransferId.FILE_TRANSFER, FileTransfer.getInstance(), false)));
		getTransferDragSourceTable().put(
			new Integer(TransferId.PLUGIN_TRANSFER.hashCode()),
			new TransferDragSourceAdapter(
				new TransferAgent(TransferId.PLUGIN_TRANSFER, PluginTransfer
					.getInstance(), false)));
		getTransferDragSourceTable().put(
			new Integer(TransferId.SELECTION_TRANSFER.hashCode()),
			new SelectionDragAdapter(new TransferAgent(
				TransferId.SELECTION_TRANSFER, SelectionTransfer.getInstance(),
				true) {

				/*
				 * (non-Javadoc)
				 * 
				 * @@see org.eclipse.gmf.runtime.common.ui.services.dnd.core.ITransferAgent#getSelection(org.eclipse.swt.dnd.TransferData)
				 */
				public ISelection getSelection(TransferData transferData) {
					return SelectionTransfer.getInstance().getSelection();
				}

				/*
				 * (non-Javadoc)
				 * 
				 * @@see org.eclipse.gmf.runtime.common.ui.services.dnd.core.ITransferAgent#setSelection(org.eclipse.jface.viewers.ISelection)
				 */
				public void setSelection(ISelection selection) {
					SelectionTransfer.getInstance().setSelection(selection);
				}
			}));
		getTransferDragSourceTable().put(
			new Integer(TransferId.TEXT_TRANSFER.hashCode()),
			new TransferDragSourceAdapter(new TransferAgent(
				TransferId.TEXT_TRANSFER, TextTransfer.getInstance(), false)));
		getTransferDragSourceTable().put(
			new Integer(TransferId.RTF_TRANSFER.hashCode()),
			new TransferDragSourceAdapter(new TransferAgent(
				TransferId.RTF_TRANSFER, RTFTransfer.getInstance(), false)));

		/*
		 * Initialize the table of transfer Ids and their drop adapters for
		 * pre-defined ids
		 */
		getTransferDropTargetTable().put(
			new Integer(TransferId.CUSTOM_DATA_TRANSFER.hashCode()),
			new TransferDropTargetAdapter(new TransferAgent(
				TransferId.CUSTOM_DATA_TRANSFER, CustomDataTransfer
					.getInstance(), false)));
		getTransferDropTargetTable().put(
			new Integer(TransferId.FILE_TRANSFER.hashCode()),
			new TransferDropTargetAdapter(new TransferAgent(
				TransferId.FILE_TRANSFER, FileTransfer.getInstance(), false)));
		getTransferDropTargetTable().put(
			new Integer(TransferId.PLUGIN_TRANSFER.hashCode()),
			new TransferDropTargetAdapter(
				new TransferAgent(TransferId.PLUGIN_TRANSFER, PluginTransfer
					.getInstance(), false)));
		getTransferDropTargetTable().put(
			new Integer(TransferId.SELECTION_TRANSFER.hashCode()),
			new SelectionDropAdapter(new TransferAgent(
				TransferId.SELECTION_TRANSFER, SelectionTransfer.getInstance(),
				true) {

				/*
				 * (non-Javadoc)
				 * 
				 * @@see org.eclipse.gmf.runtime.common.ui.services.dnd.core.ITransferAgent#getSelection(org.eclipse.swt.dnd.TransferData)
				 */
				public ISelection getSelection(TransferData transferData) {
					return SelectionTransfer.getInstance().getSelection();
				}
			}));
		getTransferDropTargetTable().put(
			new Integer(TransferId.TEXT_TRANSFER.hashCode()),
			new TransferDropTargetAdapter(new TransferAgent(
				TransferId.TEXT_TRANSFER, TextTransfer.getInstance(), false)));
		getTransferDropTargetTable().put(
			new Integer(TransferId.RTF_TRANSFER.hashCode()),
			new TransferDropTargetAdapter(new TransferAgent(
				TransferId.RTF_TRANSFER, RTFTransfer.getInstance(), false)));
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.services.dnd.core.ITransferAdapterProvider#getTransferDragSourceAdapter(java.lang.String)
	 */
	public ITransferDragSourceListener getTransferDragSourceAdapter(
			String transferId) {
		assert null != transferId : "transferId cannot be null";; //$NON-NLS-1$
		
		ITransferDragSourceListener listener = null;
		listener = (ITransferDragSourceListener) getTransferDragSourceTable()
			.get(new Integer(transferId.hashCode()));
		return listener;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.services.dnd.core.ITransferAdapterProvider#getTransferDropTargetAdapter(java.lang.String)
	 */
	public ITransferDropTargetListener getTransferDropTargetAdapter(
			String transferId) {
		assert null != transferId : "transferId cannot be null"; //$NON-NLS-1$
		
		ITransferDropTargetListener listener = null;
		listener = (ITransferDropTargetListener) getTransferDropTargetTable()
			.get(new Integer(transferId.hashCode()));
		return listener;
	}

	/**
	 * Return table of transfer drag source adapters
	 * 
	 * @@return Hashtable
	 */
	private Hashtable getTransferDragSourceTable() {
		return transferDragSourceTable;
	}

	/**
	 * Return table of transfer drop target adapters
	 * 
	 * @@return Hashtable
	 */
	private Hashtable getTransferDropTargetTable() {
		return transferDropTargetTable;
	}
}@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

