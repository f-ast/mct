head	1.20;
access;
symbols
	v20080813-1520:1.20
	v20080722-1827:1.20
	v20080716-1600:1.20
	v20080716-1642:1.20
	R2_1_maintenance:1.20.0.4
	Root_R2_1_maintenance:1.20
	R2_1_0:1.20
	v20080610-1132:1.20
	v20080528-1052:1.20
	v20080425-1959:1.20
	v20080417-1610:1.20
	v20080322-0000:1.20
	v20080222-1200:1.20
	v20070809-0000:1.20
	R2_0_maintenance:1.20.0.2
	R2_0:1.20
	R4_20:1.20
	v20070621-0000:1.20
	RC3_20:1.20
	v20070614-1400:1.20
	v20070608-1300:1.20
	v20070601-1400:1.20
	v20070520-1200:1.20
	v20070518-1300:1.20
	v20070504-1000:1.20
	v20070427-0600:1.20
	v20070420-1000:1.20
	v20070403-1500:1.20
	v20070330-1300:1.20
	v20060316-0600:1.20
	v20070208-1800:1.19
	M4_20:1.19
	v20061214-0000:1.19
	M3_20:1.19
	v20061117-0800:1.19
	v20061013-1330:1.18
	M1_20:1.17
	v20060904-1500:1.17
	v20060713-1700:1.17
	R1_0_maintenance:1.17.0.2
	R1_0:1.17
	v20060627-1200:1.17
	v20060616-1200:1.17
	v20060609-1400:1.17
	v20060531-1730:1.17
	v20060519-1300:1.17
	v20060519-0800:1.17
	v20060512-1000:1.16
	I20060512-1000:1.16
	I20060505-1400:1.14
	I20060428-1300:1.14
	I20060424-0500:1.13
	I20060424-0300:1.13
	M6_10:1.13
	I20060407-1200:1.13
	I20060331-1000:1.13
	I20060324-0300:1.13
	I20060317-1300:1.13
	I20060317-1200:1.13
	I20060316-1300:1.13
	I20060309-1300:1.13
	M5_10:1.13
	S20060303-1600:1.13
	I20060227-1730:1.11
	I20060216-1945:1.9
	I20060210-1715:1.8
	I20060209-1815:1.8
	I20060203-0830:1.8
	I20060129-1145:1.8
	I20060127-0900:1.8
	I20060120-1530:1.8
	I20060113-1700:1.8
	M4_10:1.8
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.6
	I20051201-1800:1.4
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.20
date	2007.03.14.13.00.15;	author atikhomirov;	state Exp;
branches;
next	1.19;
commitid	12fa45f7f1db4567;

1.19
date	2006.10.19.15.22.03;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.09.28.18.21.36;	author radvorak;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.14.18.06.28;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.11.09.42.01;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.10.15.12.28;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.25.19.15.42;	author radvorak;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.03.18.32.41;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.03.11.36.27;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.23.15.45.39;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.22.22.01.24;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.13.18.37.55;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.10.20.40.13;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.10.18.35.33;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.07.19.23.19;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.06.22.21.16;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.29.18.33.08;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.20.14.07.18;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.18.10.58.27;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.29.10;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.gmf.mappings.util.GMFMapAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class GMFMapItemProviderAdapterFactory extends GMFMapAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GMFMapItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.NodeMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected NodeMappingItemProvider nodeMappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.NodeMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createNodeMappingAdapter() {
		if (nodeMappingItemProvider == null) {
			nodeMappingItemProvider = new NodeMappingItemProvider(this);
		}

		return nodeMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.CompartmentMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected CompartmentMappingItemProvider compartmentMappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.CompartmentMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createCompartmentMappingAdapter() {
		if (compartmentMappingItemProvider == null) {
			compartmentMappingItemProvider = new CompartmentMappingItemProvider(this);
		}

		return compartmentMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.LinkMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected LinkMappingItemProvider linkMappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.LinkMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createLinkMappingAdapter() {
		if (linkMappingItemProvider == null) {
			linkMappingItemProvider = new LinkMappingItemProvider(this);
		}

		return linkMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.CanvasMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected CanvasMappingItemProvider canvasMappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.CanvasMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createCanvasMappingAdapter() {
		if (canvasMappingItemProvider == null) {
			canvasMappingItemProvider = new CanvasMappingItemProvider(this);
		}

		return canvasMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.LabelMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected LabelMappingItemProvider labelMappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.LabelMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createLabelMappingAdapter() {
		if (labelMappingItemProvider == null) {
			labelMappingItemProvider = new LabelMappingItemProvider(this);
		}

		return labelMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.FeatureLabelMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected FeatureLabelMappingItemProvider featureLabelMappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.FeatureLabelMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createFeatureLabelMappingAdapter() {
		if (featureLabelMappingItemProvider == null) {
			featureLabelMappingItemProvider = new FeatureLabelMappingItemProvider(this);
		}

		return featureLabelMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.DesignLabelMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected DesignLabelMappingItemProvider designLabelMappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.DesignLabelMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createDesignLabelMappingAdapter() {
		if (designLabelMappingItemProvider == null) {
			designLabelMappingItemProvider = new DesignLabelMappingItemProvider(this);
		}

		return designLabelMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.Mapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected MappingItemProvider mappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.Mapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createMappingAdapter() {
		if (mappingItemProvider == null) {
			mappingItemProvider = new MappingItemProvider(this);
		}

		return mappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.ChildReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ChildReferenceItemProvider childReferenceItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.ChildReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createChildReferenceAdapter() {
		if (childReferenceItemProvider == null) {
			childReferenceItemProvider = new ChildReferenceItemProvider(this);
		}

		return childReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.TopNodeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected TopNodeReferenceItemProvider topNodeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.TopNodeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createTopNodeReferenceAdapter() {
		if (topNodeReferenceItemProvider == null) {
			topNodeReferenceItemProvider = new TopNodeReferenceItemProvider(this);
		}

		return topNodeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.LinkConstraints} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected LinkConstraintsItemProvider linkConstraintsItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.LinkConstraints}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createLinkConstraintsAdapter() {
		if (linkConstraintsItemProvider == null) {
			linkConstraintsItemProvider = new LinkConstraintsItemProvider(this);
		}

		return linkConstraintsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.ValueExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ValueExpressionItemProvider valueExpressionItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.ValueExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createValueExpressionAdapter() {
		if (valueExpressionItemProvider == null) {
			valueExpressionItemProvider = new ValueExpressionItemProvider(this);
		}

		return valueExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.FeatureSeqInitializer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected FeatureSeqInitializerItemProvider featureSeqInitializerItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.FeatureSeqInitializer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createFeatureSeqInitializerAdapter() {
		if (featureSeqInitializerItemProvider == null) {
			featureSeqInitializerItemProvider = new FeatureSeqInitializerItemProvider(this);
		}

		return featureSeqInitializerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.FeatureValueSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected FeatureValueSpecItemProvider featureValueSpecItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.FeatureValueSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createFeatureValueSpecAdapter() {
		if (featureValueSpecItemProvider == null) {
			featureValueSpecItemProvider = new FeatureValueSpecItemProvider(this);
		}

		return featureValueSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.ReferenceNewElementSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ReferenceNewElementSpecItemProvider referenceNewElementSpecItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.ReferenceNewElementSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createReferenceNewElementSpecAdapter() {
		if (referenceNewElementSpecItemProvider == null) {
			referenceNewElementSpecItemProvider = new ReferenceNewElementSpecItemProvider(this);
		}

		return referenceNewElementSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.AuditContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected AuditContainerItemProvider auditContainerItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.AuditContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createAuditContainerAdapter() {
		if (auditContainerItemProvider == null) {
			auditContainerItemProvider = new AuditContainerItemProvider(this);
		}

		return auditContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.AuditRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected AuditRuleItemProvider auditRuleItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.AuditRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createAuditRuleAdapter() {
		if (auditRuleItemProvider == null) {
			auditRuleItemProvider = new AuditRuleItemProvider(this);
		}

		return auditRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.DomainElementTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected DomainElementTargetItemProvider domainElementTargetItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.DomainElementTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createDomainElementTargetAdapter() {
		if (domainElementTargetItemProvider == null) {
			domainElementTargetItemProvider = new DomainElementTargetItemProvider(this);
		}

		return domainElementTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.DomainAttributeTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected DomainAttributeTargetItemProvider domainAttributeTargetItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.DomainAttributeTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createDomainAttributeTargetAdapter() {
		if (domainAttributeTargetItemProvider == null) {
			domainAttributeTargetItemProvider = new DomainAttributeTargetItemProvider(this);
		}

		return domainAttributeTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.DiagramElementTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected DiagramElementTargetItemProvider diagramElementTargetItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.DiagramElementTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createDiagramElementTargetAdapter() {
		if (diagramElementTargetItemProvider == null) {
			diagramElementTargetItemProvider = new DiagramElementTargetItemProvider(this);
		}

		return diagramElementTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.NotationElementTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected NotationElementTargetItemProvider notationElementTargetItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.NotationElementTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createNotationElementTargetAdapter() {
		if (notationElementTargetItemProvider == null) {
			notationElementTargetItemProvider = new NotationElementTargetItemProvider(this);
		}

		return notationElementTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.MetricContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected MetricContainerItemProvider metricContainerItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.MetricContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createMetricContainerAdapter() {
		if (metricContainerItemProvider == null) {
			metricContainerItemProvider = new MetricContainerItemProvider(this);
		}

		return metricContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.MetricRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected MetricRuleItemProvider metricRuleItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.MetricRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createMetricRuleAdapter() {
		if (metricRuleItemProvider == null) {
			metricRuleItemProvider = new MetricRuleItemProvider(this);
		}

		return metricRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.AuditedMetricTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected AuditedMetricTargetItemProvider auditedMetricTargetItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.AuditedMetricTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter createAuditedMetricTargetAdapter() {
		if (auditedMetricTargetItemProvider == null) {
			auditedMetricTargetItemProvider = new AuditedMetricTargetItemProvider(this);
		}

		return auditedMetricTargetItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@@link #changeNotifier} and to {@@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void dispose() {
		if (mappingItemProvider != null) mappingItemProvider.dispose();
		if (childReferenceItemProvider != null) childReferenceItemProvider.dispose();
		if (topNodeReferenceItemProvider != null) topNodeReferenceItemProvider.dispose();
		if (nodeMappingItemProvider != null) nodeMappingItemProvider.dispose();
		if (compartmentMappingItemProvider != null) compartmentMappingItemProvider.dispose();
		if (linkMappingItemProvider != null) linkMappingItemProvider.dispose();
		if (canvasMappingItemProvider != null) canvasMappingItemProvider.dispose();
		if (labelMappingItemProvider != null) labelMappingItemProvider.dispose();
		if (featureLabelMappingItemProvider != null) featureLabelMappingItemProvider.dispose();
		if (designLabelMappingItemProvider != null) designLabelMappingItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (linkConstraintsItemProvider != null) linkConstraintsItemProvider.dispose();
		if (valueExpressionItemProvider != null) valueExpressionItemProvider.dispose();
		if (featureSeqInitializerItemProvider != null) featureSeqInitializerItemProvider.dispose();
		if (featureValueSpecItemProvider != null) featureValueSpecItemProvider.dispose();
		if (referenceNewElementSpecItemProvider != null) referenceNewElementSpecItemProvider.dispose();
		if (auditContainerItemProvider != null) auditContainerItemProvider.dispose();
		if (auditRuleItemProvider != null) auditRuleItemProvider.dispose();
		if (domainElementTargetItemProvider != null) domainElementTargetItemProvider.dispose();
		if (domainAttributeTargetItemProvider != null) domainAttributeTargetItemProvider.dispose();
		if (diagramElementTargetItemProvider != null) diagramElementTargetItemProvider.dispose();
		if (notationElementTargetItemProvider != null) notationElementTargetItemProvider.dispose();
		if (metricContainerItemProvider != null) metricContainerItemProvider.dispose();
		if (metricRuleItemProvider != null) metricRuleItemProvider.dispose();
		if (auditedMetricTargetItemProvider != null) auditedMetricTargetItemProvider.dispose();
	}

}
@


1.19
log
@[161380] Inroduce label mapping subclasses
@
text
@d60 1
a60 1
	protected Collection supportedTypes = new ArrayList();
d73 1
a73 1
		supportedTypes.add(IItemPropertySource.class);		
d90 1
d113 1
d136 1
d159 1
d182 1
d205 1
d228 1
d251 1
d274 1
d297 1
d320 1
d343 1
d366 1
d389 1
d412 1
d435 1
d458 1
d481 1
d504 1
d527 1
d550 1
d573 1
d596 1
d619 1
d642 1
d676 1
d687 1
d697 1
d701 1
a701 1
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
@


1.18
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
@
text
@d187 44
d730 2
@


1.17
log
@overriding recent changes introduced (along with fixing #133836) in GMFMap model, as it's merely a 'shortcut', quite frequent though. Still, adding few new concepts just for the sake of single usecase (I do admit it's popular) seems excessive to me.
GMFMap kept the same as old (no new notions introduced), GMFGraph got generalization from DiagramLabel to DiagramNode to make it possible to use DiagramLabels for NodeMappings (thus, it's possible to detect such nodes in the DGMT)
Tests added to make sure we generate correct genModel for both cases.
@
text
@d363 22
d691 1
@


1.16
log
@revert to gmfmap model compatibility
@
text
@d77 22
a252 44
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.NodeMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected NodeMappingItemProvider nodeMappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.NodeMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Adapter createNodeMappingAdapter() {
		if (nodeMappingItemProvider == null) {
			nodeMappingItemProvider = new NodeMappingItemProvider(this);
		}

		return nodeMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.LabelNodeMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected LabelNodeMappingItemProvider labelNodeMappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.LabelNodeMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Adapter createLabelNodeMappingAdapter() {
		if (labelNodeMappingItemProvider == null) {
			labelNodeMappingItemProvider = new LabelNodeMappingItemProvider(this);
		}

		return labelNodeMappingItemProvider;
	}

	/**
a659 1
		if (labelNodeMappingItemProvider != null) labelNodeMappingItemProvider.dispose();
@


1.15
log
@#133836 Creating a child node without a label causes error
@
text
@d231 1
a231 1
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.ShapeNodeMapping} instances.
d236 1
a236 1
	protected ShapeNodeMappingItemProvider shapeNodeMappingItemProvider;
d239 1
a239 1
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.ShapeNodeMapping}.
d244 3
a246 3
	public Adapter createShapeNodeMappingAdapter() {
		if (shapeNodeMappingItemProvider == null) {
			shapeNodeMappingItemProvider = new ShapeNodeMappingItemProvider(this);
d249 1
a249 1
		return shapeNodeMappingItemProvider;
d681 1
a681 1
		if (shapeNodeMappingItemProvider != null) shapeNodeMappingItemProvider.dispose();
@


1.14
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@a76 22
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.NodeMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected NodeMappingItemProvider nodeMappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.NodeMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Adapter createNodeMappingAdapter() {
		if (nodeMappingItemProvider == null) {
			nodeMappingItemProvider = new NodeMappingItemProvider(this);
		}

		return nodeMappingItemProvider;
	}

	/**
d231 44
d681 2
a682 1
		if (nodeMappingItemProvider != null) nodeMappingItemProvider.dispose();
@


1.13
log
@[rdvorak] #114196 Allow for the definition of diagram validation rules
@
text
@d429 22
d672 1
@


1.12
log
@#130009 Enable audit rules on diagram (notation model) elements in gmfmap model
@
text
@d473 66
d652 3
@


1.11
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d407 66
d583 3
@


1.10
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@a98 22
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.ChildNodeMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ChildNodeMappingItemProvider childNodeMappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.ChildNodeMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Adapter createChildNodeMappingAdapter() {
		if (childNodeMappingItemProvider == null) {
			childNodeMappingItemProvider = new ChildNodeMappingItemProvider(this);
		}

		return childNodeMappingItemProvider;
	}

	/**
d209 44
d503 2
a505 1
		if (childNodeMappingItemProvider != null) childNodeMappingItemProvider.dispose();
@


1.9
log
@#127461 Support multiple labels definition in the mapping model
@
text
@d187 1
a187 1
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.NodeLabelMapping} instances.
d192 1
a192 1
	protected NodeLabelMappingItemProvider nodeLabelMappingItemProvider;
d195 1
a195 1
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.NodeLabelMapping}.
d200 3
a202 3
	public Adapter createNodeLabelMappingAdapter() {
		if (nodeLabelMappingItemProvider == null) {
			nodeLabelMappingItemProvider = new NodeLabelMappingItemProvider(this);
d205 1
a205 23
		return nodeLabelMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.LinkLabelMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected LinkLabelMappingItemProvider linkLabelMappingItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.LinkLabelMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Adapter createLinkLabelMappingAdapter() {
		if (linkLabelMappingItemProvider == null) {
			linkLabelMappingItemProvider = new LinkLabelMappingItemProvider(this);
		}

		return linkLabelMappingItemProvider;
d486 1
a486 2
		if (nodeLabelMappingItemProvider != null) nodeLabelMappingItemProvider.dispose();
		if (linkLabelMappingItemProvider != null) linkLabelMappingItemProvider.dispose();
@


1.8
log
@#114197 - tooling definition in place
@
text
@d187 44
d508 2
@


1.7
log
@[rdvorak] #123279 audits definition in gmfmap
@
text
@a208 66
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.ToolGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ToolGroupItemProvider toolGroupItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.ToolGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Adapter createToolGroupAdapter() {
		if (toolGroupItemProvider == null) {
			toolGroupItemProvider = new ToolGroupItemProvider(this);
		}

		return toolGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.CreationTool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected CreationToolItemProvider creationToolItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.CreationTool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Adapter createCreationToolAdapter() {
		if (creationToolItemProvider == null) {
			creationToolItemProvider = new CreationToolItemProvider(this);
		}

		return creationToolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@@link org.eclipse.gmf.mappings.NewActionTool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected NewActionToolItemProvider newActionToolItemProvider;

	/**
	 * This creates an adapter for a {@@link org.eclipse.gmf.mappings.NewActionTool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Adapter createNewActionToolAdapter() {
		if (newActionToolItemProvider == null) {
			newActionToolItemProvider = new NewActionToolItemProvider(this);
		}

		return newActionToolItemProvider;
	}

	/**
d458 1
a463 4
		if (mappingItemProvider != null) mappingItemProvider.dispose();
		if (toolGroupItemProvider != null) toolGroupItemProvider.dispose();
		if (creationToolItemProvider != null) creationToolItemProvider.dispose();
		if (newActionToolItemProvider != null) newActionToolItemProvider.dispose();
@


1.6
log
@#119709
Adding Compartment mapping
@
text
@d385 44
d538 2
@


1.5
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@d121 22
d482 1
@


1.4
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d187 66
d463 3
@


1.3
log
@[rdvorak] #112773 specify init expressions while relating diagram elements with domain
@
text
@d209 22
d398 1
@


1.2
log
@[rdvorak] #112505 constraint specification in gmfmap
@
text
@d231 44
d377 2
@


1.1
log
@*** empty log message ***
@
text
@d187 44
d331 2
@

