head	1.10;
access;
symbols
	v20080813-1520:1.10
	v20080722-1827:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.4
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080528-1052:1.10
	v20080425-1959:1.10
	v20080417-1610:1.10
	v20080322-0000:1.10
	v20080222-1200:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.2
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070614-1400:1.10
	v20070608-1300:1.10
	v20070601-1400:1.10
	v20070520-1200:1.10
	v20070518-1300:1.10
	v20070504-1000:1.9
	v20070427-0600:1.9
	v20070420-1000:1.9
	v20070403-1500:1.9
	v20070330-1300:1.8
	v20060316-0600:1.8
	v20070208-1800:1.7
	M4_20:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061013-1330:1.7
	M1_20:1.7
	v20060904-1500:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060519-1300:1.7
	v20060519-0800:1.7
	v20060512-1000:1.7
	I20060512-1000:1.7
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.5
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.2
	I20051208-2000:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2007.05.10.17.12.28;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	23424643527b4567;

1.9
date	2007.04.03.16.29.19;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	5dfa461280d64567;

1.8
date	2007.03.14.13.00.14;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	12fa45f7f1db4567;

1.7
date	2006.04.26.17.55.01;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.02.12.52.53;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.23.15.45.38;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.10.20.40.13;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.20.16.12.06;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.08.12.30.37;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.07.19.23.19;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.10
log
@avoid java5 warnings
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ItemProviderAdapter;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.presentation.FilterUtil;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.mappings.CompartmentMapping} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class CompartmentMappingItemProvider
	extends ItemProviderAdapter
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CompartmentMappingItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addCompartmentPropertyDescriptor(object);
			addChildrenPropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Compartment feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addCompartmentPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_CompartmentMapping_compartment_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_CompartmentMapping_compartment_feature", "_UI_CompartmentMapping_type"),
				 GMFMapPackage.eINSTANCE.getCompartmentMapping_Compartment(),
				 true,
				 null,
				 getString("_UI_VisualrepresentationPropertyCategory"),
				 null) {
						protected Collection<?> getComboBoxObjects(Object object) {
							return FilterUtil.sort(super.getComboBoxObjects(object));
						}
			});
	}

	/**
	 * This adds a property descriptor for the Children feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addChildrenPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_CompartmentMapping_children_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_CompartmentMapping_children_feature", "_UI_CompartmentMapping_type"),
				 GMFMapPackage.eINSTANCE.getCompartmentMapping_Children(),
				 true,
				 null,
				 null,
				 null) {
						protected Collection<?> getComboBoxObjects(Object object) {
							@@SuppressWarnings("unchecked")
							Collection<EObject> original = (Collection<EObject>) super.getComboBoxObjects(object);
							return FilterUtil.filterByNodeMapping(original, (CompartmentMapping) object);
						}
			});
	}

	/**
	 * This returns CompartmentMapping.gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object getImage(Object object) {
		return overlayImage(object, getResourceLocator().getImage("full/obj16/CompartmentMapping"));
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getText(Object object) {
		if (object instanceof CompartmentMapping) {
			CompartmentMapping mapping = (CompartmentMapping) object;
			String result = " <";
			if (mapping.getCompartment() != null) {
				result += mapping.getCompartment().getName();
			}	
			result += ">";
			return getString("_UI_CompartmentMapping_type") + result;
		}
		return getString("_UI_CompartmentMapping_type");
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void notifyChangedGen(Notification notification) {
		updateChildren(notification);
		super.notifyChanged(notification);
	}

	public void notifyChanged(Notification notification) {
		if (notification.getFeatureID(CompartmentMapping.class) == GMFMapPackage.COMPARTMENT_MAPPING__COMPARTMENT) {
			fireNotifyChanged(new ViewerNotification(notification, null));
		}
		notifyChangedGen(notification);
	}

	/**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);
	}

	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public ResourceLocator getResourceLocator() {
		return GMFMapEditPlugin.INSTANCE;
	}

}
@


1.9
log
@EMF.Edit and editor were regenerated with EMF M6
@
text
@d16 1
d115 3
a117 1
							return FilterUtil.filterByNodeMapping(super.getComboBoxObjects(object), (CompartmentMapping) object);
@


1.8
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a15 1
import org.eclipse.emf.edit.command.CommandParameter;
d169 2
a170 2
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
d176 1
a176 1
	protected void collectNewChildDescriptors(Collection<CommandParameter> newChildDescriptors, Object object) {
@


1.7
log
@#119034 Show only valid feature in "containment feature" property of ChildNodeMapping
#138606 hide inappropriate entries in selection dialogs
@
text
@d16 1
d20 1
d61 2
a62 1
	public List getPropertyDescriptors(Object object) {
d90 1
a90 1
						protected Collection getComboBoxObjects(Object object) {
d114 1
a114 1
						protected Collection getComboBoxObjects(Object object) {
d126 1
d176 2
a177 1
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
d187 1
@


1.6
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d22 1
d27 1
d73 1
a73 1
	 * @@generated
d77 1
a77 1
			(createItemPropertyDescriptor
d86 5
a90 1
				 null));
d97 1
a97 1
	 * @@generated
d101 1
a101 1
			(createItemPropertyDescriptor
d110 5
a114 1
				 null));
@


1.5
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d114 1
a114 1
		return getResourceLocator().getImage("full/obj16/CompartmentMapping");
@


1.4
log
@#114197 - tooling definition in place
@
text
@a10 2
import java.util.Collections;
import java.util.HashSet;
a21 1
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
a23 1
import org.eclipse.gmf.mappings.ChildNodeMapping;
d62 1
a62 1
			addChildNodesPropertyDescriptor(object);
d88 1
a88 1
	 * This adds a property descriptor for the Child Nodes feature.
d91 1
a91 1
	 * @@generated NOT
d93 1
a93 1
	protected void addChildNodesPropertyDescriptor(Object object) {
d95 1
a95 1
			(new ItemPropertyDescriptor
d98 3
a100 3
				 getString("_UI_CompartmentMapping_childNodes_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_CompartmentMapping_childNodes_feature", "_UI_CompartmentMapping_type"),
				 GMFMapPackage.eINSTANCE.getCompartmentMapping_ChildNodes(),
d104 1
a104 9
				 null) {
				protected Collection getComboBoxObjects(Object object) {
					if (object instanceof CompartmentMapping) {
						CompartmentMapping mapping = (CompartmentMapping) object;
						return new HashSet(mapping.getParentNodeMapping().getChildMappings());
					}
					return Collections.EMPTY_LIST;
				}
			});
d149 1
a149 1
		if (notification.getFeatureID(ChildNodeMapping.class) == GMFMapPackage.COMPARTMENT_MAPPING__COMPARTMENT) {
@


1.3
log
@#121565 property categories and simplified names to ease mapping definition.
Some outdated properties removed as well
@
text
@a16 1

a17 1

a26 1

@


1.2
log
@Refactoring the code to better support EMF code regeneration.
@
text
@d90 1
a90 1
				 null,
@


1.1
log
@#119709
Adding Compartment mapping
@
text
@d156 1
a156 1
	 * @@generated NOT
d158 5
d167 1
a167 2
		updateChildren(notification);
		super.notifyChanged(notification);
@

