head	1.13;
access;
symbols
	v20080813-1520:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	I20060216-1945:1.10
	I20060210-1715:1.9
	I20060209-1815:1.9
	I20060203-0830:1.8
	I20060129-1145:1.8
	I20060127-0900:1.8
	I20060120-1530:1.8
	I20060113-1700:1.8
	M4_10:1.8
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2006.02.23.15.45.39;	author atikhomirov;	state dead;
branches;
next	1.12;

1.12
date	2006.02.22.22.01.24;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.17.13.25.52;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.13.18.37.55;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.06.11.52.41;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.12.16.05.53;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.10.20.40.13;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.20.16.12.06;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.07.19.23.19;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.06.22.21.16;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.02.15.35.07;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.29.18.33.08;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.25.13.52.48;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.13
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.mappings.AbstractNodeMapping;
import org.eclipse.gmf.mappings.GMFMapFactory;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.presentation.ScopeUtil;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.mappings.AbstractNodeMapping} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class AbstractNodeMappingItemProvider
	extends MappingEntryItemProvider
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public AbstractNodeMappingItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public List getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addContextMenuPropertyDescriptor(object);
			addToolPropertyDescriptor(object);
			addAppearanceStylePropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Context Menu feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addContextMenuPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_MenuOwner_contextMenu_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_MenuOwner_contextMenu_feature", "_UI_MenuOwner_type"),
				 GMFMapPackage.eINSTANCE.getMenuOwner_ContextMenu(),
				 true,
				 null,
				 getString("_UI_VisualrepresentationPropertyCategory"),
				 null));
	}

	/**
	 * This adds a property descriptor for the Tool feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addToolPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_ToolOwner_tool_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_ToolOwner_tool_feature", "_UI_ToolOwner_type"),
				 GMFMapPackage.eINSTANCE.getToolOwner_Tool(),
				 true,
				 null,
				 getString("_UI_VisualrepresentationPropertyCategory"),
				 null));
	}

	/**
	 * This adds a property descriptor for the Appearance Style feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addAppearanceStylePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_AppearanceSteward_appearanceStyle_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_AppearanceSteward_appearanceStyle_feature", "_UI_AppearanceSteward_type"),
				 GMFMapPackage.eINSTANCE.getAppearanceSteward_AppearanceStyle(),
				 true,
				 null,
				 getString("_UI_VisualrepresentationPropertyCategory"),
				 null));
	}

	/**
	 * This adds a property descriptor for the Containment Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addContainmentFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_MappingEntry_containmentFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_MappingEntry_containmentFeature_feature", "_UI_MappingEntry_type"),
				 GMFMapPackage.eINSTANCE.getMappingEntry_ContainmentFeature(),
				 true,
				 null,
				 getString("_UI_DomainmetainformationPropertyCategory"),
				 null) {
				protected Collection getComboBoxObjects(Object object) {
					ScopeUtil scopeUtil = new ScopeUtil((AbstractNodeMapping) object, true);
					if (scopeUtil.isDevisable()) {
						return scopeUtil.getPossibleContainments();
					} else {
						return super.getComboBoxObjects(object);
					}
				}
		});
	}

	/**
	 * This specifies how to implement {@@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@@link org.eclipse.emf.edit.command.AddCommand}, {@@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@@link org.eclipse.emf.edit.command.MoveCommand} in {@@link #createCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Collection getChildrenFeatures(Object object) {
		if (childrenFeatures == null) {
			super.getChildrenFeatures(object);
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_ChildMappings());
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_CompartmentMappings());
		}
		return childrenFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EStructuralFeature getChildFeature(Object object, Object child) {
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getText(Object object) {
		return getString("_UI_AbstractNodeMapping_type");
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(AbstractNodeMapping.class)) {
			case GMFMapPackage.ABSTRACT_NODE_MAPPING__CHILD_MAPPINGS:
			case GMFMapPackage.ABSTRACT_NODE_MAPPING__COMPARTMENT_MAPPINGS:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_ChildMappings(),
				 GMFMapFactory.eINSTANCE.createChildNodeMapping()));

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_CompartmentMappings(),
				 GMFMapFactory.eINSTANCE.createCompartmentMapping()));
	}

	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ResourceLocator getResourceLocator() {
		return GMFMapEditPlugin.INSTANCE;
	}

}
@


1.12
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@@


1.11
log
@allow to specify no edit feature
@
text
@a9 1
import java.util.ArrayList;
a10 1
import java.util.Collections;
a66 1
			addEditFeaturePropertyDescriptor(object);
a160 33
	 * This adds a property descriptor for the Edit Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addEditFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_AbstractNodeMapping_editFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_AbstractNodeMapping_editFeature_feature", "_UI_AbstractNodeMapping_type"),
				 GMFMapPackage.eINSTANCE.getAbstractNodeMapping_EditFeature(),
				 true,
				 null,
				 getString("_UI_DomainmetainformationPropertyCategory"),
				 null) {
				protected Collection getComboBoxObjects(Object object) {
					if (object instanceof AbstractNodeMapping) {
						AbstractNodeMapping nm = (AbstractNodeMapping) object;
						List result = new ArrayList();
						if (nm.getDomainMetaElement() != null) {
							result.addAll(nm.getDomainMetaElement().getEAllAttributes());
						}
						result.add(null);
						return result;
					}
					return Collections.EMPTY_LIST;
				}
		});
	}

	/**
a170 1
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_LabelMappings());
a209 1
			case GMFMapPackage.ABSTRACT_NODE_MAPPING__LABEL_MAPPINGS:
a229 5
				(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_LabelMappings(),
				 GMFMapFactory.eINSTANCE.createNodeLabelMapping()));

		newChildDescriptors.add
			(createChildParameter
@


1.10
log
@#127461 Support multiple labels definition in the mapping model
@
text
@d10 1
d184 1
d186 1
a186 1
							return nm.getDomainMetaElement().getEAllAttributes();
d188 2
@


1.9
log
@#126537
Possibility to visualize child-parent relachipchip as a link implemented
@
text
@d203 1
d243 1
d264 5
@


1.8
log
@#123590 inherited containment features for linkMappings, refactoring
@
text
@d152 1
a152 1
					ScopeUtil scopeUtil = new ScopeUtil((AbstractNodeMapping) object);
@


1.7
log
@#114197 - tooling definition in place
@
text
@a11 2
import java.util.HashSet;
import java.util.Iterator;
a12 1
import java.util.Set;
a16 1
import org.eclipse.emf.ecore.EReference;
d29 1
d152 5
a156 15
					if (object instanceof AbstractNodeMapping) {
						AbstractNodeMapping nm = (AbstractNodeMapping) object;
						if (nm.getDomainMetaElement() != null) {
							Set features = new HashSet();
							for (Iterator it = nm.getDomainMetaElement().getEPackage().eAllContents(); it.hasNext(); ) {
								Object next = it.next();
								if (next instanceof EReference) {
									EReference ref = (EReference) next;
									if (ref.isContainment() && ref.getEReferenceType().isSuperTypeOf(nm.getDomainMetaElement())) {
										features.add(ref);
									}
								}
							}
							return features;
						}
a157 1
					return Collections.EMPTY_LIST;
@


1.6
log
@#121565 property categories and simplified names to ease mapping definition.
Some outdated properties removed as well
@
text
@a28 1
import org.eclipse.emf.edit.provider.ItemProviderAdapter;
d41 1
a41 1
	extends ItemProviderAdapter
d68 3
a70 2
			addDomainMetaElementPropertyDescriptor(object);
			addContainmentFeaturePropertyDescriptor(object);
d77 1
a77 1
	 * This adds a property descriptor for the Domain Meta Element feature.
d82 1
a82 1
	protected void addDomainMetaElementPropertyDescriptor(Object object) {
d87 3
a89 3
				 getString("_UI_AbstractNodeMapping_domainMetaElement_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_AbstractNodeMapping_domainMetaElement_feature", "_UI_AbstractNodeMapping_type"),
				 GMFMapPackage.eINSTANCE.getAbstractNodeMapping_DomainMetaElement(),
d92 41
a132 1
				 getString("_UI_DomainmetainformationPropertyCategory"),
d147 3
a149 3
				 getString("_UI_AbstractNodeMapping_containmentFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_AbstractNodeMapping_containmentFeature_feature", "_UI_AbstractNodeMapping_type"),
				 GMFMapPackage.eINSTANCE.getAbstractNodeMapping_ContainmentFeature(),
a216 2
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_DomainSpecialization());
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_DomainInitializer());
a218 1
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_Tool());
a255 2
			case GMFMapPackage.ABSTRACT_NODE_MAPPING__DOMAIN_SPECIALIZATION:
			case GMFMapPackage.ABSTRACT_NODE_MAPPING__DOMAIN_INITIALIZER:
a257 1
			case GMFMapPackage.ABSTRACT_NODE_MAPPING__TOOL:
a275 10
				(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_DomainSpecialization(),
				 GMFMapFactory.eINSTANCE.createConstraint()));

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_DomainInitializer(),
				 GMFMapFactory.eINSTANCE.createFeatureSeqInitializer()));

		newChildDescriptors.add
			(createChildParameter
a282 10

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_Tool(),
				 GMFMapFactory.eINSTANCE.createCreationTool()));

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getAbstractNodeMapping_Tool(),
				 GMFMapFactory.eINSTANCE.createNewActionTool()));
@


1.5
log
@#119709
Adding Compartment mapping
@
text
@d92 1
a92 1
				 null,
d112 1
a112 1
				 null,
d152 1
a152 1
				 null,
@


1.4
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@d123 1
a123 1
									if (ref.isContainment() && nm.getDomainMetaElement().equals(ref.getEType())) {
d180 1
d222 1
d257 5
@


1.3
log
@#119034

Moving not generated property descriptors to the abstract super-class.
@
text
@a68 1
			addDiagramNodePropertyDescriptor(object);
a76 20
	 * This adds a property descriptor for the Diagram Node feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addDiagramNodePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_AbstractNodeMapping_diagramNode_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_AbstractNodeMapping_diagramNode_feature", "_UI_AbstractNodeMapping_type"),
				 GMFMapPackage.eINSTANCE.getAbstractNodeMapping_DiagramNode(),
				 true,
				 null,
				 null,
				 null));
	}

	/**
d180 1
d221 1
d252 10
@


1.2
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d11 3
d15 1
d20 1
d28 1
d121 1
a121 1
	 * @@generated
d125 1
a125 1
			(createItemPropertyDescriptor
d134 21
a154 1
				 null));
d161 1
a161 1
	 * @@generated
d165 1
a165 1
			(createItemPropertyDescriptor
d174 11
a184 1
				 null));
@


1.1
log
@#118053 update models
@
text
@a14 1

a15 1

a16 1

a24 1

@

