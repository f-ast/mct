head	1.7;
access;
symbols
	v20080813-1520:1.7
	v20080722-1827:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080610-1132:1.7
	v20080528-1052:1.7
	v20080425-1959:1.7
	v20080417-1610:1.7
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070601-1400:1.6
	v20070520-1200:1.6
	v20070518-1300:1.6
	v20070504-1000:1.5
	v20070427-0600:1.5
	v20070420-1000:1.5
	v20070403-1500:1.5
	v20070330-1300:1.4
	v20060316-0600:1.4
	v20070208-1800:1.3
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.1;
locks; strict;
comment	@# @;


1.7
date	2008.04.17.11.58.45;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	32fe48073b744567;

1.6
date	2007.05.10.17.12.28;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	23424643527b4567;

1.5
date	2007.04.03.16.29.19;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	5dfa461280d64567;

1.4
date	2007.03.14.13.00.15;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	12fa45f7f1db4567;

1.3
date	2007.01.31.15.04.24;	author mfeldman;	state Exp;
branches;
next	1.2;
commitid	2e6245c0afde4567;

1.2
date	2006.10.17.10.29.44;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.28.18.21.36;	author radvorak;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[227505] Replace FeatureValueSpec generalization of ValueExpression with aggregation, as it's better approach to model such a concept
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id: ReferenceNewElementSpecItemProvider.java,v 1.6 2007/05/10 17:12:28 atikhomirov Exp $
 */
package org.eclipse.gmf.mappings.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.mappings.FeatureInitializer;
import org.eclipse.gmf.mappings.GMFMapFactory;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.ReferenceNewElementSpec;
import org.eclipse.gmf.mappings.presentation.FilterUtil;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.mappings.ReferenceNewElementSpec} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class ReferenceNewElementSpecItemProvider
	extends FeatureInitializerItemProvider
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ReferenceNewElementSpecItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor(
				((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureInitializer_feature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureInitializer_feature_feature", "_UI_FeatureInitializer_type"),
				 GMFMapPackage.eINSTANCE.getFeatureInitializer_Feature(),
				 true,
				 false,
				 true,
				 null,
				 null,
				 null) {
					protected Collection<?> getComboBoxObjects(Object object) {
						if(object instanceof FeatureInitializer) {
							@@SuppressWarnings("unchecked")
							final Collection<EStructuralFeature> original = (Collection<EStructuralFeature>) super.getComboBoxObjects(object);
							return FilterUtil.filterByFeatureInitializer(original, (FeatureInitializer)object);
						}
					
						return super.getComboBoxObjects(object);
					}
			});		
	}

	/**
	 * This specifies how to implement {@@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@@link org.eclipse.emf.edit.command.AddCommand}, {@@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@@link org.eclipse.emf.edit.command.MoveCommand} in {@@link #createCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Collection<? extends EStructuralFeature> getChildrenFeatures(Object object) {
		if (childrenFeatures == null) {
			super.getChildrenFeatures(object);
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getReferenceNewElementSpec_NewElementInitializers());
		}
		return childrenFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EStructuralFeature getChildFeature(Object object, Object child) {
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

	/**
	 * This returns ReferenceNewElementSpec.gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object getImage(Object object) {
		return overlayImage(object, getResourceLocator().getImage("full/obj16/ReferenceNewElementSpec"));
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getText(Object object) {
		StringBuffer buf = new StringBuffer();
		buf.append(getString("_UI_ReferenceNewElementSpec_type"));
		if(object instanceof ReferenceNewElementSpec) {			
			ReferenceNewElementSpec newElementSpec = (ReferenceNewElementSpec)object;
			buf.append('<');			
			String feature = (newElementSpec.getFeature() != null) ? newElementSpec.getFeature().getName() : null;			
			if(feature != null && feature.length() > 0) {
				buf.append(feature);
			}
			buf.append(":= new ");			
			if(newElementSpec.getFeature() != null && newElementSpec.getFeature().getEType() != null) {
				buf.append(newElementSpec.getFeature().getEType().getName());
			}
			
			buf.append('[').append(newElementSpec.getNewElementInitializers().size()).append(']');			
			buf.append('>');			
		}
		return buf.toString();
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(ReferenceNewElementSpec.class)) {
			case GMFMapPackage.REFERENCE_NEW_ELEMENT_SPEC__NEW_ELEMENT_INITIALIZERS:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getReferenceNewElementSpec_NewElementInitializers(),
				 GMFMapFactory.eINSTANCE.createFeatureSeqInitializer()));
	}

}
@


1.6
log
@avoid java5 warnings
@
text
@d5 1
a5 1
 * $Id: ReferenceNewElementSpecItemProvider.java,v 1.5 2007/04/03 16:29:19 atikhomirov Exp $
a14 1
import org.eclipse.emf.common.util.ResourceLocator;
a23 1
import org.eclipse.emf.edit.provider.ItemProviderAdapter;
d38 1
a38 1
	extends ItemProviderAdapter
a65 1
			addFeaturePropertyDescriptor(object);
a181 3
			case GMFMapPackage.REFERENCE_NEW_ELEMENT_SPEC__FEATURE:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
				return;
a205 11
	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public ResourceLocator getResourceLocator() {
		return GMFMapEditPlugin.INSTANCE;
	}

@


1.5
log
@EMF.Edit and editor were regenerated with EMF M6
@
text
@d5 1
a5 1
 * $Id: ReferenceNewElementSpecItemProvider.java,v 1.4 2007/03/14 13:00:15 atikhomirov Exp $
d95 3
a97 2
							return FilterUtil.filterByFeatureInitializer(
									(Collection<EStructuralFeature>)super.getComboBoxObjects(object), (FeatureInitializer)object);
@


1.4
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d5 1
a5 1
 * $Id: ReferenceNewElementSpecItemProvider.java,v 1.3 2007/01/31 15:04:24 mfeldman Exp $
a16 1
import org.eclipse.emf.edit.command.CommandParameter;
d195 2
a196 2
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
d202 1
a202 1
	protected void collectNewChildDescriptors(Collection<CommandParameter> newChildDescriptors, Object object) {
@


1.3
log
@Explicit type casting added for the compatibility with the EMF > 25.1.2007
@
text
@d5 1
a5 1
 * $Id: ReferenceNewElementSpecItemProvider.java,v 1.2 2006/10/17 10:29:44 radvorak Exp $
d17 1
d21 1
d64 2
a65 1
	public List getPropertyDescriptors(Object object) {
d94 1
a94 1
					protected Collection getComboBoxObjects(Object object) {
d113 2
a114 1
	public Collection getChildrenFeatures(Object object) {
d123 13
d141 1
d180 1
d202 2
a203 1
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
d218 1
@


1.2
log
@[161201] Restrict ItemPropertyDescriptor.getChoiceOfValues for ElementInitializer related editing in gmfmap.edit
@
text
@d5 1
a5 1
 * $Id: ReferenceNewElementSpecItemProvider.java,v 1.1 2006/09/28 18:21:36 radvorak Exp $
d16 1
d94 1
a94 1
									super.getComboBoxObjects(object), (FeatureInitializer)object);
@


1.1
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
@
text
@d5 1
a5 1
 * $Id$
d22 1
d25 1
d29 1
d74 1
a74 1
	 * @@generated
d78 2
a79 2
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
d89 10
a98 1
				 null));
@

