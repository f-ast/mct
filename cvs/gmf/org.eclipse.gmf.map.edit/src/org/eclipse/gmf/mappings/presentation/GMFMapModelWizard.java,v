head	1.9;
access;
symbols
	v20080813-1520:1.9
	v20080722-1827:1.9
	v20080716-1600:1.8
	v20080716-1642:1.9
	R2_1_maintenance:1.8.0.4
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080528-1052:1.8
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070614-1400:1.8
	v20070608-1300:1.8
	v20070601-1400:1.8
	v20070520-1200:1.8
	v20070518-1300:1.8
	v20070504-1000:1.8
	v20070427-0600:1.8
	v20070420-1000:1.8
	v20070403-1500:1.8
	v20070330-1300:1.8
	v20060316-0600:1.8
	v20070208-1800:1.7
	M4_20:1.7
	v20061214-0000:1.7
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.6
	M1_20:1.3
	v20060904-1500:1.3
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2008.07.10.12.29.49;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	7c51487600bd4567;

1.8
date	2007.03.14.13.00.14;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	12fa45f7f1db4567;

1.7
date	2006.11.22.17.36.23;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	132245648a964567;

1.6
date	2006.09.21.15.51.20;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.19.11.44.36;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.07.17.41.00;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.08.29.10.09.12;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.28.13.17.59;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.29.10;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[217307] - "Add extension model" action: impossible use for additing nondeployed models
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.presentation;


import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ContentHandler;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;
import org.eclipse.gmf.mappings.provider.GMFMapEditPlugin;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.actions.WorkspaceModifyOperation;
import org.eclipse.ui.dialogs.WizardNewFileCreationPage;
import org.eclipse.ui.part.FileEditorInput;
import org.eclipse.ui.part.ISetSelectionTarget;
/**
 * This is a simple wizard for creating a new model file.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated NOT
 */
public class GMFMapModelWizard extends Wizard implements INewWizard {

	/**
	 * This is the file creation page.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GMFMapModelWizardNewFileCreationPage newFileCreationPage;

	protected MapRefModelPages refPages;

	/**
	 * Remember the selection during initialization for populating the default container.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected IStructuredSelection selection;

	/**
	 * Remember the workbench during initialization.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected IWorkbench workbench;

	/**
	 * This just records the information.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void init(IWorkbench workbench, IStructuredSelection selection) {
		this.workbench = workbench;
		this.selection = selection;
		setWindowTitle(GMFMapEditPlugin.INSTANCE.getString("_UI_Wizard_label"));
		setDefaultPageImageDescriptor(ExtendedImageRegistry.INSTANCE.getImageDescriptor(GMFMapEditPlugin.INSTANCE.getImage("full/wizban/NewGMFMap")));
		refPages = new MapRefModelPages(true, null);
	}

	/**
	 * Create a new model.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected EObject createInitialModel() {
		return refPages.createMapping();
	}

	/**
	 * Do the work after everything is specified.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public boolean performFinish() {
		try {
			// Remember the file.
			//
			final IFile modelFile = getModelFile();

			// Do the work within an operation.
			//
			WorkspaceModifyOperation operation =
				new WorkspaceModifyOperation() {
					protected void execute(IProgressMonitor progressMonitor) {
						try {
							// Create a resource set
							//
							ResourceSet resourceSet = new ResourceSetImpl();

							// Get the URI of the model file.
							//
							URI fileURI = URI.createPlatformResourceURI(modelFile.getFullPath().toString(), true);

							// Create a resource for this file.
							//
							Resource resource = resourceSet.createResource(fileURI, ContentHandler.UNSPECIFIED_CONTENT_TYPE);

							// Add the initial model object to the contents.
							//
							EObject rootObject = createInitialModel();
							if (rootObject != null) {
								resource.getContents().add(rootObject);
							}

							// Save the contents of the resource to the file system.
							//
							Map<String, String> options = new HashMap<String, String>();
							options.put(XMLResource.OPTION_ENCODING, "UTF-8");
							resource.save(options);
						}
						catch (Exception exception) {
							GMFMapEditPlugin.INSTANCE.log(exception);
						}
						finally {
							progressMonitor.done();
						}
					}
				};

			getContainer().run(false, false, operation);

			// Select the new file resource in the current view.
			//
			IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow();
			IWorkbenchPage page = workbenchWindow.getActivePage();
			final IWorkbenchPart activePart = page.getActivePart();
			if (activePart instanceof ISetSelectionTarget) {
				final ISelection targetSelection = new StructuredSelection(modelFile);
				getShell().getDisplay().asyncExec
					(new Runnable() {
						 public void run() {
							 ((ISetSelectionTarget)activePart).selectReveal(targetSelection);
						 }
					 });
			}

			// Open an editor on the new file.
			//
			try {
				page.openEditor
					(new FileEditorInput(modelFile),
					 workbench.getEditorRegistry().getDefaultEditor(modelFile.getFullPath().toString()).getId());
			}
			catch (PartInitException exception) {
				MessageDialog.openError(workbenchWindow.getShell(), GMFMapEditPlugin.INSTANCE.getString("_UI_OpenEditorError_label"), exception.getMessage());
				return false;
			}

			return true;
		}
		catch (Exception exception) {
			GMFMapEditPlugin.INSTANCE.log(exception);
			return false;
		}
	}

	/**
	 * This is the one page of the wizard.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public class GMFMapModelWizardNewFileCreationPage extends WizardNewFileCreationPage {
		/**
		 * Pass in the selection.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		public GMFMapModelWizardNewFileCreationPage(String pageId, IStructuredSelection selection) {
			super(pageId, selection);
		}

		/**
		 * The framework calls this to see if the file is correct.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		protected boolean validatePage() {
			if (super.validatePage()) {
				// Make sure the file ends in ".gmfmap".
				//
				String requiredExt = GMFMapEditPlugin.INSTANCE.getString("_UI_GMFMapEditorFilenameExtension");
				String enteredExt = new Path(getFileName()).getFileExtension();
				if (enteredExt == null || !enteredExt.equals(requiredExt)) {
					setErrorMessage(GMFMapEditPlugin.INSTANCE.getString("_WARN_FilenameExtension", new Object [] { requiredExt }));
					return false;
				}
				else {
					return true;
				}
			}
			else {
				return false;
			}
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		public IFile getModelFile() {
			return ResourcesPlugin.getWorkspace().getRoot().getFile(getContainerFullPath().append(getFileName()));
		}
	}

	/**
	 * The framework calls this to create the contents of the wizard.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public void addPages() {
		// Create a page, set the title, and the initial model file name.
		//
		newFileCreationPage = new GMFMapModelWizardNewFileCreationPage("Whatever", selection);
		newFileCreationPage.setTitle(GMFMapEditPlugin.INSTANCE.getString("_UI_GMFMapModelWizard_label"));
		newFileCreationPage.setDescription(GMFMapEditPlugin.INSTANCE.getString("_UI_GMFMapModelWizard_description"));
		newFileCreationPage.setFileName(GMFMapEditPlugin.INSTANCE.getString("_UI_GMFMapEditorFilenameDefaultBase") + "." + GMFMapEditPlugin.INSTANCE.getString("_UI_GMFMapEditorFilenameExtension"));
		addPage(newFileCreationPage);

		// Try and get the resource selection to determine a current directory for the file dialog.
		//
		if (selection != null && !selection.isEmpty()) {
			// Get the resource...
			//
			Object selectedElement = selection.iterator().next();
			if (selectedElement instanceof IResource) {
				// Get the resource parent, if its a file.
				//
				IResource selectedResource = (IResource)selectedElement;
				if (selectedResource.getType() == IResource.FILE) {
					selectedResource = selectedResource.getParent();
				}

				// This gives us a directory...
				//
				if (selectedResource instanceof IFolder || selectedResource instanceof IProject) {
					// Set this for the container.
					//
					newFileCreationPage.setContainerFullPath(selectedResource.getFullPath());

					// Make up a unique new name here.
					//
					String defaultModelBaseFilename = GMFMapEditPlugin.INSTANCE.getString("_UI_GMFMapEditorFilenameDefaultBase");
					String defaultModelFilenameExtension = GMFMapEditPlugin.INSTANCE.getString("_UI_GMFMapEditorFilenameExtension");
					String modelFilename = defaultModelBaseFilename + "." + defaultModelFilenameExtension;
					for (int i = 1; ((IContainer)selectedResource).findMember(modelFilename) != null; ++i) {
						modelFilename = defaultModelBaseFilename + i + "." + defaultModelFilenameExtension;
					}
					newFileCreationPage.setFileName(modelFilename);
				}
			}
		}

		refPages.addPages(this, selection);
	}

	/**
	 * Get the file from the page.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public IFile getModelFile() {
		return newFileCreationPage.getModelFile();
	}
}
@


1.8
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d23 1
d131 1
a131 1
							Resource resource = resourceSet.createResource(fileURI);
@


1.7
log
@Removing warnings
@
text
@d141 1
a141 1
							Map options = new HashMap();
@


1.6
log
@allow to use shared resultset
@
text
@d126 1
a126 1
							URI fileURI = URI.createPlatformResourceURI(modelFile.getFullPath().toString());
@


1.5
log
@refactor referenced models of mapping model pages
@
text
@d89 1
a89 1
		refPages = new MapRefModelPages(true);
@


1.4
log
@#156534 Consider selected file in model selection page
@
text
@a9 3
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
a10 2
import java.util.Iterator;
import java.util.List;
a11 2
import java.util.MissingResourceException;
import java.util.StringTokenizer;
a21 2
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
a22 2
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EcorePackage;
a27 11
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.internal.common.ui.ComboElementSelectorExtension;
import org.eclipse.gmf.internal.common.ui.ElementSelectorExtension;
import org.eclipse.gmf.internal.common.ui.ExtensibleModelSelectionPage;
import org.eclipse.gmf.internal.common.ui.ListElementSelectorExtension;
import org.eclipse.gmf.internal.common.ui.ResourceLocationProvider;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.GMFMapFactory;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.Mapping;
a28 2
import org.eclipse.gmf.tooldef.GMFToolPackage;
import org.eclipse.gmf.tooldef.Palette;
a33 9
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
d48 1
a48 1
 * @@generated
a50 15
	/**
	 * This caches an instance of the model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GMFMapPackage gmfMapPackage = GMFMapPackage.eINSTANCE;

	/**
	 * This caches an instance of the model factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GMFMapFactory gmfMapFactory = gmfMapPackage.getGMFMapFactory();
d60 1
a60 13
	/**
	 * This is the initial object creation page.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GMFMapModelWizardInitialObjectCreationPage initialObjectCreationPage;

	protected ExtensibleModelSelectionPage domainModelSelectionPage;

	protected ExtensibleModelSelectionPage graphModelSelectionPage;

	protected ExtensibleModelSelectionPage toolModelSelectionPage;
a78 8
	 * Caches the names of the types that can be created as the root object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected List initialObjectNames;

	/**
d89 1
a89 23
	}

	/**
	 * Returns the names of the types that can be created as the root object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected Collection getInitialObjectNames() {
		if (initialObjectNames == null) {
			initialObjectNames = new ArrayList();
			for (Iterator classifiers = gmfMapPackage.getEClassifiers().iterator(); classifiers.hasNext(); ) {
				EClassifier eClassifier = (EClassifier)classifiers.next();
				if (eClassifier instanceof EClass) {
					EClass eClass = (EClass)eClassifier;
					if (!eClass.isAbstract()) {
						initialObjectNames.add(eClass.getName());
					}
				}
			}
			Collections.sort(initialObjectNames, java.text.Collator.getInstance());
		}
		return initialObjectNames;
d99 1
a99 20
		Mapping mapping = gmfMapFactory.createMapping();
		CanvasMapping canvasMapping = gmfMapFactory.createCanvasMapping();
		mapping.setDiagram(canvasMapping);
		EPackage domainModel = (EPackage) (((ElementSelectorExtension) domainModelSelectionPage.getExtension("domainModel")).getModelElement());
		if (domainModel != null) {
			canvasMapping.setDomainModel(domainModel);
		}
		EClass domainElement = (EClass) (((ElementSelectorExtension) domainModelSelectionPage.getExtension("domainElement")).getModelElement());
		if (domainElement != null) {
			canvasMapping.setDomainMetaElement(domainElement);
		}
		Canvas canvas = (Canvas) (((ElementSelectorExtension) graphModelSelectionPage.getExtension("canvas")).getModelElement());
		if (canvas != null) {
			canvasMapping.setDiagramCanvas(canvas);
		}
		Palette palette = (Palette) (((ElementSelectorExtension) toolModelSelectionPage.getExtension("palette")).getModelElement());
		if (palette != null) {
			canvasMapping.setPalette(palette);
		}
		return mapping;
a243 209
	 * This is the page where the type of object to create is selected.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public class GMFMapModelWizardInitialObjectCreationPage extends WizardPage {
		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		protected Combo initialObjectField;

		/**
		 * @@generated
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 */
		protected List encodings;

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		protected Combo encodingField;

		/**
		 * Pass in the selection.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		public GMFMapModelWizardInitialObjectCreationPage(String pageId) {
			super(pageId);
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		public void createControl(Composite parent) {
			Composite composite = new Composite(parent, SWT.NONE);
			{
				GridLayout layout = new GridLayout();
				layout.numColumns = 1;
				layout.verticalSpacing = 12;
				composite.setLayout(layout);

				GridData data = new GridData();
				data.verticalAlignment = GridData.FILL;
				data.grabExcessVerticalSpace = true;
				data.horizontalAlignment = GridData.FILL;
				composite.setLayoutData(data);
			}

			Label containerLabel = new Label(composite, SWT.LEFT);
			{
				containerLabel.setText(GMFMapEditPlugin.INSTANCE.getString("_UI_ModelObject"));

				GridData data = new GridData();
				data.horizontalAlignment = GridData.FILL;
				containerLabel.setLayoutData(data);
			}

			initialObjectField = new Combo(composite, SWT.BORDER);
			{
				GridData data = new GridData();
				data.horizontalAlignment = GridData.FILL;
				data.grabExcessHorizontalSpace = true;
				initialObjectField.setLayoutData(data);
			}

			for (Iterator i = getInitialObjectNames().iterator(); i.hasNext(); ) {
				initialObjectField.add(getLabel((String)i.next()));
			}

			if (initialObjectField.getItemCount() == 1) {
				initialObjectField.select(0);
			}
			initialObjectField.addModifyListener(validator);

			Label encodingLabel = new Label(composite, SWT.LEFT);
			{
				encodingLabel.setText(GMFMapEditPlugin.INSTANCE.getString("_UI_XMLEncoding"));

				GridData data = new GridData();
				data.horizontalAlignment = GridData.FILL;
				encodingLabel.setLayoutData(data);
			}
			encodingField = new Combo(composite, SWT.BORDER);
			{
				GridData data = new GridData();
				data.horizontalAlignment = GridData.FILL;
				data.grabExcessHorizontalSpace = true;
				encodingField.setLayoutData(data);
			}

			for (Iterator i = getEncodings().iterator(); i.hasNext(); ) {
				encodingField.add((String)i.next());
			}

			encodingField.select(0);
			encodingField.addModifyListener(validator);

			setPageComplete(validatePage());
			setControl(composite);
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		protected ModifyListener validator =
			new ModifyListener() {
				public void modifyText(ModifyEvent e) {
					setPageComplete(validatePage());
				}
			};

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		protected boolean validatePage() {
			return getInitialObjectName() != null && getEncodings().contains(encodingField.getText());
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		public void setVisible(boolean visible) {
			super.setVisible(visible);
			if (visible) {
				if (initialObjectField.getItemCount() == 1) {
					initialObjectField.clearSelection();
					encodingField.setFocus();
				}
				else {
					encodingField.clearSelection();
					initialObjectField.setFocus();
				}
			}
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		public String getInitialObjectName() {
			String label = initialObjectField.getText();

			for (Iterator i = getInitialObjectNames().iterator(); i.hasNext(); ) {
				String name = (String)i.next();
				if (getLabel(name).equals(label)) {
					return name;
				}
			}
			return null;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		public String getEncoding() {
			return encodingField.getText();
		}

		/**
		 * Returns the label for the specified type name.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		protected String getLabel(String typeName) {
			try {
				return GMFMapEditPlugin.INSTANCE.getString("_UI_" + typeName + "_type");
			}
			catch(MissingResourceException mre) {
				GMFMapEditPlugin.INSTANCE.log(mre);
			}
			return typeName;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @@generated
		 */
		protected Collection getEncodings() {
			if (encodings == null) {
				encodings = new ArrayList();
				for (StringTokenizer stringTokenizer = new StringTokenizer(GMFMapEditPlugin.INSTANCE.getString("_UI_XMLEncodingChoices")); stringTokenizer.hasMoreTokens(); ) {
					encodings.add(stringTokenizer.nextToken());
				}
			}
			return encodings;
		}
	}

	/**
d292 1
a292 102
		ResourceLocationProvider rloc = new ResourceLocationProvider(selection);
		domainModelSelectionPage = new ExtensibleModelSelectionPage("domain", rloc) {

			protected String getModelFileExtension() {
				return "ecore"; //$NON-NLS-1$
			}
		};
		domainModelSelectionPage.setTitle("Select Domain Model");
		domainModelSelectionPage.setDescription("Load domain model and select element for canvas mapping.");
		domainModelSelectionPage.addExtension("domainModel", new ComboElementSelectorExtension() {

			protected String getModelElementName() {
				return "Package:";
			}

			protected String getModelElementLabel(EObject modelElement) {
				String name = ((EPackage) modelElement).getName();
				if (name == null || name.trim().length() == 0) {
					name = "<unnamed>";
				}
				return name;
			}

			protected EClass getModelElementClass() {
				return EcorePackage.eINSTANCE.getEPackage();
			}
		});
		domainModelSelectionPage.addExtension("domainElement", new ListElementSelectorExtension() {

			protected String getModelElementName() {
				return "Class:";
			}

			protected String getModelElementLabel(EObject modelElement) {
				String name = ((EClass) modelElement).getName();
				if (name == null || name.trim().length() == 0) {
					name = "<unnamed>";
				}
				return name;
			}

			protected EClass getModelElementClass() {
				return EcorePackage.eINSTANCE.getEClass();
			}
		});
		addPage(domainModelSelectionPage);

		graphModelSelectionPage = new ExtensibleModelSelectionPage("graph", rloc) {

			protected String getModelFileExtension() {
				return "gmfgraph"; //$NON-NLS-1$
			}
		};
		graphModelSelectionPage.setTitle("Select Diagram Canvas");
		graphModelSelectionPage.setDescription("Load graphical definition model and select diagram canvas for canvas mapping.");
		graphModelSelectionPage.addExtension("canvas", new ComboElementSelectorExtension() {

			protected String getModelElementName() {
				return "Diagram Canvas:";
			}

			protected String getModelElementLabel(EObject modelElement) {
				String name = ((Canvas) modelElement).getName();
				if (name == null || name.trim().length() == 0) {
					name = "<unnamed>";
				}
				return name;
			}

			protected EClass getModelElementClass() {
				return GMFGraphPackage.eINSTANCE.getCanvas();
			}
		});
		addPage(graphModelSelectionPage);

		toolModelSelectionPage = new ExtensibleModelSelectionPage("tool", rloc) {

			protected String getModelFileExtension() {
				return "gmftool"; //$NON-NLS-1$
			}
		};
		toolModelSelectionPage.setTitle("Select Diagram Palette");
		toolModelSelectionPage.setDescription("Load tooling definition model and select diagram palette for canvas mapping.");
		toolModelSelectionPage.addExtension("palette", new ComboElementSelectorExtension() {

			protected String getModelElementName() {
				return "Diagram Palette:";
			}

			protected String getModelElementLabel(EObject modelElement) {
				String title = ((Palette) modelElement).getTitle();
				if (title == null || title.trim().length() == 0) {
					title = "<untitled>";
				}
				return title;
			}

			protected EClass getModelElementClass() {
				return GMFToolPackage.eINSTANCE.getPalette();
			}
		});
		addPage(toolModelSelectionPage);
a303 1

@


1.3
log
@filter models by selection
@
text
@d45 1
d610 2
a611 1
		domainModelSelectionPage = new ExtensibleModelSelectionPage("domain") {
d657 1
a657 1
		graphModelSelectionPage = new ExtensibleModelSelectionPage("graph") {
d685 1
a685 1
		toolModelSelectionPage = new ExtensibleModelSelectionPage("tool") {
@


1.2
log
@#155014 Default gmfmap model creation wizard should create initial content
@
text
@d609 6
a614 1
		domainModelSelectionPage = new ExtensibleModelSelectionPage("domain");
d655 6
a660 1
		graphModelSelectionPage = new ExtensibleModelSelectionPage("graph");
d683 6
a688 1
		toolModelSelectionPage = new ExtensibleModelSelectionPage("tool");
@


1.1
log
@*** empty log message ***
@
text
@d32 2
d39 7
d48 1
d50 2
d115 6
d185 1
a185 1
	 * @@generated
d188 20
a207 3
		EClass eClass = (EClass)gmfMapPackage.getEClassifier(initialObjectCreationPage.getInitialObjectName());
		EObject rootObject = gmfMapFactory.create(eClass);
		return rootObject;
d214 1
a214 1
	 * @@generated
d250 1
a250 1
							options.put(XMLResource.OPTION_ENCODING, initialObjectCreationPage.getEncoding());
d564 1
a564 1
	 * @@generated
d608 87
a694 4
		initialObjectCreationPage = new GMFMapModelWizardInitialObjectCreationPage("Whatever2");
		initialObjectCreationPage.setTitle(GMFMapEditPlugin.INSTANCE.getString("_UI_GMFMapModelWizard_label"));
		initialObjectCreationPage.setDescription(GMFMapEditPlugin.INSTANCE.getString("_UI_Wizard_initial_object_description"));
		addPage(initialObjectCreationPage);
@

