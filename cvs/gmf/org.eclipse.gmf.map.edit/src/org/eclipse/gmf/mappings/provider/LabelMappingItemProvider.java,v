head	1.13;
access;
symbols
	v20080813-1520:1.13
	v20080722-1827:1.13
	v20080716-1600:1.13
	v20080716-1642:1.13
	R2_1_maintenance:1.13.0.4
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080528-1052:1.13
	v20080425-1959:1.13
	v20080417-1610:1.13
	v20080322-0000:1.13
	v20080222-1200:1.13
	v20070809-0000:1.13
	R2_0_maintenance:1.13.0.2
	R2_0:1.13
	R4_20:1.13
	v20070621-0000:1.13
	RC3_20:1.13
	v20070614-1400:1.13
	v20070608-1300:1.13
	v20070601-1400:1.13
	v20070520-1200:1.13
	v20070518-1300:1.13
	v20070504-1000:1.13
	v20070427-0600:1.13
	v20070420-1000:1.13
	v20070403-1500:1.13
	v20070330-1300:1.12
	v20060316-0600:1.12
	v20070208-1800:1.11
	M4_20:1.11
	v20061214-0000:1.11
	M3_20:1.11
	v20061117-0800:1.11
	v20061013-1330:1.10
	M1_20:1.10
	v20060904-1500:1.10
	v20060713-1700:1.10
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	v20060627-1200:1.10
	v20060616-1200:1.10
	v20060609-1400:1.10
	v20060531-1730:1.10
	v20060519-1300:1.10
	v20060519-0800:1.10
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.4
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2007.04.03.16.29.19;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	5dfa461280d64567;

1.12
date	2007.03.14.13.00.15;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	12fa45f7f1db4567;

1.11
date	2006.10.19.15.22.03;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.19.10.11.56;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.14.18.06.28;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.10.15.12.28;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.26.17.55.01;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.20.14.35.50;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.13.14.32.54;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.08.13.22.20;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.07.14.08.44;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.14.10.11.13;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.13.18.37.55;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.13
log
@EMF.Edit and editor were regenerated with EMF M6
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ItemProviderAdapter;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.presentation.FilterUtil;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.mappings.LabelMapping} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class LabelMappingItemProvider
	extends ItemProviderAdapter
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelMappingItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addDiagramLabelPropertyDescriptor(object);
			addReadOnlyPropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Diagram Label feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addDiagramLabelPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LabelMapping_diagramLabel_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelMapping_diagramLabel_feature", "_UI_LabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getLabelMapping_DiagramLabel(),
				 true,
				 null,
				 null,
				 null) {
						protected Collection<?> getComboBoxObjects(Object object) {
							return FilterUtil.sort(super.getComboBoxObjects(object));
						}
			});
	}

	/**
	 * This adds a property descriptor for the Read Only feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addReadOnlyPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LabelMapping_readOnly_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelMapping_readOnly_feature", "_UI_LabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getLabelMapping_ReadOnly(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This returns LabelMapping.gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object getImage(Object object) {
		return overlayImage(object, getResourceLocator().getImage("full/obj16/LabelMapping"));
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String getText(Object object) {
		LabelMapping labelMapping = (LabelMapping)object;
		return getString("_UI_LabelMapping_type") + " " + labelMapping.isReadOnly();
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(LabelMapping.class)) {
			case GMFMapPackage.LABEL_MAPPING__READ_ONLY:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);
	}

	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public ResourceLocator getResourceLocator() {
		return GMFMapEditPlugin.INSTANCE;
	}

}
@


1.12
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a15 1
import org.eclipse.emf.edit.command.CommandParameter;
d160 2
a161 2
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
d167 1
a167 1
	protected void collectNewChildDescriptors(Collection<CommandParameter> newChildDescriptors, Object object) {
@


1.11
log
@[161380] Inroduce label mapping subclasses
@
text
@d16 1
d20 1
d61 2
a62 1
	public List getPropertyDescriptors(Object object) {
d90 1
a90 1
						protected Collection getComboBoxObjects(Object object) {
d124 1
d135 1
d148 1
d167 2
a168 1
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
d178 1
@


1.10
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@a63 1
			addFeaturesPropertyDescriptor(object);
a64 2
			addViewPatternPropertyDescriptor(object);
			addEditPatternPropertyDescriptor(object);
a93 24
	 * This adds a property descriptor for the Features feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addFeaturesPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LabelMapping_features_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelMapping_features_feature", "_UI_LabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getLabelMapping_Features(),
				 true,
				 null,
				 null,
				 null) {
						protected Collection getComboBoxObjects(Object object) {
							return FilterUtil.filterByContainerMetaclass(super.getComboBoxObjects(object), (LabelMapping) object);
						}
			});
	}

	/**
a115 44
	 * This adds a property descriptor for the View Pattern feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addViewPatternPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LabelMapping_viewPattern_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelMapping_viewPattern_feature", "_UI_LabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getLabelMapping_ViewPattern(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Edit Pattern feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addEditPatternPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LabelMapping_editPattern_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelMapping_editPattern_feature", "_UI_LabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getLabelMapping_EditPattern(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
d132 2
a133 4
		String label = ((LabelMapping)object).getViewPattern();
		return label == null || label.length() == 0 ?
			getString("_UI_LabelMapping_type") :
			getString("_UI_LabelMapping_type") + " " + label;
a147 2
			case GMFMapPackage.LABEL_MAPPING__VIEW_PATTERN:
			case GMFMapPackage.LABEL_MAPPING__EDIT_PATTERN:
@


1.9
log
@overriding recent changes introduced (along with fixing #133836) in GMFMap model, as it's merely a 'shortcut', quite frequent though. Still, adding few new concepts just for the sake of single usecase (I do admit it's popular) seems excessive to me.
GMFMap kept the same as old (no new notions introduced), GMFGraph got generalization from DiagramLabel to DiagramNode to make it possible to use DiagramLabels for NodeMappings (thus, it's possible to detect such nodes in the DGMT)
Tests added to make sure we generate correct genModel for both cases.
@
text
@d135 2
d157 2
d179 2
@


1.8
log
@#133836 Creating a child node without a label causes error
@
text
@d85 1
a85 1
				 GMFMapPackage.eINSTANCE.getLabelFlavour_DiagramLabel(),
d109 1
a109 1
				 GMFMapPackage.eINSTANCE.getLabelFlavour_Features(),
d131 3
a133 3
				 getString("_UI_LabelFlavour_readOnly_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelFlavour_readOnly_feature", "_UI_LabelFlavour_type"),
				 GMFMapPackage.eINSTANCE.getLabelFlavour_ReadOnly(),
d151 3
a153 3
				 getString("_UI_LabelFlavour_viewPattern_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelFlavour_viewPattern_feature", "_UI_LabelFlavour_type"),
				 GMFMapPackage.eINSTANCE.getLabelFlavour_ViewPattern(),
d171 3
a173 3
				 getString("_UI_LabelFlavour_editPattern_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelFlavour_editPattern_feature", "_UI_LabelFlavour_type"),
				 GMFMapPackage.eINSTANCE.getLabelFlavour_EditPattern(),
d197 4
a200 2
		LabelMapping labelMapping = (LabelMapping)object;
		return getString("_UI_LabelMapping_type") + " " + labelMapping.isReadOnly();
@


1.7
log
@#119034 Show only valid feature in "containment feature" property of ChildNodeMapping
#138606 hide inappropriate entries in selection dialogs
@
text
@d85 1
a85 1
				 GMFMapPackage.eINSTANCE.getLabelMapping_DiagramLabel(),
d109 1
a109 1
				 GMFMapPackage.eINSTANCE.getLabelMapping_Features(),
d131 3
a133 3
				 getString("_UI_LabelMapping_readOnly_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelMapping_readOnly_feature", "_UI_LabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getLabelMapping_ReadOnly(),
d151 3
a153 3
				 getString("_UI_LabelMapping_viewPattern_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelMapping_viewPattern_feature", "_UI_LabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getLabelMapping_ViewPattern(),
d171 3
a173 3
				 getString("_UI_LabelMapping_editPattern_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelMapping_editPattern_feature", "_UI_LabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getLabelMapping_EditPattern(),
d197 2
a198 4
		String label = ((LabelMapping)object).getViewPattern();
		return label == null || label.length() == 0 ?
			getString("_UI_LabelMapping_type") :
			getString("_UI_LabelMapping_type") + " " + label;
@


1.6
log
@#137735 Sort features/attributes/eclasses alphabetically in all EMF editor for .gmfmap
@
text
@d27 1
a27 1
import org.eclipse.gmf.mappings.presentation.EStructuralFeaturesComparator;
d76 1
a76 1
	 * @@generated
d80 1
a80 1
			(createItemPropertyDescriptor
d89 5
a93 1
				 null));
d115 1
a115 1
							return EStructuralFeaturesComparator.getSortedList(super.getComboBoxObjects(object), (LabelMapping) object);
@


1.5
log
@Plugin regenerated.
@
text
@a14 1

a15 1

a24 1

d27 1
d96 1
a96 1
	 * @@generated
d100 1
a100 1
			(createItemPropertyDescriptor
d109 5
a113 1
				 null));
@


1.4
log
@added icon and different label for LabelMapping
@
text
@d181 1
a181 1
		return getResourceLocator().getImage("full/obj16/LabelMapping");
@


1.3
log
@#130715 Use default label text defined in gmfgraph model
@
text
@d175 10
d191 4
a194 2
		LabelMapping labelMapping = (LabelMapping)object;
		return getString("_UI_LabelMapping_type") + " " + labelMapping.isReadOnly();
@


1.2
log
@#127461 add label diagram element in gmfgraph model
@
text
@a66 1
			addTextPropertyDescriptor(object);
a67 1
			addDefaultTextPropertyDescriptor(object);
a114 20
	 * This adds a property descriptor for the Text feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addTextPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LabelMapping_text_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelMapping_text_feature", "_UI_LabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getLabelMapping_Text(),
				 true,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
a134 20
	 * This adds a property descriptor for the Default Text feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addDefaultTextPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LabelMapping_defaultText_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelMapping_defaultText_feature", "_UI_LabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getLabelMapping_DefaultText(),
				 true,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
d181 2
a182 4
		String label = ((LabelMapping)object).getText();
		return label == null || label.length() == 0 ?
			getString("_UI_LabelMapping_type") :
			getString("_UI_LabelMapping_type") + " " + label;
a195 1
			case GMFMapPackage.LABEL_MAPPING__TEXT:
a196 1
			case GMFMapPackage.LABEL_MAPPING__DEFAULT_TEXT:
@


1.1
log
@#127461 Support multiple labels definition in the mapping model
@
text
@d65 1
d77 20
@

