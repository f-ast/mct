head	1.14;
access;
symbols
	v20080813-1520:1.14
	v20080722-1827:1.14
	v20080716-1600:1.14
	v20080716-1642:1.14
	R2_1_maintenance:1.14.0.2
	Root_R2_1_maintenance:1.14
	R2_1_0:1.14
	v20080610-1132:1.14
	v20080528-1052:1.14
	v20080425-1959:1.13
	v20080417-1610:1.13
	v20080322-0000:1.12
	v20080222-1200:1.11
	v20070809-0000:1.11
	R2_0_maintenance:1.11.0.2
	R2_0:1.11
	R4_20:1.11
	v20070621-0000:1.11
	RC3_20:1.11
	v20070614-1400:1.11
	v20070608-1300:1.11
	v20070601-1400:1.11
	v20070520-1200:1.11
	v20070518-1300:1.11
	v20070504-1000:1.10
	v20070427-0600:1.10
	v20070420-1000:1.10
	v20070403-1500:1.10
	v20070330-1300:1.9
	v20060316-0600:1.9
	v20070208-1800:1.8
	M4_20:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061013-1330:1.6
	M1_20:1.5
	v20060904-1500:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.4
	v20060519-1300:1.4
	v20060519-0800:1.4
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.14
date	2008.05.28.11.17.39;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	623483d3f534567;

1.13
date	2008.04.17.11.58.45;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	32fe48073b744567;

1.12
date	2008.03.03.17.45.10;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	161147cc39254567;

1.11
date	2007.05.10.17.12.28;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	23424643527b4567;

1.10
date	2007.04.03.16.29.19;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	5dfa461280d64567;

1.9
date	2007.03.14.13.00.15;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	12fa45f7f1db4567;

1.8
date	2007.01.31.15.04.24;	author mfeldman;	state Exp;
branches;
next	1.7;
commitid	2e6245c0afde4567;

1.7
date	2006.10.17.10.29.44;	author radvorak;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.28.18.21.36;	author radvorak;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.07.14.32.28;	author radvorak;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.19.10.11.56;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.02.12.52.53;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.29.18.33.08;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.20.14.07.18;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.14
log
@NPE on element creation in the default editor
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.mappings.FeatureInitializer;
import org.eclipse.gmf.mappings.FeatureValueSpec;
import org.eclipse.gmf.mappings.GMFMapFactory;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.presentation.FilterUtil;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.mappings.FeatureValueSpec} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class FeatureValueSpecItemProvider
	extends FeatureInitializerItemProvider
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FeatureValueSpecItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

		}
		return itemPropertyDescriptors;
	}

	/**
	 * This specifies how to implement {@@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@@link org.eclipse.emf.edit.command.AddCommand}, {@@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@@link org.eclipse.emf.edit.command.MoveCommand} in {@@link #createCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Collection<? extends EStructuralFeature> getChildrenFeatures(Object object) {
		if (childrenFeatures == null) {
			super.getChildrenFeatures(object);
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getFeatureValueSpec_Value());
		}
		return childrenFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EStructuralFeature getChildFeature(Object object, Object child) {
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

	/**
	 * This adds a property descriptor for the Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor(
				((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureInitializer_feature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureInitializer_feature_feature", "_UI_FeatureInitializer_type"),
				 GMFMapPackage.eINSTANCE.getFeatureInitializer_Feature(),
				 true,
				 false,
				 true,
				 null,
				 null,
				 null) {
					protected Collection<?> getComboBoxObjects(Object object) {
						if(object instanceof FeatureInitializer) {
							@@SuppressWarnings("unchecked")
							final Collection<EStructuralFeature> original = (Collection<EStructuralFeature>) super.getComboBoxObjects(object);
							return FilterUtil.filterByFeatureInitializer(original, (FeatureInitializer)object);
						}
					
						return super.getComboBoxObjects(object);
					}				
			});
	}

	/**
	 * This returns FeatureValueSpec.gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object getImage(Object object) {
		return overlayImage(object, getResourceLocator().getImage("full/obj16/FeatureValueSpec"));
	}

	/**
	 * @@generated
	 */
	public String getTextGen(Object object) {
		return getString("_UI_FeatureValueSpec_type");
	}

	/**
	 * This returns the label text for the adapted class.
	 * @@generated NOT
	 */
	public String getText(Object object) {
		StringBuilder buf = new StringBuilder();
		buf.append(getTextGen(object));
		if(object instanceof FeatureValueSpec) { 
			FeatureValueSpec featureValueSpec = (FeatureValueSpec)object; 
			buf.append('<');
			
			String feature = (featureValueSpec.getFeature() != null) ? featureValueSpec.getFeature().getName() : null;
			if(feature != null && feature.length() > 0) {
				buf.append(feature).append(":=");
			}
			
			String body = crop(featureValueSpec.getValue() != null ? featureValueSpec.getValue().getBody() : null);			
			if(body != null && body.length() > 0) {
				buf.append(' ').append(body);
			}
			buf.append('>');
		}
		return buf.toString();
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(FeatureValueSpec.class)) {
			case GMFMapPackage.FEATURE_VALUE_SPEC__VALUE:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getFeatureValueSpec_Value(),
				 GMFMapFactory.eINSTANCE.createValueExpression()));

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getFeatureValueSpec_Value(),
				 GMFMapFactory.eINSTANCE.createConstraint()));
	}

}
@


1.13
log
@[227505] Replace FeatureValueSpec generalization of ValueExpression with aggregation, as it's better approach to model such a concept
@
text
@d166 1
a166 1
			String body = crop(featureValueSpec.getValue().getBody());			
@


1.12
log
@regenerated with EMF 2.4M5
@
text
@d27 1
d38 1
a38 1
	extends ValueExpressionItemProvider
a65 1
			addFeaturePropertyDescriptor(object);
d71 30
d144 7
a151 2
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d155 2
a156 2
		StringBuffer buf = new StringBuffer();
		buf.append(getString("_UI_FeatureValueSpec_type"));
d166 1
a166 1
			String body = crop(featureValueSpec.getBody());			
d187 2
a188 2
			case GMFMapPackage.FEATURE_VALUE_SPEC__FEATURE:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
d204 10
@


1.11
log
@avoid java5 warnings
@
text
@a14 1
import org.eclipse.emf.common.util.ResourceLocator;
a170 11
	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public ResourceLocator getResourceLocator() {
		return GMFMapEditPlugin.INSTANCE;
	}

@


1.10
log
@EMF.Edit and editor were regenerated with EMF M6
@
text
@d93 3
a95 2
							return FilterUtil.filterByFeatureInitializer(
									(Collection<EStructuralFeature>)super.getComboBoxObjects(object), (FeatureInitializer)object);
@


1.9
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a15 1
import org.eclipse.emf.edit.command.CommandParameter;
d160 2
a161 2
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
d167 1
a167 1
	protected void collectNewChildDescriptors(Collection<CommandParameter> newChildDescriptors, Object object) {
@


1.8
log
@Explicit type casting added for the compatibility with the EMF > 25.1.2007
@
text
@d16 1
d21 1
d62 2
a63 1
	public List getPropertyDescriptors(Object object) {
d92 1
a92 1
					protected Collection getComboBoxObjects(Object object) {
d109 1
d148 1
d167 2
a168 1
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
d178 1
@


1.7
log
@[161201] Restrict ItemPropertyDescriptor.getChoiceOfValues for ElementInitializer related editing in gmfmap.edit
@
text
@d16 1
d92 1
a92 1
									super.getComboBoxObjects(object), (FeatureInitializer)object);
@


1.6
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
@
text
@d22 1
d24 1
a24 1

d27 1
d72 1
a72 1
	 * @@generated
d76 2
a77 2
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
d87 10
a96 1
				 null));
@


1.5
log
@#145522 Use multiline = true property in gmfmap genmodel for body attribute of ValueExpression element
@
text
@d22 2
d77 3
a79 3
				 getString("_UI_FeatureValueSpec_feature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureValueSpec_feature_feature", "_UI_FeatureValueSpec_type"),
				 GMFMapPackage.eINSTANCE.getFeatureValueSpec_Feature(),
d82 1
a82 1
				 false,
d102 1
a102 1
	 * @@generated
d105 18
a122 4
		String label = crop(((FeatureValueSpec)object).getBody());
		return label == null || label.length() == 0 ?
			getString("_UI_FeatureValueSpec_type") :
			getString("_UI_FeatureValueSpec_type") + " " + label;
d134 6
@


1.4
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d103 1
a103 1
		String label = ((FeatureValueSpec)object).getBody();
@


1.3
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d79 2
@


1.2
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d91 1
a91 1
		return getResourceLocator().getImage("full/obj16/FeatureValueSpec");
@


1.1
log
@[rdvorak] #112773 specify init expressions while relating diagram elements with domain
@
text
@a14 1

a15 1

a21 1

@

