head	1.8;
access;
symbols
	v20080813-1520:1.8
	v20080722-1827:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080610-1132:1.7
	v20080528-1052:1.7
	v20080425-1959:1.7
	v20080417-1610:1.7
	v20080322-0000:1.7
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070601-1400:1.6
	v20070520-1200:1.6
	v20070518-1300:1.6
	v20070504-1000:1.5
	v20070427-0600:1.4
	v20070420-1000:1.3
	v20070403-1500:1.3
	v20070330-1300:1.2
	v20060316-0600:1.2
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2008.08.13.13.49.11;	author dstadnik;	state Exp;
branches;
next	1.7;
commitid	440048a2e6554567;

1.7
date	2008.03.03.17.45.10;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	161147cc39254567;

1.6
date	2007.05.10.17.12.28;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	23424643527b4567;

1.5
date	2007.05.03.09.58.58;	author dstadnik;	state Exp;
branches;
next	1.4;
commitid	51da4639b2624567;

1.4
date	2007.04.26.15.39.47;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	38744630c7c34567;

1.3
date	2007.04.03.16.29.19;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	5dfa461280d64567;

1.2
date	2007.03.14.13.00.14;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	12fa45f7f1db4567;

1.1
date	2006.10.19.15.22.02;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[231322] allow to specify editable features
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.mappings.FeatureLabelMapping;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.presentation.FilterUtil;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.mappings.FeatureLabelMapping} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class FeatureLabelMappingItemProvider
	extends LabelMappingItemProvider
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FeatureLabelMappingItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addFeaturesPropertyDescriptor(object);
			addEditableFeaturesPropertyDescriptor(object);
			addViewPatternPropertyDescriptor(object);
			addEditorPatternPropertyDescriptor(object);
			addEditPatternPropertyDescriptor(object);
			addViewMethodPropertyDescriptor(object);
			addEditMethodPropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Features feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addFeaturesPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelMapping_features_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_features_feature", "_UI_FeatureLabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getFeatureLabelMapping_Features(),
				 true,
				 false,
				 true,
				 null,
				 null,
				 null) {
						protected Collection<?> getComboBoxObjects(Object object) {
							@@SuppressWarnings("unchecked")
							Collection<EStructuralFeature> original = (Collection<EStructuralFeature>) super.getComboBoxObjects(object);
							return FilterUtil.filterByContainerMetaclass(original, ((FeatureLabelMapping) object).getMapEntry());
						}
			});
	}

	/**
	 * This adds a property descriptor for the Editable Features feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addEditableFeaturesPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelMapping_editableFeatures_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_editableFeatures_feature", "_UI_FeatureLabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getFeatureLabelMapping_EditableFeatures(),
				 true,
				 false,
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the View Pattern feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addViewPatternPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelMapping_viewPattern_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_viewPattern_feature", "_UI_FeatureLabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getFeatureLabelMapping_ViewPattern(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Editor Pattern feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addEditorPatternPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelMapping_editorPattern_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_editorPattern_feature", "_UI_FeatureLabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getFeatureLabelMapping_EditorPattern(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the View Method feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addViewMethodPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelMapping_viewMethod_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_viewMethod_feature", "_UI_FeatureLabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getFeatureLabelMapping_ViewMethod(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Edit Pattern feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addEditPatternPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelMapping_editPattern_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_editPattern_feature", "_UI_FeatureLabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getFeatureLabelMapping_EditPattern(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Edit Method feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addEditMethodPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelMapping_editMethod_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelMapping_editMethod_feature", "_UI_FeatureLabelMapping_type"),
				 GMFMapPackage.eINSTANCE.getFeatureLabelMapping_EditMethod(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This returns FeatureLabelMapping.gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object getImage(Object object) {
		return overlayImage(object, getResourceLocator().getImage("full/obj16/FeatureLabelMapping"));
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String getText(Object object) {
		FeatureLabelMapping featureLabelMapping = (FeatureLabelMapping)object;
		return getString("_UI_FeatureLabelMapping_type") + " " + featureLabelMapping.isReadOnly();
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(FeatureLabelMapping.class)) {
			case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_PATTERN:
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDITOR_PATTERN:
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN:
			case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD:
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_METHOD:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);
	}

}
@


1.7
log
@regenerated with EMF 2.4M5
@
text
@d65 1
d104 22
@


1.6
log
@avoid java5 warnings
@
text
@a14 1
import org.eclipse.emf.common.util.ResourceLocator;
a269 11
	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public ResourceLocator getResourceLocator() {
		return GMFMapEditPlugin.INSTANCE;
	}

@


1.5
log
@refactor message format parser; introduce editor pattern
@
text
@d16 1
d96 3
a98 1
							return FilterUtil.filterByContainerMetaclass(super.getComboBoxObjects(object), (FeatureLabelMapping) object);
@


1.4
log
@additional methods to produce label text and parse user input
@
text
@d66 2
a68 1
			addEditPatternPropertyDescriptor(object);
d123 22
d246 2
a248 1
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN:
@


1.3
log
@EMF.Edit and editor were regenerated with EMF M6
@
text
@d66 1
d68 1
d122 22
d166 22
d223 1
d225 1
@


1.2
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a14 1

a15 2

import org.eclipse.emf.edit.command.CommandParameter;
a24 1

d185 2
a186 2
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
d192 1
a192 1
	protected void collectNewChildDescriptors(Collection<CommandParameter> newChildDescriptors, Object object) {
@


1.1
log
@[161380] Inroduce label mapping subclasses
@
text
@d18 1
d22 1
d63 2
a64 1
	public List getPropertyDescriptors(Object object) {
d95 1
a95 1
						protected Collection getComboBoxObjects(Object object) {
d151 1
d162 1
d175 1
d195 2
a196 1
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
d206 1
@

