head	1.8;
access;
symbols
	v20080813-1520:1.8
	v20080722-1827:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.4
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080528-1052:1.8
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070614-1400:1.8
	v20070608-1300:1.8
	v20070601-1400:1.8
	v20070520-1200:1.8
	v20070518-1300:1.8
	v20070504-1000:1.7
	v20070427-0600:1.7
	v20070420-1000:1.7
	v20070403-1500:1.7
	v20070330-1300:1.6
	v20060316-0600:1.6
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5
	M1_20:1.5
	v20060904-1500:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060519-1300:1.5
	v20060519-0800:1.5
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2007.05.10.17.12.28;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	23424643527b4567;

1.7
date	2007.04.03.16.29.19;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	5dfa461280d64567;

1.6
date	2007.03.14.13.00.15;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	12fa45f7f1db4567;

1.5
date	2006.05.19.10.11.56;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.26.17.55.01;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.20.14.35.50;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.10.16.56.23;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.23.15.45.39;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.8
log
@avoid java5 warnings
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ItemProviderAdapter;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.NodeReference;
import org.eclipse.gmf.mappings.presentation.FilterUtil;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.mappings.NodeReference} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public abstract class NodeReferenceItemProvider
	extends ItemProviderAdapter
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NodeReferenceItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addContainmentFeaturePropertyDescriptor(object);
			addChildrenFeaturePropertyDescriptor(object);
			addChildPropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Containment Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addContainmentFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_NeedsContainment_containmentFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_NeedsContainment_containmentFeature_feature", "_UI_NeedsContainment_type"),
				 GMFMapPackage.eINSTANCE.getNeedsContainment_ContainmentFeature(),
				 true,
				 null,
				 null,
				 null) {
						protected Collection<?> getComboBoxObjects(Object object) {
							@@SuppressWarnings("unchecked")
							Collection<EReference> original = (Collection<EReference>) super.getComboBoxObjects(object);
							return FilterUtil.filterByContainerMetaclass(original, (NodeReference) object, true);
						}
			});
	}

	/**
	 * This adds a property descriptor for the Children Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addChildrenFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_NodeReference_childrenFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_NodeReference_childrenFeature_feature", "_UI_NodeReference_type"),
				 GMFMapPackage.eINSTANCE.getNodeReference_ChildrenFeature(),
				 true,
				 null,
				 null,
				 null) {
						protected Collection<?> getComboBoxObjects(Object object) {
							@@SuppressWarnings("unchecked")
							Collection<EReference> original = (Collection<EReference>) super.getComboBoxObjects(object);
							return FilterUtil.filterByContainerMetaclass(original, (NodeReference) object, false);
						}
			});
	}

	/**
	 * This adds a property descriptor for the Child feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addChildPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_NodeReference_child_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_NodeReference_child_feature", "_UI_NodeReference_type"),
				 GMFMapPackage.eINSTANCE.getNodeReference_Child(),
				 false,
				 false,
				 false,
				 null,
				 null,
				 null));
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public abstract String getText(Object object);

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void notifyChanged(Notification notification) {
		updateChildren(notification);
		super.notifyChanged(notification);
	}

	/**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);
	}

	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public ResourceLocator getResourceLocator() {
		return GMFMapEditPlugin.INSTANCE;
	}

}
@


1.7
log
@EMF.Edit and editor were regenerated with EMF M6
@
text
@d16 1
d91 3
a93 1
							return FilterUtil.filterByContainerMetaclass(super.getComboBoxObjects(object), (NodeReference) object, true);
d117 3
a119 1
							return FilterUtil.filterByContainerMetaclass(super.getComboBoxObjects(object), (NodeReference) object, false);
@


1.6
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a15 1
import org.eclipse.emf.edit.command.CommandParameter;
d163 2
a164 2
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
d170 1
a170 1
	protected void collectNewChildDescriptors(Collection<CommandParameter> newChildDescriptors, Object object) {
@


1.5
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d16 1
d20 1
d60 2
a61 1
	public List getPropertyDescriptors(Object object) {
d90 1
a90 1
						protected Collection getComboBoxObjects(Object object) {
d114 1
a114 1
						protected Collection getComboBoxObjects(Object object) {
d157 1
d170 2
a171 1
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
d181 1
@


1.4
log
@#119034 Show only valid feature in "containment feature" property of ChildNodeMapping
#138606 hide inappropriate entries in selection dialogs
@
text
@d132 2
@


1.3
log
@#137735 Sort features/attributes/eclasses alphabetically in all EMF editor for .gmfmap
@
text
@d26 1
a26 1
import org.eclipse.gmf.mappings.presentation.EStructuralFeaturesComparator;
d88 1
a88 1
							return EStructuralFeaturesComparator.getSortedList(super.getComboBoxObjects(object), (NodeReference) object);
d112 1
a112 1
							return EStructuralFeaturesComparator.getSortedList(super.getComboBoxObjects(object), (NodeReference) object);
@


1.2
log
@feature is better than operation
@
text
@a14 1

a15 1

d22 1
a23 1

d25 2
d73 1
a73 1
	 * @@generated
d77 1
a77 1
			(createItemPropertyDescriptor
d86 5
a90 1
				 null));
d97 1
a97 1
	 * @@generated
d101 1
a101 1
			(createItemPropertyDescriptor
d110 5
a114 1
				 null));
@


1.1
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d64 1
d110 20
@

