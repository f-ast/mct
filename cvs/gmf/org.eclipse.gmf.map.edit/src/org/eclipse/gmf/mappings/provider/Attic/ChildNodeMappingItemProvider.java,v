head	1.12;
access;
symbols
	v20080813-1520:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	I20060216-1945:1.11
	I20060210-1715:1.11
	I20060209-1815:1.11
	I20060203-0830:1.11
	I20060129-1145:1.11
	I20060127-0900:1.11
	I20060120-1530:1.11
	I20060113-1700:1.11
	M4_10:1.11
	I20060107-1100:1.11
	I20060105-1630:1.11
	I20051230-1230:1.11
	I20051223-1100:1.11
	I20051217-0925:1.10
	I20051208-2000:1.9
	I20051201-1800:1.6
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.12
date	2006.02.23.15.45.39;	author atikhomirov;	state dead;
branches;
next	1.11;

1.11
date	2005.12.20.16.12.06;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.10.14.59.29;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.08.12.30.37;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.07.19.23.19;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.06.22.21.16;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.29.18.33.08;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.25.13.52.48;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.20.14.07.18;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.18.10.58.27;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.26.14.26.24;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.29.10;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.12
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.provider;


import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.mappings.ChildNodeMapping;
import org.eclipse.gmf.mappings.GMFMapPackage;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.mappings.ChildNodeMapping} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class ChildNodeMappingItemProvider
	extends AbstractNodeMappingItemProvider
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ChildNodeMappingItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public List getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addDiagramNodePropertyDescriptor(object);
			addCompartmentPropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Diagram Node feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addDiagramNodePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_ChildNodeMapping_diagramNode_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_ChildNodeMapping_diagramNode_feature", "_UI_ChildNodeMapping_type"),
				 GMFMapPackage.eINSTANCE.getChildNodeMapping_DiagramNode(),
				 true,
				 null,
				 getString("_UI_VisualrepresentationPropertyCategory"),
				 null));
	}

	/**
	 * This adds a property descriptor for the Compartment feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addCompartmentPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_ChildNodeMapping_compartment_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_ChildNodeMapping_compartment_feature", "_UI_ChildNodeMapping_type"),
				 GMFMapPackage.eINSTANCE.getChildNodeMapping_Compartment(),
				 true,
				 null,
				 null,
				 null) {
				protected Collection getComboBoxObjects(Object object) {
					if (object instanceof ChildNodeMapping) {
						ChildNodeMapping mapping = (ChildNodeMapping) object;
						Set compartments = new HashSet(mapping.getParentNode().getCompartmentMappings());
						compartments.add(null);
						return compartments;
					}
					return Collections.EMPTY_LIST;
				}
		});
	}

	/**
	 * This returns ChildNodeMapping.gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object getImage(Object object) {
		return getResourceLocator().getImage("full/obj16/ChildNodeMapping");
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getText(Object object) {
		if (object instanceof ChildNodeMapping) {
			ChildNodeMapping mapping = (ChildNodeMapping) object;
			String result = " <";
			if (mapping.getContainmentFeature() != null) {
				result += mapping.getContainmentFeature().getName();
			}
			result += "/";
			if (mapping.getDiagramNode() != null) {
				result += mapping.getDiagramNode().getName();
			}
			result += ">";
			return getString("_UI_ChildNodeMapping_type") + result;
		}
		return getString("_UI_ChildNodeMapping_type");
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void notifyChangedGen(Notification notification) {
		updateChildren(notification);
		super.notifyChanged(notification);
	}

	public void notifyChanged(Notification notification) {
		switch (notification.getFeatureID(ChildNodeMapping.class)) {
		case GMFMapPackage.CHILD_NODE_MAPPING__CONTAINMENT_FEATURE:
		case GMFMapPackage.CHILD_NODE_MAPPING__DIAGRAM_NODE:
			fireNotifyChanged(new ViewerNotification(notification, null));
		}
		notifyChangedGen(notification);
	}

	/**
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);
	}

	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ResourceLocator getResourceLocator() {
		return GMFMapEditPlugin.INSTANCE;
	}

}
@


1.11
log
@#121565 property categories and simplified names to ease mapping definition.
Some outdated properties removed as well
@
text
@@


1.10
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@d86 1
a86 1
				 null,
@


1.9
log
@Refactoring the code to better support EMF code regeneration.
@
text
@d14 1
d111 3
a113 1
						return new HashSet(mapping.getParentNode().getCompartmentMappings());
@


1.8
log
@#119709
Adding Compartment mapping
@
text
@d155 1
a155 1
	 * @@generated NOT
d157 5
d168 1
a168 2
		updateChildren(notification);
		super.notifyChanged(notification);
@


1.7
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@d11 2
d24 3
d93 1
a93 1
	 * @@generated
d97 1
a97 1
			(createItemPropertyDescriptor
d106 9
a114 1
				 null));
d131 1
a131 1
	 * @@generated
d134 13
d155 1
a155 1
	 * @@generated
d158 5
@


1.6
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d58 1
d65 20
@


1.5
log
@#118053 update models
@
text
@a15 2
import org.eclipse.emf.ecore.EStructuralFeature;

a21 5
import org.eclipse.emf.edit.provider.ItemProviderAdapter;
import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.mappings.ChildNodeMapping;
import org.eclipse.gmf.mappings.GMFMapFactory;
@


1.4
log
@[rdvorak] #112773 specify init expressions while relating diagram elements with domain
@
text
@d38 1
a38 1
	extends ItemProviderAdapter
a65 4
			addDiagramNodePropertyDescriptor(object);
			addDomainChildrenFeaturePropertyDescriptor(object);
			addEditFeaturePropertyDescriptor(object);
			addDomainMetaElementPropertyDescriptor(object);
a90 109
	 * This adds a property descriptor for the Diagram Node feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addDiagramNodePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_ChildNodeMapping_diagramNode_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_ChildNodeMapping_diagramNode_feature", "_UI_ChildNodeMapping_type"),
				 GMFMapPackage.eINSTANCE.getChildNodeMapping_DiagramNode(),
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Domain Children Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addDomainChildrenFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_ChildNodeMapping_domainChildrenFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_ChildNodeMapping_domainChildrenFeature_feature", "_UI_ChildNodeMapping_type"),
				 GMFMapPackage.eINSTANCE.getChildNodeMapping_DomainChildrenFeature(),
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Edit Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addEditFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_ChildNodeMapping_editFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_ChildNodeMapping_editFeature_feature", "_UI_ChildNodeMapping_type"),
				 GMFMapPackage.eINSTANCE.getChildNodeMapping_EditFeature(),
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Domain Meta Element feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addDomainMetaElementPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_ChildNodeMapping_domainMetaElement_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_ChildNodeMapping_domainMetaElement_feature", "_UI_ChildNodeMapping_type"),
				 GMFMapPackage.eINSTANCE.getChildNodeMapping_DomainMetaElement(),
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This specifies how to implement {@@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@@link org.eclipse.emf.edit.command.AddCommand}, {@@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@@link org.eclipse.emf.edit.command.MoveCommand} in {@@link #createCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Collection getChildrenFeatures(Object object) {
		if (childrenFeatures == null) {
			super.getChildrenFeatures(object);
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getChildNodeMapping_DomainSpecialization());
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getChildNodeMapping_DomainInitializer());
		}
		return childrenFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EStructuralFeature getChildFeature(Object object, Object child) {
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

	/**
a118 7

		switch (notification.getFeatureID(ChildNodeMapping.class)) {
			case GMFMapPackage.CHILD_NODE_MAPPING__DOMAIN_SPECIALIZATION:
			case GMFMapPackage.CHILD_NODE_MAPPING__DOMAIN_INITIALIZER:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
				return;
		}
a130 10

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getChildNodeMapping_DomainSpecialization(),
				 GMFMapFactory.eINSTANCE.createConstraint()));

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getChildNodeMapping_DomainInitializer(),
				 GMFMapFactory.eINSTANCE.createFeatureSeqInitializer()));
@


1.3
log
@[rdvorak] #112505 constraint specification in gmfmap
@
text
@d16 2
a67 1
			addConditionalFeaturePropertyDescriptor(object);
a134 20
	 * This adds a property descriptor for the Conditional Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addConditionalFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_ChildNodeMapping_conditionalFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_ChildNodeMapping_conditionalFeature_feature", "_UI_ChildNodeMapping_type"),
				 GMFMapPackage.eINSTANCE.getChildNodeMapping_ConditionalFeature(),
				 true,
				 null,
				 null,
				 null));
	}

	/**
d186 1
d192 12
d235 1
d256 5
@


1.2
log
@[ashatalin] Should be possible to specify editable feature and domain element for child nodes.
@
text
@d23 4
d194 16
d238 6
d256 5
@


1.1
log
@*** empty log message ***
@
text
@d5 1
a5 1
 * $Id: ChildNodeMappingItemProvider.java,v 1.2 2005/08/02 13:11:51 artem Exp $
d63 2
d150 40
@

