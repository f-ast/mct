head	1.27;
access;
symbols
	v20080813-1520:1.27
	v20080722-1827:1.27
	v20080716-1600:1.27
	v20080716-1642:1.27
	R2_1_maintenance:1.27.0.2
	Root_R2_1_maintenance:1.27
	R2_1_0:1.27
	v20080610-1132:1.27
	v20080528-1052:1.27
	v20080425-1959:1.27
	v20080417-1610:1.27
	v20080322-0000:1.27
	v20080222-1200:1.26
	v20070809-0000:1.26
	R2_0_maintenance:1.26.0.2
	R2_0:1.26
	R4_20:1.26
	v20070621-0000:1.26
	RC3_20:1.26
	v20070614-1400:1.26
	v20070608-1300:1.26
	v20070601-1400:1.26
	v20070520-1200:1.26
	v20070518-1300:1.26
	v20070504-1000:1.25
	v20070427-0600:1.25
	v20070420-1000:1.25
	v20070403-1500:1.25
	v20070330-1300:1.24
	v20060316-0600:1.24
	v20070208-1800:1.23
	M4_20:1.23
	v20061214-0000:1.23
	M3_20:1.23
	v20061117-0800:1.23
	v20061013-1330:1.22
	M1_20:1.22
	v20060904-1500:1.22
	v20060713-1700:1.22
	R1_0_maintenance:1.22.0.2
	R1_0:1.22
	v20060627-1200:1.22
	v20060616-1200:1.22
	v20060609-1400:1.21
	v20060531-1730:1.21
	v20060519-1300:1.21
	v20060519-0800:1.21
	v20060512-1000:1.20
	I20060512-1000:1.20
	I20060505-1400:1.20
	I20060428-1300:1.18
	I20060424-0500:1.17
	I20060424-0300:1.17
	M6_10:1.16
	I20060407-1200:1.16
	I20060331-1000:1.16
	I20060324-0300:1.16
	I20060317-1300:1.16
	I20060317-1200:1.16
	I20060316-1300:1.16
	I20060309-1300:1.16
	M5_10:1.16
	S20060303-1600:1.16
	I20060227-1730:1.15
	I20060216-1945:1.12
	I20060210-1715:1.11
	I20060209-1815:1.11
	I20060203-0830:1.11
	I20060129-1145:1.11
	I20060127-0900:1.11
	I20060120-1530:1.11
	I20060113-1700:1.11
	M4_10:1.11
	I20060107-1100:1.9
	I20060105-1630:1.9
	I20051230-1230:1.9
	I20051223-1100:1.9
	I20051217-0925:1.7
	I20051208-2000:1.7
	I20051201-1800:1.6
	I20051124-2000:1.4
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.27
date	2008.03.03.17.45.10;	author atikhomirov;	state Exp;
branches;
next	1.26;
commitid	161147cc39254567;

1.26
date	2007.05.10.17.12.28;	author atikhomirov;	state Exp;
branches;
next	1.25;
commitid	23424643527b4567;

1.25
date	2007.04.03.16.29.19;	author atikhomirov;	state Exp;
branches;
next	1.24;
commitid	5dfa461280d64567;

1.24
date	2007.03.14.13.00.15;	author atikhomirov;	state Exp;
branches;
next	1.23;
commitid	12fa45f7f1db4567;

1.23
date	2006.11.01.12.12.15;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2006.06.12.15.53.55;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.19.10.11.56;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.05.17.11.48;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.02.18.18.30;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.26.17.55.01;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.20.14.35.50;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.02.12.52.53;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.23.15.45.38;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.22.22.01.24;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.17.13.25.51;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.13.18.37.55;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.12.16.05.53;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.10.20.40.13;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.22.17.24.05;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.20.16.12.06;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.06.22.21.16;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.29.18.33.08;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.25.13.52.48;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.24.16.56.19;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.20.14.07.18;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.18.10.58.27;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.29.10;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.27
log
@regenerated with EMF 2.4M5
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.mappings.GMFMapFactory;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.presentation.FilterUtil;
import org.eclipse.gmf.tooldef.CreationTool;
import org.eclipse.gmf.tooldef.GenericTool;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.mappings.LinkMapping} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class LinkMappingItemProvider
	extends MappingEntryItemProvider
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LinkMappingItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addContainmentFeaturePropertyDescriptor(object);
			addContextMenuPropertyDescriptor(object);
			addToolPropertyDescriptor(object);
			addAppearanceStylePropertyDescriptor(object);
			addDiagramLinkPropertyDescriptor(object);
			addSourceMetaFeaturePropertyDescriptor(object);
			addLinkMetaFeaturePropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Context Menu feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addContextMenuPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_MenuOwner_contextMenu_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_MenuOwner_contextMenu_feature", "_UI_MenuOwner_type"),
				 GMFMapPackage.eINSTANCE.getMenuOwner_ContextMenu(),
				 true,
				 false,
				 false,
				 null,
				 getString("_UI_VisualrepresentationPropertyCategory"),
				 null));
	}

	/**
	 * This adds a property descriptor for the Tool feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addToolPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_ToolOwner_tool_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_ToolOwner_tool_feature", "_UI_ToolOwner_type"),
				 GMFMapPackage.eINSTANCE.getToolOwner_Tool(),
				 true,
				 null,
				 getString("_UI_VisualrepresentationPropertyCategory"),
				 null) {
						protected Collection<?> getComboBoxObjects(Object object) {
							return FilterUtil.filterBySuperClasses(super.getComboBoxObjects(object), new Class[] {CreationTool.class, GenericTool.class});
						}
			});
	}

	/**
	 * This adds a property descriptor for the Appearance Style feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addAppearanceStylePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_AppearanceSteward_appearanceStyle_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_AppearanceSteward_appearanceStyle_feature", "_UI_AppearanceSteward_type"),
				 GMFMapPackage.eINSTANCE.getAppearanceSteward_AppearanceStyle(),
				 true,
				 false,
				 false,
				 null,
				 getString("_UI_VisualrepresentationPropertyCategory"),
				 null));
	}

	/**
	 * This adds a property descriptor for the Diagram Link feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addDiagramLinkPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LinkMapping_diagramLink_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LinkMapping_diagramLink_feature", "_UI_LinkMapping_type"),
				 GMFMapPackage.eINSTANCE.getLinkMapping_DiagramLink(),
				 true,
				 null,
				 getString("_UI_VisualrepresentationPropertyCategory"),
				 null) {
						protected Collection<?> getComboBoxObjects(Object object) {
							return FilterUtil.sort(super.getComboBoxObjects(object));
						}
				});
	}

	/**
	 * This adds a property descriptor for the Containment Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addContainmentFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_NeedsContainment_containmentFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_NeedsContainment_containmentFeature_feature", "_UI_NeedsContainment_type"),
				 GMFMapPackage.eINSTANCE.getNeedsContainment_ContainmentFeature(),
				 true,
				 null,
				 getString("_UI_DomainmetainformationPropertyCategory"),
				 null) {
						protected Collection<?> getComboBoxObjects(Object object) {
							@@SuppressWarnings("unchecked")
							Collection<EReference> original = (Collection<EReference>) super.getComboBoxObjects(object);
							return FilterUtil.filterByReferenceType(original, (LinkMapping) object);
						}
				});
	}

	/**
	 * This adds a property descriptor for the Source Meta Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addSourceMetaFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LinkMapping_sourceMetaFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LinkMapping_sourceMetaFeature_feature", "_UI_LinkMapping_type"),
				 GMFMapPackage.eINSTANCE.getLinkMapping_SourceMetaFeature(),
				 true,
				 null,
				 getString("_UI_DomainmetainformationPropertyCategory"),
				 null) {
						protected Collection<?> getComboBoxObjects(Object object) {
							@@SuppressWarnings("unchecked")
							Collection<EStructuralFeature> original = (Collection<EStructuralFeature>) super.getComboBoxObjects(object);
							return FilterUtil.filterByContainerMetaclass(original, (LinkMapping) object);
						}
			});
	}

	/**
	 * This adds a property descriptor for the Link Meta Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addLinkMetaFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LinkMapping_linkMetaFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LinkMapping_linkMetaFeature_feature", "_UI_LinkMapping_type"),
				 GMFMapPackage.eINSTANCE.getLinkMapping_LinkMetaFeature(),
				 true,
				 null,
				 getString("_UI_DomainmetainformationPropertyCategory"),
				 null) {
						protected Collection<?> getComboBoxObjects(Object object) {
							@@SuppressWarnings("unchecked")
							Collection<EStructuralFeature> original = (Collection<EStructuralFeature>) super.getComboBoxObjects(object);
							return FilterUtil.filterByContainerMetaclass(original, (LinkMapping) object);
						}
			});
	}

	/**
	 * This specifies how to implement {@@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@@link org.eclipse.emf.edit.command.AddCommand}, {@@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@@link org.eclipse.emf.edit.command.MoveCommand} in {@@link #createCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Collection<? extends EStructuralFeature> getChildrenFeatures(Object object) {
		if (childrenFeatures == null) {
			super.getChildrenFeatures(object);
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getLinkMapping_CreationConstraints());
		}
		return childrenFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EStructuralFeature getChildFeature(Object object, Object child) {
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

	/**
	 * This returns LinkMapping.gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object getImage(Object object) {
		return overlayImage(object, getResourceLocator().getImage("full/obj16/LinkMapping"));
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getText(Object object) {
		StringBuffer sb = new StringBuffer();
		LinkMapping mapping = (LinkMapping) object;
		sb.append('<');
		if (mapping.getDomainMetaElement() != null) {
			sb.append(mapping.getDomainMetaElement().getName());
		}
		sb.append('{');
		if (mapping.getSourceMetaFeature() != null) {
			sb.append(GMFMapEditPlugin.getFeatureLabel(mapping.getSourceMetaFeature()));
			sb.append('-');
			sb.append('>');
		}
		if (mapping.getLinkMetaFeature() != null) {
			sb.append(GMFMapEditPlugin.getFeatureLabel(mapping.getLinkMetaFeature()));
		}
		sb.append('}');
		sb.append('/');
		if (mapping.getDiagramLink() != null) {
			sb.append(mapping.getDiagramLink().getName());
		}
		sb.append('>');
		return getString("_UI_LinkMapping_type") + ' ' + sb;
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(LinkMapping.class)) {
			case GMFMapPackage.LINK_MAPPING__CREATION_CONSTRAINTS:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getLinkMapping_CreationConstraints(),
				 GMFMapFactory.eINSTANCE.createLinkConstraints()));
	}

}
@


1.26
log
@avoid java5 warnings
@
text
@a14 1
import org.eclipse.emf.common.util.ResourceLocator;
a356 11
	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public ResourceLocator getResourceLocator() {
		return GMFMapEditPlugin.INSTANCE;
	}

@


1.25
log
@EMF.Edit and editor were regenerated with EMF M6
@
text
@d16 1
d191 3
a193 1
							return FilterUtil.filterByReferenceType(super.getComboBoxObjects(object), (LinkMapping) object);
d217 3
a219 1
							return FilterUtil.filterByContainerMetaclass(super.getComboBoxObjects(object), (LinkMapping) object);
d243 3
a245 1
							return FilterUtil.filterByContainerMetaclass(super.getComboBoxObjects(object), (LinkMapping) object);
@


1.24
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a16 1
import org.eclipse.emf.edit.command.CommandParameter;
d335 2
a336 2
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
d342 1
a342 1
	protected void collectNewChildDescriptors(Collection<CommandParameter> newChildDescriptors, Object object) {
@


1.23
log
@[163045] Provide a better distinguishable Mapping labels in .gmfmap editor
@
text
@d16 2
d21 1
d64 2
a65 1
	public List getPropertyDescriptors(Object object) {
d120 1
a120 1
						protected Collection getComboBoxObjects(Object object) {
d166 1
a166 1
						protected Collection getComboBoxObjects(Object object) {
d190 1
a190 1
						protected Collection getComboBoxObjects(Object object) {
d214 1
a214 1
						protected Collection getComboBoxObjects(Object object) {
d238 1
a238 1
						protected Collection getComboBoxObjects(Object object) {
d252 2
a253 1
	public Collection getChildrenFeatures(Object object) {
d262 13
d280 1
d323 1
d342 2
a343 1
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
d358 1
@


1.22
log
@#144197 [gmfmap] Only creation and custom tools should be available in dropdown menu of the node and link mapping Tool property
@
text
@d270 1
a270 1
	 * @@generated
d273 22
a294 1
		return getString("_UI_LinkMapping_type");
@


1.21
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d28 2
d117 1
a117 1
							return FilterUtil.sort(super.getComboBoxObjects(object));
@


1.20
log
@Regenerating plugin from EMF genmodel.
@
text
@d89 2
d135 2
@


1.19
log
@mark modified method as generated NOT
@
text
@d173 2
a174 2
				 getString("_UI_MappingEntry_containmentFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_MappingEntry_containmentFeature_feature", "_UI_MappingEntry_type"),
@


1.18
log
@#119034 Show only valid feature in "containment feature" property of ChildNodeMapping
#138606 hide inappropriate entries in selection dialogs
@
text
@d142 1
a142 1
	 * @@generated
@


1.17
log
@#137735 Sort features/attributes/eclasses alphabetically in all EMF editor for .gmfmap
@
text
@d27 1
a27 2
import org.eclipse.gmf.mappings.presentation.EStructuralFeaturesComparator;
import org.eclipse.gmf.mappings.presentation.ScopeUtil;
d98 1
a98 1
	 * @@generated
d102 1
a102 1
			(createItemPropertyDescriptor
d111 5
a115 1
				 null));
d146 1
a146 1
			(createItemPropertyDescriptor
d155 5
a159 1
				 null));
d181 1
a181 6
							ScopeUtil scopeUtil = new ScopeUtil((LinkMapping) object);
							if (scopeUtil.isDevisable()) {
								return scopeUtil.getPossibleContainments();
							} else {
								return super.getComboBoxObjects(object);
							}
d205 1
a205 1
							return EStructuralFeaturesComparator.getSortedList(super.getComboBoxObjects(object), (LinkMapping) object);
d229 1
a229 1
							return EStructuralFeaturesComparator.getSortedList(super.getComboBoxObjects(object), (LinkMapping) object);
@


1.16
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d27 1
d188 1
a188 1
	 * @@generated
d192 1
a192 1
			(createItemPropertyDescriptor
d201 5
a205 1
				 null));
d212 1
a212 1
	 * @@generated
d216 1
a216 1
			(createItemPropertyDescriptor
d225 5
a229 1
				 null));
@


1.15
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d246 1
a246 1
		return getResourceLocator().getImage("full/obj16/LinkMapping");
@


1.14
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@d63 1
d167 1
a167 1
				 GMFMapPackage.eINSTANCE.getMappingEntry_ContainmentFeature(),
@


1.13
log
@allow to specify no edit feature
@
text
@a9 1
import java.util.ArrayList;
a10 1
import java.util.Collections;
a15 2
import org.eclipse.emf.ecore.EStructuralFeature;

a66 2
			addLabelEditFeaturePropertyDescriptor(object);
			addLabelDisplayFeaturePropertyDescriptor(object);
a182 53
	 * This adds a property descriptor for the Label Edit Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	protected void addLabelEditFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LinkMapping_labelEditFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LinkMapping_labelEditFeature_feature", "_UI_LinkMapping_type"),
				 GMFMapPackage.eINSTANCE.getLinkMapping_LabelEditFeature(),
				 true,
				 null,
				 getString("_UI_DomainmetainformationPropertyCategory"),
				 null) {
						protected Collection getComboBoxObjects(Object object) {
							if (object instanceof LinkMapping) {
								List result = new ArrayList();
								LinkMapping nm = (LinkMapping) object;
								if (nm.getDomainMetaElement() != null) {
									result.addAll(nm.getDomainMetaElement().getEAllAttributes());
								}
								result.add(null);
								return result;
							}
							return Collections.EMPTY_LIST;
						}
					});
	}

	/**
	 * This adds a property descriptor for the Label Display Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addLabelDisplayFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LinkMapping_labelDisplayFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LinkMapping_labelDisplayFeature_feature", "_UI_LinkMapping_type"),
				 GMFMapPackage.eINSTANCE.getLinkMapping_LabelDisplayFeature(),
				 true,
				 null,
				 getString("_UI_DomainmetainformationPropertyCategory"),
				 null));
	}

	/**
a232 1
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getLinkMapping_LabelMappings());
a238 12
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EStructuralFeature getChildFeature(Object object, Object child) {
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

	/**
a268 1
			case GMFMapPackage.LINK_MAPPING__LABEL_MAPPINGS:
a287 5
				(GMFMapPackage.eINSTANCE.getLinkMapping_LabelMappings(),
				 GMFMapFactory.eINSTANCE.createLinkLabelMapping()));

		newChildDescriptors.add
			(createChildParameter
@


1.12
log
@#127461 Support multiple labels definition in the mapping model
@
text
@d10 1
d208 1
d211 1
a211 1
									return nm.getDomainMetaElement().getEAllAttributes();
d213 2
@


1.11
log
@#123590 inherited containment features for linkMappings, refactoring
@
text
@d17 2
d288 1
d295 12
d337 1
d357 5
@


1.10
log
@#114197 - tooling definition in place
@
text
@a11 2
import java.util.HashSet;
import java.util.Iterator;
a12 1
import java.util.Set;
a16 1
import org.eclipse.emf.ecore.EReference;
d28 1
d175 5
a179 15
							if (object instanceof LinkMapping) {
								LinkMapping nm = (LinkMapping) object;
								if (nm.getDomainMetaElement() != null) {
									Set features = new HashSet();
									for (Iterator it = nm.getDomainMetaElement().getEPackage().eAllContents(); it.hasNext(); ) {
										Object next = it.next();
										if (next instanceof EReference) {
											EReference ref = (EReference) next;
											if (ref.isContainment() && nm.getDomainMetaElement().equals(ref.getEType())) {
												features.add(ref);
											}
										}
									}
									return features;
								}
a180 1
							return Collections.EMPTY_LIST;
@


1.9
log
@#115461 provide source feature in mapping
@
text
@a20 1
import org.eclipse.emf.ecore.EStructuralFeature;
d67 3
a70 2
			addDomainMetaElementPropertyDescriptor(object);
			addContainmentFeaturePropertyDescriptor(object);
d80 41
a120 1
	 * This adds a property descriptor for the Diagram Link feature.
d125 1
a125 1
	protected void addDiagramLinkPropertyDescriptor(Object object) {
d130 3
a132 3
				 getString("_UI_LinkMapping_diagramLink_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LinkMapping_diagramLink_feature", "_UI_LinkMapping_type"),
				 GMFMapPackage.eINSTANCE.getLinkMapping_DiagramLink(),
d140 1
a140 1
	 * This adds a property descriptor for the Domain Meta Element feature.
d145 1
a145 1
	protected void addDomainMetaElementPropertyDescriptor(Object object) {
d150 3
a152 3
				 getString("_UI_LinkMapping_domainMetaElement_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LinkMapping_domainMetaElement_feature", "_UI_LinkMapping_type"),
				 GMFMapPackage.eINSTANCE.getLinkMapping_DomainMetaElement(),
d155 1
a155 1
				 getString("_UI_DomainmetainformationPropertyCategory"),
d170 3
a172 3
				 getString("_UI_LinkMapping_containmentFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LinkMapping_containmentFeature_feature", "_UI_LinkMapping_type"),
				 GMFMapPackage.eINSTANCE.getLinkMapping_ContainmentFeature(),
a299 2
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getLinkMapping_DomainSpecialization());
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getLinkMapping_DomainInitializer());
a300 1
			childrenFeatures.add(GMFMapPackage.eINSTANCE.getLinkMapping_Tool());
a305 12
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EStructuralFeature getChildFeature(Object object, Object child) {
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

	/**
a335 2
			case GMFMapPackage.LINK_MAPPING__DOMAIN_SPECIALIZATION:
			case GMFMapPackage.LINK_MAPPING__DOMAIN_INITIALIZER:
a336 1
			case GMFMapPackage.LINK_MAPPING__TOOL:
a354 10
				(GMFMapPackage.eINSTANCE.getLinkMapping_DomainSpecialization(),
				 GMFMapFactory.eINSTANCE.createConstraint()));

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getLinkMapping_DomainInitializer(),
				 GMFMapFactory.eINSTANCE.createFeatureSeqInitializer()));

		newChildDescriptors.add
			(createChildParameter
a356 10

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getLinkMapping_Tool(),
				 GMFMapFactory.eINSTANCE.createCreationTool()));

		newChildDescriptors.add
			(createChildParameter
				(GMFMapPackage.eINSTANCE.getLinkMapping_Tool(),
				 GMFMapFactory.eINSTANCE.createNewActionTool()));
@


1.8
log
@#121565 property categories and simplified names to ease mapping definition.
Some outdated properties removed as well
@
text
@d73 1
d210 20
@


1.7
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@d94 1
a94 1
				 null,
d114 1
a114 1
				 null,
d134 1
a134 1
				 null,
d174 1
a174 1
				 null,
d204 1
a204 1
				 null,
d224 1
a224 1
				 null,
@


1.6
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d242 1
d293 1
d324 10
@


1.5
log
@#118053 update models
@
text
@a21 1

a29 1

a31 1

d241 1
d291 1
d317 5
@


1.4
log
@constraint property values
@
text
@d219 1
a219 1
			(new ItemPropertyDescriptor
d228 1
a228 21
				 null) {
						protected Collection getComboBoxObjects(Object object) {
							if (object instanceof LinkMapping) {
								LinkMapping nm = (LinkMapping) object;
								if (nm.getDomainMetaElement() != null) {
									Set features = new HashSet();
									for (Iterator it = nm.getDomainMetaElement().getEPackage().eAllContents(); it.hasNext(); ) {
										Object next = it.next();
										if (next instanceof EReference) {
											EReference ref = (EReference) next;
											if (!ref.isContainment()) {
												features.add(ref);
											}
										}
									}
									return features;
								}
							}
							return Collections.EMPTY_LIST;
						}
				});
@


1.3
log
@[rdvorak] #112773 specify init expressions while relating diagram elements with domain
@
text
@d11 3
d15 1
d20 1
d29 1
d125 1
a125 1
	 * @@generated
d129 1
a129 1
			(createItemPropertyDescriptor
d138 21
a158 1
				 null));
d165 1
a165 1
	 * @@generated
d169 1
a169 1
			(createItemPropertyDescriptor
d178 11
a188 1
				 null));
d219 1
a219 1
			(createItemPropertyDescriptor
d228 21
a248 1
				 null));
@


1.2
log
@[rdvorak] #112505 constraint specification in gmfmap
@
text
@d16 2
d207 1
d213 12
d256 1
d277 5
@


1.1
log
@*** empty log message ***
@
text
@d5 1
a5 1
 * $Id: LinkMappingItemProvider.java,v 1.4 2005/08/02 13:11:51 artem Exp $
d22 3
d27 2
d194 16
d238 6
d256 5
@

