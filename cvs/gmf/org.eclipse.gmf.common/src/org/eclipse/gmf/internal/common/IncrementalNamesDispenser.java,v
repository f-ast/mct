head	1.2;
access;
symbols
	v20081015-1925:1.2
	v20080930-1130:1.2
	v20080926-1245:1.2
	v20080924-1925:1.2
	v20080722-1827:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080521:1.2
	v20080516-1143:1.2
	v20080508-2000:1.2
	v20080417-1610:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20071108-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070520-1200:1.2
	v20070518-1300:1.2
	v20070427-0600:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20070307-0700:1.2
	v20070301-1200:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	v20060925-1700:1.1
	v20060919-0800:1.1
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2006.08.30.15.09.09;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.26.14.23.18;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@avoid 'unchecked' warnings
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.common;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

/**
 * Names dispenser that generates unique names by appending
 * ascending numbers to the semantic part.
 * 
 * @@author dstadnik
 */
public class IncrementalNamesDispenser extends AbstractNamesDispenser {

	private Set<String> namesPool = new HashSet<String>();

	private int initialIndex;

	public IncrementalNamesDispenser() {
		initialIndex = 2;
	}

	public IncrementalNamesDispenser(int initialIndex) {
		this.initialIndex = initialIndex;
	}

	protected final Collection<String> getNamesPool() {
		return namesPool;
	}

	public String get(String prefixPart, String semanticPart, String suffixPart) {
		String name = composeName(prefixPart, semanticPart, suffixPart);
		if (!contains(name)) {
			add(name);
			return name;
		}
		for (int i = initialIndex; i <= Integer.MAX_VALUE; i++) {
			name = composeName(prefixPart, semanticPart + i, suffixPart);
			if (!contains(name)) {
				add(name);
				return name;
			}
		}
		throw new IllegalStateException();
	}
}
@


1.1
log
@not ready for API, internal for now
@
text
@d26 1
a26 1
	private Set namesPool = new HashSet();
d38 1
a38 1
	protected final Collection getNamesPool() {
@

