head	1.5;
access;
symbols
	v20081015-1925:1.5
	v20080930-1130:1.5
	v20080926-1245:1.5
	v20080924-1925:1.5
	v20080722-1827:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080610-1132:1.5
	v20080521:1.5
	v20080516-1143:1.5
	v20080508-2000:1.5
	v20080417-1610:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20071108-0000:1.5
	v20070903-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070520-1200:1.5
	v20070518-1300:1.5
	v20070427-0600:1.5
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20070307-0700:1.3
	v20070301-1200:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.2
	M1_20:1.2
	v20060904-1500:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2007.04.25.14.38.17;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	5777462f67d94567;

1.4
date	2007.04.25.11.27.36;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	7f9e462f3b274567;

1.3
date	2006.11.15.15.13.24;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	6bc4455b2e934567;

1.2
date	2006.09.04.14.46.12;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.01.16.03.18;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[146774] merge for manifest.mf
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.common.codegen;

import org.eclipse.emf.codegen.merge.java.JControlModel;
import org.eclipse.emf.codegen.merge.java.JMerger;
import org.eclipse.emf.codegen.merge.properties.PropertyMerger;

/**
 * @@author artem
 */
public class DefaultTextMerger extends TextMerger {
	protected static final String TAG = "gmf generator persistent region"; //$NON-NLS-1$

	protected static final String BEGIN_TAG = TAG + " begin"; //$NON-NLS-1$

	protected static final String END_TAG = TAG + " end"; //$NON-NLS-1$

	private final JControlModel myControlModel;

	private final TaggedTextMerger myXmlMerger;

	private final PluginXMLTextMerger myPluginXmlMerger;

	private final ManifestFileMerge myManifestMerge;

	public DefaultTextMerger(JControlModel jModel) {
		assert jModel != null;
		myControlModel = jModel;
		myXmlMerger = new TaggedTextMerger("<!-- " + BEGIN_TAG + " -->", "<!-- " + END_TAG + " -->");
		myPluginXmlMerger = new PluginXMLTextMerger("gmfgen", "generated", "true");
		myManifestMerge = new ManifestFileMerge();
	}

	@@Override
	public String mergeJava(String oldText, String newText) {
		if (getJControlModel() == null || !getJControlModel().canMerge()) {
			return super.mergeJava(oldText, newText);
		}
		JMerger jMerge = new JMerger(getJControlModel());
		jMerge.setSourceCompilationUnit(jMerge.createCompilationUnitForContents(newText));
		jMerge.setTargetCompilationUnit(jMerge.createCompilationUnitForContents(oldText));
		jMerge.merge();
		return jMerge.getTargetCompilationUnitContents();
	}

	@@Override
	public String mergeProperties(String oldText, String newText) {
        PropertyMerger propertyMerger = new PropertyMerger();
        propertyMerger.setSourceProperties(newText);
        propertyMerger.setTargetProperties(oldText);
        propertyMerger.merge();
        return propertyMerger.getTargetProperties();
	}

	@@Override
	public String mergeXML(String oldText, String newText) {
		return myXmlMerger.process(oldText, newText);
	}

	@@Override
	public String mergePluginXML(String oldText, String newText) {
		if (myPluginXmlMerger.isRecognizedDocument(oldText)) {
			return myPluginXmlMerger.process(oldText, newText);
		}
		return mergeXML(oldText, newText);
	}

	@@Override
	public String mergeManifestMF(String oldText, String newText) {
		return myManifestMerge.process(oldText, newText);
	}

	private JControlModel getJControlModel() {
		return myControlModel;
	}
}
@


1.4
log
@moving towards 146774 - merge for manifest.mf
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
d34 2
d41 1
d78 5
@


1.3
log
@turn plugin.xml merging on, preceding mechanism of protected regions removed
@
text
@d64 5
d72 1
a72 1
		return myXmlMerger.process(oldText, newText);
@


1.2
log
@misplaced source and target text for merge
@
text
@d32 2
d38 1
d64 3
@


1.1
log
@refactoring: abstract use of JMerge for merging away from generator services (GeneratorBase)
@
text
@d44 2
a45 2
		jMerge.setSourceCompilationUnit(jMerge.createCompilationUnitForContents(oldText));
		jMerge.setTargetCompilationUnit(jMerge.createCompilationUnitForContents(newText));
@

