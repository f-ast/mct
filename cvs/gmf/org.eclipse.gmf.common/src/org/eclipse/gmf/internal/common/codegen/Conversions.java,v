head	1.3;
access;
symbols
	v20081015-1925:1.3
	v20080930-1130:1.3
	v20080926-1245:1.3
	v20080924-1925:1.3
	v20080722-1827:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080521:1.3
	v20080516-1143:1.3
	v20080508-2000:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20071108-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070520-1200:1.2
	v20070518-1300:1.2
	v20070427-0600:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20070307-0700:1.2
	v20070301-1200:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1;
locks; strict;
comment	@# @;


1.3
date	2007.06.21.14.13.35;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	1e3f467a878e4567;

1.2
date	2006.08.25.16.36.50;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.14.13.56.43;	author radvorak;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.14;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.3
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *    Radek Dvorak (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.common.codegen;

/**
 * Utility class for converting data values for various purposes.
 */
public class Conversions {
	// no instances
	private Conversions() {
	}

	/**
	 * Escapes the xml markup characters in the input text
	 * 
	 * @@param text
	 *            the string to be escaped
	 * @@return escaped string or empty string if the input text is
	 *         <code>null</code>
	 */
	public static String escapeXML(String text) {
		if (text == null) {
			text = ""; //$NON-NLS-1$
		}
		StringBuffer result = new StringBuffer();
		for (int i = 0; i < text.length(); i++) {
			char ch = text.charAt(i);
			if (ch == '<') {
				result.append("&lt;");
			} else if (ch == '>') {
				result.append("&gt;");
			} else if (ch == '&') {
				result.append("&amp;");
			} else if (ch == '\'') {
				result.append("&apos;");
			} else if (ch == '"') {
				result.append("&quot;");
			} else {
				result.append(ch);
			}
		}
		return result.toString();
	}

	/**
	 * Returns valid String literal for the given <code>String</code> as it
	 * should appear in java source code.
	 * </p>
	 * Each of its characters will appear in the same form as if it was the
	 * argument to {@@link #toCharLiteral}.
	 * 
	 * @@param strValue
	 *            a string which is the input for the convertsion
	 * @@return converted string literal eclosed with quation marks or "null"
	 *         string literal in case the <code>strValue</code> is
	 *         <code>null</code>
	 */
	public static String toStringLiteral(String strValue) {
		if (strValue == null)
			return "null";
		int len = strValue.length();
		StringBuffer result = new StringBuffer(len + 16);
		result.append('\"');
		for (int i = 0; i < len; i++) {
			result.append(escapeChar(strValue.charAt(i)));
		}
		result.append('\"');
		return result.toString();
	}

	private static String escapeChar(char c) {
		if (c == '\b')
			return "\\b";
		if (c == '\t')
			return "\\t";
		if (c == '\n')
			return "\\n";
		if (c == '\f')
			return "\\f";
		if (c == '\r')
			return "\\r";
		if (c == '\"')
			return "\\\"";
		if (c == '\'')
			return "\\\'";
		if (c == '\\')
			return "\\\\";
		if (c >= 32 && c < 127)
			return String.valueOf(c);

		// escaped unicode form
		String num = Integer.toHexString(c);
		switch (num.length()) {
		case 1:
			return "\\u000" + num;
		case 2:
			return "\\u00" + num;
		case 3:
			return "\\u0" + num;
		}
		return "\\u" + num;
	}

	public static String escapeUnicode(String text) {
		StringBuffer result = new StringBuffer(text.length());
		for (int i = 0, size = text.length(); i < size; ++i) {
			char character = text.charAt(i);
			if (character > '\u00ff') {
				result.append("\\u");
				String hex = Integer.toString(character, 16);
				for (int j = hex.length(); j < 4; ++j) {
					result.append("0");
				}
				result.append(hex);
			} else {
				result.append(character);
			}
		}

		return result.toString();
	}
}
@


1.2
log
@minor refactoring
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
@


1.1
log
@#140401 Escape all String literals in the generated code according to java rules, escape strings used  in plugins.xml
@
text
@d19 1
a19 1
	private Conversions() {		
d21 1
a21 1
	 
d30 1
a30 1
    public static String escapeXML(String text) {
d34 1
a34 1
    	StringBuffer result = new StringBuffer();		
d46 1
a46 1
				result.append("&quot;");				
d52 2
a53 2
	} 	
	
d55 5
a59 3
	 * Returns valid String literal for the given <code>String</code> as it should appear in java source code.</p>
	 * Each of its characters will appear in the same form as if it was the argument
	 * to {@@link #toCharLiteral}.
d63 3
a65 2
	 * @@return converted string literal eclosed with quation marks or "null" string literal in case the
	 *         <code>strValue</code> is <code>null</code>
d112 19
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@


