head	1.3;
access;
symbols
	v20081015-1925:1.3
	v20080924-1925:1.3
	v20061013-1330:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.1
	I20060209-1815:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.11.06.18.14.15;	author atikhomirov;	state dead;
branches;
next	1.2;

1.2
date	2006.02.16.19.09.39;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.06.22.21.43;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@removed code that is no longer used
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.dispatch;

import java.text.MessageFormat;

/**
 * Treat key as (part of) template path to allow <%=dispatcher.dispatch("../AnotherTemplate.javajet")%> use
 * Note, braces (<em>{</em> or <em>}</em>) within keys should be escaped, see {@@link MessageFormat} class for details  
 * @@author artem
 */
public class DynamicTemplateRegistry implements TemplateRegistry {
	private final String myPattern;
	private ClassLoader myClassLoader;

	/**
	 * Uses simple pattern <code>"{0}"</code> (i.e. leave key as is) to initialize instance. 
	 */
	public DynamicTemplateRegistry(ClassLoader classLoader) {
		this("{0}", classLoader);
	}

	/**
	 * Allows to add some prefix/suffix to the value of passed key. E.g. <code>"/templates-new/{0}.javajet"</code>
	 * @@param pattern string to pass to {@@link MessageFormat}
	 */
	public DynamicTemplateRegistry(String pattern, ClassLoader classLoader) {
		myPattern = pattern;
		myClassLoader = classLoader;
	}

	/**
	 * Treats key as (part of) template path
	 */
	public String getTemplatePath(Object key) {
		return MessageFormat.format(myPattern, new Object[] { key });
	}
	
	/**
	 * Return classloader of the key or own classloader if key is null
	 */
	public ClassLoader getTemplateClassLoader(Object key) {
		return myClassLoader;
	}

	/**
	 * @@return always false
	 */
	public boolean hasGeneratorClass(Object key) {
		return false;
	}

	/**
	 * @@return always <code>null</code>
	 */
	public Class getGeneratorClass(Object key) {
		return null;
	}

	/**
	 * NO-OP
	 */
	public void clean() {
	}
}
@


1.2
log
@#125175
- Do not cache templates if dynamicTemplates == true
- template classLoader could be specified if using dynamicTemplates
@
text
@@


1.1
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@d23 1
d28 2
a29 2
	public DynamicTemplateRegistry() {
		this("{0}");
d36 1
a36 1
	public DynamicTemplateRegistry(String pattern) {
d38 1
d47 7
@

