head	1.20;
access;
symbols
	v20081015-1925:1.20
	v20080930-1130:1.20
	v20080926-1245:1.20
	v20080924-1925:1.20
	v20080722-1827:1.20
	v20080716-1642:1.20
	R2_1_maintenance:1.19.0.2
	Root_R2_1_maintenance:1.19
	R2_1_0:1.19
	v20080610-1132:1.19
	v20080521:1.19
	v20080516-1143:1.19
	v20080508-2000:1.19
	v20080417-1610:1.19
	v20080322-0000:1.19
	v20080222-1200:1.18
	v20071108-0000:1.18
	v20070903-0000:1.18
	v20070809-0000:1.17
	R2_0_maintenance:1.17.0.2
	R2_0:1.17
	R4_20:1.17
	v20070621-0000:1.17
	RC3_20:1.17
	v20070605-1400:1.17
	v20070601-1400:1.17
	v20070525-1500:1.17
	v20070520-1200:1.17
	v20070518-1300:1.17
	v20070427-0600:1.17
	v20070420-1000:1.17
	v20070413-1300:1.16
	v20070405-1100:1.16
	v20070330-1300:1.16
	v20060330-1300:1.16
	v20070322-1100:1.16
	v20070307-0700:1.16
	v20070301-1200:1.16
	v20070228-2000:1.16
	v20070221-1500:1.16
	v20070208-1800:1.16
	M4_20:1.15
	v20061222-1800:1.15
	v20061214-0000:1.15
	v20061120-1300:1.14
	M3_20:1.14
	v20061117-0800:1.14
	v20061013-1330:1.13
	M1_20:1.2
	v20060904-1500:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.20
date	2008.07.10.12.29.46;	author ashatalin;	state Exp;
branches;
next	1.19;
commitid	7c44487600b94567;

1.19
date	2008.03.06.12.46.30;	author atikhomirov;	state Exp;
branches;
next	1.18;
commitid	7e5a47cfe7a54567;

1.18
date	2007.07.24.17.26.43;	author dstadnik;	state Exp;
branches;
next	1.17;
commitid	531d46a636534567;

1.17
date	2007.04.18.12.29.17;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	777d46260f1d4567;

1.16
date	2007.01.25.19.16.14;	author atikhomirov;	state Exp;
branches;
next	1.15;
commitid	327f45b901fd4567;

1.15
date	2006.11.28.16.14.03;	author dstadnik;	state Exp;
branches;
next	1.14;
commitid	362a456c604b4567;

1.14
date	2006.10.20.17.53.54;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.22.18.30.15;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.22.17.19.30;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.21.15.51.21;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.21.15.28.59;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.21.12.32.10;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.21.12.06.12;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.09.21.11.40.30;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.19.14.46.33;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.11.12.07.54;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.07.17.41.01;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.07.16.39.31;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.29.10.09.10;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.28.13.18.06;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.20
log
@[217307] - "Add extension model" action: impossible use for additing nondeployed models
@
text
@/*
 * Copyright (c) 2006, 2008 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.common.ui;

import java.io.IOException;
import java.util.Collections;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.emf.common.ui.dialogs.WorkspaceResourceDialog;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.ContentHandler;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.osgi.util.NLS;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;

/**
 * @@author dstadnik
 */
public class ModelSelectionPage extends WizardPage {

	protected final ResourceLocationProvider rloc;

	protected Text uriFld;

	private int settingUriFld; // flag to ignore modifyText notification when setting uri field value

	protected Button loadBtn;

	private Button browseFsBtn;

	private Button browseWsBtn;

	private Button findInWsBtn;

	private URI uri;

	private Resource resource;

	private ResourceSet resourceSet;

	private boolean readOnly;

	private boolean modelRequired;

	private boolean initialized;

	private String modelFileExtension;

	public ModelSelectionPage(String pageId, ResourceLocationProvider rloc, ResourceSet resourceSet) {
		this(pageId, rloc, resourceSet, null);
	}

	public ModelSelectionPage(String pageId, ResourceLocationProvider rloc, ResourceSet resourceSet, String modelFileExtension) {
		super(pageId);
		this.rloc = rloc;
		this.resourceSet = resourceSet;
		setModelFileExtension(modelFileExtension);
	}

	protected final ResourceSet getResourceSet() {
		if (resourceSet == null) {
			resourceSet = new ResourceSetImpl();
		}
		return resourceSet;
	}

	public void setModelFileExtension(String fileExtension) {
		this.modelFileExtension = fileExtension;
	}

	/**
	 * @@return <code>null</code> if none set
	 */
	protected String getModelFileExtension() {
		return modelFileExtension;
	}

	public final void createControl(Composite parent) {
		Composite plate = new Composite(parent, SWT.NONE);
		{
			GridLayout layout = new GridLayout();
			plate.setLayout(layout);

			GridData data = new GridData();
			data.verticalAlignment = GridData.FILL;
			data.horizontalAlignment = GridData.FILL;
			data.grabExcessHorizontalSpace = true;
			plate.setLayoutData(data);
		}
		createTitleAndButtonsRow(plate);
		createUriRow(plate);
		createAdditionalControls(plate);
		setControl(plate);
	}

	protected void createTitleAndButtonsRow(Composite parent) {
		Composite plate = new Composite(parent, SWT.NONE);
		{
			GridLayout layout = new GridLayout();
			layout.numColumns = 4;
			plate.setLayout(layout);

			plate.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
		}
		Label label = new Label(plate, SWT.NONE);
		label.setText(Messages.ModelSelectionPageModelURI);
		label.setLayoutData(new GridData());

		browseFsBtn = new Button(plate, SWT.PUSH);
		browseFsBtn.setText(Messages.ModelSelectionPageBrowseFS);
		browseFsBtn.setLayoutData(new GridData(SWT.END, SWT.CENTER, true, false));

		browseWsBtn = new Button(plate, SWT.PUSH);
		browseWsBtn.setText(Messages.ModelSelectionPageBrowseWS);
		browseWsBtn.setLayoutData(new GridData());

		findInWsBtn = new Button(plate, SWT.PUSH);
		findInWsBtn.setText(Messages.ModelSelectionPageFindInWS);
		findInWsBtn.setLayoutData(new GridData());

		// logic

		browseFsBtn.addSelectionListener(new SelectionListener() {

			public void widgetDefaultSelected(SelectionEvent e) {
			}

			public void widgetSelected(SelectionEvent e) {
				FileDialog fd = new FileDialog(getShell(), SWT.OPEN);
				fd.setText(Messages.ModelSelectionPageSelectModel);
				String fileName = fd.open();
				if (fileName == null) {
					return;
				}
				setURI(URI.createFileURI(fileName));
				updateURI();
			};
		});
		browseWsBtn.addSelectionListener(new SelectionListener() {

			public void widgetDefaultSelected(SelectionEvent e) {
			}

			public void widgetSelected(SelectionEvent e) {
				ViewerFilter extFilter = new ViewerFilter() {

					public boolean select(Viewer viewer, Object parentElement, Object element) {
						String ext = getModelFileExtension();
						if (ext != null && element instanceof IFile) {
							IFile file = (IFile) element;
							return ext.equals(file.getFileExtension());
						}
						return true;
					}
				};
				IFile[] files = WorkspaceResourceDialog.openFileSelection(getShell(), Messages.ModelSelectionPageSelectModel, Messages.ModelSelectionPageSelectModelDesc, false, null, Collections
						.singletonList(extFilter));
				if (files == null || files.length == 0) {
					return;
				}
				setURI(URI.createPlatformResourceURI(files[0].getFullPath().toString(), true));
				updateURI();
			}
		});
		findInWsBtn.addSelectionListener(new SelectionListener() {

			public void widgetDefaultSelected(SelectionEvent e) {
			}

			public void widgetSelected(SelectionEvent e) {
				IFile file = FileSelector.selectFile(getShell(), Messages.ModelSelectionPageSelectModel, null, null, getModelFileExtension());
				if (file == null) {
					return;
				}
				setURI(URI.createPlatformResourceURI(file.getFullPath().toString(), true));
				updateURI();
			};
		});
	}

	protected void createUriRow(Composite parent) {
		Composite plate = new Composite(parent, SWT.NONE);
		{
			GridLayout layout = new GridLayout();
			layout.numColumns = 2;
			plate.setLayout(layout);

			GridData data = new GridData();
			data.horizontalAlignment = GridData.FILL;
			data.grabExcessHorizontalSpace = true;
			plate.setLayoutData(data);
		}
		uriFld = new Text(plate, SWT.SINGLE | SWT.BORDER);
		{
			GridData data = new GridData();
			data.horizontalAlignment = GridData.FILL;
			data.grabExcessHorizontalSpace = true;
			uriFld.setLayoutData(data);
		}
		loadBtn = new Button(plate, SWT.PUSH);
		loadBtn.setText(Messages.ModelSelectionPageLoad);
		{
			GridData data = new GridData();
			loadBtn.setLayoutData(data);
		}

		// logic

		loadBtn.setEnabled(false);
		uriFld.addModifyListener(new ModifyListener() {

			public void modifyText(ModifyEvent e) {
				if (settingUriFld > 0) {
					return;
				}
				setURI(uriFld.getText());
				setResource(null);
			}
		});
		loadBtn.addSelectionListener(new SelectionListener() {

			public void widgetDefaultSelected(SelectionEvent e) {
			}

			public void widgetSelected(SelectionEvent e) {
				setResource(loadResource());
			}
		});
	}

	protected void createAdditionalControls(Composite parent) {
	}

	public void setReadOnly(boolean value) {
		readOnly = value;
		uriFld.setEnabled(!value);
		browseFsBtn.setEnabled(!value);
		browseWsBtn.setEnabled(!value);
		findInWsBtn.setEnabled(!value);
	}

	protected void initControls() {
		if (rloc == null || getModelFileExtension() == null) {
			return;
		}
		List<URI> uris = rloc.getSelectedURIs(getModelFileExtension());
		if (!uris.isEmpty()) {
			setURI(uris.get(0));
			updateURI();
		}
	}

	/**
	 * Updates resource and text control to reflect used URI.
	 */
	public void updateURI() {
		if (readOnly) {
			return;
		}
		try {
			settingUriFld++;
			if (uri != null) {
				uriFld.setText(uri.toString());
				setResource(loadResource());
			} else {
				uriFld.setText(""); //$NON-NLS-1$
				setResource(null);
			}
		} finally {
			settingUriFld--;
		}
	}

	/**
	 * Changes URI to the value provided by string representation.
	 */
	public void setURI(String uriText) {
		if (readOnly) {
			return;
		}
		if (uriText == null || uriText.trim().length() == 0) {
			uri = null;
			loadBtn.setEnabled(false);
			setErrorMessage(null);
			return;
		}
		try {
			uri = URI.createURI(uriText.trim());
			loadBtn.setEnabled(true);
			setErrorMessage(null);
		} catch (IllegalArgumentException iae) {
			uri = null;
			loadBtn.setEnabled(false);
			setErrorMessage(NLS.bind(Messages.ModelSelectionPageBadURI, iae.getLocalizedMessage()));
			return;
		}
	}

	public void setURI(URI uri) {
		if (readOnly) {
			return;
		}
		this.uri = uri;
		loadBtn.setEnabled(uri != null);
		setErrorMessage(null);
	}

	public final URI getURI() {
		return uri;
	}

	protected void unloadResource() {
		if (this.resource != null) {
			if (this.resource.isLoaded()) {
				this.resource.unload();
			}
			getResourceSet().getResources().remove(this.resource);
			this.resource = null;
		}
	}

	protected Resource loadResource() {
		unloadResource();
		assert uri != null;
		Resource resource = getResourceSet().createResource(uri, ContentHandler.UNSPECIFIED_CONTENT_TYPE);
		if (resource == null) {
			setErrorMessage(Messages.ModelSelectionPageModelNA);
			return null;
		}
		try {
			resource.load(Collections.EMPTY_MAP);
		} catch (IOException ioe) {
			setErrorMessage(NLS.bind(Messages.ModelSelectionPageErrorLoadingModel, ioe.getLocalizedMessage()));
			return null;
		}
		setErrorMessage(null);
		return resource;
	}

	protected final void setResource(Resource resource) {
		unloadResource();
		this.resource = resource;
		validatePage();
		resourceChanged();
	}

	public void validatePage() {
		if (modelRequired) {
			setPageComplete(resource != null);
		}
	}

	public void setVisible(boolean visible) {
		if (!initialized && visible) {
			initialized = true;
			initControls();
		}
		super.setVisible(visible);
	}

	protected void resourceChanged() {
	}

	public final Resource getResource() {
		return resource;
	}

	public final boolean isModelRequired() {
		return modelRequired;
	}

	public void setModelRequired(boolean modelRequired) {
		this.modelRequired = modelRequired;
		validatePage();
	}
}
@


1.19
log
@[220711] respect workspace resource models - refactored transformation operation to manage resource set easily
@
text
@d21 1
d351 1
a351 1
		Resource resource = getResourceSet().createResource(uri);
@


1.18
log
@[197675] Remove resource from resource set when user has typed new uri
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2007 Borland Software Corp.
d85 1
a85 1
	protected ResourceSet getResourceSet() {
@


1.17
log
@overriding method to pass constant value is not a good approach
@
text
@d337 10
d348 1
d366 1
a366 3
		if (this.resource != null && this.resource.isLoaded()) {
			this.resource.unload();
		}
@


1.16
log
@do not clutter Model URI label
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
d72 2
d75 4
d82 1
d92 7
d100 1
a100 1
		return null;
@


1.15
log
@[166051] [afedorov] Model Selection Page: "Load" button remains disabled for valid URI
@
text
@d114 1
a114 4
			GridData data = new GridData();
			data.horizontalAlignment = GridData.FILL;
			data.grabExcessHorizontalSpace = true;
			plate.setLayoutData(data);
d118 2
a119 6
		{
			GridData data = new GridData();
			data.horizontalAlignment = GridData.FILL;
			data.grabExcessHorizontalSpace = true;
			label.setLayoutData(data);
		}
d122 2
a123 4
		{
			GridData data = new GridData();
			browseFsBtn.setLayoutData(data);
		}
d126 2
a127 4
		{
			GridData data = new GridData();
			browseWsBtn.setLayoutData(data);
		}
d130 1
a130 4
		{
			GridData data = new GridData();
			findInWsBtn.setLayoutData(data);
		}
@


1.14
log
@[161527] initialize lazily to prevent this bug
@
text
@d160 1
a160 1
				uri = URI.createFileURI(fileName);
d186 1
a186 1
				uri = URI.createPlatformResourceURI(files[0].getFullPath().toString(), true);
d200 1
a200 1
				uri = URI.createPlatformResourceURI(file.getFullPath().toString(), true);
d273 1
a273 1
			uri = uris.get(0);
d314 2
a321 2
		loadBtn.setEnabled(true);
		setErrorMessage(null);
@


1.13
log
@allow to extend page validation
@
text
@d70 2
a104 1
		initControls();
d369 8
@


1.12
log
@do not set resource twice after selecting by button
@
text
@d358 5
a365 1
		resourceChanged();
d381 1
@


1.11
log
@allow to use shared resultset
@
text
@d50 2
d237 3
d284 11
a294 6
		if (uri != null) {
			uriFld.setText(uri.toString());
			setResource(loadResource());
		} else {
			uriFld.setText(""); //$NON-NLS-1$
			setResource(null);
@


1.10
log
@add extension to create new model
@
text
@d22 1
d62 2
d65 1
a65 1
	
d68 1
a68 1
	public ModelSelectionPage(String pageId, ResourceLocationProvider rloc) {
d71 8
d328 1
a328 1
		Resource resource = new ResourceSetImpl().createResource(uri);
d344 3
@


1.9
log
@set page to require model to be selected
@
text
@d51 6
d61 2
d113 1
a113 1
		Button browseFsBtn = new Button(plate, SWT.PUSH);
d119 1
a119 1
		Button browseWsBtn = new Button(plate, SWT.PUSH);
d125 1
a125 1
		Button findInWsBtn = new Button(plate, SWT.PUSH);
d242 8
d265 3
d281 3
d303 3
d307 2
@


1.8
log
@i18n
@
text
@d51 1
a51 1
	protected URI uri;
d53 3
a55 1
	protected Resource resource;
d305 1
a305 1
	protected void setResource(Resource resource) {
d307 7
d319 8
@


1.7
log
@add predefined models extension
@
text
@d26 1
d96 1
a96 1
		label.setText("Model URI:");
d104 1
a104 1
		browseFsBtn.setText("Browse File System...");
d110 1
a110 1
		browseWsBtn.setText("Browse Workspace...");
d116 1
a116 1
		findInWsBtn.setText("Find In Workspace...");
d131 1
a131 1
				fd.setText("Select Model");
d157 2
a158 1
				IFile[] files = WorkspaceResourceDialog.openFileSelection(getShell(), "Select Model", "Select file with ecore model:", false, null, Collections.singletonList(extFilter));
d172 1
a172 1
				IFile file = FileSelector.selectFile(getShell(), "Select Model", null, null, getModelFileExtension());
d202 1
a202 1
		loadBtn.setText("Load");
d271 1
a271 1
			setErrorMessage("Invalid model URI: " + iae.getLocalizedMessage());
d290 1
a290 1
			setErrorMessage("Model is not accessible.");
d296 1
a296 1
			setErrorMessage("Error loading model: " + ioe.getLocalizedMessage());
@


1.6
log
@add copyright header
@
text
@d241 4
a244 1
	protected void updateURI() {
d254 4
a257 1
	protected void setURI(String uriText) {
d276 8
@


1.5
log
@allow to preselect uris for wizards
@
text
@d1 11
@


1.4
log
@#156534 Consider selected file in model selection page
@
text
@d223 3
a225 3
		List<IFile> files = rloc.getSelectedFiles(getModelFileExtension());
		if (!files.isEmpty()) {
			uri = URI.createPlatformResourceURI(files.get(0).getFullPath().toString(), true);
@


1.3
log
@provide 'find in workspace' button to locate model files
@
text
@d5 1
d33 2
d43 1
a43 1
	public ModelSelectionPage(String pageId) {
d45 1
d52 1
a52 1
	public void createControl(Composite parent) {
d66 1
d68 1
d216 14
@


1.2
log
@filter models by selection
@
text
@d69 1
a69 1
			layout.numColumns = 3;
d97 6
d147 14
@


1.1
log
@#155014 Default gmfmap model creation wizard should create initial content
@
text
@d11 2
d44 4
d122 12
a133 1
				IFile[] files = WorkspaceResourceDialog.openFileSelection(getShell(), "Select Model", "Select file with ecore model:", false, null, null);
@

