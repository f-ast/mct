head	1.3;
access;
symbols
	v20081015-1925:1.3
	v20080930-1130:1.3
	v20080926-1245:1.3
	v20080924-1925:1.3
	v20080722-1827:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080521:1.3
	v20080516-1143:1.3
	v20080508-2000:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20071108-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20070307-0700:1.3
	v20070301-1200:1.3
	v20070228-2000:1.3
	v20070221-1500:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.02.27.15.55.55;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	397545e4548b4567;

1.2
date	2006.09.21.12.06.12;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.21.11.40.30;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.3
log
@expansion style is third arg
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.common.ui;

import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.forms.events.ExpansionEvent;
import org.eclipse.ui.forms.events.HyperlinkEvent;
import org.eclipse.ui.forms.events.IExpansionListener;
import org.eclipse.ui.forms.events.IHyperlinkListener;
import org.eclipse.ui.forms.widgets.ExpandableComposite;
import org.eclipse.ui.forms.widgets.Hyperlink;

/**
 * @@author dstadnik
 */
public class PredefinedModelExtension implements ModelSelectionPageExtension {

	protected final ModelSelectionPage page;

	protected final List<URI> uris;

	public PredefinedModelExtension(ModelSelectionPage page, List<URI> uris) {
		this.page = page;
		this.uris = uris;
	}

	protected String getLabelText() {
		return Messages.PredefinedModelExtensionPredefinedModels;
	}

	public void createControl(Composite parent) {
		Composite plate = new Composite(parent, SWT.NONE);
		{
			GridData data = new GridData();
			data.horizontalAlignment = GridData.FILL;
			data.grabExcessHorizontalSpace = true;
			plate.setLayoutData(data);
		}
		plate.setLayout(new GridLayout());
		ExpandableComposite hlSection = new ExpandableComposite(plate, SWT.NONE, ExpandableComposite.TWISTIE);
		hlSection.setText(getLabelText());
		hlSection.setLayoutData(new GridData());
		Composite hlPlate = new Composite(hlSection, SWT.NONE);
		hlPlate.setLayout(new GridLayout());
		hlSection.setClient(hlPlate);
		hlSection.addExpansionListener(new IExpansionListener() {

			public void expansionStateChanged(ExpansionEvent e) {
				Composite pc = (Composite) page.getControl();
				pc.layout(true, true);
			}

			public void expansionStateChanging(ExpansionEvent e) {
			}
		});
		for (URI uri : uris) {
			createHyperlink(hlPlate, uri);
		}
	}

	protected Hyperlink createHyperlink(Composite parent, final URI uri) {
		final Hyperlink hyperlink = new Hyperlink(parent, SWT.NONE);
		hyperlink.setForeground(page.getShell().getDisplay().getSystemColor(SWT.COLOR_BLUE));
		hyperlink.setText(uri.toString());
		hyperlink.addHyperlinkListener(new IHyperlinkListener() {

			public void linkActivated(HyperlinkEvent e) {
				setPredefinedModelURI(uri);
			}

			public void linkEntered(HyperlinkEvent e) {
				hyperlink.setUnderlined(true);
			}

			public void linkExited(HyperlinkEvent e) {
				hyperlink.setUnderlined(false);
			}
		});
		GridData data = new GridData();
		hyperlink.setLayoutData(data);
		return hyperlink;
	}

	protected void setPredefinedModelURI(URI uri) {
		page.setURI(uri);
		page.updateURI();
	}

	public void setResource(Resource resource) {
	}
}
@


1.2
log
@i18n
@
text
@d56 1
a56 1
		ExpandableComposite hlSection = new ExpandableComposite(plate, ExpandableComposite.TWISTIE);
@


1.1
log
@add predefined models extension
@
text
@d44 1
a44 1
		return "Use one of the predefined models:";
@

