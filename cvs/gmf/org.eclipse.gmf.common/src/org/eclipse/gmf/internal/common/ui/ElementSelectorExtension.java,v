head	1.7;
access;
symbols
	v20081015-1925:1.7
	v20080930-1130:1.7
	v20080926-1245:1.7
	v20080924-1925:1.7
	v20080722-1827:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.4
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080610-1132:1.7
	v20080521:1.7
	v20080516-1143:1.7
	v20080508-2000:1.7
	v20080417-1610:1.7
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20071108-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070520-1200:1.7
	v20070518-1300:1.7
	v20070427-0600:1.7
	v20070420-1000:1.7
	v20070413-1300:1.6
	v20070405-1100:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20070307-0700:1.5
	v20070301-1200:1.5
	v20070228-2000:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5
	M1_20:1.1
	v20060904-1500:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2007.04.18.13.13.08;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	24ff462619634567;

1.6
date	2007.03.19.16.49.09;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	5cce45febf044567;

1.5
date	2006.09.22.17.19.57;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.19.14.46.33;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.07.15.35.08;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.04.18.15.58;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.28.13.18.07;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[181187] akarjakina - Need a method to add extension models to gmfgen model
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.common.ui;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;

/**
 * @@author dstadnik
 */
public abstract class ElementSelectorExtension extends Observable implements ModelSelectionPageExtension {

	protected List<EObject> modelElements = new ArrayList<EObject>();

	protected EObject selectedModelElement;

	protected abstract String getModelElementName();

	protected abstract String getModelElementLabel(EObject modelElement);

	protected EClass getModelElementClass() {
		return null;
	}

	protected boolean isApplicable(EObject element) {
		return true;
	}

	protected List<EObject> getModelElements(Resource resource) {
		List<EObject> elements = new ArrayList<EObject>();
		for (Iterator<EObject> it = resource.getAllContents(); it.hasNext();) {
			EObject next = it.next();
			boolean applicableType = getModelElementClass() == null || next.eClass().equals(getModelElementClass());
			if (applicableType && isApplicable(next)) {
				elements.add(next);
			}
		}
		sortModelElements(elements);
		return elements;
	}

	protected void fireModelElementChanged() {
		setChanged();
		notifyObservers(selectedModelElement);
	}

	public EObject getModelElement() {
		return selectedModelElement;
	}

	/**
	 * Override if you don't like default alphabetical sort
	 * @@param elements modified in-place
	 */
	protected void sortModelElements(List<EObject> elements) {
		Collections.sort(elements, new Comparator<EObject>() {

			public int compare(EObject o1, EObject o2) {
				String n1 = getModelElementLabel(o1);
				String n2 = getModelElementLabel(o2);
				return n1.compareTo(n2);
			}
		});
	}
}
@


1.6
log
@EMF 2.3 M5 and Java 5 cleanup
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
d55 1
a55 8
		Collections.sort(elements, new Comparator<EObject>() {

			public int compare(EObject o1, EObject o2) {
				String n1 = getModelElementLabel(o1);
				String n2 = getModelElementLabel(o2);
				return n1.compareTo(n2);
			}
		});
d67 15
@


1.5
log
@issue notifications when contents are changed
@
text
@d30 1
a30 1
	protected List modelElements = new ArrayList();
d48 2
a49 2
		for (Iterator it = resource.getAllContents(); it.hasNext();) {
			EObject next = (EObject) it.next();
@


1.4
log
@add copyright header
@
text
@d19 1
d28 1
a28 1
public abstract class ElementSelectorExtension implements ModelSelectionPageExtension {
d66 5
@


1.3
log
@allow custom filtering
@
text
@d1 11
@


1.2
log
@use generics wherever possible
@
text
@d30 4
d38 2
a39 1
			if (getModelElementClass() == null || next.eClass().equals(getModelElementClass())) {
@


1.1
log
@#155014 Default gmfmap model creation wizard should create initial content
@
text
@d30 2
a31 2
	protected List getModelElements(Resource resource) {
		List elements = new ArrayList();
d38 1
a38 1
		Collections.sort(elements, new Comparator() {
d40 3
a42 3
			public int compare(Object o1, Object o2) {
				String n1 = getModelElementLabel((EObject) o1);
				String n2 = getModelElementLabel((EObject) o2);
@

