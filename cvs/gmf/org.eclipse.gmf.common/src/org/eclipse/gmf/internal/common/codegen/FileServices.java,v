head	1.1;
access;
symbols
	v20081015-1925:1.1
	v20080930-1130:1.1
	v20080926-1245:1.1
	v20080924-1925:1.1
	v20080722-1827:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080610-1132:1.1
	v20080521:1.1
	v20080516-1143:1.1
	v20080508-2000:1.1
	v20080417-1610:1.1
	v20080322-0000:1.1
	v20080222-1200:1.1
	v20071108-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070520-1200:1.1
	v20070518-1300:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20070307-0700:1.1
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061214-0000:1.1
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1
	M1_20:1.1
	v20060904-1500:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2006.09.01.16.03.18;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.1
log
@refactoring: abstract use of JMerge for merging away from generator services (GeneratorBase)
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.common.codegen;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;

/**
 * @@author artem
 */
class FileServices {

	public static String getFileContents(IFile file) {
		StringBuffer contents = new StringBuffer();
		char[] buffer = new char[1024];
		int count;
		try {
			Reader in = new InputStreamReader(file.getContents(true), file.getCharset());
			try {
				while ((count = in.read(buffer)) > 0) {
					contents.append(buffer, 0, count);
				}
			} finally {
				in.close();
			}
		} catch (CoreException ce) {
			ce.printStackTrace();
			return null;
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}
		return contents.toString();
	}

	/**
	 * @@return <code>true</code> if the file contains the input stream contents
	 */
//	public static boolean contains(IFile f, InputStream is) {
//		int fc = 0;
//		int ic = 0;
//		InputStream fs = null;
//		try {
//			fs = f.getContents(true);
//			while ((fc = fs.read()) == (ic = is.read()) && fc >= 0);
//		} catch (CoreException ce) {
//		} catch (IOException ioe) {
//		} finally {
//			if (fs != null) {
//				try {
//					fs.close();
//				} catch (IOException ioe) {
//				}
//			}
//		}
//		return fc <0 && ic < 0;
//	}

}
@
