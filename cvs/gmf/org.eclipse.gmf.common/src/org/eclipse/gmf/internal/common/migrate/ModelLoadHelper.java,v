head	1.13;
access;
symbols
	v20081015-1925:1.13
	v20080930-1130:1.13
	v20080926-1245:1.13
	v20080924-1925:1.13
	v20080722-1827:1.13
	v20080716-1642:1.13
	R2_1_maintenance:1.13.0.2
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080521:1.13
	v20080516-1143:1.13
	v20080508-2000:1.13
	v20080417-1610:1.12
	v20080322-0000:1.12
	v20080222-1200:1.12
	v20071108-0000:1.12
	v20070903-0000:1.12
	v20070809-0000:1.12
	R2_0_maintenance:1.12.0.2
	R2_0:1.12
	R4_20:1.12
	v20070621-0000:1.12
	RC3_20:1.11
	v20070605-1400:1.11
	v20070601-1400:1.11
	v20070525-1500:1.11
	v20070520-1200:1.10
	v20070518-1300:1.7
	v20070427-0600:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070405-1100:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20070307-0700:1.6
	v20070301-1200:1.6
	v20070228-2000:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	M4_20:1.5
	v20061222-1800:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.1
	M1_20:1.1
	v20060904-1500:1.1;
locks; strict;
comment	@# @;


1.13
date	2008.05.08.17.26.38;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	37ad482337cd4567;

1.12
date	2007.06.21.14.13.38;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	1e3f467a878e4567;

1.11
date	2007.05.23.10.14.38;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	4de74654140d4567;

1.10
date	2007.05.18.23.31.23;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	4628464e374b4567;

1.9
date	2007.05.18.23.06.21;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	241a464e316d4567;

1.8
date	2007.05.18.20.39.13;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	58f6464e0ef14567;

1.7
date	2007.03.19.16.49.09;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	5cce45febf044567;

1.6
date	2007.01.31.17.05.09;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	675c45c0cc444567;

1.5
date	2006.11.08.20.50.57;	author radvorak;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.07.16.48.45;	author radvorak;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.06.18.32.10;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.02.18.37.28;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.31.14.22.44;	author radvorak;	state Exp;
branches;
next	;


desc
@@


1.13
log
@[228913] migration support for ValueExpression metamodel changes
@
text
@/*
 * Copyright (c) 2006, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: dvorak - initial API and implementation
 */
package org.eclipse.gmf.internal.common.migrate;

import java.io.IOException;
import java.text.MessageFormat;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.common.util.BasicDiagnostic;
import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.common.util.WrappedException;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.eclipse.emf.ecore.resource.ContentHandler;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EcoreUtil;

/**
 * This class is helper for loading model from resource, handles load exceptions, result status
 * aggregation and safe root object access.
 * XXX [artem] this class needs a rewrite. Check MigrationPatchesTest#assertOnLoadModelMigrationSuccess
 */
public class ModelLoadHelper {
	private static final String DIAGNOSTIC_SOURCE = "gmf.common.modelLoadHelper"; //$NON-NLS-1$
	
	private IStatus status;
	private Diagnostic diagnostic;	
	private URI uri;
	private ResourceSet resourceSet;
	
	/**
	 * Gets resource loaded by this helper.
	 */
	public Resource getLoadedResource() {
		return resourceSet.getResource(uri, false);
	}
	
	/**
	 * Returns first EObject in the loaded resource contents list.
	 * @@return root EObject or <code>null</code> if no one is available   
	 */
	public EObject getContentsRoot() {
		Resource resource =  getLoadedResource();
		assert resource != null;
		if(!resource.getContents().isEmpty()) {
			return resource.getContents().get(0);
		}
		return null;
	}

	public boolean isOK() {
		return diagnostic.getSeverity() == Diagnostic.OK || diagnostic.getSeverity() == Diagnostic.WARNING;
	}
	
	/**
	 * Gets the status resulted from the load resource operation.
	 * @@return the status object
	 */
	public IStatus getStatus() {
		if(status == null) {
			status = BasicDiagnostic.toIStatus(diagnostic);
		}
		return status;
	}
	
	public Diagnostic getDiagnostics() {
		return diagnostic;
	}
	
	/**
	 * Creates resource diagnostic wrapping the given exception.
	 * @@param resource the resource associated with the created diagnostic
	 * @@param exception non-<code>null</code> exception to be wrapped as diagnostic
	 * 
	 * @@return diagnostic object
	 */
	static Resource.Diagnostic createDiagnostic(Resource resource, Exception exception) {
		if(exception == null) {
			throw new IllegalArgumentException("null diagnostic exception"); //$NON-NLS-1$
		}
		final String location = resource.getURI() == null ? null : resource.getURI().toString();
		class ExceptionDiagnostic extends WrappedException implements Resource.Diagnostic {
			
			public ExceptionDiagnostic(Exception exception) {
				super(exception);
			}
	
			public String getLocation() {
				return location;
			}
	
			public int getColumn() {
				return 0;
			}
	
			public int getLine() {
				return 0;
			}
		}
		
		return new ExceptionDiagnostic(exception);
	}
	
	/**
	 * Constructs helper for loading resource refered by URI into given
	 * resourceset.
	 * 
	 * @@param targetResSet
	 *            resourceset into which the resource will be loaded
	 * @@param resourceURI
	 *            URI referencing the resource to load
	 */
	public ModelLoadHelper(ResourceSet targetResSet, URI resourceURI) {
		if(targetResSet == null || resourceURI == null) {
			throw new IllegalArgumentException("null resourceSet or resourceURI"); //$NON-NLS-1$
		}
		this.resourceSet = targetResSet;
		this.uri = resourceURI;
		this.diagnostic = internalLoad(targetResSet, uri);
	}	

	private static Diagnostic internalLoad(ResourceSet resourceSet, URI uri) {
		Diagnostic diagnostic = Diagnostic.OK_INSTANCE;
		Resource resource = resourceSet.createResource(uri, ContentHandler.UNSPECIFIED_CONTENT_TYPE);
		assert resource != null;
		Exception rootException = null;
		try {
			resource.load(resourceSet.getLoadOptions());
		} catch(IOException e) {
			rootException = e instanceof Resource.IOWrappedException ? (Exception)e.getCause() : e;
			// include only non diagnostic exception in resource.getErrors()			
			if(!(e instanceof Resource.Diagnostic)) {
				resource.getErrors().add(ModelLoadHelper.createDiagnostic(resource, rootException));
			} 
		} catch(RuntimeException e) {			
			EcorePlugin.INSTANCE.getPluginLogger().log(e);			
			resource.getErrors().add(ModelLoadHelper.createDiagnostic(resource, e));
		}
		EList<Resource.Diagnostic> errors = resource.getErrors();
		EList<Resource.Diagnostic> warnings = resource.getWarnings();
		if(!errors.isEmpty() || !warnings.isEmpty()) {
			Diagnostic resourceDiagnostic = EcoreUtil.computeDiagnostic(resource, true);
			Integer severityOpt = new Integer(resourceDiagnostic.getSeverity() == Diagnostic.ERROR ? 0 : 1);    
			String message = MessageFormat.format(Messages.modelLoadedWithProblems, 
					 new Object[] { severityOpt, resource.getURI() });			

			Object[] data = (rootException != null) ? new Object[] { rootException, resource } : new Object[] { resource };			
			BasicDiagnostic loadDiagnostic = new BasicDiagnostic(DIAGNOSTIC_SOURCE, resourceDiagnostic.getCode(), message, data);
			loadDiagnostic.addAll(resourceDiagnostic);
			diagnostic = loadDiagnostic;
		}
		return diagnostic;
	}
}
@


1.12
log
@fix copyright years
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2007 Borland Software Corporation
d24 1
d135 1
a135 1
		Resource resource = resourceSet.createResource(uri);
@


1.11
log
@typos
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.10
log
@warning is good as well
@
text
@d31 1
a31 1
 * XXX [artem] this class is needs a rewrite. Check MigrationPatchesTest#assertOnLoadModelMigrationSuccess
@


1.9
log
@do not report warnings in UI
@
text
@d31 1
d62 1
a62 1
		return diagnostic.getSeverity() == Diagnostic.OK;
d149 1
d151 1
a151 4
		if (warnings.size() == 1 && warnings.get(0) instanceof MigrationResource.Diagnostic) {
			return diagnostic;
		}
		if(!resource.getErrors().isEmpty() || !warnings.isEmpty()) {
@


1.8
log
@[187811] akarjakina - Migration support refactored
@
text
@d19 1
d148 5
a152 2
		
		if(!resource.getErrors().isEmpty() || !resource.getWarnings().isEmpty()) {
@


1.7
log
@EMF 2.3 M5 and Java 5 cleanup
@
text
@d1 2
a2 2
/**
 * Copyright (c) 2006 Eclipse.org
@


1.6
log
@use generics wherever possible
@
text
@a129 1
	@@SuppressWarnings("unchecked")
@


1.5
log
@fixing ModelLoadHelperTest unittest failure
@
text
@d54 1
a54 1
			return (EObject)resource.getContents().get(0);
@


1.4
log
@Support navigation from Resource.Diagnostic diagnostics
@
text
@d139 5
a143 2
			rootException = e;
			//no need to include in resource.getErrors(), as it done automatically. 
@


1.3
log
@[163243] Improve problem reporting of tooling actions TransformGenModel, codegeneration ...
- use DiagnosticsDialog for error processing
@
text
@d151 3
a153 2
			
			BasicDiagnostic loadDiagnostic = new BasicDiagnostic(DIAGNOSTIC_SOURCE, resourceDiagnostic.getCode(), message, (rootException != null) ? new Object[] { rootException } : null);
@


1.2
log
@[163243] Improve problem reporting of tooling actions TransformGenModel, codegeneration ...
@
text
@a16 1
import org.eclipse.core.runtime.Status;
d20 1
d35 1
a39 18
	 * Constructs helper for loading resource refered by URI into given
	 * resourceset.
	 * 
	 * @@param targetResSet
	 *            resourceset into which the resource will be loaded
	 * @@param resourceURI
	 *            URI referencing the resource to load
	 */
	public ModelLoadHelper(ResourceSet targetResSet, URI resourceURI) {
		if(targetResSet == null || resourceURI == null) {
			throw new IllegalArgumentException("null resourceSet or resourceURI"); //$NON-NLS-1$
		}
		this.resourceSet = targetResSet;
		this.uri = resourceURI;
		this.status = internalLoad(targetResSet, uri);
	}
	
	/**
d59 4
d68 3
d74 56
d131 2
a132 2
	private static IStatus internalLoad(ResourceSet resourceSet, URI uri) {
		IStatus loadStatus = Status.OK_STATUS;
d143 1
a143 1
			resource.getErrors().add(MigrationUtil.createDiagnostic(resource, e));
d153 2
a154 2
			loadDiagnostic.addAll(resourceDiagnostic);			
			loadStatus = BasicDiagnostic.toIStatus(loadDiagnostic);
d156 1
a156 1
		return loadStatus;
@


1.1
log
@#154698 Support migration of GMF tooling models in case of backward incomatible changes
- adding migration action, save model loading to generate actions
@
text
@d89 1
d93 3
a95 2
			resource.getErrors().add(MigrationUtil.createDiagnostic(resource, e)); 
		} catch(RuntimeException e) {
d106 1
a106 1
			BasicDiagnostic loadDiagnostic = new BasicDiagnostic(DIAGNOSTIC_SOURCE, 0, message, null);			
@

