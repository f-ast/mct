head	1.5;
access;
symbols
	v20081015-1925:1.5
	v20080930-1130:1.5
	v20080926-1245:1.5
	v20080924-1925:1.5
	v20080722-1827:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080610-1132:1.5
	v20080521:1.5
	v20080516-1143:1.5
	v20080508-2000:1.5
	v20080417-1610:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20071108-0000:1.5
	v20070903-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070520-1200:1.5
	v20070518-1300:1.5
	v20070427-0600:1.5
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070405-1100:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20070307-0700:1.5
	v20070301-1200:1.5
	v20070228-2000:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.09.21.11.40.30;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.19.14.46.33;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.13.14.45.10;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.11.12.07.54;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.07.17.41.01;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.5
log
@add predefined models extension
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.common.ui;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.emf.common.util.URI;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;

/**
 * Adapts selection to resource locations.
 * 
 * @@author dstadnik
 */
public class ResourceLocationProvider {

	private final List<IResource> selectedResources;

	private final List<URI> selectedURIs;

	public ResourceLocationProvider(ISelection selection) {
		selectedResources = new ArrayList<IResource>();
		selectedURIs = new ArrayList<URI>();
		if (selection instanceof IStructuredSelection) {
			for (Object element : ((IStructuredSelection) selection).toList()) {
				if (element instanceof IResource) {
					selectedResources.add((IResource) element);
				} else if (element instanceof URI) {
					selectedURIs.add((URI) element);
				}
			}
		}
	}

	/**
	 * Returns selected files with specified extension.
	 * 
	 * @@param explicit If true then if folder was selected looks for appropriate files in it.
	 */
	public List<IFile> getSelectedFiles(String extension, boolean explicit) {
		List<IFile> files = new ArrayList<IFile>();
		if (extension == null) {
			return files;
		}
		addFiles(files, selectedResources, extension);
		if (!explicit) {
			// add files from containers; they are at the end since explicitly selected files are more important
			addContainers(files, selectedResources, extension);
		}
		return files;
	}

	protected void addFiles(List<IFile> files, List<? extends IResource> resources, String extension) {
		for (IResource resource : resources) {
			if (resource instanceof IFile && extension.equals(((IFile) resource).getFileExtension())) {
				files.add((IFile) resource);
			}
		}
	}

	protected void addContainers(List<IFile> files, List<? extends IResource> resources, String extension) {
		for (IResource resource : resources) {
			if (resource instanceof IContainer) {
				try {
					List<IResource> members = Arrays.asList(((IContainer) resource).members());
					addFiles(files, members, extension);
				} catch (CoreException ce) {
					// ignore
				}
			}
		}
	}

	/**
	 * Returns selected resources with specified extension.
	 * 
	 * @@param explicit If true then examines folders in selection.
	 */
	public List<URI> getSelectedURIs(String extension, boolean explicit) {
		List<URI> uris = new ArrayList<URI>();
		if (extension == null) {
			return uris;
		}
		for (URI uri : selectedURIs) {
			if (extension.equals(uri.fileExtension())) {
				uris.add(uri);
			}
		}
		// files follow uris since uris are more specific
		List<IFile> files = getSelectedFiles(extension, explicit);
		for (IFile file : files) {
			uris.add(URI.createPlatformResourceURI(file.getFullPath().toString(), true));
		}
		return uris;
	}

	public final List<URI> getSelectedURIs(String extension) {
		return getSelectedURIs(extension, false);
	}
}
@


1.4
log
@add copyright header
@
text
@a15 1
import java.util.Collections;
d57 1
d59 1
a59 1
			return Collections.emptyList();
a60 1
		List<IFile> files = new ArrayList<IFile>();
d96 1
d98 1
a98 1
			return Collections.emptyList();
a99 1
		List<URI> uris = new ArrayList<URI>();
@


1.3
log
@allow to find explicitly selected resources
@
text
@d1 11
@


1.2
log
@allow to preselect uris for wizards
@
text
@d17 2
d41 6
a46 1
	public List<IFile> getSelectedFiles(String extension) {
d52 4
a55 2
		// add files from containers; they are at the end since directly selected files are more important
		addContainers(files, selectedResources, extension);
d80 6
a85 1
	public List<URI> getSelectedURIs(String extension) {
d96 1
a96 1
		List<IFile> files = getSelectedFiles(extension);
d102 4
@


1.1
log
@#156534 Consider selected file in model selection page
@
text
@d4 2
d12 1
d21 3
a23 1
	private final List<IResource> selection;
d26 2
a27 1
		this.selection = new ArrayList<IResource>();
d31 3
a33 1
					this.selection.add((IResource) element);
d40 3
d44 8
a51 1
		for (IResource resource : selection) {
d56 4
a59 2
		// add files from containers; they are at the end since directly selected files are more important
		for (IResource resource : selection) {
d62 2
a63 5
					for (IResource member : ((IContainer) resource).members()) {
						if (member instanceof IFile && extension.equals(((IFile) member).getFileExtension())) {
							files.add((IFile) member);
						}
					}
d69 18
a86 1
		return files;
@

