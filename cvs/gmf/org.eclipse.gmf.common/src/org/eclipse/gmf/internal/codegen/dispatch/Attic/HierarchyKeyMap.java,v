head	1.3;
access;
symbols
	v20081015-1925:1.3
	v20080924-1925:1.3
	v20061013-1330:1.2
	v20060925-1700:1.1
	v20060919-0800:1.1
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.11.06.18.14.15;	author atikhomirov;	state dead;
branches;
next	1.2;

1.2
date	2006.08.30.15.10.40;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.06.22.21.43;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@removed code that is no longer used
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.dispatch;

import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.LinkedList;

/**
 * XXX cache hierarchies?
 * @@author artem
 */
public class HierarchyKeyMap extends KeyMap {

	public HierarchyKeyMap() {
	}

	/**
	 * Processes instances of {@@link java.lang.Class} only, delegates to superclass otherwise
	 */
	public KeyChain map(Object key) {
		if (false == key instanceof Class) {
			return super.map(key);
		}
		Class keyClass = (Class) key;
		Class[] immediateInterfaces = keyClass.getInterfaces();
		// make sure immediate interfaces are considered first in the key chain
		LinkedHashSet<Class> result = new LinkedHashSet<Class>(Arrays.asList(immediateInterfaces));
		LinkedList<Class> l = new LinkedList<Class>(result);
		while (!l.isEmpty()) {
			Class iface = l.removeFirst();
			result.add(iface);
			l.addAll(0, Arrays.asList(iface.getInterfaces()));
		}
		return new ArrayKeyChain(keyClass, result.toArray());
	}
}
@


1.2
log
@avoid 'unchecked' warnings
@
text
@@


1.1
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@d37 2
a38 2
		LinkedHashSet result = new LinkedHashSet(Arrays.asList(immediateInterfaces));
		LinkedList l = new LinkedList(result);
d40 1
a40 1
			Class iface = (Class) l.removeFirst();
@

