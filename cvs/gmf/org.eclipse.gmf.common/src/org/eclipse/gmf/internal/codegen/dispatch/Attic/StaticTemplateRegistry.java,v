head	1.6;
access;
symbols
	v20081015-1925:1.6
	v20080924-1925:1.6
	v20080222-1200:1.5
	v20071108-0000:1.5
	v20070903-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070520-1200:1.4
	v20070518-1300:1.4
	v20070427-0600:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070405-1100:1.4
	v20070330-1300:1.4
	v20060330-1300:1.4
	v20070322-1100:1.4
	v20070307-0700:1.3
	v20070301-1200:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.3
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.3
	v20060904-1500:1.3
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.1
	I20060209-1815:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2008.02.28.20.24.40;	author atikhomirov;	state dead;
branches;
next	1.5;
commitid	4cff47c718874567;

1.5
date	2007.06.21.14.13.38;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	1e3f467a878e4567;

1.4
date	2007.03.19.16.49.09;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	5cce45febf044567;

1.3
date	2006.08.30.15.10.40;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.16.19.09.39;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.06.22.21.43;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@cleaned code that is no longer in use (since last JET template gone)
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.dispatch;

import java.util.HashMap;
import java.util.Map;

/**
 * @@author artem
 */
public class StaticTemplateRegistry implements TemplateRegistry {
	private final Map<Object,String> pathMap = new HashMap<Object, String>();
	private final Map<Object,Class<?>> classMap = new HashMap<Object,Class<?>>();
	private final Map<Object, ClassLoader> classLoaderMap = new HashMap<Object, ClassLoader>();
	private final ClassLoader myDefaultClassLoader;
	
	public StaticTemplateRegistry(ClassLoader defaultClassLoader) {
		assert defaultClassLoader != null;
		myDefaultClassLoader = defaultClassLoader;
	}

	public void put(Object key, String templatePath, Class<?> generatorClass) {
		put(key, templatePath, generatorClass, null);
	}
	
	public void put(Object key, String templatePath, Class<?> generatorClass, ClassLoader templateClassLoader) {
		assert key != null && templatePath != null;
		pathMap.put(key, templatePath);
		if (generatorClass != null) {
			classMap.put(key, generatorClass);
		}
		if (templateClassLoader != null) {
			classLoaderMap.put(key, templateClassLoader);
		}
	}

	public String getTemplatePath(Object key) {
		return pathMap.get(key);
	}
	
	public ClassLoader getTemplateClassLoader(Object key) {
		if (classLoaderMap.containsKey(key)) {
			return classLoaderMap.get(key);
		}
		return myDefaultClassLoader;
	}

	public boolean hasGeneratorClass(Object key) {
		return classMap.containsKey(key);
	}

	public Class<?> getGeneratorClass(Object key) {
		return classMap.get(key);
	}

	public void clean() {
		pathMap.clear();
		classMap.clear();
		classLoaderMap.clear();
	}
}
@


1.5
log
@fix copyright years
@
text
@@


1.4
log
@EMF 2.3 M5 and Java 5 cleanup
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.3
log
@avoid 'unchecked' warnings
@
text
@d22 1
a22 1
	private final Map<Object,Class> classMap = new HashMap<Object,Class>();
d31 1
a31 1
	public void put(Object key, String templatePath, Class generatorClass) {
d35 1
a35 1
	public void put(Object key, String templatePath, Class generatorClass, ClassLoader templateClassLoader) {
d61 1
a61 1
	public Class getGeneratorClass(Object key) {
@


1.2
log
@#125175
- Do not cache templates if dynamicTemplates == true
- template classLoader could be specified if using dynamicTemplates
@
text
@d21 3
a23 3
	private final Map pathMap = new HashMap/*<Object, String>*/();
	private final Map classMap = new HashMap/*<Object,Class>*/();
	private final Map classLoaderMap = new HashMap/*<Object, ClassLoader>*/();
d47 1
a47 1
		return (String) pathMap.get(key);
d52 1
a52 1
			return (ClassLoader) classLoaderMap.get(key);
d62 1
a62 1
		return (Class) classMap.get(key);
d68 1
@


1.1
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@d23 7
d32 4
d41 3
d49 7
@

