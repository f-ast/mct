head	1.2;
access;
symbols
	v20081015-1925:1.2
	v20080924-1925:1.2
	v20070221-1500:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061214-0000:1.1
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1
	v20060925-1700:1.1
	v20060919-0800:1.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.02.27.14.38.58;	author atikhomirov;	state dead;
branches;
next	1.1;
commitid	6de945e442824567;

1.1
date	2006.05.18.19.12.37;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@clean hack with delegating import assistant
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.common.codegen;

import org.eclipse.gmf.common.codegen.ImportAssistant;

/**
 * @@author artem
 */
public class DelegateImportManager implements ImportAssistant {
	private ImportAssistant myDelegate;

	public DelegateImportManager() {
	}

	public DelegateImportManager(ImportAssistant delegate) {
		assert delegate != null;
		setDelegate(delegate);
	}

	public void setDelegate(ImportAssistant delegate) {
		myDelegate = delegate;
	}

	protected final ImportAssistant getDelegate() {
		return myDelegate;
	}

	public void addImport(String qualifiedName) {
		if (myDelegate != null) {
			myDelegate.addImport(qualifiedName);
		}
	}

	public void emitPackageStatement(StringBuffer stringBuffer) {
		if (myDelegate != null) {
			myDelegate.emitPackageStatement(stringBuffer);
		}
	}

	public void emitSortedImports() {
		if (myDelegate != null) {
			myDelegate.emitSortedImports();
		}
	}

	public String getCompilationUnitName() {
		if (myDelegate != null) {
			return myDelegate.getCompilationUnitName();
		}
		throw new IllegalStateException();
	}

	public String getImportedName(String qualifiedName) {
		if (myDelegate != null) {
			return myDelegate.getImportedName(qualifiedName);
		}
		return qualifiedName;
	}

	public void markImportLocation(StringBuffer stringBuffer) {
		if (myDelegate != null) {
			myDelegate.markImportLocation(stringBuffer);
		}
	}

	public void registerInnerClass(String innerClassName) {
		if (myDelegate != null) {
			myDelegate.registerInnerClass(innerClassName);
		}
	}
}
@


1.1
log
@Emitter became top-level entity (TextEmitter), oddness of JetAdapter and Emitter api were cleared.
GeneratorBase lost knowledge about JET.
Parts of gmf.common made internal to avoid possible API issues.
ImportAssistant refactored to know name of compilation unit to avoid problems like #134506.
FigureGenerator's reuse of ImportAssistant removed.
[mgolubev] Tests for #134506 and 142553
@
text
@@

