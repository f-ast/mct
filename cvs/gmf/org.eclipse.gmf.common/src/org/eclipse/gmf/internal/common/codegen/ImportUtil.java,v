head	1.7;
access;
symbols
	v20081015-1925:1.7
	v20080930-1130:1.7
	v20080926-1245:1.7
	v20080924-1925:1.7
	v20080722-1827:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.4
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080610-1132:1.7
	v20080521:1.7
	v20080516-1143:1.7
	v20080508-2000:1.7
	v20080417-1610:1.7
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20071108-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.6
	v20070518-1300:1.6
	v20070427-0600:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070405-1100:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20070307-0700:1.5
	v20070301-1200:1.5
	v20070228-2000:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	M4_20:1.4
	v20061222-1800:1.4
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.2
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2007.06.21.14.13.37;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	1e3f467a878e4567;

1.6
date	2007.03.19.16.49.09;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	5cce45febf044567;

1.5
date	2007.02.05.17.48.36;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	11de45c76df44567;

1.4
date	2006.12.19.16.18.38;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	2960458810dd4567;

1.3
date	2006.10.27.12.29.51;	author bblajer;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.24.15.38.56;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.18.19.12.37;	author atikhomirov;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.14;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.7
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.common.codegen;

import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.emf.codegen.util.ImportManager;
import org.eclipse.gmf.common.codegen.ImportAssistant;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IPackageFragmentRoot;
import org.eclipse.jdt.core.JavaModelException;

/**
 * Copy of GenModelImpl functionality
 */
public class ImportUtil implements ImportAssistant {
	private final ImportManager myImportManager;
	private final String myPackageName;
	private final String myUnitName;

	private StringBuffer importStringBuffer;

	private int importInsertionPoint;

	public ImportUtil(String compilationUnitPackage, String compilationUnitName, IPackageFragmentRoot sourceRoot) {
		this(compilationUnitPackage, compilationUnitName);
		if (sourceRoot != null) {
			ICompilationUnit existingCU = sourceRoot.getPackageFragment(compilationUnitPackage).getCompilationUnit(compilationUnitName + ".java");	//$NON-NLS-1$
			if (existingCU.exists()) {
				try {
					myImportManager.addCompilationUnitImports(existingCU.getSource());
				} catch (JavaModelException e) {
					//Ignore. The compilation unit imports will not be added, but we may proceed.
				}
			}
		}
	}

	public ImportUtil(String compilationUnitPackage, String compilationUnitName) {
		assert compilationUnitName != null && compilationUnitName.trim().length() > 0;
		myImportManager = new ImportManager(compilationUnitPackage);
		// although addMasterImport implementation doesn't handle no package case correctly
		// it makes no difference to us as we just need to mark CU name as occupied
		myImportManager.addMasterImport(compilationUnitPackage == null ? "" : compilationUnitPackage, compilationUnitName);
		myPackageName = compilationUnitPackage;
		myUnitName = compilationUnitName;
	}

	public void emitPackageStatement(StringBuffer stringBuffer) {
		if (myPackageName == null || myPackageName.trim().length() == 0) {
			return;
		}
		stringBuffer.append("\npackage ");
		stringBuffer.append(myPackageName);
		stringBuffer.append(';');
	}

	public String getCompilationUnitName() {
		return myUnitName;
	}

	public void markImportLocation(StringBuffer stringBuffer, GenPackage genPackage) {
		markImportLocation(stringBuffer);
		myImportManager.addJavaLangImports(genPackage.getJavaLangConflicts());
	}

	public void markImportLocation(StringBuffer stringBuffer) {
		importStringBuffer = stringBuffer;
		importInsertionPoint = stringBuffer.length();
		myImportManager.addCompilationUnitImports(stringBuffer.toString());
	}

	public void emitSortedImports() {
		String NL = System.getProperties().getProperty("line.separator");
		StringBuffer importsBuf = new StringBuffer();

		String previousPackageName = null;
		for (String importName : myImportManager.getImports()) {
			int index = importName.lastIndexOf(".");
			if (index != -1) {
				String packageName = importName.substring(0, index);
				if (previousPackageName != null && !previousPackageName.equals(packageName)) {
					importsBuf.append(NL);
				}
				previousPackageName = packageName;
			}
			importsBuf.append(NL + "import " + importName + ";");
		}

		importStringBuffer.insert(importInsertionPoint, importsBuf.toString());
	}

	// one from GenModelImpl
	public String getImportedName(String qualifiedName) {
		if (qualifiedName.equals(CodeGenUtil.getSimpleClassName(qualifiedName))){
			// initially a HACK for inner ScalablePolygon, though makes sense regardless of that -
			// there's no sense to import classes from default package
			return qualifiedName;
		}
		
	    int index = qualifiedName.indexOf("<");
	    if (index >= 0) {
			String baseName = qualifiedName.substring(0, index);
			StringBuilder result = new StringBuilder(getImportedName(baseName));
			result.append("<");
			for (int start = ++index, end = qualifiedName.lastIndexOf(">") + 1; index < end; ++index) {
				char character = qualifiedName.charAt(index);
				switch (character) {
				case ' ':
				case ',':
				case '<':
				case '>':
				case '&': {
					if (start != index) {
						String segment = qualifiedName.substring(start, index);
						result.append(getImportedName(segment));
					}
					result.append(character);
					start = index + 1;
					break;
				}
				default: {
					break;
				}
				}
			}
			return result.toString();
		}
		
		index = qualifiedName.indexOf("$");
		myImportManager.addImport(index == -1 ? qualifiedName : qualifiedName.substring(0, index));
		return myImportManager.getImportedName(qualifiedName);
	}

	public void addImport(String qualifiedName) {
		myImportManager.addImport(qualifiedName);
	}

	public void registerInnerClass(String innerClassName) {
		myImportManager.addPseudoImport(innerClassName);
	}

	public void addImport(String packageName, String shortName) {
		myImportManager.addImport(packageName, shortName);
	}
}
@


1.6
log
@EMF 2.3 M5 and Java 5 cleanup
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
@


1.5
log
@suppress unchecked warning
@
text
@a13 2
import java.util.Iterator;

a70 1
	@@SuppressWarnings("unchecked")
d87 1
a87 2
		for (Iterator iter = myImportManager.getImports().iterator(); iter.hasNext();) {
			String importName = (String) iter.next();
@


1.4
log
@Modifying importing logic in accordance with latest GenModelImpl from EMF supporting generics.
@
text
@d73 1
@


1.3
log
@On regeneration, do not generate imports that conflict with those already present in the compilation unit, use FQNs instead (currently, only in Lite Generator to prove the concept) + Test
@
text
@d112 31
a142 1
		int index = qualifiedName.indexOf("$");
@


1.2
log
@[154687] mgolubev - Support scalable polygons
@
text
@d20 3
d36 14
@


1.1
log
@Emitter became top-level entity (TextEmitter), oddness of JetAdapter and Emitter api were cleared.
GeneratorBase lost knowledge about JET.
Parts of gmf.common made internal to avoid possible API issues.
ImportAssistant refactored to know name of compilation unit to avoid problems like #134506.
FigureGenerator's reuse of ImportAssistant removed.
[mgolubev] Tests for #134506 and 142553
@
text
@d17 1
d90 5
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@


