head	1.6;
access;
symbols
	v20081015-1925:1.6
	v20080924-1925:1.6
	v20070518-1300:1.5
	v20070427-0600:1.5
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070405-1100:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20070307-0700:1.5
	v20070301-1200:1.5
	v20070228-2000:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.4
	M1_20:1.2
	v20060904-1500:1.2;
locks; strict;
comment	@# @;


1.6
date	2007.05.18.20.39.13;	author atikhomirov;	state dead;
branches;
next	1.5;
commitid	58f6464e0ef14567;

1.5
date	2006.11.06.18.32.10;	author radvorak;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.21.13.16.00;	author radvorak;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.05.23.40.46;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.04.09.35.18;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.29.17.46.28;	author radvorak;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[187811] akarjakina - Migration support refactored
@
text
@/*
 * Copyright (c) 2005 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: Radek Dvorak (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.common.migrate;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.Resource.Factory;
import org.eclipse.emf.ecore.resource.impl.ResourceFactoryRegistryImpl;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.gmf.internal.common.ToolingResourceFactory;

/**
 * Utility class providing model migration related functionality.
 */
public class MigrationUtil {
	
	private MigrationUtil() {
	}
	
	/**
	 * Creates and loads the given resource and forces migration to be performed at load-time.<p>
	 * <code>Note:</code>No runtime exception is thrown, all detected problems are recorded 
	 * as {@@link Resource.Diagnostic}.
	 *  
	 * @@param modelResourceURI the resource uri containing the model to migrate
	 * 
	 * @@return model-load-helper encapsulating the resource and its in-memory migrated contents.
	 */
	public static ModelLoadHelper migrateModel(URI modelResourceURI) {
		if(modelResourceURI == null) {
			throw new IllegalArgumentException("null resource uri"); //$NON-NLS-1$
		}
		ResourceSetImpl rset = new ResourceSetImpl();
		rset.setResourceFactoryRegistry(new ResourceFactoryRegistryImpl() {			
			public Factory getFactory(URI uri) {
				return new ToolingResourceFactory() {
					public Resource createResource(URI uri) {
						return new MigrationResource(uri);
					}
				};
			}
		});

		ModelLoadHelper loadHelper = new ModelLoadHelper(rset, modelResourceURI);
		return loadHelper;
	}	
	
	/**
	 * Creates resource diagnostic wrapping the given message.
	 * @@param resource the resource associated with the created diagnostic
	 * @@param message non-<code>null</code> message text to be wrapped as diagnostic
	 * 
	 * @@return diagnostic object
	 */
	public static MigrationDiagnostic createMessageDiagnostic(Resource resource, final String message) {
		final String location = resource.getURI() == null ? null : resource.getURI().toString();
		return new MigrationDiagnostic() {

			public String getMessage() {
				return message;
			}

			public String getLocation() {
				return location;
			}

			public int getColumn() {
				return 0;
			}

			public int getLine() {
				return 0;
			}
		};
	}
	
	/**
	 * Just a marker interface for diagnostic notification messages
	 */
	public interface MigrationDiagnostic extends Resource.Diagnostic {		
	}
}

@


1.5
log
@[163243] Improve problem reporting of tooling actions TransformGenModel, codegeneration ...
- use DiagnosticsDialog for error processing
@
text
@@


1.4
log
@#157836 Feature-based model migration patches should NOT use object identity equals() on metamodel
@
text
@a12 3
import java.io.IOException;
import java.util.Collections;

a13 1
import org.eclipse.emf.common.util.WrappedException;
d34 2
a35 1
	 * @@return resource in loaded state.
d37 1
a37 1
	public static Resource migrateModel(URI modelResourceURI) {
d52 2
a53 17
		Resource resource = rset.createResource(modelResourceURI);
		assert resource != null;
		
		Resource.Diagnostic loadException = null;
		try {
			resource.load(Collections.EMPTY_MAP);				
		} catch (IOException e) {
			loadException = createDiagnostic(resource, e);		
		} catch (RuntimeException e) {
			loadException = createDiagnostic(resource, e);
		}

		if(loadException != null) {			
			logException(resource, loadException);
		}

		return resource;
a85 39
	 * Creates resource diagnostic wrapping the given exception.
	 * @@param resource the resource associated with the created diagnostic
	 * @@param exception non-<code>null</code> exception to be wrapped as diagnostic
	 * 
	 * @@return diagnostic object
	 */
	public static Resource.Diagnostic createDiagnostic(Resource resource, Exception exception) {
		if(exception == null) {
			throw new IllegalArgumentException("null diagnostic exception"); //$NON-NLS-1$
		}
		final String location = resource.getURI() == null ? null : resource.getURI().toString();
		class ExceptionDiagnostic extends WrappedException implements Resource.Diagnostic {
			
			public ExceptionDiagnostic(Exception exception) {
				super(exception);
			}

			public String getLocation() {
				return location;
			}

			public int getColumn() {
				return 0;
			}

			public int getLine() {
				return 0;
			}
		}
		
		return new ExceptionDiagnostic(exception);
	};

	@@SuppressWarnings("unchecked")
	private static void logException(Resource resource, Resource.Diagnostic exception) {
		resource.getErrors().add(exception);
	}
	
	/**
@


1.3
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
- updating gmfgen
@
text
@d45 1
a45 2
		rset.setResourceFactoryRegistry(new ResourceFactoryRegistryImpl() {
			
d47 3
a49 9
				String modelFileExt = uri.fileExtension();
				if(modelFileExt != null) {
					MigrationConfig config = MigrationConfig.Registry.INSTANCE.getConfig(modelFileExt);
					if(config != null) {
						return new ToolingResourceFactory() {
							public Resource createResource(URI uri) {
								return new MigrationResource(uri);
							}
						};
d51 1
a51 2
				}
				return super.getFactory(uri);
@


1.2
log
@Get rid of Java 5 type-safety warnings
@
text
@d89 1
a89 1
	public static Resource.Diagnostic createMessageDiagnostic(Resource resource, final String message) {
d91 1
a91 1
		return new Resource.Diagnostic() {
d149 6
@


1.1
log
@#154698 Support migration of GMF tooling models in case of backward incomatible changes
@
text
@d76 1
a76 1
			resource.getErrors().add(loadException);
d80 1
a80 1
	}
d145 4
@

