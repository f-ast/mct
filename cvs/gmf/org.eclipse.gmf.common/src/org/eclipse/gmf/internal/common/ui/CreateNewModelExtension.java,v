head	1.3;
access;
symbols
	v20081015-1925:1.3
	v20080930-1130:1.3
	v20080926-1245:1.3
	v20080924-1925:1.3
	v20080722-1827:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080521:1.3
	v20080516-1143:1.3
	v20080508-2000:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20071108-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20070307-0700:1.3
	v20070301-1200:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.09.22.18.30.15;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.22.17.19.58;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.21.15.29.00;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.3
log
@allow to extend page validation
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.common.ui;

import java.util.Observable;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;

/**
 * @@author dstadnik
 */
public class CreateNewModelExtension extends Observable implements ModelSelectionPageExtension {

	private final ModelSelectionPage page;

	private boolean createNewModel;

	public CreateNewModelExtension(ModelSelectionPage page) {
		this.page = page;
	}

	public final boolean shouldCreateNewModel() {
		return createNewModel;
	}

	protected void setCreateNewModel(boolean value) {
		if (createNewModel == value) {
			return;
		}
		this.createNewModel = value;
		page.setReadOnly(value);
		page.validatePage();
		setChanged();
		notifyObservers(Boolean.valueOf(createNewModel));
	}

	protected String getLabelText() {
		return Messages.CreateNewModelExtensionCreateNewModel;
	}

	public void createControl(Composite parent) {
		final Button btn = new Button(parent, SWT.CHECK);
		btn.setText(getLabelText());
		btn.setSelection(createNewModel);
		btn.addSelectionListener(new SelectionListener() {

			public void widgetDefaultSelected(SelectionEvent e) {
			}

			public void widgetSelected(SelectionEvent e) {
				setCreateNewModel(btn.getSelection());
			}
		});
	}

	public void setResource(Resource resource) {
	}

	public void validatePage() {
		if (!page.isModelRequired()) {
			return;
		}
		if (createNewModel) {
			page.setPageComplete(true);
		} else {
			page.setPageComplete(page.getResource() != null);
		}
	}
}
@


1.2
log
@issue notifications when contents are changed
@
text
@d46 1
d72 11
@


1.1
log
@add extension to create new model
@
text
@d14 2
d26 1
a26 1
public class CreateNewModelExtension implements ModelSelectionPageExtension {
a29 2
	private Button btn;

a44 3
		if (btn != null) {
			btn.setSelection(value);
		}
d46 2
d55 1
a55 1
		btn = new Button(parent, SWT.CHECK);
@

