head	1.9;
access;
symbols
	v20081015-1925:1.9
	v20080930-1130:1.9
	v20080926-1245:1.9
	v20080924-1925:1.9
	v20080722-1827:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.4
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080521:1.9
	v20080516-1143:1.9
	v20080508-2000:1.9
	v20080417-1610:1.9
	v20080322-0000:1.9
	v20080222-1200:1.9
	v20071108-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070520-1200:1.9
	v20070518-1300:1.9
	v20070427-0600:1.9
	v20070420-1000:1.9
	v20070413-1300:1.8
	v20070405-1100:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20070307-0700:1.8
	v20070301-1200:1.8
	v20070228-2000:1.8
	v20070221-1500:1.8
	v20070208-1800:1.8
	M4_20:1.8
	v20061222-1800:1.8
	v20061214-0000:1.8
	v20061120-1300:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061013-1330:1.8
	M1_20:1.1
	v20060904-1500:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2007.04.18.12.29.17;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	777d46260f1d4567;

1.8
date	2006.09.22.17.18.29;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.09.21.15.51.21;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.21.12.32.10;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.19.14.46.33;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.07.17.41.01;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.07.14.39.20;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.04.18.15.58;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.28.13.18.04;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.9
log
@overriding method to pass constant value is not a good approach
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.common.ui;

import java.util.LinkedHashMap;
import java.util.Map;

import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.swt.widgets.Composite;

/**
 * @@author dstadnik
 */
public class ExtensibleModelSelectionPage extends ModelSelectionPage {

	private Map<String, ModelSelectionPageExtension> extensions; // id -> extension

	public ExtensibleModelSelectionPage(String pageId, ResourceLocationProvider rloc, ResourceSet resourceSet) {
		this(pageId, rloc, resourceSet, null);
	}

	public ExtensibleModelSelectionPage(String pageId, ResourceLocationProvider rloc, ResourceSet resourceSet, String modelFileExtension) {
		super(pageId, rloc, resourceSet, modelFileExtension);
		extensions = new LinkedHashMap<String, ModelSelectionPageExtension>();
		addExtensions();
	}

	protected void addExtensions() {
	}

	public void addExtension(String id, ModelSelectionPageExtension extension) {
		assert id != null;
		assert extension != null;
		assert getControl() == null;
		extensions.put(id, extension);
	}

	public ModelSelectionPageExtension getExtension(String id) {
		return extensions.get(id);
	}

	@@Override
	public void createAdditionalControls(Composite parent) {
		for (ModelSelectionPageExtension extension : extensions.values()) {
			extension.createControl(parent);
		}
	}

	@@Override
	protected void resourceChanged() {
		for (ModelSelectionPageExtension extension : extensions.values()) {
			extension.setResource(getResource());
		}
	}
}
@


1.8
log
@add override
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
d28 5
a32 1
		super(pageId, rloc, resourceSet);
@


1.7
log
@allow to use shared resultset
@
text
@d47 1
@


1.6
log
@set page to require model to be selected
@
text
@d17 1
d27 2
a28 2
	public ExtensibleModelSelectionPage(String pageId, ResourceLocationProvider rloc) {
		super(pageId, rloc);
@


1.5
log
@add copyright header
@
text
@a16 1
import org.eclipse.emf.ecore.resource.Resource;
d52 2
a53 2
	protected void setResource(Resource resource) {
		super.setResource(resource);
d55 1
a55 1
			extension.setResource(resource);
@


1.4
log
@#156534 Consider selected file in model selection page
@
text
@d1 11
@


1.3
log
@use foreach loops
@
text
@d16 2
a17 2
	public ExtensibleModelSelectionPage(String pageId) {
		super(pageId);
d36 1
a36 3
	public void createControl(Composite parent) {
		super.createControl(parent);
		Composite control = (Composite) getControl();
d38 1
a38 1
			extension.createControl(control);
@


1.2
log
@use generics wherever possible
@
text
@a2 1
import java.util.Iterator;
d39 2
a40 2
		for (Iterator it = extensions.values().iterator(); it.hasNext();) {
			((ModelSelectionPageExtension) it.next()).createControl(control);
d46 2
a47 2
		for (Iterator it = extensions.values().iterator(); it.hasNext();) {
			((ModelSelectionPageExtension) it.next()).setResource(resource);
@


1.1
log
@#155014 Default gmfmap model creation wizard should create initial content
@
text
@d15 1
a15 1
	private Map extensions; // id -> extension
d19 1
a19 1
		extensions = new LinkedHashMap();
d34 1
a34 1
		return (ModelSelectionPageExtension) extensions.get(id);
@

