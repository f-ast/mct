head	1.5;
access;
symbols
	v20081015-1925:1.5
	v20080930-1130:1.5
	v20080926-1245:1.5
	v20080924-1925:1.5
	v20080722-1827:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080610-1132:1.5
	v20080521:1.4
	v20080516-1143:1.4
	v20080508-2000:1.4
	v20080417-1610:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20071108-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070520-1200:1.4
	v20070518-1300:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20070307-0700:1.3
	v20070301-1200:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2008.06.05.11.42.18;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	24174847d1194567;

1.4
date	2007.05.18.22.54.23;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	2a4e464e2e9f4567;

1.3
date	2007.01.31.19.02.42;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	3e1c45c0e7d24567;

1.2
date	2007.01.31.18.29.29;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	5f9d45c0e0044567;

1.1
date	2007.01.31.17.20.45;	author atikhomirov;	state Exp;
branches;
next	;
commitid	27e445c0cfec4567;


desc
@@


1.5
log
@[150177] Use dynamic EMF model instead of generated code - tests.
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.common.codegen;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.gmf.common.codegen.ImportAssistant;
import org.eclipse.gmf.internal.xpand.BufferOutput;
import org.eclipse.gmf.internal.xpand.ResourceManager;
import org.eclipse.gmf.internal.xpand.XpandFacade;
import org.eclipse.gmf.internal.xpand.expression.EvaluationException;
import org.eclipse.gmf.internal.xpand.expression.Variable;
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;
import org.eclipse.gmf.internal.xpand.util.ContextFactory;

/**
 * @@author artem
 */
public class XpandTextEmitter implements TextEmitter {
	private final ResourceManager myResourceManager;
	private final String myTemplateFQN;
	private final ClassLoader myContext;
	private final List<Variable> myGlobals;

	public XpandTextEmitter(ResourceManager manager, String templateFQN, ClassLoader context) {
		this(manager, templateFQN, context, null);
	}

	public XpandTextEmitter(ResourceManager manager, String templateFQN, ClassLoader context, Map<String, Object> globals) {
		assert manager != null && templateFQN != null;
		myResourceManager = manager;
		myTemplateFQN = templateFQN;
		myContext = context;
		if (globals != null && globals.size() > 0) {
			myGlobals = new ArrayList<Variable>(globals.size());
			for (Map.Entry<String, Object> e : globals.entrySet()) {
				myGlobals.add(new Variable(e.getKey(), e.getValue()));
			}
		} else {
			myGlobals = Collections.<Variable>emptyList();
		}
	}

	public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException {
		if (monitor != null && monitor.isCanceled()) {
			throw new InterruptedException();
		}
		try {
			StringBuilder result = new StringBuilder();
			new XpandFacade(createContext(result)).evaluate(myTemplateFQN, extractTarget(arguments), extractArguments(arguments));
			return result.toString();
		} catch (EvaluationException ex) {
			throw new InvocationTargetException(ex);
		}
	}

	protected Object extractTarget(Object[] arguments) {
		assert arguments != null && arguments.length > 0;
		return arguments[0];
	}

	protected Object[] extractArguments(Object[] arguments) {
		assert arguments != null && arguments.length > 0;
		ArrayList<Object> res = new ArrayList<Object>(arguments.length);
		// strip first one off, assume it's target
		for (int i = 1; i < arguments.length; i++) {
			if (false == arguments[i] instanceof ImportAssistant) {
				// strip assistant off
				res.add(arguments[i]);
			}
		}
		return res.toArray();
	}

	private XpandExecutionContext createContext(StringBuilder result) {
		final BufferOutput output = new BufferOutput(result);
		return ContextFactory.createXpandContext(myResourceManager, output, myGlobals, myContext);
	}
}@


1.4
log
@minor beautify
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d17 2
d37 1
d40 4
d48 8
d91 1
a91 1
		return ContextFactory.createXpandContext(myResourceManager, output, Collections.<Variable>emptyList(), myContext);
@


1.3
log
@handle cancellation
throw expected exception in case of missed template
@
text
@a16 1
import java.util.List;
d76 1
a76 2
		final List<Variable> globals = Collections.emptyList();
		return ContextFactory.createXpandContext(myResourceManager, output, globals, myContext);
@


1.2
log
@move implementation-specific parameter wrapping logic to appropriate emitter
@
text
@a19 1
import org.eclipse.gmf.common.UnexpectedBehaviourException;
d24 1
d44 11
a54 4
	public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
		StringBuilder result = new StringBuilder();
		new XpandFacade(createContext(result)).evaluate(myTemplateFQN, extractTarget(arguments), extractArguments(arguments));
		return result.toString();
@


1.1
log
@move XpandTextEmitter out from codegen to common plugin
@
text
@d46 1
a46 4
		// JET gets single Object as an argument, and that's Object[] {diagram, importUtil} in our case.
		// FIXME it's JETEmitterAdapter's role to wrap Object[] into single Object passed to emitter, not XpandEmitter's
		Object[] actualArguments = arguments != null && arguments.length == 1 && arguments[0] instanceof Object[] ? (Object[]) arguments[0] : arguments;
		new XpandFacade(createContext(result)).evaluate(myTemplateFQN, extractTarget(actualArguments), extractArguments(actualArguments));
@

