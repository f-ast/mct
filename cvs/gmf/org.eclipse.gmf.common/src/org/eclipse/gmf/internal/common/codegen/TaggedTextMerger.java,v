head	1.4;
access;
symbols
	v20081015-1925:1.4
	v20080930-1130:1.4
	v20080926-1245:1.4
	v20080924-1925:1.4
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080610-1132:1.4
	v20080521:1.4
	v20080516-1143:1.4
	v20080508-2000:1.4
	v20080417-1610:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20071108-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20070307-0700:1.2
	v20070301-1200:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	M1_20:1.2
	v20060904-1500:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.06.21.14.13.35;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	1e3f467a878e4567;

1.3
date	2007.03.19.16.49.09;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	5cce45febf044567;

1.2
date	2006.09.01.16.03.18;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.21.13.48.46;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.4
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Dmitri Stadnik (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.common.codegen;

import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * @@author dstadnik
 */
public class TaggedTextMerger {

	private String beginTag;

	private String endTag;

	public TaggedTextMerger(String beginTag, String endTag) {
		this.beginTag = beginTag;
		this.endTag = endTag;
	}

	public String getBeginTag() {
		return beginTag;
	}

	public String getEndTag() {
		return endTag;
	}

	public String process(String oldText, String newText) {
		int bpos = newText.indexOf(getBeginTag());
		if (bpos < 0) {
			// TODO : warn user of missed region anchor in new text
			return newText;
		}
		int epos = newText.indexOf(getEndTag());
		if (epos < 0 || epos <= bpos) {
			// TODO : warn user of unclosed region anchor
			return newText;
		}
		StringBuffer sb = new StringBuffer();
		try {
			RegionsIterator regions = new RegionsIterator(oldText);
			if (regions.hasNext()) {
				do {
					sb.append(regions.next());
				} while (regions.hasNext());
			} else {
				// add anchor text if there were no regions in old text
				// this way we'll preserve original template in new text
				sb.append(newText.substring(bpos + getBeginTag().length(), epos));
			}
		} catch (NoSuchElementException nsee) {
			// TODO : warn user of invalid regions in old text
			return newText;
		}
		return newText.substring(0, bpos + getBeginTag().length()) + sb.toString() + newText.substring(epos);
	}

	protected class RegionsIterator implements Iterator<String> {

		private String text;

		private int offset;

		public RegionsIterator(String text) {
			assert text != null;
			this.text = text;
		}

		public boolean hasNext() {
			return text.indexOf(getBeginTag(), offset) > 0;
		}

		public String next() {
			int bpos = text.indexOf(getBeginTag(), offset);
			if (bpos < 0) {
				throw new NoSuchElementException();
			}
			int epos = text.indexOf(getEndTag(), bpos + getBeginTag().length());
			if (epos < 0) {
				throw new NoSuchElementException();
			}
			offset = epos + getEndTag().length();
			return text.substring(bpos + getBeginTag().length(), epos);
		}

		public void remove() {
			throw new UnsupportedOperationException();
		}
	}
}
@


1.3
log
@EMF 2.3 M5 and Java 5 cleanup
@
text
@d1 10
@


1.2
log
@refactoring: abstract use of JMerge for merging away from generator services (GeneratorBase)
@
text
@d41 1
a41 1
			Iterator regions = new RegionsIterator(oldText);
d58 1
a58 1
	protected class RegionsIterator implements Iterator {
d73 1
a73 1
		public Object next() {
@


1.1
log
@add file merge support for other text files (!java)
@
text
@d9 1
a9 1
public class TaggedTextMerger extends TextMerger {
@

