head	1.8;
access;
symbols
	v20080924-1925:1.8
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.6
	v20060925-1700:1.4
	v20060919-0800:1.4
	M1_20:1.5
	v20060904-1500:1.5
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2006.11.24.16.19.41;	author dstadnik;	state dead;
branches;
next	1.7;
commitid	bf145671b9d4567;

1.7
date	2006.11.22.17.34.12;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	112b45648a134567;

1.6
date	2006.09.22.18.32.21;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.01.19.43.09;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.16.14.59.29;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.03.16.50.25;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.03.15.14.01;	author rgronback;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.28.19.07.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[142460] Inconsistent buttons in GMFMap creation wizard
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards;

import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.gmf.internal.bridge.ui.Plugin;
import org.eclipse.gmf.internal.bridge.wizards.pages.EntriesPage;
import org.eclipse.gmf.internal.bridge.wizards.pages.InputPage;
import org.eclipse.gmf.internal.bridge.wizards.pages.Messages;
import org.eclipse.gmf.internal.bridge.wizards.pages.NewMapFileCreationPage;
import org.eclipse.gmf.internal.bridge.wizards.pages.OldWizardInput;
import org.eclipse.gmf.internal.bridge.wizards.pages.RootElementPage;
import org.eclipse.gmf.internal.bridge.wizards.pages.WizardInput;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.actions.WorkspaceModifyOperation;

/**
 * @@author artem
 */
public class NewGMFMapModelWizard extends Wizard implements INewWizard {

	protected IStructuredSelection mySelection;

	protected final OldWizardInput myHolder;

	private IWorkbench myWorkbench;

	public NewGMFMapModelWizard() {
		setNeedsProgressMonitor(true);
		setWindowTitle(Messages.wizardTitle);
		myHolder = new OldWizardInput();
	}

	public void addPages() {
		addNewFilePage();
		addSelectInputPage();
		addSelectRootPage();
		addDoMapPage();
	}

	protected void addNewFilePage() {
		addPage(new NewMapFileCreationPage(mySelection, myHolder));
	}

	protected void addSelectInputPage() {
		addPage(new InputPage(myHolder));
	}

	protected void addSelectRootPage() {
		addPage(new RootElementPage(myHolder));
	}

	protected void addDoMapPage() {
		addPage(new EntriesPage(myHolder));
	}

	public void init(IWorkbench workbench, IStructuredSelection selection) {
		myWorkbench = workbench;
		mySelection = selection;
		initDefaultFileNames();
	}

	private void initDefaultFileNames() {
		IFile f = WizardUtil.findExistingFile(mySelection, WizardInput.ECORE_FILE_EXT);
		if (myHolder.getInitialECoreFile() == null && f != null) {
			myHolder.setInitialECoreFile(URI.createPlatformResourceURI(f.getFullPath().toString(), true).toString());
		}
		f = WizardUtil.findExistingFile(mySelection, WizardInput.GRAPHDEF_FILE_EXT);
		if (myHolder.getInitialGraphFile() == null && f != null) {
			myHolder.setInitialGraphFile(URI.createPlatformResourceURI(f.getFullPath().toString(), true).toString());
		}
		f = WizardUtil.findExistingFile(mySelection, WizardInput.TOOLDEF_FILE_EXT);
		if (myHolder.getInitialToolFile() == null && f != null) {
			myHolder.setInitialToolFile(URI.createPlatformResourceURI(f.getFullPath().toString(), true).toString());
		}
	}

	public boolean performFinish() {
		WorkspaceModifyOperation operation = new WorkspaceModifyOperation() {
			protected void execute(IProgressMonitor progressMonitor) {
				try {
					Map<String, Object> options = new HashMap<String, Object>();
					options.put(XMLResource.OPTION_ENCODING, "UTF-8"); //$NON-NLS-1$
					myHolder.getMapping().eResource().save(options);
					if (myHolder.isNewBlankToolDef()) {
						myHolder.getToolDef().eResource().save(options);
					}
				} catch (Exception ex) {
					Plugin.log(ex);
				} finally {
					progressMonitor.done();
				}
			}
		};

		try {
			getContainer().run(false, false, operation);
			WizardUtil.selectReveal(myWorkbench, new StructuredSelection(getModelFile()));
			WizardUtil.openInEditor(myWorkbench, getModelFile());
		} catch (InvocationTargetException ex) {
			return false;
		} catch (InterruptedException ex) {
			return false;
		} catch (PartInitException ex) {
			Plugin.log(ex);
		}
		return true;
	}

	public IFile getModelFile() {
		return myHolder.getMappingFile();
	}

	public WizardInput getWizardInput() {
		return myHolder;
	}

}
@


1.7
log
@Removing warnings
@
text
@@


1.6
log
@#142460 Inconsistent buttons in GMFMap creation wizard
@
text
@d87 1
a87 1
			myHolder.setInitialECoreFile(URI.createPlatformResourceURI(f.getFullPath().toString()).toString());
d91 1
a91 1
			myHolder.setInitialGraphFile(URI.createPlatformResourceURI(f.getFullPath().toString()).toString());
d95 1
a95 1
			myHolder.setInitialToolFile(URI.createPlatformResourceURI(f.getFullPath().toString()).toString());
@


1.5
log
@use generics wherever possible
@
text
@d27 1
d45 1
a45 1
	protected final WizardInput myHolder;
d52 1
a52 1
		myHolder = new WizardInput();
@


1.4
log
@respect selection and set filenames according to existing files
@
text
@d102 1
a102 1
					Map options = new HashMap();
@


1.3
log
@option to create tooling definition as part of mapping process
@
text
@d20 1
d80 16
d103 1
a103 1
					options.put(XMLResource.OPTION_ENCODING, "UTF-8");
@


1.2
log
@Changes to accomodate forthcoming tutorial cheatsheet.
@
text
@d88 3
@


1.1
log
@Introduced separate plugin for Tooling UI, moved mapping wizard of #114186 to this plugin.
Wizard got some NLS, respect selection, open-created-model-in-editor improvements as well as aligned with recent gmfmap changes.
Plus, some refactorings to address user-prioritized strategies to select nodes/links doubled number of classes we had.
@
text
@d113 5
@

