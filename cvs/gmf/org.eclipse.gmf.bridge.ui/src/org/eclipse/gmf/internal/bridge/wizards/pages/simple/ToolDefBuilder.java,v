head	1.3;
access;
symbols
	v20080924-1925:1.3
	v20080722-1827:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080207-0207:1.3
	v20071124-0000:1.3
	v20071108-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070420-1000:1.3
	v20070413-1300:1.2
	v20070405-2000:1.2
	v20070330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.04.17.08.45.27;	author dstadnik;	state Exp;
branches;
next	1.2;
commitid	6ec5462489254567;

1.2
date	2007.03.14.12.59.33;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	114b45f7f1b34567;

1.1
date	2006.09.19.12.19.40;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.3
log
@use enum for resolution
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards.pages.simple;

import java.util.Iterator;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.gmf.internal.bridge.wizards.WizardUtil;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.ResolvedItem.Resolution;
import org.eclipse.gmf.internal.common.IncrementalNamesDispenser;
import org.eclipse.gmf.internal.common.NamesDispenser;
import org.eclipse.gmf.tooldef.AbstractTool;
import org.eclipse.gmf.tooldef.CreationTool;
import org.eclipse.gmf.tooldef.GMFToolFactory;
import org.eclipse.gmf.tooldef.GMFToolPackage;
import org.eclipse.gmf.tooldef.Palette;
import org.eclipse.gmf.tooldef.ToolGroup;
import org.eclipse.gmf.tooldef.ToolRegistry;

/**
 * @@author dstadnik
 */
public class ToolDefBuilder {

	protected final ToolRegistry existingToolRegistry;

	protected GMFToolFactory gmfToolFactory = GMFToolPackage.eINSTANCE.getGMFToolFactory();

	protected NamesDispenser namesDispenser = new IncrementalNamesDispenser();

	protected ToolRegistry toolRegistry;

	protected ToolGroup group;

	public ToolDefBuilder(ToolRegistry existingToolRegistry) {
		this.existingToolRegistry = existingToolRegistry;
	}

	public static CreationTool getCreationTool(Iterator<EObject> source, EObject domainElement) {
		String name = WizardUtil.getCapName(domainElement);
		if (name == null) {
			return null;
		}
		return getCreationTool(source, name);
	}

	public static CreationTool getCreationTool(Iterator<EObject> source, String domainObjectName) {
		while (source.hasNext()) {
			Object next = source.next();
			if (next instanceof CreationTool && domainObjectName.equals(((CreationTool) next).getTitle())) {
				return (CreationTool) next;
			}
		}
		return null;
	}

	protected String getUniqueName(String semanticPart) {
		return namesDispenser.get(semanticPart);
	}

	protected String getUniqueName(String semanticPart, String suffixPart) {
		return namesDispenser.get(semanticPart, suffixPart);
	}

	protected void addExistingName(String name) {
		if (name != null) {
			namesDispenser.add(name);
		}
	}

	protected void addExistingNames(ToolRegistry toolRegistry) {
		for (Iterator<EObject> it = toolRegistry.eAllContents(); it.hasNext();) {
			EObject next = it.next();
			if (next instanceof AbstractTool) {
				addExistingName(((AbstractTool) next).getTitle());
			}
		}
	}

	@@SuppressWarnings("unchecked")
	public ToolRegistry process(ResolvedItem item) {
		if (existingToolRegistry == null) {
			toolRegistry = gmfToolFactory.createToolRegistry();
		} else {
			toolRegistry = existingToolRegistry;
			addExistingNames(existingToolRegistry);
		}
		if (item != null) {
			EPackage ePackage = (EPackage) item.getDomainRef();
			Palette palette = toolRegistry.getPalette();
			if (palette == null) {
				palette = gmfToolFactory.createPalette();
				palette.setTitle(getUniqueName(ePackage.getName(), Messages.ToolDefBuilder1));
				toolRegistry.setPalette(palette);
			}
			group = null;
			for (Object tool : palette.getTools()) {
				if (tool instanceof ToolGroup) {
					group = (ToolGroup) tool;
					break;
				}
			}
			if (group == null) {
				group = gmfToolFactory.createToolGroup();
				group.setTitle(getUniqueName(ePackage.getName()));
				palette.getTools().add(group);
			}
			for (ResolvedItem child : item.getChildren()) {
				processContents(child);
			}
		}
		return toolRegistry;
	}

	protected void processContents(ResolvedItem item) {
		if (!item.isDisabled() && (item.getResolution() == Resolution.NODE || item.getResolution() == Resolution.LINK)) {
			String baseName = null;
			if (item.getDomainRef() instanceof EClass) {
				baseName = WizardUtil.getCapName((EClass) item.getDomainRef());
			} else if (item.getDomainRef() instanceof EReference) {
				baseName = WizardUtil.getCapName((EReference) item.getDomainRef());
			}
			if (baseName != null && baseName.length() > 0) {
				addCreationTool(baseName);
			}
		}
		for (ResolvedItem child : item.getChildren()) {
			processContents(child);
		}
	}

	@@SuppressWarnings("unchecked")
	protected CreationTool addCreationTool(String baseName) {
		CreationTool tool = gmfToolFactory.createCreationTool();
		tool.setTitle(getUniqueName(baseName));
		tool.setDescription(Messages.bind(Messages.ToolDefBuilder0, baseName));
		tool.setSmallIcon(gmfToolFactory.createDefaultImage());
		tool.setLargeIcon(gmfToolFactory.createDefaultImage());
		group.getTools().add(tool);
		return tool;
	}
}
@


1.2
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d21 1
@


1.1
log
@move pages and model of simple graph and tool wizards in dedicated package; provide i18n
@
text
@d50 1
a50 1
	public static CreationTool getCreationTool(Iterator source, EObject domainElement) {
d58 1
a58 1
	public static CreationTool getCreationTool(Iterator source, String domainObjectName) {
d83 2
a84 2
		for (Iterator it = toolRegistry.eAllContents(); it.hasNext();) {
			Object next = it.next();
@

