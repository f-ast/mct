head	1.4;
access;
symbols
	v20080924-1925:1.4
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.3
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060526-1200:1.2
	v20060519-0800:1.2
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.11.24.16.19.41;	author dstadnik;	state dead;
branches;
next	1.3;
commitid	bf145671b9d4567;

1.3
date	2006.09.22.18.32.21;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.16.11.56.04;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.28.19.07.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[142460] Inconsistent buttons in GMFMap creation wizard
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards.pages;

import java.util.Collection;
import java.util.Iterator;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Listener;

/**
 * @@author artem
 */
public class RootElementPage extends WizardPage implements Listener {

	private final OldWizardInput holder;
	private List elementsList;

	public RootElementPage(OldWizardInput input) {
		super("rootElementPage"); //$NON-NLS-1$
		holder = input;
		setTitle(Messages.rootPageTitle);
		setDescription(Messages.rootPageDesc);
		setPageComplete(false);
	}

	public void createControl(Composite parent) {
		Composite p = new Composite(parent, SWT.NONE);
		p.setLayout(new GridLayout(2, true));
		createGroup1(p);
		createGroup2(p);
		createHint(p);

		// add list of all containments
		// add palette/other visual info
		setControl(p);
	}

	public void setVisible(boolean visible) {
		super.setVisible(visible);
		if (visible) {
			populateElementsList();
		}
	}

	private void populateElementsList() {
		Collection el = holder.getCanvasElementCandidates();
		String[] items = new String[el.size()];
		int i = 0;
		for (Iterator it = el.iterator(); it.hasNext(); i++) {
			EClass next = (EClass) it.next();
			items[i] = next.getName();
		}
		elementsList.setItems(items);
	}

	private Group createGroup1(Composite p) {
		Group group1 = new Group(p, SWT.NONE);
		group1.setLayout(new FillLayout());
		group1.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		group1.setText(Messages.rootPageGroupTitle);
		elementsList = new List(group1, SWT.SINGLE | SWT.BORDER | SWT.V_SCROLL);
		elementsList.addListener(SWT.Selection, this);
		return group1;
	}

	private void createGroup2(Composite p) {
		// just a placeholder for now
		new Canvas(p, SWT.NONE).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
	}

	private void createHint(Composite p) {
		Label l = new Label(p, SWT.WRAP);
		l.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
		l.setText(Messages.rootPageHint);
	}

	public void handleEvent(Event event) {
		if (-1 != elementsList.getSelectionIndex()) {
			holder.selectCanvasElement((EClass) holder.getCanvasElementCandidates().get(elementsList.getSelectionIndex()));
			holder.feedDefaultMapping();
			setPageComplete(true);
		}
	}
}
@


1.3
log
@#142460 Inconsistent buttons in GMFMap creation wizard
@
text
@@


1.2
log
@externalize strings, #136929 hint what's expected as diagram root
@
text
@d36 1
a36 1
	private final WizardInput holder;
d39 1
a39 1
	public RootElementPage(WizardInput input) {
@


1.1
log
@Introduced separate plugin for Tooling UI, moved mapping wizard of #114186 to this plugin.
Wizard got some NLS, respect selection, open-created-model-in-editor improvements as well as aligned with recent gmfmap changes.
Plus, some refactorings to address user-prioritized strategies to select nodes/links doubled number of classes we had.
@
text
@d23 1
d27 1
d51 3
a53 1
		setControl(p);
d56 1
d87 11
@

