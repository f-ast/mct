head	1.3;
access;
symbols
	v20080924-1925:1.3
	v20080722-1827:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080207-0207:1.3
	v20071124-0000:1.3
	v20071108-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070420-1000:1.3
	v20070413-1300:1.2
	v20070405-2000:1.2
	v20070330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.04.17.08.45.27;	author dstadnik;	state Exp;
branches;
next	1.2;
commitid	6ec5462489254567;

1.2
date	2007.03.14.12.59.33;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	114b45f7f1b34567;

1.1
date	2006.09.19.12.19.40;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.3
log
@use enum for resolution
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards.pages.simple;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.gmf.internal.bridge.resolver.ContainmentClosure;
import org.eclipse.gmf.internal.bridge.resolver.NodePattern;
import org.eclipse.gmf.internal.bridge.resolver.StructureResolver;
import org.eclipse.gmf.internal.bridge.resolver.TypeLinkPattern;
import org.eclipse.gmf.internal.bridge.resolver.TypePattern;
import org.eclipse.gmf.internal.bridge.ui.Plugin;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.ResolvedItem.Resolution;

/**
 * @@author dstadnik
 */
public class StructureBuilder {

	private final StructureResolver resolver;

	private final boolean withLabels;

	private final ContainmentClosure containmentClosure;

	public StructureBuilder(StructureResolver resolver, boolean withLabels) {
		this.resolver = resolver;
		this.withLabels = withLabels;
		containmentClosure = Plugin.getDefault().getContaintmentClosure();
	}

	public final boolean isWithLabels() {
		return withLabels;
	}

	/**
	 * Entry point to the structure builder. It walks over the domain model and builds resolutions tree.
	 */
	public ResolvedItem process(DomainModelSource dms) {
		ResolvedItem item = new ResolvedItem(null, dms.getContents(), null, ResolvedItem.NO_RESOLUTIONS, false); // root of the resolutions tree
		for (Iterator<EObject> it = dms.getContents().eAllContents(); it.hasNext();) {
			EObject next = it.next();
			if (next instanceof EClass) {
				item.addChild(process((EClass) next, dms));
			}
		}
		return item;
	}

	protected ResolvedItem process(EClass domainClass, DomainModelSource dms) {
		final EClass diagramClass = dms.getDiagramElement(); // containment root of diagram elements
		final EPackage domainPackage = dms.getContents();
		Resolution resolution;
		Resolution[] resolutions = ResolvedItem.NODE_LINK_RESOLUTIONS; // class may be resolved only as node or link
		TypePattern pattern = resolver.resolve(domainClass, domainPackage);
		if (pattern instanceof NodePattern) {
			resolution = Resolution.NODE;
			if (diagramClass != null && !containmentClosure.contains(diagramClass, domainClass, domainPackage)) {
				resolution = null; // class is not in diagram containment hierarchy
			}
		} else if (pattern instanceof TypeLinkPattern) {
			resolution = Resolution.LINK;
			if (diagramClass != null) {
				TypeLinkPattern linkPattern = (TypeLinkPattern) pattern;
				if (linkPattern.getSource() != null &&
						!containmentClosure.contains(diagramClass, linkPattern.getSource().getEReferenceType(), domainPackage)) {
					resolution = null; // source is not in diagram containment hierarchy
				}
				if (linkPattern.getTarget() != null &&
						!containmentClosure.contains(diagramClass, linkPattern.getTarget().getEReferenceType(), domainPackage)) {
					resolution = null; // target is not in diagram containment hierarchy
				}
			}
		} else {
			resolution = null;
			if (domainClass.isAbstract() || domainClass.isInterface()) {
				resolutions = ResolvedItem.NO_RESOLUTIONS;
			}
		}
		ResolvedItem item = new ResolvedItem(resolution, domainClass, pattern, resolutions, dms.isDisabled(domainClass));
		addLabels(item, domainClass, dms);
		addRefLinks(item, domainClass, dms);
		return item;
	}

	protected void addLabels(ResolvedItem typeItem, EClass type, DomainModelSource dms) {
		if (!withLabels) {
			return;
		}
		Resolution baseResolution = typeItem.getResolution() == null ? null : Resolution.LABEL; // exclude label if parent is excluded
		Collection<EAttribute> resolvedAttrs = Collections.emptyList();
		if (typeItem.getPattern() != null) {
			resolvedAttrs = Arrays.asList(typeItem.getPattern().getLabels());
		}
		Resolution[] possibleResolutions = Arrays.equals(typeItem.getPossibleResolutions(), ResolvedItem.NO_RESOLUTIONS) ?
				ResolvedItem.NO_RESOLUTIONS : ResolvedItem.LABEL_RESOLUTIONS; // exclude label if parent is excluded
		for (EAttribute attribute : (List<? extends EAttribute>) type.getEAllAttributes()) {
			Resolution resolution = resolvedAttrs.contains(attribute) ? baseResolution : null; // include only attributes resolved as labels
			typeItem.addChild(new ResolvedItem(resolution, attribute, null, possibleResolutions, dms.isDisabled(attribute)));
		}
	}

	protected void addRefLinks(ResolvedItem typeItem, EClass type, DomainModelSource dms) {
		Resolution baseResolution = typeItem.getResolution() != Resolution.NODE ? null : Resolution.LINK; // ref links are available only for nodes
		Collection<EReference> resolvedRefs = Collections.emptyList();
		if (typeItem.getPattern() instanceof NodePattern) {
			resolvedRefs = Arrays.asList(((NodePattern) typeItem.getPattern()).getRefLinks());
		}
		Resolution[] possibleResolutions = Arrays.equals(typeItem.getPossibleResolutions(), ResolvedItem.NO_RESOLUTIONS) ?
				ResolvedItem.NO_RESOLUTIONS : ResolvedItem.LINK_RESOLUTIONS; // exclude link if parent is excluded
		for (EReference reference : (List<? extends EReference>) type.getEAllReferences()) {
			Resolution resolution = resolvedRefs.contains(reference) ? baseResolution : null; // include only refs resolved as links
			typeItem.addChild(new ResolvedItem(resolution, reference, null, possibleResolutions, dms.isDisabled(reference)));
		}
	}
}
@


1.2
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d31 1
d54 3
d58 1
a58 1
		ResolvedItem item = new ResolvedItem(null, dms.getContents(), null, ResolvedItem.NO_RESOLUTIONS, false);
d69 1
a69 1
		final EClass diagramClass = dms.getDiagramElement();
d72 1
a72 1
		Resolution[] resolutions = ResolvedItem.NODE_LINK_RESOLUTIONS;
d77 1
a77 1
				resolution = null;
d83 3
a85 2
				if (linkPattern.getSource() != null && !containmentClosure.contains(diagramClass, linkPattern.getSource().getEReferenceType(), domainPackage)) {
					resolution = null;
d87 3
a89 2
				if (linkPattern.getTarget() != null && !containmentClosure.contains(diagramClass, linkPattern.getTarget().getEReferenceType(), domainPackage)) {
					resolution = null;
d108 1
a108 1
		Resolution baseResolution = typeItem.getResolution() == null ? null : Resolution.LABEL;
d113 2
a114 1
		Resolution[] possibleResolutions = Arrays.equals(typeItem.getPossibleResolutions(), ResolvedItem.NO_RESOLUTIONS) ? ResolvedItem.NO_RESOLUTIONS : ResolvedItem.LABEL_RESOLUTIONS;
d116 1
a116 1
			Resolution resolution = resolvedAttrs.contains(attribute) ? baseResolution : null;
d122 1
a122 1
		Resolution baseResolution = typeItem.getResolution() != Resolution.NODE ? null : Resolution.LINK;
d127 2
a128 1
		Resolution[] possibleResolutions = Arrays.equals(typeItem.getPossibleResolutions(), ResolvedItem.NO_RESOLUTIONS) ? ResolvedItem.NO_RESOLUTIONS : ResolvedItem.LINK_RESOLUTIONS;
d130 1
a130 1
			Resolution resolution = resolvedRefs.contains(reference) ? baseResolution : null;
@


1.1
log
@move pages and model of simple graph and tool wizards in dedicated package; provide i18n
@
text
@d22 1
d55 2
a56 2
		for (Iterator it = dms.getContents().eAllContents(); it.hasNext();) {
			Object next = it.next();
d103 1
a103 1
		Collection resolvedAttrs = Collections.emptyList();
d116 1
a116 1
		Collection resolvedRefs = Collections.emptyList();
@

