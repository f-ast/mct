head	1.6;
access;
symbols
	v20080924-1925:1.6
	v20080722-1827:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080417-1610:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20080207-0207:1.6
	v20071124-0000:1.6
	v20071108-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.5
	v20070608-1300:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070520-1200:1.5
	v20070518-1300:1.5
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070405-2000:1.5
	v20070330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070301-1200:1.4
	v20070228-2000:1.4
	v20070208-1800:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061013-1330:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.06.21.14.03.14;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	1176467a85204567;

1.5
date	2007.03.14.12.59.33;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	114b45f7f1b34567;

1.4
date	2006.03.03.20.09.58;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.03.16.50.25;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.03.14.16.22;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.28.19.07.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards.pages;

import java.util.List;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.NodeMapping;
import org.eclipse.gmf.tooldef.AbstractTool;
import org.eclipse.gmf.tooldef.CreationTool;
import org.eclipse.gmf.tooldef.ToolContainer;
import org.eclipse.gmf.tooldef.ToolRegistry;

/**
 * @@author artem
 */
public class ToolDefLookup implements ToolDefSupplier {
	private final ToolRegistry myRegistry;
	private final ToolContainer myNodeTools;
	private final ToolContainer myLinkTools;
	private final boolean sameToolContainer; // basically, myNodeTools == myLinkTools
	private int myNodeUseIndex = 0;
	private int myLinkUseIndex = 0;
	

	public ToolDefLookup(ToolRegistry registry) {
		assert registry != null && registry.getPalette() != null;
		myRegistry = registry;
		final List<AbstractTool> tools = myRegistry.getPalette().getTools();
		int i = tools.size();
		boolean found = false;
		while (!found && i > 0) {
			i--;
			if (tools.get(i) instanceof ToolContainer) {
				ToolContainer t = (ToolContainer) tools.get(i);
				found = t.getTools().size() > 0;
			}
		}
		if (!found) {
			myNodeTools = myLinkTools = myRegistry.getPalette();
			sameToolContainer = true;
			return;
		}
		myLinkTools = (ToolContainer) tools.get(i); 
		found = false;
		while (i > 0 && !found) {
			i--;
			if (tools.get(i) instanceof ToolContainer) {
				ToolContainer t = (ToolContainer) tools.get(i);
				found = t.getTools().size() > 0;
			}
		}
		if (!found) {
			myNodeTools = myLinkTools;
			sameToolContainer = true;
		} else {
			sameToolContainer = false;
			myNodeTools = (ToolContainer) tools.get(i);
		}
	}

	public AbstractTool findTool(NodeMapping nm) {
		final int nodeToolsLen = myNodeTools.getTools().size();
		for (int i = 0; i < nodeToolsLen; i++) {
			Object next = myNodeTools.getTools().get((myNodeUseIndex + i) % nodeToolsLen);
			if (isTool(next)) {
				myNodeUseIndex = (myNodeUseIndex + i + 1) % nodeToolsLen;
				if (sameToolContainer) {
					myLinkUseIndex = myNodeUseIndex;
				}
				return (AbstractTool) next;
			}
		}
		return null;
	}

	public AbstractTool findTool(LinkMapping lm) {
		final int linkToolsLen = myLinkTools.getTools().size();
		for (int i = 0; i < linkToolsLen; i++) {
			Object next = myLinkTools.getTools().get((myLinkUseIndex + i) % linkToolsLen);
			if (isTool(next)) {
				myLinkUseIndex = (myLinkUseIndex + i + 1) % linkToolsLen;
				if (sameToolContainer) {
					myNodeUseIndex = myLinkUseIndex;
				}
				return (AbstractTool) next;
			}
		}
		return null;
	}

	private boolean isTool(Object next) {
		return next instanceof CreationTool;
	}

}
@


1.5
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.4
log
@use first container, not palette
@
text
@d37 1
a37 1
		final List tools = myRegistry.getPalette().getTools();
@


1.3
log
@option to create tooling definition as part of mapping process
@
text
@a14 1

a51 1
		sameToolContainer = false;
d62 2
a63 1
			myNodeTools = myRegistry.getPalette();
d65 1
@


1.2
log
@simple logic to handle tool definitions added. If two non-empty tool groups found in palette registry, then latest one is designated to serve as source of tools for links, and another group prior to it - as a source of node tools. If palette contains no toolgroups, then plain list of creation tools is expected as children of Palette. N NodeMappings will use first N tool definitions, LinkMappings will use rest.
Of course, 1..N mod toolGroup.length
@
text
@d26 1
a26 1
public class ToolDefLookup {
@


1.1
log
@Introduced separate plugin for Tooling UI, moved mapping wizard of #114186 to this plugin.
Wizard got some NLS, respect selection, open-created-model-in-editor improvements as well as aligned with recent gmfmap changes.
Plus, some refactorings to address user-prioritized strategies to select nodes/links doubled number of classes we had.
@
text
@d14 2
d19 3
d27 42
d71 11
d86 11
d100 4
@

