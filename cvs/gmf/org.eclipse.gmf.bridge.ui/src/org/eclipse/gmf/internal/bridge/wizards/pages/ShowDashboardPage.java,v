head	1.4;
access;
symbols
	v20080924-1925:1.4
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.6
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080417-1610:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080207-0207:1.4
	v20071124-0000:1.4
	v20071108-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070520-1200:1.4
	v20070518-1300:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070405-2000:1.4
	v20070330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070301-1200:1.4
	v20070228-2000:1.4
	v20070208-1800:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061013-1330:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060428-1300:1.3
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.06.01.13.38.58;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.25.11.19.08;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.03.07.38.27;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.02.15.54.00;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.4
log
@add nls markers
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards.pages;

import org.eclipse.gmf.internal.bridge.ui.Plugin;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;

/**
 * @@author dstadnik
 */
public class ShowDashboardPage extends WizardPage {

	private boolean showDashboard;

	private Button showDashboardCheckbox;

	public ShowDashboardPage(String pageId, boolean showDashboard) {
		super(pageId);
		this.showDashboard = showDashboard;
	}

	public void createControl(Composite parent) {
		Composite composite = new Composite(parent, SWT.NONE);
		GridLayout layout = new GridLayout();
		layout.numColumns = 1;
		layout.verticalSpacing = 12;
		composite.setLayout(layout);
		composite.setLayoutData(createFillData());

		showDashboardCheckbox = new Button(composite, SWT.CHECK);
		showDashboardCheckbox.setText(Plugin.getBundleString("showDashboardPage.text")); //$NON-NLS-1$
		showDashboardCheckbox.setLayoutData(createHrzData());
		showDashboardCheckbox.setSelection(showDashboard);
		showDashboardCheckbox.addSelectionListener(new SelectionListener() {

			public void widgetSelected(SelectionEvent e) {
				showDashboard = showDashboardCheckbox.getSelection();
			}

			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});

		Composite filler = new Composite(composite, SWT.NONE);
		filler.setLayoutData(createFillData());
		setControl(showDashboardCheckbox);
	}

	protected GridData createHrzData() {
		GridData data = new GridData();
		data.horizontalAlignment = SWT.FILL;
		data.grabExcessHorizontalSpace = true;
		return data;
	}

	protected GridData createFillData() {
		GridData data = new GridData();
		data.horizontalAlignment = SWT.FILL;
		data.grabExcessHorizontalSpace = true;
		data.verticalAlignment = SWT.FILL;
		data.grabExcessVerticalSpace = true;
		return data;
	}

	public boolean isShowDashboard() {
		return showDashboard;
	}

	public void setShowDashboard(boolean showDashboard) {
		this.showDashboard = showDashboard;
		if (showDashboardCheckbox != null && !showDashboardCheckbox.isDisposed()) {
			showDashboardCheckbox.setSelection(showDashboard);
		}
	}
}
@


1.3
log
@"models" folder gets created along with project.
Some string externalization.
@
text
@d47 1
a47 1
		showDashboardCheckbox.setText(Plugin.getBundleString("showDashboardPage.text"));
@


1.2
log
@set default value
@
text
@d14 1
d47 1
a47 1
		showDashboardCheckbox.setText("Show dashboard view for the created project");
@


1.1
log
@add page to show dashboard
@
text
@d48 1
@

