head	1.10;
access;
symbols
	v20080924-1925:1.10
	v20080722-1827:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080417-1610:1.10
	v20080322-0000:1.10
	v20080222-1200:1.9
	v20080215-1500:1.9
	v20080207-0207:1.9
	v20071124-0000:1.9
	v20071108-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.8
	v20070608-1300:1.8
	v20070605-1400:1.8
	v20070601-1400:1.8
	v20070520-1200:1.8
	v20070518-1300:1.8
	v20070420-1000:1.8
	v20070413-1300:1.8
	v20070405-2000:1.6
	v20070330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.5
	v20070301-1200:1.5
	v20070228-2000:1.4
	v20070208-1800:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2008.03.06.12.46.32;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	7e5d47cfe7a74567;

1.9
date	2007.06.21.14.03.14;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	1176467a85204567;

1.8
date	2007.04.12.14.40.18;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	5f58461e44d04567;

1.7
date	2007.04.12.11.31.12;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	10e2461e187f4567;

1.6
date	2007.03.20.16.54.35;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	33aa460011ca4567;

1.5
date	2007.03.01.16.34.40;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	657145e7009f4567;

1.4
date	2007.02.07.12.11.12;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	ff145c9c1e04567;

1.3
date	2007.02.06.18.08.29;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	16f845c8c3f34567;

1.2
date	2007.01.25.18.14.32;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	7f7045b8f3874567;

1.1
date	2007.01.18.18.49.15;	author atikhomirov;	state Exp;
branches;
next	;
commitid	197b45afc1284567;


desc
@@


1.10
log
@[220711] respect workspace resource models - refactored transformation operation to manage resource set easily
@
text
@/*
 * Copyright (c) 2006, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Fedorov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.transform;

import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.codegen.ecore.genmodel.GenModel;
import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.gmf.internal.bridge.wizards.WizardUtil;
import org.eclipse.gmf.internal.common.URIUtil;
import org.eclipse.gmf.internal.common.ui.ResourceLocationProvider;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchWizard;


public class TransformToGenModelWizard extends Wizard implements IWorkbenchWizard {
	
	private IStructuredSelection mySelection;

	private GMFGenNewFileCreationPage newFileCreationPage;
	private MapModelConfigurationPage mapModelPage;
	private ModelDiagnosticPage mapDiagnosticPage;
	private GenModelConfigurationPage genModelPage;
	private ViewmapProducerWizardPage transformOptionPage;
	private ModelDiagnosticPage genDiagnosticPage;
	
	private WizardPage myErrorContainer;
	
	private TransformToGenModelOperation myOperation;
	
	@@Override
	public void addPages() {
		super.addPages();
		
		final String defaultName = "My"; //$NON-NLS-1$
		newFileCreationPage = new GMFGenNewFileCreationPage(GMFGenNewFileCreationPage.class.getSimpleName(), mySelection);
		IFile file = WizardUtil.findExistingFile(mySelection, GMFGenNewFileCreationPage.EXT_GMFGEN);
		if (file != null) {
			newFileCreationPage.setFileName(file.getName());
		} else {
			newFileCreationPage.setFileName(WizardUtil.getDefaultFileName(mySelection, defaultName, GMFGenNewFileCreationPage.EXT_GMFGEN));
		}
		addPage(newFileCreationPage);
		
		final ResourceSet resourceSet = getTransformOperation().getResourceSet();
		ResourceLocationProvider rlp = new ResourceLocationProvider(mySelection);
		mapModelPage = new MapModelConfigurationPage(MapModelConfigurationPage.class.getSimpleName(), rlp, resourceSet);
		mapModelPage.setPageComplete(false);
		mapModelPage.setModelRequired(true);
		addPage(mapModelPage);
		
		mapDiagnosticPage = new MapModelDiagnosticPage(MapModelDiagnosticPage.class.getSimpleName());
		addPage(mapDiagnosticPage);

		genModelPage = new GenModelConfigurationPage(GenModelConfigurationPage.class.getSimpleName(), rlp, resourceSet);
		genModelPage.setPageComplete(false);
		genModelPage.setModelRequired(false);
		addPage(genModelPage);

		transformOptionPage = new ViewmapProducerWizardPage(ViewmapProducerWizardPage.class.getSimpleName());
		transformOptionPage.setPageComplete(false);
		addPage(transformOptionPage);
		
		genDiagnosticPage = new GMFGenModelDiagnosticPage(GMFGenModelDiagnosticPage.class.getSimpleName());
		addPage(genDiagnosticPage);
	}

	private boolean checkGMFGenValidationResult() {
		Diagnostic diagnostic = getTransformOperation().getGMFGenValidationResult();
		return !(Diagnostic.ERROR == diagnostic.getSeverity());
	}

	protected ResourceSet createResourceSet() {
		final ResourceSetImpl rs = new ResourceSetImpl();
		rs.getURIConverter().getURIMap().putAll(EcorePlugin.computePlatformURIMap());
		return rs;
	}

	@@Override
	public IWizardPage getNextPage(IWizardPage page) {
		//clear error message
		if (myErrorContainer != null) {
			myErrorContainer.setErrorMessage(null);
			myErrorContainer = null;
		}
		if (page == mapModelPage) {
			Diagnostic diagnostic = getTransformOperation().getMapmodelValidationResult();
			if (Diagnostic.ERROR == diagnostic.getSeverity()) {
				//init genModelPage anyway
				findNextPageAfterMapping();
				return mapDiagnosticPage;
			}
			return findNextPageAfterMapping();
		} else if (page == mapDiagnosticPage) {
			return findNextPageAfterMapping();
		} else if (page == transformOptionPage) {
			if (checkGMFGenValidationResult()) {
				return null;
			}
			return genDiagnosticPage;
		}
		return super.getNextPage(page);
	}

	private IWizardPage findNextPageAfterMapping() {
		try {
			GenModel genmmodel = getTransformOperation().findGenmodel();
			if (genmmodel == null) {
				genModelPage.setPageComplete(true);
				return transformOptionPage;
			}
		} catch (CoreException e) {
			genModelPage.setStatusMessage(e.getStatus());
		}
		return genModelPage;
	}
	
	public void init(IWorkbench workbench, IStructuredSelection selection) {
		this.mySelection = selection;
		setWindowTitle(Messages.TransformToGenModelWizard_title_wizard);
		setNeedsProgressMonitor(true);
		myOperation = new TransformToGenModelOperation(createResourceSet());
	}
	
	@@Override
	public boolean performFinish() {
		if (getTransformOperation().getOptions().getIgnoreGMFGenValidation() && 
				getContainer().getCurrentPage() == genDiagnosticPage) {
			saveTransformOptions();
			return true;
		}
		try {
			final IStatus[] s = new IStatus[1];
			IRunnableWithProgress iwr = new IRunnableWithProgress() {
				public void run(IProgressMonitor monitor) {
					TransformToGenModelOperation op = getTransformOperation();
					IFile target = getTargetFile();
					op.setGenURI(URI.createPlatformResourceURI(target.getFullPath().toString(), true));
					s[0] = op.executeTransformation(monitor);
				}
			};
			getContainer().run(false, false, iwr);
			if (s[0].isOK()) {
				return processGMFGenValidationResult();
			}
			setErrorMessage(s[0].getMessage());
			return false;
		} catch (InvocationTargetException ex) {
			String message = Messages.TransformToGenModelOperation_e_generator_creation;
			Throwable targetException = ex.getTargetException();
			if (targetException != null && targetException.getMessage() != null) {
				message = targetException.getMessage();
			}
			setErrorMessage(message);
			return false;
		} catch (InterruptedException ex){
			setErrorMessage(Messages.TransformToGenModelWizard_e_operation_cancelled);
			return false;
		}
	}
	
	private boolean processGMFGenValidationResult() {
		if (checkGMFGenValidationResult()) {
			setErrorMessage(null);
			saveTransformOptions();
			return true;
		}
		getContainer().showPage(genDiagnosticPage);
		return false;
	}
	
	private void saveTransformOptions() {
		if (getTransformOperation() != null) {
			getTransformOperation().getOptions().flush();
		}
	}
	
	@@Override
	public boolean performCancel() {
		if (getTransformOperation() != null) {
			getTransformOperation().getOptions().reset();
		}
		return super.performCancel();
	}

	TransformToGenModelOperation getTransformOperation() {
		return myOperation;
	}
	
	IFile getTargetFile() {
		return newFileCreationPage.getModelFile();
	}
	
	IFile getMapFile() {
		URI mapURI = mapModelPage.getURI();
		if (mapURI != null) {
			return URIUtil.getFile(mapURI);
		}
		return (IFile) mySelection.getFirstElement();
	}

	private void setErrorMessage(String message) {
		WizardDialog wd = (WizardDialog) getContainer();
		WizardPage wp = (WizardPage) wd.getCurrentPage();
		if (wp != null) {
			myErrorContainer = wp;
			myErrorContainer.setErrorMessage(message);
		}
	}
}
@


1.9
log
@fix copyright years
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2007 Borland Software Corporation
a52 2

	private ResourceSet resourceSet;
d68 1
a68 1
		resourceSet = createResourceSet();
d130 1
a130 1
			GenModel genmmodel = getTransformOperation().findGenmodel(resourceSet);
d145 1
a145 1
		myOperation = new TransformToGenModelOperation();
d162 1
a162 1
					s[0] = op.executeTransformation(resourceSet, monitor);
@


1.8
log
@[181896] afedorov - Allow transformation wizard to complete if there are errors in the resulting gmfgen model
refactored not to define extra strings for page names, titles and descriptions moved to owning pages.
@
text
@d1 2
a2 2
/**
 * Copyright (c) 2006 Borland Software Corporation
@


1.7
log
@support plugin->platform uri mapping
@
text
@a40 6
	private static final String PAGE_ID_GMFGEN = "gmfgen"; //$NON-NLS-1$
	private static final String PAGE_ID_GENMODEL = "genmodel"; //$NON-NLS-1$
	private static final String PAGE_ID_GMFMAP = "gmfmap"; //$NON-NLS-1$
	private static final String PAGE_ID_GMFMAP_DIAGNOSTIC = "gmfmap_diagnostic"; //$NON-NLS-1$
	private static final String PAGE_ID_TRANSFORM = "transform"; //$NON-NLS-1$
	
d45 1
a45 1
	private MapModelDiagnosticPage mapDiagnosticPage;
d48 1
d61 1
a61 3
		newFileCreationPage = new GMFGenNewFileCreationPage(PAGE_ID_GMFGEN, mySelection);
		newFileCreationPage.setTitle(Messages.TransformToGenModelWizard_title_gmfgen);
		newFileCreationPage.setDescription(Messages.TransformToGenModelWizard_descr_gmfgen);
d72 1
a72 3
		mapModelPage = new MapModelConfigurationPage(PAGE_ID_GMFMAP, rlp, resourceSet);
		mapModelPage.setTitle(Messages.TransformToGenModelWizard_title_mapmodel);
		mapModelPage.setDescription(Messages.TransformToGenModelWizard_descr_mapmodel);
d77 1
a77 3
		mapDiagnosticPage = new MapModelDiagnosticPage(PAGE_ID_GMFMAP_DIAGNOSTIC);
		mapDiagnosticPage.setTitle(Messages.TransformToGenModelWizard_title_mapdiagnostic);
		mapDiagnosticPage.setDescription(Messages.TransformToGenModelWizard_descr_mapdiagnostic);
d80 1
a80 3
		genModelPage = new GenModelConfigurationPage(PAGE_ID_GENMODEL, rlp, resourceSet);
		genModelPage.setTitle(Messages.TransformToGenModelWizard_title_genmodel);
		genModelPage.setDescription(Messages.TransformToGenModelWizard_descr_genmodel);
d85 1
a85 3
		transformOptionPage = new ViewmapProducerWizardPage(PAGE_ID_TRANSFORM);
		transformOptionPage.setTitle(Messages.TransformToGenModelWizard_title_options);
		transformOptionPage.setDescription(Messages.TransformToGenModelWizard_descr_options);
d89 7
d103 1
a103 1
	
d121 5
d152 5
d169 1
a169 3
				setErrorMessage(null);
				saveTransformOptions();
				return true;
d187 10
a234 1

@


1.6
log
@[175837] afedorov - Can't ignore validation errors in new "Create generator model" wizard
@
text
@d23 1
d59 1
a59 1
	ResourceSet resourceSet;
d77 1
a77 1
		resourceSet = new ResourceSetImpl();
d105 6
@


1.5
log
@[176019] afedorov - correctly handle Back&value change user activities in the map->gmfgen wizard
@
text
@d21 1
d43 1
d50 1
d54 2
d84 5
a104 3
	/* (non-Javadoc)
	 * @@see org.eclipse.jface.wizard.Wizard#getNextPage(org.eclipse.jface.wizard.IWizardPage)
	 */
d107 5
d113 5
a117 8
			try {
				GenModel genmmodel = getTransformOperation().findGenmodel(resourceSet);
				if (genmmodel == null) {
					genModelPage.setPageComplete(true);
					return transformOptionPage;
				}
			} catch (CoreException e) {
				genModelPage.setStatusMessage(e.getStatus());
d119 3
d125 13
d167 1
d170 1
a170 4
				String message = targetException.getMessage();
				if (message == null) {
					message = Messages.TransformToGenModelWizard_e_generator_creation;
				}
d172 1
a185 3
	/* (non-Javadoc)
	 * @@see org.eclipse.jface.wizard.Wizard#performCancel()
	 */
d214 2
a215 1
			wp.setErrorMessage(message);
@


1.4
log
@[171593] afedorov - Tests for TransformToGenModelOperation
@
text
@d127 4
a130 1
					s[0] = getTransformOperation().executeTransformation(resourceSet, monitor);
@


1.3
log
@[172194] afedorov - Preserve "Create generator model" wizard settings
@
text
@d25 1
d118 1
a118 7
		IFile mapFile = (IFile) selection.getFirstElement();
		URI mapURI = URI.createPlatformResourceURI(mapFile.getFullPath().toString(), true);
		initOperation(mapURI);
	}
	
	void initOperation(URI mapURI) {
		myOperation = new TransformToGenModelOperation(mapURI);
d178 8
@


1.2
log
@[148836] afedorov - Provide "Create generator model..." wizard instead of existing dialog sequence. Fix for NPE on pure-design gmfmap
@
text
@d62 6
a67 1
		newFileCreationPage.setFileName(WizardUtil.getDefaultFileName(mySelection, defaultName, GMFGenNewFileCreationPage.EXT_GMFGEN));
@


1.1
log
@[148836] afedorov - Provide "Create generator model..." wizard instead of existing dialog sequence
@
text
@d17 1
d20 1
d28 1
d78 1
a78 1
		genModelPage.setModelRequired(true);
d89 19
@

