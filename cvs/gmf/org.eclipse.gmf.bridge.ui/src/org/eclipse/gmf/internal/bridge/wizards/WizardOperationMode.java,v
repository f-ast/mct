head	1.2;
access;
symbols
	v20080924-1925:1.2
	v20080722-1827:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080417-1610:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20080207-0207:1.2
	v20071124-0000:1.2
	v20071108-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070520-1200:1.1
	v20070518-1300:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-2000:1.1
	v20070330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.06.21.14.03.14;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	1176467a85204567;

1.1
date	2006.09.15.19.24.23;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Dmitri Stadnik (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards;

import org.eclipse.gmf.internal.common.ui.ResourceLocationProvider;

/**
 * Wizard operation mode property.
 * Supports the following lifecycle: user creates it, possibly changes mode
 * a number of times and detects reconcile mode. After this property should
 * not be accessed or modified.
 * 
 * @@author dstadnik
 */
public final class WizardOperationMode {

	/**
	 * Wizard will detect in which mode it should operate.
	 */
	public static final String DETECT = "detect"; //$NON-NLS-1$

	/**
	 * Wizard will create new model.
	 */
	public static final String CREATE = "create"; //$NON-NLS-1$

	/**
	 * Wizard will reconcile changes with existing model.
	 */
	public static final String RECONCILE = "reconcile"; //$NON-NLS-1$

	private String fileExtension;

	private String mode;

	public WizardOperationMode(String fileExtension, String mode) {
		assert fileExtension != null;
		assertCorrectMode(mode);
		this.fileExtension = fileExtension;
		this.mode = mode;
	}

	public void setMode(String mode) {
		assertCorrectMode(mode);
		if (mode == null) {
			throw new IllegalStateException("Operation mode already detected"); //$NON-NLS-1$
		}
		this.mode = mode;
	}

	public boolean detectReconcile(ResourceLocationProvider rloc) {
		if (mode == null) {
			throw new IllegalStateException("Operation mode could be detected only once"); //$NON-NLS-1$
		}
		boolean reconcileMode;
		if (DETECT.equals(mode)) {
			// enabled when gmfgraph model selected
			reconcileMode = !rloc.getSelectedURIs(fileExtension, true).isEmpty();
		} else if (CREATE.equals(mode)) {
			reconcileMode = false;
		} else if (RECONCILE.equals(mode)) {
			reconcileMode = true;
		} else {
			throw new IllegalStateException("Illegal mode: " + mode); //$NON-NLS-1$
		}
		mode = null; // disable mode update
		return reconcileMode;
	}

	public static void assertCorrectMode(String mode) {
		assert DETECT.equals(mode) || CREATE.equals(mode) || RECONCILE.equals(mode);
	}
}
@


1.1
log
@#126531 allow to specify reconcile mode explicitly
@
text
@d1 10
@

