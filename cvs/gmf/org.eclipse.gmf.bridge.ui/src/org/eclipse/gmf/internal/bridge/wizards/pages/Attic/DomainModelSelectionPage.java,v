head	1.7;
access;
symbols
	v20080924-1925:1.7
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2006.09.19.12.19.40;	author dstadnik;	state dead;
branches;
next	1.6;

1.6
date	2006.09.15.12.18.10;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.07.17.41.02;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.07.16.39.30;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.07.15.35.40;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.01.13.38.58;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.12.46.08;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.7
log
@move pages and model of simple graph and tool wizards in dedicated package; provide i18n
@
text
@package org.eclipse.gmf.internal.bridge.wizards.pages;

import java.util.List;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.gmf.internal.bridge.resolver.DomainModelSource;
import org.eclipse.gmf.internal.common.ui.ExtensibleModelSelectionPage;
import org.eclipse.gmf.internal.common.ui.ResourceLocationProvider;

/**
 * @@author dstadnik
 */
public class DomainModelSelectionPage extends ExtensibleModelSelectionPage implements DomainModelSource {

	private static final String DEE = "diagramElement"; //$NON-NLS-1$

	private EPackage contents;

	public DomainModelSelectionPage(String pageId, ResourceLocationProvider rloc) {
		super(pageId, rloc);
	}

	protected String getModelFileExtension() {
		return "ecore"; //$NON-NLS-1$
	}

	protected void addExtensions() {
		addExtension(DEE, new DiagramElementSelectorExtension());
	}

	protected void setResource(Resource resource) {
		super.setResource(resource);
		contents = null;
		if (resource != null) {
			List rc = resource.getContents();
			if (rc.size() >= 1 && rc.get(0) instanceof EPackage) {
				contents = (EPackage) rc.get(0);
			}
		}
	}

	public EPackage getContents() {
		return contents;
	}

	public EClass getDiagramElement() {
		return (EClass) ((DiagramElementSelectorExtension) getExtension(DEE)).getModelElement();
	}

	public boolean isDisabled(EObject domainElement) {
		throw new UnsupportedOperationException();
	}
}
@


1.6
log
@#126531 Wizards that infer tooling and graph definitions should be able to add results to the existing models
@
text
@@


1.5
log
@#156534 Consider selected file in model selection page
@
text
@d6 1
d9 1
d52 4
@


1.4
log
@provide 'find in workspace' button to locate model files
@
text
@d9 1
d20 2
a21 2
	public DomainModelSelectionPage(String pageId) {
		super(pageId);
@


1.3
log
@#156342 Simple graph and tool def wizards should use common domain model selection page
@
text
@d23 4
@


1.2
log
@add nls markers
@
text
@a0 11
/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
d3 6
a8 18
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.gmf.internal.bridge.ui.FileSelector;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
d13 1
a13 1
public class DomainModelSelectionPage extends WizardPage {
d15 1
a15 1
	protected FileDomainModelSource domainModelSource;
d17 3
a19 1
	public DomainModelSelectionPage(String pageId, IStructuredSelection selection, FileDomainModelSource domainModelSource) {
a20 8
		assert domainModelSource != null;
		this.domainModelSource = domainModelSource;
		if (selection != null && !selection.isEmpty()) {
			Object selected = selection.getFirstElement();
			if (selected instanceof IFile) {
				domainModelSource.setFile((IFile) selected);
			}
		}
d23 3
a25 56
	public void createControl(Composite parent) {
		Composite composite = new Composite(parent, SWT.NONE);
		{
			GridLayout layout = new GridLayout();
			layout.numColumns = 3;
			layout.verticalSpacing = 12;
			composite.setLayout(layout);

			GridData data = new GridData();
			data.verticalAlignment = GridData.FILL;
			data.grabExcessVerticalSpace = true;
			data.horizontalAlignment = GridData.FILL;
			composite.setLayoutData(data);
		}
		Label label = new Label(composite, SWT.NONE);
		label.setText("File name");
		{
			GridData data = new GridData();
			label.setLayoutData(data);
		}
		final Text text = new Text(composite, SWT.SINGLE | SWT.BORDER);
		{
			GridData data = new GridData();
			data.horizontalAlignment = GridData.FILL;
			data.grabExcessHorizontalSpace = true;
			text.setLayoutData(data);
		}
		if (domainModelSource.getFile() != null) {
			text.setText(domainModelSource.getFile().getFullPath().toString());
		}
		text.addModifyListener(new ModifyListener() {

			public void modifyText(ModifyEvent me) {
				domainModelSource.setFile(null);
				try {
					Path filePath = new Path(text.getText());
					if (!filePath.isEmpty()) {
						domainModelSource.setFile(createFileHandle(filePath));
					}
				} catch (Exception e) {
				}
				setPageComplete(validatePage());
			}
		});
		Button button = new Button(composite, SWT.PUSH);
		button.addSelectionListener(new SelectionListener() {

			public void widgetSelected(SelectionEvent e) {
				domainModelSource.setFile(FileSelector.selectFile(getShell(), "Domain Model File", null, domainModelSource.getFile(), "ecore")); //$NON-NLS-2$
				if (domainModelSource.getFile() != null) {
					text.setText(domainModelSource.getFile().getFullPath().toString());
				} else {
					text.setText(""); //$NON-NLS-1$
				}
				setPageComplete(validatePage());
			}
d27 7
a33 1
			public void widgetDefaultSelected(SelectionEvent e) {
a34 5
		});
		button.setText("Browse");
		{
			GridData data = new GridData();
			button.setLayoutData(data);
a35 2
		setPageComplete(validatePage());
		setControl(composite);
d38 2
a39 2
	protected IFile createFileHandle(IPath filePath) {
		return ResourcesPlugin.getWorkspace().getRoot().getFile(filePath);
d42 2
a43 2
	protected boolean validatePage() {
		return domainModelSource.getFile() != null;
@


1.1
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@d100 1
a100 1
				domainModelSource.setFile(FileSelector.selectFile(getShell(), "Domain Model File", null, domainModelSource.getFile(), "ecore"));
d104 1
a104 1
					text.setText("");
@

