head	1.6;
access;
symbols
	v20080924-1925:1.6
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.3
	v20060904-1500:1.3
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2006.09.19.12.19.40;	author dstadnik;	state dead;
branches;
next	1.5;

1.5
date	2006.09.18.17.35.15;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.12.16.50.15;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.04.14.47.44;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.06.08.16.32;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.12.46.08;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.6
log
@move pages and model of simple graph and tool wizards in dedicated package; provide i18n
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards.pages;

import java.util.Iterator;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.gmf.internal.bridge.resolver.Resolution;
import org.eclipse.gmf.internal.bridge.resolver.ResolvedItem;
import org.eclipse.gmf.internal.bridge.wizards.WizardUtil;
import org.eclipse.gmf.internal.common.IncrementalNamesDispenser;
import org.eclipse.gmf.internal.common.NamesDispenser;
import org.eclipse.gmf.tooldef.AbstractTool;
import org.eclipse.gmf.tooldef.CreationTool;
import org.eclipse.gmf.tooldef.GMFToolFactory;
import org.eclipse.gmf.tooldef.GMFToolPackage;
import org.eclipse.gmf.tooldef.Palette;
import org.eclipse.gmf.tooldef.ToolGroup;
import org.eclipse.gmf.tooldef.ToolRegistry;

/**
 * @@author dstadnik
 */
public class ToolDefBuilder {

	protected final ToolRegistry existingToolRegistry;

	protected GMFToolFactory gmfToolFactory = GMFToolPackage.eINSTANCE.getGMFToolFactory();

	protected NamesDispenser namesDispenser = new IncrementalNamesDispenser();

	protected ToolRegistry toolRegistry;

	protected ToolGroup group;

	public ToolDefBuilder(ToolRegistry existingToolRegistry) {
		this.existingToolRegistry = existingToolRegistry;
	}

	public static CreationTool getCreationTool(Iterator source, EObject domainElement) {
		String name = WizardUtil.getCapName(domainElement);
		if (name == null) {
			return null;
		}
		return getCreationTool(source, name);
	}

	public static CreationTool getCreationTool(Iterator source, String domainObjectName) {
		while (source.hasNext()) {
			Object next = source.next();
			if (next instanceof CreationTool && domainObjectName.equals(((CreationTool) next).getTitle())) {
				return (CreationTool) next;
			}
		}
		return null;
	}

	protected String getUniqueName(String semanticPart) {
		return namesDispenser.get(semanticPart);
	}

	protected String getUniqueName(String semanticPart, String suffixPart) {
		return namesDispenser.get(semanticPart, suffixPart);
	}

	protected void addExistingName(String name) {
		if (name != null) {
			namesDispenser.add(name);
		}
	}

	protected void addExistingNames(ToolRegistry toolRegistry) {
		for (Iterator it = toolRegistry.eAllContents(); it.hasNext();) {
			Object next = it.next();
			if (next instanceof AbstractTool) {
				addExistingName(((AbstractTool) next).getTitle());
			}
		}
	}

	@@SuppressWarnings("unchecked")
	public ToolRegistry process(ResolvedItem item) {
		if (existingToolRegistry == null) {
			toolRegistry = gmfToolFactory.createToolRegistry();
		} else {
			toolRegistry = existingToolRegistry;
			addExistingNames(existingToolRegistry);
		}
		if (item != null) {
			EPackage ePackage = (EPackage) item.getDomainRef();
			Palette palette = toolRegistry.getPalette();
			if (palette == null) {
				palette = gmfToolFactory.createPalette();
				palette.setTitle(getUniqueName(ePackage.getName(), "Palette"));
				toolRegistry.setPalette(palette);
			}
			group = null;
			for (Object tool : palette.getTools()) {
				if (tool instanceof ToolGroup) {
					group = (ToolGroup) tool;
					break;
				}
			}
			if (group == null) {
				group = gmfToolFactory.createToolGroup();
				group.setTitle(getUniqueName(ePackage.getName()));
				palette.getTools().add(group);
			}
			for (ResolvedItem child : item.getChildren()) {
				processContents(child);
			}
		}
		return toolRegistry;
	}

	protected void processContents(ResolvedItem item) {
		if (!item.isDisabled() && (item.getResolution() == Resolution.NODE || item.getResolution() == Resolution.LINK)) {
			String baseName = null;
			if (item.getDomainRef() instanceof EClass) {
				baseName = WizardUtil.getCapName((EClass) item.getDomainRef());
			} else if (item.getDomainRef() instanceof EReference) {
				baseName = WizardUtil.getCapName((EReference) item.getDomainRef());
			}
			if (baseName != null && baseName.length() > 0) {
				addCreationTool(baseName);
			}
		}
		for (ResolvedItem child : item.getChildren()) {
			processContents(child);
		}
	}

	@@SuppressWarnings("unchecked")
	protected CreationTool addCreationTool(String baseName) {
		CreationTool tool = gmfToolFactory.createCreationTool();
		tool.setTitle(getUniqueName(baseName));
		tool.setDescription(Messages.bind(Messages.ToolDefBuilder0, baseName));
		tool.setSmallIcon(gmfToolFactory.createDefaultImage());
		tool.setLargeIcon(gmfToolFactory.createDefaultImage());
		group.getTools().add(tool);
		return tool;
	}
}
@


1.5
log
@#126531 add merge capability to the tooling wizard
@
text
@@


1.4
log
@#148976 New GMFGraph/GMFTool Simple model Wizard: show references contained by recognized link nodes in model Definition page
@
text
@d14 2
d17 1
d23 3
d38 45
a82 1
	protected GMFToolPackage gmfToolPackage = GMFToolPackage.eINSTANCE;
d84 8
a91 1
	protected GMFToolFactory gmfToolFactory = gmfToolPackage.getGMFToolFactory();
d95 6
a100 1
		ToolRegistry toolRegistry = gmfToolFactory.createToolRegistry();
d103 18
a120 5
			Palette palette = gmfToolFactory.createPalette();
			toolRegistry.setPalette(palette);
			ToolGroup group = gmfToolFactory.createToolGroup();
			group.setTitle(ePackage.getName());
			palette.getTools().add(group);
d122 1
a122 1
				process(child, toolRegistry, group);
d128 2
a129 2
	protected void process(ResolvedItem item, ToolRegistry toolRegistry, ToolGroup group) {
		if (item.getResolution() == Resolution.NODE || item.getResolution() == Resolution.LINK) {
d137 1
a137 1
				addCreationTool(baseName, group);
d141 1
a141 1
			process(child, toolRegistry, group);
d146 1
a146 1
	protected CreationTool addCreationTool(String baseName, ToolGroup group) {
d148 1
a148 1
		tool.setTitle(baseName);
@


1.3
log
@use generics wherever possible
@
text
@a13 2
import java.util.Iterator;

d46 2
a47 2
			for (Iterator it = item.getChildren().iterator(); it.hasNext();) {
				process((ResolvedItem) it.next(), toolRegistry, group);
d54 6
a59 7
		boolean descend = false;
		if (item.getDomainRef() instanceof EClass) {
			EClass type = (EClass) item.getDomainRef();
			String baseName = type.getName();
			if (item.getResolution() == Resolution.NODE || item.getResolution() == Resolution.LINK) {
				addCreationTool(baseName, group);
				descend = true;
d61 1
a61 4
		} else if (item.getDomainRef() instanceof EReference) {
			EReference ref = (EReference) item.getDomainRef();
			String baseName = WizardUtil.getCapName(ref);
			if (item.getResolution() == Resolution.LINK) {
a62 1
				descend = true;
d65 2
a66 4
		if (descend) {
			for (Iterator it = item.getChildren().iterator(); it.hasNext();) {
				process((ResolvedItem) it.next(), toolRegistry, group);
			}
@


1.2
log
@#144872 Unique figure and diagram element names should be used when graph def is generated for domain model with abstract class
@
text
@d38 1
d79 1
@


1.1
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@d81 1
a81 1
		tool.setDescription("Create new " + baseName);
@

