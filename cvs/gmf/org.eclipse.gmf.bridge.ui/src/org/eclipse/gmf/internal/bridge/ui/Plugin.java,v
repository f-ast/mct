head	1.10;
access;
symbols
	v20080924-1925:1.10
	v20080722-1827:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.4
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080417-1610:1.10
	v20080322-0000:1.10
	v20080222-1200:1.10
	v20080215-1500:1.10
	v20080207-0207:1.10
	v20071124-0000:1.10
	v20071108-0000:1.10
	v20070903-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.2
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070520-1200:1.9
	v20070518-1300:1.9
	v20070420-1000:1.9
	v20070413-1300:1.9
	v20070405-2000:1.7
	v20070330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070301-1200:1.7
	v20070228-2000:1.7
	v20070208-1800:1.7
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.6
	v20060925-1700:1.4.2.1
	v20060919-0800:1.4.2.1
	M1_20:1.5
	v20060904-1500:1.5
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2007.06.21.14.03.14;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	1176467a85204567;

1.9
date	2007.04.12.12.48.15;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	a19461e2a8f4567;

1.8
date	2007.04.12.11.29.46;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	10b9461e18294567;

1.7
date	2007.01.18.18.49.15;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	197b45afc1284567;

1.6
date	2006.09.15.12.18.10;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.04.14.47.31;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.01.13.38.58;	author dstadnik;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2006.03.03.15.14.01;	author rgronback;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.01.12.46.08;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.28.19.07.41;	author atikhomirov;	state Exp;
branches;
next	;

1.4.2.1
date	2006.09.13.23.07.19;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.10
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.ui;

import java.text.MessageFormat;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Status;
import org.eclipse.gmf.internal.bridge.resolver.ContainmentClosure;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

public class Plugin extends AbstractUIPlugin {

	public static final String CHECKED_ICON = "/icons/cview16/checked.gif"; //$NON-NLS-1$

	public static final String UNCHECKED_ICON = "/icons/cview16/unchecked.gif"; //$NON-NLS-1$

	public static final String GRAYED_ICON = "/icons/cview16/grayed.gif"; //$NON-NLS-1$

	public static final String NODE_ICON = "/icons/cview16/node.gif"; //$NON-NLS-1$

	public static final String LINK_ICON = "/icons/cview16/link.gif"; //$NON-NLS-1$

	public static final String LABEL_ICON = "/icons/cview16/label.gif"; //$NON-NLS-1$

	private static Plugin plugin;
	private ContainmentClosure myContainmentClosure;

	public Plugin() {
		plugin = this;
	}

	public void stop(BundleContext context) throws Exception {
		if (myContainmentClosure != null) {
			myContainmentClosure = null;
		}
		super.stop(context);
		plugin = null;
	}

	public ContainmentClosure getContaintmentClosure() {
		if (myContainmentClosure == null) {
			myContainmentClosure = new ContainmentClosure();
		}
		return myContainmentClosure;
	}

	public static IStatus createStatus(int statusCode, String message, Throwable ex) {
		return new Status(statusCode, getPluginID(), 0, message, ex);
	}

	public static IStatus createError(String message, Throwable ex) {
		return createStatus(IStatus.ERROR, message, ex);
	}

	public static IStatus createWarning(String message) {
		return createStatus(IStatus.WARNING, message, null);
	}

	public static IStatus createInfo(String message) {
		return createStatus(IStatus.INFO, message, null);
	}

	public static IStatus createCancel(String message) {
		return createStatus(IStatus.CANCEL, message, null);
	}

	public static Plugin getDefault() {
		return plugin;
	}
	
	public static String getBundleString(String key) {
		return Platform.getResourceBundle(getDefault().getBundle()).getString(key);
	}

	public static String getBundleString(String key, Object[] args) {
		String val = getBundleString(key);
		if (val == null) {
			return key;
		}
		return MessageFormat.format(val, args);
	}

	protected void initializeImageRegistry(ImageRegistry reg) {
		loadImage(reg, CHECKED_ICON);
		loadImage(reg, UNCHECKED_ICON);
		loadImage(reg, GRAYED_ICON);
		loadImage(reg, NODE_ICON);
		loadImage(reg, LINK_ICON);
		loadImage(reg, LABEL_ICON);
	}

	protected void loadImage(ImageRegistry registry, String id) {
		loadImage(registry, id, getBundle().getSymbolicName());
	}

	protected void loadImage(ImageRegistry registry, String id, String bundleId) {
		ImageDescriptor descriptor = imageDescriptorFromPlugin(bundleId, id);
		if (descriptor != null) {
			registry.put(id, descriptor);
		}
	}

	public static void log(CoreException ex) {
		log(ex.getStatus());
	}

	public static void log(Exception ex) {
		if (ex instanceof CoreException) {
			log((CoreException) ex);
		} else {
			log(createError(ex.getMessage(), ex));
		}
	}

	public static String getPluginID() {
		return getDefault().getBundle().getSymbolicName();
	}

	public static void log(IStatus s) {
		getDefault().getLog().log(s);
	}

	public static boolean needsReconcile() {
		return !Boolean.FALSE.toString().equals(Platform.getDebugOption(getPluginID() + "/reconcile")); //$NON-NLS-1$
	}

	public static boolean ignoreDanglingHrefOnSave() {
		String v = Platform.getDebugOption(getPluginID() + "/transform/ignore-dangling-on-save"); //$NON-NLS-1$
		return !Boolean.FALSE.toString().equals(v);
	}

	/**
	 * Returns an image descriptor for the image file at the given plug-in relative path.
	 * 
	 * @@param path the path
	 * @@return the image descriptor
	 */
	public static ImageDescriptor getImageDescriptor(String path) {
		return AbstractUIPlugin.imageDescriptorFromPlugin(getPluginID(), path);
	}
}
@


1.9
log
@[181844] keep extra existing root objects in .gmfgen resource during transformation
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
@


1.8
log
@do not internalize plugin id
@
text
@d142 5
@


1.7
log
@[148836] afedorov - Provide "Create generator model..." wizard instead of existing dialog sequence
@
text
@d139 1
a139 1
		return !Boolean.FALSE.toString().equals(Platform.getDebugOption(getPluginID() + "/reconcile"));
d145 1
a145 2
	 * @@param path
	 *            the path
d149 1
a149 1
		return AbstractUIPlugin.imageDescriptorFromPlugin("org.eclipse.gmf.bridge.ui", path); //$NON-NLS-1$
@


1.6
log
@#126531 Wizards that infer tooling and graph definitions should be able to add results to the existing models
@
text
@d62 20
d126 1
a126 1
			log(new Status(IStatus.ERROR, getPluginID(), 0, ex.getMessage(), ex));
d138 4
@


1.5
log
@avoid static fields unless really needed
@
text
@d32 2
d81 1
@


1.4
log
@add nls markers
@
text
@d20 1
d39 1
d46 3
d53 7
@


1.4.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@


1.3
log
@Changes to accomodate forthcoming tutorial cheatsheet.
@
text
@d27 1
a27 1
	public static final String CHECKED_ICON = "/icons/cview16/checked.gif";
d29 1
a29 1
	public static final String UNCHECKED_ICON = "/icons/cview16/unchecked.gif";
d31 1
a31 1
	public static final String NODE_ICON = "/icons/cview16/node.gif";
d33 1
a33 1
	public static final String LINK_ICON = "/icons/cview16/link.gif";
d35 1
a35 1
	public static final String LABEL_ICON = "/icons/cview16/label.gif";
d111 1
a111 1
		return AbstractUIPlugin.imageDescriptorFromPlugin("org.eclipse.gmf.bridge.ui", path);
@


1.2
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@d14 2
d18 1
d51 12
@


1.1
log
@Introduced separate plugin for Tooling UI, moved mapping wizard of #114186 to this plugin.
Wizard got some NLS, respect selection, open-created-model-in-editor improvements as well as aligned with recent gmfmap changes.
Plus, some refactorings to address user-prioritized strategies to select nodes/links doubled number of classes we had.
@
text
@d1 11
a13 1
import org.eclipse.ui.plugin.*;
d18 2
d24 10
d35 1
a35 1
	
d49 20
a68 1
	public static void log (CoreException ex) {
d89 4
a92 4
	 * Returns an image descriptor for the image file at the given
	 * plug-in relative path.
	 *
	 * @@param path the path
@

