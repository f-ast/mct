head	1.3;
access;
symbols
	v20080924-1925:1.3
	v20060925-1700:1.1
	v20060919-0800:1.1
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060620-0400:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.09.19.12.19.41;	author dstadnik;	state dead;
branches;
next	1.2;

1.2
date	2006.09.01.19.43.09;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.12.46.08;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.3
log
@move pages and model of simple graph and tool wizards in dedicated package; provide i18n
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    dstadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards.pages;

import java.util.ArrayList;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;

public class FilteredAdapterFactoryContentProvider extends AdapterFactoryContentProvider {

	public FilteredAdapterFactoryContentProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * Override to hide specific elements.
	 */
	protected boolean isShown(Object element) {
		return true;
	}

	public Object[] getChildren(Object object) {
		Object[] children = super.getChildren(object);
		if (children.length == 0) {
			return children;
		}
		ArrayList<Object> shownChildren = new ArrayList<Object>(children.length);
		for (int i = 0; i < children.length; i++) {
			if (isShown(children[i])) {
				shownChildren.add(children[i]);
			}
		}
		return shownChildren.toArray(new Object[shownChildren.size()]);
	}

	public boolean hasChildren(Object object) {
		return getChildren(object).length > 0;
	}

	public Object[] getElements(Object object) {
		return getChildren(object);
	}
}
@


1.2
log
@use generics wherever possible
@
text
@@


1.1
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@d37 1
a37 1
		ArrayList shownChildren = new ArrayList(children.length);
@

