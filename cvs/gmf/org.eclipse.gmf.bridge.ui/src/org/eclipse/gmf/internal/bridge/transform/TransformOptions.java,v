head	1.8;
access;
symbols
	v20080924-1925:1.8
	v20080722-1827:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.4
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080417-1610:1.8
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20080215-1500:1.8
	v20080207-0207:1.8
	v20071124-0000:1.8
	v20071108-0000:1.8
	v20070903-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070520-1200:1.7
	v20070518-1300:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070405-2000:1.6
	v20070330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.5
	v20070301-1200:1.5
	v20070228-2000:1.3
	v20070208-1800:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2007.06.21.14.03.14;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	1176467a85204567;

1.7
date	2007.04.12.14.40.18;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	5f58461e44d04567;

1.6
date	2007.03.20.16.54.35;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	33aa460011ca4567;

1.5
date	2007.03.01.15.26.53;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	644d45e6f0ba4567;

1.4
date	2007.03.01.14.21.41;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	633945e6e1754567;

1.3
date	2007.02.28.19.39.43;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	bd945e5da7f4567;

1.2
date	2007.02.06.18.08.29;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	16f845c8c3f34567;

1.1
date	2007.01.18.18.49.15;	author atikhomirov;	state Exp;
branches;
next	;
commitid	197b45afc1284567;


desc
@@


1.8
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Fedorov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.transform;

import java.net.MalformedURLException;
import java.net.URL;

import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Preferences;
import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
import org.eclipse.core.runtime.preferences.DefaultScope;
import org.eclipse.core.runtime.preferences.IEclipsePreferences;
import org.eclipse.gmf.internal.bridge.ui.Plugin;


public class TransformOptions extends AbstractPreferenceInitializer {
	
	private static final String PREF_GENERATE_RCP = "generate_rcp"; //$NON-NLS-1$
	private static final String PREF_USE_MAP_MODE = "use_map_mode"; //$NON-NLS-1$
	private static final String PREF_USE_RUNTIME_FIGURES = "use_runtime_figures"; //$NON-NLS-1$
	private static final String PREF_IGNORE_MAPMODEL_VALIDATION = "ignore_mapmodel_validation"; //$NON-NLS-1$
	private static final String PREF_IGNORE_GMFGEN_VALIDATION = "ignore_gmfgen_validation"; //$NON-NLS-1$
	private static final String PREF_FIGURE_TEMPLATES = "dynamic_figure_templates"; //$NON-NLS-1$
	
	private static String[] PROP_NAMES = new String[] {
		PREF_GENERATE_RCP, 
		PREF_USE_MAP_MODE, 
		PREF_USE_RUNTIME_FIGURES,
		PREF_IGNORE_MAPMODEL_VALIDATION,
		PREF_IGNORE_GMFGEN_VALIDATION,
		PREF_FIGURE_TEMPLATES
		};
	
	private Preferences myPreferences;
	
	public TransformOptions() {
		reset();
	}

	private Preferences getPreferences() {
		if (myPreferences == null) {
			myPreferences = new Preferences();
		}
		return myPreferences;
	}
	
	public void reset() {
		Preferences pluginPrefs = Plugin.getDefault().getPluginPreferences();
		copyPreferences(pluginPrefs, getPreferences());
	}
	
	public void flush() {
		Preferences pluginPrefs = Plugin.getDefault().getPluginPreferences();
		copyPreferences(getPreferences(), pluginPrefs);
		Plugin.getDefault().savePluginPreferences();
	}
	
	private void copyPreferences(Preferences source, Preferences target) {
		for (String name : PROP_NAMES) {
			target.setValue(name, source.getString(name));
		}
	}
	
	public boolean getGenerateRCP() {
		return getPreferences().getBoolean(PREF_GENERATE_RCP);
	}

	public boolean getUseMapMode() {
		return getPreferences().getBoolean(PREF_USE_MAP_MODE);
	}

	public boolean getUseRuntimeFigures() {
		return getPreferences().getBoolean(PREF_USE_RUNTIME_FIGURES);
	}

	public boolean getIgnoreMapModelValidation() {
		return getPreferences().getBoolean(PREF_IGNORE_MAPMODEL_VALIDATION);
	}

	public boolean getIgnoreGMFGenValidation() {
		return getPreferences().getBoolean(PREF_IGNORE_GMFGEN_VALIDATION);
	}

	public URL getFigureTemplatesPath() {
		final String value = getPreferences().getString(PREF_FIGURE_TEMPLATES);
		if (value == null || value.length() == 0) {
			return null;
		}
		try {
			return new URL(value);
		} catch (MalformedURLException ex) {
			Plugin.log(ex);
		}
		return null;
	}

	public void setGenerateRCP(boolean value) {
		getPreferences().setValue(PREF_GENERATE_RCP, value);
	}

	public void setUseMapMode(boolean value) {
		getPreferences().setValue(PREF_USE_MAP_MODE, value);
	}

	public void setUseRuntimeFigures(boolean value) {
		getPreferences().setValue(PREF_USE_RUNTIME_FIGURES, value);
	}

	public void setIgnoreMapModelValidation(boolean value) {
		getPreferences().setValue(PREF_IGNORE_MAPMODEL_VALIDATION, value);
	}

	public void setIgnoreGMFGenValidation(boolean value) {
		getPreferences().setValue(PREF_IGNORE_GMFGEN_VALIDATION, value);
	}

	public void setFigureTemplatesPath(URL path) {
		getPreferences().setValue(PREF_FIGURE_TEMPLATES, path == null ? "" : path.toString()); //$NON-NLS-1$
	}

	@@Override
	public void initializeDefaultPreferences() {
		DefaultScope scope = new DefaultScope();
		IEclipsePreferences node = scope.getNode(Plugin.getPluginID());
		node.putBoolean(PREF_GENERATE_RCP, false);
		node.putBoolean(PREF_USE_MAP_MODE, true);
		node.putBoolean(PREF_USE_RUNTIME_FIGURES, true);
		node.putBoolean(PREF_IGNORE_MAPMODEL_VALIDATION, false);
		node.putBoolean(PREF_IGNORE_GMFGEN_VALIDATION, false);

	}
	
	static boolean checkLiteOptionPresent() {
		return Platform.getBundle("org.eclipse.gmf.codegen.lite") != null; //$NON-NLS-1$
	}
}
@


1.7
log
@[181896] afedorov - Allow transformation wizard to complete if there are errors in the resulting gmfgen model
refactored not to define extra strings for page names, titles and descriptions moved to owning pages.
@
text
@d1 2
a2 2
/**
 * Copyright (c) 2006 Borland Software Corporation
@


1.6
log
@[175837] afedorov - Can't ignore validation errors in new "Create generator model" wizard
@
text
@d31 1
d39 1
d89 4
d122 4
d138 1
@


1.5
log
@need to copy attributes unconditionally to allow old value reset
@
text
@d30 1
d37 1
d83 4
d112 4
d127 1
@


1.4
log
@[171782] and [170686] make use of dynamic templates for figures possible
@
text
@d65 1
a65 3
			if (source.contains(name)) {
				target.setValue(name, source.getString(name));
			}
@


1.3
log
@[171782] add preference to keep path for dynamic figure templates
@
text
@d109 1
a109 1
		getPreferences().setValue(PREF_FIGURE_TEMPLATES, path.toString());
@


1.2
log
@[172194] afedorov - Preserve "Create generator model" wizard settings
@
text
@d14 3
d27 4
a30 3
	public static final String PREF_GENERATE_RCP = "generate_rcp"; //$NON-NLS-1$
	public static final String PREF_USE_MAP_MODE = "use_map_mode"; //$NON-NLS-1$
	public static final String PREF_USE_RUNTIME_FIGURES = "use_runtime_figures"; //$NON-NLS-1$
d35 2
a36 1
		PREF_USE_RUNTIME_FIGURES 
d64 4
a67 4
		for (int i = 0; i < PROP_NAMES.length; i++) {
			String name = PROP_NAMES[i];
			String value = source.getString(name);
			target.setValue(name, value);
d83 13
d108 4
a111 3
	/* (non-Javadoc)
	 * @@see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
	 */
@


1.1
log
@[148836] afedorov - Provide "Create generator model..." wizard instead of existing dialog sequence
@
text
@d28 6
a36 1
		myPreferences = new Preferences();
d39 1
a39 1
	
d41 3
d49 1
a49 1
		copyPreferences(pluginPrefs, myPreferences);
d54 1
a54 1
		copyPreferences(myPreferences, pluginPrefs);
d59 2
a60 3
		String[] propNames = source.propertyNames();
		for (int i = 0; i < propNames.length; i++) {
			String name = propNames[i];
@

