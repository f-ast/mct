head	1.13;
access;
symbols
	v20080924-1925:1.13
	v20060925-1700:1.8
	v20060919-0800:1.8
	M1_20:1.9
	v20060904-1500:1.9
	v20060713-1700:1.8
	R1_0_maintenance:1.8.0.2
	R1_0:1.8
	v20060627-1200:1.8
	v20060626-1420:1.8
	v20060620-0400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.5
	v20060526-1200:1.5
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2006.09.19.12.19.40;	author dstadnik;	state dead;
branches;
next	1.12;

1.12
date	2006.09.18.17.35.15;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.15.12.18.10;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.12.16.50.15;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.04.14.47.44;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.26.14.23.17;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.08.15.21.48;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.06.08.16.33;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.23.21.09.45;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.10.09.28.58;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.07.14.09.20;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.06.16.15.31;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.12.46.08;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.13
log
@move pages and model of simple graph and tool wizards in dedicated package; provide i18n
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards.pages;

import java.util.Iterator;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.Connection;
import org.eclipse.gmf.gmfgraph.DecorationFigure;
import org.eclipse.gmf.gmfgraph.DiagramElement;
import org.eclipse.gmf.gmfgraph.DiagramLabel;
import org.eclipse.gmf.gmfgraph.Figure;
import org.eclipse.gmf.gmfgraph.FigureGallery;
import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.Identity;
import org.eclipse.gmf.gmfgraph.Label;
import org.eclipse.gmf.gmfgraph.Node;
import org.eclipse.gmf.gmfgraph.PolylineConnection;
import org.eclipse.gmf.gmfgraph.Rectangle;
import org.eclipse.gmf.internal.bridge.resolver.Resolution;
import org.eclipse.gmf.internal.bridge.resolver.ResolvedItem;
import org.eclipse.gmf.internal.bridge.wizards.WizardUtil;
import org.eclipse.gmf.internal.common.IncrementalNamesDispenser;
import org.eclipse.gmf.internal.common.NamesDispenser;

/**
 * @@author dstadnik
 */
public class GraphDefBuilder {

	protected final Canvas existingCanvas;

	protected GMFGraphFactory gmfGraphFactory = GMFGraphPackage.eINSTANCE.getGMFGraphFactory();

	protected NamesDispenser namesDispenser = new IncrementalNamesDispenser();

	protected Canvas canvas;

	protected FigureGallery fGallery;

	public GraphDefBuilder(Canvas existingCanvas) {
		this.existingCanvas = existingCanvas;
	}

	public static DiagramElement getDiagramElement(Iterator source, EObject domainElement) {
		String name = WizardUtil.getCapName(domainElement);
		if (name == null) {
			return null;
		}
		return getDiagramElement(source, name);
	}

	public static DiagramElement getDiagramElement(Iterator source, String domainObjectName) {
		while (source.hasNext()) {
			Object next = source.next();
			if (next instanceof DiagramElement && domainObjectName.equals(((DiagramElement) next).getName())) {
				return (DiagramElement) next;
			}
		}
		return null;
	}

	protected String getUniqueName(String semanticPart) {
		return namesDispenser.get(semanticPart);
	}

	protected String getUniqueName(String semanticPart, String suffixPart) {
		return namesDispenser.get(semanticPart, suffixPart);
	}

	protected void addExistingName(String name) {
		if (name != null) {
			namesDispenser.add(name);
		}
	}

	protected void addExistingNames(Canvas canvas) {
		for (Iterator it = canvas.eAllContents(); it.hasNext();) {
			Object next = it.next();
			if (next instanceof Identity) {
				addExistingName(((Identity) next).getName());
			}
		}
	}

	@@SuppressWarnings("unchecked")
	public Canvas process(ResolvedItem item) {
		if (existingCanvas == null) {
			canvas = gmfGraphFactory.createCanvas();
		} else {
			canvas = existingCanvas;
			addExistingNames(existingCanvas);
		}
		if (item != null) {
			if (canvas != existingCanvas) {
				EPackage ePackage = (EPackage) item.getDomainRef();
				canvas.setName(getUniqueName(ePackage.getName()));
			}
			fGallery = null;
			for (Object figure : canvas.getFigures()) {
				if (figure instanceof FigureGallery) {
					fGallery = (FigureGallery) figure;
				}
			}
			if (fGallery == null) {
				fGallery = gmfGraphFactory.createFigureGallery();
				fGallery.setName(getUniqueName(Messages.GraphDefBuilder0));
				canvas.getFigures().add(fGallery);
			}
			for (ResolvedItem child : item.getChildren()) {
				process(child, null);
			}
		}
		return canvas;
	}

	protected void process(ResolvedItem item, DiagramElement parent) {
		DiagramElement newParent = getDiagramElement(canvas.eAllContents(), (EObject) item.getDomainRef());
		if (item.isDisabled()) {
			assert newParent != null : "For disabled item there should be a diagram element with the appropriate name"; //$NON-NLS-1$
			// Process child items since there may be new labels for existing node
		} else {
			if (item.getDomainRef() instanceof EClass) {
				EClass type = (EClass) item.getDomainRef();
				if (item.getResolution() == Resolution.NODE) {
					newParent = createNode(type);
				} else if (item.getResolution() == Resolution.LINK) {
					newParent = createLink(type);
				}
			} else if (item.getDomainRef() instanceof EReference) {
				EReference ref = (EReference) item.getDomainRef();
				if (item.getResolution() == Resolution.LINK) {
					newParent = createLink(ref);
				}
			} else if (item.getDomainRef() instanceof EAttribute) {
				EAttribute attr = (EAttribute) item.getDomainRef();
				if (item.getResolution() == Resolution.LABEL) {
					newParent = createLabel(attr, parent);
				}
			}
		}
		for (ResolvedItem next : item.getChildren()) {
			process(next, newParent);
		}
	}

	@@SuppressWarnings("unchecked")
	protected Node createNode(EClass type) {
		String baseName = WizardUtil.getCapName(type);
		Rectangle figure = gmfGraphFactory.createRectangle();
		figure.setName(getUniqueName(baseName, Messages.GraphDefBuilder1));
		fGallery.getFigures().add(figure);
		Node node = gmfGraphFactory.createNode();
		node.setFigure(figure);
		node.setName(getUniqueName(baseName, null));
		canvas.getNodes().add(node);
		return node;
	}

	@@SuppressWarnings("unchecked")
	protected Connection createLink(EClass type) {
		String baseName = WizardUtil.getCapName(type);
		PolylineConnection figure = gmfGraphFactory.createPolylineConnection();
		figure.setName(getUniqueName(baseName, Messages.GraphDefBuilder1));
		fGallery.getFigures().add(figure);
		Connection link = gmfGraphFactory.createConnection();
		link.setFigure(figure);
		link.setName(getUniqueName(baseName, null));
		canvas.getConnections().add(link);
		return link;
	}

	@@SuppressWarnings("unchecked")
	protected Connection createLink(EReference ref) {
		String baseName = WizardUtil.getCapName(ref);
		PolylineConnection figure = gmfGraphFactory.createPolylineConnection();
		figure.setName(getUniqueName(baseName, Messages.GraphDefBuilder1));
		DecorationFigure decoration = gmfGraphFactory.createPolylineDecoration();
		decoration.setName(getUniqueName(baseName, Messages.GraphDefBuilder6));
		figure.setTargetDecoration(decoration);
		fGallery.getFigures().add(figure);
		fGallery.getFigures().add(decoration);
		Connection link = gmfGraphFactory.createConnection();
		link.setFigure(figure);
		link.setName(getUniqueName(baseName, null));
		canvas.getConnections().add(link);
		return link;
	}

	@@SuppressWarnings("unchecked")
	protected DiagramLabel createLabel(EAttribute attr, DiagramElement parent) {
		if (parent == null) {
			return null; // makes no sense to define label without parent
		}
		String baseName = WizardUtil.getCapName(attr);
		Label figure = gmfGraphFactory.createLabel();
		figure.setName(getUniqueName(baseName, Messages.GraphDefBuilder1));
		figure.setText(Messages.GraphDefBuilder5);
		assert parent.getFigure() instanceof Figure : "We are creators of this gmfgraph; there should be no figure accessors"; //$NON-NLS-1$
		((Figure) parent.getFigure()).getChildren().add(figure);
		DiagramLabel label = gmfGraphFactory.createDiagramLabel();
		label.setFigure(figure);
		label.setName(getUniqueName(baseName, null));
		canvas.getLabels().add(label);
		return label;
	}
}
@


1.12
log
@#126531 add merge capability to the tooling wizard
@
text
@@


1.11
log
@#126531 Wizards that infer tooling and graph definitions should be able to add results to the existing models
@
text
@d30 1
d78 4
d86 15
d103 6
a108 1
		canvas = existingCanvas == null ? gmfGraphFactory.createCanvas() : existingCanvas;
d112 1
a112 1
				canvas.setName(ePackage.getName());
d122 1
a122 1
				fGallery.setName(Messages.GraphDefBuilder0);
@


1.10
log
@#148976 New GMFGraph/GMFTool Simple model Wizard: show references contained by recognized link nodes in model Definition page
@
text
@d14 2
d18 1
d45 1
a45 1
	protected GMFGraphPackage gmfGraphPackage = GMFGraphPackage.eINSTANCE;
d47 1
a47 1
	protected GMFGraphFactory gmfGraphFactory = gmfGraphPackage.getGMFGraphFactory();
d51 26
d83 1
a83 1
		Canvas canvas = gmfGraphFactory.createCanvas();
d85 15
a99 5
			EPackage ePackage = (EPackage) item.getDomainRef();
			canvas.setName(ePackage.getName());
			FigureGallery fGallery = gmfGraphFactory.createFigureGallery();
			fGallery.setName(Messages.GraphDefBuilder0);
			canvas.getFigures().add(fGallery);
d101 1
a101 1
				process(child, canvas, fGallery, null);
d107 23
a129 18
	protected void process(ResolvedItem item, Canvas canvas, FigureGallery fGallery, DiagramElement parent) {
		DiagramElement newParent = null;
		if (item.getDomainRef() instanceof EClass) {
			EClass type = (EClass) item.getDomainRef();
			if (item.getResolution() == Resolution.NODE) {
				newParent = createNode(type, fGallery, canvas);
			} else if (item.getResolution() == Resolution.LINK) {
				newParent = createLink(type, fGallery, canvas);
			}
		} else if (item.getDomainRef() instanceof EReference) {
			EReference ref = (EReference) item.getDomainRef();
			if (item.getResolution() == Resolution.LINK) {
				newParent = createLink(ref, fGallery, canvas);
			}
		} else if (item.getDomainRef() instanceof EAttribute) {
			EAttribute attr = (EAttribute) item.getDomainRef();
			if (item.getResolution() == Resolution.LABEL) {
				newParent = createLabel(attr, fGallery, canvas, parent);
d133 1
a133 1
			process(next, canvas, fGallery, newParent);
d138 1
a138 1
	protected Node createNode(EClass type, FigureGallery fGallery, Canvas canvas) {
d151 1
a151 1
	protected Connection createLink(EClass type, FigureGallery fGallery, Canvas canvas) {
d164 1
a164 1
	protected Connection createLink(EReference ref, FigureGallery fGallery, Canvas canvas) {
d181 1
a181 1
	protected DiagramLabel createLabel(EAttribute attr, FigureGallery fGallery, Canvas canvas, DiagramElement parent) {
@


1.9
log
@use generics wherever possible
@
text
@a13 2
import java.util.Iterator;

d61 2
a62 2
			for (Iterator it = item.getChildren().iterator(); it.hasNext();) {
				process((ResolvedItem) it.next(), canvas, fGallery, null);
a67 1
	@@SuppressWarnings("unchecked")
a68 1
		boolean descend = false;
a71 1
			String baseName = type.getName();
d73 1
a73 9
				Rectangle figure = gmfGraphFactory.createRectangle();
				figure.setName(getUniqueName(baseName, Messages.GraphDefBuilder1));
				fGallery.getFigures().add(figure);
				Node dElement = gmfGraphFactory.createNode();
				dElement.setFigure(figure);
				dElement.setName(getUniqueName(baseName, null));
				canvas.getNodes().add(dElement);
				descend = true;
				newParent = dElement;
d75 1
a75 9
				PolylineConnection figure = gmfGraphFactory.createPolylineConnection();
				figure.setName(getUniqueName(baseName, Messages.GraphDefBuilder1));
				fGallery.getFigures().add(figure);
				Connection dElement = gmfGraphFactory.createConnection();
				dElement.setFigure(figure);
				dElement.setName(getUniqueName(baseName, null));
				canvas.getConnections().add(dElement);
				descend = true;
				newParent = dElement;
a78 1
			String baseName = WizardUtil.getCapName(ref);
d80 1
a80 13
				PolylineConnection figure = gmfGraphFactory.createPolylineConnection();
				figure.setName(getUniqueName(baseName, Messages.GraphDefBuilder1));
				DecorationFigure decoration = gmfGraphFactory.createPolylineDecoration();
				decoration.setName(getUniqueName(baseName, Messages.GraphDefBuilder6));
				figure.setTargetDecoration(decoration);
				fGallery.getFigures().add(figure);
				fGallery.getFigures().add(decoration);
				Connection dElement = gmfGraphFactory.createConnection();
				dElement.setFigure(figure);
				dElement.setName(getUniqueName(baseName, null));
				canvas.getConnections().add(dElement);
				descend = true;
				newParent = dElement;
a83 1
			String baseName = WizardUtil.getCapName(attr);
d85 1
a85 12
				Label figure = gmfGraphFactory.createLabel();
				figure.setName(getUniqueName(baseName, Messages.GraphDefBuilder1));
				figure.setText(Messages.GraphDefBuilder5);
				// we are creators of this gmfgraph, assume no figure accessors get into it
				assert parent.getFigure() instanceof Figure;
				((Figure) parent.getFigure()).getChildren().add(figure);
				DiagramLabel dElement = gmfGraphFactory.createDiagramLabel();
				dElement.setFigure(figure);
				dElement.setName(getUniqueName(baseName, null));
				canvas.getLabels().add(dElement);
				descend = true;
				newParent = dElement;
d88 52
a139 4
		if (descend) {
			for (ResolvedItem next : item.getChildren()) {
				process(next, canvas, fGallery, newParent);
			}
d141 11
@


1.8
log
@not ready for API, internal for now
@
text
@d54 1
d70 1
d135 2
a136 2
			for (Iterator it = item.getChildren().iterator(); it.hasNext();) {
				process((ResolvedItem) it.next(), canvas, fGallery, newParent);
@


1.7
log
@use short names for diagram elements
@
text
@a19 2
import org.eclipse.gmf.common.IncrementalNamesDispenser;
import org.eclipse.gmf.common.NamesDispenser;
d36 2
@


1.6
log
@#144872 Unique figure and diagram element names should be used when graph def is generated for domain model with abstract class
@
text
@d81 1
a81 1
				dElement.setName(getUniqueName(baseName, Messages.GraphDefBuilder2));
d91 1
a91 1
				dElement.setName(getUniqueName(baseName, Messages.GraphDefBuilder3));
d109 1
a109 1
				dElement.setName(getUniqueName(baseName, Messages.GraphDefBuilder3));
d126 1
a126 1
				dElement.setName(getUniqueName(baseName, Messages.GraphDefBuilder4));
@


1.5
log
@#140887 Remove Child interface from GMFGraph.
Although the need to reference child figures persist, thus FigureHandle was introduced, to allow diagramElements to reference either *generateable* figures (Figure subclasses) or *just-use* figures (like CustomFigure and FigureAccessor).
Refactoring performed with #131365 "Mirror GMFGraph model when generating standalone figure plugin" in mind
@
text
@d20 2
d48 6
d60 1
a60 1
			fGallery.setName("default");
d77 1
a77 1
				figure.setName(baseName + "Figure");
d81 1
a81 1
				dElement.setName(baseName + "Node");
d87 1
a87 1
				figure.setName(baseName + "Figure");
d91 1
a91 1
				dElement.setName(baseName + "Link");
d101 1
a101 1
				figure.setName(baseName + "Figure");
d103 1
a103 1
				decoration.setName(baseName + "TargetDecoration");
d109 1
a109 1
				dElement.setName(baseName + "Link");
d119 2
a120 2
				figure.setName(baseName + "Figure");
				figure.setText("<...>");
d126 1
a126 1
				dElement.setName(baseName + "Label");
@


1.4
log
@#140468 GMFGraph wizard creates invalid model
@
text
@d25 1
d113 3
a115 1
				parent.getFigure().getChildren().add(figure);
@


1.3
log
@#130715 Use default label text defined in gmfgraph model
@
text
@d97 1
@


1.2
log
@#130550 Create label figures inside node figures so they will be not external by default
@
text
@d110 1
@


1.1
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@d23 1
d54 1
a54 1
				process((ResolvedItem) it.next(), canvas, fGallery);
d60 1
a60 1
	protected void process(ResolvedItem item, Canvas canvas, FigureGallery fGallery) {
d62 1
d75 1
d85 1
d102 1
d110 1
a110 1
				fGallery.getFigures().add(figure);
d116 1
d121 1
a121 1
				process((ResolvedItem) it.next(), canvas, fGallery);
@

