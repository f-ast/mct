head	1.15;
access;
symbols
	v20080924-1925:1.15
	v20080722-1827:1.15
	v20080716-1642:1.15
	R2_1_maintenance:1.15.0.4
	Root_R2_1_maintenance:1.15
	R2_1_0:1.15
	v20080417-1610:1.15
	v20080322-0000:1.15
	v20080222-1200:1.15
	v20080215-1500:1.15
	v20080207-0207:1.15
	v20071124-0000:1.15
	v20071108-0000:1.15
	v20070903-0000:1.15
	v20070809-0000:1.15
	R2_0_maintenance:1.15.0.2
	R2_0:1.15
	R4_20:1.15
	v20070621-0000:1.15
	RC3_20:1.15
	v20070608-1300:1.15
	v20070605-1400:1.15
	v20070601-1400:1.15
	v20070520-1200:1.15
	v20070518-1300:1.15
	v20070420-1000:1.15
	v20070413-1300:1.14
	v20070405-2000:1.14
	v20070330-1300:1.14
	v20070322-1100:1.14
	v20060316-0600:1.14
	v20070301-1200:1.14
	v20070228-2000:1.14
	v20070208-1800:1.14
	M4_20:1.14
	v20061214-0000:1.14
	M3_20:1.13
	v20061117-0800:1.13
	v20061013-1330:1.13
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060904-1500:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060620-0400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.2
	v20060531-1730:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.15
date	2007.04.18.12.29.18;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	779946260f1e4567;

1.14
date	2006.11.24.10.43.53;	author dstadnik;	state Exp;
branches;
next	1.13;
commitid	3c324566cce94567;

1.13
date	2006.09.21.15.51.18;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.21.12.32.08;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.19.12.46.57;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.19.12.19.41;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.18.18.13.15;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.18.17.35.15;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.09.13.14.24.22;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.07.17.41.02;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.07.15.35.40;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.05.12.18.28;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.15.10.05.34;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.01.13.38.58;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.12.46.08;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.15
log
@overriding method to pass constant value is not a good approach
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards;

import org.eclipse.core.resources.IFile;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.gmf.internal.bridge.resolver.StructureResolver;
import org.eclipse.gmf.internal.bridge.ui.Plugin;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.DefinitionPage;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.DomainModelSelectionPage;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.DomainModelSourceImpl;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.StructureBuilder;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.ToolDefBuilder;
import org.eclipse.gmf.internal.common.URIUtil;
import org.eclipse.gmf.internal.common.ui.ModelSelectionPage;
import org.eclipse.gmf.internal.common.ui.ResourceLocationProvider;
import org.eclipse.gmf.tooldef.ToolRegistry;
import org.eclipse.gmf.tooldef.presentation.GMFToolModelWizard;

/**
 * @@author dstadnik
 */
public class GMFToolSimpleModelWizard extends GMFToolModelWizard {

	protected ModelSelectionPage toolingModelSelectionPage;

	protected DefinitionPage toolingDefinitionPage;

	protected WizardOperationMode mode = new WizardOperationMode("gmftool", WizardOperationMode.CREATE); //$NON-NLS-1$

	public void setMode(String mode) {
		this.mode.setMode(mode);
	}

	/**
	 * Returns true if wizard operates in reconcile mode.
	 * Resource must be available if returns true.
	 */
	protected boolean isInReconcileMode() {
		return toolingModelSelectionPage != null && toolingModelSelectionPage.getResource() != null;
	}

	public boolean performFinish() {
		if (isInReconcileMode()) {
			reconcileModel();
			try {
				WizardUtil.saveModel(getContainer(), toolingModelSelectionPage.getResource());
			} catch (Exception exception) {
				Plugin.log(exception);
				return false;
			}
			IFile modelFile = getModelFile();
			if (modelFile != null) {
				WizardUtil.openEditor(modelFile);
			}
			return true;
		} else {
			return super.performFinish();
		}
	}

	protected EObject createInitialModel() {
		ToolDefBuilder builder = new ToolDefBuilder(null);
		return builder.process(toolingDefinitionPage.getModel());
	}

	protected void reconcileModel() {
		ToolRegistry existingToolRegistry = null;
		for (EObject element : toolingModelSelectionPage.getResource().getContents()) {
			if (element instanceof ToolRegistry) {
				existingToolRegistry = (ToolRegistry) element;
				break;
			}
		}
		ToolDefBuilder builder = new ToolDefBuilder(existingToolRegistry);
		ToolRegistry toolRegistry = builder.process(toolingDefinitionPage.getModel());
		if (toolRegistry != null && existingToolRegistry != toolRegistry) {
			toolingModelSelectionPage.getResource().getContents().add(toolRegistry);
		}
	}

	public void addPages() {
		ResourceLocationProvider rloc = new ResourceLocationProvider(selection);
		ResourceSet resourceSet = new ResourceSetImpl();
		if (mode.detectReconcile(rloc)) {
			toolingModelSelectionPage = new ModelSelectionPage("ToolingModelSelectionPage", rloc, resourceSet, "gmftool"); //$NON-NLS-1$ //$NON-NLS-2$
			toolingModelSelectionPage.setPageComplete(false);
			toolingModelSelectionPage.setModelRequired(true);
			toolingModelSelectionPage.setTitle(Messages.SimpleModelWizardToolModelSelectionPageTitle);
			toolingModelSelectionPage.setDescription(Messages.SimpleModelWizardToolModelSelectionPageDesc);
			addPage(toolingModelSelectionPage);
		} else {
			super.addPages();
			if (selection != null && !selection.isEmpty()) {
				Object selected = selection.getFirstElement();
				if (selected instanceof IFile) {
					newFileCreationPage.setFileName(WizardUtil.getDefaultFileName((IFile) selected, "gmftool")); //$NON-NLS-1$
				}
			}
		}

		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", rloc, resourceSet); //$NON-NLS-1$
		domainModelSelectionPage.setTitle(Messages.SimpleModelWizardDomainModelSelectionPageTitle);
		domainModelSelectionPage.setDescription(Messages.SimpleModelWizardDomainModelSelectionPageDesc);
		addPage(domainModelSelectionPage);

		toolingDefinitionPage = new DefinitionPage("ToolingDefinitionPage", new StructureBuilder(new StructureResolver(), false), domainModelSelectionPage) { //$NON-NLS-1$

			protected DomainModelSourceImpl createDomainModelSource(EPackage contents, EClass diagramElement) {
				if (isInReconcileMode()) {
					return new DomainModelSourceImpl(contents, diagramElement) {

						public boolean isDisabled(EObject domainElement) {
							return ToolDefBuilder.getCreationTool(toolingModelSelectionPage.getResource().getAllContents(), domainElement) != null;
						}
					};
				}
				return super.createDomainModelSource(contents, diagramElement);
			}
		};
		toolingDefinitionPage.setTitle(Messages.SimpleModelWizardToolDefinitionPageTitle);
		toolingDefinitionPage.setDescription(Messages.SimpleModelWizardToolDefinitionPageDesc);
		addPage(toolingDefinitionPage);
	}

	public IFile getModelFile() {
		if (isInReconcileMode()) {
			return URIUtil.getFile(toolingModelSelectionPage.getResource().getURI());
		}
		return super.getModelFile();
	}
}
@


1.14
log
@remove duplicate getFile() method; use the one from URIUtil
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
a13 2
import java.util.List;

a79 1
	@@SuppressWarnings("unchecked")
d82 1
a82 1
		for (EObject element : (List<? extends EObject>) toolingModelSelectionPage.getResource().getContents()) {
d99 1
a99 6
			toolingModelSelectionPage = new ModelSelectionPage("ToolingModelSelectionPage", rloc, resourceSet) { //$NON-NLS-1$

				protected String getModelFileExtension() {
					return "gmftool"; //$NON-NLS-1$
				}
			};
@


1.13
log
@allow to use shared resultset
@
text
@d29 1
d149 1
a149 1
			return WizardUtil.getFile(toolingModelSelectionPage.getResource().getURI());
@


1.12
log
@set page to require model to be selected
@
text
@d20 2
d99 1
d101 1
a101 1
			toolingModelSelectionPage = new ModelSelectionPage("ToolingModelSelectionPage", rloc) { //$NON-NLS-1$
d122 1
a122 1
		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", rloc); //$NON-NLS-1$
@


1.11
log
@simple wizards i18n
@
text
@a19 1
import org.eclipse.emf.ecore.resource.Resource;
a102 5

				protected void setResource(Resource resource) {
					super.setResource(resource);
					setPageComplete(getResource() != null);
				}
d105 1
@


1.10
log
@move pages and model of simple graph and tool wizards in dedicated package; provide i18n
@
text
@d111 2
a112 2
			toolingModelSelectionPage.setTitle("Tooling Definition Model");
			toolingModelSelectionPage.setDescription("Select tooling definition model to update. New tools will be added to this model.");
d125 2
a126 2
		domainModelSelectionPage.setTitle("Domain Model");
		domainModelSelectionPage.setDescription("Select file with ecore domain model");
d143 2
a144 2
		toolingDefinitionPage.setTitle("Tooling Definition");
		toolingDefinitionPage.setDescription("Specify basic tooling definition of the domain model");
@


1.9
log
@return valid file on reconcile
@
text
@a20 2
import org.eclipse.gmf.internal.bridge.resolver.DomainModelSourceImpl;
import org.eclipse.gmf.internal.bridge.resolver.StructureBuilder;
d23 5
a27 3
import org.eclipse.gmf.internal.bridge.wizards.pages.DefinitionPage;
import org.eclipse.gmf.internal.bridge.wizards.pages.DomainModelSelectionPage;
import org.eclipse.gmf.internal.bridge.wizards.pages.ToolDefBuilder;
@


1.8
log
@#126531 add merge capability to the tooling wizard
@
text
@d65 4
a68 1
			WizardUtil.openEditor(toolingModelSelectionPage.getResource().getURI());
d147 7
@


1.7
log
@update due changes in underlying wizards
@
text
@d14 2
d17 1
d19 3
d24 1
d28 1
d30 1
d38 33
a70 1
	protected DefinitionPage toolDefinitionPage;
d73 18
a90 2
		ToolDefBuilder builder = new ToolDefBuilder();
		return builder.process(toolDefinitionPage.getModel());
d94 3
a96 1
		super.addPages();
d98 20
a117 4
		if (selection != null && !selection.isEmpty()) {
			Object selected = selection.getFirstElement();
			if (selected instanceof IFile) {
				newFileCreationPage.setFileName(WizardUtil.getDefaultFileName((IFile) selected, "gmftool")); //$NON-NLS-1$
d121 1
a121 2
		ResourceLocationProvider rloc = new ResourceLocationProvider(selection);
		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", rloc);
d126 17
a142 4
		toolDefinitionPage = new DefinitionPage("ToolDefinitionPage", new StructureBuilder(new StructureResolver(), false), domainModelSelectionPage); //$NON-NLS-1$
		toolDefinitionPage.setTitle("Tooling Definition");
		toolDefinitionPage.setDescription("Specify basic tooling definition of the domain model");
		addPage(toolDefinitionPage);
@


1.6
log
@#156534 Consider selected file in model selection page
@
text
@a22 3
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
a45 3
		initialObjectCreationPage.dispose();
		initialObjectCreationPage = new PredefinedInitialObjectCreationPage("Whatever2"); //$NON-NLS-1$

a56 35

	public void addPage(IWizardPage page) {
		if (page == initialObjectCreationPage) {
			return;
		}
		super.addPage(page);
	}

	public class PredefinedInitialObjectCreationPage extends GMFToolModelWizardInitialObjectCreationPage {

		public PredefinedInitialObjectCreationPage(String pageId) {
			super(pageId);
		}

		public void createControl(Composite parent) {
			Composite composite = new Composite(parent, SWT.NONE);
			setControl(composite);
		}

		protected boolean validatePage() {
			return true;
		}

		public void setVisible(boolean visible) {
			getControl().setVisible(visible);
		}

		public String getInitialObjectName() {
			return gmfToolPackage.getToolRegistry().getName();
		}

		public String getEncoding() {
			return "UTF-8"; //$NON-NLS-1$
		}
	}
@


1.5
log
@#156342 Simple graph and tool def wizards should use common domain model selection page
@
text
@d21 1
d52 2
a53 1
		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage");
@


1.4
log
@#148810 There is no need to show labels in wizard that creates tooling definition
@
text
@a19 1
import org.eclipse.gmf.internal.bridge.wizards.pages.FileDomainModelSource;
a32 2
	protected FileDomainModelSource domainModelSource = new FileDomainModelSource();

d51 1
a51 1
		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", selection, domainModelSource); //$NON-NLS-1$
d56 1
a56 1
		toolDefinitionPage = new DefinitionPage("ToolDefinitionPage", new StructureBuilder(new StructureResolver(), false), domainModelSource); //$NON-NLS-1$
@


1.3
log
@refactor diagram element selector
@
text
@d59 1
a59 1
		toolDefinitionPage = new DefinitionPage("ToolDefinitionPage", new StructureBuilder(new StructureResolver()), domainModelSource); //$NON-NLS-1$
@


1.2
log
@add nls markers
@
text
@d59 1
a59 1
		toolDefinitionPage = new DefinitionPage("ToolDefinitionPage", new StructureBuilder(new StructureResolver()), domainModelSource, false); //$NON-NLS-1$
@


1.1
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@d47 1
a47 1
				newFileCreationPage.setFileName(WizardUtil.getDefaultFileName((IFile) selected, "gmftool"));
d52 1
a52 1
		initialObjectCreationPage = new PredefinedInitialObjectCreationPage("Whatever2");
d54 1
a54 1
		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", selection, domainModelSource);
d59 1
a59 1
		toolDefinitionPage = new DefinitionPage("ToolDefinitionPage", new StructureBuilder(new StructureResolver()), domainModelSource, false);
d96 1
a96 1
			return "UTF-8";
@

