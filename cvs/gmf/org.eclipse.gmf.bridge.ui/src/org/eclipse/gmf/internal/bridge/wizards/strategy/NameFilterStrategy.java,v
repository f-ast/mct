head	1.4;
access;
symbols
	v20080924-1925:1.4
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080417-1610:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080207-0207:1.3.2.1
	v20071124-0000:1.3.2.1
	v20071108-0000:1.4
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070520-1200:1.2
	v20070518-1300:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-2000:1.2
	v20070330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1
	v20060925-1700:1.1
	v20060919-0800:1.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060620-0400:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.10.23.13.24.54;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	640a471df6254567;

1.3
date	2007.06.21.14.03.14;	author atikhomirov;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	1176467a85204567;

1.2
date	2007.03.14.12.59.33;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	114b45f7f1b34567;

1.1
date	2006.02.28.19.07.41;	author atikhomirov;	state Exp;
branches;
next	;

1.3.2.1
date	2007.11.20.12.56.21;	author dstadnik;	state Exp;
branches;
next	;
commitid	5e404742d9754567;


desc
@@


1.4
log
@make compilable with 3.3.1
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards.strategy;

import java.util.Collection;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import org.eclipse.emf.ecore.ENamedElement;

/**
 * Removes elements that don't match specified patterns 
 * @@author artem
 */
public class NameFilterStrategy implements Strategy<ENamedElement> {
	private final Pattern[] myPatterns;

	/**
	 * @@param namePatterns - regexp. <code>IllegalArgumentException</code> is thrown is some pattern is illegal
	 * @@throws IllegalArgumentException 
	 */
	public NameFilterStrategy(String[] namePatterns) {
		assert namePatterns != null && namePatterns.length > 1;
		myPatterns = new Pattern[namePatterns.length];
		try {
			for (int i = 0; i < namePatterns.length; i++) {
				myPatterns[i] = Pattern.compile(namePatterns[i]);
			}
		} catch (PatternSyntaxException ex) {
			throw new IllegalArgumentException(ex.getMessage());
		}
	}

	public String getID() {
		return "nameFilter";
	}

	/**
	 * @@param soFar - expects <code>List&lt;ENamedElement&gt;</code>
	 */
	public void filter(Collection<ENamedElement> soFar, Hierarchy hierarchy) {
		for (Iterator<ENamedElement> it = soFar.iterator(); it.hasNext();) {
			if (!match(it.next().getName())) {
				it.remove();
			}
		}
	}

	protected boolean match(String name) {
		if (name == null)
		for (int i = 0; i < myPatterns.length; i++) {
			if (myPatterns[i].matcher(name).matches()) {
				return true;
			}
		}
		return false;
	}
}
@


1.3
log
@fix copyright years
@
text
@a19 1
import org.eclipse.emf.ecore.EObject;
d25 1
a25 1
public class NameFilterStrategy implements Strategy {
d51 3
a53 4
	public void filter(Collection<EObject> soFar, Hierarchy hierarchy) {
		for (Iterator<EObject> it = soFar.iterator(); it.hasNext();) {
			ENamedElement next = (ENamedElement) it.next();
			if (!match(next.getName())) {
@


1.3.2.1
log
@propagate changes from head to make compilable
@
text
@d20 1
d26 1
a26 1
public class NameFilterStrategy implements Strategy<ENamedElement> {
d52 4
a55 3
	public void filter(Collection<ENamedElement> soFar, Hierarchy hierarchy) {
		for (Iterator<ENamedElement> it = soFar.iterator(); it.hasNext();) {
			if (!match(it.next().getName())) {
@


1.2
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.1
log
@Introduced separate plugin for Tooling UI, moved mapping wizard of #114186 to this plugin.
Wizard got some NLS, respect selection, open-created-model-in-editor improvements as well as aligned with recent gmfmap changes.
Plus, some refactorings to address user-prioritized strategies to select nodes/links doubled number of classes we had.
@
text
@d20 1
d52 2
a53 2
	public void filter(Collection soFar, Hierarchy hierarchy) {
		for (Iterator it = soFar.iterator(); it.hasNext();) {
@

