head	1.17;
access;
symbols
	v20080924-1925:1.17
	v20080722-1827:1.17
	v20080716-1642:1.17
	R2_1_maintenance:1.17.0.4
	Root_R2_1_maintenance:1.17
	R2_1_0:1.17
	v20080417-1610:1.17
	v20080322-0000:1.17
	v20080222-1200:1.17
	v20080215-1500:1.17
	v20080207-0207:1.17
	v20071124-0000:1.17
	v20071108-0000:1.17
	v20070903-0000:1.17
	v20070809-0000:1.17
	R2_0_maintenance:1.17.0.2
	R2_0:1.17
	R4_20:1.17
	v20070621-0000:1.17
	RC3_20:1.17
	v20070608-1300:1.17
	v20070605-1400:1.16
	v20070601-1400:1.16
	v20070520-1200:1.16
	v20070518-1300:1.16
	v20070420-1000:1.16
	v20070413-1300:1.15
	v20070405-2000:1.15
	v20070330-1300:1.15
	v20070322-1100:1.15
	v20060316-0600:1.15
	v20070301-1200:1.15
	v20070228-2000:1.15
	v20070208-1800:1.15
	M4_20:1.15
	v20061214-0000:1.15
	M3_20:1.14
	v20061117-0800:1.14
	v20061013-1330:1.14
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060904-1500:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060620-0400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.2
	v20060531-1730:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.17
date	2007.06.06.17.43.21;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	721e4666f2394567;

1.16
date	2007.04.18.12.29.18;	author atikhomirov;	state Exp;
branches;
next	1.15;
commitid	779946260f1e4567;

1.15
date	2006.11.24.10.43.53;	author dstadnik;	state Exp;
branches;
next	1.14;
commitid	3c324566cce94567;

1.14
date	2006.09.21.15.51.18;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.21.12.32.08;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.19.12.46.57;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.19.12.19.41;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.18.18.13.15;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.15.19.24.23;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.15.12.18.10;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.09.13.14.24.22;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.07.17.41.02;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.07.15.35.40;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.05.12.18.28;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.15.10.05.34;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.01.13.38.58;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.12.46.08;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.17
log
@[191303] Restore old behavior (adding layout manager) for diagram nodes with inner labels; CCE in xpand's Collection.isEmpty fixed; better formatting for layout generated code
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards;

import org.eclipse.core.resources.IFile;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.presentation.GMFGraphModelWizard;
import org.eclipse.gmf.internal.bridge.resolver.StructureResolver;
import org.eclipse.gmf.internal.bridge.ui.Plugin;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.DefinitionPage;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.DomainModelSelectionPage;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.DomainModelSourceImpl;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.GraphDefBuilder;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.StructureBuilder;
import org.eclipse.gmf.internal.common.URIUtil;
import org.eclipse.gmf.internal.common.ui.ModelSelectionPage;
import org.eclipse.gmf.internal.common.ui.ResourceLocationProvider;

/**
 * @@author dstadnik
 */
public class GMFGraphSimpleModelWizard extends GMFGraphModelWizard {

	protected ModelSelectionPage graphicalModelSelectionPage;

	protected DefinitionPage graphicalDefinitionPage;

	protected WizardOperationMode mode = new WizardOperationMode("gmfgraph", WizardOperationMode.CREATE); //$NON-NLS-1$

	public void setMode(String mode) {
		this.mode.setMode(mode);
	}

	/**
	 * Returns true if wizard operates in reconcile mode.
	 * Resource must be available if returns true.
	 */
	protected boolean isInReconcileMode() {
		return graphicalModelSelectionPage != null && graphicalModelSelectionPage.getResource() != null;
	}

	public boolean performFinish() {
		if (isInReconcileMode()) {
			reconcileModel();
			try {
				WizardUtil.saveModel(getContainer(), graphicalModelSelectionPage.getResource());
			} catch (Exception exception) {
				Plugin.log(exception);
				return false;
			}
			IFile modelFile = getModelFile();
			if (modelFile != null) {
				WizardUtil.openEditor(modelFile);
			}
			return true;
		} else {
			return super.performFinish();
		}
	}

	protected EObject createInitialModel() {
		GraphDefBuilder builder = new GraphDefBuilder(null);
		return builder.process(graphicalDefinitionPage.getModel());
	}

	protected void reconcileModel() {
		Canvas existingCanvas = null;
		for (EObject element : graphicalModelSelectionPage.getResource().getContents()) {
			if (element instanceof Canvas) {
				existingCanvas = (Canvas) element;
				break;
			}
		}
		GraphDefBuilder builder = new GraphDefBuilder(existingCanvas);
		Canvas canvas = builder.process(graphicalDefinitionPage.getModel());
		if (canvas != null && existingCanvas != canvas) {
			graphicalModelSelectionPage.getResource().getContents().add(canvas);
		}
	}

	public void addPages() {
		ResourceLocationProvider rloc = new ResourceLocationProvider(selection);
		ResourceSet resourceSet = new ResourceSetImpl();
		if (mode.detectReconcile(rloc)) {
			graphicalModelSelectionPage = new ModelSelectionPage("GraphicalModelSelectionPage", rloc, resourceSet, "gmfgraph"); //$NON-NLS-1$ //$NON-NLS-2$
			graphicalModelSelectionPage.setPageComplete(false);
			graphicalModelSelectionPage.setModelRequired(true);
			graphicalModelSelectionPage.setTitle(Messages.SimpleModelWizardGraphModelSelectionPageTitle);
			graphicalModelSelectionPage.setDescription(Messages.SimpleModelWizardGraphModelSelectionPageDesc);
			addPage(graphicalModelSelectionPage);
		} else {
			super.addPages();
			if (selection != null && !selection.isEmpty()) {
				Object selected = selection.getFirstElement();
				if (selected instanceof IFile) {
					newFileCreationPage.setFileName(WizardUtil.getDefaultFileName((IFile) selected, "gmfgraph")); //$NON-NLS-1$
				}
			}
		}

		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", rloc, resourceSet); //$NON-NLS-1$
		domainModelSelectionPage.setTitle(Messages.SimpleModelWizardDomainModelSelectionPageTitle);
		domainModelSelectionPage.setDescription(Messages.SimpleModelWizardDomainModelSelectionPageDesc);
		addPage(domainModelSelectionPage);

		graphicalDefinitionPage = new DefinitionPage("GraphicalDefinitionPage", new StructureBuilder(new StructureResolver(), true), domainModelSelectionPage) { //$NON-NLS-1$

			protected DomainModelSourceImpl createDomainModelSource(EPackage contents, EClass diagramElement) {
				if (isInReconcileMode()) {
					return new DomainModelSourceImpl(contents, diagramElement) {

						public boolean isDisabled(EObject domainElement) {
							return GraphDefBuilder.getDiagramElement(graphicalModelSelectionPage.getResource().getAllContents(), domainElement) != null;
						}
					};
				}
				return super.createDomainModelSource(contents, diagramElement);
			}
		};
		graphicalDefinitionPage.setTitle(Messages.SimpleModelWizardGraphDefinitionPageTitle);
		graphicalDefinitionPage.setDescription(Messages.SimpleModelWizardGraphDefinitionPageDesc);
		addPage(graphicalDefinitionPage);
	}

	public IFile getModelFile() {
		if (isInReconcileMode()) {
			return URIUtil.getFile(graphicalModelSelectionPage.getResource().getURI());
		}
		return super.getModelFile();
	}
}
@


1.16
log
@overriding method to pass constant value is not a good approach
@
text
@a13 2
import java.util.List;

a79 1
	@@SuppressWarnings("unchecked")
d82 1
a82 1
		for (EObject element : (List<? extends EObject>) graphicalModelSelectionPage.getResource().getContents()) {
@


1.15
log
@remove duplicate getFile() method; use the one from URIUtil
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
d102 1
a102 6
			graphicalModelSelectionPage = new ModelSelectionPage("GraphicalModelSelectionPage", rloc, resourceSet) { //$NON-NLS-1$

				protected String getModelFileExtension() {
					return "gmfgraph"; //$NON-NLS-1$
				}
			};
@


1.14
log
@allow to use shared resultset
@
text
@d31 1
d149 1
a149 1
			return WizardUtil.getFile(graphicalModelSelectionPage.getResource().getURI());
@


1.13
log
@set page to require model to be selected
@
text
@d20 2
d99 1
d101 1
a101 1
			graphicalModelSelectionPage = new ModelSelectionPage("GraphicalModelSelectionPage", rloc) { //$NON-NLS-1$
d122 1
a122 1
		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", rloc); //$NON-NLS-1$
@


1.12
log
@simple wizards i18n
@
text
@a19 1
import org.eclipse.emf.ecore.resource.Resource;
a102 5

				protected void setResource(Resource resource) {
					super.setResource(resource);
					setPageComplete(getResource() != null);
				}
d105 1
@


1.11
log
@move pages and model of simple graph and tool wizards in dedicated package; provide i18n
@
text
@d111 2
a112 2
			graphicalModelSelectionPage.setTitle("Graphical Definition Model");
			graphicalModelSelectionPage.setDescription("Select graphical definition model to update. New diagram elements will be added to this model.");
d125 2
a126 2
		domainModelSelectionPage.setTitle("Domain Model");
		domainModelSelectionPage.setDescription("Select file with ecore domain model");
d143 2
a144 2
		graphicalDefinitionPage.setTitle("Graphical Definition");
		graphicalDefinitionPage.setDescription("Specify basic graphical definition of the domain model");
@


1.10
log
@return valid file on reconcile
@
text
@a22 2
import org.eclipse.gmf.internal.bridge.resolver.DomainModelSourceImpl;
import org.eclipse.gmf.internal.bridge.resolver.StructureBuilder;
d25 5
a29 3
import org.eclipse.gmf.internal.bridge.wizards.pages.DefinitionPage;
import org.eclipse.gmf.internal.bridge.wizards.pages.DomainModelSelectionPage;
import org.eclipse.gmf.internal.bridge.wizards.pages.GraphDefBuilder;
@


1.9
log
@#126531 allow to specify reconcile mode explicitly
@
text
@d65 4
a68 1
			WizardUtil.openEditor(graphicalModelSelectionPage.getResource().getURI());
d147 7
@


1.8
log
@#126531 Wizards that infer tooling and graph definitions should be able to add results to the existing models
@
text
@a13 1
import java.util.HashMap;
a14 1
import java.util.Map;
a16 1
import org.eclipse.core.runtime.IProgressMonitor;
a20 1
import org.eclipse.emf.ecore.xmi.XMLResource;
a22 1
import org.eclipse.gmf.gmfgraph.provider.GMFGraphEditPlugin;
d26 1
a31 1
import org.eclipse.ui.actions.WorkspaceModifyOperation;
d42 6
d60 1
a60 1
				saveModel(graphicalModelSelectionPage.getResource());
d62 1
a62 1
				GMFGraphEditPlugin.INSTANCE.log(exception);
a92 19
	@@SuppressWarnings("unchecked")
	protected void saveModel(final Resource resource) throws Exception {
		WorkspaceModifyOperation operation = new WorkspaceModifyOperation() {

			protected void execute(IProgressMonitor progressMonitor) {
				try {
					Map options = new HashMap();
					options.put(XMLResource.OPTION_ENCODING, "UTF-8"); //$NON-NLS-1$
					resource.save(options);
				} catch (Exception exception) {
					GMFGraphEditPlugin.INSTANCE.log(exception);
				} finally {
					progressMonitor.done();
				}
			}
		};
		getContainer().run(false, false, operation);
	}

d95 2
a96 3
		final boolean reconcileMode = !rloc.getSelectedURIs("gmfgraph", true).isEmpty(); // enabled when gmfgraph model selected
		if (reconcileMode) {
			graphicalModelSelectionPage = new ModelSelectionPage("GraphicalModelSelectionPage", rloc) {
d121 1
a121 1
		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", rloc);
@


1.7
log
@update due changes in underlying wizards
@
text
@d14 4
d19 2
d22 4
d27 2
d34 1
d36 1
d43 2
d47 24
d72 1
a72 1
		GraphDefBuilder builder = new GraphDefBuilder();
d76 35
d112 25
a136 6
		super.addPages();

		if (selection != null && !selection.isEmpty()) {
			Object selected = selection.getFirstElement();
			if (selected instanceof IFile) {
				newFileCreationPage.setFileName(WizardUtil.getDefaultFileName((IFile) selected, "gmfgraph")); //$NON-NLS-1$
a139 1
		ResourceLocationProvider rloc = new ResourceLocationProvider(selection);
d145 14
a158 1
		graphicalDefinitionPage = new DefinitionPage("GraphicalDefinitionPage", new StructureBuilder(new StructureResolver(), true), domainModelSelectionPage); //$NON-NLS-1$
@


1.6
log
@#156534 Consider selected file in model selection page
@
text
@a22 3
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
a45 3
		initialObjectCreationPage.dispose();
		initialObjectCreationPage = new PredefinedInitialObjectCreationPage("Whatever2"); //$NON-NLS-1$

a56 35

	public void addPage(IWizardPage page) {
		if (page == initialObjectCreationPage) {
			return;
		}
		super.addPage(page);
	}

	public class PredefinedInitialObjectCreationPage extends GMFGraphModelWizardInitialObjectCreationPage {

		public PredefinedInitialObjectCreationPage(String pageId) {
			super(pageId);
		}

		public void createControl(Composite parent) {
			Composite composite = new Composite(parent, SWT.NONE);
			setControl(composite);
		}

		protected boolean validatePage() {
			return true;
		}

		public void setVisible(boolean visible) {
			getControl().setVisible(visible);
		}

		public String getInitialObjectName() {
			return gmfGraphPackage.getCanvas().getName();
		}

		public String getEncoding() {
			return "UTF-8"; //$NON-NLS-1$
		}
	}
@


1.5
log
@#156342 Simple graph and tool def wizards should use common domain model selection page
@
text
@d22 1
d52 2
a53 1
		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage");
@


1.4
log
@#148810 There is no need to show labels in wizard that creates tooling definition
@
text
@a20 1
import org.eclipse.gmf.internal.bridge.wizards.pages.FileDomainModelSource;
a32 2
	protected FileDomainModelSource domainModelSource = new FileDomainModelSource();

d51 1
a51 1
		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", selection, domainModelSource); //$NON-NLS-1$
d56 1
a56 1
		graphicalDefinitionPage = new DefinitionPage("GraphicalDefinitionPage", new StructureBuilder(new StructureResolver(), true), domainModelSource); //$NON-NLS-1$
@


1.3
log
@refactor diagram element selector
@
text
@d59 1
a59 1
		graphicalDefinitionPage = new DefinitionPage("GraphicalDefinitionPage", new StructureBuilder(new StructureResolver()), domainModelSource); //$NON-NLS-1$
@


1.2
log
@add nls markers
@
text
@d59 1
a59 1
		graphicalDefinitionPage = new DefinitionPage("GraphicalDefinitionPage", new StructureBuilder(new StructureResolver()), domainModelSource, false); //$NON-NLS-1$
@


1.1
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@d47 1
a47 1
				newFileCreationPage.setFileName(WizardUtil.getDefaultFileName((IFile) selected, "gmfgraph"));
d52 1
a52 1
		initialObjectCreationPage = new PredefinedInitialObjectCreationPage("Whatever2");
d54 1
a54 1
		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", selection, domainModelSource);
d59 1
a59 1
		graphicalDefinitionPage = new DefinitionPage("GraphicalDefinitionPage", new StructureBuilder(new StructureResolver()), domainModelSource, false);
d96 1
a96 1
			return "UTF-8";
@

