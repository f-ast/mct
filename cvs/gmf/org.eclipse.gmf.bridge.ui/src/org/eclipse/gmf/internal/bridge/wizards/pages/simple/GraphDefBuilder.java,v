head	1.6;
access;
symbols
	v20080924-1925:1.6
	v20080722-1827:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080417-1610:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20080207-0207:1.6
	v20071124-0000:1.6
	v20071108-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070608-1300:1.6
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070520-1200:1.4
	v20070518-1300:1.4
	v20070420-1000:1.4
	v20070413-1300:1.3
	v20070405-2000:1.3
	v20070330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070301-1200:1.2
	v20070228-2000:1.2
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.06.06.17.43.21;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	721e4666f2394567;

1.5
date	2007.05.28.13.33.45;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	3e4c465ada394567;

1.4
date	2007.04.17.08.45.26;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	6ec5462489254567;

1.3
date	2007.03.14.12.59.33;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	114b45f7f1b34567;

1.2
date	2007.02.22.20.03.12;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	33a445ddf6fe4567;

1.1
date	2006.09.19.12.19.40;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[191303] Restore old behavior (adding layout manager) for diagram nodes with inner labels; CCE in xpand's Collection.isEmpty fixed; better formatting for layout generated code
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards.pages.simple;

import java.util.Iterator;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.ChildAccess;
import org.eclipse.gmf.gmfgraph.Connection;
import org.eclipse.gmf.gmfgraph.DecorationFigure;
import org.eclipse.gmf.gmfgraph.DiagramElement;
import org.eclipse.gmf.gmfgraph.DiagramLabel;
import org.eclipse.gmf.gmfgraph.FigureDescriptor;
import org.eclipse.gmf.gmfgraph.FigureGallery;
import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.Identity;
import org.eclipse.gmf.gmfgraph.Label;
import org.eclipse.gmf.gmfgraph.Node;
import org.eclipse.gmf.gmfgraph.PolylineConnection;
import org.eclipse.gmf.gmfgraph.RealFigure;
import org.eclipse.gmf.gmfgraph.Rectangle;
import org.eclipse.gmf.internal.bridge.wizards.WizardUtil;
import org.eclipse.gmf.internal.bridge.wizards.pages.simple.ResolvedItem.Resolution;
import org.eclipse.gmf.internal.common.IncrementalNamesDispenser;
import org.eclipse.gmf.internal.common.NamesDispenser;

/**
 * @@author dstadnik
 */
public class GraphDefBuilder {

	protected final Canvas existingCanvas;

	protected final GMFGraphFactory gmfGraphFactory = GMFGraphPackage.eINSTANCE.getGMFGraphFactory();

	protected final NamesDispenser namesDispenser = new IncrementalNamesDispenser();

	protected Canvas canvas;

	protected FigureGallery fGallery;

	public GraphDefBuilder(Canvas existingCanvas) {
		this.existingCanvas = existingCanvas;
	}

	public static DiagramElement getDiagramElement(Iterator<EObject> source, EObject domainElement) {
		String name = WizardUtil.getCapName(domainElement);
		if (name == null) {
			return null;
		}
		return getDiagramElement(source, name);
	}

	public static DiagramElement getDiagramElement(Iterator<EObject> source, String domainObjectName) {
		while (source.hasNext()) {
			Object next = source.next();
			if (next instanceof DiagramElement && domainObjectName.equals(((DiagramElement) next).getName())) {
				return (DiagramElement) next;
			}
		}
		return null;
	}

	protected String getUniqueName(String semanticPart) {
		return namesDispenser.get(semanticPart);
	}

	protected String getUniqueName(String semanticPart, String suffixPart) {
		return namesDispenser.get(semanticPart, suffixPart);
	}

	protected void addExistingName(String name) {
		if (name != null) {
			namesDispenser.add(name);
		}
	}

	protected void addExistingNames(Canvas canvas) {
		for (Iterator<EObject> it = canvas.eAllContents(); it.hasNext();) {
			EObject next = it.next();
			if (next instanceof Identity) {
				addExistingName(((Identity) next).getName());
			}
		}
	}

	public Canvas process(ResolvedItem item) {
		if (existingCanvas == null) {
			canvas = gmfGraphFactory.createCanvas();
		} else {
			canvas = existingCanvas;
			addExistingNames(existingCanvas);
		}
		if (item != null) {
			if (canvas != existingCanvas) {
				EPackage ePackage = (EPackage) item.getDomainRef();
				canvas.setName(getUniqueName(ePackage.getName()));
			}
			fGallery = null;
			for (Object figure : canvas.getFigures()) {
				if (figure instanceof FigureGallery) {
					fGallery = (FigureGallery) figure;
				}
			}
			if (fGallery == null) {
				fGallery = gmfGraphFactory.createFigureGallery();
				fGallery.setName(getUniqueName(Messages.GraphDefBuilder0));
				canvas.getFigures().add(fGallery);
			}
			for (ResolvedItem child : item.getChildren()) {
				process(child, null);
			}
		}
		return canvas;
	}

	protected void process(ResolvedItem item, DiagramElement parent) {
		DiagramElement newParent = getDiagramElement(canvas.eAllContents(), (EObject) item.getDomainRef());
		if (item.isDisabled()) {
			assert newParent != null : "For disabled item there should be a diagram element with the appropriate name"; //$NON-NLS-1$
			// Process child items since there may be new labels for existing node
		} else {
			if (item.getDomainRef() instanceof EClass) {
				EClass type = (EClass) item.getDomainRef();
				if (item.getResolution() == Resolution.NODE) {
					newParent = createNode(type);
				} else if (item.getResolution() == Resolution.LINK) {
					newParent = createLink(type);
				}
			} else if (item.getDomainRef() instanceof EReference) {
				EReference ref = (EReference) item.getDomainRef();
				if (item.getResolution() == Resolution.LINK) {
					EClass containingClass = (EClass) item.getParent().getDomainRef();
					newParent = createLink(ref, containingClass);
				}
			} else if (item.getDomainRef() instanceof EAttribute) {
				EAttribute attr = (EAttribute) item.getDomainRef();
				if (item.getResolution() == Resolution.LABEL) {
					EClass containingClass = (EClass) item.getParent().getDomainRef();
					newParent = createLabel(attr, containingClass, parent);
				}
			}
		}
		for (ResolvedItem next : item.getChildren()) {
			process(next, newParent);
		}
	}

	protected Node createNode(EClass type) {
		String baseName = WizardUtil.getCapName(type);
		Rectangle figure = gmfGraphFactory.createRectangle();
		figure.setName(getUniqueName(baseName, Messages.GraphDefBuilder1));
		Node node = gmfGraphFactory.createNode();
		node.setFigure(newDescriptor(figure.getName(), figure));
		fGallery.getDescriptors().add(node.getFigure());
		node.setName(getUniqueName(baseName, null));
		canvas.getNodes().add(node);
		return node;
	}

	protected Connection createLink(EClass type) {
		String baseName = WizardUtil.getCapName(type);
		PolylineConnection figure = gmfGraphFactory.createPolylineConnection();
		figure.setName(getUniqueName(baseName, Messages.GraphDefBuilder1));
		Connection link = gmfGraphFactory.createConnection();
		link.setFigure(newDescriptor(figure.getName(), figure));
		fGallery.getDescriptors().add(link.getFigure());
		link.setName(getUniqueName(baseName, null));
		canvas.getConnections().add(link);
		return link;
	}

	protected Connection createLink(EReference ref, EClass containingClass) {
		String baseName = WizardUtil.getCapName(ref, containingClass);
		PolylineConnection figure = gmfGraphFactory.createPolylineConnection();
		figure.setName(getUniqueName(baseName, Messages.GraphDefBuilder1));
		DecorationFigure decoration = gmfGraphFactory.createPolylineDecoration();
		decoration.setName(getUniqueName(baseName, Messages.GraphDefBuilder6));
		figure.setTargetDecoration(decoration);
		fGallery.getFigures().add(decoration);
		Connection link = gmfGraphFactory.createConnection();
		link.setFigure(newDescriptor(figure.getName(), figure));
		fGallery.getDescriptors().add(link.getFigure());
		link.setName(getUniqueName(baseName, null));
		canvas.getConnections().add(link);
		return link;
	}

	protected DiagramLabel createLabel(EAttribute attr, EClass containingClass, DiagramElement parent) {
		if (parent == null) {
			return null; // makes no sense to define label without parent
		}
		String baseName = WizardUtil.getCapName(attr, containingClass);
		Label figure = gmfGraphFactory.createLabel();
		figure.setName(getUniqueName(baseName, Messages.GraphDefBuilder1));
		figure.setText(Messages.GraphDefBuilder5);
		assert parent.getFigure().getActualFigure() instanceof RealFigure : "We are creators of this gmfgraph; there should be nothing but figure"; //$NON-NLS-1$
		final RealFigure realFigure = (RealFigure) parent.getFigure().getActualFigure();
		if (parent instanceof Node) {
			// safety check, not sure whether labels for links are created here or not
			if (realFigure.getLayout() == null) {
				realFigure.setLayout(GMFGraphFactory.eINSTANCE.createFlowLayout());
			}
		}
		realFigure.getChildren().add(figure);
		DiagramLabel label = gmfGraphFactory.createDiagramLabel();
		label.setFigure(parent.getFigure());
		label.setAccessor(newAccess(parent.getFigure(), figure));
		label.setName(getUniqueName(baseName, null));
		canvas.getLabels().add(label);
		return label;
	}

	private static FigureDescriptor newDescriptor(String name, RealFigure fig) {
		FigureDescriptor fd = GMFGraphFactory.eINSTANCE.createFigureDescriptor();
		fd.setActualFigure(fig);
		fd.setName(name);
		return fd;
	}
	private static ChildAccess newAccess(FigureDescriptor fd, RealFigure child) {
		ChildAccess ca = GMFGraphFactory.eINSTANCE.createChildAccess();
		ca.setFigure(child);
		fd.getAccessors().add(ca);
		return ca;
	}
}
@


1.5
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@a101 1
	@@SuppressWarnings("unchecked")
d213 8
a220 1
		((RealFigure) parent.getFigure().getActualFigure()).getChildren().add(figure);
@


1.4
log
@use enum for resolution
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
d22 1
d27 1
a27 1
import org.eclipse.gmf.gmfgraph.Figure;
d35 1
d49 1
a49 1
	protected GMFGraphFactory gmfGraphFactory = GMFGraphPackage.eINSTANCE.getGMFGraphFactory();
d51 1
a51 1
	protected NamesDispenser namesDispenser = new IncrementalNamesDispenser();
a164 1
	@@SuppressWarnings("unchecked")
a168 1
		fGallery.getFigures().add(figure);
d170 2
a171 1
		node.setFigure(figure);
a176 1
	@@SuppressWarnings("unchecked")
a180 1
		fGallery.getFigures().add(figure);
d182 2
a183 1
		link.setFigure(figure);
a188 1
	@@SuppressWarnings("unchecked")
a195 1
		fGallery.getFigures().add(figure);
d198 2
a199 1
		link.setFigure(figure);
a204 1
	@@SuppressWarnings("unchecked")
d213 2
a214 2
		assert parent.getFigure() instanceof Figure : "We are creators of this gmfgraph; there should be no figure accessors"; //$NON-NLS-1$
		((Figure) parent.getFigure()).getChildren().add(figure);
d216 2
a217 1
		label.setFigure(figure);
d222 13
@


1.3
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d36 1
@


1.2
log
@[170444] Use concrete class names for features
@
text
@d58 1
a58 1
	public static DiagramElement getDiagramElement(Iterator source, EObject domainElement) {
d66 1
a66 1
	public static DiagramElement getDiagramElement(Iterator source, String domainObjectName) {
d91 2
a92 2
		for (Iterator it = canvas.eAllContents(); it.hasNext();) {
			Object next = it.next();
@


1.1
log
@move pages and model of simple graph and tool wizards in dedicated package; provide i18n
@
text
@d146 2
a147 1
					newParent = createLink(ref);
d152 2
a153 1
					newParent = createLabel(attr, parent);
d189 2
a190 2
	protected Connection createLink(EReference ref) {
		String baseName = WizardUtil.getCapName(ref);
d206 1
a206 1
	protected DiagramLabel createLabel(EAttribute attr, DiagramElement parent) {
d210 1
a210 1
		String baseName = WizardUtil.getCapName(attr);
@

