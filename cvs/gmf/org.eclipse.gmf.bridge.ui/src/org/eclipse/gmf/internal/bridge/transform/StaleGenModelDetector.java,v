head	1.4;
access;
symbols
	v20080924-1925:1.4
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080417-1610:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080207-0207:1.4
	v20071124-0000:1.4
	v20071108-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-2000:1.3
	v20070330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070301-1200:1.2
	v20070228-2000:1.2
	v20070208-1800:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.06.21.14.03.14;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	1176467a85204567;

1.3
date	2007.03.14.12.59.33;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	114b45f7f1b34567;

1.2
date	2007.02.07.12.11.12;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	ff145c9c1e04567;

1.1
date	2007.01.18.18.49.14;	author atikhomirov;	state Exp;
branches;
next	;
commitid	197b45afc1284567;


desc
@@


1.4
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 *    Alexander Fedorov (Borland) - #148836 - transform action as wizard
 */
package org.eclipse.gmf.internal.bridge.transform;

import java.text.MessageFormat;
import java.util.Date;
import java.util.HashSet;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.codegen.ecore.genmodel.GenModel;
import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
import org.eclipse.emf.common.util.URI;
import org.eclipse.gmf.internal.bridge.ui.Plugin;

/**
 * @@author artem
 */
public class StaleGenModelDetector {

	private final GenModel myGenModel;

	public StaleGenModelDetector(GenModel genModel) {
		if (genModel == null) {
			throw new IllegalArgumentException("Could not detect with null GenModel");
		}
		myGenModel = genModel;
	}

	/**
	 * Uses local time stamp to detect staleness, though would be better to use IResource#modificationStamp 
	 * to tell whether resource has changed or not  
	 * @@return warning status if staleness detected, ok otherwise.
	 */
	public IStatus detect() {
		if (myGenModel.eResource() == null) {
			return Status.OK_STATUS;
		}
		URI genModelURI = myGenModel.eResource().getURI();
		if (!isFileURI(genModelURI)) {
			return Status.OK_STATUS;
		}
		HashSet<URI> ecoreURIs = new HashSet<URI>(); 
		for (GenPackage next : myGenModel.getAllGenAndUsedGenPackagesWithClassifiers()) {
			if (next.getEcorePackage().eResource() != null) {
				final URI uri = next.getEcorePackage().eResource().getURI();
				if (isFileURI(uri)) {
					// check only file uris
					// though we don't check non-file uris, it's not bad to make sure at least  
					// files are up to date
					ecoreURIs.add(uri);
				}
			}
		}
		Date genModelTimeStamp = timestamp(genModelURI);
		for (URI uri : ecoreURIs) {
			Date ts = timestamp(uri);
			/* HACK
			 * @@see ModelImporter#saveGenModelAndEPackages
			 * saves both ecore and genmodel files regardless of the fact .ecore was not modified,
			 * hence, we adjust the timestamp to avoid false stale detection
			 */
			if (new Date(genModelTimeStamp.getTime() + 3000).before(ts)) {
				String format = Messages.StaleGenModelDetector_stale;
				String msg = MessageFormat.format(format, uri, ts, genModelTimeStamp);
				return Plugin.createWarning(msg);
			}
		}
		return Status.OK_STATUS;
	}

	private static boolean isFileURI(URI uri) {
		return "platform".equals(uri.scheme()) && "resource".equals(uri.segment(0)); //$NON-NLS-1$ //$NON-NLS-2$
	}

	private static Date timestamp(URI uri) {
		IFile f = getFile(uri);
		if (!f.exists()) {
			return new Date(0);
		}
		return new Date(f.getLocalTimeStamp());
	}

	private static IFile getFile(URI platformFileUri) {
		IPath p = new Path(platformFileUri.path()).removeFirstSegments(1);
		return ResourcesPlugin.getWorkspace().getRoot().getFile(p);
	}
	
}
@


1.3
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.2
log
@[171593] afedorov - Tests for TransformToGenModelOperation
@
text
@a17 1
import java.util.Iterator;
d58 1
a58 2
		for (Iterator it = myGenModel.getAllGenAndUsedGenPackagesWithClassifiers().iterator(); it.hasNext();) {
			GenPackage next = (GenPackage) it.next();
@


1.1
log
@[148836] afedorov - Provide "Create generator model..." wizard instead of existing dialog sequence
@
text
@d39 3
a41 1
		assert genModel != null;
@

