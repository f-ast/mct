head	1.22;
access;
symbols
	v20080924-1925:1.22
	v20080722-1827:1.21
	v20080716-1642:1.21
	R2_1_maintenance:1.20.0.2
	Root_R2_1_maintenance:1.20
	R2_1_0:1.20
	v20080417-1610:1.20
	v20080322-0000:1.20
	v20080222-1200:1.19
	v20080215-1500:1.19
	v20080207-0207:1.17.2.1
	v20071124-0000:1.17
	v20071108-0000:1.18
	v20070903-0000:1.18
	v20070809-0000:1.17
	R2_0_maintenance:1.17.0.2
	R2_0:1.17
	R4_20:1.17
	v20070621-0000:1.17
	RC3_20:1.16
	v20070608-1300:1.16
	v20070605-1400:1.16
	v20070601-1400:1.16
	v20070520-1200:1.16
	v20070518-1300:1.15
	v20070420-1000:1.14
	v20070413-1300:1.13
	v20070405-2000:1.8
	v20070330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.7
	v20070301-1200:1.6
	v20070228-2000:1.6
	v20070208-1800:1.5;
locks; strict;
comment	@# @;
expand	@k@;


1.22
date	2008.09.23.18.33.13;	author atikhomirov;	state Exp;
branches;
next	1.21;
commitid	1dc0648d936684567;

1.21
date	2008.07.10.12.29.44;	author ashatalin;	state Exp;
branches;
next	1.20;
commitid	7c3e487600b74567;

1.20
date	2008.03.06.12.46.32;	author atikhomirov;	state Exp;
branches;
next	1.19;
commitid	7e5d47cfe7a74567;

1.19
date	2008.02.05.14.36.36;	author ashatalin;	state Exp;
branches;
next	1.18;
commitid	58cf47a874744567;

1.18
date	2007.08.06.17.07.14;	author dstadnik;	state Exp;
branches;
next	1.17;
commitid	791846b755414567;

1.17
date	2007.06.21.14.03.14;	author atikhomirov;	state Exp;
branches
	1.17.2.1;
next	1.16;
commitid	1176467a85204567;

1.16
date	2007.05.18.23.46.32;	author atikhomirov;	state Exp;
branches;
next	1.15;
commitid	43a5464e3ad84567;

1.15
date	2007.05.17.22.14.24;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	6453464cd3bf4567;

1.14
date	2007.04.19.09.55.13;	author dstadnik;	state Exp;
branches;
next	1.13;
commitid	a7646273c804567;

1.13
date	2007.04.12.14.40.18;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	5f58461e44d04567;

1.12
date	2007.04.12.12.48.15;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	a19461e2a8f4567;

1.11
date	2007.04.10.15.31.49;	author dstadnik;	state Exp;
branches;
next	1.10;
commitid	c71461bade54567;

1.10
date	2007.04.10.14.00.39;	author dstadnik;	state Exp;
branches;
next	1.9;
commitid	252f461b98864567;

1.9
date	2007.04.06.12.37.32;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	83046163f0b4567;

1.8
date	2007.03.20.16.54.35;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	33aa460011ca4567;

1.7
date	2007.03.14.12.59.33;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	114b45f7f1b34567;

1.6
date	2007.02.28.19.39.43;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	bd945e5da7f4567;

1.5
date	2007.02.07.12.11.12;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	ff145c9c1e04567;

1.4
date	2007.02.05.17.49.50;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	4ef045c76e3e4567;

1.3
date	2007.01.25.19.04.42;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	3f4345b8ff4a4567;

1.2
date	2007.01.25.18.14.32;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	7f7045b8f3874567;

1.1
date	2007.01.18.18.49.15;	author atikhomirov;	state Exp;
branches;
next	;
commitid	197b45afc1284567;

1.17.2.1
date	2008.02.05.14.34.33;	author ashatalin;	state Exp;
branches;
next	;
commitid	562447a873f94567;


desc
@@


1.22
log
@at least, log an error if reconciler fails
@
text
@/*
 * Copyright (c) 2006, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Fedorov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.transform;

import java.io.IOException;
import java.net.URL;
import java.text.MessageFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.SubProgressMonitor;
import org.eclipse.emf.codegen.ecore.genmodel.GenModel;
import org.eclipse.emf.common.util.BasicDiagnostic;
import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.ContentHandler;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.util.EcoreUtil.ExternalCrossReferencer;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
import org.eclipse.gmf.graphdef.codegen.MapModeCodeGenStrategy;
import org.eclipse.gmf.internal.bridge.VisualIdentifierDispenser;
import org.eclipse.gmf.internal.bridge.genmodel.BasicDiagramRunTimeModelHelper;
import org.eclipse.gmf.internal.bridge.genmodel.DiagramGenModelTransformer;
import org.eclipse.gmf.internal.bridge.genmodel.DiagramRunTimeModelHelper;
import org.eclipse.gmf.internal.bridge.genmodel.GenModelProducer;
import org.eclipse.gmf.internal.bridge.genmodel.InnerClassViewmapProducer;
import org.eclipse.gmf.internal.bridge.genmodel.ViewmapProducer;
import org.eclipse.gmf.internal.bridge.naming.gen.GenModelNamingMediator;
import org.eclipse.gmf.internal.bridge.naming.gen.GenNamingMediatorImpl;
import org.eclipse.gmf.internal.bridge.ui.Plugin;
import org.eclipse.gmf.internal.codegen.util.GMFGenConfig;
import org.eclipse.gmf.internal.common.migrate.ModelLoadHelper;
import org.eclipse.gmf.internal.common.reconcile.Reconciler;
import org.eclipse.gmf.mappings.Mapping;

public class TransformToGenModelOperation {
	
	private URI myGMFGenModelURI;
	private TransformOptions myOptions;
	private Mapping myMapping;
	private GenModelDetector myGMDetector;
	private GenModel myGenModel;
	
	private Diagnostic myMapmodelValidationResult = Diagnostic.CANCEL_INSTANCE;
	private Diagnostic myGMFGenValidationResult = Diagnostic.CANCEL_INSTANCE;

	private IStatus myStaleGenmodelStatus = Status.CANCEL_STATUS;
	private final ResourceSet myResourceSet;
	
	public TransformToGenModelOperation(ResourceSet rs) {
		assert rs != null;
		myResourceSet = rs;
		this.myOptions = new TransformOptions();
	}

	public TransformOptions getOptions() {
		return myOptions;
	}
	
	public URI getGenURI() {
		return this.myGMFGenModelURI;
	}

	public void setGenURI(URI gmfGen) {
		this.myGMFGenModelURI = gmfGen;
	}

	public GenModel getGenModel() {
		return this.myGenModel;
	}

	public final ResourceSet getResourceSet() {
		return myResourceSet;
	}

	Mapping getMapping() {
		return this.myMapping;
	}
	
	private void setMapping(Mapping m, Diagnostic validationResult) {
		this.myMapping = m;
		this.myMapmodelValidationResult = validationResult;
		myGMDetector = (m != null) ? new GenModelDetector(m) : null;
		myGenModel = null;
	}
	
	private void setGMFGenValidationResult(Diagnostic validationResult) {
		this.myGMFGenValidationResult = validationResult;
	}

	public GenModelDetector getGenModelDetector() {
		return myGMDetector;
	}
	
	public Diagnostic getGMFGenValidationResult() {
		return this.myGMFGenValidationResult;
	}

	public Diagnostic getMapmodelValidationResult() {
		return this.myMapmodelValidationResult;
	}
	
	public IStatus getStaleGenmodelStatus() {
		return this.myStaleGenmodelStatus;
	}

	public Mapping loadMappingModel(URI uri, IProgressMonitor pm) throws CoreException {
		Mapping content = null;
		IStatus status = Status.CANCEL_STATUS;
		Diagnostic validation = Diagnostic.CANCEL_INSTANCE;
		IProgressMonitor monitor = null;
		try {
			if (uri == null) {
				throw new IllegalArgumentException(Messages.TransformToGenModelOperation_e_null_map_uri);
			}
			monitor = (pm != null) ? new SubProgressMonitor(pm, 1, SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK) : new NullProgressMonitor(); 
			String cancelMessage = Messages.TransformToGenModelOperation_e_map_load_cancelled;
			monitor.beginTask("", 100); //$NON-NLS-1$
			subTask(monitor, 0, Messages.TransformToGenModelOperation_task_load, cancelMessage);
			ModelLoadHelper loadHelper = new ModelLoadHelper(getResourceSet(), uri);
			if (!loadHelper.isOK()) {
				throw new CoreException(loadHelper.getStatus());
			}
			subTask(monitor, 20, Messages.TransformToGenModelOperation_task_validate, cancelMessage);
			EObject root = loadHelper.getContentsRoot();
			if (!(root instanceof Mapping)) {
				String msg = MessageFormat.format(Messages.TransformToGenModelOperation_e_wrong_root_element, root.getClass().getName());
				status = Plugin.createError(msg, null);
				throw new CoreException(status);
			}
			content = (Mapping) loadHelper.getContentsRoot();
			validation = ValidationHelper.validate(content, true, monitor);
			monitor.worked(60);
			if (Diagnostic.CANCEL == validation.getSeverity()) {
				throw new CoreException(Plugin.createCancel(cancelMessage));
			}
			return content;
		} catch (CoreException e) {
			throw e;
		} catch (Exception e) {
			IStatus error = Plugin.createError(Messages.TransformToGenModelOperation_e_load_mapping_model, e);
			throw new CoreException(error);
		} finally {
			setMapping(content, validation);
			if (monitor != null) {
				monitor.done();
			}
		}
	}
	
	public GenModel findGenmodel() throws CoreException {
		try {
			checkMapping();
			GenModelDetector gmd = getGenModelDetector();
			IStatus detect = gmd.detect();
			if (detect.isOK()) {
				GenModel genModel = gmd.get(getResourceSet());
				this.myGenModel = genModel;
				return genModel;
			}
			throw new CoreException(detect);
		} catch (Exception e) {
			IStatus error = Plugin.createError(Messages.TransformToGenModelOperation_e_mapping_invalid, e);
			throw new CoreException(error);
		}
	}

	public GenModel loadGenModel(URI uri, IProgressMonitor pm) throws CoreException {
		IProgressMonitor monitor = null;
		try {
			checkMapping();
			monitor = (pm != null) ? new SubProgressMonitor(pm, 1, SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK) : new NullProgressMonitor(); 
			String cancelMessage = Messages.TransformToGenModelOperation_e_genmodel_load_cancelled;
			monitor.beginTask("", 100); //$NON-NLS-1$
			monitor.subTask(Messages.TransformToGenModelOperation_task_detect);
			GenModelDetector gmd = getGenModelDetector();
			IStatus status = Status.OK_STATUS;
			if (uri == null) {
				status = gmd.detect();
			} else {
				status = gmd.advise(uri); 
			}
			if (!status.isOK()) {
				throw new CoreException(status);
			}
			subTask(monitor, 30, Messages.TransformToGenModelOperation_task_load, cancelMessage);
			GenModel genModel = gmd.get(getResourceSet());
			if (genModel == null) {
				if (uri == null) {
					this.myStaleGenmodelStatus = Status.CANCEL_STATUS;
					this.myGenModel = null;
					return null;
				}
				IStatus notFound = Plugin.createError(Messages.GenModelDetector_e_not_found, null);
				throw new CoreException(notFound);
			}
			subTask(monitor, 40, Messages.TransformToGenModelOperation_task_validate, cancelMessage);
			StaleGenModelDetector staleDetector = new StaleGenModelDetector(genModel);
			IStatus stale = staleDetector.detect();
			this.myGenModel = genModel;
			this.myStaleGenmodelStatus = stale;
			return genModel;

		} catch (CoreException e) {
			throw e;
		} catch (Exception e) {
			IStatus error = Plugin.createError(Messages.TransformToGenModelOperation_e_genmodel_load, e);
			throw new CoreException(error);
		} finally {
			if (monitor != null) {
				monitor.done();
			}
		}
	}
	
	public IStatus executeTransformation(IProgressMonitor pm) {
		IProgressMonitor monitor = null;
		Diagnostic validation = Diagnostic.CANCEL_INSTANCE;
		try {
			if (getGenURI() == null) {
				throw new IllegalStateException(Messages.TransformToGenModelOperation_e_null_gmfgen_uri);
			}
			checkMapping();
			monitor = (pm != null) ? new SubProgressMonitor(pm, 1, SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK) : new NullProgressMonitor(); 
			monitor.beginTask("", 100); //$NON-NLS-1$
			if (monitor.isCanceled()) {
				return Status.CANCEL_STATUS;
			}
			final DiagramRunTimeModelHelper drtModelHelper = detectRunTimeModel();
			final ViewmapProducer viewmapProducer = detectTransformationOptions();
			final VisualIdentifierDispenserProvider idDispenser = getVisualIdDispenser();
			idDispenser.acquire();

			GenModelProducer t = createGenModelProducer(getGenModel(), drtModelHelper, viewmapProducer, idDispenser.get());

			monitor.subTask(Messages.TransformToGenModelOperation_task_generate);
			GenEditorGenerator genEditor = t.process(getMapping(), new SubProgressMonitor(monitor, 20));
			if (monitor.isCanceled()) {
				return Status.CANCEL_STATUS;
			}
			monitor.subTask(Messages.TransformToGenModelOperation_task_reconcile);
			if (Plugin.needsReconcile()) {
				reconcile(genEditor);
			}
			GenNamingMediatorImpl namer = new GenNamingMediatorImpl();
			namer.setMode(GenNamingMediatorImpl.Mode.COLLECT_NAMES);
			namer.traverse(genEditor); // collect reconciled names
			namer.setMode(GenNamingMediatorImpl.Mode.DISPENSE_NAMES);
			namer.traverse(genEditor); // dispense names to new elements
			monitor.worked(20);
			if (monitor.isCanceled()) {
				return Status.CANCEL_STATUS;
			}
			monitor.subTask(Messages.TransformToGenModelOperation_task_save);
			save(genEditor);
			monitor.worked(20);
			if (monitor.isCanceled()) {
				return Status.CANCEL_STATUS;
			}
			monitor.subTask(Messages.TransformToGenModelOperation_task_validate);
			try {
				validation = ValidationHelper.validate(genEditor, true, monitor);
			} catch (RuntimeException re) {
				validation = BasicDiagnostic.toDiagnostic(re);
			}
			if (Diagnostic.CANCEL != validation.getSeverity()) {
				idDispenser.release();
			}
			return Status.OK_STATUS;
			
		} catch (Exception ex) {
			String message = ex.getMessage();
			if (message == null) {
				message = Messages.TransformToGenModelOperation_e_generator_creation;
			}
			return Plugin.createError(message, ex);
		} finally {
			setGMFGenValidationResult(validation);
			if (monitor != null) {
				monitor.done();
			}
		}
	}

	private void checkMapping() {
		if (getMapping() == null) {
			throw new IllegalStateException(Messages.TransformToGenModelOperation_e_null_mapping);
		}
	}
	
	static IStatus getFirst(Diagnostic d) {
		if (d == null) {
			return Status.OK_STATUS;
		}
		List<Diagnostic> children = d.getChildren();
		if (children.isEmpty()) {
			return BasicDiagnostic.toIStatus(d);
		} else {
			return BasicDiagnostic.toIStatus(children.get(0));
		}
	}
	
	private DiagramRunTimeModelHelper detectRunTimeModel() {
		return new BasicDiagramRunTimeModelHelper();
	}

	private ViewmapProducer detectTransformationOptions() {
		String runtimeToken = getOptions().getUseRuntimeFigures() ? "full" : "lite";
		MapModeCodeGenStrategy mmStrategy = getOptions().getUseMapMode() ? MapModeCodeGenStrategy.DYNAMIC : MapModeCodeGenStrategy.STATIC;
		URL dynamicFigureTemplates = getOptions().getFigureTemplatesPath();
		return new InnerClassViewmapProducer(runtimeToken, mmStrategy, dynamicFigureTemplates == null ? null : new URL[] {dynamicFigureTemplates});
	}

	private VisualIdentifierDispenserProvider getVisualIdDispenser() {
		return new VisualIdentifierDispenserProvider(getGenURI());
	}

	private GenModelProducer createGenModelProducer(GenModel domainGenModel, final DiagramRunTimeModelHelper drtModelHelper, final ViewmapProducer viewmapProducer, final VisualIdentifierDispenser idDespenser) {
		final DiagramGenModelTransformer t = new DiagramGenModelTransformer(drtModelHelper, new GenModelNamingMediator.Empty(), viewmapProducer, idDespenser, getOptions().getGenerateRCP());
		if (domainGenModel != null) {
			t.setEMFGenModel(domainGenModel);
		}
		return new GenModelProducer() {

			public GenEditorGenerator process(Mapping mapping, IProgressMonitor progress) {
				progress.beginTask(null, 1);
				try {
					t.transform(mapping);
					return t.getResult();
				} finally {
					progress.done();
				}
			}
		};
	}

	private void reconcile(GenEditorGenerator genBurdern) {
		GenEditorGenerator old = null;
		Resource resource = null;
		try {
			resource = getResourceSet().getResource(getGenURI(), true);
			List<EObject> contents = resource.getContents();
			if (!contents.isEmpty() && contents.get(0) instanceof GenEditorGenerator) {
				old = (GenEditorGenerator) contents.get(0);
			}
			if (old != null) {
				new Reconciler(new GMFGenConfig()).reconcileTree(genBurdern, old);
			}
		} catch (RuntimeException e) {
			Plugin.log(e);
			old = null;
		} finally {
			if (resource != null) {
				resource.unload();
			}
		}
	}

	private void save(GenEditorGenerator genBurdern) throws IOException {
		try {
			Resource gmfgenRes = getResourceSet().getResource(getGenURI(), true);
			updateExistingResource(gmfgenRes, genBurdern);
			// one might want to ignore dangling href on save when there are more than one
			// content object - there are chances we don't match them during reconcile and 
			// failed update all the references.
			final Map<String, Object> saveOptions = getSaveOptions();
			if (gmfgenRes.getContents().size() > 1 && Plugin.ignoreDanglingHrefOnSave()) {
				saveOptions.put(XMLResource.OPTION_PROCESS_DANGLING_HREF, XMLResource.OPTION_PROCESS_DANGLING_HREF_RECORD);
			}
			gmfgenRes.save(saveOptions);
		} catch (RuntimeException ex) {
			Resource dgmmRes = getResourceSet().createResource(getGenURI(), ContentHandler.UNSPECIFIED_CONTENT_TYPE);
			dgmmRes.getContents().add(genBurdern);
			dgmmRes.save(getSaveOptions());
		}
	}

	private static void updateExistingResource(Resource gmfgenRes, GenEditorGenerator genBurden) {
		boolean editorGenFound = false;
		for (int i = 0; !editorGenFound && i < gmfgenRes.getContents().size(); i++) {
			if (gmfgenRes.getContents().get(i) instanceof GenEditorGenerator) {
				if (gmfgenRes.getContents().size() > 1) {
					// chances there are other content eobjects that reference 
					// some parts of old GenEditorGenerator, hence need update
					LinkedList<EObject> rest = new LinkedList<EObject>(gmfgenRes.getContents());
					GenEditorGenerator oldEditorGenerator = (GenEditorGenerator) rest.remove(i);
					updateExternalReferences(genBurden, oldEditorGenerator, rest);
				}
				gmfgenRes.getContents().set(i, genBurden); // replace with new one
				editorGenFound = true;
			}
		}
		if (!editorGenFound) {
			gmfgenRes.getContents().add(genBurden);
		}
	}

	private static void updateExternalReferences(GenEditorGenerator newEditorGenerator, final GenEditorGenerator oldEditorGenerator, List<EObject> allContentButOldGenerator) {
		// find references from rest of the content to old generator
		final Map<EObject, Collection<EStructuralFeature.Setting>> crossReferences = new ExternalCrossReferencer(allContentButOldGenerator) {
			@@Override
			protected boolean crossReference(EObject object, EReference reference, EObject crossReferencedEObject) {
				return super.crossReference(object, reference, crossReferencedEObject) && EcoreUtil.isAncestor(oldEditorGenerator, crossReferencedEObject);
			}

			Map<EObject, Collection<EStructuralFeature.Setting>> find() {
				return findExternalCrossReferences();
			}
		}.find();
		// match new and old objects using reconciler without decisions
		new Reconciler(new GMFGenConfig()) {
			@@Override
			protected void handleNotMatchedCurrent(EObject current) {/*no-op*/};
			@@Override
			protected EObject handleNotMatchedOld(EObject currentParent, EObject notMatchedOld) {
				return null; /*no-op*/
			};
			@@Override
			protected void reconcileVertex(EObject current, EObject old) {
				if (!crossReferences.containsKey(old)) {
					return;
				}
				// and replace old values with new
				for (EStructuralFeature.Setting s : crossReferences.get(old)) {
					EcoreUtil.replace(s, old, current);
				}
			}
		}.reconcileTree(newEditorGenerator, oldEditorGenerator);
	}

	private Map<String,Object> getSaveOptions() {
		HashMap<String, Object> saveOptions = new HashMap<String, Object>();
		saveOptions.put(XMLResource.OPTION_ENCODING, "UTF-8"); //$NON-NLS-1$
		return saveOptions;
	}

	private static void subTask(IProgressMonitor monitor, int ticks, String name, String cancelMessage) throws CoreException{
		if (monitor == null) {
			return;
		}
		if (monitor.isCanceled()) {
			IStatus cancel = Plugin.createCancel(cancelMessage);
			throw new CoreException(cancel);
		}
		if (ticks > 0) {
			monitor.worked(ticks);
		}
		if (name != null) {
			monitor.subTask(name);
		}
	}
}
@


1.21
log
@[217307] - "Add extension model" action: impossible use for additing nondeployed models
@
text
@d373 1
@


1.20
log
@[220711] respect workspace resource models - refactored transformation operation to manage resource set easily
@
text
@d36 1
d394 1
a394 1
			Resource dgmmRes = getResourceSet().createResource(getGenURI());
@


1.19
log
@[217251] - Exception occurs while generating gen model
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2007 Borland Software Corporation
d70 1
d72 3
a74 1
	public TransformToGenModelOperation() {
d94 4
d129 1
a129 1
	public Mapping loadMappingModel(ResourceSet rs, URI uri, IProgressMonitor pm) throws CoreException {
a134 1
			checkResourceSet(rs);
d142 1
a142 1
			ModelLoadHelper loadHelper = new ModelLoadHelper(rs, uri);
d173 1
a173 1
	public GenModel findGenmodel(ResourceSet rs) throws CoreException {
a174 1
			checkResourceSet(rs);
d179 1
a179 1
				GenModel genModel = gmd.get(rs);
d190 1
a190 1
	public GenModel loadGenModel(ResourceSet rs, URI uri, IProgressMonitor pm) throws CoreException {
a192 1
			checkResourceSet(rs);
d209 1
a209 1
			GenModel genModel = gmd.get(rs);
d238 1
a238 1
	public IStatus executeTransformation(ResourceSet rs, IProgressMonitor pm) {
a241 1
			checkResourceSet(rs);
d265 1
a265 1
				reconcile(rs, genEditor);
d277 1
a277 1
			save(rs, genEditor);
a306 6
	private void checkResourceSet(ResourceSet rs) {
		if (rs == null) {
			throw new IllegalArgumentException(Messages.TransformToGenModelOperation_e_null_resource_set);
		}
	}

d359 1
a359 1
	private void reconcile(ResourceSet rs, GenEditorGenerator genBurdern) {
d363 1
a363 1
			resource = rs.getResource(getGenURI(), true);
d380 1
a380 1
	private void save(ResourceSet rs, GenEditorGenerator genBurdern) throws IOException {
d382 1
a382 1
			Resource gmfgenRes = rs.getResource(getGenURI(), true);
d393 1
a393 1
			Resource dgmmRes = rs.createResource(getGenURI());
@


1.18
log
@convert runtime exceptions to error diagnistics
@
text
@d449 1
a449 1
					s.set(current);
@


1.17
log
@fix copyright years
@
text
@d280 5
a284 1
			validation = ValidationHelper.validate(genEditor, true, monitor);
@


1.17.2.1
log
@[217251] - Exception occurs while generating gen model
@
text
@d445 1
a445 1
					EcoreUtil.replace(s, old, current);
@


1.16
log
@suffice to check if model was loaded
@
text
@d1 2
a2 2
/**
 * Copyright (c) 2006 Borland Software Corporation
@


1.15
log
@moving towards not using fqnswitch and java to tell draw2d figure names; let toolsmith to control what draw2d classes are being used; fqnSwitch argument replaced with simple token indicator
@
text
@d137 2
a138 3
			status = loadHelper.getStatus();
			if (!status.isOK()) {
				throw new CoreException(status);
@


1.14
log
@use enum
@
text
@a41 3
import org.eclipse.gmf.gmfgraph.util.FigureQualifiedNameSwitch;
import org.eclipse.gmf.gmfgraph.util.RuntimeFQNSwitch;
import org.eclipse.gmf.gmfgraph.util.RuntimeLiteFQNSwitch;
d330 1
a330 1
		FigureQualifiedNameSwitch fSwitch = getOptions().getUseRuntimeFigures() ? new RuntimeFQNSwitch() : new RuntimeLiteFQNSwitch();
d333 1
a333 1
		return new InnerClassViewmapProducer(fSwitch, mmStrategy, dynamicFigureTemplates == null ? null : new URL[] {dynamicFigureTemplates});
@


1.13
log
@[181896] afedorov - Allow transformation wizard to complete if there are errors in the resulting gmfgen model
refactored not to define extra strings for page names, titles and descriptions moved to owning pages.
@
text
@d269 1
a269 1
			namer.setMode(GenNamingMediatorImpl.COLLECT_NAMES_MODE);
d271 1
a271 1
			namer.setMode(GenNamingMediatorImpl.DISPENSE_NAMES_MODE);
@


1.12
log
@[181844] keep extra existing root objects in .gmfgen resource during transformation
@
text
@d70 2
d105 4
d113 4
d240 1
d284 2
a285 2
			IStatus validate = validate(genEditor, monitor);
			if (IStatus.CANCEL != validate.getSeverity()) {
d288 1
a288 1
			return validate;
d297 1
a460 5
	private IStatus validate(GenEditorGenerator genBurdern, IProgressMonitor monitor) {
		Diagnostic d = ValidationHelper.validate(genBurdern, true, monitor);
		return getFirst(d);
	}
	
@


1.11
log
@[155332] Reconcile edit part class names
@
text
@d17 1
d19 1
d34 2
d38 2
d372 69
a440 3
		Resource dgmmRes = rs.createResource(getGenURI());
		dgmmRes.getContents().add(genBurdern);
		dgmmRes.save(getSaveOptions());
d443 1
a443 1
	private Map<?,?> getSaveOptions() {
@


1.10
log
@[155332] Reconcile edit part class names
@
text
@d47 1
a47 1
import org.eclipse.gmf.internal.bridge.naming.gen.GenModelNamingMediatorImpl;
a48 1
import org.eclipse.gmf.internal.bridge.naming.gen.NullNamingStrategy;
d326 1
a326 3
		GenModelNamingMediatorImpl namer = new GenModelNamingMediatorImpl();
		namer.setEditPart(new NullNamingStrategy());
		final DiagramGenModelTransformer t = new DiagramGenModelTransformer(drtModelHelper, namer, viewmapProducer, idDespenser, getOptions().getGenerateRCP());
@


1.9
log
@Moving org.eclipse.gmf.internal.util.GMFGenConfig to org.eclipse.gmf.internal.codegen.util.GMFGenConfig.
@
text
@d48 2
a55 1

d252 5
d327 3
a329 1
		final DiagramGenModelTransformer t = new DiagramGenModelTransformer(drtModelHelper, new GenModelNamingMediatorImpl(), viewmapProducer, idDespenser, getOptions().getGenerateRCP());
@


1.8
log
@[175837] afedorov - Can't ignore validation errors in new "Create generator model" wizard
@
text
@d49 1
a51 1
import org.eclipse.gmf.internal.util.GMFGenConfig;
@


1.7
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d63 1
a63 1
	private IStatus myLoadMapmodelStatus = Status.CANCEL_STATUS;
d90 1
a90 1
	private void setMapping(Mapping m, IStatus loadStatus) {
d92 1
a92 1
		this.myLoadMapmodelStatus = loadStatus;
d101 2
a102 2
	public IStatus getLoadMappingStatus() {
		return this.myLoadMapmodelStatus;
d112 1
d136 1
a136 1
			Diagnostic mapIsValid = ValidationHelper.validate(content, true, monitor);
d138 1
a138 2
			status = getFirst(mapIsValid);
			if (Diagnostic.CANCEL == status.getSeverity()) {
a139 4
			} else if(Diagnostic.ERROR == status.getSeverity()) {
				throw new CoreException(status);
			} else {
				return content;
d141 1
d148 1
a148 1
			setMapping(content, status);
d269 5
a273 1
			return Plugin.createError(ex.getMessage(), ex);
d293 1
a293 1
	private IStatus getFirst(Diagnostic d) {
@


1.6
log
@[171782] add preference to keep path for dynamic figure templates
@
text
@d343 1
a343 1
			List contents = resource.getContents();
d365 1
a365 1
	private Map getSaveOptions() {
@


1.5
log
@[171593] afedorov - Tests for TransformToGenModelOperation
@
text
@d15 1
d311 2
a312 1
		return new InnerClassViewmapProducer(fSwitch, mmStrategy);
@


1.4
log
@GMFGen reconcilation config moved to proper place (ui-independent)
@
text
@d15 1
d30 1
a55 1
	private URI myMapModelURI;
d62 2
a63 2
	private IStatus myLoadMapmodelStatus;
	private IStatus myStaleGenmodelStatus;
d65 1
a65 3
	public TransformToGenModelOperation(URI mapURI) {
		assert mapURI != null;
		this.myMapModelURI = mapURI;
d68 1
a68 1
	
a72 4
	public URI getMapURI() {
		return this.myMapModelURI;
	}
	
d77 1
a77 1
	void setGenURI(URI gmfGen) {
d81 1
a81 1
	private GenModel getGenModel() {
d89 1
a89 1
	private void setMapping(Mapping m) {
d91 2
a92 1
		myGMDetector = null;
d96 1
a96 4
	GenModelDetector getGenModelDetector() {
		if (myGMDetector == null) {
			myGMDetector = new GenModelDetector(getMapping());
		}
d100 1
a100 1
	IStatus getLoadMappingStatus() {
d104 1
a104 1
	IStatus getStaleGenmodelStatus() {
d108 3
a110 1
	Mapping loadMappingModel(ResourceSet rs, URI uri, IProgressMonitor pm) throws CoreException {
d113 4
d122 3
a124 3
			IStatus loadStatus = loadHelper.getStatus();
			if (!loadStatus.isOK()) {
				throw new CoreException(loadStatus);
d127 7
a133 1
			final Mapping content = (Mapping) loadHelper.getContentsRoot();
d136 2
a137 2
			IStatus mapStatus = getFirst(mapIsValid);
			if (Diagnostic.CANCEL == mapStatus.getSeverity()) {
d139 2
a140 2
			} else if(Diagnostic.ERROR == mapStatus.getSeverity()) {
				throw new CoreException(mapStatus);
a141 2
				setMapping(content);
				this.myLoadMapmodelStatus = mapStatus;
d144 5
d150 4
a153 1
			monitor.done();
d157 1
a157 1
	GenModel findGenmodel(ResourceSet rs) throws CoreException {
d159 2
d175 1
a175 1
	GenModel loadGenModel(ResourceSet rs, URI uri, IProgressMonitor pm) throws CoreException {
d178 2
d224 1
a224 1
	IStatus executeTransformation(ResourceSet rs, IProgressMonitor pm) {
d227 5
d279 10
a288 6
	public void reset(URI uri) {
		assert uri != null;
		myMapModelURI = uri;
		setMapping(null);
		myLoadMapmodelStatus = null;
		myStaleGenmodelStatus = null;
@


1.3
log
@[148836] afedorov - Provide "Create generator model..." wizard instead of existing dialog sequence. Missed trace
@
text
@d48 1
@


1.2
log
@[148836] afedorov - Provide "Create generator model..." wizard instead of existing dialog sequence. Fix for NPE on pure-design gmfmap
@
text
@d243 5
a247 1
			return validate(genEditor, monitor);
@


1.1
log
@[148836] afedorov - Provide "Create generator model..." wizard instead of existing dialog sequence
@
text
@a154 3
			
		} catch (CoreException e) {
			throw e;
d180 9
@

