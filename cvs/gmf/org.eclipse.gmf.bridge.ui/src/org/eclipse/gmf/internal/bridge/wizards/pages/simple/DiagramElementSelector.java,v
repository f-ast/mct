head	1.2;
access;
symbols
	v20080924-1925:1.2
	v20080722-1827:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080417-1610:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20080207-0207:1.2
	v20071124-0000:1.2
	v20071108-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070520-1200:1.2
	v20070518-1300:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-2000:1.2
	v20070330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.03.14.12.59.33;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	114b45f7f1b34567;

1.1
date	2006.09.19.12.19.40;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.wizards.pages.simple;

import java.util.Collection;
import java.util.Comparator;
import java.util.Set;
import java.util.TreeSet;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.gmf.internal.bridge.resolver.NodePattern;
import org.eclipse.gmf.internal.bridge.resolver.TypeLinkPattern;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;

/**
 * @@deprecated move filtering functionality in DiagramElementSelectorExtension
 * 
 * @@author dstadnik
 */
class DiagramElementSelector {

	private ResolvedItem domainModel;

	Combo control;

	private Button excludeContainedNodesChoice;

	private Button excludeLinksChoice;

	public void createControl(Composite plate) {
		Label diagramElementLabel = new Label(plate, SWT.NONE);
		diagramElementLabel.setText(Messages.DiagramElementSelectorElement);
		diagramElementLabel.setLayoutData(new GridData());
		control = new Combo(plate, SWT.DROP_DOWN);
		control.setLayoutData(createFillHorzGridData());
		excludeContainedNodesChoice = createChoice(plate, Messages.DiagramElementSelectorExContainedNodes);
		excludeLinksChoice = createChoice(plate, Messages.DiagramElementSelectorExLinks);
	}

	private Button createChoice(Composite plate, String text) {
		Label dummy = new Label(plate, SWT.NONE);
		dummy.setLayoutData(new GridData());
		Button choice = new Button(plate, SWT.CHECK);
		choice.setText(text);
		choice.setLayoutData(createFillHorzGridData());
		choice.addSelectionListener(new SelectionListener() {

			public void widgetSelected(SelectionEvent e) {
				updateDiagramElements();
			}

			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});
		return choice;
	}

	protected GridData createFillHorzGridData() {
		GridData data = new GridData();
		data.horizontalAlignment = GridData.FILL;
		data.grabExcessHorizontalSpace = true;
		return data;
	}

	public ResolvedItem getDiagramElement() {
		return domainModel == null ? null : findResolvedItemByTypeName(domainModel, control.getText());
	}

	public void setDomainModel(ResolvedItem domainModel) {
		this.domainModel = domainModel;
		updateDiagramElements();
	}

	private void updateDiagramElements() {
		Set<ResolvedItem> types = new TreeSet<ResolvedItem>(new Comparator<ResolvedItem>() {

			public int compare(ResolvedItem arg0, ResolvedItem arg1) {
				EClass type0 = (EClass) arg0.getDomainRef();
				EClass type1 = (EClass) arg1.getDomainRef();
				return type0.getName().compareToIgnoreCase(type1.getName());
			}
		});
		if (domainModel != null) {
			collectResolvedDomainTypes(types, domainModel);
		}
		String contents = control.getText();
		control.removeAll();
		for (ResolvedItem next : types) {
			EClass type = (EClass) next.getDomainRef();
			control.add(type.getName());
			if (contents.equals(type.getName())) {
				control.setText(contents);
			}
		}
	}

	private void collectResolvedDomainTypes(Collection<ResolvedItem> types, ResolvedItem item) {
		if (item.getDomainRef() instanceof EClass) {
			boolean ignore = false;
			if (excludeContainedNodesChoice.getSelection()) {
				ignore |= item.getPattern() instanceof NodePattern;
			}
			if (excludeLinksChoice.getSelection()) {
				ignore |= item.getPattern() instanceof TypeLinkPattern;
			}
			if (!ignore) {
				types.add(item);
			}
		}
		for (ResolvedItem next : item.getChildren()) {
			collectResolvedDomainTypes(types, next);
		}
	}

	private ResolvedItem findResolvedItemByTypeName(ResolvedItem item, String typeName) {
		if (item.getDomainRef() instanceof EClass && ((EClass) item.getDomainRef()).getName().equals(typeName)) {
			return item;
		}
		for (ResolvedItem next : item.getChildren()) {
			ResolvedItem result = findResolvedItemByTypeName(next, typeName);
			if (result != null) {
				return result;
			}
		}
		return null;
	}
}
@


1.1
log
@move pages and model of simple graph and tool wizards in dedicated package; provide i18n
@
text
@a15 1
import java.util.Iterator;
d104 2
a105 2
		for (Iterator it = types.iterator(); it.hasNext();) {
			EClass type = (EClass) ((ResolvedItem) it.next()).getDomainRef();
d126 2
a127 2
		for (Iterator it = item.getChildren().iterator(); it.hasNext();) {
			collectResolvedDomainTypes(types, (ResolvedItem) it.next());
d135 2
a136 2
		for (Iterator it = item.getChildren().iterator(); it.hasNext();) {
			ResolvedItem result = findResolvedItemByTypeName((ResolvedItem) it.next(), typeName);
@

