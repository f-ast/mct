head	1.9;
access;
symbols
	v20081020-0700:1.9
	v20080722-1827:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080612-1355:1.9
	v20080610-1132:1.9
	v20080603-1553:1.8
	v20080425-1959:1.7
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070330-1300:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	v20061012-1100:1.4.2.2
	v20061006-0926:1.4.2.2
	v20060926-1100:1.4.2.1
	v20060925-1700:1.4.2.1
	v20060907-1100:1.4.2.1
	M1_20:1.4
	v20060803-1200:1.4.2.1
	v20060721-1130:1.4.2.1
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.9
date	2008.06.04.18.37.08;	author ahunter;	state Exp;
branches;
next	1.8;
commitid	80e4846e0d44567;

1.8
date	2008.06.03.19.38.03;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	622f48459d8b4567;

1.7
date	2008.04.24.14.45.44;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	6f1b48109d184567;

1.6
date	2006.10.06.13.33.08;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.03.14.56.50;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.17.21.35.46;	author ahunter;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.10.12.20.55.23;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.34;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.26;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.07.17.19.53.26;	author cmahoney;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2006.10.05.21.48.04;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[235621] gmf-head jbruck 080604 GMF Windows print dialog cannot find zh_TW DLL
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.printing;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.printing.internal.CommonPrintingDebugOptions;
import org.eclipse.gmf.runtime.common.ui.printing.internal.CommonPrintingStatusCodes;
import org.eclipse.gmf.runtime.common.ui.printing.internal.PrintingPlugin;
import org.eclipse.swt.printing.PrinterData;
import org.eclipse.ui.PlatformUI;

/**
 * The PrintHelper implements the IPrintHelper interface for the platform
 * specfic print code.
 * 
 * This is for Win32.
 * 
 * @@author wdiu, Wayne Diu
 */
public class PrintHelper
    implements IPrintHelper {

    /**
     * Dynamic link library name without the extension
     */
    private static final String DLL_NAME = "DiagramPrint"; //$NON-NLS-1$

    /**
     * Country and language separator
     */
    private static final String SEPARATOR = StringStatics.UNDER_SCORE;

    // to avoid throwing exceptions because of trying to load dlls for
    // unsupported locales, maintain an array of supported countries and
    // languages

    // in the array below, if there are multiple entries for the same
    // language, put the country specific one first

    /**
     * Supported languages strings. Default locale is SUPPORTED[0].
     */
    private static final String SUPPORTED[] = {
        "en", "ar", "cs", "da", "de", "el", "es", "fi", "hu", "fr", "it", "iw", "ja", "ko", "nl", "no", "nb", "nn", "pl", "pt", "pt_BR", "ru", "sv", "tr", "zh", "zh_CN", "zh_TW", "zh_HK"}; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ //$NON-NLS-8$ //$NON-NLS-9$ //$NON-NLS-10$

    /**
     * Default locale, English language
     */
    private static final String DEFAULT_LOCALE = SUPPORTED[0];

    /*
     * Load the dll
     */
    static {

        // Although a far nicer way to do this dll loading is by using
        // Bundle-NativeCode in manifest.mf, we are not doing it that way
        // because of Bugzilla
        // https://bugs.eclipse.org/bugs/show_bug.cgi?id=153902

        // When the Bugzilla has been fixed, this static block can be replaced
        // with one line of code
        // System.loadLibrary("DiagramPrint");

    	List<String> supported = new ArrayList<String>(Arrays.asList(SUPPORTED));
    	String localizedVersion = DEFAULT_LOCALE;
    	
        Locale defaultLocale = Locale.getDefault();
		String language = defaultLocale.getLanguage().toLowerCase();
		String country = defaultLocale.getCountry().toUpperCase();
		String countrySpecificLocale = language + SEPARATOR + country;

		if (supported.contains(countrySpecificLocale)) {
			localizedVersion = countrySpecificLocale;
		} else if (supported.contains(language)) {
			localizedVersion = language;
		} 
         
        try {
            System.loadLibrary(DLL_NAME + SEPARATOR + localizedVersion);
        } catch (UnsatisfiedLinkError ule) {
            Log.error(PrintingPlugin.getDefault(),
                CommonPrintingStatusCodes.RESOURCE_FAILURE,
                "Failed to load DiagramPrint dll for " //$NON-NLS-1$
                    + localizedVersion);
            Trace.catching(PrintingPlugin.getDefault(),
                CommonPrintingDebugOptions.EXCEPTIONS_CATCHING,
                PrintHelper.class, "Link", ule); //$NON-NLS-1$
            Trace.throwing(PrintingPlugin.getDefault(),
                CommonPrintingDebugOptions.EXCEPTIONS_THROWING,
                PrintHelper.class, "Link", ule); //$NON-NLS-1$*/
            throw ule;
        }
    }

    /*
     * Static methods from dll
     */

    /*
     * Set methods
     */

    /**
     * Init print dialog box's scale fit to.
     * 
     * @@param m
     * @@param n
     */
    public static native void initScaleFitTo(int m, int n);

    /**
     * Init print dialog box's scale percent.
     * 
     * @@param percent
     */
    public static native void initScalePercent(int percent);

    /**
     * Resets the dialog. Call this before addDiagramString if you've already
     * added strings.
     */
    public static native void resetDialog();

    /**
     * Add a string to the diagrams list of the dialog box.
     * 
     * @@param string
     */
    public static native void addDiagramString(String string);

    /**
     * Set the owner hwnd so that the displyed print dialog is modal.
     * 
     * @@param windowClass
     *            String with class
     * @@param title
     *            String with shell title
     */
    public static native void setHwndOwner(String windowClass, String title);

    /**
     * Allows to set the orientation (portrait/landscape) in the print dialog.
     * 
     * @@param isLandscape
     *            true if orientation should be landscape, false otherwise.
     */
    public static native void setOrientation(boolean isLandscape);

    /**
     * Allows to set the paper size in the print dialog.
     * 
     * @@param index
     *            index of type of paper size,
     * @@see org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType
     *      for the type of paper sizes available and their indices.
     * @@param width
     *            specifies the custom width of the paper. Leave as 0 if paper
     *            size index is user-defined.
     * @@param height
     *            specifies the custom width of the paper. Leave as 0 if paper
     *            size index is user-defined.
     */
    public static native void setPaperSize(int index, double width,
            double height);

    /*
     * Get methods
     */

    /**
     * If not > 0 then user has clicked percent scaling
     * 
     * @@return scale to m int
     */
    public static native int getScaleFitToM();

    /**
     * If not > 0 then user has clicked percent scaling
     * 
     * @@return scale to n int
     */
    public static native int getScaleFitToN();

    /**
     * If not > 0 then user has clicked fit to m x n scaling
     * 
     * @@return scale percent int
     */
    public static native int getScalePercent();

    /**
     * Returns true if the diagram at the index was selected
     * 
     * @@param index
     *            the index of the diagrams you passed in
     * @@return true if selected, false if not selected
     */
    public static native boolean isDiagramSelected(int index);

    // one of the three is unnecssary, but it makes more sense
    /**
     * Returns if diagram print range all was selected
     * 
     * @@return true if selected, false if not selected
     */
    public static native boolean getDiagramPrintRangeAll();

    /**
     * Returns if diagram print range current was selected
     * 
     * @@return true if selected, false if not selected
     */
    public static native boolean getDiagramPrintRangeCurrent();

    /**
     * Returns if diagram print range selection was selected
     * 
     * @@return true if selected, false if not selected
     */
    public static native boolean getDiagramPrintRangeSelection();

    // one of the three is unnecssary, but it makes more sense
    /**
     * Returns if print range all was selected
     * 
     * @@return true if selected, false if not selected
     */
    public static native boolean getPrintRangeAll();

    /**
     * Returns if print range pages was selected
     * 
     * @@return true if selected, false if not selected
     */
    public static native boolean getPrintRangePages();

    /**
     * Returns if collate was selected
     * 
     * @@return true if selected, false if not selected
     */
    public static native boolean getCollate();

    /**
     * Returns the pages from int value, check if (getPrintRangesPages()) first.
     * 
     * @@return int of the pages from box
     */
    public static native int getPagesFrom();

    /**
     * Returns the pages from int value, check if (getPrintRangesPages()) first.
     * 
     * @@return int of the pages to box
     */
    public static native int getPagesTo();

    /**
     * Returns the number of copies the user wants to print. This is nCopies
     * from PRINTDLG
     * 
     * @@return int with the number of copies
     */
    public static native int getNumberOfCopies();

    /*
     * Don't do getDevMode() and gethDevNames() for hDevMode and hDevNames from
     * PRINTDLG because they are filled by passing in PrinterData to open..
     */

    /**
     * Opens the dialog box.
     * 
     * @@param pd
     * @@return <code>true</code> if dialog box opened succesfully,
     *         <code>false</code> otherwise
     */
    public static native boolean open(PrinterData pd);

    /**
     * Open the print dialog box with the diagram list.
     * 
     * XXX: internal access SWT_Window0 is a hardcoded internal access string
     * 
     * @@param diagramList
     */
    public PrinterData openPrintDlg(List diagramList) {

        // set owner to make it modal
        String title = PlatformUI.getWorkbench().getActiveWorkbenchWindow()
            .getShell().getText();

        assert null != title : "title cannot be null"; //$NON-NLS-1$

        // XXX: internal access
        // SWT_Window0 is a hardcoded internal access string of the class
        // name and it could change. However, setHwndOwner will try to
        // obtain the window even if it can't find that matching class by
        // using the window's title.
        setHwndOwner("SWT_Window0", title); //$NON-NLS-1$

        // initialize dialog
        resetDialog();
              
        if (diagramList != null) {
            for (int c = 0; c < diagramList.size(); c++) {
                assert (diagramList.get(c) instanceof String);
                addDiagramString((String) diagramList.get(c));
            }
        }

        // prevent default initialization from empty constructor
        PrinterData printerData = new PrinterData(StringStatics.BLANK,
            StringStatics.BLANK);
        if (open(printerData)) {
            // save the printerData
            if (getPrintRangePages()) {
                printerData.scope = PrinterData.PAGE_RANGE;
                printerData.startPage = getPagesFrom();
                printerData.endPage = getPagesTo();
            } else /* if (getPrintRangeAll()) */{
                printerData.scope = PrinterData.ALL_PAGES;
            }
            printerData.printToFile = false;
            // not supported by dialog, no need to set printerData.fileName

            printerData.copyCount = getNumberOfCopies();
            printerData.collate = getCollate();

        } else {
            return null;
        }

        return printerData;

    }

    /**
     * Make an instance of PrintHelper
     */
    public PrintHelper() {
        /* empty constructor */
    }

    /*
     * The get methods to hide the static methods
     */

    /**
     * If not > 0 then user has clicked percent scaling
     * 
     * @@return scale to m int
     */
    public int getDlgScaleFitToM() {
        return getScaleFitToM();
    }

    /**
     * If not > 0 then user has clicked percent scaling
     * 
     * @@return scale to n int
     */
    public int getDlgScaleFitToN() {
        return getScaleFitToN();
    }

    /**
     * If not > 0 then user has clicked fit to m x n scaling
     * 
     * @@return scale percent int
     */
    public int getDlgScalePercent() {
        return getScalePercent();
    }

    /**
     * Returns true if the diagram at the index was selected
     * 
     * @@param index
     *            the index of the diagrams you passed in
     * @@return true if selected, false if not selected
     */
    public boolean isDlgDiagramSelected(int index) {
        return isDiagramSelected(index);
    }

    // one of the three is unnecssary, but it makes more sense
    /**
     * Returns if diagram print range all was selected
     * 
     * @@return true if selected, false if not selected
     */
    public boolean getDlgDiagramPrintRangeAll() {
        return getDiagramPrintRangeAll();
    }

    /**
     * Returns if diagram print range current was selected
     * 
     * @@return true if selected, false if not selected
     */
    public boolean getDlgDiagramPrintRangeCurrent() {
        return getDiagramPrintRangeCurrent();
    }

    /**
     * Returns if diagram print range selection was selected
     * 
     * @@return true if selected, false if not selected
     */
    public boolean getDlgDiagramPrintRangeSelection() {
        return getDiagramPrintRangeSelection();
    }

    // one of the three is unnecssary, but it makes more sense
    /**
     * Returns if print range all was selected
     * 
     * @@return true if selected, false if not selected
     */
    public boolean getDlgPrintRangeAll() {
        return getPrintRangeAll();
    }

    /**
     * Returns if print range pages was selected
     * 
     * @@return true if selected, false if not selected
     */
    public boolean getDlgPrintRangePages() {
        return getPrintRangePages();
    }

    /**
     * Returns if collate was selected
     * 
     * @@return true if selected, false if not selected
     */
    public boolean getDlgCollate() {
        return getCollate();
    }

    /**
     * Returns the pages from int value, check if (getDlgPrintRangesPages())
     * first.
     * 
     * @@return int of the pages from box
     */
    public int getDlgPagesFrom() {
        return getPagesFrom();
    }

    /**
     * Returns the pages from int value, check if (getDlgPrintRangesPages())
     * first.
     * 
     * @@return int of the pages to box
     */
    public int getDlgPagesTo() {
        return getPagesTo();
    }

    /**
     * Returns the number of copies the user wants to print. This is nCopies
     * from PRINTDLG
     * 
     * @@return int with the number of copies
     */
    public int getDlgNumberOfCopies() {
        return getNumberOfCopies();
    }

    /**
     * Allows to set the orientation (portrait/landscape) in the print dialog.
     * 
     * @@param isLandscape
     *            true if orientation should be landscape, false otherwise.
     */
    public void setDlgOrientation(boolean bLandscape) {
        setOrientation(bLandscape);
    }

    /**
     * Allows to set the paper size in the print dialog.
     * 
     * @@param index
     *            index of type of paper size,
     * @@see org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType
     *      for the type of paper sizes available and their indices.
     * @@param width
     *            specifies the custom width of the paper. Leave as 0 if paper
     *            size index is user-defined.
     * @@param height
     *            specifies the custom width of the paper. Leave as 0 if paper
     *            size index is user-defined.
     */
    public void setDlgPaperSize(int index, double width, double height) {
        setPaperSize(index, width, height);
    }
    
    /**
     * Initialize the scaling factor in the print dialog.
     */
	public void setScaleFactor(int scaleFactor) {
		initScalePercent(scaleFactor);
	}
	
	/**
	 * Initialize the scale width and height in the print dialog.
	 */
	public void setScaleToWidthHeight(int width, int height) {
		initScaleFitTo(width, height);
	}

}@


1.8
log
@[232389] gmf-head jbruck 080603 TVT34:TCT282: TR-Print screen totally English on Windows unlike Linux
@
text
@d81 1
d83 12
a94 17

        List supported = new ArrayList();
        supported.addAll(Arrays.asList(SUPPORTED));

        String language = Locale.getDefault().getLanguage().toLowerCase();
        if (supported.contains(language)) {
            localizedVersion = language;
        } else {
            String country = Locale.getDefault().getCountry().toUpperCase();
            if (country != null) {
                String locale = language + SEPARATOR + country;
                if (supported.contains(locale)) {
                    localizedVersion = locale;
                }
            }
        }

@


1.7
log
@[227373] gmf-head jbruck 080424 [Printing] Combined commit for Bug 228057 , Bug 227796 , Bug 227006 and Bug 227373
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d60 1
a60 1
        "en", "de", "es", "fr", "it", "ja", "ko", "pt_BR", "zh_CN", "zh_TW"}; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ //$NON-NLS-8$ //$NON-NLS-9$ //$NON-NLS-10$
d81 1
a81 1
        String localizedVersion = DEFAULT_LOCALE;
@


1.6
log
@[153902] gmf_head ahunter 061006 Merge 1.0.2 fix to head
@
text
@a18 3
import org.eclipse.swt.printing.PrinterData;
import org.eclipse.ui.PlatformUI;

d25 2
d325 1
a325 3
        initScaleFitTo(1, 1);
        initScalePercent(100);

d521 14
@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d14 2
d38 124
a161 1
	implements IPrintHelper {
a162 52
	/*
	 * Load the dll
	 */
	static {
		//Note: DiagramPrint dll(s) defined in the manifest
		System.loadLibrary("DiagramPrint"); //$NON-NLS-1$
	}

	/*
	 * Static methods from dll
	 */

	/*
	 * Set methods
	 */

	/**
	 * Init print dialog box's scale fit to.
	 * 
	 * @@param m
	 * @@param n
	 */
	public static native void initScaleFitTo(int m, int n);

	/**
	 * Init print dialog box's scale percent.
	 * 
	 * @@param percent 
	 */
	public static native void initScalePercent(int percent);

	/**
	 * Resets the dialog. Call this before addDiagramString if you've already
	 * added strings.
	 */
	public static native void resetDialog();

	/**
	 * Add a string to the diagrams list of the dialog box.
	 * 
	 * @@param string 
	 */
	public static native void addDiagramString(String string);

	/**
	 * Set the owner hwnd so that the displyed print dialog is modal.
	 * 
	 * @@param windowClass	String with class
	 * @@param title			String with shell title
	 */
	public static native void setHwndOwner(String windowClass, String title);
    
d165 3
a167 1
     * @@param isLandscape   true if orientation should be landscape, false otherwise.
d170 1
a170 1
     
d173 324
a496 317
     * @@param index         index of type of paper size, @@see org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType
     *                      for the type of paper sizes available and their indices. 
     * @@param width         specifies the custom width of the paper. Leave as 0 if
     *                      paper size index is user-defined.
     * @@param height        specifies the custom width of the paper. Leave as 0 if
     *                      paper size index is user-defined.
     */
    public static native void setPaperSize(int index, double width, double height);

	/*
	 * Get methods
	 */

	/**
	 * If not > 0 then user has clicked percent scaling
	 * 
	 * @@return scale to m int
	 */
	public static native int getScaleFitToM();

	/**
	 * If not > 0 then user has clicked percent scaling
	 * 
	 * @@return scale to n int
	 */
	public static native int getScaleFitToN();

	/**
	 * If not > 0 then user has clicked fit to m x n scaling
	 * 
	 * @@return scale percent int
	 */
	public static native int getScalePercent();

	/**
	 * Returns true if the diagram at the index was selected
	 * 
	 * @@param index
	 *            the index of the diagrams you passed in
	 * @@return true if selected, false if not selected
	 */
	public static native boolean isDiagramSelected(int index);

	//one of the three is unnecssary, but it makes more sense
	/**
	 * Returns if diagram print range all was selected
	 * 
	 * @@return true if selected, false if not selected
	 */
	public static native boolean getDiagramPrintRangeAll();

	/**
	 * Returns if diagram print range current was selected
	 * 
	 * @@return true if selected, false if not selected
	 */
	public static native boolean getDiagramPrintRangeCurrent();

	/**
	 * Returns if diagram print range selection was selected
	 * 
	 * @@return true if selected, false if not selected
	 */
	public static native boolean getDiagramPrintRangeSelection();

	//one of the three is unnecssary, but it makes more sense
	/**
	 * Returns if print range all was selected
	 * 
	 * @@return true if selected, false if not selected
	 */
	public static native boolean getPrintRangeAll();

	/**
	 * Returns if print range pages was selected
	 * 
	 * @@return true if selected, false if not selected
	 */
	public static native boolean getPrintRangePages();

	/**
	 * Returns if collate was selected
	 * 
	 * @@return true if selected, false if not selected
	 */
	public static native boolean getCollate();

	/**
	 * Returns the pages from int value, check if (getPrintRangesPages()) first.
	 * 
	 * @@return int of the pages from box
	 */
	public static native int getPagesFrom();

	/**
	 * Returns the pages from int value, check if (getPrintRangesPages()) first.
	 * 
	 * @@return int of the pages to box
	 */
	public static native int getPagesTo();

	/**
	 * Returns the number of copies the user wants to print. This is nCopies
	 * from PRINTDLG
	 * 
	 * @@return int with the number of copies
	 */
	public static native int getNumberOfCopies();

	/*
	 * Don't do getDevMode() and gethDevNames() for hDevMode and hDevNames from
	 * PRINTDLG because they are filled by passing in PrinterData to open..
	 */

	/**
	 * Opens the dialog box.
	 * 
	 * @@param pd
	 * @@return <code>true</code> if dialog box opened succesfully, <code>false</code> otherwise
	 */
	public static native boolean open(PrinterData pd);

	/**
	 * Open the print dialog box with the diagram list.
	 * 
	 * XXX: internal access SWT_Window0 is a hardcoded internal access string
	 * 
	 * @@param diagramList
	 */
	public PrinterData openPrintDlg(List diagramList) {

		//set owner to make it modal
		String title = PlatformUI.getWorkbench().getActiveWorkbenchWindow()
			.getShell().getText();
		
		assert null!=title : "title cannot be null"; //$NON-NLS-1$

		//XXX: internal access
		//SWT_Window0 is a hardcoded internal access string of the class
		//name and it could change. However, setHwndOwner will try to
		//obtain the window even if it can't find that matching class by
		//using the window's title.
		setHwndOwner("SWT_Window0", title); //$NON-NLS-1$

		//initialize dialog
		resetDialog();
		initScaleFitTo(1, 1);
		initScalePercent(100);

		if (diagramList != null) {
			for (int c = 0; c < diagramList.size(); c++) {
				assert (diagramList.get(c) instanceof String);
				addDiagramString((String) diagramList.get(c));
			}
		}

		//prevent default initialization from empty constructor
		PrinterData printerData = new PrinterData(StringStatics.BLANK,
			StringStatics.BLANK);
		if (open(printerData)) {
			//save the printerData
			if (getPrintRangePages()) {
				printerData.scope = PrinterData.PAGE_RANGE;
				printerData.startPage = getPagesFrom();
				printerData.endPage = getPagesTo();
			} else /* if (getPrintRangeAll()) */{
				printerData.scope = PrinterData.ALL_PAGES;
			}
			printerData.printToFile = false;
			//not supported by dialog, no need to set printerData.fileName

			printerData.copyCount = getNumberOfCopies();
			printerData.collate = getCollate();

		} else {
			return null;
		}

		return printerData;

	}

	/**
	 * Make an instance of PrintHelper
	 */
	public PrintHelper() {
		/* empty constructor */
	}

	/*
	 * The get methods to hide the static methods
	 */

	/**
	 * If not > 0 then user has clicked percent scaling
	 * 
	 * @@return scale to m int
	 */
	public int getDlgScaleFitToM() {
		return getScaleFitToM();
	}

	/**
	 * If not > 0 then user has clicked percent scaling
	 * 
	 * @@return scale to n int
	 */
	public int getDlgScaleFitToN() {
		return getScaleFitToN();
	}

	/**
	 * If not > 0 then user has clicked fit to m x n scaling
	 * 
	 * @@return scale percent int
	 */
	public int getDlgScalePercent() {
		return getScalePercent();
	}

	/**
	 * Returns true if the diagram at the index was selected
	 * 
	 * @@param index
	 *            the index of the diagrams you passed in
	 * @@return true if selected, false if not selected
	 */
	public boolean isDlgDiagramSelected(int index) {
		return isDiagramSelected(index);
	}

	//one of the three is unnecssary, but it makes more sense
	/**
	 * Returns if diagram print range all was selected
	 * 
	 * @@return true if selected, false if not selected
	 */
	public boolean getDlgDiagramPrintRangeAll() {
		return getDiagramPrintRangeAll();
	}

	/**
	 * Returns if diagram print range current was selected
	 * 
	 * @@return true if selected, false if not selected
	 */
	public boolean getDlgDiagramPrintRangeCurrent() {
		return getDiagramPrintRangeCurrent();
	}

	/**
	 * Returns if diagram print range selection was selected
	 * 
	 * @@return true if selected, false if not selected
	 */
	public boolean getDlgDiagramPrintRangeSelection() {
		return getDiagramPrintRangeSelection();
	}

	//one of the three is unnecssary, but it makes more sense
	/**
	 * Returns if print range all was selected
	 * 
	 * @@return true if selected, false if not selected
	 */
	public boolean getDlgPrintRangeAll() {
		return getPrintRangeAll();
	}

	/**
	 * Returns if print range pages was selected
	 * 
	 * @@return true if selected, false if not selected
	 */
	public boolean getDlgPrintRangePages() {
		return getPrintRangePages();
	}

	/**
	 * Returns if collate was selected
	 * 
	 * @@return true if selected, false if not selected
	 */
	public boolean getDlgCollate() {
		return getCollate();
	}

	/**
	 * Returns the pages from int value, check if (getDlgPrintRangesPages())
	 * first.
	 * 
	 * @@return int of the pages from box
	 */
	public int getDlgPagesFrom() {
		return getPagesFrom();
	}

	/**
	 * Returns the pages from int value, check if (getDlgPrintRangesPages())
	 * first.
	 * 
	 * @@return int of the pages to box
	 */
	public int getDlgPagesTo() {
		return getPagesTo();
	}

	/**
	 * Returns the number of copies the user wants to print. This is nCopies
	 * from PRINTDLG
	 * 
	 * @@return int with the number of copies
	 */
	public int getDlgNumberOfCopies() {
		return getNumberOfCopies();
	}
    
d499 3
a501 1
     * @@param isLandscape   true if orientation should be landscape, false otherwise.
d506 1
a506 1
    
d509 11
a519 6
     * @@param index         index of type of paper size, @@see org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType
     *                      for the type of paper sizes available and their indices. 
     * @@param width         specifies the custom width of the paper. Leave as 0 if
     *                      paper size index is user-defined.
     * @@param height        specifies the custom width of the paper. Leave as 0 if
     *                      paper size index is user-defined.
d524 1
a524 1
    
@


1.4
log
@[112407] gmf_head wdiu 051117 Enhanced printing doesn't work
@
text
@a37 28
	/**
	 * Dynamic link library name without the extension
	 */
	private static final String DLL_NAME = "DiagramPrint"; //$NON-NLS-1$

	/**
	 * Country and language separator
	 */
	private static final String SEPARATOR = StringStatics.UNDER_SCORE;

	//to avoid throwing exceptions because of trying to load dlls for
	//unsupported locales, maintain an array of supported countries and
	//languages
	
	//in the array below, if there are multiple entries for the same
	//language, put the country specific one first
	
	/**
	 * Supported languages strings.  Default locale is SUPPORTED[0].
	 */
	private static final String SUPPORTED[] = {"en", "de", "es", "fr", "it", "ja", "ko", "pt_BR", "zh_CN", "zh_TW"}; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ //$NON-NLS-8$ //$NON-NLS-9$ //$NON-NLS-10$

	/**
	 * Default locale, English language
	 */
	private static final String DEFAULT_LOCALE = SUPPORTED[0];
	
	
d42 2
a43 89
		
		//Although a far nicer way to do this dll loading is by using
		//Bundle-NativeCode in manifest.mf, I am not doing it that way
		//because of Bugzilla https://bugs.eclipse.org/bugs/show_bug.cgi?id=116497
		
		//When the Bugzilla has been fixed, this static block can be replaced
		//with one line of code
		//System.loadLibrary("DiagramPrint");

		//These lines would need to be added to the manifest.mf
		//Bundle-NativeCode: os/win32/x86/de/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; language=de,
		// os/win32/x86/es/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; language=es,
		// os/win32/x86/fr/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; language=fr,
		// os/win32/x86/it/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; language=it,
		// os/win32/x86/ja/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; language=ja,
		// os/win32/x86/ko/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; language=ko,
		// os/win32/x86/pt_BR/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; selection-filter = "(osgi.nl = pt_BR)",	
		// os/win32/x86/zh_CN/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; selection-filter = "(osgi.nl = zh_CN)",
		// os/win32/x86/zh_TW/DiagramPrint.dll ; osname=WindowsXP ; processor = x86 ; selection-filter = "(osgi.nl = zh_TW)",
		// os/win32/x86/en/DiagramPrint.dll ; osname=WindowsXP ; processor = x86		

		
		boolean success = false;
		String language = Locale.getDefault().getLanguage().toLowerCase();
		String country = Locale.getDefault().getCountry().toUpperCase();

		//try from most specific to least specific, following osgi
		//guidelines

		if (language != null) {

			String localizedVersion = (country != null) ? language + SEPARATOR + country : language;

			for (int i = 0; i < SUPPORTED.length; i++) {
				
				if (localizedVersion.equals(SUPPORTED[i])) {
					success = true;
				}
				else if (language.equals(SUPPORTED[i])) {
					//this check is redundant in the unlikely event that country
					//is null and language equals the localizedVersion
					localizedVersion = language;
					success = true;
				}
				
				if (success) {
					success = false;
					//Runtime.getRuntime().findLibrary() is protected,
					//surround loadLibrary() with try catch
					try {
						System.loadLibrary(DLL_NAME + SEPARATOR
							+ localizedVersion);
						success = true;
						break;
					} catch (UnsatisfiedLinkError ule) {
						//try without the country
						//loadedDLL is still false
						Trace.catching(PrintingPlugin.getDefault(),
							CommonPrintingDebugOptions.EXCEPTIONS_CATCHING,
							PrintHelper.class, "Link", ule); //$NON-NLS-1$
						Log.error(PrintingPlugin.getDefault(),
							CommonPrintingStatusCodes.RESOURCE_FAILURE,
							"Failed to load DiagramPrint dll for " //$NON-NLS-1$
								+ localizedVersion);
						Trace.throwing(PrintingPlugin.getDefault(),
							CommonPrintingDebugOptions.EXCEPTIONS_THROWING,
							PrintHelper.class, "Link", ule); //$NON-NLS-1$*/
					}
				}
			}
		}

		if (!success) {
			try {
				System.loadLibrary(DLL_NAME + SEPARATOR + DEFAULT_LOCALE);
			} catch (UnsatisfiedLinkError ule) {
				Trace.catching(PrintingPlugin.getDefault(),
					CommonPrintingDebugOptions.EXCEPTIONS_CATCHING,
					PrintHelper.class, "Link", ule); //$NON-NLS-1$
				Log.error(PrintingPlugin.getDefault(),
					CommonPrintingStatusCodes.RESOURCE_FAILURE,
					"Failed to load DiagramPrint_en.dll for language " + ((language == null) ? "null" : language) + " and country " + ((country == null) ? "null" : country), ule); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
				Trace.throwing(PrintingPlugin.getDefault(),
					CommonPrintingDebugOptions.EXCEPTIONS_THROWING,
					PrintHelper.class, "Link", ule); //$NON-NLS-1$*/
				throw ule;
			}
		}

d89 17
d414 22
@


1.4.2.1
log
@Bugzilla#144448 gmf_R1_0_maintenance cmahoney 060717 Page Setup settings are not used when printing
Contributed by: Syed Atif Ali
@
text
@d38 28
d70 89
a158 2
		//Note: DiagramPrint dll(s) defined in the manifest
		System.loadLibrary("DiagramPrint"); //$NON-NLS-1$
a203 17
    
    /**
     * Allows to set the orientation (portrait/landscape) in the print dialog.
     * @@param isLandscape   true if orientation should be landscape, false otherwise.
     */
    public static native void setOrientation(boolean isLandscape);
     
    /**
     * Allows to set the paper size in the print dialog.
     * @@param index         index of type of paper size, @@see org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType
     *                      for the type of paper sizes available and their indices. 
     * @@param width         specifies the custom width of the paper. Leave as 0 if
     *                      paper size index is user-defined.
     * @@param height        specifies the custom width of the paper. Leave as 0 if
     *                      paper size index is user-defined.
     */
    public static native void setPaperSize(int index, double width, double height);
a511 22
    
    /**
     * Allows to set the orientation (portrait/landscape) in the print dialog.
     * @@param isLandscape   true if orientation should be landscape, false otherwise.
     */
    public void setDlgOrientation(boolean bLandscape) {
        setOrientation(bLandscape);
    }
    
    /**
     * Allows to set the paper size in the print dialog.
     * @@param index         index of type of paper size, @@see org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType
     *                      for the type of paper sizes available and their indices. 
     * @@param width         specifies the custom width of the paper. Leave as 0 if
     *                      paper size index is user-defined.
     * @@param height        specifies the custom width of the paper. Leave as 0 if
     *                      paper size index is user-defined.
     */
    public void setDlgPaperSize(int index, double width, double height) {
        setPaperSize(index, width, height);
    }
    
@


1.4.2.2
log
@[153902] gmf_R1_0_maintenance ahunter 061005 Error message attempting to load library on Linux
@
text
@a13 2
import java.util.ArrayList;
import java.util.Arrays;
d36 1
a36 124
    implements IPrintHelper {

    /**
     * Dynamic link library name without the extension
     */
    private static final String DLL_NAME = "DiagramPrint"; //$NON-NLS-1$

    /**
     * Country and language separator
     */
    private static final String SEPARATOR = StringStatics.UNDER_SCORE;

    // to avoid throwing exceptions because of trying to load dlls for
    // unsupported locales, maintain an array of supported countries and
    // languages

    // in the array below, if there are multiple entries for the same
    // language, put the country specific one first

    /**
     * Supported languages strings. Default locale is SUPPORTED[0].
     */
    private static final String SUPPORTED[] = {
        "en", "de", "es", "fr", "it", "ja", "ko", "pt_BR", "zh_CN", "zh_TW"}; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ //$NON-NLS-8$ //$NON-NLS-9$ //$NON-NLS-10$

    /**
     * Default locale, English language
     */
    private static final String DEFAULT_LOCALE = SUPPORTED[0];

    /*
     * Load the dll
     */
    static {

        // Although a far nicer way to do this dll loading is by using
        // Bundle-NativeCode in manifest.mf, we are not doing it that way
        // because of Bugzilla
        // https://bugs.eclipse.org/bugs/show_bug.cgi?id=153902

        // When the Bugzilla has been fixed, this static block can be replaced
        // with one line of code
        // System.loadLibrary("DiagramPrint");

        String localizedVersion = DEFAULT_LOCALE;

        List supported = new ArrayList();
        supported.addAll(Arrays.asList(SUPPORTED));

        String language = Locale.getDefault().getLanguage().toLowerCase();
        if (supported.contains(language)) {
            localizedVersion = language;
        } else {
            String country = Locale.getDefault().getCountry().toUpperCase();
            if (country != null) {
                String locale = language + SEPARATOR + country;
                if (supported.contains(locale)) {
                    localizedVersion = locale;
                }
            }
        }

        try {
            System.loadLibrary(DLL_NAME + SEPARATOR + localizedVersion);
        } catch (UnsatisfiedLinkError ule) {
            Log.error(PrintingPlugin.getDefault(),
                CommonPrintingStatusCodes.RESOURCE_FAILURE,
                "Failed to load DiagramPrint dll for " //$NON-NLS-1$
                    + localizedVersion);
            Trace.catching(PrintingPlugin.getDefault(),
                CommonPrintingDebugOptions.EXCEPTIONS_CATCHING,
                PrintHelper.class, "Link", ule); //$NON-NLS-1$
            Trace.throwing(PrintingPlugin.getDefault(),
                CommonPrintingDebugOptions.EXCEPTIONS_THROWING,
                PrintHelper.class, "Link", ule); //$NON-NLS-1$*/
            throw ule;
        }
    }

    /*
     * Static methods from dll
     */

    /*
     * Set methods
     */

    /**
     * Init print dialog box's scale fit to.
     * 
     * @@param m
     * @@param n
     */
    public static native void initScaleFitTo(int m, int n);

    /**
     * Init print dialog box's scale percent.
     * 
     * @@param percent
     */
    public static native void initScalePercent(int percent);

    /**
     * Resets the dialog. Call this before addDiagramString if you've already
     * added strings.
     */
    public static native void resetDialog();

    /**
     * Add a string to the diagrams list of the dialog box.
     * 
     * @@param string
     */
    public static native void addDiagramString(String string);

    /**
     * Set the owner hwnd so that the displyed print dialog is modal.
     * 
     * @@param windowClass
     *            String with class
     * @@param title
     *            String with shell title
     */
    public static native void setHwndOwner(String windowClass, String title);
d38 52
d92 1
a92 3
     * 
     * @@param isLandscape
     *            true if orientation should be landscape, false otherwise.
d95 1
a95 1

d98 317
a414 324
     * 
     * @@param index
     *            index of type of paper size,
     * @@see org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType
     *      for the type of paper sizes available and their indices.
     * @@param width
     *            specifies the custom width of the paper. Leave as 0 if paper
     *            size index is user-defined.
     * @@param height
     *            specifies the custom width of the paper. Leave as 0 if paper
     *            size index is user-defined.
     */
    public static native void setPaperSize(int index, double width,
            double height);

    /*
     * Get methods
     */

    /**
     * If not > 0 then user has clicked percent scaling
     * 
     * @@return scale to m int
     */
    public static native int getScaleFitToM();

    /**
     * If not > 0 then user has clicked percent scaling
     * 
     * @@return scale to n int
     */
    public static native int getScaleFitToN();

    /**
     * If not > 0 then user has clicked fit to m x n scaling
     * 
     * @@return scale percent int
     */
    public static native int getScalePercent();

    /**
     * Returns true if the diagram at the index was selected
     * 
     * @@param index
     *            the index of the diagrams you passed in
     * @@return true if selected, false if not selected
     */
    public static native boolean isDiagramSelected(int index);

    // one of the three is unnecssary, but it makes more sense
    /**
     * Returns if diagram print range all was selected
     * 
     * @@return true if selected, false if not selected
     */
    public static native boolean getDiagramPrintRangeAll();

    /**
     * Returns if diagram print range current was selected
     * 
     * @@return true if selected, false if not selected
     */
    public static native boolean getDiagramPrintRangeCurrent();

    /**
     * Returns if diagram print range selection was selected
     * 
     * @@return true if selected, false if not selected
     */
    public static native boolean getDiagramPrintRangeSelection();

    // one of the three is unnecssary, but it makes more sense
    /**
     * Returns if print range all was selected
     * 
     * @@return true if selected, false if not selected
     */
    public static native boolean getPrintRangeAll();

    /**
     * Returns if print range pages was selected
     * 
     * @@return true if selected, false if not selected
     */
    public static native boolean getPrintRangePages();

    /**
     * Returns if collate was selected
     * 
     * @@return true if selected, false if not selected
     */
    public static native boolean getCollate();

    /**
     * Returns the pages from int value, check if (getPrintRangesPages()) first.
     * 
     * @@return int of the pages from box
     */
    public static native int getPagesFrom();

    /**
     * Returns the pages from int value, check if (getPrintRangesPages()) first.
     * 
     * @@return int of the pages to box
     */
    public static native int getPagesTo();

    /**
     * Returns the number of copies the user wants to print. This is nCopies
     * from PRINTDLG
     * 
     * @@return int with the number of copies
     */
    public static native int getNumberOfCopies();

    /*
     * Don't do getDevMode() and gethDevNames() for hDevMode and hDevNames from
     * PRINTDLG because they are filled by passing in PrinterData to open..
     */

    /**
     * Opens the dialog box.
     * 
     * @@param pd
     * @@return <code>true</code> if dialog box opened succesfully,
     *         <code>false</code> otherwise
     */
    public static native boolean open(PrinterData pd);

    /**
     * Open the print dialog box with the diagram list.
     * 
     * XXX: internal access SWT_Window0 is a hardcoded internal access string
     * 
     * @@param diagramList
     */
    public PrinterData openPrintDlg(List diagramList) {

        // set owner to make it modal
        String title = PlatformUI.getWorkbench().getActiveWorkbenchWindow()
            .getShell().getText();

        assert null != title : "title cannot be null"; //$NON-NLS-1$

        // XXX: internal access
        // SWT_Window0 is a hardcoded internal access string of the class
        // name and it could change. However, setHwndOwner will try to
        // obtain the window even if it can't find that matching class by
        // using the window's title.
        setHwndOwner("SWT_Window0", title); //$NON-NLS-1$

        // initialize dialog
        resetDialog();
        initScaleFitTo(1, 1);
        initScalePercent(100);

        if (diagramList != null) {
            for (int c = 0; c < diagramList.size(); c++) {
                assert (diagramList.get(c) instanceof String);
                addDiagramString((String) diagramList.get(c));
            }
        }

        // prevent default initialization from empty constructor
        PrinterData printerData = new PrinterData(StringStatics.BLANK,
            StringStatics.BLANK);
        if (open(printerData)) {
            // save the printerData
            if (getPrintRangePages()) {
                printerData.scope = PrinterData.PAGE_RANGE;
                printerData.startPage = getPagesFrom();
                printerData.endPage = getPagesTo();
            } else /* if (getPrintRangeAll()) */{
                printerData.scope = PrinterData.ALL_PAGES;
            }
            printerData.printToFile = false;
            // not supported by dialog, no need to set printerData.fileName

            printerData.copyCount = getNumberOfCopies();
            printerData.collate = getCollate();

        } else {
            return null;
        }

        return printerData;

    }

    /**
     * Make an instance of PrintHelper
     */
    public PrintHelper() {
        /* empty constructor */
    }

    /*
     * The get methods to hide the static methods
     */

    /**
     * If not > 0 then user has clicked percent scaling
     * 
     * @@return scale to m int
     */
    public int getDlgScaleFitToM() {
        return getScaleFitToM();
    }

    /**
     * If not > 0 then user has clicked percent scaling
     * 
     * @@return scale to n int
     */
    public int getDlgScaleFitToN() {
        return getScaleFitToN();
    }

    /**
     * If not > 0 then user has clicked fit to m x n scaling
     * 
     * @@return scale percent int
     */
    public int getDlgScalePercent() {
        return getScalePercent();
    }

    /**
     * Returns true if the diagram at the index was selected
     * 
     * @@param index
     *            the index of the diagrams you passed in
     * @@return true if selected, false if not selected
     */
    public boolean isDlgDiagramSelected(int index) {
        return isDiagramSelected(index);
    }

    // one of the three is unnecssary, but it makes more sense
    /**
     * Returns if diagram print range all was selected
     * 
     * @@return true if selected, false if not selected
     */
    public boolean getDlgDiagramPrintRangeAll() {
        return getDiagramPrintRangeAll();
    }

    /**
     * Returns if diagram print range current was selected
     * 
     * @@return true if selected, false if not selected
     */
    public boolean getDlgDiagramPrintRangeCurrent() {
        return getDiagramPrintRangeCurrent();
    }

    /**
     * Returns if diagram print range selection was selected
     * 
     * @@return true if selected, false if not selected
     */
    public boolean getDlgDiagramPrintRangeSelection() {
        return getDiagramPrintRangeSelection();
    }

    // one of the three is unnecssary, but it makes more sense
    /**
     * Returns if print range all was selected
     * 
     * @@return true if selected, false if not selected
     */
    public boolean getDlgPrintRangeAll() {
        return getPrintRangeAll();
    }

    /**
     * Returns if print range pages was selected
     * 
     * @@return true if selected, false if not selected
     */
    public boolean getDlgPrintRangePages() {
        return getPrintRangePages();
    }

    /**
     * Returns if collate was selected
     * 
     * @@return true if selected, false if not selected
     */
    public boolean getDlgCollate() {
        return getCollate();
    }

    /**
     * Returns the pages from int value, check if (getDlgPrintRangesPages())
     * first.
     * 
     * @@return int of the pages from box
     */
    public int getDlgPagesFrom() {
        return getPagesFrom();
    }

    /**
     * Returns the pages from int value, check if (getDlgPrintRangesPages())
     * first.
     * 
     * @@return int of the pages to box
     */
    public int getDlgPagesTo() {
        return getPagesTo();
    }

    /**
     * Returns the number of copies the user wants to print. This is nCopies
     * from PRINTDLG
     * 
     * @@return int with the number of copies
     */
    public int getDlgNumberOfCopies() {
        return getNumberOfCopies();
    }

d417 1
a417 3
     * 
     * @@param isLandscape
     *            true if orientation should be landscape, false otherwise.
d422 1
a422 1

d425 6
a430 11
     * 
     * @@param index
     *            index of type of paper size,
     * @@see org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageSetupPageType
     *      for the type of paper sizes available and their indices.
     * @@param width
     *            specifies the custom width of the paper. Leave as 0 if paper
     *            size index is user-defined.
     * @@param height
     *            specifies the custom width of the paper. Leave as 0 if paper
     *            size index is user-defined.
d435 1
a435 1

@


1.3
log
@Bugzilla 110653 gmf_head ahunter 051012 Eroneous references to xtools in gmf common namespace
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
a13 2
import java.io.File;
import java.io.IOException;
a16 2
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
d39 1
a39 2
	 * The WIN32 folder name to append to the starting directory. Do not
	 * externalize the directory name strings.
d41 1
a41 2
	private static final String WIN32_FOLDER = File.separator + "os" //$NON-NLS-1$
		+ File.separator + "win32" + File.separator + "x86"; //$NON-NLS-1$ //$NON-NLS-2$
d44 1
a44 2
	 * The starting directory has .win32 appended to it, since we are in a.
	 * win32 fragment. Do not externalize the directory name strings.
d46 1
a46 1
	private static final String WIN32_END = ".win32"; //$NON-NLS-1$
d48 7
d56 1
a56 1
	 * DLL Name
d58 1
a58 1
	private static final String DLL_NAME = "DiagramPrint.dll"; //$NON-NLS-1$
d60 6
d70 28
a97 11
		try {
			String startingFolder = new Path(Platform.resolve(
				PrintingPlugin.getDefault().getBundle().getEntry("/"))//$NON-NLS-1$
				.getFile()).toOSString();

			//strip the ending, os string may have file separator
			if (startingFolder.endsWith(File.separator)) {
				startingFolder = startingFolder.substring(0, startingFolder
					.length()
					- File.separator.length());
			}
d99 1
a99 14
			//get the version separator, if necessary
			String version = (String) PrintingPlugin.getDefault().getBundle()
				.getHeaders().get(org.osgi.framework.Constants.BUNDLE_VERSION);
			int end = startingFolder.length() - version.length() - 1;
			//very strange if end isn't at least 1
			if (startingFolder.endsWith(version) && end >= 1) {
				startingFolder = startingFolder.substring(0, end);
				startingFolder = startingFolder.concat(WIN32_END).concat(
					StringStatics.PLUGIN_VERSION_SEPARATOR).concat(version)
					.concat(WIN32_FOLDER);
			} else {
				startingFolder = startingFolder.concat(WIN32_END).concat(
					WIN32_FOLDER);
			}
d101 1
a101 11
			//According to eclipse bug
			//53767 Absolute path preceeded by forward slash
			//https://bugs.eclipse.org/bugs/show_bug.cgi?id=53767
			//it is OK for an absolute path to have a forward
			//slash in front of it.

			//strip the preceeding / or \, be safe and check for both
			if (startingFolder.startsWith(StringStatics.FORWARD_SLASH)
				|| startingFolder.startsWith(StringStatics.BACKWARD_SLASH)) {
				startingFolder = startingFolder.substring(1);
			}
d103 34
a136 37
			// Globalization support required for the print dll.
			// Drive:\install
			// directory\org.eclipse.gmf.runtime.common.ui.printing.win32\os\win32\x86\"locale"\DiagramPrint.dll
			// ...check for DLL using the full locale name.
			// ...if the file exists, then that's all we need
			Path dllPath = new Path(startingFolder + File.separator
				+ Locale.getDefault().toString() + File.separator + DLL_NAME);
			if (dllPath.toFile().exists())
				// file is there, might as well load the dll
				System.load(dllPath.toString());
			else {
				// ...otherwise we just use the language and country code
				dllPath = new Path(startingFolder + File.separator
					+ Locale.getDefault().getLanguage() + "_" //$NON-NLS-1$
					+ Locale.getDefault().getCountry() + File.separator
					+ DLL_NAME);
				if (dllPath.toFile().exists()) {
					// file is there, might as well load the dll
					System.load(dllPath.toString());
				} else {
					// ... well just try the language code allone
					dllPath = new Path(startingFolder + File.separator
					+ Locale.getDefault().getLanguage() + File.separator
					+ DLL_NAME);
					if (dllPath.toFile().exists()) {
						// file is there, might as well load the dll
						System.load(dllPath.toString());
					}
					else {
						//load English for an unsupported locale
						dllPath = new Path(startingFolder + File.separator
							+ Locale.ENGLISH.toString() + File.separator
							+ DLL_NAME);
						//for this last one, don't bother checking to see if the
						//file exists so that an exception will be thrown if it
						//doesn't
						System.load(dllPath.toString());
d140 1
d142 15
a156 24
		} catch (UnsatisfiedLinkError ule) {
			Trace.catching(PrintingPlugin.getDefault(),
				CommonPrintingDebugOptions.EXCEPTIONS_CATCHING,
				PrintHelper.class, "Link", ule); //$NON-NLS-1$
			Log.error(PrintingPlugin.getDefault(),
				CommonPrintingStatusCodes.RESOURCE_FAILURE,
				"Failed to load DiagramPrint.dll", ule); //$NON-NLS-1$
			Trace.throwing(PrintingPlugin.getDefault(),
				CommonPrintingDebugOptions.EXCEPTIONS_THROWING,
				PrintHelper.class, "Link", ule); //$NON-NLS-1$*/
			throw ule;
		} catch (IOException ioe) {
			Trace.catching(PrintingPlugin.getDefault(),
				CommonPrintingDebugOptions.EXCEPTIONS_CATCHING,
				PrintHelper.class, "Link path", ioe); //$NON-NLS-1$
			Log.error(PrintingPlugin.getDefault(),
				CommonPrintingStatusCodes.RESOURCE_FAILURE,
				"Failed to resolve link path for DiagramPrint.dll", ioe); //$NON-NLS-1$
			//cannot resolve the link path will give a link error
			UnsatisfiedLinkError ule = new UnsatisfiedLinkError();
			Trace.throwing(PrintingPlugin.getDefault(),
				CommonPrintingDebugOptions.EXCEPTIONS_THROWING,
				PrintHelper.class, "Link path", ule); //$NON-NLS-1$*/
			throw ule;
d158 1
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d105 1
a105 1
			// directory\com.ibm.xtools.common.printing.win32\os\win32\x86\"locale"\DiagramPrint.dll
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

