head	1.2;
access;
symbols
	v20080813-1520:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060512-1000:1.1
	I20060512-1000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2006.05.14.18.06.32;	author atikhomirov;	state dead;
branches;
next	1.1;

1.1
date	2006.05.10.15.12.33;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.2
log
@overriding recent changes introduced (along with fixing #133836) in GMFMap model, as it's merely a 'shortcut', quite frequent though. Still, adding few new concepts just for the sake of single usecase (I do admit it's popular) seems excessive to me.
GMFMap kept the same as old (no new notions introduced), GMFGraph got generalization from DiagramLabel to DiagramNode to make it possible to use DiagramLabels for NodeMappings (thus, it's possible to detect such nodes in the DGMT)
Tests added to make sure we generate correct genModel for both cases.
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.eclipse.gmf.gmfgraph.DiagramLabel;

import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LabelFlavour;
import org.eclipse.gmf.mappings.LabelNodeMapping;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Label Node Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelNodeMappingImpl#getDiagramLabel <em>Diagram Label</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelNodeMappingImpl#getFeatures <em>Features</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelNodeMappingImpl#isReadOnly <em>Read Only</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelNodeMappingImpl#getViewPattern <em>View Pattern</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelNodeMappingImpl#getEditPattern <em>Edit Pattern</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class LabelNodeMappingImpl extends NodeMappingImpl implements LabelNodeMapping {
	/**
	 * The cached value of the '{@@link #getDiagramLabel() <em>Diagram Label</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDiagramLabel()
	 * @@generated
	 * @@ordered
	 */
	protected DiagramLabel diagramLabel = null;

	/**
	 * The cached value of the '{@@link #getFeatures() <em>Features</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFeatures()
	 * @@generated
	 * @@ordered
	 */
	protected EList features = null;

	/**
	 * The default value of the '{@@link #isReadOnly() <em>Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean READ_ONLY_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isReadOnly() <em>Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected boolean readOnly = READ_ONLY_EDEFAULT;

	/**
	 * The default value of the '{@@link #getViewPattern() <em>View Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewPattern()
	 * @@generated
	 * @@ordered
	 */
	protected static final String VIEW_PATTERN_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getViewPattern() <em>View Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewPattern()
	 * @@generated
	 * @@ordered
	 */
	protected String viewPattern = VIEW_PATTERN_EDEFAULT;

	/**
	 * The default value of the '{@@link #getEditPattern() <em>Edit Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditPattern()
	 * @@generated
	 * @@ordered
	 */
	protected static final String EDIT_PATTERN_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getEditPattern() <em>Edit Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditPattern()
	 * @@generated
	 * @@ordered
	 */
	protected String editPattern = EDIT_PATTERN_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected LabelNodeMappingImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return GMFMapPackage.eINSTANCE.getLabelNodeMapping();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DiagramLabel getDiagramLabel() {
		if (diagramLabel != null && diagramLabel.eIsProxy()) {
			InternalEObject oldDiagramLabel = (InternalEObject)diagramLabel;
			diagramLabel = (DiagramLabel)eResolveProxy(oldDiagramLabel);
			if (diagramLabel != oldDiagramLabel) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFMapPackage.LABEL_NODE_MAPPING__DIAGRAM_LABEL, oldDiagramLabel, diagramLabel));
			}
		}
		return diagramLabel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DiagramLabel basicGetDiagramLabel() {
		return diagramLabel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDiagramLabel(DiagramLabel newDiagramLabel) {
		DiagramLabel oldDiagramLabel = diagramLabel;
		diagramLabel = newDiagramLabel;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.LABEL_NODE_MAPPING__DIAGRAM_LABEL, oldDiagramLabel, diagramLabel));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList getFeatures() {
		if (features == null) {
			features = new EObjectResolvingEList(EAttribute.class, this, GMFMapPackage.LABEL_NODE_MAPPING__FEATURES);
		}
		return features;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isReadOnly() {
		return readOnly;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setReadOnly(boolean newReadOnly) {
		boolean oldReadOnly = readOnly;
		readOnly = newReadOnly;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.LABEL_NODE_MAPPING__READ_ONLY, oldReadOnly, readOnly));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getViewPattern() {
		return viewPattern;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setViewPattern(String newViewPattern) {
		String oldViewPattern = viewPattern;
		viewPattern = newViewPattern;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.LABEL_NODE_MAPPING__VIEW_PATTERN, oldViewPattern, viewPattern));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getEditPattern() {
		return editPattern;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditPattern(String newEditPattern) {
		String oldEditPattern = editPattern;
		editPattern = newEditPattern;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.LABEL_NODE_MAPPING__EDIT_PATTERN, oldEditPattern, editPattern));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFMapPackage.LABEL_NODE_MAPPING__DIAGRAM_LABEL:
				if (resolve) return getDiagramLabel();
				return basicGetDiagramLabel();
			case GMFMapPackage.LABEL_NODE_MAPPING__FEATURES:
				return getFeatures();
			case GMFMapPackage.LABEL_NODE_MAPPING__READ_ONLY:
				return isReadOnly() ? Boolean.TRUE : Boolean.FALSE;
			case GMFMapPackage.LABEL_NODE_MAPPING__VIEW_PATTERN:
				return getViewPattern();
			case GMFMapPackage.LABEL_NODE_MAPPING__EDIT_PATTERN:
				return getEditPattern();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFMapPackage.LABEL_NODE_MAPPING__DIAGRAM_LABEL:
				setDiagramLabel((DiagramLabel)newValue);
				return;
			case GMFMapPackage.LABEL_NODE_MAPPING__FEATURES:
				getFeatures().clear();
				getFeatures().addAll((Collection)newValue);
				return;
			case GMFMapPackage.LABEL_NODE_MAPPING__READ_ONLY:
				setReadOnly(((Boolean)newValue).booleanValue());
				return;
			case GMFMapPackage.LABEL_NODE_MAPPING__VIEW_PATTERN:
				setViewPattern((String)newValue);
				return;
			case GMFMapPackage.LABEL_NODE_MAPPING__EDIT_PATTERN:
				setEditPattern((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFMapPackage.LABEL_NODE_MAPPING__DIAGRAM_LABEL:
				setDiagramLabel((DiagramLabel)null);
				return;
			case GMFMapPackage.LABEL_NODE_MAPPING__FEATURES:
				getFeatures().clear();
				return;
			case GMFMapPackage.LABEL_NODE_MAPPING__READ_ONLY:
				setReadOnly(READ_ONLY_EDEFAULT);
				return;
			case GMFMapPackage.LABEL_NODE_MAPPING__VIEW_PATTERN:
				setViewPattern(VIEW_PATTERN_EDEFAULT);
				return;
			case GMFMapPackage.LABEL_NODE_MAPPING__EDIT_PATTERN:
				setEditPattern(EDIT_PATTERN_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFMapPackage.LABEL_NODE_MAPPING__DIAGRAM_LABEL:
				return diagramLabel != null;
			case GMFMapPackage.LABEL_NODE_MAPPING__FEATURES:
				return features != null && !features.isEmpty();
			case GMFMapPackage.LABEL_NODE_MAPPING__READ_ONLY:
				return readOnly != READ_ONLY_EDEFAULT;
			case GMFMapPackage.LABEL_NODE_MAPPING__VIEW_PATTERN:
				return VIEW_PATTERN_EDEFAULT == null ? viewPattern != null : !VIEW_PATTERN_EDEFAULT.equals(viewPattern);
			case GMFMapPackage.LABEL_NODE_MAPPING__EDIT_PATTERN:
				return EDIT_PATTERN_EDEFAULT == null ? editPattern != null : !EDIT_PATTERN_EDEFAULT.equals(editPattern);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class baseClass) {
		if (baseClass == LabelFlavour.class) {
			switch (derivedFeatureID) {
				case GMFMapPackage.LABEL_NODE_MAPPING__DIAGRAM_LABEL: return GMFMapPackage.LABEL_FLAVOUR__DIAGRAM_LABEL;
				case GMFMapPackage.LABEL_NODE_MAPPING__FEATURES: return GMFMapPackage.LABEL_FLAVOUR__FEATURES;
				case GMFMapPackage.LABEL_NODE_MAPPING__READ_ONLY: return GMFMapPackage.LABEL_FLAVOUR__READ_ONLY;
				case GMFMapPackage.LABEL_NODE_MAPPING__VIEW_PATTERN: return GMFMapPackage.LABEL_FLAVOUR__VIEW_PATTERN;
				case GMFMapPackage.LABEL_NODE_MAPPING__EDIT_PATTERN: return GMFMapPackage.LABEL_FLAVOUR__EDIT_PATTERN;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class baseClass) {
		if (baseClass == LabelFlavour.class) {
			switch (baseFeatureID) {
				case GMFMapPackage.LABEL_FLAVOUR__DIAGRAM_LABEL: return GMFMapPackage.LABEL_NODE_MAPPING__DIAGRAM_LABEL;
				case GMFMapPackage.LABEL_FLAVOUR__FEATURES: return GMFMapPackage.LABEL_NODE_MAPPING__FEATURES;
				case GMFMapPackage.LABEL_FLAVOUR__READ_ONLY: return GMFMapPackage.LABEL_NODE_MAPPING__READ_ONLY;
				case GMFMapPackage.LABEL_FLAVOUR__VIEW_PATTERN: return GMFMapPackage.LABEL_NODE_MAPPING__VIEW_PATTERN;
				case GMFMapPackage.LABEL_FLAVOUR__EDIT_PATTERN: return GMFMapPackage.LABEL_NODE_MAPPING__EDIT_PATTERN;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (readOnly: ");
		result.append(readOnly);
		result.append(", viewPattern: ");
		result.append(viewPattern);
		result.append(", editPattern: ");
		result.append(editPattern);
		result.append(')');
		return result.toString();
	}

} //LabelNodeMappingImpl@


1.1
log
@#133836 Creating a child node without a label causes error
@
text
@@

