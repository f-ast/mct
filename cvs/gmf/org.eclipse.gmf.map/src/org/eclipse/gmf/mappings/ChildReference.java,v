head	1.7;
access;
symbols
	v20080813-1520:1.7
	v20080722-1827:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080521:1.7
	v20080425-1959:1.7
	v20080417-1610:1.7
	v20080322-0000:1.7
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.6
	v20070518-1300:1.6
	v20070517-1200:1.6
	v20070504-1000:1.6
	v20070427-0600:1.6
	v20070330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070208-1800:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.6
	M1_20:1.5
	v20060904-1500:1.5
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060519-1300:1.3
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2008.03.03.17.45.08;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	160e47cc39234567;

1.6
date	2006.09.07.12.48.32;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.08.25.18.32.47;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.25.11.24.11;	author radvorak;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.19.16.17.25;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.13.17.28.32;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.23.15.45.31;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.7
log
@regenerated with EMF 2.4M5
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings;


/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Child Reference</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.mappings.ChildReference#getParentNode <em>Parent Node</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.ChildReference#getCompartment <em>Compartment</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.ChildReference#getOwnedChild <em>Owned Child</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.ChildReference#getReferencedChild <em>Referenced Child</em>}</li>
 * </ul>
 * </p>
 *
 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildReference()
 * @@model annotation="http://www.eclipse.org/gmf/2005/constraints ocl='not (ownedChild.oclIsUndefined() and referencedChild.oclIsUndefined())' description='Either \'ownedChild\' or \'referencedChild\' NodeMapping must be set'"
 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='not childrenFeature.oclIsUndefined() implies childrenFeature.eContainingClass.isSuperTypeOf(parentNode.domainMetaElement)' description='\'Children Feature\' must be owned by \'Domain Meta Element\' or its super type of this reference parent Node Mapping'"
 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='not containmentFeature.oclIsUndefined() implies containmentFeature.eContainingClass.isSuperTypeOf(parentNode.domainMetaElement)' description='\'Containment Feature\' must be owned by \'Domain Meta Element\' or its super type of this reference parent Node Mapping'"
 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='not child.getDomainContext().oclIsUndefined() implies not containmentFeature.oclIsUndefined()' description='ChildReference to NodeMapping with domainElement should define \'containmentFeature\''"
 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='let child:NodeMapping=(if ownedChild.oclIsUndefined() then referencedChild else ownedChild endif) in (((child.labelMappings->size() = 1) and child.labelMappings->forAll( soleLabel: LabelMapping | soleLabel.diagramLabel = child.diagramNode)) implies (child.diagramNode.affixedParentSide = gmfgraph::Direction::NONE))' description='Side-affixed children can not be pure labels'"
 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='let child:NodeMapping=(if ownedChild.oclIsUndefined() then referencedChild else ownedChild endif) in ((not compartment.oclIsUndefined()) implies (child.diagramNode.affixedParentSide = gmfgraph::Direction::NONE))' description='Side-affixed children can not be placed in compartments'"
 * @@generated
 */
public interface ChildReference extends NodeReference {
	/**
	 * Returns the value of the '<em><b>Parent Node</b></em>' container reference.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.mappings.NodeMapping#getChildren <em>Children</em>}'.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Parent Node</em>' container reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Parent Node</em>' container reference.
	 * @@see #setParentNode(NodeMapping)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildReference_ParentNode()
	 * @@see org.eclipse.gmf.mappings.NodeMapping#getChildren
	 * @@model opposite="children" required="true" transient="false"
	 * @@generated
	 */
	NodeMapping getParentNode();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildReference#getParentNode <em>Parent Node</em>}' container reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Parent Node</em>' container reference.
	 * @@see #getParentNode()
	 * @@generated
	 */
	void setParentNode(NodeMapping value);

	/**
	 * Returns the value of the '<em><b>Compartment</b></em>' reference.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.mappings.CompartmentMapping#getChildren <em>Children</em>}'.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Compartment</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Compartment</em>' reference.
	 * @@see #setCompartment(CompartmentMapping)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildReference_Compartment()
	 * @@see org.eclipse.gmf.mappings.CompartmentMapping#getChildren
	 * @@model opposite="children"
	 * @@generated
	 */
	CompartmentMapping getCompartment();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildReference#getCompartment <em>Compartment</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Compartment</em>' reference.
	 * @@see #getCompartment()
	 * @@generated
	 */
	void setCompartment(CompartmentMapping value);

	/**
	 * Returns the value of the '<em><b>Owned Child</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Owned Child</em>' containment reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Owned Child</em>' containment reference.
	 * @@see #setOwnedChild(NodeMapping)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildReference_OwnedChild()
	 * @@model containment="true"
	 * @@generated
	 */
	NodeMapping getOwnedChild();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildReference#getOwnedChild <em>Owned Child</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Owned Child</em>' containment reference.
	 * @@see #getOwnedChild()
	 * @@generated
	 */
	void setOwnedChild(NodeMapping value);

	/**
	 * Returns the value of the '<em><b>Referenced Child</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Referenced Child</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Referenced Child</em>' reference.
	 * @@see #setReferencedChild(NodeMapping)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildReference_ReferencedChild()
	 * @@model
	 * @@generated
	 */
	NodeMapping getReferencedChild();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildReference#getReferencedChild <em>Referenced Child</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Referenced Child</em>' reference.
	 * @@see #getReferencedChild()
	 * @@generated
	 */
	void setReferencedChild(NodeMapping value);

} // ChildReference
@


1.6
log
@[156500] mgolubev - Incorrect constraint specified for ChildReference in gmfmap model
@
text
@d48 1
a48 1
	 * @@model opposite="children" required="true"
@


1.5
log
@[124826] mgolubev - Support nodes with border items
@
text
@d30 2
a31 2
 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='let child:NodeMapping=(if ownedChild.oclIsUndefined() then referencedChild else ownedChild endif) in (((child.labelMappings->size() = 1) and child.labelMappings->forAll( soleLabel: LabelMapping | soleLabel.diagramLabel = child.diagramNode)) implies (child.diagramNode.affixedParentSide = gmfgraph::Direction::NSEW))' description='Side-affixed children can not be pure labels'"
 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='let child:NodeMapping=(if ownedChild.oclIsUndefined() then referencedChild else ownedChild endif) in ((not compartment.oclIsUndefined()) implies (child.diagramNode.affixedParentSide = gmfgraph::Direction::NSEW))' description='Side-affixed children can not be placed in compartments'"
@


1.4
log
@#148430 gmfmap, gmfgen Validation should report childnodes with domainElement but without containmentFeature
@
text
@d30 2
@


1.3
log
@typo in constraint's message
@
text
@d29 1
@


1.2
log
@[rdvorak] #131340 Update constraint annotations in gmfmap meta-model to the latest changes
@
text
@d28 1
a28 1
 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='not containmentFeature.oclIsUndefined() implies containmentFeature.eContainingClass.isSuperTypeOf(parentNode.domainMetaElement)' description='\'Children Feature\' must be owned by \'Domain Meta Element\' or its super type of this reference parent Node Mapping'"
@


1.1
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d26 3
a28 1
 * @@model
@

