head	1.13;
access;
symbols
	v20080813-1520:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	I20060216-1945:1.12
	I20060210-1715:1.12
	I20060209-1815:1.11
	I20060203-0830:1.11
	I20060129-1145:1.11
	I20060127-0900:1.11
	I20060120-1530:1.11
	I20060113-1700:1.11
	M4_10:1.11
	I20060107-1100:1.10
	I20060105-1630:1.10
	I20051230-1230:1.10
	I20051223-1100:1.10
	I20051217-0925:1.10
	I20051208-2000:1.9
	I20051201-1800:1.7
	I20051124-2000:1.5
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2006.02.23.15.45.30;	author atikhomirov;	state dead;
branches;
next	1.12;

1.12
date	2006.02.10.15.21.15;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.10.20.40.09;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.10.14.59.34;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.07.19.23.17;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.06.22.21.24;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.29.18.33.02;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.25.13.52.44;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.23.13.30.39;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.20.14.07.16;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.18.10.58.31;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.26.14.26.27;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.30.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.13
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings;

import org.eclipse.gmf.gmfgraph.Child;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Child Node Mapping</b></em>'.
 * <!-- end-user-doc -->
 *
 * <!-- begin-model-doc -->
 * Inner element
 * <!-- end-model-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getDiagramNode <em>Diagram Node</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getCompartment <em>Compartment</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getParentNode <em>Parent Node</em>}</li>
 * </ul>
 * </p>
 *
 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildNodeMapping()
 * @@model annotation="http://www.eclipse.org/gmf/2005/constraints ocl='not containmentFeature.oclIsUndefined() ' description='The child node mapping containmentFeature must be set'"
 * @@generated
 */
public interface ChildNodeMapping extends AbstractNodeMapping {
	/**
	 * Returns the value of the '<em><b>Diagram Node</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Diagram Node</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Diagram Node</em>' reference.
	 * @@see #setDiagramNode(Child)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildNodeMapping_DiagramNode()
	 * @@model required="true"
	 * @@generated
	 */
	Child getDiagramNode();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getDiagramNode <em>Diagram Node</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Diagram Node</em>' reference.
	 * @@see #getDiagramNode()
	 * @@generated
	 */
	void setDiagramNode(Child value);

	/**
	 * Returns the value of the '<em><b>Compartment</b></em>' reference.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.mappings.CompartmentMapping#getChildNodes <em>Child Nodes</em>}'.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Compartment</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Compartment</em>' reference.
	 * @@see #setCompartment(CompartmentMapping)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildNodeMapping_Compartment()
	 * @@see org.eclipse.gmf.mappings.CompartmentMapping#getChildNodes
	 * @@model opposite="childNodes"
	 * @@generated
	 */
	CompartmentMapping getCompartment();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getCompartment <em>Compartment</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Compartment</em>' reference.
	 * @@see #getCompartment()
	 * @@generated
	 */
	void setCompartment(CompartmentMapping value);

	/**
	 * Returns the value of the '<em><b>Parent Node</b></em>' container reference.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getChildMappings <em>Child Mappings</em>}'.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Parent Node</em>' container reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Parent Node</em>' container reference.
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildNodeMapping_ParentNode()
	 * @@see org.eclipse.gmf.mappings.AbstractNodeMapping#getChildMappings
	 * @@model opposite="childMappings" required="true" changeable="false"
	 * @@generated
	 */
	AbstractNodeMapping getParentNode();

} // ChildNodeMapping
@


1.12
log
@[rdvorak] #127256 Adjust gmfmap metamodel annotation constraints to the latest changes
@
text
@@


1.11
log
@#114197 - tooling definition in place
@
text
@d30 1
a30 1
 * @@model
@


1.10
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@d16 4
d33 1
a33 1
public interface ChildNodeMapping extends AbstractNodeMapping{
@


1.9
log
@#119709
Adding Compartment mapping
@
text
@d69 1
a69 1
	 * @@model opposite="childNodes" required="true"
@


1.8
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@a9 1
import org.eclipse.gmf.gmfgraph.Compartment;
d58 1
d66 1
a66 1
	 * @@see #setCompartment(Compartment)
d68 2
a69 1
	 * @@model required="true"
d72 1
a72 1
	Compartment getCompartment();
d82 1
a82 1
	void setCompartment(Compartment value);
@


1.7
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d9 2
a10 1
import org.eclipse.gmf.diadef.Compartment;
d20 1
d30 27
a56 1
public interface ChildNodeMapping extends AbstractNodeMapping {
a68 1
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='parentNode.diagramNode.oclAsType(diadef::Node).compartments->includes(self.compartment)'"
@


1.6
log
@#118053 update models
@
text
@a8 4
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
a9 1
import org.eclipse.gmf.diadef.Node;
@


1.5
log
@[rdvorak] #115862 describe semantics of metamodel with annotations
@
text
@a24 6
 *   <li>{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getDiagramNode <em>Diagram Node</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getDomainChildrenFeature <em>Domain Children Feature</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getEditFeature <em>Edit Feature</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getDomainMetaElement <em>Domain Meta Element</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getDomainSpecialization <em>Domain Specialization</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getDomainInitializer <em>Domain Initializer</em>}</li>
d33 1
a33 1
public interface ChildNodeMapping extends EObject{
a61 158
	 * Returns the value of the '<em><b>Diagram Node</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Diagram Node</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Diagram Node</em>' reference.
	 * @@see #setDiagramNode(Node)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildNodeMapping_DiagramNode()
	 * @@model required="true"
	 * @@generated
	 */
	Node getDiagramNode();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getDiagramNode <em>Diagram Node</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Diagram Node</em>' reference.
	 * @@see #getDiagramNode()
	 * @@generated
	 */
	void setDiagramNode(Node value);

	/**
	 * Returns the value of the '<em><b>Domain Children Feature</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Domain Children Feature</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Domain Children Feature</em>' reference.
	 * @@see #setDomainChildrenFeature(EStructuralFeature)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildNodeMapping_DomainChildrenFeature()
	 * @@model required="true"
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='domainChildrenFeature.eContainingClass.isSuperTypeOf(parentNode.domainMetaElement)'"
	 * @@generated
	 */
	EStructuralFeature getDomainChildrenFeature();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getDomainChildrenFeature <em>Domain Children Feature</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Domain Children Feature</em>' reference.
	 * @@see #getDomainChildrenFeature()
	 * @@generated
	 */
	void setDomainChildrenFeature(EStructuralFeature value);

	/**
	 * Returns the value of the '<em><b>Edit Feature</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Edit Feature</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Edit Feature</em>' reference.
	 * @@see #setEditFeature(EAttribute)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildNodeMapping_EditFeature()
	 * @@model annotation="http://www.eclipse.org/gmf/2005/constraints ocl='editFeature.oclIsUndefined() or (not domainMetaElement.oclIsUndefined()  and editFeature.eContainingClass.isSuperTypeOf(domainMetaElement)) or domainChildrenFeature.eType.oclAsType(ecore::EClass).eAllAttributes->includes(editFeature)'"
	 * @@generated
	 */
	EAttribute getEditFeature();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getEditFeature <em>Edit Feature</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Edit Feature</em>' reference.
	 * @@see #getEditFeature()
	 * @@generated
	 */
	void setEditFeature(EAttribute value);

	/**
	 * Returns the value of the '<em><b>Domain Meta Element</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Domain Meta Element</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Domain Meta Element</em>' reference.
	 * @@see #setDomainMetaElement(EClass)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildNodeMapping_DomainMetaElement()
	 * @@model
	 * @@generated
	 */
	EClass getDomainMetaElement();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getDomainMetaElement <em>Domain Meta Element</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Domain Meta Element</em>' reference.
	 * @@see #getDomainMetaElement()
	 * @@generated
	 */
	void setDomainMetaElement(EClass value);

	/**
	 * Returns the value of the '<em><b>Domain Specialization</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Specializes further the domain meta element EClass associated with this mapping and should be evaluated in this EClass context
	 * <!-- end-model-doc -->
	 * @@return the value of the '<em>Domain Specialization</em>' containment reference.
	 * @@see #setDomainSpecialization(Constraint)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildNodeMapping_DomainSpecialization()
	 * @@model containment="true"
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints/meta def='context' ocl='if domainMetaElement.oclIsUndefined() then domainChildrenFeature.eContainingClass else domainMetaElement endif '"
	 * @@generated
	 */
	Constraint getDomainSpecialization();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getDomainSpecialization <em>Domain Specialization</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Domain Specialization</em>' containment reference.
	 * @@see #getDomainSpecialization()
	 * @@generated
	 */
	void setDomainSpecialization(Constraint value);

	/**
	 * Returns the value of the '<em><b>Domain Initializer</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Initializer for the domain model element associated with mapping
	 * <!-- end-model-doc -->
	 * @@return the value of the '<em>Domain Initializer</em>' containment reference.
	 * @@see #setDomainInitializer(ElementInitializer)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildNodeMapping_DomainInitializer()
	 * @@model containment="true"
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='let i : FeatureSeqInitializer = domainInitializer.oclAsType( FeatureSeqInitializer) in i.oclIsUndefined() or i.initializers.feature.eContainingClass->forAll(c|c.isSuperTypeOf(domainMetaElement)) '"
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints/meta def='context' ocl='if domainMetaElement.oclIsUndefined() then domainChildrenFeature.eContainingClass else domainMetaElement endif '"
	 * @@generated
	 */
	ElementInitializer getDomainInitializer();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getDomainInitializer <em>Domain Initializer</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Domain Initializer</em>' containment reference.
	 * @@see #getDomainInitializer()
	 * @@generated
	 */
	void setDomainInitializer(ElementInitializer value);

	/**
d63 1
a63 1
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.mappings.NodeMapping#getChildMappings <em>Child Mappings</em>}'.
d72 1
a72 1
	 * @@see org.eclipse.gmf.mappings.NodeMapping#getChildMappings
d76 1
a76 1
	NodeMapping getParentNode();
@


1.4
log
@[rdvorak] #112773 specify init expressions while relating diagram elements with domain
@
text
@d31 1
d52 1
a52 1
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='eContainer.diagramNode.compartments->includes(self.compartment)'"
d105 1
a105 1
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='eContainer.domainMetaElement.eAllAttributes->includes(domainChildrenFeature)'"
d131 1
a131 1
	 * @@model
d183 1
d209 2
d225 17
@


1.3
log
@[rdvorak] #112505 constraint specification in gmfmap
@
text
@a26 1
 *   <li>{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getConditionalFeature <em>Conditional Feature</em>}</li>
d30 1
a119 26
	 * Returns the value of the '<em><b>Conditional Feature</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * e.g. EcorePackage.getEClass_EReferences for domainChildrenFeature with EcorePackage.getEReference_Containment for conditionalFeature
	 * <!-- end-model-doc -->
	 * @@return the value of the '<em>Conditional Feature</em>' reference.
	 * @@see #setConditionalFeature(EAttribute)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getChildNodeMapping_ConditionalFeature()
	 * @@model required="true"
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='domainChildrenFeature.eClass.eAllAttributes->includes(conditionalFeature) and conditionalFeature.eType == EcorePackage.getEBoolean'"
	 * @@generated
	 */
	EAttribute getConditionalFeature();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getConditionalFeature <em>Conditional Feature</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Conditional Feature</em>' reference.
	 * @@see #getConditionalFeature()
	 * @@generated
	 */
	void setConditionalFeature(EAttribute value);

	/**
d196 25
@


1.2
log
@[ashatalin] Should be possible to specify editable feature and domain element for child nodes.
@
text
@d30 1
d197 25
@


1.1
log
@*** empty log message ***
@
text
@d5 1
a5 1
 * $Id: ChildNodeMapping.java,v 1.2 2005/08/02 13:11:55 artem Exp $
d10 1
d28 2
d144 52
@

