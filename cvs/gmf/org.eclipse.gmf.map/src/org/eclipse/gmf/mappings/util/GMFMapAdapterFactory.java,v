head	1.23;
access;
symbols
	v20080813-1520:1.23
	v20080722-1827:1.23
	v20080716-1642:1.23
	R2_1_maintenance:1.23.0.2
	Root_R2_1_maintenance:1.23
	R2_1_0:1.23
	v20080521:1.23
	v20080425-1959:1.23
	v20080417-1610:1.23
	v20080322-0000:1.23
	v20080222-1200:1.22
	v20070809-0000:1.22
	R2_0_maintenance:1.22.0.2
	R2_0:1.22
	R4_20:1.22
	v20070621-0000:1.22
	RC3_20:1.22
	v20070608-1300:1.22
	v20070605-1400:1.22
	v20070601-1400:1.22
	v20070525-1500:1.22
	v20070520-1200:1.22
	v20070518-1300:1.22
	v20070517-1200:1.22
	v20070504-1000:1.22
	v20070427-0600:1.22
	v20070330-1300:1.22
	v20070322-1100:1.22
	v20060316-0600:1.22
	v20070208-1800:1.21
	M4_20:1.21
	v20061214-0000:1.21
	M3_20:1.21
	v20061117-0800:1.21
	v20061013-1330:1.20
	M1_20:1.19
	v20060904-1500:1.19
	v20060713-1700:1.19
	R1_0_maintenance:1.19.0.2
	R1_0:1.19
	v20060627-1200:1.19
	v20060626-1420:1.19
	v20060616-1200:1.19
	v20060609-1400:1.19
	v20060531-1730:1.19
	v20060530-1930:1.19
	v20060519-1300:1.19
	v20060519-0800:1.19
	v20060512-1000:1.18
	I20060512-1000:1.18
	I20060505-1400:1.16
	I20060428-1300:1.16
	I20060424-0500:1.15
	I20060424-0300:1.15
	M6_10:1.15
	I20060407-1200:1.15
	I20060331-1000:1.15
	I20060324-0300:1.15
	I20060317-1300:1.15
	I20060317-1200:1.15
	I20060316-1300:1.15
	I20060309-1300:1.15
	M5_10:1.15
	S20060303-1600:1.15
	I20060227-1730:1.13
	I20060216-1945:1.11
	I20060210-1715:1.10
	I20060209-1815:1.10
	I20060203-0830:1.10
	I20060129-1145:1.10
	I20060127-0900:1.10
	I20060120-1530:1.10
	I20060113-1700:1.10
	M4_10:1.10
	I20060107-1100:1.8
	I20060105-1630:1.8
	I20051230-1230:1.8
	I20051223-1100:1.8
	I20051217-0925:1.8
	I20051208-2000:1.8
	I20051201-1800:1.6
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.23
date	2008.03.03.17.45.08;	author atikhomirov;	state Exp;
branches;
next	1.22;
commitid	160e47cc39234567;

1.22
date	2007.03.14.13.00.05;	author atikhomirov;	state Exp;
branches;
next	1.21;
commitid	128545f7f1cb4567;

1.21
date	2006.10.19.15.21.56;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.09.28.18.20.40;	author radvorak;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.14.18.06.32;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.11.09.42.05;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.10.15.12.33;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.25.19.15.49;	author radvorak;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.03.18.32.33;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.03.11.36.26;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.23.15.45.31;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.22.22.01.21;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.13.18.37.47;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.10.20.40.09;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.10.18.35.29;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.07.19.23.17;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.06.22.21.24;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.29.18.33.02;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.25.13.52.44;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.20.14.07.16;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.18.10.58.31;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.26.14.26.27;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.30.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.23
log
@regenerated with EMF 2.4M5
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.mappings.*;

import org.eclipse.gmf.mappings.AppearanceSteward;
import org.eclipse.gmf.mappings.AuditContainer;
import org.eclipse.gmf.mappings.AuditRule;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.ChildReference;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.Constraint;
import org.eclipse.gmf.mappings.ElementInitializer;
import org.eclipse.gmf.mappings.FeatureSeqInitializer;
import org.eclipse.gmf.mappings.FeatureValueSpec;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.LinkConstraints;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.Mapping;
import org.eclipse.gmf.mappings.MappingEntry;
import org.eclipse.gmf.mappings.MenuOwner;
import org.eclipse.gmf.mappings.NeedsContainment;
import org.eclipse.gmf.mappings.NodeMapping;
import org.eclipse.gmf.mappings.NodeReference;
import org.eclipse.gmf.mappings.ToolOwner;
import org.eclipse.gmf.mappings.TopNodeReference;
import org.eclipse.gmf.mappings.ValueExpression;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @@see org.eclipse.gmf.mappings.GMFMapPackage
 * @@generated
 */
public class GMFMapAdapterFactory extends AdapterFactoryImpl {
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected static GMFMapPackage modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GMFMapAdapterFactory() {
		if (modelPackage == null) {
			modelPackage = GMFMapPackage.eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @@return whether this factory is applicable for the type of the object.
	 * @@generated
	 */
	@@Override
	public boolean isFactoryForType(Object object) {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GMFMapSwitch<Adapter> modelSwitch =
		new GMFMapSwitch<Adapter>() {
			@@Override
			public Adapter caseMapping(Mapping object) {
				return createMappingAdapter();
			}
			@@Override
			public Adapter caseMappingEntry(MappingEntry object) {
				return createMappingEntryAdapter();
			}
			@@Override
			public Adapter caseNeedsContainment(NeedsContainment object) {
				return createNeedsContainmentAdapter();
			}
			@@Override
			public Adapter caseNodeReference(NodeReference object) {
				return createNodeReferenceAdapter();
			}
			@@Override
			public Adapter caseChildReference(ChildReference object) {
				return createChildReferenceAdapter();
			}
			@@Override
			public Adapter caseTopNodeReference(TopNodeReference object) {
				return createTopNodeReferenceAdapter();
			}
			@@Override
			public Adapter caseNodeMapping(NodeMapping object) {
				return createNodeMappingAdapter();
			}
			@@Override
			public Adapter caseCompartmentMapping(CompartmentMapping object) {
				return createCompartmentMappingAdapter();
			}
			@@Override
			public Adapter caseLinkMapping(LinkMapping object) {
				return createLinkMappingAdapter();
			}
			@@Override
			public Adapter caseCanvasMapping(CanvasMapping object) {
				return createCanvasMappingAdapter();
			}
			@@Override
			public Adapter caseLabelMapping(LabelMapping object) {
				return createLabelMappingAdapter();
			}
			@@Override
			public Adapter caseFeatureLabelMapping(FeatureLabelMapping object) {
				return createFeatureLabelMappingAdapter();
			}
			@@Override
			public Adapter caseDesignLabelMapping(DesignLabelMapping object) {
				return createDesignLabelMappingAdapter();
			}
			@@Override
			public Adapter caseConstraint(Constraint object) {
				return createConstraintAdapter();
			}
			@@Override
			public Adapter caseLinkConstraints(LinkConstraints object) {
				return createLinkConstraintsAdapter();
			}
			@@Override
			public Adapter caseValueExpression(ValueExpression object) {
				return createValueExpressionAdapter();
			}
			@@Override
			public Adapter caseElementInitializer(ElementInitializer object) {
				return createElementInitializerAdapter();
			}
			@@Override
			public Adapter caseFeatureSeqInitializer(FeatureSeqInitializer object) {
				return createFeatureSeqInitializerAdapter();
			}
			@@Override
			public Adapter caseFeatureInitializer(FeatureInitializer object) {
				return createFeatureInitializerAdapter();
			}
			@@Override
			public Adapter caseFeatureValueSpec(FeatureValueSpec object) {
				return createFeatureValueSpecAdapter();
			}
			@@Override
			public Adapter caseReferenceNewElementSpec(ReferenceNewElementSpec object) {
				return createReferenceNewElementSpecAdapter();
			}
			@@Override
			public Adapter caseMenuOwner(MenuOwner object) {
				return createMenuOwnerAdapter();
			}
			@@Override
			public Adapter caseToolOwner(ToolOwner object) {
				return createToolOwnerAdapter();
			}
			@@Override
			public Adapter caseAppearanceSteward(AppearanceSteward object) {
				return createAppearanceStewardAdapter();
			}
			@@Override
			public Adapter caseAuditContainer(AuditContainer object) {
				return createAuditContainerAdapter();
			}
			@@Override
			public Adapter caseRuleBase(RuleBase object) {
				return createRuleBaseAdapter();
			}
			@@Override
			public Adapter caseAuditRule(AuditRule object) {
				return createAuditRuleAdapter();
			}
			@@Override
			public Adapter caseDomainElementTarget(DomainElementTarget object) {
				return createDomainElementTargetAdapter();
			}
			@@Override
			public Adapter caseDomainAttributeTarget(DomainAttributeTarget object) {
				return createDomainAttributeTargetAdapter();
			}
			@@Override
			public Adapter caseDiagramElementTarget(DiagramElementTarget object) {
				return createDiagramElementTargetAdapter();
			}
			@@Override
			public Adapter caseNotationElementTarget(NotationElementTarget object) {
				return createNotationElementTargetAdapter();
			}
			@@Override
			public Adapter caseMetricContainer(MetricContainer object) {
				return createMetricContainerAdapter();
			}
			@@Override
			public Adapter caseMetricRule(MetricRule object) {
				return createMetricRuleAdapter();
			}
			@@Override
			public Adapter caseAuditedMetricTarget(AuditedMetricTarget object) {
				return createAuditedMetricTargetAdapter();
			}
			@@Override
			public Adapter caseAuditable(Auditable object) {
				return createAuditableAdapter();
			}
			@@Override
			public Adapter caseMeasurable(Measurable object) {
				return createMeasurableAdapter();
			}
			@@Override
			public Adapter defaultCase(EObject object) {
				return createEObjectAdapter();
			}
		};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param target the object to adapt.
	 * @@return the adapter for the <code>target</code>.
	 * @@generated
	 */
	@@Override
	public Adapter createAdapter(Notifier target) {
		return modelSwitch.doSwitch((EObject)target);
	}


	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.MappingEntry <em>Mapping Entry</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.MappingEntry
	 * @@generated
	 */
	public Adapter createMappingEntryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.NeedsContainment <em>Needs Containment</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.NeedsContainment
	 * @@generated
	 */
	public Adapter createNeedsContainmentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.NodeReference <em>Node Reference</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.NodeReference
	 * @@generated
	 */
	public Adapter createNodeReferenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.ChildReference <em>Child Reference</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.ChildReference
	 * @@generated
	 */
	public Adapter createChildReferenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.TopNodeReference <em>Top Node Reference</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.TopNodeReference
	 * @@generated
	 */
	public Adapter createTopNodeReferenceAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.NodeMapping <em>Node Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.NodeMapping
	 * @@generated
	 */
	public Adapter createNodeMappingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.CompartmentMapping <em>Compartment Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.CompartmentMapping
	 * @@generated
	 */
	public Adapter createCompartmentMappingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.LinkMapping <em>Link Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.LinkMapping
	 * @@generated
	 */
	public Adapter createLinkMappingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.CanvasMapping <em>Canvas Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.CanvasMapping
	 * @@generated
	 */
	public Adapter createCanvasMappingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.LabelMapping <em>Label Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.LabelMapping
	 * @@generated
	 */
	public Adapter createLabelMappingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.FeatureLabelMapping <em>Feature Label Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.FeatureLabelMapping
	 * @@generated
	 */
	public Adapter createFeatureLabelMappingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.DesignLabelMapping <em>Design Label Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.DesignLabelMapping
	 * @@generated
	 */
	public Adapter createDesignLabelMappingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.Mapping <em>Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.Mapping
	 * @@generated
	 */
	public Adapter createMappingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.Constraint <em>Constraint</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.Constraint
	 * @@generated
	 */
	public Adapter createConstraintAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.LinkConstraints <em>Link Constraints</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.LinkConstraints
	 * @@generated
	 */
	public Adapter createLinkConstraintsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.ValueExpression <em>Value Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.ValueExpression
	 * @@generated
	 */
	public Adapter createValueExpressionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.ElementInitializer <em>Element Initializer</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.ElementInitializer
	 * @@generated
	 */
	public Adapter createElementInitializerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.FeatureSeqInitializer <em>Feature Seq Initializer</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.FeatureSeqInitializer
	 * @@generated
	 */
	public Adapter createFeatureSeqInitializerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.FeatureInitializer <em>Feature Initializer</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.FeatureInitializer
	 * @@generated
	 */
	public Adapter createFeatureInitializerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.FeatureValueSpec <em>Feature Value Spec</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.FeatureValueSpec
	 * @@generated
	 */
	public Adapter createFeatureValueSpecAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.ReferenceNewElementSpec <em>Reference New Element Spec</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.ReferenceNewElementSpec
	 * @@generated
	 */
	public Adapter createReferenceNewElementSpecAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.MenuOwner <em>Menu Owner</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.MenuOwner
	 * @@generated
	 */
	public Adapter createMenuOwnerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.ToolOwner <em>Tool Owner</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.ToolOwner
	 * @@generated
	 */
	public Adapter createToolOwnerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.AppearanceSteward <em>Appearance Steward</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.AppearanceSteward
	 * @@generated
	 */
	public Adapter createAppearanceStewardAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.AuditContainer <em>Audit Container</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.AuditContainer
	 * @@generated
	 */
	public Adapter createAuditContainerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.AuditRule <em>Audit Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.AuditRule
	 * @@generated
	 */
	public Adapter createAuditRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.RuleBase <em>Rule Base</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.RuleBase
	 * @@generated
	 */
	public Adapter createRuleBaseAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.DomainElementTarget <em>Domain Element Target</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.DomainElementTarget
	 * @@generated
	 */
	public Adapter createDomainElementTargetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.DomainAttributeTarget <em>Domain Attribute Target</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.DomainAttributeTarget
	 * @@generated
	 */
	public Adapter createDomainAttributeTargetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.DiagramElementTarget <em>Diagram Element Target</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.DiagramElementTarget
	 * @@generated
	 */
	public Adapter createDiagramElementTargetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.NotationElementTarget <em>Notation Element Target</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.NotationElementTarget
	 * @@generated
	 */
	public Adapter createNotationElementTargetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.MetricContainer <em>Metric Container</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.MetricContainer
	 * @@generated
	 */
	public Adapter createMetricContainerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.MetricRule <em>Metric Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.MetricRule
	 * @@generated
	 */
	public Adapter createMetricRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.AuditedMetricTarget <em>Audited Metric Target</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.AuditedMetricTarget
	 * @@generated
	 */
	public Adapter createAuditedMetricTargetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.Auditable <em>Auditable</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.Auditable
	 * @@generated
	 */
	public Adapter createAuditableAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.Measurable <em>Measurable</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.Measurable
	 * @@generated
	 */
	public Adapter createMeasurableAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@generated
	 */
	public Adapter createEObjectAdapter() {
		return null;
	}

} //GMFMapAdapterFactory
@


1.22
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d88 1
a88 1
	 * The switch the delegates to the <code>createXXX</code> methods.
@


1.21
log
@[161380] Inroduce label mapping subclasses
@
text
@d76 1
d93 4
a96 3
	protected GMFMapSwitch modelSwitch =
		new GMFMapSwitch() {
			public Object caseMapping(Mapping object) {
d99 2
a100 1
			public Object caseMappingEntry(MappingEntry object) {
d103 2
a104 1
			public Object caseNeedsContainment(NeedsContainment object) {
d107 2
a108 1
			public Object caseNodeReference(NodeReference object) {
d111 2
a112 1
			public Object caseChildReference(ChildReference object) {
d115 2
a116 1
			public Object caseTopNodeReference(TopNodeReference object) {
d119 2
a120 1
			public Object caseNodeMapping(NodeMapping object) {
d123 2
a124 1
			public Object caseCompartmentMapping(CompartmentMapping object) {
d127 2
a128 1
			public Object caseLinkMapping(LinkMapping object) {
d131 2
a132 1
			public Object caseCanvasMapping(CanvasMapping object) {
d135 2
a136 1
			public Object caseLabelMapping(LabelMapping object) {
d139 2
a140 1
			public Object caseFeatureLabelMapping(FeatureLabelMapping object) {
d143 2
a144 1
			public Object caseDesignLabelMapping(DesignLabelMapping object) {
d147 2
a148 1
			public Object caseConstraint(Constraint object) {
d151 2
a152 1
			public Object caseLinkConstraints(LinkConstraints object) {
d155 2
a156 1
			public Object caseValueExpression(ValueExpression object) {
d159 2
a160 1
			public Object caseElementInitializer(ElementInitializer object) {
d163 2
a164 1
			public Object caseFeatureSeqInitializer(FeatureSeqInitializer object) {
d167 2
a168 1
			public Object caseFeatureInitializer(FeatureInitializer object) {
d171 2
a172 1
			public Object caseFeatureValueSpec(FeatureValueSpec object) {
d175 2
a176 1
			public Object caseReferenceNewElementSpec(ReferenceNewElementSpec object) {
d179 2
a180 1
			public Object caseMenuOwner(MenuOwner object) {
d183 2
a184 1
			public Object caseToolOwner(ToolOwner object) {
d187 2
a188 1
			public Object caseAppearanceSteward(AppearanceSteward object) {
d191 2
a192 1
			public Object caseAuditContainer(AuditContainer object) {
d195 2
a196 1
			public Object caseRuleBase(RuleBase object) {
d199 2
a200 1
			public Object caseAuditRule(AuditRule object) {
d203 2
a204 1
			public Object caseDomainElementTarget(DomainElementTarget object) {
d207 2
a208 1
			public Object caseDomainAttributeTarget(DomainAttributeTarget object) {
d211 2
a212 1
			public Object caseDiagramElementTarget(DiagramElementTarget object) {
d215 2
a216 1
			public Object caseNotationElementTarget(NotationElementTarget object) {
d219 2
a220 1
			public Object caseMetricContainer(MetricContainer object) {
d223 2
a224 1
			public Object caseMetricRule(MetricRule object) {
d227 2
a228 1
			public Object caseAuditedMetricTarget(AuditedMetricTarget object) {
d231 2
a232 1
			public Object caseAuditable(Auditable object) {
d235 2
a236 1
			public Object caseMeasurable(Measurable object) {
d239 2
a240 1
			public Object defaultCase(EObject object) {
d253 1
d255 1
a255 1
		return (Adapter)modelSwitch.doSwitch((EObject)target);
@


1.20
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
@
text
@d127 6
d361 28
@


1.19
log
@overriding recent changes introduced (along with fixing #133836) in GMFMap model, as it's merely a 'shortcut', quite frequent though. Still, adding few new concepts just for the sake of single usecase (I do admit it's popular) seems excessive to me.
GMFMap kept the same as old (no new notions introduced), GMFGraph got generalization from DiagramLabel to DiagramNode to make it possible to use DiagramLabels for NodeMappings (thus, it's possible to detect such nodes in the DGMT)
Tests added to make sure we generate correct genModel for both cases.
@
text
@d142 3
d148 3
d439 14
d467 14
@


1.18
log
@revert to gmfmap model compatibility
@
text
@a114 3
			public Object caseLabelNodeMapping(LabelNodeMapping object) {
				return createLabelNodeMappingAdapter();
			}
a126 3
			public Object caseLabelFlavour(LabelFlavour object) {
				return createLabelFlavourAdapter();
			}
a292 14
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.LabelNodeMapping <em>Label Node Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.LabelNodeMapping
	 * @@generated
	 */
	public Adapter createLabelNodeMappingAdapter() {
		return null;
	}

	/**
a348 14
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.LabelFlavour <em>Label Flavour</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.LabelFlavour
	 * @@generated
	 */
	public Adapter createLabelFlavourAdapter() {
		return null;
	}

	/**
@


1.17
log
@#133836 Creating a child node without a label causes error
@
text
@a114 3
			public Object caseShapeNodeMapping(ShapeNodeMapping object) {
				return createShapeNodeMappingAdapter();
			}
a298 14
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.ShapeNodeMapping <em>Shape Node Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.ShapeNodeMapping
	 * @@generated
	 */
	public Adapter createShapeNodeMappingAdapter() {
		return null;
	}

	/**
@


1.16
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@d115 6
d133 3
d302 28
d386 14
@


1.15
log
@[rdvorak] #114196 Allow for the definition of diagram validation rules
@
text
@d166 3
d545 14
@


1.14
log
@#130009 Enable audit rules on diagram (notation model) elements in gmfmap model
@
text
@a162 3
			public Object caseRuleTarget(RuleTarget object) {
				return createRuleTargetAdapter();
			}
d172 15
d528 57
a584 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.RuleTarget <em>Rule Target</em>}'.
d590 1
a590 1
	 * @@see org.eclipse.gmf.mappings.RuleTarget
d593 1
a593 1
	public Adapter createRuleTargetAdapter() {
d598 1
a598 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.DomainElementTarget <em>Domain Element Target</em>}'.
d604 1
a604 1
	 * @@see org.eclipse.gmf.mappings.DomainElementTarget
d607 1
a607 1
	public Adapter createDomainElementTargetAdapter() {
d612 1
a612 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.DiagramElementTarget <em>Diagram Element Target</em>}'.
d618 1
a618 1
	 * @@see org.eclipse.gmf.mappings.DiagramElementTarget
d621 1
a621 1
	public Adapter createDiagramElementTargetAdapter() {
d626 1
a626 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.NotationElementTarget <em>Notation Element Target</em>}'.
d632 1
a632 1
	 * @@see org.eclipse.gmf.mappings.NotationElementTarget
d635 1
a635 1
	public Adapter createNotationElementTargetAdapter() {
@


1.13
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d13 2
d157 3
d163 12
d502 70
@


1.12
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@a12 3
import org.eclipse.gmf.mappings.*;

import org.eclipse.gmf.mappings.AbstractNodeMapping;
d17 1
a17 1
import org.eclipse.gmf.mappings.ChildNodeMapping;
d24 1
d30 1
d32 1
d34 1
d98 11
a108 2
			public Object caseAbstractNodeMapping(AbstractNodeMapping object) {
				return createAbstractNodeMappingAdapter();
a112 3
			public Object caseChildNodeMapping(ChildNodeMapping object) {
				return createChildNodeMappingAdapter();
			}
d177 15
a191 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.AbstractNodeMapping <em>Abstract Node Mapping</em>}'.
d197 1
a197 1
	 * @@see org.eclipse.gmf.mappings.AbstractNodeMapping
d200 1
a200 1
	public Adapter createAbstractNodeMappingAdapter() {
d205 15
a219 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.MappingEntry <em>Mapping Entry</em>}'.
d225 1
a225 1
	 * @@see org.eclipse.gmf.mappings.MappingEntry
d228 1
a228 1
	public Adapter createMappingEntryAdapter() {
d233 1
a233 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.NodeMapping <em>Node Mapping</em>}'.
d239 1
a239 1
	 * @@see org.eclipse.gmf.mappings.NodeMapping
d242 1
a242 1
	public Adapter createNodeMappingAdapter() {
d247 1
a247 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.ChildNodeMapping <em>Child Node Mapping</em>}'.
d253 1
a253 1
	 * @@see org.eclipse.gmf.mappings.ChildNodeMapping
d256 1
a256 1
	public Adapter createChildNodeMappingAdapter() {
@


1.11
log
@#127461 Support multiple labels definition in the mapping model
@
text
@a117 6
			public Object caseNodeLabelMapping(NodeLabelMapping object) {
				return createNodeLabelMappingAdapter();
			}
			public Object caseLinkLabelMapping(LinkLabelMapping object) {
				return createLinkLabelMappingAdapter();
			}
a281 28
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.NodeLabelMapping <em>Node Label Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.NodeLabelMapping
	 * @@generated
	 */
	public Adapter createNodeLabelMappingAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.LinkLabelMapping <em>Link Label Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.LinkLabelMapping
	 * @@generated
	 */
	public Adapter createLinkLabelMappingAdapter() {
		return null;
	}

	/**
@


1.10
log
@#114197 - tooling definition in place
@
text
@d13 2
d115 9
d274 42
@


1.9
log
@[rdvorak] #123279 audits definition in gmfmap
@
text
@a12 2
import org.eclipse.gmf.mappings.*;

d14 3
d19 1
a20 1
import org.eclipse.gmf.mappings.CreationTool;
d29 1
a29 1
import org.eclipse.gmf.mappings.NewActionTool;
d31 1
a31 2
import org.eclipse.gmf.mappings.Tool;
import org.eclipse.gmf.mappings.ToolGroup;
d89 2
a90 2
			public Object caseAbstractNodeMapping(AbstractNodeMapping object) {
				return createAbstractNodeMappingAdapter();
d95 3
a112 15
			public Object caseMapping(Mapping object) {
				return createMappingAdapter();
			}
			public Object caseToolGroup(ToolGroup object) {
				return createToolGroupAdapter();
			}
			public Object caseTool(Tool object) {
				return createToolAdapter();
			}
			public Object caseCreationTool(CreationTool object) {
				return createCreationToolAdapter();
			}
			public Object caseNewActionTool(NewActionTool object) {
				return createNewActionToolAdapter();
			}
d131 9
d277 1
a277 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.ToolGroup <em>Tool Group</em>}'.
d283 1
a283 1
	 * @@see org.eclipse.gmf.mappings.ToolGroup
d286 1
a286 1
	public Adapter createToolGroupAdapter() {
d291 1
a291 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.Tool <em>Tool</em>}'.
d297 1
a297 1
	 * @@see org.eclipse.gmf.mappings.Tool
d300 1
a300 1
	public Adapter createToolAdapter() {
d305 1
a305 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.CreationTool <em>Creation Tool</em>}'.
d311 1
a311 1
	 * @@see org.eclipse.gmf.mappings.CreationTool
d314 1
a314 1
	public Adapter createCreationToolAdapter() {
d319 1
a319 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.NewActionTool <em>New Action Tool</em>}'.
d325 1
a325 1
	 * @@see org.eclipse.gmf.mappings.NewActionTool
d328 1
a328 1
	public Adapter createNewActionToolAdapter() {
d333 1
a333 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.Constraint <em>Constraint</em>}'.
d339 1
a339 1
	 * @@see org.eclipse.gmf.mappings.Constraint
d342 1
a342 1
	public Adapter createConstraintAdapter() {
d347 1
a347 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.LinkConstraints <em>Link Constraints</em>}'.
d353 1
a353 1
	 * @@see org.eclipse.gmf.mappings.LinkConstraints
d356 1
a356 15
	public Adapter createLinkConstraintsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.ValueExpression <em>Value Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.mappings.ValueExpression
	 * @@generated
	 */
	public Adapter createValueExpressionAdapter() {
d361 1
a361 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.ElementInitializer <em>Element Initializer</em>}'.
d367 1
a367 1
	 * @@see org.eclipse.gmf.mappings.ElementInitializer
d370 1
a370 1
	public Adapter createElementInitializerAdapter() {
d375 1
a375 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.FeatureSeqInitializer <em>Feature Seq Initializer</em>}'.
d381 1
a381 1
	 * @@see org.eclipse.gmf.mappings.FeatureSeqInitializer
d384 1
a384 1
	public Adapter createFeatureSeqInitializerAdapter() {
d389 1
a389 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.mappings.FeatureValueSpec <em>Feature Value Spec</em>}'.
d395 1
a395 1
	 * @@see org.eclipse.gmf.mappings.FeatureValueSpec
d398 1
a398 1
	public Adapter createFeatureValueSpecAdapter() {
@


1.8
log
@#119709
Adding Compartment mapping
@
text
@d143 6
d420 28
@


1.7
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@d13 2
d101 3
d218 14
@


1.6
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d13 1
a13 2
import org.eclipse.gmf.mappings.*;

d16 5
d22 1
d26 1
d28 3
d108 12
d255 56
@


1.5
log
@#118053 update models
@
text
@d102 3
d248 14
@


1.4
log
@[rdvorak] #112773 specify init expressions while relating diagram elements with domain
@
text
@d78 3
d133 14
@


1.3
log
@[rdvorak] #112505 constraint specification in gmfmap
@
text
@d102 9
d242 42
@


1.2
log
@[ashatalin] Should be possible to specify editable feature and domain element for child nodes.
@
text
@d96 6
d205 28
@


1.1
log
@*** empty log message ***
@
text
@d13 2
@

