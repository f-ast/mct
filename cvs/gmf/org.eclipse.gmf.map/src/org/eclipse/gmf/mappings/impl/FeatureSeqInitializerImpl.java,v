head	1.10;
access;
symbols
	v20080813-1520:1.10
	v20080722-1827:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080521:1.10
	v20080425-1959:1.10
	v20080417-1610:1.9
	v20080322-0000:1.9
	v20080222-1200:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070608-1300:1.8
	v20070605-1400:1.8
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070520-1200:1.8
	v20070518-1300:1.8
	v20070517-1200:1.8
	v20070504-1000:1.8
	v20070427-0600:1.8
	v20070330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070208-1800:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.6
	M1_20:1.5
	v20060904-1500:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060519-1300:1.5
	v20060519-0800:1.5
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2008.04.18.14.43.25;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	2e3f4808b38b4567;

1.9
date	2008.03.04.16.50.29;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	5e4d47cd7dd44567;

1.8
date	2007.04.25.08.08.29;	author dstadnik;	state Exp;
branches;
next	1.7;
commitid	7004462f0c7a4567;

1.7
date	2007.03.14.13.00.04;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	128545f7f1cb4567;

1.6
date	2006.09.28.18.20.40;	author radvorak;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.25.19.15.49;	author radvorak;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.10.15.21.15;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.10.18.35.28;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.06.22.21.24;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.20.14.07.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.mappings.FeatureInitializer;
import org.eclipse.gmf.mappings.FeatureSeqInitializer;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.MappingEntry;
import org.eclipse.gmf.mappings.ReferenceNewElementSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Feature Seq Initializer</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.FeatureSeqInitializerImpl#getMappingEntry <em>Mapping Entry</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.FeatureSeqInitializerImpl#getInitializers <em>Initializers</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.FeatureSeqInitializerImpl#getElementClass <em>Element Class</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.FeatureSeqInitializerImpl#getCreatingInitializer <em>Creating Initializer</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class FeatureSeqInitializerImpl extends EObjectImpl implements FeatureSeqInitializer {
	/**
	 * The cached value of the '{@@link #getInitializers() <em>Initializers</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getInitializers()
	 * @@generated
	 * @@ordered
	 */
	protected EList<FeatureInitializer> initializers;

	/**
	 * The cached value of the '{@@link #getElementClass() <em>Element Class</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getElementClass()
	 * @@generated
	 * @@ordered
	 */
	protected EClass elementClass;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected FeatureSeqInitializerImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFMapPackage.eINSTANCE.getFeatureSeqInitializer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public MappingEntry getMappingEntry() {
		MappingEntry mappingEntry = basicGetMappingEntry();
		return mappingEntry != null && mappingEntry.eIsProxy() ? (MappingEntry)eResolveProxy((InternalEObject)mappingEntry) : mappingEntry;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public MappingEntry basicGetMappingEntry() {
		EObject container = eContainer();
		while(container != null && !(container instanceof MappingEntry)) {
			container = container.eContainer();
		}
		return (container != null) ? (MappingEntry)container : null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<FeatureInitializer> getInitializers() {
		if (initializers == null) {
			initializers = new EObjectContainmentWithInverseEList<FeatureInitializer>(FeatureInitializer.class, this, GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS, GMFMapPackage.FEATURE_INITIALIZER__FEATURE_SEQ_INITIALIZER);
		}
		return initializers;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EClass getElementClass() {
		if(getCreatingInitializer() == null) {
			return (getMappingEntry() != null) ? getMappingEntry().getDomainContext() : null;
		}
		EClass eClass = getElementClassGen();
		if(eClass != null) {
			return eClass;
		}
		EClassifier eClassifier = null;
		if(getCreatingInitializer().getFeature() != null) {
			eClassifier = getCreatingInitializer().getFeature().getEType();			
		}
		return (eClassifier instanceof EClass) ? (EClass)eClassifier : null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getElementClassGen() {
		if (elementClass != null && elementClass.eIsProxy()) {
			InternalEObject oldElementClass = (InternalEObject)elementClass;
			elementClass = (EClass)eResolveProxy(oldElementClass);
			if (elementClass != oldElementClass) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFMapPackage.FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS, oldElementClass, elementClass));
			}
		}
		return elementClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass basicGetElementClass() {
		return elementClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public void setElementClass(EClass newElementClass) {
		if(getCreatingInitializer() == null && eContainer() != null) {
			return;
		}
		setElementClassGen(newElementClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setElementClassGen(EClass newElementClass) {
		EClass oldElementClass = elementClass;
		elementClass = newElementClass;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS, oldElementClass, elementClass));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ReferenceNewElementSpec getCreatingInitializer() {
		if (eContainerFeatureID != GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER) return null;
		return (ReferenceNewElementSpec)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getInitializers()).basicAdd(otherEnd, msgs);
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				return ((InternalEList<?>)getInitializers()).basicRemove(otherEnd, msgs);
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				return eBasicSetContainer(null, GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				return eInternalContainer().eInverseRemove(this, GMFMapPackage.REFERENCE_NEW_ELEMENT_SPEC__NEW_ELEMENT_INITIALIZERS, ReferenceNewElementSpec.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
				if (resolve) return getMappingEntry();
				return basicGetMappingEntry();
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				return getInitializers();
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS:
				if (resolve) return getElementClass();
				return basicGetElementClass();
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				return getCreatingInitializer();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				getInitializers().clear();
				getInitializers().addAll((Collection<? extends FeatureInitializer>)newValue);
				return;
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS:
				setElementClass((EClass)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				getInitializers().clear();
				return;
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS:
				setElementClass((EClass)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
				return basicGetMappingEntry() != null;
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				return initializers != null && !initializers.isEmpty();
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS:
				return elementClass != null;
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				return getCreatingInitializer() != null;
		}
		return super.eIsSet(featureID);
	}

} //FeatureSeqInitializerImpl
@


1.9
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a20 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a203 31
	public NotificationChain basicSetCreatingInitializer(ReferenceNewElementSpec newCreatingInitializer, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newCreatingInitializer, GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setCreatingInitializer(ReferenceNewElementSpec newCreatingInitializer) {
		if (newCreatingInitializer != eInternalContainer() || (eContainerFeatureID != GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER && newCreatingInitializer != null)) {
			if (EcoreUtil.isAncestor(this, newCreatingInitializer))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newCreatingInitializer != null)
				msgs = ((InternalEObject)newCreatingInitializer).eInverseAdd(this, GMFMapPackage.REFERENCE_NEW_ELEMENT_SPEC__NEW_ELEMENT_INITIALIZERS, ReferenceNewElementSpec.class, msgs);
			msgs = basicSetCreatingInitializer(newCreatingInitializer, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER, newCreatingInitializer, newCreatingInitializer));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d213 1
a213 1
				return basicSetCreatingInitializer((ReferenceNewElementSpec)otherEnd, msgs);
d229 1
a229 1
				return basicSetCreatingInitializer(null, msgs);
a285 3
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				setCreatingInitializer((ReferenceNewElementSpec)newValue);
				return;
a303 3
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				setCreatingInitializer((ReferenceNewElementSpec)null);
				return;
@


1.8
log
@regenerated
@
text
@d21 1
d205 31
d245 1
a245 1
				return eBasicSetContainer(otherEnd, GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER, msgs);
d261 1
a261 1
				return eBasicSetContainer(null, GMFMapPackage.FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER, msgs);
d318 3
d339 3
@


1.7
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d53 1
a53 1
	protected EList<FeatureInitializer> initializers = null;
d63 1
a63 1
	protected EClass elementClass = null;
@


1.6
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
@
text
@d53 1
a53 1
	protected EList initializers = null;
d79 1
d112 1
a112 1
	public EList getInitializers() {
d114 1
a114 1
			initializers = new EObjectContainmentWithInverseEList(FeatureInitializer.class, this, GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS, GMFMapPackage.FEATURE_INITIALIZER__FEATURE_SEQ_INITIALIZER);
d204 2
d209 1
a209 1
				return ((InternalEList)getInitializers()).basicAdd(otherEnd, msgs);
d223 1
d227 1
a227 1
				return ((InternalEList)getInitializers()).basicRemove(otherEnd, msgs);
d239 1
d253 1
d275 2
d281 1
a281 1
				getInitializers().addAll((Collection)newValue);
d295 1
d313 1
@


1.5
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@d15 2
a20 1
import org.eclipse.emf.ecore.util.EcoreUtil;
d22 1
a23 1
import org.eclipse.gmf.mappings.FeatureValueSpec;
d26 1
d37 2
d56 10
d89 15
a103 2
		if (eContainerFeatureID != GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY) return null;
		return (MappingEntry)eContainer();
d111 25
a135 3
	public NotificationChain basicSetMappingEntry(MappingEntry newMappingEntry, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newMappingEntry, GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY, msgs);
		return msgs;
d143 8
a150 11
	public void setMappingEntry(MappingEntry newMappingEntry) {
		if (newMappingEntry != eInternalContainer() || (eContainerFeatureID != GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY && newMappingEntry != null)) {
			if (EcoreUtil.isAncestor(this, newMappingEntry))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newMappingEntry != null)
				msgs = ((InternalEObject)newMappingEntry).eInverseAdd(this, GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER, MappingEntry.class, msgs);
			msgs = basicSetMappingEntry(newMappingEntry, msgs);
			if (msgs != null) msgs.dispatch();
d152 1
a152 2
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY, newMappingEntry, newMappingEntry));
d160 12
a171 3
	public EList getInitializers() {
		if (initializers == null) {
			initializers = new EObjectContainmentWithInverseEList(FeatureValueSpec.class, this, GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS, GMFMapPackage.FEATURE_VALUE_SPEC__FEATURE_SEQ_INITIALIZER);
d173 23
a195 1
		return initializers;
d205 3
a207 1
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
d210 1
a210 3
				return basicSetMappingEntry((MappingEntry)otherEnd, msgs);
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				return ((InternalEList)getInitializers()).basicAdd(otherEnd, msgs);
a221 2
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
				return basicSetMappingEntry(null, msgs);
d224 2
d237 2
a238 2
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
				return eInternalContainer().eInverseRemove(this, GMFMapPackage.MAPPING_ENTRY__DOMAIN_INITIALIZER, MappingEntry.class, msgs);
d251 2
a252 1
				return getMappingEntry();
d255 5
a270 3
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
				setMappingEntry((MappingEntry)newValue);
				return;
d275 3
a288 3
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY:
				setMappingEntry((MappingEntry)null);
				return;
d292 3
d307 1
a307 1
				return getMappingEntry() != null;
d310 4
@


1.4
log
@[rdvorak] #127256 Adjust gmfmap metamodel annotation constraints to the latest changes
@
text
@d84 10
d103 1
a103 1
			msgs = eBasicSetContainer((InternalEObject)newMappingEntry, GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY, msgs);
d132 1
a132 1
				return eBasicSetContainer(otherEnd, GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY, msgs);
d147 1
a147 1
				return eBasicSetContainer(null, GMFMapPackage.FEATURE_SEQ_INITIALIZER__MAPPING_ENTRY, msgs);
@


1.3
log
@[rdvorak] #123279 audits definition in gmfmap
@
text
@d11 1
d16 1
d18 2
a19 1
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
d24 1
d33 1
d74 31
d107 1
a107 1
			initializers = new EObjectContainmentEList(FeatureValueSpec.class, this, GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS);
d117 17
d136 2
d149 13
d164 2
d179 3
d197 3
d214 2
@


1.2
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@a13 1
import org.eclipse.emf.ecore.EStructuralFeature;
d81 4
a84 8
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFMapPackage.FEATURE_SEQ_INITIALIZER__INITIALIZERS:
					return ((InternalEList)getInitializers()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d86 1
a86 1
		return eBasicSetContainer(null, featureID, msgs);
d94 2
a95 2
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d99 1
a99 1
		return eDynamicGet(eFeature, resolve);
d107 2
a108 2
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d114 1
a114 1
		eDynamicSet(eFeature, newValue);
d122 2
a123 2
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d128 1
a128 1
		eDynamicUnset(eFeature);
d136 2
a137 2
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d141 1
a141 1
		return eDynamicIsSet(eFeature);
@


1.1
log
@[rdvorak] #112773 specify init expressions while relating diagram elements with domain
@
text
@a11 1

a12 1

a15 1

a16 1

a18 1

@

