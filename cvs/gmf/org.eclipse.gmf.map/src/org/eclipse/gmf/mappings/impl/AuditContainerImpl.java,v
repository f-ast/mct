head	1.5;
access;
symbols
	v20080813-1520:1.5
	v20080722-1827:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080521:1.5
	v20080425-1959:1.5
	v20080417-1610:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070608-1300:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070520-1200:1.5
	v20070518-1300:1.5
	v20070517-1200:1.5
	v20070504-1000:1.5
	v20070427-0600:1.5
	v20070330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.3
	v20070208-1800:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2007.04.25.08.08.30;	author dstadnik;	state Exp;
branches;
next	1.4;
commitid	7004462f0c7a4567;

1.4
date	2007.03.20.16.18.19;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	71094600094a4567;

1.3
date	2007.03.14.13.00.05;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	128545f7f1cb4567;

1.2
date	2006.04.25.19.15.49;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.10.18.35.28;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@regenerated
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.mappings.AuditContainer;
import org.eclipse.gmf.mappings.AuditRule;
import org.eclipse.gmf.mappings.GMFMapPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Audit Container</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditContainerImpl#getId <em>Id</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditContainerImpl#getName <em>Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditContainerImpl#getDescription <em>Description</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditContainerImpl#getParentContainer <em>Parent Container</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditContainerImpl#getAudits <em>Audits</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditContainerImpl#getChildContainers <em>Child Containers</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class AuditContainerImpl extends EObjectImpl implements AuditContainer {
	/**
	 * The default value of the '{@@link #getId() <em>Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getId()
	 * @@generated
	 * @@ordered
	 */
	protected static final String ID_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getId() <em>Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getId()
	 * @@generated
	 * @@ordered
	 */
	protected String id = ID_EDEFAULT;

	/**
	 * The default value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
	protected static final String DESCRIPTION_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
	protected String description = DESCRIPTION_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getAudits() <em>Audits</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAudits()
	 * @@generated
	 * @@ordered
	 */
	protected EList<AuditRule> audits;

	/**
	 * The cached value of the '{@@link #getChildContainers() <em>Child Containers</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getChildContainers()
	 * @@generated
	 * @@ordered
	 */
	protected EList<AuditContainer> childContainers;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected AuditContainerImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFMapPackage.eINSTANCE.getAuditContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getId() {
		return id;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setId(String newId) {
		String oldId = id;
		id = newId;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_CONTAINER__ID, oldId, id));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_CONTAINER__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDescription(String newDescription) {
		String oldDescription = description;
		description = newDescription;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_CONTAINER__DESCRIPTION, oldDescription, description));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public AuditContainer getParentContainer() {
		if (eContainerFeatureID != GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER) return null;
		return (AuditContainer)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetParentContainer(AuditContainer newParentContainer, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newParentContainer, GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setParentContainer(AuditContainer newParentContainer) {
		if (newParentContainer != eInternalContainer() || (eContainerFeatureID != GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER && newParentContainer != null)) {
			if (EcoreUtil.isAncestor(this, newParentContainer))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newParentContainer != null)
				msgs = ((InternalEObject)newParentContainer).eInverseAdd(this, GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS, AuditContainer.class, msgs);
			msgs = basicSetParentContainer(newParentContainer, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER, newParentContainer, newParentContainer));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<AuditRule> getAudits() {
		if (audits == null) {
			audits = new EObjectContainmentWithInverseEList<AuditRule>(AuditRule.class, this, GMFMapPackage.AUDIT_CONTAINER__AUDITS, GMFMapPackage.AUDIT_RULE__CONTAINER);
		}
		return audits;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<AuditContainer> getChildContainers() {
		if (childContainers == null) {
			childContainers = new EObjectContainmentWithInverseEList<AuditContainer>(AuditContainer.class, this, GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS, GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER);
		}
		return childContainers;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetParentContainer((AuditContainer)otherEnd, msgs);
			case GMFMapPackage.AUDIT_CONTAINER__AUDITS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getAudits()).basicAdd(otherEnd, msgs);
			case GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getChildContainers()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER:
				return basicSetParentContainer(null, msgs);
			case GMFMapPackage.AUDIT_CONTAINER__AUDITS:
				return ((InternalEList<?>)getAudits()).basicRemove(otherEnd, msgs);
			case GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS:
				return ((InternalEList<?>)getChildContainers()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER:
				return eInternalContainer().eInverseRemove(this, GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS, AuditContainer.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFMapPackage.AUDIT_CONTAINER__ID:
				return getId();
			case GMFMapPackage.AUDIT_CONTAINER__NAME:
				return getName();
			case GMFMapPackage.AUDIT_CONTAINER__DESCRIPTION:
				return getDescription();
			case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER:
				return getParentContainer();
			case GMFMapPackage.AUDIT_CONTAINER__AUDITS:
				return getAudits();
			case GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS:
				return getChildContainers();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFMapPackage.AUDIT_CONTAINER__ID:
				setId((String)newValue);
				return;
			case GMFMapPackage.AUDIT_CONTAINER__NAME:
				setName((String)newValue);
				return;
			case GMFMapPackage.AUDIT_CONTAINER__DESCRIPTION:
				setDescription((String)newValue);
				return;
			case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER:
				setParentContainer((AuditContainer)newValue);
				return;
			case GMFMapPackage.AUDIT_CONTAINER__AUDITS:
				getAudits().clear();
				getAudits().addAll((Collection<? extends AuditRule>)newValue);
				return;
			case GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS:
				getChildContainers().clear();
				getChildContainers().addAll((Collection<? extends AuditContainer>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFMapPackage.AUDIT_CONTAINER__ID:
				setId(ID_EDEFAULT);
				return;
			case GMFMapPackage.AUDIT_CONTAINER__NAME:
				setName(NAME_EDEFAULT);
				return;
			case GMFMapPackage.AUDIT_CONTAINER__DESCRIPTION:
				setDescription(DESCRIPTION_EDEFAULT);
				return;
			case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER:
				setParentContainer((AuditContainer)null);
				return;
			case GMFMapPackage.AUDIT_CONTAINER__AUDITS:
				getAudits().clear();
				return;
			case GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS:
				getChildContainers().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFMapPackage.AUDIT_CONTAINER__ID:
				return ID_EDEFAULT == null ? id != null : !ID_EDEFAULT.equals(id);
			case GMFMapPackage.AUDIT_CONTAINER__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case GMFMapPackage.AUDIT_CONTAINER__DESCRIPTION:
				return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
			case GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER:
				return getParentContainer() != null;
			case GMFMapPackage.AUDIT_CONTAINER__AUDITS:
				return audits != null && !audits.isEmpty();
			case GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS:
				return childContainers != null && !childContainers.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (id: ");
		result.append(id);
		result.append(", name: ");
		result.append(name);
		result.append(", description: ");
		result.append(description);
		result.append(')');
		return result.toString();
	}

} //AuditContainerImpl
@


1.4
log
@EMF 2.3 M5 and Java 5 cleanup
@
text
@d112 1
a112 1
	protected EList<AuditRule> audits = null;
d122 1
a122 1
	protected EList<AuditContainer> childContainers = null;
@


1.3
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d277 1
a277 1
		@@Override
d354 1
a354 1
		@@Override
@


1.2
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@d112 1
a112 1
	protected EList audits = null;
d122 1
a122 1
	protected EList childContainers = null;
d138 1
d252 1
a252 1
	public EList getAudits() {
d254 1
a254 1
			audits = new EObjectContainmentWithInverseEList(AuditRule.class, this, GMFMapPackage.AUDIT_CONTAINER__AUDITS, GMFMapPackage.AUDIT_RULE__CONTAINER);
d264 1
a264 1
	public EList getChildContainers() {
d266 1
a266 1
			childContainers = new EObjectContainmentWithInverseEList(AuditContainer.class, this, GMFMapPackage.AUDIT_CONTAINER__CHILD_CONTAINERS, GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER);
d276 2
d285 1
a285 1
				return ((InternalEList)getAudits()).basicAdd(otherEnd, msgs);
d287 1
a287 1
				return ((InternalEList)getChildContainers()).basicAdd(otherEnd, msgs);
d297 1
d303 1
a303 1
				return ((InternalEList)getAudits()).basicRemove(otherEnd, msgs);
d305 1
a305 1
				return ((InternalEList)getChildContainers()).basicRemove(otherEnd, msgs);
d315 1
d329 1
d353 2
d371 1
a371 1
				getAudits().addAll((Collection)newValue);
d375 1
a375 1
				getChildContainers().addAll((Collection)newValue);
d386 1
d416 1
d440 1
@


1.1
log
@[rdvorak] #123279 audits definition in gmfmap
@
text
@d220 10
d239 1
a239 1
			msgs = eBasicSetContainer((InternalEObject)newParentContainer, GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER, msgs);
d280 1
a280 1
				return eBasicSetContainer(otherEnd, GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER, msgs);
d297 1
a297 1
				return eBasicSetContainer(null, GMFMapPackage.AUDIT_CONTAINER__PARENT_CONTAINER, msgs);
@

