head	1.9;
access;
symbols
	v20080813-1520:1.9
	v20080722-1827:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080521:1.9
	v20080425-1959:1.9
	v20080417-1610:1.8
	v20080322-0000:1.8
	v20080222-1200:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070520-1200:1.7
	v20070518-1300:1.7
	v20070517-1200:1.7
	v20070504-1000:1.7
	v20070427-0600:1.7
	v20070330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060519-1300:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2008.04.18.14.43.25;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	2e3f4808b38b4567;

1.8
date	2008.03.04.16.50.29;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	5e4d47cd7dd44567;

1.7
date	2007.04.25.08.08.29;	author dstadnik;	state Exp;
branches;
next	1.6;
commitid	7004462f0c7a4567;

1.6
date	2007.03.14.13.00.04;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	128545f7f1cb4567;

1.5
date	2006.10.19.15.21.56;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.07.14.09.29;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.22.22.01.20;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.14.10.11.22;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.13.18.37.47;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.9
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.gmf.gmfgraph.DiagramLabel;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.MappingEntry;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Label Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelMappingImpl#getDiagramLabel <em>Diagram Label</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelMappingImpl#isReadOnly <em>Read Only</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelMappingImpl#getMapEntry <em>Map Entry</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class LabelMappingImpl extends EObjectImpl implements LabelMapping {
	/**
	 * The cached value of the '{@@link #getDiagramLabel() <em>Diagram Label</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDiagramLabel()
	 * @@generated
	 * @@ordered
	 */
	protected DiagramLabel diagramLabel;

	/**
	 * The default value of the '{@@link #isReadOnly() <em>Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean READ_ONLY_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isReadOnly() <em>Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected boolean readOnly = READ_ONLY_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected LabelMappingImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFMapPackage.eINSTANCE.getLabelMapping();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DiagramLabel getDiagramLabel() {
		if (diagramLabel != null && diagramLabel.eIsProxy()) {
			InternalEObject oldDiagramLabel = (InternalEObject)diagramLabel;
			diagramLabel = (DiagramLabel)eResolveProxy(oldDiagramLabel);
			if (diagramLabel != oldDiagramLabel) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFMapPackage.LABEL_MAPPING__DIAGRAM_LABEL, oldDiagramLabel, diagramLabel));
			}
		}
		return diagramLabel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DiagramLabel basicGetDiagramLabel() {
		return diagramLabel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDiagramLabel(DiagramLabel newDiagramLabel) {
		DiagramLabel oldDiagramLabel = diagramLabel;
		diagramLabel = newDiagramLabel;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.LABEL_MAPPING__DIAGRAM_LABEL, oldDiagramLabel, diagramLabel));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isReadOnly() {
		return readOnly;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setReadOnly(boolean newReadOnly) {
		boolean oldReadOnly = readOnly;
		readOnly = newReadOnly;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.LABEL_MAPPING__READ_ONLY, oldReadOnly, readOnly));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public MappingEntry getMapEntry() {
		if (eContainerFeatureID != GMFMapPackage.LABEL_MAPPING__MAP_ENTRY) return null;
		return (MappingEntry)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFMapPackage.LABEL_MAPPING__MAP_ENTRY:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFMapPackage.LABEL_MAPPING__MAP_ENTRY, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFMapPackage.LABEL_MAPPING__MAP_ENTRY:
				return eBasicSetContainer(null, GMFMapPackage.LABEL_MAPPING__MAP_ENTRY, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFMapPackage.LABEL_MAPPING__MAP_ENTRY:
				return eInternalContainer().eInverseRemove(this, GMFMapPackage.MAPPING_ENTRY__LABEL_MAPPINGS, MappingEntry.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFMapPackage.LABEL_MAPPING__DIAGRAM_LABEL:
				if (resolve) return getDiagramLabel();
				return basicGetDiagramLabel();
			case GMFMapPackage.LABEL_MAPPING__READ_ONLY:
				return isReadOnly() ? Boolean.TRUE : Boolean.FALSE;
			case GMFMapPackage.LABEL_MAPPING__MAP_ENTRY:
				return getMapEntry();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFMapPackage.LABEL_MAPPING__DIAGRAM_LABEL:
				setDiagramLabel((DiagramLabel)newValue);
				return;
			case GMFMapPackage.LABEL_MAPPING__READ_ONLY:
				setReadOnly(((Boolean)newValue).booleanValue());
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFMapPackage.LABEL_MAPPING__DIAGRAM_LABEL:
				setDiagramLabel((DiagramLabel)null);
				return;
			case GMFMapPackage.LABEL_MAPPING__READ_ONLY:
				setReadOnly(READ_ONLY_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFMapPackage.LABEL_MAPPING__DIAGRAM_LABEL:
				return diagramLabel != null;
			case GMFMapPackage.LABEL_MAPPING__READ_ONLY:
				return readOnly != READ_ONLY_EDEFAULT;
			case GMFMapPackage.LABEL_MAPPING__MAP_ENTRY:
				return getMapEntry() != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (readOnly: ");
		result.append(readOnly);
		result.append(')');
		return result.toString();
	}

} //LabelMappingImpl
@


1.8
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a14 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a158 31
	public NotificationChain basicSetMapEntry(MappingEntry newMapEntry, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newMapEntry, GMFMapPackage.LABEL_MAPPING__MAP_ENTRY, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setMapEntry(MappingEntry newMapEntry) {
		if (newMapEntry != eInternalContainer() || (eContainerFeatureID != GMFMapPackage.LABEL_MAPPING__MAP_ENTRY && newMapEntry != null)) {
			if (EcoreUtil.isAncestor(this, newMapEntry))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newMapEntry != null)
				msgs = ((InternalEObject)newMapEntry).eInverseAdd(this, GMFMapPackage.MAPPING_ENTRY__LABEL_MAPPINGS, MappingEntry.class, msgs);
			msgs = basicSetMapEntry(newMapEntry, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.LABEL_MAPPING__MAP_ENTRY, newMapEntry, newMapEntry));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d165 1
a165 1
				return basicSetMapEntry((MappingEntry)otherEnd, msgs);
d179 1
a179 1
				return basicSetMapEntry(null, msgs);
a230 3
			case GMFMapPackage.LABEL_MAPPING__MAP_ENTRY:
				setMapEntry((MappingEntry)newValue);
				return;
a248 3
			case GMFMapPackage.LABEL_MAPPING__MAP_ENTRY:
				setMapEntry((MappingEntry)null);
				return;
@


1.7
log
@regenerated
@
text
@d15 1
d160 31
d197 1
a197 1
				return eBasicSetContainer(otherEnd, GMFMapPackage.LABEL_MAPPING__MAP_ENTRY, msgs);
d211 1
a211 1
				return eBasicSetContainer(null, GMFMapPackage.LABEL_MAPPING__MAP_ENTRY, msgs);
d263 3
d284 3
@


1.6
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d44 1
a44 1
	protected DiagramLabel diagramLabel = null;
@


1.5
log
@[161380] Inroduce label mapping subclasses
@
text
@a8 2
import java.util.Collection;

a9 1

a10 4

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EAttribute;
a11 1

a12 1

a14 3

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

a15 1

a17 1

d80 1
d159 1
d175 1
d189 1
d203 1
d222 1
d240 1
d258 1
d276 1
@


1.4
log
@#130715 Use default label text defined in gmfgraph model
@
text
@a41 1
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelMappingImpl#getFeatures <em>Features</em>}</li>
a42 2
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelMappingImpl#getViewPattern <em>View Pattern</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelMappingImpl#getEditPattern <em>Edit Pattern</em>}</li>
a60 10
	 * The cached value of the '{@@link #getFeatures() <em>Features</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFeatures()
	 * @@generated
	 * @@ordered
	 */
	protected EList features = null;

	/**
a80 40
	 * The default value of the '{@@link #getViewPattern() <em>View Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewPattern()
	 * @@generated
	 * @@ordered
	 */
	protected static final String VIEW_PATTERN_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getViewPattern() <em>View Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewPattern()
	 * @@generated
	 * @@ordered
	 */
	protected String viewPattern = VIEW_PATTERN_EDEFAULT;

	/**
	 * The default value of the '{@@link #getEditPattern() <em>Edit Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditPattern()
	 * @@generated
	 * @@ordered
	 */
	protected static final String EDIT_PATTERN_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getEditPattern() <em>Edit Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditPattern()
	 * @@generated
	 * @@ordered
	 */
	protected String editPattern = EDIT_PATTERN_EDEFAULT;

	/**
a140 12
	public EList getFeatures() {
		if (features == null) {
			features = new EObjectResolvingEList(EAttribute.class, this, GMFMapPackage.LABEL_MAPPING__FEATURES);
		}
		return features;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a161 42
	public String getViewPattern() {
		return viewPattern;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setViewPattern(String newViewPattern) {
		String oldViewPattern = viewPattern;
		viewPattern = newViewPattern;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.LABEL_MAPPING__VIEW_PATTERN, oldViewPattern, viewPattern));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getEditPattern() {
		return editPattern;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditPattern(String newEditPattern) {
		String oldEditPattern = editPattern;
		editPattern = newEditPattern;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.LABEL_MAPPING__EDIT_PATTERN, oldEditPattern, editPattern));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a217 2
			case GMFMapPackage.LABEL_MAPPING__FEATURES:
				return getFeatures();
a219 4
			case GMFMapPackage.LABEL_MAPPING__VIEW_PATTERN:
				return getViewPattern();
			case GMFMapPackage.LABEL_MAPPING__EDIT_PATTERN:
				return getEditPattern();
a235 4
			case GMFMapPackage.LABEL_MAPPING__FEATURES:
				getFeatures().clear();
				getFeatures().addAll((Collection)newValue);
				return;
a238 6
			case GMFMapPackage.LABEL_MAPPING__VIEW_PATTERN:
				setViewPattern((String)newValue);
				return;
			case GMFMapPackage.LABEL_MAPPING__EDIT_PATTERN:
				setEditPattern((String)newValue);
				return;
a252 3
			case GMFMapPackage.LABEL_MAPPING__FEATURES:
				getFeatures().clear();
				return;
a255 6
			case GMFMapPackage.LABEL_MAPPING__VIEW_PATTERN:
				setViewPattern(VIEW_PATTERN_EDEFAULT);
				return;
			case GMFMapPackage.LABEL_MAPPING__EDIT_PATTERN:
				setEditPattern(EDIT_PATTERN_EDEFAULT);
				return;
a268 2
			case GMFMapPackage.LABEL_MAPPING__FEATURES:
				return features != null && !features.isEmpty();
a270 4
			case GMFMapPackage.LABEL_MAPPING__VIEW_PATTERN:
				return VIEW_PATTERN_EDEFAULT == null ? viewPattern != null : !VIEW_PATTERN_EDEFAULT.equals(viewPattern);
			case GMFMapPackage.LABEL_MAPPING__EDIT_PATTERN:
				return EDIT_PATTERN_EDEFAULT == null ? editPattern != null : !EDIT_PATTERN_EDEFAULT.equals(editPattern);
a287 4
		result.append(", viewPattern: ");
		result.append(viewPattern);
		result.append(", editPattern: ");
		result.append(editPattern);
@


1.3
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@a42 1
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelMappingImpl#getText <em>Text</em>}</li>
a43 1
 *   <li>{@@link org.eclipse.gmf.mappings.impl.LabelMappingImpl#getDefaultText <em>Default Text</em>}</li>
a73 20
	 * The default value of the '{@@link #getText() <em>Text</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getText()
	 * @@generated
	 * @@ordered
	 */
	protected static final String TEXT_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getText() <em>Text</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getText()
	 * @@generated
	 * @@ordered
	 */
	protected String text = TEXT_EDEFAULT;

	/**
a93 20
	 * The default value of the '{@@link #getDefaultText() <em>Default Text</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDefaultText()
	 * @@generated
	 * @@ordered
	 */
	protected static final String DEFAULT_TEXT_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getDefaultText() <em>Default Text</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDefaultText()
	 * @@generated
	 * @@ordered
	 */
	protected String defaultText = DEFAULT_TEXT_EDEFAULT;

	/**
a205 21
	public String getText() {
		return text;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setText(String newText) {
		String oldText = text;
		text = newText;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.LABEL_MAPPING__TEXT, oldText, text));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a226 21
	public String getDefaultText() {
		return defaultText;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDefaultText(String newDefaultText) {
		String oldDefaultText = defaultText;
		defaultText = newDefaultText;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.LABEL_MAPPING__DEFAULT_TEXT, oldDefaultText, defaultText));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a326 2
			case GMFMapPackage.LABEL_MAPPING__TEXT:
				return getText();
a328 2
			case GMFMapPackage.LABEL_MAPPING__DEFAULT_TEXT:
				return getDefaultText();
a352 3
			case GMFMapPackage.LABEL_MAPPING__TEXT:
				setText((String)newValue);
				return;
a355 3
			case GMFMapPackage.LABEL_MAPPING__DEFAULT_TEXT:
				setDefaultText((String)newValue);
				return;
a378 3
			case GMFMapPackage.LABEL_MAPPING__TEXT:
				setText(TEXT_EDEFAULT);
				return;
a381 3
			case GMFMapPackage.LABEL_MAPPING__DEFAULT_TEXT:
				setDefaultText(DEFAULT_TEXT_EDEFAULT);
				return;
a402 2
			case GMFMapPackage.LABEL_MAPPING__TEXT:
				return TEXT_EDEFAULT == null ? text != null : !TEXT_EDEFAULT.equals(text);
a404 2
			case GMFMapPackage.LABEL_MAPPING__DEFAULT_TEXT:
				return DEFAULT_TEXT_EDEFAULT == null ? defaultText != null : !DEFAULT_TEXT_EDEFAULT.equals(defaultText);
d424 1
a424 3
		result.append(" (text: ");
		result.append(text);
		result.append(", readOnly: ");
a425 2
		result.append(", defaultText: ");
		result.append(defaultText);
@


1.2
log
@#127461 add label diagram element in gmfgraph model
@
text
@d13 2
d32 2
d48 1
d54 1
a54 1
public abstract class LabelMappingImpl extends EObjectImpl implements LabelMapping {
d353 51
d421 2
d513 2
@


1.1
log
@#127461 Support multiple labels definition in the mapping model
@
text
@d18 2
d25 2
d37 1
d51 10
d193 38
d350 3
d376 3
d409 3
d441 2
@

