head	1.26;
access;
symbols
	v20080813-1520:1.26
	v20080722-1827:1.26
	v20080716-1642:1.26
	R2_1_maintenance:1.26.0.2
	Root_R2_1_maintenance:1.26
	R2_1_0:1.26
	v20080521:1.26
	v20080425-1959:1.26
	v20080417-1610:1.25
	v20080322-0000:1.25
	v20080222-1200:1.25
	v20070809-0000:1.25
	R2_0_maintenance:1.25.0.2
	R2_0:1.25
	R4_20:1.25
	v20070621-0000:1.25
	RC3_20:1.25
	v20070608-1300:1.25
	v20070605-1400:1.25
	v20070601-1400:1.25
	v20070525-1500:1.25
	v20070520-1200:1.25
	v20070518-1300:1.24
	v20070517-1200:1.24
	v20070504-1000:1.24
	v20070427-0600:1.23
	v20070330-1300:1.22
	v20070322-1100:1.22
	v20060316-0600:1.22
	v20070208-1800:1.21
	M4_20:1.21
	v20061214-0000:1.21
	M3_20:1.21
	v20061117-0800:1.21
	v20061013-1330:1.20
	M1_20:1.19
	v20060904-1500:1.19
	v20060713-1700:1.19
	R1_0_maintenance:1.19.0.2
	R1_0:1.19
	v20060627-1200:1.19
	v20060626-1420:1.19
	v20060616-1200:1.19
	v20060609-1400:1.19
	v20060531-1730:1.18
	v20060530-1930:1.18
	v20060519-1300:1.18
	v20060519-0800:1.18
	v20060512-1000:1.17
	I20060512-1000:1.17
	I20060505-1400:1.15
	I20060428-1300:1.15
	I20060424-0500:1.14
	I20060424-0300:1.14
	M6_10:1.14
	I20060407-1200:1.14
	I20060331-1000:1.14
	I20060324-0300:1.14
	I20060317-1300:1.14
	I20060317-1200:1.14
	I20060316-1300:1.14
	I20060309-1300:1.14
	M5_10:1.14
	S20060303-1600:1.14
	I20060227-1730:1.12
	I20060216-1945:1.10
	I20060210-1715:1.9
	I20060209-1815:1.9
	I20060203-0830:1.9
	I20060129-1145:1.9
	I20060127-0900:1.9
	I20060120-1530:1.9
	I20060113-1700:1.9
	M4_10:1.9
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051208-2000:1.7
	I20051201-1800:1.5
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.26
date	2008.04.18.11.35.41;	author atikhomirov;	state Exp;
branches;
next	1.25;
commitid	5d934808878b4567;

1.25
date	2007.05.18.21.17.29;	author atikhomirov;	state Exp;
branches;
next	1.24;
commitid	2624464e17e74567;

1.24
date	2007.04.27.11.23.42;	author dstadnik;	state Exp;
branches;
next	1.23;
commitid	109d4631dd3c4567;

1.23
date	2007.04.26.15.39.50;	author dstadnik;	state Exp;
branches;
next	1.22;
commitid	38914630c7c54567;

1.22
date	2007.03.14.13.00.05;	author atikhomirov;	state Exp;
branches;
next	1.21;
commitid	128545f7f1cb4567;

1.21
date	2006.10.19.15.21.56;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.09.28.18.20.40;	author radvorak;	state Exp;
branches;
next	1.19;

1.19
date	2006.06.02.11.43.06;	author radvorak;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.14.18.06.32;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.11.09.42.05;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.10.15.12.33;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.25.19.15.49;	author radvorak;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.03.18.32.33;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.03.11.36.26;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.23.15.45.31;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.22.22.01.20;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.13.18.37.47;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.10.20.40.09;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.10.18.35.28;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.07.19.23.17;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.06.22.21.24;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.29.18.33.02;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.20.14.07.16;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.18.10.58.31;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.26.14.26.27;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.30.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.26
log
@[227505] ValueExpression and FeatureSeqInitializer: updated revision year, old model exposed as dynamic package.
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.impl.EFactoryImpl;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.eclipse.gmf.mappings.*;

import org.eclipse.gmf.mappings.AuditContainer;
import org.eclipse.gmf.mappings.AuditRule;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.ChildReference;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.Constraint;
import org.eclipse.gmf.mappings.FeatureSeqInitializer;
import org.eclipse.gmf.mappings.FeatureValueSpec;
import org.eclipse.gmf.mappings.GMFMapFactory;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.LinkConstraints;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.Mapping;
import org.eclipse.gmf.mappings.NodeMapping;
import org.eclipse.gmf.mappings.Severity;
import org.eclipse.gmf.mappings.TopNodeReference;
import org.eclipse.gmf.mappings.ValueExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @@generated
 */
public class GMFMapFactoryImpl extends EFactoryImpl implements GMFMapFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static GMFMapFactory init() {
		try {
			GMFMapFactory theGMFMapFactory = (GMFMapFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/2008/mappings"); 
			if (theGMFMapFactory != null) {
				return theGMFMapFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new GMFMapFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GMFMapFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case GMFMapPackage.MAPPING: return createMapping();
			case GMFMapPackage.CHILD_REFERENCE: return createChildReference();
			case GMFMapPackage.TOP_NODE_REFERENCE: return createTopNodeReference();
			case GMFMapPackage.NODE_MAPPING: return createNodeMapping();
			case GMFMapPackage.COMPARTMENT_MAPPING: return createCompartmentMapping();
			case GMFMapPackage.LINK_MAPPING: return createLinkMapping();
			case GMFMapPackage.CANVAS_MAPPING: return createCanvasMapping();
			case GMFMapPackage.LABEL_MAPPING: return createLabelMapping();
			case GMFMapPackage.FEATURE_LABEL_MAPPING: return createFeatureLabelMapping();
			case GMFMapPackage.DESIGN_LABEL_MAPPING: return createDesignLabelMapping();
			case GMFMapPackage.CONSTRAINT: return createConstraint();
			case GMFMapPackage.LINK_CONSTRAINTS: return createLinkConstraints();
			case GMFMapPackage.VALUE_EXPRESSION: return createValueExpression();
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER: return createFeatureSeqInitializer();
			case GMFMapPackage.FEATURE_VALUE_SPEC: return createFeatureValueSpec();
			case GMFMapPackage.REFERENCE_NEW_ELEMENT_SPEC: return createReferenceNewElementSpec();
			case GMFMapPackage.AUDIT_CONTAINER: return createAuditContainer();
			case GMFMapPackage.AUDIT_RULE: return createAuditRule();
			case GMFMapPackage.DOMAIN_ELEMENT_TARGET: return createDomainElementTarget();
			case GMFMapPackage.DOMAIN_ATTRIBUTE_TARGET: return createDomainAttributeTarget();
			case GMFMapPackage.DIAGRAM_ELEMENT_TARGET: return createDiagramElementTarget();
			case GMFMapPackage.NOTATION_ELEMENT_TARGET: return createNotationElementTarget();
			case GMFMapPackage.METRIC_CONTAINER: return createMetricContainer();
			case GMFMapPackage.METRIC_RULE: return createMetricRule();
			case GMFMapPackage.AUDITED_METRIC_TARGET: return createAuditedMetricTarget();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object createFromString(EDataType eDataType, String initialValue) {
		switch (eDataType.getClassifierID()) {
			case GMFMapPackage.LABEL_TEXT_ACCESS_METHOD:
				return createLabelTextAccessMethodFromString(eDataType, initialValue);
			case GMFMapPackage.SEVERITY:
				return createSeverityFromString(eDataType, initialValue);
			case GMFMapPackage.LANGUAGE:
				return createLanguageFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String convertToString(EDataType eDataType, Object instanceValue) {
		switch (eDataType.getClassifierID()) {
			case GMFMapPackage.LABEL_TEXT_ACCESS_METHOD:
				return convertLabelTextAccessMethodToString(eDataType, instanceValue);
			case GMFMapPackage.SEVERITY:
				return convertSeverityToString(eDataType, instanceValue);
			case GMFMapPackage.LANGUAGE:
				return convertLanguageToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NodeMapping createNodeMapping() {
		NodeMappingImpl nodeMapping = new NodeMappingImpl();
		return nodeMapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CompartmentMapping createCompartmentMapping() {
		CompartmentMappingImpl compartmentMapping = new CompartmentMappingImpl();
		return compartmentMapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LinkMapping createLinkMapping() {
		LinkMappingImpl linkMapping = new LinkMappingImpl();
		return linkMapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CanvasMapping createCanvasMapping() {
		CanvasMappingImpl canvasMapping = new CanvasMappingImpl();
		return canvasMapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelMapping createLabelMapping() {
		LabelMappingImpl labelMapping = new LabelMappingImpl();
		return labelMapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FeatureLabelMapping createFeatureLabelMapping() {
		FeatureLabelMappingImpl featureLabelMapping = new FeatureLabelMappingImpl();
		return featureLabelMapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DesignLabelMapping createDesignLabelMapping() {
		DesignLabelMappingImpl designLabelMapping = new DesignLabelMappingImpl();
		return designLabelMapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Mapping createMapping() {
		MappingImpl mapping = new MappingImpl();
		return mapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ChildReference createChildReference() {
		ChildReferenceImpl childReference = new ChildReferenceImpl();
		return childReference;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public TopNodeReference createTopNodeReference() {
		TopNodeReferenceImpl topNodeReference = new TopNodeReferenceImpl();
		return topNodeReference;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Constraint createConstraint() {
		ConstraintImpl constraint = new ConstraintImpl();
		return constraint;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LinkConstraints createLinkConstraints() {
		LinkConstraintsImpl linkConstraints = new LinkConstraintsImpl();
		return linkConstraints;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ValueExpression createValueExpression() {
		ValueExpressionImpl valueExpression = new ValueExpressionImpl();
		return valueExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FeatureSeqInitializer createFeatureSeqInitializer() {
		FeatureSeqInitializerImpl featureSeqInitializer = new FeatureSeqInitializerImpl();
		return featureSeqInitializer;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FeatureValueSpec createFeatureValueSpec() {
		FeatureValueSpecImpl featureValueSpec = new FeatureValueSpecImpl();
		return featureValueSpec;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ReferenceNewElementSpec createReferenceNewElementSpec() {
		ReferenceNewElementSpecImpl referenceNewElementSpec = new ReferenceNewElementSpecImpl();
		return referenceNewElementSpec;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public AuditContainer createAuditContainer() {
		AuditContainerImpl auditContainer = new AuditContainerImpl();
		return auditContainer;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public AuditRule createAuditRule() {
		AuditRuleImpl auditRule = new AuditRuleImpl();
		return auditRule;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DomainElementTarget createDomainElementTarget() {
		DomainElementTargetImpl domainElementTarget = new DomainElementTargetImpl();
		return domainElementTarget;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DomainAttributeTarget createDomainAttributeTarget() {
		DomainAttributeTargetImpl domainAttributeTarget = new DomainAttributeTargetImpl();
		return domainAttributeTarget;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DiagramElementTarget createDiagramElementTarget() {
		DiagramElementTargetImpl diagramElementTarget = new DiagramElementTargetImpl();
		return diagramElementTarget;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotationElementTarget createNotationElementTarget() {
		NotationElementTargetImpl notationElementTarget = new NotationElementTargetImpl();
		return notationElementTarget;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public MetricContainer createMetricContainer() {
		MetricContainerImpl metricContainer = new MetricContainerImpl();
		return metricContainer;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public MetricRule createMetricRule() {
		MetricRuleImpl metricRule = new MetricRuleImpl();
		return metricRule;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public AuditedMetricTarget createAuditedMetricTarget() {
		AuditedMetricTargetImpl auditedMetricTarget = new AuditedMetricTargetImpl();
		return auditedMetricTarget;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelTextAccessMethod createLabelTextAccessMethodFromString(EDataType eDataType, String initialValue) {
		LabelTextAccessMethod result = LabelTextAccessMethod.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertLabelTextAccessMethodToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Severity createSeverityFromString(EDataType eDataType, String initialValue) {
		Severity result = Severity.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertSeverityToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Language createLanguageFromString(EDataType eDataType, String initialValue) {
		Language result = Language.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertLanguageToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GMFMapPackage getGMFMapPackage() {
		return (GMFMapPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@deprecated
	 * @@generated
	 */
	@@Deprecated
	public static GMFMapPackage getPackage() {
		return GMFMapPackage.eINSTANCE;
	}

} //GMFMapFactoryImpl
@


1.25
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d51 1
a51 1
			GMFMapFactory theGMFMapFactory = (GMFMapFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/2006/mappings"); 
@


1.24
log
@combine label text access methods
@
text
@d51 1
a51 1
			GMFMapFactory theGMFMapFactory = (GMFMapFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/2005/mappings/2.0"); 
@


1.23
log
@additional methods to produce label text and parse user input
@
text
@d118 2
a119 4
			case GMFMapPackage.LABEL_VIEW_METHOD:
				return createLabelViewMethodFromString(eDataType, initialValue);
			case GMFMapPackage.LABEL_EDIT_METHOD:
				return createLabelEditMethodFromString(eDataType, initialValue);
d137 2
a138 4
			case GMFMapPackage.LABEL_VIEW_METHOD:
				return convertLabelViewMethodToString(eDataType, instanceValue);
			case GMFMapPackage.LABEL_EDIT_METHOD:
				return convertLabelEditMethodToString(eDataType, instanceValue);
d403 2
a404 2
	public LabelViewMethod createLabelViewMethodFromString(EDataType eDataType, String initialValue) {
		LabelViewMethod result = LabelViewMethod.get(initialValue);
d414 1
a414 21
	public String convertLabelViewMethodToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelEditMethod createLabelEditMethodFromString(EDataType eDataType, String initialValue) {
		LabelEditMethod result = LabelEditMethod.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertLabelEditMethodToString(EDataType eDataType, Object instanceValue) {
@


1.22
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d118 4
d139 4
d407 40
@


1.21
log
@[161380] Inroduce label mapping subclasses
@
text
@d77 1
d115 1
d132 1
d449 1
@


1.20
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
@
text
@d87 2
d196 20
@


1.19
log
@#145042 Introduce expression Language enumeration into gmfmap, gfmgen models  instead of plain text attribute
@
text
@d51 1
a51 1
			GMFMapFactory theGMFMapFactory = (GMFMapFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/2005/mappings"); 
d92 1
d274 10
@


1.18
log
@overriding recent changes introduced (along with fixing #133836) in GMFMap model, as it's merely a 'shortcut', quite frequent though. Still, adding few new concepts just for the sake of single usecase (I do admit it's popular) seems excessive to me.
GMFMap kept the same as old (no new notions introduced), GMFGraph got generalization from DiagramLabel to DiagramNode to make it possible to use DiagramLabels for NodeMappings (thus, it's possible to detect such nodes in the DGMT)
Tests added to make sure we generate correct genModel for both cases.
@
text
@d115 2
d131 2
d383 20
@


1.17
log
@revert to gmfmap model compatibility
@
text
@d31 1
a82 1
			case GMFMapPackage.LABEL_NODE_MAPPING: return createLabelNodeMapping();
d139 10
a218 20
	public NodeMapping createNodeMapping() {
		NodeMappingImpl nodeMapping = new NodeMappingImpl();
		return nodeMapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelNodeMapping createLabelNodeMapping() {
		LabelNodeMappingImpl labelNodeMapping = new LabelNodeMappingImpl();
		return labelNodeMapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
@


1.16
log
@#133836 Creating a child node without a label causes error
@
text
@d81 1
a81 1
			case GMFMapPackage.SHAPE_NODE_MAPPING: return createShapeNodeMapping();
d209 3
a211 3
	public ShapeNodeMapping createShapeNodeMapping() {
		ShapeNodeMappingImpl shapeNodeMapping = new ShapeNodeMappingImpl();
		return shapeNodeMapping;
@


1.15
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@a30 1
import org.eclipse.gmf.mappings.NodeMapping;
d81 2
a82 1
			case GMFMapPackage.NODE_MAPPING: return createNodeMapping();
a138 10
	public NodeMapping createNodeMapping() {
		NodeMappingImpl nodeMapping = new NodeMappingImpl();
		return nodeMapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d209 20
@


1.14
log
@[rdvorak] #114196 Allow for the definition of diagram validation rules
@
text
@d95 1
d299 10
@


1.13
log
@#130009 Enable audit rules on diagram (notation model) elements in gmfmap model
@
text
@d97 3
d318 30
@


1.12
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d15 2
d94 3
d285 30
@


1.11
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@a14 2
import org.eclipse.gmf.mappings.*;

d18 1
a18 1
import org.eclipse.gmf.mappings.ChildNodeMapping;
d25 1
d31 1
d78 2
a80 1
			case GMFMapPackage.CHILD_NODE_MAPPING: return createChildNodeMapping();
a139 10
	public ChildNodeMapping createChildNodeMapping() {
		ChildNodeMappingImpl childNodeMapping = new ChildNodeMappingImpl();
		return childNodeMapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d190 20
@


1.10
log
@#127461 Support multiple labels definition in the mapping model
@
text
@d83 1
a83 2
			case GMFMapPackage.NODE_LABEL_MAPPING: return createNodeLabelMapping();
			case GMFMapPackage.LINK_LABEL_MAPPING: return createLinkLabelMapping();
a102 2
			case GMFMapPackage.LINK_LABEL_ALIGNMENT:
				return createLinkLabelAlignmentFromString(eDataType, initialValue);
a116 2
			case GMFMapPackage.LINK_LABEL_ALIGNMENT:
				return convertLinkLabelAlignmentToString(eDataType, instanceValue);
d179 3
a181 13
	public NodeLabelMapping createNodeLabelMapping() {
		NodeLabelMappingImpl nodeLabelMapping = new NodeLabelMappingImpl();
		return nodeLabelMapping;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LinkLabelMapping createLinkLabelMapping() {
		LinkLabelMappingImpl linkLabelMapping = new LinkLabelMappingImpl();
		return linkLabelMapping;
a268 20
	public LinkLabelAlignment createLinkLabelAlignmentFromString(EDataType eDataType, String initialValue) {
		LinkLabelAlignment result = LinkLabelAlignment.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertLinkLabelAlignmentToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
@


1.9
log
@#114197 - tooling definition in place
@
text
@d15 2
d83 2
d104 2
d120 2
d184 20
d284 20
@


1.8
log
@[rdvorak] #123279 audits definition in gmfmap
@
text
@a20 1
import org.eclipse.gmf.mappings.CreationTool;
a27 1
import org.eclipse.gmf.mappings.NewActionTool;
a29 1
import org.eclipse.gmf.mappings.ToolGroup;
d75 1
a80 4
			case GMFMapPackage.MAPPING: return createMapping();
			case GMFMapPackage.TOOL_GROUP: return createToolGroup();
			case GMFMapPackage.CREATION_TOOL: return createCreationTool();
			case GMFMapPackage.NEW_ACTION_TOOL: return createNewActionTool();
a185 30
	public ToolGroup createToolGroup() {
		ToolGroupImpl toolGroup = new ToolGroupImpl();
		return toolGroup;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CreationTool createCreationTool() {
		CreationToolImpl creationTool = new CreationToolImpl();
		return creationTool;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NewActionTool createNewActionTool() {
		NewActionToolImpl newActionTool = new NewActionToolImpl();
		return newActionTool;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
@


1.7
log
@#119709
Adding Compartment mapping
@
text
@d10 1
d12 1
d14 3
a16 2
import org.eclipse.gmf.mappings.*;

d19 1
d31 1
d43 19
d92 2
d104 28
d272 40
@


1.6
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@d12 2
d56 1
d98 10
@


1.5
log
@[rdvorak] #117743 support for link creation constraints
@
text
@a11 2
import org.eclipse.gmf.mappings.*;

d14 4
d20 1
d23 1
d25 2
d57 3
d125 30
@


1.4
log
@[rdvorak] #112773 specify init expressions while relating diagram elements with domain
@
text
@d52 1
d126 10
@


1.3
log
@[rdvorak] #112505 constraint specification in gmfmap
@
text
@d53 2
d135 20
@


1.2
log
@[ashatalin] Should be possible to specify editable feature and domain element for child nodes.
@
text
@d51 2
d113 20
@


1.1
log
@*** empty log message ***
@
text
@d12 2
@

