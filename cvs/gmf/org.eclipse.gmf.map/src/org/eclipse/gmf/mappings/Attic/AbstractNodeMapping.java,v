head	1.11;
access;
symbols
	v20080813-1520:1.11
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	I20060216-1945:1.9
	I20060210-1715:1.8
	I20060209-1815:1.7
	I20060203-0830:1.7
	I20060129-1145:1.7
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2006.02.23.15.45.31;	author atikhomirov;	state dead;
branches;
next	1.10;

1.10
date	2006.02.22.22.01.21;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.13.18.37.47;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.10.15.21.15;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.10.20.40.09;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.10.19.01.15;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.07.19.23.17;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.06.22.21.24;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.30.12.49.29;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.29.21.15.32;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.25.13.52.44;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.11
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings;

import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Abstract Node Mapping</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getChildMappings <em>Child Mappings</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getCompartmentMappings <em>Compartment Mappings</em>}</li>
 * </ul>
 * </p>
 *
 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getAbstractNodeMapping()
 * @@model abstract="true"
 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='not (domainMetaElement.oclIsUndefined()  and containmentFeature.oclIsUndefined())' description='Either domain meta element or containment feature must be set in node mapping'"
 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='not domainMetaElement.oclIsUndefined() implies containmentFeature.oclIsUndefined() or containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement)' description='\'Domain Element\' must be the same or extend the type referenced by \'Containment Feature\''"
 * @@generated
 */
public interface AbstractNodeMapping extends MappingEntry, MenuOwner, ToolOwner, AppearanceSteward {
	/**
	 * Returns the value of the '<em><b>Child Mappings</b></em>' containment reference list.
	 * The list contents are of type {@@link org.eclipse.gmf.mappings.ChildNodeMapping}.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getParentNode <em>Parent Node</em>}'.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Child Mappings</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Child Mappings</em>' containment reference list.
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getAbstractNodeMapping_ChildMappings()
	 * @@see org.eclipse.gmf.mappings.ChildNodeMapping#getParentNode
	 * @@model type="org.eclipse.gmf.mappings.ChildNodeMapping" opposite="parentNode" containment="true"
	 * @@generated
	 */
	EList getChildMappings();

	/**
	 * Returns the value of the '<em><b>Compartment Mappings</b></em>' containment reference list.
	 * The list contents are of type {@@link org.eclipse.gmf.mappings.CompartmentMapping}.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.mappings.CompartmentMapping#getParentNodeMapping <em>Parent Node Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Compartment Mappings</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Compartment Mappings</em>' containment reference list.
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getAbstractNodeMapping_CompartmentMappings()
	 * @@see org.eclipse.gmf.mappings.CompartmentMapping#getParentNodeMapping
	 * @@model type="org.eclipse.gmf.mappings.CompartmentMapping" opposite="parentNodeMapping" containment="true"
	 * @@generated
	 */
	EList getCompartmentMappings();

} // AbstractNodeMapping
@


1.10
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@@


1.9
log
@#127461 Support multiple labels definition in the mapping model
@
text
@a9 1
import org.eclipse.emf.ecore.EAttribute;
a18 2
 *   <li>{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getEditFeature <em>Edit Feature</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getLabelMappings <em>Label Mappings</em>}</li>
a31 44
	 * Returns the value of the '<em><b>Edit Feature</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Edit Feature</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Edit Feature</em>' reference.
	 * @@see #setEditFeature(EAttribute)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getAbstractNodeMapping_EditFeature()
	 * @@model annotation="http://www.eclipse.org/gmf/2005/constraints ocl='not editFeature.oclIsUndefined() implies getDomainContext().oclIsUndefined() or editFeature.eContainingClass.isSuperTypeOf(getDomainContext())' description='The Edit Feature must be owned by the domain context EClass or its super type'"
	 * @@generated
	 */
	EAttribute getEditFeature();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getEditFeature <em>Edit Feature</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Edit Feature</em>' reference.
	 * @@see #getEditFeature()
	 * @@generated
	 */
	void setEditFeature(EAttribute value);

	/**
	 * Returns the value of the '<em><b>Label Mappings</b></em>' containment reference list.
	 * The list contents are of type {@@link org.eclipse.gmf.mappings.NodeLabelMapping}.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.mappings.NodeLabelMapping#getNodeMapping <em>Node Mapping</em>}'.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Label Mappings</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Label Mappings</em>' containment reference list.
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getAbstractNodeMapping_LabelMappings()
	 * @@see org.eclipse.gmf.mappings.NodeLabelMapping#getNodeMapping
	 * @@model type="org.eclipse.gmf.mappings.NodeLabelMapping" opposite="nodeMapping" containment="true"
	 * @@generated
	 */
	EList getLabelMappings();

	/**
@


1.8
log
@[rdvorak] #127256 Adjust gmfmap metamodel annotation constraints to the latest changes
@
text
@d21 1
d61 18
@


1.7
log
@#114197 - tooling definition in place
@
text
@d28 2
d44 1
a44 1
	 * @@model annotation="http://www.eclipse.org/gmf/2005/constraints ocl='editFeature.oclIsUndefined() or (not domainMetaElement.oclIsUndefined() and editFeature.eContainingClass.isSuperTypeOf(domainMetaElement)) or containmentFeature.eType.oclAsType(ecore::EClass).eAllAttributes->includes(editFeature)'"
@


1.6
log
@Method renamed. Clearly (hah :) express intention of the method - it's merely describes surroundings/location of the element in the domain, rather then represent a metaClass
@
text
@a10 3
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
a19 4
 *   <li>{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getDomainMetaElement <em>Domain Meta Element</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getDomainSpecialization <em>Domain Specialization</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getDomainInitializer <em>Domain Initializer</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getContainmentFeature <em>Containment Feature</em>}</li>
a22 1
 *   <li>{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getTool <em>Tool</em>}</li>
a27 1
 *        annotation="http://www.eclipse.org/emf/2004/EmfaticAnnotationMap constraints='http://www.eclipse.org/gmf/2005/constraints' constraintsMeta='http://www.eclipse.org/gmf/2005/constraints/meta'"
d30 1
a30 107
public interface AbstractNodeMapping extends EObject {
	/**
	 * Returns the value of the '<em><b>Domain Meta Element</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Domain Meta Element</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Domain Meta Element</em>' reference.
	 * @@see #setDomainMetaElement(EClass)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getAbstractNodeMapping_DomainMetaElement()
	 * @@model
	 * @@generated
	 */
	EClass getDomainMetaElement();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getDomainMetaElement <em>Domain Meta Element</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Domain Meta Element</em>' reference.
	 * @@see #getDomainMetaElement()
	 * @@generated
	 */
	void setDomainMetaElement(EClass value);

	/**
	 * Returns the value of the '<em><b>Domain Specialization</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Specializes further the domain meta element EClass associated with this mapping and should be evaluated in this EClass context
	 * <!-- end-model-doc -->
	 * @@return the value of the '<em>Domain Specialization</em>' containment reference.
	 * @@see #setDomainSpecialization(Constraint)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getAbstractNodeMapping_DomainSpecialization()
	 * @@model containment="true"
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints/meta def='context' ocl='self.getDomainContext()'"
	 * @@generated
	 */
	Constraint getDomainSpecialization();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getDomainSpecialization <em>Domain Specialization</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Domain Specialization</em>' containment reference.
	 * @@see #getDomainSpecialization()
	 * @@generated
	 */
	void setDomainSpecialization(Constraint value);

	/**
	 * Returns the value of the '<em><b>Domain Initializer</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Initializer for the domain model element associated with mapping
	 * <!-- end-model-doc -->
	 * @@return the value of the '<em>Domain Initializer</em>' containment reference.
	 * @@see #setDomainInitializer(ElementInitializer)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getAbstractNodeMapping_DomainInitializer()
	 * @@model containment="true"
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='let i : FeatureSeqInitializer = domainInitializer.oclAsType( FeatureSeqInitializer) in i.oclIsUndefined() or i.initializers.feature.eContainingClass->forAll(c|c.isSuperTypeOf(domainMetaElement))'"
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints/meta def='context' ocl='self.getDomainContext()'"
	 * @@generated
	 */
	ElementInitializer getDomainInitializer();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getDomainInitializer <em>Domain Initializer</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Domain Initializer</em>' containment reference.
	 * @@see #getDomainInitializer()
	 * @@generated
	 */
	void setDomainInitializer(ElementInitializer value);

	/**
	 * Returns the value of the '<em><b>Containment Feature</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Containment Feature</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Containment Feature</em>' reference.
	 * @@see #setContainmentFeature(EReference)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getAbstractNodeMapping_ContainmentFeature()
	 * @@model annotation="http://www.eclipse.org/gmf/2005/constraints ocl='containmentFeature.containment'"
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='domainMetaElement.oclIsUndefined() or containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement)'"
	 * @@generated
	 */
	EReference getContainmentFeature();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getContainmentFeature <em>Containment Feature</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Containment Feature</em>' reference.
	 * @@see #getContainmentFeature()
	 * @@generated
	 */
	void setContainmentFeature(EReference value);

a92 33
	/**
	 * Returns the value of the '<em><b>Tool</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Way to create the node
	 * <!-- end-model-doc -->
	 * @@return the value of the '<em>Tool</em>' containment reference.
	 * @@see #setTool(Tool)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getAbstractNodeMapping_Tool()
	 * @@model containment="true"
	 * @@generated
	 */
	Tool getTool();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getTool <em>Tool</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Tool</em>' containment reference.
	 * @@see #getTool()
	 * @@generated
	 */
	void setTool(Tool value);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@model kind="operation"
	 * @@generated
	 */
	EClass getDomainContext();

@


1.5
log
@#119709
Adding Compartment mapping
@
text
@d39 1
a39 1
public interface AbstractNodeMapping extends EObject{
d77 1
a77 1
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints/meta def='context' ocl='if domainMetaElement.oclIsUndefined() then containmentFeature.eContainingClass else domainMetaElement endif'"
d104 1
a104 1
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints/meta def='context' ocl='if domainMetaElement.oclIsUndefined() then containmentFeature.eContainingClass else domainMetaElement endif'"
d239 1
a239 1
	EClass getDomainMetaClass();
@


1.4
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@d29 1
d191 18
@


1.3
log
@Adding method to get DomainElementMetaClass for the transformation code.
@
text
@a9 1

a14 2
import org.eclipse.gmf.diadef.Node;

a22 1
 *   <li>{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getDiagramNode <em>Diagram Node</em>}</li>
d29 1
a39 26
	 * Returns the value of the '<em><b>Diagram Node</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Diagram Node</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Diagram Node</em>' reference.
	 * @@see #setDiagramNode(Node)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getAbstractNodeMapping_DiagramNode()
	 * @@model required="true"
	 * @@generated
	 */
	Node getDiagramNode();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getDiagramNode <em>Diagram Node</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Diagram Node</em>' reference.
	 * @@see #getDiagramNode()
	 * @@generated
	 */
	void setDiagramNode(Node value);

	/**
d190 25
@


1.2
log
@domainMetaElement feature should be optional.
@
text
@d218 8
@


1.1
log
@#118053 update models
@
text
@d41 1
a41 1
public interface AbstractNodeMapping extends EObject {
d79 1
a79 1
	 * @@model required="true"
@

