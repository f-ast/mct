head	1.7;
access;
symbols
	v20080813-1520:1.7
	v20080722-1827:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080521:1.7
	v20080425-1959:1.7
	v20080417-1610:1.6
	v20080322-0000:1.6
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070520-1200:1.4
	v20070518-1300:1.4
	v20070517-1200:1.4
	v20070504-1000:1.4
	v20070427-0600:1.4
	v20070330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070208-1800:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.3
	M1_20:1.3
	v20060904-1500:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060519-1300:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2008.04.18.14.43.25;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	2e3f4808b38b4567;

1.6
date	2008.03.04.16.50.29;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	5e4d47cd7dd44567;

1.5
date	2008.03.03.17.45.08;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	160e47cc39234567;

1.4
date	2007.03.14.13.00.05;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	128545f7f1cb4567;

1.3
date	2006.02.23.15.45.31;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.10.20.40.09;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.07.19.23.17;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.gmfgraph.Compartment;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Compartment Mapping</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.mappings.CompartmentMapping#getCompartment <em>Compartment</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.CompartmentMapping#getParentNode <em>Parent Node</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.CompartmentMapping#getChildren <em>Children</em>}</li>
 * </ul>
 * </p>
 *
 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getCompartmentMapping()
 * @@model
 * @@generated
 */
public interface CompartmentMapping extends EObject {
	/**
	 * Returns the value of the '<em><b>Compartment</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Compartment</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Compartment</em>' reference.
	 * @@see #setCompartment(Compartment)
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getCompartmentMapping_Compartment()
	 * @@model required="true"
	 * @@generated
	 */
	Compartment getCompartment();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.mappings.CompartmentMapping#getCompartment <em>Compartment</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Compartment</em>' reference.
	 * @@see #getCompartment()
	 * @@generated
	 */
	void setCompartment(Compartment value);

	/**
	 * Returns the value of the '<em><b>Parent Node</b></em>' container reference.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.mappings.NodeMapping#getCompartments <em>Compartments</em>}'.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Parent Node</em>' container reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Parent Node</em>' container reference.
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getCompartmentMapping_ParentNode()
	 * @@see org.eclipse.gmf.mappings.NodeMapping#getCompartments
	 * @@model opposite="compartments" resolveProxies="false" required="true" transient="false" changeable="false"
	 * @@generated
	 */
	NodeMapping getParentNode();

	/**
	 * Returns the value of the '<em><b>Children</b></em>' reference list.
	 * The list contents are of type {@@link org.eclipse.gmf.mappings.ChildReference}.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.mappings.ChildReference#getCompartment <em>Compartment</em>}'.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Children</em>' reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Children</em>' reference list.
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getCompartmentMapping_Children()
	 * @@see org.eclipse.gmf.mappings.ChildReference#getCompartment
	 * @@model opposite="compartment"
	 * @@generated
	 */
	EList<ChildReference> getChildren();

} // CompartmentMapping
@


1.6
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@d70 1
a70 1
	 * @@model opposite="compartments" resolveProxies="false" required="true" transient="false" suppressedSetVisibility="true"
@


1.5
log
@regenerated with EMF 2.4M5
@
text
@d70 1
a70 1
	 * @@model opposite="compartments" required="true" transient="false" changeable="false"
@


1.4
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d70 1
a70 1
	 * @@model opposite="compartments" required="true" changeable="false"
d88 1
a88 1
	 * @@model type="org.eclipse.gmf.mappings.ChildReference" opposite="compartment"
@


1.3
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d91 1
a91 1
	EList getChildren();
@


1.2
log
@#114197 - tooling definition in place
@
text
@a20 1
 *   <li>{@@link org.eclipse.gmf.mappings.CompartmentMapping#getParentNodeMapping <em>Parent Node Mapping</em>}</li>
d22 2
a23 1
 *   <li>{@@link org.eclipse.gmf.mappings.CompartmentMapping#getChildNodes <em>Child Nodes</em>}</li>
a32 17
	 * Returns the value of the '<em><b>Parent Node Mapping</b></em>' container reference.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.mappings.AbstractNodeMapping#getCompartmentMappings <em>Compartment Mappings</em>}'.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Parent Node Mapping</em>' container reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Parent Node Mapping</em>' container reference.
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getCompartmentMapping_ParentNodeMapping()
	 * @@see org.eclipse.gmf.mappings.AbstractNodeMapping#getCompartmentMappings
	 * @@model opposite="compartmentMappings" required="true" changeable="false"
	 * @@generated
	 */
	AbstractNodeMapping getParentNodeMapping();

	/**
d59 20
a78 3
	 * Returns the value of the '<em><b>Child Nodes</b></em>' reference list.
	 * The list contents are of type {@@link org.eclipse.gmf.mappings.ChildNodeMapping}.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.mappings.ChildNodeMapping#getCompartment <em>Compartment</em>}'.
d81 1
a81 1
	 * If the meaning of the '<em>Child Nodes</em>' reference list isn't clear,
d85 4
a88 4
	 * @@return the value of the '<em>Child Nodes</em>' reference list.
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#getCompartmentMapping_ChildNodes()
	 * @@see org.eclipse.gmf.mappings.ChildNodeMapping#getCompartment
	 * @@model type="org.eclipse.gmf.mappings.ChildNodeMapping" opposite="compartment"
d91 1
a91 1
	EList getChildNodes();
@


1.1
log
@#119709
Adding Compartment mapping
@
text
@a9 1

a10 1

@

