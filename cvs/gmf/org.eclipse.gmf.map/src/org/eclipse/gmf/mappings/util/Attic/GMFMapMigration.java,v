head	1.6;
access;
symbols
	v20080813-1520:1.6
	v20070518-1300:1.5
	v20070517-1200:1.5
	v20070504-1000:1.5
	v20070427-0600:1.5
	v20070330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070208-1800:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061013-1330:1.1;
locks; strict;
comment	@# @;


1.6
date	2007.05.18.20.39.16;	author atikhomirov;	state dead;
branches;
next	1.5;
commitid	5912464e0ef24567;

1.5
date	2007.03.14.13.00.05;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	128545f7f1cb4567;

1.4
date	2006.10.20.16.22.23;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.19.15.21.56;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.19.14.11.21;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.28.18.20.40;	author radvorak;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[187811] akarjakina - Migration support refactored
@
text
@/**
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: dvorak - initial API and implementation
 */
package org.eclipse.gmf.mappings.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.gmf.internal.common.migrate.MigrationConfig;
import org.eclipse.gmf.mappings.FeatureLabelMapping;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.MappingEntry;

public class GMFMapMigration {

	private static final String GMFMAP_FILE_EXT = "gmfmap"; //$NON-NLS-1$

	private static final String eNS_URI_1_0 = "http://www.eclipse.org/gmf/2005/mappings"; //$NON-NLS-1$ 

	public static final MigrationConfig.Descriptor CONFIG = new MigrationConfig.Descriptor() {

		public String getExtension() {
			return GMFMAP_FILE_EXT;
		}

		public MigrationConfig getConfig() {
			MigrationConfig config = new MigrationConfig(GMFMapPackage.eNS_URI, new String[] { eNS_URI_1_0 }) {

				@@Override
				protected void handleResourceLoaded(Resource resource, Map<EObject, Map<String, String>> ignoredAttributes) {
					// https://bugs.eclipse.org/bugs/show_bug.cgi?id=161380
					// replace FeatureLabelMappings without features by LabelMappings
					for (Iterator<EObject> it = resource.getAllContents(); it.hasNext();) {
						EObject object = it.next();
						if (object instanceof MappingEntry) {
							MappingEntry entry = (MappingEntry) object;
							Collection<LabelMapping> mappings = new ArrayList<LabelMapping>(entry.getLabelMappings());
							for (LabelMapping mapping : mappings) {
								if (mapping instanceof FeatureLabelMapping && ((FeatureLabelMapping) mapping).getFeatures().isEmpty()) {
									entry.getLabelMappings().remove(mapping);
									LabelMapping newMapping = GMFMapPackage.eINSTANCE.getGMFMapFactory().createLabelMapping();
									newMapping.setDiagramLabel(mapping.getDiagramLabel());
									if (mapping.isReadOnly()) {
										newMapping.setReadOnly(true);
									}
									entry.getLabelMappings().add(newMapping);
								}
							}
						}
					}
				}
			};
			initialize(config);
			return config;
		}
	};

	static void initialize(MigrationConfig config) {
		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=138440
		config.addNarrowReferenceType(GMFMapPackage.eINSTANCE.getFeatureSeqInitializer_Initializers(), GMFMapPackage.eINSTANCE.getFeatureValueSpec());
		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=161380
		config.addNarrowReferenceType(GMFMapPackage.eINSTANCE.getMappingEntry_LabelMappings(), GMFMapPackage.eINSTANCE.getFeatureLabelMapping());
	}
}
@


1.5
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@@


1.4
log
@rename method that handles loaded resource
@
text
@d45 2
a46 2
					for (Iterator it = resource.getAllContents(); it.hasNext();) {
						EObject object = (EObject) it.next();
d49 1
a49 1
							Collection<? extends LabelMapping> mappings = (Collection<? extends LabelMapping>) new ArrayList(entry.getLabelMappings());
@


1.3
log
@[161380] Inroduce label mapping subclasses
@
text
@d42 1
a42 1
				protected void handleIgnoredAttributes(Resource resource, Map<EObject, Map<String, String>> ignoredAttributes) {
@


1.2
log
@format
@
text
@d13 7
d21 1
d23 2
d39 26
a64 1
			MigrationConfig config = new MigrationConfig(GMFMapPackage.eNS_URI, new String[] { eNS_URI_1_0 });
d73 2
@


1.1
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
@
text
@a15 1

d19 1
d23 1
d25 1
a25 1
			return GMFMAP_FILE_EXT; //$NON-NLS-1$
d27 1
a27 1
		
d29 1
a29 1
			MigrationConfig config = new MigrationConfig(GMFMapPackage.eNS_URI, new String[] { eNS_URI_1_0 });			
d34 1
a34 1
	
d37 1
a37 4
		config.addNarrowReferenceType(
			GMFMapPackage.eINSTANCE.getFeatureSeqInitializer_Initializers(),
			GMFMapPackage.eINSTANCE.getFeatureValueSpec()
		);
a38 1

@

