head	1.7;
access;
symbols
	v20080813-1520:1.7
	v20080722-1827:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080521:1.6
	v20080425-1959:1.6
	v20080417-1610:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.6
	v20070518-1300:1.6
	v20070517-1200:1.6
	v20070504-1000:1.6
	v20070427-0600:1.4
	v20070330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2008.08.13.13.51.01;	author dstadnik;	state Exp;
branches;
next	1.6;
commitid	454448a2e6ac4567;

1.6
date	2007.05.03.09.59.11;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	52284639b26b4567;

1.5
date	2007.04.27.11.23.42;	author dstadnik;	state Exp;
branches;
next	1.4;
commitid	109d4631dd3c4567;

1.4
date	2007.04.26.15.39.50;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	38914630c7c54567;

1.3
date	2007.04.25.08.08.29;	author dstadnik;	state Exp;
branches;
next	1.2;
commitid	7004462f0c7a4567;

1.2
date	2007.03.14.13.00.04;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	128545f7f1cb4567;

1.1
date	2006.10.19.15.21.56;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[231322] allow to specify editable features
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.eclipse.gmf.mappings.FeatureLabelMapping;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LabelTextAccessMethod;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Feature Label Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.FeatureLabelMappingImpl#getFeatures <em>Features</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.FeatureLabelMappingImpl#getEditableFeatures <em>Editable Features</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.FeatureLabelMappingImpl#getViewPattern <em>View Pattern</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.FeatureLabelMappingImpl#getEditorPattern <em>Editor Pattern</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.FeatureLabelMappingImpl#getEditPattern <em>Edit Pattern</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.FeatureLabelMappingImpl#getViewMethod <em>View Method</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.FeatureLabelMappingImpl#getEditMethod <em>Edit Method</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class FeatureLabelMappingImpl extends LabelMappingImpl implements FeatureLabelMapping {
	/**
	 * The cached value of the '{@@link #getFeatures() <em>Features</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFeatures()
	 * @@generated
	 * @@ordered
	 */
	protected EList<EAttribute> features;

	/**
	 * The cached value of the '{@@link #getEditableFeatures() <em>Editable Features</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditableFeatures()
	 * @@generated
	 * @@ordered
	 */
	protected EList<EAttribute> editableFeatures;

	/**
	 * The default value of the '{@@link #getViewPattern() <em>View Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewPattern()
	 * @@generated
	 * @@ordered
	 */
	protected static final String VIEW_PATTERN_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getViewPattern() <em>View Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewPattern()
	 * @@generated
	 * @@ordered
	 */
	protected String viewPattern = VIEW_PATTERN_EDEFAULT;

	/**
	 * The default value of the '{@@link #getEditorPattern() <em>Editor Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditorPattern()
	 * @@generated
	 * @@ordered
	 */
	protected static final String EDITOR_PATTERN_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getEditorPattern() <em>Editor Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditorPattern()
	 * @@generated
	 * @@ordered
	 */
	protected String editorPattern = EDITOR_PATTERN_EDEFAULT;

	/**
	 * The default value of the '{@@link #getEditPattern() <em>Edit Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditPattern()
	 * @@generated
	 * @@ordered
	 */
	protected static final String EDIT_PATTERN_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getEditPattern() <em>Edit Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditPattern()
	 * @@generated
	 * @@ordered
	 */
	protected String editPattern = EDIT_PATTERN_EDEFAULT;

	/**
	 * The default value of the '{@@link #getViewMethod() <em>View Method</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewMethod()
	 * @@generated
	 * @@ordered
	 */
	protected static final LabelTextAccessMethod VIEW_METHOD_EDEFAULT = LabelTextAccessMethod.MESSAGE_FORMAT;

	/**
	 * The cached value of the '{@@link #getViewMethod() <em>View Method</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewMethod()
	 * @@generated
	 * @@ordered
	 */
	protected LabelTextAccessMethod viewMethod = VIEW_METHOD_EDEFAULT;

	/**
	 * The default value of the '{@@link #getEditMethod() <em>Edit Method</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditMethod()
	 * @@generated
	 * @@ordered
	 */
	protected static final LabelTextAccessMethod EDIT_METHOD_EDEFAULT = LabelTextAccessMethod.MESSAGE_FORMAT;

	/**
	 * The cached value of the '{@@link #getEditMethod() <em>Edit Method</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditMethod()
	 * @@generated
	 * @@ordered
	 */
	protected LabelTextAccessMethod editMethod = EDIT_METHOD_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected FeatureLabelMappingImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFMapPackage.eINSTANCE.getFeatureLabelMapping();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<EAttribute> getFeatures() {
		if (features == null) {
			features = new EObjectResolvingEList<EAttribute>(EAttribute.class, this, GMFMapPackage.FEATURE_LABEL_MAPPING__FEATURES);
		}
		return features;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<EAttribute> getEditableFeatures() {
		if (editableFeatures == null) {
			editableFeatures = new EObjectResolvingEList<EAttribute>(EAttribute.class, this, GMFMapPackage.FEATURE_LABEL_MAPPING__EDITABLE_FEATURES);
		}
		return editableFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getViewPattern() {
		return viewPattern;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setViewPattern(String newViewPattern) {
		String oldViewPattern = viewPattern;
		viewPattern = newViewPattern;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_PATTERN, oldViewPattern, viewPattern));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getEditorPattern() {
		return editorPattern;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditorPattern(String newEditorPattern) {
		String oldEditorPattern = editorPattern;
		editorPattern = newEditorPattern;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.FEATURE_LABEL_MAPPING__EDITOR_PATTERN, oldEditorPattern, editorPattern));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelTextAccessMethod getViewMethod() {
		return viewMethod;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setViewMethod(LabelTextAccessMethod newViewMethod) {
		LabelTextAccessMethod oldViewMethod = viewMethod;
		viewMethod = newViewMethod == null ? VIEW_METHOD_EDEFAULT : newViewMethod;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD, oldViewMethod, viewMethod));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getEditPattern() {
		return editPattern;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditPattern(String newEditPattern) {
		String oldEditPattern = editPattern;
		editPattern = newEditPattern;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN, oldEditPattern, editPattern));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelTextAccessMethod getEditMethod() {
		return editMethod;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditMethod(LabelTextAccessMethod newEditMethod) {
		LabelTextAccessMethod oldEditMethod = editMethod;
		editMethod = newEditMethod == null ? EDIT_METHOD_EDEFAULT : newEditMethod;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_METHOD, oldEditMethod, editMethod));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFMapPackage.FEATURE_LABEL_MAPPING__FEATURES:
				return getFeatures();
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDITABLE_FEATURES:
				return getEditableFeatures();
			case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_PATTERN:
				return getViewPattern();
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDITOR_PATTERN:
				return getEditorPattern();
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN:
				return getEditPattern();
			case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD:
				return getViewMethod();
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_METHOD:
				return getEditMethod();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFMapPackage.FEATURE_LABEL_MAPPING__FEATURES:
				getFeatures().clear();
				getFeatures().addAll((Collection<? extends EAttribute>)newValue);
				return;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDITABLE_FEATURES:
				getEditableFeatures().clear();
				getEditableFeatures().addAll((Collection<? extends EAttribute>)newValue);
				return;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_PATTERN:
				setViewPattern((String)newValue);
				return;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDITOR_PATTERN:
				setEditorPattern((String)newValue);
				return;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN:
				setEditPattern((String)newValue);
				return;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD:
				setViewMethod((LabelTextAccessMethod)newValue);
				return;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_METHOD:
				setEditMethod((LabelTextAccessMethod)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFMapPackage.FEATURE_LABEL_MAPPING__FEATURES:
				getFeatures().clear();
				return;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDITABLE_FEATURES:
				getEditableFeatures().clear();
				return;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_PATTERN:
				setViewPattern(VIEW_PATTERN_EDEFAULT);
				return;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDITOR_PATTERN:
				setEditorPattern(EDITOR_PATTERN_EDEFAULT);
				return;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN:
				setEditPattern(EDIT_PATTERN_EDEFAULT);
				return;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD:
				setViewMethod(VIEW_METHOD_EDEFAULT);
				return;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_METHOD:
				setEditMethod(EDIT_METHOD_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFMapPackage.FEATURE_LABEL_MAPPING__FEATURES:
				return features != null && !features.isEmpty();
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDITABLE_FEATURES:
				return editableFeatures != null && !editableFeatures.isEmpty();
			case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_PATTERN:
				return VIEW_PATTERN_EDEFAULT == null ? viewPattern != null : !VIEW_PATTERN_EDEFAULT.equals(viewPattern);
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDITOR_PATTERN:
				return EDITOR_PATTERN_EDEFAULT == null ? editorPattern != null : !EDITOR_PATTERN_EDEFAULT.equals(editorPattern);
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN:
				return EDIT_PATTERN_EDEFAULT == null ? editPattern != null : !EDIT_PATTERN_EDEFAULT.equals(editPattern);
			case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD:
				return viewMethod != VIEW_METHOD_EDEFAULT;
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_METHOD:
				return editMethod != EDIT_METHOD_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (viewPattern: ");
		result.append(viewPattern);
		result.append(", editorPattern: ");
		result.append(editorPattern);
		result.append(", editPattern: ");
		result.append(editPattern);
		result.append(", viewMethod: ");
		result.append(viewMethod);
		result.append(", editMethod: ");
		result.append(editMethod);
		result.append(')');
		return result.toString();
	}

} //FeatureLabelMappingImpl@


1.6
log
@refactor message format parser; introduce editor pattern
@
text
@d34 1
d57 10
d202 12
d324 2
d353 4
d387 3
d419 2
@


1.5
log
@combine label text access methods
@
text
@d35 2
a37 1
 *   <li>{@@link org.eclipse.gmf.mappings.impl.FeatureLabelMappingImpl#getEditPattern <em>Edit Pattern</em>}</li>
d76 1
a76 1
	 * The default value of the '{@@link #getViewMethod() <em>View Method</em>}' attribute.
d79 1
a79 1
	 * @@see #getViewMethod()
d83 1
a83 1
	protected static final LabelTextAccessMethod VIEW_METHOD_EDEFAULT = LabelTextAccessMethod.MESSAGE_FORMAT;
d86 1
a86 1
	 * The cached value of the '{@@link #getViewMethod() <em>View Method</em>}' attribute.
d89 1
a89 1
	 * @@see #getViewMethod()
d93 1
a93 1
	protected LabelTextAccessMethod viewMethod = VIEW_METHOD_EDEFAULT;
d116 20
d212 21
d303 4
a308 2
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN:
				return getEditPattern();
d331 2
a332 2
			case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD:
				setViewMethod((LabelTextAccessMethod)newValue);
d337 3
d361 2
a362 2
			case GMFMapPackage.FEATURE_LABEL_MAPPING__VIEW_METHOD:
				setViewMethod(VIEW_METHOD_EDEFAULT);
d367 3
d389 4
a394 2
			case GMFMapPackage.FEATURE_LABEL_MAPPING__EDIT_PATTERN:
				return EDIT_PATTERN_EDEFAULT == null ? editPattern != null : !EDIT_PATTERN_EDEFAULT.equals(editPattern);
d413 4
a418 2
		result.append(", editPattern: ");
		result.append(editPattern);
@


1.4
log
@additional methods to produce label text and parse user input
@
text
@d24 1
a24 2
import org.eclipse.gmf.mappings.LabelEditMethod;
import org.eclipse.gmf.mappings.LabelViewMethod;
d82 1
a82 1
	protected static final LabelViewMethod VIEW_METHOD_EDEFAULT = LabelViewMethod.MESSAGE_FORMAT;
d92 1
a92 1
	protected LabelViewMethod viewMethod = VIEW_METHOD_EDEFAULT;
d122 1
a122 1
	protected static final LabelEditMethod EDIT_METHOD_EDEFAULT = LabelEditMethod.MESSAGE_FORMAT;
d132 1
a132 1
	protected LabelEditMethod editMethod = EDIT_METHOD_EDEFAULT;
d191 1
a191 1
	public LabelViewMethod getViewMethod() {
d200 2
a201 2
	public void setViewMethod(LabelViewMethod newViewMethod) {
		LabelViewMethod oldViewMethod = viewMethod;
d233 1
a233 1
	public LabelEditMethod getEditMethod() {
d242 2
a243 2
	public void setEditMethod(LabelEditMethod newEditMethod) {
		LabelEditMethod oldEditMethod = editMethod;
d288 1
a288 1
				setViewMethod((LabelViewMethod)newValue);
d294 1
a294 1
				setEditMethod((LabelEditMethod)newValue);
@


1.3
log
@regenerated
@
text
@d24 2
d36 1
d38 1
d76 20
d116 20
d192 21
d234 21
d262 2
d266 2
d288 3
d294 3
d315 3
d321 3
d340 2
d344 2
d362 2
d366 2
@


1.2
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d49 1
a49 1
	protected EList<EAttribute> features = null;
@


1.1
log
@[161380] Inroduce label mapping subclasses
@
text
@d49 1
a49 1
	protected EList features = null;
d105 1
d115 1
a115 1
	public EList getFeatures() {
d117 1
a117 1
			features = new EObjectResolvingEList(EAttribute.class, this, GMFMapPackage.FEATURE_LABEL_MAPPING__FEATURES);
d169 1
d187 2
d193 1
a193 1
				getFeatures().addAll((Collection)newValue);
d210 1
d231 1
d249 1
@

