head	1.8;
access;
symbols
	v20080813-1520:1.8
	v20080722-1827:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.4
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080521:1.8
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070608-1300:1.8
	v20070605-1400:1.8
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070520-1200:1.8
	v20070518-1300:1.8
	v20070517-1200:1.8
	v20070504-1000:1.8
	v20070427-0600:1.8
	v20070330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070208-1800:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.6
	M1_20:1.6
	v20060904-1500:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060626-1420:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060519-1300:1.6
	v20060519-0800:1.6
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.5
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2007.04.25.08.08.29;	author dstadnik;	state Exp;
branches;
next	1.7;
commitid	7004462f0c7a4567;

1.7
date	2007.03.14.13.00.04;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	128545f7f1cb4567;

1.6
date	2006.03.03.18.32.33;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.23.15.45.31;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.10.20.40.09;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.10.18.35.28;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.06.22.21.24;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.30.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.8
log
@regenerated
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.mappings.AuditContainer;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.Mapping;
import org.eclipse.gmf.mappings.MetricContainer;
import org.eclipse.gmf.mappings.TopNodeReference;
import org.eclipse.gmf.tooldef.StyleSelector;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.MappingImpl#getNodes <em>Nodes</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.MappingImpl#getLinks <em>Links</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.MappingImpl#getDiagram <em>Diagram</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.MappingImpl#getAppearanceStyles <em>Appearance Styles</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.MappingImpl#getAudits <em>Audits</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.MappingImpl#getMetrics <em>Metrics</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class MappingImpl extends EObjectImpl implements Mapping {
	/**
	 * The cached value of the '{@@link #getNodes() <em>Nodes</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNodes()
	 * @@generated
	 * @@ordered
	 */
	protected EList<TopNodeReference> nodes;

	/**
	 * The cached value of the '{@@link #getLinks() <em>Links</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLinks()
	 * @@generated
	 * @@ordered
	 */
	protected EList<LinkMapping> links;

	/**
	 * The cached value of the '{@@link #getDiagram() <em>Diagram</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDiagram()
	 * @@generated
	 * @@ordered
	 */
	protected CanvasMapping diagram;

	/**
	 * The cached value of the '{@@link #getAppearanceStyles() <em>Appearance Styles</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAppearanceStyles()
	 * @@generated
	 * @@ordered
	 */
	protected EList<StyleSelector> appearanceStyles;

	/**
	 * The cached value of the '{@@link #getAudits() <em>Audits</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAudits()
	 * @@generated
	 * @@ordered
	 */
	protected AuditContainer audits;

	/**
	 * The cached value of the '{@@link #getMetrics() <em>Metrics</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMetrics()
	 * @@generated
	 * @@ordered
	 */
	protected MetricContainer metrics;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected MappingImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFMapPackage.eINSTANCE.getMapping();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<TopNodeReference> getNodes() {
		if (nodes == null) {
			nodes = new EObjectContainmentEList<TopNodeReference>(TopNodeReference.class, this, GMFMapPackage.MAPPING__NODES);
		}
		return nodes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<LinkMapping> getLinks() {
		if (links == null) {
			links = new EObjectContainmentEList<LinkMapping>(LinkMapping.class, this, GMFMapPackage.MAPPING__LINKS);
		}
		return links;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CanvasMapping getDiagram() {
		return diagram;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetDiagram(CanvasMapping newDiagram, NotificationChain msgs) {
		CanvasMapping oldDiagram = diagram;
		diagram = newDiagram;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFMapPackage.MAPPING__DIAGRAM, oldDiagram, newDiagram);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDiagram(CanvasMapping newDiagram) {
		if (newDiagram != diagram) {
			NotificationChain msgs = null;
			if (diagram != null)
				msgs = ((InternalEObject)diagram).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.MAPPING__DIAGRAM, null, msgs);
			if (newDiagram != null)
				msgs = ((InternalEObject)newDiagram).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.MAPPING__DIAGRAM, null, msgs);
			msgs = basicSetDiagram(newDiagram, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.MAPPING__DIAGRAM, newDiagram, newDiagram));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<StyleSelector> getAppearanceStyles() {
		if (appearanceStyles == null) {
			appearanceStyles = new EObjectContainmentEList<StyleSelector>(StyleSelector.class, this, GMFMapPackage.MAPPING__APPEARANCE_STYLES);
		}
		return appearanceStyles;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public AuditContainer getAudits() {
		return audits;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetAudits(AuditContainer newAudits, NotificationChain msgs) {
		AuditContainer oldAudits = audits;
		audits = newAudits;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFMapPackage.MAPPING__AUDITS, oldAudits, newAudits);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setAudits(AuditContainer newAudits) {
		if (newAudits != audits) {
			NotificationChain msgs = null;
			if (audits != null)
				msgs = ((InternalEObject)audits).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.MAPPING__AUDITS, null, msgs);
			if (newAudits != null)
				msgs = ((InternalEObject)newAudits).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.MAPPING__AUDITS, null, msgs);
			msgs = basicSetAudits(newAudits, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.MAPPING__AUDITS, newAudits, newAudits));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public MetricContainer getMetrics() {
		return metrics;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetMetrics(MetricContainer newMetrics, NotificationChain msgs) {
		MetricContainer oldMetrics = metrics;
		metrics = newMetrics;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFMapPackage.MAPPING__METRICS, oldMetrics, newMetrics);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setMetrics(MetricContainer newMetrics) {
		if (newMetrics != metrics) {
			NotificationChain msgs = null;
			if (metrics != null)
				msgs = ((InternalEObject)metrics).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.MAPPING__METRICS, null, msgs);
			if (newMetrics != null)
				msgs = ((InternalEObject)newMetrics).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.MAPPING__METRICS, null, msgs);
			msgs = basicSetMetrics(newMetrics, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.MAPPING__METRICS, newMetrics, newMetrics));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFMapPackage.MAPPING__NODES:
				return ((InternalEList<?>)getNodes()).basicRemove(otherEnd, msgs);
			case GMFMapPackage.MAPPING__LINKS:
				return ((InternalEList<?>)getLinks()).basicRemove(otherEnd, msgs);
			case GMFMapPackage.MAPPING__DIAGRAM:
				return basicSetDiagram(null, msgs);
			case GMFMapPackage.MAPPING__APPEARANCE_STYLES:
				return ((InternalEList<?>)getAppearanceStyles()).basicRemove(otherEnd, msgs);
			case GMFMapPackage.MAPPING__AUDITS:
				return basicSetAudits(null, msgs);
			case GMFMapPackage.MAPPING__METRICS:
				return basicSetMetrics(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFMapPackage.MAPPING__NODES:
				return getNodes();
			case GMFMapPackage.MAPPING__LINKS:
				return getLinks();
			case GMFMapPackage.MAPPING__DIAGRAM:
				return getDiagram();
			case GMFMapPackage.MAPPING__APPEARANCE_STYLES:
				return getAppearanceStyles();
			case GMFMapPackage.MAPPING__AUDITS:
				return getAudits();
			case GMFMapPackage.MAPPING__METRICS:
				return getMetrics();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFMapPackage.MAPPING__NODES:
				getNodes().clear();
				getNodes().addAll((Collection<? extends TopNodeReference>)newValue);
				return;
			case GMFMapPackage.MAPPING__LINKS:
				getLinks().clear();
				getLinks().addAll((Collection<? extends LinkMapping>)newValue);
				return;
			case GMFMapPackage.MAPPING__DIAGRAM:
				setDiagram((CanvasMapping)newValue);
				return;
			case GMFMapPackage.MAPPING__APPEARANCE_STYLES:
				getAppearanceStyles().clear();
				getAppearanceStyles().addAll((Collection<? extends StyleSelector>)newValue);
				return;
			case GMFMapPackage.MAPPING__AUDITS:
				setAudits((AuditContainer)newValue);
				return;
			case GMFMapPackage.MAPPING__METRICS:
				setMetrics((MetricContainer)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFMapPackage.MAPPING__NODES:
				getNodes().clear();
				return;
			case GMFMapPackage.MAPPING__LINKS:
				getLinks().clear();
				return;
			case GMFMapPackage.MAPPING__DIAGRAM:
				setDiagram((CanvasMapping)null);
				return;
			case GMFMapPackage.MAPPING__APPEARANCE_STYLES:
				getAppearanceStyles().clear();
				return;
			case GMFMapPackage.MAPPING__AUDITS:
				setAudits((AuditContainer)null);
				return;
			case GMFMapPackage.MAPPING__METRICS:
				setMetrics((MetricContainer)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFMapPackage.MAPPING__NODES:
				return nodes != null && !nodes.isEmpty();
			case GMFMapPackage.MAPPING__LINKS:
				return links != null && !links.isEmpty();
			case GMFMapPackage.MAPPING__DIAGRAM:
				return diagram != null;
			case GMFMapPackage.MAPPING__APPEARANCE_STYLES:
				return appearanceStyles != null && !appearanceStyles.isEmpty();
			case GMFMapPackage.MAPPING__AUDITS:
				return audits != null;
			case GMFMapPackage.MAPPING__METRICS:
				return metrics != null;
		}
		return super.eIsSet(featureID);
	}

} //MappingImpl
@


1.7
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d56 1
a56 1
	protected EList<TopNodeReference> nodes = null;
d66 1
a66 1
	protected EList<LinkMapping> links = null;
d76 1
a76 1
	protected CanvasMapping diagram = null;
d86 1
a86 1
	protected EList<StyleSelector> appearanceStyles = null;
d96 1
a96 1
	protected AuditContainer audits = null;
d106 1
a106 1
	protected MetricContainer metrics = null;
@


1.6
log
@[rdvorak] #114196 Allow for the definition of diagram validation rules
@
text
@d56 1
a56 1
	protected EList nodes = null;
d66 1
a66 1
	protected EList links = null;
d86 1
a86 1
	protected EList appearanceStyles = null;
d122 1
d132 1
a132 1
	public EList getNodes() {
d134 1
a134 1
			nodes = new EObjectContainmentEList(TopNodeReference.class, this, GMFMapPackage.MAPPING__NODES);
d144 1
a144 1
	public EList getLinks() {
d146 1
a146 1
			links = new EObjectContainmentEList(LinkMapping.class, this, GMFMapPackage.MAPPING__LINKS);
d199 1
a199 1
	public EList getAppearanceStyles() {
d201 1
a201 1
			appearanceStyles = new EObjectContainmentEList(StyleSelector.class, this, GMFMapPackage.MAPPING__APPEARANCE_STYLES);
d297 1
d301 1
a301 1
				return ((InternalEList)getNodes()).basicRemove(otherEnd, msgs);
d303 1
a303 1
				return ((InternalEList)getLinks()).basicRemove(otherEnd, msgs);
d307 1
a307 1
				return ((InternalEList)getAppearanceStyles()).basicRemove(otherEnd, msgs);
d321 1
d345 2
d351 1
a351 1
				getNodes().addAll((Collection)newValue);
d355 1
a355 1
				getLinks().addAll((Collection)newValue);
d362 1
a362 1
				getAppearanceStyles().addAll((Collection)newValue);
d379 1
d409 1
@


1.5
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d25 1
d41 1
d99 10
d253 43
d308 2
d331 2
d362 3
d391 3
d415 2
@


1.4
log
@#114197 - tooling definition in place
@
text
@d25 1
a25 1
import org.eclipse.gmf.mappings.NodeMapping;
d121 1
a121 1
			nodes = new EObjectContainmentEList(NodeMapping.class, this, GMFMapPackage.MAPPING__NODES);
@


1.3
log
@[rdvorak] #123279 audits definition in gmfmap
@
text
@d26 1
a26 1
import org.eclipse.gmf.mappings.ToolGroup;
d38 1
a38 1
 *   <li>{@@link org.eclipse.gmf.mappings.impl.MappingImpl#getToolGroups <em>Tool Groups</em>}</li>
d77 1
a77 1
	 * The cached value of the '{@@link #getToolGroups() <em>Tool Groups</em>}' containment reference list.
d80 1
a80 1
	 * @@see #getToolGroups()
d84 1
a84 1
	protected EList toolGroups = null;
d186 3
a188 3
	public EList getToolGroups() {
		if (toolGroups == null) {
			toolGroups = new EObjectContainmentEList(ToolGroup.class, this, GMFMapPackage.MAPPING__TOOL_GROUPS);
d190 1
a190 1
		return toolGroups;
d249 2
a250 2
			case GMFMapPackage.MAPPING__TOOL_GROUPS:
				return ((InternalEList)getToolGroups()).basicRemove(otherEnd, msgs);
d270 2
a271 2
			case GMFMapPackage.MAPPING__TOOL_GROUPS:
				return getToolGroups();
d296 3
a298 3
			case GMFMapPackage.MAPPING__TOOL_GROUPS:
				getToolGroups().clear();
				getToolGroups().addAll((Collection)newValue);
d323 2
a324 2
			case GMFMapPackage.MAPPING__TOOL_GROUPS:
				getToolGroups().clear();
d346 2
a347 2
			case GMFMapPackage.MAPPING__TOOL_GROUPS:
				return toolGroups != null && !toolGroups.isEmpty();
@


1.2
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@a14 1
import org.eclipse.emf.ecore.EStructuralFeature;
d20 1
d39 1
d87 10
d198 33
a230 14
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFMapPackage.MAPPING__NODES:
					return ((InternalEList)getNodes()).basicRemove(otherEnd, msgs);
				case GMFMapPackage.MAPPING__LINKS:
					return ((InternalEList)getLinks()).basicRemove(otherEnd, msgs);
				case GMFMapPackage.MAPPING__DIAGRAM:
					return basicSetDiagram(null, msgs);
				case GMFMapPackage.MAPPING__TOOL_GROUPS:
					return ((InternalEList)getToolGroups()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d232 2
a233 1
		return eBasicSetContainer(null, featureID, msgs);
d241 23
a263 2
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d272 2
d275 1
a275 1
		return eDynamicGet(eFeature, resolve);
d283 2
a284 2
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d300 3
d304 1
a304 1
		eDynamicSet(eFeature, newValue);
d312 2
a313 2
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d326 3
d330 1
a330 1
		eDynamicUnset(eFeature);
d338 2
a339 2
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d348 2
d351 1
a351 1
		return eDynamicIsSet(eFeature);
@


1.1
log
@*** empty log message ***
@
text
@d5 1
a5 1
 * $Id: MappingImpl.java,v 1.4 2005/08/02 13:11:56 artem Exp $
d26 1
d38 1
d76 10
d175 12
d196 2
d218 2
d242 4
d266 3
d286 2
@

