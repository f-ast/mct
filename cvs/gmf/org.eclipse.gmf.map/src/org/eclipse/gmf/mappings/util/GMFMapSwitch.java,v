head	1.25;
access;
symbols
	v20080813-1520:1.25
	v20080722-1827:1.25
	v20080716-1642:1.25
	R2_1_maintenance:1.25.0.2
	Root_R2_1_maintenance:1.25
	R2_1_0:1.25
	v20080521:1.25
	v20080425-1959:1.25
	v20080417-1610:1.25
	v20080322-0000:1.24
	v20080222-1200:1.23
	v20070809-0000:1.23
	R2_0_maintenance:1.23.0.2
	R2_0:1.23
	R4_20:1.23
	v20070621-0000:1.23
	RC3_20:1.23
	v20070608-1300:1.23
	v20070605-1400:1.23
	v20070601-1400:1.23
	v20070525-1500:1.23
	v20070520-1200:1.23
	v20070518-1300:1.23
	v20070517-1200:1.23
	v20070504-1000:1.23
	v20070427-0600:1.23
	v20070330-1300:1.23
	v20070322-1100:1.23
	v20060316-0600:1.23
	v20070208-1800:1.22
	M4_20:1.22
	v20061214-0000:1.22
	M3_20:1.22
	v20061117-0800:1.22
	v20061013-1330:1.21
	M1_20:1.20
	v20060904-1500:1.20
	v20060713-1700:1.20
	R1_0_maintenance:1.20.0.2
	R1_0:1.20
	v20060627-1200:1.20
	v20060626-1420:1.20
	v20060616-1200:1.20
	v20060609-1400:1.20
	v20060531-1730:1.20
	v20060530-1930:1.20
	v20060519-1300:1.20
	v20060519-0800:1.20
	v20060512-1000:1.19
	I20060512-1000:1.19
	I20060505-1400:1.17
	I20060428-1300:1.17
	I20060424-0500:1.16
	I20060424-0300:1.16
	M6_10:1.16
	I20060407-1200:1.16
	I20060331-1000:1.16
	I20060324-0300:1.16
	I20060317-1300:1.16
	I20060317-1200:1.16
	I20060316-1300:1.16
	I20060309-1300:1.16
	M5_10:1.16
	S20060303-1600:1.16
	I20060227-1730:1.14
	I20060216-1945:1.12
	I20060210-1715:1.11
	I20060209-1815:1.11
	I20060203-0830:1.11
	I20060129-1145:1.11
	I20060127-0900:1.11
	I20060120-1530:1.11
	I20060113-1700:1.11
	M4_10:1.11
	I20060107-1100:1.9
	I20060105-1630:1.9
	I20051230-1230:1.9
	I20051223-1100:1.9
	I20051217-0925:1.9
	I20051208-2000:1.9
	I20051201-1800:1.7
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.25
date	2008.04.17.11.58.49;	author atikhomirov;	state Exp;
branches;
next	1.24;
commitid	330848073b774567;

1.24
date	2008.03.03.17.45.08;	author atikhomirov;	state Exp;
branches;
next	1.23;
commitid	160e47cc39234567;

1.23
date	2007.03.14.13.00.05;	author atikhomirov;	state Exp;
branches;
next	1.22;
commitid	128545f7f1cb4567;

1.22
date	2006.10.19.15.21.56;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.09.28.18.20.40;	author radvorak;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.14.18.06.32;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.11.09.42.05;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.10.15.12.33;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.25.19.15.49;	author radvorak;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.03.18.32.33;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.03.11.36.26;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.23.15.45.31;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.22.22.01.21;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.13.18.37.47;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.10.20.40.09;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.10.18.35.29;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.07.19.23.17;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.06.22.21.24;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.30.12.49.30;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.29.18.33.02;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.25.13.52.44;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.20.14.07.16;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.18.10.58.31;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.26.14.26.27;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.30.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.25
log
@[227505] Replace FeatureValueSpec generalization of ValueExpression with aggregation, as it's better approach to model such a concept
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.util;

import java.util.List;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.mappings.*;

import org.eclipse.gmf.mappings.AppearanceSteward;
import org.eclipse.gmf.mappings.AuditContainer;
import org.eclipse.gmf.mappings.AuditRule;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.ChildReference;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.Constraint;
import org.eclipse.gmf.mappings.ElementInitializer;
import org.eclipse.gmf.mappings.FeatureSeqInitializer;
import org.eclipse.gmf.mappings.FeatureValueSpec;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.LinkConstraints;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.Mapping;
import org.eclipse.gmf.mappings.MappingEntry;
import org.eclipse.gmf.mappings.MenuOwner;
import org.eclipse.gmf.mappings.NeedsContainment;
import org.eclipse.gmf.mappings.NodeMapping;
import org.eclipse.gmf.mappings.NodeReference;
import org.eclipse.gmf.mappings.ToolOwner;
import org.eclipse.gmf.mappings.TopNodeReference;
import org.eclipse.gmf.mappings.ValueExpression;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @@see org.eclipse.gmf.mappings.GMFMapPackage
 * @@generated
 */
public class GMFMapSwitch<T> {
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected static GMFMapPackage modelPackage;

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GMFMapSwitch() {
		if (modelPackage == null) {
			modelPackage = GMFMapPackage.eINSTANCE;
		}
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@return the first non-null result returned by a <code>caseXXX</code> call.
	 * @@generated
	 */
	public T doSwitch(EObject theEObject) {
		return doSwitch(theEObject.eClass(), theEObject);
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@return the first non-null result returned by a <code>caseXXX</code> call.
	 * @@generated
	 */
	protected T doSwitch(EClass theEClass, EObject theEObject) {
		if (theEClass.eContainer() == modelPackage) {
			return doSwitch(theEClass.getClassifierID(), theEObject);
		}
		else {
			List<EClass> eSuperTypes = theEClass.getESuperTypes();
			return
				eSuperTypes.isEmpty() ?
					defaultCase(theEObject) :
					doSwitch(eSuperTypes.get(0), theEObject);
		}
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@return the first non-null result returned by a <code>caseXXX</code> call.
	 * @@generated
	 */
	protected T doSwitch(int classifierID, EObject theEObject) {
		switch (classifierID) {
			case GMFMapPackage.MAPPING: {
				Mapping mapping = (Mapping)theEObject;
				T result = caseMapping(mapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.MAPPING_ENTRY: {
				MappingEntry mappingEntry = (MappingEntry)theEObject;
				T result = caseMappingEntry(mappingEntry);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.NEEDS_CONTAINMENT: {
				NeedsContainment needsContainment = (NeedsContainment)theEObject;
				T result = caseNeedsContainment(needsContainment);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.NODE_REFERENCE: {
				NodeReference nodeReference = (NodeReference)theEObject;
				T result = caseNodeReference(nodeReference);
				if (result == null) result = caseNeedsContainment(nodeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.CHILD_REFERENCE: {
				ChildReference childReference = (ChildReference)theEObject;
				T result = caseChildReference(childReference);
				if (result == null) result = caseNodeReference(childReference);
				if (result == null) result = caseNeedsContainment(childReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.TOP_NODE_REFERENCE: {
				TopNodeReference topNodeReference = (TopNodeReference)theEObject;
				T result = caseTopNodeReference(topNodeReference);
				if (result == null) result = caseNodeReference(topNodeReference);
				if (result == null) result = caseNeedsContainment(topNodeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.NODE_MAPPING: {
				NodeMapping nodeMapping = (NodeMapping)theEObject;
				T result = caseNodeMapping(nodeMapping);
				if (result == null) result = caseMappingEntry(nodeMapping);
				if (result == null) result = caseMenuOwner(nodeMapping);
				if (result == null) result = caseToolOwner(nodeMapping);
				if (result == null) result = caseAppearanceSteward(nodeMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.COMPARTMENT_MAPPING: {
				CompartmentMapping compartmentMapping = (CompartmentMapping)theEObject;
				T result = caseCompartmentMapping(compartmentMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.LINK_MAPPING: {
				LinkMapping linkMapping = (LinkMapping)theEObject;
				T result = caseLinkMapping(linkMapping);
				if (result == null) result = caseMappingEntry(linkMapping);
				if (result == null) result = caseNeedsContainment(linkMapping);
				if (result == null) result = caseMenuOwner(linkMapping);
				if (result == null) result = caseToolOwner(linkMapping);
				if (result == null) result = caseAppearanceSteward(linkMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.CANVAS_MAPPING: {
				CanvasMapping canvasMapping = (CanvasMapping)theEObject;
				T result = caseCanvasMapping(canvasMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.LABEL_MAPPING: {
				LabelMapping labelMapping = (LabelMapping)theEObject;
				T result = caseLabelMapping(labelMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.FEATURE_LABEL_MAPPING: {
				FeatureLabelMapping featureLabelMapping = (FeatureLabelMapping)theEObject;
				T result = caseFeatureLabelMapping(featureLabelMapping);
				if (result == null) result = caseLabelMapping(featureLabelMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.DESIGN_LABEL_MAPPING: {
				DesignLabelMapping designLabelMapping = (DesignLabelMapping)theEObject;
				T result = caseDesignLabelMapping(designLabelMapping);
				if (result == null) result = caseLabelMapping(designLabelMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.CONSTRAINT: {
				Constraint constraint = (Constraint)theEObject;
				T result = caseConstraint(constraint);
				if (result == null) result = caseValueExpression(constraint);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.LINK_CONSTRAINTS: {
				LinkConstraints linkConstraints = (LinkConstraints)theEObject;
				T result = caseLinkConstraints(linkConstraints);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.VALUE_EXPRESSION: {
				ValueExpression valueExpression = (ValueExpression)theEObject;
				T result = caseValueExpression(valueExpression);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.ELEMENT_INITIALIZER: {
				ElementInitializer elementInitializer = (ElementInitializer)theEObject;
				T result = caseElementInitializer(elementInitializer);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.FEATURE_SEQ_INITIALIZER: {
				FeatureSeqInitializer featureSeqInitializer = (FeatureSeqInitializer)theEObject;
				T result = caseFeatureSeqInitializer(featureSeqInitializer);
				if (result == null) result = caseElementInitializer(featureSeqInitializer);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.FEATURE_INITIALIZER: {
				FeatureInitializer featureInitializer = (FeatureInitializer)theEObject;
				T result = caseFeatureInitializer(featureInitializer);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.FEATURE_VALUE_SPEC: {
				FeatureValueSpec featureValueSpec = (FeatureValueSpec)theEObject;
				T result = caseFeatureValueSpec(featureValueSpec);
				if (result == null) result = caseFeatureInitializer(featureValueSpec);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.REFERENCE_NEW_ELEMENT_SPEC: {
				ReferenceNewElementSpec referenceNewElementSpec = (ReferenceNewElementSpec)theEObject;
				T result = caseReferenceNewElementSpec(referenceNewElementSpec);
				if (result == null) result = caseFeatureInitializer(referenceNewElementSpec);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.MENU_OWNER: {
				MenuOwner menuOwner = (MenuOwner)theEObject;
				T result = caseMenuOwner(menuOwner);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.TOOL_OWNER: {
				ToolOwner toolOwner = (ToolOwner)theEObject;
				T result = caseToolOwner(toolOwner);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.APPEARANCE_STEWARD: {
				AppearanceSteward appearanceSteward = (AppearanceSteward)theEObject;
				T result = caseAppearanceSteward(appearanceSteward);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.AUDIT_CONTAINER: {
				AuditContainer auditContainer = (AuditContainer)theEObject;
				T result = caseAuditContainer(auditContainer);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.RULE_BASE: {
				RuleBase ruleBase = (RuleBase)theEObject;
				T result = caseRuleBase(ruleBase);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.AUDIT_RULE: {
				AuditRule auditRule = (AuditRule)theEObject;
				T result = caseAuditRule(auditRule);
				if (result == null) result = caseRuleBase(auditRule);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.DOMAIN_ELEMENT_TARGET: {
				DomainElementTarget domainElementTarget = (DomainElementTarget)theEObject;
				T result = caseDomainElementTarget(domainElementTarget);
				if (result == null) result = caseAuditable(domainElementTarget);
				if (result == null) result = caseMeasurable(domainElementTarget);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.DOMAIN_ATTRIBUTE_TARGET: {
				DomainAttributeTarget domainAttributeTarget = (DomainAttributeTarget)theEObject;
				T result = caseDomainAttributeTarget(domainAttributeTarget);
				if (result == null) result = caseAuditable(domainAttributeTarget);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.DIAGRAM_ELEMENT_TARGET: {
				DiagramElementTarget diagramElementTarget = (DiagramElementTarget)theEObject;
				T result = caseDiagramElementTarget(diagramElementTarget);
				if (result == null) result = caseAuditable(diagramElementTarget);
				if (result == null) result = caseMeasurable(diagramElementTarget);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.NOTATION_ELEMENT_TARGET: {
				NotationElementTarget notationElementTarget = (NotationElementTarget)theEObject;
				T result = caseNotationElementTarget(notationElementTarget);
				if (result == null) result = caseAuditable(notationElementTarget);
				if (result == null) result = caseMeasurable(notationElementTarget);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.METRIC_CONTAINER: {
				MetricContainer metricContainer = (MetricContainer)theEObject;
				T result = caseMetricContainer(metricContainer);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.METRIC_RULE: {
				MetricRule metricRule = (MetricRule)theEObject;
				T result = caseMetricRule(metricRule);
				if (result == null) result = caseRuleBase(metricRule);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.AUDITED_METRIC_TARGET: {
				AuditedMetricTarget auditedMetricTarget = (AuditedMetricTarget)theEObject;
				T result = caseAuditedMetricTarget(auditedMetricTarget);
				if (result == null) result = caseAuditable(auditedMetricTarget);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.AUDITABLE: {
				Auditable auditable = (Auditable)theEObject;
				T result = caseAuditable(auditable);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.MEASURABLE: {
				Measurable measurable = (Measurable)theEObject;
				T result = caseMeasurable(measurable);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			default: return defaultCase(theEObject);
		}
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Mapping Entry</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Mapping Entry</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseMappingEntry(MappingEntry object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Needs Containment</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Needs Containment</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseNeedsContainment(NeedsContainment object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Node Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Node Reference</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseNodeReference(NodeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Child Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Child Reference</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseChildReference(ChildReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Top Node Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Top Node Reference</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseTopNodeReference(TopNodeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Node Mapping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Node Mapping</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseNodeMapping(NodeMapping object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Compartment Mapping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Compartment Mapping</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCompartmentMapping(CompartmentMapping object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Link Mapping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Link Mapping</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseLinkMapping(LinkMapping object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Canvas Mapping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Canvas Mapping</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCanvasMapping(CanvasMapping object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Label Mapping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Label Mapping</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseLabelMapping(LabelMapping object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Feature Label Mapping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Feature Label Mapping</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseFeatureLabelMapping(FeatureLabelMapping object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Design Label Mapping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Design Label Mapping</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseDesignLabelMapping(DesignLabelMapping object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Mapping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Mapping</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseMapping(Mapping object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Constraint</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Constraint</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseConstraint(Constraint object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Link Constraints</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Link Constraints</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseLinkConstraints(LinkConstraints object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Value Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Value Expression</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseValueExpression(ValueExpression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Element Initializer</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Element Initializer</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseElementInitializer(ElementInitializer object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Feature Seq Initializer</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Feature Seq Initializer</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseFeatureSeqInitializer(FeatureSeqInitializer object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Feature Initializer</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Feature Initializer</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseFeatureInitializer(FeatureInitializer object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Feature Value Spec</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Feature Value Spec</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseFeatureValueSpec(FeatureValueSpec object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Reference New Element Spec</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Reference New Element Spec</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseReferenceNewElementSpec(ReferenceNewElementSpec object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Menu Owner</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Menu Owner</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseMenuOwner(MenuOwner object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Tool Owner</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Tool Owner</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseToolOwner(ToolOwner object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Appearance Steward</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Appearance Steward</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseAppearanceSteward(AppearanceSteward object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Audit Container</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Audit Container</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseAuditContainer(AuditContainer object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Audit Rule</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Audit Rule</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseAuditRule(AuditRule object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Rule Base</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Rule Base</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseRuleBase(RuleBase object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Domain Element Target</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Domain Element Target</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseDomainElementTarget(DomainElementTarget object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Domain Attribute Target</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Domain Attribute Target</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseDomainAttributeTarget(DomainAttributeTarget object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Diagram Element Target</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Diagram Element Target</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseDiagramElementTarget(DiagramElementTarget object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Notation Element Target</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Notation Element Target</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseNotationElementTarget(NotationElementTarget object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Metric Container</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Metric Container</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseMetricContainer(MetricContainer object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Metric Rule</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Metric Rule</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseMetricRule(MetricRule object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Audited Metric Target</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Audited Metric Target</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseAuditedMetricTarget(AuditedMetricTarget object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Auditable</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Auditable</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseAuditable(Auditable object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Measurable</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Measurable</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseMeasurable(Measurable object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch, but this is the last case anyway.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject)
	 * @@generated
	 */
	public T defaultCase(EObject object) {
		return null;
	}

} //GMFMapSwitch
@


1.24
log
@regenerated with EMF 2.4M5
@
text
@a247 1
				if (result == null) result = caseValueExpression(featureValueSpec);
@


1.23
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d365 1
a365 1
	 * Returns the result of interpretting the object as an instance of '<em>Mapping Entry</em>'.
d371 1
a371 1
	 * @@return the result of interpretting the object as an instance of '<em>Mapping Entry</em>'.
d380 1
a380 1
	 * Returns the result of interpretting the object as an instance of '<em>Needs Containment</em>'.
d386 1
a386 1
	 * @@return the result of interpretting the object as an instance of '<em>Needs Containment</em>'.
d395 1
a395 1
	 * Returns the result of interpretting the object as an instance of '<em>Node Reference</em>'.
d401 1
a401 1
	 * @@return the result of interpretting the object as an instance of '<em>Node Reference</em>'.
d410 1
a410 1
	 * Returns the result of interpretting the object as an instance of '<em>Child Reference</em>'.
d416 1
a416 1
	 * @@return the result of interpretting the object as an instance of '<em>Child Reference</em>'.
d425 1
a425 1
	 * Returns the result of interpretting the object as an instance of '<em>Top Node Reference</em>'.
d431 1
a431 1
	 * @@return the result of interpretting the object as an instance of '<em>Top Node Reference</em>'.
d440 1
a440 1
	 * Returns the result of interpretting the object as an instance of '<em>Node Mapping</em>'.
d446 1
a446 1
	 * @@return the result of interpretting the object as an instance of '<em>Node Mapping</em>'.
d455 1
a455 1
	 * Returns the result of interpretting the object as an instance of '<em>Compartment Mapping</em>'.
d461 1
a461 1
	 * @@return the result of interpretting the object as an instance of '<em>Compartment Mapping</em>'.
d470 1
a470 1
	 * Returns the result of interpretting the object as an instance of '<em>Link Mapping</em>'.
d476 1
a476 1
	 * @@return the result of interpretting the object as an instance of '<em>Link Mapping</em>'.
d485 1
a485 1
	 * Returns the result of interpretting the object as an instance of '<em>Canvas Mapping</em>'.
d491 1
a491 1
	 * @@return the result of interpretting the object as an instance of '<em>Canvas Mapping</em>'.
d500 1
a500 1
	 * Returns the result of interpretting the object as an instance of '<em>Label Mapping</em>'.
d506 1
a506 1
	 * @@return the result of interpretting the object as an instance of '<em>Label Mapping</em>'.
d515 1
a515 1
	 * Returns the result of interpretting the object as an instance of '<em>Feature Label Mapping</em>'.
d521 1
a521 1
	 * @@return the result of interpretting the object as an instance of '<em>Feature Label Mapping</em>'.
d530 1
a530 1
	 * Returns the result of interpretting the object as an instance of '<em>Design Label Mapping</em>'.
d536 1
a536 1
	 * @@return the result of interpretting the object as an instance of '<em>Design Label Mapping</em>'.
d545 1
a545 1
	 * Returns the result of interpretting the object as an instance of '<em>Mapping</em>'.
d551 1
a551 1
	 * @@return the result of interpretting the object as an instance of '<em>Mapping</em>'.
d560 1
a560 1
	 * Returns the result of interpretting the object as an instance of '<em>Constraint</em>'.
d566 1
a566 1
	 * @@return the result of interpretting the object as an instance of '<em>Constraint</em>'.
d575 1
a575 1
	 * Returns the result of interpretting the object as an instance of '<em>Link Constraints</em>'.
d581 1
a581 1
	 * @@return the result of interpretting the object as an instance of '<em>Link Constraints</em>'.
d590 1
a590 1
	 * Returns the result of interpretting the object as an instance of '<em>Value Expression</em>'.
d596 1
a596 1
	 * @@return the result of interpretting the object as an instance of '<em>Value Expression</em>'.
d605 1
a605 1
	 * Returns the result of interpretting the object as an instance of '<em>Element Initializer</em>'.
d611 1
a611 1
	 * @@return the result of interpretting the object as an instance of '<em>Element Initializer</em>'.
d620 1
a620 1
	 * Returns the result of interpretting the object as an instance of '<em>Feature Seq Initializer</em>'.
d626 1
a626 1
	 * @@return the result of interpretting the object as an instance of '<em>Feature Seq Initializer</em>'.
d635 1
a635 1
	 * Returns the result of interpretting the object as an instance of '<em>Feature Initializer</em>'.
d641 1
a641 1
	 * @@return the result of interpretting the object as an instance of '<em>Feature Initializer</em>'.
d650 1
a650 1
	 * Returns the result of interpretting the object as an instance of '<em>Feature Value Spec</em>'.
d656 1
a656 1
	 * @@return the result of interpretting the object as an instance of '<em>Feature Value Spec</em>'.
d665 1
a665 1
	 * Returns the result of interpretting the object as an instance of '<em>Reference New Element Spec</em>'.
d671 1
a671 1
	 * @@return the result of interpretting the object as an instance of '<em>Reference New Element Spec</em>'.
d680 1
a680 1
	 * Returns the result of interpretting the object as an instance of '<em>Menu Owner</em>'.
d686 1
a686 1
	 * @@return the result of interpretting the object as an instance of '<em>Menu Owner</em>'.
d695 1
a695 1
	 * Returns the result of interpretting the object as an instance of '<em>Tool Owner</em>'.
d701 1
a701 1
	 * @@return the result of interpretting the object as an instance of '<em>Tool Owner</em>'.
d710 1
a710 1
	 * Returns the result of interpretting the object as an instance of '<em>Appearance Steward</em>'.
d716 1
a716 1
	 * @@return the result of interpretting the object as an instance of '<em>Appearance Steward</em>'.
d725 1
a725 1
	 * Returns the result of interpretting the object as an instance of '<em>Audit Container</em>'.
d731 1
a731 1
	 * @@return the result of interpretting the object as an instance of '<em>Audit Container</em>'.
d740 1
a740 1
	 * Returns the result of interpretting the object as an instance of '<em>Audit Rule</em>'.
d746 1
a746 1
	 * @@return the result of interpretting the object as an instance of '<em>Audit Rule</em>'.
d755 1
a755 1
	 * Returns the result of interpretting the object as an instance of '<em>Rule Base</em>'.
d761 1
a761 1
	 * @@return the result of interpretting the object as an instance of '<em>Rule Base</em>'.
d770 1
a770 1
	 * Returns the result of interpretting the object as an instance of '<em>Domain Element Target</em>'.
d776 1
a776 1
	 * @@return the result of interpretting the object as an instance of '<em>Domain Element Target</em>'.
d785 1
a785 1
	 * Returns the result of interpretting the object as an instance of '<em>Domain Attribute Target</em>'.
d791 1
a791 1
	 * @@return the result of interpretting the object as an instance of '<em>Domain Attribute Target</em>'.
d800 1
a800 1
	 * Returns the result of interpretting the object as an instance of '<em>Diagram Element Target</em>'.
d806 1
a806 1
	 * @@return the result of interpretting the object as an instance of '<em>Diagram Element Target</em>'.
d815 1
a815 1
	 * Returns the result of interpretting the object as an instance of '<em>Notation Element Target</em>'.
d821 1
a821 1
	 * @@return the result of interpretting the object as an instance of '<em>Notation Element Target</em>'.
d830 1
a830 1
	 * Returns the result of interpretting the object as an instance of '<em>Metric Container</em>'.
d836 1
a836 1
	 * @@return the result of interpretting the object as an instance of '<em>Metric Container</em>'.
d845 1
a845 1
	 * Returns the result of interpretting the object as an instance of '<em>Metric Rule</em>'.
d851 1
a851 1
	 * @@return the result of interpretting the object as an instance of '<em>Metric Rule</em>'.
d860 1
a860 1
	 * Returns the result of interpretting the object as an instance of '<em>Audited Metric Target</em>'.
d866 1
a866 1
	 * @@return the result of interpretting the object as an instance of '<em>Audited Metric Target</em>'.
d875 1
a875 1
	 * Returns the result of interpretting the object as an instance of '<em>Auditable</em>'.
d881 1
a881 1
	 * @@return the result of interpretting the object as an instance of '<em>Auditable</em>'.
d890 1
a890 1
	 * Returns the result of interpretting the object as an instance of '<em>Measurable</em>'.
d896 1
a896 1
	 * @@return the result of interpretting the object as an instance of '<em>Measurable</em>'.
d905 1
a905 1
	 * Returns the result of interpretting the object as an instance of '<em>EObject</em>'.
d911 1
a911 1
	 * @@return the result of interpretting the object as an instance of '<em>EObject</em>'.
@


1.22
log
@[161380] Inroduce label mapping subclasses
@
text
@d52 1
a52 1
public class GMFMapSwitch {
d80 1
a80 1
	public Object doSwitch(EObject theEObject) {
d91 1
a91 1
	protected Object doSwitch(EClass theEClass, EObject theEObject) {
d96 1
a96 1
			List eSuperTypes = theEClass.getESuperTypes();
d100 1
a100 1
					doSwitch((EClass)eSuperTypes.get(0), theEObject);
d111 1
a111 1
	protected Object doSwitch(int classifierID, EObject theEObject) {
d115 1
a115 1
				Object result = caseMapping(mapping);
d121 1
a121 1
				Object result = caseMappingEntry(mappingEntry);
d127 1
a127 1
				Object result = caseNeedsContainment(needsContainment);
d133 1
a133 1
				Object result = caseNodeReference(nodeReference);
d140 1
a140 1
				Object result = caseChildReference(childReference);
d148 1
a148 1
				Object result = caseTopNodeReference(topNodeReference);
d156 1
a156 1
				Object result = caseNodeMapping(nodeMapping);
d166 1
a166 1
				Object result = caseCompartmentMapping(compartmentMapping);
d172 1
a172 1
				Object result = caseLinkMapping(linkMapping);
d183 1
a183 1
				Object result = caseCanvasMapping(canvasMapping);
d189 1
a189 1
				Object result = caseLabelMapping(labelMapping);
d195 1
a195 1
				Object result = caseFeatureLabelMapping(featureLabelMapping);
d202 1
a202 1
				Object result = caseDesignLabelMapping(designLabelMapping);
d209 1
a209 1
				Object result = caseConstraint(constraint);
d216 1
a216 1
				Object result = caseLinkConstraints(linkConstraints);
d222 1
a222 1
				Object result = caseValueExpression(valueExpression);
d228 1
a228 1
				Object result = caseElementInitializer(elementInitializer);
d234 1
a234 1
				Object result = caseFeatureSeqInitializer(featureSeqInitializer);
d241 1
a241 1
				Object result = caseFeatureInitializer(featureInitializer);
d247 1
a247 1
				Object result = caseFeatureValueSpec(featureValueSpec);
d255 1
a255 1
				Object result = caseReferenceNewElementSpec(referenceNewElementSpec);
d262 1
a262 1
				Object result = caseMenuOwner(menuOwner);
d268 1
a268 1
				Object result = caseToolOwner(toolOwner);
d274 1
a274 1
				Object result = caseAppearanceSteward(appearanceSteward);
d280 1
a280 1
				Object result = caseAuditContainer(auditContainer);
d286 1
a286 1
				Object result = caseRuleBase(ruleBase);
d292 1
a292 1
				Object result = caseAuditRule(auditRule);
d299 1
a299 1
				Object result = caseDomainElementTarget(domainElementTarget);
d307 1
a307 1
				Object result = caseDomainAttributeTarget(domainAttributeTarget);
d314 1
a314 1
				Object result = caseDiagramElementTarget(diagramElementTarget);
d322 1
a322 1
				Object result = caseNotationElementTarget(notationElementTarget);
d330 1
a330 1
				Object result = caseMetricContainer(metricContainer);
d336 1
a336 1
				Object result = caseMetricRule(metricRule);
d343 1
a343 1
				Object result = caseAuditedMetricTarget(auditedMetricTarget);
d350 1
a350 1
				Object result = caseAuditable(auditable);
d356 1
a356 1
				Object result = caseMeasurable(measurable);
d375 1
a375 1
	public Object caseMappingEntry(MappingEntry object) {
d390 1
a390 1
	public Object caseNeedsContainment(NeedsContainment object) {
d405 1
a405 1
	public Object caseNodeReference(NodeReference object) {
d420 1
a420 1
	public Object caseChildReference(ChildReference object) {
d435 1
a435 1
	public Object caseTopNodeReference(TopNodeReference object) {
d450 1
a450 1
	public Object caseNodeMapping(NodeMapping object) {
d465 1
a465 1
	public Object caseCompartmentMapping(CompartmentMapping object) {
d480 1
a480 1
	public Object caseLinkMapping(LinkMapping object) {
d495 1
a495 1
	public Object caseCanvasMapping(CanvasMapping object) {
d510 1
a510 1
	public Object caseLabelMapping(LabelMapping object) {
d525 1
a525 1
	public Object caseFeatureLabelMapping(FeatureLabelMapping object) {
d540 1
a540 1
	public Object caseDesignLabelMapping(DesignLabelMapping object) {
d555 1
a555 1
	public Object caseMapping(Mapping object) {
d570 1
a570 1
	public Object caseConstraint(Constraint object) {
d585 1
a585 1
	public Object caseLinkConstraints(LinkConstraints object) {
d600 1
a600 1
	public Object caseValueExpression(ValueExpression object) {
d615 1
a615 1
	public Object caseElementInitializer(ElementInitializer object) {
d630 1
a630 1
	public Object caseFeatureSeqInitializer(FeatureSeqInitializer object) {
d645 1
a645 1
	public Object caseFeatureInitializer(FeatureInitializer object) {
d660 1
a660 1
	public Object caseFeatureValueSpec(FeatureValueSpec object) {
d675 1
a675 1
	public Object caseReferenceNewElementSpec(ReferenceNewElementSpec object) {
d690 1
a690 1
	public Object caseMenuOwner(MenuOwner object) {
d705 1
a705 1
	public Object caseToolOwner(ToolOwner object) {
d720 1
a720 1
	public Object caseAppearanceSteward(AppearanceSteward object) {
d735 1
a735 1
	public Object caseAuditContainer(AuditContainer object) {
d750 1
a750 1
	public Object caseAuditRule(AuditRule object) {
d765 1
a765 1
	public Object caseRuleBase(RuleBase object) {
d780 1
a780 1
	public Object caseDomainElementTarget(DomainElementTarget object) {
d795 1
a795 1
	public Object caseDomainAttributeTarget(DomainAttributeTarget object) {
d810 1
a810 1
	public Object caseDiagramElementTarget(DiagramElementTarget object) {
d825 1
a825 1
	public Object caseNotationElementTarget(NotationElementTarget object) {
d840 1
a840 1
	public Object caseMetricContainer(MetricContainer object) {
d855 1
a855 1
	public Object caseMetricRule(MetricRule object) {
d870 1
a870 1
	public Object caseAuditedMetricTarget(AuditedMetricTarget object) {
d885 1
a885 1
	public Object caseAuditable(Auditable object) {
d900 1
a900 1
	public Object caseMeasurable(Measurable object) {
d915 1
a915 1
	public Object defaultCase(EObject object) {
@


1.21
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
@
text
@d193 14
d515 30
@


1.20
log
@overriding recent changes introduced (along with fixing #133836) in GMFMap model, as it's merely a 'shortcut', quite frequent though. Still, adding few new concepts just for the sake of single usecase (I do admit it's popular) seems excessive to me.
GMFMap kept the same as old (no new notions introduced), GMFGraph got generalization from DiagramLabel to DiagramNode to make it possible to use DiagramLabels for NodeMappings (thus, it's possible to detect such nodes in the DGMT)
Tests added to make sure we generate correct genModel for both cases.
@
text
@d225 6
d235 8
d591 15
d621 15
@


1.19
log
@revert to gmfmap model compatibility
@
text
@a163 12
			case GMFMapPackage.LABEL_NODE_MAPPING: {
				LabelNodeMapping labelNodeMapping = (LabelNodeMapping)theEObject;
				Object result = caseLabelNodeMapping(labelNodeMapping);
				if (result == null) result = caseNodeMapping(labelNodeMapping);
				if (result == null) result = caseLabelFlavour(labelNodeMapping);
				if (result == null) result = caseMappingEntry(labelNodeMapping);
				if (result == null) result = caseMenuOwner(labelNodeMapping);
				if (result == null) result = caseToolOwner(labelNodeMapping);
				if (result == null) result = caseAppearanceSteward(labelNodeMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
a189 7
				if (result == null) result = caseLabelFlavour(labelMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.LABEL_FLAVOUR: {
				LabelFlavour labelFlavour = (LabelFlavour)theEObject;
				Object result = caseLabelFlavour(labelFlavour);
a426 15
	 * Returns the result of interpretting the object as an instance of '<em>Label Node Mapping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpretting the object as an instance of '<em>Label Node Mapping</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public Object caseLabelNodeMapping(LabelNodeMapping object) {
		return null;
	}

	/**
a486 15
	 * Returns the result of interpretting the object as an instance of '<em>Label Flavour</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpretting the object as an instance of '<em>Label Flavour</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public Object caseLabelFlavour(LabelFlavour object) {
		return null;
	}

	/**
@


1.18
log
@#133836 Creating a child node without a label causes error
@
text
@a163 11
			case GMFMapPackage.SHAPE_NODE_MAPPING: {
				ShapeNodeMapping shapeNodeMapping = (ShapeNodeMapping)theEObject;
				Object result = caseShapeNodeMapping(shapeNodeMapping);
				if (result == null) result = caseNodeMapping(shapeNodeMapping);
				if (result == null) result = caseMappingEntry(shapeNodeMapping);
				if (result == null) result = caseMenuOwner(shapeNodeMapping);
				if (result == null) result = caseToolOwner(shapeNodeMapping);
				if (result == null) result = caseAppearanceSteward(shapeNodeMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
a445 15
	 * Returns the result of interpretting the object as an instance of '<em>Shape Node Mapping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpretting the object as an instance of '<em>Shape Node Mapping</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public Object caseShapeNodeMapping(ShapeNodeMapping object) {
		return null;
	}

	/**
@


1.17
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@d164 23
d213 7
d457 30
d547 15
@


1.16
log
@[rdvorak] #114196 Allow for the definition of diagram validation rules
@
text
@d277 7
d697 15
@


1.15
log
@#130009 Enable audit rules on diagram (notation model) elements in gmfmap model
@
text
@a268 6
			case GMFMapPackage.RULE_TARGET: {
				RuleTarget ruleTarget = (RuleTarget)theEObject;
				Object result = caseRuleTarget(ruleTarget);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
d272 2
a273 1
				if (result == null) result = caseRuleTarget(domainElementTarget);
d280 2
a281 1
				if (result == null) result = caseRuleTarget(diagramElementTarget);
d288 34
a321 1
				if (result == null) result = caseRuleTarget(notationElementTarget);
d675 46
a720 1
	 * Returns the result of interpretting the object as an instance of '<em>Rule Target</em>'.
d726 1
a726 1
	 * @@return the result of interpretting the object as an instance of '<em>Rule Target</em>'.
d730 1
a730 1
	public Object caseRuleTarget(RuleTarget object) {
d735 16
a750 1
	 * Returns the result of interpretting the object as an instance of '<em>Domain Element Target</em>'.
d756 1
a756 1
	 * @@return the result of interpretting the object as an instance of '<em>Domain Element Target</em>'.
d760 1
a760 1
	public Object caseDomainElementTarget(DomainElementTarget object) {
d765 1
a765 1
	 * Returns the result of interpretting the object as an instance of '<em>Diagram Element Target</em>'.
d771 1
a771 1
	 * @@return the result of interpretting the object as an instance of '<em>Diagram Element Target</em>'.
d775 1
a775 1
	public Object caseDiagramElementTarget(DiagramElementTarget object) {
d780 1
a780 1
	 * Returns the result of interpretting the object as an instance of '<em>Notation Element Target</em>'.
d786 1
a786 1
	 * @@return the result of interpretting the object as an instance of '<em>Notation Element Target</em>'.
d790 1
a790 1
	public Object caseNotationElementTarget(NotationElementTarget object) {
@


1.14
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d13 2
d256 6
d265 28
d631 75
@


1.13
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@a12 3
import org.eclipse.gmf.mappings.*;

import org.eclipse.gmf.mappings.AbstractNodeMapping;
d17 1
a17 1
import org.eclipse.gmf.mappings.ChildNodeMapping;
d24 1
d30 1
d32 1
d34 1
d123 26
a148 7
			case GMFMapPackage.ABSTRACT_NODE_MAPPING: {
				AbstractNodeMapping abstractNodeMapping = (AbstractNodeMapping)theEObject;
				Object result = caseAbstractNodeMapping(abstractNodeMapping);
				if (result == null) result = caseMappingEntry(abstractNodeMapping);
				if (result == null) result = caseMenuOwner(abstractNodeMapping);
				if (result == null) result = caseToolOwner(abstractNodeMapping);
				if (result == null) result = caseAppearanceSteward(abstractNodeMapping);
a154 1
				if (result == null) result = caseAbstractNodeMapping(nodeMapping);
a161 11
			case GMFMapPackage.CHILD_NODE_MAPPING: {
				ChildNodeMapping childNodeMapping = (ChildNodeMapping)theEObject;
				Object result = caseChildNodeMapping(childNodeMapping);
				if (result == null) result = caseAbstractNodeMapping(childNodeMapping);
				if (result == null) result = caseMappingEntry(childNodeMapping);
				if (result == null) result = caseMenuOwner(childNodeMapping);
				if (result == null) result = caseToolOwner(childNodeMapping);
				if (result == null) result = caseAppearanceSteward(childNodeMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
d172 1
d265 1
a265 1
	 * Returns the result of interpretting the object as an instance of '<em>Abstract Node Mapping</em>'.
d271 1
a271 1
	 * @@return the result of interpretting the object as an instance of '<em>Abstract Node Mapping</em>'.
d275 1
a275 1
	public Object caseAbstractNodeMapping(AbstractNodeMapping object) {
d280 31
a310 1
	 * Returns the result of interpretting the object as an instance of '<em>Mapping Entry</em>'.
d316 1
a316 1
	 * @@return the result of interpretting the object as an instance of '<em>Mapping Entry</em>'.
d320 1
a320 1
	public Object caseMappingEntry(MappingEntry object) {
d325 1
a325 1
	 * Returns the result of interpretting the object as an instance of '<em>Node Mapping</em>'.
d331 1
a331 1
	 * @@return the result of interpretting the object as an instance of '<em>Node Mapping</em>'.
d335 1
a335 1
	public Object caseNodeMapping(NodeMapping object) {
d340 1
a340 1
	 * Returns the result of interpretting the object as an instance of '<em>Child Node Mapping</em>'.
d346 1
a346 1
	 * @@return the result of interpretting the object as an instance of '<em>Child Node Mapping</em>'.
d350 1
a350 1
	public Object caseChildNodeMapping(ChildNodeMapping object) {
@


1.12
log
@#127461 Support multiple labels definition in the mapping model
@
text
@a181 14
			case GMFMapPackage.NODE_LABEL_MAPPING: {
				NodeLabelMapping nodeLabelMapping = (NodeLabelMapping)theEObject;
				Object result = caseNodeLabelMapping(nodeLabelMapping);
				if (result == null) result = caseLabelMapping(nodeLabelMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.LINK_LABEL_MAPPING: {
				LinkLabelMapping linkLabelMapping = (LinkLabelMapping)theEObject;
				Object result = caseLinkLabelMapping(linkLabelMapping);
				if (result == null) result = caseLabelMapping(linkLabelMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
a375 30
	 * Returns the result of interpretting the object as an instance of '<em>Node Label Mapping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpretting the object as an instance of '<em>Node Label Mapping</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public Object caseNodeLabelMapping(NodeLabelMapping object) {
		return null;
	}

	/**
	 * Returns the result of interpretting the object as an instance of '<em>Link Label Mapping</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpretting the object as an instance of '<em>Link Label Mapping</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public Object caseLinkLabelMapping(LinkLabelMapping object) {
		return null;
	}

	/**
@


1.11
log
@#114197 - tooling definition in place
@
text
@d13 2
d176 20
d375 45
@


1.10
log
@[rdvorak] #123279 audits definition in gmfmap
@
text
@a12 2
import org.eclipse.gmf.mappings.*;

d14 3
d19 1
a20 1
import org.eclipse.gmf.mappings.CreationTool;
d29 1
a29 1
import org.eclipse.gmf.mappings.NewActionTool;
d31 1
a31 2
import org.eclipse.gmf.mappings.Tool;
import org.eclipse.gmf.mappings.ToolGroup;
d108 3
a110 3
			case GMFMapPackage.ABSTRACT_NODE_MAPPING: {
				AbstractNodeMapping abstractNodeMapping = (AbstractNodeMapping)theEObject;
				Object result = caseAbstractNodeMapping(abstractNodeMapping);
d120 10
d135 3
d145 4
d162 3
a170 33
				if (result == null) result = caseMappingEntry(canvasMapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.MAPPING: {
				Mapping mapping = (Mapping)theEObject;
				Object result = caseMapping(mapping);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.TOOL_GROUP: {
				ToolGroup toolGroup = (ToolGroup)theEObject;
				Object result = caseToolGroup(toolGroup);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.TOOL: {
				Tool tool = (Tool)theEObject;
				Object result = caseTool(tool);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.CREATION_TOOL: {
				CreationTool creationTool = (CreationTool)theEObject;
				Object result = caseCreationTool(creationTool);
				if (result == null) result = caseTool(creationTool);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFMapPackage.NEW_ACTION_TOOL: {
				NewActionTool newActionTool = (NewActionTool)theEObject;
				Object result = caseNewActionTool(newActionTool);
				if (result == null) result = caseTool(newActionTool);
d213 18
d368 1
a368 1
	 * Returns the result of interpretting the object as an instance of '<em>Tool Group</em>'.
d374 1
a374 1
	 * @@return the result of interpretting the object as an instance of '<em>Tool Group</em>'.
d378 1
a378 1
	public Object caseToolGroup(ToolGroup object) {
d383 1
a383 1
	 * Returns the result of interpretting the object as an instance of '<em>Tool</em>'.
d389 1
a389 1
	 * @@return the result of interpretting the object as an instance of '<em>Tool</em>'.
d393 1
a393 1
	public Object caseTool(Tool object) {
d398 1
a398 1
	 * Returns the result of interpretting the object as an instance of '<em>Creation Tool</em>'.
d404 1
a404 1
	 * @@return the result of interpretting the object as an instance of '<em>Creation Tool</em>'.
d408 1
a408 1
	public Object caseCreationTool(CreationTool object) {
d413 1
a413 1
	 * Returns the result of interpretting the object as an instance of '<em>New Action Tool</em>'.
d419 1
a419 1
	 * @@return the result of interpretting the object as an instance of '<em>New Action Tool</em>'.
d423 1
a423 1
	public Object caseNewActionTool(NewActionTool object) {
d428 1
a428 1
	 * Returns the result of interpretting the object as an instance of '<em>Constraint</em>'.
d434 1
a434 1
	 * @@return the result of interpretting the object as an instance of '<em>Constraint</em>'.
d438 1
a438 1
	public Object caseConstraint(Constraint object) {
d443 1
a443 1
	 * Returns the result of interpretting the object as an instance of '<em>Link Constraints</em>'.
d449 1
a449 1
	 * @@return the result of interpretting the object as an instance of '<em>Link Constraints</em>'.
d453 1
a453 16
	public Object caseLinkConstraints(LinkConstraints object) {
		return null;
	}

	/**
	 * Returns the result of interpretting the object as an instance of '<em>Value Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpretting the object as an instance of '<em>Value Expression</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public Object caseValueExpression(ValueExpression object) {
d458 1
a458 1
	 * Returns the result of interpretting the object as an instance of '<em>Element Initializer</em>'.
d464 1
a464 1
	 * @@return the result of interpretting the object as an instance of '<em>Element Initializer</em>'.
d468 1
a468 1
	public Object caseElementInitializer(ElementInitializer object) {
d473 1
a473 1
	 * Returns the result of interpretting the object as an instance of '<em>Feature Seq Initializer</em>'.
d479 1
a479 1
	 * @@return the result of interpretting the object as an instance of '<em>Feature Seq Initializer</em>'.
d483 1
a483 1
	public Object caseFeatureSeqInitializer(FeatureSeqInitializer object) {
d488 1
a488 1
	 * Returns the result of interpretting the object as an instance of '<em>Feature Value Spec</em>'.
d494 1
a494 1
	 * @@return the result of interpretting the object as an instance of '<em>Feature Value Spec</em>'.
d498 1
a498 1
	public Object caseFeatureValueSpec(FeatureValueSpec object) {
@


1.9
log
@#119709
Adding Compartment mapping
@
text
@d226 12
d513 30
@


1.8
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@d13 2
d135 6
d291 15
@


1.7
log
@Adding method to get DomainElementMetaClass for the transformation code.
@
text
@d13 1
a13 2
import org.eclipse.gmf.mappings.*;

d16 5
d22 1
d26 1
d28 3
d153 26
d328 60
@


1.6
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d112 1
a113 1
				if (result == null) result = caseAbstractNodeMapping(nodeMapping);
@


1.5
log
@#118053 update models
@
text
@d151 6
d308 15
@


1.4
log
@[rdvorak] #112773 specify init expressions while relating diagram elements with domain
@
text
@d97 6
d113 1
d120 1
d182 15
@


1.3
log
@[rdvorak] #112505 constraint specification in gmfmap
@
text
@d149 20
d294 45
@


1.2
log
@[ashatalin] Should be possible to specify editable feature and domain element for child nodes.
@
text
@d136 13
d244 30
@


1.1
log
@*** empty log message ***
@
text
@d13 2
@

