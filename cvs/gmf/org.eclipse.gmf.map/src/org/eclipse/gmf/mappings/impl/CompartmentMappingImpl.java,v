head	1.7;
access;
symbols
	v20080813-1520:1.7
	v20080722-1827:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080521:1.7
	v20080425-1959:1.7
	v20080417-1610:1.6
	v20080322-0000:1.6
	v20080222-1200:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070608-1300:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070520-1200:1.5
	v20070518-1300:1.5
	v20070517-1200:1.5
	v20070504-1000:1.5
	v20070427-0600:1.5
	v20070330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070208-1800:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.3
	M1_20:1.3
	v20060904-1500:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060519-1300:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2008.04.18.14.43.25;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	2e3f4808b38b4567;

1.6
date	2008.03.04.16.50.29;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	5e4d47cd7dd44567;

1.5
date	2007.04.25.08.08.29;	author dstadnik;	state Exp;
branches;
next	1.4;
commitid	7004462f0c7a4567;

1.4
date	2007.03.14.13.00.04;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	128545f7f1cb4567;

1.3
date	2006.02.23.15.45.31;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.10.18.35.28;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.07.19.23.17;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.gmfgraph.Compartment;
import org.eclipse.gmf.mappings.ChildReference;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.NodeMapping;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Compartment Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.CompartmentMappingImpl#getCompartment <em>Compartment</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.CompartmentMappingImpl#getParentNode <em>Parent Node</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.CompartmentMappingImpl#getChildren <em>Children</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class CompartmentMappingImpl extends EObjectImpl implements CompartmentMapping {
	/**
	 * The cached value of the '{@@link #getCompartment() <em>Compartment</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getCompartment()
	 * @@generated
	 * @@ordered
	 */
	protected Compartment compartment;

	/**
	 * The cached value of the '{@@link #getChildren() <em>Children</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getChildren()
	 * @@generated
	 * @@ordered
	 */
	protected EList<ChildReference> children;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected CompartmentMappingImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFMapPackage.eINSTANCE.getCompartmentMapping();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Compartment getCompartment() {
		if (compartment != null && compartment.eIsProxy()) {
			InternalEObject oldCompartment = (InternalEObject)compartment;
			compartment = (Compartment)eResolveProxy(oldCompartment);
			if (compartment != oldCompartment) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFMapPackage.COMPARTMENT_MAPPING__COMPARTMENT, oldCompartment, compartment));
			}
		}
		return compartment;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Compartment basicGetCompartment() {
		return compartment;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setCompartment(Compartment newCompartment) {
		Compartment oldCompartment = compartment;
		compartment = newCompartment;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.COMPARTMENT_MAPPING__COMPARTMENT, oldCompartment, compartment));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NodeMapping getParentNode() {
		if (eContainerFeatureID != GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE) return null;
		return (NodeMapping)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<ChildReference> getChildren() {
		if (children == null) {
			children = new EObjectWithInverseResolvingEList<ChildReference>(ChildReference.class, this, GMFMapPackage.COMPARTMENT_MAPPING__CHILDREN, GMFMapPackage.CHILD_REFERENCE__COMPARTMENT);
		}
		return children;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE, msgs);
			case GMFMapPackage.COMPARTMENT_MAPPING__CHILDREN:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getChildren()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE:
				return eBasicSetContainer(null, GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE, msgs);
			case GMFMapPackage.COMPARTMENT_MAPPING__CHILDREN:
				return ((InternalEList<?>)getChildren()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE:
				return eInternalContainer().eInverseRemove(this, GMFMapPackage.NODE_MAPPING__COMPARTMENTS, NodeMapping.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFMapPackage.COMPARTMENT_MAPPING__COMPARTMENT:
				if (resolve) return getCompartment();
				return basicGetCompartment();
			case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE:
				return getParentNode();
			case GMFMapPackage.COMPARTMENT_MAPPING__CHILDREN:
				return getChildren();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFMapPackage.COMPARTMENT_MAPPING__COMPARTMENT:
				setCompartment((Compartment)newValue);
				return;
			case GMFMapPackage.COMPARTMENT_MAPPING__CHILDREN:
				getChildren().clear();
				getChildren().addAll((Collection<? extends ChildReference>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFMapPackage.COMPARTMENT_MAPPING__COMPARTMENT:
				setCompartment((Compartment)null);
				return;
			case GMFMapPackage.COMPARTMENT_MAPPING__CHILDREN:
				getChildren().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFMapPackage.COMPARTMENT_MAPPING__COMPARTMENT:
				return compartment != null;
			case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE:
				return getParentNode() != null;
			case GMFMapPackage.COMPARTMENT_MAPPING__CHILDREN:
				return children != null && !children.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //CompartmentMappingImpl
@


1.6
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a18 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a133 31
	public NotificationChain basicSetParentNode(NodeMapping newParentNode, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newParentNode, GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setParentNode(NodeMapping newParentNode) {
		if (newParentNode != eInternalContainer() || (eContainerFeatureID != GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE && newParentNode != null)) {
			if (EcoreUtil.isAncestor(this, newParentNode))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newParentNode != null)
				msgs = ((InternalEObject)newParentNode).eInverseAdd(this, GMFMapPackage.NODE_MAPPING__COMPARTMENTS, NodeMapping.class, msgs);
			msgs = basicSetParentNode(newParentNode, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE, newParentNode, newParentNode));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d153 1
a153 1
				return basicSetParentNode((NodeMapping)otherEnd, msgs);
d169 1
a169 1
				return basicSetParentNode(null, msgs);
a220 3
			case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE:
				setParentNode((NodeMapping)newValue);
				return;
a239 3
			case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE:
				setParentNode((NodeMapping)null);
				return;
@


1.5
log
@regenerated
@
text
@d19 1
d135 31
d185 1
a185 1
				return eBasicSetContainer(otherEnd, GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE, msgs);
d201 1
a201 1
				return eBasicSetContainer(null, GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE, msgs);
d253 3
d275 3
@


1.4
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d50 1
a50 1
	protected Compartment compartment = null;
d60 1
a60 1
	protected EList<ChildReference> children = null;
@


1.3
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d60 1
a60 1
	protected EList children = null;
d76 1
d134 1
a134 1
	public EList getChildren() {
d136 1
a136 1
			children = new EObjectWithInverseResolvingEList(ChildReference.class, this, GMFMapPackage.COMPARTMENT_MAPPING__CHILDREN, GMFMapPackage.CHILD_REFERENCE__COMPARTMENT);
d146 2
d155 1
a155 1
				return ((InternalEList)getChildren()).basicAdd(otherEnd, msgs);
d165 1
d171 1
a171 1
				return ((InternalEList)getChildren()).basicRemove(otherEnd, msgs);
d181 1
d195 1
d214 2
d223 1
a223 1
				getChildren().addAll((Collection)newValue);
d234 1
d252 1
@


1.2
log
@[rdvorak] #123279 audits definition in gmfmap
@
text
@d21 1
a21 2
import org.eclipse.gmf.mappings.AbstractNodeMapping;
import org.eclipse.gmf.mappings.ChildNodeMapping;
d24 1
a32 1
 *   <li>{@@link org.eclipse.gmf.mappings.impl.CompartmentMappingImpl#getParentNodeMapping <em>Parent Node Mapping</em>}</li>
d34 2
a35 1
 *   <li>{@@link org.eclipse.gmf.mappings.impl.CompartmentMappingImpl#getChildNodes <em>Child Nodes</em>}</li>
d53 1
a53 1
	 * The cached value of the '{@@link #getChildNodes() <em>Child Nodes</em>}' reference list.
d56 1
a56 1
	 * @@see #getChildNodes()
d60 1
a60 1
	protected EList childNodes = null;
a84 10
	public AbstractNodeMapping getParentNodeMapping() {
		if (eContainerFeatureID != GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING) return null;
		return (AbstractNodeMapping)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d123 13
a135 3
	public EList getChildNodes() {
		if (childNodes == null) {
			childNodes = new EObjectWithInverseResolvingEList(ChildNodeMapping.class, this, GMFMapPackage.COMPARTMENT_MAPPING__CHILD_NODES, GMFMapPackage.CHILD_NODE_MAPPING__COMPARTMENT);
d137 1
a137 1
		return childNodes;
d147 1
a147 1
			case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING:
d150 3
a152 3
				return eBasicSetContainer(otherEnd, GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING, msgs);
			case GMFMapPackage.COMPARTMENT_MAPPING__CHILD_NODES:
				return ((InternalEList)getChildNodes()).basicAdd(otherEnd, msgs);
d164 4
a167 4
			case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING:
				return eBasicSetContainer(null, GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING, msgs);
			case GMFMapPackage.COMPARTMENT_MAPPING__CHILD_NODES:
				return ((InternalEList)getChildNodes()).basicRemove(otherEnd, msgs);
d179 2
a180 2
			case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING:
				return eInternalContainer().eInverseRemove(this, GMFMapPackage.ABSTRACT_NODE_MAPPING__COMPARTMENT_MAPPINGS, AbstractNodeMapping.class, msgs);
a191 2
			case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING:
				return getParentNodeMapping();
d195 4
a198 2
			case GMFMapPackage.COMPARTMENT_MAPPING__CHILD_NODES:
				return getChildNodes();
d213 3
a215 3
			case GMFMapPackage.COMPARTMENT_MAPPING__CHILD_NODES:
				getChildNodes().clear();
				getChildNodes().addAll((Collection)newValue);
d231 2
a232 2
			case GMFMapPackage.COMPARTMENT_MAPPING__CHILD_NODES:
				getChildNodes().clear();
a244 2
			case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING:
				return getParentNodeMapping() != null;
d247 4
a250 2
			case GMFMapPackage.COMPARTMENT_MAPPING__CHILD_NODES:
				return childNodes != null && !childNodes.isEmpty();
@


1.1
log
@#119709
Adding Compartment mapping
@
text
@a12 1

a13 1

a14 1
import org.eclipse.emf.ecore.EStructuralFeature;
a15 1

a17 1

a19 1

a20 1

d87 1
a87 1
		return (AbstractNodeMapping)eContainer;
d97 2
a98 2
			Compartment oldCompartment = compartment;
			compartment = (Compartment)eResolveProxy((InternalEObject)compartment);
d145 8
a152 12
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING:
					if (eContainer != null)
						msgs = eBasicRemoveFromContainer(msgs);
					return eBasicSetContainer(otherEnd, GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING, msgs);
				case GMFMapPackage.COMPARTMENT_MAPPING__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicAdd(otherEnd, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
d154 1
a154 3
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
d162 6
a167 10
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING:
					return eBasicSetContainer(null, GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING, msgs);
				case GMFMapPackage.COMPARTMENT_MAPPING__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d169 1
a169 1
		return eBasicSetContainer(null, featureID, msgs);
d177 4
a180 8
	public NotificationChain eBasicRemoveFromContainer(NotificationChain msgs) {
		if (eContainerFeatureID >= 0) {
			switch (eContainerFeatureID) {
				case GMFMapPackage.COMPARTMENT_MAPPING__PARENT_NODE_MAPPING:
					return eContainer.eInverseRemove(this, GMFMapPackage.ABSTRACT_NODE_MAPPING__COMPARTMENT_MAPPINGS, AbstractNodeMapping.class, msgs);
				default:
					return eDynamicBasicRemoveFromContainer(msgs);
			}
d182 1
a182 1
		return eContainer.eInverseRemove(this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
d190 2
a191 2
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d200 1
a200 1
		return eDynamicGet(eFeature, resolve);
d208 2
a209 2
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d218 1
a218 1
		eDynamicSet(eFeature, newValue);
d226 2
a227 2
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d235 1
a235 1
		eDynamicUnset(eFeature);
d243 2
a244 2
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d252 1
a252 1
		return eDynamicIsSet(eFeature);
@

