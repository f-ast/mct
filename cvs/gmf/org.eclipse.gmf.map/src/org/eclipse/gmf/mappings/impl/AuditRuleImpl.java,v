head	1.6;
access;
symbols
	v20080813-1520:1.6
	v20080722-1827:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080521:1.6
	v20080425-1959:1.6
	v20080417-1610:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.6
	v20070518-1300:1.6
	v20070517-1200:1.6
	v20070504-1000:1.6
	v20070427-0600:1.6
	v20070330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070208-1800:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061013-1330:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060519-1300:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.04.25.08.08.30;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	7004462f0c7a4567;

1.5
date	2007.03.14.13.00.05;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	128545f7f1cb4567;

1.4
date	2006.04.25.19.15.49;	author radvorak;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.03.18.32.33;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.03.11.36.26;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.10.18.35.28;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@regenerated
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.gmf.mappings.AuditContainer;
import org.eclipse.gmf.mappings.AuditRule;
import org.eclipse.gmf.mappings.Auditable;
import org.eclipse.gmf.mappings.Constraint;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.Severity;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Audit Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#getName <em>Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#getDescription <em>Description</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#getId <em>Id</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#getRule <em>Rule</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#getTarget <em>Target</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#getSeverity <em>Severity</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#isUseInLiveMode <em>Use In Live Mode</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#getMessage <em>Message</em>}</li>
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#getContainer <em>Container</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class AuditRuleImpl extends EObjectImpl implements AuditRule {
	/**
	 * The default value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
	protected static final String DESCRIPTION_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
	protected String description = DESCRIPTION_EDEFAULT;

	/**
	 * The default value of the '{@@link #getId() <em>Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getId()
	 * @@generated
	 * @@ordered
	 */
	protected static final String ID_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getId() <em>Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getId()
	 * @@generated
	 * @@ordered
	 */
	protected String id = ID_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getRule() <em>Rule</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getRule()
	 * @@generated
	 * @@ordered
	 */
	protected Constraint rule;

	/**
	 * The cached value of the '{@@link #getTarget() <em>Target</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTarget()
	 * @@generated
	 * @@ordered
	 */
	protected Auditable target;

	/**
	 * The default value of the '{@@link #getSeverity() <em>Severity</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSeverity()
	 * @@generated
	 * @@ordered
	 */
	protected static final Severity SEVERITY_EDEFAULT = Severity.ERROR_LITERAL;

	/**
	 * The cached value of the '{@@link #getSeverity() <em>Severity</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSeverity()
	 * @@generated
	 * @@ordered
	 */
	protected Severity severity = SEVERITY_EDEFAULT;

	/**
	 * The default value of the '{@@link #isUseInLiveMode() <em>Use In Live Mode</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isUseInLiveMode()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean USE_IN_LIVE_MODE_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isUseInLiveMode() <em>Use In Live Mode</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isUseInLiveMode()
	 * @@generated
	 * @@ordered
	 */
	protected boolean useInLiveMode = USE_IN_LIVE_MODE_EDEFAULT;

	/**
	 * The default value of the '{@@link #getMessage() <em>Message</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMessage()
	 * @@generated
	 * @@ordered
	 */
	protected static final String MESSAGE_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getMessage() <em>Message</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMessage()
	 * @@generated
	 * @@ordered
	 */
	protected String message = MESSAGE_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected AuditRuleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFMapPackage.eINSTANCE.getAuditRule();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getId() {
		return id;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setId(String newId) {
		String oldId = id;
		id = newId;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_RULE__ID, oldId, id));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Constraint getRule() {
		return rule;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetRule(Constraint newRule, NotificationChain msgs) {
		Constraint oldRule = rule;
		rule = newRule;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_RULE__RULE, oldRule, newRule);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setRule(Constraint newRule) {
		if (newRule != rule) {
			NotificationChain msgs = null;
			if (rule != null)
				msgs = ((InternalEObject)rule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.AUDIT_RULE__RULE, null, msgs);
			if (newRule != null)
				msgs = ((InternalEObject)newRule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.AUDIT_RULE__RULE, null, msgs);
			msgs = basicSetRule(newRule, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_RULE__RULE, newRule, newRule));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Auditable getTarget() {
		return target;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetTarget(Auditable newTarget, NotificationChain msgs) {
		Auditable oldTarget = target;
		target = newTarget;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_RULE__TARGET, oldTarget, newTarget);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTarget(Auditable newTarget) {
		if (newTarget != target) {
			NotificationChain msgs = null;
			if (target != null)
				msgs = ((InternalEObject)target).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.AUDIT_RULE__TARGET, null, msgs);
			if (newTarget != null)
				msgs = ((InternalEObject)newTarget).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.AUDIT_RULE__TARGET, null, msgs);
			msgs = basicSetTarget(newTarget, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_RULE__TARGET, newTarget, newTarget));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_RULE__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Severity getSeverity() {
		return severity;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setSeverity(Severity newSeverity) {
		Severity oldSeverity = severity;
		severity = newSeverity == null ? SEVERITY_EDEFAULT : newSeverity;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_RULE__SEVERITY, oldSeverity, severity));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isUseInLiveMode() {
		return useInLiveMode;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setUseInLiveMode(boolean newUseInLiveMode) {
		boolean oldUseInLiveMode = useInLiveMode;
		useInLiveMode = newUseInLiveMode;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_RULE__USE_IN_LIVE_MODE, oldUseInLiveMode, useInLiveMode));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getMessage() {
		return message;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setMessage(String newMessage) {
		String oldMessage = message;
		message = newMessage;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_RULE__MESSAGE, oldMessage, message));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDescription(String newDescription) {
		String oldDescription = description;
		description = newDescription;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_RULE__DESCRIPTION, oldDescription, description));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public AuditContainer getContainer() {
		if (eContainerFeatureID != GMFMapPackage.AUDIT_RULE__CONTAINER) return null;
		return (AuditContainer)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetContainer(AuditContainer newContainer, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newContainer, GMFMapPackage.AUDIT_RULE__CONTAINER, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setContainer(AuditContainer newContainer) {
		if (newContainer != eInternalContainer() || (eContainerFeatureID != GMFMapPackage.AUDIT_RULE__CONTAINER && newContainer != null)) {
			if (EcoreUtil.isAncestor(this, newContainer))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newContainer != null)
				msgs = ((InternalEObject)newContainer).eInverseAdd(this, GMFMapPackage.AUDIT_CONTAINER__AUDITS, AuditContainer.class, msgs);
			msgs = basicSetContainer(newContainer, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_RULE__CONTAINER, newContainer, newContainer));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFMapPackage.AUDIT_RULE__CONTAINER:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetContainer((AuditContainer)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFMapPackage.AUDIT_RULE__RULE:
				return basicSetRule(null, msgs);
			case GMFMapPackage.AUDIT_RULE__TARGET:
				return basicSetTarget(null, msgs);
			case GMFMapPackage.AUDIT_RULE__CONTAINER:
				return basicSetContainer(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFMapPackage.AUDIT_RULE__CONTAINER:
				return eInternalContainer().eInverseRemove(this, GMFMapPackage.AUDIT_CONTAINER__AUDITS, AuditContainer.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFMapPackage.AUDIT_RULE__NAME:
				return getName();
			case GMFMapPackage.AUDIT_RULE__DESCRIPTION:
				return getDescription();
			case GMFMapPackage.AUDIT_RULE__ID:
				return getId();
			case GMFMapPackage.AUDIT_RULE__RULE:
				return getRule();
			case GMFMapPackage.AUDIT_RULE__TARGET:
				return getTarget();
			case GMFMapPackage.AUDIT_RULE__SEVERITY:
				return getSeverity();
			case GMFMapPackage.AUDIT_RULE__USE_IN_LIVE_MODE:
				return isUseInLiveMode() ? Boolean.TRUE : Boolean.FALSE;
			case GMFMapPackage.AUDIT_RULE__MESSAGE:
				return getMessage();
			case GMFMapPackage.AUDIT_RULE__CONTAINER:
				return getContainer();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFMapPackage.AUDIT_RULE__NAME:
				setName((String)newValue);
				return;
			case GMFMapPackage.AUDIT_RULE__DESCRIPTION:
				setDescription((String)newValue);
				return;
			case GMFMapPackage.AUDIT_RULE__ID:
				setId((String)newValue);
				return;
			case GMFMapPackage.AUDIT_RULE__RULE:
				setRule((Constraint)newValue);
				return;
			case GMFMapPackage.AUDIT_RULE__TARGET:
				setTarget((Auditable)newValue);
				return;
			case GMFMapPackage.AUDIT_RULE__SEVERITY:
				setSeverity((Severity)newValue);
				return;
			case GMFMapPackage.AUDIT_RULE__USE_IN_LIVE_MODE:
				setUseInLiveMode(((Boolean)newValue).booleanValue());
				return;
			case GMFMapPackage.AUDIT_RULE__MESSAGE:
				setMessage((String)newValue);
				return;
			case GMFMapPackage.AUDIT_RULE__CONTAINER:
				setContainer((AuditContainer)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFMapPackage.AUDIT_RULE__NAME:
				setName(NAME_EDEFAULT);
				return;
			case GMFMapPackage.AUDIT_RULE__DESCRIPTION:
				setDescription(DESCRIPTION_EDEFAULT);
				return;
			case GMFMapPackage.AUDIT_RULE__ID:
				setId(ID_EDEFAULT);
				return;
			case GMFMapPackage.AUDIT_RULE__RULE:
				setRule((Constraint)null);
				return;
			case GMFMapPackage.AUDIT_RULE__TARGET:
				setTarget((Auditable)null);
				return;
			case GMFMapPackage.AUDIT_RULE__SEVERITY:
				setSeverity(SEVERITY_EDEFAULT);
				return;
			case GMFMapPackage.AUDIT_RULE__USE_IN_LIVE_MODE:
				setUseInLiveMode(USE_IN_LIVE_MODE_EDEFAULT);
				return;
			case GMFMapPackage.AUDIT_RULE__MESSAGE:
				setMessage(MESSAGE_EDEFAULT);
				return;
			case GMFMapPackage.AUDIT_RULE__CONTAINER:
				setContainer((AuditContainer)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFMapPackage.AUDIT_RULE__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case GMFMapPackage.AUDIT_RULE__DESCRIPTION:
				return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
			case GMFMapPackage.AUDIT_RULE__ID:
				return ID_EDEFAULT == null ? id != null : !ID_EDEFAULT.equals(id);
			case GMFMapPackage.AUDIT_RULE__RULE:
				return rule != null;
			case GMFMapPackage.AUDIT_RULE__TARGET:
				return target != null;
			case GMFMapPackage.AUDIT_RULE__SEVERITY:
				return severity != SEVERITY_EDEFAULT;
			case GMFMapPackage.AUDIT_RULE__USE_IN_LIVE_MODE:
				return useInLiveMode != USE_IN_LIVE_MODE_EDEFAULT;
			case GMFMapPackage.AUDIT_RULE__MESSAGE:
				return MESSAGE_EDEFAULT == null ? message != null : !MESSAGE_EDEFAULT.equals(message);
			case GMFMapPackage.AUDIT_RULE__CONTAINER:
				return getContainer() != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(", description: ");
		result.append(description);
		result.append(", id: ");
		result.append(id);
		result.append(", severity: ");
		result.append(severity);
		result.append(", useInLiveMode: ");
		result.append(useInLiveMode);
		result.append(", message: ");
		result.append(message);
		result.append(')');
		return result.toString();
	}

} //AuditRuleImpl
@


1.5
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d113 1
a113 1
	protected Constraint rule = null;
d123 1
a123 1
	protected Auditable target = null;
@


1.4
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@d199 1
d462 1
d478 1
d496 1
d510 1
d540 1
d579 1
d618 1
d648 1
@


1.3
log
@[rdvorak] #114196 Allow for the definition of diagram validation rules
@
text
@d430 10
d449 1
a449 1
			msgs = eBasicSetContainer((InternalEObject)newContainer, GMFMapPackage.AUDIT_RULE__CONTAINER, msgs);
d466 1
a466 1
				return eBasicSetContainer(otherEnd, GMFMapPackage.AUDIT_RULE__CONTAINER, msgs);
d483 1
a483 1
				return eBasicSetContainer(null, GMFMapPackage.AUDIT_RULE__CONTAINER, msgs);
@


1.2
log
@#130009 Enable audit rules on diagram (notation model) elements in gmfmap model
@
text
@d18 1
a20 1
import org.eclipse.gmf.mappings.RuleTarget;
d30 2
a31 1
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#getTarget <em>Target</em>}</li>
d34 1
a34 1
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#getName <em>Name</em>}</li>
a37 1
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#getDescription <em>Description</em>}</li>
d46 31
a76 1
	 * The cached value of the '{@@link #getTarget() <em>Target</em>}' containment reference.
d79 1
a79 1
	 * @@see #getTarget()
d83 1
a83 1
	protected RuleTarget target = null;
d116 1
a116 1
	 * The default value of the '{@@link #getName() <em>Name</em>}' attribute.
d119 1
a119 11
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
d123 1
a123 1
	protected String name = NAME_EDEFAULT;
a185 20
	 * The default value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
	protected static final String DESCRIPTION_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
	protected String description = DESCRIPTION_EDEFAULT;

	/**
d272 1
a272 1
	public RuleTarget getTarget() {
d281 2
a282 2
	public NotificationChain basicSetTarget(RuleTarget newTarget, NotificationChain msgs) {
		RuleTarget oldTarget = target;
d296 1
a296 1
	public void setTarget(RuleTarget newTarget) {
d300 1
a300 1
				msgs = ((InternalEObject)target).eInverseRemove(this, GMFMapPackage.RULE_TARGET__RULE, RuleTarget.class, msgs);
d302 1
a302 1
				msgs = ((InternalEObject)newTarget).eInverseAdd(this, GMFMapPackage.RULE_TARGET__RULE, RuleTarget.class, msgs);
a452 4
			case GMFMapPackage.AUDIT_RULE__TARGET:
				if (target != null)
					msgs = ((InternalEObject)target).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFMapPackage.AUDIT_RULE__TARGET, null, msgs);
				return basicSetTarget((RuleTarget)otherEnd, msgs);
d468 2
a471 2
			case GMFMapPackage.AUDIT_RULE__RULE:
				return basicSetRule(null, msgs);
d498 4
a501 2
			case GMFMapPackage.AUDIT_RULE__TARGET:
				return getTarget();
d506 2
a507 2
			case GMFMapPackage.AUDIT_RULE__NAME:
				return getName();
a513 2
			case GMFMapPackage.AUDIT_RULE__DESCRIPTION:
				return getDescription();
d527 5
a531 2
			case GMFMapPackage.AUDIT_RULE__TARGET:
				setTarget((RuleTarget)newValue);
d539 2
a540 2
			case GMFMapPackage.AUDIT_RULE__NAME:
				setName((String)newValue);
a550 3
			case GMFMapPackage.AUDIT_RULE__DESCRIPTION:
				setDescription((String)newValue);
				return;
d565 5
a569 2
			case GMFMapPackage.AUDIT_RULE__TARGET:
				setTarget((RuleTarget)null);
d577 2
a578 2
			case GMFMapPackage.AUDIT_RULE__NAME:
				setName(NAME_EDEFAULT);
a588 3
			case GMFMapPackage.AUDIT_RULE__DESCRIPTION:
				setDescription(DESCRIPTION_EDEFAULT);
				return;
d603 4
a606 2
			case GMFMapPackage.AUDIT_RULE__TARGET:
				return target != null;
d611 2
a612 2
			case GMFMapPackage.AUDIT_RULE__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
a618 2
			case GMFMapPackage.AUDIT_RULE__DESCRIPTION:
				return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
d634 5
a638 1
		result.append(" (id: ");
a639 2
		result.append(", name: ");
		result.append(name);
a645 2
		result.append(", description: ");
		result.append(description);
@


1.1
log
@[rdvorak] #123279 audits definition in gmfmap
@
text
@d20 1
d30 1
a32 1
 *   <li>{@@link org.eclipse.gmf.mappings.impl.AuditRuleImpl#getTarget <em>Target</em>}</li>
d46 10
a85 10
	 * The cached value of the '{@@link #getTarget() <em>Target</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTarget()
	 * @@generated
	 * @@ordered
	 */
	protected EClass target = null;

	/**
d272 1
a272 9
	public EClass getTarget() {
		if (target != null && target.eIsProxy()) {
			InternalEObject oldTarget = (InternalEObject)target;
			target = (EClass)eResolveProxy(oldTarget);
			if (target != oldTarget) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFMapPackage.AUDIT_RULE__TARGET, oldTarget, target));
			}
		}
d281 8
a288 2
	public EClass basicGetTarget() {
		return target;
d296 12
a307 5
	public void setTarget(EClass newTarget) {
		EClass oldTarget = target;
		target = newTarget;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFMapPackage.AUDIT_RULE__TARGET, oldTarget, target));
d453 4
d472 2
d502 2
a507 3
			case GMFMapPackage.AUDIT_RULE__TARGET:
				if (resolve) return getTarget();
				return basicGetTarget();
d531 3
a539 3
			case GMFMapPackage.AUDIT_RULE__TARGET:
				setTarget((EClass)newValue);
				return;
d569 3
a577 3
			case GMFMapPackage.AUDIT_RULE__TARGET:
				setTarget((EClass)null);
				return;
d607 2
a612 2
			case GMFMapPackage.AUDIT_RULE__TARGET:
				return target != null;
@

