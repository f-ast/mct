head	1.61;
access;
symbols
	v20080813-1520:1.61
	v20080722-1827:1.60
	v20080716-1642:1.60
	R2_1_maintenance:1.59.0.2
	Root_R2_1_maintenance:1.59
	R2_1_0:1.59
	v20080521:1.59
	v20080425-1959:1.59
	v20080417-1610:1.58
	v20080322-0000:1.57
	v20080222-1200:1.55
	v20070809-0000:1.55
	R2_0_maintenance:1.55.0.2
	R2_0:1.55
	R4_20:1.55
	v20070621-0000:1.55
	RC3_20:1.55
	v20070608-1300:1.55
	v20070605-1400:1.55
	v20070601-1400:1.55
	v20070525-1500:1.55
	v20070520-1200:1.55
	v20070518-1300:1.53
	v20070517-1200:1.53
	v20070504-1000:1.53
	v20070427-0600:1.51
	v20070330-1300:1.49
	v20070322-1100:1.49
	v20060316-0600:1.49
	v20070208-1800:1.47
	M4_20:1.47
	v20061214-0000:1.47
	M3_20:1.47
	v20061117-0800:1.47
	v20061013-1330:1.45
	M1_20:1.42
	v20060904-1500:1.42
	v20060713-1700:1.41
	R1_0_maintenance:1.41.0.2
	R1_0:1.41
	v20060627-1200:1.41
	v20060626-1420:1.41
	v20060616-1200:1.40
	v20060609-1400:1.40
	v20060531-1730:1.39
	v20060530-1930:1.39
	v20060519-1300:1.39
	v20060519-0800:1.38
	v20060512-1000:1.34
	I20060512-1000:1.34
	I20060505-1400:1.32
	I20060428-1300:1.32
	I20060424-0500:1.31
	I20060424-0300:1.31
	M6_10:1.31
	I20060407-1200:1.31
	I20060331-1000:1.30
	I20060324-0300:1.30
	I20060317-1300:1.30
	I20060317-1200:1.30
	I20060316-1300:1.30
	I20060309-1300:1.28
	M5_10:1.27
	S20060303-1600:1.27
	I20060227-1730:1.23
	I20060216-1945:1.21
	I20060210-1715:1.19
	I20060209-1815:1.18
	I20060203-0830:1.18
	I20060129-1145:1.18
	I20060127-0900:1.18
	I20060120-1530:1.18
	I20060113-1700:1.18
	M4_10:1.18
	I20060107-1100:1.15
	I20060105-1630:1.15
	I20051230-1230:1.15
	I20051223-1100:1.15
	I20051217-0925:1.14
	I20051208-2000:1.12
	I20051201-1800:1.10
	I20051124-2000:1.5
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.61
date	2008.08.13.13.51.01;	author dstadnik;	state Exp;
branches;
next	1.60;
commitid	454448a2e6ac4567;

1.60
date	2008.07.01.11.40.21;	author atikhomirov;	state Exp;
branches;
next	1.59;
commitid	7ba3486a17a34567;

1.59
date	2008.04.18.14.43.25;	author atikhomirov;	state Exp;
branches;
next	1.58;
commitid	2e3f4808b38b4567;

1.58
date	2008.04.17.11.58.49;	author atikhomirov;	state Exp;
branches;
next	1.57;
commitid	330848073b774567;

1.57
date	2008.03.04.16.50.29;	author atikhomirov;	state Exp;
branches;
next	1.56;
commitid	5e4d47cd7dd44567;

1.56
date	2008.03.03.17.45.08;	author atikhomirov;	state Exp;
branches;
next	1.55;
commitid	160e47cc39234567;

1.55
date	2007.05.18.21.17.29;	author atikhomirov;	state Exp;
branches;
next	1.54;
commitid	2624464e17e74567;

1.54
date	2007.05.18.20.39.15;	author atikhomirov;	state Exp;
branches;
next	1.53;
commitid	5912464e0ef24567;

1.53
date	2007.05.03.09.59.11;	author dstadnik;	state Exp;
branches;
next	1.52;
commitid	52284639b26b4567;

1.52
date	2007.04.27.11.23.42;	author dstadnik;	state Exp;
branches;
next	1.51;
commitid	109d4631dd3c4567;

1.51
date	2007.04.26.15.39.50;	author dstadnik;	state Exp;
branches;
next	1.50;
commitid	38914630c7c54567;

1.50
date	2007.04.25.08.08.29;	author dstadnik;	state Exp;
branches;
next	1.49;
commitid	7004462f0c7a4567;

1.49
date	2007.03.14.14.40.10;	author atikhomirov;	state Exp;
branches;
next	1.48;
commitid	452e45f809494567;

1.48
date	2007.03.14.13.00.04;	author atikhomirov;	state Exp;
branches;
next	1.47;
commitid	128545f7f1cb4567;

1.47
date	2006.10.19.15.21.56;	author dstadnik;	state Exp;
branches;
next	1.46;

1.46
date	2006.10.19.14.13.36;	author radvorak;	state Exp;
branches;
next	1.45;

1.45
date	2006.10.03.18.11.04;	author atikhomirov;	state Exp;
branches;
next	1.44;

1.44
date	2006.09.28.18.20.40;	author radvorak;	state Exp;
branches;
next	1.43;

1.43
date	2006.09.07.12.48.32;	author ashatalin;	state Exp;
branches;
next	1.42;

1.42
date	2006.08.25.18.32.47;	author atikhomirov;	state Exp;
branches;
next	1.41;

1.41
date	2006.06.25.11.24.11;	author radvorak;	state Exp;
branches;
next	1.40;

1.40
date	2006.06.02.11.43.06;	author radvorak;	state Exp;
branches;
next	1.39;

1.39
date	2006.05.19.16.17.25;	author atikhomirov;	state Exp;
branches;
next	1.38;

1.38
date	2006.05.19.10.12.04;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.05.18.20.30.58;	author atikhomirov;	state Exp;
branches;
next	1.36;

1.36
date	2006.05.17.10.21.08;	author radvorak;	state Exp;
branches;
next	1.35;

1.35
date	2006.05.14.18.06.32;	author atikhomirov;	state Exp;
branches;
next	1.34;

1.34
date	2006.05.11.09.42.05;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.05.10.15.12.33;	author dstadnik;	state Exp;
branches;
next	1.32;

1.32
date	2006.04.25.19.15.49;	author radvorak;	state Exp;
branches;
next	1.31;

1.31
date	2006.04.03.12.53.02;	author radvorak;	state Exp;
branches;
next	1.30;

1.30
date	2006.03.13.17.28.32;	author ashatalin;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.10.16.56.21;	author atikhomirov;	state Exp;
branches;
next	1.28;

1.28
date	2006.03.07.14.09.29;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.03.03.18.32.33;	author ashatalin;	state Exp;
branches;
next	1.26;

1.26
date	2006.03.03.14.40.28;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.03.03.11.36.25;	author ashatalin;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.02.12.52.58;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2006.02.23.15.45.31;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2006.02.22.22.01.20;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2006.02.14.10.11.22;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.02.13.18.37.47;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.02.10.15.21.15;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.01.10.20.40.09;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.10.19.01.15;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2006.01.10.18.35.28;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.22.17.24.09;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.14.11.48.46;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.10.14.59.34;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.07.19.23.17;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.06.22.21.24;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.30.13.24.37;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.30.12.49.29;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.29.21.15.32;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.29.18.33.02;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.25.13.52.44;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.23.13.30.38;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.20.14.07.16;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.18.10.58.31;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.26.14.26.27;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.30.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.61
log
@[231322] allow to specify editable features
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.mappings.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EValidator;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.emf.ecore.impl.EPackageImpl;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.mappings.AppearanceSteward;
import org.eclipse.gmf.mappings.AuditContainer;
import org.eclipse.gmf.mappings.AuditRule;
import org.eclipse.gmf.mappings.Auditable;
import org.eclipse.gmf.mappings.AuditedMetricTarget;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.ChildReference;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.Constraint;
import org.eclipse.gmf.mappings.DesignLabelMapping;
import org.eclipse.gmf.mappings.DiagramElementTarget;
import org.eclipse.gmf.mappings.DomainAttributeTarget;
import org.eclipse.gmf.mappings.DomainElementTarget;
import org.eclipse.gmf.mappings.ElementInitializer;
import org.eclipse.gmf.mappings.FeatureInitializer;
import org.eclipse.gmf.mappings.FeatureLabelMapping;
import org.eclipse.gmf.mappings.FeatureSeqInitializer;
import org.eclipse.gmf.mappings.FeatureValueSpec;
import org.eclipse.gmf.mappings.GMFMapFactory;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.LabelTextAccessMethod;
import org.eclipse.gmf.mappings.Language;
import org.eclipse.gmf.mappings.LinkConstraints;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.Mapping;
import org.eclipse.gmf.mappings.MappingEntry;
import org.eclipse.gmf.mappings.Measurable;
import org.eclipse.gmf.mappings.MenuOwner;
import org.eclipse.gmf.mappings.MetricContainer;
import org.eclipse.gmf.mappings.MetricRule;
import org.eclipse.gmf.mappings.NeedsContainment;
import org.eclipse.gmf.mappings.NodeMapping;
import org.eclipse.gmf.mappings.NodeReference;
import org.eclipse.gmf.mappings.NotationElementTarget;
import org.eclipse.gmf.mappings.ReferenceNewElementSpec;
import org.eclipse.gmf.mappings.RuleBase;
import org.eclipse.gmf.mappings.Severity;
import org.eclipse.gmf.mappings.ToolOwner;
import org.eclipse.gmf.mappings.TopNodeReference;
import org.eclipse.gmf.mappings.ValueExpression;
import org.eclipse.gmf.mappings.*;
import org.eclipse.gmf.tooldef.GMFToolPackage;
import org.eclipse.gmf.validate.GMFValidator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @@generated
 */
public class GMFMapPackageImpl extends EPackageImpl implements GMFMapPackage {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass mappingEntryEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass needsContainmentEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass nodeReferenceEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass childReferenceEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass topNodeReferenceEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass nodeMappingEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass compartmentMappingEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass linkMappingEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass canvasMappingEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass labelMappingEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass featureLabelMappingEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass designLabelMappingEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass mappingEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass constraintEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass linkConstraintsEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass valueExpressionEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass elementInitializerEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass featureSeqInitializerEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass featureInitializerEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass featureValueSpecEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass referenceNewElementSpecEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass menuOwnerEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass toolOwnerEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass appearanceStewardEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass auditContainerEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass auditRuleEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass ruleBaseEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass domainElementTargetEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass domainAttributeTargetEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass diagramElementTargetEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass notationElementTargetEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass metricContainerEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass metricRuleEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass auditedMetricTargetEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass auditableEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass measurableEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EEnum labelTextAccessMethodEEnum = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EEnum severityEEnum = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EEnum languageEEnum = null;

	/**
	 * Creates an instance of the model <b>Package</b>, registered with
	 * {@@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
	 * package URI value.
	 * <p>Note: the correct way to create the package is via the static
	 * factory method {@@link #init init()}, which also performs
	 * initialization of the package, or returns the registered package,
	 * if one already exists.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see org.eclipse.emf.ecore.EPackage.Registry
	 * @@see org.eclipse.gmf.mappings.GMFMapPackage#eNS_URI
	 * @@see #init()
	 * @@generated
	 */
	private GMFMapPackageImpl() {
		super(eNS_URI, GMFMapFactory.eINSTANCE);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private static boolean isInited = false;

	/**
	 * Creates, registers, and initializes the <b>Package</b> for this
	 * model, and for any others upon which it depends.  Simple
	 * dependencies are satisfied by calling this method on all
	 * dependent packages before doing anything else.  This method drives
	 * initialization for interdependent packages directly, in parallel
	 * with this package, itself.
	 * <p>Of this package and its interdependencies, all packages which
	 * have not yet been registered by their URI values are first created
	 * and registered.  The packages are then initialized in two steps:
	 * meta-model objects for all of the packages are created before any
	 * are initialized, since one package's meta-model objects may refer to
	 * those of another.
	 * <p>Invocation of this method will not affect any packages that have
	 * already been initialized.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #eNS_URI
	 * @@see #createPackageContents()
	 * @@see #initializePackageContents()
	 * @@generated
	 */
	public static GMFMapPackage init() {
		if (isInited) return (GMFMapPackage)EPackage.Registry.INSTANCE.getEPackage(GMFMapPackage.eNS_URI);

		// Obtain or create and register package
		GMFMapPackageImpl theGMFMapPackage = (GMFMapPackageImpl)(EPackage.Registry.INSTANCE.getEPackage(eNS_URI) instanceof GMFMapPackageImpl ? EPackage.Registry.INSTANCE.getEPackage(eNS_URI) : new GMFMapPackageImpl());

		isInited = true;

		// Initialize simple dependencies
		GMFGraphPackage.eINSTANCE.eClass();
		GMFToolPackage.eINSTANCE.eClass();
		EcorePackage.eINSTANCE.eClass();

		// Create package meta-data objects
		theGMFMapPackage.createPackageContents();

		// Initialize created meta-data
		theGMFMapPackage.initializePackageContents();

		// Mark meta-data to indicate it can't be changed
		theGMFMapPackage.freeze();

		return theGMFMapPackage;
	}

	public void initializePackageContents() {
		initializePackageContentsGen();
		// Can't use GMFMapPackage.eINSTANCE here
		EValidator.Registry.INSTANCE.put(this, GMFValidator.INSTANCE);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getMappingEntry() {
		return mappingEntryEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMappingEntry_DomainMetaElement() {
		return (EReference)mappingEntryEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMappingEntry_DomainSpecialization() {
		return (EReference)mappingEntryEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMappingEntry_DomainInitializer() {
		return (EReference)mappingEntryEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMappingEntry_LabelMappings() {
		return (EReference)mappingEntryEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMappingEntry_RelatedDiagrams() {
		return (EReference)mappingEntryEClass.getEStructuralFeatures().get(4);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getNeedsContainment() {
		return needsContainmentEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getNeedsContainment_ContainmentFeature() {
		return (EReference)needsContainmentEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getNodeReference() {
		return nodeReferenceEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getNodeReference_ChildrenFeature() {
		return (EReference)nodeReferenceEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getNodeReference_Child() {
		return (EReference)nodeReferenceEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getChildReference() {
		return childReferenceEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getChildReference_ParentNode() {
		return (EReference)childReferenceEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getChildReference_Compartment() {
		return (EReference)childReferenceEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getChildReference_OwnedChild() {
		return (EReference)childReferenceEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getChildReference_ReferencedChild() {
		return (EReference)childReferenceEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getTopNodeReference() {
		return topNodeReferenceEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getTopNodeReference_OwnedChild() {
		return (EReference)topNodeReferenceEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getNodeMapping() {
		return nodeMappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getNodeMapping_DiagramNode() {
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getNodeMapping_Children() {
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getNodeMapping_Compartments() {
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getCompartmentMapping() {
		return compartmentMappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getCompartmentMapping_Compartment() {
		return (EReference)compartmentMappingEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getCompartmentMapping_ParentNode() {
		return (EReference)compartmentMappingEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getCompartmentMapping_Children() {
		return (EReference)compartmentMappingEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getLinkMapping() {
		return linkMappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getLinkMapping_DiagramLink() {
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getLinkMapping_SourceMetaFeature() {
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getLinkMapping_LinkMetaFeature() {
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getLinkMapping_CreationConstraints() {
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getCanvasMapping() {
		return canvasMappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getCanvasMapping_DiagramCanvas() {
		return (EReference)canvasMappingEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getCanvasMapping_DomainModel() {
		return (EReference)canvasMappingEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getCanvasMapping_DomainMetaElement() {
		return (EReference)canvasMappingEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getCanvasMapping_Palette() {
		return (EReference)canvasMappingEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getCanvasMapping_MenuContributions() {
		return (EReference)canvasMappingEClass.getEStructuralFeatures().get(4);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getCanvasMapping_ToolbarContributions() {
		return (EReference)canvasMappingEClass.getEStructuralFeatures().get(5);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getLabelMapping() {
		return labelMappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getLabelMapping_DiagramLabel() {
		return (EReference)labelMappingEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getLabelMapping_ReadOnly() {
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getLabelMapping_MapEntry() {
		return (EReference)labelMappingEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getFeatureLabelMapping() {
		return featureLabelMappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getFeatureLabelMapping_Features() {
		return (EReference)featureLabelMappingEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getFeatureLabelMapping_EditableFeatures() {
		return (EReference)featureLabelMappingEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getFeatureLabelMapping_ViewPattern() {
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getFeatureLabelMapping_EditorPattern() {
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getFeatureLabelMapping_ViewMethod() {
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(5);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getFeatureLabelMapping_EditPattern() {
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(4);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getFeatureLabelMapping_EditMethod() {
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(6);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getDesignLabelMapping() {
		return designLabelMappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getMapping() {
		return mappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMapping_Nodes() {
		return (EReference)mappingEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMapping_Links() {
		return (EReference)mappingEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMapping_Diagram() {
		return (EReference)mappingEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMapping_AppearanceStyles() {
		return (EReference)mappingEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMapping_Audits() {
		return (EReference)mappingEClass.getEStructuralFeatures().get(4);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMapping_Metrics() {
		return (EReference)mappingEClass.getEStructuralFeatures().get(5);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getConstraint() {
		return constraintEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getLinkConstraints() {
		return linkConstraintsEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getLinkConstraints_LinkMapping() {
		return (EReference)linkConstraintsEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getLinkConstraints_SourceEnd() {
		return (EReference)linkConstraintsEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getLinkConstraints_TargetEnd() {
		return (EReference)linkConstraintsEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getValueExpression() {
		return valueExpressionEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getValueExpression_Body() {
		return (EAttribute)valueExpressionEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getValueExpression_Language() {
		return (EAttribute)valueExpressionEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getValueExpression_LangName() {
		return (EAttribute)valueExpressionEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getElementInitializer() {
		return elementInitializerEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getElementInitializer_MappingEntry() {
		return (EReference)elementInitializerEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getFeatureSeqInitializer() {
		return featureSeqInitializerEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getFeatureSeqInitializer_Initializers() {
		return (EReference)featureSeqInitializerEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getFeatureSeqInitializer_ElementClass() {
		return (EReference)featureSeqInitializerEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getFeatureSeqInitializer_CreatingInitializer() {
		return (EReference)featureSeqInitializerEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getFeatureInitializer() {
		return featureInitializerEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getFeatureInitializer_Feature() {
		return (EReference)featureInitializerEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getFeatureInitializer_FeatureSeqInitializer() {
		return (EReference)featureInitializerEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getFeatureValueSpec() {
		return featureValueSpecEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getFeatureValueSpec_Value() {
		return (EReference)featureValueSpecEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getReferenceNewElementSpec() {
		return referenceNewElementSpecEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getReferenceNewElementSpec_NewElementInitializers() {
		return (EReference)referenceNewElementSpecEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getMenuOwner() {
		return menuOwnerEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMenuOwner_ContextMenu() {
		return (EReference)menuOwnerEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getToolOwner() {
		return toolOwnerEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getToolOwner_Tool() {
		return (EReference)toolOwnerEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getAppearanceSteward() {
		return appearanceStewardEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getAppearanceSteward_AppearanceStyle() {
		return (EReference)appearanceStewardEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getAuditContainer() {
		return auditContainerEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getAuditContainer_Id() {
		return (EAttribute)auditContainerEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getAuditContainer_Name() {
		return (EAttribute)auditContainerEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getAuditContainer_Description() {
		return (EAttribute)auditContainerEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getAuditContainer_ParentContainer() {
		return (EReference)auditContainerEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getAuditContainer_Audits() {
		return (EReference)auditContainerEClass.getEStructuralFeatures().get(4);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getAuditContainer_ChildContainers() {
		return (EReference)auditContainerEClass.getEStructuralFeatures().get(5);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getAuditRule() {
		return auditRuleEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getAuditRule_Id() {
		return (EAttribute)auditRuleEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getAuditRule_Rule() {
		return (EReference)auditRuleEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getAuditRule_Target() {
		return (EReference)auditRuleEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getAuditRule_Severity() {
		return (EAttribute)auditRuleEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getAuditRule_UseInLiveMode() {
		return (EAttribute)auditRuleEClass.getEStructuralFeatures().get(4);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getAuditRule_Message() {
		return (EAttribute)auditRuleEClass.getEStructuralFeatures().get(5);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getAuditRule_Container() {
		return (EReference)auditRuleEClass.getEStructuralFeatures().get(6);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getRuleBase() {
		return ruleBaseEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getRuleBase_Name() {
		return (EAttribute)ruleBaseEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getRuleBase_Description() {
		return (EAttribute)ruleBaseEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getDomainElementTarget() {
		return domainElementTargetEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getDomainElementTarget_Element() {
		return (EReference)domainElementTargetEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getDomainAttributeTarget() {
		return domainAttributeTargetEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getDomainAttributeTarget_Attribute() {
		return (EReference)domainAttributeTargetEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getDomainAttributeTarget_NullAsError() {
		return (EAttribute)domainAttributeTargetEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getDiagramElementTarget() {
		return diagramElementTargetEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getDiagramElementTarget_Element() {
		return (EReference)diagramElementTargetEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getNotationElementTarget() {
		return notationElementTargetEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getNotationElementTarget_Element() {
		return (EReference)notationElementTargetEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getMetricContainer() {
		return metricContainerEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMetricContainer_Metrics() {
		return (EReference)metricContainerEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getMetricRule() {
		return metricRuleEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getMetricRule_Key() {
		return (EAttribute)metricRuleEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMetricRule_Rule() {
		return (EReference)metricRuleEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMetricRule_Target() {
		return (EReference)metricRuleEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getMetricRule_LowLimit() {
		return (EAttribute)metricRuleEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getMetricRule_HighLimit() {
		return (EAttribute)metricRuleEClass.getEStructuralFeatures().get(4);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getMetricRule_Container() {
		return (EReference)metricRuleEClass.getEStructuralFeatures().get(5);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getAuditedMetricTarget() {
		return auditedMetricTargetEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getAuditedMetricTarget_Metric() {
		return (EReference)auditedMetricTargetEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getAuditable() {
		return auditableEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getMeasurable() {
		return measurableEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EEnum getLabelTextAccessMethod() {
		return labelTextAccessMethodEEnum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EEnum getSeverity() {
		return severityEEnum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EEnum getLanguage() {
		return languageEEnum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GMFMapFactory getGMFMapFactory() {
		return (GMFMapFactory)getEFactoryInstance();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private boolean isCreated = false;

	/**
	 * Creates the meta-model objects for the package.  This method is
	 * guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void createPackageContents() {
		if (isCreated) return;
		isCreated = true;

		// Create classes and their features
		mappingEClass = createEClass(MAPPING);
		createEReference(mappingEClass, MAPPING__NODES);
		createEReference(mappingEClass, MAPPING__LINKS);
		createEReference(mappingEClass, MAPPING__DIAGRAM);
		createEReference(mappingEClass, MAPPING__APPEARANCE_STYLES);
		createEReference(mappingEClass, MAPPING__AUDITS);
		createEReference(mappingEClass, MAPPING__METRICS);

		mappingEntryEClass = createEClass(MAPPING_ENTRY);
		createEReference(mappingEntryEClass, MAPPING_ENTRY__DOMAIN_META_ELEMENT);
		createEReference(mappingEntryEClass, MAPPING_ENTRY__DOMAIN_SPECIALIZATION);
		createEReference(mappingEntryEClass, MAPPING_ENTRY__DOMAIN_INITIALIZER);
		createEReference(mappingEntryEClass, MAPPING_ENTRY__LABEL_MAPPINGS);
		createEReference(mappingEntryEClass, MAPPING_ENTRY__RELATED_DIAGRAMS);

		needsContainmentEClass = createEClass(NEEDS_CONTAINMENT);
		createEReference(needsContainmentEClass, NEEDS_CONTAINMENT__CONTAINMENT_FEATURE);

		nodeReferenceEClass = createEClass(NODE_REFERENCE);
		createEReference(nodeReferenceEClass, NODE_REFERENCE__CHILDREN_FEATURE);
		createEReference(nodeReferenceEClass, NODE_REFERENCE__CHILD);

		childReferenceEClass = createEClass(CHILD_REFERENCE);
		createEReference(childReferenceEClass, CHILD_REFERENCE__PARENT_NODE);
		createEReference(childReferenceEClass, CHILD_REFERENCE__COMPARTMENT);
		createEReference(childReferenceEClass, CHILD_REFERENCE__OWNED_CHILD);
		createEReference(childReferenceEClass, CHILD_REFERENCE__REFERENCED_CHILD);

		topNodeReferenceEClass = createEClass(TOP_NODE_REFERENCE);
		createEReference(topNodeReferenceEClass, TOP_NODE_REFERENCE__OWNED_CHILD);

		nodeMappingEClass = createEClass(NODE_MAPPING);
		createEReference(nodeMappingEClass, NODE_MAPPING__DIAGRAM_NODE);
		createEReference(nodeMappingEClass, NODE_MAPPING__CHILDREN);
		createEReference(nodeMappingEClass, NODE_MAPPING__COMPARTMENTS);

		compartmentMappingEClass = createEClass(COMPARTMENT_MAPPING);
		createEReference(compartmentMappingEClass, COMPARTMENT_MAPPING__COMPARTMENT);
		createEReference(compartmentMappingEClass, COMPARTMENT_MAPPING__PARENT_NODE);
		createEReference(compartmentMappingEClass, COMPARTMENT_MAPPING__CHILDREN);

		linkMappingEClass = createEClass(LINK_MAPPING);
		createEReference(linkMappingEClass, LINK_MAPPING__DIAGRAM_LINK);
		createEReference(linkMappingEClass, LINK_MAPPING__SOURCE_META_FEATURE);
		createEReference(linkMappingEClass, LINK_MAPPING__LINK_META_FEATURE);
		createEReference(linkMappingEClass, LINK_MAPPING__CREATION_CONSTRAINTS);

		canvasMappingEClass = createEClass(CANVAS_MAPPING);
		createEReference(canvasMappingEClass, CANVAS_MAPPING__DIAGRAM_CANVAS);
		createEReference(canvasMappingEClass, CANVAS_MAPPING__DOMAIN_MODEL);
		createEReference(canvasMappingEClass, CANVAS_MAPPING__DOMAIN_META_ELEMENT);
		createEReference(canvasMappingEClass, CANVAS_MAPPING__PALETTE);
		createEReference(canvasMappingEClass, CANVAS_MAPPING__MENU_CONTRIBUTIONS);
		createEReference(canvasMappingEClass, CANVAS_MAPPING__TOOLBAR_CONTRIBUTIONS);

		labelMappingEClass = createEClass(LABEL_MAPPING);
		createEReference(labelMappingEClass, LABEL_MAPPING__DIAGRAM_LABEL);
		createEAttribute(labelMappingEClass, LABEL_MAPPING__READ_ONLY);
		createEReference(labelMappingEClass, LABEL_MAPPING__MAP_ENTRY);

		featureLabelMappingEClass = createEClass(FEATURE_LABEL_MAPPING);
		createEReference(featureLabelMappingEClass, FEATURE_LABEL_MAPPING__FEATURES);
		createEReference(featureLabelMappingEClass, FEATURE_LABEL_MAPPING__EDITABLE_FEATURES);
		createEAttribute(featureLabelMappingEClass, FEATURE_LABEL_MAPPING__VIEW_PATTERN);
		createEAttribute(featureLabelMappingEClass, FEATURE_LABEL_MAPPING__EDITOR_PATTERN);
		createEAttribute(featureLabelMappingEClass, FEATURE_LABEL_MAPPING__EDIT_PATTERN);
		createEAttribute(featureLabelMappingEClass, FEATURE_LABEL_MAPPING__VIEW_METHOD);
		createEAttribute(featureLabelMappingEClass, FEATURE_LABEL_MAPPING__EDIT_METHOD);

		designLabelMappingEClass = createEClass(DESIGN_LABEL_MAPPING);

		constraintEClass = createEClass(CONSTRAINT);

		linkConstraintsEClass = createEClass(LINK_CONSTRAINTS);
		createEReference(linkConstraintsEClass, LINK_CONSTRAINTS__LINK_MAPPING);
		createEReference(linkConstraintsEClass, LINK_CONSTRAINTS__SOURCE_END);
		createEReference(linkConstraintsEClass, LINK_CONSTRAINTS__TARGET_END);

		valueExpressionEClass = createEClass(VALUE_EXPRESSION);
		createEAttribute(valueExpressionEClass, VALUE_EXPRESSION__BODY);
		createEAttribute(valueExpressionEClass, VALUE_EXPRESSION__LANGUAGE);
		createEAttribute(valueExpressionEClass, VALUE_EXPRESSION__LANG_NAME);

		elementInitializerEClass = createEClass(ELEMENT_INITIALIZER);
		createEReference(elementInitializerEClass, ELEMENT_INITIALIZER__MAPPING_ENTRY);

		featureSeqInitializerEClass = createEClass(FEATURE_SEQ_INITIALIZER);
		createEReference(featureSeqInitializerEClass, FEATURE_SEQ_INITIALIZER__INITIALIZERS);
		createEReference(featureSeqInitializerEClass, FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS);
		createEReference(featureSeqInitializerEClass, FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER);

		featureInitializerEClass = createEClass(FEATURE_INITIALIZER);
		createEReference(featureInitializerEClass, FEATURE_INITIALIZER__FEATURE);
		createEReference(featureInitializerEClass, FEATURE_INITIALIZER__FEATURE_SEQ_INITIALIZER);

		featureValueSpecEClass = createEClass(FEATURE_VALUE_SPEC);
		createEReference(featureValueSpecEClass, FEATURE_VALUE_SPEC__VALUE);

		referenceNewElementSpecEClass = createEClass(REFERENCE_NEW_ELEMENT_SPEC);
		createEReference(referenceNewElementSpecEClass, REFERENCE_NEW_ELEMENT_SPEC__NEW_ELEMENT_INITIALIZERS);

		menuOwnerEClass = createEClass(MENU_OWNER);
		createEReference(menuOwnerEClass, MENU_OWNER__CONTEXT_MENU);

		toolOwnerEClass = createEClass(TOOL_OWNER);
		createEReference(toolOwnerEClass, TOOL_OWNER__TOOL);

		appearanceStewardEClass = createEClass(APPEARANCE_STEWARD);
		createEReference(appearanceStewardEClass, APPEARANCE_STEWARD__APPEARANCE_STYLE);

		auditContainerEClass = createEClass(AUDIT_CONTAINER);
		createEAttribute(auditContainerEClass, AUDIT_CONTAINER__ID);
		createEAttribute(auditContainerEClass, AUDIT_CONTAINER__NAME);
		createEAttribute(auditContainerEClass, AUDIT_CONTAINER__DESCRIPTION);
		createEReference(auditContainerEClass, AUDIT_CONTAINER__PARENT_CONTAINER);
		createEReference(auditContainerEClass, AUDIT_CONTAINER__AUDITS);
		createEReference(auditContainerEClass, AUDIT_CONTAINER__CHILD_CONTAINERS);

		ruleBaseEClass = createEClass(RULE_BASE);
		createEAttribute(ruleBaseEClass, RULE_BASE__NAME);
		createEAttribute(ruleBaseEClass, RULE_BASE__DESCRIPTION);

		auditRuleEClass = createEClass(AUDIT_RULE);
		createEAttribute(auditRuleEClass, AUDIT_RULE__ID);
		createEReference(auditRuleEClass, AUDIT_RULE__RULE);
		createEReference(auditRuleEClass, AUDIT_RULE__TARGET);
		createEAttribute(auditRuleEClass, AUDIT_RULE__SEVERITY);
		createEAttribute(auditRuleEClass, AUDIT_RULE__USE_IN_LIVE_MODE);
		createEAttribute(auditRuleEClass, AUDIT_RULE__MESSAGE);
		createEReference(auditRuleEClass, AUDIT_RULE__CONTAINER);

		domainElementTargetEClass = createEClass(DOMAIN_ELEMENT_TARGET);
		createEReference(domainElementTargetEClass, DOMAIN_ELEMENT_TARGET__ELEMENT);

		domainAttributeTargetEClass = createEClass(DOMAIN_ATTRIBUTE_TARGET);
		createEReference(domainAttributeTargetEClass, DOMAIN_ATTRIBUTE_TARGET__ATTRIBUTE);
		createEAttribute(domainAttributeTargetEClass, DOMAIN_ATTRIBUTE_TARGET__NULL_AS_ERROR);

		diagramElementTargetEClass = createEClass(DIAGRAM_ELEMENT_TARGET);
		createEReference(diagramElementTargetEClass, DIAGRAM_ELEMENT_TARGET__ELEMENT);

		notationElementTargetEClass = createEClass(NOTATION_ELEMENT_TARGET);
		createEReference(notationElementTargetEClass, NOTATION_ELEMENT_TARGET__ELEMENT);

		metricContainerEClass = createEClass(METRIC_CONTAINER);
		createEReference(metricContainerEClass, METRIC_CONTAINER__METRICS);

		metricRuleEClass = createEClass(METRIC_RULE);
		createEAttribute(metricRuleEClass, METRIC_RULE__KEY);
		createEReference(metricRuleEClass, METRIC_RULE__RULE);
		createEReference(metricRuleEClass, METRIC_RULE__TARGET);
		createEAttribute(metricRuleEClass, METRIC_RULE__LOW_LIMIT);
		createEAttribute(metricRuleEClass, METRIC_RULE__HIGH_LIMIT);
		createEReference(metricRuleEClass, METRIC_RULE__CONTAINER);

		auditedMetricTargetEClass = createEClass(AUDITED_METRIC_TARGET);
		createEReference(auditedMetricTargetEClass, AUDITED_METRIC_TARGET__METRIC);

		auditableEClass = createEClass(AUDITABLE);

		measurableEClass = createEClass(MEASURABLE);

		// Create enums
		labelTextAccessMethodEEnum = createEEnum(LABEL_TEXT_ACCESS_METHOD);
		severityEEnum = createEEnum(SEVERITY);
		languageEEnum = createEEnum(LANGUAGE);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private boolean isInitialized = false;

	/**
	 * Complete the initialization of the package and its meta-model.  This
	 * method is guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void initializePackageContentsGen() {
		if (isInitialized) return;
		isInitialized = true;

		// Initialize package
		setName(eNAME);
		setNsPrefix(eNS_PREFIX);
		setNsURI(eNS_URI);

		// Obtain other dependent packages
		GMFToolPackage theGMFToolPackage = (GMFToolPackage)EPackage.Registry.INSTANCE.getEPackage(GMFToolPackage.eNS_URI);
		GMFGraphPackage theGMFGraphPackage = (GMFGraphPackage)EPackage.Registry.INSTANCE.getEPackage(GMFGraphPackage.eNS_URI);

		// Create type parameters

		// Set bounds for type parameters

		// Add supertypes to classes
		nodeReferenceEClass.getESuperTypes().add(this.getNeedsContainment());
		childReferenceEClass.getESuperTypes().add(this.getNodeReference());
		topNodeReferenceEClass.getESuperTypes().add(this.getNodeReference());
		nodeMappingEClass.getESuperTypes().add(this.getMappingEntry());
		nodeMappingEClass.getESuperTypes().add(this.getMenuOwner());
		nodeMappingEClass.getESuperTypes().add(this.getToolOwner());
		nodeMappingEClass.getESuperTypes().add(this.getAppearanceSteward());
		linkMappingEClass.getESuperTypes().add(this.getMappingEntry());
		linkMappingEClass.getESuperTypes().add(this.getNeedsContainment());
		linkMappingEClass.getESuperTypes().add(this.getMenuOwner());
		linkMappingEClass.getESuperTypes().add(this.getToolOwner());
		linkMappingEClass.getESuperTypes().add(this.getAppearanceSteward());
		featureLabelMappingEClass.getESuperTypes().add(this.getLabelMapping());
		designLabelMappingEClass.getESuperTypes().add(this.getLabelMapping());
		constraintEClass.getESuperTypes().add(this.getValueExpression());
		featureSeqInitializerEClass.getESuperTypes().add(this.getElementInitializer());
		featureValueSpecEClass.getESuperTypes().add(this.getFeatureInitializer());
		referenceNewElementSpecEClass.getESuperTypes().add(this.getFeatureInitializer());
		auditRuleEClass.getESuperTypes().add(this.getRuleBase());
		domainElementTargetEClass.getESuperTypes().add(this.getAuditable());
		domainElementTargetEClass.getESuperTypes().add(this.getMeasurable());
		domainAttributeTargetEClass.getESuperTypes().add(this.getAuditable());
		diagramElementTargetEClass.getESuperTypes().add(this.getAuditable());
		diagramElementTargetEClass.getESuperTypes().add(this.getMeasurable());
		notationElementTargetEClass.getESuperTypes().add(this.getAuditable());
		notationElementTargetEClass.getESuperTypes().add(this.getMeasurable());
		metricRuleEClass.getESuperTypes().add(this.getRuleBase());
		auditedMetricTargetEClass.getESuperTypes().add(this.getAuditable());

		// Initialize classes and features; add operations and parameters
		initEClass(mappingEClass, Mapping.class, "Mapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getMapping_Nodes(), this.getTopNodeReference(), null, "nodes", null, 0, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMapping_Links(), this.getLinkMapping(), null, "links", null, 0, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMapping_Diagram(), this.getCanvasMapping(), null, "diagram", null, 1, 1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMapping_AppearanceStyles(), theGMFToolPackage.getStyleSelector(), null, "appearanceStyles", null, 0, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMapping_Audits(), this.getAuditContainer(), null, "audits", null, 0, 1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMapping_Metrics(), this.getMetricContainer(), null, "metrics", null, 0, 1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(mappingEntryEClass, MappingEntry.class, "MappingEntry", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getMappingEntry_DomainMetaElement(), ecorePackage.getEClass(), null, "domainMetaElement", null, 0, 1, MappingEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMappingEntry_DomainSpecialization(), this.getConstraint(), null, "domainSpecialization", null, 0, 1, MappingEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMappingEntry_DomainInitializer(), this.getElementInitializer(), null, "domainInitializer", null, 0, 1, MappingEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMappingEntry_LabelMappings(), this.getLabelMapping(), this.getLabelMapping_MapEntry(), "labelMappings", null, 0, -1, MappingEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMappingEntry_RelatedDiagrams(), this.getCanvasMapping(), null, "relatedDiagrams", null, 0, -1, MappingEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		addEOperation(mappingEntryEClass, ecorePackage.getEClass(), "getDomainContext", 0, 1, IS_UNIQUE, IS_ORDERED);

		initEClass(needsContainmentEClass, NeedsContainment.class, "NeedsContainment", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getNeedsContainment_ContainmentFeature(), ecorePackage.getEReference(), null, "containmentFeature", null, 0, 1, NeedsContainment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(nodeReferenceEClass, NodeReference.class, "NodeReference", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getNodeReference_ChildrenFeature(), ecorePackage.getEReference(), null, "childrenFeature", null, 0, 1, NodeReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getNodeReference_Child(), this.getNodeMapping(), null, "child", null, 0, 1, NodeReference.class, IS_TRANSIENT, IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, IS_UNSETTABLE, IS_UNIQUE, IS_DERIVED, IS_ORDERED);

		initEClass(childReferenceEClass, ChildReference.class, "ChildReference", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getChildReference_ParentNode(), this.getNodeMapping(), this.getNodeMapping_Children(), "parentNode", null, 1, 1, ChildReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getChildReference_Compartment(), this.getCompartmentMapping(), this.getCompartmentMapping_Children(), "compartment", null, 0, 1, ChildReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getChildReference_OwnedChild(), this.getNodeMapping(), null, "ownedChild", null, 0, 1, ChildReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getChildReference_ReferencedChild(), this.getNodeMapping(), null, "referencedChild", null, 0, 1, ChildReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(topNodeReferenceEClass, TopNodeReference.class, "TopNodeReference", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getTopNodeReference_OwnedChild(), this.getNodeMapping(), null, "ownedChild", null, 1, 1, TopNodeReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(nodeMappingEClass, NodeMapping.class, "NodeMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getNodeMapping_DiagramNode(), theGMFGraphPackage.getNode(), null, "diagramNode", null, 1, 1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getNodeMapping_Children(), this.getChildReference(), this.getChildReference_ParentNode(), "children", null, 0, -1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getNodeMapping_Compartments(), this.getCompartmentMapping(), this.getCompartmentMapping_ParentNode(), "compartments", null, 0, -1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(compartmentMappingEClass, CompartmentMapping.class, "CompartmentMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getCompartmentMapping_Compartment(), theGMFGraphPackage.getCompartment(), null, "compartment", null, 1, 1, CompartmentMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getCompartmentMapping_ParentNode(), this.getNodeMapping(), this.getNodeMapping_Compartments(), "parentNode", null, 1, 1, CompartmentMapping.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getCompartmentMapping_Children(), this.getChildReference(), this.getChildReference_Compartment(), "children", null, 0, -1, CompartmentMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(linkMappingEClass, LinkMapping.class, "LinkMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getLinkMapping_DiagramLink(), theGMFGraphPackage.getConnection(), null, "diagramLink", null, 1, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLinkMapping_SourceMetaFeature(), ecorePackage.getEStructuralFeature(), null, "sourceMetaFeature", null, 0, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLinkMapping_LinkMetaFeature(), ecorePackage.getEStructuralFeature(), null, "linkMetaFeature", null, 0, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLinkMapping_CreationConstraints(), this.getLinkConstraints(), this.getLinkConstraints_LinkMapping(), "creationConstraints", null, 0, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(canvasMappingEClass, CanvasMapping.class, "CanvasMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getCanvasMapping_DiagramCanvas(), theGMFGraphPackage.getCanvas(), null, "diagramCanvas", null, 1, 1, CanvasMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getCanvasMapping_DomainModel(), ecorePackage.getEPackage(), null, "domainModel", null, 0, 1, CanvasMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getCanvasMapping_DomainMetaElement(), ecorePackage.getEClass(), null, "domainMetaElement", null, 0, 1, CanvasMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getCanvasMapping_Palette(), theGMFToolPackage.getPalette(), null, "palette", null, 0, 1, CanvasMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getCanvasMapping_MenuContributions(), theGMFToolPackage.getMainMenu(), null, "menuContributions", null, 0, -1, CanvasMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getCanvasMapping_ToolbarContributions(), theGMFToolPackage.getToolbar(), null, "toolbarContributions", null, 0, -1, CanvasMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(labelMappingEClass, LabelMapping.class, "LabelMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getLabelMapping_DiagramLabel(), theGMFGraphPackage.getDiagramLabel(), null, "diagramLabel", null, 1, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getLabelMapping_ReadOnly(), ecorePackage.getEBoolean(), "readOnly", null, 0, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLabelMapping_MapEntry(), this.getMappingEntry(), this.getMappingEntry_LabelMappings(), "mapEntry", null, 1, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(featureLabelMappingEClass, FeatureLabelMapping.class, "FeatureLabelMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getFeatureLabelMapping_Features(), ecorePackage.getEAttribute(), null, "features", null, 1, -1, FeatureLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getFeatureLabelMapping_EditableFeatures(), ecorePackage.getEAttribute(), null, "editableFeatures", null, 0, -1, FeatureLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getFeatureLabelMapping_ViewPattern(), ecorePackage.getEString(), "viewPattern", null, 0, 1, FeatureLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getFeatureLabelMapping_EditorPattern(), ecorePackage.getEString(), "editorPattern", null, 0, 1, FeatureLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getFeatureLabelMapping_EditPattern(), ecorePackage.getEString(), "editPattern", null, 0, 1, FeatureLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getFeatureLabelMapping_ViewMethod(), this.getLabelTextAccessMethod(), "viewMethod", null, 0, 1, FeatureLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getFeatureLabelMapping_EditMethod(), this.getLabelTextAccessMethod(), "editMethod", null, 0, 1, FeatureLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(designLabelMappingEClass, DesignLabelMapping.class, "DesignLabelMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

		initEClass(constraintEClass, Constraint.class, "Constraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

		initEClass(linkConstraintsEClass, LinkConstraints.class, "LinkConstraints", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getLinkConstraints_LinkMapping(), this.getLinkMapping(), this.getLinkMapping_CreationConstraints(), "linkMapping", null, 1, 1, LinkConstraints.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLinkConstraints_SourceEnd(), this.getConstraint(), null, "sourceEnd", null, 0, 1, LinkConstraints.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLinkConstraints_TargetEnd(), this.getConstraint(), null, "targetEnd", null, 0, 1, LinkConstraints.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(valueExpressionEClass, ValueExpression.class, "ValueExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getValueExpression_Body(), ecorePackage.getEString(), "body", null, 1, 1, ValueExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getValueExpression_Language(), this.getLanguage(), "language", "ocl", 1, 1, ValueExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getValueExpression_LangName(), ecorePackage.getEString(), "langName", null, 0, 1, ValueExpression.class, IS_TRANSIENT, IS_VOLATILE, !IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, IS_DERIVED, IS_ORDERED);

		initEClass(elementInitializerEClass, ElementInitializer.class, "ElementInitializer", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getElementInitializer_MappingEntry(), this.getMappingEntry(), null, "mappingEntry", null, 1, 1, ElementInitializer.class, IS_TRANSIENT, IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(featureSeqInitializerEClass, FeatureSeqInitializer.class, "FeatureSeqInitializer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getFeatureSeqInitializer_Initializers(), this.getFeatureInitializer(), this.getFeatureInitializer_FeatureSeqInitializer(), "initializers", null, 1, -1, FeatureSeqInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getFeatureSeqInitializer_ElementClass(), ecorePackage.getEClass(), null, "elementClass", null, 0, 1, FeatureSeqInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getFeatureSeqInitializer_CreatingInitializer(), this.getReferenceNewElementSpec(), this.getReferenceNewElementSpec_NewElementInitializers(), "creatingInitializer", null, 0, 1, FeatureSeqInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(featureInitializerEClass, FeatureInitializer.class, "FeatureInitializer", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getFeatureInitializer_Feature(), ecorePackage.getEStructuralFeature(), null, "feature", null, 1, 1, FeatureInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getFeatureInitializer_FeatureSeqInitializer(), this.getFeatureSeqInitializer(), this.getFeatureSeqInitializer_Initializers(), "featureSeqInitializer", null, 1, 1, FeatureInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(featureValueSpecEClass, FeatureValueSpec.class, "FeatureValueSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getFeatureValueSpec_Value(), this.getValueExpression(), null, "value", null, 1, 1, FeatureValueSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(referenceNewElementSpecEClass, ReferenceNewElementSpec.class, "ReferenceNewElementSpec", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getReferenceNewElementSpec_NewElementInitializers(), this.getFeatureSeqInitializer(), this.getFeatureSeqInitializer_CreatingInitializer(), "newElementInitializers", null, 1, -1, ReferenceNewElementSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(menuOwnerEClass, MenuOwner.class, "MenuOwner", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getMenuOwner_ContextMenu(), theGMFToolPackage.getContextMenu(), null, "contextMenu", null, 0, 1, MenuOwner.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(toolOwnerEClass, ToolOwner.class, "ToolOwner", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getToolOwner_Tool(), theGMFToolPackage.getAbstractTool(), null, "tool", null, 0, 1, ToolOwner.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(appearanceStewardEClass, AppearanceSteward.class, "AppearanceSteward", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getAppearanceSteward_AppearanceStyle(), theGMFToolPackage.getStyleSelector(), null, "appearanceStyle", null, 0, 1, AppearanceSteward.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(auditContainerEClass, AuditContainer.class, "AuditContainer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getAuditContainer_Id(), ecorePackage.getEString(), "id", null, 1, 1, AuditContainer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getAuditContainer_Name(), ecorePackage.getEString(), "name", null, 0, 1, AuditContainer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getAuditContainer_Description(), ecorePackage.getEString(), "description", null, 0, 1, AuditContainer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAuditContainer_ParentContainer(), this.getAuditContainer(), this.getAuditContainer_ChildContainers(), "parentContainer", null, 0, 1, AuditContainer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAuditContainer_Audits(), this.getAuditRule(), this.getAuditRule_Container(), "audits", null, 0, -1, AuditContainer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAuditContainer_ChildContainers(), this.getAuditContainer(), this.getAuditContainer_ParentContainer(), "childContainers", null, 0, -1, AuditContainer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(ruleBaseEClass, RuleBase.class, "RuleBase", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getRuleBase_Name(), ecorePackage.getEString(), "name", null, 0, 1, RuleBase.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getRuleBase_Description(), ecorePackage.getEString(), "description", null, 0, 1, RuleBase.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(auditRuleEClass, AuditRule.class, "AuditRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getAuditRule_Id(), ecorePackage.getEString(), "id", null, 1, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAuditRule_Rule(), this.getConstraint(), null, "rule", null, 1, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAuditRule_Target(), this.getAuditable(), null, "target", null, 1, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getAuditRule_Severity(), this.getSeverity(), "severity", "ERROR", 0, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getAuditRule_UseInLiveMode(), ecorePackage.getEBoolean(), "useInLiveMode", "false", 0, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getAuditRule_Message(), ecorePackage.getEString(), "message", null, 0, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAuditRule_Container(), this.getAuditContainer(), this.getAuditContainer_Audits(), "container", null, 1, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(domainElementTargetEClass, DomainElementTarget.class, "DomainElementTarget", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getDomainElementTarget_Element(), ecorePackage.getEClass(), null, "element", null, 1, 1, DomainElementTarget.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(domainAttributeTargetEClass, DomainAttributeTarget.class, "DomainAttributeTarget", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getDomainAttributeTarget_Attribute(), ecorePackage.getEAttribute(), null, "attribute", null, 1, 1, DomainAttributeTarget.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getDomainAttributeTarget_NullAsError(), ecorePackage.getEBoolean(), "nullAsError", null, 0, 1, DomainAttributeTarget.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(diagramElementTargetEClass, DiagramElementTarget.class, "DiagramElementTarget", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getDiagramElementTarget_Element(), this.getMappingEntry(), null, "element", null, 1, 1, DiagramElementTarget.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(notationElementTargetEClass, NotationElementTarget.class, "NotationElementTarget", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getNotationElementTarget_Element(), ecorePackage.getEClass(), null, "element", null, 1, 1, NotationElementTarget.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(metricContainerEClass, MetricContainer.class, "MetricContainer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getMetricContainer_Metrics(), this.getMetricRule(), this.getMetricRule_Container(), "metrics", null, 1, -1, MetricContainer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(metricRuleEClass, MetricRule.class, "MetricRule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getMetricRule_Key(), ecorePackage.getEString(), "key", null, 1, 1, MetricRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMetricRule_Rule(), this.getValueExpression(), null, "rule", null, 1, 1, MetricRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMetricRule_Target(), this.getMeasurable(), null, "target", null, 1, 1, MetricRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getMetricRule_LowLimit(), ecorePackage.getEDoubleObject(), "lowLimit", null, 0, 1, MetricRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getMetricRule_HighLimit(), ecorePackage.getEDoubleObject(), "highLimit", null, 0, 1, MetricRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMetricRule_Container(), this.getMetricContainer(), this.getMetricContainer_Metrics(), "container", null, 1, 1, MetricRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(auditedMetricTargetEClass, AuditedMetricTarget.class, "AuditedMetricTarget", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getAuditedMetricTarget_Metric(), this.getMetricRule(), null, "metric", null, 1, 1, AuditedMetricTarget.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(auditableEClass, Auditable.class, "Auditable", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

		initEClass(measurableEClass, Measurable.class, "Measurable", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

		// Initialize enums and add enum literals
		initEEnum(labelTextAccessMethodEEnum, LabelTextAccessMethod.class, "LabelTextAccessMethod");
		addEEnumLiteral(labelTextAccessMethodEEnum, LabelTextAccessMethod.MESSAGE_FORMAT);
		addEEnumLiteral(labelTextAccessMethodEEnum, LabelTextAccessMethod.NATIVE);
		addEEnumLiteral(labelTextAccessMethodEEnum, LabelTextAccessMethod.REGEXP);
		addEEnumLiteral(labelTextAccessMethodEEnum, LabelTextAccessMethod.PRINTF);

		initEEnum(severityEEnum, Severity.class, "Severity");
		addEEnumLiteral(severityEEnum, Severity.INFO_LITERAL);
		addEEnumLiteral(severityEEnum, Severity.WARNING_LITERAL);
		addEEnumLiteral(severityEEnum, Severity.ERROR_LITERAL);

		initEEnum(languageEEnum, Language.class, "Language");
		addEEnumLiteral(languageEEnum, Language.OCL_LITERAL);
		addEEnumLiteral(languageEEnum, Language.JAVA_LITERAL);
		addEEnumLiteral(languageEEnum, Language.REGEXP_LITERAL);
		addEEnumLiteral(languageEEnum, Language.NREGEXP_LITERAL);
		addEEnumLiteral(languageEEnum, Language.LITERAL_LITERAL);

		// Create resource
		createResource(eNS_URI);

		// Create annotations
		// http://www.eclipse.org/emf/2004/EmfaticAnnotationMap
		createEmfaticAnnotationMapAnnotations();
		// http://www.eclipse.org/gmf/2005/constraints
		createConstraintsAnnotations();
		// http://www.eclipse.org/gmf/2005/constraints/meta
		createMetaAnnotations();
	}

	/**
	 * Initializes the annotations for <b>http://www.eclipse.org/emf/2004/EmfaticAnnotationMap</b>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void createEmfaticAnnotationMapAnnotations() {
		String source = "http://www.eclipse.org/emf/2004/EmfaticAnnotationMap";		
		addAnnotation
		  (this, 
		   source, 
		   new String[] {
			 "constraints", "http://www.eclipse.org/gmf/2005/constraints",
			 "constraintsMeta", "http://www.eclipse.org/gmf/2005/constraints/meta"
		   });																																																																																																																		
	}

	/**
	 * Initializes the annotations for <b>http://www.eclipse.org/gmf/2005/constraints/meta</b>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void createMetaAnnotations() {
		String source = "http://www.eclipse.org/gmf/2005/constraints/meta";							
		addAnnotation
		  (getMappingEntry_DomainSpecialization(), 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "self.getDomainContext()"
		   });																																
		addAnnotation
		  (constraintEClass, 
		   source, 
		   new String[] {
			 "def", "Constraint"
		   });						
		addAnnotation
		  (getLinkConstraints_SourceEnd(), 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "let lm:LinkMapping=linkMapping in if lm.sourceMetaFeature.oclIsUndefined() then (if lm.containmentFeature.oclIsUndefined() then lm.linkMetaFeature.eContainingClass else lm.containmentFeature.eContainingClass endif) else lm.sourceMetaFeature.oclAsType(ecore::EReference).eReferenceType endif"
		   });		
		addAnnotation
		  (getLinkConstraints_SourceEnd(), 
		   source, 
		   new String[] {
			 "def", "variable",
			 "name", "oppositeEnd",
			 "type.ocl", "linkMapping.linkMetaFeature.eType"
		   });			
		addAnnotation
		  (getLinkConstraints_TargetEnd(), 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "linkMapping.linkMetaFeature.eType.oclAsType(ecore::EClass)"
		   });		
		addAnnotation
		  (getLinkConstraints_TargetEnd(), 
		   source, 
		   new String[] {
			 "def", "variable",
			 "name", "oppositeEnd",
			 "type.ocl", "let lm:LinkMapping=linkMapping in if lm.sourceMetaFeature.oclIsUndefined() then (if lm.containmentFeature.oclIsUndefined() then lm.linkMetaFeature.eContainingClass else lm.containmentFeature.eContainingClass endif) else lm.sourceMetaFeature.oclAsType(ecore::EReference).eReferenceType endif"
		   });		
		addAnnotation
		  (valueExpressionEClass, 
		   source, 
		   new String[] {
			 "def", "ValueSpec"
		   });				
		addAnnotation
		  (getValueExpression_Body(), 
		   source, 
		   new String[] {
			 "def", "body"
		   });			
		addAnnotation
		  (getValueExpression_LangName(), 
		   source, 
		   new String[] {
			 "def", "lang"
		   });						
		addAnnotation
		  (getFeatureSeqInitializer_Initializers(), 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "self.elementClass"
		   });									
		addAnnotation
		  (featureValueSpecEClass, 
		   source, 
		   new String[] {
			 "def", "type",
			 "ocl", "feature"
		   });																	
		addAnnotation
		  (getAuditRule_Rule(), 
		   source, 
		   new String[] {
			 "def", "context",
			 "ref", "target"
		   });								
		addAnnotation
		  (domainElementTargetEClass, 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "element"
		   });				
		addAnnotation
		  (domainAttributeTargetEClass, 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "attribute.eType"
		   });					
		addAnnotation
		  (diagramElementTargetEClass, 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "if element.oclIsKindOf(NodeMapping) then \'notation::Node\' else \'notation::Edge\' endif"
		   });				
		addAnnotation
		  (notationElementTargetEClass, 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "element"
		   });								
		addAnnotation
		  (getMetricRule_Rule(), 
		   source, 
		   new String[] {
			 "def", "context",
			 "ref", "target"
		   });		
		addAnnotation
		  (getMetricRule_Rule(), 
		   source, 
		   new String[] {
			 "def", "type",
			 "ocl", "\'ecore::EDoubleObject\'"
		   });							
		addAnnotation
		  (auditedMetricTargetEClass, 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "\'ecore::EDoubleObject\'"
		   });			
	}

	/**
	 * Initializes the annotations for <b>http://www.eclipse.org/gmf/2005/constraints</b>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void createConstraintsAnnotations() {
		String source = "http://www.eclipse.org/gmf/2005/constraints";			
		addAnnotation
		  (this, 
		   source, 
		   new String[] {
			 "import", "http://www.eclipse.org/gmf/runtime/1.0.0/notation"
		   });		
		addAnnotation
		  (mappingEClass, 
		   source, 
		   new String[] {
			 "ocl", "nodes->forAll(n|n.containmentFeature.oclIsUndefined() and not n.child.domainMetaElement.oclIsUndefined() implies links->exists(let r:ecore::EReference= linkMetaFeature.oclAsType(ecore::EReference) in r.containment and r.eReferenceType.isSuperTypeOf(n.child.domainMetaElement)))",
			 "description", "Phantom nodes that are not targeted by a link mapping exist"
		   });					
		addAnnotation
		  (getMappingEntry_DomainSpecialization(), 
		   source, 
		   new String[] {
			 "ocl", "not domainSpecialization.oclIsUndefined() implies not domainMetaElement.oclIsUndefined()",
			 "description", "Using \'Domain Specialization\' requires \'Domain Meta Element\' to be set"
		   });			
		addAnnotation
		  (getMappingEntry_DomainInitializer(), 
		   source, 
		   new String[] {
			 "ocl", "not domainInitializer.oclIsUndefined() implies not domainMetaElement.oclIsUndefined()",
			 "description", "\'Domain Element\' must be set in mapping with \'Element Initializers\'"
		   });			
		addAnnotation
		  (getNeedsContainment_ContainmentFeature(), 
		   source, 
		   new String[] {
			 "ocl", "not containmentFeature.oclIsUndefined() implies containmentFeature.containment",
			 "description", "Containment EReference expected"
		   });		
		addAnnotation
		  (nodeReferenceEClass, 
		   source, 
		   new String[] {
			 "ocl", "not containmentFeature.oclIsUndefined() implies containmentFeature.eReferenceType.isSuperTypeOf(child.domainMetaElement)",
			 "description", "\'Containment Feature\' must reference the same class or super type of \'Domain Meta Element\' of the referenced node"
		   });		
		addAnnotation
		  (getNodeReference_ChildrenFeature(), 
		   source, 
		   new String[] {
			 "ocl", "not childrenFeature.oclIsUndefined() implies childrenFeature.eReferenceType.isSuperTypeOf(child.domainMetaElement)",
			 "description", "\'Children Feature\' must reference the same class or super type of \'Domain Meta Element\' of the referenced node"
		   });		
		addAnnotation
		  (childReferenceEClass, 
		   source, 
		   new String[] {
			 "ocl", "not (ownedChild.oclIsUndefined() and referencedChild.oclIsUndefined())",
			 "description", "Either \'ownedChild\' or \'referencedChild\' NodeMapping must be set"
		   });		
		addAnnotation
		  (childReferenceEClass, 
		   source, 
		   new String[] {
			 "ocl", "not childrenFeature.oclIsUndefined() implies childrenFeature.eContainingClass.isSuperTypeOf(parentNode.domainMetaElement)",
			 "description", "\'Children Feature\' must be owned by \'Domain Meta Element\' or its super type of this reference parent Node Mapping"
		   });		
		addAnnotation
		  (childReferenceEClass, 
		   source, 
		   new String[] {
			 "ocl", "not containmentFeature.oclIsUndefined() implies containmentFeature.eContainingClass.isSuperTypeOf(parentNode.domainMetaElement)",
			 "description", "\'Containment Feature\' must be owned by \'Domain Meta Element\' or its super type of this reference parent Node Mapping"
		   });		
		addAnnotation
		  (childReferenceEClass, 
		   source, 
		   new String[] {
			 "ocl", "not child.getDomainContext().oclIsUndefined() implies not containmentFeature.oclIsUndefined()",
			 "description", "ChildReference to NodeMapping with domainElement should define \'containmentFeature\'"
		   });		
		addAnnotation
		  (childReferenceEClass, 
		   source, 
		   new String[] {
			 "ocl", "let child:NodeMapping=(if ownedChild.oclIsUndefined() then referencedChild else ownedChild endif) in (((child.labelMappings->size() = 1) and child.labelMappings->forAll( soleLabel: LabelMapping | soleLabel.diagramLabel = child.diagramNode)) implies (child.diagramNode.affixedParentSide = gmfgraph::Direction::NONE))",
			 "description", "Side-affixed children can not be pure labels"
		   });		
		addAnnotation
		  (childReferenceEClass, 
		   source, 
		   new String[] {
			 "ocl", "let child:NodeMapping=(if ownedChild.oclIsUndefined() then referencedChild else ownedChild endif) in ((not compartment.oclIsUndefined()) implies (child.diagramNode.affixedParentSide = gmfgraph::Direction::NONE))",
			 "description", "Side-affixed children can not be placed in compartments"
		   });				
		addAnnotation
		  (linkMappingEClass, 
		   source, 
		   new String[] {
			 "ocl", "domainMetaElement.oclIsUndefined() implies containmentFeature.oclIsUndefined() and sourceMetaFeature.oclIsUndefined()",
			 "description", "Link mapping without \'Domain Element\' class does not use \'Containment Feature\' and \'Source Feature\'"
		   });		
		addAnnotation
		  (linkMappingEClass, 
		   source, 
		   new String[] {
			 "ocl", "not domainMetaElement.oclIsUndefined()  implies containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement)",
			 "description", "\'Containment Feature\' must reference the same class or super type of \'Domain Element\' EClass"
		   });		
		addAnnotation
		  (getLinkMapping_SourceMetaFeature(), 
		   source, 
		   new String[] {
			 "ocl", "not domainMetaElement.oclIsUndefined() implies sourceMetaFeature.oclIsUndefined() or sourceMetaFeature.eContainingClass.isSuperTypeOf(domainMetaElement)",
			 "description", "\'Source Feature\' must be owned by the link \'Domain Element\' or its super type"
		   });		
		addAnnotation
		  (getLinkMapping_LinkMetaFeature(), 
		   source, 
		   new String[] {
			 "ocl", "not(domainMetaElement.oclIsUndefined() or linkMetaFeature.oclIsUndefined()) implies linkMetaFeature.eContainingClass.isSuperTypeOf(domainMetaElement)",
			 "description", "\'Target Feature\' must be owned by the link \'Domain Element\' or its super type"
		   });			
		addAnnotation
		  (getCanvasMapping_DomainMetaElement(), 
		   source, 
		   new String[] {
			 "ocl", "not domainMetaElement.oclIsUndefined() implies not(domainMetaElement.abstract or domainMetaElement.interface)",
			 "description", "Top-level diagram container must be concrete"
		   });				
		addAnnotation
		  (getFeatureLabelMapping_Features(), 
		   source, 
		   new String[] {
			 "ocl", "features->forAll(f | f.eContainingClass.isSuperTypeOf(mapEntry.domainMetaElement))",
			 "description", "Label attributes must be available in \'Domain Element\' EClass of the labeled mapping entry"
		   });		
		addAnnotation
		  (getFeatureLabelMapping_EditableFeatures(), 
		   source, 
		   new String[] {
			 "ocl", "editableFeatures->forAll(f | f.eContainingClass.isSuperTypeOf(mapEntry.domainMetaElement))",
			 "description", "Label attributes must be available in \'Domain Element\' EClass of the labeled mapping entry"
		   });									
		addAnnotation
		  (linkConstraintsEClass, 
		   source, 
		   new String[] {
			 "ocl", "not (sourceEnd.oclIsUndefined() and targetEnd.oclIsUndefined())",
			 "description", "Either \'sourceEnd\' or \'targetEnd\' constraint must be specified"
		   });																				
		addAnnotation
		  (getFeatureSeqInitializer_ElementClass(), 
		   source, 
		   new String[] {
			 "ocl", "not creatingInitializer.feature.oclIsUndefined() implies creatingInitializer.feature.oclAsType(ecore::EReference).eReferenceType.isSuperTypeOf(elementClass)",
			 "description", "\'elementClass\' must be the same as or sub-type of the containing \'GenReferenceNewElementSpec\' reference type"
		   });		
		addAnnotation
		  (getFeatureSeqInitializer_ElementClass(), 
		   source, 
		   new String[] {
			 "ocl", "not creatingInitializer.feature.oclIsUndefined() implies not (elementClass.interface or elementClass.abstract)",
			 "description", "\'elementClass\' must be a concrete EClass which is the same or sub-type of the containing \'GenReferenceNewElementSpec\' reference type"
		   });			
		addAnnotation
		  (getFeatureInitializer_Feature(), 
		   source, 
		   new String[] {
			 "ocl", "feature <> null implies not featureSeqInitializer.initializers->exists(i| i <> self and i.feature = self.feature)",
			 "description", "The feature is already initialized by another \'FeatureInitializer\' in the sequence"
		   });		
		addAnnotation
		  (getFeatureInitializer_Feature(), 
		   source, 
		   new String[] {
			 "ocl", "feature <> null implies feature.eContainingClass.isSuperTypeOf(featureSeqInitializer.elementClass)",
			 "description", "The \'feature\' of \'FeatureInitializer\' must be available in \'Meta Class\' of the initialized element"
		   });		
		addAnnotation
		  (getFeatureInitializer_Feature(), 
		   source, 
		   new String[] {
			 "ocl", "feature <> null implies feature.changeable",
			 "description", "The \'feature\' of \'FeatureInitializer\' must be changeable"
		   });				
		addAnnotation
		  (referenceNewElementSpecEClass, 
		   source, 
		   new String[] {
			 "ocl", "feature.many = false implies not (newElementInitializers->size() > 1)",
			 "description", "FeatureInitializer for single element EReference can\'t contain multiple element initializers"
		   });		
		addAnnotation
		  (referenceNewElementSpecEClass, 
		   source, 
		   new String[] {
			 "ocl", "let r: ecore::EReference = feature.oclAsType(ecore::EReference) in feature <> null implies r.containment",
			 "description", "\'feature\' of \'ReferenceNewElementSpec\' must refer to containment ecore::EReference"
		   });					
		addAnnotation
		  (getAuditContainer_Id(), 
		   source, 
		   new String[] {
			 "ocl", "not parentContainer.oclIsUndefined() implies parentContainer.childContainers->one(i | i.id = self.id)",
			 "description", "Audit container with the same ID already exists"
		   });									
		addAnnotation
		  (getAuditRule_Id(), 
		   source, 
		   new String[] {
			 "ocl", "not id.oclIsUndefined() implies container.audits->one(i | i.id = self.id)",
			 "description", "Audit rule with the same ID already exists"
		   });																						
		addAnnotation
		  (getNotationElementTarget_Element(), 
		   source, 
		   new String[] {
			 "ocl", "element.eAllSuperTypes->including(element)->one(ePackage.name = \'notation\' and name = \'View\')",
			 "description", "\'notation::View\' or its sub-class must be set to NotationElement target"
		   });		
		addAnnotation
		  (metricRuleEClass, 
		   source, 
		   new String[] {
			 "ocl", "not lowLimit.oclIsUndefined() and not highLimit.oclIsUndefined()  implies lowLimit < highLimit",
			 "description", "Metric value \'lowLimit\' must be smaller then \'highLimit\'"
		   });			
		addAnnotation
		  (getMetricRule_Key(), 
		   source, 
		   new String[] {
			 "ocl", "not key.oclIsUndefined() implies container.metrics->one(i | i.key = self.key)",
			 "description", "Metric rule with the same \'key\' already exists"
		   });												
	}

} //GMFMapPackageImpl
@


1.60
log
@[227127] support literal values for feature initializers. step 1: models updated to specify new possible values
@
text
@d823 9
d833 1
a833 1
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(1);
d842 1
a842 1
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(2);
d851 1
a851 1
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(4);
d860 1
a860 1
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(3);
d869 1
a869 1
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(5);
d1673 1
d1905 1
d2050 1
a2050 1
		   });																																																																																																																	
d2067 1
a2067 1
		   });																															
d2333 7
@


1.59
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@d18 41
d2011 1
@


1.58
log
@[227505] Replace FeatureValueSpec generalization of ValueExpression with aggregation, as it's better approach to model such a concept
@
text
@d1830 1
a1830 1
		initEReference(getCompartmentMapping_ParentNode(), this.getNodeMapping(), this.getNodeMapping_Compartments(), "parentNode", null, 1, 1, CompartmentMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1850 1
a1850 1
		initEReference(getLabelMapping_MapEntry(), this.getMappingEntry(), this.getMappingEntry_LabelMappings(), "mapEntry", null, 1, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1865 1
a1865 1
		initEReference(getLinkConstraints_LinkMapping(), this.getLinkMapping(), this.getLinkMapping_CreationConstraints(), "linkMapping", null, 1, 1, LinkConstraints.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1880 1
a1880 1
		initEReference(getFeatureSeqInitializer_CreatingInitializer(), this.getReferenceNewElementSpec(), this.getReferenceNewElementSpec_NewElementInitializers(), "creatingInitializer", null, 0, 1, FeatureSeqInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1884 1
a1884 1
		initEReference(getFeatureInitializer_FeatureSeqInitializer(), this.getFeatureSeqInitializer(), this.getFeatureSeqInitializer_Initializers(), "featureSeqInitializer", null, 1, 1, FeatureInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1997 1
a1997 1
		   });																																																																																																																						
d2014 1
a2014 1
		   });																																	
d2020 1
a2020 1
		   });							
d2075 1
a2075 1
		   });											
d2238 1
a2238 1
		   });					
d2273 1
a2273 1
		   });					
d2287 1
a2287 1
		   });																					
d2301 1
a2301 1
		   });				
d2322 1
a2322 1
		   });					
@


1.57
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@d14 1
a15 1
import org.eclipse.emf.ecore.EValidator;
d1070 9
d1656 1
a1775 1
		featureValueSpecEClass.getESuperTypes().add(this.getValueExpression());
d1882 1
a1882 1
		initEClass(featureInitializerEClass, FeatureInitializer.class, "FeatureInitializer", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
d1887 1
d1997 1
a1997 1
		   });																																																																																																																							
a2079 6
			 "def", "ValueSpec"
		   });		
		addAnnotation
		  (featureValueSpecEClass, 
		   source, 
		   new String[] {
d2322 1
a2322 1
		   });						
@


1.56
log
@regenerated with EMF 2.4M5
@
text
@d1821 1
a1821 1
		initEReference(getCompartmentMapping_ParentNode(), this.getNodeMapping(), this.getNodeMapping_Compartments(), "parentNode", null, 1, 1, CompartmentMapping.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1841 1
a1841 1
		initEReference(getLabelMapping_MapEntry(), this.getMappingEntry(), this.getMappingEntry_LabelMappings(), "mapEntry", null, 1, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1856 1
a1856 1
		initEReference(getLinkConstraints_LinkMapping(), this.getLinkMapping(), this.getLinkMapping_CreationConstraints(), "linkMapping", null, 1, 1, LinkConstraints.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1871 1
a1871 1
		initEReference(getFeatureSeqInitializer_CreatingInitializer(), this.getReferenceNewElementSpec(), this.getReferenceNewElementSpec_NewElementInitializers(), "creatingInitializer", null, 0, 1, FeatureSeqInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1875 1
a1875 1
		initEReference(getFeatureInitializer_FeatureSeqInitializer(), this.getFeatureSeqInitializer(), this.getFeatureSeqInitializer_Initializers(), "featureSeqInitializer", null, 1, 1, FeatureInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1987 1
a1987 1
		   });																																																																																																																		
d2004 1
a2004 1
		   });																															
d2010 1
a2010 1
		   });						
d2065 1
a2065 1
		   });									
d2234 1
a2234 1
		   });				
d2269 1
a2269 1
		   });				
d2283 1
a2283 1
		   });																				
d2297 1
a2297 1
		   });			
d2318 1
a2318 1
		   });					
@


1.55
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d1796 1
a1796 1
		addEOperation(mappingEntryEClass, ecorePackage.getEClass(), "getDomainContext", 0, 1);
@


1.54
log
@[187811] akarjakina - Migration support refactored
@
text
@d14 1
d361 1
@


1.53
log
@refactor message format parser; introduce editor pattern
@
text
@a16 42
import org.eclipse.gmf.mappings.AppearanceSteward;
import org.eclipse.gmf.mappings.AuditContainer;
import org.eclipse.gmf.mappings.AuditRule;
import org.eclipse.gmf.mappings.Auditable;
import org.eclipse.gmf.mappings.AuditedMetricTarget;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.ChildReference;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.Constraint;
import org.eclipse.gmf.mappings.DesignLabelMapping;
import org.eclipse.gmf.mappings.DiagramElementTarget;
import org.eclipse.gmf.mappings.DomainAttributeTarget;
import org.eclipse.gmf.mappings.DomainElementTarget;
import org.eclipse.gmf.mappings.ElementInitializer;
import org.eclipse.gmf.mappings.FeatureInitializer;
import org.eclipse.gmf.mappings.FeatureLabelMapping;
import org.eclipse.gmf.mappings.FeatureSeqInitializer;
import org.eclipse.gmf.mappings.FeatureValueSpec;
import org.eclipse.gmf.mappings.GMFMapFactory;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.LabelTextAccessMethod;
import org.eclipse.gmf.mappings.Language;
import org.eclipse.gmf.mappings.LinkConstraints;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.Mapping;
import org.eclipse.gmf.mappings.MappingEntry;
import org.eclipse.gmf.mappings.Measurable;
import org.eclipse.gmf.mappings.MenuOwner;
import org.eclipse.gmf.mappings.MetricContainer;
import org.eclipse.gmf.mappings.MetricRule;
import org.eclipse.gmf.mappings.NeedsContainment;
import org.eclipse.gmf.mappings.NodeMapping;
import org.eclipse.gmf.mappings.NodeReference;
import org.eclipse.gmf.mappings.NotationElementTarget;
import org.eclipse.gmf.mappings.ReferenceNewElementSpec;
import org.eclipse.gmf.mappings.RuleBase;
import org.eclipse.gmf.mappings.Severity;
import org.eclipse.gmf.mappings.ToolOwner;
import org.eclipse.gmf.mappings.TopNodeReference;
import org.eclipse.gmf.mappings.ValueExpression;
import org.eclipse.gmf.internal.common.migrate.MigrationConfig;
a17 1
import org.eclipse.gmf.mappings.util.GMFMapMigration;
a376 1
		MigrationConfig.Registry.INSTANCE.register(GMFMapMigration.CONFIG);
@


1.52
log
@combine label text access methods
@
text
@d833 9
d843 1
a843 1
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(2);
d861 1
a861 1
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(4);
d1657 2
a1659 1
		createEAttribute(featureLabelMappingEClass, FEATURE_LABEL_MAPPING__EDIT_PATTERN);
d1888 2
a1890 1
		initEAttribute(getFeatureLabelMapping_EditPattern(), ecorePackage.getEString(), "editPattern", null, 0, 1, FeatureLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d2029 1
a2029 1
		   });																																																																																																																	
d2046 1
a2046 1
		   });																														
d2318 1
a2318 1
		   });								
@


1.51
log
@additional methods to produce label text and parse user input
@
text
@a36 1
import org.eclipse.gmf.mappings.LabelEditMethod;
d38 1
a38 1
import org.eclipse.gmf.mappings.LabelViewMethod;
d328 1
a328 8
	private EEnum labelViewMethodEEnum = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EEnum labelEditMethodEEnum = null;
d1535 2
a1536 11
	public EEnum getLabelViewMethod() {
		return labelViewMethodEEnum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EEnum getLabelEditMethod() {
		return labelEditMethodEEnum;
d1745 1
a1745 2
		labelViewMethodEEnum = createEEnum(LABEL_VIEW_METHOD);
		labelEditMethodEEnum = createEEnum(LABEL_EDIT_METHOD);
d1878 1
a1878 1
		initEAttribute(getFeatureLabelMapping_ViewMethod(), this.getLabelViewMethod(), "viewMethod", null, 0, 1, FeatureLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1880 1
a1880 1
		initEAttribute(getFeatureLabelMapping_EditMethod(), this.getLabelEditMethod(), "editMethod", null, 0, 1, FeatureLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1975 5
a1979 9
		initEEnum(labelViewMethodEEnum, LabelViewMethod.class, "LabelViewMethod");
		addEEnumLiteral(labelViewMethodEEnum, LabelViewMethod.MESSAGE_FORMAT);
		addEEnumLiteral(labelViewMethodEEnum, LabelViewMethod.PRINTF);
		addEEnumLiteral(labelViewMethodEEnum, LabelViewMethod.NATIVE);

		initEEnum(labelEditMethodEEnum, LabelEditMethod.class, "LabelEditMethod");
		addEEnumLiteral(labelEditMethodEEnum, LabelEditMethod.MESSAGE_FORMAT);
		addEEnumLiteral(labelEditMethodEEnum, LabelEditMethod.REGEXP);
		addEEnumLiteral(labelEditMethodEEnum, LabelEditMethod.NATIVE);
@


1.50
log
@regenerated
@
text
@d37 1
d39 1
d329 14
d841 9
d851 10
a860 1
		return (EAttribute)featureLabelMappingEClass.getEStructuralFeatures().get(2);
d1543 18
d1665 1
d1667 1
d1762 2
d1896 1
d1898 1
d1993 10
@


1.49
log
@no need to import each member of the package explicitly
@
text
@d17 40
@


1.48
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d18 1
a18 40
import org.eclipse.gmf.mappings.AppearanceSteward;
import org.eclipse.gmf.mappings.AuditContainer;
import org.eclipse.gmf.mappings.AuditRule;
import org.eclipse.gmf.mappings.Auditable;
import org.eclipse.gmf.mappings.AuditedMetricTarget;
import org.eclipse.gmf.mappings.CanvasMapping;
import org.eclipse.gmf.mappings.ChildReference;
import org.eclipse.gmf.mappings.CompartmentMapping;
import org.eclipse.gmf.mappings.Constraint;
import org.eclipse.gmf.mappings.DesignLabelMapping;
import org.eclipse.gmf.mappings.DiagramElementTarget;
import org.eclipse.gmf.mappings.DomainAttributeTarget;
import org.eclipse.gmf.mappings.DomainElementTarget;
import org.eclipse.gmf.mappings.ElementInitializer;
import org.eclipse.gmf.mappings.FeatureInitializer;
import org.eclipse.gmf.mappings.FeatureLabelMapping;
import org.eclipse.gmf.mappings.FeatureSeqInitializer;
import org.eclipse.gmf.mappings.FeatureValueSpec;
import org.eclipse.gmf.mappings.GMFMapFactory;
import org.eclipse.gmf.mappings.GMFMapPackage;
import org.eclipse.gmf.mappings.LabelMapping;
import org.eclipse.gmf.mappings.Language;
import org.eclipse.gmf.mappings.LinkConstraints;
import org.eclipse.gmf.mappings.LinkMapping;
import org.eclipse.gmf.mappings.Mapping;
import org.eclipse.gmf.mappings.MappingEntry;
import org.eclipse.gmf.mappings.Measurable;
import org.eclipse.gmf.mappings.MenuOwner;
import org.eclipse.gmf.mappings.MetricContainer;
import org.eclipse.gmf.mappings.MetricRule;
import org.eclipse.gmf.mappings.NeedsContainment;
import org.eclipse.gmf.mappings.NodeMapping;
import org.eclipse.gmf.mappings.NodeReference;
import org.eclipse.gmf.mappings.NotationElementTarget;
import org.eclipse.gmf.mappings.ReferenceNewElementSpec;
import org.eclipse.gmf.mappings.RuleBase;
import org.eclipse.gmf.mappings.Severity;
import org.eclipse.gmf.mappings.ToolOwner;
import org.eclipse.gmf.mappings.TopNodeReference;
import org.eclipse.gmf.mappings.ValueExpression;
@


1.47
log
@[161380] Inroduce label mapping subclasses
@
text
@d1738 4
@


1.46
log
@[161489] [Duplicate] Correct gmfgen constraint on GenFeatureValueSpec according to EMFT OCL #151234
@
text
@d27 1
d33 1
d144 14
d779 20
a798 2
	public EReference getLabelMapping_Features() {
		return (EReference)labelMappingEClass.getEStructuralFeatures().get(1);
d806 2
a807 2
	public EAttribute getLabelMapping_ReadOnly() {
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(2);
d815 2
a816 2
	public EAttribute getLabelMapping_ViewPattern() {
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(3);
d824 2
a825 2
	public EAttribute getLabelMapping_EditPattern() {
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(4);
d833 2
a834 2
	public EReference getLabelMapping_MapEntry() {
		return (EReference)labelMappingEClass.getEStructuralFeatures().get(5);
a1605 1
		createEReference(labelMappingEClass, LABEL_MAPPING__FEATURES);
a1606 2
		createEAttribute(labelMappingEClass, LABEL_MAPPING__VIEW_PATTERN);
		createEAttribute(labelMappingEClass, LABEL_MAPPING__EDIT_PATTERN);
d1609 7
d1751 2
a1828 1
		initEReference(getLabelMapping_Features(), ecorePackage.getEAttribute(), null, "features", null, 0, -1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
a1829 2
		initEAttribute(getLabelMapping_ViewPattern(), ecorePackage.getEString(), "viewPattern", null, 0, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getLabelMapping_EditPattern(), ecorePackage.getEString(), "editPattern", null, 0, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1832 7
d1967 1
a1967 1
		   });																																																																																																															
d1984 1
a1984 1
		   });																												
d2249 1
a2249 1
		   });			
d2251 1
a2251 1
		  (getLabelMapping_Features(), 
d2256 1
a2256 1
		   });							
@


1.45
log
@[119465] support for diagram partitioning
@
text
@d2238 1
a2238 1
			 "ocl", "feature <> null implies not featureSeqInitializer.initializers->exists(i| i <> self and feature = self.feature)",
@


1.44
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
@
text
@d448 9
d1528 1
d1743 1
d1923 1
a1923 1
		   });																																																																																																														
d1940 1
a1940 1
		   });																											
d2107 1
a2107 1
		   });		
@


1.43
log
@[156500] mgolubev - Incorrect constraint specified for ChildReference in gmfmap model
@
text
@d17 1
d31 1
d50 1
d56 1
d184 7
d198 7
d395 1
d979 45
d1033 2
a1034 2
	public EReference getFeatureValueSpec_Feature() {
		return (EReference)featureValueSpecEClass.getEStructuralFeatures().get(0);
d1042 2
a1043 2
	public EReference getFeatureValueSpec_FeatureSeqInitializer() {
		return (EReference)featureValueSpecEClass.getEStructuralFeatures().get(1);
d1585 6
d1593 3
a1595 2
		createEReference(featureValueSpecEClass, FEATURE_VALUE_SPEC__FEATURE);
		createEReference(featureValueSpecEClass, FEATURE_VALUE_SPEC__FEATURE_SEQ_INITIALIZER);
d1706 2
d1731 1
a1731 1
		initEReference(getMappingEntry_DomainInitializer(), this.getElementInitializer(), this.getElementInitializer_MappingEntry(), "domainInitializer", null, 0, 1, MappingEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1797 1
a1797 1
		initEReference(getElementInitializer_MappingEntry(), this.getMappingEntry(), this.getMappingEntry_DomainInitializer(), "mappingEntry", null, 1, 1, ElementInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1800 7
a1806 1
		initEReference(getFeatureSeqInitializer_Initializers(), this.getFeatureValueSpec(), this.getFeatureValueSpec_FeatureSeqInitializer(), "initializers", null, 1, -1, FeatureSeqInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1809 3
a1811 2
		initEReference(getFeatureValueSpec_Feature(), ecorePackage.getEStructuralFeature(), null, "feature", null, 1, 1, FeatureValueSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getFeatureValueSpec_FeatureSeqInitializer(), this.getFeatureSeqInitializer(), this.getFeatureSeqInitializer_Initializers(), "featureSeqInitializer", null, 1, 1, FeatureValueSpec.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1912 1
a1912 1
		   });																																																																																																							
d1929 1
a1929 8
		   });				
		addAnnotation
		  (getMappingEntry_DomainInitializer(), 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "self.getDomainContext()"
		   });																									
d1985 7
d1996 1
a1996 1
		   });			
d1998 1
a1998 1
		  (getFeatureValueSpec_Feature(), 
d2001 3
a2003 2
			 "def", "type"
		   });																
d2089 1
a2089 1
		   });				
d2208 43
a2250 1
		   });																						
d2252 1
a2252 1
		  (getFeatureValueSpec_Feature(), 
d2255 2
a2256 2
			 "ocl", "feature.eContainingClass.isSuperTypeOf(featureSeqInitializer.mappingEntry.getDomainContext())",
			 "description", "Initialized \'Feature\' must be owned by \'Domain Element\' or its super type"
@


1.42
log
@[124826] mgolubev - Support nodes with border items
@
text
@d2069 1
a2069 1
			 "ocl", "let child:NodeMapping=(if ownedChild.oclIsUndefined() then referencedChild else ownedChild endif) in (((child.labelMappings->size() = 1) and child.labelMappings->forAll( soleLabel: LabelMapping | soleLabel.diagramLabel = child.diagramNode)) implies (child.diagramNode.affixedParentSide = gmfgraph::Direction::NSEW))",
d2076 1
a2076 1
			 "ocl", "let child:NodeMapping=(if ownedChild.oclIsUndefined() then referencedChild else ownedChild endif) in ((not compartment.oclIsUndefined()) implies (child.diagramNode.affixedParentSide = gmfgraph::Direction::NSEW))",
@


1.41
log
@#148430 gmfmap, gmfgen Validation should report childnodes with domainElement but without containmentFeature
@
text
@d1832 1
a1832 1
		   });																																																																																																					
d1856 1
a1856 1
		   });																							
d2064 14
@


1.40
log
@#145042 Introduce expression Language enumeration into gmfmap, gfmgen models  instead of plain text attribute
@
text
@d1832 1
a1832 1
		   });																																																																																																				
d1856 1
a1856 1
		   });																						
d2057 7
@


1.39
log
@typo in constraint's message
@
text
@d35 1
d295 7
d915 9
d1410 9
d1514 1
d1589 1
d1720 2
a1721 1
		initEAttribute(getValueExpression_Language(), ecorePackage.getEString(), "language", "ocl", 0, 1, ValueExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1800 6
d1906 1
a1906 1
		  (getValueExpression_Language(), 
@


1.38
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d2021 1
a2021 1
			 "description", "\'Children Feature\' must be owned by \'Domain Meta Element\' or its super type of this reference parent Node Mapping"
@


1.37
log
@use exhaustive validation constraints defined with our own annotation scheme
@
text
@d1797 1
a1797 1
		   });																																																																																																					
d1821 1
a1821 1
		   });																							
a1991 7
			 "ocl", "not (child.domainMetaElement.oclIsUndefined() and containmentFeature.oclIsUndefined())",
			 "description", "Either \'domainMetaElement\' or \'containmentFeature\' must be specified"
		   });		
		addAnnotation
		  (nodeReferenceEClass, 
		   source, 
		   new String[] {
@


1.36
log
@#136865 Validation of gmfgen fails for the notation model elements
@
text
@d14 1
d53 1
d365 6
d1578 1
a1578 1
	public void initializePackageContents() {
d1958 1
a1958 1
			 "import", "platform:/resource/org.eclipse.gmf.runtime.notation/model/notation.ecore"
@


1.35
log
@overriding recent changes introduced (along with fixing #133836) in GMFMap model, as it's merely a 'shortcut', quite frequent though. Still, adding few new concepts just for the sake of single usecase (I do admit it's popular) seems excessive to me.
GMFMap kept the same as old (no new notions introduced), GMFGraph got generalization from DiagramLabel to DiagramNode to make it possible to use DiagramLabels for NodeMappings (thus, it's possible to detect such nodes in the DGMT)
Tests added to make sure we generate correct genModel for both cases.
@
text
@d2096 2
a2097 2
			 "ocl", "element.oclIsKindOf(notation::View)",
			 "description", "Notation model element expected"
@


1.34
log
@revert to gmfmap model compatibility
@
text
@a32 1
import org.eclipse.gmf.mappings.LabelFlavour;
a33 1
import org.eclipse.gmf.mappings.LabelNodeMapping;
a106 7
	private EClass labelNodeMappingEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a134 7
	private EClass labelFlavourEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d530 1
a530 1
	public EReference getNodeMapping_Children() {
d539 1
a539 1
	public EReference getNodeMapping_Compartments() {
d548 1
a548 1
	public EReference getNodeMapping_DiagramNode() {
a556 9
	public EClass getLabelNodeMapping() {
		return labelNodeMappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d710 1
a710 1
	public EReference getLabelMapping_MapEntry() {
d719 2
a720 2
	public EClass getLabelFlavour() {
		return labelFlavourEClass;
d728 2
a729 2
	public EReference getLabelFlavour_DiagramLabel() {
		return (EReference)labelFlavourEClass.getEStructuralFeatures().get(0);
d737 2
a738 2
	public EReference getLabelFlavour_Features() {
		return (EReference)labelFlavourEClass.getEStructuralFeatures().get(1);
d746 2
a747 2
	public EAttribute getLabelFlavour_ReadOnly() {
		return (EAttribute)labelFlavourEClass.getEStructuralFeatures().get(2);
d755 2
a756 11
	public EAttribute getLabelFlavour_ViewPattern() {
		return (EAttribute)labelFlavourEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getLabelFlavour_EditPattern() {
		return (EAttribute)labelFlavourEClass.getEStructuralFeatures().get(4);
d1439 1
a1441 3
		createEReference(nodeMappingEClass, NODE_MAPPING__DIAGRAM_NODE);

		labelNodeMappingEClass = createEClass(LABEL_NODE_MAPPING);
d1463 5
a1469 7
		labelFlavourEClass = createEClass(LABEL_FLAVOUR);
		createEReference(labelFlavourEClass, LABEL_FLAVOUR__DIAGRAM_LABEL);
		createEReference(labelFlavourEClass, LABEL_FLAVOUR__FEATURES);
		createEAttribute(labelFlavourEClass, LABEL_FLAVOUR__READ_ONLY);
		createEAttribute(labelFlavourEClass, LABEL_FLAVOUR__VIEW_PATTERN);
		createEAttribute(labelFlavourEClass, LABEL_FLAVOUR__EDIT_PATTERN);

a1590 2
		labelNodeMappingEClass.getESuperTypes().add(this.getNodeMapping());
		labelNodeMappingEClass.getESuperTypes().add(this.getLabelFlavour());
a1595 1
		labelMappingEClass.getESuperTypes().add(this.getLabelFlavour());
d1644 1
a1646 3
		initEReference(getNodeMapping_DiagramNode(), theGMFGraphPackage.getNode(), null, "diagramNode", null, 0, 1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(labelNodeMappingEClass, LabelNodeMapping.class, "LabelNodeMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
d1668 5
a1674 7
		initEClass(labelFlavourEClass, LabelFlavour.class, "LabelFlavour", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getLabelFlavour_DiagramLabel(), theGMFGraphPackage.getDiagramLabel(), null, "diagramLabel", null, 1, 1, LabelFlavour.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLabelFlavour_Features(), ecorePackage.getEAttribute(), null, "features", null, 0, -1, LabelFlavour.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getLabelFlavour_ReadOnly(), ecorePackage.getEBoolean(), "readOnly", null, 0, 1, LabelFlavour.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getLabelFlavour_ViewPattern(), ecorePackage.getEString(), "viewPattern", null, 0, 1, LabelFlavour.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getLabelFlavour_EditPattern(), ecorePackage.getEString(), "editPattern", null, 0, 1, LabelFlavour.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

d1789 1
a1789 1
		   });																																																																																																						
d1813 1
a1813 1
		   });																								
d2021 1
a2021 1
		   });					
d2058 1
a2058 1
		  (getLabelFlavour_Features(), 
@


1.33
log
@#133836 Creating a child node without a label causes error
@
text
@a49 1
import org.eclipse.gmf.mappings.ShapeNodeMapping;
a108 7
	private EClass shapeNodeMappingEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d564 2
a565 11
	public EClass getShapeNodeMapping() {
		return shapeNodeMappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getShapeNodeMapping_DiagramNode() {
		return (EReference)shapeNodeMappingEClass.getEStructuralFeatures().get(0);
d1475 1
a1475 3

		shapeNodeMappingEClass = createEClass(SHAPE_NODE_MAPPING);
		createEReference(shapeNodeMappingEClass, SHAPE_NODE_MAPPING__DIAGRAM_NODE);
a1628 1
		shapeNodeMappingEClass.getESuperTypes().add(this.getNodeMapping());
d1684 1
a1684 1
		initEClass(nodeMappingEClass, NodeMapping.class, "NodeMapping", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
d1687 1
a1687 3

		initEClass(shapeNodeMappingEClass, ShapeNodeMapping.class, "ShapeNodeMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getShapeNodeMapping_DiagramNode(), theGMFGraphPackage.getNode(), null, "diagramNode", null, 1, 1, ShapeNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1834 1
a1834 1
		   });																																																																																																							
d1858 1
a1858 1
		   });																									
d2066 1
a2066 1
		   });						
@


1.32
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@d33 1
d35 1
d50 1
d110 14
d152 7
d554 1
a554 1
	public EReference getNodeMapping_DiagramNode() {
d563 1
a563 1
	public EReference getNodeMapping_Children() {
d572 20
a591 2
	public EReference getNodeMapping_Compartments() {
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(2);
d752 1
a752 1
	public EReference getLabelMapping_DiagramLabel() {
d761 11
a771 2
	public EReference getLabelMapping_Features() {
		return (EReference)labelMappingEClass.getEStructuralFeatures().get(1);
d779 2
a780 2
	public EAttribute getLabelMapping_ReadOnly() {
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(2);
d788 2
a789 2
	public EAttribute getLabelMapping_ViewPattern() {
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(3);
d797 2
a798 2
	public EAttribute getLabelMapping_EditPattern() {
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(4);
d806 2
a807 2
	public EReference getLabelMapping_MapEntry() {
		return (EReference)labelMappingEClass.getEStructuralFeatures().get(5);
a1489 1
		createEReference(nodeMappingEClass, NODE_MAPPING__DIAGRAM_NODE);
d1493 5
a1517 5
		createEReference(labelMappingEClass, LABEL_MAPPING__DIAGRAM_LABEL);
		createEReference(labelMappingEClass, LABEL_MAPPING__FEATURES);
		createEAttribute(labelMappingEClass, LABEL_MAPPING__READ_ONLY);
		createEAttribute(labelMappingEClass, LABEL_MAPPING__VIEW_PATTERN);
		createEAttribute(labelMappingEClass, LABEL_MAPPING__EDIT_PATTERN);
d1520 7
d1648 3
d1656 1
d1704 1
a1704 2
		initEClass(nodeMappingEClass, NodeMapping.class, "NodeMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getNodeMapping_DiagramNode(), theGMFGraphPackage.getNode(), null, "diagramNode", null, 1, 1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1708 5
a1732 5
		initEReference(getLabelMapping_DiagramLabel(), theGMFGraphPackage.getDiagramLabel(), null, "diagramLabel", null, 1, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLabelMapping_Features(), ecorePackage.getEAttribute(), null, "features", null, 0, -1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getLabelMapping_ReadOnly(), ecorePackage.getEBoolean(), "readOnly", null, 0, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getLabelMapping_ViewPattern(), ecorePackage.getEString(), "viewPattern", null, 0, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getLabelMapping_EditPattern(), ecorePackage.getEString(), "editPattern", null, 0, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1735 7
d1856 1
a1856 1
		   });																																																																																																					
d1880 1
a1880 1
		   });																							
d2088 1
a2088 1
		   });				
d2125 1
a2125 1
		  (getLabelMapping_Features(), 
@


1.31
log
@#134085 Implement metrics transformation from gmfmap to gmfgen model
@
text
@d26 1
d233 7
d1196 27
d1524 4
d1602 1
d1729 4
d1789 1
a1789 1
		   });																																																																																																	
d1895 7
d2091 1
a2091 1
		   });																		
@


1.30
log
@[rdvorak] #131340 Update constraint annotations in gmfmap meta-model to the latest changes
@
text
@d1278 18
d1297 1
a1297 1
		return (EReference)metricRuleEClass.getEStructuralFeatures().get(3);
d1502 2
d1702 2
d1745 1
a1745 1
		   });																																																																																														
d1863 1
a1863 1
		   });							
d1877 1
a1877 1
		   });					
d2047 7
d2061 1
a2061 1
		   });										
@


1.29
log
@feature is better than operation
@
text
@a1706 2
		// constraint
		createConstraintAnnotations();
d1723 1
a1723 1
		   });																																																																														
d1733 1
a1733 1
		String source = "http://www.eclipse.org/gmf/2005/constraints/meta";						
d1740 1
a1740 1
		   });			
d1747 1
a1747 1
		   });																		
d1813 1
a1813 1
		   });														
d1819 23
a1841 2
			 "ocl", "target"
		   });															
d1847 9
a1855 12
			 "ocl", "target.getContext()"
		   });						
	}

	/**
	 * Initializes the annotations for <b>constraint</b>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void createConstraintAnnotations() {
		String source = "constraint";																				
d1857 1
a1857 1
		  (getCanvasMapping_DomainMetaElement(), 
d1860 3
a1862 3
			 "ocl", "not domainMetaElement.oclIsUndefined implies not(domainMetaElement.isAbstract or domainMetaElement.isInterface)",
			 "description", "Top-level diagram container must be concrete"
		   });																																																												
d1874 6
d1883 1
a1883 1
			 "ocl", "nodes->forAll(n|n.containmentFeature.oclIsUndefined() and not n.domainMetaElement.oclIsUndefined() implies links->exists(let r:ecore::EReference= linkMetaFeature.oclAsType(ecore::EReference) in r.containment and r.eReferenceType.isSuperTypeOf(n.domainMetaElement)))",
d1885 8
a1892 1
		   });							
d1906 29
a1934 1
		   });			
d1936 1
a1936 1
		  (nodeMappingEClass, 
d1939 2
a1940 2
			 "ocl", "not (domainMetaElement.oclIsUndefined()  and containmentFeature.oclIsUndefined())",
			 "description", "Either domain meta element or containment feature must be set in node mapping"
d1943 1
a1943 1
		  (nodeMappingEClass, 
d1946 3
a1948 3
			 "ocl", "not domainMetaElement.oclIsUndefined() implies containmentFeature.oclIsUndefined() or containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement)",
			 "description", "\'Domain Element\' must be the same or extend the type referenced by \'Containment Feature\'"
		   });			
d1976 15
a1990 1
		   });										
d2004 29
a2032 1
		   });																																
@


1.28
log
@#130715 Use default label text defined in gmfgraph model
@
text
@d441 9
d1374 1
d1572 1
a1572 2

		addEOperation(nodeReferenceEClass, this.getNodeMapping(), "getChild", 0, 1);
@


1.27
log
@[rdvorak] #114196 Allow for the definition of diagram validation rules
@
text
@d711 1
a711 1
	public EAttribute getLabelMapping_Text() {
d720 1
a720 1
	public EAttribute getLabelMapping_ReadOnly() {
d729 1
a729 1
	public EAttribute getLabelMapping_DefaultText() {
a737 18
	public EAttribute getLabelMapping_ViewPattern() {
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(5);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getLabelMapping_EditPattern() {
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(6);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d739 1
a739 1
		return (EReference)labelMappingEClass.getEStructuralFeatures().get(7);
a1401 1
		createEAttribute(labelMappingEClass, LABEL_MAPPING__TEXT);
a1402 1
		createEAttribute(labelMappingEClass, LABEL_MAPPING__DEFAULT_TEXT);
a1600 1
		initEAttribute(getLabelMapping_Text(), ecorePackage.getEString(), "text", null, 0, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
a1601 1
		initEAttribute(getLabelMapping_DefaultText(), ecorePackage.getEString(), "defaultText", null, 0, 1, LabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1716 1
a1716 1
		   });																																																																															
d1740 1
a1740 1
		   });																			
d1837 1
a1837 1
		   });																																																													
d1910 1
a1910 1
		   });											
@


1.26
log
@#114175 for links - mapping model
@
text
@d19 2
d37 1
d39 2
a45 1
import org.eclipse.gmf.mappings.RuleTarget;
d225 8
a232 1
	private EClass ruleTargetEClass = null;
d239 22
a260 1
	private EClass domainElementTargetEClass = null;
d267 1
a267 1
	private EClass diagramElementTargetEClass = null;
d274 1
a274 1
	private EClass notationElementTargetEClass = null;
d819 9
d1107 2
a1108 2
	public EAttribute getAuditRule_Name() {
		return (EAttribute)auditRuleEClass.getEStructuralFeatures().get(2);
a1142 9
	public EAttribute getAuditRule_Description() {
		return (EAttribute)auditRuleEClass.getEStructuralFeatures().get(6);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d1144 1
a1144 1
		return (EReference)auditRuleEClass.getEStructuralFeatures().get(7);
d1161 2
a1162 2
	public EReference getRuleBase_Target() {
		return (EReference)ruleBaseEClass.getEStructuralFeatures().get(0);
d1170 2
a1171 11
	public EClass getRuleTarget() {
		return ruleTargetEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getRuleTarget_Rule() {
		return (EReference)ruleTargetEClass.getEStructuralFeatures().get(0);
d1233 99
d1370 1
d1466 2
a1467 1
		createEReference(ruleBaseEClass, RULE_BASE__TARGET);
d1472 1
a1472 1
		createEAttribute(auditRuleEClass, AUDIT_RULE__NAME);
a1475 1
		createEAttribute(auditRuleEClass, AUDIT_RULE__DESCRIPTION);
a1477 3
		ruleTargetEClass = createEClass(RULE_TARGET);
		createEReference(ruleTargetEClass, RULE_TARGET__RULE);

d1487 16
d1551 8
a1558 3
		domainElementTargetEClass.getESuperTypes().add(this.getRuleTarget());
		diagramElementTargetEClass.getESuperTypes().add(this.getRuleTarget());
		notationElementTargetEClass.getESuperTypes().add(this.getRuleTarget());
d1567 1
d1667 2
a1668 1
		initEReference(getRuleBase_Target(), this.getRuleTarget(), this.getRuleTarget_Rule(), "target", null, 1, 1, RuleBase.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1673 1
a1673 1
		initEAttribute(getAuditRule_Name(), ecorePackage.getEString(), "name", null, 0, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
a1676 1
		initEAttribute(getAuditRule_Description(), ecorePackage.getEString(), "description", null, 0, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
a1678 3
		initEClass(ruleTargetEClass, RuleTarget.class, "RuleTarget", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getRuleTarget_Rule(), this.getRuleBase(), this.getRuleBase_Target(), "rule", null, 1, 1, RuleTarget.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

d1688 16
d1738 1
a1738 1
		   });																																																																									
d1748 1
a1748 1
		String source = "http://www.eclipse.org/gmf/2005/constraints/meta";							
d1828 1
a1828 1
		   });													
d1835 8
a1842 1
		   });														
d1852 1
a1852 1
		String source = "constraint";																					
d1859 1
a1859 1
		   });																																																						
d1876 1
a1876 1
		   });								
d1946 1
a1946 1
		   });																									
@


1.25
log
@#130009 Enable audit rules on diagram (notation model) elements in gmfmap model
@
text
@d1465 1
a1465 1
		initEReference(getLinkMapping_LinkMetaFeature(), ecorePackage.getEStructuralFeature(), null, "linkMetaFeature", null, 1, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
@


1.24
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d23 2
d39 3
d214 35
d1066 2
a1067 2
	public EReference getAuditRule_Target() {
		return (EReference)auditRuleEClass.getEStructuralFeatures().get(2);
d1075 1
a1075 1
	public EAttribute getAuditRule_Name() {
d1084 1
a1084 1
	public EAttribute getAuditRule_Severity() {
d1093 1
a1093 1
	public EAttribute getAuditRule_UseInLiveMode() {
d1102 1
a1102 1
	public EAttribute getAuditRule_Message() {
d1111 83
a1193 2
	public EAttribute getAuditRule_Description() {
		return (EAttribute)auditRuleEClass.getEStructuralFeatures().get(7);
d1201 2
a1202 2
	public EReference getAuditRule_Container() {
		return (EReference)auditRuleEClass.getEStructuralFeatures().get(8);
d1342 3
a1347 1
		createEReference(auditRuleEClass, AUDIT_RULE__TARGET);
d1355 12
d1414 4
d1524 3
a1529 1
		initEReference(getAuditRule_Target(), ecorePackage.getEClass(), null, "target", null, 1, 1, AuditRule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1537 12
d1583 1
a1583 1
		   });																																																																
d1673 1
a1673 1
		   });											
d1680 1
a1680 1
		   });							
d1697 1
a1697 1
		   });																																													
d1784 1
a1784 1
		   });																
@


1.23
log
@#127464 unlimited hierarchies in the GMFMap with possible reuse of mapping entries
@
text
@d1282 1
a1282 1
		initEReference(getMapping_Nodes(), this.getTopNodeReference(), null, "nodes", null, 1, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1412 2
d1430 1
a1430 1
		   });																																																														
d1440 1
a1440 1
		String source = "http://www.eclipse.org/gmf/2005/constraints/meta";						
d1454 1
a1454 1
		   });																		
d1531 17
d1561 1
a1561 1
		   });							
d1617 1
a1617 1
		   });										
@


1.22
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@a15 1
import org.eclipse.gmf.mappings.AbstractNodeMapping;
d20 1
a20 1
import org.eclipse.gmf.mappings.ChildNodeMapping;
d34 1
d36 1
d39 1
d55 15
a69 1
	private EClass abstractNodeMappingEClass = null;
d76 1
a76 1
	private EClass mappingEntryEClass = null;
d83 1
a83 1
	private EClass nodeMappingEClass = null;
d90 1
a90 1
	private EClass childNodeMappingEClass = null;
d288 47
a334 2
	public EClass getAbstractNodeMapping() {
		return abstractNodeMappingEClass;
d342 2
a343 2
	public EReference getAbstractNodeMapping_ChildMappings() {
		return (EReference)abstractNodeMappingEClass.getEStructuralFeatures().get(0);
d351 2
a352 2
	public EReference getAbstractNodeMapping_CompartmentMappings() {
		return (EReference)abstractNodeMappingEClass.getEStructuralFeatures().get(1);
d360 2
a361 2
	public EClass getMappingEntry() {
		return mappingEntryEClass;
d369 2
a370 2
	public EReference getMappingEntry_DomainMetaElement() {
		return (EReference)mappingEntryEClass.getEStructuralFeatures().get(0);
d378 2
a379 2
	public EReference getMappingEntry_DomainSpecialization() {
		return (EReference)mappingEntryEClass.getEStructuralFeatures().get(1);
d387 2
a388 2
	public EReference getMappingEntry_DomainInitializer() {
		return (EReference)mappingEntryEClass.getEStructuralFeatures().get(2);
d396 2
a397 2
	public EReference getMappingEntry_ContainmentFeature() {
		return (EReference)mappingEntryEClass.getEStructuralFeatures().get(3);
d405 2
a406 2
	public EReference getMappingEntry_LabelMappings() {
		return (EReference)mappingEntryEClass.getEStructuralFeatures().get(4);
d414 2
a415 2
	public EClass getNodeMapping() {
		return nodeMappingEClass;
d423 2
a424 2
	public EReference getNodeMapping_DiagramNode() {
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(0);
d432 2
a433 2
	public EClass getChildNodeMapping() {
		return childNodeMappingEClass;
d441 2
a442 2
	public EReference getChildNodeMapping_DiagramNode() {
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(0);
d450 2
a451 2
	public EReference getChildNodeMapping_Compartment() {
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(1);
d459 2
a460 2
	public EReference getChildNodeMapping_ParentNode() {
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(2);
d477 1
a477 1
	public EReference getCompartmentMapping_ParentNodeMapping() {
d486 1
a486 1
	public EReference getCompartmentMapping_Compartment() {
d495 1
a495 1
	public EReference getCompartmentMapping_ChildNodes() {
a1131 1
		createEReference(mappingEntryEClass, MAPPING_ENTRY__CONTAINMENT_FEATURE);
d1134 14
a1147 3
		abstractNodeMappingEClass = createEClass(ABSTRACT_NODE_MAPPING);
		createEReference(abstractNodeMappingEClass, ABSTRACT_NODE_MAPPING__CHILD_MAPPINGS);
		createEReference(abstractNodeMappingEClass, ABSTRACT_NODE_MAPPING__COMPARTMENT_MAPPINGS);
d1151 2
a1152 5

		childNodeMappingEClass = createEClass(CHILD_NODE_MAPPING);
		createEReference(childNodeMappingEClass, CHILD_NODE_MAPPING__DIAGRAM_NODE);
		createEReference(childNodeMappingEClass, CHILD_NODE_MAPPING__COMPARTMENT);
		createEReference(childNodeMappingEClass, CHILD_NODE_MAPPING__PARENT_NODE);
a1154 1
		createEReference(compartmentMappingEClass, COMPARTMENT_MAPPING__PARENT_NODE_MAPPING);
d1156 2
a1157 1
		createEReference(compartmentMappingEClass, COMPARTMENT_MAPPING__CHILD_NODES);
d1264 7
a1270 6
		abstractNodeMappingEClass.getESuperTypes().add(this.getMappingEntry());
		abstractNodeMappingEClass.getESuperTypes().add(this.getMenuOwner());
		abstractNodeMappingEClass.getESuperTypes().add(this.getToolOwner());
		abstractNodeMappingEClass.getESuperTypes().add(this.getAppearanceSteward());
		nodeMappingEClass.getESuperTypes().add(this.getAbstractNodeMapping());
		childNodeMappingEClass.getESuperTypes().add(this.getAbstractNodeMapping());
d1272 1
d1282 1
a1282 1
		initEReference(getMapping_Nodes(), this.getNodeMapping(), null, "nodes", null, 1, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
a1291 1
		initEReference(getMappingEntry_ContainmentFeature(), ecorePackage.getEReference(), null, "containmentFeature", null, 0, 1, MappingEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1296 16
a1311 3
		initEClass(abstractNodeMappingEClass, AbstractNodeMapping.class, "AbstractNodeMapping", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getAbstractNodeMapping_ChildMappings(), this.getChildNodeMapping(), this.getChildNodeMapping_ParentNode(), "childMappings", null, 0, -1, AbstractNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAbstractNodeMapping_CompartmentMappings(), this.getCompartmentMapping(), this.getCompartmentMapping_ParentNodeMapping(), "compartmentMappings", null, 0, -1, AbstractNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1315 2
a1316 5

		initEClass(childNodeMappingEClass, ChildNodeMapping.class, "ChildNodeMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getChildNodeMapping_DiagramNode(), theGMFGraphPackage.getChild(), null, "diagramNode", null, 1, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getChildNodeMapping_Compartment(), this.getCompartmentMapping(), this.getCompartmentMapping_ChildNodes(), "compartment", null, 0, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getChildNodeMapping_ParentNode(), this.getAbstractNodeMapping(), this.getAbstractNodeMapping_ChildMappings(), "parentNode", null, 1, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
a1318 1
		initEReference(getCompartmentMapping_ParentNodeMapping(), this.getAbstractNodeMapping(), this.getAbstractNodeMapping_CompartmentMappings(), "parentNodeMapping", null, 1, 1, CompartmentMapping.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1320 2
a1321 1
		initEReference(getCompartmentMapping_ChildNodes(), this.getChildNodeMapping(), this.getChildNodeMapping_Compartment(), "childNodes", null, 0, -1, CompartmentMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1428 1
a1428 1
		   });																																																																
d1452 1
a1452 1
		   });																				
d1551 1
a1551 1
		  (getMappingEntry_ContainmentFeature(), 
d1556 1
a1556 1
		   });		
d1558 1
a1558 1
		  (abstractNodeMappingEClass, 
d1565 1
a1565 1
		  (abstractNodeMappingEClass, 
a1569 7
		   });				
		addAnnotation
		  (childNodeMappingEClass, 
		   source, 
		   new String[] {
			 "ocl", "not containmentFeature.oclIsUndefined() ",
			 "description", "The child node mapping containmentFeature must be set"
@


1.21
log
@#127461 add label diagram element in gmfgraph model
@
text
@a30 2
import org.eclipse.gmf.mappings.LinkLabelAlignment;
import org.eclipse.gmf.mappings.LinkLabelMapping;
a34 1
import org.eclipse.gmf.mappings.NodeLabelMapping;
a108 14
	private EClass nodeLabelMappingEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass linkLabelMappingEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a192 7
	private EEnum linkLabelAlignmentEEnum = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d281 1
a281 1
	public EReference getAbstractNodeMapping_EditFeature() {
d290 1
a290 1
	public EReference getAbstractNodeMapping_LabelMappings() {
a298 18
	public EReference getAbstractNodeMapping_ChildMappings() {
		return (EReference)abstractNodeMappingEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getAbstractNodeMapping_CompartmentMappings() {
		return (EReference)abstractNodeMappingEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d344 9
d461 1
a461 1
	public EReference getLinkMapping_LabelEditFeature() {
d470 1
a470 1
	public EReference getLinkMapping_LabelDisplayFeature() {
d479 1
a479 1
	public EReference getLinkMapping_LabelMappings() {
a487 27
	public EReference getLinkMapping_SourceMetaFeature() {
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(4);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getLinkMapping_LinkMetaFeature() {
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(5);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getLinkMapping_CreationConstraints() {
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(6);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d623 2
a624 47
	public EClass getNodeLabelMapping() {
		return nodeLabelMappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getNodeLabelMapping_External() {
		return (EAttribute)nodeLabelMappingEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getNodeLabelMapping_NodeMapping() {
		return (EReference)nodeLabelMappingEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getLinkLabelMapping() {
		return linkLabelMappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getLinkLabelMapping_Alignment() {
		return (EAttribute)linkLabelMappingEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getLinkLabelMapping_LinkMapping() {
		return (EReference)linkLabelMappingEClass.getEStructuralFeatures().get(1);
a1027 9
	public EEnum getLinkLabelAlignment() {
		return linkLabelAlignmentEEnum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d1072 1
a1074 2
		createEReference(abstractNodeMappingEClass, ABSTRACT_NODE_MAPPING__EDIT_FEATURE);
		createEReference(abstractNodeMappingEClass, ABSTRACT_NODE_MAPPING__LABEL_MAPPINGS);
a1092 3
		createEReference(linkMappingEClass, LINK_MAPPING__LABEL_EDIT_FEATURE);
		createEReference(linkMappingEClass, LINK_MAPPING__LABEL_DISPLAY_FEATURE);
		createEReference(linkMappingEClass, LINK_MAPPING__LABEL_MAPPINGS);
d1113 1
a1113 8

		nodeLabelMappingEClass = createEClass(NODE_LABEL_MAPPING);
		createEAttribute(nodeLabelMappingEClass, NODE_LABEL_MAPPING__EXTERNAL);
		createEReference(nodeLabelMappingEClass, NODE_LABEL_MAPPING__NODE_MAPPING);

		linkLabelMappingEClass = createEClass(LINK_LABEL_MAPPING);
		createEAttribute(linkLabelMappingEClass, LINK_LABEL_MAPPING__ALIGNMENT);
		createEReference(linkLabelMappingEClass, LINK_LABEL_MAPPING__LINK_MAPPING);
a1164 1
		linkLabelAlignmentEEnum = createEEnum(LINK_LABEL_ALIGNMENT);
a1205 2
		nodeLabelMappingEClass.getESuperTypes().add(this.getLabelMapping());
		linkLabelMappingEClass.getESuperTypes().add(this.getLabelMapping());
d1223 1
a1227 2
		initEReference(getAbstractNodeMapping_EditFeature(), ecorePackage.getEAttribute(), null, "editFeature", null, 0, 1, AbstractNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAbstractNodeMapping_LabelMappings(), this.getNodeLabelMapping(), this.getNodeLabelMapping_NodeMapping(), "labelMappings", null, 0, -1, AbstractNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
a1245 3
		initEReference(getLinkMapping_LabelEditFeature(), ecorePackage.getEAttribute(), null, "labelEditFeature", null, 0, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLinkMapping_LabelDisplayFeature(), ecorePackage.getEAttribute(), null, "labelDisplayFeature", null, 0, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLinkMapping_LabelMappings(), this.getLinkLabelMapping(), this.getLinkLabelMapping_LinkMapping(), "labelMappings", null, 0, -1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1258 1
a1258 1
		initEClass(labelMappingEClass, LabelMapping.class, "LabelMapping", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
d1266 1
a1266 8

		initEClass(nodeLabelMappingEClass, NodeLabelMapping.class, "NodeLabelMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getNodeLabelMapping_External(), ecorePackage.getEBoolean(), "external", null, 0, 1, NodeLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getNodeLabelMapping_NodeMapping(), this.getAbstractNodeMapping(), this.getAbstractNodeMapping_LabelMappings(), "nodeMapping", null, 1, 1, NodeLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(linkLabelMappingEClass, LinkLabelMapping.class, "LinkLabelMapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getLinkLabelMapping_Alignment(), this.getLinkLabelAlignment(), "alignment", "MIDDLE", 0, 1, LinkLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLinkLabelMapping_LinkMapping(), this.getLinkMapping(), this.getLinkMapping_LabelMappings(), "linkMapping", null, 1, 1, LinkLabelMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
a1317 5
		initEEnum(linkLabelAlignmentEEnum, LinkLabelAlignment.class, "LinkLabelAlignment");
		addEEnumLiteral(linkLabelAlignmentEEnum, LinkLabelAlignment.MIDDLE_LITERAL);
		addEEnumLiteral(linkLabelAlignmentEEnum, LinkLabelAlignment.TARGET_LITERAL);
		addEEnumLiteral(linkLabelAlignmentEEnum, LinkLabelAlignment.SOURCE_LITERAL);

d1349 1
a1349 1
		   });																																																																					
d1373 1
a1373 1
		   });																									
a1490 7
		   });		
		addAnnotation
		  (getAbstractNodeMapping_EditFeature(), 
		   source, 
		   new String[] {
			 "ocl", "not editFeature.oclIsUndefined() implies getDomainContext().oclIsUndefined() or editFeature.eContainingClass.isSuperTypeOf(getDomainContext())",
			 "description", "The Edit Feature must be owned by the domain context EClass or its super type"
a1513 14
		  (getLinkMapping_LabelEditFeature(), 
		   source, 
		   new String[] {
			 "ocl", "not labelEditFeature.oclIsUndefined() implies getDomainContext().oclIsUndefined() or labelEditFeature.eContainingClass.isSuperTypeOf(getDomainContext())",
			 "description", "\'Label Edit Feature\' must be owned by the domain context EClass or its super type"
		   });			
		addAnnotation
		  (getLinkMapping_LabelDisplayFeature(), 
		   source, 
		   new String[] {
			 "ocl", "not labelDisplayFeature.oclIsUndefined() implies getDomainContext().oclIsUndefined() or labelDisplayFeature.eContainingClass.isSuperTypeOf(getDomainContext())",
			 "description", "\'Label Display Feature\' must be owned by the domain context EClass or its super type"
		   });		
		addAnnotation
d1526 1
a1526 1
		   });											
@


1.20
log
@#127461 Support multiple labels definition in the mapping model
@
text
@d620 9
d630 1
a630 1
		return (EReference)labelMappingEClass.getEStructuralFeatures().get(0);
d639 1
a639 1
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(1);
d648 1
a648 1
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(2);
d657 1
a657 1
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(3);
d666 1
a666 1
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(4);
d675 1
a675 1
		return (EAttribute)labelMappingEClass.getEStructuralFeatures().get(5);
d1224 1
d1391 1
@


1.19
log
@[rdvorak] #127256 Adjust gmfmap metamodel annotation constraints to the latest changes
@
text
@d29 1
d31 2
d37 1
d105 21
d210 7
d314 9
d324 1
a324 1
		return (EReference)abstractNodeMappingEClass.getEStructuralFeatures().get(1);
d333 1
a333 1
		return (EReference)abstractNodeMappingEClass.getEStructuralFeatures().get(2);
d512 9
d522 1
a522 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(3);
d531 1
a531 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(4);
d540 1
a540 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(5);
d611 117
d1124 9
d1180 1
d1201 1
d1214 16
d1280 1
d1322 2
d1346 1
d1367 1
d1380 16
d1446 5
d1482 1
a1482 1
		   });																																																																
d1506 1
a1506 1
		   });																				
d1680 1
a1680 1
		   });						
@


1.18
log
@#114197 - tooling definition in place
@
text
@d696 9
d741 9
d1048 1
d1055 1
d1142 1
a1142 1
		initEReference(getMappingEntry_DomainInitializer(), this.getElementInitializer(), null, "domainInitializer", null, 0, 1, MappingEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1193 1
d1196 1
a1196 1
		initEReference(getFeatureSeqInitializer_Initializers(), this.getFeatureValueSpec(), null, "initializers", null, 1, -1, FeatureSeqInitializer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d1200 1
d1242 2
a1245 2
		// http://www.eclipse.org/gmf/2005/constraints
		createConstraintsAnnotations();
d1262 1
a1262 1
		   });																																																								
d1272 1
a1272 1
		String source = "http://www.eclipse.org/gmf/2005/constraints/meta";					
d1279 1
a1279 1
		   });				
d1286 1
a1286 1
		   });														
d1292 1
a1292 1
		   });					
d1298 1
a1298 1
			 "ocl", "if linkMapping.domainMetaElement.oclIsUndefined() then linkMapping.linkMetaFeature.eContainingClass else linkMapping.containmentFeature.eContainingClass endif"
d1321 1
a1321 1
			 "type.ocl", "if linkMapping.domainMetaElement.oclIsUndefined() then linkMapping.linkMetaFeature.eContainingClass else linkMapping.containmentFeature.eContainingClass endif"
d1352 1
a1352 1
		   });										
d1369 8
a1376 1
		String source = "http://www.eclipse.org/gmf/2005/constraints";							
d1381 3
a1383 2
			 "ocl", "let i : FeatureSeqInitializer = domainInitializer.oclAsType( FeatureSeqInitializer) in i.oclIsUndefined() or i.initializers.feature.eContainingClass->forAll(c|c.isSuperTypeOf(domainMetaElement))"
		   });			
d1388 16
a1403 1
			 "ocl", "containmentFeature.oclIsUndefined() or (containmentFeature.containment and containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement))"
d1409 24
a1432 2
			 "ocl", "editFeature.oclIsUndefined() or (not domainMetaElement.oclIsUndefined() and editFeature.eContainingClass.isSuperTypeOf(domainMetaElement)) or containmentFeature.eType.oclAsType(ecore::EClass).eAllAttributes->includes(editFeature)"
		   });					
d1437 2
a1438 1
			 "ocl", "labelEditFeature.oclIsUndefined() or labelEditFeature.eContainingClass.isSuperTypeOf(domainMetaElement)"
d1444 2
a1445 1
			 "ocl", "labelDisplayFeature.oclIsUndefined() or labelDisplayFeature.eContainingClass.isSuperTypeOf(domainMetaElement)"
d1451 2
a1452 1
			 "ocl", "domainMetaElement.oclIsUndefined() or sourceMetaFeature.eContainingClass.isSuperTypeOf(domainMetaElement)"
d1458 17
a1474 2
			 "ocl", "domainMetaElement.oclIsUndefined() or linkMetaFeature.eContainingClass.isSuperTypeOf(domainMetaElement)"
		   });																																								
@


1.17
log
@Method renamed. Clearly (hah :) express intention of the method - it's merely describes surroundings/location of the element in the domain, rather then represent a metaClass
@
text
@d17 1
a23 1
import org.eclipse.gmf.mappings.CreationTool;
d33 1
a33 1
import org.eclipse.gmf.mappings.NewActionTool;
d36 1
a36 2
import org.eclipse.gmf.mappings.Tool;
import org.eclipse.gmf.mappings.ToolGroup;
d38 1
d108 1
a108 1
	private EClass toolGroupEClass = null;
d115 1
a115 1
	private EClass toolEClass = null;
d122 1
a122 1
	private EClass creationToolEClass = null;
d129 1
a129 1
	private EClass newActionToolEClass = null;
d136 1
a136 1
	private EClass constraintEClass = null;
d143 1
a143 1
	private EClass linkConstraintsEClass = null;
d150 1
a150 1
	private EClass valueExpressionEClass = null;
d157 1
a157 1
	private EClass elementInitializerEClass = null;
d164 1
a164 8
	private EClass featureSeqInitializerEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private EClass featureValueSpecEClass = null;
d245 1
d273 1
a273 1
	public EReference getAbstractNodeMapping_DomainMetaElement() {
d282 1
a282 1
	public EReference getAbstractNodeMapping_DomainSpecialization() {
d291 1
a291 1
	public EReference getAbstractNodeMapping_DomainInitializer() {
d300 2
a301 2
	public EReference getAbstractNodeMapping_ContainmentFeature() {
		return (EReference)abstractNodeMappingEClass.getEStructuralFeatures().get(3);
d309 2
a310 2
	public EReference getAbstractNodeMapping_EditFeature() {
		return (EReference)abstractNodeMappingEClass.getEStructuralFeatures().get(4);
d318 2
a319 2
	public EReference getAbstractNodeMapping_ChildMappings() {
		return (EReference)abstractNodeMappingEClass.getEStructuralFeatures().get(5);
d327 2
a328 2
	public EReference getAbstractNodeMapping_CompartmentMappings() {
		return (EReference)abstractNodeMappingEClass.getEStructuralFeatures().get(6);
d336 2
a337 11
	public EReference getAbstractNodeMapping_Tool() {
		return (EReference)abstractNodeMappingEClass.getEStructuralFeatures().get(7);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EClass getMappingEntry() {
		return mappingEntryEClass;
d453 1
a453 1
	public EReference getLinkMapping_DomainMetaElement() {
d462 1
a462 1
	public EReference getLinkMapping_DomainSpecialization() {
d471 1
a471 1
	public EReference getLinkMapping_DomainInitializer() {
d480 1
a480 1
	public EReference getLinkMapping_ContainmentFeature() {
d489 1
a489 1
	public EReference getLinkMapping_LabelEditFeature() {
d498 2
a499 2
	public EReference getLinkMapping_LabelDisplayFeature() {
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(6);
d507 2
a508 2
	public EReference getLinkMapping_SourceMetaFeature() {
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(7);
d516 2
a517 2
	public EReference getLinkMapping_LinkMetaFeature() {
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(8);
d525 2
a526 2
	public EReference getLinkMapping_CreationConstraints() {
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(9);
d534 2
a535 2
	public EReference getLinkMapping_Tool() {
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(10);
d543 2
a544 20
	public EClass getCanvasMapping() {
		return canvasMappingEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getCanvasMapping_DiagramCanvas() {
		return (EReference)canvasMappingEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getCanvasMapping_DomainModel() {
		return (EReference)canvasMappingEClass.getEStructuralFeatures().get(1);
d552 2
a553 2
	public EReference getCanvasMapping_DomainMetaElement() {
		return (EReference)canvasMappingEClass.getEStructuralFeatures().get(2);
d597 1
a597 1
	public EReference getMapping_ToolGroups() {
d615 2
a616 2
	public EClass getToolGroup() {
		return toolGroupEClass;
d624 2
a625 2
	public EAttribute getToolGroup_Name() {
		return (EAttribute)toolGroupEClass.getEStructuralFeatures().get(0);
d633 2
a634 2
	public EReference getToolGroup_Tools() {
		return (EReference)toolGroupEClass.getEStructuralFeatures().get(1);
d642 2
a643 2
	public EClass getTool() {
		return toolEClass;
d651 2
a652 2
	public EReference getTool_Group() {
		return (EReference)toolEClass.getEStructuralFeatures().get(0);
d660 2
a661 2
	public EClass getCreationTool() {
		return creationToolEClass;
d669 2
a670 2
	public EClass getNewActionTool() {
		return newActionToolEClass;
d678 2
a679 2
	public EClass getConstraint() {
		return constraintEClass;
d687 2
a688 2
	public EClass getLinkConstraints() {
		return linkConstraintsEClass;
d696 2
a697 2
	public EReference getLinkConstraints_LinkMapping() {
		return (EReference)linkConstraintsEClass.getEStructuralFeatures().get(0);
d705 2
a706 2
	public EReference getLinkConstraints_SourceEnd() {
		return (EReference)linkConstraintsEClass.getEStructuralFeatures().get(1);
d714 2
a715 2
	public EReference getLinkConstraints_TargetEnd() {
		return (EReference)linkConstraintsEClass.getEStructuralFeatures().get(2);
d723 2
a724 11
	public EClass getValueExpression() {
		return valueExpressionEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EAttribute getValueExpression_Body() {
		return (EAttribute)valueExpressionEClass.getEStructuralFeatures().get(0);
d732 2
a733 2
	public EAttribute getValueExpression_Language() {
		return (EAttribute)valueExpressionEClass.getEStructuralFeatures().get(1);
d741 2
a742 2
	public EClass getElementInitializer() {
		return elementInitializerEClass;
d750 2
a751 2
	public EClass getFeatureSeqInitializer() {
		return featureSeqInitializerEClass;
d759 2
a760 2
	public EReference getFeatureSeqInitializer_Initializers() {
		return (EReference)featureSeqInitializerEClass.getEStructuralFeatures().get(0);
d768 2
a769 2
	public EClass getFeatureValueSpec() {
		return featureValueSpecEClass;
d777 2
a778 2
	public EReference getFeatureValueSpec_Feature() {
		return (EReference)featureValueSpecEClass.getEStructuralFeatures().get(0);
d971 13
a984 4
		createEReference(abstractNodeMappingEClass, ABSTRACT_NODE_MAPPING__DOMAIN_META_ELEMENT);
		createEReference(abstractNodeMappingEClass, ABSTRACT_NODE_MAPPING__DOMAIN_SPECIALIZATION);
		createEReference(abstractNodeMappingEClass, ABSTRACT_NODE_MAPPING__DOMAIN_INITIALIZER);
		createEReference(abstractNodeMappingEClass, ABSTRACT_NODE_MAPPING__CONTAINMENT_FEATURE);
a987 3
		createEReference(abstractNodeMappingEClass, ABSTRACT_NODE_MAPPING__TOOL);

		mappingEntryEClass = createEClass(MAPPING_ENTRY);
a1003 4
		createEReference(linkMappingEClass, LINK_MAPPING__DOMAIN_META_ELEMENT);
		createEReference(linkMappingEClass, LINK_MAPPING__DOMAIN_SPECIALIZATION);
		createEReference(linkMappingEClass, LINK_MAPPING__DOMAIN_INITIALIZER);
		createEReference(linkMappingEClass, LINK_MAPPING__CONTAINMENT_FEATURE);
a1008 1
		createEReference(linkMappingEClass, LINK_MAPPING__TOOL);
d1014 3
a1016 18

		mappingEClass = createEClass(MAPPING);
		createEReference(mappingEClass, MAPPING__NODES);
		createEReference(mappingEClass, MAPPING__LINKS);
		createEReference(mappingEClass, MAPPING__DIAGRAM);
		createEReference(mappingEClass, MAPPING__TOOL_GROUPS);
		createEReference(mappingEClass, MAPPING__AUDITS);

		toolGroupEClass = createEClass(TOOL_GROUP);
		createEAttribute(toolGroupEClass, TOOL_GROUP__NAME);
		createEReference(toolGroupEClass, TOOL_GROUP__TOOLS);

		toolEClass = createEClass(TOOL);
		createEReference(toolEClass, TOOL__GROUP);

		creationToolEClass = createEClass(CREATION_TOOL);

		newActionToolEClass = createEClass(NEW_ACTION_TOOL);
d1037 9
d1093 1
d1097 4
a1101 1
		nodeMappingEClass.getESuperTypes().add(this.getMappingEntry());
d1104 3
a1106 3
		canvasMappingEClass.getESuperTypes().add(this.getMappingEntry());
		creationToolEClass.getESuperTypes().add(this.getTool());
		newActionToolEClass.getESuperTypes().add(this.getTool());
d1112 15
a1127 4
		initEReference(getAbstractNodeMapping_DomainMetaElement(), ecorePackage.getEClass(), null, "domainMetaElement", null, 0, 1, AbstractNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAbstractNodeMapping_DomainSpecialization(), this.getConstraint(), null, "domainSpecialization", null, 0, 1, AbstractNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAbstractNodeMapping_DomainInitializer(), this.getElementInitializer(), null, "domainInitializer", null, 0, 1, AbstractNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAbstractNodeMapping_ContainmentFeature(), ecorePackage.getEReference(), null, "containmentFeature", null, 0, 1, AbstractNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
a1130 5
		initEReference(getAbstractNodeMapping_Tool(), this.getTool(), null, "tool", null, 0, 1, AbstractNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		addEOperation(abstractNodeMappingEClass, ecorePackage.getEClass(), "getDomainContext", 0, 1);

		initEClass(mappingEntryEClass, MappingEntry.class, "MappingEntry", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
a1146 4
		initEReference(getLinkMapping_DomainMetaElement(), ecorePackage.getEClass(), null, "domainMetaElement", null, 0, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLinkMapping_DomainSpecialization(), this.getConstraint(), null, "domainSpecialization", null, 0, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLinkMapping_DomainInitializer(), this.getElementInitializer(), null, "domainInitializer", null, 0, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getLinkMapping_ContainmentFeature(), ecorePackage.getEReference(), null, "containmentFeature", null, 0, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
a1151 3
		initEReference(getLinkMapping_Tool(), this.getTool(), null, "tool", null, 0, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		addEOperation(linkMappingEClass, ecorePackage.getEClass(), "getDomainContext", 0, 1);
d1157 3
a1159 18

		initEClass(mappingEClass, Mapping.class, "Mapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getMapping_Nodes(), this.getNodeMapping(), null, "nodes", null, 1, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMapping_Links(), this.getLinkMapping(), null, "links", null, 0, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMapping_Diagram(), this.getCanvasMapping(), null, "diagram", null, 1, 1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMapping_ToolGroups(), this.getToolGroup(), null, "toolGroups", null, 0, -1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getMapping_Audits(), this.getAuditContainer(), null, "audits", null, 0, 1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(toolGroupEClass, ToolGroup.class, "ToolGroup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getToolGroup_Name(), ecorePackage.getEString(), "name", null, 0, 1, ToolGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getToolGroup_Tools(), this.getTool(), this.getTool_Group(), "tools", null, 0, -1, ToolGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(toolEClass, Tool.class, "Tool", IS_ABSTRACT, IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getTool_Group(), this.getToolGroup(), this.getToolGroup_Tools(), "group", null, 0, 1, Tool.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(creationToolEClass, CreationTool.class, "CreationTool", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

		initEClass(newActionToolEClass, NewActionTool.class, "NewActionTool", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
d1180 9
d1235 1
a1235 1
		  (abstractNodeMappingEClass, 
d1240 1
a1240 1
		   });																																																													
d1250 1
a1250 1
		String source = "http://www.eclipse.org/gmf/2005/constraints/meta";				
d1252 1
a1252 1
		  (getAbstractNodeMapping_DomainSpecialization(), 
d1259 1
a1259 1
		  (getAbstractNodeMapping_DomainInitializer(), 
d1264 1
a1264 15
		   });							
		addAnnotation
		  (getLinkMapping_DomainSpecialization(), 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "self.getDomainContext()"
		   });				
		addAnnotation
		  (getLinkMapping_DomainInitializer(), 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "self.getDomainContext()"
		   });												
d1330 1
a1330 1
		   });									
d1347 1
a1347 1
		String source = "http://www.eclipse.org/gmf/2005/constraints";						
d1349 1
a1349 1
		  (getAbstractNodeMapping_DomainInitializer(), 
d1355 1
a1355 7
		  (getAbstractNodeMapping_ContainmentFeature(), 
		   source, 
		   new String[] {
			 "ocl", "containmentFeature.containment"
		   });		
		addAnnotation
		  (getAbstractNodeMapping_ContainmentFeature(), 
d1358 1
a1358 1
			 "ocl", "domainMetaElement.oclIsUndefined() or containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement)"
d1365 1
a1365 13
		   });						
		addAnnotation
		  (getLinkMapping_DomainInitializer(), 
		   source, 
		   new String[] {
			 "ocl", "let i : FeatureSeqInitializer = domainInitializer.oclAsType( FeatureSeqInitializer) in i.oclIsUndefined() or i.initializers.feature.eContainingClass->forAll(c|c.isSuperTypeOf(domainMetaElement)) "
		   });			
		addAnnotation
		  (getLinkMapping_ContainmentFeature(), 
		   source, 
		   new String[] {
			 "ocl", "containmentFeature.oclIsUndefined() or containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement)"
		   });		
d1389 1
a1389 1
		   });																																									
@


1.16
log
@[rdvorak] #123279 audits definition in gmfmap
@
text
@d1165 1
a1165 1
		addEOperation(abstractNodeMappingEClass, ecorePackage.getEClass(), "getDomainMetaClass", 0, 1);
d1195 1
a1195 1
		addEOperation(linkMappingEClass, ecorePackage.getEClass(), "getDomainMetaClass", 0, 1);
d1306 1
a1306 1
			 "ocl", "if domainMetaElement.oclIsUndefined() then containmentFeature.eContainingClass else domainMetaElement endif"
d1313 1
a1313 1
			 "ocl", "if domainMetaElement.oclIsUndefined() then containmentFeature.eContainingClass else domainMetaElement endif"
d1320 1
a1320 1
			 "ocl", "if domainMetaElement.oclIsUndefined() then linkMetaFeature.eContainingClass else domainMetaElement endif "
d1327 1
a1327 1
			 "ocl", "if domainMetaElement.oclIsUndefined() then linkMetaFeature.eContainingClass else domainMetaElement endif "
@


1.15
log
@#115461 provide source feature in mapping
@
text
@d11 1
a15 1
import org.eclipse.gmf.gmfgraph.impl.GMFGraphPackageImpl;
d17 2
d35 1
d174 21
d251 1
a251 1
		GMFGraphPackageImpl.init();
d639 9
d828 162
d1061 1
d1092 22
d1140 1
a1140 1
		GMFGraphPackageImpl theGMFGraphPackage = (GMFGraphPackageImpl)EPackage.Registry.INSTANCE.getEPackage(GMFGraphPackage.eNS_URI);
d1165 1
a1165 1
		addEOperation(abstractNodeMappingEClass, ecorePackage.getEClass(), "getDomainMetaClass");
d1195 1
a1195 1
		addEOperation(linkMappingEClass, ecorePackage.getEClass(), "getDomainMetaClass");
d1207 1
d1239 25
d1290 1
a1290 1
		   });																																													
d1328 1
a1328 1
		   });											
d1394 8
a1401 1
		   });
d1471 1
a1471 1
		   });																									
@


1.14
log
@regenerated code to include annotations added with #120655
@
text
@d498 9
d508 1
a508 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(7);
d517 1
a517 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(8);
d526 1
a526 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(9);
d851 1
d972 1
d1046 1
a1046 1
		   });																																												
d1084 1
a1084 1
		   });										
d1210 6
@


1.13
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@d1035 1
a1035 1
		   });																																								
d1079 31
a1109 1
		   });						
d1203 1
a1203 1
		   });																					
@


1.12
log
@#119709
Adding Compartment mapping
@
text
@d946 1
a946 1
		initEReference(getChildNodeMapping_Compartment(), this.getCompartmentMapping(), this.getCompartmentMapping_ChildNodes(), "compartment", null, 1, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
@


1.11
log
@updated gmfmap to match newly introduced .gmfgraph model (replaces .diadef) #114177.
besides, rudimentary tooling model is introduced as part of gmfmap #115799, subject to further work
@
text
@d19 1
d77 7
d309 9
d319 1
a319 1
		return (EReference)abstractNodeMappingEClass.getEStructuralFeatures().get(6);
d390 36
d816 1
d829 5
d934 1
d946 1
a946 1
		initEReference(getChildNodeMapping_Compartment(), theGMFGraphPackage.getCompartment(), null, "compartment", null, 1, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d949 5
@


1.10
log
@Adding method to get DomainElementMetaClass for the transformation code.
@
text
@d14 2
a15 2
import org.eclipse.gmf.diadef.DiagramDefinitionPackage;
import org.eclipse.gmf.diadef.impl.DiagramDefinitionPackageImpl;
d20 1
d30 1
d32 2
a33 1

d97 28
d219 1
a219 1
		DiagramDefinitionPackageImpl.init();
d247 1
a247 1
	public EReference getAbstractNodeMapping_DiagramNode() {
d256 1
a256 1
	public EReference getAbstractNodeMapping_DomainMetaElement() {
d265 1
a265 1
	public EReference getAbstractNodeMapping_DomainSpecialization() {
d274 1
a274 1
	public EReference getAbstractNodeMapping_DomainInitializer() {
d283 1
a283 1
	public EReference getAbstractNodeMapping_ContainmentFeature() {
d292 1
a292 1
	public EReference getAbstractNodeMapping_EditFeature() {
d301 1
a301 1
	public EReference getAbstractNodeMapping_ChildMappings() {
d328 9
d346 9
d356 1
a356 1
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(0);
d365 1
a365 1
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(1);
d463 9
d544 72
a756 1
		createEReference(abstractNodeMappingEClass, ABSTRACT_NODE_MAPPING__DIAGRAM_NODE);
d763 1
d768 1
d771 1
d785 1
d796 12
d853 1
a853 1
		DiagramDefinitionPackageImpl theDiagramDefinitionPackage = (DiagramDefinitionPackageImpl)EPackage.Registry.INSTANCE.getEPackage(DiagramDefinitionPackage.eNS_URI);
d861 2
a868 1
		initEReference(getAbstractNodeMapping_DiagramNode(), theDiagramDefinitionPackage.getNode(), null, "diagramNode", null, 1, 1, AbstractNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d875 1
d882 1
d885 2
a886 1
		initEReference(getChildNodeMapping_Compartment(), theDiagramDefinitionPackage.getCompartment(), null, "compartment", null, 1, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d890 1
a890 1
		initEReference(getLinkMapping_DiagramLink(), theDiagramDefinitionPackage.getConnection(), null, "diagramLink", null, 1, 1, LinkMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d899 1
d904 1
a904 1
		initEReference(getCanvasMapping_DiagramCanvas(), theDiagramDefinitionPackage.getCanvas(), null, "diagramCanvas", null, 1, 1, CanvasMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d912 12
d970 1
a970 1
		   });																																							
d1008 1
a1008 1
		   });									
d1078 1
a1078 7
		   });		
		addAnnotation
		  (getChildNodeMapping_Compartment(), 
		   source, 
		   new String[] {
			 "ocl", "parentNode.diagramNode.oclAsType(diadef::Node).compartments->includes(self.compartment)"
		   });					
d1108 1
a1108 1
		   });																				
@


1.9
log
@Adding method to get DomainElementMetaClass for the transformation code.
@
text
@d751 2
@


1.8
log
@domainMetaElement feature should be optional.
@
text
@d711 1
a712 1
		nodeMappingEClass.getESuperTypes().add(this.getAbstractNodeMapping());
d730 2
@


1.7
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d723 1
a723 1
		initEReference(getAbstractNodeMapping_DomainMetaElement(), ecorePackage.getEClass(), null, "domainMetaElement", null, 1, 1, AbstractNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
@


1.6
log
@#118053 update models
@
text
@d25 1
d101 7
d405 9
d495 36
d652 1
d666 5
d747 1
d761 5
d804 1
a804 1
		   });																																		
d842 1
a842 1
		   });								
d848 1
a848 1
		   });		
d948 1
a948 1
		   });															
@


1.5
log
@[rdvorak] #115862 describe semantics of metamodel with annotations
@
text
@d16 1
d44 7
d199 2
a200 2
	public EClass getMappingEntry() {
		return mappingEntryEClass;
d208 2
a209 2
	public EClass getNodeMapping() {
		return nodeMappingEClass;
d217 2
a218 2
	public EReference getNodeMapping_DiagramNode() {
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(0);
d226 2
a227 2
	public EReference getNodeMapping_DomainMetaElement() {
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(1);
d235 2
a236 2
	public EReference getNodeMapping_DomainSpecialization() {
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(2);
d244 2
a245 2
	public EReference getNodeMapping_DomainInitializer() {
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(3);
d253 2
a254 2
	public EReference getNodeMapping_ContainmentFeature() {
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(4);
d262 2
a263 2
	public EReference getNodeMapping_EditFeature() {
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(5);
d271 2
a272 2
	public EReference getNodeMapping_ChildMappings() {
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(6);
d280 2
a281 2
	public EClass getChildNodeMapping() {
		return childNodeMappingEClass;
d289 2
a290 2
	public EReference getChildNodeMapping_Compartment() {
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(0);
d298 2
a299 47
	public EReference getChildNodeMapping_DiagramNode() {
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getChildNodeMapping_DomainChildrenFeature() {
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getChildNodeMapping_EditFeature() {
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getChildNodeMapping_DomainMetaElement() {
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(4);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getChildNodeMapping_DomainSpecialization() {
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(5);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EReference getChildNodeMapping_DomainInitializer() {
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(6);
d308 1
a308 1
		return (EReference)childNodeMappingEClass.getEStructuralFeatures().get(7);
d573 9
a584 7
		createEReference(nodeMappingEClass, NODE_MAPPING__DIAGRAM_NODE);
		createEReference(nodeMappingEClass, NODE_MAPPING__DOMAIN_META_ELEMENT);
		createEReference(nodeMappingEClass, NODE_MAPPING__DOMAIN_SPECIALIZATION);
		createEReference(nodeMappingEClass, NODE_MAPPING__DOMAIN_INITIALIZER);
		createEReference(nodeMappingEClass, NODE_MAPPING__CONTAINMENT_FEATURE);
		createEReference(nodeMappingEClass, NODE_MAPPING__EDIT_FEATURE);
		createEReference(nodeMappingEClass, NODE_MAPPING__CHILD_MAPPINGS);
a587 6
		createEReference(childNodeMappingEClass, CHILD_NODE_MAPPING__DIAGRAM_NODE);
		createEReference(childNodeMappingEClass, CHILD_NODE_MAPPING__DOMAIN_CHILDREN_FEATURE);
		createEReference(childNodeMappingEClass, CHILD_NODE_MAPPING__EDIT_FEATURE);
		createEReference(childNodeMappingEClass, CHILD_NODE_MAPPING__DOMAIN_META_ELEMENT);
		createEReference(childNodeMappingEClass, CHILD_NODE_MAPPING__DOMAIN_SPECIALIZATION);
		createEReference(childNodeMappingEClass, CHILD_NODE_MAPPING__DOMAIN_INITIALIZER);
d653 2
d662 9
a673 7
		initEReference(getNodeMapping_DiagramNode(), theDiagramDefinitionPackage.getNode(), null, "diagramNode", null, 1, 1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getNodeMapping_DomainMetaElement(), ecorePackage.getEClass(), null, "domainMetaElement", null, 1, 1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getNodeMapping_DomainSpecialization(), this.getConstraint(), null, "domainSpecialization", null, 0, 1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getNodeMapping_DomainInitializer(), this.getElementInitializer(), null, "domainInitializer", null, 0, 1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getNodeMapping_ContainmentFeature(), ecorePackage.getEReference(), null, "containmentFeature", null, 0, 1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getNodeMapping_EditFeature(), ecorePackage.getEAttribute(), null, "editFeature", null, 0, 1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getNodeMapping_ChildMappings(), this.getChildNodeMapping(), this.getChildNodeMapping_ParentNode(), "childMappings", null, 0, -1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d677 1
a677 7
		initEReference(getChildNodeMapping_DiagramNode(), theDiagramDefinitionPackage.getNode(), null, "diagramNode", null, 1, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getChildNodeMapping_DomainChildrenFeature(), ecorePackage.getEStructuralFeature(), null, "domainChildrenFeature", null, 1, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getChildNodeMapping_EditFeature(), ecorePackage.getEAttribute(), null, "editFeature", null, 0, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getChildNodeMapping_DomainMetaElement(), ecorePackage.getEClass(), null, "domainMetaElement", null, 0, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getChildNodeMapping_DomainSpecialization(), this.getConstraint(), null, "domainSpecialization", null, 0, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getChildNodeMapping_DomainInitializer(), this.getElementInitializer(), null, "domainInitializer", null, 0, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getChildNodeMapping_ParentNode(), this.getNodeMapping(), this.getNodeMapping_ChildMappings(), "parentNode", null, 1, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, !IS_CHANGEABLE, !IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d734 1
a734 1
		  (mappingEntryEClass, 
d739 1
a739 1
		   });																																								
d751 1
a751 1
		  (getNodeMapping_DomainSpecialization(), 
d755 1
a755 1
			 "ocl", "domainMetaElement"
d758 1
a758 1
		  (getNodeMapping_DomainInitializer(), 
d762 2
a763 16
			 "ocl", "domainMetaElement"
		   });								
		addAnnotation
		  (getChildNodeMapping_DomainSpecialization(), 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "if domainMetaElement.oclIsUndefined() then domainChildrenFeature.eContainingClass else domainMetaElement endif "
		   });				
		addAnnotation
		  (getChildNodeMapping_DomainInitializer(), 
		   source, 
		   new String[] {
			 "def", "context",
			 "ocl", "if domainMetaElement.oclIsUndefined() then domainChildrenFeature.eContainingClass else domainMetaElement endif "
		   });			
d825 1
a825 1
		  (getNodeMapping_DomainInitializer(), 
d828 1
a828 1
			 "ocl", "let i : FeatureSeqInitializer = domainInitializer.oclAsType( FeatureSeqInitializer) in i.oclIsUndefined() or i.initializers.feature.eContainingClass->forAll(c|c.isSuperTypeOf(domainMetaElement)) "
d831 1
a831 1
		  (getNodeMapping_ContainmentFeature(), 
d834 1
a834 1
			 "ocl", "containmentFeature.oclIsUndefined() or containmentFeature.eReferenceType.isSuperTypeOf(domainMetaElement) "
d837 1
a837 1
		  (getNodeMapping_EditFeature(), 
d840 1
a840 1
			 "ocl", "editFeature.oclIsUndefined() or domainMetaElement.eAllAttributes->includes(editFeature)"
d843 1
a843 1
		  (getChildNodeMapping_Compartment(), 
d846 1
a846 1
			 "ocl", "parentNode.diagramNode.oclAsType(diadef::Node).compartments->includes(self.compartment)"
d849 1
a849 1
		  (getChildNodeMapping_DomainChildrenFeature(), 
d852 1
a852 7
			 "ocl", "domainChildrenFeature.eContainingClass.isSuperTypeOf(parentNode.domainMetaElement)"
		   });		
		addAnnotation
		  (getChildNodeMapping_EditFeature(), 
		   source, 
		   new String[] {
			 "ocl", "editFeature.oclIsUndefined() or (not domainMetaElement.oclIsUndefined()  and editFeature.eContainingClass.isSuperTypeOf(domainMetaElement)) or domainChildrenFeature.eType.oclAsType(ecore::EClass).eAllAttributes->includes(editFeature)"
a854 6
		  (getChildNodeMapping_DomainInitializer(), 
		   source, 
		   new String[] {
			 "ocl", "let i : FeatureSeqInitializer = domainInitializer.oclAsType( FeatureSeqInitializer) in i.oclIsUndefined() or i.initializers.feature.eContainingClass->forAll(c|c.isSuperTypeOf(domainMetaElement)) "
		   });						
		addAnnotation
@


1.4
log
@[rdvorak] #112773 specify init expressions while relating diagram elements with domain
@
text
@d344 9
d629 1
d710 1
a710 1
		initEReference(getNodeMapping_ChildMappings(), this.getChildNodeMapping(), null, "childMappings", null, 0, -1, NodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d720 1
d762 2
d780 91
a870 2
			 "constraints", "http://www.eclipse.org/gmf/2005/constraints"
		   });																						
d880 7
a886 1
		String source = "http://www.eclipse.org/gmf/2005/constraints";					
d891 1
a891 1
			 "ocl", "oclIsUndefined(containmentFeature) or domainMetaElement.eAllReferences->includes(containmentFeature)"
d897 1
a897 1
			 "ocl", "oclIsUndefined(editFeature) or domainMetaElement.eAllAttributes->includes(editFeature)"
d903 1
a903 1
			 "ocl", "eContainer.diagramNode.compartments->includes(self.compartment)"
d909 13
a921 1
			 "ocl", "eContainer.domainMetaElement.eAllAttributes->includes(domainChildrenFeature)"
d924 6
d933 7
a939 1
			 "ocl", "oclIsUndefined(containmentFeature) or (not oclIsUndefined(domainMetaElement) and domainMetaElement.eAllReferences->includes(containmentFeature))"
d942 7
a948 1
		  (constraintEClass, 
d951 2
a952 2
			 "ocl", "body->evaluate() instanceof Boolean"
		   });									
@


1.3
log
@[rdvorak] #112505 constraint specification in gmfmap
@
text
@d19 3
d95 21
d236 9
d246 1
a246 1
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(3);
d255 1
a255 1
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(4);
d264 1
a264 1
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(5);
d308 1
a308 1
	public EReference getChildNodeMapping_ConditionalFeature() {
d317 1
a317 1
	public EReference getChildNodeMapping_EditFeature() {
d326 1
a326 1
	public EReference getChildNodeMapping_DomainMetaElement() {
d335 1
a335 1
	public EReference getChildNodeMapping_DomainSpecialization() {
d380 9
d390 1
a390 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(3);
d399 1
a399 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(4);
d408 1
a408 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(5);
d417 1
a417 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(6);
d533 45
d607 1
a615 1
		createEReference(childNodeMappingEClass, CHILD_NODE_MAPPING__CONDITIONAL_FEATURE);
d619 1
d625 1
d646 8
d687 2
d697 1
a705 1
		initEReference(getChildNodeMapping_ConditionalFeature(), ecorePackage.getEAttribute(), null, "conditionalFeature", null, 1, 1, ChildNodeMapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
d709 1
d715 1
d737 8
d768 1
a768 1
		   });																
d778 1
a778 1
		String source = "http://www.eclipse.org/gmf/2005/constraints";				
d802 1
a802 7
		   });		
		addAnnotation
		  (getChildNodeMapping_ConditionalFeature(), 
		   source, 
		   new String[] {
			 "ocl", "domainChildrenFeature.eClass.eAllAttributes->includes(conditionalFeature) and conditionalFeature.eType == EcorePackage.getEBoolean"
		   });					
d813 2
a814 2
			 "text", "body->evaluate() instanceof Boolean"
		   });				
@


1.2
log
@[ashatalin] Should be possible to specify editable feature and domain element for child nodes.
@
text
@d9 1
d18 1
d26 2
d78 14
d203 9
d213 1
a213 1
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(2);
d222 1
a222 1
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(3);
d231 1
a231 1
		return (EReference)nodeMappingEClass.getEStructuralFeatures().get(4);
d302 9
d338 9
d348 1
a348 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(2);
d357 1
a357 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(3);
d366 1
a366 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(4);
d375 1
a375 1
		return (EReference)linkMappingEClass.getEStructuralFeatures().get(5);
d455 36
d519 1
d531 1
d536 1
d551 6
d589 1
d597 1
d609 1
d614 1
d630 6
d659 1
a659 1
		   });								
d669 1
a669 1
		String source = "http://www.eclipse.org/gmf/2005/constraints";			
d699 1
a699 1
		   });			
d705 7
a711 1
		   });	
@


1.1
log
@*** empty log message ***
@
text
@d257 18
d447 2
d515 2
@

