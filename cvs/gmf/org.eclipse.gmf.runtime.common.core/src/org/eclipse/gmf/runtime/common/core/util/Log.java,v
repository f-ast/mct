head	1.2;
access;
symbols
	v20081020-0700:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080425-1959:1.2
	v20080402-1725:1.2
	v20080328-1605:1.2
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20080201-2010:1.2
	v20080118-1415:1.2
	v20080118-1129:1.2
	v20071108-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070420-1000:1.2
	v20070330-1300:1.2
	v20070221-1500:1.2
	v20070209-1900:1.2
	v20060209-1900:1.2
	v20070208-1800:1.2
	v20070119-1200:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061020-1000:1.2
	v20061013-1330:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	v20060907-1100:1.2
	M1_20:1.2
	v20060824-1600:1.2
	v20060810-1700:1.2
	v20060803-1200:1.2
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060526-1200:1.2
	I20060505-1400:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.2
date	2005.09.12.21.25.24;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.22;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.core.util;

import org.eclipse.core.runtime.ILog;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Plugin;
import org.eclipse.core.runtime.Status;

import org.eclipse.gmf.runtime.common.core.internal.CommonCoreDebugOptions;
import org.eclipse.gmf.runtime.common.core.internal.CommonCorePlugin;
import org.eclipse.gmf.runtime.common.core.internal.CommonCoreStatusCodes;

/**
 * A utility for logging errors, warnings, and information. Provides a simple
 * interface for generating logs based on status objects.
 * 
 * @@author khussey
 * @@canBeSeenBy %partners
 */
public class Log {

	/**
	 * private constructor for the static class.
	 */
	protected Log() {
		super();
	}
	
	/**
	 * The default log listener for this log utility.
	 */
	private static final ILog fLog = CommonCorePlugin.getDefault().getLog();

	/**
	 * Retrieves the default log listener for this log utility.
	 * 
	 * @@return The default log listener for this log utility.
	 */
	protected static ILog getDefault() {
		return fLog;
	}
	
	/**
	 * Responds to a log request for the specified plug-in based on the
	 * specified status object. Statuses with severity of error or warning
	 * result in the generation of a platform log for the specified plug-in; all
	 * log requests are forward to the default log listener.
	 * 
	 * @@param plugin
	 *            The plug-in for which to generate a log.
	 * @@param status
	 *            The status object on which to base the log.
	 *  
	 */
	public static void log(Plugin plugin, IStatus status) {
		switch (status.getSeverity()) {
			case IStatus.ERROR:
			case IStatus.WARNING:
				getDefault().log(status);
				break;
			default:
				/*
				 * The Eclipse logging facility does not have the concept of
				 * logging levels. Anything logged to the plugins logger will
				 * automatically be logged to the .log file. The Common Logging
				 * implementation provides the common log file
				 * (CommonBaseEvents.log) with the associated extension point
				 * and preference page but is not related to the .log file.
				 * Since we do not want to Eclipse log poluted with "plug-in
				 * started" messages, we do not log these.
				 * 
				 * getDefault().log(status);
				 */
				break;
		}
	}

	/**
	 * Generates a log for the specified plug-in, with the specified severity,
	 * status code, and message.
	 * 
	 * @@param plugin
	 *            The plug-in for which to generate a log.
	 * @@param severity
	 *            The severity of the log.
	 * @@param code
	 *            The status code for the log.
	 * @@param message
	 *            The message for the log.
	 *  
	 */
	public static void log(Plugin plugin, int severity, int code, String message) {

		log(plugin, severity, code, message, null);
	}

	/**
	 * Generates a log for the specified plug-in, with the specified severity,
	 * status code, message, and throwable.
	 * 
	 * @@param plugin
	 *            The plug-in for which to generate a log.
	 * @@param severity
	 *            The severity of the log.
	 * @@param code
	 *            The status code for the log.
	 * @@param message
	 *            The message for the log.
	 * @@param throwable
	 *            The throwable for the log.
	 *  
	 */
	public static void log(Plugin plugin, int severity, int code,
			String message, Throwable throwable) {

		//
		// Status ctor requires a non-null message
		String msg = message == null ? "" //$NON-NLS-1$
			: message;

		try {
			log(plugin, new Status(severity, plugin.getBundle()
				.getSymbolicName(), code, msg, throwable));
		} catch (IllegalArgumentException iae) {
			Trace.catching(CommonCorePlugin.getDefault(),
				CommonCoreDebugOptions.EXCEPTIONS_CATCHING, Log.getDefault()
					.getClass(), "log", iae); //$NON-NLS-1$
			Log.error(CommonCorePlugin.getDefault(),
				CommonCoreStatusCodes.SERVICE_FAILURE, "log", iae); //$NON-NLS-1$
		}
	}

	/**
	 * Generates an error log for the specified plug-in, with the specified
	 * status code and message.
	 * 
	 * @@param plugin
	 *            The plug-in for which to generate a log.
	 * @@param code
	 *            The status code for the log.
	 * @@param message
	 *            The message for the log.
	 *  
	 */
	public static void error(Plugin plugin, int code, String message) {
		error(plugin, code, message, null);
	}
	
	/**
	 * Generates an error log for the specified plug-in, with the specified
	 * status code, message, and throwable.
	 * 
	 * @@param plugin
	 *            The plug-in for which to generate a log.
	 * @@param code
	 *            The status code for the log.
	 * @@param message
	 *            The message for the log.
	 * @@param throwable
	 *            The throwable for the log.
	 *  
	 */
	public static void error(Plugin plugin, int code, String message,
			Throwable throwable) {

		log(plugin, IStatus.ERROR, code, message, throwable);
	}

	/**
	 * Generates a warning log for the specified plug-in, with the specified
	 * status code and message.
	 * 
	 * @@param plugin
	 *            The plug-in for which to generate a log.
	 * @@param code
	 *            The status code for the log.
	 * @@param message
	 *            The message for the log.
	 *  
	 */
	public static void warning(Plugin plugin, int code, String message) {
		warning(plugin, code, message, null);
	}

	/**
	 * Generates a warning log for the specified plug-in, with the specified
	 * status code, message, and throwable.
	 * 
	 * @@param plugin
	 *            The plug-in for which to generate a log.
	 * @@param code
	 *            The status code for the log.
	 * @@param message
	 *            The message for the log.
	 * @@param throwable
	 *            The throwable for the log.
	 *  
	 */
	public static void warning(Plugin plugin, int code, String message,
			Throwable throwable) {

		log(plugin, IStatus.WARNING, code, message, throwable);
	}

	/**
	 * Generates an information log for the specified plug-in, with the
	 * specified status code and message.
	 * 
	 * @@param plugin
	 *            The plug-in for which to generate a log.
	 * @@param code
	 *            The status code for the log.
	 * @@param message
	 *            The message for the log.
	 *  
	 */
	public static void info(Plugin plugin, int code, String message) {
		info(plugin, code, message, null);
	}

	/**
	 * Generates an information log for the specified plug-in, with the
	 * specified status code, message, and throwable.
	 * 
	 * @@param plugin
	 *            The plug-in for which to generate a log.
	 * @@param code
	 *            The status code for the log.
	 * @@param message
	 *            The message for the log.
	 * @@param throwable
	 *            The throwable for the log.
	 *  
	 */
	public static void info(Plugin plugin, int code, String message,
			Throwable throwable) {

		log(plugin, IStatus.INFO, code, message, throwable);
	}
}@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

