head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20080402-1725:1.4
	v20080328-1605:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080201-2010:1.4
	v20080118-1415:1.4
	v20080118-1129:1.4
	v20071108-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070420-1000:1.4
	v20070330-1300:1.4
	v20070221-1500:1.4
	v20070209-1900:1.2.2.2
	v20060209-1900:1.2.2.2
	v20070208-1800:1.4
	v20070119-1200:1.2.2.2
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061020-1000:1.2.2.2
	v20061013-1330:1.3
	v20060925-1700:1.2.2.1
	v20060919-0800:1.2.2.1
	v20060907-1100:1.2.2.1
	M1_20:1.2
	v20060824-1600:1.2.2.1
	v20060810-1700:1.2.2.1
	v20060803-1200:1.2.2.1
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060526-1200:1.2
	I20060505-1400:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.10.13.21.44.24;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.03.14.47.22;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.23.20.26.50;	author cmahoney;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.02.13.19.11.59;	author ldamus;	state Exp;
branches;
next	;

1.2.2.1
date	2006.08.02.17.42.01;	author ahunter;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2006.10.13.21.33.54;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[160541] gmf_head ahunter 061013 Merge 1.0.2 fix to HEAD
@
text
@/******************************************************************************
 * Copyright (c) 2006, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.core.internal.command;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.commands.operations.IOperationApprover2;
import org.eclipse.core.commands.operations.IOperationHistory;
import org.eclipse.core.commands.operations.IUndoableOperation;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator;
import org.eclipse.gmf.runtime.common.core.command.ICommand;

/**
 * Approves operations that implement the {@@link ICommand} interface by checking
 * that their affected {@@link IFile}s can be modified.
 * 
 * @@author ldamus
 */
public class FileModificationApprover
    implements IOperationApprover2 {

    /**
     * Approves file modification for {@@link ICommand}s.
     */
    public IStatus proceedExecuting(IUndoableOperation operation,
            IOperationHistory history, IAdaptable info) {

        if (operation instanceof ICommand) {
            return approveFileModification((ICommand) operation);
        }

        return Status.OK_STATUS;
    }

    /**
     * Approves file modification for {@@link ICommand}s.
     */
    public IStatus proceedRedoing(IUndoableOperation operation,
            IOperationHistory history, IAdaptable info) {

        if (operation instanceof ICommand) {
            return approveFileModification((ICommand) operation);
        }

        return Status.OK_STATUS;
    }

    /**
     * Approves file modification for {@@link ICommand}s.
     */
    public IStatus proceedUndoing(IUndoableOperation operation,
            IOperationHistory history, IAdaptable info) {

        if (operation instanceof ICommand) {
            return approveFileModification((ICommand) operation);
        }

        return Status.OK_STATUS;
    }

    /**
     * Checks that affected {@@link IFile}s can be modified.
     * 
     * @@return the approval status
     */
    private IStatus approveFileModification(ICommand fileModifier) {

        List files = new ArrayList();

        for (Iterator i = fileModifier.getAffectedFiles().iterator(); i
            .hasNext();) {
            IFile nextFile = (IFile) i.next();
            
            if ( nextFile == null ) 
                continue;
            
            if (nextFile.exists()) {
                // the file is in the workspace
                files.add(nextFile);

            } else {
                // the file is not in the workspace
            	IPath path = nextFile.getRawLocation();
            	if (path == null) {
					// cancel if we can't find the file
                    setCommandResult(fileModifier, Status.CANCEL_STATUS);
					return Status.CANCEL_STATUS;
				}
				File file = path.toFile();
				if (file != null && file.exists() && !file.canWrite()) {
					// cancel if we find a read-only file outside the
					// workspace
                    setCommandResult(fileModifier, Status.CANCEL_STATUS);
					return Status.CANCEL_STATUS;
				}	
            }
        }

        IStatus status = FileModificationValidator
            .approveFileModification((IFile[]) files.toArray(new IFile[] {}));
        
        if (!status.isOK()) {
            setCommandResult(fileModifier, status);
        }
        
        return status;
    }
    
    /**
     * Sets the command result of the specified command to a CommandResult
     * having the specified status.
     * 
     * @@param command ICommand to set the CommandResult for
     * @@param status IStatus of the CommandResult that will be set on the
     * command
     */
    private void setCommandResult(ICommand command, IStatus status) {
        if (command instanceof ICommandWithSettableResult) {
            ((ICommandWithSettableResult) command).internalSetResult(new CommandResult(status));
        }
    }
}
@


1.3
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2006 IBM Corporation and others.
d27 1
d104 1
d111 1
d117 1
a117 1
        return FileModificationValidator
d119 20
@


1.2
log
@Bugzilla#113850 gmf_head cmahoney 060223 Avoid NPE
@
text
@d91 3
@


1.2.2.1
log
@[150176] gmf_R_1_0_maintenance ahunter 060802 NPE from FileModificationApprover
@
text
@a90 3
            if ( nextFile == null ) 
                continue;
            
@


1.2.2.2
log
@[160541] gmf_R1_0_maintenance wdiu 061013 When commands are executed using DefaultOperationHistory, unapproved commands will not be executed and CommandResult including IStatus will not be set
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2006 IBM Corporation and others.
a26 1
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
a102 1
                    setCommandResult(fileModifier, Status.CANCEL_STATUS);
a108 1
                    setCommandResult(fileModifier, Status.CANCEL_STATUS);
d114 1
a114 1
        IStatus status = FileModificationValidator
a115 20
        
        if (!status.isOK()) {
            setCommandResult(fileModifier, status);
        }
        
        return status;
    }
    
    /**
     * Sets the command result of the specified command to a CommandResult
     * having the specified status.
     * 
     * @@param command ICommand to set the CommandResult for
     * @@param status IStatus of the CommandResult that will be set on the
     * command
     */
    private void setCommandResult(ICommand command, IStatus status) {
        if (command instanceof ICommandWithSettableResult) {
            ((ICommandWithSettableResult) command).internalSetResult(new CommandResult(status));
        }
@


1.1
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d24 1
d97 11
a107 7
                File file = nextFile.getRawLocation().toFile();

                if (file != null && file.exists() && !file.canWrite()) {
                    // cancel if we find a read-only file outside the
                    // workspace
                    return Status.CANCEL_STATUS;
                }
@

