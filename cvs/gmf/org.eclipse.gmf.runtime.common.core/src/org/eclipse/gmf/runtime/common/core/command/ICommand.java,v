head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20080402-1725:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080201-2010:1.5
	v20080118-1415:1.5
	v20080118-1129:1.5
	v20071108-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070518-1300:1.5
	v20070420-1000:1.5
	v20070330-1300:1.5
	v20070221-1500:1.5
	v20070209-1900:1.4
	v20060209-1900:1.4
	v20070208-1800:1.5
	v20070119-1200:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061020-1000:1.4
	v20061013-1330:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	v20060907-1100:1.4
	M1_20:1.4
	v20060824-1600:1.4
	v20060810-1700:1.4
	v20060803-1200:1.4
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060526-1200:1.4
	I20060505-1400:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2007.01.11.18.32.59;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	7b1d45a682da4567;

1.4
date	2006.03.27.21.12.44;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.19.11.59;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.25;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.16;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[170224] gmf_head aboyko 070111 CompositeCommand#reduce() should propogate command label
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.core.command;

import java.util.List;

import org.eclipse.core.commands.operations.IOperationApprover;
import org.eclipse.core.commands.operations.IUndoableOperation;
import org.eclipse.core.commands.operations.OperationHistoryFactory;
import org.eclipse.core.resources.IFile;

/**
 * A self-composing undoable operation that has a {@@link CommandResult} and a
 * list of affected {@@link IFile}s.
 * <P>
 * Executing, undoing or redoing a command can have a result which clients can
 * obtain by using the {@@link #getCommandResult()} method. For example,
 * executing a command that create a new entity may wish to make the new entity
 * accessible to clients through the {@@link #getCommandResult()} method.
 * <P>
 * The command provides a list of {@@link IFile}s that are expected to be
 * modified when the it is executed, undone or redone. An
 * {@@link IOperationApprover} is registered with the
 * {@@link OperationHistoryFactory#getOperationHistory()} to validate the
 * modification to these resources.
 * <P>
 * If an error occurs, or the progress monitor is canceled during execute, undo
 * or redo, the command should make every effort to roll back the changes it has
 * made up to that point.
 * 
 * @@author khussey
 * @@author ldamus
 * 
 * @@canBeSeenBy %partners
 */
public interface ICommand extends IUndoableOperation {

	/**
	 * Retrieves the result of executing, undoing, or redoing this command,
	 * depending on which of these operations was last performed. This value can
	 * be <code>null</code> if the operation has no meaningful result.
	 * <P>
	 * The value of this result is undefined if the command has not yet been
	 * executed, undone or redone.
	 * 
	 * @@return The result of executing, undoing or redoing this command.
	 */
	public abstract CommandResult getCommandResult();

	/**
	 * Returns the list of {@@link IFile}s that are expected to be modified by
	 * this command.
	 * 
	 * @@return the list of {@@link IFile}s that will be modified
	 */
	public abstract List getAffectedFiles();

	/**
	 * Returns a new command object that represents a composition of this
	 * command with the specified <code>command</code> parameter.
	 * 
	 * @@param operation
	 *            The operation that is to be composed with this command.
	 * @@return A command that represents a composition of this command with the
	 *         specified command.
	 */
	public abstract ICommand compose(IUndoableOperation operation);
    
    /**
     * Returns the simplest form of this command that is equivalent. Use this
     * method to remove unnecessary nesting of commands.
     * 
     * @@return the simplest form of this command that is equivalent
     */
    public abstract ICommand reduce();
    
    /**
     * Since not all commands have names, reduce() should propogate label from an
     * upper command that may be thrown away to the resultant reduced command. The
     * method is needed to assign the label to a nameless command, because
     * <code>IUndoableOperation</code> is missing this method.
     * 
     * @@param label command's new label
     */
    public abstract void setLabel(String label);
}
@


1.4
log
@[112826] gmf_head ldamus 060327 Adopt Eclipse 3.1 Operation History Framework - removing deprecated API
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d85 10
@


1.3
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@a13 1
import java.util.Collection;
a19 1
import org.eclipse.core.runtime.IProgressMonitor;
a84 102

    
    /**
     * Retrieves the collection of objects that would be affected if this
     * command were executed, undone, or redone.
     * 
     * @@return The collection of objects affected by this command.
     * 
     * @@deprecated Commands that will modify resources and wish to have these
     *             resources validated should implement the
     *             {@@link #getAffectedFiles()} interface.
     */
    public Collection getAffectedObjects();

    /**
     * Indicates whether non workspace files are involved in executing, undoing
     * or redoing this command.
     * 
     * @@return boolean
     * 
     * @@deprecated No replacement. File validation is now done through a
     *             {@@link IOperationApprover} registered with with the
     *             {@@link OperationHistoryFactory#getOperationHistory()}.
     */
    public boolean involvesReadOnlyNonWorkSpaceFiles();

    /**
     * Return a validator which can be used to check whether the units being
     * modified by a command are writable.
     * 
     * @@return the validator
     * 
     * @@deprecated No replacement. File validation is now done through a
     *             {@@link IOperationApprover} registered with with the
     *             {@@link OperationHistoryFactory#getOperationHistory()}.
     */
    public CMValidator getValidator();

    /**
     * Answers whether this command can be executed.
     * 
     * @@return <code>true</code> if the command can be executed;
     *         <code>false</code> otherwise.
     * 
     * @@deprecated Use {@@link IUndoableOperation#canExecute()} instead.
     */
    public boolean isExecutable();

    /**
     * Answers whether this command can be redone.
     * 
     * @@return <code>true</code> if the command can be redone;
     *         <code>false</code> otherwise.
     * 
     * @@deprecated Use {@@link IUndoableOperation#canRedo()} instead.
     */
    public boolean isRedoable();

    /**
     * Answers whether this command can be undone.
     * 
     * @@return <code>true</code> if the command can be undone;
     *         <code>false</code> otherwise.
     * 
     * @@deprecated Use {@@link IUndoableOperation#canUndo()()} instead.
     */
    public boolean isUndoable();

    /**
     * Executes this command. A progress monitor is supplied so that the
     * progress of executing the command may be tracked.
     * 
     * @@param progressMonitor
     *            The object that monitors the progress of this command
     *            execution. May be
     *            {@@link org.eclipse.core.runtime.NullProgressMonitor}if the
     *            command should be executed without monitoring its progress.
     * 
     * @@deprecated Use
     *             {@@link IUndoableOperation#execute(IProgressMonitor, org.eclipse.core.runtime.IAdaptable)}
     *             instead.
     */
    public void execute(IProgressMonitor progressMonitor);

    /**
     * Redoes this command.
     * 
     * @@deprecated Use
     *             {@@link IUndoableOperation#redo(IProgressMonitor, org.eclipse.core.runtime.IAdaptable)}
     *             instead.
     */
    public void redo();

    /**
     * Undoes this command.
     * 
     * @@deprecated Use
     *             {@@link IUndoableOperation#undo(IProgressMonitor, org.eclipse.core.runtime.IAdaptable)}
     *             instead.
     */
    public void undo();

@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
d15 1
d17 4
d24 2
a25 13
 * A unit of work that can potentially be undone and redone. {@@link ICommand}s
 * can be executed by the
 * {@@link org.eclipse.gmf.runtime.common.core.command.CommandManager}, which
 * will maintain a history of the commands that it has executed that are
 * eligible to be undone and redone.
 * <P>
 * Commands have a label that can be used to provide information to a client.
 * For example, the command label could be used as the text in an undo or redo
 * menu item.
 * <P>
 * Progress through the work done by a command is monitored by an
 * {@@link org.eclipse.core.runtime.IProgressMonitor} with which the command is
 * executed.
d31 10
d43 2
d47 1
a47 10
public interface ICommand {

	/**
	 * Retrieves the label for this command. The label is typically a very brief
	 * description (suitable for display in a menu item) of what this command
	 * does when it is executed.
	 * 
	 * @@return The label for this command.
	 */
	public String getLabel();
d59 1
a59 1
	public CommandResult getCommandResult();
d62 2
a63 2
	 * Retrieves the collection of objects that would be affected if this
	 * command were executed, undone, or redone.
d65 1
a65 1
	 * @@return The collection of objects affected by this command.
d67 1
a67 1
	public Collection getAffectedObjects();
a69 16
	 * Indicates whether non workspace files are involved in executing, undoing
	 * or redoing this command.
	 * 
	 * @@return boolean
	 */	
	public boolean involvesReadOnlyNonWorkSpaceFiles();

	/**
	 * Return a validator which can be used to check whether the units being
	 * modified by a command are writable.
	 * 
	 * @@return the validator
	 */		
	public CMValidator getValidator();
	
	/**
d73 2
a74 2
	 * @@param command
	 *            The command that is to be composed with this command.
d78 110
a187 47
	ICommand compose(ICommand command);

	/**
	 * Answers whether this command can be executed.
	 * 
	 * @@return <code>true</code> if the command can be executed;
	 *         <code>false</code> otherwise.
	 */
	public boolean isExecutable();

	/**
	 * Answers whether this command can be redone.
	 * 
	 * @@return <code>true</code> if the command can be redone;
	 *         <code>false</code> otherwise.
	 */
	public boolean isRedoable();

	/**
	 * Answers whether this command can be undone.
	 * 
	 * @@return <code>true</code> if the command can be undone;
	 *         <code>false</code> otherwise.
	 */
	public boolean isUndoable();

	/**
	 * Executes this command. A progress monitor is supplied so that the
	 * progress of executing the command may be tracked.
	 * 
	 * @@param progressMonitor
	 *            The object that monitors the progress of this command
	 *            execution. May be
	 *            {@@link org.eclipse.core.runtime.NullProgressMonitor}if the
	 *            command should be executed without monitoring its progress.
	 */
	public void execute(IProgressMonitor progressMonitor);

	/**
	 * Redoes this command.
	 */
	public void redo();

	/**
	 * Undoes this command.
	 */
	public void undo();
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

