head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.6
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20080402-1725:1.4
	v20080328-1605:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080201-2010:1.4
	v20080118-1415:1.4
	v20080118-1129:1.4
	v20071108-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070420-1000:1.4
	v20070330-1300:1.4
	v20070221-1500:1.4
	v20070209-1900:1.4
	v20060209-1900:1.4
	v20070208-1800:1.4
	v20070119-1200:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061020-1000:1.4
	v20061013-1330:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	v20060907-1100:1.4
	M1_20:1.4
	v20060824-1600:1.4
	v20060810-1700:1.4
	v20060803-1200:1.4
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060526-1200:1.4
	I20060505-1400:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2006.03.20.20.57.35;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.16.20.13.16;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.24;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.21;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[132588] gmf_head ldamus 060320 Fix deprecation warnings for IExtension#getNamespace
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.core.util;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IExtension;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import org.eclipse.gmf.runtime.common.core.internal.CommonCoreDebugOptions;
import org.eclipse.gmf.runtime.common.core.internal.CommonCorePlugin;
import org.eclipse.gmf.runtime.common.core.internal.CommonCoreStatusCodes;
import org.osgi.framework.Bundle;

/**
 * Manages the properties files declared in the textConfiguration extensions
 * 
 * @@author myee
 * @@canBeSeenBy %partners
 */
public class PropertiesConfigurationManager {

	/**
	 * Extension point name for the properties configuration extension point.
	 */
	private static final String PROPERTIES_CONFIGURATION_EXT_P_NAME = "propertiesConfiguration"; //$NON-NLS-1$ 

	/**
	 * The path attribute describing the relative location to the properties
	 * file
	 */
	private static final String PATH_ATTRIBUTE = "path";//$NON-NLS-1$

	/**
	 * Maps plug-in id to its properties map
	 */
	private static Map pluginIdToPropertiesMap = null;

	/**
	 * private constructor.
	 */
	private PropertiesConfigurationManager() {
		super();
	}
	
	/**
	 * Gets the string for the given key
	 * 
	 * @@param pluginId
	 *            the id of the plug-in defining the string
	 * @@param key
	 *            the key
	 * @@return the string, or <code>null</code> if the mapping is not found
	 */
	public static String getString(String pluginId, String key) {
		Map propertiesMap = (Map) getPluginIdToPropertiesMap().get(pluginId);
		if (propertiesMap == null) {
			// lazy initialize the properties map for the given plug-in
			propertiesMap = new HashMap();
			getPluginIdToPropertiesMap().put(pluginId, propertiesMap);

			// load the properties files for all extensions in the plug-in
			IExtension[] extensions = Platform.getExtensionRegistry()
				.getExtensionPoint(CommonCorePlugin.getPluginId(),
					PROPERTIES_CONFIGURATION_EXT_P_NAME).getExtensions();
			for (int i = 0; i < extensions.length; ++i) {
				if (extensions[i].getContributor().getName().equals(pluginId)) {
					loadProperties(propertiesMap, extensions[i]
						.getConfigurationElements());
				}
			}
		}

		return (String) propertiesMap.get(key);
	}

	/**
	 * Gets the pluginIdToPropertiesMap map
	 * 
	 * @@return the pluginIdToPropertiesMap map
	 */
	private static Map getPluginIdToPropertiesMap() {
		if (pluginIdToPropertiesMap == null) {
			// lazy initialize the map
			pluginIdToPropertiesMap = new HashMap();
		}
		return pluginIdToPropertiesMap;
	}

	/**
	 * Lods the properties files described by the configuration elements.
	 * 
	 * @@param propertiesMap
	 *            the map to hold the properties files
	 * @@param elements
	 *            The configuration elements describing the properties files.
	 */
	private static void loadProperties(Map propertiesMap,
			IConfigurationElement[] elements) {

		for (int i = 0; i < elements.length; i++) {
			IConfigurationElement element = elements[i];

			// get the relative path of the properties file
			String relativePath = element.getAttribute(PATH_ATTRIBUTE);
			
			Bundle bundle = Platform.getBundle(
					element.getDeclaringExtension().getContributor().getName());
			
			assert bundle != null;
			
			URL url = FileLocator.find(bundle, new Path(relativePath), null);
			
			if (url == null) {
				Log.error(CommonCorePlugin.getDefault(),
					CommonCoreStatusCodes.SERVICE_FAILURE,
					"Couldn't find relative path " + relativePath + " in " //$NON-NLS-1$ //$NON-NLS-2$
						+ element.getDeclaringExtension().getContributor().getName());
			}
			
			InputStream is = null;
			// get the file
			try {
				is = url.openStream();
				Properties properties = new Properties();
				properties.load(is);
				propertiesMap.putAll(properties);
				
			} catch (IOException e) {
				handleException(e);
			}
			finally {
				
				if (is != null) {
					try {
						is.close();
					} catch (IOException e) {
						handleException(e);
					}
					
				}
				
			}

		}
	}	

	/**
	 * Log and trace the exception
	 * 
	 * @@param e
	 *            the exception
	 */
	private static void handleException(Exception e) {
		Trace.catching(CommonCorePlugin.getDefault(),
			CommonCoreDebugOptions.EXCEPTIONS_CATCHING,
			PropertiesConfigurationManager.class, "configureProperties", e); //$NON-NLS-1$
		Log.error(CommonCorePlugin.getDefault(),
			CommonCoreStatusCodes.SERVICE_FAILURE, e.getMessage(), e);
	}

}@


1.3
log
@[128279] gmf_head wdiu 060216 PropertiesConfigurationManager doesn't work with JARs
@
text
@d21 1
d83 1
a83 1
				if (extensions[i].getNamespace().equals(pluginId)) {
d124 1
a124 1
					element.getDeclaringExtension().getNamespace());
d128 1
a128 1
			URL url = Platform.find(bundle, new Path(relativePath));
d134 1
a134 1
						+ element.getDeclaringExtension().getNamespace());
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2005 IBM Corporation and others.
a13 2
import java.io.FileInputStream;
import java.io.FileNotFoundException;
d15 1
d23 1
a24 1

d28 1
d121 16
a136 1

a137 13
			URL installURL = Platform.getBundle(
				element.getDeclaringExtension().getNamespace()).getEntry("/");//$NON-NLS-1$
			URL resolveURL = null;
			try {
				resolveURL = Platform.resolve(installURL);
			} catch (IOException e1) {
				// shouldn't happen
				assert (false);
			}
			String fullPath = resolveURL.getFile() + relativePath;

			// load the properties file
			Properties properties = new Properties();
d139 5
a143 5
				FileInputStream stream = new FileInputStream(fullPath);
				properties.load(stream);
			} catch (FileNotFoundException e) {
				handleException(e);
				continue;
d146 12
a157 1
				continue;
a159 2
			// add the properties map
			propertiesMap.putAll(properties);
d161 1
a161 1
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

