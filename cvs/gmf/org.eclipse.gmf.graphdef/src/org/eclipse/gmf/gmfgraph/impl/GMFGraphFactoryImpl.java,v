head	1.20;
access;
symbols
	v20080813-1520:1.20
	v20080807-1333:1.20
	v20080806-1520:1.20
	v20080731-1520:1.19
	v20080722-1827:1.18
	v20080716-1642:1.18
	R2_1_maintenance:1.18.0.2
	Root_R2_1_maintenance:1.18
	R2_1_0:1.18
	v20080528-1052:1.18
	v20080521:1.17
	v20080425-1959:1.17
	v20080322-0000:1.17
	v20080222-1200:1.17
	v20080215-1500:1.17
	v20080207-0207:1.17
	v20071214-1111:1.17
	v20071003-0000:1.17
	v20070809-0000:1.17
	R2_0_maintenance:1.17.0.2
	R2_0:1.17
	R4_20:1.17
	v20070621-0000:1.17
	RC3_20:1.17
	v20070605-1400:1.17
	v20070601-1400:1.17
	v20070420-1000:1.16
	v20070330-1300:1.16
	v20070322-1100:1.16
	v20060316-0600:1.16
	v20070208-1800:1.15
	M4_20:1.15
	v20061214-0000:1.15
	M3_20:1.15
	v20061013-1330:1.15
	v20060919-0800:1.13
	M1_20:1.15
	v20060904-1500:1.15
	v20060713-1700:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060626-1420:1.13
	v20060616-1200:1.12
	v20060609-1400:1.12
	v20060531-1730:1.11
	v20060530-1930:1.11
	v20060526-1200:1.11
	v20060519-0800:1.9
	RC2_10:1.9
	I20060505-1400:1.9
	I20060424-0500:1.9
	I20060424-0300:1.9
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.8
	I20060216-1945:1.7
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.3
	I20051223-1100:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.20
date	2008.08.05.12.42.37;	author dstadnik;	state Exp;
branches;
next	1.19;
commitid	18be48984a924567;

1.19
date	2008.07.31.12.17.13;	author dstadnik;	state Exp;
branches;
next	1.18;
commitid	4bcc4891ad0b4567;

1.18
date	2008.05.21.16.42.10;	author atikhomirov;	state Exp;
branches;
next	1.17;
commitid	6f3c483450df4567;

1.17
date	2007.05.28.13.33.36;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	3de9465ada274567;

1.16
date	2007.03.14.12.59.17;	author atikhomirov;	state Exp;
branches;
next	1.15;
commitid	109645f7f19c4567;

1.15
date	2006.09.01.17.49.34;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.08.24.15.38.46;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.26.13.42.59;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.05.14.26.30;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.24.14.50.56;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.23.21.09.56;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.20.13.59.38;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.22.22.01.35;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.15.14.44.43;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.14.10.11.40;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.13.17.36.31;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.05.17.33.07;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.28.16.10.30;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.12.19.15.40;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.22.12.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.20
log
@[243050] support AOI in gmfgraph
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.impl.EFactoryImpl;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.eclipse.gmf.gmfgraph.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @@generated
 */
public class GMFGraphFactoryImpl extends EFactoryImpl implements GMFGraphFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static GMFGraphFactory init() {
		try {
			GMFGraphFactory theGMFGraphFactory = (GMFGraphFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/2006/GraphicalDefinition"); 
			if (theGMFGraphFactory != null) {
				return theGMFGraphFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new GMFGraphFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GMFGraphFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case GMFGraphPackage.CANVAS: return createCanvas();
			case GMFGraphPackage.FIGURE_GALLERY: return createFigureGallery();
			case GMFGraphPackage.NODE: return createNode();
			case GMFGraphPackage.CONNECTION: return createConnection();
			case GMFGraphPackage.COMPARTMENT: return createCompartment();
			case GMFGraphPackage.DIAGRAM_LABEL: return createDiagramLabel();
			case GMFGraphPackage.GENERAL_FACET: return createGeneralFacet();
			case GMFGraphPackage.ALIGNMENT_FACET: return createAlignmentFacet();
			case GMFGraphPackage.GRADIENT_FACET: return createGradientFacet();
			case GMFGraphPackage.LABEL_OFFSET_FACET: return createLabelOffsetFacet();
			case GMFGraphPackage.DEFAULT_SIZE_FACET: return createDefaultSizeFacet();
			case GMFGraphPackage.FIGURE_DESCRIPTOR: return createFigureDescriptor();
			case GMFGraphPackage.CHILD_ACCESS: return createChildAccess();
			case GMFGraphPackage.FIGURE_REF: return createFigureRef();
			case GMFGraphPackage.LABEL: return createLabel();
			case GMFGraphPackage.LABELED_CONTAINER: return createLabeledContainer();
			case GMFGraphPackage.RECTANGLE: return createRectangle();
			case GMFGraphPackage.ROUNDED_RECTANGLE: return createRoundedRectangle();
			case GMFGraphPackage.ELLIPSE: return createEllipse();
			case GMFGraphPackage.POLYLINE: return createPolyline();
			case GMFGraphPackage.POLYGON: return createPolygon();
			case GMFGraphPackage.SCALABLE_POLYGON: return createScalablePolygon();
			case GMFGraphPackage.POLYLINE_CONNECTION: return createPolylineConnection();
			case GMFGraphPackage.POLYLINE_DECORATION: return createPolylineDecoration();
			case GMFGraphPackage.POLYGON_DECORATION: return createPolygonDecoration();
			case GMFGraphPackage.CUSTOM_ATTRIBUTE: return createCustomAttribute();
			case GMFGraphPackage.FIGURE_ACCESSOR: return createFigureAccessor();
			case GMFGraphPackage.CUSTOM_FIGURE: return createCustomFigure();
			case GMFGraphPackage.CUSTOM_DECORATION: return createCustomDecoration();
			case GMFGraphPackage.CUSTOM_CONNECTION: return createCustomConnection();
			case GMFGraphPackage.RGB_COLOR: return createRGBColor();
			case GMFGraphPackage.CONSTANT_COLOR: return createConstantColor();
			case GMFGraphPackage.BASIC_FONT: return createBasicFont();
			case GMFGraphPackage.POINT: return createPoint();
			case GMFGraphPackage.DIMENSION: return createDimension();
			case GMFGraphPackage.INSETS: return createInsets();
			case GMFGraphPackage.BORDER_REF: return createBorderRef();
			case GMFGraphPackage.LINE_BORDER: return createLineBorder();
			case GMFGraphPackage.MARGIN_BORDER: return createMarginBorder();
			case GMFGraphPackage.COMPOUND_BORDER: return createCompoundBorder();
			case GMFGraphPackage.CUSTOM_BORDER: return createCustomBorder();
			case GMFGraphPackage.CUSTOM_LAYOUT_DATA: return createCustomLayoutData();
			case GMFGraphPackage.GRID_LAYOUT_DATA: return createGridLayoutData();
			case GMFGraphPackage.BORDER_LAYOUT_DATA: return createBorderLayoutData();
			case GMFGraphPackage.LAYOUT_REF: return createLayoutRef();
			case GMFGraphPackage.CUSTOM_LAYOUT: return createCustomLayout();
			case GMFGraphPackage.GRID_LAYOUT: return createGridLayout();
			case GMFGraphPackage.BORDER_LAYOUT: return createBorderLayout();
			case GMFGraphPackage.FLOW_LAYOUT: return createFlowLayout();
			case GMFGraphPackage.XY_LAYOUT: return createXYLayout();
			case GMFGraphPackage.XY_LAYOUT_DATA: return createXYLayoutData();
			case GMFGraphPackage.STACK_LAYOUT: return createStackLayout();
			case GMFGraphPackage.SVG_FIGURE: return createSVGFigure();
			case GMFGraphPackage.SVG_PROPERTY: return createSVGProperty();
			case GMFGraphPackage.RECTANGLE2_D: return createRectangle2D();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object createFromString(EDataType eDataType, String initialValue) {
		switch (eDataType.getClassifierID()) {
			case GMFGraphPackage.COLOR_CONSTANTS:
				return createColorConstantsFromString(eDataType, initialValue);
			case GMFGraphPackage.FONT_STYLE:
				return createFontStyleFromString(eDataType, initialValue);
			case GMFGraphPackage.DIRECTION:
				return createDirectionFromString(eDataType, initialValue);
			case GMFGraphPackage.LINE_KIND:
				return createLineKindFromString(eDataType, initialValue);
			case GMFGraphPackage.ALIGNMENT:
				return createAlignmentFromString(eDataType, initialValue);
			case GMFGraphPackage.SVG_PROPERTY_TYPE:
				return createSVGPropertyTypeFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String convertToString(EDataType eDataType, Object instanceValue) {
		switch (eDataType.getClassifierID()) {
			case GMFGraphPackage.COLOR_CONSTANTS:
				return convertColorConstantsToString(eDataType, instanceValue);
			case GMFGraphPackage.FONT_STYLE:
				return convertFontStyleToString(eDataType, instanceValue);
			case GMFGraphPackage.DIRECTION:
				return convertDirectionToString(eDataType, instanceValue);
			case GMFGraphPackage.LINE_KIND:
				return convertLineKindToString(eDataType, instanceValue);
			case GMFGraphPackage.ALIGNMENT:
				return convertAlignmentToString(eDataType, instanceValue);
			case GMFGraphPackage.SVG_PROPERTY_TYPE:
				return convertSVGPropertyTypeToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Canvas createCanvas() {
		CanvasImpl canvas = new CanvasImpl();
		return canvas;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FigureGallery createFigureGallery() {
		FigureGalleryImpl figureGallery = new FigureGalleryImpl();
		return figureGallery;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Node createNode() {
		NodeImpl node = new NodeImpl();
		return node;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ChildAccess createChildAccess() {
		ChildAccessImpl childAccess = new ChildAccessImpl();
		return childAccess;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Connection createConnection() {
		ConnectionImpl connection = new ConnectionImpl();
		return connection;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Compartment createCompartment() {
		CompartmentImpl compartment = new CompartmentImpl();
		return compartment;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DiagramLabel createDiagramLabel() {
		DiagramLabelImpl diagramLabel = new DiagramLabelImpl();
		return diagramLabel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GeneralFacet createGeneralFacet() {
		GeneralFacetImpl generalFacet = new GeneralFacetImpl();
		return generalFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public AlignmentFacet createAlignmentFacet() {
		AlignmentFacetImpl alignmentFacet = new AlignmentFacetImpl();
		return alignmentFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GradientFacet createGradientFacet() {
		GradientFacetImpl gradientFacet = new GradientFacetImpl();
		return gradientFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelOffsetFacet createLabelOffsetFacet() {
		LabelOffsetFacetImpl labelOffsetFacet = new LabelOffsetFacetImpl();
		return labelOffsetFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DefaultSizeFacet createDefaultSizeFacet() {
		DefaultSizeFacetImpl defaultSizeFacet = new DefaultSizeFacetImpl();
		return defaultSizeFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FigureDescriptor createFigureDescriptor() {
		FigureDescriptorImpl figureDescriptor = new FigureDescriptorImpl();
		return figureDescriptor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FigureRef createFigureRef() {
		FigureRefImpl figureRef = new FigureRefImpl();
		return figureRef;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Label createLabel() {
		LabelImpl label = new LabelImpl();
		return label;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabeledContainer createLabeledContainer() {
		LabeledContainerImpl labeledContainer = new LabeledContainerImpl();
		return labeledContainer;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Rectangle createRectangle() {
		RectangleImpl rectangle = new RectangleImpl();
		return rectangle;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public RoundedRectangle createRoundedRectangle() {
		RoundedRectangleImpl roundedRectangle = new RoundedRectangleImpl();
		return roundedRectangle;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Ellipse createEllipse() {
		EllipseImpl ellipse = new EllipseImpl();
		return ellipse;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Polyline createPolyline() {
		PolylineImpl polyline = new PolylineImpl();
		return polyline;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Polygon createPolygon() {
		PolygonImpl polygon = new PolygonImpl();
		return polygon;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ScalablePolygon createScalablePolygon() {
		ScalablePolygonImpl scalablePolygon = new ScalablePolygonImpl();
		return scalablePolygon;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public PolylineConnection createPolylineConnection() {
		PolylineConnectionImpl polylineConnection = new PolylineConnectionImpl();
		return polylineConnection;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public PolylineDecoration createPolylineDecoration() {
		PolylineDecorationImpl polylineDecoration = new PolylineDecorationImpl();
		return polylineDecoration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public PolygonDecoration createPolygonDecoration() {
		PolygonDecorationImpl polygonDecoration = new PolygonDecorationImpl();
		return polygonDecoration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CustomFigure createCustomFigure() {
		CustomFigureImpl customFigure = new CustomFigureImpl();
		return customFigure;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CustomDecoration createCustomDecoration() {
		CustomDecorationImpl customDecoration = new CustomDecorationImpl();
		return customDecoration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CustomConnection createCustomConnection() {
		CustomConnectionImpl customConnection = new CustomConnectionImpl();
		return customConnection;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public RGBColor createRGBColor() {
		RGBColorImpl rgbColor = new RGBColorImpl();
		return rgbColor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ConstantColor createConstantColor() {
		ConstantColorImpl constantColor = new ConstantColorImpl();
		return constantColor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public BasicFont createBasicFont() {
		BasicFontImpl basicFont = new BasicFontImpl();
		return basicFont;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Point createPoint() {
		PointImpl point = new PointImpl();
		return point;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Dimension createDimension() {
		DimensionImpl dimension = new DimensionImpl();
		return dimension;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Insets createInsets() {
		InsetsImpl insets = new InsetsImpl();
		return insets;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public BorderRef createBorderRef() {
		BorderRefImpl borderRef = new BorderRefImpl();
		return borderRef;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LineBorder createLineBorder() {
		LineBorderImpl lineBorder = new LineBorderImpl();
		return lineBorder;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public MarginBorder createMarginBorder() {
		MarginBorderImpl marginBorder = new MarginBorderImpl();
		return marginBorder;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CompoundBorder createCompoundBorder() {
		CompoundBorderImpl compoundBorder = new CompoundBorderImpl();
		return compoundBorder;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CustomBorder createCustomBorder() {
		CustomBorderImpl customBorder = new CustomBorderImpl();
		return customBorder;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CustomLayoutData createCustomLayoutData() {
		CustomLayoutDataImpl customLayoutData = new CustomLayoutDataImpl();
		return customLayoutData;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GridLayoutData createGridLayoutData() {
		GridLayoutDataImpl gridLayoutData = new GridLayoutDataImpl();
		return gridLayoutData;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public BorderLayoutData createBorderLayoutData() {
		BorderLayoutDataImpl borderLayoutData = new BorderLayoutDataImpl();
		return borderLayoutData;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LayoutRef createLayoutRef() {
		LayoutRefImpl layoutRef = new LayoutRefImpl();
		return layoutRef;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CustomLayout createCustomLayout() {
		CustomLayoutImpl customLayout = new CustomLayoutImpl();
		return customLayout;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GridLayout createGridLayout() {
		GridLayoutImpl gridLayout = new GridLayoutImpl();
		return gridLayout;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public BorderLayout createBorderLayout() {
		BorderLayoutImpl borderLayout = new BorderLayoutImpl();
		return borderLayout;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CustomAttribute createCustomAttribute() {
		CustomAttributeImpl customAttribute = new CustomAttributeImpl();
		return customAttribute;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FigureAccessor createFigureAccessor() {
		FigureAccessorImpl figureAccessor = new FigureAccessorImpl();
		return figureAccessor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FlowLayout createFlowLayout() {
		FlowLayoutImpl flowLayout = new FlowLayoutImpl();
		return flowLayout;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public XYLayout createXYLayout() {
		XYLayoutImpl xyLayout = new XYLayoutImpl();
		return xyLayout;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public XYLayoutData createXYLayoutData() {
		XYLayoutDataImpl xyLayoutData = new XYLayoutDataImpl();
		return xyLayoutData;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public StackLayout createStackLayout() {
		StackLayoutImpl stackLayout = new StackLayoutImpl();
		return stackLayout;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public SVGFigure createSVGFigure() {
		SVGFigureImpl svgFigure = new SVGFigureImpl();
		return svgFigure;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public SVGProperty createSVGProperty() {
		SVGPropertyImpl svgProperty = new SVGPropertyImpl();
		return svgProperty;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Rectangle2D createRectangle2D() {
		Rectangle2DImpl rectangle2D = new Rectangle2DImpl();
		return rectangle2D;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ColorConstants createColorConstantsFromString(EDataType eDataType, String initialValue) {
		ColorConstants result = ColorConstants.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertColorConstantsToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FontStyle createFontStyleFromString(EDataType eDataType, String initialValue) {
		FontStyle result = FontStyle.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertFontStyleToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Direction createDirectionFromString(EDataType eDataType, String initialValue) {
		Direction result = Direction.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertDirectionToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LineKind createLineKindFromString(EDataType eDataType, String initialValue) {
		LineKind result = LineKind.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertLineKindToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Alignment createAlignmentFromString(EDataType eDataType, String initialValue) {
		Alignment result = Alignment.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertAlignmentToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public SVGPropertyType createSVGPropertyTypeFromString(EDataType eDataType, String initialValue) {
		SVGPropertyType result = SVGPropertyType.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertSVGPropertyTypeToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GMFGraphPackage getGMFGraphPackage() {
		return (GMFGraphPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@deprecated
	 * @@generated
	 */
	@@Deprecated
	public static GMFGraphPackage getPackage() {
		return GMFGraphPackage.eINSTANCE;
	}

} //GMFGraphFactoryImpl
@


1.19
log
@[234668] support svg figures in gmfgraph
@
text
@d115 1
d716 10
@


1.18
log
@[139126] respect implementation bundle of custom borders and layouts
@
text
@d113 2
d138 2
d163 2
d695 20
d815 20
@


1.17
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@d97 1
d105 1
d509 10
d589 10
@


1.16
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a16 54
import org.eclipse.gmf.gmfgraph.Alignment;
import org.eclipse.gmf.gmfgraph.AlignmentFacet;
import org.eclipse.gmf.gmfgraph.BasicFont;
import org.eclipse.gmf.gmfgraph.BorderLayout;
import org.eclipse.gmf.gmfgraph.BorderLayoutData;
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.ColorConstants;
import org.eclipse.gmf.gmfgraph.Compartment;
import org.eclipse.gmf.gmfgraph.CompoundBorder;
import org.eclipse.gmf.gmfgraph.Connection;
import org.eclipse.gmf.gmfgraph.ConstantColor;
import org.eclipse.gmf.gmfgraph.CustomAttribute;
import org.eclipse.gmf.gmfgraph.CustomBorder;
import org.eclipse.gmf.gmfgraph.CustomConnection;
import org.eclipse.gmf.gmfgraph.CustomDecoration;
import org.eclipse.gmf.gmfgraph.CustomFigure;
import org.eclipse.gmf.gmfgraph.CustomLayout;
import org.eclipse.gmf.gmfgraph.CustomLayoutData;
import org.eclipse.gmf.gmfgraph.DiagramLabel;
import org.eclipse.gmf.gmfgraph.Dimension;
import org.eclipse.gmf.gmfgraph.Direction;
import org.eclipse.gmf.gmfgraph.Ellipse;
import org.eclipse.gmf.gmfgraph.FigureAccessor;
import org.eclipse.gmf.gmfgraph.FigureGallery;
import org.eclipse.gmf.gmfgraph.FigureRef;
import org.eclipse.gmf.gmfgraph.FlowLayout;
import org.eclipse.gmf.gmfgraph.FontStyle;
import org.eclipse.gmf.gmfgraph.GMFGraphFactory;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.GeneralFacet;
import org.eclipse.gmf.gmfgraph.GradientFacet;
import org.eclipse.gmf.gmfgraph.GridLayout;
import org.eclipse.gmf.gmfgraph.GridLayoutData;
import org.eclipse.gmf.gmfgraph.Insets;
import org.eclipse.gmf.gmfgraph.Label;
import org.eclipse.gmf.gmfgraph.LabelOffsetFacet;
import org.eclipse.gmf.gmfgraph.LabeledContainer;
import org.eclipse.gmf.gmfgraph.LineBorder;
import org.eclipse.gmf.gmfgraph.LineKind;
import org.eclipse.gmf.gmfgraph.MarginBorder;
import org.eclipse.gmf.gmfgraph.Node;
import org.eclipse.gmf.gmfgraph.Point;
import org.eclipse.gmf.gmfgraph.Polygon;
import org.eclipse.gmf.gmfgraph.PolygonDecoration;
import org.eclipse.gmf.gmfgraph.Polyline;
import org.eclipse.gmf.gmfgraph.PolylineConnection;
import org.eclipse.gmf.gmfgraph.PolylineDecoration;
import org.eclipse.gmf.gmfgraph.RGBColor;
import org.eclipse.gmf.gmfgraph.Rectangle;
import org.eclipse.gmf.gmfgraph.RoundedRectangle;
import org.eclipse.gmf.gmfgraph.StackLayout;
import org.eclipse.gmf.gmfgraph.XYLayout;
import org.eclipse.gmf.gmfgraph.XYLayoutData;

d32 1
a32 1
			GMFGraphFactory theGMFGraphFactory = (GMFGraphFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/2005/GraphicalDefinition"); 
d72 2
d197 10
d287 10
@


1.15
log
@[155230] mgolubev - Provide means to specify default size for figure
@
text
@d112 1
d173 1
d196 1
d809 1
@


1.14
log
@[154687] mgolubev - Support scalable polygons
@
text
@d124 1
d316 10
@


1.13
log
@organized imports
@
text
@d15 2
d132 1
d395 10
@


1.12
log
@Setting elementIcon attribute default value to "true".
@
text
@a14 3

import org.eclipse.gmf.gmfgraph.*;

@


1.11
log
@organized imports
@
text
@d15 3
@


1.10
log
@#140887 Remove Child interface from GMFGraph.
Although the need to reference child figures persist, thus FigureHandle was introduced, to allow diagramElements to reference either *generateable* figures (Figure subclasses) or *just-use* figures (like CustomFigure and FigureAccessor).
Refactoring performed with #131365 "Mirror GMFGraph model when generating standalone figure plugin" in mind
@
text
@a14 2
import org.eclipse.gmf.gmfgraph.*;

@


1.9
log
@#136877 Provide inital offset from the host link for the link label
@
text
@d18 1
a22 1
import org.eclipse.gmf.gmfgraph.Child;
d35 1
d39 1
d42 1
d52 1
d67 3
a118 1
			case GMFGraphPackage.CHILD: return createChild();
d135 2
a155 1
			case GMFGraphPackage.CUSTOM_ATTRIBUTE: return createCustomAttribute();
a263 10
	public Child createChild() {
		ChildImpl child = new ChildImpl();
		return child;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d624 10
@


1.8
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@d117 1
d307 10
@


1.7
log
@[mgolubev] #127252 layout support
@
text
@d115 1
d286 10
@


1.6
log
@#127461 add label diagram element in gmfgraph model
@
text
@d147 4
d605 40
@


1.5
log
@[mgolubev] #127252 layout support
@
text
@d15 2
d113 1
d261 10
@


1.4
log
@move towards more draw2d-like model
@
text
@d15 1
d17 2
d26 1
d31 2
d43 2
d137 7
d164 2
d186 2
d518 70
d668 20
@


1.3
log
@removed unused imports
@
text
@d12 1
d14 2
d18 1
a18 1
import org.eclipse.gmf.gmfgraph.ColorStyle;
d20 1
d22 2
d27 1
d37 1
d40 1
d42 1
d50 1
a52 1
import org.eclipse.gmf.gmfgraph.SizeStyle;
d62 19
d119 3
a121 3
			case GMFGraphPackage.COLOR_STYLE: return createColorStyle();
			case GMFGraphPackage.SIZE_STYLE: return createSizeStyle();
			case GMFGraphPackage.FONT_STYLE: return createFontStyle();
d123 6
d141 8
a148 10
			case GMFGraphPackage.DIRECTION: {
				Direction result = Direction.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
				return result;
			}
			case GMFGraphPackage.LINE_KIND: {
				LineKind result = LineKind.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
				return result;
			}
d161 4
d166 1
a166 1
				return instanceValue == null ? null : instanceValue.toString();
d168 1
a168 1
				return instanceValue == null ? null : instanceValue.toString();
d399 3
a401 3
	public ColorStyle createColorStyle() {
		ColorStyleImpl colorStyle = new ColorStyleImpl();
		return colorStyle;
d409 3
a411 3
	public SizeStyle createSizeStyle() {
		SizeStyleImpl sizeStyle = new SizeStyleImpl();
		return sizeStyle;
d419 3
a421 3
	public FontStyle createFontStyle() {
		FontStyleImpl fontStyle = new FontStyleImpl();
		return fontStyle;
d439 140
@


1.2
log
@minor updates according to recent comments
single impl bundle per gallery
[+] Figure.getResolvedChildren to substitute figureRefs with actual figures they reference
@
text
@a12 2
import org.eclipse.gmf.gmfgraph.*;

@


1.1
log
@#114177 gmfgraph model to replace diadef model
@
text
@d13 2
@

