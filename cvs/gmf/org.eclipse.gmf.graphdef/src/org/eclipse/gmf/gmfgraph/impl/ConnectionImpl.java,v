head	1.5;
access;
symbols
	v20080813-1520:1.5
	v20080807-1333:1.5
	v20080806-1520:1.5
	v20080731-1520:1.5
	v20080722-1827:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080528-1052:1.5
	v20080521:1.5
	v20080425-1959:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080207-0207:1.5
	v20071214-1111:1.5
	v20071003-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070420-1000:1.4
	v20070330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070208-1800:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060904-1500:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-0800:1.2
	RC2_10:1.2
	I20060505-1400:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.1
	I20051223-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2007.05.28.13.33.36;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	3de9465ada274567;

1.4
date	2007.03.14.12.59.17;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	109645f7f19c4567;

1.3
date	2006.05.23.21.09.56;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.05.17.33.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.22.12.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.gmf.gmfgraph.Connection;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Connection</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @@generated
 */
public class ConnectionImpl extends DiagramElementImpl implements Connection {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ConnectionImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGraphPackage.eINSTANCE.getConnection();
	}

} //ConnectionImpl
@


1.4
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a10 1
import org.eclipse.gmf.gmfgraph.Figure;
a17 4
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.ConnectionImpl#getConnectionFigure <em>Connection Figure</em>}</li>
 * </ul>
a41 37
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public Figure getConnectionFigure() {
		return getFigure() instanceof Figure ? (Figure) getFigure() : null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGraphPackage.CONNECTION__CONNECTION_FIGURE:
				return getConnectionFigure();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.CONNECTION__CONNECTION_FIGURE:
				return getConnectionFigure() != null;
		}
		return super.eIsSet(featureID);
	}

@


1.3
log
@#140887 Remove Child interface from GMFGraph.
Although the need to reference child figures persist, thus FigureHandle was introduced, to allow diagramElements to reference either *generateable* figures (Figure subclasses) or *just-use* figures (like CustomFigure and FigureAccessor).
Refactoring performed with #131365 "Mirror GMFGraph model when generating standalone figure plugin" in mind
@
text
@d42 1
d61 1
d75 1
@


1.2
log
@move towards more draw2d-like model
@
text
@d11 1
d19 4
d46 35
@


1.1
log
@#114177 gmfgraph model to replace diadef model
@
text
@a8 3
import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;
a9 3
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.util.InternalEList;
a10 1
import org.eclipse.gmf.gmfgraph.Figure;
a40 93
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGraphPackage.CONNECTION__FACETS:
					return ((InternalEList)getFacets()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
		}
		return eBasicSetContainer(null, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGraphPackage.CONNECTION__NAME:
				return getName();
			case GMFGraphPackage.CONNECTION__FIGURE:
				if (resolve) return getFigure();
				return basicGetFigure();
			case GMFGraphPackage.CONNECTION__FACETS:
				return getFacets();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGraphPackage.CONNECTION__NAME:
				setName((String)newValue);
				return;
			case GMFGraphPackage.CONNECTION__FIGURE:
				setFigure((Figure)newValue);
				return;
			case GMFGraphPackage.CONNECTION__FACETS:
				getFacets().clear();
				getFacets().addAll((Collection)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGraphPackage.CONNECTION__NAME:
				setName(NAME_EDEFAULT);
				return;
			case GMFGraphPackage.CONNECTION__FIGURE:
				setFigure((Figure)null);
				return;
			case GMFGraphPackage.CONNECTION__FACETS:
				getFacets().clear();
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGraphPackage.CONNECTION__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case GMFGraphPackage.CONNECTION__FIGURE:
				return figure != null;
			case GMFGraphPackage.CONNECTION__FACETS:
				return facets != null && !facets.isEmpty();
		}
		return eDynamicIsSet(eFeature);
	}

@

