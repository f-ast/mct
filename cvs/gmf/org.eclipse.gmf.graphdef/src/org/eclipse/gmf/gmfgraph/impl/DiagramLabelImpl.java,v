head	1.6;
access;
symbols
	v20080813-1520:1.6
	v20080807-1333:1.6
	v20080806-1520:1.6
	v20080731-1520:1.6
	v20080722-1827:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080528-1052:1.6
	v20080521:1.6
	v20080425-1959:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20080207-0207:1.6
	v20071214-1111:1.6
	v20071003-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070420-1000:1.5
	v20070330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070208-1800:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	RC2_10:1.1
	I20060505-1400:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.05.28.13.33.36;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	3de9465ada274567;

1.5
date	2007.03.14.12.59.17;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	109645f7f19c4567;

1.4
date	2006.06.05.14.26.30;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.17.14.22.56;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.14.18.06.37;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.14.10.11.40;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.6
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.gmfgraph.ChildAccess;
import org.eclipse.gmf.gmfgraph.DiagramLabel;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Diagram Label</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.DiagramLabelImpl#isElementIcon <em>Element Icon</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.DiagramLabelImpl#getAccessor <em>Accessor</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.DiagramLabelImpl#getContainer <em>Container</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.DiagramLabelImpl#isExternal <em>External</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class DiagramLabelImpl extends NodeImpl implements DiagramLabel {
	/**
	 * The default value of the '{@@link #isElementIcon() <em>Element Icon</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isElementIcon()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean ELEMENT_ICON_EDEFAULT = true;

	/**
	 * The cached value of the '{@@link #isElementIcon() <em>Element Icon</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isElementIcon()
	 * @@generated
	 * @@ordered
	 */
	protected boolean elementIcon = ELEMENT_ICON_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getAccessor() <em>Accessor</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAccessor()
	 * @@generated
	 * @@ordered
	 */
	protected ChildAccess accessor;

	/**
	 * The cached value of the '{@@link #getContainer() <em>Container</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getContainer()
	 * @@generated
	 * @@ordered
	 */
	protected ChildAccess container;

	/**
	 * The default value of the '{@@link #isExternal() <em>External</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isExternal()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean EXTERNAL_EDEFAULT = false;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected DiagramLabelImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGraphPackage.eINSTANCE.getDiagramLabel();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isElementIcon() {
		return elementIcon;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setElementIcon(boolean newElementIcon) {
		boolean oldElementIcon = elementIcon;
		elementIcon = newElementIcon;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.DIAGRAM_LABEL__ELEMENT_ICON, oldElementIcon, elementIcon));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ChildAccess getAccessor() {
		if (accessor != null && accessor.eIsProxy()) {
			InternalEObject oldAccessor = (InternalEObject)accessor;
			accessor = (ChildAccess)eResolveProxy(oldAccessor);
			if (accessor != oldAccessor) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGraphPackage.DIAGRAM_LABEL__ACCESSOR, oldAccessor, accessor));
			}
		}
		return accessor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ChildAccess basicGetAccessor() {
		return accessor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setAccessor(ChildAccess newAccessor) {
		ChildAccess oldAccessor = accessor;
		accessor = newAccessor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.DIAGRAM_LABEL__ACCESSOR, oldAccessor, accessor));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ChildAccess getContainer() {
		if (container != null && container.eIsProxy()) {
			InternalEObject oldContainer = (InternalEObject)container;
			container = (ChildAccess)eResolveProxy(oldContainer);
			if (container != oldContainer) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGraphPackage.DIAGRAM_LABEL__CONTAINER, oldContainer, container));
			}
		}
		return container;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ChildAccess basicGetContainer() {
		return container;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setContainer(ChildAccess newContainer) {
		ChildAccess oldContainer = container;
		container = newContainer;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.DIAGRAM_LABEL__CONTAINER, oldContainer, container));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public boolean isExternal() {
		ChildAccess labelAccessor = getAccessor();
		return labelAccessor == null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGraphPackage.DIAGRAM_LABEL__ELEMENT_ICON:
				return isElementIcon() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGraphPackage.DIAGRAM_LABEL__ACCESSOR:
				if (resolve) return getAccessor();
				return basicGetAccessor();
			case GMFGraphPackage.DIAGRAM_LABEL__CONTAINER:
				if (resolve) return getContainer();
				return basicGetContainer();
			case GMFGraphPackage.DIAGRAM_LABEL__EXTERNAL:
				return isExternal() ? Boolean.TRUE : Boolean.FALSE;
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGraphPackage.DIAGRAM_LABEL__ELEMENT_ICON:
				setElementIcon(((Boolean)newValue).booleanValue());
				return;
			case GMFGraphPackage.DIAGRAM_LABEL__ACCESSOR:
				setAccessor((ChildAccess)newValue);
				return;
			case GMFGraphPackage.DIAGRAM_LABEL__CONTAINER:
				setContainer((ChildAccess)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.DIAGRAM_LABEL__ELEMENT_ICON:
				setElementIcon(ELEMENT_ICON_EDEFAULT);
				return;
			case GMFGraphPackage.DIAGRAM_LABEL__ACCESSOR:
				setAccessor((ChildAccess)null);
				return;
			case GMFGraphPackage.DIAGRAM_LABEL__CONTAINER:
				setContainer((ChildAccess)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.DIAGRAM_LABEL__ELEMENT_ICON:
				return elementIcon != ELEMENT_ICON_EDEFAULT;
			case GMFGraphPackage.DIAGRAM_LABEL__ACCESSOR:
				return accessor != null;
			case GMFGraphPackage.DIAGRAM_LABEL__CONTAINER:
				return container != null;
			case GMFGraphPackage.DIAGRAM_LABEL__EXTERNAL:
				return isExternal() != EXTERNAL_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (elementIcon: ");
		result.append(elementIcon);
		result.append(')');
		return result.toString();
	}

} //DiagramLabelImpl
@


1.5
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a9 1

d11 1
a11 1

d13 1
a13 1

d25 3
d55 30
d129 86
d220 8
d243 6
d264 6
d284 6
@


1.4
log
@Setting elementIcon attribute default value to "true".
@
text
@d66 1
d97 1
d111 1
d126 1
d141 1
d155 1
@


1.3
log
@#139127 Provide an option for labels to display node icon
@
text
@d40 1
a40 1
	protected static final boolean ELEMENT_ICON_EDEFAULT = false;
@


1.2
log
@overriding recent changes introduced (along with fixing #133836) in GMFMap model, as it's merely a 'shortcut', quite frequent though. Still, adding few new concepts just for the sake of single usecase (I do admit it's popular) seems excessive to me.
GMFMap kept the same as old (no new notions introduced), GMFGraph got generalization from DiagramLabel to DiagramNode to make it possible to use DiagramLabels for NodeMappings (thus, it's possible to detect such nodes in the DGMT)
Tests added to make sure we generate correct genModel for both cases.
@
text
@d9 2
d13 2
d23 4
d33 20
d70 90
@


1.1
log
@#127461 add label diagram element in gmfgraph model
@
text
@d23 1
a23 1
public class DiagramLabelImpl extends DiagramElementImpl implements DiagramLabel {
@

