head	1.4;
access;
symbols
	v20080813-1520:1.4
	v20080807-1333:1.4
	v20080806-1520:1.4
	v20080731-1520:1.4
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080528-1052:1.4
	v20080521:1.4
	v20080425-1959:1.4
	v20080322-0000:1.3
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20080207-0207:1.2
	v20071214-1111:1.2
	v20071003-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070605-1400:1.2
	v20070601-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2008.04.18.14.43.28;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	2e444808b38e4567;

1.3
date	2008.03.04.16.50.41;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	5e5b47cd7de04567;

1.2
date	2007.06.05.19.32.06;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	1af14665ba364567;

1.1
date	2007.05.28.13.33.36;	author atikhomirov;	state Exp;
branches;
next	;
commitid	3de9465ada274567;


desc
@@


1.4
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.gmf.gmfgraph.ChildAccess;
import org.eclipse.gmf.gmfgraph.Figure;
import org.eclipse.gmf.gmfgraph.FigureAccessor;
import org.eclipse.gmf.gmfgraph.FigureDescriptor;
import org.eclipse.gmf.gmfgraph.FigureRef;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.RealFigure;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Child Access</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.ChildAccessImpl#getOwner <em>Owner</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.ChildAccessImpl#getAccessor <em>Accessor</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.ChildAccessImpl#getFigure <em>Figure</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class ChildAccessImpl extends EObjectImpl implements ChildAccess {
	/**
	 * The default value of the '{@@link #getAccessor() <em>Accessor</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAccessor()
	 * @@generated
	 * @@ordered
	 */
	protected static final String ACCESSOR_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getAccessor() <em>Accessor</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAccessor()
	 * @@generated
	 * @@ordered
	 */
	protected String accessor = ACCESSOR_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getFigure() <em>Figure</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFigure()
	 * @@generated
	 * @@ordered
	 */
	protected Figure figure;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ChildAccessImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGraphPackage.eINSTANCE.getChildAccess();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FigureDescriptor getOwner() {
		if (eContainerFeatureID != GMFGraphPackage.CHILD_ACCESS__OWNER) return null;
		return (FigureDescriptor)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getAccessorGen() {
		return accessor;
	}

	public String getAccessor() {
		if (getAccessorGen() == null || getAccessorGen().trim().length() == 0) {
			final Figure fig = getFigure();
			if (fig == null) {
				return "getFigure" + CodeGenUtil.capName(CodeGenUtil.validJavaIdentifier(String.valueOf((Object) null)));
			}
			if (fig.eContainer() instanceof FigureAccessor) {
				return ((FigureAccessor) fig.eContainer()).getAccessor();
			}
			if (fig instanceof FigureRef) { // XXX bad, perhaps, ChildAccess
				return "getFigure" + CodeGenUtil.capName(CodeGenUtil.validJavaIdentifier(String.valueOf(((FigureRef) fig).getFigure().getName())));
			}
			assert fig instanceof RealFigure; // no more options here
			return "getFigure" + CodeGenUtil.capName(CodeGenUtil.validJavaIdentifier(String.valueOf(((RealFigure) fig).getName())));
		}
		return CodeGenUtil.validJavaIdentifier(getAccessorGen());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setAccessor(String newAccessor) {
		String oldAccessor = accessor;
		accessor = newAccessor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.CHILD_ACCESS__ACCESSOR, oldAccessor, accessor));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Figure getFigure() {
		if (figure != null && figure.eIsProxy()) {
			InternalEObject oldFigure = (InternalEObject)figure;
			figure = (Figure)eResolveProxy(oldFigure);
			if (figure != oldFigure) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGraphPackage.CHILD_ACCESS__FIGURE, oldFigure, figure));
			}
		}
		return figure;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Figure basicGetFigure() {
		return figure;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFigure(Figure newFigure) {
		Figure oldFigure = figure;
		figure = newFigure;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.CHILD_ACCESS__FIGURE, oldFigure, figure));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGraphPackage.CHILD_ACCESS__OWNER:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGraphPackage.CHILD_ACCESS__OWNER, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGraphPackage.CHILD_ACCESS__OWNER:
				return eBasicSetContainer(null, GMFGraphPackage.CHILD_ACCESS__OWNER, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGraphPackage.CHILD_ACCESS__OWNER:
				return eInternalContainer().eInverseRemove(this, GMFGraphPackage.FIGURE_DESCRIPTOR__ACCESSORS, FigureDescriptor.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGraphPackage.CHILD_ACCESS__OWNER:
				return getOwner();
			case GMFGraphPackage.CHILD_ACCESS__ACCESSOR:
				return getAccessor();
			case GMFGraphPackage.CHILD_ACCESS__FIGURE:
				if (resolve) return getFigure();
				return basicGetFigure();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGraphPackage.CHILD_ACCESS__ACCESSOR:
				setAccessor((String)newValue);
				return;
			case GMFGraphPackage.CHILD_ACCESS__FIGURE:
				setFigure((Figure)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.CHILD_ACCESS__ACCESSOR:
				setAccessor(ACCESSOR_EDEFAULT);
				return;
			case GMFGraphPackage.CHILD_ACCESS__FIGURE:
				setFigure((Figure)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.CHILD_ACCESS__OWNER:
				return getOwner() != null;
			case GMFGraphPackage.CHILD_ACCESS__ACCESSOR:
				return ACCESSOR_EDEFAULT == null ? accessor != null : !ACCESSOR_EDEFAULT.equals(accessor);
			case GMFGraphPackage.CHILD_ACCESS__FIGURE:
				return figure != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (accessor: ");
		result.append(accessor);
		result.append(')');
		return result.toString();
	}

} //ChildAccessImpl
@


1.3
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a15 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a103 31
	public NotificationChain basicSetOwner(FigureDescriptor newOwner, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newOwner, GMFGraphPackage.CHILD_ACCESS__OWNER, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setOwner(FigureDescriptor newOwner) {
		if (newOwner != eInternalContainer() || (eContainerFeatureID != GMFGraphPackage.CHILD_ACCESS__OWNER && newOwner != null)) {
			if (EcoreUtil.isAncestor(this, newOwner))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newOwner != null)
				msgs = ((InternalEObject)newOwner).eInverseAdd(this, GMFGraphPackage.FIGURE_DESCRIPTOR__ACCESSORS, FigureDescriptor.class, msgs);
			msgs = basicSetOwner(newOwner, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.CHILD_ACCESS__OWNER, newOwner, newOwner));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d187 1
a187 1
				return basicSetOwner((FigureDescriptor)otherEnd, msgs);
d201 1
a201 1
				return basicSetOwner(null, msgs);
a246 3
			case GMFGraphPackage.CHILD_ACCESS__OWNER:
				setOwner((FigureDescriptor)newValue);
				return;
a264 3
			case GMFGraphPackage.CHILD_ACCESS__OWNER:
				setOwner((FigureDescriptor)null);
				return;
@


1.2
log
@fix failing ViewmapProducersTest#testAbleToProcessFigureAccessor. ChildAccess should be the sole point to control naming for figure getters, hence NamingStrategy no needed any more. Plus, since ChildAccess always has a reference to figure, we may specify exact class names in ParentAssignedViewmap
@
text
@d16 1
d105 31
d219 1
a219 1
				return eBasicSetContainer(otherEnd, GMFGraphPackage.CHILD_ACCESS__OWNER, msgs);
d233 1
a233 1
				return eBasicSetContainer(null, GMFGraphPackage.CHILD_ACCESS__OWNER, msgs);
d279 3
d300 3
@


1.1
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@d9 1
d112 1
a112 1
				return String.valueOf((Object) null);
d118 1
a118 1
				return String.valueOf(((FigureRef) fig).getFigure().getName());
d121 1
a121 1
			return String.valueOf(((RealFigure) fig).getName());
d123 1
a123 1
		return getAccessorGen();
@

