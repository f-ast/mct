head	1.10;
access;
symbols
	v20080813-1520:1.10
	v20080807-1333:1.10
	v20080806-1520:1.10
	v20080731-1520:1.10
	v20080722-1827:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080528-1052:1.10
	v20080521:1.10
	v20080425-1959:1.10
	v20080322-0000:1.9
	v20080222-1200:1.9
	v20080215-1500:1.9
	v20080207-0207:1.9
	v20071214-1111:1.9
	v20071003-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070420-1000:1.8
	v20070330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070208-1800:1.7
	M4_20:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061013-1330:1.7
	v20060919-0800:1.6
	M1_20:1.7
	v20060904-1500:1.7
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060626-1420:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-0800:1.5
	RC2_10:1.5
	I20060505-1400:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.4
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.2
	I20051223-1100:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2008.04.18.14.43.28;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	2e444808b38e4567;

1.9
date	2007.05.28.13.33.36;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	3de9465ada274567;

1.8
date	2007.03.14.12.59.17;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	109645f7f19c4567;

1.7
date	2006.08.25.18.33.03;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.23.21.09.56;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.20.12.16.51;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.10.12.14.11;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.05.17.33.08;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.12.19.15.40;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.22.12.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.gmfgraph.ChildAccess;
import org.eclipse.gmf.gmfgraph.Direction;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.Node;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.NodeImpl#getResizeConstraint <em>Resize Constraint</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.NodeImpl#getAffixedParentSide <em>Affixed Parent Side</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.NodeImpl#getContentPane <em>Content Pane</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class NodeImpl extends AbstractNodeImpl implements Node {
	/**
	 * The default value of the '{@@link #getResizeConstraint() <em>Resize Constraint</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getResizeConstraint()
	 * @@generated
	 * @@ordered
	 */
	protected static final Direction RESIZE_CONSTRAINT_EDEFAULT = Direction.NSEW_LITERAL;

	/**
	 * The cached value of the '{@@link #getResizeConstraint() <em>Resize Constraint</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getResizeConstraint()
	 * @@generated
	 * @@ordered
	 */
	protected Direction resizeConstraint = RESIZE_CONSTRAINT_EDEFAULT;

	/**
	 * The default value of the '{@@link #getAffixedParentSide() <em>Affixed Parent Side</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAffixedParentSide()
	 * @@generated
	 * @@ordered
	 */
	protected static final Direction AFFIXED_PARENT_SIDE_EDEFAULT = Direction.NONE_LITERAL;

	/**
	 * The cached value of the '{@@link #getAffixedParentSide() <em>Affixed Parent Side</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAffixedParentSide()
	 * @@generated
	 * @@ordered
	 */
	protected Direction affixedParentSide = AFFIXED_PARENT_SIDE_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getContentPane() <em>Content Pane</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getContentPane()
	 * @@generated
	 * @@ordered
	 */
	protected ChildAccess contentPane;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected NodeImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGraphPackage.eINSTANCE.getNode();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Direction getResizeConstraint() {
		return resizeConstraint;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setResizeConstraint(Direction newResizeConstraint) {
		Direction oldResizeConstraint = resizeConstraint;
		resizeConstraint = newResizeConstraint == null ? RESIZE_CONSTRAINT_EDEFAULT : newResizeConstraint;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.NODE__RESIZE_CONSTRAINT, oldResizeConstraint, resizeConstraint));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Direction getAffixedParentSide() {
		return affixedParentSide;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setAffixedParentSide(Direction newAffixedParentSide) {
		Direction oldAffixedParentSide = affixedParentSide;
		affixedParentSide = newAffixedParentSide == null ? AFFIXED_PARENT_SIDE_EDEFAULT : newAffixedParentSide;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.NODE__AFFIXED_PARENT_SIDE, oldAffixedParentSide, affixedParentSide));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ChildAccess getContentPane() {
		if (contentPane != null && contentPane.eIsProxy()) {
			InternalEObject oldContentPane = (InternalEObject)contentPane;
			contentPane = (ChildAccess)eResolveProxy(oldContentPane);
			if (contentPane != oldContentPane) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGraphPackage.NODE__CONTENT_PANE, oldContentPane, contentPane));
			}
		}
		return contentPane;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ChildAccess basicGetContentPane() {
		return contentPane;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setContentPane(ChildAccess newContentPane) {
		ChildAccess oldContentPane = contentPane;
		contentPane = newContentPane;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.NODE__CONTENT_PANE, oldContentPane, contentPane));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGraphPackage.NODE__RESIZE_CONSTRAINT:
				return getResizeConstraint();
			case GMFGraphPackage.NODE__AFFIXED_PARENT_SIDE:
				return getAffixedParentSide();
			case GMFGraphPackage.NODE__CONTENT_PANE:
				if (resolve) return getContentPane();
				return basicGetContentPane();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGraphPackage.NODE__RESIZE_CONSTRAINT:
				setResizeConstraint((Direction)newValue);
				return;
			case GMFGraphPackage.NODE__AFFIXED_PARENT_SIDE:
				setAffixedParentSide((Direction)newValue);
				return;
			case GMFGraphPackage.NODE__CONTENT_PANE:
				setContentPane((ChildAccess)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.NODE__RESIZE_CONSTRAINT:
				setResizeConstraint(RESIZE_CONSTRAINT_EDEFAULT);
				return;
			case GMFGraphPackage.NODE__AFFIXED_PARENT_SIDE:
				setAffixedParentSide(AFFIXED_PARENT_SIDE_EDEFAULT);
				return;
			case GMFGraphPackage.NODE__CONTENT_PANE:
				setContentPane((ChildAccess)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.NODE__RESIZE_CONSTRAINT:
				return resizeConstraint != RESIZE_CONSTRAINT_EDEFAULT;
			case GMFGraphPackage.NODE__AFFIXED_PARENT_SIDE:
				return affixedParentSide != AFFIXED_PARENT_SIDE_EDEFAULT;
			case GMFGraphPackage.NODE__CONTENT_PANE:
				return contentPane != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (resizeConstraint: ");
		result.append(resizeConstraint);
		result.append(", affixedParentSide: ");
		result.append(affixedParentSide);
		result.append(')');
		return result.toString();
	}

} //NodeImpl
@


1.9
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@a206 1
	@@SuppressWarnings("unchecked")
@


1.8
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d11 1
d13 1
a14 1
import org.eclipse.gmf.gmfgraph.Figure;
a24 1
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.NodeImpl#getNodeFigure <em>Node Figure</em>}</li>
d27 1
d33 1
a33 1
public class NodeImpl extends DiagramElementImpl implements Node {
d75 10
a105 9
	 * @@generated NOT
	 */
	public Figure getNodeFigure() {
		return getFigure() instanceof Figure ? (Figure) getFigure() : null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d150 38
a190 2
			case GMFGraphPackage.NODE__NODE_FIGURE:
				return getNodeFigure();
d195 3
d207 1
d217 3
d238 3
a252 2
			case GMFGraphPackage.NODE__NODE_FIGURE:
				return getNodeFigure() != null;
d257 2
@


1.7
log
@[124826] mgolubev - Support nodes with border items
@
text
@d87 1
d148 1
d166 1
d184 1
d202 1
d220 1
@


1.6
log
@#140887 Remove Child interface from GMFGraph.
Although the need to reference child figures persist, thus FigureHandle was introduced, to allow diagramElements to reference either *generateable* figures (Figure subclasses) or *just-use* figures (like CustomFigure and FigureAccessor).
Refactoring performed with #131365 "Mirror GMFGraph model when generating standalone figure plugin" in mind
@
text
@d26 1
d54 20
d126 21
d153 2
d169 3
d186 3
d204 2
d221 2
@


1.5
log
@#135017 use geographical constants from PositionConstants
@
text
@d13 1
d24 1
d73 9
d107 2
d150 2
@


1.4
log
@[mgolubev] #135017 Respect resize constraints defined in .gmfgraph
@
text
@d38 1
a38 1
	protected static final Direction RESIZE_CONSTRAINT_EDEFAULT = Direction.ALL_LITERAL;
@


1.3
log
@move towards more draw2d-like model
@
text
@d38 1
a38 1
	protected static final Direction RESIZE_CONSTRAINT_EDEFAULT = Direction.NONE_LITERAL;
@


1.2
log
@minor updates according to recent comments
single impl bundle per gallery
[+] Figure.getResolvedChildren to substitute figureRefs with actual figures they reference
@
text
@a8 2
import java.util.Collection;

a9 1
import org.eclipse.emf.common.notify.NotificationChain;
a10 2
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.InternalEObject;
a11 1
import org.eclipse.emf.ecore.util.InternalEList;
a12 1
import org.eclipse.gmf.gmfgraph.Figure;
d94 2
a95 26
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGraphPackage.NODE__FACETS:
					return ((InternalEList)getFacets()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
		}
		return eBasicSetContainer(null, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGraphPackage.NODE__NAME:
				return getName();
			case GMFGraphPackage.NODE__FIGURE:
				if (resolve) return getFigure();
				return basicGetFigure();
			case GMFGraphPackage.NODE__FACETS:
				return getFacets();
d99 1
a99 1
		return eDynamicGet(eFeature, resolve);
d107 2
a108 12
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGraphPackage.NODE__NAME:
				setName((String)newValue);
				return;
			case GMFGraphPackage.NODE__FIGURE:
				setFigure((Figure)newValue);
				return;
			case GMFGraphPackage.NODE__FACETS:
				getFacets().clear();
				getFacets().addAll((Collection)newValue);
				return;
d113 1
a113 1
		eDynamicSet(eFeature, newValue);
d121 2
a122 11
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGraphPackage.NODE__NAME:
				setName(NAME_EDEFAULT);
				return;
			case GMFGraphPackage.NODE__FIGURE:
				setFigure((Figure)null);
				return;
			case GMFGraphPackage.NODE__FACETS:
				getFacets().clear();
				return;
d127 1
a127 1
		eDynamicUnset(eFeature);
d135 2
a136 8
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGraphPackage.NODE__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case GMFGraphPackage.NODE__FIGURE:
				return figure != null;
			case GMFGraphPackage.NODE__FACETS:
				return facets != null && !facets.isEmpty();
d140 1
a140 1
		return eDynamicIsSet(eFeature);
@


1.1
log
@#114177 gmfgraph model to replace diadef model
@
text
@d45 1
a45 1
	protected static final Direction RESIZE_CONSTRAINT_EDEFAULT = Direction.NORTH_LITERAL;
@

