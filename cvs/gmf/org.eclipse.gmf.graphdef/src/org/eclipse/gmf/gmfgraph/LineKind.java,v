head	1.3;
access;
symbols
	v20080813-1520:1.3
	v20080807-1333:1.3
	v20080806-1520:1.3
	v20080731-1520:1.3
	v20080722-1827:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080528-1052:1.3
	v20080521:1.3
	v20080425-1959:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080207-0207:1.3
	v20071214-1111:1.3
	v20071003-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070420-1000:1.3
	v20070330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070208-1800:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-0800:1.2
	RC2_10:1.2
	I20060505-1400:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.1
	I20051223-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.03.14.12.59.18;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	109645f7f19c4567;

1.2
date	2006.01.05.17.33.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.22.12.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Line Kind</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * <!-- begin-model-doc -->
 * org.eclipse.draw2d.Graphics.LINE_* (== org.eclipse.swt.SWT.LINE_*. Values are same as SWT constants
 * <!-- end-model-doc -->
 * @@see org.eclipse.gmf.gmfgraph.GMFGraphPackage#getLineKind()
 * @@model
 * @@generated
 */
public enum LineKind implements Enumerator
{
	/**
	 * The '<em><b>LINE SOLID</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #LINE_SOLID
	 * @@generated
	 * @@ordered
	 */
	LINE_SOLID_LITERAL(1, "LINE_SOLID", "LINE_SOLID"),
	/**
	 * The '<em><b>LINE DASH</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #LINE_DASH
	 * @@generated
	 * @@ordered
	 */
	LINE_DASH_LITERAL(2, "LINE_DASH", "LINE_DASH"),
	/**
	 * The '<em><b>LINE DOT</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #LINE_DOT
	 * @@generated
	 * @@ordered
	 */
	LINE_DOT_LITERAL(3, "LINE_DOT", "LINE_DOT"),
	/**
	 * The '<em><b>LINE DASHDOT</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #LINE_DASHDOT
	 * @@generated
	 * @@ordered
	 */
	LINE_DASHDOT_LITERAL(4, "LINE_DASHDOT", "LINE_DASHDOT"),
	/**
	 * The '<em><b>LINE DASHDOTDOT</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #LINE_DASHDOTDOT
	 * @@generated
	 * @@ordered
	 */
	LINE_DASHDOTDOT_LITERAL(5, "LINE_DASHDOTDOT", "LINE_DASHDOTDOT"),
	/**
	 * The '<em><b>LINE CUSTOM</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #LINE_CUSTOM
	 * @@generated
	 * @@ordered
	 */
	LINE_CUSTOM_LITERAL(6, "LINE_CUSTOM", "LINE_CUSTOM");
	/**
	 * The '<em><b>LINE SOLID</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>LINE SOLID</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #LINE_SOLID_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int LINE_SOLID = 1;

	/**
	 * The '<em><b>LINE DASH</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>LINE DASH</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #LINE_DASH_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int LINE_DASH = 2;

	/**
	 * The '<em><b>LINE DOT</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>LINE DOT</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #LINE_DOT_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int LINE_DOT = 3;

	/**
	 * The '<em><b>LINE DASHDOT</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>LINE DASHDOT</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #LINE_DASHDOT_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int LINE_DASHDOT = 4;

	/**
	 * The '<em><b>LINE DASHDOTDOT</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>LINE DASHDOTDOT</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #LINE_DASHDOTDOT_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int LINE_DASHDOTDOT = 5;

	/**
	 * The '<em><b>LINE CUSTOM</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>LINE CUSTOM</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #LINE_CUSTOM_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int LINE_CUSTOM = 6;

	/**
	 * An array of all the '<em><b>Line Kind</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private static final LineKind[] VALUES_ARRAY =
		new LineKind[] {
			LINE_SOLID_LITERAL,
			LINE_DASH_LITERAL,
			LINE_DOT_LITERAL,
			LINE_DASHDOT_LITERAL,
			LINE_DASHDOTDOT_LITERAL,
			LINE_CUSTOM_LITERAL,
		};

	/**
	 * A public read-only list of all the '<em><b>Line Kind</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static final List<LineKind> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

	/**
	 * Returns the '<em><b>Line Kind</b></em>' literal with the specified literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static LineKind get(String literal) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			LineKind result = VALUES_ARRAY[i];
			if (result.toString().equals(literal)) {
				return result;
			}
		}
		return null;
	}

	/**
	 * Returns the '<em><b>Line Kind</b></em>' literal with the specified name.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static LineKind getByName(String name) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			LineKind result = VALUES_ARRAY[i];
			if (result.getName().equals(name)) {
				return result;
			}
		}
		return null;
	}

	/**
	 * Returns the '<em><b>Line Kind</b></em>' literal with the specified integer value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static LineKind get(int value) {
		switch (value) {
			case LINE_SOLID: return LINE_SOLID_LITERAL;
			case LINE_DASH: return LINE_DASH_LITERAL;
			case LINE_DOT: return LINE_DOT_LITERAL;
			case LINE_DASHDOT: return LINE_DASHDOT_LITERAL;
			case LINE_DASHDOTDOT: return LINE_DASHDOTDOT_LITERAL;
			case LINE_CUSTOM: return LINE_CUSTOM_LITERAL;
		}
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private final int value;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private final String name;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private final String literal;

	/**
	 * Only this class can construct instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private LineKind(int value, String name, String literal) {
		this.value = value;
		this.name = name;
		this.literal = literal;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getValue() {
	  return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getName() {
	  return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getLiteral() {
	  return literal;
	}

	/**
	 * Returns the literal value of the enumerator, which is its string representation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		return literal;
	}
}
@


1.2
log
@move towards more draw2d-like model
@
text
@d13 1
a13 1
import org.eclipse.emf.common.util.AbstractEnumerator;
d27 56
a82 1
public final class LineKind extends AbstractEnumerator {
a173 60
	 * The '<em><b>LINE SOLID</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #LINE_SOLID
	 * @@generated
	 * @@ordered
	 */
	public static final LineKind LINE_SOLID_LITERAL = new LineKind(LINE_SOLID, "LINE_SOLID", "LINE_SOLID");

	/**
	 * The '<em><b>LINE DASH</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #LINE_DASH
	 * @@generated
	 * @@ordered
	 */
	public static final LineKind LINE_DASH_LITERAL = new LineKind(LINE_DASH, "LINE_DASH", "LINE_DASH");

	/**
	 * The '<em><b>LINE DOT</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #LINE_DOT
	 * @@generated
	 * @@ordered
	 */
	public static final LineKind LINE_DOT_LITERAL = new LineKind(LINE_DOT, "LINE_DOT", "LINE_DOT");

	/**
	 * The '<em><b>LINE DASHDOT</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #LINE_DASHDOT
	 * @@generated
	 * @@ordered
	 */
	public static final LineKind LINE_DASHDOT_LITERAL = new LineKind(LINE_DASHDOT, "LINE_DASHDOT", "LINE_DASHDOT");

	/**
	 * The '<em><b>LINE DASHDOTDOT</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #LINE_DASHDOTDOT
	 * @@generated
	 * @@ordered
	 */
	public static final LineKind LINE_DASHDOTDOT_LITERAL = new LineKind(LINE_DASHDOTDOT, "LINE_DASHDOTDOT", "LINE_DASHDOTDOT");

	/**
	 * The '<em><b>LINE CUSTOM</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #LINE_CUSTOM
	 * @@generated
	 * @@ordered
	 */
	public static final LineKind LINE_CUSTOM_LITERAL = new LineKind(LINE_CUSTOM, "LINE_CUSTOM", "LINE_CUSTOM");

	/**
d195 1
a195 1
	public static final List VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));
d244 1
a244 1
		return null;	
d248 21
d275 3
a277 1
		super(value, name, literal);
d280 38
a317 1
} //LineKind
@


1.1
log
@#114177 gmfgraph model to replace diadef model
@
text
@d126 1
a126 1
	public static final LineKind LINE_SOLID_LITERAL = new LineKind(LINE_SOLID, "LINE_SOLID");
d136 1
a136 1
	public static final LineKind LINE_DASH_LITERAL = new LineKind(LINE_DASH, "LINE_DASH");
d146 1
a146 1
	public static final LineKind LINE_DOT_LITERAL = new LineKind(LINE_DOT, "LINE_DOT");
d156 1
a156 1
	public static final LineKind LINE_DASHDOT_LITERAL = new LineKind(LINE_DASHDOT, "LINE_DASHDOT");
d166 1
a166 1
	public static final LineKind LINE_DASHDOTDOT_LITERAL = new LineKind(LINE_DASHDOTDOT, "LINE_DASHDOTDOT");
d176 1
a176 1
	public static final LineKind LINE_CUSTOM_LITERAL = new LineKind(LINE_CUSTOM, "LINE_CUSTOM");
d203 16
d224 1
a224 1
	public static LineKind get(String name) {
d227 1
a227 1
			if (result.toString().equals(name)) {
d235 1
a235 1
	 * Returns the '<em><b>Line Kind</b></em>' literal with the specified value.
d258 2
a259 2
	private LineKind(int value, String name) {
		super(value, name);
@

