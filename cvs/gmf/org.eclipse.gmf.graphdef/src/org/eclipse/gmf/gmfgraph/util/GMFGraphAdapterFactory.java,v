head	1.20;
access;
symbols
	v20080813-1520:1.20
	v20080807-1333:1.20
	v20080806-1520:1.20
	v20080731-1520:1.19
	v20080722-1827:1.18
	v20080716-1642:1.18
	R2_1_maintenance:1.18.0.2
	Root_R2_1_maintenance:1.18
	R2_1_0:1.18
	v20080528-1052:1.18
	v20080521:1.17
	v20080425-1959:1.17
	v20080322-0000:1.17
	v20080222-1200:1.16
	v20080215-1500:1.16
	v20080207-0207:1.16
	v20071214-1111:1.16
	v20071003-0000:1.16
	v20070809-0000:1.16
	R2_0_maintenance:1.16.0.2
	R2_0:1.16
	R4_20:1.16
	v20070621-0000:1.16
	RC3_20:1.16
	v20070605-1400:1.16
	v20070601-1400:1.16
	v20070420-1000:1.15
	v20070330-1300:1.15
	v20070322-1100:1.15
	v20060316-0600:1.15
	v20070208-1800:1.14
	M4_20:1.14
	v20061214-0000:1.14
	M3_20:1.14
	v20061013-1330:1.14
	v20060919-0800:1.12
	M1_20:1.14
	v20060904-1500:1.14
	v20060713-1700:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20060627-1200:1.12
	v20060626-1420:1.12
	v20060616-1200:1.11
	v20060609-1400:1.11
	v20060531-1730:1.10
	v20060530-1930:1.10
	v20060526-1200:1.10
	v20060519-0800:1.8
	RC2_10:1.8
	I20060505-1400:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.7
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.7
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.7
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.7
	I20060216-1945:1.6
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.1
	I20051223-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.20
date	2008.08.05.12.42.37;	author dstadnik;	state Exp;
branches;
next	1.19;
commitid	18be48984a924567;

1.19
date	2008.07.31.12.17.13;	author dstadnik;	state Exp;
branches;
next	1.18;
commitid	4bcc4891ad0b4567;

1.18
date	2008.05.21.16.42.10;	author atikhomirov;	state Exp;
branches;
next	1.17;
commitid	6f3c483450df4567;

1.17
date	2008.03.03.17.45.12;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	161547cc39274567;

1.16
date	2007.05.28.13.33.36;	author atikhomirov;	state Exp;
branches;
next	1.15;
commitid	3de9465ada274567;

1.15
date	2007.03.14.12.59.18;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	109645f7f19c4567;

1.14
date	2006.09.01.17.49.34;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.08.24.15.38.47;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.26.13.42.59;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.05.14.26.30;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.24.14.50.56;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.23.21.09.56;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.20.13.59.38;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.22.22.01.35;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.15.14.44.43;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.14.10.11.40;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.13.17.36.31;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.04.23.36.21;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.05.17.33.08;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.22.12.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.20
log
@[243050] support AOI in gmfgraph
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.gmfgraph.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @@see org.eclipse.gmf.gmfgraph.GMFGraphPackage
 * @@generated
 */
public class GMFGraphAdapterFactory extends AdapterFactoryImpl {
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected static GMFGraphPackage modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GMFGraphAdapterFactory() {
		if (modelPackage == null) {
			modelPackage = GMFGraphPackage.eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @@return whether this factory is applicable for the type of the object.
	 * @@generated
	 */
	@@Override
	public boolean isFactoryForType(Object object) {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GMFGraphSwitch<Adapter> modelSwitch =
		new GMFGraphSwitch<Adapter>() {
			@@Override
			public Adapter caseCanvas(Canvas object) {
				return createCanvasAdapter();
			}
			@@Override
			public Adapter caseFigureGallery(FigureGallery object) {
				return createFigureGalleryAdapter();
			}
			@@Override
			public Adapter caseIdentity(Identity object) {
				return createIdentityAdapter();
			}
			@@Override
			public Adapter caseDiagramElement(DiagramElement object) {
				return createDiagramElementAdapter();
			}
			@@Override
			public Adapter caseAbstractNode(AbstractNode object) {
				return createAbstractNodeAdapter();
			}
			@@Override
			public Adapter caseNode(Node object) {
				return createNodeAdapter();
			}
			@@Override
			public Adapter caseConnection(Connection object) {
				return createConnectionAdapter();
			}
			@@Override
			public Adapter caseCompartment(Compartment object) {
				return createCompartmentAdapter();
			}
			@@Override
			public Adapter caseDiagramLabel(DiagramLabel object) {
				return createDiagramLabelAdapter();
			}
			@@Override
			public Adapter caseVisualFacet(VisualFacet object) {
				return createVisualFacetAdapter();
			}
			@@Override
			public Adapter caseGeneralFacet(GeneralFacet object) {
				return createGeneralFacetAdapter();
			}
			@@Override
			public Adapter caseAlignmentFacet(AlignmentFacet object) {
				return createAlignmentFacetAdapter();
			}
			@@Override
			public Adapter caseGradientFacet(GradientFacet object) {
				return createGradientFacetAdapter();
			}
			@@Override
			public Adapter caseLabelOffsetFacet(LabelOffsetFacet object) {
				return createLabelOffsetFacetAdapter();
			}
			@@Override
			public Adapter caseDefaultSizeFacet(DefaultSizeFacet object) {
				return createDefaultSizeFacetAdapter();
			}
			@@Override
			public Adapter caseFigure(Figure object) {
				return createFigureAdapter();
			}
			@@Override
			public Adapter caseAbstractFigure(AbstractFigure object) {
				return createAbstractFigureAdapter();
			}
			@@Override
			public Adapter caseFigureDescriptor(FigureDescriptor object) {
				return createFigureDescriptorAdapter();
			}
			@@Override
			public Adapter caseChildAccess(ChildAccess object) {
				return createChildAccessAdapter();
			}
			@@Override
			public Adapter caseRealFigure(RealFigure object) {
				return createRealFigureAdapter();
			}
			@@Override
			public Adapter caseFigureRef(FigureRef object) {
				return createFigureRefAdapter();
			}
			@@Override
			public Adapter caseConnectionFigure(ConnectionFigure object) {
				return createConnectionFigureAdapter();
			}
			@@Override
			public Adapter caseDecorationFigure(DecorationFigure object) {
				return createDecorationFigureAdapter();
			}
			@@Override
			public Adapter caseShape(Shape object) {
				return createShapeAdapter();
			}
			@@Override
			public Adapter caseLabel(Label object) {
				return createLabelAdapter();
			}
			@@Override
			public Adapter caseLabeledContainer(LabeledContainer object) {
				return createLabeledContainerAdapter();
			}
			@@Override
			public Adapter caseRectangle(Rectangle object) {
				return createRectangleAdapter();
			}
			@@Override
			public Adapter caseRoundedRectangle(RoundedRectangle object) {
				return createRoundedRectangleAdapter();
			}
			@@Override
			public Adapter caseEllipse(Ellipse object) {
				return createEllipseAdapter();
			}
			@@Override
			public Adapter casePolyline(Polyline object) {
				return createPolylineAdapter();
			}
			@@Override
			public Adapter casePolygon(Polygon object) {
				return createPolygonAdapter();
			}
			@@Override
			public Adapter caseScalablePolygon(ScalablePolygon object) {
				return createScalablePolygonAdapter();
			}
			@@Override
			public Adapter casePolylineConnection(PolylineConnection object) {
				return createPolylineConnectionAdapter();
			}
			@@Override
			public Adapter casePolylineDecoration(PolylineDecoration object) {
				return createPolylineDecorationAdapter();
			}
			@@Override
			public Adapter casePolygonDecoration(PolygonDecoration object) {
				return createPolygonDecorationAdapter();
			}
			@@Override
			public Adapter caseCustomClass(CustomClass object) {
				return createCustomClassAdapter();
			}
			@@Override
			public Adapter caseCustomAttribute(CustomAttribute object) {
				return createCustomAttributeAdapter();
			}
			@@Override
			public Adapter caseFigureAccessor(FigureAccessor object) {
				return createFigureAccessorAdapter();
			}
			@@Override
			public Adapter caseCustomFigure(CustomFigure object) {
				return createCustomFigureAdapter();
			}
			@@Override
			public Adapter caseCustomDecoration(CustomDecoration object) {
				return createCustomDecorationAdapter();
			}
			@@Override
			public Adapter caseCustomConnection(CustomConnection object) {
				return createCustomConnectionAdapter();
			}
			@@Override
			public Adapter caseColor(Color object) {
				return createColorAdapter();
			}
			@@Override
			public Adapter caseRGBColor(RGBColor object) {
				return createRGBColorAdapter();
			}
			@@Override
			public Adapter caseConstantColor(ConstantColor object) {
				return createConstantColorAdapter();
			}
			@@Override
			public Adapter caseFont(Font object) {
				return createFontAdapter();
			}
			@@Override
			public Adapter caseBasicFont(BasicFont object) {
				return createBasicFontAdapter();
			}
			@@Override
			public Adapter casePoint(Point object) {
				return createPointAdapter();
			}
			@@Override
			public Adapter caseDimension(Dimension object) {
				return createDimensionAdapter();
			}
			@@Override
			public Adapter caseInsets(Insets object) {
				return createInsetsAdapter();
			}
			@@Override
			public Adapter caseBorder(Border object) {
				return createBorderAdapter();
			}
			@@Override
			public Adapter caseBorderRef(BorderRef object) {
				return createBorderRefAdapter();
			}
			@@Override
			public Adapter caseLineBorder(LineBorder object) {
				return createLineBorderAdapter();
			}
			@@Override
			public Adapter caseMarginBorder(MarginBorder object) {
				return createMarginBorderAdapter();
			}
			@@Override
			public Adapter caseCompoundBorder(CompoundBorder object) {
				return createCompoundBorderAdapter();
			}
			@@Override
			public Adapter caseCustomBorder(CustomBorder object) {
				return createCustomBorderAdapter();
			}
			@@Override
			public Adapter caseLayoutData(LayoutData object) {
				return createLayoutDataAdapter();
			}
			@@Override
			public Adapter caseCustomLayoutData(CustomLayoutData object) {
				return createCustomLayoutDataAdapter();
			}
			@@Override
			public Adapter caseGridLayoutData(GridLayoutData object) {
				return createGridLayoutDataAdapter();
			}
			@@Override
			public Adapter caseBorderLayoutData(BorderLayoutData object) {
				return createBorderLayoutDataAdapter();
			}
			@@Override
			public Adapter caseLayoutable(Layoutable object) {
				return createLayoutableAdapter();
			}
			@@Override
			public Adapter caseLayout(Layout object) {
				return createLayoutAdapter();
			}
			@@Override
			public Adapter caseLayoutRef(LayoutRef object) {
				return createLayoutRefAdapter();
			}
			@@Override
			public Adapter caseCustomLayout(CustomLayout object) {
				return createCustomLayoutAdapter();
			}
			@@Override
			public Adapter caseGridLayout(GridLayout object) {
				return createGridLayoutAdapter();
			}
			@@Override
			public Adapter caseBorderLayout(BorderLayout object) {
				return createBorderLayoutAdapter();
			}
			@@Override
			public Adapter caseFlowLayout(FlowLayout object) {
				return createFlowLayoutAdapter();
			}
			@@Override
			public Adapter caseXYLayout(XYLayout object) {
				return createXYLayoutAdapter();
			}
			@@Override
			public Adapter caseXYLayoutData(XYLayoutData object) {
				return createXYLayoutDataAdapter();
			}
			@@Override
			public Adapter caseStackLayout(StackLayout object) {
				return createStackLayoutAdapter();
			}
			@@Override
			public Adapter caseSVGFigure(SVGFigure object) {
				return createSVGFigureAdapter();
			}
			@@Override
			public Adapter caseSVGProperty(SVGProperty object) {
				return createSVGPropertyAdapter();
			}
			@@Override
			public Adapter caseRectangle2D(Rectangle2D object) {
				return createRectangle2DAdapter();
			}
			@@Override
			public Adapter defaultCase(EObject object) {
				return createEObjectAdapter();
			}
		};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param target the object to adapt.
	 * @@return the adapter for the <code>target</code>.
	 * @@generated
	 */
	@@Override
	public Adapter createAdapter(Notifier target) {
		return modelSwitch.doSwitch((EObject)target);
	}


	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Canvas <em>Canvas</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Canvas
	 * @@generated
	 */
	public Adapter createCanvasAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.FigureGallery <em>Figure Gallery</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.FigureGallery
	 * @@generated
	 */
	public Adapter createFigureGalleryAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Identity <em>Identity</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Identity
	 * @@generated
	 */
	public Adapter createIdentityAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.DiagramElement <em>Diagram Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.DiagramElement
	 * @@generated
	 */
	public Adapter createDiagramElementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.AbstractNode <em>Abstract Node</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.AbstractNode
	 * @@generated
	 */
	public Adapter createAbstractNodeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Node <em>Node</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Node
	 * @@generated
	 */
	public Adapter createNodeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.ChildAccess <em>Child Access</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.ChildAccess
	 * @@generated
	 */
	public Adapter createChildAccessAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.RealFigure <em>Real Figure</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.RealFigure
	 * @@generated
	 */
	public Adapter createRealFigureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Connection <em>Connection</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Connection
	 * @@generated
	 */
	public Adapter createConnectionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Compartment <em>Compartment</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Compartment
	 * @@generated
	 */
	public Adapter createCompartmentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.DiagramLabel <em>Diagram Label</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.DiagramLabel
	 * @@generated
	 */
	public Adapter createDiagramLabelAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.VisualFacet <em>Visual Facet</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.VisualFacet
	 * @@generated
	 */
	public Adapter createVisualFacetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.GeneralFacet <em>General Facet</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.GeneralFacet
	 * @@generated
	 */
	public Adapter createGeneralFacetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.AlignmentFacet <em>Alignment Facet</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.AlignmentFacet
	 * @@generated
	 */
	public Adapter createAlignmentFacetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.GradientFacet <em>Gradient Facet</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.GradientFacet
	 * @@generated
	 */
	public Adapter createGradientFacetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.LabelOffsetFacet <em>Label Offset Facet</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.LabelOffsetFacet
	 * @@generated
	 */
	public Adapter createLabelOffsetFacetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.DefaultSizeFacet <em>Default Size Facet</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.DefaultSizeFacet
	 * @@generated
	 */
	public Adapter createDefaultSizeFacetAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Figure <em>Figure</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Figure
	 * @@generated
	 */
	public Adapter createFigureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.FigureDescriptor <em>Figure Descriptor</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.FigureDescriptor
	 * @@generated
	 */
	public Adapter createFigureDescriptorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.AbstractFigure <em>Abstract Figure</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.AbstractFigure
	 * @@generated
	 */
	public Adapter createAbstractFigureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.FigureRef <em>Figure Ref</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.FigureRef
	 * @@generated
	 */
	public Adapter createFigureRefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.ConnectionFigure <em>Connection Figure</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.ConnectionFigure
	 * @@generated
	 */
	public Adapter createConnectionFigureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.DecorationFigure <em>Decoration Figure</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.DecorationFigure
	 * @@generated
	 */
	public Adapter createDecorationFigureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Shape <em>Shape</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Shape
	 * @@generated
	 */
	public Adapter createShapeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Label <em>Label</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Label
	 * @@generated
	 */
	public Adapter createLabelAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.LabeledContainer <em>Labeled Container</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.LabeledContainer
	 * @@generated
	 */
	public Adapter createLabeledContainerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Rectangle <em>Rectangle</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Rectangle
	 * @@generated
	 */
	public Adapter createRectangleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.RoundedRectangle <em>Rounded Rectangle</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.RoundedRectangle
	 * @@generated
	 */
	public Adapter createRoundedRectangleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Ellipse <em>Ellipse</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Ellipse
	 * @@generated
	 */
	public Adapter createEllipseAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Polyline <em>Polyline</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Polyline
	 * @@generated
	 */
	public Adapter createPolylineAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Polygon <em>Polygon</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Polygon
	 * @@generated
	 */
	public Adapter createPolygonAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.ScalablePolygon <em>Scalable Polygon</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.ScalablePolygon
	 * @@generated
	 */
	public Adapter createScalablePolygonAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.PolylineConnection <em>Polyline Connection</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.PolylineConnection
	 * @@generated
	 */
	public Adapter createPolylineConnectionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.PolylineDecoration <em>Polyline Decoration</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.PolylineDecoration
	 * @@generated
	 */
	public Adapter createPolylineDecorationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.PolygonDecoration <em>Polygon Decoration</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.PolygonDecoration
	 * @@generated
	 */
	public Adapter createPolygonDecorationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.CustomClass <em>Custom Class</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.CustomClass
	 * @@generated
	 */
	public Adapter createCustomClassAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.CustomFigure <em>Custom Figure</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.CustomFigure
	 * @@generated
	 */
	public Adapter createCustomFigureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.CustomDecoration <em>Custom Decoration</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.CustomDecoration
	 * @@generated
	 */
	public Adapter createCustomDecorationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.CustomConnection <em>Custom Connection</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.CustomConnection
	 * @@generated
	 */
	public Adapter createCustomConnectionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Color <em>Color</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Color
	 * @@generated
	 */
	public Adapter createColorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.RGBColor <em>RGB Color</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.RGBColor
	 * @@generated
	 */
	public Adapter createRGBColorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.ConstantColor <em>Constant Color</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.ConstantColor
	 * @@generated
	 */
	public Adapter createConstantColorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Font <em>Font</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Font
	 * @@generated
	 */
	public Adapter createFontAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.BasicFont <em>Basic Font</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.BasicFont
	 * @@generated
	 */
	public Adapter createBasicFontAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Point <em>Point</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Point
	 * @@generated
	 */
	public Adapter createPointAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Dimension <em>Dimension</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Dimension
	 * @@generated
	 */
	public Adapter createDimensionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Insets <em>Insets</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Insets
	 * @@generated
	 */
	public Adapter createInsetsAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Border <em>Border</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Border
	 * @@generated
	 */
	public Adapter createBorderAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.BorderRef <em>Border Ref</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.BorderRef
	 * @@generated
	 */
	public Adapter createBorderRefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.LineBorder <em>Line Border</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.LineBorder
	 * @@generated
	 */
	public Adapter createLineBorderAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.MarginBorder <em>Margin Border</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.MarginBorder
	 * @@generated
	 */
	public Adapter createMarginBorderAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.CompoundBorder <em>Compound Border</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.CompoundBorder
	 * @@generated
	 */
	public Adapter createCompoundBorderAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.CustomBorder <em>Custom Border</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.CustomBorder
	 * @@generated
	 */
	public Adapter createCustomBorderAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.LayoutData <em>Layout Data</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.LayoutData
	 * @@generated
	 */
	public Adapter createLayoutDataAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.CustomLayoutData <em>Custom Layout Data</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.CustomLayoutData
	 * @@generated
	 */
	public Adapter createCustomLayoutDataAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.GridLayoutData <em>Grid Layout Data</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.GridLayoutData
	 * @@generated
	 */
	public Adapter createGridLayoutDataAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.BorderLayoutData <em>Border Layout Data</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.BorderLayoutData
	 * @@generated
	 */
	public Adapter createBorderLayoutDataAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Layoutable <em>Layoutable</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Layoutable
	 * @@generated
	 */
	public Adapter createLayoutableAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Layout <em>Layout</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Layout
	 * @@generated
	 */
	public Adapter createLayoutAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.LayoutRef <em>Layout Ref</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.LayoutRef
	 * @@generated
	 */
	public Adapter createLayoutRefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.CustomLayout <em>Custom Layout</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.CustomLayout
	 * @@generated
	 */
	public Adapter createCustomLayoutAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.GridLayout <em>Grid Layout</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.GridLayout
	 * @@generated
	 */
	public Adapter createGridLayoutAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.BorderLayout <em>Border Layout</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.BorderLayout
	 * @@generated
	 */
	public Adapter createBorderLayoutAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.CustomAttribute <em>Custom Attribute</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.CustomAttribute
	 * @@generated
	 */
	public Adapter createCustomAttributeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.FigureAccessor <em>Figure Accessor</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.FigureAccessor
	 * @@generated
	 */
	public Adapter createFigureAccessorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.FlowLayout <em>Flow Layout</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.FlowLayout
	 * @@generated
	 */
	public Adapter createFlowLayoutAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.XYLayout <em>XY Layout</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.XYLayout
	 * @@generated
	 */
	public Adapter createXYLayoutAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.XYLayoutData <em>XY Layout Data</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.XYLayoutData
	 * @@generated
	 */
	public Adapter createXYLayoutDataAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.StackLayout <em>Stack Layout</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.StackLayout
	 * @@generated
	 */
	public Adapter createStackLayoutAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.SVGFigure <em>SVG Figure</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.SVGFigure
	 * @@generated
	 */
	public Adapter createSVGFigureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.SVGProperty <em>SVG Property</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.SVGProperty
	 * @@generated
	 */
	public Adapter createSVGPropertyAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Rectangle2D <em>Rectangle2 D</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Rectangle2D
	 * @@generated
	 */
	public Adapter createRectangle2DAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@generated
	 */
	public Adapter createEObjectAdapter() {
		return null;
	}

} //GMFGraphAdapterFactory
@


1.19
log
@[234668] support svg figures in gmfgraph
@
text
@d356 4
d1374 14
@


1.18
log
@[139126] respect implementation bundle of custom borders and layouts
@
text
@d348 8
d1342 28
@


1.17
log
@regenerated with EMF 2.4M5
@
text
@d272 4
d316 4
d1040 14
d1194 14
@


1.16
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@d64 1
a64 1
	 * The switch the delegates to the <code>createXXX</code> methods.
@


1.15
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a14 64
import org.eclipse.gmf.gmfgraph.AlignmentFacet;
import org.eclipse.gmf.gmfgraph.BasicFont;
import org.eclipse.gmf.gmfgraph.Border;
import org.eclipse.gmf.gmfgraph.BorderLayout;
import org.eclipse.gmf.gmfgraph.BorderLayoutData;
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.Color;
import org.eclipse.gmf.gmfgraph.Compartment;
import org.eclipse.gmf.gmfgraph.CompoundBorder;
import org.eclipse.gmf.gmfgraph.Connection;
import org.eclipse.gmf.gmfgraph.ConnectionFigure;
import org.eclipse.gmf.gmfgraph.ConstantColor;
import org.eclipse.gmf.gmfgraph.CustomAttribute;
import org.eclipse.gmf.gmfgraph.CustomBorder;
import org.eclipse.gmf.gmfgraph.CustomClass;
import org.eclipse.gmf.gmfgraph.CustomConnection;
import org.eclipse.gmf.gmfgraph.CustomDecoration;
import org.eclipse.gmf.gmfgraph.CustomFigure;
import org.eclipse.gmf.gmfgraph.CustomLayout;
import org.eclipse.gmf.gmfgraph.CustomLayoutData;
import org.eclipse.gmf.gmfgraph.DecorationFigure;
import org.eclipse.gmf.gmfgraph.DiagramElement;
import org.eclipse.gmf.gmfgraph.DiagramLabel;
import org.eclipse.gmf.gmfgraph.Dimension;
import org.eclipse.gmf.gmfgraph.Ellipse;
import org.eclipse.gmf.gmfgraph.Figure;
import org.eclipse.gmf.gmfgraph.FigureAccessor;
import org.eclipse.gmf.gmfgraph.FigureGallery;
import org.eclipse.gmf.gmfgraph.FigureHandle;
import org.eclipse.gmf.gmfgraph.FigureMarker;
import org.eclipse.gmf.gmfgraph.FigureRef;
import org.eclipse.gmf.gmfgraph.FlowLayout;
import org.eclipse.gmf.gmfgraph.Font;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.GeneralFacet;
import org.eclipse.gmf.gmfgraph.GradientFacet;
import org.eclipse.gmf.gmfgraph.GridLayout;
import org.eclipse.gmf.gmfgraph.GridLayoutData;
import org.eclipse.gmf.gmfgraph.Identity;
import org.eclipse.gmf.gmfgraph.Insets;
import org.eclipse.gmf.gmfgraph.Label;
import org.eclipse.gmf.gmfgraph.LabelOffsetFacet;
import org.eclipse.gmf.gmfgraph.LabeledContainer;
import org.eclipse.gmf.gmfgraph.Layout;
import org.eclipse.gmf.gmfgraph.LayoutData;
import org.eclipse.gmf.gmfgraph.Layoutable;
import org.eclipse.gmf.gmfgraph.LineBorder;
import org.eclipse.gmf.gmfgraph.MarginBorder;
import org.eclipse.gmf.gmfgraph.Node;
import org.eclipse.gmf.gmfgraph.Point;
import org.eclipse.gmf.gmfgraph.Polygon;
import org.eclipse.gmf.gmfgraph.PolygonDecoration;
import org.eclipse.gmf.gmfgraph.Polyline;
import org.eclipse.gmf.gmfgraph.PolylineConnection;
import org.eclipse.gmf.gmfgraph.PolylineDecoration;
import org.eclipse.gmf.gmfgraph.RGBColor;
import org.eclipse.gmf.gmfgraph.Rectangle;
import org.eclipse.gmf.gmfgraph.RoundedRectangle;
import org.eclipse.gmf.gmfgraph.Shape;
import org.eclipse.gmf.gmfgraph.StackLayout;
import org.eclipse.gmf.gmfgraph.VisualFacet;
import org.eclipse.gmf.gmfgraph.XYLayout;
import org.eclipse.gmf.gmfgraph.XYLayoutData;

d88 4
d132 6
a137 2
			public Adapter caseFigureMarker(FigureMarker object) {
				return createFigureMarkerAdapter();
d140 2
a141 2
			public Adapter caseFigureHandle(FigureHandle object) {
				return createFigureHandleAdapter();
d144 6
a149 2
			public Adapter caseFigure(Figure object) {
				return createFigureAdapter();
d416 14
d444 28
d598 1
a598 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.FigureMarker <em>Figure Marker</em>}'.
d604 1
a604 1
	 * @@see org.eclipse.gmf.gmfgraph.FigureMarker
d607 1
a607 1
	public Adapter createFigureMarkerAdapter() {
d612 1
a612 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.FigureHandle <em>Figure Handle</em>}'.
d618 1
a618 1
	 * @@see org.eclipse.gmf.gmfgraph.FigureHandle
d621 1
a621 1
	public Adapter createFigureHandleAdapter() {
d626 1
a626 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Figure <em>Figure</em>}'.
d632 1
a632 1
	 * @@see org.eclipse.gmf.gmfgraph.Figure
d635 1
a635 1
	public Adapter createFigureAdapter() {
@


1.14
log
@[155230] mgolubev - Provide means to specify default size for figure
@
text
@d116 1
d133 4
a136 3
	protected GMFGraphSwitch modelSwitch =
		new GMFGraphSwitch() {
			public Object caseCanvas(Canvas object) {
d139 2
a140 1
			public Object caseFigureGallery(FigureGallery object) {
d143 2
a144 1
			public Object caseIdentity(Identity object) {
d147 2
a148 1
			public Object caseDiagramElement(DiagramElement object) {
d151 2
a152 1
			public Object caseNode(Node object) {
d155 2
a156 1
			public Object caseConnection(Connection object) {
d159 2
a160 1
			public Object caseCompartment(Compartment object) {
d163 2
a164 1
			public Object caseDiagramLabel(DiagramLabel object) {
d167 2
a168 1
			public Object caseVisualFacet(VisualFacet object) {
d171 2
a172 1
			public Object caseGeneralFacet(GeneralFacet object) {
d175 2
a176 1
			public Object caseAlignmentFacet(AlignmentFacet object) {
d179 2
a180 1
			public Object caseGradientFacet(GradientFacet object) {
d183 2
a184 1
			public Object caseLabelOffsetFacet(LabelOffsetFacet object) {
d187 2
a188 1
			public Object caseDefaultSizeFacet(DefaultSizeFacet object) {
d191 2
a192 1
			public Object caseFigureMarker(FigureMarker object) {
d195 2
a196 1
			public Object caseFigureHandle(FigureHandle object) {
d199 2
a200 1
			public Object caseFigure(Figure object) {
d203 2
a204 1
			public Object caseFigureRef(FigureRef object) {
d207 2
a208 1
			public Object caseConnectionFigure(ConnectionFigure object) {
d211 2
a212 1
			public Object caseDecorationFigure(DecorationFigure object) {
d215 2
a216 1
			public Object caseShape(Shape object) {
d219 2
a220 1
			public Object caseLabel(Label object) {
d223 2
a224 1
			public Object caseLabeledContainer(LabeledContainer object) {
d227 2
a228 1
			public Object caseRectangle(Rectangle object) {
d231 2
a232 1
			public Object caseRoundedRectangle(RoundedRectangle object) {
d235 2
a236 1
			public Object caseEllipse(Ellipse object) {
d239 2
a240 1
			public Object casePolyline(Polyline object) {
d243 2
a244 1
			public Object casePolygon(Polygon object) {
d247 2
a248 1
			public Object caseScalablePolygon(ScalablePolygon object) {
d251 2
a252 1
			public Object casePolylineConnection(PolylineConnection object) {
d255 2
a256 1
			public Object casePolylineDecoration(PolylineDecoration object) {
d259 2
a260 1
			public Object casePolygonDecoration(PolygonDecoration object) {
d263 2
a264 1
			public Object caseCustomClass(CustomClass object) {
d267 2
a268 1
			public Object caseCustomAttribute(CustomAttribute object) {
d271 2
a272 1
			public Object caseFigureAccessor(FigureAccessor object) {
d275 2
a276 1
			public Object caseCustomFigure(CustomFigure object) {
d279 2
a280 1
			public Object caseCustomDecoration(CustomDecoration object) {
d283 2
a284 1
			public Object caseCustomConnection(CustomConnection object) {
d287 2
a288 1
			public Object caseColor(Color object) {
d291 2
a292 1
			public Object caseRGBColor(RGBColor object) {
d295 2
a296 1
			public Object caseConstantColor(ConstantColor object) {
d299 2
a300 1
			public Object caseFont(Font object) {
d303 2
a304 1
			public Object caseBasicFont(BasicFont object) {
d307 2
a308 1
			public Object casePoint(Point object) {
d311 2
a312 1
			public Object caseDimension(Dimension object) {
d315 2
a316 1
			public Object caseInsets(Insets object) {
d319 2
a320 1
			public Object caseBorder(Border object) {
d323 2
a324 1
			public Object caseLineBorder(LineBorder object) {
d327 2
a328 1
			public Object caseMarginBorder(MarginBorder object) {
d331 2
a332 1
			public Object caseCompoundBorder(CompoundBorder object) {
d335 2
a336 1
			public Object caseCustomBorder(CustomBorder object) {
d339 2
a340 1
			public Object caseLayoutData(LayoutData object) {
d343 2
a344 1
			public Object caseCustomLayoutData(CustomLayoutData object) {
d347 2
a348 1
			public Object caseGridLayoutData(GridLayoutData object) {
d351 2
a352 1
			public Object caseBorderLayoutData(BorderLayoutData object) {
d355 2
a356 1
			public Object caseLayoutable(Layoutable object) {
d359 2
a360 1
			public Object caseLayout(Layout object) {
d363 2
a364 1
			public Object caseCustomLayout(CustomLayout object) {
d367 2
a368 1
			public Object caseGridLayout(GridLayout object) {
d371 2
a372 1
			public Object caseBorderLayout(BorderLayout object) {
d375 2
a376 1
			public Object caseFlowLayout(FlowLayout object) {
d379 2
a380 1
			public Object caseXYLayout(XYLayout object) {
d383 2
a384 1
			public Object caseXYLayoutData(XYLayoutData object) {
d387 2
a388 1
			public Object caseStackLayout(StackLayout object) {
d391 2
a392 1
			public Object defaultCase(EObject object) {
d405 1
d407 1
a407 1
		return (Adapter)modelSwitch.doSwitch((EObject)target);
@


1.13
log
@[154687] mgolubev - Support scalable polygons
@
text
@d173 3
d527 14
@


1.12
log
@organized imports
@
text
@d13 2
d215 3
d720 14
@


1.11
log
@Setting elementIcon attribute default value to "true".
@
text
@a12 3

import org.eclipse.gmf.gmfgraph.*;

@


1.10
log
@organized imports
@
text
@d13 3
@


1.9
log
@#140887 Remove Child interface from GMFGraph.
Although the need to reference child figures persist, thus FigureHandle was introduced, to allow diagramElements to reference either *generateable* figures (Figure subclasses) or *just-use* figures (like CustomFigure and FigureAccessor).
Refactoring performed with #131365 "Mirror GMFGraph model when generating standalone figure plugin" in mind
@
text
@a12 2
import org.eclipse.gmf.gmfgraph.*;

@


1.8
log
@#136877 Provide inital offset from the host link for the link label
@
text
@d15 1
a20 1
import org.eclipse.gmf.gmfgraph.Child;
d37 1
d41 1
d43 1
d46 1
d56 1
d74 1
d76 2
a154 3
			public Object caseChild(Child object) {
				return createChildAdapter();
			}
d176 3
d227 6
a307 3
			public Object caseCustomAttribute(CustomAttribute object) {
				return createCustomAttributeAdapter();
			}
a436 14
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.Child <em>Child</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @@return the new adapter.
	 * @@see org.eclipse.gmf.gmfgraph.Child
	 * @@generated
	 */
	public Adapter createChildAdapter() {
		return null;
	}

	/**
d535 14
d1137 14
@


1.7
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@d165 3
d510 14
@


1.6
log
@[mgolubev] #127252 layout support
@
text
@d159 3
d479 14
@


1.5
log
@#127461 add label diagram element in gmfgraph model
@
text
@d291 12
d1092 56
@


1.4
log
@[mgolubev] #127252 layout support
@
text
@d13 2
d150 3
d422 14
@


1.3
log
@connection stoped own its decorations
@
text
@d15 2
d25 1
d31 2
d45 2
d51 3
d256 30
d921 140
@


1.2
log
@move towards more draw2d-like model
@
text
@a10 1

a11 1

d13 45
a57 2

import org.eclipse.gmf.gmfgraph.*;
@


1.1
log
@#114177 gmfgraph model to replace diadef model
@
text
@d154 3
d166 5
a170 2
			public Object caseColorStyle(ColorStyle object) {
				return createColorStyleAdapter();
d172 2
a173 2
			public Object caseSizeStyle(SizeStyle object) {
				return createSizeStyleAdapter();
d175 5
a179 2
			public Object caseFontStyle(FontStyle object) {
				return createFontStyleAdapter();
d184 21
d602 14
d658 15
a672 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.ColorStyle <em>Color Style</em>}'.
d678 1
a678 1
	 * @@see org.eclipse.gmf.gmfgraph.ColorStyle
d681 1
a681 1
	public Adapter createColorStyleAdapter() {
d686 1
a686 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.SizeStyle <em>Size Style</em>}'.
d692 1
a692 1
	 * @@see org.eclipse.gmf.gmfgraph.SizeStyle
d695 1
a695 1
	public Adapter createSizeStyleAdapter() {
d700 1
a700 1
	 * Creates a new adapter for an object of class '{@@link org.eclipse.gmf.gmfgraph.FontStyle <em>Font Style</em>}'.
d706 1
a706 1
	 * @@see org.eclipse.gmf.gmfgraph.FontStyle
d709 15
a723 1
	public Adapter createFontStyleAdapter() {
d742 98
@

