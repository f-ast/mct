head	1.7;
access;
symbols
	v20080813-1520:1.7
	v20080807-1333:1.7
	v20080806-1520:1.7
	v20080731-1520:1.7
	v20080722-1827:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.4
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080528-1052:1.7
	v20080521:1.7
	v20080425-1959:1.7
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20080215-1500:1.7
	v20080207-0207:1.7
	v20071214-1111:1.7
	v20071003-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070420-1000:1.6
	v20070330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061013-1330:1.5
	v20060919-0800:1.5
	M1_20:1.5
	v20060904-1500:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.4
	RC2_10:1.4
	I20060505-1400:1.4
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.1
	I20051223-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2007.05.28.13.33.36;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	3de9465ada274567;

1.6
date	2007.03.14.12.59.17;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	109645f7f19c4567;

1.5
date	2006.05.23.21.09.56;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.02.11.44.15;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.22.22.01.35;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.05.17.33.08;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.22.12.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.7
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.gmfgraph.DiagramElement;
import org.eclipse.gmf.gmfgraph.FigureDescriptor;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.VisualFacet;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Diagram Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.DiagramElementImpl#getName <em>Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.DiagramElementImpl#getFigure <em>Figure</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.DiagramElementImpl#getFacets <em>Facets</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public abstract class DiagramElementImpl extends EObjectImpl implements DiagramElement {
	/**
	 * The default value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getFigure() <em>Figure</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFigure()
	 * @@generated
	 * @@ordered
	 */
	protected FigureDescriptor figure;

	/**
	 * The cached value of the '{@@link #getFacets() <em>Facets</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFacets()
	 * @@generated
	 * @@ordered
	 */
	protected EList<VisualFacet> facets;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected DiagramElementImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGraphPackage.eINSTANCE.getDiagramElement();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.DIAGRAM_ELEMENT__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FigureDescriptor getFigure() {
		if (figure != null && figure.eIsProxy()) {
			InternalEObject oldFigure = (InternalEObject)figure;
			figure = (FigureDescriptor)eResolveProxy(oldFigure);
			if (figure != oldFigure) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE, oldFigure, figure));
			}
		}
		return figure;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FigureDescriptor basicGetFigure() {
		return figure;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFigure(FigureDescriptor newFigure) {
		FigureDescriptor oldFigure = figure;
		figure = newFigure;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE, oldFigure, figure));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<VisualFacet> getFacets() {
		if (facets == null) {
			facets = new EObjectContainmentEList<VisualFacet>(VisualFacet.class, this, GMFGraphPackage.DIAGRAM_ELEMENT__FACETS);
		}
		return facets;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGraphPackage.DIAGRAM_ELEMENT__FACETS:
				return ((InternalEList<?>)getFacets()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGraphPackage.DIAGRAM_ELEMENT__NAME:
				return getName();
			case GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE:
				if (resolve) return getFigure();
				return basicGetFigure();
			case GMFGraphPackage.DIAGRAM_ELEMENT__FACETS:
				return getFacets();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGraphPackage.DIAGRAM_ELEMENT__NAME:
				setName((String)newValue);
				return;
			case GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE:
				setFigure((FigureDescriptor)newValue);
				return;
			case GMFGraphPackage.DIAGRAM_ELEMENT__FACETS:
				getFacets().clear();
				getFacets().addAll((Collection<? extends VisualFacet>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.DIAGRAM_ELEMENT__NAME:
				setName(NAME_EDEFAULT);
				return;
			case GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE:
				setFigure((FigureDescriptor)null);
				return;
			case GMFGraphPackage.DIAGRAM_ELEMENT__FACETS:
				getFacets().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.DIAGRAM_ELEMENT__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE:
				return figure != null;
			case GMFGraphPackage.DIAGRAM_ELEMENT__FACETS:
				return facets != null && !facets.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(')');
		return result.toString();
	}

} //DiagramElementImpl
@


1.6
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d21 1
a21 1
import org.eclipse.gmf.gmfgraph.FigureHandle;
d69 1
a69 1
	protected FigureHandle figure = null;
d79 1
a79 1
	protected EList<VisualFacet> facets = null;
d126 1
a126 1
	public FigureHandle getFigure() {
d129 1
a129 1
			figure = (FigureHandle)eResolveProxy(oldFigure);
d143 1
a143 1
	public FigureHandle basicGetFigure() {
d152 2
a153 2
	public NotificationChain basicSetFigure(FigureHandle newFigure, NotificationChain msgs) {
		FigureHandle oldFigure = figure;
d155 2
a156 24
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE, oldFigure, newFigure);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFigure(FigureHandle newFigure) {
		if (newFigure != figure) {
			NotificationChain msgs = null;
			if (figure != null)
				msgs = ((InternalEObject)figure).eInverseRemove(this, GMFGraphPackage.FIGURE_HANDLE__REFERENCING_ELEMENTS, FigureHandle.class, msgs);
			if (newFigure != null)
				msgs = ((InternalEObject)newFigure).eInverseAdd(this, GMFGraphPackage.FIGURE_HANDLE__REFERENCING_ELEMENTS, FigureHandle.class, msgs);
			msgs = basicSetFigure(newFigure, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE, newFigure, newFigure));
a173 36
	 * @@generated NOT
	 */
	public VisualFacet find(Class facetClass) {
		if (facets == null) {
			return null;
		}
		if (facetClass == null) {
			throw new NullPointerException(); // do this explicitly
		}
		for (VisualFacet next : getFacets()) {
			if (facetClass.isAssignableFrom(next.getClass())) {
				return next;
			}
		}
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE:
				if (figure != null)
					msgs = ((InternalEObject)figure).eInverseRemove(this, GMFGraphPackage.FIGURE_HANDLE__REFERENCING_ELEMENTS, FigureHandle.class, msgs);
				return basicSetFigure((FigureHandle)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
a178 2
			case GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE:
				return basicSetFigure(null, msgs);
d217 1
a217 1
				setFigure((FigureHandle)newValue);
d239 1
a239 1
				setFigure((FigureHandle)null);
@


1.5
log
@#140887 Remove Child interface from GMFGraph.
Although the need to reference child figures persist, thus FigureHandle was introduced, to allow diagramElements to reference either *generateable* figures (Figure subclasses) or *just-use* figures (like CustomFigure and FigureAccessor).
Refactoring performed with #131365 "Mirror GMFGraph model when generating standalone figure plugin" in mind
@
text
@a9 1
import java.util.Iterator;
d79 1
a79 1
	protected EList facets = null;
d95 1
d186 1
a186 1
	public EList getFacets() {
d188 1
a188 1
			facets = new EObjectContainmentEList(VisualFacet.class, this, GMFGraphPackage.DIAGRAM_ELEMENT__FACETS);
d205 1
a205 2
		for (Iterator it = getFacets().iterator(); it.hasNext(); ) {
			Object next = it.next();
d207 1
a207 1
				return (VisualFacet) next;
d218 1
d234 1
d240 1
a240 1
				return ((InternalEList)getFacets()).basicRemove(otherEnd, msgs);
d250 1
d269 2
d281 1
a281 1
				getFacets().addAll((Collection)newValue);
d292 1
d313 1
d331 1
@


1.4
log
@[mgolubev] #139139 Compilation error in the generated diagram code if DiagramLabel points to the deep Label
Add getters/setters for each figure that is being used by any diagram element
@
text
@d22 1
a22 1
import org.eclipse.gmf.gmfgraph.Figure;
d70 1
a70 1
	protected Figure figure = null;
d126 1
a126 1
	public Figure getFigure() {
d129 1
a129 1
			figure = (Figure)eResolveProxy(oldFigure);
d143 1
a143 1
	public Figure basicGetFigure() {
d152 2
a153 2
	public NotificationChain basicSetFigure(Figure newFigure, NotificationChain msgs) {
		Figure oldFigure = figure;
d167 1
a167 1
	public void setFigure(Figure newFigure) {
d171 1
a171 1
				msgs = ((InternalEObject)figure).eInverseRemove(this, GMFGraphPackage.FIGURE__REFERENCING_ELEMENTS, Figure.class, msgs);
d173 1
a173 1
				msgs = ((InternalEObject)newFigure).eInverseAdd(this, GMFGraphPackage.FIGURE__REFERENCING_ELEMENTS, Figure.class, msgs);
d223 2
a224 2
					msgs = ((InternalEObject)figure).eInverseRemove(this, GMFGraphPackage.FIGURE__REFERENCING_ELEMENTS, Figure.class, msgs);
				return basicSetFigure((Figure)otherEnd, msgs);
d273 1
a273 1
				setFigure((Figure)newValue);
d294 1
a294 1
				setFigure((Figure)null);
@


1.3
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@d152 1
a152 1
	public void setFigure(Figure newFigure) {
d155 24
a178 2
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE, oldFigure, figure));
d219 15
d236 2
@


1.2
log
@move towards more draw2d-like model
@
text
@d10 1
d174 21
@


1.1
log
@#114177 gmfgraph model to replace diadef model
@
text
@a14 1
import org.eclipse.emf.ecore.EStructuralFeature;
d127 2
a128 2
			Figure oldFigure = figure;
			figure = (Figure)eResolveProxy((InternalEObject)figure);
d175 4
a178 8
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGraphPackage.DIAGRAM_ELEMENT__FACETS:
					return ((InternalEList)getFacets()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d180 1
a180 1
		return eBasicSetContainer(null, featureID, msgs);
d188 2
a189 2
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d198 1
a198 1
		return eDynamicGet(eFeature, resolve);
d206 2
a207 2
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d219 1
a219 1
		eDynamicSet(eFeature, newValue);
d227 2
a228 2
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d239 1
a239 1
		eDynamicUnset(eFeature);
d247 2
a248 2
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d256 1
a256 1
		return eDynamicIsSet(eFeature);
@

