head	1.3;
access;
symbols
	v20080813-1520:1.3
	v20080806-1520:1.3
	v20080731-1520:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060519-0800:1.2
	RC2_10:1.2
	I20060505-1400:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.1
	I20051223-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.05.23.21.09.56;	author atikhomirov;	state dead;
branches;
next	1.2;

1.2
date	2006.01.05.17.33.08;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.22.12.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@#140887 Remove Child interface from GMFGraph.
Although the need to reference child figures persist, thus FigureHandle was introduced, to allow diagramElements to reference either *generateable* figures (Figure subclasses) or *just-use* figures (like CustomFigure and FigureAccessor).
Refactoring performed with #131365 "Mirror GMFGraph model when generating standalone figure plugin" in mind
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.gmf.gmfgraph.Child;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Child</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @@generated
 */
public class ChildImpl extends DiagramElementImpl implements Child {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ChildImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return GMFGraphPackage.eINSTANCE.getChild();
	}

} //ChildImpl
@


1.2
log
@move towards more draw2d-like model
@
text
@@


1.1
log
@#114177 gmfgraph model to replace diadef model
@
text
@a8 3
import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;
a9 3
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.util.InternalEList;
a10 1
import org.eclipse.gmf.gmfgraph.Figure;
a40 93
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGraphPackage.CHILD__FACETS:
					return ((InternalEList)getFacets()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
		}
		return eBasicSetContainer(null, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGraphPackage.CHILD__NAME:
				return getName();
			case GMFGraphPackage.CHILD__FIGURE:
				if (resolve) return getFigure();
				return basicGetFigure();
			case GMFGraphPackage.CHILD__FACETS:
				return getFacets();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGraphPackage.CHILD__NAME:
				setName((String)newValue);
				return;
			case GMFGraphPackage.CHILD__FIGURE:
				setFigure((Figure)newValue);
				return;
			case GMFGraphPackage.CHILD__FACETS:
				getFacets().clear();
				getFacets().addAll((Collection)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGraphPackage.CHILD__NAME:
				setName(NAME_EDEFAULT);
				return;
			case GMFGraphPackage.CHILD__FIGURE:
				setFigure((Figure)null);
				return;
			case GMFGraphPackage.CHILD__FACETS:
				getFacets().clear();
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGraphPackage.CHILD__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case GMFGraphPackage.CHILD__FIGURE:
				return figure != null;
			case GMFGraphPackage.CHILD__FACETS:
				return facets != null && !facets.isEmpty();
		}
		return eDynamicIsSet(eFeature);
	}

@

