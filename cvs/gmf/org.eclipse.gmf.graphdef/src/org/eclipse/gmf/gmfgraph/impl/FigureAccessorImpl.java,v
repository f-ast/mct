head	1.4;
access;
symbols
	v20080813-1520:1.4
	v20080807-1333:1.4
	v20080806-1520:1.4
	v20080731-1520:1.4
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080528-1052:1.4
	v20080521:1.4
	v20080425-1959:1.4
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080207-0207:1.3
	v20071214-1111:1.3
	v20071003-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070420-1000:1.2
	v20070330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061013-1330:1.1
	v20060919-0800:1.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2008.04.18.14.43.28;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	2e444808b38e4567;

1.3
date	2007.05.28.13.33.36;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	3de9465ada274567;

1.2
date	2007.03.14.12.59.18;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	109645f7f19c4567;

1.1
date	2006.05.23.21.09.56;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.gmf.gmfgraph.FigureAccessor;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.RealFigure;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Figure Accessor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.FigureAccessorImpl#getAccessor <em>Accessor</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.FigureAccessorImpl#getTypedFigure <em>Typed Figure</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class FigureAccessorImpl extends EObjectImpl implements FigureAccessor {
	/**
	 * The default value of the '{@@link #getAccessor() <em>Accessor</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAccessor()
	 * @@generated
	 * @@ordered
	 */
	protected static final String ACCESSOR_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getAccessor() <em>Accessor</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAccessor()
	 * @@generated
	 * @@ordered
	 */
	protected String accessor = ACCESSOR_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getTypedFigure() <em>Typed Figure</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTypedFigure()
	 * @@generated
	 * @@ordered
	 */
	protected RealFigure typedFigure;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected FigureAccessorImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGraphPackage.eINSTANCE.getFigureAccessor();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getAccessor() {
		return accessor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setAccessor(String newAccessor) {
		String oldAccessor = accessor;
		accessor = newAccessor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.FIGURE_ACCESSOR__ACCESSOR, oldAccessor, accessor));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public RealFigure getTypedFigure() {
		return typedFigure;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetTypedFigure(RealFigure newTypedFigure, NotificationChain msgs) {
		RealFigure oldTypedFigure = typedFigure;
		typedFigure = newTypedFigure;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGraphPackage.FIGURE_ACCESSOR__TYPED_FIGURE, oldTypedFigure, newTypedFigure);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTypedFigure(RealFigure newTypedFigure) {
		if (newTypedFigure != typedFigure) {
			NotificationChain msgs = null;
			if (typedFigure != null)
				msgs = ((InternalEObject)typedFigure).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.FIGURE_ACCESSOR__TYPED_FIGURE, null, msgs);
			if (newTypedFigure != null)
				msgs = ((InternalEObject)newTypedFigure).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFGraphPackage.FIGURE_ACCESSOR__TYPED_FIGURE, null, msgs);
			msgs = basicSetTypedFigure(newTypedFigure, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.FIGURE_ACCESSOR__TYPED_FIGURE, newTypedFigure, newTypedFigure));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGraphPackage.FIGURE_ACCESSOR__TYPED_FIGURE:
				return basicSetTypedFigure(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGraphPackage.FIGURE_ACCESSOR__ACCESSOR:
				return getAccessor();
			case GMFGraphPackage.FIGURE_ACCESSOR__TYPED_FIGURE:
				return getTypedFigure();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGraphPackage.FIGURE_ACCESSOR__ACCESSOR:
				setAccessor((String)newValue);
				return;
			case GMFGraphPackage.FIGURE_ACCESSOR__TYPED_FIGURE:
				setTypedFigure((RealFigure)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.FIGURE_ACCESSOR__ACCESSOR:
				setAccessor(ACCESSOR_EDEFAULT);
				return;
			case GMFGraphPackage.FIGURE_ACCESSOR__TYPED_FIGURE:
				setTypedFigure((RealFigure)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.FIGURE_ACCESSOR__ACCESSOR:
				return ACCESSOR_EDEFAULT == null ? accessor != null : !ACCESSOR_EDEFAULT.equals(accessor);
			case GMFGraphPackage.FIGURE_ACCESSOR__TYPED_FIGURE:
				return typedFigure != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (accessor: ");
		result.append(accessor);
		result.append(')');
		return result.toString();
	}

} //FigureAccessorImpl@


1.3
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@d182 1
a182 2
	@@SuppressWarnings("unchecked")
		@@Override
@


1.2
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a8 2
import java.util.Collection;

a10 3

import org.eclipse.emf.common.util.EList;

a12 1

a14 6

import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.gmfgraph.CustomFigure;
import org.eclipse.gmf.gmfgraph.DiagramElement;
d17 1
a25 1
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.FigureAccessorImpl#getReferencingElements <em>Referencing Elements</em>}</li>
a34 10
	 * The cached value of the '{@@link #getReferencingElements() <em>Referencing Elements</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getReferencingElements()
	 * @@generated
	 * @@ordered
	 */
	protected EList<DiagramElement> referencingElements = null;

	/**
d55 1
a55 1
	 * The cached value of the '{@@link #getTypedFigure() <em>Typed Figure</em>}' reference.
d62 1
a62 1
	protected CustomFigure typedFigure = null;
a87 12
	public EList<DiagramElement> getReferencingElements() {
		if (referencingElements == null) {
			referencingElements = new EObjectWithInverseResolvingEList<DiagramElement>(DiagramElement.class, this, GMFGraphPackage.FIGURE_ACCESSOR__REFERENCING_ELEMENTS, GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE);
		}
		return referencingElements;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d109 1
a109 9
	public CustomFigure getTypedFigure() {
		if (typedFigure != null && typedFigure.eIsProxy()) {
			InternalEObject oldTypedFigure = (InternalEObject)typedFigure;
			typedFigure = (CustomFigure)eResolveProxy(oldTypedFigure);
			if (typedFigure != oldTypedFigure) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGraphPackage.FIGURE_ACCESSOR__TYPED_FIGURE, oldTypedFigure, typedFigure));
			}
		}
d118 2
a119 11
	public CustomFigure basicGetTypedFigure() {
		return typedFigure;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTypedFigure(CustomFigure newTypedFigure) {
		CustomFigure oldTypedFigure = typedFigure;
d121 5
a125 2
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.FIGURE_ACCESSOR__TYPED_FIGURE, oldTypedFigure, typedFigure));
d133 9
a141 6
	@@SuppressWarnings("unchecked")
		@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGraphPackage.FIGURE_ACCESSOR__REFERENCING_ELEMENTS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getReferencingElements()).basicAdd(otherEnd, msgs);
d143 2
a144 1
		return super.eInverseAdd(otherEnd, featureID, msgs);
d155 2
a156 2
			case GMFGraphPackage.FIGURE_ACCESSOR__REFERENCING_ELEMENTS:
				return ((InternalEList<?>)getReferencingElements()).basicRemove(otherEnd, msgs);
a168 2
			case GMFGraphPackage.FIGURE_ACCESSOR__REFERENCING_ELEMENTS:
				return getReferencingElements();
d172 1
a172 2
				if (resolve) return getTypedFigure();
				return basicGetTypedFigure();
a185 4
			case GMFGraphPackage.FIGURE_ACCESSOR__REFERENCING_ELEMENTS:
				getReferencingElements().clear();
				getReferencingElements().addAll((Collection<? extends DiagramElement>)newValue);
				return;
d190 1
a190 1
				setTypedFigure((CustomFigure)newValue);
a203 3
			case GMFGraphPackage.FIGURE_ACCESSOR__REFERENCING_ELEMENTS:
				getReferencingElements().clear();
				return;
d208 1
a208 1
				setTypedFigure((CustomFigure)null);
a221 2
			case GMFGraphPackage.FIGURE_ACCESSOR__REFERENCING_ELEMENTS:
				return referencingElements != null && !referencingElements.isEmpty();
@


1.1
log
@#140887 Remove Child interface from GMFGraph.
Although the need to reference child figures persist, thus FigureHandle was introduced, to allow diagramElements to reference either *generateable* figures (Figure subclasses) or *just-use* figures (like CustomFigure and FigureAccessor).
Refactoring performed with #131365 "Mirror GMFGraph model when generating standalone figure plugin" in mind
@
text
@d54 1
a54 1
	protected EList referencingElements = null;
d100 1
d110 1
a110 1
	public EList getReferencingElements() {
d112 1
a112 1
			referencingElements = new EObjectWithInverseResolvingEList(DiagramElement.class, this, GMFGraphPackage.FIGURE_ACCESSOR__REFERENCING_ELEMENTS, GMFGraphPackage.DIAGRAM_ELEMENT__FIGURE);
d181 2
d186 1
a186 1
				return ((InternalEList)getReferencingElements()).basicAdd(otherEnd, msgs);
d196 1
d200 1
a200 1
				return ((InternalEList)getReferencingElements()).basicRemove(otherEnd, msgs);
d210 1
d229 2
d235 1
a235 1
				getReferencingElements().addAll((Collection)newValue);
d252 1
d273 1
d291 1
@

