head	1.6;
access;
symbols
	v20080813-1520:1.6
	v20080807-1333:1.6
	v20080806-1520:1.6
	v20080731-1520:1.6
	v20080722-1827:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080528-1052:1.6
	v20080521:1.6
	v20080425-1959:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20080207-0207:1.6
	v20071214-1111:1.6
	v20071003-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070420-1000:1.6
	v20070330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070208-1800:1.5
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061013-1330:1.5
	v20060919-0800:1.5
	M1_20:1.5
	v20060904-1500:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	RC2_10:1.5
	I20060505-1400:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.4
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.2
	I20051223-1100:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.03.14.12.59.18;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	109645f7f19c4567;

1.5
date	2006.04.20.12.16.51;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.10.12.14.11;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.05.17.33.07;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.12.19.15.40;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.22.12.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Direction</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * <!-- begin-model-doc -->
 * Geographical bit constants from org.eclipse.draw2d.PositionConstants
 * <!-- end-model-doc -->
 * @@see org.eclipse.gmf.gmfgraph.GMFGraphPackage#getDirection()
 * @@model
 * @@generated
 */
public enum Direction implements Enumerator
{
	/**
	 * The '<em><b>NONE</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #NONE
	 * @@generated
	 * @@ordered
	 */
	NONE_LITERAL(0, "NONE", "NONE"),
	/**
	 * The '<em><b>NORTH</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #NORTH
	 * @@generated
	 * @@ordered
	 */
	NORTH_LITERAL(1, "NORTH", "NORTH"),
	/**
	 * The '<em><b>SOUTH</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #SOUTH
	 * @@generated
	 * @@ordered
	 */
	SOUTH_LITERAL(4, "SOUTH", "SOUTH"),
	/**
	 * The '<em><b>WEST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #WEST
	 * @@generated
	 * @@ordered
	 */
	WEST_LITERAL(8, "WEST", "WEST"),
	/**
	 * The '<em><b>EAST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #EAST
	 * @@generated
	 * @@ordered
	 */
	EAST_LITERAL(16, "EAST", "EAST"),
	/**
	 * The '<em><b>NORTH EAST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #NORTH_EAST
	 * @@generated
	 * @@ordered
	 */
	NORTH_EAST_LITERAL(17, "NORTH_EAST", "NORTH_EAST"),
	/**
	 * The '<em><b>NORTH WEST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #NORTH_WEST
	 * @@generated
	 * @@ordered
	 */
	NORTH_WEST_LITERAL(9, "NORTH_WEST", "NORTH_WEST"),
	/**
	 * The '<em><b>SOUTH EAST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #SOUTH_EAST
	 * @@generated
	 * @@ordered
	 */
	SOUTH_EAST_LITERAL(20, "SOUTH_EAST", "SOUTH_EAST"),
	/**
	 * The '<em><b>SOUTH WEST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #SOUTH_WEST
	 * @@generated
	 * @@ordered
	 */
	SOUTH_WEST_LITERAL(12, "SOUTH_WEST", "SOUTH_WEST"),
	/**
	 * The '<em><b>NORTH SOUTH</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #NORTH_SOUTH
	 * @@generated
	 * @@ordered
	 */
	NORTH_SOUTH_LITERAL(5, "NORTH_SOUTH", "NORTH_SOUTH"),
	/**
	 * The '<em><b>EAST WEST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #EAST_WEST
	 * @@generated
	 * @@ordered
	 */
	EAST_WEST_LITERAL(24, "EAST_WEST", "EAST_WEST"),
	/**
	 * The '<em><b>NSEW</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #NSEW
	 * @@generated
	 * @@ordered
	 */
	NSEW_LITERAL(29, "NSEW", "NSEW");
	/**
	 * The '<em><b>NONE</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>NONE</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #NONE_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int NONE = 0;

	/**
	 * The '<em><b>NORTH</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>NORTH</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #NORTH_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int NORTH = 1;

	/**
	 * The '<em><b>SOUTH</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>SOUTH</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #SOUTH_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int SOUTH = 4;

	/**
	 * The '<em><b>WEST</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>WEST</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #WEST_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int WEST = 8;

	/**
	 * The '<em><b>EAST</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>EAST</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #EAST_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int EAST = 16;

	/**
	 * The '<em><b>NORTH EAST</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>NORTH EAST</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #NORTH_EAST_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int NORTH_EAST = 17;

	/**
	 * The '<em><b>NORTH WEST</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>NORTH WEST</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #NORTH_WEST_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int NORTH_WEST = 9;

	/**
	 * The '<em><b>SOUTH EAST</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>SOUTH EAST</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #SOUTH_EAST_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int SOUTH_EAST = 20;

	/**
	 * The '<em><b>SOUTH WEST</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>SOUTH WEST</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #SOUTH_WEST_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int SOUTH_WEST = 12;

	/**
	 * The '<em><b>NORTH SOUTH</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>NORTH SOUTH</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #NORTH_SOUTH_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int NORTH_SOUTH = 5;

	/**
	 * The '<em><b>EAST WEST</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>EAST WEST</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #EAST_WEST_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int EAST_WEST = 24;

	/**
	 * The '<em><b>NSEW</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>NSEW</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #NSEW_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int NSEW = 29;

	/**
	 * An array of all the '<em><b>Direction</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private static final Direction[] VALUES_ARRAY =
		new Direction[] {
			NONE_LITERAL,
			NORTH_LITERAL,
			SOUTH_LITERAL,
			WEST_LITERAL,
			EAST_LITERAL,
			NORTH_EAST_LITERAL,
			NORTH_WEST_LITERAL,
			SOUTH_EAST_LITERAL,
			SOUTH_WEST_LITERAL,
			NORTH_SOUTH_LITERAL,
			EAST_WEST_LITERAL,
			NSEW_LITERAL,
		};

	/**
	 * A public read-only list of all the '<em><b>Direction</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static final List<Direction> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

	/**
	 * Returns the '<em><b>Direction</b></em>' literal with the specified literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static Direction get(String literal) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			Direction result = VALUES_ARRAY[i];
			if (result.toString().equals(literal)) {
				return result;
			}
		}
		return null;
	}

	/**
	 * Returns the '<em><b>Direction</b></em>' literal with the specified name.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static Direction getByName(String name) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			Direction result = VALUES_ARRAY[i];
			if (result.getName().equals(name)) {
				return result;
			}
		}
		return null;
	}

	/**
	 * Returns the '<em><b>Direction</b></em>' literal with the specified integer value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static Direction get(int value) {
		switch (value) {
			case NONE: return NONE_LITERAL;
			case NORTH: return NORTH_LITERAL;
			case SOUTH: return SOUTH_LITERAL;
			case WEST: return WEST_LITERAL;
			case EAST: return EAST_LITERAL;
			case NORTH_EAST: return NORTH_EAST_LITERAL;
			case NORTH_WEST: return NORTH_WEST_LITERAL;
			case SOUTH_EAST: return SOUTH_EAST_LITERAL;
			case SOUTH_WEST: return SOUTH_WEST_LITERAL;
			case NORTH_SOUTH: return NORTH_SOUTH_LITERAL;
			case EAST_WEST: return EAST_WEST_LITERAL;
			case NSEW: return NSEW_LITERAL;
		}
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private final int value;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private final String name;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private final String literal;

	/**
	 * Only this class can construct instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private Direction(int value, String name, String literal) {
		this.value = value;
		this.name = name;
		this.literal = literal;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getValue() {
	  return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getName() {
	  return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getLiteral() {
	  return literal;
	}

	/**
	 * Returns the literal value of the enumerator, which is its string representation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		return literal;
	}
}
@


1.5
log
@#135017 use geographical constants from PositionConstants
@
text
@d13 1
a13 1
import org.eclipse.emf.common.util.AbstractEnumerator;
d27 110
a136 1
public final class Direction extends AbstractEnumerator {
a317 120
	 * The '<em><b>NONE</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #NONE
	 * @@generated
	 * @@ordered
	 */
	public static final Direction NONE_LITERAL = new Direction(NONE, "NONE", "NONE");

	/**
	 * The '<em><b>NORTH</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #NORTH
	 * @@generated
	 * @@ordered
	 */
	public static final Direction NORTH_LITERAL = new Direction(NORTH, "NORTH", "NORTH");

	/**
	 * The '<em><b>SOUTH</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #SOUTH
	 * @@generated
	 * @@ordered
	 */
	public static final Direction SOUTH_LITERAL = new Direction(SOUTH, "SOUTH", "SOUTH");

	/**
	 * The '<em><b>WEST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #WEST
	 * @@generated
	 * @@ordered
	 */
	public static final Direction WEST_LITERAL = new Direction(WEST, "WEST", "WEST");

	/**
	 * The '<em><b>EAST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #EAST
	 * @@generated
	 * @@ordered
	 */
	public static final Direction EAST_LITERAL = new Direction(EAST, "EAST", "EAST");

	/**
	 * The '<em><b>NORTH EAST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #NORTH_EAST
	 * @@generated
	 * @@ordered
	 */
	public static final Direction NORTH_EAST_LITERAL = new Direction(NORTH_EAST, "NORTH_EAST", "NORTH_EAST");

	/**
	 * The '<em><b>NORTH WEST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #NORTH_WEST
	 * @@generated
	 * @@ordered
	 */
	public static final Direction NORTH_WEST_LITERAL = new Direction(NORTH_WEST, "NORTH_WEST", "NORTH_WEST");

	/**
	 * The '<em><b>SOUTH EAST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #SOUTH_EAST
	 * @@generated
	 * @@ordered
	 */
	public static final Direction SOUTH_EAST_LITERAL = new Direction(SOUTH_EAST, "SOUTH_EAST", "SOUTH_EAST");

	/**
	 * The '<em><b>SOUTH WEST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #SOUTH_WEST
	 * @@generated
	 * @@ordered
	 */
	public static final Direction SOUTH_WEST_LITERAL = new Direction(SOUTH_WEST, "SOUTH_WEST", "SOUTH_WEST");

	/**
	 * The '<em><b>NORTH SOUTH</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #NORTH_SOUTH
	 * @@generated
	 * @@ordered
	 */
	public static final Direction NORTH_SOUTH_LITERAL = new Direction(NORTH_SOUTH, "NORTH_SOUTH", "NORTH_SOUTH");

	/**
	 * The '<em><b>EAST WEST</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #EAST_WEST
	 * @@generated
	 * @@ordered
	 */
	public static final Direction EAST_WEST_LITERAL = new Direction(EAST_WEST, "EAST_WEST", "EAST_WEST");

	/**
	 * The '<em><b>NSEW</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #NSEW
	 * @@generated
	 * @@ordered
	 */
	public static final Direction NSEW_LITERAL = new Direction(NSEW, "NSEW", "NSEW");

	/**
d345 1
a345 1
	public static final List VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));
d400 1
a400 1
		return null;	
d404 21
d431 12
a442 1
		super(value, name, literal);
d445 29
a473 1
} //Direction
@


1.4
log
@[mgolubev] #135017 Respect resize constraints defined in .gmfgraph
@
text
@d20 3
d71 1
a71 1
	public static final int SOUTH = 2;
d74 1
a74 1
	 * The '<em><b>EAST</b></em>' literal value.
d77 1
a77 1
	 * If the meaning of '<em><b>EAST</b></em>' literal object isn't clear,
d81 1
a81 1
	 * @@see #EAST_LITERAL
d86 1
a86 1
	public static final int EAST = 4;
d89 1
a89 1
	 * The '<em><b>WEST</b></em>' literal value.
d92 1
a92 1
	 * If the meaning of '<em><b>WEST</b></em>' literal object isn't clear,
d96 1
a96 1
	 * @@see #WEST_LITERAL
d101 1
a101 1
	public static final int WEST = 8;
d104 1
a104 1
	 * The '<em><b>NORTH WEST</b></em>' literal value.
d107 1
a107 1
	 * If the meaning of '<em><b>NORTH WEST</b></em>' literal object isn't clear,
d111 1
a111 1
	 * @@see #NORTH_WEST_LITERAL
d116 1
a116 1
	public static final int NORTH_WEST = 16;
d119 1
a119 1
	 * The '<em><b>NORTH EAST</b></em>' literal value.
d122 1
a122 1
	 * If the meaning of '<em><b>NORTH EAST</b></em>' literal object isn't clear,
d126 1
a126 1
	 * @@see #NORTH_EAST_LITERAL
d131 1
a131 1
	public static final int NORTH_EAST = 32;
d134 1
a134 1
	 * The '<em><b>SOUTH WEST</b></em>' literal value.
d137 1
a137 1
	 * If the meaning of '<em><b>SOUTH WEST</b></em>' literal object isn't clear,
d141 1
a141 1
	 * @@see #SOUTH_WEST_LITERAL
d146 1
a146 1
	public static final int SOUTH_WEST = 64;
d149 1
a149 1
	 * The '<em><b>SOUTH EAST</b></em>' literal value.
d152 1
a152 1
	 * If the meaning of '<em><b>SOUTH EAST</b></em>' literal object isn't clear,
d156 1
a156 1
	 * @@see #SOUTH_EAST_LITERAL
d161 1
a161 1
	public static final int SOUTH_EAST = 128;
d164 1
a164 1
	 * The '<em><b>VERTICAL</b></em>' literal value.
d167 1
a167 1
	 * If the meaning of '<em><b>VERTICAL</b></em>' literal object isn't clear,
d171 1
a171 1
	 * @@see #VERTICAL_LITERAL
d176 1
a176 1
	public static final int VERTICAL = 3;
d179 1
a179 1
	 * The '<em><b>HORIZONTAL</b></em>' literal value.
d182 1
a182 1
	 * If the meaning of '<em><b>HORIZONTAL</b></em>' literal object isn't clear,
d186 1
a186 1
	 * @@see #HORIZONTAL_LITERAL
d191 1
a191 1
	public static final int HORIZONTAL = 12;
d194 1
a194 1
	 * The '<em><b>ALL</b></em>' literal value.
d197 1
a197 1
	 * If the meaning of '<em><b>ALL</b></em>' literal object isn't clear,
d201 1
a201 1
	 * @@see #ALL_LITERAL
d206 1
a206 1
	public static final int ALL = 255;
d239 10
d259 1
a259 1
	 * The '<em><b>WEST</b></em>' literal object.
d262 1
a262 1
	 * @@see #WEST
d266 1
a266 1
	public static final Direction WEST_LITERAL = new Direction(WEST, "WEST", "WEST");
d279 1
a279 1
	 * The '<em><b>NORTH EAST</b></em>' literal object.
d282 1
a282 1
	 * @@see #NORTH_EAST
d286 1
a286 1
	public static final Direction NORTH_EAST_LITERAL = new Direction(NORTH_EAST, "NORTH_EAST", "NORTH_EAST");
d299 1
a299 1
	 * The '<em><b>SOUTH EAST</b></em>' literal object.
d302 1
a302 1
	 * @@see #SOUTH_EAST
d306 1
a306 11
	public static final Direction SOUTH_EAST_LITERAL = new Direction(SOUTH_EAST, "SOUTH_EAST", "SOUTH_EAST");

	/**
	 * The '<em><b>VERTICAL</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #VERTICAL
	 * @@generated
	 * @@ordered
	 */
	public static final Direction VERTICAL_LITERAL = new Direction(VERTICAL, "VERTICAL", "VERTICAL");
d309 1
a309 1
	 * The '<em><b>HORIZONTAL</b></em>' literal object.
d312 1
a312 1
	 * @@see #HORIZONTAL
d316 1
a316 1
	public static final Direction HORIZONTAL_LITERAL = new Direction(HORIZONTAL, "HORIZONTAL", "HORIZONTAL");
d319 1
a319 1
	 * The '<em><b>ALL</b></em>' literal object.
d322 1
a322 1
	 * @@see #ALL
d326 1
a326 1
	public static final Direction ALL_LITERAL = new Direction(ALL, "ALL", "ALL");
d339 1
d341 1
a341 1
			WEST_LITERAL,
d343 1
a343 1
			NORTH_EAST_LITERAL,
d345 3
a347 4
			SOUTH_EAST_LITERAL,
			VERTICAL_LITERAL,
			HORIZONTAL_LITERAL,
			ALL_LITERAL,
d401 1
d403 1
a403 1
			case WEST: return WEST_LITERAL;
d405 1
a405 1
			case NORTH_EAST: return NORTH_EAST_LITERAL;
d407 3
a409 4
			case SOUTH_EAST: return SOUTH_EAST_LITERAL;
			case VERTICAL: return VERTICAL_LITERAL;
			case HORIZONTAL: return HORIZONTAL_LITERAL;
			case ALL: return ALL_LITERAL;
@


1.3
log
@move towards more draw2d-like model
@
text
@d191 15
d316 10
d344 1
d406 1
@


1.2
log
@minor updates according to recent comments
single impl bundle per gallery
[+] Figure.getResolvedChildren to substitute figureRefs with actual figures they reference
@
text
@d198 1
a198 1
	public static final Direction NONE_LITERAL = new Direction(NONE, "NONE");
d208 1
a208 1
	public static final Direction NORTH_LITERAL = new Direction(NORTH, "NORTH");
d218 1
a218 1
	public static final Direction SOUTH_LITERAL = new Direction(SOUTH, "SOUTH");
d228 1
a228 1
	public static final Direction EAST_LITERAL = new Direction(EAST, "EAST");
d238 1
a238 1
	public static final Direction WEST_LITERAL = new Direction(WEST, "WEST");
d248 1
a248 1
	public static final Direction NORTH_WEST_LITERAL = new Direction(NORTH_WEST, "NORTH_WEST");
d258 1
a258 1
	public static final Direction NORTH_EAST_LITERAL = new Direction(NORTH_EAST, "NORTH_EAST");
d268 1
a268 1
	public static final Direction SOUTH_WEST_LITERAL = new Direction(SOUTH_WEST, "SOUTH_WEST");
d278 1
a278 1
	public static final Direction SOUTH_EAST_LITERAL = new Direction(SOUTH_EAST, "SOUTH_EAST");
d288 1
a288 1
	public static final Direction VERTICAL_LITERAL = new Direction(VERTICAL, "VERTICAL");
d298 1
a298 1
	public static final Direction HORIZONTAL_LITERAL = new Direction(HORIZONTAL, "HORIZONTAL");
d330 16
d351 1
a351 1
	public static Direction get(String name) {
d354 1
a354 1
			if (result.toString().equals(name)) {
d362 1
a362 1
	 * Returns the '<em><b>Direction</b></em>' literal with the specified value.
d390 2
a391 2
	private Direction(int value, String name) {
		super(value, name);
@


1.1
log
@#114177 gmfgraph model to replace diadef model
@
text
@d26 15
d191 10
d308 1
d353 1
@

