head	1.7;
access;
symbols
	v20080813-1520:1.7
	v20080807-1333:1.7
	v20080806-1520:1.7
	v20080731-1520:1.7
	v20080722-1827:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.4
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080528-1052:1.7
	v20080521:1.7
	v20080425-1959:1.7
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20080215-1500:1.7
	v20080207-0207:1.7
	v20071214-1111:1.7
	v20071003-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070420-1000:1.6
	v20070330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.5
	v20070208-1800:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.3
	RC2_10:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.1
	I20051223-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2007.05.28.13.33.36;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	3de9465ada274567;

1.6
date	2007.03.20.16.18.18;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	70ab460009494567;

1.5
date	2007.03.14.12.59.17;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	109645f7f19c4567;

1.4
date	2006.05.23.21.09.56;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.14.10.11.40;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.05.17.33.08;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.22.12.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.7
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.Compartment;
import org.eclipse.gmf.gmfgraph.Connection;
import org.eclipse.gmf.gmfgraph.DiagramLabel;
import org.eclipse.gmf.gmfgraph.FigureGallery;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.Node;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Canvas</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.CanvasImpl#getName <em>Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.CanvasImpl#getFigures <em>Figures</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.CanvasImpl#getNodes <em>Nodes</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.CanvasImpl#getConnections <em>Connections</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.CanvasImpl#getCompartments <em>Compartments</em>}</li>
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.CanvasImpl#getLabels <em>Labels</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class CanvasImpl extends EObjectImpl implements Canvas {
	/**
	 * The default value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getFigures() <em>Figures</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFigures()
	 * @@generated
	 * @@ordered
	 */
	protected EList<FigureGallery> figures;

	/**
	 * The cached value of the '{@@link #getNodes() <em>Nodes</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNodes()
	 * @@generated
	 * @@ordered
	 */
	protected EList<Node> nodes;

	/**
	 * The cached value of the '{@@link #getConnections() <em>Connections</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getConnections()
	 * @@generated
	 * @@ordered
	 */
	protected EList<Connection> connections;

	/**
	 * The cached value of the '{@@link #getCompartments() <em>Compartments</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getCompartments()
	 * @@generated
	 * @@ordered
	 */
	protected EList<Compartment> compartments;

	/**
	 * The cached value of the '{@@link #getLabels() <em>Labels</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLabels()
	 * @@generated
	 * @@ordered
	 */
	protected EList<DiagramLabel> labels;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected CanvasImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGraphPackage.eINSTANCE.getCanvas();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGraphPackage.CANVAS__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<FigureGallery> getFigures() {
		if (figures == null) {
			figures = new EObjectContainmentEList<FigureGallery>(FigureGallery.class, this, GMFGraphPackage.CANVAS__FIGURES);
		}
		return figures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<Node> getNodes() {
		if (nodes == null) {
			nodes = new EObjectContainmentEList<Node>(Node.class, this, GMFGraphPackage.CANVAS__NODES);
		}
		return nodes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<Connection> getConnections() {
		if (connections == null) {
			connections = new EObjectContainmentEList<Connection>(Connection.class, this, GMFGraphPackage.CANVAS__CONNECTIONS);
		}
		return connections;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<Compartment> getCompartments() {
		if (compartments == null) {
			compartments = new EObjectContainmentEList<Compartment>(Compartment.class, this, GMFGraphPackage.CANVAS__COMPARTMENTS);
		}
		return compartments;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<DiagramLabel> getLabels() {
		if (labels == null) {
			labels = new EObjectContainmentEList<DiagramLabel>(DiagramLabel.class, this, GMFGraphPackage.CANVAS__LABELS);
		}
		return labels;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGraphPackage.CANVAS__FIGURES:
				return ((InternalEList<?>)getFigures()).basicRemove(otherEnd, msgs);
			case GMFGraphPackage.CANVAS__NODES:
				return ((InternalEList<?>)getNodes()).basicRemove(otherEnd, msgs);
			case GMFGraphPackage.CANVAS__CONNECTIONS:
				return ((InternalEList<?>)getConnections()).basicRemove(otherEnd, msgs);
			case GMFGraphPackage.CANVAS__COMPARTMENTS:
				return ((InternalEList<?>)getCompartments()).basicRemove(otherEnd, msgs);
			case GMFGraphPackage.CANVAS__LABELS:
				return ((InternalEList<?>)getLabels()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGraphPackage.CANVAS__NAME:
				return getName();
			case GMFGraphPackage.CANVAS__FIGURES:
				return getFigures();
			case GMFGraphPackage.CANVAS__NODES:
				return getNodes();
			case GMFGraphPackage.CANVAS__CONNECTIONS:
				return getConnections();
			case GMFGraphPackage.CANVAS__COMPARTMENTS:
				return getCompartments();
			case GMFGraphPackage.CANVAS__LABELS:
				return getLabels();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGraphPackage.CANVAS__NAME:
				setName((String)newValue);
				return;
			case GMFGraphPackage.CANVAS__FIGURES:
				getFigures().clear();
				getFigures().addAll((Collection<? extends FigureGallery>)newValue);
				return;
			case GMFGraphPackage.CANVAS__NODES:
				getNodes().clear();
				getNodes().addAll((Collection<? extends Node>)newValue);
				return;
			case GMFGraphPackage.CANVAS__CONNECTIONS:
				getConnections().clear();
				getConnections().addAll((Collection<? extends Connection>)newValue);
				return;
			case GMFGraphPackage.CANVAS__COMPARTMENTS:
				getCompartments().clear();
				getCompartments().addAll((Collection<? extends Compartment>)newValue);
				return;
			case GMFGraphPackage.CANVAS__LABELS:
				getLabels().clear();
				getLabels().addAll((Collection<? extends DiagramLabel>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.CANVAS__NAME:
				setName(NAME_EDEFAULT);
				return;
			case GMFGraphPackage.CANVAS__FIGURES:
				getFigures().clear();
				return;
			case GMFGraphPackage.CANVAS__NODES:
				getNodes().clear();
				return;
			case GMFGraphPackage.CANVAS__CONNECTIONS:
				getConnections().clear();
				return;
			case GMFGraphPackage.CANVAS__COMPARTMENTS:
				getCompartments().clear();
				return;
			case GMFGraphPackage.CANVAS__LABELS:
				getLabels().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGraphPackage.CANVAS__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case GMFGraphPackage.CANVAS__FIGURES:
				return figures != null && !figures.isEmpty();
			case GMFGraphPackage.CANVAS__NODES:
				return nodes != null && !nodes.isEmpty();
			case GMFGraphPackage.CANVAS__CONNECTIONS:
				return connections != null && !connections.isEmpty();
			case GMFGraphPackage.CANVAS__COMPARTMENTS:
				return compartments != null && !compartments.isEmpty();
			case GMFGraphPackage.CANVAS__LABELS:
				return labels != null && !labels.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(')');
		return result.toString();
	}

} //CanvasImpl
@


1.6
log
@EMF 2.3 M5 and Java 5 cleanup
@
text
@d75 1
a75 1
	protected EList<FigureGallery> figures = null;
d85 1
a85 1
	protected EList<Node> nodes = null;
d95 1
a95 1
	protected EList<Connection> connections = null;
d105 1
a105 1
	protected EList<Compartment> compartments = null;
d115 1
a115 1
	protected EList<DiagramLabel> labels = null;
@


1.5
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d269 1
a269 1
		@@Override
@


1.4
log
@#140887 Remove Child interface from GMFGraph.
Although the need to reference child figures persist, thus FigureHandle was introduced, to allow diagramElements to reference either *generateable* figures (Figure subclasses) or *just-use* figures (like CustomFigure and FigureAccessor).
Refactoring performed with #131365 "Mirror GMFGraph model when generating standalone figure plugin" in mind
@
text
@d75 1
a75 1
	protected EList figures = null;
d85 1
a85 1
	protected EList nodes = null;
d95 1
a95 1
	protected EList connections = null;
d105 1
a105 1
	protected EList compartments = null;
d115 1
a115 1
	protected EList labels = null;
d131 1
d162 1
a162 1
	public EList getFigures() {
d164 1
a164 1
			figures = new EObjectContainmentEList(FigureGallery.class, this, GMFGraphPackage.CANVAS__FIGURES);
d174 1
a174 1
	public EList getNodes() {
d176 1
a176 1
			nodes = new EObjectContainmentEList(Node.class, this, GMFGraphPackage.CANVAS__NODES);
d186 1
a186 1
	public EList getConnections() {
d188 1
a188 1
			connections = new EObjectContainmentEList(Connection.class, this, GMFGraphPackage.CANVAS__CONNECTIONS);
d198 1
a198 1
	public EList getCompartments() {
d200 1
a200 1
			compartments = new EObjectContainmentEList(Compartment.class, this, GMFGraphPackage.CANVAS__COMPARTMENTS);
d210 1
a210 1
	public EList getLabels() {
d212 1
a212 1
			labels = new EObjectContainmentEList(DiagramLabel.class, this, GMFGraphPackage.CANVAS__LABELS);
d222 1
d226 1
a226 1
				return ((InternalEList)getFigures()).basicRemove(otherEnd, msgs);
d228 1
a228 1
				return ((InternalEList)getNodes()).basicRemove(otherEnd, msgs);
d230 1
a230 1
				return ((InternalEList)getConnections()).basicRemove(otherEnd, msgs);
d232 1
a232 1
				return ((InternalEList)getCompartments()).basicRemove(otherEnd, msgs);
d234 1
a234 1
				return ((InternalEList)getLabels()).basicRemove(otherEnd, msgs);
d244 1
d268 2
d277 1
a277 1
				getFigures().addAll((Collection)newValue);
d281 1
a281 1
				getNodes().addAll((Collection)newValue);
d285 1
a285 1
				getConnections().addAll((Collection)newValue);
d289 1
a289 1
				getCompartments().addAll((Collection)newValue);
d293 1
a293 1
				getLabels().addAll((Collection)newValue);
d304 1
d334 1
d358 1
@


1.3
log
@#127461 add label diagram element in gmfgraph model
@
text
@a20 1
import org.eclipse.gmf.gmfgraph.Child;
a39 1
 *   <li>{@@link org.eclipse.gmf.gmfgraph.impl.CanvasImpl#getChildren <em>Children</em>}</li>
a107 10
	 * The cached value of the '{@@link #getChildren() <em>Children</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getChildren()
	 * @@generated
	 * @@ordered
	 */
	protected EList children = null;

	/**
a208 12
	public EList getChildren() {
		if (children == null) {
			children = new EObjectContainmentEList(Child.class, this, GMFGraphPackage.CANVAS__CHILDREN);
		}
		return children;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a230 2
			case GMFGraphPackage.CANVAS__CHILDREN:
				return ((InternalEList)getChildren()).basicRemove(otherEnd, msgs);
a253 2
			case GMFGraphPackage.CANVAS__CHILDREN:
				return getChildren();
a285 4
			case GMFGraphPackage.CANVAS__CHILDREN:
				getChildren().clear();
				getChildren().addAll((Collection)newValue);
				return;
a315 3
			case GMFGraphPackage.CANVAS__CHILDREN:
				getChildren().clear();
				return;
a339 2
			case GMFGraphPackage.CANVAS__CHILDREN:
				return children != null && !children.isEmpty();
@


1.2
log
@move towards more draw2d-like model
@
text
@d24 1
d42 1
d120 10
d233 12
d257 2
d282 2
d318 4
d351 3
d377 2
@


1.1
log
@#114177 gmfgraph model to replace diadef model
@
text
@a14 1
import org.eclipse.emf.ecore.EStructuralFeature;
d221 12
a232 16
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGraphPackage.CANVAS__FIGURES:
					return ((InternalEList)getFigures()).basicRemove(otherEnd, msgs);
				case GMFGraphPackage.CANVAS__NODES:
					return ((InternalEList)getNodes()).basicRemove(otherEnd, msgs);
				case GMFGraphPackage.CANVAS__CONNECTIONS:
					return ((InternalEList)getConnections()).basicRemove(otherEnd, msgs);
				case GMFGraphPackage.CANVAS__COMPARTMENTS:
					return ((InternalEList)getCompartments()).basicRemove(otherEnd, msgs);
				case GMFGraphPackage.CANVAS__CHILDREN:
					return ((InternalEList)getChildren()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d234 1
a234 1
		return eBasicSetContainer(null, featureID, msgs);
d242 2
a243 2
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d257 1
a257 1
		return eDynamicGet(eFeature, resolve);
d265 2
a266 2
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d291 1
a291 1
		eDynamicSet(eFeature, newValue);
d299 2
a300 2
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d320 1
a320 1
		eDynamicUnset(eFeature);
d328 2
a329 2
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d343 1
a343 1
		return eDynamicIsSet(eFeature);
@

