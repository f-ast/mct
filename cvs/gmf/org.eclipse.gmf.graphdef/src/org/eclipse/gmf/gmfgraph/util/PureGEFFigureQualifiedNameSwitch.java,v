head	1.6;
access;
symbols
	v20080813-1520:1.6
	v20080807-1333:1.6
	v20080806-1520:1.6
	v20080731-1520:1.6
	v20080722-1827:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.2
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080528-1052:1.6
	v20080521:1.5
	v20080425-1959:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080207-0207:1.5
	v20071214-1111:1.5
	v20071003-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070420-1000:1.4
	v20070330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070208-1800:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060919-0800:1.1
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	RC2_10:1.1
	I20060505-1400:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2008.05.21.17.10.17;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	b0d483457794567;

1.5
date	2007.06.21.14.22.08;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	289f467a898f4567;

1.4
date	2007.04.17.14.04.40;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	20994624d3f84567;

1.3
date	2007.03.14.12.59.18;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	109645f7f19c4567;

1.2
date	2006.08.24.15.38.47;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.10.52.36;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[139126] respect implementation bundle of custom borders and layouts: documenting, depreciating FQNSwitch as it's only use is to detect dependencies which doesn't require rest of the code to be there (figure fqns)
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.gmfgraph.util;

import org.eclipse.emf.common.util.UniqueEList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.common.codegen.ImportAssistant;
import org.eclipse.gmf.gmfgraph.BorderLayout;
import org.eclipse.gmf.gmfgraph.CustomClass;
import org.eclipse.gmf.gmfgraph.Ellipse;
import org.eclipse.gmf.gmfgraph.FigureGallery;
import org.eclipse.gmf.gmfgraph.FlowLayout;
import org.eclipse.gmf.gmfgraph.GridLayout;
import org.eclipse.gmf.gmfgraph.GridLayoutData;
import org.eclipse.gmf.gmfgraph.Label;
import org.eclipse.gmf.gmfgraph.LabeledContainer;
import org.eclipse.gmf.gmfgraph.Polygon;
import org.eclipse.gmf.gmfgraph.PolygonDecoration;
import org.eclipse.gmf.gmfgraph.Polyline;
import org.eclipse.gmf.gmfgraph.PolylineConnection;
import org.eclipse.gmf.gmfgraph.PolylineDecoration;
import org.eclipse.gmf.gmfgraph.Rectangle;
import org.eclipse.gmf.gmfgraph.RoundedRectangle;
import org.eclipse.gmf.gmfgraph.ScalablePolygon;
import org.eclipse.gmf.gmfgraph.StackLayout;
import org.eclipse.gmf.gmfgraph.XYLayout;
import org.eclipse.gmf.gmfgraph.XYLayoutData;

/**
 * @@author artem
 */
@@Deprecated
class PureGEFFigureQualifiedNameSwitch extends GMFGraphSwitch<String> implements FigureQualifiedNameSwitch  {

	public String get(EObject gmfgraphObject) {
		return doSwitch(gmfgraphObject);
	}

	public String get(EObject gmfgraphObject, ImportAssistant importManager) {
		return importManager.getImportedName(get(gmfgraphObject));
	}

	public String[] getDependencies(FigureGallery gallery) {
		UniqueEList<String> rv = new UniqueEList<String>(); // FIXME why UniqueEList, not Set?
		collectDependencies(gallery, rv);
		return rv.toArray(new String[rv.size()]);
	}

	protected void collectDependencies(FigureGallery gallery, UniqueEList<String> result) {
		final String pluginBasicDraw2d = "org.eclipse.draw2d"; //$NON-NLS-1$
		if (usesDraw2dFigures(gallery)) {
			result.add(pluginBasicDraw2d);
		}
		if (gallery.getImplementationBundle() != null){
			result.add(gallery.getImplementationBundle());
		}
	}

	private boolean usesDraw2dFigures(FigureGallery gallery) {
		// assume draw2d always used
		return !gallery.getFigures().isEmpty();
	}

	public String caseCustomClass(CustomClass object) {
		return object.getQualifiedClassName();
	}

	public String caseFlowLayout(FlowLayout object) {
		return object.isForceSingleLine() ? "org.eclipse.draw2d.ToolbarLayout" : "org.eclipse.draw2d.FlowLayout";
	}
	
	public String caseXYLayout(XYLayout object) {
		return "org.eclipse.draw2d.XYLayout";
	}
	
	public String caseXYLayoutData(XYLayoutData object) {
		return "org.eclipse.draw2d.geometry.Rectangle";
	}
	
	public String caseStackLayout(StackLayout object) {
		return "org.eclipse.draw2d.StackLayout";
	}

	public String caseBorderLayout(BorderLayout object) {
		return "org.eclipse.draw2d.BorderLayout";
	}

	public String caseLabel(Label object) {
		return "org.eclipse.draw2d.Label"; //$NON-NLS-1$
	}

	public String caseLabeledContainer(LabeledContainer object) {
		return "org.eclipse.draw2d.LabeledContainer"; //$NON-NLS-1$
	}

	public String caseRectangle(Rectangle object) {
		return "org.eclipse.draw2d.RectangleFigure"; //$NON-NLS-1$
	}

	public String caseRoundedRectangle(RoundedRectangle object) {
		return "org.eclipse.draw2d.RoundedRectangle"; //$NON-NLS-1$
	}

	public String caseEllipse(Ellipse object) {
		return "org.eclipse.draw2d.Ellipse"; //$NON-NLS-1$
	}

	public String casePolygon(Polygon object) {
		return "org.eclipse.draw2d.Polygon"; //$NON-NLS-1$
	}
	
	public String caseScalablePolygon(ScalablePolygon object) {
		//custom implementation
		return object.eContainer() instanceof FigureGallery ? 
				"org.eclipse.draw2d.Shape" : //$NON-NLS-1$
				"ScalablePolygon";
	}

	public String casePolygonDecoration(PolygonDecoration object) {
		return "org.eclipse.draw2d.PolygonDecoration"; //$NON-NLS-1$
	}

	public String casePolyline(Polyline object) {
		return "org.eclipse.draw2d.Polyline"; //$NON-NLS-1$
	}

	public String casePolylineDecoration(PolylineDecoration object) {
		return "org.eclipse.draw2d.PolylineDecoration"; //$NON-NLS-1$
	}

	public String casePolylineConnection(PolylineConnection object) {
		return "org.eclipse.draw2d.PolylineConnection"; //$NON-NLS-1$
	}
	
	public String caseGridLayout(GridLayout object) {
		return "org.eclipse.draw2d.GridLayout";
	}

	public String caseGridLayoutData(GridLayoutData object) {
		return "org.eclipse.draw2d.GridData";
	}
	
}
@


1.5
log
@fix copyright years
@
text
@d41 1
@


1.4
log
@[133279] mgolubev - GridLayout generated code points to unavailable package.
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.3
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d22 2
d142 9
@


1.2
log
@[154687] mgolubev - Support scalable polygons
@
text
@d39 1
a39 1
class PureGEFFigureQualifiedNameSwitch extends GMFGraphSwitch implements FigureQualifiedNameSwitch  {
d42 1
a42 1
		return (String) doSwitch(gmfgraphObject);
d50 1
a50 1
		UniqueEList rv = new UniqueEList();
d52 1
a52 1
		return (String[]) rv.toArray(new String[rv.size()]);
d55 1
a55 1
	protected void collectDependencies(FigureGallery gallery, UniqueEList result) {
d70 1
a70 1
	public Object caseCustomClass(CustomClass object) {
d74 1
a74 1
	public Object caseFlowLayout(FlowLayout object) {
d78 1
a78 1
	public Object caseXYLayout(XYLayout object) {
d82 1
a82 1
	public Object caseXYLayoutData(XYLayoutData object) {
d86 1
a86 1
	public Object caseStackLayout(StackLayout object) {
d90 1
a90 1
	public Object caseBorderLayout(BorderLayout object) {
d94 1
a94 1
	public Object caseLabel(Label object) {
d98 1
a98 1
	public Object caseLabeledContainer(LabeledContainer object) {
d102 1
a102 1
	public Object caseRectangle(Rectangle object) {
d106 1
a106 1
	public Object caseRoundedRectangle(RoundedRectangle object) {
d110 1
a110 1
	public Object caseEllipse(Ellipse object) {
d114 1
a114 1
	public Object casePolygon(Polygon object) {
d118 1
a118 1
	public Object caseScalablePolygon(ScalablePolygon object) {
d125 1
a125 1
	public Object casePolygonDecoration(PolygonDecoration object) {
d129 1
a129 1
	public Object casePolyline(Polyline object) {
d133 1
a133 1
	public Object casePolylineDecoration(PolylineDecoration object) {
d137 1
a137 1
	public Object casePolylineConnection(PolylineConnection object) {
@


1.1
log
@refactor to facilitate reuse in codegen.lite
@
text
@d31 1
d117 7
@

