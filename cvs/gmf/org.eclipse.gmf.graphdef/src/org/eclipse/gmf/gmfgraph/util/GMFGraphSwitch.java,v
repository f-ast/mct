head	1.22;
access;
symbols
	v20080813-1520:1.22
	v20080807-1333:1.22
	v20080806-1520:1.22
	v20080731-1520:1.21
	v20080722-1827:1.20
	v20080716-1642:1.20
	R2_1_maintenance:1.20.0.2
	Root_R2_1_maintenance:1.20
	R2_1_0:1.20
	v20080528-1052:1.20
	v20080521:1.19
	v20080425-1959:1.19
	v20080322-0000:1.19
	v20080222-1200:1.19
	v20080215-1500:1.19
	v20080207-0207:1.18
	v20071214-1111:1.19
	v20071003-0000:1.19
	v20070809-0000:1.18
	R2_0_maintenance:1.18.0.2
	R2_0:1.18
	R4_20:1.18
	v20070621-0000:1.18
	RC3_20:1.18
	v20070605-1400:1.18
	v20070601-1400:1.18
	v20070420-1000:1.17
	v20070330-1300:1.17
	v20070322-1100:1.17
	v20060316-0600:1.17
	v20070208-1800:1.16
	M4_20:1.16
	v20061214-0000:1.16
	M3_20:1.16
	v20061013-1330:1.16
	v20060919-0800:1.14
	M1_20:1.16
	v20060904-1500:1.16
	v20060713-1700:1.14
	R1_0_maintenance:1.14.0.2
	R1_0:1.14
	v20060627-1200:1.14
	v20060626-1420:1.14
	v20060616-1200:1.13
	v20060609-1400:1.13
	v20060531-1730:1.12
	v20060530-1930:1.12
	v20060526-1200:1.12
	v20060519-0800:1.10
	RC2_10:1.9
	I20060505-1400:1.9
	I20060424-0500:1.9
	I20060424-0300:1.9
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.7
	I20060216-1945:1.6
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.1
	I20051223-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.22
date	2008.08.05.12.42.37;	author dstadnik;	state Exp;
branches;
next	1.21;
commitid	18be48984a924567;

1.21
date	2008.07.31.12.17.13;	author dstadnik;	state Exp;
branches;
next	1.20;
commitid	4bcc4891ad0b4567;

1.20
date	2008.05.21.16.42.10;	author atikhomirov;	state Exp;
branches;
next	1.19;
commitid	6f3c483450df4567;

1.19
date	2007.09.28.16.09.43;	author ashatalin;	state Exp;
branches;
next	1.18;
commitid	77f446fd27454567;

1.18
date	2007.05.28.13.33.36;	author atikhomirov;	state Exp;
branches;
next	1.17;
commitid	3de9465ada274567;

1.17
date	2007.03.14.12.59.18;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	109645f7f19c4567;

1.16
date	2006.09.01.17.49.34;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2006.08.24.15.38.47;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.26.13.42.59;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.05.14.26.30;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.24.14.50.56;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.23.21.09.56;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.14.18.06.37;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.20.13.59.38;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.07.18.39.24;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.22.22.01.35;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.15.14.44.43;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.14.10.11.40;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.13.17.36.31;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.04.23.36.21;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.05.17.33.08;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.06.22.12.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.22
log
@[243050] support AOI in gmfgraph
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.gmfgraph.util;

import java.util.List;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.gmfgraph.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @@see org.eclipse.gmf.gmfgraph.GMFGraphPackage
 * @@generated
 */
public class GMFGraphSwitch<T> {
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected static GMFGraphPackage modelPackage;

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GMFGraphSwitch() {
		if (modelPackage == null) {
			modelPackage = GMFGraphPackage.eINSTANCE;
		}
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@return the first non-null result returned by a <code>caseXXX</code> call.
	 * @@generated
	 */
	public T doSwitch(EObject theEObject) {
		return doSwitch(theEObject.eClass(), theEObject);
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@return the first non-null result returned by a <code>caseXXX</code> call.
	 * @@generated
	 */
	protected T doSwitch(EClass theEClass, EObject theEObject) {
		if (theEClass.eContainer() == modelPackage) {
			return doSwitch(theEClass.getClassifierID(), theEObject);
		}
		else {
			List<EClass> eSuperTypes = theEClass.getESuperTypes();
			return
				eSuperTypes.isEmpty() ?
					defaultCase(theEObject) :
					doSwitch(eSuperTypes.get(0), theEObject);
		}
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@return the first non-null result returned by a <code>caseXXX</code> call.
	 * @@generated
	 */
	protected T doSwitch(int classifierID, EObject theEObject) {
		switch (classifierID) {
			case GMFGraphPackage.CANVAS: {
				Canvas canvas = (Canvas)theEObject;
				T result = caseCanvas(canvas);
				if (result == null) result = caseIdentity(canvas);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.FIGURE_GALLERY: {
				FigureGallery figureGallery = (FigureGallery)theEObject;
				T result = caseFigureGallery(figureGallery);
				if (result == null) result = caseIdentity(figureGallery);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.IDENTITY: {
				Identity identity = (Identity)theEObject;
				T result = caseIdentity(identity);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.DIAGRAM_ELEMENT: {
				DiagramElement diagramElement = (DiagramElement)theEObject;
				T result = caseDiagramElement(diagramElement);
				if (result == null) result = caseIdentity(diagramElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.ABSTRACT_NODE: {
				AbstractNode abstractNode = (AbstractNode)theEObject;
				T result = caseAbstractNode(abstractNode);
				if (result == null) result = caseDiagramElement(abstractNode);
				if (result == null) result = caseIdentity(abstractNode);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.NODE: {
				Node node = (Node)theEObject;
				T result = caseNode(node);
				if (result == null) result = caseAbstractNode(node);
				if (result == null) result = caseDiagramElement(node);
				if (result == null) result = caseIdentity(node);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.CONNECTION: {
				Connection connection = (Connection)theEObject;
				T result = caseConnection(connection);
				if (result == null) result = caseDiagramElement(connection);
				if (result == null) result = caseIdentity(connection);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.COMPARTMENT: {
				Compartment compartment = (Compartment)theEObject;
				T result = caseCompartment(compartment);
				if (result == null) result = caseDiagramElement(compartment);
				if (result == null) result = caseIdentity(compartment);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.DIAGRAM_LABEL: {
				DiagramLabel diagramLabel = (DiagramLabel)theEObject;
				T result = caseDiagramLabel(diagramLabel);
				if (result == null) result = caseNode(diagramLabel);
				if (result == null) result = caseAbstractNode(diagramLabel);
				if (result == null) result = caseDiagramElement(diagramLabel);
				if (result == null) result = caseIdentity(diagramLabel);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.VISUAL_FACET: {
				VisualFacet visualFacet = (VisualFacet)theEObject;
				T result = caseVisualFacet(visualFacet);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.GENERAL_FACET: {
				GeneralFacet generalFacet = (GeneralFacet)theEObject;
				T result = caseGeneralFacet(generalFacet);
				if (result == null) result = caseVisualFacet(generalFacet);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.ALIGNMENT_FACET: {
				AlignmentFacet alignmentFacet = (AlignmentFacet)theEObject;
				T result = caseAlignmentFacet(alignmentFacet);
				if (result == null) result = caseVisualFacet(alignmentFacet);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.GRADIENT_FACET: {
				GradientFacet gradientFacet = (GradientFacet)theEObject;
				T result = caseGradientFacet(gradientFacet);
				if (result == null) result = caseVisualFacet(gradientFacet);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.LABEL_OFFSET_FACET: {
				LabelOffsetFacet labelOffsetFacet = (LabelOffsetFacet)theEObject;
				T result = caseLabelOffsetFacet(labelOffsetFacet);
				if (result == null) result = caseVisualFacet(labelOffsetFacet);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.DEFAULT_SIZE_FACET: {
				DefaultSizeFacet defaultSizeFacet = (DefaultSizeFacet)theEObject;
				T result = caseDefaultSizeFacet(defaultSizeFacet);
				if (result == null) result = caseVisualFacet(defaultSizeFacet);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.FIGURE: {
				Figure figure = (Figure)theEObject;
				T result = caseFigure(figure);
				if (result == null) result = caseLayoutable(figure);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.ABSTRACT_FIGURE: {
				AbstractFigure abstractFigure = (AbstractFigure)theEObject;
				T result = caseAbstractFigure(abstractFigure);
				if (result == null) result = caseFigure(abstractFigure);
				if (result == null) result = caseLayoutable(abstractFigure);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.FIGURE_DESCRIPTOR: {
				FigureDescriptor figureDescriptor = (FigureDescriptor)theEObject;
				T result = caseFigureDescriptor(figureDescriptor);
				if (result == null) result = caseIdentity(figureDescriptor);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.CHILD_ACCESS: {
				ChildAccess childAccess = (ChildAccess)theEObject;
				T result = caseChildAccess(childAccess);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.REAL_FIGURE: {
				RealFigure realFigure = (RealFigure)theEObject;
				T result = caseRealFigure(realFigure);
				if (result == null) result = caseAbstractFigure(realFigure);
				if (result == null) result = caseFigure(realFigure);
				if (result == null) result = caseLayoutable(realFigure);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.FIGURE_REF: {
				FigureRef figureRef = (FigureRef)theEObject;
				T result = caseFigureRef(figureRef);
				if (result == null) result = caseAbstractFigure(figureRef);
				if (result == null) result = caseFigure(figureRef);
				if (result == null) result = caseLayoutable(figureRef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.CONNECTION_FIGURE: {
				ConnectionFigure connectionFigure = (ConnectionFigure)theEObject;
				T result = caseConnectionFigure(connectionFigure);
				if (result == null) result = caseRealFigure(connectionFigure);
				if (result == null) result = caseAbstractFigure(connectionFigure);
				if (result == null) result = caseFigure(connectionFigure);
				if (result == null) result = caseLayoutable(connectionFigure);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.DECORATION_FIGURE: {
				DecorationFigure decorationFigure = (DecorationFigure)theEObject;
				T result = caseDecorationFigure(decorationFigure);
				if (result == null) result = caseRealFigure(decorationFigure);
				if (result == null) result = caseAbstractFigure(decorationFigure);
				if (result == null) result = caseFigure(decorationFigure);
				if (result == null) result = caseLayoutable(decorationFigure);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.SHAPE: {
				Shape shape = (Shape)theEObject;
				T result = caseShape(shape);
				if (result == null) result = caseRealFigure(shape);
				if (result == null) result = caseAbstractFigure(shape);
				if (result == null) result = caseFigure(shape);
				if (result == null) result = caseLayoutable(shape);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.LABEL: {
				Label label = (Label)theEObject;
				T result = caseLabel(label);
				if (result == null) result = caseRealFigure(label);
				if (result == null) result = caseAbstractFigure(label);
				if (result == null) result = caseFigure(label);
				if (result == null) result = caseLayoutable(label);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.LABELED_CONTAINER: {
				LabeledContainer labeledContainer = (LabeledContainer)theEObject;
				T result = caseLabeledContainer(labeledContainer);
				if (result == null) result = caseRealFigure(labeledContainer);
				if (result == null) result = caseAbstractFigure(labeledContainer);
				if (result == null) result = caseFigure(labeledContainer);
				if (result == null) result = caseLayoutable(labeledContainer);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.RECTANGLE: {
				Rectangle rectangle = (Rectangle)theEObject;
				T result = caseRectangle(rectangle);
				if (result == null) result = caseShape(rectangle);
				if (result == null) result = caseRealFigure(rectangle);
				if (result == null) result = caseAbstractFigure(rectangle);
				if (result == null) result = caseFigure(rectangle);
				if (result == null) result = caseLayoutable(rectangle);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.ROUNDED_RECTANGLE: {
				RoundedRectangle roundedRectangle = (RoundedRectangle)theEObject;
				T result = caseRoundedRectangle(roundedRectangle);
				if (result == null) result = caseShape(roundedRectangle);
				if (result == null) result = caseRealFigure(roundedRectangle);
				if (result == null) result = caseAbstractFigure(roundedRectangle);
				if (result == null) result = caseFigure(roundedRectangle);
				if (result == null) result = caseLayoutable(roundedRectangle);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.ELLIPSE: {
				Ellipse ellipse = (Ellipse)theEObject;
				T result = caseEllipse(ellipse);
				if (result == null) result = caseShape(ellipse);
				if (result == null) result = caseRealFigure(ellipse);
				if (result == null) result = caseAbstractFigure(ellipse);
				if (result == null) result = caseFigure(ellipse);
				if (result == null) result = caseLayoutable(ellipse);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.POLYLINE: {
				Polyline polyline = (Polyline)theEObject;
				T result = casePolyline(polyline);
				if (result == null) result = caseShape(polyline);
				if (result == null) result = caseRealFigure(polyline);
				if (result == null) result = caseAbstractFigure(polyline);
				if (result == null) result = caseFigure(polyline);
				if (result == null) result = caseLayoutable(polyline);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.POLYGON: {
				Polygon polygon = (Polygon)theEObject;
				T result = casePolygon(polygon);
				if (result == null) result = casePolyline(polygon);
				if (result == null) result = caseShape(polygon);
				if (result == null) result = caseRealFigure(polygon);
				if (result == null) result = caseAbstractFigure(polygon);
				if (result == null) result = caseFigure(polygon);
				if (result == null) result = caseLayoutable(polygon);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.SCALABLE_POLYGON: {
				ScalablePolygon scalablePolygon = (ScalablePolygon)theEObject;
				T result = caseScalablePolygon(scalablePolygon);
				if (result == null) result = casePolygon(scalablePolygon);
				if (result == null) result = casePolyline(scalablePolygon);
				if (result == null) result = caseShape(scalablePolygon);
				if (result == null) result = caseRealFigure(scalablePolygon);
				if (result == null) result = caseAbstractFigure(scalablePolygon);
				if (result == null) result = caseFigure(scalablePolygon);
				if (result == null) result = caseLayoutable(scalablePolygon);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.POLYLINE_CONNECTION: {
				PolylineConnection polylineConnection = (PolylineConnection)theEObject;
				T result = casePolylineConnection(polylineConnection);
				if (result == null) result = casePolyline(polylineConnection);
				if (result == null) result = caseConnectionFigure(polylineConnection);
				if (result == null) result = caseShape(polylineConnection);
				if (result == null) result = caseRealFigure(polylineConnection);
				if (result == null) result = caseAbstractFigure(polylineConnection);
				if (result == null) result = caseFigure(polylineConnection);
				if (result == null) result = caseLayoutable(polylineConnection);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.POLYLINE_DECORATION: {
				PolylineDecoration polylineDecoration = (PolylineDecoration)theEObject;
				T result = casePolylineDecoration(polylineDecoration);
				if (result == null) result = casePolyline(polylineDecoration);
				if (result == null) result = caseDecorationFigure(polylineDecoration);
				if (result == null) result = caseShape(polylineDecoration);
				if (result == null) result = caseRealFigure(polylineDecoration);
				if (result == null) result = caseAbstractFigure(polylineDecoration);
				if (result == null) result = caseFigure(polylineDecoration);
				if (result == null) result = caseLayoutable(polylineDecoration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.POLYGON_DECORATION: {
				PolygonDecoration polygonDecoration = (PolygonDecoration)theEObject;
				T result = casePolygonDecoration(polygonDecoration);
				if (result == null) result = casePolygon(polygonDecoration);
				if (result == null) result = caseDecorationFigure(polygonDecoration);
				if (result == null) result = casePolyline(polygonDecoration);
				if (result == null) result = caseRealFigure(polygonDecoration);
				if (result == null) result = caseShape(polygonDecoration);
				if (result == null) result = caseAbstractFigure(polygonDecoration);
				if (result == null) result = caseFigure(polygonDecoration);
				if (result == null) result = caseLayoutable(polygonDecoration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.CUSTOM_CLASS: {
				CustomClass customClass = (CustomClass)theEObject;
				T result = caseCustomClass(customClass);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.CUSTOM_ATTRIBUTE: {
				CustomAttribute customAttribute = (CustomAttribute)theEObject;
				T result = caseCustomAttribute(customAttribute);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.FIGURE_ACCESSOR: {
				FigureAccessor figureAccessor = (FigureAccessor)theEObject;
				T result = caseFigureAccessor(figureAccessor);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.CUSTOM_FIGURE: {
				CustomFigure customFigure = (CustomFigure)theEObject;
				T result = caseCustomFigure(customFigure);
				if (result == null) result = caseRealFigure(customFigure);
				if (result == null) result = caseCustomClass(customFigure);
				if (result == null) result = caseAbstractFigure(customFigure);
				if (result == null) result = caseFigure(customFigure);
				if (result == null) result = caseLayoutable(customFigure);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.CUSTOM_DECORATION: {
				CustomDecoration customDecoration = (CustomDecoration)theEObject;
				T result = caseCustomDecoration(customDecoration);
				if (result == null) result = caseCustomFigure(customDecoration);
				if (result == null) result = caseDecorationFigure(customDecoration);
				if (result == null) result = caseRealFigure(customDecoration);
				if (result == null) result = caseCustomClass(customDecoration);
				if (result == null) result = caseAbstractFigure(customDecoration);
				if (result == null) result = caseFigure(customDecoration);
				if (result == null) result = caseLayoutable(customDecoration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.CUSTOM_CONNECTION: {
				CustomConnection customConnection = (CustomConnection)theEObject;
				T result = caseCustomConnection(customConnection);
				if (result == null) result = caseCustomFigure(customConnection);
				if (result == null) result = caseConnectionFigure(customConnection);
				if (result == null) result = caseRealFigure(customConnection);
				if (result == null) result = caseCustomClass(customConnection);
				if (result == null) result = caseAbstractFigure(customConnection);
				if (result == null) result = caseFigure(customConnection);
				if (result == null) result = caseLayoutable(customConnection);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.COLOR: {
				Color color = (Color)theEObject;
				T result = caseColor(color);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.RGB_COLOR: {
				RGBColor rgbColor = (RGBColor)theEObject;
				T result = caseRGBColor(rgbColor);
				if (result == null) result = caseColor(rgbColor);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.CONSTANT_COLOR: {
				ConstantColor constantColor = (ConstantColor)theEObject;
				T result = caseConstantColor(constantColor);
				if (result == null) result = caseColor(constantColor);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.FONT: {
				Font font = (Font)theEObject;
				T result = caseFont(font);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.BASIC_FONT: {
				BasicFont basicFont = (BasicFont)theEObject;
				T result = caseBasicFont(basicFont);
				if (result == null) result = caseFont(basicFont);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.POINT: {
				Point point = (Point)theEObject;
				T result = casePoint(point);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.DIMENSION: {
				Dimension dimension = (Dimension)theEObject;
				T result = caseDimension(dimension);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.INSETS: {
				Insets insets = (Insets)theEObject;
				T result = caseInsets(insets);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.BORDER: {
				Border border = (Border)theEObject;
				T result = caseBorder(border);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.BORDER_REF: {
				BorderRef borderRef = (BorderRef)theEObject;
				T result = caseBorderRef(borderRef);
				if (result == null) result = caseBorder(borderRef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.LINE_BORDER: {
				LineBorder lineBorder = (LineBorder)theEObject;
				T result = caseLineBorder(lineBorder);
				if (result == null) result = caseBorder(lineBorder);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.MARGIN_BORDER: {
				MarginBorder marginBorder = (MarginBorder)theEObject;
				T result = caseMarginBorder(marginBorder);
				if (result == null) result = caseBorder(marginBorder);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.COMPOUND_BORDER: {
				CompoundBorder compoundBorder = (CompoundBorder)theEObject;
				T result = caseCompoundBorder(compoundBorder);
				if (result == null) result = caseBorder(compoundBorder);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.CUSTOM_BORDER: {
				CustomBorder customBorder = (CustomBorder)theEObject;
				T result = caseCustomBorder(customBorder);
				if (result == null) result = caseBorder(customBorder);
				if (result == null) result = caseCustomClass(customBorder);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.LAYOUT_DATA: {
				LayoutData layoutData = (LayoutData)theEObject;
				T result = caseLayoutData(layoutData);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.CUSTOM_LAYOUT_DATA: {
				CustomLayoutData customLayoutData = (CustomLayoutData)theEObject;
				T result = caseCustomLayoutData(customLayoutData);
				if (result == null) result = caseLayoutData(customLayoutData);
				if (result == null) result = caseCustomClass(customLayoutData);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.GRID_LAYOUT_DATA: {
				GridLayoutData gridLayoutData = (GridLayoutData)theEObject;
				T result = caseGridLayoutData(gridLayoutData);
				if (result == null) result = caseLayoutData(gridLayoutData);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.BORDER_LAYOUT_DATA: {
				BorderLayoutData borderLayoutData = (BorderLayoutData)theEObject;
				T result = caseBorderLayoutData(borderLayoutData);
				if (result == null) result = caseLayoutData(borderLayoutData);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.LAYOUTABLE: {
				Layoutable layoutable = (Layoutable)theEObject;
				T result = caseLayoutable(layoutable);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.LAYOUT: {
				Layout layout = (Layout)theEObject;
				T result = caseLayout(layout);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.LAYOUT_REF: {
				LayoutRef layoutRef = (LayoutRef)theEObject;
				T result = caseLayoutRef(layoutRef);
				if (result == null) result = caseLayout(layoutRef);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.CUSTOM_LAYOUT: {
				CustomLayout customLayout = (CustomLayout)theEObject;
				T result = caseCustomLayout(customLayout);
				if (result == null) result = caseLayout(customLayout);
				if (result == null) result = caseCustomClass(customLayout);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.GRID_LAYOUT: {
				GridLayout gridLayout = (GridLayout)theEObject;
				T result = caseGridLayout(gridLayout);
				if (result == null) result = caseLayout(gridLayout);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.BORDER_LAYOUT: {
				BorderLayout borderLayout = (BorderLayout)theEObject;
				T result = caseBorderLayout(borderLayout);
				if (result == null) result = caseLayout(borderLayout);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.FLOW_LAYOUT: {
				FlowLayout flowLayout = (FlowLayout)theEObject;
				T result = caseFlowLayout(flowLayout);
				if (result == null) result = caseLayout(flowLayout);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.XY_LAYOUT: {
				XYLayout xyLayout = (XYLayout)theEObject;
				T result = caseXYLayout(xyLayout);
				if (result == null) result = caseLayout(xyLayout);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.XY_LAYOUT_DATA: {
				XYLayoutData xyLayoutData = (XYLayoutData)theEObject;
				T result = caseXYLayoutData(xyLayoutData);
				if (result == null) result = caseLayoutData(xyLayoutData);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.STACK_LAYOUT: {
				StackLayout stackLayout = (StackLayout)theEObject;
				T result = caseStackLayout(stackLayout);
				if (result == null) result = caseLayout(stackLayout);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.SVG_FIGURE: {
				SVGFigure svgFigure = (SVGFigure)theEObject;
				T result = caseSVGFigure(svgFigure);
				if (result == null) result = caseRealFigure(svgFigure);
				if (result == null) result = caseAbstractFigure(svgFigure);
				if (result == null) result = caseFigure(svgFigure);
				if (result == null) result = caseLayoutable(svgFigure);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.SVG_PROPERTY: {
				SVGProperty svgProperty = (SVGProperty)theEObject;
				T result = caseSVGProperty(svgProperty);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case GMFGraphPackage.RECTANGLE2_D: {
				Rectangle2D rectangle2D = (Rectangle2D)theEObject;
				T result = caseRectangle2D(rectangle2D);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			default: return defaultCase(theEObject);
		}
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Canvas</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Canvas</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCanvas(Canvas object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Figure Gallery</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Figure Gallery</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseFigureGallery(FigureGallery object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Identity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Identity</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseIdentity(Identity object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Diagram Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Diagram Element</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseDiagramElement(DiagramElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Node</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Abstract Node</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseAbstractNode(AbstractNode object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Node</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Node</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseNode(Node object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Child Access</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Child Access</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseChildAccess(ChildAccess object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Real Figure</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Real Figure</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseRealFigure(RealFigure object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Connection</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Connection</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseConnection(Connection object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Compartment</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Compartment</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCompartment(Compartment object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Diagram Label</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Diagram Label</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseDiagramLabel(DiagramLabel object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Visual Facet</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Visual Facet</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseVisualFacet(VisualFacet object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>General Facet</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>General Facet</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseGeneralFacet(GeneralFacet object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Alignment Facet</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Alignment Facet</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseAlignmentFacet(AlignmentFacet object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Gradient Facet</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Gradient Facet</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseGradientFacet(GradientFacet object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Label Offset Facet</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Label Offset Facet</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseLabelOffsetFacet(LabelOffsetFacet object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Default Size Facet</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Default Size Facet</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseDefaultSizeFacet(DefaultSizeFacet object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Figure</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Figure</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseFigure(Figure object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Figure Descriptor</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Figure Descriptor</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseFigureDescriptor(FigureDescriptor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Figure</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Abstract Figure</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseAbstractFigure(AbstractFigure object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Figure Ref</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Figure Ref</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseFigureRef(FigureRef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Connection Figure</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Connection Figure</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseConnectionFigure(ConnectionFigure object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Decoration Figure</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Decoration Figure</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseDecorationFigure(DecorationFigure object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Shape</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Shape</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseShape(Shape object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Label</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Label</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseLabel(Label object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Labeled Container</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Labeled Container</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseLabeledContainer(LabeledContainer object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Rectangle</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Rectangle</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseRectangle(Rectangle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Rounded Rectangle</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Rounded Rectangle</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseRoundedRectangle(RoundedRectangle object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Ellipse</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Ellipse</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseEllipse(Ellipse object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Polyline</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Polyline</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T casePolyline(Polyline object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Polygon</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Polygon</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T casePolygon(Polygon object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Scalable Polygon</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Scalable Polygon</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseScalablePolygon(ScalablePolygon object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Polyline Connection</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Polyline Connection</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T casePolylineConnection(PolylineConnection object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Polyline Decoration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Polyline Decoration</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T casePolylineDecoration(PolylineDecoration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Polygon Decoration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Polygon Decoration</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T casePolygonDecoration(PolygonDecoration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Custom Class</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Custom Class</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCustomClass(CustomClass object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Custom Figure</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Custom Figure</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCustomFigure(CustomFigure object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Custom Decoration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Custom Decoration</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCustomDecoration(CustomDecoration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Custom Connection</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Custom Connection</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCustomConnection(CustomConnection object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Color</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Color</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseColor(Color object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>RGB Color</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>RGB Color</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseRGBColor(RGBColor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Constant Color</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Constant Color</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseConstantColor(ConstantColor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Font</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Font</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseFont(Font object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Basic Font</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Basic Font</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseBasicFont(BasicFont object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Point</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Point</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T casePoint(Point object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Dimension</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Dimension</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseDimension(Dimension object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Insets</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Insets</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseInsets(Insets object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Border</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Border</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseBorder(Border object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Border Ref</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Border Ref</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseBorderRef(BorderRef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Line Border</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Line Border</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseLineBorder(LineBorder object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Margin Border</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Margin Border</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseMarginBorder(MarginBorder object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Compound Border</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Compound Border</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCompoundBorder(CompoundBorder object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Custom Border</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Custom Border</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCustomBorder(CustomBorder object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Layout Data</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Layout Data</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseLayoutData(LayoutData object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Custom Layout Data</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Custom Layout Data</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCustomLayoutData(CustomLayoutData object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Grid Layout Data</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Grid Layout Data</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseGridLayoutData(GridLayoutData object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Border Layout Data</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Border Layout Data</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseBorderLayoutData(BorderLayoutData object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Layoutable</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Layoutable</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseLayoutable(Layoutable object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Layout</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Layout</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseLayout(Layout object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Layout Ref</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Layout Ref</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseLayoutRef(LayoutRef object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Custom Layout</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Custom Layout</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCustomLayout(CustomLayout object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Grid Layout</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Grid Layout</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseGridLayout(GridLayout object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Border Layout</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Border Layout</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseBorderLayout(BorderLayout object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Custom Attribute</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Custom Attribute</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseCustomAttribute(CustomAttribute object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Figure Accessor</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Figure Accessor</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseFigureAccessor(FigureAccessor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Flow Layout</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Flow Layout</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseFlowLayout(FlowLayout object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>XY Layout</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>XY Layout</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseXYLayout(XYLayout object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>XY Layout Data</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>XY Layout Data</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseXYLayoutData(XYLayoutData object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Stack Layout</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Stack Layout</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseStackLayout(StackLayout object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SVG Figure</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>SVG Figure</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseSVGFigure(SVGFigure object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SVG Property</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>SVG Property</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseSVGProperty(SVGProperty object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Rectangle2 D</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>Rectangle2 D</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public T caseRectangle2D(Rectangle2D object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch, but this is the last case anyway.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject)
	 * @@generated
	 */
	public T defaultCase(EObject object) {
		return null;
	}

} //GMFGraphSwitch
@


1.21
log
@[234668] support svg figures in gmfgraph
@
text
@d666 6
d1742 15
@


1.20
log
@[139126] respect implementation bundle of custom borders and layouts
@
text
@d650 16
d1706 30
@


1.19
log
@[198290] - Update gmfgraph.genmodel and regenerate editor for .gmfgraph
@
text
@d517 7
d593 7
d1375 15
d1540 15
@


1.18
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@d641 1
a641 1
	 * Returns the result of interpretting the object as an instance of '<em>Canvas</em>'.
d647 1
a647 1
	 * @@return the result of interpretting the object as an instance of '<em>Canvas</em>'.
d656 1
a656 1
	 * Returns the result of interpretting the object as an instance of '<em>Figure Gallery</em>'.
d662 1
a662 1
	 * @@return the result of interpretting the object as an instance of '<em>Figure Gallery</em>'.
d671 1
a671 1
	 * Returns the result of interpretting the object as an instance of '<em>Identity</em>'.
d677 1
a677 1
	 * @@return the result of interpretting the object as an instance of '<em>Identity</em>'.
d686 1
a686 1
	 * Returns the result of interpretting the object as an instance of '<em>Diagram Element</em>'.
d692 1
a692 1
	 * @@return the result of interpretting the object as an instance of '<em>Diagram Element</em>'.
d701 1
a701 1
	 * Returns the result of interpretting the object as an instance of '<em>Abstract Node</em>'.
d707 1
a707 1
	 * @@return the result of interpretting the object as an instance of '<em>Abstract Node</em>'.
d716 1
a716 1
	 * Returns the result of interpretting the object as an instance of '<em>Node</em>'.
d722 1
a722 1
	 * @@return the result of interpretting the object as an instance of '<em>Node</em>'.
d731 1
a731 1
	 * Returns the result of interpretting the object as an instance of '<em>Child Access</em>'.
d737 1
a737 1
	 * @@return the result of interpretting the object as an instance of '<em>Child Access</em>'.
d746 1
a746 1
	 * Returns the result of interpretting the object as an instance of '<em>Real Figure</em>'.
d752 1
a752 1
	 * @@return the result of interpretting the object as an instance of '<em>Real Figure</em>'.
d761 1
a761 1
	 * Returns the result of interpretting the object as an instance of '<em>Connection</em>'.
d767 1
a767 1
	 * @@return the result of interpretting the object as an instance of '<em>Connection</em>'.
d776 1
a776 1
	 * Returns the result of interpretting the object as an instance of '<em>Compartment</em>'.
d782 1
a782 1
	 * @@return the result of interpretting the object as an instance of '<em>Compartment</em>'.
d791 1
a791 1
	 * Returns the result of interpretting the object as an instance of '<em>Diagram Label</em>'.
d797 1
a797 1
	 * @@return the result of interpretting the object as an instance of '<em>Diagram Label</em>'.
d806 1
a806 1
	 * Returns the result of interpretting the object as an instance of '<em>Visual Facet</em>'.
d812 1
a812 1
	 * @@return the result of interpretting the object as an instance of '<em>Visual Facet</em>'.
d821 1
a821 1
	 * Returns the result of interpretting the object as an instance of '<em>General Facet</em>'.
d827 1
a827 1
	 * @@return the result of interpretting the object as an instance of '<em>General Facet</em>'.
d836 1
a836 1
	 * Returns the result of interpretting the object as an instance of '<em>Alignment Facet</em>'.
d842 1
a842 1
	 * @@return the result of interpretting the object as an instance of '<em>Alignment Facet</em>'.
d851 1
a851 1
	 * Returns the result of interpretting the object as an instance of '<em>Gradient Facet</em>'.
d857 1
a857 1
	 * @@return the result of interpretting the object as an instance of '<em>Gradient Facet</em>'.
d866 1
a866 1
	 * Returns the result of interpretting the object as an instance of '<em>Label Offset Facet</em>'.
d872 1
a872 1
	 * @@return the result of interpretting the object as an instance of '<em>Label Offset Facet</em>'.
d881 1
a881 1
	 * Returns the result of interpretting the object as an instance of '<em>Default Size Facet</em>'.
d887 1
a887 1
	 * @@return the result of interpretting the object as an instance of '<em>Default Size Facet</em>'.
d896 1
a896 1
	 * Returns the result of interpretting the object as an instance of '<em>Figure</em>'.
d902 1
a902 1
	 * @@return the result of interpretting the object as an instance of '<em>Figure</em>'.
d911 1
a911 1
	 * Returns the result of interpretting the object as an instance of '<em>Figure Descriptor</em>'.
d917 1
a917 1
	 * @@return the result of interpretting the object as an instance of '<em>Figure Descriptor</em>'.
d926 1
a926 1
	 * Returns the result of interpretting the object as an instance of '<em>Abstract Figure</em>'.
d932 1
a932 1
	 * @@return the result of interpretting the object as an instance of '<em>Abstract Figure</em>'.
d941 1
a941 1
	 * Returns the result of interpretting the object as an instance of '<em>Figure Ref</em>'.
d947 1
a947 1
	 * @@return the result of interpretting the object as an instance of '<em>Figure Ref</em>'.
d956 1
a956 1
	 * Returns the result of interpretting the object as an instance of '<em>Connection Figure</em>'.
d962 1
a962 1
	 * @@return the result of interpretting the object as an instance of '<em>Connection Figure</em>'.
d971 1
a971 1
	 * Returns the result of interpretting the object as an instance of '<em>Decoration Figure</em>'.
d977 1
a977 1
	 * @@return the result of interpretting the object as an instance of '<em>Decoration Figure</em>'.
d986 1
a986 1
	 * Returns the result of interpretting the object as an instance of '<em>Shape</em>'.
d992 1
a992 1
	 * @@return the result of interpretting the object as an instance of '<em>Shape</em>'.
d1001 1
a1001 1
	 * Returns the result of interpretting the object as an instance of '<em>Label</em>'.
d1007 1
a1007 1
	 * @@return the result of interpretting the object as an instance of '<em>Label</em>'.
d1016 1
a1016 1
	 * Returns the result of interpretting the object as an instance of '<em>Labeled Container</em>'.
d1022 1
a1022 1
	 * @@return the result of interpretting the object as an instance of '<em>Labeled Container</em>'.
d1031 1
a1031 1
	 * Returns the result of interpretting the object as an instance of '<em>Rectangle</em>'.
d1037 1
a1037 1
	 * @@return the result of interpretting the object as an instance of '<em>Rectangle</em>'.
d1046 1
a1046 1
	 * Returns the result of interpretting the object as an instance of '<em>Rounded Rectangle</em>'.
d1052 1
a1052 1
	 * @@return the result of interpretting the object as an instance of '<em>Rounded Rectangle</em>'.
d1061 1
a1061 1
	 * Returns the result of interpretting the object as an instance of '<em>Ellipse</em>'.
d1067 1
a1067 1
	 * @@return the result of interpretting the object as an instance of '<em>Ellipse</em>'.
d1076 1
a1076 1
	 * Returns the result of interpretting the object as an instance of '<em>Polyline</em>'.
d1082 1
a1082 1
	 * @@return the result of interpretting the object as an instance of '<em>Polyline</em>'.
d1091 1
a1091 1
	 * Returns the result of interpretting the object as an instance of '<em>Polygon</em>'.
d1097 1
a1097 1
	 * @@return the result of interpretting the object as an instance of '<em>Polygon</em>'.
d1106 1
a1106 1
	 * Returns the result of interpretting the object as an instance of '<em>Scalable Polygon</em>'.
d1112 1
a1112 1
	 * @@return the result of interpretting the object as an instance of '<em>Scalable Polygon</em>'.
d1121 1
a1121 1
	 * Returns the result of interpretting the object as an instance of '<em>Polyline Connection</em>'.
d1127 1
a1127 1
	 * @@return the result of interpretting the object as an instance of '<em>Polyline Connection</em>'.
d1136 1
a1136 1
	 * Returns the result of interpretting the object as an instance of '<em>Polyline Decoration</em>'.
d1142 1
a1142 1
	 * @@return the result of interpretting the object as an instance of '<em>Polyline Decoration</em>'.
d1151 1
a1151 1
	 * Returns the result of interpretting the object as an instance of '<em>Polygon Decoration</em>'.
d1157 1
a1157 1
	 * @@return the result of interpretting the object as an instance of '<em>Polygon Decoration</em>'.
d1166 1
a1166 1
	 * Returns the result of interpretting the object as an instance of '<em>Custom Class</em>'.
d1172 1
a1172 1
	 * @@return the result of interpretting the object as an instance of '<em>Custom Class</em>'.
d1181 1
a1181 1
	 * Returns the result of interpretting the object as an instance of '<em>Custom Figure</em>'.
d1187 1
a1187 1
	 * @@return the result of interpretting the object as an instance of '<em>Custom Figure</em>'.
d1196 1
a1196 1
	 * Returns the result of interpretting the object as an instance of '<em>Custom Decoration</em>'.
d1202 1
a1202 1
	 * @@return the result of interpretting the object as an instance of '<em>Custom Decoration</em>'.
d1211 1
a1211 1
	 * Returns the result of interpretting the object as an instance of '<em>Custom Connection</em>'.
d1217 1
a1217 1
	 * @@return the result of interpretting the object as an instance of '<em>Custom Connection</em>'.
d1226 1
a1226 1
	 * Returns the result of interpretting the object as an instance of '<em>Color</em>'.
d1232 1
a1232 1
	 * @@return the result of interpretting the object as an instance of '<em>Color</em>'.
d1241 1
a1241 1
	 * Returns the result of interpretting the object as an instance of '<em>RGB Color</em>'.
d1247 1
a1247 1
	 * @@return the result of interpretting the object as an instance of '<em>RGB Color</em>'.
d1256 1
a1256 1
	 * Returns the result of interpretting the object as an instance of '<em>Constant Color</em>'.
d1262 1
a1262 1
	 * @@return the result of interpretting the object as an instance of '<em>Constant Color</em>'.
d1271 1
a1271 1
	 * Returns the result of interpretting the object as an instance of '<em>Font</em>'.
d1277 1
a1277 1
	 * @@return the result of interpretting the object as an instance of '<em>Font</em>'.
d1286 1
a1286 1
	 * Returns the result of interpretting the object as an instance of '<em>Basic Font</em>'.
d1292 1
a1292 1
	 * @@return the result of interpretting the object as an instance of '<em>Basic Font</em>'.
d1301 1
a1301 1
	 * Returns the result of interpretting the object as an instance of '<em>Point</em>'.
d1307 1
a1307 1
	 * @@return the result of interpretting the object as an instance of '<em>Point</em>'.
d1316 1
a1316 1
	 * Returns the result of interpretting the object as an instance of '<em>Dimension</em>'.
d1322 1
a1322 1
	 * @@return the result of interpretting the object as an instance of '<em>Dimension</em>'.
d1331 1
a1331 1
	 * Returns the result of interpretting the object as an instance of '<em>Insets</em>'.
d1337 1
a1337 1
	 * @@return the result of interpretting the object as an instance of '<em>Insets</em>'.
d1346 1
a1346 1
	 * Returns the result of interpretting the object as an instance of '<em>Border</em>'.
d1352 1
a1352 1
	 * @@return the result of interpretting the object as an instance of '<em>Border</em>'.
d1361 1
a1361 1
	 * Returns the result of interpretting the object as an instance of '<em>Line Border</em>'.
d1367 1
a1367 1
	 * @@return the result of interpretting the object as an instance of '<em>Line Border</em>'.
d1376 1
a1376 1
	 * Returns the result of interpretting the object as an instance of '<em>Margin Border</em>'.
d1382 1
a1382 1
	 * @@return the result of interpretting the object as an instance of '<em>Margin Border</em>'.
d1391 1
a1391 1
	 * Returns the result of interpretting the object as an instance of '<em>Compound Border</em>'.
d1397 1
a1397 1
	 * @@return the result of interpretting the object as an instance of '<em>Compound Border</em>'.
d1406 1
a1406 1
	 * Returns the result of interpretting the object as an instance of '<em>Custom Border</em>'.
d1412 1
a1412 1
	 * @@return the result of interpretting the object as an instance of '<em>Custom Border</em>'.
d1421 1
a1421 1
	 * Returns the result of interpretting the object as an instance of '<em>Layout Data</em>'.
d1427 1
a1427 1
	 * @@return the result of interpretting the object as an instance of '<em>Layout Data</em>'.
d1436 1
a1436 1
	 * Returns the result of interpretting the object as an instance of '<em>Custom Layout Data</em>'.
d1442 1
a1442 1
	 * @@return the result of interpretting the object as an instance of '<em>Custom Layout Data</em>'.
d1451 1
a1451 1
	 * Returns the result of interpretting the object as an instance of '<em>Grid Layout Data</em>'.
d1457 1
a1457 1
	 * @@return the result of interpretting the object as an instance of '<em>Grid Layout Data</em>'.
d1466 1
a1466 1
	 * Returns the result of interpretting the object as an instance of '<em>Border Layout Data</em>'.
d1472 1
a1472 1
	 * @@return the result of interpretting the object as an instance of '<em>Border Layout Data</em>'.
d1481 1
a1481 1
	 * Returns the result of interpretting the object as an instance of '<em>Layoutable</em>'.
d1487 1
a1487 1
	 * @@return the result of interpretting the object as an instance of '<em>Layoutable</em>'.
d1496 1
a1496 1
	 * Returns the result of interpretting the object as an instance of '<em>Layout</em>'.
d1502 1
a1502 1
	 * @@return the result of interpretting the object as an instance of '<em>Layout</em>'.
d1511 1
a1511 1
	 * Returns the result of interpretting the object as an instance of '<em>Custom Layout</em>'.
d1517 1
a1517 1
	 * @@return the result of interpretting the object as an instance of '<em>Custom Layout</em>'.
d1526 1
a1526 1
	 * Returns the result of interpretting the object as an instance of '<em>Grid Layout</em>'.
d1532 1
a1532 1
	 * @@return the result of interpretting the object as an instance of '<em>Grid Layout</em>'.
d1541 1
a1541 1
	 * Returns the result of interpretting the object as an instance of '<em>Border Layout</em>'.
d1547 1
a1547 1
	 * @@return the result of interpretting the object as an instance of '<em>Border Layout</em>'.
d1556 1
a1556 1
	 * Returns the result of interpretting the object as an instance of '<em>Custom Attribute</em>'.
d1562 1
a1562 1
	 * @@return the result of interpretting the object as an instance of '<em>Custom Attribute</em>'.
d1571 1
a1571 1
	 * Returns the result of interpretting the object as an instance of '<em>Figure Accessor</em>'.
d1577 1
a1577 1
	 * @@return the result of interpretting the object as an instance of '<em>Figure Accessor</em>'.
d1586 1
a1586 1
	 * Returns the result of interpretting the object as an instance of '<em>Flow Layout</em>'.
d1592 1
a1592 1
	 * @@return the result of interpretting the object as an instance of '<em>Flow Layout</em>'.
d1601 1
a1601 1
	 * Returns the result of interpretting the object as an instance of '<em>XY Layout</em>'.
d1607 1
a1607 1
	 * @@return the result of interpretting the object as an instance of '<em>XY Layout</em>'.
d1616 1
a1616 1
	 * Returns the result of interpretting the object as an instance of '<em>XY Layout Data</em>'.
d1622 1
a1622 1
	 * @@return the result of interpretting the object as an instance of '<em>XY Layout Data</em>'.
d1631 1
a1631 1
	 * Returns the result of interpretting the object as an instance of '<em>Stack Layout</em>'.
d1637 1
a1637 1
	 * @@return the result of interpretting the object as an instance of '<em>Stack Layout</em>'.
d1646 1
a1646 1
	 * Returns the result of interpretting the object as an instance of '<em>EObject</em>'.
d1652 1
a1652 1
	 * @@return the result of interpretting the object as an instance of '<em>EObject</em>'.
@


1.17
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a14 64
import org.eclipse.gmf.gmfgraph.AlignmentFacet;
import org.eclipse.gmf.gmfgraph.BasicFont;
import org.eclipse.gmf.gmfgraph.Border;
import org.eclipse.gmf.gmfgraph.BorderLayout;
import org.eclipse.gmf.gmfgraph.BorderLayoutData;
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.Color;
import org.eclipse.gmf.gmfgraph.Compartment;
import org.eclipse.gmf.gmfgraph.CompoundBorder;
import org.eclipse.gmf.gmfgraph.Connection;
import org.eclipse.gmf.gmfgraph.ConnectionFigure;
import org.eclipse.gmf.gmfgraph.ConstantColor;
import org.eclipse.gmf.gmfgraph.CustomAttribute;
import org.eclipse.gmf.gmfgraph.CustomBorder;
import org.eclipse.gmf.gmfgraph.CustomClass;
import org.eclipse.gmf.gmfgraph.CustomConnection;
import org.eclipse.gmf.gmfgraph.CustomDecoration;
import org.eclipse.gmf.gmfgraph.CustomFigure;
import org.eclipse.gmf.gmfgraph.CustomLayout;
import org.eclipse.gmf.gmfgraph.CustomLayoutData;
import org.eclipse.gmf.gmfgraph.DecorationFigure;
import org.eclipse.gmf.gmfgraph.DiagramElement;
import org.eclipse.gmf.gmfgraph.DiagramLabel;
import org.eclipse.gmf.gmfgraph.Dimension;
import org.eclipse.gmf.gmfgraph.Ellipse;
import org.eclipse.gmf.gmfgraph.Figure;
import org.eclipse.gmf.gmfgraph.FigureAccessor;
import org.eclipse.gmf.gmfgraph.FigureGallery;
import org.eclipse.gmf.gmfgraph.FigureHandle;
import org.eclipse.gmf.gmfgraph.FigureMarker;
import org.eclipse.gmf.gmfgraph.FigureRef;
import org.eclipse.gmf.gmfgraph.FlowLayout;
import org.eclipse.gmf.gmfgraph.Font;
import org.eclipse.gmf.gmfgraph.GMFGraphPackage;
import org.eclipse.gmf.gmfgraph.GeneralFacet;
import org.eclipse.gmf.gmfgraph.GradientFacet;
import org.eclipse.gmf.gmfgraph.GridLayout;
import org.eclipse.gmf.gmfgraph.GridLayoutData;
import org.eclipse.gmf.gmfgraph.Identity;
import org.eclipse.gmf.gmfgraph.Insets;
import org.eclipse.gmf.gmfgraph.Label;
import org.eclipse.gmf.gmfgraph.LabelOffsetFacet;
import org.eclipse.gmf.gmfgraph.LabeledContainer;
import org.eclipse.gmf.gmfgraph.Layout;
import org.eclipse.gmf.gmfgraph.LayoutData;
import org.eclipse.gmf.gmfgraph.Layoutable;
import org.eclipse.gmf.gmfgraph.LineBorder;
import org.eclipse.gmf.gmfgraph.MarginBorder;
import org.eclipse.gmf.gmfgraph.Node;
import org.eclipse.gmf.gmfgraph.Point;
import org.eclipse.gmf.gmfgraph.Polygon;
import org.eclipse.gmf.gmfgraph.PolygonDecoration;
import org.eclipse.gmf.gmfgraph.Polyline;
import org.eclipse.gmf.gmfgraph.PolylineConnection;
import org.eclipse.gmf.gmfgraph.PolylineDecoration;
import org.eclipse.gmf.gmfgraph.RGBColor;
import org.eclipse.gmf.gmfgraph.Rectangle;
import org.eclipse.gmf.gmfgraph.RoundedRectangle;
import org.eclipse.gmf.gmfgraph.Shape;
import org.eclipse.gmf.gmfgraph.StackLayout;
import org.eclipse.gmf.gmfgraph.VisualFacet;
import org.eclipse.gmf.gmfgraph.XYLayout;
import org.eclipse.gmf.gmfgraph.XYLayoutData;

d116 8
d127 1
d153 1
d200 4
a203 4
			case GMFGraphPackage.FIGURE_MARKER: {
				FigureMarker figureMarker = (FigureMarker)theEObject;
				T result = caseFigureMarker(figureMarker);
				if (result == null) result = caseLayoutable(figureMarker);
d207 5
a211 3
			case GMFGraphPackage.FIGURE_HANDLE: {
				FigureHandle figureHandle = (FigureHandle)theEObject;
				T result = caseFigureHandle(figureHandle);
d215 19
a233 7
			case GMFGraphPackage.FIGURE: {
				Figure figure = (Figure)theEObject;
				T result = caseFigure(figure);
				if (result == null) result = caseFigureMarker(figure);
				if (result == null) result = caseFigureHandle(figure);
				if (result == null) result = caseIdentity(figure);
				if (result == null) result = caseLayoutable(figure);
d240 2
a241 1
				if (result == null) result = caseFigureMarker(figureRef);
d249 2
a251 3
				if (result == null) result = caseFigureMarker(connectionFigure);
				if (result == null) result = caseFigureHandle(connectionFigure);
				if (result == null) result = caseIdentity(connectionFigure);
d259 2
a261 3
				if (result == null) result = caseFigureMarker(decorationFigure);
				if (result == null) result = caseFigureHandle(decorationFigure);
				if (result == null) result = caseIdentity(decorationFigure);
d269 2
a271 3
				if (result == null) result = caseFigureMarker(shape);
				if (result == null) result = caseFigureHandle(shape);
				if (result == null) result = caseIdentity(shape);
d279 2
a281 3
				if (result == null) result = caseFigureMarker(label);
				if (result == null) result = caseFigureHandle(label);
				if (result == null) result = caseIdentity(label);
d289 2
a291 3
				if (result == null) result = caseFigureMarker(labeledContainer);
				if (result == null) result = caseFigureHandle(labeledContainer);
				if (result == null) result = caseIdentity(labeledContainer);
d300 2
a302 3
				if (result == null) result = caseFigureMarker(rectangle);
				if (result == null) result = caseFigureHandle(rectangle);
				if (result == null) result = caseIdentity(rectangle);
d311 2
a313 3
				if (result == null) result = caseFigureMarker(roundedRectangle);
				if (result == null) result = caseFigureHandle(roundedRectangle);
				if (result == null) result = caseIdentity(roundedRectangle);
d322 2
a324 3
				if (result == null) result = caseFigureMarker(ellipse);
				if (result == null) result = caseFigureHandle(ellipse);
				if (result == null) result = caseIdentity(ellipse);
d333 2
a335 3
				if (result == null) result = caseFigureMarker(polyline);
				if (result == null) result = caseFigureHandle(polyline);
				if (result == null) result = caseIdentity(polyline);
d345 2
a347 3
				if (result == null) result = caseFigureMarker(polygon);
				if (result == null) result = caseFigureHandle(polygon);
				if (result == null) result = caseIdentity(polygon);
d358 2
a360 3
				if (result == null) result = caseFigureMarker(scalablePolygon);
				if (result == null) result = caseFigureHandle(scalablePolygon);
				if (result == null) result = caseIdentity(scalablePolygon);
d371 2
a373 3
				if (result == null) result = caseFigureMarker(polylineConnection);
				if (result == null) result = caseFigureHandle(polylineConnection);
				if (result == null) result = caseIdentity(polylineConnection);
d384 2
a386 3
				if (result == null) result = caseFigureMarker(polylineDecoration);
				if (result == null) result = caseFigureHandle(polylineDecoration);
				if (result == null) result = caseIdentity(polylineDecoration);
d397 3
a400 4
				if (result == null) result = caseShape(polygonDecoration);
				if (result == null) result = caseFigureMarker(polygonDecoration);
				if (result == null) result = caseFigureHandle(polygonDecoration);
				if (result == null) result = caseIdentity(polygonDecoration);
a419 1
				if (result == null) result = caseFigureHandle(figureAccessor);
d426 3
a429 4
				if (result == null) result = caseCustomClass(customFigure);
				if (result == null) result = caseFigureMarker(customFigure);
				if (result == null) result = caseFigureHandle(customFigure);
				if (result == null) result = caseIdentity(customFigure);
d439 3
a442 4
				if (result == null) result = caseCustomClass(customDecoration);
				if (result == null) result = caseFigureMarker(customDecoration);
				if (result == null) result = caseFigureHandle(customDecoration);
				if (result == null) result = caseIdentity(customDecoration);
d452 3
a455 4
				if (result == null) result = caseCustomClass(customConnection);
				if (result == null) result = caseFigureMarker(customConnection);
				if (result == null) result = caseFigureHandle(customConnection);
				if (result == null) result = caseIdentity(customConnection);
d701 15
d731 30
d896 1
a896 1
	 * Returns the result of interpretting the object as an instance of '<em>Figure Marker</em>'.
d902 1
a902 1
	 * @@return the result of interpretting the object as an instance of '<em>Figure Marker</em>'.
d906 1
a906 1
	public T caseFigureMarker(FigureMarker object) {
d911 1
a911 1
	 * Returns the result of interpretting the object as an instance of '<em>Figure Handle</em>'.
d917 1
a917 1
	 * @@return the result of interpretting the object as an instance of '<em>Figure Handle</em>'.
d921 1
a921 1
	public T caseFigureHandle(FigureHandle object) {
d926 1
a926 1
	 * Returns the result of interpretting the object as an instance of '<em>Figure</em>'.
d932 1
a932 1
	 * @@return the result of interpretting the object as an instance of '<em>Figure</em>'.
d936 1
a936 1
	public T caseFigure(Figure object) {
@


1.16
log
@[155230] mgolubev - Provide means to specify default size for figure
@
text
@d92 1
a92 1
public class GMFGraphSwitch {
d120 1
a120 1
	public Object doSwitch(EObject theEObject) {
d131 1
a131 1
	protected Object doSwitch(EClass theEClass, EObject theEObject) {
d136 1
a136 1
			List eSuperTypes = theEClass.getESuperTypes();
d140 1
a140 1
					doSwitch((EClass)eSuperTypes.get(0), theEObject);
d151 1
a151 1
	protected Object doSwitch(int classifierID, EObject theEObject) {
d155 1
a155 1
				Object result = caseCanvas(canvas);
d162 1
a162 1
				Object result = caseFigureGallery(figureGallery);
d169 1
a169 1
				Object result = caseIdentity(identity);
d175 1
a175 1
				Object result = caseDiagramElement(diagramElement);
d182 1
a182 1
				Object result = caseNode(node);
d190 1
a190 1
				Object result = caseConnection(connection);
d198 1
a198 1
				Object result = caseCompartment(compartment);
d206 1
a206 1
				Object result = caseDiagramLabel(diagramLabel);
d215 1
a215 1
				Object result = caseVisualFacet(visualFacet);
d221 1
a221 1
				Object result = caseGeneralFacet(generalFacet);
d228 1
a228 1
				Object result = caseAlignmentFacet(alignmentFacet);
d235 1
a235 1
				Object result = caseGradientFacet(gradientFacet);
d242 1
a242 1
				Object result = caseLabelOffsetFacet(labelOffsetFacet);
d249 1
a249 1
				Object result = caseDefaultSizeFacet(defaultSizeFacet);
d256 1
a256 1
				Object result = caseFigureMarker(figureMarker);
d263 1
a263 1
				Object result = caseFigureHandle(figureHandle);
d269 1
a269 1
				Object result = caseFigure(figure);
d279 1
a279 1
				Object result = caseFigureRef(figureRef);
d287 1
a287 1
				Object result = caseConnectionFigure(connectionFigure);
d298 1
a298 1
				Object result = caseDecorationFigure(decorationFigure);
d309 1
a309 1
				Object result = caseShape(shape);
d320 1
a320 1
				Object result = caseLabel(label);
d331 1
a331 1
				Object result = caseLabeledContainer(labeledContainer);
d342 1
a342 1
				Object result = caseRectangle(rectangle);
d354 1
a354 1
				Object result = caseRoundedRectangle(roundedRectangle);
d366 1
a366 1
				Object result = caseEllipse(ellipse);
d378 1
a378 1
				Object result = casePolyline(polyline);
d390 1
a390 1
				Object result = casePolygon(polygon);
d403 1
a403 1
				Object result = caseScalablePolygon(scalablePolygon);
d417 1
a417 1
				Object result = casePolylineConnection(polylineConnection);
d431 1
a431 1
				Object result = casePolylineDecoration(polylineDecoration);
d445 1
a445 1
				Object result = casePolygonDecoration(polygonDecoration);
d460 1
a460 1
				Object result = caseCustomClass(customClass);
d466 1
a466 1
				Object result = caseCustomAttribute(customAttribute);
d472 1
a472 1
				Object result = caseFigureAccessor(figureAccessor);
d479 1
a479 1
				Object result = caseCustomFigure(customFigure);
d491 1
a491 1
				Object result = caseCustomDecoration(customDecoration);
d505 1
a505 1
				Object result = caseCustomConnection(customConnection);
d519 1
a519 1
				Object result = caseColor(color);
d525 1
a525 1
				Object result = caseRGBColor(rgbColor);
d532 1
a532 1
				Object result = caseConstantColor(constantColor);
d539 1
a539 1
				Object result = caseFont(font);
d545 1
a545 1
				Object result = caseBasicFont(basicFont);
d552 1
a552 1
				Object result = casePoint(point);
d558 1
a558 1
				Object result = caseDimension(dimension);
d564 1
a564 1
				Object result = caseInsets(insets);
d570 1
a570 1
				Object result = caseBorder(border);
d576 1
a576 1
				Object result = caseLineBorder(lineBorder);
d583 1
a583 1
				Object result = caseMarginBorder(marginBorder);
d590 1
a590 1
				Object result = caseCompoundBorder(compoundBorder);
d597 1
a597 1
				Object result = caseCustomBorder(customBorder);
d605 1
a605 1
				Object result = caseLayoutData(layoutData);
d611 1
a611 1
				Object result = caseCustomLayoutData(customLayoutData);
d619 1
a619 1
				Object result = caseGridLayoutData(gridLayoutData);
d626 1
a626 1
				Object result = caseBorderLayoutData(borderLayoutData);
d633 1
a633 1
				Object result = caseLayoutable(layoutable);
d639 1
a639 1
				Object result = caseLayout(layout);
d645 1
a645 1
				Object result = caseCustomLayout(customLayout);
d653 1
a653 1
				Object result = caseGridLayout(gridLayout);
d660 1
a660 1
				Object result = caseBorderLayout(borderLayout);
d667 1
a667 1
				Object result = caseFlowLayout(flowLayout);
d674 1
a674 1
				Object result = caseXYLayout(xyLayout);
d681 1
a681 1
				Object result = caseXYLayoutData(xyLayoutData);
d688 1
a688 1
				Object result = caseStackLayout(stackLayout);
d708 1
a708 1
	public Object caseCanvas(Canvas object) {
d723 1
a723 1
	public Object caseFigureGallery(FigureGallery object) {
d738 1
a738 1
	public Object caseIdentity(Identity object) {
d753 1
a753 1
	public Object caseDiagramElement(DiagramElement object) {
d768 1
a768 1
	public Object caseNode(Node object) {
d783 1
a783 1
	public Object caseConnection(Connection object) {
d798 1
a798 1
	public Object caseCompartment(Compartment object) {
d813 1
a813 1
	public Object caseDiagramLabel(DiagramLabel object) {
d828 1
a828 1
	public Object caseVisualFacet(VisualFacet object) {
d843 1
a843 1
	public Object caseGeneralFacet(GeneralFacet object) {
d858 1
a858 1
	public Object caseAlignmentFacet(AlignmentFacet object) {
d873 1
a873 1
	public Object caseGradientFacet(GradientFacet object) {
d888 1
a888 1
	public Object caseLabelOffsetFacet(LabelOffsetFacet object) {
d903 1
a903 1
	public Object caseDefaultSizeFacet(DefaultSizeFacet object) {
d918 1
a918 1
	public Object caseFigureMarker(FigureMarker object) {
d933 1
a933 1
	public Object caseFigureHandle(FigureHandle object) {
d948 1
a948 1
	public Object caseFigure(Figure object) {
d963 1
a963 1
	public Object caseFigureRef(FigureRef object) {
d978 1
a978 1
	public Object caseConnectionFigure(ConnectionFigure object) {
d993 1
a993 1
	public Object caseDecorationFigure(DecorationFigure object) {
d1008 1
a1008 1
	public Object caseShape(Shape object) {
d1023 1
a1023 1
	public Object caseLabel(Label object) {
d1038 1
a1038 1
	public Object caseLabeledContainer(LabeledContainer object) {
d1053 1
a1053 1
	public Object caseRectangle(Rectangle object) {
d1068 1
a1068 1
	public Object caseRoundedRectangle(RoundedRectangle object) {
d1083 1
a1083 1
	public Object caseEllipse(Ellipse object) {
d1098 1
a1098 1
	public Object casePolyline(Polyline object) {
d1113 1
a1113 1
	public Object casePolygon(Polygon object) {
d1128 1
a1128 1
	public Object caseScalablePolygon(ScalablePolygon object) {
d1143 1
a1143 1
	public Object casePolylineConnection(PolylineConnection object) {
d1158 1
a1158 1
	public Object casePolylineDecoration(PolylineDecoration object) {
d1173 1
a1173 1
	public Object casePolygonDecoration(PolygonDecoration object) {
d1188 1
a1188 1
	public Object caseCustomClass(CustomClass object) {
d1203 1
a1203 1
	public Object caseCustomFigure(CustomFigure object) {
d1218 1
a1218 1
	public Object caseCustomDecoration(CustomDecoration object) {
d1233 1
a1233 1
	public Object caseCustomConnection(CustomConnection object) {
d1248 1
a1248 1
	public Object caseColor(Color object) {
d1263 1
a1263 1
	public Object caseRGBColor(RGBColor object) {
d1278 1
a1278 1
	public Object caseConstantColor(ConstantColor object) {
d1293 1
a1293 1
	public Object caseFont(Font object) {
d1308 1
a1308 1
	public Object caseBasicFont(BasicFont object) {
d1323 1
a1323 1
	public Object casePoint(Point object) {
d1338 1
a1338 1
	public Object caseDimension(Dimension object) {
d1353 1
a1353 1
	public Object caseInsets(Insets object) {
d1368 1
a1368 1
	public Object caseBorder(Border object) {
d1383 1
a1383 1
	public Object caseLineBorder(LineBorder object) {
d1398 1
a1398 1
	public Object caseMarginBorder(MarginBorder object) {
d1413 1
a1413 1
	public Object caseCompoundBorder(CompoundBorder object) {
d1428 1
a1428 1
	public Object caseCustomBorder(CustomBorder object) {
d1443 1
a1443 1
	public Object caseLayoutData(LayoutData object) {
d1458 1
a1458 1
	public Object caseCustomLayoutData(CustomLayoutData object) {
d1473 1
a1473 1
	public Object caseGridLayoutData(GridLayoutData object) {
d1488 1
a1488 1
	public Object caseBorderLayoutData(BorderLayoutData object) {
d1503 1
a1503 1
	public Object caseLayoutable(Layoutable object) {
d1518 1
a1518 1
	public Object caseLayout(Layout object) {
d1533 1
a1533 1
	public Object caseCustomLayout(CustomLayout object) {
d1548 1
a1548 1
	public Object caseGridLayout(GridLayout object) {
d1563 1
a1563 1
	public Object caseBorderLayout(BorderLayout object) {
d1578 1
a1578 1
	public Object caseCustomAttribute(CustomAttribute object) {
d1593 1
a1593 1
	public Object caseFigureAccessor(FigureAccessor object) {
d1608 1
a1608 1
	public Object caseFlowLayout(FlowLayout object) {
d1623 1
a1623 1
	public Object caseXYLayout(XYLayout object) {
d1638 1
a1638 1
	public Object caseXYLayoutData(XYLayoutData object) {
d1653 1
a1653 1
	public Object caseStackLayout(StackLayout object) {
d1668 1
a1668 1
	public Object defaultCase(EObject object) {
@


1.15
log
@[154687] mgolubev - Support scalable polygons
@
text
@d247 7
d893 15
@


1.14
log
@organized imports
@
text
@d13 2
d394 14
d1096 15
@


1.13
log
@Setting elementIcon attribute default value to "true".
@
text
@a12 3

import org.eclipse.gmf.gmfgraph.*;

@


1.12
log
@organized imports
@
text
@d13 3
@


1.11
log
@#140887 Remove Child interface from GMFGraph.
Although the need to reference child figures persist, thus FigureHandle was introduced, to allow diagramElements to reference either *generateable* figures (Figure subclasses) or *just-use* figures (like CustomFigure and FigureAccessor).
Refactoring performed with #131365 "Mirror GMFGraph model when generating standalone figure plugin" in mind
@
text
@a12 2
import org.eclipse.gmf.gmfgraph.*;

@


1.10
log
@overriding recent changes introduced (along with fixing #133836) in GMFMap model, as it's merely a 'shortcut', quite frequent though. Still, adding few new concepts just for the sake of single usecase (I do admit it's popular) seems excessive to me.
GMFMap kept the same as old (no new notions introduced), GMFGraph got generalization from DiagramLabel to DiagramNode to make it possible to use DiagramLabels for NodeMappings (thus, it's possible to detect such nodes in the DGMT)
Tests added to make sure we generate correct genModel for both cases.
@
text
@d15 1
a20 1
import org.eclipse.gmf.gmfgraph.Child;
d37 1
d41 1
d43 1
d46 1
d56 1
d74 1
d76 2
a203 8
			case GMFGraphPackage.CHILD: {
				Child child = (Child)theEObject;
				Object result = caseChild(child);
				if (result == null) result = caseDiagramElement(child);
				if (result == null) result = caseIdentity(child);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
d254 6
d264 1
d283 1
d294 1
d305 1
d316 1
d327 1
d339 1
d351 1
d363 1
d375 1
d388 1
d402 1
d416 1
d431 1
d443 13
d462 1
d476 1
d490 1
a643 6
			case GMFGraphPackage.CUSTOM_ATTRIBUTE: {
				CustomAttribute customAttribute = (CustomAttribute)theEObject;
				Object result = caseCustomAttribute(customAttribute);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
a781 15
	 * Returns the result of interpretting the object as an instance of '<em>Child</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @@param object the target of the switch.
	 * @@return the result of interpretting the object as an instance of '<em>Child</em>'.
	 * @@see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @@generated
	 */
	public Object caseChild(Child object) {
		return null;
	}

	/**
d887 15
d1532 15
@


1.9
log
@#136877 Provide inital offset from the host link for the link label
@
text
@d207 1
@


1.8
log
@BasicFont extends Font, finally ;)
@
text
@d239 7
d841 15
@


1.7
log
@#129047 get rid of explicit edit/label features, use generic and feature-rich LabelMapping instead.
@
text
@d481 1
@


1.6
log
@[mgolubev] #127252 layout support
@
text
@d225 7
d803 15
@


1.5
log
@#127461 add label diagram element in gmfgraph model
@
text
@d598 28
d1456 60
@


1.4
log
@[mgolubev] #127252 layout support
@
text
@d13 2
d204 8
d723 15
@


1.3
log
@connection stoped own its decorations
@
text
@d15 2
d25 1
d31 2
d45 2
d51 3
d225 1
d234 1
d242 1
d252 1
d262 1
d272 1
d282 1
d292 1
d303 1
d314 1
d325 1
d336 1
d348 1
d361 1
d374 1
d388 1
d405 1
d418 1
d431 1
d520 68
d1253 150
@


1.2
log
@move towards more draw2d-like model
@
text
@d13 45
a57 2

import org.eclipse.gmf.gmfgraph.*;
@


1.1
log
@#114177 gmfgraph model to replace diadef model
@
text
@d323 6
d333 1
d345 1
d357 1
d363 10
a372 3
			case GMFGraphPackage.COLOR_STYLE: {
				ColorStyle colorStyle = (ColorStyle)theEObject;
				Object result = caseColorStyle(colorStyle);
d376 4
a379 3
			case GMFGraphPackage.SIZE_STYLE: {
				SizeStyle sizeStyle = (SizeStyle)theEObject;
				Object result = caseSizeStyle(sizeStyle);
d383 9
a391 3
			case GMFGraphPackage.FONT_STYLE: {
				FontStyle fontStyle = (FontStyle)theEObject;
				Object result = caseFontStyle(fontStyle);
d401 47
d858 15
d918 1
a918 1
	 * Returns the result of interpretting the object as an instance of '<em>Color Style</em>'.
d924 1
a924 1
	 * @@return the result of interpretting the object as an instance of '<em>Color Style</em>'.
d928 1
a928 1
	public Object caseColorStyle(ColorStyle object) {
d933 1
a933 1
	 * Returns the result of interpretting the object as an instance of '<em>Size Style</em>'.
d939 1
a939 1
	 * @@return the result of interpretting the object as an instance of '<em>Size Style</em>'.
d943 1
a943 1
	public Object caseSizeStyle(SizeStyle object) {
d948 1
a948 1
	 * Returns the result of interpretting the object as an instance of '<em>Font Style</em>'.
d954 1
a954 1
	 * @@return the result of interpretting the object as an instance of '<em>Font Style</em>'.
d958 31
a988 1
	public Object caseFontStyle(FontStyle object) {
d1008 105
@

