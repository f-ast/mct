head	1.7;
access;
symbols
	v20070208-1800:1.6
	M4_20:1.6
	v20061222-1800:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.5
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2007.02.23.18.39.27;	author dstadnik;	state dead;
branches;
next	1.6;
commitid	7bd445df34de4567;

1.6
date	2006.11.01.09.59.30;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.03.14.20.39;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.04.18.39.18;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.17.09.51.29;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.05.12.33.42;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.14.19.17;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[169277] Use project local store to save dashboard prefs
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.ui.dashboard;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.gmf.bridge.ui.dashboard.DashboardState;
import org.eclipse.ui.IMemento;

/**
 * @@author dstadnik
 */
public class DashboardPersistence {

	private static final String DS_ELEMENT = "dashboardState"; //$NON-NLS-1$

	private static final String PROJECT_KEY = "project"; //$NON-NLS-1$

	public static Map<IProject, DashboardState> read(IMemento memento) {
		Map<IProject, DashboardState> states = new HashMap<IProject, DashboardState>();
		for (IMemento stateMemento : memento.getChildren(DS_ELEMENT)) {
			String projectName = stateMemento.getString(PROJECT_KEY);
			if (projectName == null) {
				continue;
			}
			IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
			if (!project.exists()) {
				continue;
			}
			states.put(project, new DashboardState(stateMemento));
		}
		return states;
	}

	public static void write(IMemento memento, Map<IProject, DashboardState> states) {
		for (IProject project : states.keySet()) {
			DashboardState state = states.get(project);
			IMemento stateMemento = memento.createChild(DS_ELEMENT);
			stateMemento.putString(PROJECT_KEY, project.getName());
			state.write(stateMemento);
		}
	}
}
@


1.6
log
@use uris instead of file names in dashboard
@
text
@@


1.5
log
@allow other plugins to contribute actions to the dashboard
@
text
@a14 1
import java.util.Iterator;
a30 12
	private static final String DM_KEY = "domainModel"; //$NON-NLS-1$

	private static final String DGM_KEY = "domainGenerationModel"; //$NON-NLS-1$

	private static final String GDM_KEY = "graphicalDefinitionModel"; //$NON-NLS-1$

	private static final String TDM_KEY = "toolingDefinitionModel"; //$NON-NLS-1$

	private static final String MM_KEY = "mappingModel"; //$NON-NLS-1$

	private static final String GM_KEY = "generationModel"; //$NON-NLS-1$

d33 1
a33 3
		IMemento[] stateMementos = memento.getChildren(DS_ELEMENT);
		for (int i = 0; i < stateMementos.length; i++) {
			IMemento stateMemento = stateMementos[i];
d42 1
a42 8
			DashboardState state = new DashboardState();
			state.dmFileName = stateMemento.getString(DM_KEY);
			state.dgmFileName = stateMemento.getString(DGM_KEY);
			state.gdmFileName = stateMemento.getString(GDM_KEY);
			state.tdmFileName = stateMemento.getString(TDM_KEY);
			state.mmFileName = stateMemento.getString(MM_KEY);
			state.gmFileName = stateMemento.getString(GM_KEY);
			states.put(project, state);
d47 3
a49 4
	public static void write(IMemento memento, Map states) {
		for (Iterator it = states.keySet().iterator(); it.hasNext();) {
			IProject project = (IProject) it.next();
			DashboardState state = (DashboardState) states.get(project);
d52 1
a52 18
			if (state.dmFileName != null) {
				stateMemento.putString(DM_KEY, state.dmFileName);
			}
			if (state.dgmFileName != null) {
				stateMemento.putString(DGM_KEY, state.dgmFileName);
			}
			if (state.gdmFileName != null) {
				stateMemento.putString(GDM_KEY, state.gdmFileName);
			}
			if (state.tdmFileName != null) {
				stateMemento.putString(TDM_KEY, state.tdmFileName);
			}
			if (state.mmFileName != null) {
				stateMemento.putString(MM_KEY, state.mmFileName);
			}
			if (state.gmFileName != null) {
				stateMemento.putString(GM_KEY, state.gmFileName);
			}
@


1.4
log
@use generics wherever possible
@
text
@d20 1
@


1.3
log
@#137306 nls; partial
@
text
@d43 2
a44 2
	public static Map read(IMemento memento) {
		Map states = new HashMap();
@


1.2
log
@#124852 add domain genmodel
@
text
@d27 1
a27 1
	private static final String DS_ELEMENT = "dashboardState";
d29 1
a29 1
	private static final String PROJECT_KEY = "project";
d31 1
a31 1
	private static final String DM_KEY = "domainModel";
d33 1
a33 1
	private static final String DGM_KEY = "domainGenerationModel";
d35 1
a35 1
	private static final String GDM_KEY = "graphicalDefinitionModel";
d37 1
a37 1
	private static final String TDM_KEY = "toolingDefinitionModel";
d39 1
a39 1
	private static final String MM_KEY = "mappingModel";
d41 1
a41 1
	private static final String GM_KEY = "generationModel";
@


1.1
log
@#129930 moved from oeg.codegen.ui
@
text
@d33 2
d58 1
d77 3
@

