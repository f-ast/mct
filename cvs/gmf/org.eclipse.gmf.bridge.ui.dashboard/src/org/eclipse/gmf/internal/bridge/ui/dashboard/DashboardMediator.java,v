head	1.19;
access;
symbols
	v20080722-1827:1.19
	R2_1_maintenance:1.19.0.4
	Root_R2_1_maintenance:1.19
	R2_1_0:1.19
	v20080417-1610:1.19
	v20080322-0000:1.19
	v20080222-1200:1.19
	v20070809-0000:1.19
	R2_0_maintenance:1.19.0.2
	R2_0:1.19
	R4_20:1.19
	v20070621-0000:1.19
	RC3_20:1.19
	v20070601-1400:1.19
	v20070413-1300:1.19
	v20070405-2000:1.16
	v20070330-1300:1.15
	v20060316-0600:1.15
	v20070228-2000:1.15
	v20070208-1800:1.14
	M4_20:1.14
	v20061222-1800:1.14
	v20061214-0000:1.13
	M3_20:1.11
	v20061117-0800:1.11
	v20061013-1330:1.10
	v20060925-1700:1.4.2.1
	v20060919-0800:1.4.2.1
	M1_20:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060519-0800:1.4
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.19
date	2007.04.13.12.10.33;	author dstadnik;	state Exp;
branches;
next	1.18;
commitid	183c461f73394567;

1.18
date	2007.04.13.10.21.00;	author dstadnik;	state Exp;
branches;
next	1.17;
commitid	f73461f598b4567;

1.17
date	2007.04.13.08.41.00;	author dstadnik;	state Exp;
branches;
next	1.16;
commitid	1477461f421b4567;

1.16
date	2007.04.05.20.57.03;	author atikhomirov;	state Exp;
branches;
next	1.15;
commitid	47294615629e4567;

1.15
date	2007.02.23.16.39.29;	author dstadnik;	state Exp;
branches;
next	1.14;
commitid	66dc45df18c04567;

1.14
date	2006.12.22.15.10.53;	author dstadnik;	state Exp;
branches;
next	1.13;
commitid	119a458bf57c4567;

1.13
date	2006.11.24.16.12.24;	author dstadnik;	state Exp;
branches;
next	1.12;
commitid	5f2456719e74567;

1.12
date	2006.11.22.17.34.27;	author ashatalin;	state Exp;
branches;
next	1.11;
commitid	115e45648a234567;

1.11
date	2006.11.01.09.59.30;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.04.11.00.48;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.10.03.14.35.39;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.10.03.14.20.39;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.09.18.18.13.38;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.11.12.38.30;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.07.16.39.29;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.17.11.05.06;	author dstadnik;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2006.05.17.10.24.53;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.05.12.33.42;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.14.19.17;	author dstadnik;	state Exp;
branches;
next	;

1.4.2.1
date	2006.09.11.15.10.23;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.19
log
@[168935] Allow to generate gmfgen models for RCP application on dashboard
@
text
@/*
 * Copyright (c) 2006, 2007 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.ui.dashboard;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPath;
import org.eclipse.draw2d.ActionEvent;
import org.eclipse.draw2d.ActionListener;
import org.eclipse.draw2d.CheckBox;
import org.eclipse.draw2d.ColorConstants;
import org.eclipse.draw2d.IFigure;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.presentation.EcoreModelWizard;
import org.eclipse.emf.importer.ui.EMFModelWizard;
import org.eclipse.emf.importer.ui.GenModelReloadActionDelegate;
import org.eclipse.gmf.bridge.ui.dashboard.DashboardAction;
import org.eclipse.gmf.bridge.ui.dashboard.DashboardFacade;
import org.eclipse.gmf.bridge.ui.dashboard.DashboardState;
import org.eclipse.gmf.codegen.gmfgen.presentation.GMFGenModelWizard;
import org.eclipse.gmf.gmfgraph.presentation.GMFGraphModelWizard;
import org.eclipse.gmf.internal.bridge.ui.dashboard.DashboardActionRegistry.DashboardActionDescriptor;
import org.eclipse.gmf.internal.bridge.ui.dashboard.actions.TransformMap2GenModelAction;
import org.eclipse.gmf.internal.bridge.wizards.GMFGraphSimpleModelWizard;
import org.eclipse.gmf.internal.bridge.wizards.GMFMapGuideModelWizard;
import org.eclipse.gmf.internal.bridge.wizards.GMFToolSimpleModelWizard;
import org.eclipse.gmf.internal.bridge.wizards.WizardOperationMode;
import org.eclipse.gmf.internal.common.URIUtil;
import org.eclipse.gmf.internal.common.ui.FileSelector;
import org.eclipse.gmf.mappings.presentation.GMFMapModelWizard;
import org.eclipse.gmf.tooldef.presentation.GMFToolModelWizard;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizard;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWizard;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.FileEditorInput;

/**
 * @@author dstadnik
 */
public class DashboardMediator implements DashboardFacade {

	private static final boolean STRICT = true;

	private DashboardFigure view;

	private Shell shell;

	private IProject project;

	private DashboardState state;

	private Map<String, ActionContainer> locations;

	private Map<DashboardActionDescriptor, IFigure> contributions;

	private Map<String, CheckBox> optionFigures;

	public DashboardMediator(Shell shell) {
		state = new DashboardState();
		locations = new HashMap<String, ActionContainer>();
		contributions = new HashMap<DashboardActionDescriptor, IFigure>();
		optionFigures = new HashMap<String, CheckBox>();
		this.shell = shell;
	}

	public boolean isStrict() {
		return STRICT;
	}

	public Shell getShell() {
		return shell;
	}

	public void setView(DashboardFigure view) {
		this.view = view;
		locations.put(DashboardFacade.LOCATION_DM, view.getDMFigure());
		locations.put(DashboardFacade.LOCATION_DGM, view.getDGMFigure());
		locations.put(DashboardFacade.LOCATION_GDM, view.getGDMFigure());
		locations.put(DashboardFacade.LOCATION_TDM, view.getTDMFigure());
		locations.put(DashboardFacade.LOCATION_MM, view.getMMFigure());
		locations.put(DashboardFacade.LOCATION_GM, view.getGMFigure());
		locations.put(DashboardFacade.LOCATION_MM2GM, view.getMM2GMFigure());
		view.getDGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Select, new SelectDGMAction()));
		view.getDGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Edit, new EditDGMAction()));
		view.getDGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Reload, new ReloadDGMAction()));
		view.getGDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Select, new SelectGDMAction()));
		view.getGDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Edit, new EditGDMAction()));
		view.getGDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Create, new CreateGDMAction()));
		view.getDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Select, new SelectDMAction()));
		view.getDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Edit, new EditDMAction()));
		view.getDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Create, new CreateDMAction()));
		view.getTDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Select, new SelectTDMAction()));
		view.getTDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Edit, new EditTDMAction()));
		view.getTDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Create, new CreateTDMAction()));
		view.getMMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Select, new SelectMMAction()));
		view.getMMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Edit, new EditMMAction()));
		view.getMMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Create, new CreateMMAction()));
		view.getGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Select, new SelectGMAction()));
		view.getGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Edit, new EditGMAction()));
		view.getGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Create, new CreateGMAction()));
		view.getDM2DGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Derive, new DeriveDGMAction()));
		view.getDM2GDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Derive, new DeriveGDMAction()));
		view.getDM2TDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Derive, new DeriveTDMAction()));
		view.getDM2MMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Combine, new CombineMMAction()));
		view.getMM2GMFigure().addAction(createOptionFigure(Messages.DashboardMediator_RCP, DashboardFacade.OPTION_RCP));
		view.getMM2GMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Transform, new TransformMap2GenModelAction()));
		for (DashboardActionDescriptor descriptor : Plugin.getDefault().getDashboardActionRegistry().getDescriptors()) {
			addDashboardAction(descriptor);
		}
		updateStatus();
	}

	public void addDashboardAction(DashboardActionDescriptor descriptor) {
		ActionContainer location = locations.get(descriptor.getLocation());
		if (location == null) {
			Plugin.getDefault().getLog().log(Plugin.createError("Unknown GMF Dashboard location: " + descriptor.getLocation(), null)); //$NON-NLS-1$
			return;
		}
		DashboardAction action = descriptor.createDashboardAction();
		if (action == null) {
			return;
		}
		IFigure actionFigure = createLinkFigure(descriptor.getLabel(), action);
		location.addAction(actionFigure, descriptor.isStandard());
		contributions.put(descriptor, actionFigure);
	}

	public void removeDashboardAction(DashboardActionDescriptor descriptor) {
		IFigure actionFigure = contributions.remove(descriptor);
		if (actionFigure == null) {
			return; // not contributed; just ignore
		}
		ActionContainer location = locations.get(descriptor.getLocation());
		if (location == null) {
			Plugin.getDefault().getLog().log(Plugin.createError("Unknown GMF Dashboard location: " + descriptor.getLocation(), null)); //$NON-NLS-1$
			return;
		}
		location.removeAction(actionFigure, descriptor.isStandard());
	}

	/**
	 * Also initializes the action.
	 */
	protected IFigure createLinkFigure(String text, DashboardAction action) {
		action.init(this);
		HyperlinkFigure linkFigure = new HyperlinkFigure(action);
		linkFigure.setText(text);
		return linkFigure;
	}

	protected IFigure createOptionFigure(String text, final String option) {
		final CheckBox optionFigure = new CheckBox(text);
		optionFigure.setRequestFocusEnabled(false);
		optionFigure.setFocusTraversable(false);
		optionFigure.setForegroundColor(ColorConstants.blue);
		optionFigure.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent event) {
				getState().setOption(option, optionFigure.isSelected());
			}
		});
		optionFigures.put(option, optionFigure);
		return optionFigure;
	}

	public IProject getProject() {
		return project;
	}

	public DashboardState getState() {
		return state;
	}

	public void setProjectAndState(IProject project, DashboardState state) {
		this.project = project;
		this.state = state;
		if (this.state == null) {
			this.state = new DashboardState();
		}
		updateStatus();
	}

	public void updateStatus() {
		if (project == null) {
			view.getStatusLine(0).setText(Messages.DashboardMediator_SelectProject);
			view.getStatusLine(1).setText(""); //$NON-NLS-1$
		} else {
			view.getStatusLine(0).setText(MessageFormat.format(Messages.DashboardMediator_Project, new Object[] { project.getName() }));
			double done = (double) state.getSpecifiedModelsCount() / state.getModelsCount();
			view.getStatusLine(1).setText(MessageFormat.format(Messages.DashboardMediator_Progress, new Object[] { new Double(done) }));
		}
		setModelName(view.getDGMFigure(), state.getDGM());
		setModelName(view.getGDMFigure(), state.getGDM());
		setModelName(view.getDMFigure(), state.getDM());
		setModelName(view.getTDMFigure(), state.getTDM());
		setModelName(view.getMMFigure(), state.getMM());
		setModelName(view.getGMFigure(), state.getGM());
		optionFigures.get(DashboardFacade.OPTION_RCP).setSelected(state.getOption(DashboardFacade.OPTION_RCP));
		view.repaint(); // update hyperlinks
	}

	protected void setModelName(ModelFigure figure, URI uri) {
		figure.setName(uri == null ? null : uri.lastSegment());
		figure.setFullName(uri == null ? null : uri.toString());
	}

	protected abstract class SelectFileAction implements DashboardAction {

		public void init(DashboardFacade context) {
		}

		public boolean isEnabled() {
			return project != null;
		}

		public void run() {
			IFile file = getURI() == null ? null : URIUtil.getFile(getURI());
			file = FileSelector.selectFile(shell, getFigure().getDescription(), null, file, getFileExtension());
			if (file == null) {
				return;
			}
			setURI(URI.createPlatformResourceURI(file.getFullPath().toString(), true));
			updateStatus();
		}

		protected abstract ModelFigure getFigure();

		protected abstract URI getURI();

		protected abstract void setURI(URI uri);

		protected abstract String getFileExtension();
	}

	protected abstract class EditFileAction implements DashboardAction {

		public void init(DashboardFacade context) {
		}

		public boolean isEnabled() {
			return project != null && getURI() != null;
		}

		public void run() {
			IWorkbench workbench = PlatformUI.getWorkbench();
			IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow();
			IWorkbenchPage page = workbenchWindow.getActivePage();
			IFile modelFile = URIUtil.getFile(getURI());
			try {
				String fileName = modelFile.getFullPath().toString();
				String editorId = workbench.getEditorRegistry().getDefaultEditor(fileName).getId();
				page.openEditor(new FileEditorInput(modelFile), editorId);
			} catch (PartInitException pie) {
				String msg = MessageFormat.format(Messages.DashboardMediator_FailToOpen, new Object[] { getURI() });
				MessageDialog.openError(workbenchWindow.getShell(), msg, pie.getMessage());
			}
		}

		protected abstract URI getURI();
	}

	protected abstract class RunWizardAction implements DashboardAction {

		private static final int SIZING_WIZARD_WIDTH = 500;

		private static final int SIZING_WIZARD_HEIGHT = 500;

		public void init(DashboardFacade context) {
		}

		public boolean isEnabled() {
			return project != null;
		}

		public void run() {
			final IWizard wizard = createWizard();
			if (wizard instanceof IWorkbenchWizard) {
				((IWorkbenchWizard) wizard).init(PlatformUI.getWorkbench(), getSelection());
			}
			WizardDialog dialog = new WizardDialog(shell, wizard) {

				protected void finishPressed() {
					wizardFinished(wizard);
					super.finishPressed();
				}
			};
			dialog.create();
			dialog.getShell().setSize(Math.max(SIZING_WIZARD_WIDTH, dialog.getShell().getSize().x), SIZING_WIZARD_HEIGHT);
			dialog.open();
		}

		protected IStructuredSelection getSelection() {
			List<IFile> selection = new ArrayList<IFile>();
			addFile(selection, state.getDM());
			addFile(selection, state.getDGM());
			addFile(selection, state.getGDM());
			addFile(selection, state.getTDM());
			addFile(selection, state.getMM());
			addFile(selection, state.getGM());
			return new StructuredSelection(selection);
		}

		protected void addFile(List<IFile> files, URI uri) {
			if (uri == null) {
				return;
			}
			IFile file = URIUtil.getFile(uri);
			if (file != null) {
				files.add(file);
			}
		}

		protected abstract IWizard createWizard();

		protected void wizardFinished(IWizard wizard) {
		}
	}

	private class SelectDGMAction extends SelectFileAction {

		protected ModelFigure getFigure() {
			return DashboardMediator.this.view.getDGMFigure();
		}

		protected URI getURI() {
			return state.getDGM();
		}

		protected void setURI(URI uri) {
			state.setDGM(uri);
		}

		protected String getFileExtension() {
			return "genmodel"; //$NON-NLS-1$
		}
	}

	private class SelectGDMAction extends SelectFileAction {

		protected ModelFigure getFigure() {
			return DashboardMediator.this.view.getGDMFigure();
		}

		protected URI getURI() {
			return state.getGDM();
		}

		protected void setURI(URI uri) {
			state.setGDM(uri);
		}

		protected String getFileExtension() {
			return "gmfgraph"; //$NON-NLS-1$
		}
	}

	private class SelectDMAction extends SelectFileAction {

		protected ModelFigure getFigure() {
			return DashboardMediator.this.view.getDMFigure();
		}

		protected URI getURI() {
			return state.getDM();
		}

		protected void setURI(URI uri) {
			state.setDM(uri);
		}

		protected String getFileExtension() {
			return "ecore"; //$NON-NLS-1$
		}
	}

	private class SelectTDMAction extends SelectFileAction {

		protected ModelFigure getFigure() {
			return DashboardMediator.this.view.getTDMFigure();
		}

		protected URI getURI() {
			return state.getTDM();
		}

		protected void setURI(URI uri) {
			state.setTDM(uri);
		}

		protected String getFileExtension() {
			return "gmftool"; //$NON-NLS-1$
		}
	}

	private class SelectMMAction extends SelectFileAction {

		protected ModelFigure getFigure() {
			return DashboardMediator.this.view.getMMFigure();
		}

		protected URI getURI() {
			return state.getMM();
		}

		protected void setURI(URI uri) {
			state.setMM(uri);
		}

		protected String getFileExtension() {
			return "gmfmap"; //$NON-NLS-1$
		}
	}

	private class SelectGMAction extends SelectFileAction {

		protected ModelFigure getFigure() {
			return DashboardMediator.this.view.getGMFigure();
		}

		protected URI getURI() {
			return state.getGM();
		}

		protected void setURI(URI uri) {
			state.setGM(uri);
		}

		protected String getFileExtension() {
			return "gmfgen"; //$NON-NLS-1$
		}
	}

	private class EditDGMAction extends EditFileAction {

		protected URI getURI() {
			return state.getDGM();
		}
	}

	private class EditGDMAction extends EditFileAction {

		protected URI getURI() {
			return state.getGDM();
		}
	}

	private class EditDMAction extends EditFileAction {

		protected URI getURI() {
			return state.getDM();
		}
	}

	private class EditTDMAction extends EditFileAction {

		protected URI getURI() {
			return state.getTDM();
		}
	}

	private class EditMMAction extends EditFileAction {

		protected URI getURI() {
			return state.getMM();
		}
	}

	private class EditGMAction extends EditFileAction {

		protected URI getURI() {
			return state.getGM();
		}
	}

	private class CreateGDMAction extends RunWizardAction {

		protected IWizard createWizard() {
			return new GMFGraphModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFGraphModelWizard) wizard).getModelFile();
			state.setGDM(file);
			updateStatus();
		}
	}

	private class CreateDMAction extends RunWizardAction {

		protected IWizard createWizard() {
			return new EcoreModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((EcoreModelWizard) wizard).getModelFile();
			state.setDM(file);
			updateStatus();
		}
	}

	private class CreateTDMAction extends RunWizardAction {

		protected IWizard createWizard() {
			return new GMFToolModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFToolModelWizard) wizard).getModelFile();
			state.setTDM(file);
			updateStatus();
		}
	}

	private class CreateMMAction extends RunWizardAction {

		protected IWizard createWizard() {
			return new GMFMapModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFMapModelWizard) wizard).getModelFile();
			state.setMM(file);
			updateStatus();
		}
	}

	private class CreateGMAction extends RunWizardAction {

		protected IWizard createWizard() {
			return new GMFGenModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFGenModelWizard) wizard).getModelFile();
			state.setGM(file);
			updateStatus();
		}
	}

	private class ReloadDGMAction implements DashboardAction {

		public void init(DashboardFacade context) {
		}

		public boolean isEnabled() {
			return state.getDGM() != null;
		}

		public void run() {
			IFile file = URIUtil.getFile(state.getDGM());
			GenModelReloadActionDelegate action = new GenModelReloadActionDelegate();
			IAction uiAction = new Action() {
			};
			action.selectionChanged(uiAction, new StructuredSelection(file));
			action.run(uiAction);
			updateStatus();
		}
	}

	private class DeriveDGMAction extends RunWizardAction {

		public boolean isEnabled() {
			return super.isEnabled() && state.getDM() != null;
		}

		protected IWizard createWizard() {
			return new OpenEMFModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((OpenEMFModelWizard) wizard).getModelFile();
			state.setDGM(file);
			updateStatus();
		}

		protected IStructuredSelection getSelection() {
			return new StructuredSelection(URIUtil.getFile(state.getDM()));
		}
	}

	private static class OpenEMFModelWizard extends EMFModelWizard {

		public IFile getModelFile() {
			IPath path = genModelContainerPath.append(genModelFileName);
			return ResourcesPlugin.getWorkspace().getRoot().getFile(path);
		}
	}

	private class DeriveGDMAction extends RunWizardAction {

		public boolean isEnabled() {
			return super.isEnabled() && state.getDM() != null;
		}

		protected IWizard createWizard() {
			GMFGraphSimpleModelWizard wizard = new GMFGraphSimpleModelWizard();
			wizard.setMode(WizardOperationMode.DETECT);
			return wizard;
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFGraphSimpleModelWizard) wizard).getModelFile();
			state.setGDM(file);
			updateStatus();
		}
	}

	private class DeriveTDMAction extends RunWizardAction {

		public boolean isEnabled() {
			return super.isEnabled() && state.getDM() != null;
		}

		protected IWizard createWizard() {
			GMFToolSimpleModelWizard wizard = new GMFToolSimpleModelWizard();
			wizard.setMode(WizardOperationMode.DETECT);
			return wizard;
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFToolSimpleModelWizard) wizard).getModelFile();
			state.setTDM(file);
			updateStatus();
		}
	}

	private class CombineMMAction extends RunWizardAction {

		public boolean isEnabled() {
			return project != null && state.getGDM() != null && state.getDM() != null && state.getTDM() != null;
		}

		protected IWizard createWizard() {
			return new GMFMapGuideModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFMapGuideModelWizard) wizard).getModelFile();
			state.setMM(file);
			updateStatus();
		}
	}
}
@


1.18
log
@follow action protocol
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Eclipse.org
d24 4
d83 2
d89 1
d132 1
d178 15
d225 1
@


1.17
log
@provide shell from context
@
text
@d125 1
a125 4
		// XXX Dima, the contract of DashboardAction#init is broken for all actions added above!
		final TransformMap2GenModelAction transformAction = new TransformMap2GenModelAction();
		transformAction.init(this);
		view.getMM2GMFigure().addAction(createLinkFigure(Messages.DashboardMediator_Transform, transformAction));
a141 1
		action.init(this);
d160 5
a164 1
	public IFigure createLinkFigure(String text, DashboardAction action) {
@


1.16
log
@deprecated map->genmodel transformation action removed, dashboard updated to use new one
@
text
@d90 4
@


1.15
log
@[169278] Allow to select any model in dashboard
@
text
@d35 1
d121 4
@


1.14
log
@invalid uri used for genmodel
@
text
@d212 1
a212 1
			file = FileSelector.selectFile(shell, getFigure().getDescription(), project, file, getFileExtension());
@


1.13
log
@use new mapping wizard
@
text
@d415 1
a415 1
			return state.getDM();
d419 1
a419 1
			state.setDM(uri);
@


1.12
log
@Removing warnings
@
text
@d36 1
a37 1
import org.eclipse.gmf.internal.bridge.wizards.NewGMFMapModelWizard;
d628 1
a628 1
			return new NewGMFMapModelWizard();
d632 1
a632 1
			IFile file = ((NewGMFMapModelWizard) wizard).getModelFile();
@


1.11
log
@use uris instead of file names in dashboard
@
text
@d216 1
a216 1
			setURI(URI.createPlatformResourceURI(file.getFullPath().toString()));
@


1.10
log
@update dashboard on extension changes
@
text
@a23 1
import org.eclipse.core.runtime.Path;
d25 1
d39 1
a160 11
	public IFile getFile(String fileName) {
		return project.getFile(new Path(fileName));
	}

	public String getName(IFile file) {
		if (file == null) {
			return null;
		}
		return file.getProjectRelativePath().toString();
	}

d187 6
a192 6
		setModelName(view.getDGMFigure(), state.dgmFileName);
		setModelName(view.getGDMFigure(), state.gdmFileName);
		setModelName(view.getDMFigure(), state.dmFileName);
		setModelName(view.getTDMFigure(), state.tdmFileName);
		setModelName(view.getMMFigure(), state.mmFileName);
		setModelName(view.getGMFigure(), state.gmFileName);
d196 3
a198 2
	protected void setModelName(ModelFigure figure, String name) {
		figure.setName(name);
d211 4
a214 4
			IFile file = null;
			String fileName = getFileName();
			if (fileName != null) {
				file = getFile(fileName);
d216 1
a216 2
			file = FileSelector.selectFile(shell, getFigure().getDescription(), project, file, getFileExtension());
			setFileName(getName(file));
d222 1
a222 1
		protected abstract String getFileName();
d224 1
a224 1
		protected abstract void setFileName(String fileName);
d235 1
a235 1
			return project != null && getFileName() != null;
d242 1
a242 1
			IFile modelFile = getFile(getFileName());
d248 1
a248 1
				String msg = MessageFormat.format(Messages.DashboardMediator_FailToOpen, new Object[] { getFileName() });
d253 1
a253 1
		protected abstract String getFileName();
d288 6
a293 6
			addFile(selection, state.dmFileName);
			addFile(selection, state.dgmFileName);
			addFile(selection, state.gdmFileName);
			addFile(selection, state.tdmFileName);
			addFile(selection, state.mmFileName);
			addFile(selection, state.gmFileName);
d297 2
a298 2
		protected void addFile(List<IFile> files, String name) {
			if (name == null) {
d301 4
a304 1
			files.add(project.getFile(name));
d319 2
a320 2
		protected String getFileName() {
			return state.dgmFileName;
d323 2
a324 2
		protected void setFileName(String fileName) {
			state.dgmFileName = fileName;
d338 2
a339 2
		protected String getFileName() {
			return state.gdmFileName;
d342 2
a343 2
		protected void setFileName(String fileName) {
			state.gdmFileName = fileName;
d357 2
a358 2
		protected String getFileName() {
			return state.dmFileName;
d361 2
a362 2
		protected void setFileName(String fileName) {
			state.dmFileName = fileName;
d376 2
a377 2
		protected String getFileName() {
			return state.tdmFileName;
d380 2
a381 2
		protected void setFileName(String fileName) {
			state.tdmFileName = fileName;
d395 2
a396 2
		protected String getFileName() {
			return state.mmFileName;
d399 2
a400 2
		protected void setFileName(String fileName) {
			state.mmFileName = fileName;
d414 2
a415 2
		protected String getFileName() {
			return state.gmFileName;
d418 2
a419 2
		protected void setFileName(String fileName) {
			state.gmFileName = fileName;
d429 2
a430 2
		protected String getFileName() {
			return state.dgmFileName;
d436 2
a437 2
		protected String getFileName() {
			return state.gdmFileName;
d443 2
a444 2
		protected String getFileName() {
			return state.dmFileName;
d450 2
a451 2
		protected String getFileName() {
			return state.tdmFileName;
d457 2
a458 2
		protected String getFileName() {
			return state.mmFileName;
d464 2
a465 2
		protected String getFileName() {
			return state.gmFileName;
d477 1
a477 1
			state.gdmFileName = getName(file);
d490 1
a490 1
			state.dmFileName = getName(file);
d503 1
a503 1
			state.tdmFileName = getName(file);
d516 1
a516 1
			state.mmFileName = getName(file);
d529 1
a529 1
			state.gmFileName = getName(file);
d540 1
a540 1
			return state.dgmFileName != null;
d544 1
a544 1
			IFile file = getFile(state.dgmFileName);
d557 1
a557 1
			return super.isEnabled() && state.dmFileName != null;
d566 1
a566 1
			state.dgmFileName = getName(file);
d571 1
a571 1
			return new StructuredSelection(getFile(state.dmFileName));
d586 1
a586 1
			return super.isEnabled() && state.dmFileName != null;
d597 1
a597 1
			state.gdmFileName = getName(file);
d605 1
a605 1
			return super.isEnabled() && state.dmFileName != null;
d616 1
a616 1
			state.tdmFileName = getName(file);
d624 1
a624 1
			return project != null && state.gdmFileName != null && state.dmFileName != null && state.tdmFileName != null;
d633 1
a633 1
			state.mmFileName = getName(file);
@


1.9
log
@rename i18n keys
@
text
@d75 2
d80 1
d125 1
a125 1
	protected void addDashboardAction(DashboardActionDescriptor descriptor) {
d136 16
a151 1
		location.addAction(createLinkFigure(descriptor.getLabel(), action), descriptor.isStandard());
@


1.8
log
@allow other plugins to contribute actions to the dashboard
@
text
@d94 22
a115 22
		view.getDGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_0, new SelectDGMAction()));
		view.getDGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_1, new EditDGMAction()));
		view.getDGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_2, new ReloadDGMAction()));
		view.getGDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_0, new SelectGDMAction()));
		view.getGDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_1, new EditGDMAction()));
		view.getGDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_3, new CreateGDMAction()));
		view.getDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_0, new SelectDMAction()));
		view.getDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_1, new EditDMAction()));
		view.getDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_3, new CreateDMAction()));
		view.getTDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_0, new SelectTDMAction()));
		view.getTDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_1, new EditTDMAction()));
		view.getTDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_3, new CreateTDMAction()));
		view.getMMFigure().addAction(createLinkFigure(Messages.DashboardMediator_0, new SelectMMAction()));
		view.getMMFigure().addAction(createLinkFigure(Messages.DashboardMediator_1, new EditMMAction()));
		view.getMMFigure().addAction(createLinkFigure(Messages.DashboardMediator_3, new CreateMMAction()));
		view.getGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_0, new SelectGMAction()));
		view.getGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_1, new EditGMAction()));
		view.getGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_3, new CreateGMAction()));
		view.getDM2DGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_4, new DeriveDGMAction()));
		view.getDM2GDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_4, new DeriveGDMAction()));
		view.getDM2TDMFigure().addAction(createLinkFigure(Messages.DashboardMediator_4, new DeriveTDMAction()));
		view.getDM2MMFigure().addAction(createLinkFigure(Messages.DashboardMediator_6, new CombineMMAction()));
d172 1
a172 1
			view.getStatusLine(0).setText(Messages.DashboardMediator_8);
d175 1
a175 1
			view.getStatusLine(0).setText(MessageFormat.format(Messages.DashboardMediator_15, new Object[] { project.getName() }));
d177 1
a177 1
			view.getStatusLine(1).setText(MessageFormat.format(Messages.DashboardMediator_16, new Object[] { new Double(done) }));
d240 1
a240 1
				String msg = MessageFormat.format(Messages.DashboardMediator_17, new Object[] { getFileName() });
@


1.7
log
@run simple wizards in detect mode
@
text
@d16 1
d18 1
d29 3
d34 1
a38 2
import org.eclipse.gmf.internal.codegen.popup.actions.ExecuteTemplatesAction;
import org.eclipse.gmf.internal.codegen.popup.actions.TransformToGenModel;
d61 1
a61 1
public class DashboardMediator {
d73 2
d77 1
d81 4
d87 7
a111 1
		view.getGMFigure().addAction(createLinkFigure(Messages.DashboardMediator_5, new GenerateDEAction()));
d116 3
a118 1
		view.getMM2GMFigure().addAction(createLinkFigure(Messages.DashboardMediator_7, new GenerateGMAction()));
d122 14
d142 1
a142 1
	protected IFile getFile(String fileName) {
d146 1
a146 1
	protected String getName(IFile file) {
d170 1
a170 1
	protected void updateStatus() {
d194 3
d223 3
d254 3
d525 3
d568 1
a568 1
		    return ResourcesPlugin.getWorkspace().getRoot().getFile(path);
a625 51

	private class GenerateGMAction implements DashboardAction {

		public boolean isEnabled() {
			if (STRICT) {
				if (state.dmFileName == null || state.dgmFileName == null || state.tdmFileName == null) {
					return false;
				}
			}
			return project != null && state.mmFileName != null;
		}

		public void run() {
			IFile file = getFile(state.mmFileName);
			TransformToGenModel action = new TransformToGenModel();
			IAction uiAction = new Action() {
			};
			uiAction.setText(Messages.DashboardMediator_13);
			IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
			action.setActivePart(uiAction, window.getPartService().getActivePart());
			action.selectionChanged(uiAction, new StructuredSelection(file));
			action.run(uiAction);
			IFile gfile = action.getGenModelFile();
			state.gmFileName = getName(gfile);
			updateStatus();
		}
	}

	private class GenerateDEAction implements DashboardAction {

		public boolean isEnabled() {
			if (STRICT) {
				if (state.dmFileName == null || state.dgmFileName == null) {
					return false;
				}
			}
			return project != null && state.gmFileName != null;
		}

		public void run() {
			IFile file = getFile(state.gmFileName);
			ExecuteTemplatesAction action = new ExecuteTemplatesAction();
			IAction uiAction = new Action() {
			};
			uiAction.setText(Messages.DashboardMediator_14);
			IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
			action.setActivePart(uiAction, window.getPartService().getActivePart());
			action.selectionChanged(uiAction, new StructuredSelection(file));
			action.run(uiAction);
		}
	}
@


1.6
log
@#149170 GMF Dashboard: Mapping Model creation wizard should be initialized with correct model location + GMF models
@
text
@d32 1
d534 3
a536 1
			return new GMFGraphSimpleModelWizard();
a543 4

		protected IStructuredSelection getSelection() {
			return new StructuredSelection(getFile(state.dmFileName));
		}
d553 3
a555 1
			return new GMFToolSimpleModelWizard();
a562 4

		protected IStructuredSelection getSelection() {
			return new StructuredSelection(getFile(state.dmFileName));
		}
@


1.5
log
@provide 'find in workspace' button to locate model files
@
text
@d15 2
d236 15
a250 1
			return new StructuredSelection(project);
@


1.4
log
@1.4 compatibility
@
text
@a26 1
import org.eclipse.gmf.internal.bridge.ui.FileSelector;
d32 1
@


1.4.2.1
log
@#149170 GMF Dashboard: Mapping Model creation wizard should be initialized with correct model location + GMF models
@
text
@a14 2
import java.util.ArrayList;
import java.util.List;
d234 1
a234 15
			List selection = new ArrayList();
			addFile(selection, state.dmFileName);
			addFile(selection, state.dgmFileName);
			addFile(selection, state.gdmFileName);
			addFile(selection, state.tdmFileName);
			addFile(selection, state.mmFileName);
			addFile(selection, state.gmFileName);
			return new StructuredSelection(selection);
		}

		protected void addFile(List files, String name) {
			if (name == null) {
				return;
			}
			files.add(project.getFile(name));
@


1.3
log
@#137306 nls; complete
@
text
@d139 1
a139 1
			view.getStatusLine(0).setText(MessageFormat.format(Messages.DashboardMediator_15, project.getName()));
d141 1
a141 1
			view.getStatusLine(1).setText(MessageFormat.format(Messages.DashboardMediator_16, new Double(done)));
d198 1
a198 1
				String msg = MessageFormat.format(Messages.DashboardMediator_17, getFileName());
@


1.2
log
@#124852 add domain genmodel
@
text
@d14 2
d73 24
a96 24
		view.getDGMFigure().addAction(createLinkFigure("Select", new SelectDGMAction()));
		view.getDGMFigure().addAction(createLinkFigure("Edit", new EditDGMAction()));
		view.getDGMFigure().addAction(createLinkFigure("Reload", new ReloadDGMAction()));
		view.getGDMFigure().addAction(createLinkFigure("Select", new SelectGDMAction()));
		view.getGDMFigure().addAction(createLinkFigure("Edit", new EditGDMAction()));
		view.getGDMFigure().addAction(createLinkFigure("Create", new CreateGDMAction()));
		view.getDMFigure().addAction(createLinkFigure("Select", new SelectDMAction()));
		view.getDMFigure().addAction(createLinkFigure("Edit", new EditDMAction()));
		view.getDMFigure().addAction(createLinkFigure("Create", new CreateDMAction()));
		view.getTDMFigure().addAction(createLinkFigure("Select", new SelectTDMAction()));
		view.getTDMFigure().addAction(createLinkFigure("Edit", new EditTDMAction()));
		view.getTDMFigure().addAction(createLinkFigure("Create", new CreateTDMAction()));
		view.getMMFigure().addAction(createLinkFigure("Select", new SelectMMAction()));
		view.getMMFigure().addAction(createLinkFigure("Edit", new EditMMAction()));
		view.getMMFigure().addAction(createLinkFigure("Create", new CreateMMAction()));
		view.getGMFigure().addAction(createLinkFigure("Select", new SelectGMAction()));
		view.getGMFigure().addAction(createLinkFigure("Edit", new EditGMAction()));
		view.getGMFigure().addAction(createLinkFigure("Create", new CreateGMAction()));
		view.getGMFigure().addAction(createLinkFigure("Generate Diagram Editor", new GenerateDEAction()));
		view.getDM2DGMFigure().addAction(createLinkFigure("Derive", new DeriveDGMAction()));
		view.getDM2GDMFigure().addAction(createLinkFigure("Derive", new DeriveGDMAction()));
		view.getDM2TDMFigure().addAction(createLinkFigure("Derive", new DeriveTDMAction()));
		view.getDM2MMFigure().addAction(createLinkFigure("Combine", new CombineMMAction()));
		view.getMM2GMFigure().addAction(createLinkFigure("Transform", new GenerateGMAction()));
d136 2
a137 2
			view.getStatusLine(0).setText("Select a project in workspace");
			view.getStatusLine(1).setText("");
d139 3
a141 3
			view.getStatusLine(0).setText("Project: " + project.getName());
			int done = state.getSpecifiedModelsCount() * 100 / state.getModelsCount();
			view.getStatusLine(1).setText("Progress: " + done + "% done");
d198 1
a198 1
				String msg = "Unable to open editor for " + getFileName();
d258 1
a258 1
			return "genmodel";
d277 1
a277 1
			return "gmfgraph";
d296 1
a296 1
			return "ecore";
d315 1
a315 1
			return "gmftool";
d334 1
a334 1
			return "gmfmap";
d353 1
a353 1
			return "gmfgen";
d585 1
a585 1
			uiAction.setText("Transform to GMF generation model");
d612 1
a612 1
			uiAction.setText("Generate diagram editor");
@


1.1
log
@#129930 moved from oeg.codegen.ui
@
text
@d16 2
d21 2
d54 2
d71 3
d89 2
a90 1
		view.getGMFigure().addAction(createLinkFigure("Generate diagram editor", new GenerateDEAction()), false);
d141 1
d241 19
d355 7
d462 46
d570 5
d597 5
@

