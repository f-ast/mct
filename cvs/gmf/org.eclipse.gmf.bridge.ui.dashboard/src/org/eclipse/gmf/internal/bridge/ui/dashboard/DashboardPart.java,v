head	1.10;
access;
symbols
	v20080722-1827:1.10
	R2_1_maintenance:1.10.0.4
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080417-1610:1.10
	v20080322-0000:1.10
	v20080222-1200:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.2
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070601-1400:1.10
	v20070413-1300:1.10
	v20070405-2000:1.9
	v20070330-1300:1.9
	v20060316-0600:1.9
	v20070228-2000:1.9
	v20070208-1800:1.7
	M4_20:1.7
	v20061222-1800:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061013-1330:1.7
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2007.04.13.12.10.34;	author dstadnik;	state Exp;
branches;
next	1.9;
commitid	183c461f73394567;

1.9
date	2007.02.23.18.39.27;	author dstadnik;	state Exp;
branches;
next	1.8;
commitid	7bd445df34de4567;

1.8
date	2007.02.23.16.39.29;	author dstadnik;	state Exp;
branches;
next	1.7;
commitid	66dc45df18c04567;

1.7
date	2006.10.04.11.00.48;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.03.14.35.39;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.03.14.20.39;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.04.18.39.18;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.17.10.24.53;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.17.09.51.29;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.14.19.17;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.10
log
@[168935] Allow to generate gmfgen models for RCP application on dashboard
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.ui.dashboard;

import java.util.Iterator;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.draw2d.FigureCanvas;
import org.eclipse.gmf.bridge.ui.dashboard.DashboardState;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.util.IPropertyChangeListener;
import org.eclipse.jface.util.PropertyChangeEvent;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.IMemento;
import org.eclipse.ui.ISelectionListener;
import org.eclipse.ui.IViewSite;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.part.ViewPart;

/**
 * @@author dstadnik
 */
public class DashboardPart extends ViewPart {

	private static final String ACTIVE_PROJECT_KEY = "activeProject"; //$NON-NLS-1$

	private static final String SYNC_SELECTION_KEY = "syncSelection"; //$NON-NLS-1$

	private FigureCanvas canvas;

	private DashboardMediator mediator;

	private ISelectionListener projectUpdater;

	/**
	 * Reflects current workbench selection even if synchronization is off.
	 */
	private IProject activeProject;

	private String dashboardInitialProjectName;

	private boolean syncSelection = true;

	public void init(IViewSite site, IMemento memento) throws PartInitException {
		super.init(site, memento);
		if (memento != null) {
			dashboardInitialProjectName = memento.getString(ACTIVE_PROJECT_KEY);
			String syncSelectionValue = memento.getString(SYNC_SELECTION_KEY);
			if (syncSelectionValue != null) {
				syncSelection = Boolean.valueOf(syncSelectionValue).booleanValue();
			}
		}
		IAction syncSelectionAction = new Action(Messages.DashboardPart_Synchronize, IAction.AS_CHECK_BOX) {
		};
		syncSelectionAction.setToolTipText(Messages.DashboardPart_SynchronizeSelection);
		ImageDescriptor synchImage = Plugin.getDefault().getImageRegistry().getDescriptor(Plugin.SYNC_ICON);
		if (synchImage != null) {
			syncSelectionAction.setImageDescriptor(synchImage);
		}
		syncSelectionAction.setChecked(syncSelection);
		syncSelectionAction.addPropertyChangeListener(new IPropertyChangeListener() {

			public void propertyChange(PropertyChangeEvent event) {
				if (IAction.CHECKED.equals(event.getProperty())) {
					syncSelection = ((Boolean) event.getNewValue()).booleanValue();
					if (syncSelection && mediator != null && activeProject != mediator.getProject()) {
						updateDashboardProject(activeProject);
					}
				}
			}
		});
		site.getActionBars().getToolBarManager().add(syncSelectionAction);
	}

	public void createPartControl(Composite parent) {
		canvas = new FigureCanvas(parent);
		mediator = new DashboardMediator(parent.getShell());
		DashboardFigure contents = new DashboardFigure();
		mediator.setView(contents);
		canvas.setContents(contents);
		getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(projectUpdater = new ISelectionListener() {

			public void selectionChanged(IWorkbenchPart part, ISelection selection) {
				updateActiveProject(selection);
			}
		});
		updateActiveProject(getSite().getWorkbenchWindow().getSelectionService().getSelection());
		if (mediator.getProject() == null && dashboardInitialProjectName != null) {
			IProject dashboardProject = ResourcesPlugin.getWorkspace().getRoot().getProject(dashboardInitialProjectName);
			if (dashboardProject.exists()) {
				updateDashboardProject(dashboardProject);
			}
		}
		Plugin.getDefault().getDashboardActionRegistry().registerMediator(mediator);
	}

	public void saveState(IMemento memento) {
		super.saveState(memento);
		if (mediator != null && mediator.getProject() != null) {
			memento.putString(ACTIVE_PROJECT_KEY, mediator.getProject().getName());
			if (!syncSelection) {
				memento.putString(SYNC_SELECTION_KEY, String.valueOf(syncSelection));
			}
		}
	}

	public void dispose() {
		if (mediator != null) {
			Plugin.getDefault().getDashboardActionRegistry().unregisterMediator(mediator);
			mediator = null;
		}
		if (projectUpdater != null) {
			getSite().getWorkbenchWindow().getSelectionService().removeSelectionListener(projectUpdater);
			projectUpdater = null;
		}
		super.dispose();
	}

	public void setFocus() {
		if (canvas != null) {
			canvas.setFocus();
		}
	}

	protected void updateActiveProject(ISelection selection) {
		if (!(selection instanceof IStructuredSelection)) {
			return;
		}
		IProject newActiveProject = null;
		for (Iterator<?> it = ((IStructuredSelection) selection).iterator(); it.hasNext();) {
			Object element = it.next();
			IProject project = null;
			if (element instanceof IResource) {
				project = ((IResource) element).getProject();
			} else if (element instanceof IAdaptable) {
				IResource resource = (IResource) ((IAdaptable) element).getAdapter(IResource.class);
				if (resource != null) {
					project = resource.getProject();
				}
			}
			if (project == null) {
				continue;
			}
			if (project.equals(activeProject)) {
				// if current active project is selected do not change it
				return;
			}
			if (newActiveProject == null) {
				// new active project is the first selected project
				newActiveProject = project;
			}
		}
		if (newActiveProject != null) {
			activeProject = newActiveProject;
			if (syncSelection && mediator != null) {
				updateDashboardProject(newActiveProject);
			}
		}
	}

	protected void updateDashboardProject(IProject project) {
		mediator.setProjectAndState(project, new DashboardState(project));
	}
}
@


1.9
log
@[169277] Use project local store to save dashboard prefs
@
text
@a17 1
import org.eclipse.core.resources.ProjectScope;
a19 2
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Platform;
a35 2
import org.osgi.service.prefs.BackingStoreException;
import org.osgi.service.prefs.Preferences;
a45 2
	private static final String PREF_KEY = "gmf_dashboard"; //$NON-NLS-1$

d179 1
a179 31
		mediator.setProjectAndState(project, new DashboardState(getPreferences(project)));
	}

	private Preferences getPreferences(IProject project) {
		Preferences node = getExistingPreferences(project);
		if (node != null) {
			return node;
		}
		return new ProjectScope(project).getNode(Plugin.getPluginID()).node(PREF_KEY);
	}

	private Preferences getExistingPreferences(IProject project) {
		Preferences node = Platform.getPreferencesService().getRootNode().node(ProjectScope.SCOPE);
		try {
			if (!node.nodeExists(project.getName())) {
				return null;
			}
			node = node.node(project.getName());
			if (!node.nodeExists(Plugin.getPluginID())) {
				return null;
			}
			node = node.node(Plugin.getPluginID());
			if (!node.nodeExists(PREF_KEY)) {
				return null;
			}
			return node.node(PREF_KEY);
		} catch (BackingStoreException e) {
			IStatus status = Plugin.createError("Unable to read state", e);
			Plugin.getDefault().getLog().log(status);
		}
		return null;
@


1.8
log
@[169278] Allow to select any model in dashboard
@
text
@a13 1
import java.util.HashMap;
a14 1
import java.util.Map;
d18 1
d21 2
d39 2
d51 2
a63 2
	private Map<IProject, DashboardState> states;

d70 1
a70 4
		if (memento == null) {
			states = new HashMap<IProject, DashboardState>();
		} else {
			states = DashboardPersistence.read(memento);
d115 1
a115 1
				mediator.setProjectAndState(dashboardProject, states.get(dashboardProject));
a123 1
			states.put(mediator.getProject(), mediator.getState());
a128 1
		DashboardPersistence.write(memento, states);
d186 29
a214 2
		if (mediator.getProject() != null) {
			states.put(mediator.getProject(), mediator.getState());
d216 1
a216 1
		mediator.setProjectAndState(project, states.get(project));
@


1.7
log
@update dashboard on extension changes
@
text
@d156 1
a156 1
		for (Iterator it = ((IStructuredSelection) selection).iterator(); it.hasNext();) {
@


1.6
log
@rename i18n keys
@
text
@d118 1
d134 4
@


1.5
log
@allow other plugins to contribute actions to the dashboard
@
text
@d77 1
a77 1
		IAction syncSelectionAction = new Action(Messages.DashboardPart_0, IAction.AS_CHECK_BOX) {
d79 1
a79 1
		syncSelectionAction.setToolTipText(Messages.DashboardPart_1);
@


1.4
log
@use generics wherever possible
@
text
@d23 1
@


1.3
log
@#137306 nls; complete
@
text
@d58 1
a58 1
	private Map states;
d67 1
a67 1
			states = new HashMap();
d114 1
a114 1
				mediator.setProjectAndState(dashboardProject, (DashboardState) states.get(dashboardProject));
d185 1
a185 1
		mediator.setProjectAndState(project, (DashboardState) states.get(project));
@


1.2
log
@#137306 nls; partial
@
text
@d76 1
a76 1
		IAction syncSelectionAction = new Action("Synchronize", IAction.AS_CHECK_BOX) {
d78 1
a78 1
		syncSelectionAction.setToolTipText("Synchronize with workbench selection");
@


1.1
log
@#129930 moved from oeg.codegen.ui
@
text
@d43 1
a43 1
	private static final String ACTIVE_PROJECT_KEY = "activeProject";
d45 1
a45 1
	private static final String SYNC_SELECTION_KEY = "syncSelection";
@

