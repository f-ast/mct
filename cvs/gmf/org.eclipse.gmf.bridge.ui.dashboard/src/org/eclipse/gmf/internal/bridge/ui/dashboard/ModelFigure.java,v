head	1.8;
access;
symbols
	v20080722-1827:1.8
	R2_1_maintenance:1.8.0.4
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080417-1610:1.8
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070601-1400:1.8
	v20070413-1300:1.8
	v20070405-2000:1.8
	v20070330-1300:1.8
	v20060316-0600:1.8
	v20070228-2000:1.8
	v20070208-1800:1.8
	M4_20:1.8
	v20061222-1800:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061013-1330:1.7
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2006.11.01.09.25.28;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.04.11.00.49;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.03.14.35.39;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.03.14.20.39;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.04.18.39.18;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.17.09.51.29;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.05.12.33.42;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.01.14.19.17;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.8
log
@allow to set tooltip
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.bridge.ui.dashboard;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.MarginBorder;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.ToolbarLayout;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.swt.graphics.Image;

/**
 * @@author dstadnik
 */
public class ModelFigure extends RectangleFigure implements ActionContainer {

	private IFigure labelsPlate;

	private IFigure actionsPlate;

	private IFigure stdActionsPlate;

	private List<SeparatorFigure> separators;

	public ModelFigure() {
		separators = new ArrayList<SeparatorFigure>();
		ToolbarLayout layout = new ToolbarLayout();
		layout.setMinorAlignment(ToolbarLayout.ALIGN_CENTER);
		setLayoutManager(layout);

		labelsPlate = new Figure();
		ToolbarLayout labelsLayout = new ToolbarLayout();
		labelsPlate.setLayoutManager(labelsLayout);
		add(labelsPlate);

		SeparatorFigure s1 = new SeparatorFigure();
		separators.add(s1);
		add(s1);

		actionsPlate = new Figure();
		ToolbarLayout actionsLayout = new ToolbarLayout();
		actionsLayout.setStretchMinorAxis(false);
		actionsPlate.setLayoutManager(actionsLayout);
		add(actionsPlate);

		stdActionsPlate = new Figure();
		ToolbarLayout stdActionsLayout = new ToolbarLayout(true);
		stdActionsLayout.setSpacing(2);
		stdActionsPlate.setLayoutManager(stdActionsLayout);
		actionsPlate.add(stdActionsPlate);

		Label descriptionFigure = new Label();
		descriptionFigure.setFont(JFaceResources.getBannerFont());
		addLabel(descriptionFigure);
		Label nameFigure = new Label();
		addLabel(nameFigure);
		setName(null); // init
	}

	public void setSpacing(int spacing) {
		setBorder(new MarginBorder(spacing, 0, spacing, 0));
		for (SeparatorFigure separator : separators) {
			separator.setPreferredSize(new Dimension(0, spacing + separator.getLineWidth()));
		}
		labelsPlate.setBorder(new MarginBorder(0, spacing, 0, spacing));
		actionsPlate.setBorder(new MarginBorder(0, spacing, 0, spacing));
	}

	public void addLabel(IFigure labelFigure) {
		labelsPlate.add(labelFigure);
	}

	public void removeLabel(IFigure labelFigure) {
		labelsPlate.remove(labelFigure);
	}

	public final void addAction(IFigure actionFigure) {
		addAction(actionFigure, true);
	}

	public void addAction(IFigure actionFigure, boolean std) {
		Label bullet = new Label();
		// bullet.setText("-");
		if (std) {
			if (!stdActionsPlate.getChildren().isEmpty()) {
				bullet.setText("/"); //$NON-NLS-1$
			}
			stdActionsPlate.add(bullet);
			stdActionsPlate.add(actionFigure);
		} else {
			IFigure plate = new Figure();
			ToolbarLayout layout = new ToolbarLayout(true);
			layout.setSpacing(3);
			plate.setLayoutManager(layout);
			plate.add(bullet);
			plate.add(actionFigure);
			actionsPlate.add(plate);
		}
	}

	public void removeAction(IFigure actionFigure, boolean std) {
		if (std) {
			int ix = stdActionsPlate.getChildren().indexOf(actionFigure);
			IFigure bullet = (IFigure) stdActionsPlate.getChildren().get(ix);
			stdActionsPlate.remove(actionFigure);
			stdActionsPlate.remove(bullet);
		} else {
			actionsPlate.remove(actionFigure.getParent());
		}
	}

	protected Label getLabel(int i) {
		return (Label) labelsPlate.getChildren().get(i);
	}

	public String getDescription() {
		return getLabel(0).getText();
	}

	public void setDescription(String description) {
		getLabel(0).setText(description);
	}

	public void setIcon(Image icon) {
		getLabel(0).setIcon(icon);
	}

	public void setName(String name) {
		if (name == null || name.trim().length() == 0) {
			name = Messages.ModelFigure_NoName;
		}
		getLabel(1).setText(name);
	}

	public void setFullName(String name) {
		if (name == null || name.trim().length() == 0) {
			setToolTip(null);
		} else {
			Label tooltip = new Label(name);
			setToolTip(tooltip);
		}
	}
}
@


1.7
log
@update dashboard on extension changes
@
text
@d149 9
@


1.6
log
@rename i18n keys
@
text
@d98 1
a98 1
		//bullet.setText("-");
d116 11
@


1.5
log
@allow other plugins to contribute actions to the dashboard
@
text
@d134 1
a134 1
			name = Messages.ModelFigure_0;
@


1.4
log
@use generics wherever possible
@
text
@d30 1
a30 1
public class ModelFigure extends RectangleFigure {
@


1.3
log
@#137306 nls; partial
@
text
@a14 1
import java.util.Iterator;
d38 1
a38 1
	private List separators;
d41 1
a41 1
		separators = new ArrayList();
d77 1
a77 2
		for (Iterator it = separators.iterator(); it.hasNext();) {
			SeparatorFigure separator = (SeparatorFigure) it.next();
@


1.2
log
@#124852 add domain genmodel
@
text
@d103 1
a103 1
				bullet.setText("/");
d136 1
a136 1
			name = "<not specified>";
@


1.1
log
@#129930 moved from oeg.codegen.ui
@
text
@d80 1
a80 1
			separator.setPreferredSize(new Dimension(0, spacing * 2 + separator.getLineWidth()));
d100 1
a100 1
		bullet.setText("-");
@

