head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080722-1827:1.3
	v20080718-1700:1.3
	v20080718-1731:1.3
	R2_1_maintenance:1.3.0.6
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080612-1229:1.3
	v20080425-1959:1.3
	v20080222-1200:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070420-1000:1.3
	v20070330-1300:1.3
	v20070208-1800:1.3
	v20070105-1200:1.3
	v20070103-0300:1.3
	M4_20:1.3
	v20061218-1500:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20061012-1100:1.3
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060831-1500:1.3
	v20060824-1600:1.3
	v20060803-1200:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.02.17.19.21.34;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.02.17.07.18;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.23.14.43.53;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[128433] gmf_head ahunter 060217 Element Selection Service should have a more generic mechanism for filtering
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/
package org.eclipse.gmf.runtime.common.ui.services.elementselection;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.jface.viewers.IFilter;

/**
 * Interface describing the input for the element selection service.
 * 
 * @@author Anthony Hunter
 */
public interface IElementSelectionInput {

    /**
     * Retrieves the scope of the search.
     * 
     * @@return ElementSelectionScope the scope of the search.
     */
    public ElementSelectionScope getScope();

    /**
     * Retrieves the filter provided for the input. The filter is used to give
     * the user of the element selection service control over what types are
     * selected by the providers.
     * <p>
     * Most frequently, the filter will select an object if it matches a
     * specific list of types (<code>IElementType</code>).
     * </p>
     * 
     * @@return List the list of the input types.
     */
    public IFilter getFilter();

    /**
     * Retrieves the context for the input.
     * 
     * @@return IAdaptable the context for the input.
     */
    public IAdaptable getContext();

    /**
     * Retrieves a string input filter for the input. The filter is used to
     * match objects based on a string (? = any character, * = any string).
     * 
     * @@return String the string input filter.
     */
    public String getInput();
}
@


1.2
log
@gmf_head ahunter 060202 Element Selection Service updates
@
text
@a12 2
import java.util.List;

d14 1
d24 1
a24 1
     * Retrieves the scope of the search for input types.
d26 1
a26 1
     * @@return ElementSelectionScope the scope of the search for input types.
d31 7
a37 2
     * Retrieves the list of the input types. Each input type should implement
     * the <code>IElementType</code> interface.
d41 1
a41 1
    public List getTypes();
d44 1
a44 2
     * Retrieves the context for the input. Most frequently the context is an
     * EMF EObject.
d51 2
a52 2
     * Retrieves a filter for the input. The filter is used to match objects
     * based on a string (? = any character, * = any string).
d54 1
a54 1
     * @@return IAdaptable the filter for the input.
d56 1
a56 1
    public String getFilter();
@


1.1
log
@gmf_head ahunter 050923 Element Selection Service Update
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d20 1
a20 2
 * @@author Anthony Hunter <a href="mailto:anthonyh@@ca.ibm.com">
 *         anthonyh@@ca.ibm.com </a>
d24 30
a53 23
	
	/**
	 * Retrieves the scope of the search for input types.
	 * 
	 * @@return ElementSelectionScope the scope of the search for input types.
	 */
	public ElementSelectionScope getScope();
	
	/**
	 * Retrieves a list of the input types. Each input type should implement the
	 * <code>IElementType</code> interface.
	 * 
	 * @@return List a list of the input types.
	 */
	public List getTypes();

	/**
	 * Retrieves a context for the input. Most frequently the context is an EMF
	 * EObject.
	 * 
	 * @@return IAdaptable a context for the input.
	 */
	public IAdaptable getContext();
@

