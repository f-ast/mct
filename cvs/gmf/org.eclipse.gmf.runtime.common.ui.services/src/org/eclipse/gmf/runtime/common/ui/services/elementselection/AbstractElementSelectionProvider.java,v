head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080722-1827:1.4
	v20080718-1700:1.4
	v20080718-1731:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080612-1229:1.4
	v20080425-1959:1.4
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070504-1000:1.4
	v20070420-1000:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	v20070105-1200:1.3.2.2
	v20070103-0300:1.4
	M4_20:1.4
	v20061218-1500:1.3.2.2
	v20061218-1200:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20061012-1100:1.3.2.2
	v20060925-1700:1.3.2.2
	v20060919-0800:1.3.2.1
	M1_20:1.3
	v20060831-1500:1.3.2.1
	v20060824-1600:1.3.2.1
	v20060803-1200:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3.2.1
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.10.03.15.01.45;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.31.02.09.33;	author ahunter;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2006.02.02.17.07.18;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.23.14.43.53;	author ahunter;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.12.19.35.16;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.22.20.09.50;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/
package org.eclipse.gmf.runtime.common.ui.services.elementselection;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.jobs.Job;
import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.ui.services.internal.l10n.CommonUIServicesMessages;
import org.eclipse.osgi.util.NLS;

/**
 * Abstract implementation of an element selection provider.
 * 
 * @@author Anthony Hunter
 */
public abstract class AbstractElementSelectionProvider
    extends AbstractProvider
    implements IElementSelectionProvider {

    /**
     * The element selection input.
     */
    private IElementSelectionInput elementSelectionInput;

    /**
     * The element selection listener.
     */
    private IElementSelectionListener elementSelectionListener;


    /**
     * {@@inheritDoc}
     */
    public boolean provides(IOperation operation) {
        return true;
    }

    /**
     * {@@inheritDoc}
     */
    public ElementSelectionServiceJob getMatchingObjects(
            IElementSelectionInput input, IElementSelectionListener listener) {
        elementSelectionInput = input;
        ElementSelectionServiceJob job = createSelectionJob();
        elementSelectionListener = listener;
        return job;
    }
    
    /**
     * Creates the selection service job that runs the provider's search.
     * This method should configure the new job with the appropriate
     * priority, scheduling rules, etc. but should not schedule it.
     * 
     * @@return a new selection provider job
     */
    protected ElementSelectionServiceJob createSelectionJob() {
        ElementSelectionServiceJob job = new ElementSelectionServiceJob(getJobName(), this);
        job.setPriority(Job.SHORT);
        return job;
    }

    /**
     * {@@inheritDoc}
     */
    public Object resolve(IMatchingObject object) {
        /** 
         * Extenders are expected to override.
         */
        return null;
    }

    /**
     * {@@inheritDoc}
     */
    public void run(IProgressMonitor monitor) {
        /** 
         * Extenders are expected to override.
         */
    }

    /**
     * Get the name for the ElementSelectionServiceJob. Clients can override.
     * 
     * @@return the name for the job.
     */
    protected String getJobName() {
        String providerName = getClass().getName().substring(
            getClass().getName().lastIndexOf('.') + 1);
        String filter = getElementSelectionInput().getInput();
        return NLS.bind(
            CommonUIServicesMessages.ElementSelectionService_JobName,
            new String[] {providerName, filter});
    }

    /**
     * Fire an end of matches event since there are no more matches.
     */
    protected void fireEndOfMatchesEvent() {
        IMatchingObject matchingObject = new AbstractMatchingObject(null, null,
            null, this);
        MatchingObjectEvent matchingObjectEvent = new MatchingObjectEvent(
            MatchingObjectEventType.END_OF_MATCHES, matchingObject);
        fireMatchingObjectEvent(matchingObjectEvent);
    }

    /**
     * Fire a matching object event.
     * 
     * @@param matchingObject
     *            the matching object.
     */
    protected void fireMatchingObjectEvent(IMatchingObject matchingObject) {
        MatchingObjectEvent matchingObjectEvent = new MatchingObjectEvent(
            MatchingObjectEventType.MATCH, matchingObject);
        fireMatchingObjectEvent(matchingObjectEvent);
    }

    /**
     * Send the matching object event to the listener.
     * 
     * @@param matchingObjectEvent
     *            the matching object event.
     */
    protected void fireMatchingObjectEvent(
            IMatchingObjectEvent matchingObjectEvent) {
        getElementSelectionListener().matchingObjectEvent(matchingObjectEvent);
    }

    /**
     * Retrieve the element selection input.
     * 
     * @@return the element selection input.
     */
    protected IElementSelectionInput getElementSelectionInput() {
        return elementSelectionInput;
    }

    /**
     * Retrieve the element selection listener.
     * 
     * @@return the element selection listener.
     */
    protected IElementSelectionListener getElementSelectionListener() {
        return elementSelectionListener;
    }
}
@


1.3
log
@[134197] gmf_head ahunter 060330 Element Selection Service should get results from multiple provider asynchronously
@
text
@d53 1
d55 12
a66 2
        ElementSelectionServiceJob job = new ElementSelectionServiceJob(
            getJobName(), this);
@


1.3.2.1
log
@[148427] gmf_R1_0_maintenance cdamus 060712 Need ability to extend ElementSelectionService for transaction support
@
text
@d54 2
a55 13
        ElementSelectionServiceJob job = createSelectionJob();
        return job;
    }
    
    /**
     * Creates the selection service job that runs the provider's search.
     * This method should configure the new job with the appropriate
     * priority, scheduling rules, etc. but should not schedule it.
     * 
     * @@return a new selection provider job
     */
    protected ElementSelectionServiceJob createSelectionJob() {
        ElementSelectionServiceJob job = new ElementSelectionServiceJob(getJobName(), this);
@


1.3.2.2
log
@[158368] gmf_R1_0_maintenance mgoyal 060922 ElementSelectionService isn't reentrant and won't search at times.
@
text
@d53 1
a54 1
        elementSelectionListener = listener;
@


1.2
log
@gmf_head ahunter 060202 Element Selection Service updates
@
text
@d13 2
a14 2
import java.util.List;

d17 2
d21 1
a21 1
 * Abstract implementation of an IElementSelectionProvider.
d30 12
a41 1
     * @@inheritDoc
d48 35
a82 1
     * @@inheritDoc
d84 51
a134 1
    public abstract List getMatchingObjects(IElementSelectionInput input);
d136 8
@


1.1
log
@gmf_head ahunter 050923 Element Selection Service Update
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d21 1
a21 2
 * @@author Anthony Hunter <a href="mailto:anthonyh@@ca.ibm.com">
 *         anthonyh@@ca.ibm.com </a>
d24 2
a25 2
	extends AbstractProvider
	implements IElementSelectionProvider {
d27 11
a37 11
	/**
	 * @@inheritDoc
	 */
	public boolean provides(IOperation operation) {
		return true;
	}

	/**
	 * @@inheritDoc
	 */
	public abstract List getMatchingObjects(IElementSelectionInput input);
@

