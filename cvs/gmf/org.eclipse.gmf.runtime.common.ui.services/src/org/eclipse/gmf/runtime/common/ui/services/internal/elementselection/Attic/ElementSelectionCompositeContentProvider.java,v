head	1.4;
access;
symbols
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.03.31.02.09.33;	author ahunter;	state dead;
branches;
next	1.3;

1.3
date	2006.02.02.17.07.18;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.12.21.22.24;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.23.14.43.53;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[134197] gmf_head ahunter 060330 Element Selection Service should get results from multiple provider asynchronously
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/
package org.eclipse.gmf.runtime.common.ui.services.internal.elementselection;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.gmf.runtime.common.ui.services.elementselection.AbstractElementSelectionInput;
import org.eclipse.gmf.runtime.common.ui.services.elementselection.ElementSelectionService;
import org.eclipse.jface.viewers.IStructuredContentProvider;
import org.eclipse.jface.viewers.Viewer;

/**
 * A standard structured content provider for the element selection composite.
 * 
 * @@author Anthony Hunter
 */
public class ElementSelectionCompositeContentProvider
    implements IStructuredContentProvider {

    /**
     * The list of matching objects for the element selection input.
     */
    private List matchingObjects = new ArrayList();

    /**
     * Constructor for the ElementSelectionCompositeContentProvider.
     * 
     * @@param input
     *            element selection input.
     */
    public ElementSelectionCompositeContentProvider() {
        super();
    }

    /**
     * @@inheritDoc
     */
    public Object[] getElements(Object inputElement) {
        assert inputElement instanceof AbstractElementSelectionInput;
        AbstractElementSelectionInput input = (AbstractElementSelectionInput) inputElement;

        /*
         * Clean the previous list
         */
        matchingObjects.clear();

        /*
         * Initialize all possible matching objects from the select element
         * service.
         */
        List matches = ElementSelectionService.getInstance()
            .getMatchingObjects(input);
        for (Iterator iter = matches.iterator(); iter.hasNext();) {
            List element = (List) iter.next();
            matchingObjects.addAll(element);
        }
        return matchingObjects.toArray();
    }

    /**
     * @@inheritDoc
     */
    public void dispose() {
        // not implemented
    }

    /**
     * @@inheritDoc
     */
    public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
        // not implemented
    }

}
@


1.3
log
@gmf_head ahunter 060202 Element Selection Service updates
@
text
@@


1.2
log
@[110317] gmf_head ahunter 051212 Compiler warning count should be 0 - runtime foundation layer components
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
a15 2
import java.util.regex.Matcher;
import java.util.regex.Pattern;
d17 1
a17 3
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.ui.services.elementselection.AbstractMatchingObject;
import org.eclipse.gmf.runtime.common.ui.services.elementselection.IElementSelectionInput;
d25 1
a25 2
 * @@author Anthony Hunter <a href="mailto:anthonyh@@ca.ibm.com">
 *         anthonyh@@ca.ibm.com </a>
d28 55
a82 1
	implements IStructuredContentProvider {
a83 114
	/**
	 * The input to the element selection composite.
	 */
	private IElementSelectionInput input;

	/**
	 * The list of matching objects for the element selection input.
	 */
	private List matchingObjects = null;

	/**
	 * The filter entered by the user in the element selection composite.
	 */
	private String filter;

	/**
	 * Constructor for the ElementSelectionCompositeContentProvider.
	 * 
	 * @@param input
	 *            element selection input.
	 */
	public ElementSelectionCompositeContentProvider(IElementSelectionInput input) {
		super();
		this.input = input;
		this.filter = StringStatics.BLANK;
	}

	/**
	 * @@inheritDoc
	 */
	public Object[] getElements(Object inputElement) {
		/*
		 * If the filter is blank, return no elements.
		 */
		if (filter.equals(StringStatics.BLANK)) {
			return new Object[0];
		}

		/*
		 * Initialize all possible matching objects from the select element
		 * service the first time getElements is called.
		 */
		if (matchingObjects == null) {
			List matches = ElementSelectionService.getInstance()
				.getMatchingObjects(input);
			matchingObjects = new ArrayList();
			for (Iterator iter = matches.iterator(); iter.hasNext();) {
				List element = (List) iter.next();
				matchingObjects.addAll(element);
			}
		}

		/*
		 * Now filter the matching elements using the filter.
		 */
		List result = new ArrayList();
		Pattern pattern = Pattern.compile(filter);
		for (Iterator iter = matchingObjects.iterator(); iter.hasNext();) {
			AbstractMatchingObject element = (AbstractMatchingObject) iter
				.next();
			Matcher matcher = pattern.matcher(element.getName().toLowerCase());
			if (matcher.matches()) {
				result.add(element);
			}
		}

		return result.toArray();
	}

	/**
	 * @@inheritDoc
	 */
	public void dispose() {
		// not implemented
	}

	/**
	 * @@inheritDoc
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		if (newInput != null) {
			assert newInput instanceof String;
			filter = validatePattern((String) newInput);
		}
	}

	/**
	 * Convert the UNIX style pattern entered by the user to a Java regex
	 * pattern (? = any character, * = any string).
	 * 
	 * @@param string
	 *            the UNIX style pattern.
	 * @@return a Java regex pattern.
	 */
	private String validatePattern(String string) {
		if (string.equals(StringStatics.BLANK)) {
			return string;
		}
		StringBuffer result = new StringBuffer();
		for (int i = 0; i < string.length(); i++) {
			char c = Character.toLowerCase(string.charAt(i));
			if (c == '?') {
				result.append('.');
			} else if (c == '*') {
				result.append(".*"); //$NON-NLS-1$
			} else if (c == '?') {
				result.append("\\."); //$NON-NLS-1$
			} else {
				result.append(c);
			}
		}
		result.append(".*"); //$NON-NLS-1$
		return result.toString();
	}
@


1.1
log
@gmf_head ahunter 050923 Element Selection Service Update
@
text
@d91 1
a91 1
		Pattern pattern = Pattern.compile(filter);//$NON-NLS-1$
@

