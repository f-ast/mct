head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080722-1827:1.3
	v20080718-1700:1.3
	v20080718-1731:1.3
	R2_1_maintenance:1.3.0.6
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080612-1229:1.3
	v20080425-1959:1.3
	v20080222-1200:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070420-1000:1.3
	v20070330-1300:1.3
	v20070208-1800:1.3
	v20070105-1200:1.3
	v20070103-0300:1.3
	M4_20:1.3
	v20061218-1500:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20061012-1100:1.3
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060831-1500:1.3
	v20060824-1600:1.3
	v20060803-1200:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.04.13.19.35.16;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.02.17.07.18;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.23.14.43.53;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[136709] gmf_head ahunter 060413 Element Selection Service - add a PRIMITIVES option to ElementSelectionScope
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/
package org.eclipse.gmf.runtime.common.ui.services.elementselection;

/**
 * Class for setting and testing flags used by the element selection service.
 * 
 * @@author Anthony Hunter
 */
public class ElementSelectionScope {

    /**
     * the scope for the element selection service.
     */
    private int scope;

    /**
     * Constructor for IconOptions
     */
    public ElementSelectionScope() {
        this(0);
    }

    /**
     * Constructor for ElementSelectionScope
     * 
     * @@param scope
     *            the scope
     */
    private ElementSelectionScope(int scope) {
        this.scope = scope;
    }

    /**
     * The default option to provide all visible types based on the context.
     */
    public static final ElementSelectionScope VISIBLE = new ElementSelectionScope(
        1 << 1);

    /**
     * Provide all types in the workspace and target environment (if
     * applicable).
     */
    public static final ElementSelectionScope GLOBAL = new ElementSelectionScope(
        1 << 2);

    /**
     * Provide all types in binaries (if applicable).
     */
    public static final ElementSelectionScope BINARIES = new ElementSelectionScope(
        1 << 3);

    /**
     * Provide all types in the sources (if applicable).
     */
    public static final ElementSelectionScope SOURCES = new ElementSelectionScope(
        1 << 4);

    /**
     * Provide all primities types in the sources (if applicable).
     */
    public static final ElementSelectionScope PRIMITIVES = new ElementSelectionScope(
        1 << 5);

    /**
     * Returns the scope as an integer bit flag
     * 
     * @@return int the scope as an integer bit flag
     */
    public int intValue() {
        return scope;
    }

    /**
     * Tests if the specified option is set
     * 
     * @@param scope
     *            the scope as an integer bit flag
     * @@param option
     *            the specified option
     * @@return boolean <code>true</code> if this option is set, otherwise
     *         <code>false</code>
     */
    public static boolean isSet(int scope, ElementSelectionScope option) {
        if ((scope & option.scope) != 0)
            return true;
        return false;
    }

    /**
     * Sets the specified option
     * 
     * @@param option
     *            the specified option
     */
    public void set(ElementSelectionScope option) {
        scope = scope | option.scope;
    }
}
@


1.2
log
@gmf_head ahunter 060202 Element Selection Service updates
@
text
@d68 6
@


1.1
log
@gmf_head ahunter 050923 Element Selection Service Update
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d16 1
a16 2
 * @@author Anthony Hunter <a href="mailto:anthonyh@@ca.ibm.com">
 *         anthonyh@@ca.ibm.com </a>
d20 81
a100 69
	/**
	 * the scope for the element selection service.
	 */
	private int scope;

	/**
	 * Constructor for IconOptions
	 */
	public ElementSelectionScope() {
		this(0);
	}

	/**
	 * Constructor for ElementSelectionScope
	 * 
	 * @@param scope
	 *            the scope
	 */
	private ElementSelectionScope(int scope) {
		this.scope = scope;
	}

	/**
	 * The default option to provide all visible types based on the context.
	 */
	public static final ElementSelectionScope VISIBLE = new ElementSelectionScope(
		0);

	/**
	 * Provide all types in the workspace and target environment (if
	 * applicable).
	 */
	public static final ElementSelectionScope GLOBAL = new ElementSelectionScope(
		1 << 1);

	/**
	 * Returns the scope as an integer bit flag
	 * 
	 * @@return int the scope as an integer bit flag
	 */
	public int intValue() {
		return scope;
	}

	/**
	 * Tests if the specified option is set
	 * 
	 * @@param scope
	 *            the scope as an integer bit flag
	 * @@param option
	 *            the specified option
	 * @@return boolean <code>true</code> if this option is set, otherwise
	 *         <code>false</code>
	 */
	public static boolean isSet(int scope, ElementSelectionScope option) {
		if ((scope & option.scope) != 0)
			return true;
		return false;
	}

	/**
	 * Sets the specified option
	 * 
	 * @@param option
	 *            the specified option
	 */
	public void set(ElementSelectionScope option) {
		scope = scope | option.scope;
	}
@

