head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080722-1827:1.4
	v20080718-1700:1.4
	v20080718-1731:1.4
	R2_1_maintenance:1.4.0.6
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080612-1229:1.4
	v20080425-1959:1.4
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070504-1000:1.4
	v20070420-1000:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	v20070105-1200:1.4
	v20070103-0300:1.4
	M4_20:1.4
	v20061218-1500:1.4
	v20061218-1200:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20061012-1100:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060831-1500:1.4
	v20060824-1600:1.4
	v20060803-1200:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.03.31.02.09.33;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.17.19.21.34;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.02.17.07.18;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.23.14.43.53;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[134197] gmf_head ahunter 060330 Element Selection Service should get results from multiple provider asynchronously
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/
package org.eclipse.gmf.runtime.common.ui.services.elementselection;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.jface.viewers.IFilter;

/**
 * Abstract implementation of an IElementSelectionInput.
 * 
 * @@author Anthony Hunter
 */
public class AbstractElementSelectionInput
    implements IElementSelectionInput {

    /**
     * The scope used for the search for matching objects.
     */
    private ElementSelectionScope scope;

    /**
     * A list of the input types.
     */
    private IFilter filter;

    /**
     * A context for the input.
     */
    private IAdaptable context;

    /**
     * A input filter for the input.
     */
    private String input;

    /**
     * Constructor for an AbstractElementSelectionInput
     * 
     * @@param types
     *            A list of the types.
     * @@param context
     *            A context for the input.
     * @@param scope
     *            The scope used for the search for matching objects.
     * @@param filter
     *            The filter used for the search for matching objects.
     */
    public AbstractElementSelectionInput(IFilter filter, IAdaptable context,
            ElementSelectionScope scope, String input) {
        super();
        this.input = input;
        this.context = context;
        this.scope = scope;
        this.filter = filter;
    }

    /**
     * {@@inheritDoc}
     */
    public ElementSelectionScope getScope() {
        return scope;
    }

    /**
     * {@@inheritDoc}
     */
    public IFilter getFilter() {
        return filter;
    }

    /**
     * {@@inheritDoc}
     */
    public IAdaptable getContext() {
        return context;
    }

    /**
     * {@@inheritDoc}
     */
    public String getInput() {
        return input;
    }

    /**
     * Set the context for the element selection input.
     * 
     * @@param context
     *            the context for the element selection input.
     */
    public void setContext(IAdaptable context) {
        this.context = context;
    }

    /**
     * Set the filter for the element selection input.
     * 
     * @@param filter
     *            the filter for the element selection input.
     */
    public void setFilter(IFilter filter) {
        this.filter = filter;
    }

    /**
     * Set the scope for the element selection input.
     * 
     * @@param scope
     *            the scope for the element selection input.
     */
    public void setScope(ElementSelectionScope scope) {
        this.scope = scope;
    }

    /**
     * Set the input filter for the element selection input.
     * 
     * @@param input
     *            the input filter for the element selection input.
     */
    public void setInput(String input) {
        this.input = input;
    }

}
@


1.3
log
@[128433] gmf_head ahunter 060217 Element Selection Service should have a more generic mechanism for filtering
@
text
@d66 1
a66 1
     * @@inheritDoc
d73 1
a73 1
     * @@inheritDoc
d80 1
a80 1
     * @@inheritDoc
d87 1
a87 1
     * @@inheritDoc
@


1.2
log
@gmf_head ahunter 060202 Element Selection Service updates
@
text
@a12 2
import java.util.List;

d14 1
d32 1
a32 1
    private List types;
d40 1
a40 1
     * A filter for the input.
d42 1
a42 1
    private String filter;
d56 2
a57 2
    public AbstractElementSelectionInput(List types, IAdaptable context,
            ElementSelectionScope scope, String filter) {
d59 1
a59 1
        this.types = types;
d75 2
a76 2
    public List getTypes() {
        return types;
d89 2
a90 2
    public String getFilter() {
        return filter;
d109 1
a109 1
    public void setFilter(String filter) {
d124 1
a124 1
     * Set the list of types for the element selection input.
d126 2
a127 2
     * @@param types
     *            the list of types for the element selection input.
d129 2
a130 2
    public void setTypes(List types) {
        this.types = types;
@


1.1
log
@gmf_head ahunter 050923 Element Selection Service Update
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d20 1
a20 2
 * @@author Anthony Hunter <a href="mailto:anthonyh@@ca.ibm.com">
 *         anthonyh@@ca.ibm.com </a>
d23 1
a23 1
	implements IElementSelectionInput {
d25 108
a132 53
	/**
	 * The scope used for the search for matching objects.
	 */
	private ElementSelectionScope scope;

	/**
	 * A list of the input types.
	 */
	private List types;

	/**
	 * A context for the input.
	 */
	private IAdaptable context;

	/**
	 * Constructor for an AbstractElementSelectionInput
	 * 
	 * @@param types
	 *            A list of the types.
	 * @@param context
	 *            A context for the input.
	 * @@param scope
	 *            The scope used for the search for matching objects.
	 */
	public AbstractElementSelectionInput(List types, IAdaptable context,
			ElementSelectionScope scope) {
		super();
		this.types = types;
		this.context = context;
		this.scope = scope;
	}

	/**
	 * @@inheritDoc
	 */
	public ElementSelectionScope getScope() {
		return scope;
	}

	/**
	 * @@inheritDoc
	 */
	public List getTypes() {
		return types;
	}

	/**
	 * @@inheritDoc
	 */
	public IAdaptable getContext() {
		return context;
	}
@

