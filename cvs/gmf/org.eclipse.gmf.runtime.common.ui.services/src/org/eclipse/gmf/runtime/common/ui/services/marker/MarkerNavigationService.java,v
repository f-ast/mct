head	1.6;
access;
symbols
	v20081020-0700:1.6
	v20080722-1827:1.6
	v20080718-1700:1.6
	v20080718-1731:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080612-1229:1.6
	v20080425-1959:1.6
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070601-1400:1.6
	v20070518-1300:1.6
	v20070504-1000:1.6
	v20070420-1000:1.6
	v20070330-1300:1.6
	v20070208-1800:1.6
	v20070105-1200:1.4.2.2
	v20070103-0300:1.6
	M4_20:1.6
	v20061218-1500:1.4.2.1
	v20061218-1200:1.5
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20061012-1100:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060831-1500:1.4
	v20060824-1600:1.4
	v20060803-1200:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4;
locks; strict;
comment	@# @;


1.6
date	2007.01.02.21.47.32;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	3f14459ad2f44567;

1.5
date	2006.12.15.19.46.59;	author mmostafa;	state Exp;
branches;
next	1.4;
commitid	620b4582fbb34567;

1.4
date	2005.10.12.20.55.15;	author ahunter;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.10.04.20.18.22;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.15;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.22;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.12.15.19.47.25;	author mmostafa;	state Exp;
branches;
next	1.4.2.2;
commitid	2e614582fbcd4567;

1.4.2.2
date	2007.01.02.21.20.19;	author ahunter;	state Exp;
branches;
next	;
commitid	2ecc459acc934567;


desc
@@


1.6
log
@[167176] gmf_head ahunter 070102 Update copyright to indicate change in 2006
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.services.marker;

import java.util.Vector;

import org.eclipse.core.resources.IMarker;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.core.service.Service;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.services.internal.CommonUIServicesDebugOptions;
import org.eclipse.gmf.runtime.common.ui.services.internal.CommonUIServicesPlugin;
import org.eclipse.gmf.runtime.common.ui.services.internal.CommonUIServicesStatusCodes;
import org.eclipse.gmf.runtime.common.ui.services.internal.marker.IMarkerNavigationProvider;
import org.eclipse.ui.IEditorPart;

/**
 * This service is the distribution point for "gotoMarker" requests made by
 * Eclipse to an IEditorPart. In all editors, the implementation of the
 * gotoMarker() method simply forwards the request to this service.
 * <p>
 * Marker navigation providers are chosen based upon priority and the list of
 * marker types they support.
 * 
 * @@author Kevin Cornell
 */
public class MarkerNavigationService
	extends Service
	implements IMarkerNavigationProvider {

	/** Remember the single instance of this service. */
	private final static MarkerNavigationService instance = new MarkerNavigationService();

	static {
		instance.configureProviders(CommonUIServicesPlugin.getPluginId(),
			"markerNavigationProviders"); //$NON-NLS-1$
	}

	/**
	 * Marker Navigation Provider Descriptor.
	 * <p>
	 * This class is a descriptor for an <code>IMarkerNavigationProvider</code>
	 * that is defined by an XML configuration element.
	 */
	protected static class MarkerNavigationProviderDescriptor
		extends Service.ProviderDescriptor {

		/** The name of the 'name' XML attribute. */
		protected static final String A_NAME = "name"; //$NON-NLS-1$

		/** The name of the 'MarkerType' XML element. */
		protected static final String E_MARKER_TYPE = "MarkerType"; //$NON-NLS-1$

		/** Keep a list of the marker types accepted by this provider. */
		private Vector markerTypes = new Vector();

		/**
		 * Constructs a <code>IMarkerNavigationProvider</code> descriptor for
		 * the specified configuration element.
		 * <p>
		 * The configuration element is examined to obtain the list of marker
		 * types that are supported by the corresponding provider.
		 * <p>
		 * 
		 * @@param element
		 *            The configuration element describing the provider.
		 */
		protected MarkerNavigationProviderDescriptor(
				IConfigurationElement element) {
			super(element);

			// Get the list of 'MarkerType' names supported by the provider.
			IConfigurationElement[] elements = getElement().getChildren(
				E_MARKER_TYPE);
			for (int i = 0; i < elements.length; i++) {
				String markerType = elements[i].getAttribute(A_NAME);
				if (markerType != null) {
					markerTypes.add(markerType);
				}
			}
		}

		/**
		 * Determine if the corresponding provider accepts the operation.
		 * Providers are trivially rejected if they do not support the
		 * associated marker type. However, even if the marker type is
		 * supported, the provider can reject the given operation.
		 * 
		 * @@see org.eclipse.gmf.runtime.common.core.service.IProvider#provides(org.eclipse.gmf.runtime.common.core.service.IOperation)
		 */
		public boolean provides(IOperation operation) {
			boolean doesProvide = false;

			if (operation instanceof GotoMarkerOperation) {
				try {
					// Get source marker type from the "goto" operation.
					String markerType = ((GotoMarkerOperation) operation)
						.getMarker().getType();

					// If the marker type is supported, verify acceptance with
					// the provider.
					if (markerTypes.contains(markerType)) {
						doesProvide = super.provides(operation);
					}
				} catch (Exception e) {
					Trace.catching(CommonUIServicesPlugin.getDefault(),
						CommonUIServicesDebugOptions.EXCEPTIONS_CATCHING,
						getClass(), "provides", e); //$NON-NLS-1$
					Log.error(CommonUIServicesPlugin.getDefault(),
						CommonUIServicesStatusCodes.SERVICE_FAILURE, e
							.getLocalizedMessage(), e);
					doesProvide = false;
				}
			}

			return doesProvide;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.core.internal.service.Service#newProviderDescriptor(org.eclipse.core.runtime.IConfigurationElement)
	 */
	protected Service.ProviderDescriptor newProviderDescriptor(
			IConfigurationElement element) {
		return new MarkerNavigationProviderDescriptor(element);
	}

	/**
	 * The MarkerNavigationService constructor
	 */
	protected MarkerNavigationService() {
		super(true);
	}

	/**
	 * Gets the instance of MarkerNavigationService
	 * 
	 * @@return Returns the <code>instance</code> variable
	 */
	public static MarkerNavigationService getInstance() {
		return instance;
	}

	/**
	 * Executes the <code>GotoMarkerOperation</code> operation using the FIRST
	 * strategy
	 * 
	 * @@param operation
	 *            The <code>GotoMarkerOperation</code> operation
	 */
	private void execute(GotoMarkerOperation operation) {
		execute(ExecutionStrategy.FIRST, operation);
	}

	/**
	 * Perform the navigation to a marker in the associated editor.
	 * <p>
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.services.internal.marker.IMarkerNavigationProvider#gotoMarker(org.eclipse.ui.IEditorPart,
	 *      org.eclipse.core.resources.IMarker)
	 */
	public void gotoMarker(final IEditorPart editor, final IMarker marker) {
		assert null != editor;
		assert null != marker;
		if (marker.exists())
			execute(new GotoMarkerOperation(editor, marker));
	}

}@


1.5
log
@[167176]  gmf_head mmostafa 061215 ResourceException after double click on result in Search view
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
@


1.4
log
@Bugzilla 110653 gmf_head ahunter 051012 Eroneous references to xtools in gmf common namespace
@
text
@a26 1
import org.eclipse.swt.widgets.Display;
d179 2
a180 19

		// RATLC00524228
		// Do the operation in an asyncExec to work around a concurrent
		// modification problem in the core Eclipse Problems view.
		// When the Problems view is in the same part site as the Property
		// sheet (or any other Aurora view that shows model elements), the
		// marker navigation operation triggered by selection changed in the
		// Problems view causes the Model Explorer part to become active
		// and all AbstractActionHandlers to remove their selection listeners
		// from the Problems view's selection provider. Because this selection
		// provider stores listeners in an ArrayList instead of a JFace
		// ListenerList, a ConcurrentModificationException is thrown when the
		// selection provider attempts to notify the next selection listener
		Display.getDefault().asyncExec(new Runnable() {

			public void run() {
				execute(new GotoMarkerOperation(editor, marker));
			}
		});
@


1.4.2.1
log
@[167176]  gmf_R1_0_maintenace  mmostafa 061215 ResourceException after double click on result in Search view
@
text
@d27 1
d180 19
a198 2
		if (marker.exists())
			execute(new GotoMarkerOperation(editor, marker));
@


1.4.2.2
log
@[167176] gmf_R1_0_maintenance ahunter 070102 Update copyright to indicate change in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.3
log
@Bugzilla 110635 gmf_head keithc 051004 Delay configuration of services
@
text
@d32 1
a32 1
 * Eclipse to an IEditorPart. In all Xtools editors, the implementation of the
d46 1
a46 1
	
d48 2
a49 1
		instance.configureProviders(CommonUIServicesPlugin.getPluginId(), "markerNavigationProviders"); //$NON-NLS-1$
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
a17 3
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IEditorPart;

d27 2
d46 4
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

