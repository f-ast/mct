head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.6
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080425-1959:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.3
date	2005.09.12.21.28.21;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.08.14.47.30;	author vramaswamy;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.42;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.clipboard.core;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.OperationCanceledException;
import org.eclipse.gmf.runtime.emf.clipboard.core.internal.ClipboardPlugin;

/**
 * Abstract specification of a copy or paste operation.  Maintains a progress
 * monitor, support utility, and provides some reusable features.
 * <p>
 * <b>Note</b> that this class is not intended to be extended
 * by clients.  Clients may not instantiate it.
 * </p>
 * 
 * @@author Yasser Lulu 
 */
public abstract class ClipboardOperation {

	/** The size of a single work unit in the progress monitor. */
	public static final int WORK_UNIT = 1;

	/** The total amount of work accorded to a progress monitor. */
	public static final int TOTAL_WORK = 100;

	private IProgressMonitor monitor;

	private IClipboardSupport clipboardSupport;

	/**
	 * Initializes me with my progress monitor and clipboard support.
	 * 
	 * @@param monitor a progress monitor, or <code>null</code> if
	 *     no progress tracking is needed
	 * @@param clipboardSupport the clipboard support object
	 */
	public ClipboardOperation(IProgressMonitor monitor,
			IClipboardSupport clipboardSupport) {
		this.monitor = (monitor != null) ? monitor : new NullProgressMonitor();
		this.clipboardSupport = clipboardSupport;
	}

	/**
	 * Obtains my progress monitor.
	 * 
	 * @@return my progress monitor (never <code>null</code>)
	 */
	public IProgressMonitor getProgressMonitor() {
		return monitor;
	}

	/**
	 * Queries whether I have been cancelled, by cancellation of my progress
	 * monitor.
	 * 
	 * @@return whether I have been cancelled
	 */
	protected boolean isCancelled() {
		return getProgressMonitor().isCanceled();
	}

	/**
	 * Obtains the clipboard support object that I rely on to make decisions
	 * about copy/paste semantics.
	 * 
	 * @@return my clipboard support
	 */
	public final IClipboardSupport getClipboardOperationHelper() {
		// TODO: Rename this as getClipboardSupport()
		return clipboardSupport;
	}

	/**
	 * Traces and logs a caught exception.
	 *  
	 * @@param methodName the method in which the exception was caught
	 * @@param ex the exception that was caught
	 */
	protected void catchException(String methodName, Exception ex) {
		ClipboardPlugin.catching(getClass(), methodName, ex);
	}

	/**
	 * Traces and logs a thrown exception.
	 *  
	 * @@param methodName the method in which the exception was thrown
	 * @@param ex the exception that was thrown
	 * 
	 * @@throws RuntimeException the <code>ex</code> parameter
	 */
	protected void throwException(String methodName, RuntimeException ex) {
		ClipboardPlugin.throwing(getClass(), methodName, ex);
		throw ex;
	}

	/**
	 * Throws, traces, and logs a cancellation exception.
	 *  
	 * @@param methodName the method in which the exception was caught
	 * 
	 * @@throws OperationCanceledException always
	 */
	protected void throwCancelException(String methodName) {
		throwException(methodName, new OperationCanceledException(
			"Operation Canceled")); //$NON-NLS-1$
	}

}@


1.2
log
@Bugzilla 108844, Revisit all provisional APIs and move back to internal as needed for the EMF runtime plugins, September 8, 2005
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@a14 2

import org.eclipse.gmf.runtime.emf.clipboard.core.internal.ClipboardDebugOptions;
d57 1
a57 1
	protected IProgressMonitor getProgressMonitor() {
d77 1
a77 1
	protected final IClipboardSupport getClipboardOperationHelper() {
@

