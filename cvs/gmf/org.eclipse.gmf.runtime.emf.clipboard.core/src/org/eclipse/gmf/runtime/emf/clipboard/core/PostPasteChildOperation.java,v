head	1.2;
access;
symbols
	v20081020-0700:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080425-1959:1.2
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060519-0800:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.2
date	2005.09.12.21.28.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.43;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@/******************************************************************************
 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.clipboard.core;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Abstract definition of an
 * {@@link org.eclipse.gmf.runtime.emf.clipboard.core.IClipboardSupport}-defined
 * operation that follows the pasting of a child element into the target parent,
 * to perform additional work.  Post paste operations are created by
 * the {@@link PasteChildOperation#getPostPasteOperation() getPostPasteOperation()}
 * method of {@@link OverridePasteChildOperation}s.
 * <p>
 * This class is intended to be extended by clients, to provide an auxiliary
 * paste operation in the clipboard support.
 * </p>
 * 
 * @@see IClipboardSupport#getOverrideChildPasteOperation(PasteChildOperation)
 * @@see PasteChildOperation#getPostPasteOperation()
 * 
 * @@author Yasser Lulu
 */
public class PostPasteChildOperation
	extends PasteChildOperation {

	private PasteChildOperation pasteChildOperation;

	private PasteChildOperation[] pasteOperations;

	/**
	 * Initializes me with the paste operation that I am following.  I may
	 * wish to access it later, to get its results.
	 * 
	 * @@param pasteChildOperation the paste child operation that I follow
	 * @@param pasteOperations paste operations to execute.  By default, I
	 *     will execute all of these operations first, then all of their
	 *     post-paste operations (after all of the pastes have completed)
	 */
	public PostPasteChildOperation(PasteChildOperation pasteChildOperation,
		List pasteOperations) {
		this(pasteChildOperation, (PasteChildOperation[]) pasteOperations
			.toArray(EMPTY_ARRAY));
	}

	/**
	 * Creates an empty operation to follow the specified paste operation.
	 * 
	 * @@param pasteChildOperation a paste operation
	 * @@return a post-paste operation that does nothing
	 */
	public static PostPasteChildOperation makeNullPostPasteChildOperation(
		PasteChildOperation pasteChildOperation) {
		return new PostPasteChildOperation(pasteChildOperation, EMPTY_ARRAY);
	}

	/**
	 * Initializes me with the paste operation that I am following.  I may
	 * wish to access it later, to get its results.
	 * 
	 * @@param pasteChildOperation the paste child operation that I follow
	 * @@param pasteOperations paste operations to execute.  By default, I
	 *     will execute all of these operations first, then all of their
	 *     post-paste operations (after all of the pastes have completed)
	 */
	public PostPasteChildOperation(PasteChildOperation pasteChildOperation,
		PasteChildOperation[] pasteOperations) {
		super(pasteChildOperation);
		this.pasteChildOperation = pasteChildOperation;
		this.pasteOperations = pasteOperations;
	}

	/**
	 * Invoked after the
	 * {@@linkplain #getPasteChildOperation() past-child operation} that I am
	 * following has done its pasting, to do some more pasting.
	 * <p>
	 * By default, I just invoke the {@@link PasteChildOperation#paste()} method
	 * on all of my {@@linkplain #getPasteOperations() additional} paste
	 * operations.
	 * </p>
	 * 
	 * @@see #getPasteOperations()
	 */
	public void paste() throws Exception {
		for (int i = 0; i < pasteOperations.length; ++i) {
			pasteOperations[i].paste();
		}
	}

	/**
	 * By default, returns another post-paste operation that executes the
	 * post-paste operations of all of my
	 * {@@link #getPasteOperations() additional} paste operations.
	 * 
	 * @@see #getPasteOperations()
	 */
	public PasteChildOperation getPostPasteOperation() {
		List list = getPostPasteOperations();
		if (list.isEmpty() == false) {
			return new PostPasteChildOperation(this,
				(PasteChildOperation[]) list.toArray(EMPTY_ARRAY));
		}
		return null;
	}

	/**
	 * Gathers the post-paste operations of the paste operations that I execute.
	 * These will all be executed in sequence, after I have executed all of the
	 * paste operations.
	 * 
	 * @@return my paste operations' post-paste operations
	 */
	private List getPostPasteOperations() {
		if (pasteOperations.length > 0) {
			List list = new ArrayList();
			for (int i = 0; i < pasteOperations.length; ++i) {
				PasteChildOperation postPasteOperation = pasteOperations[i]
					.getPostPasteOperation();
				if (postPasteOperation != null) {
					list.add(postPasteOperation);
				}
			}
			return list;
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * Obtains the paste operation that I follow as a post-paste.
	 * 
	 * @@return my paste operation
	 */
	protected PasteChildOperation getPasteChildOperation() {
		return pasteChildOperation;
	}

	/**
	 * Obtains the paste operations that I execute when I am executed.
	 * 
	 * @@return my paste operations
	 */
	protected PasteChildOperation[] getPasteOperations() {
		return pasteOperations;
	}
}@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004. All Rights Reserved.                     |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

