head	1.2;
access;
symbols
	v20081020-0700:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080425-1959:1.2
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060519-0800:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.2
date	2005.09.12.21.28.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.42;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.clipboard.core;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.AbstractEnumerator;


/**
 * An enumeration of paste options.
 * 
 * @@author khussey
 */
public class PasteOption
	extends AbstractEnumerator {

	/**
	 * An internal unique identifier for this enumerated type.
	 */
	private static int nextOrdinal = 0;

	/**
	 * Paste option indicating that the element(s) referenced by by an
	 * {@@link org.eclipse.emf.ecore.EReference} feature of a pasted object must
	 * resolve in a successful paste operation.  If a referenced element
	 * cannot be resolved (either by locating the existing element
	 * in some model or by pasting a copy of it), then the referencing element
	 * also fails to paste.  This applies to both containment and
	 * non-containment references.
	 */
	public static final PasteOption CRITICAL = new PasteOption("Critical"); //$NON-NLS-1$

	/**
	 * Paste option indicating that the copying of the elements referenced by
	 * some {@@link org.eclipse.emf.ecore.EReference} feature of an object
	 * being copied is supported for "distant" pastes.  These are pastes into
	 * other application instances.
	 */
	public static final PasteOption DISTANT = new PasteOption("Distant"); //$NON-NLS-1$

	/**
	 * Paste option indicating that the element(s) referenced by by an
	 * {@@link org.eclipse.emf.ecore.EReference} feature of a pasted object must
	 * be in the same model as the pasted object.  That is, the reference must
	 * resolve to an element in the target model of the paste operation.
	 */
	public static final PasteOption LOCAL = new PasteOption("Local"); //$NON-NLS-1$

	/**
	 * Paste option indicating that the copying of the elements referenced by
	 * some {@@link org.eclipse.emf.ecore.EReference} feature of an object
	 * being copied is critically important to a successful copy.  If the
	 * referenced cannot be resolved (either by locating the existing element
	 * in some model or by pasting a copy of it), then the referencing element
	 * also fails to paste.  This applies to both containment and
	 * non-containment references.
	 */
	public static final PasteOption NORMAL = new PasteOption("Normal"); //$NON-NLS-1$

	/**
	 * Paste option indicating that the container of an object (referenced by
	 * a specific {@@link org.eclipse.emf.ecore.EReference} should also be
	 * copied, in case it the actual object can't be pasted at the intended
	 * location but its container can (thus allowing the intended object also
	 * to be pasted under it).
	 */
	public static final PasteOption PARENT = new PasteOption("Parent"); //$NON-NLS-1$

	/**
	 * The list of values for this enumerated type.
	 */
	private static final PasteOption[] VALUES = {CRITICAL, DISTANT, LOCAL,
		NORMAL, PARENT};

	/**
	 * Constructs a new paste option with the specified name.
	 * 
	 * @@param name The name of the new paste option.
	 */
	private PasteOption(String name) {
		super(nextOrdinal++,name);
	}

	/**
	 * Retrieves the list of constants for this enumerated type.
	 * 
	 * @@return The list of constants for this enumerated type.
	 * 
	 * @@see EnumeratedType#getValues()
	 */
	protected List getValues() {
		return Collections.unmodifiableList(Arrays.asList(VALUES));
	}

}@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

