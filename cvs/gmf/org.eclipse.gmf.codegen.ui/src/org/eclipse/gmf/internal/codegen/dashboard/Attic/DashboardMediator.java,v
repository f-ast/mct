head	1.11;
access;
symbols
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	I20060227-1730:1.8
	I20060216-1945:1.8
	I20060210-1715:1.8
	I20060209-1815:1.8
	I20060203-0830:1.8
	I20060129-1145:1.8
	I20060127-0900:1.8
	I20060120-1530:1.8;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2006.03.01.14.20.27;	author dstadnik;	state dead;
branches;
next	1.10;

1.10
date	2006.03.01.12.46.04;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.28.19.07.38;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.19.10.35.12;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.19.10.00.39;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.19.08.55.51;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.18.19.05.30;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.18.17.47.09;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.18.16.57.45;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.18.15.37.07;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.18.13.09.20;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.11
log
@#129930 move dashboard in separate plugin
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    dstadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.dashboard;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.Path;
import org.eclipse.draw2d.IFigure;
import org.eclipse.emf.ecore.presentation.EcoreModelWizard;
import org.eclipse.gmf.codegen.gmfgen.presentation.GMFGenModelWizard;
import org.eclipse.gmf.gmfgraph.presentation.GMFGraphModelWizard;
import org.eclipse.gmf.internal.bridge.wizards.GMFGraphSimpleModelWizard;
import org.eclipse.gmf.internal.bridge.wizards.GMFToolSimpleModelWizard;
import org.eclipse.gmf.internal.bridge.wizards.NewGMFMapModelWizard;
import org.eclipse.gmf.internal.codegen.FileSelector;
import org.eclipse.gmf.internal.codegen.popup.actions.ExecuteTemplatesAction;
import org.eclipse.gmf.internal.codegen.popup.actions.TransformToGenModel;
import org.eclipse.gmf.mappings.presentation.GMFMapModelWizard;
import org.eclipse.gmf.tooldef.presentation.GMFToolModelWizard;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.IWizard;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWizard;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.FileEditorInput;

/**
 * @@author dstadnik
 */
public class DashboardMediator {

	private DashboardFigure view;

	private Shell shell;

	private IProject project;

	private DashboardState state;

	public DashboardMediator(Shell shell) {
		state = new DashboardState();
		this.shell = shell;
	}

	public void setView(DashboardFigure view) {
		this.view = view;
		view.getGDMFigure().addAction(createLinkFigure("Select", new SelectGDMAction()));
		view.getGDMFigure().addAction(createLinkFigure("Edit", new EditGDMAction()));
		view.getGDMFigure().addAction(createLinkFigure("Create", new CreateGDMAction()));
		view.getDMFigure().addAction(createLinkFigure("Select", new SelectDMAction()));
		view.getDMFigure().addAction(createLinkFigure("Edit", new EditDMAction()));
		view.getDMFigure().addAction(createLinkFigure("Create", new CreateDMAction()));
		view.getTDMFigure().addAction(createLinkFigure("Select", new SelectTDMAction()));
		view.getTDMFigure().addAction(createLinkFigure("Edit", new EditTDMAction()));
		view.getTDMFigure().addAction(createLinkFigure("Create", new CreateTDMAction()));
		view.getMMFigure().addAction(createLinkFigure("Select", new SelectMMAction()));
		view.getMMFigure().addAction(createLinkFigure("Edit", new EditMMAction()));
		view.getMMFigure().addAction(createLinkFigure("Create", new CreateMMAction()));
		view.getGMFigure().addAction(createLinkFigure("Select", new SelectGMAction()));
		view.getGMFigure().addAction(createLinkFigure("Edit", new EditGMAction()));
		view.getGMFigure().addAction(createLinkFigure("Create", new CreateGMAction()));
		view.getGMFigure().addAction(createLinkFigure("Generate diagram editor", new GenerateDEAction()), false);
		view.getDM2GDMFigure().addAction(createLinkFigure("Derive", new DeriveGDMAction()));
		view.getDM2TDMFigure().addAction(createLinkFigure("Derive", new DeriveTDMAction()));
		view.getDM2MMFigure().addAction(createLinkFigure("Combine", new CombineMMAction()));
		view.getMM2GMFigure().addAction(createLinkFigure("Transform", new GenerateGMAction()));
		updateStatus();
	}

	public IFigure createLinkFigure(String text, DashboardAction action) {
		HyperlinkFigure linkFigure = new HyperlinkFigure(action);
		linkFigure.setText(text);
		return linkFigure;
	}

	protected IFile getFile(String fileName) {
		return project.getFile(new Path(fileName));
	}

	protected String getName(IFile file) {
		if (file == null) {
			return null;
		}
		return file.getProjectRelativePath().toString();
	}

	public IProject getProject() {
		return project;
	}

	public DashboardState getState() {
		return state;
	}

	public void setProjectAndState(IProject project, DashboardState state) {
		this.project = project;
		this.state = state;
		if (this.state == null) {
			this.state = new DashboardState();
		}
		updateStatus();
	}

	protected void updateStatus() {
		if (project == null) {
			view.getStatusLine(0).setText("Select a project in workspace");
			view.getStatusLine(1).setText("");
		} else {
			view.getStatusLine(0).setText("Project: " + project.getName());
			int done = state.getSpecifiedModelsCount() * 100 / state.getModelsCount();
			view.getStatusLine(1).setText("Progress: " + done + "% done");
		}
		setModelName(view.getGDMFigure(), state.gdmFileName);
		setModelName(view.getDMFigure(), state.dmFileName);
		setModelName(view.getTDMFigure(), state.tdmFileName);
		setModelName(view.getMMFigure(), state.mmFileName);
		setModelName(view.getGMFigure(), state.gmFileName);
		view.repaint(); // update hyperlinks
	}

	protected void setModelName(ModelFigure figure, String name) {
		figure.setName(name);
	}

	protected abstract class SelectFileAction implements DashboardAction {

		public boolean isEnabled() {
			return project != null;
		}

		public void run() {
			IFile file = null;
			String fileName = getFileName();
			if (fileName != null) {
				file = getFile(fileName);
			}
			file = FileSelector.selectFile(shell, getFigure().getDescription(), project, file, getFileExtension());
			setFileName(getName(file));
			updateStatus();
		}

		protected abstract ModelFigure getFigure();

		protected abstract String getFileName();

		protected abstract void setFileName(String fileName);

		protected abstract String getFileExtension();
	}

	protected abstract class EditFileAction implements DashboardAction {

		public boolean isEnabled() {
			return project != null && getFileName() != null;
		}

		public void run() {
			IWorkbench workbench = PlatformUI.getWorkbench();
			IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow();
			IWorkbenchPage page = workbenchWindow.getActivePage();
			IFile modelFile = getFile(getFileName());
			try {
				String fileName = modelFile.getFullPath().toString();
				String editorId = workbench.getEditorRegistry().getDefaultEditor(fileName).getId();
				page.openEditor(new FileEditorInput(modelFile), editorId);
			} catch (PartInitException pie) {
				String msg = "Unable to open editor for " + getFileName();
				MessageDialog.openError(workbenchWindow.getShell(), msg, pie.getMessage());
			}
		}

		protected abstract String getFileName();
	}

	protected abstract class RunWizardAction implements DashboardAction {

		private static final int SIZING_WIZARD_WIDTH = 500;

		private static final int SIZING_WIZARD_HEIGHT = 500;

		public boolean isEnabled() {
			return project != null;
		}

		public void run() {
			final IWizard wizard = createWizard();
			if (wizard instanceof IWorkbenchWizard) {
				((IWorkbenchWizard) wizard).init(PlatformUI.getWorkbench(), getSelection());
			}
			WizardDialog dialog = new WizardDialog(shell, wizard) {

				protected void finishPressed() {
					wizardFinished(wizard);
					super.finishPressed();
				}
			};
			dialog.create();
			dialog.getShell().setSize(Math.max(SIZING_WIZARD_WIDTH, dialog.getShell().getSize().x), SIZING_WIZARD_HEIGHT);
			dialog.open();
		}

		protected IStructuredSelection getSelection() {
			return new StructuredSelection(project);
		}

		protected abstract IWizard createWizard();

		protected void wizardFinished(IWizard wizard) {
		}
	}

	private class SelectGDMAction extends SelectFileAction {

		protected ModelFigure getFigure() {
			return DashboardMediator.this.view.getGDMFigure();
		}

		protected String getFileName() {
			return state.gdmFileName;
		}

		protected void setFileName(String fileName) {
			state.gdmFileName = fileName;
		}

		protected String getFileExtension() {
			return "gmfgraph";
		}
	}

	private class SelectDMAction extends SelectFileAction {

		protected ModelFigure getFigure() {
			return DashboardMediator.this.view.getDMFigure();
		}

		protected String getFileName() {
			return state.dmFileName;
		}

		protected void setFileName(String fileName) {
			state.dmFileName = fileName;
		}

		protected String getFileExtension() {
			return "ecore";
		}
	}

	private class SelectTDMAction extends SelectFileAction {

		protected ModelFigure getFigure() {
			return DashboardMediator.this.view.getTDMFigure();
		}

		protected String getFileName() {
			return state.tdmFileName;
		}

		protected void setFileName(String fileName) {
			state.tdmFileName = fileName;
		}

		protected String getFileExtension() {
			return "gmftool";
		}
	}

	private class SelectMMAction extends SelectFileAction {

		protected ModelFigure getFigure() {
			return DashboardMediator.this.view.getMMFigure();
		}

		protected String getFileName() {
			return state.mmFileName;
		}

		protected void setFileName(String fileName) {
			state.mmFileName = fileName;
		}

		protected String getFileExtension() {
			return "gmfmap";
		}
	}

	private class SelectGMAction extends SelectFileAction {

		protected ModelFigure getFigure() {
			return DashboardMediator.this.view.getGMFigure();
		}

		protected String getFileName() {
			return state.gmFileName;
		}

		protected void setFileName(String fileName) {
			state.gmFileName = fileName;
		}

		protected String getFileExtension() {
			return "gmfgen";
		}
	}

	private class EditGDMAction extends EditFileAction {

		protected String getFileName() {
			return state.gdmFileName;
		}
	}

	private class EditDMAction extends EditFileAction {

		protected String getFileName() {
			return state.dmFileName;
		}
	}

	private class EditTDMAction extends EditFileAction {

		protected String getFileName() {
			return state.tdmFileName;
		}
	}

	private class EditMMAction extends EditFileAction {

		protected String getFileName() {
			return state.mmFileName;
		}
	}

	private class EditGMAction extends EditFileAction {

		protected String getFileName() {
			return state.gmFileName;
		}
	}

	private class CreateGDMAction extends RunWizardAction {

		protected IWizard createWizard() {
			return new GMFGraphModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFGraphModelWizard) wizard).getModelFile();
			state.gdmFileName = getName(file);
			updateStatus();
		}
	}

	private class CreateDMAction extends RunWizardAction {

		protected IWizard createWizard() {
			return new EcoreModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((EcoreModelWizard) wizard).getModelFile();
			state.dmFileName = getName(file);
			updateStatus();
		}
	}

	private class CreateTDMAction extends RunWizardAction {

		protected IWizard createWizard() {
			return new GMFToolModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFToolModelWizard) wizard).getModelFile();
			state.tdmFileName = getName(file);
			updateStatus();
		}
	}

	private class CreateMMAction extends RunWizardAction {

		protected IWizard createWizard() {
			return new GMFMapModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFMapModelWizard) wizard).getModelFile();
			state.mmFileName = getName(file);
			updateStatus();
		}
	}

	private class CreateGMAction extends RunWizardAction {

		protected IWizard createWizard() {
			return new GMFGenModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFGenModelWizard) wizard).getModelFile();
			state.gmFileName = getName(file);
			updateStatus();
		}
	}

	private class DeriveGDMAction extends RunWizardAction {

		public boolean isEnabled() {
			return super.isEnabled() && state.dmFileName != null;
		}

		protected IWizard createWizard() {
			return new GMFGraphSimpleModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFGraphSimpleModelWizard) wizard).getModelFile();
			state.gdmFileName = getName(file);
			updateStatus();
		}

		protected IStructuredSelection getSelection() {
			return new StructuredSelection(getFile(state.dmFileName));
		}
	}

	private class DeriveTDMAction extends RunWizardAction {

		public boolean isEnabled() {
			return super.isEnabled() && state.dmFileName != null;
		}

		protected IWizard createWizard() {
			return new GMFToolSimpleModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((GMFToolSimpleModelWizard) wizard).getModelFile();
			state.tdmFileName = getName(file);
			updateStatus();
		}

		protected IStructuredSelection getSelection() {
			return new StructuredSelection(getFile(state.dmFileName));
		}
	}

	private class CombineMMAction extends RunWizardAction {

		public boolean isEnabled() {
			return project != null && state.gdmFileName != null && state.dmFileName != null && state.tdmFileName != null;
		}

		protected IWizard createWizard() {
			return new NewGMFMapModelWizard();
		}

		protected void wizardFinished(IWizard wizard) {
			IFile file = ((NewGMFMapModelWizard) wizard).getModelFile();
			state.mmFileName = getName(file);
			updateStatus();
		}
	}

	private class GenerateGMAction implements DashboardAction {

		public boolean isEnabled() {
			return project != null && state.mmFileName != null;
		}

		public void run() {
			IFile file = getFile(state.mmFileName);
			TransformToGenModel action = new TransformToGenModel();
			IAction uiAction = new Action() {
			};
			uiAction.setText("Transform to GMF generation model");
			IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
			action.setActivePart(uiAction, window.getPartService().getActivePart());
			action.selectionChanged(uiAction, new StructuredSelection(file));
			action.run(uiAction);
			IFile gfile = action.getGenModelFile();
			state.gmFileName = getName(gfile);
			updateStatus();
		}
	}

	private class GenerateDEAction implements DashboardAction {

		public boolean isEnabled() {
			return project != null && state.gmFileName != null;
		}

		public void run() {
			IFile file = getFile(state.gmFileName);
			ExecuteTemplatesAction action = new ExecuteTemplatesAction();
			IAction uiAction = new Action() {
			};
			uiAction.setText("Generate diagram editor");
			IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
			action.setActivePart(uiAction, window.getPartService().getActivePart());
			action.selectionChanged(uiAction, new StructuredSelection(file));
			action.run(uiAction);
		}
	}
}
@


1.10
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@@


1.9
log
@Introduced separate plugin for Tooling UI, moved mapping wizard of #114186 to this plugin.
Wizard got some NLS, respect selection, open-created-model-in-editor improvements as well as aligned with recent gmfmap changes.
Plus, some refactorings to address user-prioritized strategies to select nodes/links doubled number of classes we had.
@
text
@d21 2
a26 2
import org.eclipse.gmf.internal.codegen.wizards.GMFGraphSimpleModelWizard;
import org.eclipse.gmf.internal.codegen.wizards.GMFToolSimpleModelWizard;
@


1.8
log
@refactor hyperlinks
@
text
@d21 1
a26 1
import org.eclipse.gmf.internal.codegen.wizards.NewGMFMapModelWizard;
@


1.7
log
@set ui action labels
@
text
@d17 1
d65 20
a84 20
		view.getGDMFigure().addAction(view.createLinkFigure("Select", new SelectGDMAction()));
		view.getGDMFigure().addAction(view.createLinkFigure("Edit", new EditGDMAction()));
		view.getGDMFigure().addAction(view.createLinkFigure("Create", new CreateGDMAction()));
		view.getDMFigure().addAction(view.createLinkFigure("Select", new SelectDMAction()));
		view.getDMFigure().addAction(view.createLinkFigure("Edit", new EditDMAction()));
		view.getDMFigure().addAction(view.createLinkFigure("Create", new CreateDMAction()));
		view.getTDMFigure().addAction(view.createLinkFigure("Select", new SelectTDMAction()));
		view.getTDMFigure().addAction(view.createLinkFigure("Edit", new EditTDMAction()));
		view.getTDMFigure().addAction(view.createLinkFigure("Create", new CreateTDMAction()));
		view.getMMFigure().addAction(view.createLinkFigure("Select", new SelectMMAction()));
		view.getMMFigure().addAction(view.createLinkFigure("Edit", new EditMMAction()));
		view.getMMFigure().addAction(view.createLinkFigure("Create", new CreateMMAction()));
		view.getGMFigure().addAction(view.createLinkFigure("Select", new SelectGMAction()));
		view.getGMFigure().addAction(view.createLinkFigure("Edit", new EditGMAction()));
		view.getGMFigure().addAction(view.createLinkFigure("Create", new CreateGMAction()));
		view.getGMFigure().addAction(view.createLinkFigure("Generate diagram editor", new GenerateDEAction()), false);
		view.getDM2GDMFigure().addAction(view.createLinkFigure("Derive", new DeriveGDMAction()));
		view.getDM2TDMFigure().addAction(view.createLinkFigure("Derive", new DeriveTDMAction()));
		view.getDM2MMFigure().addAction(view.createLinkFigure("Combine", new CombineMMAction()));
		view.getMM2GMFigure().addAction(view.createLinkFigure("Transform", new GenerateGMAction()));
d88 6
@


1.6
log
@add edit actions
@
text
@d488 1
d510 1
@


1.5
log
@use advanced resource selection dialog
@
text
@d30 1
d36 2
d40 1
d42 1
d65 1
d68 1
d71 1
d74 1
d77 1
d79 1
a79 1
		view.getGMFigure().addAction(view.createLinkFigure("Generate diagram editor", new GenerateDEAction()));
d162 24
d318 35
@


1.4
log
@set created file names in dashboard
@
text
@d138 1
a138 1
			file = FileSelector.selectFile(shell, getFigure().getDescription(), project, file);
d148 2
d202 4
d221 4
d240 4
d259 4
d278 4
@


1.3
log
@set created file names in dashboard
@
text
@d138 1
a138 1
			file = FileSelector.selectFile(shell, getFigure().getDescription(), file);
d337 6
d358 6
d378 6
d401 3
@


1.2
log
@show model file names
@
text
@d60 1
a60 6
		view.getGDMFigure().addAction(view.createLinkFigure("Create", new RunWizardAction() {

			protected IWizard createWizard() {
				return new GMFGraphModelWizard();
			}
		}));
d62 1
a62 6
		view.getDMFigure().addAction(view.createLinkFigure("Create", new RunWizardAction() {

			protected IWizard createWizard() {
				return new EcoreModelWizard();
			}
		}));
d64 1
a64 6
		view.getTDMFigure().addAction(view.createLinkFigure("Create", new RunWizardAction() {

			protected IWizard createWizard() {
				return new GMFToolModelWizard();
			}
		}));
d66 1
a66 6
		view.getMMFigure().addAction(view.createLinkFigure("Create", new RunWizardAction() {

			protected IWizard createWizard() {
				return new GMFMapModelWizard();
			}
		}));
d68 1
a68 6
		view.getGMFigure().addAction(view.createLinkFigure("Create", new RunWizardAction() {

			protected IWizard createWizard() {
				return new GMFGenModelWizard();
			}
		}));
d81 7
d139 1
a139 5
			if (file == null) {
				setFileName(null);
			} else {
				setFileName(file.getProjectRelativePath().toString());
			}
d161 1
a161 1
			IWizard wizard = createWizard();
d165 7
a171 1
			WizardDialog dialog = new WizardDialog(shell, wizard);
d182 3
d262 65
@


1.1
log
@refactor dashboard figure (separate controller from view)
@
text
@d132 10
a141 1
		view.repaint();
d156 1
a156 1
			file = FileSelector.selectFile(shell, getDescription(), file);
d165 1
a165 1
		protected abstract String getDescription();
d169 1
a169 1
		protected abstract String setFileName(String fileName);
d202 2
a203 2
		protected String getDescription() {
			return DashboardMediator.this.view.getGDMFigure().getDescription();
d210 2
a211 2
		protected String setFileName(String fileName) {
			return state.gdmFileName = fileName;
d217 2
a218 2
		protected String getDescription() {
			return DashboardMediator.this.view.getDMFigure().getDescription();
d225 2
a226 2
		protected String setFileName(String fileName) {
			return state.dmFileName = fileName;
d232 2
a233 2
		protected String getDescription() {
			return DashboardMediator.this.view.getTDMFigure().getDescription();
d240 2
a241 2
		protected String setFileName(String fileName) {
			return state.tdmFileName = fileName;
d247 2
a248 2
		protected String getDescription() {
			return DashboardMediator.this.view.getMMFigure().getDescription();
d255 2
a256 2
		protected String setFileName(String fileName) {
			return state.mmFileName = fileName;
d262 2
a263 2
		protected String getDescription() {
			return DashboardMediator.this.view.getGMFigure().getDescription();
d270 2
a271 2
		protected String setFileName(String fileName) {
			return state.gmFileName = fileName;
d308 1
a308 1
			return project != null && state.dmFileName != null;
@

