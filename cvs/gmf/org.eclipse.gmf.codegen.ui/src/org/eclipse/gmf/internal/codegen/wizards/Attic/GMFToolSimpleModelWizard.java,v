head	1.9;
access;
symbols
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	I20060227-1730:1.7
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.3
	M4_10:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2006.03.01.12.46.04;	author dstadnik;	state dead;
branches;
next	1.8;

1.8
date	2006.02.28.19.07.38;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.24.21.22.14;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.23.20.11.23;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.23.15.46.48;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.18.19.30.45;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.13.15.37.59;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.13.13.26.42;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.13.10.12.48;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.9
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.wizards;

import org.eclipse.core.resources.IFile;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.internal.bridge.wizards.WizardUtil;
import org.eclipse.gmf.internal.codegen.resolver.StructureBuilder;
import org.eclipse.gmf.internal.codegen.resolver.StructureResolver;
import org.eclipse.gmf.tooldef.presentation.GMFToolModelWizard;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;

public class GMFToolSimpleModelWizard extends GMFToolModelWizard {

	protected DefinitionPage toolDefinitionPage;

	protected FileDomainModelSource domainModelSource = new FileDomainModelSource();

	protected EObject createInitialModel() {
		ToolDefBuilder builder = new ToolDefBuilder();
		return builder.process(toolDefinitionPage.getModel());
	}

	public void addPages() {
		super.addPages();

		if (selection != null && !selection.isEmpty()) {
			Object selected = selection.getFirstElement();
			if (selected instanceof IFile) {
				newFileCreationPage.setFileName(WizardUtil.getDefaultFileName((IFile) selected, "gmftool"));
			}
		}

		initialObjectCreationPage.dispose();
		initialObjectCreationPage = new PredefinedInitialObjectCreationPage("Whatever2");

		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", selection, domainModelSource);
		domainModelSelectionPage.setTitle("Domain Model");
		domainModelSelectionPage.setDescription("Select file with ecore domain model");
		addPage(domainModelSelectionPage);

		toolDefinitionPage = new DefinitionPage("ToolDefinitionPage", new StructureBuilder(new StructureResolver()), domainModelSource, false);
		toolDefinitionPage.setTitle("Tooling Definition");
		toolDefinitionPage.setDescription("Specify basic tooling definition of the domain model");
		addPage(toolDefinitionPage);
	}

	public void addPage(IWizardPage page) {
		if (page == initialObjectCreationPage) {
			return;
		}
		super.addPage(page);
	}

	public class PredefinedInitialObjectCreationPage extends GMFToolModelWizardInitialObjectCreationPage {

		public PredefinedInitialObjectCreationPage(String pageId) {
			super(pageId);
		}

		public void createControl(Composite parent) {
			Composite composite = new Composite(parent, SWT.NONE);
			setControl(composite);
		}

		protected boolean validatePage() {
			return true;
		}

		public void setVisible(boolean visible) {
			getControl().setVisible(visible);
		}

		public String getInitialObjectName() {
			return gmfToolPackage.getToolRegistry().getName();
		}

		public String getEncoding() {
			return "UTF-8";
		}
	}
}
@


1.8
log
@Introduced separate plugin for Tooling UI, moved mapping wizard of #114186 to this plugin.
Wizard got some NLS, respect selection, open-created-model-in-editor improvements as well as aligned with recent gmfmap changes.
Plus, some refactorings to address user-prioritized strategies to select nodes/links doubled number of classes we had.
@
text
@@


1.7
log
@#129322 Allow to select domain model element on definition page that will be used as diagram canvas element
@
text
@d16 1
@


1.6
log
@make definition page independent from domain model selection page
@
text
@d52 1
a52 1
		toolDefinitionPage = new DefinitionPage("ToolDefinitionPage", new StructureBuilder(new StructureResolver()), domainModelSource);
@


1.5
log
@#126532 Allow to manually resolve domain entity into node or link in wizards that infer tooling and graph definitions from domain model
@
text
@a15 1
import org.eclipse.gmf.internal.codegen.resolver.ResolvedItem;
a18 1
import org.eclipse.jface.viewers.TreeViewer;
a24 2
	protected DomainModelSelectionPage domainModelSelectionPage;

d27 1
a27 1
	protected StructureResolver resolver;
d31 1
a31 2
		TreeViewer viewer = toolDefinitionPage.getViewer();
		return builder.process((ResolvedItem) viewer.getInput());
d47 1
a47 1
		domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", selection);
d52 1
a52 1
		toolDefinitionPage = new DefinitionPage("ToolDefinitionPage", new StructureBuilder(resolver = new StructureResolver()), domainModelSelectionPage);
@


1.4
log
@removed unnecessary casts
@
text
@d10 1
a10 1
 *    dstadnik - initial API and implementation
a13 2
import java.util.Iterator;

a14 1
import org.eclipse.emf.ecore.EClass;
d16 2
a17 3
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.gmf.internal.codegen.resolver.NodePattern;
a18 5
import org.eclipse.gmf.internal.codegen.resolver.TypePattern;
import org.eclipse.gmf.tooldef.CreationTool;
import org.eclipse.gmf.tooldef.Palette;
import org.eclipse.gmf.tooldef.ToolGroup;
import org.eclipse.gmf.tooldef.ToolRegistry;
d20 1
a20 1
import org.eclipse.jface.viewers.CheckboxTreeViewer;
d29 1
a29 1
	protected ToolDefinitionPage toolDefinitionPage;
d34 3
a36 45
		ToolRegistry toolRegistry = gmfToolFactory.createToolRegistry();
		CheckboxTreeViewer viewer = toolDefinitionPage.getViewer();
		EPackage ePackage = (EPackage) viewer.getInput();
		if (ePackage != null) {
			Palette palette = gmfToolFactory.createPalette();
			toolRegistry.setPalette(palette);
			ToolGroup group = gmfToolFactory.createToolGroup();
			group.setTitle(ePackage.getName());
			palette.getTools().add(group);
			for (Iterator ePackageIt = ePackage.eAllContents(); ePackageIt.hasNext();) {
				EObject ePackageObj = (EObject) ePackageIt.next();
				if (!viewer.getChecked(ePackageObj)) {
					continue;
				}
				if (ePackageObj instanceof EClass) {
					EClass eClass = (EClass) ePackageObj;
					String baseName = eClass.getName();
					CreationTool tool = gmfToolFactory.createCreationTool();
					tool.setTitle(baseName);
					tool.setDescription("Create new " + baseName);
					tool.setSmallIcon(gmfToolFactory.createDefaultImage());
					tool.setLargeIcon(gmfToolFactory.createDefaultImage());
					group.getTools().add(tool);
				} else if (ePackageObj instanceof EReference) {
					EReference ref = (EReference) ePackageObj;
					TypePattern pattern = resolver.resolve(ref.getEContainingClass());
					String baseName = pattern.getType().getName();
					if (ref.getName().length() > 0) {
						baseName += Character.toUpperCase(ref.getName().charAt(0));
					}
					if (ref.getName().length() > 1) {
						baseName += ref.getName().substring(1);
					}
					if (pattern instanceof NodePattern) {
						CreationTool tool = gmfToolFactory.createCreationTool();
						tool.setTitle(baseName);
						tool.setDescription("Create new " + baseName);
						tool.setSmallIcon(gmfToolFactory.createDefaultImage());
						tool.setLargeIcon(gmfToolFactory.createDefaultImage());
						group.getTools().add(tool);
					}
				}
			}
		}
		return toolRegistry;
d57 1
a57 1
		toolDefinitionPage = new ToolDefinitionPage("ToolDefinitionPage", resolver = new StructureResolver(), domainModelSelectionPage);
a96 17

	public class ToolDefinitionPage extends DefinitionPage {

		public ToolDefinitionPage(String pageId, StructureResolver resolver, DomainModelSelectionPage domainModelSelectionPage) {
			super(pageId, resolver, domainModelSelectionPage);
		}

		protected void processNewDomainModel(EPackage contents) {
			CheckboxTreeViewer viewer = getViewer();
			viewer.expandAll();
			viewer.setAllChecked(true);
		}

		public final CheckboxTreeViewer getViewer() {
			return (CheckboxTreeViewer) viewer;
		}
	}
@


1.3
log
@generate tooling definition for the reference-based links
@
text
@d43 1
a43 1
		ToolRegistry toolRegistry = (ToolRegistry) gmfToolFactory.createToolRegistry();
@


1.2
log
@#112297 add structure resolver
@
text
@d20 2
d23 1
d26 1
d49 4
a52 1
			for (Iterator ePackageIt = ePackage.eContents().iterator(); ePackageIt.hasNext();) {
d59 1
d61 2
a62 2
					tool.setTitle(eClass.getName());
					tool.setDescription("Create new " + eClass.getName());
d65 19
a83 1
					palette.getTools().add(tool);
@


1.1
log
@#123587 wizard for tooling definition
@
text
@d20 1
a20 1
import org.eclipse.emf.ecore.EStructuralFeature;
d36 2
d82 1
a82 1
		toolDefinitionPage = new ToolDefinitionPage("ToolDefinitionPage", domainModelSelectionPage);
d125 2
a126 13
		public ToolDefinitionPage(String pageId, DomainModelSelectionPage domainModelSelectionPage) {
			super(pageId, domainModelSelectionPage);
		}

		protected boolean isDomainElementShown(Object element) {
			if (element instanceof EPackage) {
				return true;
			} else if (element instanceof EClass) {
				return true;
			} else if (element instanceof EStructuralFeature) {
				return true;
			}
			return false;
@

