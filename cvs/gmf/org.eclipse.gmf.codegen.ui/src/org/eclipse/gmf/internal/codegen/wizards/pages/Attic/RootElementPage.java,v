head	1.4;
access;
symbols
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.02.28.19.07.38;	author atikhomirov;	state dead;
branches;
next	1.3;

1.3
date	2006.01.13.19.09.08;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.13.17.28.21;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.13.17.21.02;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Introduced separate plugin for Tooling UI, moved mapping wizard of #114186 to this plugin.
Wizard got some NLS, respect selection, open-created-model-in-editor improvements as well as aligned with recent gmfmap changes.
Plus, some refactorings to address user-prioritized strategies to select nodes/links doubled number of classes we had.
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.wizards.pages;

import java.util.Collection;
import java.util.Iterator;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Listener;

/**
 * @@author artem
 */
public class RootElementPage extends WizardPage implements Listener {

	private final WizardInput holder;
	private List elementsList;

	public RootElementPage(WizardInput input) {
		super("rootElementPage");
		holder = input;
		setPageComplete(false);
	}

	public void createControl(Composite parent) {
		Composite p = new Composite(parent, SWT.NONE);
		p.setLayout(new GridLayout(2, true));
		createGroup1(p);
		setControl(p);
		// add list of all containments
		// add palette/other visual info
	}

	public void setVisible(boolean visible) {
		super.setVisible(visible);
		if (visible) {
			populateElementsList();
		}
	}

	private void populateElementsList() {
		Collection el = holder.getCanvasElementCandidates();
		String[] items = new String[el.size()];
		int i = 0;
		for (Iterator it = el.iterator(); it.hasNext(); i++) {
			EClass next = (EClass) it.next();
			items[i] = next.getName();
		}
		elementsList.setItems(items);
	}

	private Group createGroup1(Composite p) {
		Group group1 = new Group(p, SWT.NONE);
		group1.setLayout(new FillLayout());
		group1.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		group1.setText("Diagram Root Element");
		elementsList = new List(group1, SWT.SINGLE | SWT.BORDER | SWT.V_SCROLL);
		elementsList.addListener(SWT.Selection, this);
		return group1;
	}

	public void handleEvent(Event event) {
		if (-1 != elementsList.getSelectionIndex()) {
			holder.selectCanvasElement((EClass) holder.getCanvasElementCandidates().get(elementsList.getSelectionIndex()));
			holder.feedDefaultMapping();
			setPageComplete(true);
		}
	}
}
@


1.3
log
@set page titles and descriptions
@
text
@@


1.2
log
@few nice words about .gmfmap wizard
@
text
@a38 1
		setDescription("Choose element of domain model to act as top-level container, associated with diagram");
@


1.1
log
@Moving towards #114186 - wizard to define map model (although almost no-op now)
@
text
@d39 1
a68 1
		elementsList.select(0);
@

