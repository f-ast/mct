head	1.11;
access;
symbols
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	I20060227-1730:1.9
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.5
	M4_10:1.5;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2006.03.01.12.46.04;	author dstadnik;	state dead;
branches;
next	1.10;

1.10
date	2006.02.28.19.07.38;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.24.21.22.14;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.23.20.11.23;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.23.15.46.48;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.18.19.30.45;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.13.15.24.27;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.13.13.26.42;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.13.10.12.48;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.12.18.10.07;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.12.18.09.33;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.11
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    dstadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.wizards;

import org.eclipse.core.resources.IFile;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.gmfgraph.presentation.GMFGraphModelWizard;
import org.eclipse.gmf.internal.bridge.wizards.WizardUtil;
import org.eclipse.gmf.internal.codegen.resolver.StructureBuilder;
import org.eclipse.gmf.internal.codegen.resolver.StructureResolver;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;

public class GMFGraphSimpleModelWizard extends GMFGraphModelWizard {

	protected DefinitionPage graphicalDefinitionPage;

	protected FileDomainModelSource domainModelSource = new FileDomainModelSource();

	protected EObject createInitialModel() {
		GraphDefBuilder builder = new GraphDefBuilder();
		return builder.process(graphicalDefinitionPage.getModel());
	}

	public void addPages() {
		super.addPages();

		if (selection != null && !selection.isEmpty()) {
			Object selected = selection.getFirstElement();
			if (selected instanceof IFile) {
				newFileCreationPage.setFileName(WizardUtil.getDefaultFileName((IFile) selected, "gmfgraph"));
			}
		}

		initialObjectCreationPage.dispose();
		initialObjectCreationPage = new PredefinedInitialObjectCreationPage("Whatever2");

		DomainModelSelectionPage domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", selection, domainModelSource);
		domainModelSelectionPage.setTitle("Domain Model");
		domainModelSelectionPage.setDescription("Select file with ecore domain model");
		addPage(domainModelSelectionPage);

		graphicalDefinitionPage = new DefinitionPage("GraphicalDefinitionPage", new StructureBuilder(new StructureResolver()), domainModelSource, false);
		graphicalDefinitionPage.setTitle("Graphical Definition");
		graphicalDefinitionPage.setDescription("Specify basic graphical definition of the domain model");
		addPage(graphicalDefinitionPage);
	}

	public void addPage(IWizardPage page) {
		if (page == initialObjectCreationPage) {
			return;
		}
		super.addPage(page);
	}

	public class PredefinedInitialObjectCreationPage extends GMFGraphModelWizardInitialObjectCreationPage {

		public PredefinedInitialObjectCreationPage(String pageId) {
			super(pageId);
		}

		public void createControl(Composite parent) {
			Composite composite = new Composite(parent, SWT.NONE);
			setControl(composite);
		}

		protected boolean validatePage() {
			return true;
		}

		public void setVisible(boolean visible) {
			getControl().setVisible(visible);
		}

		public String getInitialObjectName() {
			return gmfGraphPackage.getCanvas().getName();
		}

		public String getEncoding() {
			return "UTF-8";
		}
	}
}
@


1.10
log
@Introduced separate plugin for Tooling UI, moved mapping wizard of #114186 to this plugin.
Wizard got some NLS, respect selection, open-created-model-in-editor improvements as well as aligned with recent gmfmap changes.
Plus, some refactorings to address user-prioritized strategies to select nodes/links doubled number of classes we had.
@
text
@@


1.9
log
@#129322 Allow to select domain model element on definition page that will be used as diagram canvas element
@
text
@d17 1
@


1.8
log
@make definition page independent from domain model selection page
@
text
@d52 1
a52 1
		graphicalDefinitionPage = new DefinitionPage("GraphicalDefinitionPage", new StructureBuilder(new StructureResolver()), domainModelSource);
@


1.7
log
@#126532 Allow to manually resolve domain entity into node or link in wizards that infer tooling and graph definitions from domain model
@
text
@a16 1
import org.eclipse.gmf.internal.codegen.resolver.ResolvedItem;
a18 1
import org.eclipse.jface.viewers.TreeViewer;
d25 1
a25 1
	protected DomainModelSelectionPage domainModelSelectionPage;
d27 1
a27 1
	protected DefinitionPage graphicalDefinitionPage;
d31 1
a31 2
		TreeViewer viewer = graphicalDefinitionPage.getViewer();
		return builder.process((ResolvedItem) viewer.getInput());
d47 1
a47 1
		domainModelSelectionPage = new DomainModelSelectionPage("DomainModelSelectionPage", selection);
d52 1
a52 1
		graphicalDefinitionPage = new DefinitionPage("GraphicalDefinitionPage", new StructureBuilder(new StructureResolver()), domainModelSelectionPage);
@


1.6
log
@removed unnecessary casts
@
text
@a13 2
import java.util.Iterator;

a14 1
import org.eclipse.emf.ecore.EClass;
a15 9
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.gmf.gmfgraph.Canvas;
import org.eclipse.gmf.gmfgraph.Connection;
import org.eclipse.gmf.gmfgraph.DecorationFigure;
import org.eclipse.gmf.gmfgraph.FigureGallery;
import org.eclipse.gmf.gmfgraph.Node;
import org.eclipse.gmf.gmfgraph.PolylineConnection;
import org.eclipse.gmf.gmfgraph.Rectangle;
d17 2
a18 1
import org.eclipse.gmf.internal.codegen.resolver.NodePattern;
d20 1
a20 3
import org.eclipse.gmf.internal.codegen.resolver.TypeLinkPattern;
import org.eclipse.gmf.internal.codegen.resolver.TypePattern;
import org.eclipse.jface.viewers.CheckboxTreeViewer;
d29 1
a29 3
	protected GraphicalDefinitionPage graphicalDefinitionPage;

	protected StructureResolver resolver;
d32 3
a34 59
		Canvas canvas = gmfGraphFactory.createCanvas();
		CheckboxTreeViewer viewer = graphicalDefinitionPage.getViewer();
		EPackage ePackage = (EPackage) viewer.getInput();
		if (ePackage != null) {
			canvas.setName(ePackage.getName());
			FigureGallery fGallery = gmfGraphFactory.createFigureGallery();
			fGallery.setName("default");
			canvas.getFigures().add(fGallery);
			for (Iterator ePackageIt = ePackage.eAllContents(); ePackageIt.hasNext();) {
				EObject ePackageObj = (EObject) ePackageIt.next();
				if (!viewer.getChecked(ePackageObj)) {
					continue;
				}
				if (ePackageObj instanceof EClass) {
					TypePattern pattern = resolver.resolve((EClass) ePackageObj);
					String baseName = pattern.getType().getName();
					if (pattern instanceof NodePattern) {
						Rectangle figure = gmfGraphFactory.createRectangle();
						figure.setName(baseName + "Figure");
						fGallery.getFigures().add(figure);
						Node dElement = gmfGraphFactory.createNode();
						dElement.setFigure(figure);
						dElement.setName(baseName + "Node");
						canvas.getNodes().add(dElement);
					} else if (pattern instanceof TypeLinkPattern) {
						PolylineConnection figure = gmfGraphFactory.createPolylineConnection();
						figure.setName(baseName + "Figure");
						fGallery.getFigures().add(figure);
						Connection dElement = gmfGraphFactory.createConnection();
						dElement.setFigure(figure);
						dElement.setName(baseName + "Link");
						canvas.getConnections().add(dElement);
					}
				} else if (ePackageObj instanceof EReference) {
					EReference ref = (EReference) ePackageObj;
					TypePattern pattern = resolver.resolve(ref.getEContainingClass());
					String baseName = pattern.getType().getName();
					if (ref.getName().length() > 0) {
						baseName += Character.toUpperCase(ref.getName().charAt(0));
					}
					if (ref.getName().length() > 1) {
						baseName += ref.getName().substring(1);
					}
					if (pattern instanceof NodePattern) {
						PolylineConnection figure = gmfGraphFactory.createPolylineConnection();
						figure.setName(baseName + "Figure");
						DecorationFigure decoration = gmfGraphFactory.createPolylineDecoration();
						decoration.setName(baseName + "TargetDecoration");
						figure.setTargetDecoration(decoration);
						fGallery.getFigures().add(figure);
						Connection dElement = gmfGraphFactory.createConnection();
						dElement.setFigure(figure);
						dElement.setName(baseName + "Link");
						canvas.getConnections().add(dElement);
					}
				}
			}
		}
		return canvas;
d55 1
a55 1
		graphicalDefinitionPage = new GraphicalDefinitionPage("GraphicalDefinitionPage", resolver = new StructureResolver(), domainModelSelectionPage);
a94 17

	public class GraphicalDefinitionPage extends DefinitionPage {

		public GraphicalDefinitionPage(String pageId, StructureResolver resolver, DomainModelSelectionPage domainModelSelectionPage) {
			super(pageId, resolver, domainModelSelectionPage);
		}

		protected void processNewDomainModel(EPackage contents) {
			CheckboxTreeViewer viewer = getViewer();
			viewer.expandAll();
			viewer.setAllChecked(true);
		}

		public final CheckboxTreeViewer getViewer() {
			return (CheckboxTreeViewer) viewer;
		}
	}
@


1.5
log
@generate graphical definition for the reference-based links
@
text
@d47 1
a47 1
		Canvas canvas = (Canvas) gmfGraphFactory.createCanvas();
@


1.4
log
@#112297 add structure resolver
@
text
@d20 1
d23 1
d55 1
a55 1
			for (Iterator ePackageIt = ePackage.eContents().iterator(); ePackageIt.hasNext();) {
d62 1
d65 1
a65 1
						figure.setName(pattern.getType().getName() + "Figure");
d69 1
a69 1
						dElement.setName(pattern.getType().getName() + "Node");
d73 1
a73 1
						figure.setName(pattern.getType().getName() + "Figure");
d77 23
a99 1
						dElement.setName(pattern.getType().getName() + "Link");
@


1.3
log
@#123587 wizard for tooling definition
@
text
@a19 1
import org.eclipse.emf.ecore.EStructuralFeature;
d21 1
d24 1
d27 4
d42 2
d59 18
a76 8
					EClass eClass = (EClass) ePackageObj;
					Rectangle figure = gmfGraphFactory.createRectangle();
					figure.setName(eClass.getName() + "Figure");
					fGallery.getFigures().add(figure);
					Node dElement = gmfGraphFactory.createNode();
					dElement.setFigure(figure);
					dElement.setName(eClass.getName() + "Node");
					canvas.getNodes().add(dElement);
d101 1
a101 1
		graphicalDefinitionPage = new GraphicalDefinitionPage("GraphicalDefinitionPage", domainModelSelectionPage);
d144 2
a145 13
		public GraphicalDefinitionPage(String pageId, DomainModelSelectionPage domainModelSelectionPage) {
			super(pageId, domainModelSelectionPage);
		}

		protected boolean isDomainElementShown(Object element) {
			if (element instanceof EPackage) {
				return true;
			} else if (element instanceof EClass) {
				return true;
			} else if (element instanceof EStructuralFeature) {
				return true;
			}
			return false;
@


1.2
log
@remove stale import
@
text
@a13 2
import java.util.ArrayList;
import java.util.Collections;
a16 3
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.util.URI;
a20 6
import org.eclipse.emf.ecore.provider.EcoreItemProviderAdapterFactory;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
a26 2
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.window.Window;
a27 1
import org.eclipse.jface.wizard.WizardPage;
a28 5
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
a29 3
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.dialogs.ResourceSelectionDialog;
d35 1
a35 1
	protected MappingPage mappingPage;
d39 1
a39 1
		CheckboxTreeViewer viewer = mappingPage.getViewer();
d69 7
d81 1
a81 1
		domainModelSelectionPage.setDescription("Select domain model");
d84 4
a87 4
		mappingPage = new MappingPage("MappingPage");
		mappingPage.setTitle("Graphical Definition");
		mappingPage.setDescription("Specify basic graphical definition of the domain model");
		addPage(mappingPage);
a104 1

d125 1
a125 1
	public class DomainModelSelectionPage extends WizardPage {
d127 2
a128 10
		protected IFile file;

		public DomainModelSelectionPage(String pageId, IStructuredSelection selection) {
			super(pageId);
			if (selection != null && !selection.isEmpty()) {
				Object selected = selection.getFirstElement();
				if (selected instanceof IFile) {
					file = (IFile) selected;
				}
			}
d131 7
a137 26
		public void createControl(Composite parent) {
			Composite composite = new Composite(parent, SWT.NONE);
			{
				GridLayout layout = new GridLayout();
				layout.numColumns = 3;
				layout.verticalSpacing = 12;
				composite.setLayout(layout);

				GridData data = new GridData();
				data.verticalAlignment = GridData.FILL;
				data.grabExcessVerticalSpace = true;
				data.horizontalAlignment = GridData.FILL;
				composite.setLayoutData(data);
			}
			Label label = new Label(composite, SWT.NONE);
			label.setText("File name");
			{
				GridData data = new GridData();
				label.setLayoutData(data);
			}
			final Text text = new Text(composite, SWT.SINGLE | SWT.BORDER | SWT.READ_ONLY);
			{
				GridData data = new GridData();
				data.horizontalAlignment = GridData.FILL;
				data.grabExcessHorizontalSpace = true;
				text.setLayoutData(data);
d139 1
a139 34
			if (file != null) {
				text.setText(file.getFullPath().toString());
			}
			Button button = new Button(composite, SWT.PUSH);
			button.addSelectionListener(new SelectionListener() {

				public void widgetSelected(SelectionEvent e) {
					ResourceSelectionDialog fsd = new ResourceSelectionDialog(getShell(), ResourcesPlugin.getWorkspace().getRoot(), "Domain Model File");
					if (file != null) {
						fsd.setInitialElementSelections(Collections.singletonList(file));
					}
					if (fsd.open() == Window.OK) {
						Object[] result = fsd.getResult();
						if (result.length > 0 && result[0] instanceof IFile) {
							file = (IFile) result[0];
							text.setText(file.getFullPath().toString());
						}
					}
				}

				public void widgetDefaultSelected(SelectionEvent e) {
				}
			});
			button.setText("Browse");
			{
				GridData data = new GridData();
				button.setLayoutData(data);
			}
			setPageComplete(validatePage());
			setControl(composite);
		}

		protected boolean validatePage() {
			return file != null;
d142 4
a145 125
		public IFile getFile() {
			return file;
		}
	}

	public class MappingPage extends WizardPage {

		protected IFile processedFile;

		protected Label msg;

		protected CheckboxTreeViewer domainModelViewer;

		public MappingPage(String pageId) {
			super(pageId);
		}

		public void createControl(Composite parent) {
			Composite composite = new Composite(parent, SWT.NONE);
			{
				GridLayout layout = new GridLayout();
				layout.numColumns = 1;
				layout.verticalSpacing = 12;
				composite.setLayout(layout);

				GridData data = new GridData();
				data.verticalAlignment = GridData.FILL;
				data.grabExcessVerticalSpace = true;
				data.horizontalAlignment = GridData.FILL;
				composite.setLayoutData(data);
			}
			msg = new Label(composite, SWT.NONE);
			{
				GridData data = new GridData();
				data.horizontalAlignment = GridData.FILL;
				data.grabExcessHorizontalSpace = true;
				msg.setLayoutData(data);
			}
			domainModelViewer = new CheckboxTreeViewer(composite);
			AdapterFactory adapterFactory = new EcoreItemProviderAdapterFactory();
			domainModelViewer.setContentProvider(new AdapterFactoryContentProvider(adapterFactory) {

				protected boolean isAccessible(Object element) {
					if (element instanceof EPackage) {
						return true;
					} else if (element instanceof EClass) {
						return true;
					} else if (element instanceof EStructuralFeature) {
						return true;
					}
					return false;
				}

				public Object[] getChildren(Object object) {
					Object[] children = super.getChildren(object);
					if (children.length == 0) {
						return children;
					}
					ArrayList filteredChildren = new ArrayList(children.length);
					for (int i = 0; i < children.length; i++) {
						if (isAccessible(children[i])) {
							filteredChildren.add(children[i]);
						}
					}
					return (Object[]) filteredChildren.toArray(new Object[filteredChildren.size()]);
				}

				public boolean hasChildren(Object object) {
					return getChildren(object).length > 0;
				}

				public Object[] getElements(Object object) {
					return getChildren(object);
				}
			});
			domainModelViewer.setLabelProvider(new AdapterFactoryLabelProvider(adapterFactory));
			{
				GridData data = new GridData();
				data.verticalAlignment = GridData.FILL;
				data.grabExcessVerticalSpace = true;
				data.horizontalAlignment = GridData.FILL;
				data.grabExcessHorizontalSpace = true;
				domainModelViewer.getControl().setLayoutData(data);
			}
			setPageComplete(validatePage());
			setControl(composite);
		}

		protected boolean validatePage() {
			return true;
		}

		public void setVisible(boolean visible) {
			super.setVisible(visible);
			IFile file = domainModelSelectionPage.getFile();
			if (visible && (file == null || file != processedFile)) {
				processedFile = file;
				reloadDomainModel();
				domainModelViewer.refresh();
				domainModelViewer.expandAll();
				domainModelViewer.setAllChecked(true);
			}
		}

		protected void reloadDomainModel() {
			if (processedFile == null) {
				msg.setText("Domain model file is not specified; empty model will be created.");
				domainModelViewer.setInput(null);
				setPageComplete(true);
				return;
			}
			EPackage contents;
			try {
				URI uri = URI.createPlatformResourceURI(processedFile.getFullPath().toString());
				ResourceSet rs = new ResourceSetImpl();
				Resource r = rs.getResource(uri, true);
				contents = (EPackage) r.getContents().get(0);
				msg.setText("Select domain model elements to process:");
				domainModelViewer.setInput(contents);
				setPageComplete(true);
			} catch (Exception e) {
				msg.setText("Error loading domain model file.");
				domainModelViewer.setInput(null);
				setPageComplete(false);
			}
d149 1
a149 1
			return domainModelViewer;
@


1.1
log
@#112297 add gmfgraph creation wizard
@
text
@a36 1
import org.eclipse.jface.viewers.AbstractTreeViewer;
@

