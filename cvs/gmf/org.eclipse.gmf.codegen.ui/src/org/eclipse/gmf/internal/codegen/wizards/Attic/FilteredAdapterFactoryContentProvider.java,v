head	1.3;
access;
symbols
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.1
	M4_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.03.01.12.46.04;	author dstadnik;	state dead;
branches;
next	1.2;

1.2
date	2006.01.18.19.30.45;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.13.10.12.48;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.3
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    dstadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.wizards;

import java.util.ArrayList;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;

public class FilteredAdapterFactoryContentProvider extends AdapterFactoryContentProvider {

	public FilteredAdapterFactoryContentProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * Override to hide specific elements.
	 */
	protected boolean isShown(Object element) {
		return true;
	}

	public Object[] getChildren(Object object) {
		Object[] children = super.getChildren(object);
		if (children.length == 0) {
			return children;
		}
		ArrayList shownChildren = new ArrayList(children.length);
		for (int i = 0; i < children.length; i++) {
			if (isShown(children[i])) {
				shownChildren.add(children[i]);
			}
		}
		return shownChildren.toArray(new Object[shownChildren.size()]);
	}

	public boolean hasChildren(Object object) {
		return getChildren(object).length > 0;
	}

	public Object[] getElements(Object object) {
		return getChildren(object);
	}
}
@


1.2
log
@removed unnecessary casts
@
text
@@


1.1
log
@#123587 wizard for tooling definition
@
text
@d43 1
a43 1
		return (Object[]) shownChildren.toArray(new Object[shownChildren.size()]);
@

