head	1.3;
access;
symbols
	v20080722-1827:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080512-1200:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20071108-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070420-1000:1.3
	v20070405-2000:1.3
	v20070330-1300:1.3
	v20070228-2000:1.3
	v20070208-1800:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.11.01.12.21.14;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.01.09.59.32;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.03.14.21.35;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove project accessor from dashboard facade
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.dashboard;

import org.eclipse.gmf.bridge.ui.dashboard.DashboardAction;
import org.eclipse.gmf.bridge.ui.dashboard.DashboardFacade;
import org.eclipse.gmf.bridge.ui.dashboard.DashboardState;
import org.eclipse.gmf.internal.codegen.popup.actions.ExecuteTemplatesOperation;

/**
 * @@author dstadnik
 */
public class GenerateDEAction implements DashboardAction {

	private DashboardFacade context;

	public void init(DashboardFacade context) {
		this.context = context;
	}

	public boolean isEnabled() {
		DashboardState state = context.getState();
		if (context.isStrict()) {
			if (state.getDM() == null || state.getDGM() == null) {
				return false;
			}
		}
		return state.getGM() != null;
	}

	public void run() {
		ExecuteTemplatesOperation op = new ExecuteTemplatesOperation();
		op.setGenModelURI(context.getState().getGM());
		op.run();
	}
}
@


1.2
log
@use uris instead of file names in dashboard
@
text
@d37 1
a37 1
		return context.getProject() != null && state.getGM() != null;
@


1.1
log
@contribute actions to the dashboard
@
text
@a13 1
import org.eclipse.core.resources.IFile;
d17 1
a17 6
import org.eclipse.gmf.internal.codegen.popup.actions.ExecuteTemplatesAction;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
d33 1
a33 1
			if (state.dmFileName == null || state.dgmFileName == null) {
d37 1
a37 1
		return context.getProject() != null && state.gmFileName != null;
d41 3
a43 8
		IFile file = context.getFile(context.getState().gmFileName);
		ExecuteTemplatesAction action = new ExecuteTemplatesAction();
		IAction uiAction = new Action() {
		};
		IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
		action.setActivePart(uiAction, window.getPartService().getActivePart());
		action.selectionChanged(uiAction, new StructuredSelection(file));
		action.run(uiAction);
@

