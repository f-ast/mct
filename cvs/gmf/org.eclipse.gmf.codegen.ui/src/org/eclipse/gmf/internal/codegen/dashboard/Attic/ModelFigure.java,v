head	1.5;
access;
symbols
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.03.01.14.20.27;	author dstadnik;	state dead;
branches;
next	1.4;

1.4
date	2006.01.19.08.55.40;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.18.15.37.07;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.18.11.39.51;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.17.17.41.37;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.5
log
@#129930 move dashboard in separate plugin
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    dstadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.dashboard;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.MarginBorder;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.ToolbarLayout;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.swt.graphics.Image;

/**
 * @@author dstadnik
 */
public class ModelFigure extends RectangleFigure {

	private IFigure labelsPlate;

	private IFigure actionsPlate;

	private IFigure stdActionsPlate;

	private List separators;

	public ModelFigure() {
		separators = new ArrayList();
		ToolbarLayout layout = new ToolbarLayout();
		layout.setMinorAlignment(ToolbarLayout.ALIGN_CENTER);
		setLayoutManager(layout);

		labelsPlate = new Figure();
		ToolbarLayout labelsLayout = new ToolbarLayout();
		labelsPlate.setLayoutManager(labelsLayout);
		add(labelsPlate);

		SeparatorFigure s1 = new SeparatorFigure();
		separators.add(s1);
		add(s1);

		actionsPlate = new Figure();
		ToolbarLayout actionsLayout = new ToolbarLayout();
		actionsLayout.setStretchMinorAxis(false);
		actionsPlate.setLayoutManager(actionsLayout);
		add(actionsPlate);

		stdActionsPlate = new Figure();
		ToolbarLayout stdActionsLayout = new ToolbarLayout(true);
		stdActionsLayout.setSpacing(2);
		stdActionsPlate.setLayoutManager(stdActionsLayout);
		actionsPlate.add(stdActionsPlate);

		Label descriptionFigure = new Label();
		descriptionFigure.setFont(JFaceResources.getBannerFont());
		addLabel(descriptionFigure);
		Label nameFigure = new Label();
		addLabel(nameFigure);
		setName(null); // init
	}

	public void setSpacing(int spacing) {
		setBorder(new MarginBorder(spacing, 0, spacing, 0));
		for (Iterator it = separators.iterator(); it.hasNext();) {
			SeparatorFigure separator = (SeparatorFigure) it.next();
			separator.setPreferredSize(new Dimension(0, spacing * 2 + separator.getLineWidth()));
		}
		labelsPlate.setBorder(new MarginBorder(0, spacing, 0, spacing));
		actionsPlate.setBorder(new MarginBorder(0, spacing, 0, spacing));
	}

	public void addLabel(IFigure labelFigure) {
		labelsPlate.add(labelFigure);
	}

	public void removeLabel(IFigure labelFigure) {
		labelsPlate.remove(labelFigure);
	}

	public final void addAction(IFigure actionFigure) {
		addAction(actionFigure, true);
	}

	public void addAction(IFigure actionFigure, boolean std) {
		Label bullet = new Label();
		bullet.setText("-");
		if (std) {
			if (!stdActionsPlate.getChildren().isEmpty()) {
				bullet.setText("/");
			}
			stdActionsPlate.add(bullet);
			stdActionsPlate.add(actionFigure);
		} else {
			IFigure plate = new Figure();
			ToolbarLayout layout = new ToolbarLayout(true);
			layout.setSpacing(3);
			plate.setLayoutManager(layout);
			plate.add(bullet);
			plate.add(actionFigure);
			actionsPlate.add(plate);
		}
	}

	protected Label getLabel(int i) {
		return (Label) labelsPlate.getChildren().get(i);
	}

	public String getDescription() {
		return getLabel(0).getText();
	}

	public void setDescription(String description) {
		getLabel(0).setText(description);
	}

	public void setIcon(Image icon) {
		getLabel(0).setIcon(icon);
	}

	public void setName(String name) {
		if (name == null || name.trim().length() == 0) {
			name = "<not specified>";
		}
		getLabel(1).setText(name);
	}
}
@


1.4
log
@allow actions to be added in one line
@
text
@@


1.3
log
@show model file names
@
text
@d37 2
d62 6
d94 5
a98 5
	public void addAction(IFigure actionFigure) {
		IFigure plate = new Figure();
		ToolbarLayout layout = new ToolbarLayout(true);
		layout.setSpacing(3);
		plate.setLayoutManager(layout);
d101 3
a103 11
		plate.add(bullet);
		plate.add(actionFigure);
		actionsPlate.add(plate);
	}

	public void removeAction(IFigure actionFigure) {
		for (Iterator it = actionsPlate.getChildren().iterator(); it.hasNext();) {
			IFigure plate = (IFigure) it.next();
			if (plate.getChildren().contains(actionFigure)) {
				actionsPlate.remove(plate);
				break;
d105 10
@


1.2
log
@better presentation options
@
text
@a22 1
import org.eclipse.draw2d.StackLayout;
d26 1
d33 1
a33 1
	private Label description;
a38 2
	private List holders;

a40 1
		holders = new ArrayList();
d44 6
a49 7
		IFigure descriptionHolder = new Figure();
		descriptionHolder.setLayoutManager(new StackLayout());
		holders.add(descriptionHolder);
		add(descriptionHolder);
		description = new Label();
		description.setFont(JFaceResources.getBannerFont());
		descriptionHolder.add(description);
d53 1
a57 1
		holders.add(actionsPlate);
d59 7
d74 2
a75 4
		for (Iterator it = holders.iterator(); it.hasNext();) {
			IFigure holder = (IFigure) it.next();
			holder.setBorder(new MarginBorder(0, spacing, 0, spacing));
		}
d78 2
a79 2
	public String getDescription() {
		return description.getText();
d82 2
a83 2
	public void setDescription(String description) {
		this.description.setText(description);
d97 33
@


1.1
log
@#124173 provide gmf dashboard
@
text
@d22 1
a22 1
import org.eclipse.draw2d.RoundedRectangle;
d26 1
d31 1
a31 1
public class ModelFigure extends RoundedRectangle {
d52 1
a62 1
		updateSpacing();
d65 2
a66 2
	protected void updateSpacing() {
		setBorder(new MarginBorder(corner.height, 0, corner.height, 0));
d69 1
a69 1
			separator.setPreferredSize(new Dimension(0, corner.height * 2 + separator.getLineWidth()));
d73 1
a73 1
			holder.setBorder(new MarginBorder(0, corner.width, 0, corner.width));
a76 5
	public void setCornerDimensions(Dimension d) {
		super.setCornerDimensions(d);
		updateSpacing();
	}

@

