head	1.6;
access;
symbols
	v20080722-1827:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080512-1200:1.6
	v20080417-1610:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20071108-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.6
	v20070420-1000:1.5
	v20070405-2000:1.5
	v20070330-1300:1.5
	v20070228-2000:1.5
	v20070208-1800:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061214-0000:1.5
	M3_20:1.4
	v20061117-0800:1.4
	v20061013-1330:1.3
	M1_20:1.1
	v20060904-1500:1.1;
locks; strict;
comment	@# @;


1.6
date	2007.05.18.20.41.21;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	66d464e0f714567;

1.5
date	2006.11.22.17.35.57;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	124a45648a7d4567;

1.4
date	2006.11.06.18.32.08;	author radvorak;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.21.13.15.58;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.06.10.54.20;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.31.14.22.46;	author radvorak;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[187811] akarjakina - Migration support refactored
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: dvorak - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.popup.actions;

import java.util.Collections;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.common.util.BasicDiagnostic;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.gmf.internal.common.migrate.ModelLoadHelper;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.IInputValidator;
import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.window.Window;
import org.eclipse.osgi.util.NLS;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IObjectActionDelegate;
import org.eclipse.ui.IWorkbenchPart;

/**
 * Performs migration of the model contained in the file selection to the latest
 * version of it metamodel.   
 */
public class MigrateModelAction implements IObjectActionDelegate {
	
	private IFile fileSelection;
	private IWorkbenchPart wrkbenchPart;

	
	public MigrateModelAction() {
		super();
	}
	
	public void setActivePart(IAction action, IWorkbenchPart targetPart) {
		wrkbenchPart = targetPart;
	}

	public void selectionChanged(IAction action, ISelection selection) {
		this.fileSelection = null;
		action.setEnabled(false);
		if (selection instanceof IStructuredSelection == false) {
			return;
		}
		this.fileSelection = (IFile) ((IStructuredSelection) selection).getFirstElement();
		action.setEnabled(true);
	}

	public void run(IAction action) {		
		final IFile modelFile = this.fileSelection;
		URI fileURI = URI.createPlatformResourceURI(modelFile.getFullPath().toString(), true);
		ModelLoadHelper loadHelper = new ModelLoadHelper(new ResourceSetImpl(), fileURI);

		if (!loadHelper.isOK()) {
			DiagnosticsDialog.openOk(getShell(), action.getText(), Messages.migration_problemsDetectedTitle, loadHelper.getDiagnostics());
			return;
		}
		InputDialog dlg = new InputDialog(getShell(), Messages.migration_modelDestinationFileTitle, 
				Messages.migration_specifyFileNameLabel, modelFile.getName(), new IInputValidator() {

			public String isValid(String newText) {
				IStatus fileNameStatus = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);
				return fileNameStatus.isOK() ? null : fileNameStatus.getMessage();
			}
		});

		if (dlg.open() != Window.OK) {
			return;
		}
		
		Resource resource = loadHelper.getLoadedResource();

		String destFileName = dlg.getValue();
		if (fileSelection.getParent().findMember(destFileName) != null) {
			boolean overwrite = MessageDialog.openQuestion(getShell(), Messages.migration_confirmModelOverwriteTitle, 
						NLS.bind(Messages.migration_confirmModelOverwriteMessage, destFileName));
			if (!overwrite) {
				return;
			}
		}

		URI migratedURI = fileURI.trimSegments(1).appendSegment(destFileName);
		resource.setURI(migratedURI);
		IStatus saveStatus = Status.OK_STATUS;
		try {
			resource.save(Collections.EMPTY_MAP);
		} catch (Exception e) {
			saveStatus = BasicDiagnostic.toIStatus(BasicDiagnostic.toDiagnostic(e));
		}

		openErrorDialog(action.getText(), Messages.migration_destinationModelSaveError, saveStatus);
	}

	private void openErrorDialog(String title, String message, IStatus errorStatus) {
		final String[] buttons = new String[] { IDialogConstants.OK_LABEL };
		final int[] buttonIDs = new int[] { IDialogConstants.OK_ID };
		ErrorDialogEx dlg = new ErrorDialogEx(getShell(), title, message, errorStatus, buttons, buttonIDs, 0);
		dlg.open();
	}

	private Shell getShell() {
		return wrkbenchPart.getSite().getShell();
	}
}
@


1.5
log
@Removing warnings
@
text
@d1 2
a2 2
/**
 * Copyright (c) 2006 Eclipse.org
a17 1
import org.eclipse.core.runtime.IPath;
d23 1
a23 1
import org.eclipse.gmf.internal.common.migrate.MigrationUtil;
d69 1
a69 1
		ModelLoadHelper loadHelper = MigrationUtil.migrateModel(fileURI);
a74 2
		String modelExtension = modelFile.getFileExtension();
		final IPath destPath = modelFile.getFullPath().removeFileExtension().addFileExtension(modelExtension);
d76 1
a76 1
				Messages.migration_specifyFileNameLabel, destPath.lastSegment(), new IInputValidator() {
@


1.4
log
@[163243] Improve problem reporting of tooling actions TransformGenModel, codegeneration ...
- use DiagnosticsDialog for error processing
@
text
@d69 1
a69 1
		URI fileURI = URI.createPlatformResourceURI(modelFile.getFullPath().toString());
@


1.3
log
@#157836 Feature-based model migration patches should NOT use object identity equals() on metamodel
@
text
@a23 1
import org.eclipse.emf.ecore.util.EcoreUtil;
d25 1
d70 1
a70 4
		Resource resource = MigrationUtil.migrateModel(fileURI);
		if (resource == null) {
			return;
		}
d72 2
a73 3
		if (!resource.getErrors().isEmpty() || !resource.getWarnings().isEmpty()) {
			IStatus loadStatus = BasicDiagnostic.toIStatus(EcoreUtil.computeDiagnostic(resource, true));
			openErrorDialog(action.getText(), Messages.migration_problemsDetectedTitle, loadStatus);
d90 2
@


1.2
log
@#138440 Enable migration action only for models that may require it, ensure migration config gets registered before the action is run
@
text
@a24 3
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.util.GMFGenMigration;
import org.eclipse.gmf.internal.common.migrate.MigrationConfig;
d43 1
a43 10
public abstract class MigrateModelAction implements IObjectActionDelegate {
	// TODO - not nice, improve the migration metadata registration 
	public static class GMFGen extends MigrateModelAction {
		@@Override
		protected void initModelMigration() {
			GMFGenPackage gmfGenPackage = GMFGenPackage.eINSTANCE;
			MigrationConfig migrationConfig = MigrationConfig.Registry.INSTANCE.getConfig(GMFGenMigration.CONFIG.getExtension());
			assert null != migrationConfig && migrationConfig.getMetamodelNsURI().equals(gmfGenPackage.getNsURI());			
		}
	}
a52 2
	protected abstract void initModelMigration();

d67 1
a67 3
	public void run(IAction action) {
		initModelMigration();
		
@


1.1
log
@#154698 Support migration of GMF tooling models in case of backward incomatible changes
- adding migration action, save model loading to generate actions
@
text
@d25 3
d46 11
a56 2
public class MigrateModelAction implements IObjectActionDelegate {

d64 2
d82 2
@

