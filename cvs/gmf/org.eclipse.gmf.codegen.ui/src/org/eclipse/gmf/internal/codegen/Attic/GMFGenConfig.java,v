head	1.25;
access;
symbols
	M4_20:1.24
	v20061222-1800:1.24
	v20061214-0000:1.23
	M3_20:1.22
	v20061117-0800:1.22
	v20061013-1330:1.22
	v20060919-0800:1.13
	M1_20:1.18
	v20060904-1500:1.18
	v20060713-1700:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060626-1420:1.13
	v20060616-1200:1.12
	v20060609-1400:1.11
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.8
	v20060519-1300:1.7
	v20060519-0800:1.6
	I20060505-1400:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.25
date	2007.01.18.18.49.12;	author atikhomirov;	state dead;
branches;
next	1.24;
commitid	196045afc1264567;

1.24
date	2006.12.19.11.31.55;	author dstadnik;	state Exp;
branches;
next	1.23;
commitid	29b14587cdab4567;

1.23
date	2006.11.24.18.11.40;	author radvorak;	state Exp;
branches;
next	1.22;
commitid	3a7a456735db4567;

1.22
date	2006.10.06.12.05.16;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2006.09.29.21.26.32;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2006.09.21.14.22.46;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.09.15.21.38.57;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.08.28.13.06.02;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2006.08.25.18.32.42;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2006.08.09.14.26.29;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2006.08.07.16.35.38;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.07.18.14.40.11;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.26.14.33.22;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.13.11.17.01;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.06.17.13.01;	author radvorak;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.01.12.44.38;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.29.18.04.03;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.25.10.46.06;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.19.15.19.29;	author radvorak;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.18.17.23.19;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.17.12.39.02;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.30.22.06.29;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.30.14.18.51;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.15.15.16.58;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.13.12.02.45;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.25
log
@[148836] afedorov - Provide "Create generator model..." wizard instead of existing dialog sequence
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
import org.eclipse.gmf.internal.common.reconcile.Copier;
import org.eclipse.gmf.internal.common.reconcile.DefaultDecisionMaker;
import org.eclipse.gmf.internal.common.reconcile.Matcher;
import org.eclipse.gmf.internal.common.reconcile.ReconcilerConfigBase;
import org.eclipse.gmf.internal.common.reconcile.ReflectiveMatcher;
import org.eclipse.gmf.internal.common.reconcile.StringPatternDecisionMaker;

/**
 * XXX Perhaps, org.eclipse.gmf.codegen/oeg.internal.util would be better place for this class. 
 */
public class GMFGenConfig extends ReconcilerConfigBase {
	private final GMFGenPackage GMFGEN = GMFGenPackage.eINSTANCE;
	
	public GMFGenConfig(){
		setMatcher(GMFGEN.getGenEditorGenerator(), ALWAYS_MATCH);
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_CopyrightText());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_PackageNamePrefix());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_DomainFileExtension());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_DiagramFileExtension());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_SameFileForDiagramAndModel());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_ModelID());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_DynamicTemplates());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_TemplateDirectory());
		
		setMatcher(GMFGEN.getGenPlugin(), ALWAYS_MATCH); //exactly one feature for ALWAYS_MATCH GenEditorGenerator
		preserveIfSet(GMFGEN.getGenPlugin(), GMFGEN.getGenPlugin_ID());
		preserveIfSet(GMFGEN.getGenPlugin(), GMFGEN.getGenPlugin_Name());
		preserveIfSet(GMFGEN.getGenPlugin(), GMFGEN.getGenPlugin_Provider());
		preserveIfSet(GMFGEN.getGenPlugin(), GMFGEN.getGenPlugin_Version());
		preserveIfSet(GMFGEN.getGenPlugin(), GMFGEN.getGenPlugin_ActivatorClassName());
		preserveIfSet(GMFGEN.getGenPlugin(), GMFGEN.getGenPlugin_PrintingEnabled());
		
		setMatcher(GMFGEN.getGenEditorView(), ALWAYS_MATCH); //exactly one 
		preserveIfSet(GMFGEN.getGenEditorView(), GMFGEN.getGenEditorView_IconPath());
		preserveIfSet(GMFGEN.getGenEditorView(), GMFGEN.getGenEditorView_ClassName());
		preserveIfSet(GMFGEN.getGenEditorView(), GMFGEN.getGenEditorView_ID());
		
		setMatcher(GMFGEN.getGenDiagram(), ALWAYS_MATCH);  
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getShortcuts_ContainsShortcutsTo());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getShortcuts_ShortcutsProvidedFor());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getEditorCandies_CreationWizardIconPath());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getEditorCandies_CreationWizardCategoryID());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getGenDiagram_Synchronized());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationEnabled());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_LiveValidationUIFeedback());		
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationDecorators());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationDecoratorProviderClassName());		
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationDecoratorProviderPriority());		
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationProviderClassName());		
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationProviderPriority());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_MetricProviderPriority());		
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_MetricProviderClassName());		
		
		setMatcher(GMFGEN.getGenTopLevelNode(), getGenNodeMatcher());
		preserveIfNotByPattern(GMFGEN.getGenTopLevelNode(), GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName(), ".*" + GenChildContainer.CANONICAL_EDIT_POLICY_SUFFIX);
		preserveIfNotByPattern(GMFGEN.getGenTopLevelNode(), GMFGEN.getGenNode_GraphicalNodeEditPolicyClassName(), ".*" + GenNode.GRAPHICAL_NODE_EDIT_POLICY_SUFFIX);
		//[155332]preserveIfNotByPattern(GMFGEN.getGenTopLevelNode(), GMFGEN.getGenCommonBase_EditPartClassName(), ".*" + GenCommonBase.EDIT_PART_SUFFIX);
		preserveIfSet(GMFGEN.getGenTopLevelNode(), GMFGEN.getGenNode_PrimaryDragEditPolicyQualifiedClassName());
		
		setMatcher(GMFGEN.getGenChildNode(), getGenNodeMatcher());
		preserveIfNotByPattern(GMFGEN.getGenChildNode(), GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName(), ".*" + GenChildContainer.CANONICAL_EDIT_POLICY_SUFFIX);
		preserveIfNotByPattern(GMFGEN.getGenChildNode(), GMFGEN.getGenNode_GraphicalNodeEditPolicyClassName(), ".*" + GenNode.GRAPHICAL_NODE_EDIT_POLICY_SUFFIX);
		//[155332]preserveIfNotByPattern(GMFGEN.getGenChildNode(), GMFGEN.getGenCommonBase_EditPartClassName(), ".*" + GenCommonBase.EDIT_PART_SUFFIX);
		preserveIfSet(GMFGEN.getGenChildNode(), GMFGEN.getGenNode_PrimaryDragEditPolicyQualifiedClassName());
		 
		setMatcher(GMFGEN.getGenChildLabelNode(), getGenNodeMatcher());
		preserveIfSet(GMFGEN.getGenChildLabelNode(), GMFGEN.getGenNode_PrimaryDragEditPolicyQualifiedClassName());
		
		setMatcher(GMFGEN.getGenChildSideAffixedNode(), getGenNodeMatcher());
		preserveIfSet(GMFGEN.getGenChildSideAffixedNode(), GMFGEN.getGenNode_PrimaryDragEditPolicyQualifiedClassName());
		
		setMatcher(GMFGEN.getGenCompartment(), new ReflectiveMatcher(GMFGEN.getGenCompartment_Title()));
		preserveIfSet(GMFGEN.getGenCompartment(), GMFGEN.getGenCompartment_ListLayout());
		preserveIfSet(GMFGEN.getGenCompartment(), GMFGEN.getGenCompartment_CanCollapse());
		preserveIfSet(GMFGEN.getGenCompartment(), GMFGEN.getGenCompartment_HideIfEmpty());
		preserveIfSet(GMFGEN.getGenCompartment(), GMFGEN.getGenCompartment_NeedsTitle());
		//[155332]preserveIfNotByPattern(GMFGEN.getGenCompartment(), GMFGEN.getGenCommonBase_EditPartClassName(), ".*" + GenCommonBase.EDIT_PART_SUFFIX);
		
		//if parent node is matched, then viemap is matched automatically because it is [1] feature.
		//there are nothing to reconcile for viewmaps, all their properties are derived
		//we need this only to dig into viewmap attributes
		setMatcherForAllSubclasses(GMFGEN.getViewmap(), ALWAYS_MATCH);
		
		setMatcher(GMFGEN.getDefaultSizeAttributes(), ALWAYS_MATCH);
		setCopier(GMFGEN.getDefaultSizeAttributes(), Copier.COMPLETE_COPY);
		preserveIfSet(GMFGEN.getDefaultSizeAttributes(), GMFGEN.getDefaultSizeAttributes_Height());
		preserveIfSet(GMFGEN.getDefaultSizeAttributes(), GMFGEN.getDefaultSizeAttributes_Width());

		// provided GenCommonBase matched, custom behaviour should be kept as is
		setMatcher(GMFGEN.getCustomBehaviour(), ALWAYS_MATCH);
		setCopier(GMFGEN.getCustomBehaviour(), Copier.COMPLETE_COPY);
		
		setMatcher(GMFGEN.getMetamodelType(), ALWAYS_MATCH);
		preserveIfSet(GMFGEN.getMetamodelType(), GMFGEN.getElementType_DisplayName());
		preserveIfSet(GMFGEN.getMetamodelType(), GMFGEN.getElementType_DefinedExternally());

		setMatcher(GMFGEN.getSpecializationType(), ALWAYS_MATCH);
		preserveIfSet(GMFGEN.getSpecializationType(), GMFGEN.getElementType_DisplayName());
		preserveIfSet(GMFGEN.getSpecializationType(), GMFGEN.getElementType_DefinedExternally());

		setMatcher(GMFGEN.getGenPropertySheet(), ALWAYS_MATCH);
		preserveIfSet(GMFGEN.getGenPropertySheet(), GMFGEN.getGenPropertySheet_ReadOnly());
		preserveIfSet(GMFGEN.getGenPropertySheet(), GMFGEN.getGenPropertySheet_NeedsCaption());
		preserveIfSet(GMFGEN.getGenPropertySheet(), GMFGEN.getGenPropertySheet_PackageName());
		preserveIfSet(GMFGEN.getGenPropertySheet(), GMFGEN.getGenPropertySheet_LabelProviderClassName());

		setMatcherForAllSubclasses(GMFGEN.getGenPropertyTab(), new ReflectiveMatcher(GMFGEN.getGenPropertyTab_ID()));
		preserveIfSet(GMFGEN.getGenStandardPropertyTab(),GMFGEN.getGenPropertyTab_Label());

		preserveIfSet(GMFGEN.getGenCustomPropertyTab(),GMFGEN.getGenPropertyTab_Label());
		preserveIfSet(GMFGEN.getGenCustomPropertyTab(),GMFGEN.getGenCustomPropertyTab_ClassName());
	}

	private Matcher getGenNodeMatcher(){
		//FIXME: use new AttributeMatcher("domainMetaClass")
		return new ReflectiveMatcher(GMFGenPackage.eINSTANCE.getGenNode(), new ReflectiveMatcher.Reflector(){
			public Object reflect(EObject target) {
				GenNode genNode = (GenNode)target;
				return genNode.getDomainMetaClass();
			}
		});
	}
	
	private void preserveIfSet(EClass eClass, EAttribute feature){
		//FIXME: only attributes for now, allow references
		addDecisionMaker(eClass, new DefaultDecisionMaker(feature));
	}
	
	private void preserveIfNotByPattern(EClass eClass, EAttribute feature, String pattern){
		addDecisionMaker(eClass, new StringPatternDecisionMaker(pattern, feature));
	}
	
}
@


1.24
log
@[168493] mgolubev - Reconcile GenNode#primaryDragEditPolicyQualifiedClassName
@
text
@@


1.23
log
@[165474] [Validation] LIVE mode audits violation should provide UI feedback
@
text
@d77 1
d83 4
a87 3
		//for now nothing to reconcile here
		//we need to match this only to dig into the attributes 
		setMatcher(GMFGEN.getGenChildLabelNode(), getGenNodeMatcher());
d89 1
@


1.22
log
@refactor common attribute (canonical ep name) into shared superclass, get ready to avoid generation of useless canonicalep classes
@
text
@d64 1
@


1.21
log
@[119465] support for diagram partitioning - started to reorganize the way we store behaviours in the genmodel - let them be reused. OpenDiagram as an example of new way to add behaviours.
@
text
@d73 1
a73 1
		preserveIfNotByPattern(GMFGEN.getGenTopLevelNode(), GMFGEN.getGenChildContainer_CanonicalEditPolicyClassName(), ".*" + GenChildContainer.CANONICAL_EDIT_POLICY_SUFFIX);
d78 1
a78 1
		preserveIfNotByPattern(GMFGEN.getGenChildNode(), GMFGEN.getGenChildContainer_CanonicalEditPolicyClassName(), ".*" + GenChildContainer.CANONICAL_EDIT_POLICY_SUFFIX);
@


1.20
log
@reconcile needsCaption, class and package name of the sheet (as promised at the wiki)
@
text
@a18 1
//[155332]import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;
a20 1
import org.eclipse.gmf.internal.common.reconcile.DecisionMaker;
d104 3
a106 9
		addDecisionMaker(GMFGEN.getGenDiagram(), new DecisionMaker.ALWAYS_OLD(GMFGEN.getGenCommonBase_CustomBehaviour()));
		addDecisionMaker(GMFGEN.getGenTopLevelNode(), new DecisionMaker.ALWAYS_OLD(GMFGEN.getGenCommonBase_CustomBehaviour()));
		addDecisionMaker(GMFGEN.getGenChildNode(), new DecisionMaker.ALWAYS_OLD(GMFGEN.getGenCommonBase_CustomBehaviour()));
		addDecisionMaker(GMFGEN.getGenChildLabelNode(), new DecisionMaker.ALWAYS_OLD(GMFGEN.getGenCommonBase_CustomBehaviour()));
		addDecisionMaker(GMFGEN.getGenCompartment(), new DecisionMaker.ALWAYS_OLD(GMFGEN.getGenCommonBase_CustomBehaviour()));
		addDecisionMaker(GMFGEN.getGenLink(), new DecisionMaker.ALWAYS_OLD(GMFGEN.getGenCommonBase_CustomBehaviour()));
		addDecisionMaker(GMFGEN.getGenLinkLabel(), new DecisionMaker.ALWAYS_OLD(GMFGEN.getGenCommonBase_CustomBehaviour()));
		addDecisionMaker(GMFGEN.getGenNodeLabel(), new DecisionMaker.ALWAYS_OLD(GMFGEN.getGenCommonBase_CustomBehaviour()));
		addDecisionMaker(GMFGEN.getGenExternalNodeLabel(), new DecisionMaker.ALWAYS_OLD(GMFGEN.getGenCommonBase_CustomBehaviour()));
@


1.19
log
@reconcile few attributes of newly added property sheet support
@
text
@d126 3
@


1.18
log
@[155258] mgolubev - reconcile attributes of ElementType
@
text
@d123 9
a131 1
	
@


1.17
log
@[124826] mgolubev - Support nodes with border items
@
text
@d19 1
d77 1
d82 1
d94 1
d115 9
@


1.16
log
@[153296] mgolubev - bug in GMFGenConfig leads to failing tests
@
text
@d84 1
@


1.15
log
@preserve custom behaviour
@
text
@d81 4
@


1.14
log
@preserve domain model file extension
@
text
@d21 1
d96 10
d107 1
a107 1
	
@


1.13
log
@[mgolubev] #148634 Reconcile Creation Wizard Category ID
@
text
@d37 1
@


1.12
log
@[mgolubev] #146026 [Reconciler] User defined gmfgen Viewmap attributes should be preserved
@
text
@d60 1
@


1.11
log
@#144720 Add provider <Priority> attribute in gmfgen model for Validation Decorator provider
@
text
@d20 1
d61 8
a82 7
				
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationEnabled());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationDecorators());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationDecoratorProviderClassName());		
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationDecoratorProviderPriority());		
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationProviderClassName());		
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationProviderPriority());
d84 9
a92 2
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_MetricProviderPriority());		
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_MetricProviderClassName());		
@


1.10
log
@[mgolubev] #144497 Preserve user-defined values for .gmfgen's dynamicTemplates, templateDirectory, creationWizardIconPath and iconPath options & #144304 Custom plugin name defined in gmfgen model is not retained on regeneration from gmfmap model
@
text
@d77 2
@


1.9
log
@[mgolubev] #144203 Reconcile custom model id
@
text
@d39 2
d50 5
d58 2
@


1.8
log
@[mgolubev] #136811 Preserve shortcut-related properties on reconcile
@
text
@d38 1
@


1.7
log
@#142778 Merge validation related properties when re-generating gmfgen model
@
text
@d48 2
@


1.6
log
@reconcile plugin name
@
text
@d62 8
@


1.5
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@d41 1
@


1.4
log
@[mgolubev] #134094 [Reconcile] Keep custom id, and printingEnabled property
@
text
@a48 1
		preserveIfSet(GMFGEN.getGenTopLevelNode(), GMFGEN.getGenChildContainer_ListLayout());
a52 1
		preserveIfSet(GMFGEN.getGenChildNode(), GMFGEN.getGenChildContainer_ListLayout());
d57 1
a57 1
		preserveIfSet(GMFGEN.getGenCompartment(), GMFGEN.getGenChildContainer_ListLayout());
@


1.3
log
@[mgolubev] #133472 Reconcile GenCompartment boolean properties
@
text
@d40 1
d44 1
@


1.2
log
@[mgolubev] #131762 preserve GenChildContainer properties
@
text
@d55 6
@


1.1
log
@[mgolubev] #131355 Preserve modified gmfgen attributes which initialy had some default values
@
text
@a11 1

d18 2
d23 2
d30 1
a32 2
		final GMFGenPackage GMFGEN = GMFGenPackage.eINSTANCE;

d42 23
d72 3
a74 5
	private static final Matcher ALWAYS_MATCH = new Matcher(){
		public boolean match(EObject current, EObject old) {
			return current.eClass().equals(old.eClass());
		}
	};
@

