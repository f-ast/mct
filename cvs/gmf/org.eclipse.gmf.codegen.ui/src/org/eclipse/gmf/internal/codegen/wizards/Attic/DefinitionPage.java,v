head	1.10;
access;
symbols
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	I20060227-1730:1.9
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2006.03.01.12.46.04;	author dstadnik;	state dead;
branches;
next	1.9;

1.9
date	2006.02.24.21.22.14;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.24.13.51.43;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.24.10.38.12;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.23.20.11.23;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.23.15.46.48;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.13.16.32.32;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.13.15.05.37;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.13.13.26.42;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.13.10.12.48;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.10
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@/*
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.wizards;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.provider.EcoreItemProviderAdapterFactory;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.gmf.internal.codegen.CodeGenUIPlugin;
import org.eclipse.gmf.internal.codegen.resolver.NodePattern;
import org.eclipse.gmf.internal.codegen.resolver.Resolution;
import org.eclipse.gmf.internal.codegen.resolver.ResolvedItem;
import org.eclipse.gmf.internal.codegen.resolver.StructureBuilder;
import org.eclipse.gmf.internal.codegen.resolver.TypeLinkPattern;
import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.jface.viewers.CheckboxCellEditor;
import org.eclipse.jface.viewers.ColumnPixelData;
import org.eclipse.jface.viewers.ColumnWeightData;
import org.eclipse.jface.viewers.ICellModifier;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.TableLayout;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.StackLayout;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeColumn;
import org.eclipse.swt.widgets.TreeItem;

public class DefinitionPage extends WizardPage {

	private StructureBuilder structureBuilder;

	private DomainModelSource domainModelSource;

	private boolean allowDiagramElementSelection;

	private Composite innerPlate;

	private StackLayout innerPlateLayout;

	private Combo diagramElementSelector;

	private Button excludeContainedNodesChoice;

	private Button excludeLinksChoice;

	private TreeViewer viewer;

	private Text errorDetails;

	public DefinitionPage(String pageId, StructureBuilder structureBuilder, DomainModelSource domainModelSource, boolean allowDiagramElementSelection) {
		super(pageId);
		this.structureBuilder = structureBuilder;
		this.domainModelSource = domainModelSource;
		this.allowDiagramElementSelection = allowDiagramElementSelection;
	}

	protected GridData createFillBothGridData(int span) {
		GridData data = new GridData();
		data.verticalAlignment = GridData.FILL;
		data.grabExcessVerticalSpace = true;
		data.horizontalAlignment = GridData.FILL;
		data.grabExcessHorizontalSpace = true;
		data.horizontalSpan = span;
		return data;
	}

	protected GridData createFillHorzGridData(int span) {
		GridData data = new GridData();
		data.horizontalAlignment = GridData.FILL;
		data.grabExcessHorizontalSpace = true;
		data.horizontalSpan = span;
		return data;
	}

	public void createControl(Composite parent) {
		innerPlate = new Composite(parent, SWT.NONE);
		innerPlate.setLayoutData(createFillBothGridData(1));
		innerPlate.setLayout(innerPlateLayout = new StackLayout());
		innerPlateLayout.topControl = createDomainModelGroup(innerPlate);
		createErrorGroup(innerPlate);
		setPageComplete(validatePage());
		setControl(innerPlate);
	}

	private Composite createDomainModelGroup(Composite parent) {
		Composite plate = new Composite(parent, SWT.NONE);
		GridLayout layout = new GridLayout(2, false);
		layout.verticalSpacing = 12;
		plate.setLayout(layout);
		if (allowDiagramElementSelection) {
			Label diagramElementLabel = new Label(plate, SWT.NONE);
			diagramElementLabel.setText("Diagram element:");
			diagramElementLabel.setLayoutData(new GridData());
			diagramElementSelector = new Combo(plate, SWT.DROP_DOWN);
			diagramElementSelector.setLayoutData(createFillHorzGridData(1));
			diagramElementSelector.addSelectionListener(new SelectionListener() {

				public void widgetSelected(SelectionEvent e) {
					// TODO : validate selection
				}

				public void widgetDefaultSelected(SelectionEvent e) {
				}
			});
			excludeContainedNodesChoice = createChoice(plate, "Exclude types that are resolved as nodes that have a container");
			excludeLinksChoice = createChoice(plate, "Exclude types that are resolved as links");
		}
		Label domainModelElementsLabel = new Label(plate, SWT.NONE);
		domainModelElementsLabel.setText("Domain model elements to process:");
		domainModelElementsLabel.setLayoutData(createFillHorzGridData(2));
		viewer = createViewer(plate);
		viewer.getControl().setLayoutData(createFillBothGridData(2));
		return plate;
	}

	private Button createChoice(Composite plate, String text) {
		Label dummy = new Label(plate, SWT.NONE);
		dummy.setLayoutData(new GridData());
		Button choice = new Button(plate, SWT.CHECK);
		choice.setText(text);
		choice.setLayoutData(createFillHorzGridData(1));
		choice.addSelectionListener(new SelectionListener() {

			public void widgetSelected(SelectionEvent e) {
				updateDiagramElementSelector();
			}

			public void widgetDefaultSelected(SelectionEvent e) {
			}
		});
		return choice;
	}

	private Composite createErrorGroup(Composite parent) {
		Composite plate = new Composite(parent, SWT.NONE);
		GridLayout layout = new GridLayout();
		layout.verticalSpacing = 12;
		plate.setLayout(layout);
		Label errorDescription = new Label(plate, SWT.NONE);
		errorDescription.setText("Error loading domain model:");
		errorDescription.setLayoutData(createFillHorzGridData(1));
		errorDetails = new Text(plate, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
		errorDetails.setLayoutData(createFillBothGridData(1));
		return plate;
	}

	protected TreeViewer createViewer(Composite parent) {
		Tree tree = new Tree(parent, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER | SWT.FULL_SELECTION);
		TableLayout layout = new TableLayout();
		tree.setLayout(layout);
		tree.setHeaderVisible(true);
		// tree.setLinesVisible(true);

		TreeColumn elementColumn = new TreeColumn(tree, SWT.LEFT);
		elementColumn.setText("Element");
		elementColumn.setResizable(true);
		layout.addColumnData(new ColumnWeightData(1, 32, true));

		addResolutionColumn(tree, Resolution.NODE, CodeGenUIPlugin.NODE_ICON);
		addResolutionColumn(tree, Resolution.LINK, CodeGenUIPlugin.LINK_ICON);
		addResolutionColumn(tree, Resolution.LABEL, CodeGenUIPlugin.LABEL_ICON);

		final TreeViewer viewer = new TreeViewer(tree);
		viewer.setContentProvider(new ResolverContentProvider());
		AdapterFactory adapterFactory = new EcoreItemProviderAdapterFactory();
		viewer.setLabelProvider(new ResolverLabelProvider(new AdapterFactoryLabelProvider(adapterFactory)));

		viewer.setColumnProperties(new String[] { "no", Resolution.NODE.getName(), Resolution.LINK.getName(), Resolution.LABEL.getName() });
		viewer.setCellEditors(new CellEditor[] { null, new CheckboxCellEditor(), new CheckboxCellEditor(), new CheckboxCellEditor() });
		viewer.setCellModifier(new ICellModifier() {

			public Object getValue(Object element, String property) {
				ResolvedItem item = (ResolvedItem) element;
				return Boolean.valueOf(item.getResolution() == Resolution.getByName(property));
			}

			public boolean canModify(Object element, String property) {
				return true;
			}

			public void modify(Object element, String property, Object value) {
				ResolvedItem item = (ResolvedItem) ((TreeItem) element).getData();
				Resolution resolution = Resolution.getByName(property);
				if (!item.isPossibleResolution(resolution)) {
					return;
				}
				item.setResolution(((Boolean) value).booleanValue() ? resolution : null);
				viewer.update(item, new String[] { Resolution.NODE.getName(), Resolution.LINK.getName(), Resolution.LABEL.getName() });
			}
		});

		return viewer;
	}

	protected TreeColumn addResolutionColumn(Tree tree, Resolution resolution, String iconId) {
		TreeColumn column = new TreeColumn(tree, SWT.CENTER);
		// column.setText(resolution.getName());
		column.setImage(CodeGenUIPlugin.getDefault().getImageRegistry().get(iconId));
		column.setResizable(false);
		((TableLayout) tree.getLayout()).addColumnData(new ColumnPixelData(18, false, true));
		return column;
	}

	protected boolean validatePage() {
		return true;
	}

	public void setVisible(boolean visible) {
		super.setVisible(visible);
		if (visible && domainModelSource.update()) {
			EPackage contents = domainModelSource.getContents();
			viewer.setInput(contents == null ? null : structureBuilder.process(contents));
			viewer.expandAll();
			viewer.getControl().pack();
			if (contents != null) {
				updateDiagramElementSelector();
				setPageComplete(validatePage());
				showDomainModelControls();
			} else {
				if (domainModelSource.getErrorStatus() == null) {
					updateDiagramElementSelector();
					setPageComplete(true);
					showDomainModelControls();
				} else {
					setPageComplete(false);
					try {
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						PrintStream ps = new PrintStream(baos);
						domainModelSource.getErrorStatus().getException().printStackTrace(ps);
						ps.flush();
						baos.flush();
						errorDetails.setText(baos.toString());
					} catch (IOException e) {
						// never happens
					}
					showErrorDetailsControls();
				}
			}
			innerPlate.layout(true, true);
		}
	}

	protected void showDomainModelControls() {
		innerPlateLayout.topControl = innerPlate.getChildren()[0];
	}

	protected void showErrorDetailsControls() {
		innerPlateLayout.topControl = innerPlate.getChildren()[1];
	}

	public ResolvedItem getModel() {
		return (ResolvedItem) viewer.getInput();
	}

	public ResolvedItem getDiagramElement() {
		if (!allowDiagramElementSelection) {
			return null;
		}
		return findResolvedItemByTypeName(getModel(), diagramElementSelector.getText());
	}

	private ResolvedItem findResolvedItemByTypeName(ResolvedItem item, String typeName) {
		if (item.getDomainRef() instanceof EClass && ((EClass) item.getDomainRef()).getName().equals(typeName)) {
			return item;
		}
		for (Iterator it = item.getChildren().iterator(); it.hasNext();) {
			ResolvedItem result = findResolvedItemByTypeName((ResolvedItem) it.next(), typeName);
			if (result != null) {
				return result;
			}
		}
		return null;
	}

	private void updateDiagramElementSelector() {
		if (!allowDiagramElementSelection) {
			return;
		}
		Set types = new TreeSet(new Comparator() {

			public int compare(Object arg0, Object arg1) {
				EClass type0 = (EClass) ((ResolvedItem) arg0).getDomainRef();
				EClass type1 = (EClass) ((ResolvedItem) arg1).getDomainRef();
				return type0.getName().compareToIgnoreCase(type1.getName());
			}
		});
		if (viewer.getInput() != null) {
			collectResolvedDomainTypes(types, (ResolvedItem) viewer.getInput());
		}
		String contents = diagramElementSelector.getText();
		diagramElementSelector.removeAll();
		for (Iterator it = types.iterator(); it.hasNext();) {
			EClass type = (EClass) ((ResolvedItem) it.next()).getDomainRef();
			diagramElementSelector.add(type.getName());
			if (contents.equals(type.getName())) {
				diagramElementSelector.setText(contents);
			}
		}
		if (diagramElementSelector.getText().length() == 0 && diagramElementSelector.getItemCount() > 0) {
			diagramElementSelector.setText(diagramElementSelector.getItem(0));
		}
		if (!contents.equals(diagramElementSelector.getText())) {
			// TODO : update resolution tree
		}
	}

	private void collectResolvedDomainTypes(Collection types, ResolvedItem item) {
		if (item.getDomainRef() instanceof EClass) {
			boolean ignore = false;
			if (excludeContainedNodesChoice.getSelection()) {
				ignore |= item.getPattern() instanceof NodePattern;
			}
			if (excludeLinksChoice.getSelection()) {
				ignore |= item.getPattern() instanceof TypeLinkPattern;
			}
			if (!ignore) {
				types.add(item);
			}
		}
		for (Iterator it = item.getChildren().iterator(); it.hasNext();) {
			collectResolvedDomainTypes(types, (ResolvedItem) it.next());
		}
	}

	protected static class ResolverContentProvider implements ITreeContentProvider {

		public void dispose() {
		}

		public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		}

		public Object getParent(Object element) {
			return ((ResolvedItem) element).getParent();
		}

		public Object[] getChildren(Object parentElement) {
			List children = ((ResolvedItem) parentElement).getChildren();
			return children.toArray();
		}

		public boolean hasChildren(Object element) {
			List children = ((ResolvedItem) element).getChildren();
			return !children.isEmpty();
		}

		public Object[] getElements(Object inputElement) {
			return getChildren(inputElement);
		}
	}

	protected static class ResolverLabelProvider extends LabelProvider implements ITableLabelProvider {

		private ILabelProvider domainLabelProvider;

		public ResolverLabelProvider(ILabelProvider domainLabelProvider) {
			this.domainLabelProvider = domainLabelProvider;
		}

		public String getColumnText(Object element, int columnIndex) {
			if (columnIndex == 0) {
				Object domainRef = ((ResolvedItem) element).getDomainRef();
				return domainLabelProvider.getText(domainRef);
			} else {
				return null;
			}
		}

		public Image getColumnImage(Object element, int columnIndex) {
			if (columnIndex == 0) {
				Object domainRef = ((ResolvedItem) element).getDomainRef();
				return domainLabelProvider.getImage(domainRef);
			}
			ResolvedItem item = (ResolvedItem) element;
			Image checkedIcon = CodeGenUIPlugin.getDefault().getImageRegistry().get(CodeGenUIPlugin.CHECKED_ICON);
			Image uncheckedIcon = CodeGenUIPlugin.getDefault().getImageRegistry().get(CodeGenUIPlugin.UNCHECKED_ICON);
			if (columnIndex == 1) {
				if (!item.isPossibleResolution(Resolution.NODE)) {
					return null;
				}
				return Resolution.NODE == item.getResolution() ? checkedIcon : uncheckedIcon;
			} else if (columnIndex == 2) {
				if (!item.isPossibleResolution(Resolution.LINK)) {
					return null;
				}
				return Resolution.LINK == item.getResolution() ? checkedIcon : uncheckedIcon;
			} else if (columnIndex == 3) {
				if (!item.isPossibleResolution(Resolution.LABEL)) {
					return null;
				}
				return Resolution.LABEL == item.getResolution() ? checkedIcon : uncheckedIcon;
			}
			return null;
		}
	}
}
@


1.9
log
@#129322 Allow to select domain model element on definition page that will be used as diagram canvas element
@
text
@@


1.8
log
@#129323 Show details of error that prevented domain model file from being loaded
@
text
@d17 3
d21 2
d25 1
d30 1
d34 1
d50 2
d55 2
d70 1
a70 3
	protected Label msg;

	protected TreeViewer viewer;
d76 8
d86 1
a86 1
	public DefinitionPage(String pageId, StructureBuilder structureBuilder, DomainModelSource domainModelSource) {
d90 19
d112 2
a113 29
		Composite plate = new Composite(parent, SWT.NONE);
		{
			GridLayout layout = new GridLayout();
			layout.verticalSpacing = 12;
			plate.setLayout(layout);

			GridData data = new GridData();
			data.verticalAlignment = GridData.FILL;
			data.grabExcessVerticalSpace = true;
			data.horizontalAlignment = GridData.FILL;
			data.grabExcessHorizontalSpace = true;
			plate.setLayoutData(data);
		}
		msg = new Label(plate, SWT.NONE);
		{
			GridData data = new GridData();
			data.horizontalAlignment = GridData.FILL;
			data.grabExcessHorizontalSpace = true;
			msg.setLayoutData(data);
		}
		innerPlate = new Composite(plate, SWT.NONE);
		{
			GridData data = new GridData();
			data.verticalAlignment = GridData.FILL;
			data.grabExcessVerticalSpace = true;
			data.horizontalAlignment = GridData.FILL;
			data.grabExcessHorizontalSpace = true;
			innerPlate.setLayoutData(data);
		}
d115 2
a116 4
		viewer = createViewer(innerPlate);
		innerPlateLayout.topControl = viewer.getControl();
		errorDetails = new Text(innerPlate, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
		createAdditionalControls(plate);
d118 63
a180 1
		setControl(plate);
a239 3
	protected void createAdditionalControls(Composite parent) {
	}

a250 1
			msg.setText(domainModelSource.getStatus());
d252 1
d254 1
a254 1
				innerPlateLayout.topControl = viewer.getControl();
d257 1
d259 1
a259 1
					innerPlateLayout.topControl = viewer.getControl();
d272 1
a272 1
					innerPlateLayout.topControl = errorDetails;
d275 1
a275 1
			innerPlate.layout(true);
d279 8
d291 70
@


1.7
log
@use icons for node/link/label checkbox columns
@
text
@d14 3
d41 1
d47 1
d62 6
d75 1
a75 1
		Composite composite = new Composite(parent, SWT.NONE);
d79 1
a79 1
			composite.setLayout(layout);
d86 1
a86 1
			composite.setLayoutData(data);
d88 1
a88 1
		msg = new Label(composite, SWT.NONE);
d95 1
a95 1
		viewer = createViewer(composite);
d102 1
a102 1
			viewer.getControl().setLayoutData(data);
d104 5
a108 1
		createAdditionalControls(composite);
d110 1
a110 1
		setControl(composite);
d114 1
a114 1
		Tree tree = new Tree(parent, SWT.SINGLE | SWT.V_SCROLL | SWT.BORDER | SWT.FULL_SELECTION);
d123 1
a123 1
		layout.addColumnData(new ColumnWeightData(5, 32, true));
d183 1
d187 1
d189 17
a205 1
				setPageComplete(domainModelSource.getError() == null);
d207 1
@


1.6
log
@make definition page independent from domain model selection page
@
text
@d26 1
d103 1
a103 1
		tree.setLinesVisible(true);
d110 3
a112 3
		addResolutionColumn(tree, Resolution.NODE);
		addResolutionColumn(tree, Resolution.LINK);
		addResolutionColumn(tree, Resolution.LABEL);
d146 6
a151 5
	protected TreeColumn addResolutionColumn(Tree tree, Resolution resolution) {
		TreeColumn column = new TreeColumn(tree, SWT.LEFT);
		column.setText(resolution.getName());
		column.setResizable(true);
		((TableLayout) tree.getLayout()).addColumnData(new ColumnWeightData(1, 16, true));
@


1.5
log
@#126532 Allow to manually resolve domain entity into node or link in wizards that infer tooling and graph definitions from domain model
@
text
@a15 1
import org.eclipse.core.resources.IFile;
a16 1
import org.eclipse.emf.common.util.URI;
a18 3
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
a47 2
	protected static final String ELEMENT_PROPERTY = "element";

d50 1
a50 3
	private DomainModelSelectionPage domainModelSelectionPage;

	private IFile file;
d56 1
a56 1
	public DefinitionPage(String pageId, StructureBuilder structureBuilder, DomainModelSelectionPage domainModelSelectionPage) {
d59 1
a59 1
		this.domainModelSelectionPage = domainModelSelectionPage;
a65 1
			layout.numColumns = 1;
d118 1
a118 1
		viewer.setColumnProperties(new String[] { ELEMENT_PROPERTY, Resolution.NODE.getName(), Resolution.LINK.getName(), Resolution.LABEL.getName() });
d162 3
a164 20
		IFile newFile = domainModelSelectionPage.getFile();
		if (visible && (newFile == null || newFile != file)) {
			file = newFile;
			msg.setText(reloadDomainModel());
		}
	}

	protected String reloadDomainModel() {
		if (file == null) {
			viewer.setInput(null);
			setPageComplete(true);
			return "Domain model file is not specified; empty model will be created.";
		}
		EPackage contents;
		try {
			URI uri = URI.createPlatformResourceURI(file.getFullPath().toString());
			ResourceSet rs = new ResourceSetImpl();
			Resource r = rs.getResource(uri, true);
			contents = (EPackage) r.getContents().get(0);
			viewer.setInput(structureBuilder.process(contents));
d166 6
a171 6
			setPageComplete(validatePage());
			return "Domain model elements to process:";
		} catch (Exception e) {
			viewer.setInput(null);
			setPageComplete(false);
			return "Error loading domain model file.";
d175 2
a176 2
	public final TreeViewer getViewer() {
		return viewer;
@


1.4
log
@support ref-based links with multiplicity more then one
@
text
@d10 1
a10 1
 *    dstadnik - initial API and implementation
d14 2
a18 1
import org.eclipse.emf.ecore.EClass;
a19 1
import org.eclipse.emf.ecore.EReference;
d25 15
a39 6
import org.eclipse.gmf.internal.codegen.resolver.NodePattern;
import org.eclipse.gmf.internal.codegen.resolver.StructureResolver;
import org.eclipse.gmf.internal.codegen.resolver.TypeLinkPattern;
import org.eclipse.gmf.internal.codegen.resolver.TypePattern;
import org.eclipse.jface.viewers.CheckboxTreeViewer;
import org.eclipse.jface.viewers.StructuredViewer;
d42 1
d47 3
d53 3
a55 1
	private StructureResolver resolver;
d63 1
a63 1
	protected StructuredViewer viewer;
d65 1
a65 1
	public DefinitionPage(String pageId, StructureResolver resolver, DomainModelSelectionPage domainModelSelectionPage) {
d67 1
a67 1
		this.resolver = resolver;
d83 1
d107 18
a124 2
	protected StructuredViewer createViewer(Composite parent) {
		StructuredViewer viewer = new CheckboxTreeViewer(parent);
d126 10
a135 1
		viewer.setLabelProvider(new AdapterFactoryLabelProvider(adapterFactory) {
d137 9
a145 11
			public String getText(Object object) {
				String label = super.getText(object);
				if (object instanceof EClass) {
					TypePattern pattern = resolver.resolve((EClass) object);
					if (pattern instanceof NodePattern) {
						label += " : Node";
					} else if (pattern instanceof TypeLinkPattern) {
						label += " : Link";
					}
				} else if (object instanceof EReference) {
					label += " : Link";
d147 2
a148 1
				return label;
a150 1
		viewer.setContentProvider(new FilteredAdapterFactoryContentProvider(adapterFactory) {
a151 4
			protected boolean isShown(Object element) {
				return isDomainElementShown(element);
			}
		});
d155 6
a160 21
	protected boolean isDomainElementShown(Object element) {
		if (element instanceof EPackage) {
			return true;
		} else if (element instanceof EClass) {
			TypePattern pattern = resolver.resolve((EClass) element);
			if (pattern != null) {
				return true;
			}
		} else if (element instanceof EReference) {
			EReference ref = (EReference) element;
			TypePattern pattern = resolver.resolve(ref.getEContainingClass());
			if (pattern instanceof NodePattern) {
				EReference[] refLinks = ((NodePattern) pattern).getRefLinks();
				for (int i = 0; i < refLinks.length; i++) {
					if (refLinks[i] == ref) {
						return true;
					}
				}
			}
		}
		return false;
d191 2
a192 2
			viewer.setInput(contents);
			processNewDomainModel(contents);
d202 74
a275 1
	protected void processNewDomainModel(EPackage contents) {
@


1.3
log
@resolve reference-based links
@
text
@d124 4
a127 1
			return true;
@


1.2
log
@#112297 add structure resolver
@
text
@d19 1
d105 2
d125 11
@


1.1
log
@#123587 wizard for tooling definition
@
text
@d17 1
d24 4
d39 2
d49 1
a49 1
	public DefinitionPage(String pageId, DomainModelSelectionPage domainModelSelectionPage) {
d51 1
d93 15
a107 1
		viewer.setLabelProvider(new AdapterFactoryLabelProvider(adapterFactory));
d118 6
a123 1
		return true;
@

