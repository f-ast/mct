head	1.18;
access;
symbols
	v20080722-1827:1.18
	v20080716-1642:1.18
	R2_1_maintenance:1.18.0.2
	Root_R2_1_maintenance:1.18
	R2_1_0:1.18
	v20080512-1200:1.18
	v20080417-1610:1.18
	v20080322-0000:1.18
	v20080222-1200:1.17
	v20071108-0000:1.17
	v20070809-0000:1.17
	R2_0_maintenance:1.17.0.2
	R2_0:1.17
	R4_20:1.17
	v20070621-0000:1.17
	RC3_20:1.16
	v20070605-1400:1.16
	v20070601-1400:1.16
	v20070525-1500:1.16
	v20070520-1200:1.16
	v20070420-1000:1.16
	v20070405-2000:1.16
	v20070330-1300:1.16
	v20070228-2000:1.16
	v20070208-1800:1.16
	M4_20:1.16
	v20061222-1800:1.16
	v20061214-0000:1.16
	M3_20:1.16
	v20061117-0800:1.16
	v20061013-1330:1.16
	v20060919-0800:1.15.2.1
	M1_20:1.16
	v20060904-1500:1.16
	v20060713-1700:1.15
	R1_0_maintenance:1.15.0.2
	R1_0:1.15
	v20060627-1200:1.15
	v20060626-1420:1.15
	v20060616-1200:1.15
	v20060609-1400:1.15
	v20060531-1730:1.15
	v20060530-1930:1.15
	v20060526-1200:1.15
	v20060519-1300:1.15
	v20060519-0800:1.14
	I20060505-1400:1.14
	I20060424-0500:1.14
	I20060424-0300:1.14
	M6_10:1.14
	I20060407-1200:1.14
	I20060331-1000:1.14
	I20060324-0300:1.14
	I20060317-1300:1.14
	I20060317-1200:1.14
	I20060316-1300:1.14
	I20060309-1300:1.13
	M5_10:1.13
	S20060303-1600:1.13
	I20060227-1730:1.11
	I20060216-1945:1.9
	I20060210-1715:1.9
	I20060209-1815:1.9
	I20060203-0830:1.9
	I20060129-1145:1.9
	I20060127-0900:1.9
	I20060120-1530:1.9
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051201-1800:1.6
	M3_10:1.6
	I20051118-1245:1.6
	I20051111-1800:1.3
	I20051106-0900:1.1
	v20051030:1.1
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.18
date	2008.02.28.20.25.39;	author atikhomirov;	state Exp;
branches;
next	1.17;
commitid	4dd047c718c34567;

1.17
date	2007.06.21.14.06.07;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	14b5467a85ce4567;

1.16
date	2006.08.28.17.20.16;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.19.13.09.29;	author atikhomirov;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2006.03.15.15.44.17;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.01.14.20.27;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.01.12.46.04;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.24.10.38.12;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.23.15.46.48;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.18.16.22.59;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.18.15.37.07;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.18.11.39.51;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.18.16.42.02;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.18.11.48.36;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.14.18.02.18;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.11.20.08.25;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.09.20.57.16;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.29.07;	author atikhomirov;	state Exp;
branches;
next	;

1.15.2.1
date	2006.09.13.23.07.23;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.18
log
@[150177] phase III, bring dynamic access facility into the game.
@
text
@/*
 * Copyright (c) 2005, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen;

import java.text.MessageFormat;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Status;
import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
import org.eclipse.gmf.codegen.util.CodegenEmitters;
import org.eclipse.gmf.codegen.util.EmitterSource;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

public class CodeGenUIPlugin extends AbstractUIPlugin {

	private static CodeGenUIPlugin plugin;

	private EmitterSource<GenEditorGenerator, CodegenEmitters> emitterSource;

	public CodeGenUIPlugin() {
		plugin = this;
	}

	public void stop(BundleContext context) throws Exception {
		if (emitterSource != null) {
			emitterSource.dispose();
			emitterSource = null;
		}
		super.stop(context);
		plugin = null;
	}

	public static CodeGenUIPlugin getDefault() {
		return plugin;
	}

	public static String getBundleString(String key) {
		return Platform.getResourceBundle(getDefault().getBundle()).getString(key);
	}

	public static String getBundleString(String key, Object[] args) {
		String val = getBundleString(key);
		if (val == null) {
			return key;
		}
		return MessageFormat.format(val, args);
	}

	public static IStatus createStatus(int statusCode, String message, Exception ex) {
		return new Status(statusCode, getPluginID(), 0, message, ex);
	}

	public static IStatus createError(String message, Exception ex) {
		return createStatus(IStatus.ERROR, message, ex);
	}

	public static IStatus createWarning(String message) {
		return createStatus(IStatus.WARNING, message, null);
	}

	public static IStatus createInfo(String message) {
		return createStatus(IStatus.INFO, message, null);
	}

	public static String getPluginID() {
		return getDefault().getBundle().getSymbolicName();
	}

	public static boolean needsReconcile() {
		return !Boolean.FALSE.toString().equals(Platform.getDebugOption(getPluginID() + "/reconcile"));
	}

	public CodegenEmitters getEmitters(GenEditorGenerator genModel) {
		if (emitterSource == null) {
			emitterSource = new EmitterSource<GenEditorGenerator, CodegenEmitters>() {
				@@Override
				protected CodegenEmitters newEmitters(GenEditorGenerator genModel) {
					return new CodegenEmitters(!genModel.isDynamicTemplates(), genModel.getTemplateDirectory(), genModel.getModelAccess() != null);
				}
			};
		}
		return emitterSource.getEmitters(genModel, genModel.isDynamicTemplates());
	}
}
@


1.17
log
@fix copyright years
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
d89 1
a89 1
					return new CodegenEmitters(!genModel.isDynamicTemplates(), genModel.getTemplateDirectory());
@


1.16
log
@caching behavior extracted to keep separate from *generation iterator* functionality
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
@


1.15
log
@better validation error reporting
@
text
@d19 3
d29 2
d36 4
d83 12
@


1.15.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@


1.14
log
@allow to omit reconcile step
@
text
@a70 21
	public static String formatMessage(String bundleStringKey, IStatus status) {
		if (status.isMultiStatus()) {
			IStatus[] children = status.getChildren();
			StringBuffer sb = new StringBuffer();
			// don't care about too nested statuses just because will switch to
			// jobs soon, with
			// required support already in place
			for (int i = 0; i < children.length && i < 3; i++) {
				sb.append(children[i].getMessage());
				sb.append('\n');
				sb.append('\n');
			}
			if (children.length >= 3) {
				sb.append("...");
			}
			return CodeGenUIPlugin.getBundleString(bundleStringKey, new Object[] { sb.toString() });
		} else {
			return CodeGenUIPlugin.getBundleString(bundleStringKey, new Object[] { status.getMessage() });
		}
	}

@


1.13
log
@#129930 move dashboard in separate plugin
@
text
@d91 4
@


1.12
log
@#129892 Move graphdef and tooldef wizards from codegen.ui to bridge.ui plugin
@
text
@a18 2
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.ImageRegistry;
a23 14
	public static final String GMF_LOGO_IMAGE = "/icons/full/logo_banner.png";

	public static final String SYNC_ICON = "/icons/full/synced.gif";

	public static final String GDM_ICON = "/icons/full/obj16/GMFGraphModelFile.gif";

	public static final String DM_ICON = "/icons/full/obj16/EcoreModelFile.gif";

	public static final String TDM_ICON = "/icons/full/obj16/GMFToolModelFile.gif";

	public static final String MM_ICON = "/icons/full/obj16/GMFMapModelFile.gif";

	public static final String GM_ICON = "/icons/full/obj16/GMFGenModelFile.gif";

a38 21
	protected void initializeImageRegistry(ImageRegistry reg) {
		loadImage(reg, GMF_LOGO_IMAGE);
		loadImage(reg, SYNC_ICON);
		loadImage(reg, GDM_ICON, "org.eclipse.gmf.graphdef.edit");
		loadImage(reg, DM_ICON, "org.eclipse.emf.ecore.editor");
		loadImage(reg, TDM_ICON, "org.eclipse.gmf.tooldef.edit");
		loadImage(reg, MM_ICON, "org.eclipse.gmf.map.edit");
		loadImage(reg, GM_ICON, "org.eclipse.gmf.codegen.edit");
	}

	protected void loadImage(ImageRegistry registry, String id) {
		loadImage(registry, id, getBundle().getSymbolicName());
	}

	protected void loadImage(ImageRegistry registry, String id, String bundleId) {
		ImageDescriptor descriptor = imageDescriptorFromPlugin(bundleId, id);
		if (descriptor != null) {
			registry.put(id, descriptor);
		}
	}

@


1.11
log
@use icons for node/link/label checkbox columns
@
text
@d27 1
d29 1
a29 5
	public static final String CHECKED_ICON = "/icons/full/checked.gif";
	public static final String UNCHECKED_ICON = "/icons/full/unchecked.gif";
	public static final String NODE_ICON = "/icons/full/node.gif";
	public static final String LINK_ICON = "/icons/full/link.gif";
	public static final String LABEL_ICON = "/icons/full/label.gif";
d31 1
d33 1
d35 1
d37 1
d58 1
a58 6
		loadImage(reg, CHECKED_ICON);
		loadImage(reg, UNCHECKED_ICON);
		loadImage(reg, NODE_ICON);
		loadImage(reg, LINK_ICON);
		loadImage(reg, LABEL_ICON);
		loadImage(reg, GDM_ICON,"org.eclipse.gmf.graphdef.edit");
d91 1
d95 1
d99 1
@


1.10
log
@#126532 Allow to manually resolve domain entity into node or link in wizards that infer tooling and graph definitions from domain model
@
text
@d26 7
a32 2
	public static final String GMF_LOGO = "/icons/full/logo_banner.png";
	public static final String SYNC_IMAGE = "/icons/full/synced.gif";
a37 2
	public static final String CHECKED_ICON = "/icons/full/obj16/checked.gif";
	public static final String UNCHECKED_ICON = "/icons/full/obj16/unchecked.gif";
d55 22
a76 35
		ImageDescriptor id = imageDescriptorFromPlugin(getBundle().getSymbolicName(), GMF_LOGO);
		if (id != null) {
			reg.put(GMF_LOGO, id);
		}
		id = imageDescriptorFromPlugin(getBundle().getSymbolicName(), SYNC_IMAGE);
		if (id != null) {
			reg.put(SYNC_IMAGE, id);
		}
		id = imageDescriptorFromPlugin("org.eclipse.gmf.graphdef.edit", GDM_ICON);
		if (id != null) {
			reg.put(GDM_ICON, id);
		}
		id = imageDescriptorFromPlugin("org.eclipse.emf.ecore.editor", DM_ICON);
		if (id != null) {
			reg.put(DM_ICON, id);
		}
		id = imageDescriptorFromPlugin("org.eclipse.gmf.tooldef.edit", TDM_ICON);
		if (id != null) {
			reg.put(TDM_ICON, id);
		}
		id = imageDescriptorFromPlugin("org.eclipse.gmf.map.edit", MM_ICON);
		if (id != null) {
			reg.put(MM_ICON, id);
		}
		id = imageDescriptorFromPlugin("org.eclipse.gmf.codegen.edit", GM_ICON);
		if (id != null) {
			reg.put(GM_ICON, id);
		}
		id = imageDescriptorFromPlugin(getBundle().getSymbolicName(), CHECKED_ICON);
		if (id != null) {
			reg.put(CHECKED_ICON, id);
		}
		id = imageDescriptorFromPlugin(getBundle().getSymbolicName(), UNCHECKED_ICON);
		if (id != null) {
			reg.put(UNCHECKED_ICON, id);
@


1.9
log
@add action to enable/disable workspace selection sync
@
text
@d33 2
d80 8
@


1.8
log
@show model file names
@
text
@d27 1
d54 4
@


1.7
log
@better presentation options
@
text
@d27 5
d53 20
@


1.6
log
@limit of 10 was too low :), messages are quite long
@
text
@d19 2
d25 3
d43 7
@


1.5
log
@there's no need to explicitly add gmfgen to the registry as it's added there from extpoint
@
text
@d74 1
a74 1
			for (int i = 0; i < children.length && i < 10; i++) {
d77 1
d79 1
a79 1
			if (children.length > 10) {
@


1.4
log
@avoid oversized error messages in the dialog
@
text
@a18 2
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
a28 11
	public void start(BundleContext context) throws Exception {
		super.start(context);
		if (null == EPackage.Registry.INSTANCE.getEPackage(GMFGenPackage.eNS_URI)) {
			EPackage.Registry.INSTANCE.put(GMFGenPackage.eNS_URI, new EPackage.Descriptor() {
				public EPackage getEPackage() {
					return GMFGenPackage.eINSTANCE;
				}
			});
		}
	}

@


1.3
log
@#115475 validate models prior to code generation
@
text
@d87 1
a87 1
			for (int i = 0; i < children.length; i++) {
d91 3
@


1.2
log
@#115474 notify user if errors occured during code generation
@
text
@d79 17
@


1.1
log
@*** empty log message ***
@
text
@d14 5
d50 29
@

