head	1.11;
access;
symbols
	v20081020-0700:1.11
	v20080722-1827:1.11
	R2_1_maintenance:1.11.0.4
	Root_R2_1_maintenance:1.11
	R2_1_0:1.11
	v20080425-1959:1.11
	v20080222-1200:1.11
	v20070809-0000:1.11
	R2_0_maintenance:1.11.0.2
	R2_0:1.11
	R4_20:1.11
	RC3_20:1.11
	v20070601-1400:1.11
	v20070518-1300:1.11
	v20070330-1300:1.10
	v20070208-1800:1.10
	v20070105-1200:1.8.2.2
	M4_20:1.9
	v20061214-0000:1.9
	M3_20:1.9
	v20061013-1330:1.9
	v20060919-0800:1.8.2.1
	M1_20:1.8
	v20060817-1500:1.8.2.1
	v20060803-1200:1.8.2.1
	v20060721-1130:1.8.2.1
	v20060713-1700:1.8.2.1
	R1_0_maintenance:1.8.0.2
	R1_0:1.8
	v20060627-1200:1.8
	v20060616-1200:1.8
	v20060531-1730:1.8
	v20060526-1200:1.8
	I20060505-1400:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051201-1800:1.5
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4;
locks; strict;
comment	@# @;


1.11
date	2007.05.18.12.18.12;	author ahunter;	state Exp;
branches;
next	1.10;
commitid	41e0464d99844567;

1.10
date	2007.01.05.16.25.27;	author ahunter;	state Exp;
branches;
next	1.9;
commitid	94d459e7bf54567;

1.9
date	2006.10.03.15.04.53;	author ahunter;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.13.18.48.20;	author mmostafa;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2006.03.28.21.43.19;	author ldamus;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.28.02.30.54;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.14.16.52.32;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.30.16.12.31;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.24.50;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.48.45;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.55;	author sshaw;	state Exp;
branches;
next	;

1.8.2.1
date	2006.07.11.15.15.26;	author ahunter;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2007.01.04.20.11.14;	author ahunter;	state Exp;
branches;
next	;
commitid	127d459d5f624567;


desc
@@


1.11
log
@[187790] gmf_head ahunter 070518 AssertionError in FileDiagramDocumentProvider
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IStorage;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.jobs.ISchedulingRule;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.transaction.Transaction;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.emf.workspace.AbstractEMFOperation;
import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramModificationListener;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DocumentEvent;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocumentProvider;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.EditorIDEPlugin;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.EditorStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.DiagramIOUtil;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IFileEditorInput;


/**
 * An implementation of <code>IDiagramDocumentProvider</code> for 
 * connecting <code>org.eclipse.ui.IFileEditorInput</code> and
 * <code>IDiagramDocument</code>.
 * 
 * @@author mgoyal
 *
 */
public class FileDiagramDocumentProvider
	extends FileDocumentProvider implements IDiagramDocumentProvider {
	
	public class DiagramFileInfo extends FileInfo {
		DiagramModificationListener fListener;
		/**
		 * Creates and returns a new file info.
		 *
		 * @@param document the document
		 * @@param model the annotation model
		 * @@param fileSynchronizer the file synchronizer
		 */
		public DiagramFileInfo(IDocument document, FileSynchronizer fileSynchronizer, DiagramModificationListener listener) {
			super(document, fileSynchronizer);
			fListener = listener;
		}
		
		public void documentAboutToBeChanged(DocumentEvent event) {
			if(event.getEventKind() == DocumentEvent.CONTENT_REPLACED) {
				// release the existing content.
				IDiagramDocument diagramDoc = ((IDiagramDocument)event.getDocument());
				Diagram existingContent = diagramDoc.getDiagram();
				URI existingURI = null;
				if(existingContent != null) {
					existingURI = existingContent.eResource().getURI();
					DiagramIOUtil.unload(diagramDoc.getEditingDomain(), existingContent);
				}

				Diagram newContent = (Diagram)event.getEventInfo();
				if(newContent != null && existingURI != null) {
					newContent.eResource().setURI(existingURI);
				}
			}
			super.documentAboutToBeChanged(event);
		}
	}
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editor.StorageDocumentProvider#createEmptyDocument()
	 */
	protected IDocument createEmptyDocument() {
		return new DiagramDocument();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editor.IDiagramDocumentProvider#getDiagramDocument(java.lang.Object)
	 */
	public IDiagramDocument getDiagramDocument(Object element) {
		IDocument doc = getDocument(element);
		if(doc instanceof IDiagramDocument)
			return (IDiagramDocument)doc;
		return null;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editor.AbstractDocumentProvider#disposeElementInfo(java.lang.Object, org.eclipse.gmf.runtime.diagram.ui.editor.AbstractDocumentProvider.ElementInfo)
	 */
	protected void disposeElementInfo(Object element, ElementInfo info) {
		super.disposeElementInfo(element, info);
		Object content = info.fDocument.getContent();
		if(content instanceof Diagram && info.fDocument instanceof IDiagramDocument) {
			DiagramIOUtil.unload(((IDiagramDocument)info.fDocument).getEditingDomain(), (Diagram)content);

			assert info instanceof DiagramFileInfo;
		}
        if(((DiagramFileInfo)info).fListener != null)
            ((DiagramFileInfo)info).fListener.stopListening();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editor.StorageDocumentProvider#setDocumentContentFromStorage(org.eclipse.gmf.runtime.diagram.ui.editor.IDocument, org.eclipse.core.resources.IStorage)
	 */
	protected void setDocumentContentFromStorage(IDocument document, IStorage storage)
		throws CoreException {
		Diagram diagram = (Diagram)document.getContent();
		if(diagram != null) {
			Resource resource = diagram.eResource();
			IFile resourceFile = WorkspaceSynchronizer.getFile(resource);
			// unload if the resourceFile and storage is same.
			// if not same throw exception.
			if(resourceFile != null) {
				if(resourceFile.equals(storage)) {
					document.setContent(null);
				} else {
					throw new CoreException(new Status(IStatus.ERROR, EditorIDEPlugin.getPluginId(), EditorStatusCodes.ERROR, EditorMessages.FileDocumentProvider_handleElementContentChanged, null));
				}
			}
		}
		IDiagramDocument diagramDocument = (IDiagramDocument)document;
		TransactionalEditingDomain domain = diagramDocument.getEditingDomain();

		diagram = DiagramIOUtil.load(domain, storage, true, getProgressMonitor());
		document.setContent(diagram);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDocumentProvider#saveDocumentToFile(org.eclipse.gmf.runtime.diagram.ui.editor.IDocument, org.eclipse.core.resources.IFile, boolean, org.eclipse.core.runtime.IProgressMonitor)
	 */
	protected void saveDocumentToFile(IDocument document, IFile file, boolean overwrite, IProgressMonitor monitor)
		throws CoreException {
		Diagram diagram = (Diagram)document.getContent();
		Resource resource = diagram.eResource();
		IFile resourceFile = WorkspaceSynchronizer.getFile(resource);
		// if the diagram in the document is referring to another file, then we should
		// create a copy of this diagram and save it to the new file, save as scenario.
		if(resourceFile != null && !resourceFile.equals(file)) {
			diagram = copyDiagramResource(diagram, file);
		}
		IDiagramDocument diagramDocument = (IDiagramDocument)document;
		TransactionalEditingDomain domain = diagramDocument.getEditingDomain();
		doSave(domain, file, diagram, null, monitor);
	}
	
	private Diagram copyDiagramResource(Diagram sourceDiagram, IFile file) {
		Resource sourceRes = sourceDiagram.eResource();
		EList contents = sourceRes.getContents();
		
		int indexOfDiagram = contents.indexOf(sourceDiagram);
		final Collection copiedContents = EcoreUtil.copyAll(contents);

		TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(sourceDiagram);
		String fileName = file.getFullPath().toString();
		final Resource newResource = editingDomain.getResourceSet()
            .createResource(URI.createPlatformResourceURI(fileName, true));
         
        Map options = new HashMap();
        options.put(Transaction.OPTION_UNPROTECTED, Boolean.TRUE);
 
        AbstractEMFOperation operation = new AbstractEMFOperation(
            editingDomain, StringStatics.BLANK,
            options) {

            protected IStatus doExecute(IProgressMonitor monitor,
                    IAdaptable info)
                throws ExecutionException {

                newResource.getContents().addAll(copiedContents);

                return Status.OK_STATUS;
            }
        };
        try {
            operation.execute(new NullProgressMonitor(), null);
        } catch (ExecutionException e) {
            Trace.catching(EditorIDEPlugin.getInstance(),
                EditorDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                "createView", e); //$NON-NLS-1$
            Log
                .warning(EditorIDEPlugin.getInstance(),
                    EditorStatusCodes.RESOURCE_FAILURE,
                    "createView", e); //$NON-NLS-1$
        }
 	
		return (Diagram)newResource.getContents().get(indexOfDiagram);
	}

	/**
	 * Updates the element info to a change of the file content and sends out
	 * appropriate notifications.
	 *
	 * @@param fileEditorInput the input of an text editor
	 */
	protected void handleElementContentChanged(IFileEditorInput fileEditorInput) {
		// unload the diagram from the MSL.
		// Since MSL won't load another resource from same file if one is already loaded.
		FileInfo info= (FileInfo) getElementInfo(fileEditorInput);
		if (info == null && !(info.fDocument instanceof IDiagramDocument))
			return;
		assert fileEditorInput instanceof FileEditorInputProxy;
		IDiagramDocument diagramDoc = (IDiagramDocument)info.fDocument;
		Diagram existingContent = diagramDoc.getDiagram();
		if(existingContent != null)
			DiagramIOUtil.unload(((FileEditorInputProxy)fileEditorInput).getEditingDomain(), existingContent);
		
		super.handleElementContentChanged(fileEditorInput);
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileDocumentProvider#createFileInfo(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument, org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileDocumentProvider.FileSynchronizer, org.eclipse.ui.IFileEditorInput)
	 */
    protected FileInfo createFileInfo(IDocument document,
            FileSynchronizer synchronizer, IFileEditorInput input) {
        assert document instanceof DiagramDocument;

        DiagramModificationListener diagramListener = null;
        if (((DiagramDocument) document).getDiagram() != null) {
            diagramListener = new FileDiagramModificationListener(this,
                (DiagramDocument) document, input);
        }
        DiagramFileInfo info = new DiagramFileInfo(document, synchronizer,
            diagramListener);

        if (info.fListener != null)
            info.fListener.startListening();
        return info;
    }
	/*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.StorageDocumentProvider#setDocumentContent(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument,
     *      org.eclipse.ui.IEditorInput)
     */
	protected boolean setDocumentContent(IDocument document,
			IEditorInput editorInput)
		throws CoreException {
		if (editorInput instanceof FileEditorInputProxy) {
			FileEditorInputProxy diagramElement = (FileEditorInputProxy) editorInput;

			((IDiagramDocument) document).setEditingDomain(diagramElement
				.getEditingDomain());
			boolean docContentSet = super.setDocumentContent(document,
				editorInput);
			return docContentSet;
		}
		return super.setDocumentContent(document, editorInput);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocumentProvider#createInputWithEditingDomain(org.eclipse.ui.IEditorInput, org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain)
	 */
	public IEditorInput createInputWithEditingDomain(IEditorInput editorInput, TransactionalEditingDomain domain) {
		if(editorInput instanceof IFileEditorInput)
			return new FileEditorInputProxy((IFileEditorInput)editorInput, domain);
		return null;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider#doSaveDocument(org.eclipse.core.runtime.IProgressMonitor, java.lang.Object, org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument, boolean)
	 */
	protected void doSaveDocument(IProgressMonitor monitor, Object element, IDocument document, boolean overwrite)
		throws CoreException {
		if(element instanceof IFileEditorInput) {
			// refresh the file for diagram input.
			IFileEditorInput input= (IFileEditorInput) element;
			IFile file= input.getFile();
			file.refreshLocal(IResource.DEPTH_ZERO, getProgressMonitor());
		}
		super.doSaveDocument(monitor, element, document, overwrite);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editor.AbstractDocumentProvider#getSaveRule(java.lang.Object)
	 */
	protected ISchedulingRule getSaveRule(Object element) {
		if (element instanceof IFileEditorInput) {
			IFileEditorInput input= (IFileEditorInput) element;
			return computeSaveSchedulingRule(input.getFile());
		}
		return null;
	}
	
	/**
	 * Computes the scheduling rule needed to create or modify a resource. If
	 * the resource exists, its modify rule is returned. If it does not, the
	 * resource hierarchy is iterated towards the workspace root to find the
	 * first parent of <code>toCreateOrModify</code> that exists. Then the
	 * 'create' rule for the last non-existing resource is returned.
	 *
	 * @@param toCreateOrModify the resource to create or modify
	 * @@return the minimal scheduling rule needed to modify or create a resource
	 */
	private ISchedulingRule computeSaveSchedulingRule(IResource toCreateOrModify) {
		if (toCreateOrModify.exists() && toCreateOrModify.isSynchronized(IResource.DEPTH_ZERO))
			return fResourceRuleFactory.modifyRule(toCreateOrModify);

		IResource parent= toCreateOrModify;
		do {
			 /*
			 * XXX This is a workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=67601
			 * IResourceRuleFactory.createRule should iterate the hierarchy itself.
			 */
			toCreateOrModify= parent;
			parent= toCreateOrModify.getParent();
		} while (parent != null && !parent.exists() && !parent.isSynchronized(IResource.DEPTH_ZERO));

		return fResourceRuleFactory.createRule(toCreateOrModify);
	}
    
    /**
     * Handles the saving of the diagram to a file
     * 
     * @@param domain
     *            the TransactionalEditingDomain we are saving in
     * @@param file
     *            the IFile to save to
     * @@param diagram
     *            Diagram that will be saved
     * @@param options
     *            save options or null
     * @@param monitor
     *            IProgressMonitor
     * @@throws CoreException
     */
    protected void doSave(TransactionalEditingDomain domain, IFile file,
            Diagram diagram, Map options, IProgressMonitor monitor)
        throws CoreException {
        if (options == null) {
            DiagramIOUtil.save(domain, file, diagram, DiagramIOUtil
                .hasUnrecognizedData(diagram.eResource()), monitor);
        } else {
            DiagramIOUtil.save(domain, file, diagram, monitor, options);
        }
    }
    
    /**
     * Additionally handles updating the URI of the diagram's resource when on
     * an element moved event.
     *
     * @@param fileEditorInput the input of an document editor
     * @@param path the path of the new location of the file
     */
    protected void handleElementMoved(IFileEditorInput fileEditorInput, IPath path) {
        if (path != null) {
            IDiagramDocument diagramDocument = getDiagramDocument(fileEditorInput);
            Diagram diagram = null;
            if (diagramDocument != null) {
                diagram = diagramDocument.getDiagram();
            }
            if (diagram != null) {
                //not to os string!
                diagram.eResource().setURI(URI.createPlatformResourceURI(path.toString()));
            }
        }
        
        super.handleElementMoved(fileEditorInput, path);
    }    
}
@


1.10
log
@[166425] gmf_head wdiu 070104 FileDiagramDocumentProvider not handling renames of diagram file properly
@
text
@a287 1
		assert false;
@


1.9
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
d24 1
d369 23
@


1.8
log
@bugzilla 135406 gmf-head mmostafa 060413 DiagramIOUtil's static public load() should allow specifying options
@
text
@d92 1
a92 2
				IDiagramDocument diagramDocument = (IDiagramDocument)event.getEventInfo();
				Diagram newContent = diagramDocument.getDiagram();
a126 1
			((DiagramFileInfo)info).fListener.stopListening();
d128 2
d243 11
a253 9
	protected FileInfo createFileInfo(IDocument document, FileSynchronizer synchronizer, IFileEditorInput input) {
		assert document instanceof DiagramDocument; 
		
		DiagramModificationListener diagramListener = new FileDiagramModificationListener(this, (DiagramDocument)document, input);
		DiagramFileInfo info = new DiagramFileInfo(document, synchronizer, diagramListener);
		
		diagramListener.startListening();
		return info;
	}
d255 10
a264 3
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.StorageDocumentProvider#setDocumentContent(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument, org.eclipse.ui.IEditorInput)
	 */
@


1.8.2.1
log
@[149987] gmf_R1_0_maintenance mgoyal 060711 Exceptions are thrown in different scenarios in DocumentProviders
@
text
@d92 2
a93 1
				Diagram newContent = (Diagram)event.getEventInfo();
d128 1
a129 2
        if(((DiagramFileInfo)info).fListener != null)
            ((DiagramFileInfo)info).fListener.stopListening();
d243 9
a251 11
    protected FileInfo createFileInfo(IDocument document,
            FileSynchronizer synchronizer, IFileEditorInput input) {
        assert document instanceof DiagramDocument;

        DiagramModificationListener diagramListener = null;
        if (((DiagramDocument) document).getDiagram() != null) {
            diagramListener = new FileDiagramModificationListener(this,
                (DiagramDocument) document, input);
        }
        DiagramFileInfo info = new DiagramFileInfo(document, synchronizer,
            diagramListener);
d253 3
a255 10
        if (info.fListener != null)
            info.fListener.startListening();
        return info;
    }
	/*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.StorageDocumentProvider#setDocumentContent(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument,
     *      org.eclipse.ui.IEditorInput)
     */
@


1.8.2.2
log
@[166425] gmf_R1_0_maintenance wdiu 070104 FileDiagramDocumentProvider not handling renames of diagram file properly
@
text
@a1 1
 * Copyright (c) 2005, 2007 IBM Corporation and others.
a22 1
import org.eclipse.core.runtime.IPath;
a366 23
    
    /**
     * Additionally handles updating the URI of the diagram's resource when on
     * an element moved event.
     *
     * @@param fileEditorInput the input of an document editor
     * @@param path the path of the new location of the file
     */
    protected void handleElementMoved(IFileEditorInput fileEditorInput, IPath path) {
        if (path != null) {
            IDiagramDocument diagramDocument = getDiagramDocument(fileEditorInput);
            Diagram diagram = null;
            if (diagramDocument != null) {
                diagram = diagramDocument.getDiagram();
            }
            if (diagram != null) {
                //not to os string!
                diagram.eResource().setURI(URI.createPlatformResourceURI(path.toString()));
            }
        }
        
        super.handleElementMoved(fileEditorInput, path);
    }    
@


1.7
log
@[130417] gmf_head cdamus 060328 @@@@@@@@@@InvalidExtension@@@@@@@@@@ should be registered in MSL compatibility layer
@
text
@d173 1
a173 2

		DiagramIOUtil.save(domain, file, diagram, DiagramIOUtil.hasUnrecognizedData(diagram.eResource()), monitor);
d332 26
a357 1
	
@


1.6
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@a50 1
import org.eclipse.gmf.runtime.emf.core.internal.util.EMFCoreConstants;
d169 1
a169 1
			diagram = copyDiagramResource(diagram);
d177 1
a177 1
	private Diagram copyDiagramResource(Diagram sourceDiagram) {
d185 3
a187 3
		final Resource newResource = editingDomain
            .createResource(
                EcoreUtil.generateUUID() + EMFCoreConstants.INVALID_PATH);
@


1.5
log
@Bugzilla 108928 gmf_head 051114 tmacdoug - org.eclipse.gmf.runtime.diagram.ui.resources.editor API issues
@
text
@d14 2
d17 1
d22 1
d25 1
d32 8
d48 1
d51 1
a51 2
import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;
import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;
d141 1
a141 1
			IFile resourceFile = ResourceUtil.getFile(resource);
d153 1
a153 1
		MEditingDomain domain = diagramDocument.getEditingDomain();
d166 1
a166 1
		IFile resourceFile = ResourceUtil.getFile(resource);
d173 1
a173 1
		MEditingDomain domain = diagramDocument.getEditingDomain();
d175 1
a175 1
		DiagramIOUtil.save(domain, file, diagram, overwrite, DiagramIOUtil.hasUnrecognizedData(diagram.eResource()), monitor);
d183 35
a217 5
		Collection copiedContents = EcoreUtil.copyAll(contents);
		
		Resource newResource = ResourceUtil.getEditingDomain().createResource(null);
		newResource.getContents().addAll(copiedContents);
		
d276 1
a276 1
	public IEditorInput createInputWithEditingDomain(IEditorInput editorInput, MEditingDomain domain) {
@


1.4
log
@gmf_head sshaw 050930 DiagramDocument listener isn't correctly detecting save events
Contributed by: Wayne Diu
@
text
@d36 1
a36 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.utils.DiagramIOUtil;
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a1 1
 * Copyright (c) 2005 IBM Corporation and others.
a26 3
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IFileEditorInput;

d28 1
d40 2
d56 1
d64 1
a64 1
		public DiagramFileInfo(IDocument document, FileSynchronizer fileSynchronizer) {
d66 1
d68 1
a68 1

d80 2
a81 1
				Diagram newContent = (Diagram)event.getEventInfo();
d114 3
d198 1
a198 2


d200 1
a200 1
	 * @@see org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileDocumentProvider#createFileInfo(org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument, org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileDocumentProvider.FileSynchronizer)
d202 8
a209 2
	protected FileInfo createFileInfo(IDocument document, FileSynchronizer synchronizer) {
		return new DiagramFileInfo(document, synchronizer);
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d40 1
a40 1
import com.ibm.xtools.notation.Diagram;
@

