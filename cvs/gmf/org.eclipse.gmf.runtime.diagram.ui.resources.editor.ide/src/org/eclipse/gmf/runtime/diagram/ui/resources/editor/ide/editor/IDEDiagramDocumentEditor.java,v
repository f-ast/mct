head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	R2_1_maintenance:1.7.0.4
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080425-1959:1.7
	v20080222-1200:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	RC3_20:1.7
	v20070601-1400:1.7
	v20070518-1300:1.7
	v20070330-1300:1.7
	v20070208-1800:1.7
	v20070105-1200:1.6.2.1
	M4_20:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061013-1330:1.7
	v20060919-0800:1.6.2.1
	M1_20:1.6
	v20060817-1500:1.6
	v20060803-1200:1.6
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060531-1730:1.6
	v20060526-1200:1.6
	I20060505-1400:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051201-1800:1.2
	I20051124-2000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2006.10.03.15.04.53;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.25.20.29.46;	author cmahoney;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.04.10.20.33.42;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.28.02.30.54;	author cmahoney;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.13.21.58.51;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.25.19.37.50;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.22.15.54.56;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.09.13.16.43.33;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/
package org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.l10n.EditorMessages;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;
import org.eclipse.jface.dialogs.ErrorDialog;
import org.eclipse.jface.dialogs.IMessageProvider;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.window.Window;
import org.eclipse.osgi.util.NLS;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorMatchingStrategy;
import org.eclipse.ui.IEditorReference;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.dialogs.SaveAsDialog;
import org.eclipse.ui.ide.IGotoMarker;
import org.eclipse.ui.part.FileEditorInput;


public class IDEDiagramDocumentEditor
	extends DiagramDocumentEditor implements IGotoMarker {

	public IDEDiagramDocumentEditor(boolean hasFlyoutPalette) {
		super(hasFlyoutPalette);
	}

	/**
	 * Performs a save as and reports the result state back to the
	 * given progress monitor. This default implementation does nothing.
	 * Subclasses may reimplement.
	 *
	 * @@param progressMonitor the progress monitor for communicating result state or <code>null</code>
	 */
	
	protected void performSaveAs(IProgressMonitor progressMonitor) {

		Shell shell= getSite().getShell();
		IEditorInput input = getEditorInput();

		SaveAsDialog dialog= new SaveAsDialog(shell);

		IFile original= (input instanceof IFileEditorInput) ? ((IFileEditorInput) input).getFile() : null;
		if (original != null)
			dialog.setOriginalFile(original);

		dialog.create();

		IDocumentProvider provider= getDocumentProvider();
		if (provider == null) {
			// editor has been programmatically closed while the dialog was open
			return;
		}

		if (provider.isDeleted(input) && original != null) {
			String message= NLS.bind(EditorMessages.Editor_warning_save_delete, original.getName());
			dialog.setErrorMessage(null);
			dialog.setMessage(message, IMessageProvider.WARNING);
		}

		if (dialog.open() == Window.CANCEL) {
			if (progressMonitor != null)
				progressMonitor.setCanceled(true);
			return;
		}

		IPath filePath= dialog.getResult();
		if (filePath == null) {
			if (progressMonitor != null)
				progressMonitor.setCanceled(true);
			return;
		}

		IWorkspaceRoot workspaceRoot= ResourcesPlugin.getWorkspace().getRoot();
		IFile file= workspaceRoot.getFile(filePath);
		final IEditorInput newInput= new FileEditorInput(file);

		// Check if the editor is already open
		IEditorMatchingStrategy matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();
		
		IEditorReference[] editorRefs = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();
		for (int i=0; i < editorRefs.length; i++) {
			if (matchingStrategy.matches(editorRefs[i],newInput)) {
				MessageDialog.openWarning(shell, org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.FileSaveAs_DialogTitle, org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.FileSaveAs_DialogMessageText);
				return;
			}
		}
		
		boolean success= false;		
		try {
			provider.aboutToChange(newInput);
			getDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);
			success= true;

		} catch (CoreException x) {
			IStatus status= x.getStatus();
			if (status == null || status.getSeverity() != IStatus.CANCEL)
				ErrorDialog.openError(shell, EditorMessages.Editor_error_saving_title2, EditorMessages.Editor_error_saving_message2, x.getStatus());
		} finally {
			provider.changed(newInput);
			if (success)
				setInput(newInput);
		}

		if (progressMonitor != null)
			progressMonitor.setCanceled(!success);
	}
	
    /**
     * go to a specific marker
     * 
     * @@param marker
     *            marker to use
     */
    public final void gotoMarker(IMarker marker) {
        MarkerNavigationService.getInstance().gotoMarker(this, marker);
    }
}
@


1.6
log
@Bugzilla#129244 gmf_head cmahoney 060525 Bookmarks don't work in Geoshapes and Logic examples
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
@


1.6.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.5
log
@[135584] gmf_head ldamus 060410 Classes and methods required by clients should be made public
@
text
@d1 10
d14 1
d21 1
d37 1
d42 1
a42 1
	extends DiagramDocumentEditor {
d129 9
@


1.4
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d12 1
a12 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.parts.DiagramDocumentEditor;
@


1.3
log
@bugzilla 120737 gmf-head sshaw 051213 Diagrams not opening from cvs repositories view.Contribution by Maneesh Goyal
@
text
@a12 1
import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;
a30 4
	public IDEDiagramDocumentEditor(MEditingDomain domain, boolean hasFlyoutPalette) {
		super(domain, hasFlyoutPalette);
	}

@


1.2
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@a100 2
		
		
a102 1

d104 1
a104 1
			getDocumentProvider().saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);
@


1.1
log
@Bugzilla 116247 gmf_head 051121 tmacdoug - AbstractDocumentProvider allows Save as to a document that already opened
@
text
@a2 2
import java.text.MessageFormat;

a10 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.ResourceManager;
d18 1
d68 1
a68 1
			String message= MessageFormat.format(EditorMessages.Editor_warning_save_delete, new Object[] { original.getName() });
d96 1
a96 1
				MessageDialog.openWarning(shell, ResourceManager.getI18NString("FileSaveAs.DialogTitle"), ResourceManager.getI18NString("FileSaveAs.DialogMessageText"));	//$NON-NLS-1$ //$NON-NLS-2$
@

