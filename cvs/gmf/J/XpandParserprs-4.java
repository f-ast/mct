/*******************************************************************************
* Copyright (c) 2006 Eclipse.org
* 
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*******************************************************************************/
package org.eclipse.gmf.internal.xpand.parser;

public class XpandParserprs implements lpg.lpgjavaruntime.ParseTable, XpandParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            1,6,1,4,1,1,3,1,5,10,
            1,0,5,1,3,1,3,1,3,1,
            3,1,1,1,1,1,1,1,3,1,
            1,1,3,1,1,1,2,2,2,3,
            1,2,1,1,1,1,1,1,1,1,
            3,4,3,1,1,3,2,2,1,1,
            1,1,1,4,6,4,1,1,1,1,
            1,1,0,1,2,4,1,3,1,1,
            4,1,1,1,3,1,1,3,0,5,
            4,4,0,1,0,1,0,2,0,2,
            4,0,2,4,6,9,11,9,2,2,
            0,1,2,6,9,2,0,3,1,1,
            1,1,1,1,3,0,3,0,1,1,
            1,1,2,3,5,6,0,3,1,1,
            5,0,1,8,0,2,0,2,6,0,
            4,0,2,6,10,0,1,-50,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-64,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-2,0,0,0,0,0,
            0,0,0,-8,0,0,0,-91,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-65,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-4,0,0,0,0,0,
            0,0,0,-15,0,0,0,-71,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-151,
            0,0,-101,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-11,0,0,-150,0,-128,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-48,0,0,
            0,0,-133,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-70,0,0,0,0,-66,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-80,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-81,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-82,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-83,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-84,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-96,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-99,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-108,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-116,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-143,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-146,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-147,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-152,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-154,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-169,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-172,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-131,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-158,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-109,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -92,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-142,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -93,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-168,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-177,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-178,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-107,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-94,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -95,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -106,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -105,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-123,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-104,0,0,0,
            0,0,0,0,0,-31,0,0,0,0,
            0,-34,0,0,0,0,0,-57,0,0,
            0,0,0,-32,0,0,0,0,0,-35,
            0,0,0,0,0,-54,0,0,0,0,
            0,0,-29,-1,-63,-30,-73,0,-27,0,
            -28,0,-6,0,-56,0,0,0,0,0,
            -87,0,0,0,0,0,-100,0,0,0,
            0,0,-120,0,0,0,0,0,-9,0,
            0,0,0,0,0,-12,-13,0,-41,-14,
            0,-43,-79,0,0,-88,0,-16,-90,0,
            -74,-114,-17,-10,-118,0,-72,-134,0,0,
            -141,0,-18,-153,-7,0,0,0,0,0,
            0,0,0,0,-163,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-164,0,0,-170,
            0,-23,-179,-24,0,0,0,0,-111,0,
            0,-33,-86,0,-59,-3,-5,-139,-112,-19,
            -20,-21,-26,-129,-136,-157,0,0,0,0,
            0,0,0,0,0,-159,0,-160,0,-171,
            -176,0,0,0,0,0,0,0,0,0,
            -181,0,0,0,0,0,-22,-25,-36,-37,
            -38,-39,-40,-42,-44,0,0,-45,0,-46,
            -47,-49,-51,0,-52,-53,0,-55,-58,-60,
            -61,-62,-67,-68,-69,0,-75,0,-76,-77,
            -78,0,-85,-89,-97,0,-98,0,-102,-103,
            0,-110,-113,-115,-117,-119,-121,-122,-124,-125,
            -126,-127,0,-130,-132,-135,-137,-138,-140,-144,
            -145,-148,-149,-155,-156,-161,-162,-165,-166,-167,
            -173,-174,-175,-180,-182,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            62,28,29,29,27,27,25,25,26,26,
            24,24,41,41,23,23,21,21,22,22,
            20,20,63,63,63,63,63,63,19,19,
            64,64,17,17,65,65,18,18,18,42,
            42,9,9,10,10,10,10,10,10,10,
            10,10,6,6,6,6,15,15,16,11,
            11,14,12,13,7,7,7,8,8,8,
            8,8,8,74,74,36,36,34,34,3,
            3,4,5,5,5,2,2,1,1,62,
            62,37,37,45,45,66,66,33,33,43,
            43,46,44,44,47,39,39,39,39,35,
            35,40,40,40,38,38,32,48,48,49,
            49,49,49,49,49,31,56,56,30,30,
            50,50,50,57,58,58,58,68,68,67,
            59,51,69,69,52,70,70,60,60,53,
            61,61,71,71,54,55,72,72,1,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,140,1,261,86,
            80,54,79,1493,50,55,1513,38,1387,44,
            45,46,47,48,49,25,116,1445,119,120,
            121,122,123,124,62,130,131,132,1,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,140,1,261,86,
            80,54,79,1493,50,55,1513,37,1387,44,
            45,46,47,48,49,69,118,1445,119,120,
            121,122,123,124,29,130,131,132,34,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1530,1,1333,1487,
            469,1395,1529,77,86,80,54,79,1493,50,
            55,1513,36,1387,44,45,46,47,48,49,
            1325,1327,1381,1512,1511,1517,11,1510,5,1520,
            3,1530,1,72,86,1383,467,1542,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1530,1,72,86,
            1509,1557,78,105,86,80,54,79,1493,50,
            55,1513,36,1387,44,45,46,47,48,49,
            1325,1327,1381,1512,1511,1517,11,1510,5,1520,
            3,1530,1,72,86,58,1468,1552,105,86,
            80,1527,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1525,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,133,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1449,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1533,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1382,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1534,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1525,1,133,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1539,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1544,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1548,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1555,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1466,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,135,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1427,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1559,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,148,1,105,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,3,1471,1,187,86,
            80,54,79,1493,50,55,1513,36,1387,44,
            45,46,47,48,49,1325,1327,1381,1512,1511,
            1517,11,1510,5,1520,1551,187,86,80,54,
            79,1493,50,55,1513,36,1387,44,45,46,
            47,48,49,1325,1327,1381,1512,1511,1517,11,
            1510,5,1520,2,161,86,80,54,79,1493,
            50,55,1513,36,1387,44,45,46,47,48,
            49,1325,1327,1381,1512,1511,1517,11,1510,7,
            1520,161,86,80,54,79,1493,50,55,1513,
            36,1387,44,45,46,47,48,49,1325,1327,
            1381,1512,1511,1517,11,1538,161,86,80,54,
            79,1493,50,55,1513,36,1387,44,45,46,
            47,48,49,1325,1327,1381,1512,1511,1517,11,
            9,213,86,80,54,79,1493,50,55,1513,
            36,1387,44,45,46,47,48,49,1325,1327,
            1381,1512,1511,1517,15,213,86,80,54,79,
            1493,50,55,1513,36,1387,44,45,46,47,
            48,49,1325,1327,1381,1512,1511,1517,1562,213,
            86,80,54,79,1493,50,55,1513,36,1387,
            44,45,46,47,48,49,1325,1327,1381,1512,
            1511,1517,1564,213,86,80,54,79,1493,50,
            55,1513,36,1387,44,45,46,47,48,49,
            1325,1327,1381,1512,1511,1517,1481,213,86,80,
            54,79,1493,50,55,1513,36,1387,44,45,
            46,47,48,49,1325,1327,1381,1512,17,1517,
            213,86,80,54,79,1493,50,55,1513,36,
            1387,44,45,46,47,48,49,1325,1327,1381,
            19,213,86,80,54,79,1493,50,55,1513,
            36,1387,44,45,46,47,48,49,1325,1327,
            29,213,86,80,54,79,1493,50,55,1513,
            36,1387,44,45,46,47,48,49,1325,1327,
            21,213,86,80,54,79,1493,50,55,1513,
            36,1387,44,45,46,47,48,49,33,1327,
            261,86,80,54,79,1493,50,55,1513,4,
            1387,44,45,46,47,48,49,285,86,80,
            54,79,1493,1454,55,1513,302,86,80,1492,
            79,1493,308,86,80,1492,79,1493,308,86,
            80,1492,79,1493,308,86,80,1369,79,1493,
            308,86,80,1372,79,1493,308,86,80,1376,
            79,1493,1491,325,304,340,325,341,1494,362,
            88,362,85,287,76,308,86,80,1379,79,
            1493,308,86,80,1385,79,1493,308,86,80,
            1541,79,1493,308,86,80,1391,79,1493,310,
            94,1370,1367,94,1370,1367,219,268,92,369,
            351,91,369,72,86,139,369,1359,358,369,
            1384,267,369,353,287,369,205,402,369,1201,
            1446,369,1241,103,369,69,90,1370,1367,1503,
            158,1502,1503,158,1506,369,1503,158,1536,1503,
            158,1537,1503,158,1455,1503,158,1549,1503,158,
            1553,1503,158,1554,1503,158,1558,369,103,42,
            369,1384,314,369,314,1503,158,153,100,423,
            1439,1395,314,349,1221,369,7,7,350,426,
            7,7,7,7,442,446,474,1503,158,1470,
            1503,158,1563,1503,158,1565,475,112,475,112,
            446,487,110,1535,109,1503,218,112,1535,265,
            98,474,113,101,1323,1326,104,291,328,139,
            366,27,367,364,380,75,40,1560,371,125,
            159,379,382,381,127,384,387,1545,388,389,
            390,391,392,393,396,327,310,401,1388,404,
            269,407,13,403,411,414,136,415,1430,416,
            417,151,418,419,422,428,430,431,429,432,
            324,439,441,1433,458,339,443,453,451,455,
            456,463,465,466,470,472,480,477,482,483,
            484,485,488,486,489,490,1568,1568
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,0,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,0,25,0,27,0,1,
            24,0,6,0,1,2,3,4,5,39,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,29,25,33,
            27,0,62,63,40,32,0,67,0,69,
            9,0,1,73,0,75,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            26,25,0,27,0,1,2,3,4,5,
            8,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,60,25,
            28,27,0,1,2,3,4,5,0,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,0,25,0,27,
            0,1,2,3,4,5,28,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,26,25,0,1,2,3,
            4,5,0,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            0,25,0,1,2,3,4,5,0,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,0,1,2,3,
            4,5,24,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            0,1,2,3,4,5,0,0,0,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,0,1,0,3,4,5,
            0,24,2,0,10,11,12,13,14,15,
            16,0,1,0,3,4,5,0,1,0,
            3,4,5,0,1,47,26,51,52,53,
            54,55,56,0,0,2,0,0,2,2,
            29,8,0,1,8,3,4,5,0,0,
            0,28,29,40,35,36,7,61,0,0,
            0,28,0,26,28,7,7,0,1,35,
            36,0,1,0,26,0,0,1,0,29,
            0,6,24,24,24,7,24,39,0,0,
            0,0,59,0,81,6,0,0,0,0,
            0,0,0,6,2,0,57,2,58,29,
            0,0,0,0,24,2,0,1,45,26,
            0,33,31,0,0,0,0,0,0,6,
            6,0,0,37,2,0,1,0,0,0,
            0,0,41,44,46,34,26,6,0,49,
            0,0,0,1,6,0,6,32,48,33,
            0,24,0,1,0,0,38,0,30,38,
            31,31,0,6,0,0,0,50,0,0,
            6,0,17,0,0,34,0,6,76,0,
            1,0,0,0,0,0,0,0,0,0,
            0,37,30,0,0,0,0,0,0,0,
            31,0,0,0,0,0,0,0,0,0,
            0,0,0,0,30,70,43,30,24,0,
            32,0,0,0,0,42,0,77,0,0,
            0,65,0,68,0,0,0,0,64,71,
            0,0,0,0,0,0,0,0,72,0,
            0,66,0,0,0,74,0,0,0,0,
            78,0,0,0,0,79,0,0,0,80,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            117,1515,418,1650,1651,1652,97,188,248,1611,
            1514,1635,1636,1637,1638,1639,1640,278,1630,1631,
            413,1627,1628,1629,1568,1519,1568,1521,1568,1432,
            1447,1568,1500,1568,1515,418,1650,1651,1652,508,
            188,248,1611,1514,1635,1636,1637,1638,1639,1640,
            278,1630,1631,413,1627,1628,1629,1434,1519,1498,
            1521,1568,448,1373,1567,1625,1568,478,99,538,
            1366,1568,1393,568,1568,1523,1568,1515,418,1650,
            1651,1652,1621,188,248,1611,1514,1635,1636,1637,
            1638,1639,1640,278,1630,1631,413,1627,1628,1629,
            1316,1519,87,1521,1568,1515,418,1650,1651,1652,
            1331,188,248,1611,1514,1635,1636,1637,1638,1639,
            1640,278,1630,1631,413,1627,1628,1629,214,1519,
            1329,1521,1568,1540,418,1650,1651,1652,87,188,
            248,1611,1514,1635,1636,1637,1638,1639,1640,278,
            1630,1631,413,1627,1628,1629,1568,1519,1568,1521,
            1568,1515,598,1650,1651,1652,1329,188,248,1611,
            1514,1635,1636,1637,1638,1639,1640,278,1630,1631,
            413,1627,1628,1629,1335,1519,1568,1515,418,1650,
            1651,1652,1568,188,248,1611,1514,1635,1636,1637,
            1638,1639,1640,278,1630,1631,413,1627,1628,1629,
            1568,1519,1568,1515,598,1650,1651,1652,1568,188,
            248,1611,1514,1635,1636,1637,1638,1639,1640,278,
            1630,1631,413,1627,1628,1629,28,1599,1599,1599,
            1599,1599,1450,1599,1599,1599,1599,1599,1599,1599,
            1599,1599,1599,1599,1599,1599,1599,1599,1599,1599,
            1568,1515,598,1650,1651,1652,20,1568,6,1611,
            1514,1635,1636,1637,1638,1639,1640,278,1630,1631,
            413,1627,1628,1629,1568,1515,102,1650,1651,1652,
            1568,1451,1286,1568,1514,1635,1636,1637,1638,1639,
            1640,1568,1393,95,1650,1651,1652,1568,1393,1568,
            1650,1651,1652,111,1432,984,1304,1590,1591,1592,
            1593,1594,1595,87,93,313,87,1568,313,1292,
            1490,1331,75,1298,1331,1298,1298,1298,134,28,
            32,1442,1434,89,274,1378,1962,343,126,126,
            1568,1329,1568,1310,1329,2220,2220,1568,1488,274,
            1378,1568,1489,1568,778,1568,1568,1501,128,1602,
            1568,1495,128,128,1452,1697,1453,748,75,1568,
            1568,1568,718,1568,1664,1505,1568,1568,1568,8,
            14,18,1568,1524,628,1568,1598,1347,1603,1508,
            16,41,1568,1568,1443,658,1568,1532,378,1341,
            1568,2058,1673,1568,54,1568,77,1568,1568,1619,
            1260,1568,137,1682,383,142,1711,1568,1568,1568,
            1568,1568,1180,1011,1649,1277,1353,1634,1568,1061,
            1568,39,1568,346,1632,150,1620,1624,1157,348,
            1568,1448,1568,1394,1568,1568,1546,1568,1036,1547,
            1676,1674,1568,1550,1568,1568,145,928,152,1568,
            1706,1568,1456,12,147,1277,1568,1633,688,1568,
            1714,1568,1568,1568,1568,1568,156,1568,1568,1568,
            1568,1683,956,1568,126,1568,1568,1568,1568,1568,
            1675,1568,1568,1568,1568,1568,1568,1568,1568,1568,
            1568,1568,1568,1568,1109,808,1085,1133,1697,1568,
            1578,1568,1568,1568,1568,1561,1568,838,1568,1568,
            1568,1556,1568,1709,1568,1568,1568,1568,868,1405,
            1568,1568,1568,1568,1568,1568,1568,1568,1717,1568,
            1568,1712,1568,1568,1568,1722,1568,1568,1568,1568,
            898,1568,1568,1568,1568,1725,1568,1568,1568,1723
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            71,176,73,3,72,75,3,1,76,75,
            167,113,113,113,68,167,113,79,73,173,
            173,118,115,115,118,74,167,167,174,174,
            65,164,115,164,164,80,230,229,167,185,
            112,230,112,125,224,125,229,167,187,128,
            113,125,189,164,230,164,164,191,112,100,
            97,95,88,148,148,144,258,258,193,167,
            8,85,86,89,96,258,101,167,167,144,
            144,144,144,144,226,127,164,112,125,112,
            128,145,146,146,146,144,230,208,144,164,
            34,32,228,157,146,146,146,144,145,232,
            121,169,234,112,234,144,113,112,187,164,
            187,236,148,230,238,230,230,144,85,230,
            145,122,144,112,167,178,167,260,127,189,
            112,145,144,58,236,144,144,230,262,60,
            179,144,112,144,187,230,182,145,61,61,
            167,180,112,112,264,266,183,146,144,112,
            178,144,236,236,268,111,146,146,112,32,
            182,270
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            9,0,61,35,36,60,0,2,8,7,
            9,1,3,4,5,10,11,12,13,14,
            15,16,20,17,23,19,18,21,22,25,
            27,32,0,2,8,7,9,1,3,4,
            5,10,11,12,13,14,15,16,20,23,
            19,18,21,22,25,27,6,17,0,65,
            7,24,64,0,3,4,5,29,1,0,
            81,40,60,24,61,36,35,0,8,2,
            46,26,39,28,34,29,58,57,51,52,
            53,54,55,56,41,48,42,43,49,44,
            1,30,6,32,33,64,38,77,78,47,
            79,7,24,0,29,1,28,26,2,0,
            2,7,24,39,26,0,24,31,37,66,
            68,70,71,72,74,80,75,73,69,39,
            67,62,63,27,25,8,7,9,2,20,
            17,23,19,18,21,22,10,11,12,13,
            14,15,16,3,4,5,1,0,7,24,
            1,0,24,36,35,40,0,70,71,72,
            0,43,42,0,45,0,31,0,37,0,
            46,0,1,42,43,30,32,33,64,38,
            77,78,79,24,2,8,28,41,44,47,
            48,49,51,52,53,54,55,56,57,7,
            58,34,6,29,0,76,0,32,33,6,
            0,50,0,38,0,30,0,41,44,6,
            47,48,49,51,52,53,54,55,56,57,
            7,29,58,34,59,8,28,2,0,77,
            0,68,0,74,0,78,0,66,0,80,
            0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static byte nasb[] = {0,
            32,5,63,6,63,41,6,5,43,41,
            12,5,5,5,8,5,5,5,63,63,
            63,5,56,56,5,63,39,39,28,28,
            24,17,56,24,17,5,5,5,5,5,
            47,5,47,5,5,5,5,12,5,1,
            5,5,5,17,5,17,24,5,47,5,
            5,5,35,2,2,16,5,5,5,12,
            2,54,37,52,5,5,5,5,50,2,
            2,2,2,2,5,60,17,47,5,47,
            1,2,2,2,2,2,5,5,2,17,
            2,5,5,20,2,2,2,2,2,5,
            58,65,5,47,5,2,5,47,5,17,
            5,5,2,5,5,5,5,2,54,5,
            2,5,2,47,5,67,5,5,60,5,
            47,2,2,5,5,2,2,5,5,14,
            10,2,47,2,5,5,69,2,71,71,
            5,5,47,47,5,5,5,2,2,47,
            67,2,5,5,5,73,2,2,47,5,
            69,5
        };
    };
    public final static byte nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            48,5,8,10,0,46,0,35,0,71,
            0,2,0,70,0,8,5,3,0,5,
            8,6,0,5,3,36,0,38,39,45,
            0,66,62,0,64,0,65,0,1,0,
            47,0,38,39,37,0,30,31,0,67,
            0,63,0,42,0,40,0,68,0,30,
            56,0,33,0,69,0,61,0,41,0,
            60,0,72,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static byte terminalIndex[] = {0,
            30,4,43,44,45,5,22,11,31,46,
            47,48,49,50,51,52,6,32,33,37,
            38,39,40,82,35,61,34,2,23,3,
            56,7,26,25,55,57,58,63,65,81,
            36,41,42,1,8,9,10,12,13,14,
            15,16,17,18,19,20,21,24,27,53,
            54,59,60,62,64,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            28,83
        };
    };
    public final static byte terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static byte nonterminalIndex[] = {0,
            109,105,86,0,108,102,0,106,87,103,
            0,0,0,0,0,0,97,99,95,94,
            92,93,91,90,88,89,85,84,0,0,
            117,116,0,104,115,107,110,111,112,0,
            0,101,0,0,0,113,114,0,118,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,96,98,100,0,119,0,0,0,
            0,0,0,0
        };
    };
    public final static byte nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            1,87,29,97,13,21,57,39,128,51,
            68,121,109,63,72,75,80,46
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            11,66,37,104,19,27,55,44,133,55,
            55,125,113,66,55,78,83,48
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            55,24,52,24,54,53,7,51,29,7,
            6,26,24,15,10,42,41,48
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            80,32,66,42,74,72,6,68,30,6,
            6,30,6,32,6,34,30,7
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            46,20,46,20,46,46,7,46,25,7,
            7,22,20,8,8,4,1,46
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            114,154,110,78,110,77,110,76,75,0,
            80,0,114,1,38,110,73,0,74,0,
            153,143,114,110,69,0,72,0,114,142,
            152,1,38,110,39,0,66,0,114,151,
            110,67,0,68,0,131,0,117,0,0,
            110,2,90,0,5,0,110,59,1,2,
            90,0,116,17,0,7,0,116,2,1,
            0,110,2,0,88,34,0,101,0,105,
            43,0,3,91,0,0,105,30,42,123,
            17,6,110,2,25,0,123,17,6,110,
            2,25,0,41,3,91,7,0,110,2,
            25,0,5,6,0,41,3,91,7,0,
            106,44,106,0,3,90,0,109,50,1,
            27,0,3,85,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1481,1456,0,1454,1387,0,1277,1133,1109,1085,
            1260,1157,1221,1241,1201,1180,1061,248,188,1036,
            1011,956,928,984,898,868,838,808,778,748,
            718,383,348,688,658,313,628,598,568,538,
            508,478,448,278,418,218,158,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,144,148,115,24,125,128,60,126,129,
            61,9,121,120,35,36,84,1,24,24,
            24,117,1,29,1,24,28,8,115,115,
            2,26,28,2,26,1,29,118,85,87,
            85,118,85,6,33,6,1,45,114,113,
            112,6,114,26,29,26,33,84,131,106,
            103,102,99,7,8,2,90,10,1,20,
            17,92,100,101,104,25,108,27,63,62,
            67,39,69,73,75,24,26,85,6,85,
            113,44,49,41,146,2,110,85,2,2,
            2,116,110,34,147,145,48,2,47,1,
            149,110,110,110,110,76,112,85,114,26,
            114,106,6,110,1,85,116,33,88,110,
            50,150,2,151,38,114,38,110,24,114,
            85,30,59,6,109,39,26,116,114,1,
            143,70,1,77,114,110,17,30,110,152,
            65,153,71,110,114,110,123,43,64,142,
            114,78,42,105,114,110,30,30,154,105,
            105,114
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "?",
            "::",
            ":",
            "(",
            ")",
            "{",
            "}",
            "[",
            "]",
            "->",
            "!",
            "&&",
            "||",
            "=",
            "==",
            "!=",
            ">=",
            "<=",
            ">",
            "<",
            "+",
            "-",
            "*",
            "/",
            ".",
            ",",
            "|",
            "\\u00AB",
            "$empty",
            "IDENT",
            "STRING",
            "INT_CONST",
            "REAL_CONST",
            "let",
            "switch",
            "implies",
            "new",
            "false",
            "true",
            "null",
            "default",
            "case",
            "Collection",
            "List",
            "Set",
            "typeSelect",
            "collect",
            "select",
            "reject",
            "exists",
            "notExists",
            "forAll",
            "IMPORT",
            "EXTENSION",
            "AROUND",
            "ENDAROUND",
            "DEFINE",
            "ENDDEFINE",
            "ERROR",
            "EXPAND",
            "FOR",
            "SEPARATOR",
            "AS",
            "ITERATOR",
            "FOREACH",
            "ENDFOREACH",
            "FILE",
            "ENDFILE",
            "IF",
            "ELSEIF",
            "ELSE",
            "ENDIF",
            "LET",
            "ENDLET",
            "PROTECT",
            "CSTART",
            "CEND",
            "ID",
            "DISABLE",
            "ENDPROTECT",
            "EOF_TOKEN",
            "TEXT",
            "ERROR_TOKEN",
            "expression",
            "castedExpression",
            "type",
            "infixExpression",
            "chainExpression",
            "ifExpression",
            "switchExpression",
            "orExpression",
            "andExpression",
            "impliesExpression",
            "relationalExpression",
            "additiveExpression",
            "relationalOperator",
            "multiplicativeExpression",
            "additiveOperator",
            "unaryExpression",
            "multiplicativeOperator",
            "infixExpressionSuffix",
            "featureCall",
            "primaryExpression",
            "parameterList",
            "simpleType",
            "collectionExpressionName",
            "declaredParameterList",
            "collectionTypeName",
            "qualifiedType",
            "defineOrAroundSeq",
            "define",
            "around",
            "anImport",
            "anExtensionImport",
            "pointcut",
            "sequence",
            "text",
            "statement",
            "definitionName"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 82,
           SCOPE_UBOUND      = 17,
           SCOPE_SIZE        = 18,
           MAX_NAME_LENGTH   = 24;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 182,
           NT_OFFSET         = 82,
           LA_STATE_OFFSET   = 1725,
           MAX_LA            = 2,
           NUM_RULES         = 157,
           NUM_NONTERMINALS  = 74,
           NUM_SYMBOLS       = 156,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 1324,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 40,
           EOLT_SYMBOL       = 40,
           ACCEPT_ACTION     = 1567,
           ERROR_ACTION      = 1568;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
