head	1.7;
access;
symbols
	v20080722-1827:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080603-1553:1.7
	v20080507-2230:1.7
	v20080425-1959:1.6
	v20080417-1610:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.5
	v20070601-1400:1.5
	v20070520-1200:1.5
	v20070504-1000:1.5
	v20070405-1100:1.5
	v20070330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.4
	v20070208-1800:1.4
	M4_20:1.3
	v20061218-1200:1.3
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.1
	v20061117-0800:1.1
	v20061027-1200:1.1.2.1
	v20061013-1330:1.1
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060831-1500:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1;
locks; strict;
comment	@# @;


1.7
date	2008.05.07.18.37.43;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	2f724821f6f74567;

1.6
date	2007.06.21.14.09.59;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	1941467a86b54567;

1.5
date	2007.03.21.23.23.57;	author radvorak;	state Exp;
branches;
next	1.4;
commitid	10c44601be8c4567;

1.4
date	2007.01.23.12.31.55;	author radvorak;	state Exp;
branches;
next	1.3;
commitid	552545b6003a4567;

1.3
date	2006.12.14.15.51.49;	author radvorak;	state Exp;
branches;
next	1.2;
commitid	19ee458173154567;

1.2
date	2006.11.20.17.30.41;	author radvorak;	state Exp;
branches;
next	1.1;
commitid	1fc64561e63f4567;

1.1
date	2006.05.18.13.58.31;	author radvorak;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.18;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[230418] annotation-based metaconstraints do not support non-containment context, that are actual now with changes from bug #228913
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *    Radek Dvorak (Borland) - initial API and implementation
 */
package org.eclipse.gmf.validate;

import java.util.HashMap;

import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EValidator;
import org.eclipse.emf.ecore.util.Diagnostician;
import org.eclipse.emf.ecore.util.EObjectValidator;
import org.eclipse.gmf.internal.validate.AnnotatedDefinitionValidator;
import org.eclipse.gmf.internal.validate.AnnotatedOclValidator;
import org.eclipse.gmf.internal.validate.ExternModelImport;
import org.eclipse.gmf.internal.validate.ValidatorChain;

/**
 * Validator of GMF constraint annotations. 
 * See <A href="package-summary.html"</A> details.
 */
public class GMFValidator extends ValidatorChain {
	
	private static EValidator[] GMF_VALIDATORS = new EValidator[] { 
		ExternModelImport.getImportValidator(),				
		new AnnotatedOclValidator(),
// bug #230418		new AnnotatedDefinitionValidator() 
	};
	
	private static final EValidator NO_ECORE_INSTANCE = new ValidatorChain(GMF_VALIDATORS);	
	
	private static EValidator[] ALL_VALIDATORS = new EValidator[] { 
		EObjectValidator.INSTANCE, 
		NO_ECORE_INSTANCE };
	
	/**
	 * Ecore compliant validator instance.
	 */
	public static final EValidator INSTANCE = new ValidatorChain(ALL_VALIDATORS);	
	
	private GMFValidator() {
		super(GMF_VALIDATORS);
	}
		
	/**
	 * Validates the given object using its registered EValidator and  
	 * additionally performs validation of <code>OCL constraints annotations</code>,
	 * value-spec and constraint definitions. 
	 * </p>
	 * 
	 * @@param eObject the subject for validation
	 * @@return resulting root diagnostic object containing the children diagnostic elements representing
	 * 	the concrete constraint validation results
	 */
	public static Diagnostic validate(EObject eObject) {
		Diagnostician diagnostician = new Diagnostician(new DelegateRegistry());
		return diagnostician.validate(eObject);
	}	

	/**
	 * Validates the given object using its registered EValidator and  
	 * additionally performs validation of <code>OCL constraints annotations</code>,
	 * value-spec and constraint definitions. 
	 * </p>
	 * 
	 * @@param eObject the subject for validation
	 * @@param options validation options
	 * @@return resulting root diagnostic object containing the children diagnostic elements representing
	 * 	the concrete constraint validation results
	 */	
	public static Diagnostic validate(EObject eObject, ValidationOptions options) {
		Diagnostician diagnostician = new Diagnostician(new DelegateRegistry(options));
		return diagnostician.validate(eObject);
	}
		
	private static class DelegateRegistry extends HashMap<EPackage, Object> implements Registry {
		private static final long serialVersionUID = 8069287594754687573L;
		
		private ValidationOptions options;
		private EValidator gmfValidator;
		private EValidator noEcoreValidator;
		
		@@SuppressWarnings("synthetic-access")
		DelegateRegistry() {
			this(null);
			gmfValidator = GMFValidator.INSTANCE;
			noEcoreValidator = GMFValidator.NO_ECORE_INSTANCE;
		}
		
		DelegateRegistry(ValidationOptions options) {
			this.options = options;
		}
		
		@@SuppressWarnings("synthetic-access")
		private EValidator getGmfValidator() {
			if(gmfValidator == null) {
				gmfValidator = new ValidatorChain(ALL_VALIDATORS, options);
			}
			return gmfValidator;
		}
		
		@@SuppressWarnings("synthetic-access")
		private EValidator getNoEcoreValidator() {
			if(noEcoreValidator == null) {
				noEcoreValidator = new ValidatorChain(GMF_VALIDATORS, options);
			}
			return noEcoreValidator;
		}

		public EValidator getEValidator(EPackage ePackage) {
			if(containsKey(ePackage)) {
				return (EValidator)super.get(ePackage);
			}
			EValidator delegateValidator = Registry.INSTANCE.getEValidator(ePackage);
			if(delegateValidator == null || delegateValidator.getClass().equals(EObjectValidator.class)) {
				return getGmfValidator();
			}
			return createDelegator(ePackage, delegateValidator);
		}
		
		@@SuppressWarnings("unchecked")
		private EValidator createDelegator(Object key, EValidator delegate) {		
			// extend custom validator retrieved from the registry only with GMF validators
			EValidator delegatingValidator = new ValidatorChain(new EValidator[] { delegate, getNoEcoreValidator() });
			put((EPackage)key, delegatingValidator);
			return delegatingValidator;
		}

		public Object get(Object key) {
			Object provider = super.get(key);
			if(provider != null) {
				return provider;
			}
			provider = Registry.INSTANCE.get(key);			
			if(provider != null && provider instanceof EValidator) {
				if(provider.getClass().equals(EObjectValidator.class)) {
					return getGmfValidator();
				}
				provider = createDelegator(key, (EValidator)provider);
			}
			return provider;
		}
	}		
}
@


1.6
log
@fix copyright years
@
text
@d36 1
a36 1
		new AnnotatedDefinitionValidator() 
@


1.5
log
@[178360] Get rid of deprecated code use in org.eclipse.gmf.validate plug-in
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
d153 1
a153 1
}@


1.4
log
@[171372] Complete unit-tests for o.e.gmf.validate plug-in
@
text
@d86 2
@


1.3
log
@Fixing compilation errors for the integration build dependency EMF 2.3.0.I200612071030
@
text
@d29 1
@


1.2
log
@[164840] Migrate 'org.eclipse.gmf.validate' plugin to Java 5
@
text
@d84 1
a84 1
	private static class DelegateRegistry extends HashMap implements Registry {
d131 1
a131 1
			put(key, delegatingValidator);
@


1.1
log
@gmf.validation plugin created
@
text
@d89 1
d100 1
d108 1
d127 1
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@

