head	1.3;
access;
symbols
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080603-1553:1.3
	v20080507-2230:1.3
	v20080425-1959:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.2
	v20070601-1400:1.2
	v20070520-1200:1.2
	v20070504-1000:1.2
	v20070405-1100:1.2
	v20070330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061027-1200:1.1.2.1
	v20061013-1330:1.2
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060831-1500:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1;
locks; strict;
comment	@# @;


1.3
date	2007.06.21.14.09.59;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	1941467a86b54567;

1.2
date	2006.10.06.14.15.54;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.18.13.58.29;	author radvorak;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.18;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.3
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *    Radek Dvorak (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.validate;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.emf.ecore.EValidator.SubstitutionLabelProvider;
import org.eclipse.emf.ecore.provider.EcoreItemProviderAdapterFactory;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.edit.provider.IItemLabelProvider;



public class LabelProvider implements SubstitutionLabelProvider {
	public static final SubstitutionLabelProvider INSTANCE = new LabelProvider();
	private static final AdapterFactory ECORE_FACTORY = new EcoreItemProviderAdapterFactory();
	
	private LabelProvider() {
		super();
	}

	public String getFeatureLabel(EStructuralFeature eStructuralFeature) {
		return eStructuralFeature.getName();
	}

	public String getObjectLabel(EObject eObject) {
		if(eObject == null) {
			return String.valueOf(eObject);
		}
		if(eObject instanceof EStructuralFeature) {
			return getFeatureLabel((EStructuralFeature)eObject);
		}
		else if(eObject instanceof ENamedElement) {
			return qualifiedName((ENamedElement)eObject, new StringBuffer()).toString();
		}
		
		String displayName = toDisplayName(eObject);		
		return (displayName != null) ? displayName : EcoreUtil.getIdentification(eObject);
	}

	public String getValueLabel(EDataType eDataType, Object value) {
		return EcoreUtil.convertToString(eDataType, value);
	}

	private static StringBuffer qualifiedName(ENamedElement namedElement, StringBuffer buf) {
		if(buf == null) {
			buf = new StringBuffer();
		}
		EObject container = namedElement.eContainer();
		if(container instanceof ENamedElement) {
			ENamedElement owner = (ENamedElement)container;
			qualifiedName(owner, buf);
			buf.append("::"); //$NON-NLS-1$			
		} 
		
		buf.append(namedElement.getName());
		return buf;
	}
	
	private static String toDisplayName(EObject eObject) {
		IItemLabelProvider labelAdapter = (IItemLabelProvider)EcoreUtil.getRegisteredAdapter(EcorePackage.eINSTANCE.getEAnnotation(), IItemLabelProvider.class);
		if(labelAdapter == null) {
			labelAdapter = (IItemLabelProvider)ECORE_FACTORY.adapt(eObject, IItemLabelProvider.class);
		}
		String label = null;
		try {
			label = labelAdapter.getText(eObject);
		} catch(RuntimeException e) {
			// Ensure fault isolation of the item provider
			label = EcoreUtil.getIdentification(eObject);
		}
		return label;
	}
	
	public static final String getTextLabel(Object obj) {
		return (obj instanceof EObject) ? INSTANCE.getObjectLabel((EObject)obj) : String.valueOf(obj);
	}
}
@


1.2
log
@#159576 Constraint annotations in models should support severity levels
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
d91 1
a91 1
}@


1.1
log
@gmf.validation plugin created
@
text
@d78 8
a85 1
		return labelAdapter.getText(eObject);
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@

