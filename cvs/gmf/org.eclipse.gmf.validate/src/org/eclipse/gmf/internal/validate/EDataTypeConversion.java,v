head	1.3;
access;
symbols
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080603-1553:1.3
	v20080507-2230:1.3
	v20080425-1959:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070520-1200:1.3
	v20070504-1000:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070208-1800:1.2
	M4_20:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.1
	v20061117-0800:1.1
	v20061027-1200:1.1.2.1
	v20061013-1330:1.1
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060831-1500:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1;
locks; strict;
comment	@# @;


1.3
date	2007.03.14.12.59.24;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	110745f7f1aa4567;

1.2
date	2006.11.20.17.30.41;	author radvorak;	state Exp;
branches;
next	1.1;
commitid	1fc64561e63f4567;

1.1
date	2006.05.18.13.58.29;	author radvorak;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.18;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *    Radek Dvorak (Borland) - initial API and implementation
 *    Artem Tikhomirov (Borland) - static-less
 */
package org.eclipse.gmf.internal.validate;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.util.EcoreUtil;

public class EDataTypeConversion {
	
	private final Class<?>[][] integralsToFloatsArray = new Class[][] { 
			new Class[] { Byte.class,	Float.class },
			new Class[] { Short.class, Float.class },
			new Class[] { Integer.class, Float.class },
			new Class[] { Long.class, Double.class },
			new Class[] { BigInteger.class, BigDecimal.class }
	};
	
	private final List<Class<?>> integrals = new ArrayList<Class<?>>();	

	private final List<Class<?>> floats = Arrays.asList(new Class<?>[] { 	
			Float.class, Double.class, BigDecimal.class,
	});		

	public EDataTypeConversion() {
		for (int i = 0; i < integralsToFloatsArray.length; i++) {
			integrals.add(integralsToFloatsArray[i][0]);
		}
	}
	
		
	
	public boolean isConvertable(EDataType leftDataType, EDataType rightDataType) {
		if(leftDataType == null || rightDataType == null) {
			throw new IllegalArgumentException("null data type"); //$NON-NLS-1$
		}
		if(leftDataType.getInstanceClass() == null || rightDataType.getInstanceClass() == null) {
			return false;
		}
		Class<?> leftClass = EcoreUtil.wrapperClassFor(leftDataType.getInstanceClass());
		Class<?> rightClass = EcoreUtil.wrapperClassFor(rightDataType.getInstanceClass());
		if(Number.class.isAssignableFrom(leftClass) && Number.class.isAssignableFrom(leftClass)) {
			return isConvertable(leftClass, rightClass);
		}
		return leftClass.equals(rightClass);
	}
	
	private boolean isConvertable(Class<?> left, Class<?> right) {
		if(left == null || right == null) {
			throw new IllegalArgumentException("null Class argument"); //$NON-NLS-1$
		}
		
		int leftPos = integrals.indexOf(left);
		int rightPos = integrals.indexOf(right);		
		if(leftPos >= 0) {
			if(rightPos < 0) {
				return false;
			}
		} else {
			if((leftPos = floats.indexOf(left)) >= 0) {
				// left is float
				if(rightPos >= 0) {
					// convert right int to float
					rightPos = floats.indexOf(integralsToFloatsArray[rightPos][1]);
				} else {
					if((rightPos = floats.indexOf(right)) < 0) {
						return false;
					}
				}
				return leftPos >= rightPos;				
			}			
		}
		
		return left.isAssignableFrom(right);
	}
}@


1.2
log
@[164840] Migrate 'org.eclipse.gmf.validate' plugin to Java 5
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
d11 1
d26 1
a26 1
	private static final Class[][] integralsToFloatsArray = new Class[][] { 
d34 7
a40 2
	private static final List<Class> integrals = new ArrayList<Class>();	
	static {
a45 3
	private static final List floats = Arrays.asList(new Class[] { 	
		Float.class, Double.class, BigDecimal.class,
	});		
d48 1
a48 1
	public static boolean isConvertable(EDataType leftDataType, EDataType rightDataType) {
d55 2
a56 2
		Class leftClass = EcoreUtil.wrapperClassFor(leftDataType.getInstanceClass());
		Class rightClass = EcoreUtil.wrapperClassFor(rightDataType.getInstanceClass());
d63 1
a63 1
	private static boolean isConvertable(Class<?> left, Class<?> right) {
@


1.1
log
@gmf.validation plugin created
@
text
@d33 1
a33 1
	private static final List integrals = new ArrayList();	
d60 1
a60 1
	private static boolean isConvertable(Class left, Class right) {
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@

