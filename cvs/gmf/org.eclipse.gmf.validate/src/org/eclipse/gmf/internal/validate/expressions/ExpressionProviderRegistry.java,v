head	1.4;
access;
symbols
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080603-1553:1.4
	v20080507-2230:1.4
	v20080425-1959:1.4
	v20080417-1610:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.3
	v20070601-1400:1.3
	v20070520-1200:1.3
	v20070504-1000:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070208-1800:1.2
	M4_20:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.1
	v20061117-0800:1.1
	v20061027-1200:1.1.2.1
	v20061013-1330:1.1
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060831-1500:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1;
locks; strict;
comment	@# @;


1.4
date	2007.06.21.14.09.58;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	1941467a86b54567;

1.3
date	2007.03.14.12.59.24;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	110745f7f1aa4567;

1.2
date	2006.11.20.17.30.41;	author radvorak;	state Exp;
branches;
next	1.1;
commitid	1fc64561e63f4567;

1.1
date	2006.05.18.13.58.28;	author radvorak;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.18;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.4
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *    Radek Dvorak (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.validate.expressions;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.InvalidRegistryObjectException;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Status;
import org.eclipse.gmf.internal.validate.GMFValidationPlugin;
import org.eclipse.osgi.util.NLS;

/**
 * This class maintains all contribution to
 * <code>org.eclipse.gmf.validate.expressions</code> extension point.
 * <p>
 * It collects all contributions of all providers at this class initialization
 * time. It only creates and caches only descriptors of provider implementations.
 * A provider itself is initialized lazily on demand.
 */
public class ExpressionProviderRegistry {
	private static final ExpressionProviderRegistry INSTANCE = new ExpressionProviderRegistry(); 
			
	private Map<String, Descriptor> registry;
	
	private ExpressionProviderRegistry() {
		registry = new HashMap<String, Descriptor>();
		initialiaze();
	}
	
	/**
	 * Gets the instance of providers registry.
	 */
	public static ExpressionProviderRegistry getInstance() {
		return INSTANCE;
	}
	
	/**
	 * Gets the provider for the given language.
	 * 
	 * @@param language
	 *            the identifier of the language
	 * @@return the provider supporting expressions in the given language or
	 *         <code>null</code> if no such provider is found
	 */
	public IModelExpressionProvider getProvider(String language) {
		Descriptor descriptor = getDescriptor(language);
		if(descriptor != null && descriptor.getStatus().isOK()) {
			return descriptor.getProvider();
		}
		return null;
	}
	
	/**
	 * Gets supported expression languages by providers in this registry.
	 * @@return set of language identifiers strings, never <code>null</code>
	 */
	public Set<String> getLanguages() {
		return registry.keySet();
	}
	
	/**
	 * Gets descriptor of the provider supporting the given language.
	 * 
	 * @@param language
	 *            the identifier of the expression language whose provider is to
	 *            be retrieved
	 * @@return corresponding provider descriptor or <code>null</code> if no
	 *         such provider is found.
	 */
	public Descriptor getDescriptor(String language) {
		return registry.get(language); 
	}
	
	
	private void initialiaze() {
		IConfigurationElement[] configs = Platform.getExtensionRegistry().getConfigurationElementsFor(
				Descriptor.GLOBAL_EXTENSION_ID);
		for (int i = 0; i < configs.length; i++) {
			IConfigurationElement element = configs[i];
			Descriptor descriptor = new Descriptor(element);
			if(descriptor.getStatus().isOK()) {
				String lang = descriptor.getLanguage();
				assert lang != null;
				Descriptor currentDsc = registry.get(lang);				
				if(currentDsc == null) {
					registry.put(lang, descriptor);
				} else {
					String message = NLS.bind(Messages.providerAlreadyExistsIgnore, new Object[] { 
						currentDsc.getProviderClassName(), lang, 
						descriptor.getProviderClassName() 
					});
					GMFValidationPlugin.log(GMFValidationPlugin.createStatus(IStatus.ERROR, 0, message, null));
				}
			}
		}
		registry = Collections.unmodifiableMap(registry);
	}	
	
	static class Descriptor {
		static final String EXTENSION_ID = "expressionProviders"; //$NON-NLS-1$	
		static final String GLOBAL_EXTENSION_ID = GMFValidationPlugin.getPluginId() + "." + EXTENSION_ID; //$NON-NLS-1$ 

		public static final String ATTR_CLASS = "class"; //$NON-NLS-1$
		public static final String ATTR_LANGUAGE = "language"; //$NON-NLS-1$
		public static final String ATTR_REQUIRES_MODEL_CLASS = "requiresModelClass"; //$NON-NLS-1$		
		public static final String ATTR_NAME = "name"; //$NON-NLS-1$		
		public static final String ATTR_DESCRIPTION = "description"; //$NON-NLS-1$		
		public static final String ATTR_LOOSELY_TYPED = "isLooselyTyped"; //$NON-NLS-1$		
			
		private IConfigurationElement configElement;
		private String language;
		private String className;
		private boolean modelReflection;
		private boolean isLooselyTyped;		
		private String name;
		private String description;		
		private IStatus status;		
		private IModelExpressionProvider provider;
		
		Descriptor(IConfigurationElement config) { 
			this.status = Status.OK_STATUS;
			try {
				configure(config);
			} catch (InvalidRegistryObjectException e) {
				GMFValidationPlugin.log(IStatus.ERROR, Messages.initDescriptorFailure, e);				
			}
		}

		public IStatus getStatus() {
			return status;
		}		
		
		public String getLanguage() {
			return language;
		}
		
		public boolean supportsModelReflection() {
			return modelReflection;
		}
		
		public boolean isLooselyTyped() {
			return isLooselyTyped;
		}
		
		public String getProviderClassName() {
			return className;
		}
		
		public String getName() {
			return name;
		}
		
		public String getDescription() {
			return description;
		}
			
		IModelExpressionProvider getProvider() {
			if(provider == null && getStatus().isOK()) {
				try {
					provider = (IModelExpressionProvider)configElement.createExecutableExtension(ATTR_CLASS);	
				} catch(CoreException e) {					
					String message = NLS.bind(Messages.providerCreationFailure, getProviderClassName());
					GMFValidationPlugin.log(IStatus.ERROR, message, e);
				}
			}
			return provider;
		}
				
		private void configure(IConfigurationElement config) {
			this.configElement = config;
			language = configElement.getAttribute(ATTR_LANGUAGE);
			if(language == null || language.trim().length() == 0) {
				this.status = GMFValidationPlugin.createStatus(IStatus.ERROR, 0, 
						Messages.missingProviderLanguage, null);
			}
			className = config.getAttribute(ATTR_CLASS);
			if(className == null || className.trim().length() == 0) {
				this.status = GMFValidationPlugin.createStatus(IStatus.ERROR, 0, 
						Messages.missingProviderClass, null);
			}
			
			modelReflection = "true".equals(config.getAttribute(ATTR_REQUIRES_MODEL_CLASS)); //$NON-NLS-1$
			isLooselyTyped = "true".equals(config.getAttribute(ATTR_LOOSELY_TYPED)); //$NON-NLS-1$
			name = config.getAttribute(ATTR_NAME);
			description = config.getAttribute(ATTR_DESCRIPTION);						
		}	
	}
}
@


1.3
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
d204 1
a204 1
}@


1.2
log
@[164840] Migrate 'org.eclipse.gmf.validate' plugin to Java 5
@
text
@d73 1
a73 1
	public Set getLanguages() {
@


1.1
log
@gmf.validation plugin created
@
text
@d39 1
a39 1
	private Map registry;
d42 1
a42 1
		registry = new HashMap();
d87 1
a87 1
		return (Descriptor)registry.get(language); 
d100 1
a100 1
				Descriptor currentDsc = (Descriptor)registry.get(lang);				
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@

