head	1.6;
access;
symbols
	v20080722-1827:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080603-1553:1.6
	v20080507-2230:1.6
	v20080425-1959:1.6
	v20080417-1610:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.5
	v20070601-1400:1.5
	v20070520-1200:1.5
	v20070504-1000:1.5
	v20070405-1100:1.5
	v20070330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070208-1800:1.4
	M4_20:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061027-1200:1.1.2.1
	v20061013-1330:1.3
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060831-1500:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1;
locks; strict;
comment	@# @;


1.6
date	2007.06.21.14.09.59;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	1941467a86b54567;

1.5
date	2007.03.14.12.59.24;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	110745f7f1aa4567;

1.4
date	2007.01.23.12.31.55;	author radvorak;	state Exp;
branches;
next	1.3;
commitid	552545b6003a4567;

1.3
date	2006.10.06.14.15.54;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.05.22.41.35;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.18.13.58.30;	author radvorak;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.18;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.6
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *    Radek Dvorak (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.validate;

import java.text.MessageFormat;
import java.util.Map;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.common.util.BasicDiagnostic;
import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EModelElement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.EValidator;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.internal.validate.expressions.ExpressionProviderRegistry;
import org.eclipse.gmf.internal.validate.expressions.IModelExpression;
import org.eclipse.gmf.validate.ValidationOptions;
import org.eclipse.osgi.util.NLS;

/**
 * This validator extends the checker for basic EObject constraints
 * with validation of OCL constraint annotation. 
 * 
 * @@author dvorak
 */
public class AnnotatedOclValidator extends AbstractValidator implements EValidator {	
	
	/**
	 * Handles elements related to OCL annotations 
	 */
	private static ConstraintHandler oclHandler = new ConstraintHandler();
		
	/**
	 * Constructs validator
	 */
	public AnnotatedOclValidator() {
	}
			
	public boolean validate(EDataType eDataType, Object value, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return true;
	}

	public boolean validate(EObject eObject, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return validate(eObject.eClass(), eObject, diagnostics, context);
	}
	
	public boolean validate(EClass eClass, EObject eObject, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return validateOCL(eObject, diagnostics, context);
	}

	/**
	 * Performs <code>OCL annotation checks on the given object</code>
	 * </p>
	 * @@param eObject the subject for validation 
	 * @@param diagnostics diagnostics object to collect the results 
	 * @@param context the context of validation activity
	 * @@return <code>true</code>if object is valid; <code>false</code> otherwise
	 */
	protected boolean validateOCL(EObject eObject, final DiagnosticChain diagnostics, Map<Object, Object> context) {		
		if(eObject instanceof EAnnotation) {
			return oclHandler.handleEAnnotation((EAnnotation)eObject, diagnostics, context);
		}
		else if(eObject.eClass().getEPackage() != EcorePackage.eINSTANCE) {
			return oclHandler.handleMetaModel(eObject.eClass(), eObject, diagnostics, context);
		} 		
		
		return true;
	}	
		
	private static class ConstraintHandler {
		public ConstraintHandler() {}
		
		protected EClass getContextType(EModelElement constrainedElement) {
			if(constrainedElement instanceof EClass) {
				return (EClass)constrainedElement;
			} 
			else if(constrainedElement instanceof EStructuralFeature) {
				return ((EStructuralFeature)constrainedElement).getEContainingClass();
			}			
			return null;
		}
		
		protected boolean handleEAnnotation(EAnnotation annotation, DiagnosticChain diagnostics, Map<Object, Object> context) {
			return handleEAnnotation(annotation, null /* no instance to evaluate against */, diagnostics, context);
		}
		
		protected boolean handleEAnnotation(EAnnotation annotation, EObject contextInstance, DiagnosticChain diagnostics, Map<Object, Object> context) {
			if(!Annotations.CONSTRAINTS_URI.equals(annotation.getSource())) {
				return true;
			}

			boolean isValid = true;
			for(Map.Entry<String,String> nextDetail : annotation.getDetails()) {
				String key = String.valueOf(nextDetail.getKey());
				if(ExpressionProviderRegistry.getInstance().getLanguages().contains(key)) {
					String body = readBodyDetail(nextDetail, diagnostics);
					if(body != null) {
						EModelElement constrainedElement = annotation.getEModelElement();
						EClass contextClass = getContextType(constrainedElement);
						if(contextClass != null) {
							IModelExpression expression = getExpression(key, body, contextClass, context);
							assert expression != null;
							
							ConstraintAdapter constraint = new ConstraintAdapter(expression, 
									getDiagnosticSeverity(annotation, diagnostics), 
									getDescriptionDetail(annotation));																				
							if(contextInstance != null) {
								isValid &= handleConstraintDefition(constraint, contextInstance, diagnostics);								
								isValid &= handleConstrainedElement(constraint, contextInstance, diagnostics, context);
							} else {
								isValid &= handleConstraintDefition(constraint, nextDetail, diagnostics);								
							}
						} else {
							diagnostics.add(new BasicDiagnostic(
								Diagnostic.WARNING, DIAGNOSTIC_SOURCE, StatusCodes.INVALID_CONSTRAINT_CONTEXT, 
								MessageFormat.format(Messages.validation_ConstraintInInvalidContext,  
									new Object[] { LabelProvider.INSTANCE.getObjectLabel(constrainedElement) }),
									new Object[] { nextDetail }));					
						}
					} // end of body processing
				}
			}
			return isValid;
		}
		
		/**
		 * Gets Diagnostic.severity level from the given annotation
		 * 
		 * @@param constraintAnnotation annotation defining a constraint
		 * @@param diagnostics container for possible problems on the severity definition
		 * @@return Diagnostic.ERROR|WARN|INFO integer
		 * 
		 * @@see Diagnostic
		 */
		private static int getDiagnosticSeverity(EAnnotation constraintAnnotation, DiagnosticChain diagnostics) {
			int severity = IStatus.ERROR; // default and also fall-back value
			Object val = constraintAnnotation.getDetails().get(Annotations.SEVERITY);
			String strVal = (val instanceof String) ? ((String)val).trim() : null;
			if(Annotations.SEVERITY_INFO.equals(strVal)) {
				severity = Diagnostic.INFO;
			} else if(Annotations.SEVERITY_WARN.equals(strVal)) {
				severity = Diagnostic.WARNING;
			} else if(Annotations.SEVERITY_ERROR.equals(strVal)) {
				severity = Diagnostic.ERROR;
			} else if(strVal != null) {
				diagnostics.add(new BasicDiagnostic(Diagnostic.ERROR, DIAGNOSTIC_SOURCE, 
						StatusCodes.INVALID_CONSTRAINT_SEVERITY,
						NLS.bind(Messages.invalidConstraintSeverity, new Object[] { 
								strVal, Annotations.SEVERITY_ERROR, Annotations.SEVERITY_WARN, Annotations.SEVERITY_INFO})
						, new Object[] { val }));
			}
			return severity;
		}

		private static String getDescriptionDetail(EAnnotation annotation) {
			Object val = annotation.getDetails().get(Annotations.DESCRIPTION);
			return val != null ? String.valueOf(val) : null; 		
		}
		
		private static String readBodyDetail(Map.Entry<String, String> bodyEntry, DiagnosticChain diagnostics) {
			String body = bodyEntry.getValue();
			if(body != null && body.trim().length() > 0) {
				return body;
			}
			diagnostics.add(new BasicDiagnostic(Diagnostic.WARNING, 
					DIAGNOSTIC_SOURCE, StatusCodes.EMPTY_CONSTRAINT_BODY, 
					Messages.validation_EmptyExpressionBody,  
					new Object[] { bodyEntry }));
			return null;
		}
		
		protected boolean handleMetaModel(EClass eClass, EObject modelElement, DiagnosticChain diagnostics, Map<Object, Object> context) {
			boolean isValid = true;
			
			for (EAnnotation nextAnnocation : eClass.getEAnnotations()) {
				if(Annotations.CONSTRAINTS_URI.equals(nextAnnocation.getSource())) {
					isValid &= handleEAnnotation(nextAnnocation, modelElement, diagnostics, context);					
				}
			}
			// FIXME do not duplicate same &= handleEAnnotation three times, 
			for (EOperation nextOperation : eClass.getEOperations()) {
				for(EAnnotation annotation : nextOperation.getEAnnotations()) {
					if(Annotations.CONSTRAINTS_URI.equals(annotation.getSource())) {
						isValid &= handleEAnnotation(annotation, modelElement, diagnostics, context);						
					}
				}
			}
			
			for (EStructuralFeature nextFeature : eClass.getEStructuralFeatures()) {
				for(EAnnotation annotation : nextFeature.getEAnnotations()) {
					if(Annotations.CONSTRAINTS_URI.equals(annotation.getSource())) {
						isValid &= handleEAnnotation(annotation, modelElement, diagnostics, context);					
					}
				}
			}			
			
			for (EClass nextSuperType : eClass.getESuperTypes()) {
				isValid &= handleMetaModel(nextSuperType, modelElement, diagnostics, context); 
			}			
			
			return isValid;
		}
		


		protected boolean handleConstraintDefition(ConstraintAdapter constraintProxy, Object target, DiagnosticChain diagnostics) {			
			IStatus constraintStatus = constraintProxy.getStatus();

			if(Trace.shouldTrace(DebugOptions.META_DEFINITIONS)) {
				String msgPtn = "[metamodel-constraint] context={0} body={1}"; //$NON-NLS-1$
				Trace.trace(MessageFormat.format(msgPtn, new Object[] { 
					LabelProvider.INSTANCE.getObjectLabel(constraintProxy.getContext()), 
					constraintProxy.getBody() 
				}));
			}
			
			
			if(!constraintStatus.isOK()) {
				String message = MessageFormat.format(Messages.invalidExpressionBody, 
						new Object[] { constraintProxy.getBody(), 
						constraintStatus.getMessage() });
				diagnostics.add(new BasicDiagnostic(
						Diagnostic.ERROR, DIAGNOSTIC_SOURCE, constraintStatus.getCode(), 
						message, new Object[] { target }));
				return false;			
			} 
			
			return true;			
		}
		
		protected boolean handleConstrainedElement(ConstraintAdapter constraint, EObject constrainedElement, DiagnosticChain diagnostics, Map<Object, Object> context) {
			if(!constraint.isSatisfied(constrainedElement)) {
				String message = null;
				if(constraint.getDescription() == null) {
					message = MessageFormat.format(Messages.validation_ConstraintViolation, new Object[] { 
							constraint.getBody(), 
							LabelProvider.INSTANCE.getObjectLabel(constrainedElement) });
				} else {
					// TODO - user constraint ID as a key, support localication for messages
					message = constraint.getDescription(); 
				}
				diagnostics.add(new BasicDiagnostic(constraint.getSeverity(), DIAGNOSTIC_SOURCE, 
						StatusCodes.CONSTRAINT_VIOLATION, message, new Object[] { constrainedElement }));				
				return false;
			} else {
				ValidationOptions opts = getOptions(context);
				if(opts.isReportSuccess()) {
					diagnostics.add(new BasicDiagnostic(Diagnostic.OK, DIAGNOSTIC_SOURCE, StatusCodes.CONSTRAINT_SATISFIED,
							MessageFormat.format(Messages.validation_ConstraintSatisfied, new Object[] { 
								constraint.getBody(), LabelProvider.INSTANCE.getObjectLabel(constrainedElement) }), 
								new Object[] { constrainedElement }));
				}
			}
			
			return true;
		}
	}
}
@


1.5
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
d273 1
a273 1
}@


1.4
log
@[171372] Complete unit-tests for o.e.gmf.validate plug-in
@
text
@a14 1
import java.util.Iterator;
a20 1
import org.eclipse.emf.common.util.EList;
a29 1
import org.eclipse.emf.ecore.util.EObjectValidator;
d54 1
a54 4
	/* (non-Javadoc)
	 * @@see org.eclipse.emf.ecore.EValidator#validate(org.eclipse.emf.ecore.EDataType, java.lang.Object, org.eclipse.emf.common.util.DiagnosticChain, java.util.Map)
	 */
	public boolean validate(EDataType eDataType, Object value, DiagnosticChain diagnostics, Map context) {
d58 1
a58 4
	/* (non-Javadoc)
	 * @@see org.eclipse.emf.ecore.EValidator#validate(org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.DiagnosticChain, java.util.Map)
	 */
	public boolean validate(EObject eObject, DiagnosticChain diagnostics, Map context) {
d62 1
a62 4
	/**
	 * @@see EObjectValidator#validate(org.eclipse.emf.ecore.EClass, org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.DiagnosticChain, java.util.Map)
	 */
	public boolean validate(EClass eClass, EObject eObject, DiagnosticChain diagnostics, Map context) {
d74 1
a74 1
	protected boolean validateOCL(EObject eObject, final DiagnosticChain diagnostics, Map context) {		
d98 1
a98 1
		protected boolean handleEAnnotation(EAnnotation annotation, DiagnosticChain diagnostics, Map context) {
d102 1
a102 1
		protected boolean handleEAnnotation(EAnnotation annotation, EObject contextInstance, DiagnosticChain diagnostics, Map context) {
d108 1
a108 2
			for(Iterator it = annotation.getDetails().iterator(); it.hasNext();) {
				Map.Entry nextDetail = (Map.Entry)it.next();
d175 2
a176 2
		private static String readBodyDetail(Map.Entry bodyEntry, DiagnosticChain diagnostics) {
			String body = (String)bodyEntry.getValue();
d187 1
a187 1
		protected boolean handleMetaModel(EClass eClass, EObject modelElement, DiagnosticChain diagnostics, Map context) {
d190 1
a190 2
			for (Iterator it = eClass.getEAnnotations().iterator(); it.hasNext();) {
				EAnnotation nextAnnocation = (EAnnotation) it.next();
d195 3
a197 5
			
			for (Iterator it = eClass.getEOperations().iterator(); it.hasNext();) {
				EOperation nextOperation = (EOperation) it.next();
				for(Iterator annotIt = nextOperation.getEAnnotations().iterator(); annotIt.hasNext();) {
					EAnnotation annotation = (EAnnotation)annotIt.next();
d204 2
a205 4
			for (Iterator it = eClass.getEStructuralFeatures().iterator(); it.hasNext();) {
				EStructuralFeature nextFeature = (EStructuralFeature) it.next();
				for(Iterator annotIt = nextFeature.getEAnnotations().iterator(); annotIt.hasNext();) {
					EAnnotation annotation = (EAnnotation)annotIt.next();
d212 1
a212 3
			EList superTypes = eClass.getESuperTypes();
			for (Iterator it = superTypes.iterator(); it.hasNext();) {
				EClass nextSuperType = (EClass) it.next();
d246 1
a246 1
		protected boolean handleConstrainedElement(ConstraintAdapter constraint, EObject constrainedElement, DiagnosticChain diagnostics, Map context) {
@


1.3
log
@#159576 Constraint annotations in models should support severity levels
@
text
@d35 1
d137 1
a137 1
								isValid &= handleConstrainedElement(constraint, contextInstance, diagnostics);
d266 1
a266 1
		protected boolean handleConstrainedElement(ConstraintAdapter constraint, EObject constrainedElement, DiagnosticChain diagnostics) {
d280 9
a288 1
			} 
@


1.2
log
@#156284 [Validation] Multiple OCL constraint annnotations attached to EStructuralFeature should be supported
@
text
@d35 1
d131 3
a133 1
							ConstraintAdapter constraint = new ConstraintAdapter(expression);																				
d136 1
a136 2
								isValid &= handleConstrainedElement(constraint, contextInstance, 
												getDescriptionDetail(annotation), diagnostics);
d153 28
d265 1
a265 1
		protected boolean handleConstrainedElement(ConstraintAdapter constraint, EObject constrainedElement, String description, DiagnosticChain diagnostics) {
d268 1
a268 1
				if(description == null) {
d274 1
a274 1
					message = description; 
d276 1
a276 1
				diagnostics.add(new BasicDiagnostic(Diagnostic.ERROR, DIAGNOSTIC_SOURCE, 
@


1.1
log
@gmf.validation plugin created
@
text
@d38 1
a38 1
 * with validation of OCL constrain annotation. 
d175 1
a175 1
					handleEAnnotation(nextAnnocation, modelElement, diagnostics, context);					
d181 5
a185 3
				EAnnotation annotation = nextOperation.getEAnnotation(Annotations.CONSTRAINTS_URI);
				if(annotation != null) {
					isValid &= handleEAnnotation(annotation, modelElement, diagnostics, context);
d188 1
d191 5
a195 3
				EAnnotation annotation = nextFeature.getEAnnotation(Annotations.CONSTRAINTS_URI);
				if(annotation != null) {
					isValid &= handleEAnnotation(annotation, modelElement, diagnostics, context);
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@


