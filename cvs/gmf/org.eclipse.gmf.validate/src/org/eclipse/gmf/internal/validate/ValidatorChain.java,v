head	1.4;
access;
symbols
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080603-1553:1.4
	v20080507-2230:1.4
	v20080425-1959:1.4
	v20080417-1610:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.3
	v20070601-1400:1.3
	v20070520-1200:1.3
	v20070504-1000:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070208-1800:1.3
	M4_20:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061027-1200:1.2.2.1
	v20061013-1330:1.2
	v20060925-1700:1.2.2.1
	v20060919-0800:1.2.2.1
	M1_20:1.2
	v20060904-1500:1.2
	v20060831-1500:1.2
	v20060803-1200:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2;
locks; strict;
comment	@# @;


1.4
date	2007.06.21.14.09.59;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	1941467a86b54567;

1.3
date	2007.02.06.15.54.58;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	4f5945c8a4d14567;

1.2
date	2006.05.18.17.52.24;	author radvorak;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.05.18.13.58.30;	author radvorak;	state Exp;
branches;
next	;

1.2.2.1
date	2006.09.13.23.07.18;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.4
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *    Radek Dvorak (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.validate;

import java.text.MessageFormat;
import java.util.Map;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EValidator;
import org.eclipse.gmf.validate.ValidationOptions;

public class ValidatorChain implements EValidator {
	private static final String DIAGNOSTIC_SOURCE = "org.eclipse.gmf.validation.failure"; //$NON-NLS-1$
	
	private EValidator[] validatorList;
	private ValidationOptions options;
	
	public ValidatorChain(EValidator[] validators) {
		this(validators, null);
	}
	
	/**
	 * 
	 * @@param validators
	 * @@param options validation optiond or <code>null</code> if default should be used
	 */
	public ValidatorChain(EValidator[] validators, ValidationOptions options) {
		if(validators == null || validators.length == 0) {
			throw new IllegalArgumentException("No validators specified"); //$NON-NLS-1$
		}
		
		this.validatorList = new EValidator[validators.length];
		
		for (int i = 0; i < validators.length; i++) {
			EValidator nextValidator = validators[i];
			if(nextValidator == null) {
				throw new IllegalArgumentException("null validator passed"); //$NON-NLS-1$
			}
			validatorList[i] = nextValidator;
		}		
		
		this.options = options;
	}
	
	public boolean validate(EClass eClass, EObject eObject, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if(options != null && context != null) {
			AbstractValidator.setOptions(options, context);
		}
		
		boolean result = true;
		for (int i = 0; i < validatorList.length; i++) {
			EValidator nextValidator = validatorList[i];
			try {
				result &= nextValidator.validate(eClass, eObject, diagnostics, context);
			} catch (Exception e) {
				reportValidationFailure(eObject, diagnostics, e);
			}
		}
		return result;
	}

	public boolean validate(EDataType eDataType, Object value, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if(options != null && context != null) {
			AbstractValidator.setOptions(options, context);
		}
		
		boolean result = true;
		for (int i = 0; i < validatorList.length; i++) {
			EValidator nextValidator = validatorList[i];
			try {
				result &= nextValidator.validate(eDataType, value, diagnostics, context);
			} catch (Exception e) {
				reportValidationFailure(value, diagnostics, e);
			}			
		}
		return result;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.emf.ecore.EValidator#validate(org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.DiagnosticChain, java.util.Map)
	 */
	public boolean validate(EObject eObject, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if(options != null && context != null) {
			AbstractValidator.setOptions(options, context);
		}

		boolean result = true;
		for (int i = 0; i < validatorList.length; i++) {
			EValidator nextValidator = validatorList[i];
			try {
				result &= nextValidator.validate(eObject, diagnostics, context);
			} catch (Exception e) {
				reportValidationFailure(eObject, diagnostics, e);
			}			
		}
		return result;
	}
	
	private static void reportValidationFailure(Object objFailedToValidate, DiagnosticChain diagnostics, Exception failure) {
		String messagePtn = Messages.unexpectedValidationError;		
		String objLabel = null;
		try {
			// safe check because of ItemProviders possibly throwing exceptions 
			objLabel = LabelProvider.getTextLabel(objFailedToValidate);
		} catch(RuntimeException e) {
			objLabel = String.valueOf(objFailedToValidate);
			Trace.catching(DebugOptions.EXCEPTIONS_CATCHING, e);			
		}

		IStatus status = GMFValidationPlugin.createStatus(
				IStatus.ERROR, StatusCodes.UNEXPECTED_VALIDATION_ERROR, 
				MessageFormat.format(messagePtn, new Object[] { objLabel }), failure);

		diagnostics.add(DefUtils.statusToDiagnostic(status, DIAGNOSTIC_SOURCE, objFailedToValidate));
		GMFValidationPlugin.log(status);
		Trace.catching(DebugOptions.EXCEPTIONS_CATCHING, failure);
	}
}
@


1.3
log
@clear few warnings
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
@


1.2
log
@catch only unexpected RuntimeException
@
text
@d58 1
a58 4
	/* (non-Javadoc)
	 * @@see org.eclipse.emf.ecore.EValidator#validate(org.eclipse.emf.ecore.EClass, org.eclipse.emf.ecore.EObject, org.eclipse.emf.common.util.DiagnosticChain, java.util.Map)
	 */
	public boolean validate(EClass eClass, EObject eObject, DiagnosticChain diagnostics, Map context) {
d75 1
a75 4
	/* (non-Javadoc)
	 * @@see org.eclipse.emf.ecore.EValidator#validate(org.eclipse.emf.ecore.EDataType, java.lang.Object, org.eclipse.emf.common.util.DiagnosticChain, java.util.Map)
	 */
	public boolean validate(EDataType eDataType, Object value, DiagnosticChain diagnostics, Map context) {
d95 1
a95 1
	public boolean validate(EObject eObject, DiagnosticChain diagnostics, Map context) {
@


1.2.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@


1.1
log
@gmf.validation plugin created
@
text
@d124 1
a124 1
		} catch(Exception e) {
@

