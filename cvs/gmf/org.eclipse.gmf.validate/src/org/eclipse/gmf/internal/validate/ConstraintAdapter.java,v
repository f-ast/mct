head	1.5;
access;
symbols
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080603-1553:1.5
	v20080507-2230:1.5
	v20080425-1959:1.5
	v20080417-1610:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.4
	v20070601-1400:1.4
	v20070520-1200:1.4
	v20070504-1000:1.4
	v20070405-1100:1.4
	v20070330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.3
	v20070208-1800:1.2
	M4_20:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061027-1200:1.1.2.1
	v20061013-1330:1.2
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060831-1500:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1;
locks; strict;
comment	@# @;


1.5
date	2007.06.21.14.09.59;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	1941467a86b54567;

1.4
date	2007.03.21.23.23.57;	author radvorak;	state Exp;
branches;
next	1.3;
commitid	10c44601be8c4567;

1.3
date	2007.03.14.12.59.24;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	110745f7f1aa4567;

1.2
date	2006.10.06.14.15.54;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.18.13.58.29;	author radvorak;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.18;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.5
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *    Radek Dvorak (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.validate;

import java.text.MessageFormat;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.ETypedElement;
import org.eclipse.gmf.internal.validate.expressions.AbstractExpression;
import org.eclipse.gmf.internal.validate.expressions.IEvaluationEnvironment;
import org.eclipse.gmf.internal.validate.expressions.IModelExpression;

public class ConstraintAdapter extends AbstractExpression {
	private IModelExpression expression;
	private EClassifier resultType;
	private int severity;
	private String description;
	
	public ConstraintAdapter(IModelExpression expression, int severity, String description) {
		super(expression.getBody(), expression.getContext(), null);
		this.expression = expression;
		this.severity = severity;
		this.description = description;
		if(getStatus().isOK()) {
			this.resultType = expression.getResultType();				
			if(this.resultType != null && !expression.isLooselyTyped()) { 
				if(!resultType.isInstance(Boolean.TRUE)) {
					String msg = MessageFormat.format(
							Messages.invalidConstraintExprType, 
							new Object[] { resultType.getName(), getBody() }); 
					setStatus(new Status(IStatus.ERROR, 
							GMFValidationPlugin.getPluginId(),
							StatusCodes.INVALID_EXPRESSION_TYPE, msg, null));
				}
			}			
		}
	}
		
	public int getSeverity() {
		return severity;
	}
		
	public String getDescription() {
		return description;
	}
	
	public IStatus getStatus() {
		if(expression.getStatus().isOK()) {
			return super.getStatus();
		}
		return expression.getStatus();
	}
	
	public String getLanguage() {	
		return expression.getLanguage();
	}
	
	public boolean isLooselyTyped() {
		return expression.isLooselyTyped();
	}
	
	public boolean isAssignableToElement(ETypedElement typedElement) {
		return expression.isAssignableToElement(typedElement);
	}
	
	public boolean isAssignableTo(EClassifier ecoreType) {
		return expression.isAssignableTo(ecoreType);		
	}
	
	public EClassifier getResultType() {
		return resultType;
	}
	
	protected Object doEvaluate(Object context) {
		return expression.evaluate(context);
	}

	protected Object doEvaluate(Object context, IEvaluationEnvironment extEnvironment) {
		return expression.evaluate(context, extEnvironment);
	}
	
	public boolean isSatisfied(EObject context) {
		Object value = evaluate(context);
		return (value instanceof Boolean) ? ((Boolean)value).booleanValue() : false;
	}
}
@


1.4
log
@[178360] Get rid of deprecated code use in org.eclipse.gmf.validate plug-in
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
d98 1
a98 1
}@


1.3
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a20 2
import org.eclipse.emf.ocl.parser.EcoreEnvironment;
import org.eclipse.emf.ocl.types.TypesPackage;
d39 1
a39 2
				Class<?> resultClass = resultType.getInstanceClass();
				if(!(Boolean.class.equals(resultClass) || boolean.class.equals(resultClass))) {
d75 1
a75 2
		EClassifier classifier = EcoreEnvironment.getOCLType(typedElement);
		return classifier != null ? classifier == TypesPackage.eINSTANCE.getPrimitiveBoolean() : false;
d79 1
a79 2
		EClassifier classifier = EcoreEnvironment.getOCLType(ecoreType);
		return classifier != null ? classifier == TypesPackage.eINSTANCE.getPrimitiveBoolean() : false;
@


1.2
log
@#159576 Constraint annotations in models should support severity levels
@
text
@d41 1
a41 1
				Class resultClass = resultType.getInstanceClass();
@


1.1
log
@gmf.validation plugin created
@
text
@d30 2
d33 1
a33 1
	public ConstraintAdapter(IModelExpression expression) {
d36 2
d54 7
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@

