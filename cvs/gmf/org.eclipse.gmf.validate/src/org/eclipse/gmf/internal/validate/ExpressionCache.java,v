head	1.4;
access;
symbols
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080603-1553:1.4
	v20080507-2230:1.4
	v20080425-1959:1.4
	v20080417-1610:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.3
	v20070601-1400:1.3
	v20070520-1200:1.3
	v20070504-1000:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.1
	v20061117-0800:1.1
	v20061027-1200:1.1.2.1
	v20061013-1330:1.1
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060831-1500:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1;
locks; strict;
comment	@# @;


1.4
date	2007.06.21.14.09.59;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	1941467a86b54567;

1.3
date	2007.03.19.16.49.07;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	5cb545febf024567;

1.2
date	2006.11.20.17.30.41;	author radvorak;	state Exp;
branches;
next	1.1;
commitid	1fc64561e63f4567;

1.1
date	2006.05.18.13.58.29;	author radvorak;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.18;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.4
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *    Radek Dvorak (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.validate;

import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.gmf.internal.validate.expressions.AbstractExpression;
import org.eclipse.gmf.internal.validate.expressions.IModelExpression;
import org.eclipse.gmf.internal.validate.expressions.IParseEnvironment;

/**
 * Cache for parsed OCL expressions, to be reused in evaluation for different
 * context instances.
 * 
 * @@author dvorak
 */
public abstract class ExpressionCache {
	private Map<String, Object> body2Entries = new HashMap<String, Object>();

	protected ExpressionCache() {
	}

	protected abstract IModelExpression createExpressionEntry(String body, EClassifier context, IParseEnvironment extEnv);

	/**
	 * Gets expression object for the given context type and expression body.
	 * </p>
	 * 
	 * @@param body
	 *            the expression body
	 * @@param context
	 *            the context type required for evaluation.
	 * 
	 * @@return the constraint proxy encapsulating the parsed constraint
	 *         expression
	 */
	public IModelExpression getExpression(String body, EClassifier context) {
		return getExpression(body, context, null);
	}

	/**
	 * Gets expression object for the given context type and expression
	 * body.
	 * </p>
	 * 
	 * @@param body
	 *            the expression body
	 * @@param context
	 *            the context type required for evaluation.
	 * @@param env
	 *            parsing environment providing custom variable definitions.
	 * 
	 * @@return the constraint proxy encapsulating the parsed constraint
	 *         expression
	 */
	@@SuppressWarnings("unchecked")
	public IModelExpression getExpression(String body, EClassifier context, IParseEnvironment env) {
		if (body == null || context == null) {
			throw new IllegalArgumentException("Null expression body or context"); //$NON-NLS-1$
		}

		IModelExpression resultEntry = null;

		if (body2Entries.containsKey(body)) {
			Object prev = body2Entries.get(body);
			if (prev instanceof AbstractExpression) {
				IModelExpression prevEntry = (AbstractExpression) prev;
				if (prevEntry.getContext() == context) {
					return prevEntry;
				}
			}
			List cachedEntries = (prev instanceof List) ? (List) prev : new LinkedList();
			if (cachedEntries.isEmpty()) {
				// only one previous with not matching context class
				// -> add previous and register the new one
				cachedEntries.add(prev);
				body2Entries.put(body, cachedEntries);
			} else {
				// try to find entry with appropriate context
				for (Iterator it = cachedEntries.iterator(); it.hasNext();) {
					AbstractExpression nextConstraint = (AbstractExpression) it.next();
					if (nextConstraint.getContext() == context) {
						return nextConstraint;
					}
				}
			}
			resultEntry = createExpressionEntry(body, context, env);
			cachedEntries.add(resultEntry);
			assert resultEntry != null;
			return resultEntry;
		}

		resultEntry = createExpressionEntry(body, context, env);
		body2Entries.put(body, resultEntry);
		return resultEntry;
	}
}
@


1.3
log
@EMF 2.3 M5 and Java 5 cleanup
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
d111 1
a111 1
}@


1.2
log
@[164840] Migrate 'org.eclipse.gmf.validate' plugin to Java 5
@
text
@d32 1
a32 1
	private Map body2Entries = new HashMap();
@


1.1
log
@gmf.validation plugin created
@
text
@d70 1
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@

