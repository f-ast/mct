head	1.7;
access;
symbols
	v20080722-1827:1.7
	R2_1_maintenance:1.7.0.4
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080603-1553:1.7
	v20080507-2230:1.7
	v20080425-1959:1.7
	v20080417-1610:1.7
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20080215-1500:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.6
	v20070601-1400:1.6
	v20070520-1200:1.6
	v20070504-1000:1.6
	v20070405-1100:1.6
	v20070330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.4
	v20070208-1800:1.3
	M4_20:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061027-1200:1.2.2.2
	v20061013-1330:1.2
	v20060925-1700:1.2.2.1
	v20060919-0800:1.2.2.1
	M1_20:1.2
	v20060904-1500:1.2
	v20060831-1500:1.2
	v20060803-1200:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2;
locks; strict;
comment	@# @;


1.7
date	2007.06.21.14.09.59;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	1941467a86b54567;

1.6
date	2007.04.04.15.40.01;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	215e4613c6d14567;

1.5
date	2007.03.21.23.23.57;	author radvorak;	state Exp;
branches;
next	1.4;
commitid	10c44601be8c4567;

1.4
date	2007.03.14.12.59.24;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	110745f7f1aa4567;

1.3
date	2006.10.24.17.11.53;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.30.19.09.13;	author radvorak;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.05.18.13.58.31;	author radvorak;	state Exp;
branches;
next	;

1.2.2.1
date	2006.09.13.23.07.18;	author rgronback;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2006.10.26.23.56.32;	author radvorak;	state Exp;
branches;
next	;


desc
@@


1.7
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *    Radek Dvorak (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.validate.ocl;

import java.text.MessageFormat;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EEnumLiteral;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EParameter;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.ETypedElement;
import org.eclipse.gmf.internal.validate.DebugOptions;
import org.eclipse.gmf.internal.validate.DefUtils;
import org.eclipse.gmf.internal.validate.EDataTypeConversion;
import org.eclipse.gmf.internal.validate.GMFValidationPlugin;
import org.eclipse.gmf.internal.validate.Messages;
import org.eclipse.gmf.internal.validate.StatusCodes;
import org.eclipse.gmf.internal.validate.Trace;
import org.eclipse.gmf.internal.validate.expressions.AbstractExpression;
import org.eclipse.gmf.internal.validate.expressions.IEvaluationEnvironment;
import org.eclipse.gmf.internal.validate.expressions.IParseEnvironment;
import org.eclipse.ocl.Environment;
import org.eclipse.ocl.ParserException;
import org.eclipse.ocl.Query;
import org.eclipse.ocl.ecore.CallOperationAction;
import org.eclipse.ocl.ecore.CollectionType;
import org.eclipse.ocl.ecore.Constraint;
import org.eclipse.ocl.ecore.EcoreEnvironmentFactory;
import org.eclipse.ocl.ecore.SendSignalAction;
import org.eclipse.ocl.ecore.TypeType;
import org.eclipse.ocl.expressions.ExpressionsFactory;
import org.eclipse.ocl.expressions.Variable;

class OCLExpressionAdapter extends AbstractExpression {
	/**
	 * The OCL language identifier.
	 */
	public static final String OCL = "ocl"; //$NON-NLS-1$
	
	private Query<EClassifier, EClass, EObject> query;
	private Environment<EPackage, EClassifier, EOperation, EStructuralFeature, EEnumLiteral, EParameter, EObject, 
				CallOperationAction, SendSignalAction, Constraint, EClass, EObject> env;
	
	public OCLExpressionAdapter(String body, EClassifier context, IParseEnvironment extEnv) {
		super(body, context, extEnv);
		
		try {
			EcoreEnvironmentFactory factory = EcoreEnvironmentFactory.INSTANCE;
			org.eclipse.ocl.ecore.OCL ocl = null;			
			
			if(extEnv != null) {
				if(extEnv.getImportRegistry() != null) { 					
					factory = new EcoreEnvironmentFactory(extEnv.getImportRegistry());
				}
				
				ocl = org.eclipse.ocl.ecore.OCL.newInstance(factory);
				this.env = ocl.getEnvironment(); 
				
				for(String varName : extEnv.getVariableNames()) {
					EClassifier type = extEnv.getTypeOf(varName);
					
					Variable<EClassifier, EParameter> varDecl = ExpressionsFactory.eINSTANCE.createVariable();
					varDecl.setName(varName);
					varDecl.setType(type);
					env.addElement(varDecl.getName(), varDecl, true);
				}
			} else {
				ocl = org.eclipse.ocl.ecore.OCL.newInstance(EcoreEnvironmentFactory.INSTANCE);
				this.env = ocl.getEnvironment();				
			}

			org.eclipse.ocl.ecore.OCL.Helper helper = ocl.createOCLHelper();
			helper.setContext(context);			
			this.query = ocl.createQuery(helper.createQuery(body));
			
		} catch (ParserException e) {
			setInvalidOclExprStatus(e);
		} catch (IllegalArgumentException e) {
			setInvalidOclExprStatus(e);				
		} catch(RuntimeException e) {				
			setStatus(GMFValidationPlugin.createStatus(
					IStatus.ERROR, StatusCodes.UNEXPECTED_PARSE_ERROR, 
					Messages.unexpectedExprParseError, e));
			GMFValidationPlugin.log(getStatus());
			Trace.catching(DebugOptions.EXCEPTIONS_CATCHING, e);				
		}
	}
	
	public String getLanguage() {	
		return OCL;
	}
	
	public boolean isLooselyTyped() {	
		return false;
	}
	
	public boolean isAssignableTo(EClassifier ecoreType) {
		if(env == null) {
			return false;
		}
		
		EClassifier oclType =  env.getUMLReflection().getOCLType(ecoreType);
		if(oclType == null) {
			return false;
		}
		return isOclConformantTo(oclType);			
	}
	
	public boolean isAssignableToElement(ETypedElement typedElement) {
		if(env == null || typedElement.getEType() == null) {
			return false;
		}
		EClassifier oclType = env.getUMLReflection().getOCLType(typedElement);
		if(oclType == null) {
			return false;
		}
		return isOclConformantTo(oclType);
	}
	
	public EClassifier getResultType() {	
		return (query != null) ? query.getExpression().getType() : super.getResultType();
	}
	
	protected Object doEvaluate(Object context) {
		return filterOCLInvalid((query != null) ? query.evaluate(context) : null);
	}
	
	protected Object doEvaluate(Object context, IEvaluationEnvironment extEnvironment) {
		if(query != null) {
			query.getEvaluationEnvironment().clear();			
			for (String varName : extEnvironment.getVariableNames()) {
				query.getEvaluationEnvironment().add(varName, extEnvironment.getValueOf(varName));
			}
		}

		return doEvaluate(context);
	}
	
	private Object filterOCLInvalid(Object object) {
		return (env != null && object == env.getOCLStandardLibrary().getOclInvalid()) ? null : object;
	}

	private boolean isOclConformantTo(EClassifier anotherOclType) {
		EClassifier thisOclType = getResultType();
		
		boolean isTargetCollection = anotherOclType instanceof CollectionType; 
		if(isTargetCollection) {
			CollectionType oclCollectionType = (CollectionType)anotherOclType;
			if(oclCollectionType.getElementType() != null) {
				anotherOclType = oclCollectionType.getElementType();
			}
		}
		
		if(thisOclType instanceof CollectionType) {
			if(!isTargetCollection) {
				return false; // can't assign CollectionType to scalar
			}
			CollectionType thisOclCollectionType = (CollectionType)thisOclType;
			if(thisOclCollectionType.getElementType() != null) {
				thisOclType = thisOclCollectionType.getElementType();
			}
		}

		// handle OCL TypeType
		if(thisOclType instanceof TypeType) {
			EClassifier thisRefferedClassifier = ((TypeType)thisOclType).getReferredType();	
			if(thisRefferedClassifier != null) {
				return DefUtils.getCanonicalEClassifier(anotherOclType).isInstance(thisRefferedClassifier);
			}
		}
		
		// Note: in OCL, Double extends Integer
		if ((thisOclType.getInstanceClass() == Integer.class ||
				thisOclType.getInstanceClass() == int.class) && 
			(anotherOclType.getInstanceClass() == Double.class || 
				anotherOclType.getInstanceClass() == double.class)) {
			return true;
		}
		
		if(thisOclType instanceof EDataType && anotherOclType instanceof EDataType) {
			if(new EDataTypeConversion().isConvertable((EDataType)anotherOclType, (EDataType)thisOclType)) {
				return true;
			}
		}
		
		return DefUtils.checkTypeAssignmentCompatibility(anotherOclType, thisOclType);			
	}
	
	
	void setInvalidOclExprStatus(Exception exception) {
		String message = MessageFormat.format(
				Messages.invalidExpressionBody, 
				new Object[] { getBody(), exception.getLocalizedMessage() });
		
		setStatus(GMFValidationPlugin.createStatus(
				IStatus.ERROR, StatusCodes.INVALID_VALUE_EXPRESSION, message, exception));
		Trace.catching(DebugOptions.EXCEPTIONS_CATCHING, exception);			
	}
}
@


1.6
log
@unnecessary cast
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
d214 1
a214 1
}@


1.5
log
@[178360] Get rid of deprecated code use in org.eclipse.gmf.validate plug-in
@
text
@a42 1
import org.eclipse.ocl.ecore.EcoreEnvironment;
d84 1
a84 1
				this.env = (EcoreEnvironment)ocl.getEnvironment();				
@


1.4
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a14 1
import java.util.Iterator;
d17 1
d20 6
a26 20
import org.eclipse.emf.ocl.expressions.CollectionItem;
import org.eclipse.emf.ocl.expressions.CollectionLiteralExp;
import org.eclipse.emf.ocl.expressions.CollectionLiteralPart;
import org.eclipse.emf.ocl.expressions.ExpressionsFactory;
import org.eclipse.emf.ocl.expressions.OCLExpression;
import org.eclipse.emf.ocl.expressions.TypeExp;
import org.eclipse.emf.ocl.expressions.Variable;
import org.eclipse.emf.ocl.expressions.util.ExpressionsUtil;
import org.eclipse.emf.ocl.parser.EcoreEnvironment;
import org.eclipse.emf.ocl.parser.EcoreEnvironmentFactory;
import org.eclipse.emf.ocl.parser.Environment;
import org.eclipse.emf.ocl.parser.EnvironmentFactory;
import org.eclipse.emf.ocl.parser.ParserException;
import org.eclipse.emf.ocl.parser.SemanticException;
import org.eclipse.emf.ocl.query.Query;
import org.eclipse.emf.ocl.query.QueryFactory;
import org.eclipse.emf.ocl.types.CollectionType;
import org.eclipse.emf.ocl.types.TypeType;
import org.eclipse.emf.ocl.types.impl.TypeUtil;
import org.eclipse.emf.ocl.types.util.Types;
d37 12
d56 3
a58 1
	private Query query;
d64 13
a76 10
			if(extEnv == null) {
				this.query = QueryFactory.eINSTANCE.createQuery(body, context);
			} else {
				EnvironmentFactory factory = extEnv.getImportRegistry() == null ?
						EnvironmentFactory.ECORE_INSTANCE : new EcoreEnvironmentFactory(extEnv.getImportRegistry());
				Environment env = factory.createClassifierContext(context);

				for (Iterator it = extEnv.getVariableNames().iterator(); it.hasNext();) {
					String varName = (String)it.next();
					EClassifier type = extEnv.getTypeOf(varName);				
d78 1
a78 1
					Variable varDecl = ExpressionsFactory.eINSTANCE.createVariable();
d81 1
a81 1
					env.addElement(varDecl.getName(), varDecl, false);
d83 3
a85 2
				OCLExpression oclExpression = ExpressionsUtil.createQuery(env, body, true);
				this.query = QueryFactory.eINSTANCE.createQuery(oclExpression);
d87 5
d114 5
a118 1
		EClassifier oclType = EcoreEnvironment.getOCLType(ecoreType);
d126 4
a129 1
		EClassifier oclType = EcoreEnvironment.getOCLType(typedElement);
d145 7
a151 1
		// TODO - add custom variables !!!
d155 2
a156 2
	private static Object filterOCLInvalid(Object object) {
		return object == Types.OCL_INVALID ? null : object;
d158 2
a159 2
	
	boolean isOclConformantTo(EClassifier anotherOclType) {
d180 1
a180 1
		// handle OCL TypeType meta-types
d182 1
a182 4
			// There is no way of getting the reffered type directly from the TypeType
			// Handle only, TypeExp here as there should be no other use-case producing TypeType 
			// except for the type literal.			
			EClassifier thisRefferedClassifier = getReferredType(query.getExpression());	
a204 31
	static EClassifier getReferredType(OCLExpression oclExpression) {
		EClassifier referredType = null;
		if(oclExpression instanceof TypeExp) {
			// There is no way of getting the reffered type directly from the TypeType
			// Handle only, TypeExp here as there should be no other use-case producing TypeType 
			// except for the type literal.
			referredType = ((TypeExp)oclExpression).getReferredType();
		} else if(oclExpression instanceof CollectionLiteralExp) {
			for (Iterator it = ((CollectionLiteralExp)oclExpression).getPart().iterator(); it.hasNext();) {
				CollectionLiteralPart nextPart = (CollectionLiteralPart) it.next();
				
				if(nextPart.getType() instanceof TypeType && nextPart instanceof CollectionItem) {
					EClassifier nextType = getReferredType(((CollectionItem)nextPart).getItem());
					if(referredType == null) {
						referredType = nextType;
					} else {
						try {
							if(nextType != null) {
								referredType = TypeUtil.commonSuperType(referredType, nextType);
							}
						} catch (SemanticException e) {
							// Should never happen as the OCL expression should have been successfully parsed
							assert false;
							return null;
						}
					}
				}
			}
		}
		return referredType;
	}
@


1.3
log
@[161971] Validation of gmfmap::FeatureInitializer should correctly handle multivalued features
@
text
@d178 1
a178 1
			if(EDataTypeConversion.isConvertable((EDataType)anotherOclType, (EDataType)thisOclType)) {
@


1.2
log
@#144518 Support negation of 'regexp' in gmf models expressions
@
text
@d21 3
d26 1
d34 1
d37 3
d58 1
a58 1
	private Query query; 
d137 1
a137 1
	boolean isOclConformantTo(EClassifier oclType) {
d139 30
d170 4
a173 4
		if ((oclType.getInstanceClass() == Integer.class ||
			oclType.getInstanceClass() == int.class) && 
			(thisOclType.getInstanceClass() == Double.class || 
				thisOclType.getInstanceClass() == double.class)) {
d177 2
a178 2
		if(thisOclType instanceof EDataType && oclType instanceof EDataType) {
			if(EDataTypeConversion.isConvertable((EDataType)oclType, (EDataType)thisOclType)) {
d181 35
a215 2
		}		
		return DefUtils.checkTypeAssignmentCompatibility(oclType, thisOclType);			
@


1.2.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@


1.2.2.2
log
@[162496] Validation of gmfmap::FeatureInitializer should correctly handle multivalued features
@
text
@a20 3
import org.eclipse.emf.ocl.expressions.CollectionItem;
import org.eclipse.emf.ocl.expressions.CollectionLiteralExp;
import org.eclipse.emf.ocl.expressions.CollectionLiteralPart;
a22 1
import org.eclipse.emf.ocl.expressions.TypeExp;
a29 1
import org.eclipse.emf.ocl.parser.SemanticException;
a31 3
import org.eclipse.emf.ocl.types.CollectionType;
import org.eclipse.emf.ocl.types.TypeType;
import org.eclipse.emf.ocl.types.impl.TypeUtil;
d50 1
a50 1
	private Query query;
d129 1
a129 1
	boolean isOclConformantTo(EClassifier anotherOclType) {
a130 30
		
		boolean isTargetCollection = anotherOclType instanceof CollectionType; 
		if(isTargetCollection) {
			CollectionType oclCollectionType = (CollectionType)anotherOclType;
			if(oclCollectionType.getElementType() != null) {
				anotherOclType = oclCollectionType.getElementType();
			}
		}
		
		if(thisOclType instanceof CollectionType) {
			if(!isTargetCollection) {
				return false; // can't assign CollectionType to scalar
			}
			CollectionType thisOclCollectionType = (CollectionType)thisOclType;
			if(thisOclCollectionType.getElementType() != null) {
				thisOclType = thisOclCollectionType.getElementType();
			}
		}

		// handle OCL TypeType meta-types
		if(thisOclType instanceof TypeType) {
			// There is no way of getting the reffered type directly from the TypeType
			// Handle only, TypeExp here as there should be no other use-case producing TypeType 
			// except for the type literal.			
			EClassifier thisRefferedClassifier = getReferredType(query.getExpression());	
			if(thisRefferedClassifier != null) {
				return DefUtils.getCanonicalEClassifier(anotherOclType).isInstance(thisRefferedClassifier);
			}
		}
		
d132 4
a135 4
		if ((thisOclType.getInstanceClass() == Integer.class ||
				thisOclType.getInstanceClass() == int.class) && 
			(anotherOclType.getInstanceClass() == Double.class || 
				anotherOclType.getInstanceClass() == double.class)) {
d139 2
a140 2
		if(thisOclType instanceof EDataType && anotherOclType instanceof EDataType) {
			if(EDataTypeConversion.isConvertable((EDataType)anotherOclType, (EDataType)thisOclType)) {
d143 2
a144 35
		}
		
		return DefUtils.checkTypeAssignmentCompatibility(anotherOclType, thisOclType);			
	}
	
	static EClassifier getReferredType(OCLExpression oclExpression) {
		EClassifier referredType = null;
		if(oclExpression instanceof TypeExp) {
			// There is no way of getting the reffered type directly from the TypeType
			// Handle only, TypeExp here as there should be no other use-case producing TypeType 
			// except for the type literal.
			referredType = ((TypeExp)oclExpression).getReferredType();
		} else if(oclExpression instanceof CollectionLiteralExp) {
			for (Iterator it = ((CollectionLiteralExp)oclExpression).getPart().iterator(); it.hasNext();) {
				CollectionLiteralPart nextPart = (CollectionLiteralPart) it.next();
				
				if(nextPart.getType() instanceof TypeType && nextPart instanceof CollectionItem) {
					EClassifier nextType = getReferredType(((CollectionItem)nextPart).getItem());
					if(referredType == null) {
						referredType = nextType;
					} else {
						try {
							if(nextType != null) {
								referredType = TypeUtil.commonSuperType(referredType, nextType);
							}
						} catch (SemanticException e) {
							// Should never happen as the OCL expression should have been successfully parsed
							assert false;
							return null;
						}
					}
				}
			}
		}
		return referredType;
@


1.1
log
@gmf.validation plugin created
@
text
@d44 1
a44 1
public class OCLExpressionAdapter extends AbstractExpression {
@

