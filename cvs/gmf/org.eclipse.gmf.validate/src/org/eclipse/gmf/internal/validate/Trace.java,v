head	1.3;
access;
symbols
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080603-1553:1.3
	v20080507-2230:1.3
	v20080425-1959:1.3
	v20080417-1610:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.2
	v20070601-1400:1.2
	v20070520-1200:1.2
	v20070504-1000:1.2
	v20070405-1100:1.2
	v20070330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.1
	v20061117-0800:1.1
	v20061027-1200:1.1.2.1
	v20061013-1330:1.1
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060831-1500:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1;
locks; strict;
comment	@# @;


1.3
date	2007.06.21.14.09.59;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	1941467a86b54567;

1.2
date	2006.11.20.17.30.41;	author radvorak;	state Exp;
branches;
next	1.1;
commitid	1fc64561e63f4567;

1.1
date	2006.05.18.13.58.29;	author radvorak;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.18;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.3
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *    Radek Dvorak (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.validate;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Plugin;

/**
 * A utility for tracing debug information, filtering and generating trace output. 
 */
public class Trace {
	
	private static final Plugin plugin = GMFValidationPlugin.getDefault();
	
	/**
	 * private constructor for the static class.
	 */
	private Trace() {
		super();
	}
	
	/**
	 * String containing an open parenthesis.
	 * 
	 */
	private static final String PARENTHESIS_OPEN = "("; //$NON-NLS-1$

	/**
	 * String containing a close parenthesis.
	 * 
	 */
	private static final String PARENTHESIS_CLOSE = ")"; //$NON-NLS-1$

	/**
	 * Prefix for tracing the catching of throwables.
	 * 
	 */
	private static final String PREFIX_CATCHING = "CAUGHT "; //$NON-NLS-1$

	/**
	 * Separator containing a space.
	 * 
	 */
	private static final String SEPARATOR_SPACE = " "; //$NON-NLS-1$
	
	/**
	 * The cached debug options (for optimization).
	 */
	private static final Map<String, Boolean> cachedOptions = new HashMap<String, Boolean>();

	/**
	 * Retrieves a Boolean value indicating whether tracing is enabled.
	 * 
	 * @@return Whether tracing is enabled. 
	 */
	protected static boolean shouldTrace() {
		return plugin.isDebugging();
	}

	/**
	 * Retrieves a Boolean value indicating whether tracing is enabled for the
	 * specified debug option.
	 * 
	 * @@return Whether tracing is enabled for the debug option.
	 * @@param option The debug option for which to determine trace enablement.
	 * 
	 */
	public static boolean shouldTrace(String option) {
		if (shouldTrace()) {
			Boolean value = null;
			
			synchronized (cachedOptions) {
				value = cachedOptions.get(option);
	
				if (null == value) {
					value = Boolean.valueOf(Platform.getDebugOption(option));
	
					cachedOptions.put(option, value);
				}
			}
			
			return value.booleanValue();
		}

		return false;
	}

	/**
	 * Traces the specified message from the specified plug-in.
	 * 
	 * @@param plugin The plug-in from which to trace.
	 * @@param message The message to be traced.
	 */
	public static void trace(String message) {
		if (shouldTrace()) {
			System.out.println(message);
		}
	}

	/**
	 * Traces the specified message for the specified
	 * debug option.
	 * 
	 * @@param option The debug option for which to trace.
	 * @@param message The message to be traced.
	 */
	public static void trace(String option, String message) {
		if (shouldTrace(option)) {
			trace(message);
		}
	}
	
	/**
	 * Traces the catching of the specified throwable.
	 * 
	 * @@param option The debug option for which to trace.
	 * @@param throwable The throwable that is being caught. 
	 */
	public static void catching(
		String option,
		Throwable throwable) {

		if (shouldTrace(option)) {

			trace(
				PREFIX_CATCHING
					+ SEPARATOR_SPACE				
					+ PARENTHESIS_OPEN
					+ throwable.getMessage()
					+ PARENTHESIS_CLOSE);
			throwable.printStackTrace(System.err);
		}
	}
}
@


1.2
log
@[164840] Migrate 'org.eclipse.gmf.validate' plugin to Java 5
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
@


1.1
log
@gmf.validation plugin created
@
text
@d61 1
a61 1
	private static final Map cachedOptions = new HashMap();
d85 1
a85 1
				value = (Boolean) cachedOptions.get(option);
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@

