head	1.5;
access;
symbols
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.4
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080603-1553:1.5
	v20080507-2230:1.5
	v20080425-1959:1.5
	v20080417-1610:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.4
	v20070601-1400:1.4
	v20070520-1200:1.4
	v20070504-1000:1.4
	v20070405-1100:1.4
	v20070330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.3
	v20070208-1800:1.2
	M4_20:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.1
	v20061117-0800:1.1
	v20061027-1200:1.1.2.1
	v20061013-1330:1.1
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060831-1500:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1;
locks; strict;
comment	@# @;


1.5
date	2007.06.21.14.09.59;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	1941467a86b54567;

1.4
date	2007.03.21.23.23.57;	author radvorak;	state Exp;
branches;
next	1.3;
commitid	10c44601be8c4567;

1.3
date	2007.03.14.12.59.24;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	110745f7f1aa4567;

1.2
date	2006.11.20.17.30.41;	author radvorak;	state Exp;
branches;
next	1.1;
commitid	1fc64561e63f4567;

1.1
date	2006.05.18.13.58.29;	author radvorak;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.23.07.18;	author rgronback;	state Exp;
branches;
next	;


desc
@@


1.5
log
@fix copyright years
@
text
@/*
 * Copyright (c) 2005, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *    Radek Dvorak (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.validate.expressions;

import java.util.HashMap;
import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EPackage;

/**
 * This class provides the client with parsing and evaluation environments.
 */
public class EnvironmentProvider {
	
	// no instances
	private EnvironmentProvider() {
	}
	
	/**
	 * Creates environment for parsing an expression.
	 * @@return the empty environment instance
	 */
	public static IParseEnvironment createParseEnv() {
		return new EnvImpl();
	}

	/**
	 * Creates environment for evaluating an expression.
	 * @@return the empty evaluation environment instance
	 */	
	public static IEvaluationEnvironment createEvaluationEnv() {
		return new EvalEnvImpl();
	}
		

	private static class EnvImpl extends HashMap<String, EClassifier> implements IParseEnvironment {
		private static final long serialVersionUID = 5282996418130231176L;
		
		private EPackage.Registry importReg;		
		EnvImpl() {
			super(5);			
		}
		
		public void setVariable(String name, EClassifier type) {
			if(type == null || type.getName() == null) {
				throw new IllegalArgumentException("Invalid EClassifier passed:" + type); //$NON-NLS-1$
			}
			if(name == null) {
				throw new IllegalArgumentException("null variable name passed"); //$NON-NLS-1$
			}
			
			put(name, type);
		}
		
		public EClassifier getTypeOf(String name) {		
			return get(name);
		}
		
		public Set<String> getVariableNames() {		
			return keySet();
		}
		
		public void clear() {		
			super.clear();
			importReg = null;
		}
		
		public EPackage.Registry getImportRegistry() {
			return importReg;
		}

		public void setImportRegistry(EPackage.Registry importReg) {
			this.importReg = importReg;
		}
	}
	
	private static class EvalEnvImpl extends HashMap<String, Object> implements IEvaluationEnvironment {
		private static final long serialVersionUID = 9087665669257460401L;

		EvalEnvImpl() {
			super(5);
		}
		
		public void setVariable(String name, Object value) {
			put(name, value);
		}
		
		public Object getValueOf(String name) {
			return get(name);
		}
		
		public Set<String> getVariableNames() {		
			return keySet();
		}		
		
		public void clear() {		
			super.clear();
		}
	}	
}
@


1.4
log
@[178360] Get rid of deprecated code use in org.eclipse.gmf.validate plug-in
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
@


1.3
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d47 2
d88 2
@


1.2
log
@[164840] Migrate 'org.eclipse.gmf.validate' plugin to Java 5
@
text
@d98 1
a98 1
		public Set getVariableNames() {		
@


1.1
log
@gmf.validation plugin created
@
text
@d46 1
a46 1
	private static class EnvImpl extends HashMap implements IParseEnvironment {
d64 1
a64 1
			return (EClassifier)get(name);
d67 1
a67 1
		public Set getVariableNames() {		
d85 1
a85 1
	private static class EvalEnvImpl extends HashMap implements IEvaluationEnvironment {
@


1.1.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@

