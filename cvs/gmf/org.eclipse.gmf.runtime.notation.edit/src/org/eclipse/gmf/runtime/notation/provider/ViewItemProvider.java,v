head	1.10;
access;
symbols
	v20081020-0700:1.10
	v20080722-1827:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080507-1326:1.10
	v20080503-1740:1.8
	v20080425-1959:1.7
	v20080407-2250:1.7
	v20080407-1545:1.7
	v20080328-1605:1.6
	v20080222-1200:1.5
	v20071130-1111:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060925-1700:1.3.2.2
	v20060919-0800:1.3.2.2
	M1_20:1.3
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.10
date	2008.05.07.01.04.42;	author ahunter;	state Exp;
branches;
next	1.9;
commitid	72c9482100244567;

1.9
date	2008.05.07.00.14.24;	author ahunter;	state Exp;
branches;
next	1.8;
commitid	3e714820f45b4567;

1.8
date	2008.05.03.18.32.44;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	1bf3481cafc54567;

1.7
date	2008.04.07.19.37.15;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	2d6147fa77eb4567;

1.6
date	2008.03.27.21.11.14;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	3a6947ec0d714567;

1.5
date	2007.05.17.16.26.43;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	71a8464c82414567;

1.4
date	2006.10.03.15.07.32;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.07.15.21.54;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.24;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.18.19.28;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.17.20.27.51;	author ahunter;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.48.19;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.10
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.notation.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.provider.EModelElementItemProvider;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ViewerNotification;

import org.eclipse.gmf.runtime.notation.NotationEditPlugin;
import org.eclipse.gmf.runtime.notation.NotationFactory;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;
/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.runtime.notation.View} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class ViewItemProvider
	extends EModelElementItemProvider
	implements
		IEditingDomainItemProvider,
		IStructuredItemContentProvider,
		ITreeItemContentProvider,
		IItemLabelProvider,
		IItemPropertySource {
    /**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ViewItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public List getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addStylesPropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

    /**
	 * This adds a property descriptor for the Visible feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addVisiblePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_visible_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_visible_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.Literals.VIEW__VISIBLE,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
				 null,
				 null));
	}

    /**
	 * This adds a property descriptor for the Type feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addTypePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_type_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_type_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.Literals.VIEW__TYPE,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

    /**
	 * This adds a property descriptor for the Mutable feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addMutablePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_mutable_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_mutable_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.Literals.VIEW__MUTABLE,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
				 null,
				 null));
	}

    /**
	 * This adds a property descriptor for the Source Edges feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addSourceEdgesPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_sourceEdges_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_sourceEdges_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.Literals.VIEW__SOURCE_EDGES,
				 true,
				 false,
				 true,
				 null,
				 null,
				 null));
	}

    /**
	 * This adds a property descriptor for the Target Edges feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addTargetEdgesPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_targetEdges_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_targetEdges_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.Literals.VIEW__TARGET_EDGES,
				 true,
				 false,
				 true,
				 null,
				 null,
				 null));
	}

    /**
	 * This adds a property descriptor for the Element feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addElementPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_element_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_element_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.Literals.VIEW__ELEMENT,
				 true,
				 false,
				 true,
				 null,
				 null,
				 null));
	}

    /**
	 * This adds a property descriptor for the Diagram feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addDiagramPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_diagram_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_diagram_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.Literals.VIEW__DIAGRAM,
				 false,
				 false,
				 false,
				 null,
				 null,
				 null));
	}

    /**
	 * This specifies how to implement {@@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@@link org.eclipse.emf.edit.command.AddCommand}, {@@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@@link org.eclipse.emf.edit.command.MoveCommand} in {@@link #createCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Collection getChildrenFeatures(Object object) {
		if (childrenFeatures == null) {
			super.getChildrenFeatures(object);
			childrenFeatures.add(NotationPackage.Literals.VIEW__PERSISTED_CHILDREN);
			childrenFeatures.add(NotationPackage.Literals.VIEW__STYLES);
			childrenFeatures.add(NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN);
		}
		return childrenFeatures;
	}

    /**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EStructuralFeature getChildFeature(Object object, Object child) {
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

	/**
	 * This adds a property descriptor for the Styles feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	protected void addStylesPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(new ItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getString("_UI_View_styles_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_styles_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.Literals.VIEW__STYLES,
				 false));
	}

    /**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getText(Object object) {
		View view = (View)object;
		return getString("_UI_View_type") + " " + view.isVisible(); //$NON-NLS-1$ //$NON-NLS-2$
	}

    /**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(View.class)) {
			case NotationPackage.VIEW__VISIBLE:
			case NotationPackage.VIEW__TYPE:
			case NotationPackage.VIEW__MUTABLE:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
				return;
			case NotationPackage.VIEW__PERSISTED_CHILDREN:
			case NotationPackage.VIEW__STYLES:
			case NotationPackage.VIEW__TRANSIENT_CHILDREN:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
				return;
		}
		super.notifyChanged(notification);
	}

    /**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__PERSISTED_CHILDREN,
				 NotationFactory.eINSTANCE.createNode()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createFillStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createLineStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createFontStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createTitleStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createSortingStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createDescriptionStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createRoutingStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createCanonicalStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createShapeStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createConnectorStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createPageStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createDrawerStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createGuideStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createFilteringStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createDiagramStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createImageStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createImageBufferStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createNamedStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createPropertiesSetStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createDataTypeStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createSingleValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createListValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createIntValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createIntListValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createBooleanValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createDoubleValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createDoubleListValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createStringValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createStringListValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createEObjectValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createEObjectListValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createByteArrayValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createBooleanListValueStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createDiagramLinkStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createHintedDiagramLinkStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createMultiDiagramLinkStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createTextStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createLineTypeStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__STYLES,
				 NotationFactory.eINSTANCE.createArrowStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN,
				 NotationFactory.eINSTANCE.createNode()));
	}

    /**
	 * This returns the label text for {@@link org.eclipse.emf.edit.command.CreateChildCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getCreateChildText(Object owner, Object feature, Object child, Collection selection) {
		Object childFeature = feature;
		Object childObject = child;

		boolean qualify =
			childFeature == NotationPackage.Literals.VIEW__PERSISTED_CHILDREN ||
			childFeature == NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN;

		if (qualify) {
			return getString
				("_UI_CreateChild_text2", //$NON-NLS-1$
				 new Object[] { getTypeText(childObject), getFeatureText(childFeature), getTypeText(owner) });
		}
		return super.getCreateChildText(owner, feature, child, selection);
	}

    /**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ResourceLocator getResourceLocator() {
		return NotationEditPlugin.INSTANCE;
	}

}
@


1.9
log
@[230078] gmf-head ahunter 080506 Notational Metamodel performance improvements
@
text
@a20 1
import org.eclipse.emf.ecore.EObject;
@


1.8
log
@[230078] gmf-head ahunter 080503 Notational Metamodel performance improvements
@
text
@d281 2
a282 5
		Object labelValue = ((EObject)object).eGet(NotationPackage.Literals.NOTATION_OBJECT__UUID);
		String label = labelValue == null ? null : labelValue.toString();
		return label == null || label.length() == 0 ?
			getString("_UI_View_type") : //$NON-NLS-1$
			getString("_UI_View_type") + " " + label; //$NON-NLS-1$ //$NON-NLS-2$
a295 1
			case NotationPackage.VIEW__UUID:
@


1.7
log
@[225137] gmf-head ahunter 080407 Line styles notation enhancement
@
text
@d21 1
d281 5
a285 2
		View view = (View)object;
		return getString("_UI_View_type") + " " + view.isVisible(); //$NON-NLS-1$ //$NON-NLS-2$
d299 1
@


1.6
log
@[224473] gmf-head ahunter 080327 Text alignment enhancement
@
text
@d511 10
@


1.5
log
@gmf_head aboyko 070517 New styles for Notational Meta-Model + example of usage of a map style in Logic example + new junit
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
d506 5
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d51 2
a52 2
     * This constructs an instance from a factory and a notifier.
     * <!-- begin-user-doc -->
d54 2
a55 2
     * @@generated
     */
d57 2
a58 2
        super(adapterFactory);
    }
d75 2
a76 2
     * This adds a property descriptor for the Visible feature.
     * <!-- begin-user-doc -->
d78 2
a79 2
     * @@generated
     */
d81 14
a94 14
        itemPropertyDescriptors.add
            (createItemPropertyDescriptor
                (((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
                 getResourceLocator(),
                 getString("_UI_View_visible_feature"), //$NON-NLS-1$
                 getString("_UI_PropertyDescriptor_description", "_UI_View_visible_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                 NotationPackage.Literals.VIEW__VISIBLE,
                 true,
                 false,
                 false,
                 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
                 null,
                 null));
    }
d97 2
a98 2
     * This adds a property descriptor for the Type feature.
     * <!-- begin-user-doc -->
d100 2
a101 2
     * @@generated
     */
d103 14
a116 14
        itemPropertyDescriptors.add
            (createItemPropertyDescriptor
                (((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
                 getResourceLocator(),
                 getString("_UI_View_type_feature"), //$NON-NLS-1$
                 getString("_UI_PropertyDescriptor_description", "_UI_View_type_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                 NotationPackage.Literals.VIEW__TYPE,
                 true,
                 false,
                 false,
                 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
                 null,
                 null));
    }
d119 2
a120 2
     * This adds a property descriptor for the Mutable feature.
     * <!-- begin-user-doc -->
d122 2
a123 2
     * @@generated
     */
d125 14
a138 14
        itemPropertyDescriptors.add
            (createItemPropertyDescriptor
                (((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
                 getResourceLocator(),
                 getString("_UI_View_mutable_feature"), //$NON-NLS-1$
                 getString("_UI_PropertyDescriptor_description", "_UI_View_mutable_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                 NotationPackage.Literals.VIEW__MUTABLE,
                 true,
                 false,
                 false,
                 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
                 null,
                 null));
    }
d141 2
a142 2
     * This adds a property descriptor for the Source Edges feature.
     * <!-- begin-user-doc -->
d144 2
a145 2
     * @@generated
     */
d147 14
a160 14
        itemPropertyDescriptors.add
            (createItemPropertyDescriptor
                (((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
                 getResourceLocator(),
                 getString("_UI_View_sourceEdges_feature"), //$NON-NLS-1$
                 getString("_UI_PropertyDescriptor_description", "_UI_View_sourceEdges_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                 NotationPackage.Literals.VIEW__SOURCE_EDGES,
                 true,
                 false,
                 false,
                 null,
                 null,
                 null));
    }
d163 2
a164 2
     * This adds a property descriptor for the Target Edges feature.
     * <!-- begin-user-doc -->
d166 2
a167 2
     * @@generated
     */
d169 14
a182 14
        itemPropertyDescriptors.add
            (createItemPropertyDescriptor
                (((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
                 getResourceLocator(),
                 getString("_UI_View_targetEdges_feature"), //$NON-NLS-1$
                 getString("_UI_PropertyDescriptor_description", "_UI_View_targetEdges_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                 NotationPackage.Literals.VIEW__TARGET_EDGES,
                 true,
                 false,
                 false,
                 null,
                 null,
                 null));
    }
d185 2
a186 2
     * This adds a property descriptor for the Element feature.
     * <!-- begin-user-doc -->
d188 2
a189 2
     * @@generated
     */
d191 14
a204 14
        itemPropertyDescriptors.add
            (createItemPropertyDescriptor
                (((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
                 getResourceLocator(),
                 getString("_UI_View_element_feature"), //$NON-NLS-1$
                 getString("_UI_PropertyDescriptor_description", "_UI_View_element_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                 NotationPackage.Literals.VIEW__ELEMENT,
                 true,
                 false,
                 false,
                 null,
                 null,
                 null));
    }
d207 2
a208 2
     * This adds a property descriptor for the Diagram feature.
     * <!-- begin-user-doc -->
d210 2
a211 2
     * @@generated
     */
d213 20
a232 20
        itemPropertyDescriptors.add
            (createItemPropertyDescriptor
                (((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
                 getResourceLocator(),
                 getString("_UI_View_diagram_feature"), //$NON-NLS-1$
                 getString("_UI_PropertyDescriptor_description", "_UI_View_diagram_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                 NotationPackage.Literals.VIEW__DIAGRAM,
                 false,
                 false,
                 false,
                 null,
                 null,
                 null));
    }

    /**
     * This specifies how to implement {@@link #getChildren} and is used to deduce an appropriate feature for an
     * {@@link org.eclipse.emf.edit.command.AddCommand}, {@@link org.eclipse.emf.edit.command.RemoveCommand} or
     * {@@link org.eclipse.emf.edit.command.MoveCommand} in {@@link #createCommand}.
     * <!-- begin-user-doc -->
d234 2
a235 2
     * @@generated
     */
d237 8
a244 8
        if (childrenFeatures == null) {
            super.getChildrenFeatures(object);
            childrenFeatures.add(NotationPackage.Literals.VIEW__PERSISTED_CHILDREN);
            childrenFeatures.add(NotationPackage.Literals.VIEW__STYLES);
            childrenFeatures.add(NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN);
        }
        return childrenFeatures;
    }
d247 1
a247 1
     * <!-- begin-user-doc -->
d249 2
a250 2
     * @@generated
     */
d252 2
a253 2
        // Check the type of the specified child object and return the proper feature to use for
        // adding (see {@@link AddCommand}) it as a child.
d255 2
a256 2
        return super.getChildFeature(object, child);
    }
d274 2
a275 2
     * This returns the label text for the adapted class.
     * <!-- begin-user-doc -->
d277 2
a278 2
     * @@generated
     */
d280 3
a282 3
        View view = (View)object;
        return getString("_UI_View_type") + " " + view.isVisible(); //$NON-NLS-1$ //$NON-NLS-2$
    }
d285 3
a287 3
     * This handles model notifications by calling {@@link #updateChildren} to update any cached
     * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
     * <!-- begin-user-doc -->
d289 2
a290 2
     * @@generated
     */
d292 16
a307 1
        updateChildren(notification);
d309 4
a312 19
        switch (notification.getFeatureID(View.class)) {
            case NotationPackage.VIEW__VISIBLE:
            case NotationPackage.VIEW__TYPE:
            case NotationPackage.VIEW__MUTABLE:
                fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
                return;
            case NotationPackage.VIEW__PERSISTED_CHILDREN:
            case NotationPackage.VIEW__STYLES:
            case NotationPackage.VIEW__TRANSIENT_CHILDREN:
                fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
                return;
        }
        super.notifyChanged(notification);
    }

    /**
     * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
     * describing all of the children that can be created under this object.
     * <!-- begin-user-doc -->
d314 2
a315 2
     * @@generated
     */
d317 1
a317 1
        super.collectNewChildDescriptors(newChildDescriptors, object);
d319 190
a508 95
        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__PERSISTED_CHILDREN,
                 NotationFactory.eINSTANCE.createNode()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createFillStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createLineStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createFontStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createTitleStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createSortingStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createDescriptionStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createRoutingStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createCanonicalStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createShapeStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createConnectorStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createPageStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createDrawerStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createGuideStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createFilteringStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createDiagramStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createImageStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__STYLES,
                 NotationFactory.eINSTANCE.createImageBufferStyle()));

        newChildDescriptors.add
            (createChildParameter
                (NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN,
                 NotationFactory.eINSTANCE.createNode()));
    }
d511 2
a512 2
     * This returns the label text for {@@link org.eclipse.emf.edit.command.CreateChildCommand}.
     * <!-- begin-user-doc -->
d514 2
a515 2
     * @@generated
     */
d517 2
a518 2
        Object childFeature = feature;
        Object childObject = child;
d520 11
a530 11
        boolean qualify =
            childFeature == NotationPackage.Literals.VIEW__PERSISTED_CHILDREN ||
            childFeature == NotationPackage.Literals.VIEW__TRANSIENT_CHILDREN;

        if (qualify) {
            return getString
                ("_UI_CreateChild_text2", //$NON-NLS-1$
                 new Object[] { getTypeText(childObject), getFeatureText(childFeature), getTypeText(owner) });
        }
        return super.getCreateChildText(owner, feature, child, selection);
    }
d533 2
a534 2
     * Return the resource locator for this item provider's resources.
     * <!-- begin-user-doc -->
d536 2
a537 2
     * @@generated
     */
d539 2
a540 2
        return NotationEditPlugin.INSTANCE;
    }
@


1.3
log
@bugzilla 110718 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d89 2
d111 2
d133 2
d155 2
d177 2
d199 2
d221 2
d269 1
a269 1
				 NotationPackage.eINSTANCE.getView_Styles(),
@


1.3.2.1
log
@[141061] gmf_r1_0_maintenance ylulu 060717 Performance: Notation metamodel can reduce its memory usage
@
text
@a88 2
                 false,
                 false,
a108 2
                 false,
                 false,
a128 2
                 false,
                 false,
a148 2
                 false,
                 false,
a168 2
                 false,
                 false,
a188 2
                 false,
                 false,
a208 2
                 false,
                 false,
d255 1
a255 1
				 NotationPackage.Literals.VIEW__STYLES,
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d50 3
a52 3
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
d54 2
a55 2
	 * @@generated
	 */
d57 2
a58 2
		super(adapterFactory);
	}
d74 3
a76 3
	/**
	 * This adds a property descriptor for the Visible feature.
	 * <!-- begin-user-doc -->
d78 2
a79 2
	 * @@generated
	 */
d81 16
a96 16
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_visible_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_visible_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.eINSTANCE.getView_Visible(),
				 true,
				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Type feature.
	 * <!-- begin-user-doc -->
d98 2
a99 2
	 * @@generated
	 */
d101 16
a116 16
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_type_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_type_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.eINSTANCE.getView_Type(),
				 true,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Mutable feature.
	 * <!-- begin-user-doc -->
d118 2
a119 2
	 * @@generated
	 */
d121 16
a136 16
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_mutable_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_mutable_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.eINSTANCE.getView_Mutable(),
				 true,
				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Source Edges feature.
	 * <!-- begin-user-doc -->
d138 2
a139 2
	 * @@generated
	 */
d141 16
a156 16
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_sourceEdges_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_sourceEdges_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.eINSTANCE.getView_SourceEdges(),
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Target Edges feature.
	 * <!-- begin-user-doc -->
d158 2
a159 2
	 * @@generated
	 */
d161 16
a176 16
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_targetEdges_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_targetEdges_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.eINSTANCE.getView_TargetEdges(),
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Element feature.
	 * <!-- begin-user-doc -->
d178 2
a179 2
	 * @@generated
	 */
d181 16
a196 16
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_element_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_element_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.eINSTANCE.getView_Element(),
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Diagram feature.
	 * <!-- begin-user-doc -->
d198 2
a199 2
	 * @@generated
	 */
d201 18
a218 18
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_View_diagram_feature"), //$NON-NLS-1$
				 getString("_UI_PropertyDescriptor_description", "_UI_View_diagram_feature", "_UI_View_type"), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				 NotationPackage.eINSTANCE.getView_Diagram(),
				 false,
				 null,
				 null,
				 null));
	}

	/**
	 * This specifies how to implement {@@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@@link org.eclipse.emf.edit.command.AddCommand}, {@@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@@link org.eclipse.emf.edit.command.MoveCommand} in {@@link #createCommand}.
	 * <!-- begin-user-doc -->
d220 2
a221 2
	 * @@generated
	 */
d223 8
a230 8
		if (childrenFeatures == null) {
			super.getChildrenFeatures(object);
			childrenFeatures.add(NotationPackage.eINSTANCE.getView_PersistedChildren());
			childrenFeatures.add(NotationPackage.eINSTANCE.getView_Styles());
			childrenFeatures.add(NotationPackage.eINSTANCE.getView_TransientChildren());
		}
		return childrenFeatures;
	}
d232 2
a233 2
	/**
	 * <!-- begin-user-doc -->
d235 2
a236 2
	 * @@generated
	 */
d238 2
a239 2
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@@link AddCommand}) it as a child.
d241 2
a242 2
		return super.getChildFeature(object, child);
	}
d259 3
a261 3
	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
d263 2
a264 2
	 * @@generated
	 */
d266 8
a273 8
		View view = (View)object;
		return getString("_UI_View_type") + " " + view.isVisible(); //$NON-NLS-1$ //$NON-NLS-2$
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
d275 2
a276 2
	 * @@generated
	 */
d278 1
a278 1
		updateChildren(notification);
d280 19
a298 19
		switch (notification.getFeatureID(View.class)) {
			case NotationPackage.VIEW__VISIBLE:
			case NotationPackage.VIEW__TYPE:
			case NotationPackage.VIEW__MUTABLE:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
				return;
			case NotationPackage.VIEW__PERSISTED_CHILDREN:
			case NotationPackage.VIEW__STYLES:
			case NotationPackage.VIEW__TRANSIENT_CHILDREN:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
	 * <!-- begin-user-doc -->
d300 2
a301 2
	 * @@generated
	 */
d303 1
a303 97
		super.collectNewChildDescriptors(newChildDescriptors, object);

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_PersistedChildren(),
				 NotationFactory.eINSTANCE.createNode()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createFillStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createLineStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createFontStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createTitleStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createSortingStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createDescriptionStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createRoutingStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createCanonicalStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createShapeStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createConnectorStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createPageStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createDrawerStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createGuideStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createFilteringStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createDiagramStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createImageStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_Styles(),
				 NotationFactory.eINSTANCE.createImageBufferStyle()));

		newChildDescriptors.add
			(createChildParameter
				(NotationPackage.eINSTANCE.getView_TransientChildren(),
				 NotationFactory.eINSTANCE.createNode()));
	}
d305 99
a403 3
	/**
	 * This returns the label text for {@@link org.eclipse.emf.edit.command.CreateChildCommand}.
	 * <!-- begin-user-doc -->
d405 2
a406 2
	 * @@generated
	 */
d408 2
a409 2
		Object childFeature = feature;
		Object childObject = child;
d411 15
a425 15
		boolean qualify =
			childFeature == NotationPackage.eINSTANCE.getView_PersistedChildren() ||
			childFeature == NotationPackage.eINSTANCE.getView_TransientChildren();

		if (qualify) {
			return getString
				("_UI_CreateChild_text2", //$NON-NLS-1$
				 new Object[] { getTypeText(childObject), getFeatureText(childFeature), getTypeText(owner) });
		}
		return super.getCreateChildText(owner, feature, child, selection);
	}

	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
d427 2
a428 2
	 * @@generated
	 */
d430 2
a431 2
		return NotationEditPlugin.INSTANCE;
	}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

