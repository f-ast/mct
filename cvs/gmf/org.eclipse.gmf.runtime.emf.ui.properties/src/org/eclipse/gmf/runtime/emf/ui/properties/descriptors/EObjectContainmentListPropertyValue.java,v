head	1.2;
access;
symbols
	v20081020-0700:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080425-1959:1.2
	v20080222-1200:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070330-1300:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20061012-1100:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060810-1700:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	I20060505-1400:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.2
date	2005.09.12.21.24.06;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.55;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@/******************************************************************************
 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.ui.properties.descriptors;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.views.properties.IPropertyDescriptor;
import org.eclipse.ui.views.properties.IPropertySource;
import org.eclipse.ui.views.properties.PropertyDescriptor;

import org.eclipse.gmf.runtime.common.ui.services.properties.PropertiesServiceAdapterFactory;

/**
 * A property source object that wraps around a containment list, presenting each item on the list
 * as if it was a property. 
 * 
 * @@author nbalaba
 */
public class EObjectContainmentListPropertyValue
	implements IPropertySource {

	// properties provider to obtain properties of the objects on the list
	protected static final PropertiesServiceAdapterFactory propertiesProvider = new PropertiesServiceAdapterFactory();

	// the containment list itself
	protected EObjectContainmentEList target; 

	// local descritpors cache, where key is the property id and a value is a descritor for the property
	protected Map descriptors;

	// a label provider
	protected ILabelProvider labelProvider;

	/*
	 * @@return - a default label provider
	 */
	private static ILabelProvider getDefaultLabelProvider() {
		return new LabelProvider() {

			public String getText(Object anObject) {
				return ""; //$NON-NLS-1$				
			}

			public Image getImage(Object anObject) {
				return null;
			}
		};
	}

	/**
	 *  Create an instance of the <code>EObjectContainmentListPropertyValue</code>
	 * 
	 * @@param target - contaiment list 
	 * @@param labelProvider  - label provider 
	 */
	public EObjectContainmentListPropertyValue(EObjectContainmentEList target,
			ILabelProvider labelProvider) {
		super();

		this.target = target;
		this.descriptors = new HashMap(target.size());
		this.labelProvider = labelProvider;

		for (Iterator e = target.iterator(); e.hasNext();) {
			EObject object = (EObject) e.next();
			createDescriptor(object);
		}

	}

	/**
	 * Create an instance of the <code>EObjectContainmentListPropertyValue</code>
	 * 
	 * @@param target - contaiment list 
	 */
	public EObjectContainmentListPropertyValue(EObjectContainmentEList target) {
		this(target, getDefaultLabelProvider());
	}

	/**
	 * Create and cache property descriptor for the object on the list
	 * 
	 * @@param object - object on the containment list
	 */
	protected void createDescriptor(EObject object) {
		PropertyDescriptor descriptor = new PropertyDescriptor(object, object
			.eClass().getName());
		descriptor.setLabelProvider(labelProvider);
		descriptors.put(object, descriptor);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
	 */
	public Object getEditableValue() {
		return this;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
	 */
	public IPropertyDescriptor[] getPropertyDescriptors() {
		List list = new ArrayList(descriptors.values());
		IPropertyDescriptor[] propertyDescriptors = new IPropertyDescriptor[list
			.size()];
		System
			.arraycopy(list.toArray(), 0, propertyDescriptors, 0, list.size());

		return propertyDescriptors;

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
	 */
	public Object getPropertyValue(Object id) {

		return propertiesProvider.getPropertySource(id);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
	 */
	public boolean isPropertySet(Object id) {
		return descriptors.containsKey(id);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
	 */
	public void resetPropertyValue(Object id) {
		// do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.ui.views.properties.IPropertySource#setPropertyValue(java.lang.Object,
	 *      java.lang.Object)
	 */
	public void setPropertyValue(Object id, Object value) {
		// do notning - this a read-only property source

	}

	/**
	 * @@return Returns the labelProvider.
	 */
	public ILabelProvider getLabelProvider() {
		return labelProvider;
	}

	/**
	 * @@param labelProvider
	 *            The labelProvider to set.
	 */
	public void setLabelProvider(ILabelProvider labelProvider) {
		this.labelProvider = labelProvider;
	}

	/**
	 * @@return Returns the target.
	 */
	public EObjectContainmentEList getTarget() {
		return target;
	}
}@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.              	   |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

