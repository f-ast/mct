head	1.6;
access;
symbols
	v20081020-0700:1.6
	v20080722-1827:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080425-1959:1.6
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070601-1400:1.6
	v20070330-1300:1.6
	M4_20:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	v20061012-1100:1.5.2.1
	v20060925-1700:1.5.2.1
	v20060919-0800:1.5.2.1
	M1_20:1.5
	v20060810-1700:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060531-1730:1.5
	I20060505-1400:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.6
date	2006.10.03.15.06.35;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.13.19.11.13;	author ldamus;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.01.26.15.37.25;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.09.21.16.55;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.24.06;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.53;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.09.13.16.46.20;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.ui.properties.actions;


import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.dialogs.PropertiesDialog;
import org.eclipse.gmf.runtime.common.ui.services.properties.extended.PropertyPagePropertyDescriptor;
import org.eclipse.gmf.runtime.emf.ui.properties.internal.EMFPropertiesDebugOptions;
import org.eclipse.gmf.runtime.emf.ui.properties.internal.EMFPropertiesPlugin;
import org.eclipse.gmf.runtime.emf.ui.properties.internal.EMFPropertiesStatusCodes;
import org.eclipse.gmf.runtime.emf.ui.properties.internal.l10n.EMFUIPropertiesMessages;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.preference.IPreferencePage;
import org.eclipse.jface.preference.PreferenceManager;
import org.eclipse.jface.preference.PreferenceNode;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.ui.views.properties.IPropertyDescriptor;
import org.eclipse.ui.views.properties.IPropertySource;

import com.ibm.icu.text.Collator;

/**
 * Action responsible for showing the properties page dialog when the it is
 * invoked.
 * <P>
 * This action is always enabled. If there are no property pages applicable to
 * the selection, a message dialog is shown to indicate that there are no
 * property pages.
 * 
 * @@author ldamus
 */
public class PropertyPageViewAction
	extends Action {

	/**
	 * Constructs a new action with the default label, image and tooltip.
	 */
	public PropertyPageViewAction() {
		super(EMFUIPropertiesMessages.PropertyPageViewAction_label, 
				AbstractUIPlugin.imageDescriptorFromPlugin(EMFPropertiesPlugin.getPluginId(), "icons/property_page.gif")); //$NON-NLS-1$
		setToolTipText(EMFUIPropertiesMessages.PropertyPageViewAction_tooltip);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.jface.action.Action#run()
	 */
	public void run() {
		Trace.trace(EMFPropertiesPlugin.getDefault(),
			EMFPropertiesDebugOptions.METHODS_ENTERING,
			"PropertyPageViewActionDelegate.doRun Entering"); //$NON-NLS-1$
		IWorkbenchPage page = EMFPropertiesPlugin.getActivePage();
		if (page != null) {
			final ISelection selection = page.getSelection();
			if (selection != null && selection instanceof IStructuredSelection) {
				TransactionalEditingDomain domain = getEditingDomain((IStructuredSelection) selection);

                if (domain != null) {
                    try {
                        domain.runExclusive(new Runnable() {

                            public void run() {

                                // build the pages for the property dialog
                                List propertyPages = getMergedPropertyPages((IStructuredSelection) selection);

                                if (!propertyPages.isEmpty()) {
                                    // sort the pages
                                    Collections.sort(propertyPages,
                                        new Comparator() {

                                            public int compare(Object o1,
                                                    Object o2) {
                                                IPreferencePage p1 = (IPreferencePage) o1;
                                                IPreferencePage p2 = (IPreferencePage) o2;
                                                String s1 = p1.getTitle();
                                                String s2 = p2.getTitle();
                                                return Collator.getInstance()
                                                    .compare(s1, s2);
                                            }
                                        });

                                    // add the pages and invoke the property
                                    // dialog
                                    PropertiesDialog dialog = new PropertiesDialog(
                                        Display.getCurrent().getActiveShell(),
                                        new PreferenceManager());

                                    for (Iterator iter = propertyPages
                                        .iterator(); iter.hasNext();) {
                                        dialog.getPreferenceManager()
                                            .addToRoot(
                                                new PreferenceNode(
                                                    StringStatics.BLANK,
                                                    (IPreferencePage) iter
                                                        .next()));
                                    }

                                    dialog.create();
                                    dialog.open();
                                } else {
                                    MessageDialog
                                        .openInformation(
                                            Display.getCurrent()
                                                .getActiveShell(),
                                            EMFUIPropertiesMessages.PropertyPageViewAction_NoPropertiesMessageBox_Title,
                                            EMFUIPropertiesMessages.PropertyPageViewAction_NoPropertiesMessageBox_Message);
                                }
                            }
                        });
                    } catch (InterruptedException e) {
                        Trace.catching(EMFPropertiesPlugin.getDefault(),
                            EMFPropertiesDebugOptions.EXCEPTIONS_CATCHING,
                            getClass(), "run", e); //$NON-NLS-1$
                        Log.error(EMFPropertiesPlugin.getDefault(),
                            EMFPropertiesStatusCodes.ACTION_FAILURE, e
                                .getLocalizedMessage(), e);
                    }
                }
            }
        }
		Trace.trace(EMFPropertiesPlugin.getDefault(),
			EMFPropertiesDebugOptions.METHODS_EXITING,
			"PropertyPageViewActionDelegate.doRun Exiting"); //$NON-NLS-1$
	}

	/**
	 * Gets the property pages common to the given selection
	 * 
	 * @@param selection
	 *            the selection
	 * @@return List the list of property pages common to the given selection
	 */
	private List getMergedPropertyPages(IStructuredSelection selection) {
		// build the merged properties, common to the entire selection
		List mergedDescriptors = computeMergedPropertyDescriptors(selection);

		// build the merged pages from the merged properties
		List mergedPages = new ArrayList();
		if (mergedDescriptors != null) { // if there were no objects to provide
			// us with even property sources
			for (Iterator i = mergedDescriptors.iterator(); i.hasNext();) {
				PropertyPagePropertyDescriptor descriptor = (PropertyPagePropertyDescriptor) i
					.next();
				List pages = descriptor.createPropertyPages();
				pages.removeAll(mergedPages);
				mergedPages.addAll(pages);
			}
		}
		return mergedPages;
	}

	/**
	 * Return the intersection of all the <code>IPropertyDescriptor</code> s
	 * for the objects.
	 */
	private List computeMergedPropertyDescriptors(IStructuredSelection selection) {
		if (selection.size() == 0)
			return new ArrayList(0);

		// get all descriptors from each object
		Map[] propertyDescriptorMaps = new Map[selection.size()];

		Iterator i = selection.iterator();
		for (int index = 0; i.hasNext(); index++) {
			Object object = i.next();
			IPropertySource source = (IPropertySource) ((IAdaptable) object)
				.getAdapter(IPropertySource.class);

			if (source == null) {
				// if one of the selected items is not a property source
				// then we show no properties
				return new ArrayList(0);
			}
			// get the property descriptors keyed by id
			propertyDescriptorMaps[index] = computePropertyDescriptorsFor(source);
		}

		//		 intersect
		Map intersection = propertyDescriptorMaps[0];
		for (int p = 1; p < propertyDescriptorMaps.length; p++) {
			// get the current ids
			Object[] ids = intersection.keySet().toArray();
			for (int j = 0; j < ids.length; j++) {
				Object object = propertyDescriptorMaps[p].get(ids[j]);
				if (object == null
					||
					// see if the descriptors (which have the same id) are
					// compatible
					!((IPropertyDescriptor) intersection.get(ids[j]))
						.isCompatibleWith((IPropertyDescriptor) object))
					intersection.remove(ids[j]);
			}
		}

		return new ArrayList(intersection.values());
	}

	/**
	 * Returns an map of property descritptors (keyed on id) for the 
	 * given property source.
	 *
	 * @@source a property source for which to obtain descriptors
	 * @@return a table of decriptors keyed on their id
	 */
	private Map computePropertyDescriptorsFor(IPropertySource source) {
		IPropertyDescriptor[] descriptors = source.getPropertyDescriptors();
		Map result = new HashMap(descriptors.length * 2 + 1);
		for (int i = 0; i < descriptors.length; i++) {
			if (descriptors[i] instanceof PropertyPagePropertyDescriptor)
				result.put(descriptors[i].getId(), descriptors[i]);
		}
		return result;
	}
    
    private TransactionalEditingDomain getEditingDomain(IStructuredSelection s) {

        TransactionalEditingDomain result = null;

        for (Iterator i = s.iterator(); i.hasNext();) {
            Object next = i.next();

            result = TransactionUtil.getEditingDomain(next);

            if (result == null && next instanceof IAdaptable) {
                EObject eObject = (EObject) ((IAdaptable) next)
                    .getAdapter(EObject.class);
                result = TransactionUtil.getEditingDomain(eObject);
            }

            if (result != null) {
                return result;
            }
        }
        return null;
    }
}@


1.5
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
@


1.5.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.4
log
@[112794] gmf_head etworkowska 060126 Adopt ICU4J as part of Eclipse 3.2
@
text
@d24 12
a40 1
import org.eclipse.jface.resource.ImageDescriptor;
a48 10
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.dialogs.PropertiesDialog;
import org.eclipse.gmf.runtime.common.ui.services.properties.extended.PropertyPagePropertyDescriptor;
import org.eclipse.gmf.runtime.emf.core.exceptions.MSLActionAbandonedException;
import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;
import org.eclipse.gmf.runtime.emf.ui.properties.internal.EMFPropertiesDebugOptions;
import org.eclipse.gmf.runtime.emf.ui.properties.internal.EMFPropertiesPlugin;
import org.eclipse.gmf.runtime.emf.ui.properties.internal.l10n.EMFUIPropertiesMessages;

d69 1
a69 1
				AbstractUIPlugin.imageDescriptorFromPlugin(EMFPropertiesPlugin.getPluginId(), "icons/property_page.gif"));
d86 1
a86 7
				try {
					OperationUtil.runAsRead(new Runnable() {

						public void run() {

							// build the pages for the property dialog
							List propertyPages = getMergedPropertyPages((IStructuredSelection) selection);
d88 64
a151 42
							if (!propertyPages.isEmpty()) {
								// sort the pages
								Collections.sort(propertyPages,
									new Comparator() {

										public int compare(Object o1, Object o2) {
											IPreferencePage p1 = (IPreferencePage) o1;
											IPreferencePage p2 = (IPreferencePage) o2;
											String s1 = p1.getTitle();
											String s2 = p2.getTitle();
											return Collator.getInstance()
												.compare(s1, s2);
										}
									});

								// add the pages and invoke the property dialog
								PropertiesDialog dialog = new PropertiesDialog(
									Display.getCurrent().getActiveShell(),
									new PreferenceManager());

								for (Iterator iter = propertyPages.iterator(); iter
									.hasNext();) {
									dialog.getPreferenceManager().addToRoot(
										new PreferenceNode(StringStatics.BLANK,
											(IPreferencePage) iter.next()));
								}

								dialog.create();
								dialog.open();
							} else {
								MessageDialog.openInformation(Display
									.getCurrent().getActiveShell(),
									EMFUIPropertiesMessages.PropertyPageViewAction_NoPropertiesMessageBox_Title, 
									EMFUIPropertiesMessages.PropertyPageViewAction_NoPropertiesMessageBox_Message);
							}
						}
					});
				} catch (MSLActionAbandonedException e) {
					e.printStackTrace();
				}
			}
		}
d245 22
@


1.3
log
@Bugzilla Bug 109445 gmf_head etworkow 051109 New Eclipse Resources Bundles Should Be Used
@
text
@d14 1
a14 1
import java.text.Collator;
d48 2
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d34 1
d46 1
a46 1
import org.eclipse.gmf.runtime.emf.ui.properties.internal.l10n.EMFPropertiesResourceManager;
a61 33
	 * The title of the message dialog shown when there are no properties to be
	 * shown.
	 */
	private static final String NO_PROPERTIES_TITLE = EMFPropertiesResourceManager
		.getInstance().getString(
			"PropertyPageViewAction.NoPropertiesMessageBox.Title"); //$NON-NLS-1$    

	/**
	 * The message shown when there are no properties.
	 */
	private static final String NO_PROPERTIES_MESSAGE = EMFPropertiesResourceManager
		.getInstance().getString(
			"PropertyPageViewAction.NoPropertiesMessageBox.Message"); //$NON-NLS-1$ 

	/**
	 * The property page action label.
	 */
	private static final String PROPERTY_PAGE_ACTION_LABEL = EMFPropertiesResourceManager
		.getInstance().getString("PropertyPageViewAction.label"); //$NON-NLS-1$

	/**
	 * The property page action tooltip.
	 */
	private static final String PROPERTY_PAGE_ACTION_TOOLTIP = EMFPropertiesResourceManager
		.getInstance().getString("PropertyPageViewAction.tooltip"); //$NON-NLS-1$

	/**
	 * The property page action image.
	 */
	private static final ImageDescriptor PROPERTY_PAGE_ACTION_IMAGE = EMFPropertiesResourceManager
		.getInstance().getImageDescriptor("property_page.gif"); //$NON-NLS-1$

	/**
d65 3
a67 2
		super(PROPERTY_PAGE_ACTION_LABEL, PROPERTY_PAGE_ACTION_IMAGE);
		setToolTipText(PROPERTY_PAGE_ACTION_TOOLTIP);
d123 2
a124 1
									NO_PROPERTIES_TITLE, NO_PROPERTIES_MESSAGE);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 8
/*
 * +------------------------------------------------------------------------+ |
 * Licensed Materials - Property of IBM | | (C) Copyright IBM Corp. 2002, 2004.
 * All Rights Reserved. | | | | US Government Users Restricted Rights - Use,
 * duplication or disclosure | | restricted by GSA ADP Schedule Contract with
 * IBM Corp. |
 * +------------------------------------------------------------------------+
 */
@

