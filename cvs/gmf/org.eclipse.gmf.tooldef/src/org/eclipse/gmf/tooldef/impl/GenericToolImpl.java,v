head	1.3;
access;
symbols
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080417-1610:1.3
	v20080222-1200:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070330-1300:1.3
	v20060316-0600:1.3
	v20070208-1800:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.1
	M1_20:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.03.14.12.59.38;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	118445f7f1b74567;

1.2
date	2006.10.31.14.56.46;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.09.20.28.40;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.tooldef.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gmf.tooldef.GMFToolPackage;
import org.eclipse.gmf.tooldef.GenericTool;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Generic Tool</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.tooldef.impl.GenericToolImpl#getToolClass <em>Tool Class</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenericToolImpl extends AbstractToolImpl implements GenericTool {
	/**
	 * The default value of the '{@@link #getToolClass() <em>Tool Class</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getToolClass()
	 * @@generated
	 * @@ordered
	 */
	protected static final String TOOL_CLASS_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getToolClass() <em>Tool Class</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getToolClass()
	 * @@generated
	 * @@ordered
	 */
	protected String toolClass = TOOL_CLASS_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenericToolImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFToolPackage.eINSTANCE.getGenericTool();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getToolClass() {
		return toolClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setToolClass(String newToolClass) {
		String oldToolClass = toolClass;
		toolClass = newToolClass;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFToolPackage.GENERIC_TOOL__TOOL_CLASS, oldToolClass, toolClass));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case GMFToolPackage.GENERIC_TOOL__TOOL_CLASS:
			return getToolClass();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case GMFToolPackage.GENERIC_TOOL__TOOL_CLASS:
			setToolClass((String) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case GMFToolPackage.GENERIC_TOOL__TOOL_CLASS:
			setToolClass(TOOL_CLASS_EDEFAULT);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case GMFToolPackage.GENERIC_TOOL__TOOL_CLASS:
			return TOOL_CLASS_EDEFAULT == null ? toolClass != null : !TOOL_CLASS_EDEFAULT.equals(toolClass);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy())
			return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (toolClass: ");
		result.append(toolClass);
		result.append(')');
		return result.toString();
	}

} //GenericToolImpl
@


1.2
log
@[134121] mgolubev - Tools stack definition in the model
[162456] mgolubev - Change GenericTool#toolClass type from Class to String
@
text
@d66 1
d97 1
d111 1
d126 1
d141 1
d155 1
@


1.1
log
@#114197 tooling definition is out for real world.
@
text
@d40 1
a40 1
	protected static final Class TOOL_CLASS_EDEFAULT = null;
d50 1
a50 1
	protected Class toolClass = TOOL_CLASS_EDEFAULT;
d75 1
a75 1
	public Class getToolClass() {
d84 2
a85 2
	public void setToolClass(Class newToolClass) {
		Class oldToolClass = toolClass;
d112 1
a112 1
			setToolClass((Class) newValue);
@

