head	1.2;
access;
symbols
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080417-1610:1.2
	v20080222-1200:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070330-1300:1.2
	v20060316-0600:1.2
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1
	M1_20:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.03.14.12.59.38;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	118445f7f1b74567;

1.1
date	2006.01.09.20.28.40;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.tooldef.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.tooldef.GMFToolPackage;
import org.eclipse.gmf.tooldef.Menu;
import org.eclipse.gmf.tooldef.MenuAction;
import org.eclipse.gmf.tooldef.Palette;
import org.eclipse.gmf.tooldef.ToolRegistry;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tool Registry</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.tooldef.impl.ToolRegistryImpl#getSharedActions <em>Shared Actions</em>}</li>
 *   <li>{@@link org.eclipse.gmf.tooldef.impl.ToolRegistryImpl#getAllMenus <em>All Menus</em>}</li>
 *   <li>{@@link org.eclipse.gmf.tooldef.impl.ToolRegistryImpl#getPalette <em>Palette</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class ToolRegistryImpl extends EObjectImpl implements ToolRegistry {
	/**
	 * The cached value of the '{@@link #getSharedActions() <em>Shared Actions</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSharedActions()
	 * @@generated
	 * @@ordered
	 */
	protected EList<MenuAction> sharedActions = null;

	/**
	 * The cached value of the '{@@link #getAllMenus() <em>All Menus</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAllMenus()
	 * @@generated
	 * @@ordered
	 */
	protected EList<Menu> allMenus = null;

	/**
	 * The cached value of the '{@@link #getPalette() <em>Palette</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getPalette()
	 * @@generated
	 * @@ordered
	 */
	protected Palette palette = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ToolRegistryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFToolPackage.eINSTANCE.getToolRegistry();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<MenuAction> getSharedActions() {
		if (sharedActions == null) {
			sharedActions = new EObjectContainmentEList<MenuAction>(MenuAction.class, this, GMFToolPackage.TOOL_REGISTRY__SHARED_ACTIONS);
		}
		return sharedActions;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<Menu> getAllMenus() {
		if (allMenus == null) {
			allMenus = new EObjectContainmentEList<Menu>(Menu.class, this, GMFToolPackage.TOOL_REGISTRY__ALL_MENUS);
		}
		return allMenus;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Palette getPalette() {
		return palette;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetPalette(Palette newPalette, NotificationChain msgs) {
		Palette oldPalette = palette;
		palette = newPalette;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFToolPackage.TOOL_REGISTRY__PALETTE, oldPalette, newPalette);
			if (msgs == null)
				msgs = notification;
			else
				msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setPalette(Palette newPalette) {
		if (newPalette != palette) {
			NotificationChain msgs = null;
			if (palette != null)
				msgs = ((InternalEObject) palette).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFToolPackage.TOOL_REGISTRY__PALETTE, null, msgs);
			if (newPalette != null)
				msgs = ((InternalEObject) newPalette).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFToolPackage.TOOL_REGISTRY__PALETTE, null, msgs);
			msgs = basicSetPalette(newPalette, msgs);
			if (msgs != null)
				msgs.dispatch();
		} else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFToolPackage.TOOL_REGISTRY__PALETTE, newPalette, newPalette));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case GMFToolPackage.TOOL_REGISTRY__SHARED_ACTIONS:
			return ((InternalEList<?>) getSharedActions()).basicRemove(otherEnd, msgs);
		case GMFToolPackage.TOOL_REGISTRY__ALL_MENUS:
			return ((InternalEList<?>) getAllMenus()).basicRemove(otherEnd, msgs);
		case GMFToolPackage.TOOL_REGISTRY__PALETTE:
			return basicSetPalette(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case GMFToolPackage.TOOL_REGISTRY__SHARED_ACTIONS:
			return getSharedActions();
		case GMFToolPackage.TOOL_REGISTRY__ALL_MENUS:
			return getAllMenus();
		case GMFToolPackage.TOOL_REGISTRY__PALETTE:
			return getPalette();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case GMFToolPackage.TOOL_REGISTRY__SHARED_ACTIONS:
			getSharedActions().clear();
			getSharedActions().addAll((Collection<? extends MenuAction>) newValue);
			return;
		case GMFToolPackage.TOOL_REGISTRY__ALL_MENUS:
			getAllMenus().clear();
			getAllMenus().addAll((Collection<? extends Menu>) newValue);
			return;
		case GMFToolPackage.TOOL_REGISTRY__PALETTE:
			setPalette((Palette) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case GMFToolPackage.TOOL_REGISTRY__SHARED_ACTIONS:
			getSharedActions().clear();
			return;
		case GMFToolPackage.TOOL_REGISTRY__ALL_MENUS:
			getAllMenus().clear();
			return;
		case GMFToolPackage.TOOL_REGISTRY__PALETTE:
			setPalette((Palette) null);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case GMFToolPackage.TOOL_REGISTRY__SHARED_ACTIONS:
			return sharedActions != null && !sharedActions.isEmpty();
		case GMFToolPackage.TOOL_REGISTRY__ALL_MENUS:
			return allMenus != null && !allMenus.isEmpty();
		case GMFToolPackage.TOOL_REGISTRY__PALETTE:
			return palette != null;
		}
		return super.eIsSet(featureID);
	}

} //ToolRegistryImpl
@


1.1
log
@#114197 tooling definition is out for real world.
@
text
@d55 1
a55 1
	protected EList sharedActions = null;
d65 1
a65 1
	protected EList allMenus = null;
d91 1
d101 1
a101 1
	public EList getSharedActions() {
d103 1
a103 1
			sharedActions = new EObjectContainmentEList(MenuAction.class, this, GMFToolPackage.TOOL_REGISTRY__SHARED_ACTIONS);
d113 1
a113 1
	public EList getAllMenus() {
d115 1
a115 1
			allMenus = new EObjectContainmentEList(Menu.class, this, GMFToolPackage.TOOL_REGISTRY__ALL_MENUS);
d171 1
d175 1
a175 1
			return ((InternalEList) getSharedActions()).basicRemove(otherEnd, msgs);
d177 1
a177 1
			return ((InternalEList) getAllMenus()).basicRemove(otherEnd, msgs);
d189 1
d207 2
d213 1
a213 1
			getSharedActions().addAll((Collection) newValue);
d217 1
a217 1
			getAllMenus().addAll((Collection) newValue);
d231 1
d252 1
@

