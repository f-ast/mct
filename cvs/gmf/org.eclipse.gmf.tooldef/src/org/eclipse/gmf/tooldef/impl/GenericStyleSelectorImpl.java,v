head	1.3;
access;
symbols
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080417-1610:1.3
	v20080222-1200:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070330-1300:1.3
	v20060316-0600:1.3
	v20070208-1800:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	M1_20:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.03.14.12.59.38;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	118445f7f1b74567;

1.2
date	2006.01.10.18.15.00;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.09.20.28.40;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.tooldef.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;
import org.eclipse.gmf.tooldef.AppearanceStyle;
import org.eclipse.gmf.tooldef.GMFToolPackage;
import org.eclipse.gmf.tooldef.GenericStyleSelector;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Generic Style Selector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.tooldef.impl.GenericStyleSelectorImpl#getValues <em>Values</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenericStyleSelectorImpl extends EObjectImpl implements GenericStyleSelector {
	/**
	 * The cached value of the '{@@link #getValues() <em>Values</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getValues()
	 * @@generated
	 * @@ordered
	 */
	protected EList<AppearanceStyle> values = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenericStyleSelectorImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFToolPackage.eINSTANCE.getGenericStyleSelector();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<AppearanceStyle> getValues() {
		if (values == null) {
			values = new EDataTypeUniqueEList<AppearanceStyle>(AppearanceStyle.class, this, GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUES);
		}
		return values;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public boolean isOk(Object style) {
		if (false == style instanceof EObject) {
			return false;
		}
		final String styleName = ((EObject) style).eClass().getName();
		for (AppearanceStyle s : getValues()) {
			if (styleName.equals(s.getName() + "Style")) {
				return true;
			}
		}
		return false;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUES:
			return getValues();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUES:
			getValues().clear();
			getValues().addAll((Collection<? extends AppearanceStyle>) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUES:
			getValues().clear();
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUES:
			return values != null && !values.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy())
			return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (values: ");
		result.append(values);
		result.append(')');
		return result.toString();
	}

} //GenericStyleSelectorImpl
@


1.2
log
@multiple values in the generic style selector
@
text
@a9 1
import java.util.Iterator;
d42 1
a42 1
	protected EList values = null;
d58 1
d68 1
a68 1
	public EList getValues() {
d70 1
a70 1
			values = new EDataTypeUniqueEList(AppearanceStyle.class, this, GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUES);
d85 1
a85 2
		for (Iterator it = getValues().iterator(); it.hasNext(); ) {
			AppearanceStyle s = (AppearanceStyle) it.next();
d98 1
d112 2
d118 1
a118 1
			getValues().addAll((Collection) newValue);
d129 1
d144 1
d158 1
@


1.1
log
@#114197 tooling definition is out for real world.
@
text
@d9 2
a10 1
import org.eclipse.emf.common.notify.Notification;
d12 1
a14 2

import org.eclipse.emf.ecore.impl.ENotificationImpl;
d16 1
a16 1

d28 1
a28 1
 *   <li>{@@link org.eclipse.gmf.tooldef.impl.GenericStyleSelectorImpl#getValue <em>Value</em>}</li>
d36 1
a36 11
	 * The default value of the '{@@link #getValue() <em>Value</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getValue()
	 * @@generated
	 * @@ordered
	 */
	protected static final AppearanceStyle VALUE_EDEFAULT = AppearanceStyle.FONT_LITERAL;

	/**
	 * The cached value of the '{@@link #getValue() <em>Value</em>}' attribute.
d39 1
a39 1
	 * @@see #getValue()
d43 1
a43 1
	protected AppearanceStyle value = VALUE_EDEFAULT;
d68 5
a72 14
	public AppearanceStyle getValue() {
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setValue(AppearanceStyle newValue) {
		AppearanceStyle oldValue = value;
		value = newValue == null ? VALUE_EDEFAULT : newValue;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUE, oldValue, value));
d84 8
a91 1
		return ((EObject) style).eClass().getName().equals(getValue().getName() + "Style");
d101 2
a102 2
		case GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUE:
			return getValue();
d114 3
a116 2
		case GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUE:
			setValue((AppearanceStyle) newValue);
d129 2
a130 2
		case GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUE:
			setValue(VALUE_EDEFAULT);
d143 2
a144 2
		case GMFToolPackage.GENERIC_STYLE_SELECTOR__VALUE:
			return value != VALUE_EDEFAULT;
d159 2
a160 2
		result.append(" (value: ");
		result.append(value);
@

