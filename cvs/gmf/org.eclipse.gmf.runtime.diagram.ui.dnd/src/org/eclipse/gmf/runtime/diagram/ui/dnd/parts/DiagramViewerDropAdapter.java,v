head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20080407-2250:1.5
	v20080222-1200:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.1
	M1_20:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	I20060424-0500:1.3
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051201-1800:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2008.04.08.02.16.29;	author ahunter;	state Exp;
branches;
next	1.4;
commitid	4cb747fad57d4567;

1.4
date	2006.10.03.15.03.04;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.18.20.51.26;	author cmahoney;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.30.25;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.56;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.09.13.16.43.34;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[226065] gmf-head ahunter 080407 Fix warning: The type Assert is deprecated
@
text
@/******************************************************************************
 * Copyright (c) 2003, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.dnd.parts;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.eclipse.core.runtime.Assert;
import org.eclipse.gef.dnd.DelegatingDropAdapter;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.DelegatingDropTargetAdapter;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.DropTargetContext;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetContext;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;
import org.eclipse.swt.dnd.DropTargetEvent;
import org.eclipse.swt.dnd.Transfer;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Control;
import org.eclipse.ui.IWorkbenchPart;

/**
 * This class extends the GEF drop target adapter. It delgates all the drop
 * events to the
 * <code>org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.DelegatingDropTargetAdapter</code>
 * If there are no drop target listeners registered with the common
 * infrastructure, then the drop events are delegated to the parent adpater
 * 
 * @@author Vishy Ramaswamy
 * @@see org.eclipse.gmf.runtime.common.ui.services.dnd.drop.DelegatingDropTargetAdapter
 */
public class DiagramViewerDropAdapter
	extends DelegatingDropAdapter {

	/**
	 * Inner class that extends the drop target context to provide graphical
	 * viewer specific behaviour
	 * 
	 * @@author Vishy Ramaswamy
	 */
	private final class DiagramViewerDropTargetContext
		extends DropTargetContext {

		/**
		 * Constructor for DiagramViewerDropTargetContext
		 * 
		 * @@param activePart
		 * @@param viewerControl
		 */
		public DiagramViewerDropTargetContext(IWorkbenchPart activePart,
				Control viewerControl) {
			super(activePart, viewerControl);
		}

		/*
		 * @@see org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.DropTargetContext#dragEnter(org.eclipse.swt.dnd.DropTargetEvent)
		 */
		protected void dragEnter(DropTargetEvent event) {
			DiagramViewerDropAdapter.super.dragEnter(event);
		}

		/*
		 * @@see org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.DropTargetContext#dragLeave(org.eclipse.swt.dnd.DropTargetEvent)
		 */
		protected void dragLeave(DropTargetEvent event) {
			DiagramViewerDropAdapter.super.dragLeave(event);
		}

		/*
		 * @@see org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.DropTargetContext#dragOperationChanged(org.eclipse.swt.dnd.DropTargetEvent)
		 */
		protected void dragOperationChanged(DropTargetEvent event) {
			DiagramViewerDropAdapter.super.dragOperationChanged(event);
		}

		/*
		 * @@see org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.DropTargetContext#dragOver(org.eclipse.swt.dnd.DropTargetEvent)
		 */
		protected void dragOver(DropTargetEvent event) {
			DiagramViewerDropAdapter.super.dragOver(event);
		}

		/*
		 * @@see org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.DropTargetContext#drop(org.eclipse.swt.dnd.DropTargetEvent)
		 */
		protected void drop(DropTargetEvent event) {
			DiagramViewerDropAdapter.super.drop(event);
		}

		/*
		 * @@see org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.DropTargetContext#dropAccept(org.eclipse.swt.dnd.DropTargetEvent)
		 */
		protected void dropAccept(DropTargetEvent event) {
			DiagramViewerDropAdapter.super.dropAccept(event);
		}

		/*
		 * @@see org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.DropTargetContext#setCurrentTargetAndLocation(org.eclipse.swt.dnd.DropTargetEvent)
		 */
		protected void setCurrentTargetAndLocation(DropTargetEvent event) {
			/* Set the location */
			location = getViewerControl()
				.toControl(new Point(event.x, event.y));

			/* Set the target */
			org.eclipse.draw2d.geometry.Point gefPoint = new org.eclipse.draw2d.geometry.Point(
				location.x, location.y);

			target = DiagramViewerDropAdapter.this.getWorkbenchPart()
				.getDiagramGraphicalViewer().findObjectAt(gefPoint);

			/* Set the relative location */
			relativeLocation = IDropTargetContext.LOCATION_NONE;
		}
	}

	/**
	 * Attribute for the diagram workbench part.
	 */
	private final IDiagramWorkbenchPart workbenchPart;

	/**
	 * Attribute for the delegating drop target adapter
	 */
	private DelegatingDropTargetAdapter internalDropAdapter;

	/**
	 * Constructor
	 * 
	 * @@param workbenchPart
	 *            the diagram workbench part
	 */
	public DiagramViewerDropAdapter(IDiagramWorkbenchPart workbenchPart) {
		Assert.isNotNull(workbenchPart);

		/* Set the part */
		this.workbenchPart = workbenchPart;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.jface.util.DelegatingDropAdapter#getTransfers()
	 */
	public Transfer[] getTransfers() {
		if (getInternalDropAdapter() == null) {
			return super.getTransfers();
		}

		/* Get all the transfers */
		Transfer[] allTransferAgents = getInternalDropAdapter()
			.getAllTransferAgents();
		Transfer[] superTransferTypes = super.getTransfers();

		/* Combine the transfers */
		List myTransfers = null;
		List superTransfers = null;

		if (allTransferAgents != null)
			myTransfers = Arrays.asList(allTransferAgents);

		if (superTransferTypes != null)
			superTransfers = Arrays.asList(superTransferTypes);

		ArrayList allTransfers = new ArrayList();
		if (superTransfers != null)
			allTransfers.addAll(superTransfers);
		if (myTransfers != null)
			allTransfers.addAll(myTransfers);

		Transfer[] arrTransfers = new Transfer[allTransfers.size()];
		arrTransfers = (Transfer[]) allTransfers.toArray(arrTransfers);
		return arrTransfers;
	}

	/**
	 * Return the delegating drop adapter
	 * 
	 * @@return DelegatingDropTargetAdapter
	 */
	private DelegatingDropTargetAdapter getInternalDropAdapter() {
		return internalDropAdapter;
	}

	/**
	 * Initializes the delegating drop adapter
	 * 
	 * @@param control
	 *            the viewer's control
	 */
	protected final void initialize(Control control) {
		if (this.internalDropAdapter == null) {
			Assert.isNotNull(control);
			/* Create the drop adapter */
			DiagramViewerDropTargetContext context = new DiagramViewerDropTargetContext(
				getWorkbenchPart(), control);
			this.internalDropAdapter = new DelegatingDropTargetAdapter(context);
		}
	}

	/*
	 * @@see org.eclipse.swt.dnd.DropTargetListener#dragEnter(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void dragEnter(DropTargetEvent event) {
		getInternalDropAdapter().dragEnter(event);
	}

	/*
	 * @@see org.eclipse.swt.dnd.DropTargetListener#dragLeave(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void dragLeave(DropTargetEvent event) {
		getInternalDropAdapter().dragLeave(event);
	}

	/*
	 * @@see org.eclipse.swt.dnd.DropTargetListener#dragOperationChanged(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void dragOperationChanged(DropTargetEvent event) {
		getInternalDropAdapter().dragOperationChanged(event);
	}

	/*
	 * @@see org.eclipse.swt.dnd.DropTargetListener#dragOver(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void dragOver(DropTargetEvent event) {
		getInternalDropAdapter().dragOver(event);
	}

	/*
	 * @@see org.eclipse.swt.dnd.DropTargetListener#drop(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void drop(DropTargetEvent event) {
		getInternalDropAdapter().drop(event);
	}

	/*
	 * @@see org.eclipse.swt.dnd.DropTargetListener#dropAccept(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void dropAccept(DropTargetEvent event) {
		getInternalDropAdapter().dropAccept(event);
	}

	/**
	 * Returns the diagram workbenchPart.
	 * 
	 * @@return the workbenchPart.
	 */
	private IDiagramWorkbenchPart getWorkbenchPart() {
		return this.workbenchPart;
	}

	/*
	 * @@see org.eclipse.jface.util.DelegatingDropAdapter#isEmpty()
	 */
	public boolean isEmpty() {
		Transfer[] transfers = getTransfers();
		if (transfers != null && transfers.length > 0) {
			return false;
		}

		return true;
	}

	/**
	 * Returns the isInitialized.
	 * 
	 * @@return the isInitialized.
	 */
	protected final boolean isInitialized() {
		return getInternalDropAdapter() != null;
	}
}@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2006 IBM Corporation and others.
d18 1
d20 4
a23 1
import org.eclipse.jface.util.Assert;
a29 5
import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.DelegatingDropTargetAdapter;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.DropTargetContext;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetContext;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;

@


1.3
log
@Bugzilla#109422 gmf_head cmahoney 060418 Remove deprecated API
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2005 IBM Corporation and others.
@


1.3.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a18 1
import org.eclipse.gef.dnd.TransferDropTargetListener;
a147 9

	/**
	 * Adds the given TransferDropTargetListener.
	 * @@param listener the listener
	 * @@deprecated 
	 */
	public void addDropTargetListener(TransferDropTargetListener listener) {
		super.addDropTargetListener(listener);
	}	
a249 8
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.dnd.DelegatingDropAdapter#getTransferTypes()
	 */
	public Transfer[] getTransferTypes() {
		return getTransfers();
	}

@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2003, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Cotract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

