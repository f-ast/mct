head	1.4;
access;
symbols
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2006.02.08.14.52.10;	author ldamus;	state dead;
branches;
next	1.3;

1.3
date	2005.12.23.20.19.04;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.11;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.47;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@/******************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.emf.core.resources;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;

/**
 * <p>
 * Interface implemented by policies that constrain or augment the management
 * of {@@link ILogicalResource}s.
 * </p><p>
 * Policies are consulted to determine whether an object is allowed to be
 * separated and, when it is allowed, whether it is possible to separate or
 * absorb an object.  Policies also can provide hooks for augmenting the
 * separate and absorb operations, to perform additional work required by the
 * metamodel or by the client.  Policies are registered on the
 * <tt><a href="../../../../../../../../../extension-points/com_ibm_xtools_emf_msl_core_resourcePolicies.html">org.eclipse.gmf.runtime.emf.core.resourcePolicies</a></tt>
 * extension point.
 * </p><p>
 * It is recommended to extend the {@@link AbstractLogicalResourcePolicy} class
 * for the convenience of implementing only the behaviours required for your
 * metamodel.
 * </p>
 *
 * @@author Christian W. Damus (cdamus)
 * 
 * @@see AbstractLogicalResourcePolicy
 * 
 * @@deprecated Use the cross-resource containment support provided by EMF,
 *     instead, by defining containment features that are capable of storing
 *     proxies.
 */
public interface ILogicalResourcePolicy {
	
	/**
	 * <p>
	 * Queries whether the specified <code>eObject</code> should be allowed to
	 * be separated.  All available policies are consulted until one indicates
	 * that the <code>eObject</code> should not be separated.
	 * </p><p>
	 * Note that this method needs only consider structural or metamodel-specific
	 * semantics of the separation of an element.  It will not even be invoked
	 * by the system in cases where basic feasibility of separation is not met,
	 * such as where the <code>eObject</code> is already separated or is a
	 * logical resource root.
	 * </p>
	 * 
	 * @@param resource the logical resource containing the element to be separated
	 * @@param eObject a model element
	 * @@return whether it can be stored separately
	 */
	boolean canSeparate(ILogicalResource resource, EObject eObject);
	
	/**
	 * Invoked before separation of an element in a logical resource, for three
	 * purposes:
	 * <ul>
	 *   <li>as an opportunity to perform additional set-up before the
	 *       separation operation.  Examples include making version-controlled
	 *       resources writable</li>
	 *   <li>to suggest an alternative URI to the one passed in</li>
	 *   <li>as an opportunity to veto the separation operation.  Examples
	 *       include attempts to modify resources requiring special protection
	 *       (such as so-called "library models")</li>
	 * </ul>
	 * 
	 * @@param resource the logical resource containing the element to be separated
	 * @@param eObject a model element
	 * @@param uri URI for the physical resource that is intended to store the
	 *    <code>eObject</code> in
	 * @@return a suggested alternative URI to the one passed in, or
	 *    <code>null</code> if the policy has no special recommendation.  The
	 *    policy must not depend on this URI being accepted by the system; it
	 *    may be rejected
	 * 
	 * @@throws CannotSeparateException if the separation should not be allowed
	 *     to proceed for some reason (this is the veto)
	 * 
	 * @@see #canSeparate(ILogicalResource, EObject)
	 * @@see #postSeparate(ILogicalResource, EObject, URI)
	 */
	URI preSeparate(ILogicalResource resource, EObject eObject, URI uri) throws CannotSeparateException;
	
	/**
	 * Invoked after separation of an element in a logical resource, as an
	 * opportunity to perform additional work to complete the separation
	 * operation.
	 * 
	 * @@param resource the logical resource containing the element that was separated
	 * @@param eObject a model element that was separated
	 * @@param uri URI for the physical resource that now stores the
	 *    <code>eObject</code>.  This may be different than the URI that was
	 *    passed in the {@@link #preSeparate(ILogicalResource, EObject, URI)}
	 *    method, in case some policy suggested an alternative
	 * 
	 * @@throws CannotSeparateException if the separation should not be allowed
	 *     to proceed for some reason (this is the veto)
	 * 
	 * @@see #canSeparate(ILogicalResource, EObject)
	 * @@see #preSeparate(ILogicalResource, EObject, URI)
	 */
	void postSeparate(ILogicalResource resource, EObject eObject, URI uri);
	
	/**
	 * Invoked before absorption of an element in a logical resource, for two
	 * purposes:
	 * <ul>
	 *   <li>as an opportunity to perform additional set-up before the
	 *       absorption operation.  Examples include making version-controlled
	 *       resources writable</li>
	 *   <li>as an opportunity to veto the absorption operation.  Examples
	 *       include attempts to modify resources requiring special protection
	 *       (such as so-called "library models")</li>
	 * </ul>
	 * 
	 * @@param resource the logical resource containing the element to be absorbed
	 * @@param eObject the element to be absorbed
	 * 
	 * @@throws CannotAbsorbException if the absorption should not be allowed
	 *     to proceed for some reason (this is the veto)
	 * 
	 * @@see #postAbsorb(ILogicalResource, EObject)
	 */
	void preAbsorb(ILogicalResource resource, EObject eObject) throws CannotAbsorbException;

	/**
	 * Invoked after absorption of an element in a logical resource, as an
	 * opportunity to perform additional work to complete the absorption
	 * operation.
	 * 
	 * @@param resource the logical resource containing the element that was absorbed
	 * @@param eObject the element that was absorbed
	 * 
	 * @@see #preAbsorb(ILogicalResource, EObject)
	 */
	void postAbsorb(ILogicalResource resource, EObject eObject);
}
@


1.3
log
@[113863], gmf_head,Contributed by cdamus, 051223, Remove the LogicalResource implementation (obsoleted by Cross-Resource Containment in EMF)
@
text
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d39 4
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

