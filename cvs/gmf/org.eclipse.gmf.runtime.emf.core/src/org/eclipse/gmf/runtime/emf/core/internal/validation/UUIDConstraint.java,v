head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080722-1827:1.4
	v20080716-1600:1.3.4.1
	v20080716-1642:1.4
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080425-1959:1.3
	v20080407-0930:1.3
	v20080404-1111:1.3
	v20080401-1425:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080201-2010:1.3
	v20080201-0201:1.3
	v20080114-2222:1.3
	v20080114-1111:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070330-1300:1.3
	v20070208-1800:1.3
	v20070105-1200:1.2.2.1
	v20070103-0300:1.3
	M4_20:1.3
	v20061218-1500:1.2.2.1
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20060919-0800:1.2.2.1
	M1_20:1.2
	v20060831-1500:1.2
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-0800:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1;
locks; strict;
comment	@# @;


1.4
date	2008.07.08.19.50.15;	author ahunter;	state Exp;
branches;
next	1.3;
commitid	7a664873c4f74567;

1.3
date	2006.10.03.15.05.22;	author ahunter;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2006.02.08.14.52.13;	author ldamus;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2005.12.22.16.21.07;	author vramaswamy;	state Exp;
branches;
next	;

1.2.2.1
date	2006.09.13.16.46.17;	author ahunter;	state Exp;
branches;
next	;

1.3.4.1
date	2008.07.08.19.46.20;	author ahunter;	state Exp;
branches;
next	;
commitid	309d4873c40c4567;


desc
@@


1.4
log
@[238118] gmf-R2_1_maintenance laurent 080708 UUIDConstraint don't apply for resources that don't use ID or UUID
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.core.internal.validation;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.validation.AbstractModelConstraint;
import org.eclipse.emf.validation.IValidationContext;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;

/**
 * A constraint that enforces universally unique IDs (UUIDs), that is, it fails
 * if multiple eObjects have the same UUID.
 * 
 * @@author Scott Cowan
 */
public class UUIDConstraint
	extends AbstractModelConstraint {

	/** The rule ID for ambiguous ID errors */
	public static final String RULE_ID = "org.eclipse.gmf.runtime.emf.core.UUIDConstraint"; //$NON-NLS-1$

	public UUIDConstraint() {
		super();
	}

	/**
	 * Return a label for an eObject.
	 * 
	 * @@param eObject
	 *            an eObject
	 * @@return a label
	 */
	private String getEObjectLabel(EObject eObject) {
		return EMFCoreUtil.getQualifiedName(eObject, true);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.emf.validation.AbstractModelConstraint#validate(org.eclipse.emf.validation.IValidationContext)
	 */
	public IStatus validate(IValidationContext ctx) {

		EObject target = ctx.getTarget();
		Resource resource = target.eResource();

		if (!(resource instanceof XMLResource))
			return ctx.createSuccessStatus();

		// Fail constraint if target is the key of an eObject to ID map entry,
		// but not the value of an ID to eObject map entry.
		XMLResource xmlResource = (XMLResource) resource;
		String id = xmlResource.getID(target);

		// Only validate EObjects which have a UUID
		if (null != id) {
		   EObject eObject = xmlResource.getEObject(id);
		   if (eObject != target) {
		      return ctx
				   .createFailureStatus(new Object[] {getEObjectLabel(target)});
		   }
		}

		return ctx.createSuccessStatus();
	}
}
@


1.3
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d67 7
a73 4
		EObject eObject = xmlResource.getEObject(id);
		if (eObject != target) {
			return ctx
				.createFailureStatus(new Object[] {getEObjectLabel(target)});
@


1.3.4.1
log
@[238118] gmf-R2_1_maintenance laurent 080708 UUIDConstraint don't apply for resources that don't use ID or UUID
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2008 IBM Corporation and others.
d67 4
a70 7
		// Only validate EObjects which have a UUID
		if (null != id) {
		   EObject eObject = xmlResource.getEObject(id);
		   if (eObject != target) {
		      return ctx
				   .createFailureStatus(new Object[] {getEObjectLabel(target)});
		   }
@


1.2
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
@


1.2.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.1
log
@[113540], gmf_head, Contributed by scowan, 051222, Need defense against potential duplicate UUIDs
@
text
@d20 1
a20 1
import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
d46 1
a46 1
		return EObjectUtil.getQName(eObject, true);
@

