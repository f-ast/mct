head	1.4;
access;
symbols
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051201-1800:1.3
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2006.02.08.14.52.11;	author ldamus;	state dead;
branches;
next	1.3;

1.3
date	2005.11.25.21.58.30;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.12;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.44;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.core.edit;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;


/**
 * Interface for a class interested in individual resource and object
 * lifecycle events.
 * <p>
 * This interface is intended to be implemented by clients.  However,
 * it is often more convenient to extend the {@@link DemuxedMListener} class
 * and redefine only the interesting callback methods.
 * </p><p>
 * The {@@link IDemuxedMListener2} interface defines additional callbacks for
 * events pertaining to the management of separate elements in a logical
 * resource.
 * </p>
 * 
 * @@author Anthony Hunter
 * 
 * @@see DemuxingMListener
 * @@see DemuxedMListener
 */
public interface IDemuxedMListener {

	/**
	 * This method is invoked by the {@@link DemuxingMListener} to get a
	 * filter describing the events of interest to the implementing class.
	 * If multiple filters are required, they should be composed using
	 * an {@@linkplain MFilter.Or or} filter.
	 * 
	 * @@return the filter required, or <code>null</code> if no filtering
	 *     is needed (equivalent to {@@link MFilter#WILDCARD_FILTER})
	 */
	public MFilter getFilter();

	/**
	 * Notifies me of an event indicating that a resource has been unloaded.
	 * 
	 * @@param notification the raw notification
	 * @@param resource the resource that was unloaded
	 * @@param root the root object of the <code>resource</code>, which is now
	 *     unloaded and therefore not actually accessible from the
	 *     <code>resource</code>
	 */
	public void handleResourceUnloadedEvent(Notification notification,
		Resource resource, EObject root);

	/**
	 * Notifies me of an event indicating that a resource has been loaded.
	 * It is my responsibility to determine whether the resouce was loaded
	 * with errors. Also, a resource with errors may have no contents.
	 * 
	 * @@param notification the raw notification
	 * @@param resource the resource that was loaded
	 */
	public void handleResourceLoadedEvent(Notification notification,
		Resource resource);

	/**
	 * Notifies me of an event indicating that a resource has been dirtied (is
	 * now different from the saved state).
	 * 
	 * @@param notification the raw notification
	 * @@param resource the resource that was dirtied
	 */
	public void handleResourceDirtiedEvent(Notification notification,
		Resource resource);

	/**
	 * Notifies me of an event indicating that a resource has been saved.
	 * 
	 * @@param notification the raw notification
	 * @@param resource the resource that was saved
	 */
	public void handleResourceSavedEvent(Notification notification,
		Resource resource);

	/**
	 * Notifies me of an event indicating that a resource has added a reference
	 * dependency (import) on another resource.
	 * 
	 * @@param notification the raw notification
	 * @@param resource the resource that has a new import
	 */
	public void handleResourceImportedEvent(Notification notification,
		Resource resource);
	
	/**
	 * Notifies me of an event indicating that a resource has been referenced
	 * (imported) by another resource.
	 * 
	 * @@param notification the raw notification
	 * @@param resource the resource that has a new export
	 */
	public void handleResourceExportedEvent(Notification notification,
		Resource resource);
	
	/**
	 * Notifies me of an event indicating that an element has been created in
	 * a resource.
	 * 
	 * @@param notification the raw notification
	 * @@param container the container of the new element
	 * @@param newElement the new element
	 */
	public void handleElementCreatedEvent(Notification notification,
		EObject container, EObject newElement);

	/**
	 * Notifies me of an event indicating that an element has been removed from
	 * a resource.
	 * 
	 * @@param notification the raw notification
	 * @@param container the former container of the element
	 * @@param oldElement the element that was removed
	 */
	public void handleElementDeletedEvent(Notification notification,
		EObject container, EObject oldElement);

	/**
	 * Notifies me of an event indicating that an element has been modified.
	 * 
	 * @@param notification the raw notification
	 * @@param element the changed element
	 */
	public void handleElementModifiedEvent(Notification notification,
		EObject element);

	/**
	 * Notifies me of an event indicating that an undo interval has been closed.
	 * 
	 * @@param notification the raw notification
	 * @@param undoInterval the closed undo interval
	 */
	public void handleUndoIntervalClosedEvent(Notification notification,
		MUndoInterval undoInterval);

	/**
	 * Notifies me of an event indicating that all of the undo intervals up to
	 * and including the specified interval have been flush from the stack.
	 * 
	 * @@param notification the raw notification
	 * @@param undoInterval the flushed undo interval
	 */
	public void handleUndoIntervalsFlushedEvent(Notification notification,
		MUndoInterval undoInterval);
}
@


1.3
log
@[115700] gmf_head, cmcgee, 051125, DemuxingMListener notifies clients that resource is loaded even when the load actually failed
@
text
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d64 2
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

