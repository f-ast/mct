head	1.5;
access;
symbols
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.02.08.14.52.11;	author ldamus;	state dead;
branches;
next	1.4;

1.4
date	2005.12.29.19.01.08;	author vramaswamy;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.23.20.19.04;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.12;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.48;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@/******************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.emf.core.internal.resources;

import java.io.IOException;
import java.util.Collections;
import java.util.Map;

import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;


/**
 * A wrapper for {@@link Resource}s that implements the {@@link ILogicalResource}
 * API but does not allow the separation of any elements.
 *
 * @@author Christian W. Damus (cdamus)
 * 
 * @@see #canSeparate(EObject)
 * 
 * @@deprecated Use the cross-resource containment support provided by EMF,
 *     instead, by defining containment features that are capable of storing
 *     proxies.
 */
public class LogicalResourceWrapper
	extends AbstractResourceWrapper
	implements org.eclipse.gmf.runtime.emf.core.resources.ILogicalResource {
	
	private static final CanonicalMap instances = new CanonicalMap() {
		protected AbstractResourceWrapper createWrapper(Resource resource) {
			return new LogicalResourceWrapper(resource);
		}};
	
	/**
	 * Initializes me with the delegate that I wrap.
	 * 
	 * @@param res my delegate
	 */
	private LogicalResourceWrapper(Resource res) {
		super(res);
	}
	
	/**
	 * Gets the canonical logical view of the specified
	 * <code>resource</code>.  Note that, if the <code>resource</code>
	 * argument is already a logical resource, then it is returned as is.
	 * 
	 * @@param resource the resource to get an unmodifiable view of
	 * @@return its unmodifiable view
	 */
	public static org.eclipse.gmf.runtime.emf.core.resources.ILogicalResource get(
			Resource resource) {
		org.eclipse.gmf.runtime.emf.core.resources.ILogicalResource result = null;
		
		if (resource instanceof LogicalResourceWrapper) {
			result = (org.eclipse.gmf.runtime.emf.core.resources.ILogicalResource) resource;
		} else {
			result = (org.eclipse.gmf.runtime.emf.core.resources.ILogicalResource) instances.get(resource);
		}
		
		return result;
	}

	//
	// ILogicalResource methods
	//
	
	/**
	 * I cannot separate any elements.
	 * 
	 * @@return <code>false</code>, always
	 */
	public boolean canSeparate(EObject eObject) {
		return false;
	}

	/**
	 * I cannot separate any elements.
	 * 
	 * @@return <code>false</code>, always
	 */
	public boolean isSeparate(EObject eObject) {
		return false;
	}

	public void separate(EObject eObject, URI uri) {
		throw new IllegalArgumentException("cannot separate eObject"); //$NON-NLS-1$
	}

	public void absorb(EObject eObject) {
		throw new IllegalArgumentException("eObject is not separate"); //$NON-NLS-1$
	}
	
	public boolean isLoaded(EObject eObject) {
		return true;  // no object in a non-logical-resource can be unloaded
	}
	
	public void load(EObject eObject)
		throws IOException {
		
		throw new IllegalArgumentException("eObject is not separate"); //$NON-NLS-1$
	}

	public Map getMappedResources() {
		return Collections.EMPTY_MAP;
	}

	public Object getAdapter(Class adapter) {
		return Platform.getAdapterManager().getAdapter(this, adapter);
	}
}
@


1.4
log
@[110317], gmf_head,Contributed by cdamus, 051229, Compiler warning count should be 0 - runtime foundation layer components
@
text
@@


1.3
log
@[113863], gmf_head,Contributed by cdamus, 051223, Remove the LogicalResource implementation (obsoleted by Cross-Resource Containment in EMF)
@
text
@a22 1
import org.eclipse.gmf.runtime.emf.core.resources.ILogicalResource;
d39 1
a39 1
	implements ILogicalResource {
d63 3
a65 2
	public static ILogicalResource get(Resource resource) {
		ILogicalResource result = null;
d68 1
a68 1
			result = (ILogicalResource) resource;
d70 1
a70 1
			result = (ILogicalResource) instances.get(resource);
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a15 1
import java.util.Collection;
a16 1
import java.util.Iterator;
a19 2
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.impl.AdapterImpl;
a22 1

d33 4
a46 2
	private Map resourceMap;
	
d117 1
a117 49
		if (resourceMap == null) {
			resourceMap = new java.util.HashMap() {
				{
					eAdapters().add(new AdapterImpl() {
						public void notifyChanged(Notification msg) {
							if (msg.getFeatureID(null) == RESOURCE__CONTENTS) {
								switch (msg.getEventType()) {
								case Notification.ADD:
									add(msg.getNewValue());
									break;
								case Notification.ADD_MANY:
									addAll((Collection) msg.getNewValue());
									break;
								case Notification.REMOVE:
									remove(msg.getOldValue());
									break;
								case Notification.REMOVE_MANY:
									removeAll((Collection) msg.getOldValue());
									break;
								case Notification.SET:
									remove(msg.getOldValue());
									add(msg.getNewValue());
								}
							}
						}});
					
					addAll(getContents());
				}
				
				void add(Object o) {
					put(o, UnmodifiableResourceView.get(getWrappedResource()));
				}
				
				void addAll(Collection c) {
					for (Iterator iter = c.iterator(); iter.hasNext();) {
						add(iter.next());
					}
				}
				
				void removeAll(Collection c) {
					for (Iterator iter = c.iterator(); iter.hasNext();) {
						remove(c);
					}
				}};
			
			resourceMap = Collections.unmodifiableMap(resourceMap);
		}
		
		return resourceMap;
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

