head	1.5;
access;
symbols
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.02.08.14.52.11;	author ldamus;	state dead;
branches;
next	1.4;

1.4
date	2005.12.29.19.01.08;	author vramaswamy;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.23.20.19.04;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.12;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.44;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@/******************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.emf.core.edit;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;



/**
 * Default implementation of the {@@link IDemuxedMListener} interface, which is
 * convenient for subclassing to define only the essential event handlers.
 * Also, this class takes care of constructing a {@@link DemuxingMListener}
 * to funnel events from the editing domain.
 * <p>
 * This class is designed to be extended by clients.
 * </p>
 * 
 * @@author Christian W. Damus (cdamus)
 * 
 * @@see DemuxingMListener
 */
public class DemuxedMListener
	implements IDemuxedMListener, IDemuxedMListener2 {

	private final DemuxingMListener listener;
	
	/**
	 * Initializes me for the default editing domain.
	 */
	public DemuxedMListener() {
		listener = new DemuxingMListener(this);
	}
	
	/**
	 * Initializes me for the specified editing domain.
	 * 
	 * @@param domain an editing domain to listen to
	 */
	public DemuxedMListener(MEditingDomain domain) {
		listener = new DemuxingMListener(this, domain);
	}

	/**
	 * Starts or resumes listening until the next call to the {@@link #stopListening()}
	 * method.
	 * 
	 * @@see #stopListening()
	 */
	public void startListening() {
		listener.startListening();
	}
	
	/**
	 * Suspends listening until the next call to the {@@link #startListening()}
	 * method.
	 * 
	 * @@see #startListening()
	 */
	public void stopListening() {
		listener.stopListening();
	}
	
	/**
	 * By default, returns a filter that listens to all events.
	 * 
	 * @@return the {@@link MFilter#WILDCARD_FILTER}
	 */
	public MFilter getFilter() {
		return MFilter.WILDCARD_FILTER;
	}

	/**
	 * Does nothing.
	 */
	public void handleResourceUnloadedEvent(Notification notification,
			Resource resource, EObject modelRoot) {
		// nothing to do
	}

	/**
	 * Does nothing.
	 */
	public void handleResourceLoadedEvent(Notification notification,
			Resource resource) {
		// nothing to do
	}

	/**
	 * Does nothing.
	 */
	public void handleResourceDirtiedEvent(Notification notification,
			Resource resource) {
		// nothing to do
	}

	/**
	 * Does nothing.
	 */
	public void handleResourceSavedEvent(Notification notification,
			Resource resource) {
		// nothing to do
	}

	/**
	 * Does nothing.
	 */
	public void handleResourceImportedEvent(Notification notification,
			Resource resource) {
		// nothing to do
	}

	/**
	 * Does nothing.
	 */
	public void handleResourceExportedEvent(Notification notification,
			Resource resource) {
		// nothing to do
	}

	/**
	 * Does nothing.
	 */
	public void handleElementCreatedEvent(Notification notification,
			EObject owner, EObject newElement) {
		// nothing to do
	}

	/**
	 * Does nothing.
	 */
	public void handleElementDeletedEvent(Notification notification,
			EObject owner, EObject oldElement) {
		// nothing to do
	}

	/**
	 * Does nothing.
	 */
	public void handleElementModifiedEvent(Notification notification,
			EObject element) {
		// nothing to do
	}

	/**
	 * Does nothing.
	 */
	public void handleUndoIntervalClosedEvent(Notification notification,
			MUndoInterval undoInterval) {
		// nothing to do
	}

	/**
	 * Does nothing.
	 */
	public void handleUndoIntervalsFlushedEvent(Notification notification,
			MUndoInterval undoInterval) {
		// nothing to do
	}

	/**
	 * Does nothing.
	 * 
	 * @@deprecated Use the cross-resource containment support provided by EMF,
	 *     instead, by defining containment features that are capable of storing
	 *     proxies.
	 */
	public void handleElementSeparatedEvent(Notification notification,
			org.eclipse.gmf.runtime.emf.core.resources.ILogicalResource resource,
			EObject eObject, Resource newResource) {
		// nothing to do
	}
	
	/**
	 * Does nothing.
	 * 
	 * @@deprecated Use the cross-resource containment support provided by EMF,
	 *     instead, by defining containment features that are capable of storing
	 *     proxies.
	 */
	public void handleElementAbsorbedEvent(Notification notification,
			org.eclipse.gmf.runtime.emf.core.resources.ILogicalResource resource,
			EObject eObject, Resource oldResource) {
		// nothing to do
	}
	
	/**
	 * Does nothing.
	 * 
	 * @@deprecated Use the cross-resource containment support provided by EMF,
	 *     instead, by defining containment features that are capable of storing
	 *     proxies.
	 */
	public void handleElementLoadedEvent(Notification notification,
			org.eclipse.gmf.runtime.emf.core.resources.ILogicalResource resource,
			EObject eObject) {
		// nothing to do
	}

	/*
	 * @@see org.eclipse.gmf.runtime.emf.core.edit.IDemuxedMListener2#handleRootAddedEvent(org.eclipse.emf.common.notify.Notification, org.eclipse.emf.ecore.resource.Resource, org.eclipse.emf.ecore.EObject)
	 */
	public void handleRootAddedEvent(Notification notification, Resource resource, EObject eObject) {
		// nothing to do
	}

	/*
	 * @@see org.eclipse.gmf.runtime.emf.core.edit.IDemuxedMListener2#handleRootRemovedEvent(org.eclipse.emf.common.notify.Notification, org.eclipse.emf.ecore.resource.Resource, org.eclipse.emf.ecore.EObject)
	 */
	public void handleRootRemovedEvent(Notification notification, Resource resource, EObject eObject) {
		// nothing to do
	}
}
@


1.4
log
@[110317], gmf_head,Contributed by cdamus, 051229, Compiler warning count should be 0 - runtime foundation layer components
@
text
@@


1.3
log
@[113863], gmf_head,Contributed by cdamus, 051223, Remove the LogicalResource implementation (obsoleted by Cross-Resource Containment in EMF)
@
text
@a18 2
import org.eclipse.gmf.runtime.emf.core.resources.ILogicalResource;

d180 2
a181 1
			ILogicalResource resource, EObject eObject, Resource newResource) {
d193 2
a194 1
			ILogicalResource resource, EObject eObject, Resource oldResource) {
d206 2
a207 1
			ILogicalResource resource, EObject eObject) {
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d176 4
d188 4
d200 4
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

