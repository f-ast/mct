head	1.4;
access;
symbols
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2006.02.08.14.52.10;	author ldamus;	state dead;
branches;
next	1.3;

1.3
date	2006.01.24.16.46.34;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.11;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.45;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@/******************************************************************************
 * Copyright (c) 2003, 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.core.internal.commands;

import java.util.Collections;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.emf.core.internal.domain.MSLEditingDomain;
import org.eclipse.gmf.runtime.emf.core.internal.plugin.MSLDebugOptions;
import org.eclipse.gmf.runtime.emf.core.internal.plugin.MSLPlugin;
import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;

/**
 * Encapsulation of a change to some synthetic feature of a {@@link Resource}.
 * 
 * @@author Christian W. Damus (cdamus)
 * @@author rafikj
 */
public abstract class MSLResourceCommand
	extends MSLAbstractCommand {

	private Resource owner = null;

	private int feature = -1;

	/**
	 * Constructor.
	 */
	protected MSLResourceCommand(MSLEditingDomain domain, Resource owner,
			int feature) {

		super(domain);

		this.owner = owner;
		this.feature = feature;
	}

	public void dispose() {

		super.dispose();

		owner = null;
		feature = -1;
	}

	public boolean canExecute() {
		return ((owner != null) && (feature >= 0));
	}

	public boolean canUndo() {
		return ((owner != null) && (feature >= 0));
	}

	public void execute() {

		if (!canExecute()) {

			RuntimeException e = new IllegalStateException(
				"cannot execute EMF command"); //$NON-NLS-1$

			Trace.throwing(MSLPlugin.getDefault(),
				MSLDebugOptions.EXCEPTIONS_THROWING, getClass(), "execute", e); //$NON-NLS-1$

			throw e;
		}
	}

	public final Resource getResource() {
		return owner;
	}

	/**
	 * resolve some EObject.
	 */
	protected EObject resolve(EObject eObject) {
		return eObject;
	}
	
	public final int getFeatureID() {
		return feature;
	}

	public Set getParticipantTypes() {
		return owner == null ? Collections.EMPTY_SET
			: Collections.singleton(ResourceUtil.getType(owner));

	}
	
	/**
	 * Gets the value of the specified feature of a resource.
	 * 
	 * @@param res the resource
	 * @@param featureID the feature to get
	 * 
	 * @@return the feature's value
	 */
	protected final Object eGet(Resource res, int featureID) {
		Object result = null;
		
		switch (featureID) {
		case Resource.RESOURCE__CONTENTS:
			result = res.getContents();
			break;
		case Resource.RESOURCE__ERRORS:
			result = res.getErrors();
			break;
		case Resource.RESOURCE__IS_LOADED:
			result = Boolean.valueOf(res.isLoaded());
			break;
		case Resource.RESOURCE__IS_MODIFIED:
			result = Boolean.valueOf(res.isModified());
			break;
		case Resource.RESOURCE__IS_TRACKING_MODIFICATION:
			result = Boolean.valueOf(res.isTrackingModification());
			break;
		case Resource.RESOURCE__RESOURCE_SET:
			result = res.getResourceSet();
			break;
		case Resource.RESOURCE__URI:
			result = res.getURI();
			break;
		case Resource.RESOURCE__WARNINGS:
			result = res.getWarnings();
			break;
		}
		
		return result;
	}
}@


1.3
log
@[120369], gmf_head,Contributed by cvogt, 060124, MSLConstants Class Contains References to Non-GMF
@
text
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a18 2
import org.eclipse.emf.ecore.util.EcoreUtil;

a22 1
import org.eclipse.gmf.runtime.emf.core.internal.util.MSLConstants;
d88 1
a88 14

		if (MSLConstants.PROXY_HACK)
			return eObject;

		else {

			if (eObject == null)
				return null;

			if (!eObject.eIsProxy())
				return eObject;

			return EcoreUtil.resolve(eObject, domain.getResourceSet());
		}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2003, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

