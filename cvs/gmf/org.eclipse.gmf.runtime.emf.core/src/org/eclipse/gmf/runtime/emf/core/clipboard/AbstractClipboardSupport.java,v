head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080722-1827:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.6
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20080407-0930:1.4
	v20080404-1111:1.4
	v20080401-1425:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080201-2010:1.4
	v20080201-0201:1.4
	v20080114-2222:1.4
	v20080114-1111:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	v20070105-1200:1.4
	v20070103-0300:1.4
	M4_20:1.4
	v20061218-1500:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060831-1500:1.4
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2006.03.07.02.40.43;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.08.14.52.14;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.12;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.42;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[129773] gmf_head cdamus 060306 EMFCoreUtil.destroy() cannot destroy non-contained dependents
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.emf.core.clipboard;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.gmf.runtime.emf.clipboard.core.IClipboardSupport;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;


/**
 * A partial implementation of the {@@link IClipboardSupport} interface that
 * uses MSL facilities to implement some of the metamodel-specific hooks that
 * MSL, itself, provides support for.
 *
 * @@author Christian W. Damus (cdamus)
 */
public abstract class AbstractClipboardSupport implements IClipboardSupport {

	/**
	 * Initializes me.
	 */
	public AbstractClipboardSupport() {
		super();
	}

	/**
	 * MSL has extensions for metamodels to indicate which objects can have
	 * names.
	 */
	public boolean isNameable(EObject eObject) {
		return PackageUtil.getNameAttribute(eObject.eClass()) != null;
	}
	
	/**
	 * MSL has extensions for metamodels to get object names.
	 */
	public String getName(EObject eObject) {
		return EMFCoreUtil.getName(eObject);
	}
	
	/**
	 * MSL has extensions for metamodels to set object names.
	 */
	public void setName(EObject eObject, String name) {
		if (!isNameable(eObject)) {
			throw new IllegalArgumentException("eObject not nameable"); //$NON-NLS-1$
		}
		
		EMFCoreUtil.setName(eObject, name);
	}

	public XMLResource getResource(EObject eObject) {
		return (XMLResource) eObject.eResource();
	}
	
	/**
	 * MSL implements creation notifications.
	 */
	public void sendCreateNotification(EObject eObject) {
		Resource res = eObject.eResource();
		
		if (res != null) {
			Notification createNotification = new ENotificationImpl(
				(InternalEObject) eObject, 0, // classical CREATE event type
				(EStructuralFeature) null, (Object) null, (Object) null, -1);
			
			eObject.eNotify(createNotification);
		}
	}
	
	/**
	 * MSL has extensions for metamodels to implement containment conditions.
	 */
	public boolean canContain(EObject container, EReference reference,
			EClass containedType) {
		return PackageUtil.canContain(
			container.eClass(),
			reference,
			containedType,
			false);  // not recursive
	}
}
@


1.3
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@a69 7
	
	/**
	 * MSL implements rich object destruction semantics.
	 */
	public void destroy(EObject eObject) {
		EMFCoreUtil.destroy(eObject);
	}
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d19 1
a23 1

d25 2
a26 8
import org.eclipse.gmf.runtime.emf.core.EventTypes;
import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;
import org.eclipse.gmf.runtime.emf.core.internal.commands.MCommand;
import org.eclipse.gmf.runtime.emf.core.internal.commands.MSLEventCommand;
import org.eclipse.gmf.runtime.emf.core.internal.domain.MSLEditingDomain;
import org.eclipse.gmf.runtime.emf.core.internal.util.MSLUtil;
import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;
d50 1
a50 1
		return MetaModelUtil.getNameAttribute(eObject.eClass()) != null;
d57 1
a57 1
		return EObjectUtil.getName(eObject);
d68 1
a68 1
		EObjectUtil.setName(eObject, name);
d75 1
a75 1
		EObjectUtil.destroy(eObject);
d89 3
a91 2
			MSLEditingDomain domain =
				(MSLEditingDomain) MEditingDomain.getEditingDomain(res);
d93 1
a93 24
			if (domain != null) {
				Notification doNotification = new ENotificationImpl(
					(InternalEObject) eObject,
					EventTypes.CREATE,
					null,
					(Object) null,
					(Object) null,
					-1);
	
				Notification undoNotification = new ENotificationImpl(
					(InternalEObject) eObject,
					EventTypes.UNCREATE,
					null,
					(Object) null,
					(Object) null,
					-1);
		
				MCommand command = MSLEventCommand.create(
					domain,
					doNotification,
					undoNotification);
		
				MSLUtil.execute(domain, command);
			}
d102 1
a102 1
		return MetaModelUtil.canContain(
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

