head	1.7;
access;
symbols
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2006.02.08.14.52.10;	author ldamus;	state dead;
branches;
next	1.6;

1.6
date	2006.02.03.14.15.25;	author vramaswamy;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.16.18.06.50;	author vramaswamy;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.16.17.53.09;	author vramaswamy;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.16.17.16.29;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.11;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.54;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@/******************************************************************************
 * Copyright (c) 2002-2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.core.internal.notifications;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.gmf.runtime.emf.core.EventTypes;
import org.eclipse.gmf.runtime.emf.core.internal.domain.MSLEditingDomain;
import org.eclipse.gmf.runtime.emf.core.internal.util.MSLUtil;

/**
 * EObject event listener.
 * 
 * @@author rafikj
 */
public class MSLObjectListener {

	private MSLEditingDomain domain = null;

	/**
	 * Constructor.
	 */
	public MSLObjectListener(MSLEditingDomain domain) {
		super();
		this.domain = domain;
	}

	/**
	 * Handle object event.
	 */
	public void handleEvent(Notification notification) {
		EObject notifier = (EObject) notification.getNotifier();
		Resource resource = notifier.eResource();

		int eventType = notification.getEventType();

		if (resource != null) {

			if (!domain.getResouceListener().resourceFinishedLoading(resource))
				return;
		}

		Object newValue = notification.getNewValue();
		Object oldValue = notification.getOldValue();

		// convert the CREATE events to a more user friendly version.
		if (eventType == EventTypes.CREATE) {

			if (newValue instanceof EObject) {

				EObject newObject = (EObject) newValue;

				domain.getContentAdapter().listenToModifications(newObject);

				MSLUtil.sendCreateEvent(domain, newObject);
			}
			return;
		}

		// ignore events that do not modify the object.
		if (((eventType == Notification.SET) || (eventType == Notification.UNSET))) {

			if (newValue == oldValue)
				return;

			// ignore idempotent changes to data types that we know to be
			// immutable in Java
			if ((newValue instanceof Number) && newValue.equals(oldValue))
				return;
			if ((newValue instanceof String) && newValue.equals(oldValue))
				return;
			if ((newValue instanceof Boolean) && newValue.equals(oldValue))
				return;
			if ((newValue instanceof Character) && newValue.equals(oldValue))
				return;
		}
		// populate undo stack.
		domain.getCommandGenerator().generateCommand(notification);

		// forward event to broker.
		domain.getEventBroker().addEvent(notification);
	}
}@


1.6
log
@[113892], gmf_head,Contributed by cvogt, 060203, Integration of the EMF dynamic references for reverse reference lookup
@
text
@@


1.5
log
@[112531], gmf_head, Contributed by cdamus, 051216, MSLResource Inconsistent with Modification Tracking API
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
a13 5
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

a15 1
import org.eclipse.emf.ecore.EReference;
a18 1
import org.eclipse.gmf.runtime.emf.core.internal.resources.MResource;
a46 2
		Object feature = notification.getFeature();

a89 4
		// process references.
		processReferences(notifier, eventType, newValue, oldValue, feature,
				resource);

a92 64

	/**
	 * Process references and update reference maps.
	 */
	private void processReferences(EObject notifier, int eventType,
			Object newValue, Object oldValue, Object feature, Resource resource) {

		if (feature instanceof EReference) {

			// maintain the reverese reference map.
			EReference reference = (EReference) feature;

			List newObjects = new ArrayList();
			List oldObjects = new ArrayList();

			if ((eventType == Notification.SET)
					|| (eventType == Notification.UNSET)
					|| (eventType == Notification.ADD)
					|| (eventType == Notification.REMOVE)
					|| (eventType == Notification.ADD_MANY)
					|| (eventType == Notification.REMOVE_MANY)
					|| (eventType == Notification.RESOLVE)) {

				if (newValue instanceof EObject)
					newObjects.add(newValue);

				else if (newValue instanceof Collection) {

					Iterator i = ((Collection) newValue).iterator();

					while (i.hasNext()) {

						Object newObject = i.next();

						if (newObject instanceof EObject)
							newObjects.add(newObject);
					}
				}

				if (oldValue instanceof EObject)
					oldObjects.add(oldValue);

				else if (oldValue instanceof Collection) {

					Iterator i = ((Collection) oldValue).iterator();

					while (i.hasNext()) {

						Object oldObject = i.next();

						if (oldObject instanceof EObject)
							oldObjects.add(oldObject);
					}
				}
			}

			if (resource instanceof MResource)
				((MResource) resource).getHelper().registerReferences(domain,
						notifier, reference, newObjects, oldObjects);
			else
				MSLUtil.registerReferences(domain, notifier, reference,
						newObjects, oldObjects);
		}
	}
@


1.4
log
@[112531], gmf_head, Contributed by cdamus, 051216, MSLResource Inconsistent with Modification Tracking API
@
text
@a21 1
import org.eclipse.emf.ecore.EStructuralFeature;
a59 22
			// set resource dirty flag.
			switch (eventType) {
				case Notification.SET:
				case Notification.UNSET:
				case Notification.MOVE: {
					if (!notification.isTouch() && !resource.isModified()) {
						if (!isTransient(notifier, feature))
							resource.setModified(true);
					}
					break;
				}
	
				case Notification.ADD:
				case Notification.REMOVE:
				case Notification.ADD_MANY:
				case Notification.REMOVE_MANY: {
					if (!resource.isModified() && !isTransient(notifier, feature))
						resource.setModified(true);
					break;
				}
			}

a107 36
	 * check if the feature or one of its containers is transient
	 * 
	 * @@param notifier
	 * @@param feature
	 * @@param transientChange
	 * @@return
	 */
	private boolean isTransient(EObject notifier, Object feature) {
		if (feature instanceof EStructuralFeature) {
			if (((EStructuralFeature) feature).isTransient())
				return true;
			else
				// calling isTransient could be a lengthy operation
				return isTransient(notifier);
		}
		return false;
	}

	/**
	 * Is object transient?
	 */
	private boolean isTransient(EObject eObject) {
		EStructuralFeature containmentFeature = eObject.eContainmentFeature();
		while (containmentFeature != null) {
			if (containmentFeature.isTransient())
				return true;
			eObject = eObject.eContainer();
			if (eObject != null)
				containmentFeature = eObject.eContainmentFeature();
			else
				break;
		}
		return false;
	}

	/**
@


1.3
log
@[117131], gmf_head, Contributed by cdamus, 051216, MSLObjectListener.processNotification(..) incorrectly identifying that string value has changed
@
text
@a23 1

d58 1
a58 1
			
d66 2
a67 2
					if (!notification.isTouch() && !resource.isModified()){
						if(!isTransient(notifier, feature))
d72 1
a72 1

d82 1
d107 1
a107 1
			
d109 1
a109 1
			//    immutable in Java
d124 1
a124 1
			resource);
d132 1
d143 1
a143 1
				// calling isTransient could be a lengthy operation  
d148 1
a148 1
	
d159 1
a159 1
				containmentFeature =  eObject.eContainmentFeature();
d181 6
a186 6
				|| (eventType == Notification.UNSET)
				|| (eventType == Notification.ADD)
				|| (eventType == Notification.REMOVE)
				|| (eventType == Notification.ADD_MANY)
				|| (eventType == Notification.REMOVE_MANY)
				|| (eventType == Notification.RESOLVE)) {
d223 1
a223 1
					notifier, reference, newObjects, oldObjects);
d226 1
a226 1
					newObjects, oldObjects);
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d107 4
a110 1
			if ((newValue instanceof Number) && (newValue.equals(oldValue)))
d112 5
a116 1
			if ((newValue instanceof Character) && (newValue.equals(oldValue)))
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

