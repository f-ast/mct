head	1.4;
access;
symbols
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	I20060428-1300:1.3
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1;
locks; strict;
comment	@# @;


1.4
date	2006.05.02.14.11.55;	author vramaswamy;	state dead;
branches;
next	1.3;

1.3
date	2006.04.25.12.48.26;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.24.14.56.32;	author vramaswamy;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.08.14.52.11;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[138363], gmf_head, contributed  by cdamus, 060502, Remove deprecated internal API
@
text
@/******************************************************************************
 * Copyright (c) 2004-2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.core.internal.resources;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.xmi.XMLHelper;
import org.eclipse.emf.ecore.xmi.XMLLoad;

/**
 * Custom implementation of an XMIResource.
 * 
 * @@author rafikj
 * 
 * @@deprecated Use the {@@link org.eclipse.gmf.runtime.emf.core.resources.GMFResource}
 *     class, instead
 */
public class GMFResource
	extends org.eclipse.gmf.runtime.emf.core.resources.GMFResource {
	
	/**
	 * Constructor.
	 */
	public GMFResource(URI uri) {
		super(uri);
	}

	protected XMLHelper createXMLHelper() {
		return new GMFHelper(this);
	}

	protected XMLLoad createXMLLoad() {
		return new GMFLoad(createXMLHelper());
	}
}@


1.3
log
@[137063], gmf_head, contributed  by cdamus, 060425, GMFResource's abort on error load option is internal API
@
text
@@


1.2
log
@[122234] gmf_head cbmcgee 060224 MSL Editor:  bug in MSLSave.Escape.convert(String input) - escape strings overwrite input
@
text
@a13 3
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
a14 3
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.ResourceSet;
a16 5
import org.eclipse.emf.ecore.xmi.XMLSave;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.eclipse.emf.ecore.xmi.impl.XMISaveImpl;
import org.eclipse.gmf.runtime.emf.core.internal.util.EMFCoreConstants;
import org.eclipse.gmf.runtime.emf.core.internal.util.Util;
d22 3
d27 1
a27 9
	extends XMIResourceImpl {

	/**
	 * Use this option to abort loading a resource immediately when an error occurs.
	 * The default is <code>Boolean.FALSE</code> unless set to <code>Boolean.TRUE</code> explicitly.
	 */
	public static final String OPTION_ABORT_ON_ERROR = "ABORT_ON_ERROR"; //$NON-NLS-1$

	private boolean useIDAttributes = false;
a32 1

a33 20
		
		setTrackingModification(true);
	}

	protected boolean useUUIDs() {
		return true;
	}
	
	/**
	 * Should we use ID attribute?
	 */
	public void setUseIDAttributes(boolean b) {
		useIDAttributes = b;
	}

	/**
	 * Should we use ID attribute?
	 */
	protected boolean useIDAttributes() {
		return useIDAttributes;
a42 117

	protected XMLSave createXMLSave() {
		return new XMISaveImpl(createXMLHelper());
	}

	/**
	 * @@see org.eclipse.emf.ecore.resource.Resource#getEObject(java.lang.String)
	 */
	public EObject getEObject(String uriFragment) {

		int index = uriFragment.indexOf(EMFCoreConstants.FRAGMENT_SEPARATOR);

		if (index != -1)
			uriFragment = uriFragment.substring(0, index);

		return super.getEObject(uriFragment);
	}

	/**
	 * Get the saved ID of an EObject.
	 */
	public static String getSavedID(EObject eObject) {
		return (String) DETACHED_EOBJECT_TO_ID_MAP.get(eObject);
	}

	/**
	 * @@see org.eclipse.emf.ecore.resource.Resource#setURI(org.eclipse.emf.common.util.URI)
	 */
	public void setURI(URI uri) {

		if (getResourceSet() != null) {
			setRawURI(Util.denormalizeURI(uri, getResourceSet()));
		}
	}
	
	public NotificationChain basicSetResourceSet(ResourceSet rset, NotificationChain notifications) {
		// when I am added to a new resource set, my optimally denormalized URI
		//     may change according to its different URI converter
		if (rset != null) {
			setURI(getURI());
		}
		
		return super.basicSetResourceSet(rset, notifications);
	}

	/**
	 * Set the URI of the resource without processing it.
	 */
	public void setRawURI(URI uri) {

		URI oldURI = getURI();

		if ((uri == oldURI) || ((uri != null) && (uri.equals(oldURI))))
			return;

		super.setURI(uri);
	}
	
	/**
	 * The inherited implementation creates an adapter that <em>always</em> sets
	 * the modified state.  We prefer to check, first, whether the resource
	 * is already modified so that we don't generate redundant notifications.
	 * Moreover, we additionally set modified state only for changes that are
	 * in non-transient features of objects contained (recursively) by
	 * non-transient references.
	 */
	protected Adapter createModificationTrackingAdapter() {
		return new ModificationTrackingAdapter() {
			public void notifyChanged(Notification notification) {
				if (!isModified() && !isTransient(
						notification.getNotifier(), notification.getFeature())) {
					
					super.notifyChanged(notification);
				}
			}

			/**
			 * Check if the feature or one of the notifier's containers is
			 * transient.
			 * 
			 * @@param notifier a notifier
			 * @@param feature the feature that changed
			 * 
			 * @@return <code>true</code> if the feature is transient or if the
			 *    notifier or any of its ancestors is contained by a transient
			 *    reference; <code>false</code>, otherwise
			 */
			private boolean isTransient(Object notifier, Object feature) {
				if (feature instanceof EStructuralFeature) {
					if (((EStructuralFeature) feature).isTransient())
						return true;
					else
						// calling isTransient could be a lengthy operation.
						//   It is safe to cast because the adapter is only
						//   attached to EObjects, not to the resource
						return isTransient((EObject) notifier);
				}
				return false;
			}
			
			/**
			 * Is object transient?
			 */
			private boolean isTransient(EObject eObject) {
				EStructuralFeature containmentFeature = eObject.eContainmentFeature();
				while (containmentFeature != null) {
					if (containmentFeature.isTransient())
						return true;
					eObject = eObject.eContainer();
					if (eObject != null)
						containmentFeature =  eObject.eContainmentFeature();
					else
						break;
				}
				return false;
			}};
	}
@


1.1
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@d25 1
d82 1
a82 1
		return new GMFSave(createXMLHelper());
@

