head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080722-1827:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080425-1959:1.3
	v20080407-0930:1.3
	v20080404-1111:1.3
	v20080401-1425:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080201-2010:1.3
	v20080201-0201:1.2.2.1
	v20080114-2222:1.2.2.1
	v20080114-1111:1.3
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070330-1300:1.2
	v20070208-1800:1.2
	v20070105-1200:1.1.2.1
	v20070103-0300:1.2
	M4_20:1.2
	v20061218-1500:1.1.2.1
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060919-0800:1.1.2.1
	M1_20:1.1
	v20060831-1500:1.1.2.1
	v20060728-0500:1.1.2.1
	v20060721-1130:1.1.2.1
	v20060713-1700:1.1.2.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1;
locks; strict;
comment	@# @;


1.3
date	2008.01.09.22.09.32;	author ahunter;	state Exp;
branches;
next	1.2;
commitid	52d4785461b4567;

1.2
date	2006.10.03.15.05.22;	author ahunter;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.04.25.12.48.27;	author vramaswamy;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.07.13.15.10.04;	author mmostafa;	state Exp;
branches;
next	;

1.2.2.1
date	2008.01.09.22.07.49;	author ahunter;	state Exp;
branches;
next	;
commitid	2d3478545b54567;


desc
@@


1.3
log
@[214825] gmf-head ahunter 080109 Loading model aborts on non-fatal error
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.core.resources;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EFactory;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceImpl;
import org.eclipse.emf.ecore.xmi.UnresolvedReferenceException;
import org.eclipse.emf.ecore.xmi.XMIException;
import org.eclipse.emf.ecore.xmi.XMLHelper;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.ecore.xmi.impl.SAXXMIHandler;
import org.eclipse.emf.ecore.xml.type.AnyType;

/**
 * The SAX handler for MSL resources. Updates demand-created packages with their
 * namespace prefixes and schema locations.
 * 
 * @@author khussey
 */
public class GMFHandler
	extends SAXXMIHandler {

	protected final Map urisToProxies;
	
	protected boolean abortOnError;

	/**
	 * Constructs a new MSL handler for the specified resource with the
	 * specified helper and options.
	 * 
	 * @@param xmiResource
	 *            The resource for the new handler.
	 * @@param helper
	 *            The helper for the new handler.
	 * @@param options
	 *            The load options for the new handler.
	 */
	public GMFHandler(XMLResource xmiResource, XMLHelper helper, Map options) {
		super(xmiResource, helper, options);

		urisToProxies = new HashMap();
		if (Boolean.TRUE.equals(options.get(GMFResource.OPTION_ABORT_ON_ERROR))) {
			abortOnError = true;
		}
	}

	/**
	 * @@see org.eclipse.emf.ecore.xmi.impl.XMLHandler#endDocument()
	 */
	public void endDocument() {
		super.endDocument();

		if (null != extendedMetaData) {

			for (Iterator demandedPackages = extendedMetaData
				.demandedPackages().iterator(); demandedPackages.hasNext();) {

				EPackage ePackage = (EPackage) demandedPackages.next();
				String nsURI = ePackage.getNsURI();

				if (null != nsURI) {

					if (null != urisToLocations) {
						URI locationURI = (URI) urisToLocations.get(nsURI);

						if (null != locationURI) {
							// set the schema location
							Resource resource = new ResourceImpl();
							resource.setURI(locationURI);
							resource.getContents().add(ePackage);
						}
					}

					for (Iterator entries = helper.getPrefixToNamespaceMap()
						.iterator(); entries.hasNext();) {

						Map.Entry entry = (Map.Entry) entries.next();

						if (nsURI.equals(entry.getValue())) {
							// set the namespace prefix
							ePackage.setNsPrefix((String) entry.getKey());
						}
					}
				}
			}
		}
	}

	/**
	 * @@see org.eclipse.emf.ecore.xmi.impl.XMLHandler#validateCreateObjectFromFactory(org.eclipse.emf.ecore.EFactory,
	 *      java.lang.String, org.eclipse.emf.ecore.EObject,
	 *      org.eclipse.emf.ecore.EStructuralFeature)
	 */
	protected EObject validateCreateObjectFromFactory(EFactory factory,
			String typeName, EObject newObject, EStructuralFeature feature) {

		if (!(objects.peek() instanceof AnyType) && null != newObject
			&& newObject.eIsProxy() && !sameDocumentProxies.contains(newObject)) {

			URI proxyURI = ((InternalEObject) newObject).eProxyURI();

			Map typeNamesToProxies = (Map) urisToProxies.get(proxyURI);

			if (null == typeNamesToProxies) {
				urisToProxies.put(proxyURI, typeNamesToProxies = new HashMap());
			}

			EObject proxy = (EObject) typeNamesToProxies.get(typeName);

			if (null == proxy) {
				typeNamesToProxies.put(typeName, proxy = newObject);
			}

			// canonicalize proxies
			newObject = proxy;
		}

		return super.validateCreateObjectFromFactory(factory, typeName,
			newObject, feature);
	}

	/**
	 * @@see org.eclipse.emf.ecore.xmi.impl.XMLHandler#error(org.eclipse.emf.ecore.xmi.XMIException)
	 */
	public void error(XMIException e) {
		super.error(e);
		if (abortOnError) {
			/*
			 * Ignore UnresolvedReferenceException, since unresolved references
			 * are not a fatal error. We will continue to attempt to load the
			 * model and log UnresolvedReferenceException.
			 */
			if (!(e instanceof UnresolvedReferenceException)) {
				if (e.getCause() != null) {
					throw new AbortResourceLoadException(e.getCause());
				}
				throw new AbortResourceLoadException(e);
			}
		}
	}
}
@


1.2
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
d26 1
d147 10
a156 2
			if (e.getCause() != null) {
				throw new AbortResourceLoadException(e.getCause());
a157 1
			throw new AbortResourceLoadException(e);
@


1.2.2.1
log
@[214825] gmf-head ahunter 080109 Loading model aborts on non-fatal error
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2008 IBM Corporation and others.
a25 1
import org.eclipse.emf.ecore.xmi.UnresolvedReferenceException;
d146 2
a147 10
			/*
			 * Ignore UnresolvedReferenceException, since unresolved references
			 * are not a fatal error. We will continue to attempt to load the
			 * model and log UnresolvedReferenceException.
			 */
			if (!(e instanceof UnresolvedReferenceException)) {
				if (e.getCause() != null) {
					throw new AbortResourceLoadException(e.getCause());
				}
				throw new AbortResourceLoadException(e);
d149 1
@


1.1
log
@[137063], gmf_head, contributed  by cdamus, 060425, GMFResource's abort on error load option is internal API
@
text
@d146 2
a147 2
			if (e.getWrappedException() != null) {
				throw new AbortResourceLoadException(e.getWrappedException());
@


1.1.2.1
log
@[110316] gmf_R1_0_maintenance mmostafa  060713 Compiler warning count should be 0 - runtime diagram layer components
@
text
@d146 2
a147 2
			if (e.getCause() != null) {
				throw new AbortResourceLoadException(e.getCause());
@

