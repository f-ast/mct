head	1.4;
access;
symbols
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.4
date	2006.02.08.14.52.13;	author ldamus;	state dead;
branches;
next	1.3;

1.3
date	2005.10.28.20.56.06;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.13;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.46;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.core.internal.plugin;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.emf.core.edit.DemuxingMListener;
import org.eclipse.gmf.runtime.emf.core.edit.IDemuxedMListener;
import org.eclipse.gmf.runtime.emf.core.edit.MFilter;
import org.eclipse.gmf.runtime.emf.core.edit.MUndoInterval;
import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;
import org.eclipse.osgi.util.NLS;

/**
 * Listens for model events and displays trace output.
 * 
 * @@author Anthony Hunter <a
 *         href="mailto:ahunter@@rational.com">ahunter@@rational.com </a>
 */
public class TraceEventListener
	implements IDemuxedMListener {

	/**
	 * model event listener
	 */
	private DemuxingMListener eventListener = new DemuxingMListener(this);

	private static String MODEL_OPENED = "[event] Resource Loaded {0}";//$NON-NLS-1$

	private static String MODEL_CLOSED = "[event] Resource Unloaded {0}";//$NON-NLS-1$

	private static String MODEL_DIRTIED = "[event] Resource Dirtied {0}";//$NON-NLS-1$

	private static String MODEL_SAVED = "[event] Resource Saved {0}";//$NON-NLS-1$

	private static String MODEL_IMPORT = "[event] Resource Imported {0}";//$NON-NLS-1$

	private static String MODEL_EXPORT = "[event] Resource Exported {0}";//$NON-NLS-1$

	private static String ELEMENT_CREATED = "[event] Element Created {0} in parent {1}";//$NON-NLS-1$

	private static String ELEMENT_DELETED = "[event] Element Deleted {0} from parent {1}";//$NON-NLS-1$

	private static String ELEMENT_MODIFIED = "[event] Element Modified {0}";//$NON-NLS-1$

	private static String UNDO_INTERVAL_CLOSED = "[event] Closed Undo Interval {0}";//$NON-NLS-1$

	private static String UNDO_INTERVALS_FLUSHED = "[event] Undo Interval Flushed";//$NON-NLS-1$

	/**
	 * Get the class name from the element.
	 * 
	 * @@param element
	 *            the element.
	 * @@return the class name.
	 */
	private String getClassName(EObject element) {
		String className = element.getClass().getName();
		return className.substring(className.lastIndexOf('.') + 1);
	}

	public MFilter getFilter() {
		return MFilter.WILDCARD_FILTER;
	}

	public void handleElementCreatedEvent(Notification notification,
			final EObject owner, final EObject newElement) {
		Trace.trace(MSLPlugin.getDefault(), MSLDebugOptions.EVENTS,
			NLS.bind(ELEMENT_CREATED, new String[] {
				getClassName(newElement), getClassName(owner)}));
	}

	public void handleElementDeletedEvent(Notification notification,
			final EObject owner, final EObject oldElement) {
		Trace.trace(MSLPlugin.getDefault(), MSLDebugOptions.EVENTS,
			NLS.bind(ELEMENT_DELETED, new String[] {
				getClassName(oldElement), getClassName(owner)}));
	}

	public void handleElementModifiedEvent(Notification notification,
			final EObject element) {
		Trace.trace(MSLPlugin.getDefault(), MSLDebugOptions.EVENTS,
			NLS.bind(ELEMENT_MODIFIED,
				new String[] {getClassName(element),}));
	}

	public void handleResourceUnloadedEvent(Notification notification,
			final Resource resource, EObject modelRoot) {
		Trace.trace(MSLPlugin.getDefault(), MSLDebugOptions.EVENTS,
			NLS.bind(MODEL_CLOSED, new String[] {ResourceUtil
				.getFilePath(resource)}));
	}

	public void handleResourceDirtiedEvent(Notification notification,
			final Resource resource) {
		Trace.trace(MSLPlugin.getDefault(), MSLDebugOptions.EVENTS,
			NLS.bind(MODEL_DIRTIED, new String[] {ResourceUtil
				.getFilePath(resource)}));
	}

	public void handleResourceLoadedEvent(Notification notification,
			final Resource resource) {
		Trace.trace(MSLPlugin.getDefault(), MSLDebugOptions.EVENTS,
			NLS.bind(MODEL_OPENED, new String[] {ResourceUtil
				.getFilePath(resource)}));
	}

	public void handleResourceSavedEvent(Notification notification,
			final Resource resource) {
		Trace.trace(MSLPlugin.getDefault(), MSLDebugOptions.EVENTS,
			NLS.bind(MODEL_SAVED, new String[] {ResourceUtil
				.getFilePath(resource)}));
	}

	public void handleResourceImportedEvent(Notification notification,
			final Resource resource) {
		Trace.trace(MSLPlugin.getDefault(), MSLDebugOptions.EVENTS,
			NLS.bind(MODEL_IMPORT, new String[] {ResourceUtil
				.getFilePath(resource)}));
	}

	public void handleResourceExportedEvent(Notification notification,
			final Resource resource) {
		Trace.trace(MSLPlugin.getDefault(), MSLDebugOptions.EVENTS,
			NLS.bind(MODEL_EXPORT, new String[] {ResourceUtil
				.getFilePath(resource)}));
	}

	/**
	 * Create a new TraceEventListener.
	 */
	public TraceEventListener() {
		eventListener.startListening();
	}

	public void handleUndoIntervalClosedEvent(Notification notification,
			final MUndoInterval undoInterval) {
		Trace.trace(MSLPlugin.getDefault(), MSLDebugOptions.EVENTS,
			NLS.bind(UNDO_INTERVAL_CLOSED,
				new String[] {undoInterval.getLabel()}));
	}

	public void handleUndoIntervalsFlushedEvent(Notification notification,
			MUndoInterval undoInterval) {
		Trace.trace(MSLPlugin.getDefault(), MSLDebugOptions.EVENTS,
			UNDO_INTERVALS_FLUSHED);
	}
}@


1.3
log
@Bugzilla 114008 gmf_head cvogt 051028 - Sweep emf plugin message bundles
@
text
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a13 2
import java.text.MessageFormat;

a16 1

d23 1
d80 1
a80 1
			MessageFormat.format(ELEMENT_CREATED, new String[] {
d87 1
a87 1
			MessageFormat.format(ELEMENT_DELETED, new String[] {
d94 1
a94 1
			MessageFormat.format(ELEMENT_MODIFIED,
d101 1
a101 1
			MessageFormat.format(MODEL_CLOSED, new String[] {ResourceUtil
d108 1
a108 1
			MessageFormat.format(MODEL_DIRTIED, new String[] {ResourceUtil
d115 1
a115 1
			MessageFormat.format(MODEL_OPENED, new String[] {ResourceUtil
d122 1
a122 1
			MessageFormat.format(MODEL_SAVED, new String[] {ResourceUtil
d129 1
a129 1
			MessageFormat.format(MODEL_IMPORT, new String[] {ResourceUtil
d136 1
a136 1
			MessageFormat.format(MODEL_EXPORT, new String[] {ResourceUtil
d150 1
a150 1
			MessageFormat.format(UNDO_INTERVAL_CLOSED,
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

