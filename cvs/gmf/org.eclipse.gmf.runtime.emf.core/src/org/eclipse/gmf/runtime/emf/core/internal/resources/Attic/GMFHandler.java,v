head	1.4;
access;
symbols
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	I20060428-1300:1.3
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1;
locks; strict;
comment	@# @;


1.4
date	2006.05.02.14.11.54;	author vramaswamy;	state dead;
branches;
next	1.3;

1.3
date	2006.04.25.12.48.26;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.22.17.55.34;	author vramaswamy;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.08.14.52.11;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[138363], gmf_head, contributed  by cdamus, 060502, Remove deprecated internal API
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.core.internal.resources;

import java.util.Map;

import org.eclipse.emf.ecore.xmi.XMLHelper;
import org.eclipse.emf.ecore.xmi.XMLResource;

/**
 * The SAX handler for MSL resources. Updates demand-created packages with their
 * namespace prefixes and schema locations.
 * 
 * @@author khussey
 * 
 * @@deprecated Use the {@@link org.eclipse.gmf.runtime.emf.core.resources.GMFHandler}
 *     class, instead
 */
public class GMFHandler
	extends org.eclipse.gmf.runtime.emf.core.resources.GMFHandler {

	/**
	 * Constructs a new MSL handler for the specified resource with the
	 * specified helper and options.
	 * 
	 * @@param xmiResource
	 *            The resource for the new handler.
	 * @@param helper
	 *            The helper for the new handler.
	 * @@param options
	 *            The load options for the new handler.
	 */
	public GMFHandler(XMLResource xmiResource, XMLHelper helper, Map options) {
		super(xmiResource, helper, options);
	}
}@


1.3
log
@[137063], gmf_head, contributed  by cdamus, 060425, GMFResource's abort on error load option is internal API
@
text
@@


1.2
log
@[126761] gmf_head cdamus 060222 MSLResource requires referenced resources to encode and decode urls
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
a13 2
import java.util.HashMap;
import java.util.Iterator;
a15 9
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EFactory;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceImpl;
import org.eclipse.emf.ecore.xmi.XMIException;
a17 3
import org.eclipse.emf.ecore.xmi.impl.SAXXMIHandler;
import org.eclipse.emf.ecore.xml.type.AnyType;
import org.eclipse.gmf.runtime.emf.core.internal.exceptions.AbortResourceLoadException;
d24 3
d29 1
a29 5
	extends SAXXMIHandler {

	protected final Map urisToProxies;
	
	protected boolean abortOnError;
a43 93

		urisToProxies = new HashMap();
		if (Boolean.TRUE.equals(options.get(GMFResource.OPTION_ABORT_ON_ERROR))) {
			abortOnError = true;
		}
	}

	/**
	 * @@see org.eclipse.emf.ecore.xmi.impl.XMLHandler#endDocument()
	 */
	public void endDocument() {
		super.endDocument();

		if (null != extendedMetaData) {

			for (Iterator demandedPackages = extendedMetaData
				.demandedPackages().iterator(); demandedPackages.hasNext();) {

				EPackage ePackage = (EPackage) demandedPackages.next();
				String nsURI = ePackage.getNsURI();

				if (null != nsURI) {

					if (null != urisToLocations) {
						URI locationURI = (URI) urisToLocations.get(nsURI);

						if (null != locationURI) {
							// set the schema location
							Resource resource = new ResourceImpl();
							resource.setURI(locationURI);
							resource.getContents().add(ePackage);
						}
					}

					for (Iterator entries = helper.getPrefixToNamespaceMap()
						.iterator(); entries.hasNext();) {

						Map.Entry entry = (Map.Entry) entries.next();

						if (nsURI.equals(entry.getValue())) {
							// set the namespace prefix
							ePackage.setNsPrefix((String) entry.getKey());
						}
					}
				}
			}
		}
	}

	/**
	 * @@see org.eclipse.emf.ecore.xmi.impl.XMLHandler#validateCreateObjectFromFactory(org.eclipse.emf.ecore.EFactory,
	 *      java.lang.String, org.eclipse.emf.ecore.EObject,
	 *      org.eclipse.emf.ecore.EStructuralFeature)
	 */
	protected EObject validateCreateObjectFromFactory(EFactory factory,
			String typeName, EObject newObject, EStructuralFeature feature) {

		if (!(objects.peek() instanceof AnyType) && null != newObject
			&& newObject.eIsProxy() && !sameDocumentProxies.contains(newObject)) {

			URI proxyURI = ((InternalEObject) newObject).eProxyURI();

			Map typeNamesToProxies = (Map) urisToProxies.get(proxyURI);

			if (null == typeNamesToProxies) {
				urisToProxies.put(proxyURI, typeNamesToProxies = new HashMap());
			}

			EObject proxy = (EObject) typeNamesToProxies.get(typeName);

			if (null == proxy) {
				typeNamesToProxies.put(typeName, proxy = newObject);
			}

			// canonicalize proxies
			newObject = proxy;
		}

		return super.validateCreateObjectFromFactory(factory, typeName,
			newObject, feature);
	}

	/**
	 * @@see org.eclipse.emf.ecore.xmi.impl.XMLHandler#error(org.eclipse.emf.ecore.xmi.XMIException)
	 */
	public void error(XMIException e) {
		super.error(e);
		if (abortOnError) {
			if (e.getWrappedException() != null) {
				throw new AbortResourceLoadException(e.getWrappedException());
			}
			throw new AbortResourceLoadException(e);
		}
@


1.1
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@a152 1

@

