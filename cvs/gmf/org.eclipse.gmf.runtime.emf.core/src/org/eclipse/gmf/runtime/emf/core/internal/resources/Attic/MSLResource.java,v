head	1.7;
access;
symbols
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	I20060203-0830:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2006.02.08.14.52.11;	author ldamus;	state dead;
branches;
next	1.6;

1.6
date	2006.01.21.19.10.19;	author vramaswamy;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.29.19.01.08;	author vramaswamy;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.23.20.19.04;	author vramaswamy;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.16.17.53.09;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.12;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.48;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@/******************************************************************************
 * Copyright (c) 2004-2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.core.internal.resources;

import java.io.IOException;
import java.util.Collections;
import java.util.Map;

import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.xmi.XMLHelper;
import org.eclipse.emf.ecore.xmi.XMLLoad;
import org.eclipse.emf.ecore.xmi.XMLSave;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;
import org.eclipse.gmf.runtime.emf.core.internal.util.MSLConstants;

/**
 * Custom implementation of an XMIResource.
 * 
 * @@author rafikj
 */
public class MSLResource
	extends XMIResourceImpl
	implements org.eclipse.gmf.runtime.emf.core.resources.ILogicalResource {

	/**
	 * Use this option to abort loading a resource immediately when an error occurs.
	 * The default is <code>Boolean.FALSE</code> unless set to <code>Boolean.TRUE</code> explicitly.
	 */
	public static final String OPTION_ABORT_ON_ERROR = "ABORT_ON_ERROR"; //$NON-NLS-1$

	private boolean useIDAttributes = false;
	
	/**
	 * Constructor.
	 */
	public MSLResource(URI uri) {

		super(MEditingDomain.INSTANCE.convertURI(uri));
		
		setTrackingModification(true);
	}

	protected boolean useUUIDs() {
		return true;
	}
	
	/**
	 * Should we use ID attribute?
	 */
	public void setUseIDAttributes(boolean b) {
		useIDAttributes = b;
	}

	/**
	 * Should we use ID attribute?
	 */
	protected boolean useIDAttributes() {
		return useIDAttributes;
	}

	protected XMLHelper createXMLHelper() {
		return new MSLHelper(this);
	}

	protected XMLLoad createXMLLoad() {
		return new MSLLoad(createXMLHelper());
	}

	protected XMLSave createXMLSave() {
		return new MSLSave(createXMLHelper());
	}

	/**
	 * @@see org.eclipse.emf.ecore.resource.Resource#getEObject(java.lang.String)
	 */
	public EObject getEObject(String uriFragment) {

		int index = uriFragment.indexOf(MSLConstants.FRAGMENT_SEPARATOR);

		if (index != -1)
			uriFragment = uriFragment.substring(0, index);

		return super.getEObject(uriFragment);
	}

	/**
	 * Get the saved ID of an EObject.
	 */
	public static String getSavedID(EObject eObject) {
		return (String) DETACHED_EOBJECT_TO_ID_MAP.get(eObject);
	}

	/**
	 * @@see org.eclipse.emf.ecore.resource.Resource#setURI(org.eclipse.emf.common.util.URI)
	 */
	public void setURI(URI uri) {

		MEditingDomain domain = MEditingDomain.getEditingDomain(this);

		if (domain == null)
			domain = MEditingDomain.INSTANCE;

		setRawURI(domain.convertURI(uri));
	}

	/**
	 * Set the URI of the resource without processing it.
	 */
	public void setRawURI(URI uri) {

		URI oldURI = getURI();

		if ((uri == oldURI) || ((uri != null) && (uri.equals(oldURI))))
			return;

		super.setURI(uri);
	}
	
	/**
	 * The inherited implementation creates an adapter that <em>always</em> sets
	 * the modified state.  We prefer to check, first, whether the resource
	 * is already modified so that we don't generate redundant notifications.
	 * Moreover, we additionally set modified state only for changes that are
	 * in non-transient features of objects contained (recursively) by
	 * non-transient references.
	 */
	protected Adapter createModificationTrackingAdapter() {
		return new ModificationTrackingAdapter() {
			public void notifyChanged(Notification notification) {
				if (!isModified() && !isTransient(
						notification.getNotifier(), notification.getFeature())) {
					
					super.notifyChanged(notification);
				}
			}

			/**
			 * Check if the feature or one of the notifier's containers is
			 * transient.
			 * 
			 * @@param notifier a notifier
			 * @@param feature the feature that changed
			 * 
			 * @@return <code>true</code> if the feature is transient or if the
			 *    notifier or any of its ancestors is contained by a transient
			 *    reference; <code>false</code>, otherwise
			 */
			private boolean isTransient(Object notifier, Object feature) {
				if (feature instanceof EStructuralFeature) {
					if (((EStructuralFeature) feature).isTransient())
						return true;
					else
						// calling isTransient could be a lengthy operation.
						//   It is safe to cast because the adapter is only
						//   attached to EObjects, not to the resource
						return isTransient((EObject) notifier);
				}
				return false;
			}
			
			/**
			 * Is object transient?
			 */
			private boolean isTransient(EObject eObject) {
				EStructuralFeature containmentFeature = eObject.eContainmentFeature();
				while (containmentFeature != null) {
					if (containmentFeature.isTransient())
						return true;
					eObject = eObject.eContainer();
					if (eObject != null)
						containmentFeature =  eObject.eContainmentFeature();
					else
						break;
				}
				return false;
			}};
	}

	//
	// ILogicalResource methods
	//
	
	/**
	 * I cannot separate any elements.
	 * 
	 * @@return <code>false</code>, always
	 */
	public boolean canSeparate(EObject eObject) {
		return false;
	}

	/**
	 * I cannot separate any elements.
	 * 
	 * @@return <code>false</code>, always
	 */
	public boolean isSeparate(EObject eObject) {
		return false;
	}

	public void separate(EObject eObject, URI uri) {
		throw new IllegalArgumentException("cannot separate eObject"); //$NON-NLS-1$
	}

	public void absorb(EObject eObject) {
		throw new IllegalArgumentException("eObject is not separate"); //$NON-NLS-1$
	}
	
	public boolean isLoaded(EObject eObject) {
		return true;  // no object in a non-logical-resource can be unloaded
	}
	
	public void load(EObject eObject)
		throws IOException {
		
		throw new IllegalArgumentException("eObject is not separate"); //$NON-NLS-1$
	}

	public Map getMappedResources() {
		return Collections.EMPTY_MAP;
	}

	public Object getAdapter(Class adapter) {
		return Platform.getAdapterManager().getAdapter(this, adapter);
	}
}@


1.6
log
@[115704], gmf_head,Contributed by cvogt, 060121, The performance of loading MSL resources with errors could be significantly improved
@
text
@@


1.5
log
@[110317], gmf_head,Contributed by cdamus, 051229, Compiler warning count should be 0 - runtime foundation layer components
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d40 6
@


1.4
log
@[113863], gmf_head,Contributed by cdamus, 051223, Remove the LogicalResource implementation (obsoleted by Cross-Resource Containment in EMF)
@
text
@a29 1
import org.eclipse.gmf.runtime.emf.core.resources.ILogicalResource;
d38 1
a38 1
	implements ILogicalResource {
@


1.3
log
@[112531], gmf_head, Contributed by cdamus, 051216, MSLResource Inconsistent with Modification Tracking API
@
text
@d14 5
d24 4
a27 1

d30 1
d38 2
a39 1
	extends LogicalResource {
d53 2
a54 2
	protected LogicalResourceUnit createUnit(URI unitUri) {
		return new MSLResourceUnit(unitUri, this);
d71 12
d188 48
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d14 2
d18 1
d32 1
a32 1

d39 2
d106 60
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

