head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080425-1959:1.7
	v20080407-0930:1.7
	v20080404-1111:1.7
	v20080401-1425:1.6
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080201-2010:1.4
	v20080201-0201:1.4
	v20080114-2222:1.4
	v20080114-1111:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	v20070105-1200:1.4
	v20070103-0300:1.4
	M4_20:1.4
	v20061218-1500:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060831-1500:1.4
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1;
locks; strict;
comment	@# @;


1.7
date	2008.04.04.20.26.33;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	4e4b47f68ef94567;

1.6
date	2008.04.01.18.17.27;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	72bb47f27c374567;

1.5
date	2008.02.08.21.42.41;	author ldamus;	state Exp;
branches;
next	1.4;
commitid	390047acccd04567;

1.4
date	2006.05.12.14.56.12;	author mmostafa;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.15.19.15.37;	author vramaswamy;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.01.22.50.59;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.08.14.52.12;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[225031] gmf-head cmcgee 080404 GMF PathmapManager does not allow system pathmap to be set without dirtying resources
@
text
@/******************************************************************************
 * Copyright (c) 2006, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.emf.core;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.commands.operations.IOperationHistory;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.Resource.Factory;
import org.eclipse.emf.ecore.resource.Resource.Factory.Registry;
import org.eclipse.emf.transaction.Transaction;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.impl.InternalTransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.emf.workspace.WorkspaceEditingDomainFactory;
import org.eclipse.emf.workspace.util.WorkspaceValidateEditSupport;
import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator;
import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator.ISyncExecHelper;
import org.eclipse.gmf.runtime.common.core.command.FileModificationValidator.SyncExecHelper;
import org.eclipse.gmf.runtime.emf.core.internal.resources.PathmapManager;
import org.eclipse.gmf.runtime.emf.core.internal.util.EMFCoreConstants;
import org.eclipse.gmf.runtime.emf.core.util.CrossReferenceAdapter;


/**
 * Factory for {@@link TransactionalEditingDomain}s that are properly configured
 * to support a GMF application.  This factory should be preferred over the
 * {@@link org.eclipse.emf.workspace.WorkspaceEditingDomainFactory} because it
 * attaches adapters and sets up other other properties of the resource set
 * and/or editing domain on the client's behalf.
 *
 * @@author Christian W. Damus (cdamus)
 */
public class GMFEditingDomainFactory extends WorkspaceEditingDomainFactory {

	static public TransactionalSyncExecHelper transactionalSyncExecHelper = new TransactionalSyncExecHelper();
	static {
		SyncExecHelper.setInstance(transactionalSyncExecHelper);
	}
			
    /**
     * The single shared instance of the GMF editing domain factory.
     */
    private static GMFEditingDomainFactory instance  = new GMFEditingDomainFactory();

    /**
     * Gets the single shared instance of the GMF editing domain factory.
     * 
     * @@return the editing domain factory
     */
    public static WorkspaceEditingDomainFactory getInstance() {
        return instance;
    }
    
	public TransactionalEditingDomain createEditingDomain() {
		TransactionalEditingDomain result = super.createEditingDomain();
		configure(result);
		return result;
	}

	public TransactionalEditingDomain createEditingDomain(IOperationHistory history) {
		TransactionalEditingDomain result = super.createEditingDomain(history);
		configure(result);
		return result;
	}

	public TransactionalEditingDomain createEditingDomain(ResourceSet rset, IOperationHistory history) {
		TransactionalEditingDomain result = super.createEditingDomain(rset, history);
		configure(result);
		return result;
	}

	public TransactionalEditingDomain createEditingDomain(ResourceSet rset) {
		TransactionalEditingDomain result = super.createEditingDomain(rset);
		configure(result);
		return result;
	}

	/**
	 * Configures the specified editing domain for correct functioning in the
	 * GMF environment.
	 * 
	 * @@param domain the new editing domain
	 */
	protected void configure(final TransactionalEditingDomain domain) {
		final ResourceSet rset = domain.getResourceSet();

		// ensure that the cross-referencing adapter is installed
		if (CrossReferenceAdapter.getExistingCrossReferenceAdapter(rset) == null) {
			rset.eAdapters().add(new CrossReferenceAdapter());
		}

		// ensure that the path map manager is installed
		if (PathmapManager.getExistingPathmapManager(rset) == null) {
			// Set up a delegating resource factory registry that ensures that
			//  the pathmap URI is normalized before finding a resource factory.
			final Registry existingRegistry = rset.getResourceFactoryRegistry();
			
			rset.setResourceFactoryRegistry(new Registry() {
				private Registry delegateRegistry = existingRegistry;

				public Map<String, Object> getContentTypeToFactoryMap() {
					return delegateRegistry.getContentTypeToFactoryMap();
				}

				public Map<String, Object> getExtensionToFactoryMap() {
					return delegateRegistry.getExtensionToFactoryMap();
				}

				public Factory getFactory(URI uri, String contentType) {
					if (uri != null && uri.scheme() != null && uri.scheme().equals(EMFCoreConstants.PATH_MAP_SCHEME)) {
						uri = rset.getURIConverter().normalize(uri);
					}
					return delegateRegistry.getFactory(uri, contentType);
				}

				public Factory getFactory(URI uri) {
					if (uri != null && uri.scheme() != null && uri.scheme().equals(EMFCoreConstants.PATH_MAP_SCHEME)) {
						uri = rset.getURIConverter().normalize(uri);
					}
					return delegateRegistry.getFactory(uri);
				}

				public Map<String, Object> getProtocolToFactoryMap() {
					return delegateRegistry.getProtocolToFactoryMap();
				}
			});
			
			rset.eAdapters().add(new PathmapManager());
		}
			
		TransactionalEditingDomain.DefaultOptions options = (TransactionalEditingDomain.DefaultOptions) (TransactionUtil
				.getAdapter(domain,
						TransactionalEditingDomain.DefaultOptions.class));

		Map<Object, Object> aMap = new HashMap<Object, Object>();
		aMap.put(Transaction.OPTION_VALIDATE_EDIT,
				new WorkspaceValidateEditSupport() {

					@@SuppressWarnings("unchecked")
					protected IStatus doValidateEdit(Transaction transaction,
							Collection resources, Object context) {
						return GMFEditingDomainFactory.transactionalSyncExecHelper
								.approveFileModification(getFiles(resources),
										domain);
					}
				});

		options.setDefaultTransactionOptions(aMap);
	}
		
	
	/**
	 * A helper that knows about the specific editing domain.
	 * During the approval process, calls to validateEdit() will require the
	 * domain in order to execute in a thread safe manner.
	 * 
	 * @@author James Bruck (jbruck)
	 *
	 */
	public static class TransactionalSyncExecHelper implements ISyncExecHelper {

		private final ThreadLocal<TransactionalEditingDomain> domain = new ThreadLocal<TransactionalEditingDomain>();

		private void setDomain(TransactionalEditingDomain domain) {
			this.domain.set(domain);
		}

		/**
		 * Sets the thread specific transactional domain before the approval
		 * process since subsequent calls to validateEdit() requires it and
		 * clears it afterward.
		 * 
		 * @@param files
		 *            The files to be validated.
		 * 
		 * @@param transactionalDomain
		 *            The current editing domain.
		 * 
		 * @@return The resulting status.
		 */
		public IStatus approveFileModification(IFile[] files,
				TransactionalEditingDomain transactionalDomain) {

			setDomain(transactionalDomain);
			IStatus status = Status.OK_STATUS;
			try {
				status = FileModificationValidator
						.approveFileModification(files);
			} finally {
				setDomain(null);
			}
			return status;
		}
		
		/**
		 * Delegates to the specified domain to obtain a thread safe wrapper
		 * for the specified <code>runnable</code> 
		 * 
		 * @@param runnable a runnable to execute in the context of the active
		 *     transaction, on any thread
		 *     
		 *  @@return the privileged runnable if the transaction is on the current
		 *  	thread, otherwise just return itself.
		 */
		public Runnable safeRunnable(Runnable runnable) {
			if( isTransactionOnCurrentThread()) {
				return domain.get().createPrivilegedRunnable(runnable);
			}
			return null;
		}

		/**
		 * Checks if the active transaction is on the current thread.
		 * 
		 * @@return true if the active transaction is on the current thread.
		 */
		private boolean isTransactionOnCurrentThread() {
			if (domain.get() != null) {
				
				Transaction tx = ((InternalTransactionalEditingDomain) domain
						.get()).getActiveTransaction();
				
				return ((tx != null) && (tx.getOwner() == Thread
						.currentThread()));
			}
			return false;
		}
	}
		
}
@


1.6
log
@[225031] gmf-head cmcgee 080401 GMF PathmapManager does not allow system pathmap to be set without dirtying resources
@
text
@d126 1
a126 1
					if (uri != null && uri.scheme().equals(EMFCoreConstants.PATH_MAP_SCHEME)) {
d133 1
a133 1
					if (uri != null && uri.scheme().equals(EMFCoreConstants.PATH_MAP_SCHEME)) {
@


1.5
log
@[212178] gmf_head jbruck 080208 GMF validation enhancements
@
text
@d22 1
d24 2
d36 1
d101 1
a101 1
		ResourceSet rset = domain.getResourceSet();
d110 34
@


1.4
log
@bugzilla 141146 gmf-head mmostafa 060512 Remove eroneous restricted disclaimer...
@
text
@d2 1
a2 1
 * Copyright (c) 2006 IBM Corporation and others.
d14 4
d19 3
d23 1
d25 2
d28 4
d45 1
a45 2
public class GMFEditingDomainFactory
	extends WorkspaceEditingDomainFactory {
d47 5
d96 1
a96 1
	protected void configure(TransactionalEditingDomain domain) {
d98 1
a98 1
		
d103 1
a103 1
		
d108 98
d207 1
@


1.3
log
@[131995],gmf_head, vramaswa,060315,The CrossReferenceAdapter needs to public for applications to extend the functionality
@
text
@d1 10
a10 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2006.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.2
log
@Bugzilla#129803 gmf_head cmahoney 060301 Deleting node leaves connection connected to space
@
text
@a16 1
import org.eclipse.gmf.runtime.emf.core.internal.index.CrossReferenceAdapter;
d18 1
@


1.1
log
@[121508] gmf_head cdamus 060208 Refactor MSL using the new transaction API
@
text
@d33 14
d77 1
a77 1
	private void configure(TransactionalEditingDomain domain) {
@

