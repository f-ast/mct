head	1.2;
access;
symbols
	v20081020-0700:1.2
	v20080903-1520:1.2
	v20080903-1510:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080603-1553:1.2
	v20080527-1255:1.2
	v20080507-2230:1.2
	v20080425-1959:1.2
	v20080328-1605:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20071003-0000:1.2
	v20070928-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070614-1400:1.2
	v20070608-1300:1.2
	v20070601-1400:1.2
	v20070504-1000:1.2
	v20070330-1300:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070105-1200:1.1.2.1
	M4_20:1.2
	v20061218-1500:1.1.2.1
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060919-0800:1.1.2.1
	v20060907-1100:1.1
	M1_20:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	I20060505-1400:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1;
locks; strict;
comment	@# @;


1.2
date	2006.10.03.15.05.27;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.10.15.42.03;	author sshaw;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.16.44.42;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2003, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.metafile;

import java.awt.Graphics2D;
import java.awt.geom.GeneralPath;
import java.io.IOException;

import org.apache.batik.transcoder.TranscoderException;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.metafile.DeviceContext;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.metafile.IEmf2SvgConverter;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.metafile.IRenderToPath;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.metafile.IWmf2SvgConverter;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.metafile.Record;

/**  
 * @@author dhabib
 * @@canBeSeenBy org.eclipse.gmf.runtime.draw2d.ui.render.*
 */

abstract class AbstractPolyPoly implements IEmf2SvgConverter, IWmf2SvgConverter, IRenderToPath
{
	private static final int	EMF_N_POLYS_OFFSET		= 16;
	private static final int	EMF_COUNT_POINTS_OFFSET	= 20;
	private static final int	EMF_COUNTS_OFFSET		= 24;

	private static final int	WMF_N_POLYS_OFFSET		= 0;
	private static final int	WMF_COUNTS_OFFSET		= 2;

	/** number of separate polys */
	private int		m_nPolys		= 0;
	/** total number of points in the array */
	private int		m_nPoints		= 0;
	/** array containing the number of points in each specific poly */
	private int[]	m_nPointsInPoly	= null; 
	/** array integers representing the x position of all points on all polys */
	private int[]	m_xPointList		= null;
	/** array integers representing the y position of all points on all polys */
	private int[]	m_yPointList		= null;
	/** Indicates whether or not the point array is stored as 16 or 32 bit integers. */
	private boolean m_b16Bit			= true;
	
	public AbstractPolyPoly( boolean b16Bit )
	{
		m_b16Bit = b16Bit;
	}

	public void readWMFRecord( Record emr ) throws IOException
	{
		m_nPolys = emr.getShortAt( WMF_N_POLYS_OFFSET );
		m_nPointsInPoly = new int[ m_nPolys ];
		m_nPoints = 0;
		
		
		// Read the size of each polygon.
		for( int i = 0; i < m_nPolys; i++ )
		{
			m_nPointsInPoly[ i ] = emr.getShortAt( WMF_COUNTS_OFFSET + ( i * 2 ) );
			m_nPoints += m_nPointsInPoly[ i ];
		}

		m_xPointList 	= new int[ m_nPoints ];
		m_yPointList 	= new int[ m_nPoints ];

		int curOffset = WMF_COUNTS_OFFSET + (m_nPolys * 2);
		
		for( int i = 0; i < m_nPoints; i++ )
		{
			// Short based points.
			m_xPointList[ i ] = emr.getShortAt( curOffset );
			m_yPointList[ i ] = emr.getShortAt( curOffset + 2 );
			curOffset += 4;
		}
	}

	public void readEMFRecord( Record emr ) throws IOException
	{
		m_nPolys = emr.getIntAt( EMF_N_POLYS_OFFSET );
		m_nPoints = emr.getIntAt( EMF_COUNT_POINTS_OFFSET );
		
		m_nPointsInPoly	= new int[ m_nPolys ];
		m_xPointList 	= new int[ m_nPoints ];
		m_yPointList 	= new int[ m_nPoints ];
		
		// Read the size of each polygon.
		for( int i = 0; i < m_nPolys; i++ )
		{
			m_nPointsInPoly[ i ] = emr.getIntAt( EMF_COUNTS_OFFSET + ( i * 4 ) );	
		}
		
		int curOffset = EMF_COUNTS_OFFSET + (m_nPolys * 4);
		
		for( int i = 0; i < m_nPoints; i++ )
		{
			if( m_b16Bit )
			{
				// Short based points.
				m_xPointList[ i ] = emr.getShortAt( curOffset );
				m_yPointList[ i ] = emr.getShortAt( curOffset + 2 );
				curOffset += 4;
			}
			else
			{
				// Int based points.
				m_xPointList[ i ] = emr.getIntAt( curOffset );
				m_yPointList[ i ] = emr.getIntAt( curOffset + 4 );
				curOffset += 8;
			}
		}
	}

	public void render( Graphics2D g, DeviceContext context ) throws TranscoderException
	{
		int curOffset = 0;
		
		for( int i = 0; i < m_nPolys; i++ )
		{
			int 	numPoints 	= m_nPointsInPoly[ i ];
			int[] 	xPoints 	= new int[ numPoints ];			
			int[] 	yPoints 	= new int[ numPoints ];
			
			for( int j = 0; j < numPoints; j++ )
			{
				xPoints[ j ] = context.convertXToSVGLogicalUnits( m_xPointList[ curOffset ] );
				yPoints[ j ] = context.convertYToSVGLogicalUnits( m_yPointList[ curOffset ] );
				curOffset++;
			}
			
			renderPoly( g, context, xPoints, yPoints, numPoints );
		}
	}
	
	public void render( DeviceContext context ) throws TranscoderException
	{
		int curOffset = 0;

		GeneralPath p = new GeneralPath();
		
		for( int i = 0; i < m_nPolys; i++ )
		{
			int 	numPoints 	= m_nPointsInPoly[ i ];
			int[] 	xPoints 	= new int[ numPoints ];			
			int[] 	yPoints 	= new int[ numPoints ];
			
			for( int j = 0; j < numPoints; j++ )
			{
				xPoints[ j ] = context.convertXToSVGLogicalUnits( m_xPointList[ curOffset ] );
				yPoints[ j ] = context.convertYToSVGLogicalUnits( m_yPointList[ curOffset ] );
				curOffset++;
			}
			
			renderPoly( p, xPoints, yPoints, numPoints );
		}
		
		context.getGdiPath().appendFigure( p );
	}

	protected abstract boolean renderPoly( Graphics2D g, DeviceContext context, int[] xPoints, int[] yPoints, int nPoints );
	protected abstract boolean renderPoly( GeneralPath path, int[] xPoints, int[] yPoints, int nPoints );
}
@


1.1
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2004 IBM Corporation and others.
@


1.1.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2006 IBM Corporation and others.
@

