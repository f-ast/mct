head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080903-1520:1.4
	v20080903-1510:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080603-1553:1.4
	v20080527-1255:1.4
	v20080507-2230:1.3
	v20080425-1959:1.3
	v20080328-1605:1.3
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20071003-0000:1.2
	v20070928-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070614-1400:1.2
	v20070608-1300:1.2
	v20070601-1400:1.2
	v20070504-1000:1.2
	v20070330-1300:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070105-1200:1.1.2.1
	M4_20:1.2
	v20061218-1500:1.1.2.1
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060919-0800:1.1.2.1
	v20060907-1100:1.1
	M1_20:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	I20060505-1400:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1;
locks; strict;
comment	@# @;


1.4
date	2008.05.23.03.17.38;	author aboyko;	state Exp;
branches;
next	1.3;
commitid	49a6483637514567;

1.3
date	2008.03.28.18.13.57;	author ahunter;	state Exp;
branches;
next	1.2;
commitid	173047ed35644567;

1.2
date	2006.10.03.15.05.27;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.10.15.42.04;	author sshaw;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.16.44.42;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[233585] gmf_head aboyko 080522 [ImageSupport] Diagram Image Export API additions to enable BIRT integration
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;

import org.apache.batik.transcoder.Transcoder;
import org.apache.batik.transcoder.TranscoderException;
import org.apache.batik.transcoder.TranscoderInput;
import org.apache.batik.transcoder.TranscoderOutput;
import org.apache.batik.transcoder.image.ImageTranscoder;
import org.apache.fop.svg.PDFTranscoder;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.Draw2dRenderPlugin;
import org.eclipse.swt.graphics.Image;
import org.w3c.dom.Document;


/**
 * @@author sshaw
 *
 * Class for conversion of SVG to different Image formats
 */
public class SVGImageConverter {
	/**
	 * Consructor to create a new instance of SVGtoBufferedImageConverter
	 */
	public SVGImageConverter() {
		// empty constructor
	}

	/**
	 * renderSVGToAWTImage
	 * Given a filename, will render the SVG file into an SWT Image
	 * 
	 * @@param document Document of svg file
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return BufferedImage AWT image containing the rendered SVG file.
	 * @@throws Exception
	 */
	public BufferedImage renderSVGToAWTImage(Document document, RenderInfo info)
		throws Exception {
		ImageTranscoderEx transcoder = new ImageTranscoderEx();
		setUpTranscoders(document, transcoder, info);
		
		return transcoder.getBufferedImage();
	}
	
	/**
	 * renderSVGtoSWTImage
	 * Given an InputStream, will render the SVG file into an SWT Image
	 * 
	 * @@param document Document of svg file
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return Image SWT image containing the rendered SVG file.
	 * @@throws Exception
	 */
	public Image renderSVGtoSWTImage(Document document, RenderInfo info)
		throws Exception {
		
		SWTImageTranscoder transcoder = new SWTImageTranscoder();
		setUpTranscoders(document, transcoder, info);
		
		return transcoder.getSWTImage();
	}
	
	/**
	 * renderSVGToAWTImage
	 * Given a filename, will render the SVG file into an SWT Image
	 * 
	 * @@param strFileName String file path of svg file
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return BufferedImage AWT image containing the rendered SVG file.
	 * @@throws Exception
	 */
	public BufferedImage renderSVGToAWTImage(String strFileName, RenderInfo info)
		throws Exception {
		InputStream in = new FileInputStream(strFileName);
		return renderSVGToAWTImage(in, info);
	}

	/**
	 * renderSVGToAWTImage
	 * Given a buffer, will render the SVG file into an SWT Image
	 * 
	 * @@param buffer byte[] array containing an cached SVG image file.
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return BufferedImage AWT iimage containing the rendered SVG file.
	 * @@throws Exception
	 */
	public BufferedImage renderSVGToAWTImage(byte[] buffer, RenderInfo info)
		throws Exception {
		InputStream in = new ByteArrayInputStream(buffer);
		return renderSVGToAWTImage(in, info);
	}
	
	/**
	 * setUpTranscoders
	 * sets up the transcoders with the hints based on the RenderInfo structure.
	 * 
	 * @@param in
	 * @@param transcoder
	 * @@param info
	 */
	private void setUpTranscoders(InputStream in, Transcoder transcoder, RenderInfo info)
		throws Exception {
		initializeTranscoderFromInfo(transcoder, info);
		
		TranscoderInput input = null;
		TranscoderOutput output = null;

		input = new TranscoderInput(in);
		output = new ImageTranscoderOutput(); 
		transcoder.transcode(input, output);
	}
	
	/**
	 * setUpTranscoders
	 * sets up the transcoders with the hints based on the RenderInfo structure.
	 * 
	 * @@param document
	 * @@param transcoder
	 * @@param info
	 */
	private void setUpTranscoders(Document document, Transcoder transcoder, RenderInfo info)
		throws Exception {
		initializeTranscoderFromInfo(transcoder, info);
		
		TranscoderInput input = null;
		TranscoderOutput output = null;

		input = new TranscoderInput(document);
		output = new ImageTranscoderOutput(); 
		transcoder.transcode(input, output);
	}

	private void initializeTranscoderFromInfo(Transcoder transcoder, RenderInfo info) {
		if (info.getWidth() > 0)
			transcoder.addTranscodingHint(
				ImageTranscoder.KEY_WIDTH,
				new Float(info.getWidth()));
		if (info.getHeight() > 0)
			transcoder.addTranscodingHint(
				ImageTranscoder.KEY_HEIGHT,
				new Float(info.getHeight()));
		
		transcoder.addTranscodingHint(
			ImageTranscoderEx.KEY_MAINTAIN_ASPECT_RATIO,
				Boolean.valueOf(info.shouldMaintainAspectRatio()));
	
		transcoder.addTranscodingHint(
			ImageTranscoderEx.KEY_ANTI_ALIASING,
				Boolean.valueOf(info.shouldAntiAlias()));
				
		if (info.getBackgroundColor() != null) {
			transcoder.addTranscodingHint(
				ImageTranscoderEx.KEY_FILL_COLOR,
				new Color(info.getBackgroundColor().red, 
						  info.getBackgroundColor().green,
						  info.getBackgroundColor().blue));
		}
		
		if (info.getForegroundColor() != null) {
					transcoder.addTranscodingHint(
						ImageTranscoderEx.KEY_OUTLINE_COLOR,
						new Color(info.getForegroundColor().red, 
								  info.getForegroundColor().green,
								  info.getForegroundColor().blue));
		}

	}
	
	/**
	 * renderSVG
	 * Given an InputStream, will render the SVG file into an SWT Image
	 * 
	 * @@param in InputSteam which contains the SVG file data
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return BufferedImage AWT iimage containing the rendered SVG file.
	 * @@throws Exception
	 */
	public BufferedImage renderSVGToAWTImage(InputStream in, RenderInfo info)
		throws Exception {
		ImageTranscoderEx transcoder = new ImageTranscoderEx();
		setUpTranscoders(in, transcoder, info);

		return transcoder.getBufferedImage();
	}
	
	/**
	 * renderSVGtoSWTImage
	 * Given a filename, will render the SVG file into an SWT Image
	 * 
	 * @@param strFileName String file path of svg file
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return Image SWT image containing the rendered SVG file.
	 * @@throws Exception
	 */
	public Image renderSVGtoSWTImage(String strFileName, RenderInfo info)
		throws Exception {
		InputStream in = new FileInputStream(strFileName);
		return renderSVGtoSWTImage(in, info);
	}

	/**
	 * renderSVGtoSWTImage
	 * Given a buffer, will render the SVG file into an SWT Image
	 * 
	 * @@param buffer byte[] array containing an cached SVG image file.
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return Image SWT image containing the rendered SVG file.
	 * @@throws Exception
	 */
	public Image renderSVGtoSWTImage(byte[] buffer, RenderInfo info)
		throws Exception {
		InputStream in = new ByteArrayInputStream(buffer);
		return renderSVGtoSWTImage(in, info);
	}

	/**
	 * renderSVGtoSWTImage
	 * Given an InputStream, will render the SVG file into an SWT Image
	 * 
	 * @@param in InputSteam which contains the SVG file data
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return Image SWT image containing the rendered SVG file.
	 * @@throws Exception
	 */
	public Image renderSVGtoSWTImage(InputStream in, RenderInfo info)
		throws Exception {
		
		SWTImageTranscoder transcoder = new SWTImageTranscoder();
		setUpTranscoders(in, transcoder, info);
		
		return transcoder.getSWTImage();
	}
	
	 /**
	 * Export SVG image to PDF file format.
	 * 
	 * @@param SVGImage The input SVG image.
	 * @@param fileOutputStream The output stream to write the PDF to.
	 * @@throws CoreException
	 */
    public static void exportToPDF(SVGImage svgImage,
			OutputStream fileOutputStream)
			throws CoreException {
    	
		try {
			TranscoderOutput transcoderOutput = new TranscoderOutput(fileOutputStream);
			TranscoderInput transcoderInput = new TranscoderInput(svgImage
					.getDocument());

			PDFTranscoder pdfTranscoder = new PDFTranscoder();
			pdfTranscoder.transcode(transcoderInput, transcoderOutput);

		} catch (TranscoderException e) {
			Log.error(Draw2dRenderPlugin.getInstance(), IStatus.ERROR, e
					.getMessage(), e);
			IStatus status = new Status(IStatus.ERROR,
					"exportToPDF", IStatus.OK, //$NON-NLS-1$
					e.getMessage(), null);
			throw new CoreException(status);
		} 
	}
}
@


1.3
log
@[212024] gmf-head jbruck 080328 GMF should support PDF format when saving diagrams as image file
@
text
@a17 1
import java.io.FileOutputStream;
d19 1
d272 1
a272 1
			FileOutputStream fileOutputStream)
@


1.2
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d18 1
d22 1
d26 5
d32 1
d42 1
a42 1
class SVGImageConverter {
d263 29
@


1.1
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
@


1.1.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@

