head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080903-1520:1.3
	v20080903-1510:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080603-1553:1.3
	v20080527-1255:1.3
	v20080507-2230:1.3
	v20080425-1959:1.3
	v20080328-1605:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20071003-0000:1.3
	v20070928-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070601-1400:1.3
	v20070504-1000:1.3
	v20070330-1300:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070105-1200:1.1.2.2
	M4_20:1.3
	v20061218-1500:1.1.2.2
	v20061214-0000:1.3
	M3_20:1.2
	v20061013-1330:1.2
	v20060919-0800:1.1.2.1
	v20060907-1100:1.1
	M1_20:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	I20060505-1400:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1;
locks; strict;
comment	@# @;


1.3
date	2006.11.20.22.07.27;	author crevells;	state Exp;
branches;
next	1.2;
commitid	29ce4562271f4567;

1.2
date	2006.10.03.15.05.27;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.10.15.42.04;	author sshaw;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.16.44.42;	author ahunter;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.11.20.21.58.32;	author crevells;	state Exp;
branches;
next	;
commitid	3025456225074567;


desc
@@


1.3
log
@[163847] gmf_head crevells 061120 User specified outline and fill colors corrupt rendered SVG image
Contributed by: Alex Boyko
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg;

import java.awt.Color;

import org.apache.batik.dom.svg.SVGOMDocument;
import org.apache.batik.svggen.SVGColor;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGPaintDescriptor;
import org.apache.batik.util.SVGConstants;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.svg.SVGSVGElement;
import org.w3c.dom.traversal.NodeFilter;
import org.w3c.dom.traversal.NodeIterator;

/**
 * @@author sshaw
 *
 * Utility class that will replace Black and white with corresponding outline and
 * fill colors respectively.
 */
public class SVGColorConverter {
	
	static private SVGColorConverter INSTANCE = new SVGColorConverter();
	
	/**
	 * getInstance
	 * Implementation of the singleton pattern
	 * 
	 * @@return the Singleton Instance of SVGColorConverter
	 */
	static public SVGColorConverter getInstance() {
		return INSTANCE;
	}
	/**
	 * 
	 */
	private SVGColorConverter() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	/**
	 * replaceDocumentColors
	 * Given an SVGOMDocument, this method will replace all fill, stroke and gradient
	 * colors with values that are based in.  Black color will be replaced by the given
	 * outlineColor and White color will be replaced by the given fillColor.
	 * 
	 * @@param svgDoc SVGOMDocument to perform the replace on.
	 * @@param fillColor This is the fill color that will replace all occurrences of white
	 * @@param outlineColor This is the outline color that will replace all occurrences of black.
	 */
	public void replaceDocumentColors(SVGOMDocument svgDoc, Color fillColor, Color outlineColor) {
		SVGSVGElement svgRoot = svgDoc.getRootElement();
		NodeIterator ni = svgDoc.createNodeIterator(svgRoot, NodeFilter.SHOW_ALL, null, true);
		Node node = ni.nextNode();
		while (node != null) {
			if (node.getNodeType() == Node.ELEMENT_NODE) {
				Element element = (Element)node; 
				
				if (fillColor != null) {
					setColorAttribute(svgDoc, element, SVGConstants.SVG_FILL_ATTRIBUTE, false, fillColor);
					setColorAttribute(svgDoc, element, SVGConstants.SVG_STOP_COLOR_ATTRIBUTE, false, fillColor);
				}
				
				if (outlineColor != null) {
					setColorAttribute(svgDoc, element, SVGConstants.SVG_STROKE_ATTRIBUTE, true, outlineColor);
					setColorAttribute(svgDoc, element, SVGConstants.SVG_STOP_COLOR_ATTRIBUTE, true, outlineColor);
				}
			}
			
			node = ni.nextNode();
		}
	}
	
	public static final String SEMICOLON = ";"; //$NON-NLS-1$
	public static final String COLON = ":"; 	//$NON-NLS-1$		

	private boolean isBlack(String color) {
		return color.equals( "#000000" ) || color.toUpperCase().equals("BLACK");//$NON-NLS-1$//$NON-NLS-2$
	}
	
	private boolean isWhite(String color) {
		return color.equals( "#FFFFFF" ) || color.toUpperCase().equals("WHITE");//$NON-NLS-1$//$NON-NLS-2$
	}	
	
	/**
	 * setColorAttribute
	 * Utility function that will set the color attribute to the specified color
	 * 
	 * @@param element Element to set the attribute color of
	 * @@param attributeName String attribute name, usually one of SVGConstants.SVG_FILL_ATTRIBUTE or
	 * SVGConstants.SVG_STROKE_ATTRIBUTE
	 * @@param boolean black is true if replace with color, false to replace white.
	 * @@param color Color to change the attribute to.
	 */
	protected void setColorAttribute(SVGOMDocument svgDoc, Element element, String attributeName, boolean black, Color color) {
		SVGPaintDescriptor svgPD = SVGColor.toSVG(color, SVGGeneratorContext.createDefault(svgDoc));

		if (element.hasAttribute(attributeName)) {
			String value = element.getAttribute(attributeName);

			// Only change the Stroke color if the current color is black
			if( attributeName.equals(SVGConstants.SVG_STROKE_ATTRIBUTE) ||
				attributeName.equals(SVGConstants.SVG_FILL_ATTRIBUTE)) {
				
				if( (black && isBlack(value)) || (!black && isWhite(value)) ) {  
					element.setAttribute(attributeName, svgPD.getPaintValue());
				}
			}
		}
		else if (element.hasAttribute(SVGConstants.SVG_STYLE_TAG)) {
			//TODO There must be a better way to set fill / outline color with the Batik libraries.
			String style = element.getAttribute(SVGConstants.SVG_STYLE_TAG);
						
			String preColor = ""; //$NON-NLS-1$
			int nStart = style.indexOf(attributeName + COLON);
			if (nStart != -1) {
				if (nStart > 0)
					preColor = style.substring(0, nStart);
								
				String postColor = ""; //$NON-NLS-1$
				int nEnd = style.indexOf(SEMICOLON, nStart);
				if (nEnd == -1)
					nEnd = style.length();
				if (nEnd < style.length() - 1)
					postColor = style.substring(nEnd + 1, style.length());
				
				String currentColor = style.substring(nStart+attributeName.length() + 1, nEnd);
				if( (black && isBlack(currentColor)) || (!black && isWhite(currentColor))) {
					if (!currentColor.equals(SVGConstants.SVG_NONE_VALUE)) {				
						StringBuffer styleBuffer = new StringBuffer(style.length() + 5);
						styleBuffer.append(preColor);
						styleBuffer.append(" "); //$NON-NLS-1$
						styleBuffer.append(attributeName);
						styleBuffer.append(COLON);
						styleBuffer.append(svgPD.getPaintValue());
						if (!postColor.equals("")) {	//$NON-NLS-1$
							styleBuffer.append(SEMICOLON);
							styleBuffer.append(postColor);
						}
						String styleNew = styleBuffer.toString();
										
						element.setAttribute(SVGConstants.SVG_STYLE_TAG, styleNew);
					}
			    }
			}
		}
	}
}
@


1.2
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d131 1
a131 1
					preColor = style.substring(0, nStart - 1);
@


1.1
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
@


1.1.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.1.2.2
log
@[163847] gmf_R1_0_maintenance crevells 061120 User specified outline and fill colors corrupt rendered SVG image
Contributed by: Alex Boyko
@
text
@d131 1
a131 1
					preColor = style.substring(0, nStart);
@


