head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080903-1520:1.3
	v20080903-1510:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080603-1553:1.3
	v20080527-1255:1.3
	v20080507-2230:1.3
	v20080425-1959:1.3
	v20080328-1605:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20071003-0000:1.3
	v20070928-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070601-1400:1.3
	v20070504-1000:1.3
	v20070330-1300:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070105-1200:1.2.2.1
	M4_20:1.3
	v20061218-1500:1.2.2.1
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20060919-0800:1.2.2.1
	v20060907-1100:1.2
	M1_20:1.2
	v20060803-1200:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	I20060505-1400:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1;
locks; strict;
comment	@# @;


1.3
date	2006.10.03.15.05.27;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.04.19.55.35;	author sshaw;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2006.02.10.15.42.04;	author sshaw;	state Exp;
branches;
next	;

1.2.2.1
date	2006.09.13.16.44.42;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.3
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg;

import java.awt.Graphics2D;

import org.apache.batik.ext.awt.RenderingHintsKeyExt;
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.graphics.Graphics2DToGraphicsAdaptor;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.PaletteData;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.widgets.Display;


/**
 * Image transcoder that will allow direct rendering to an swt <code>GC</code> object through
 * a delegating class.
 * 
 * @@see Graphics2DToGraphicsAdaptor
 * 
 * @@author sshaw
 *
 */
public class SWTImageTranscoder
	extends ImageTranscoderEx {

	private Image swtImage = null;
	
	public SWTImageTranscoder() {
		super();
	}

	/**
	 * @@return Returns the swtImage.
	 */
	public Image getSWTImage() {
		return swtImage;
	}

	private static final RGB TRANSPARENT_COLOR = new RGB(254, 255, 254);
	private static final RGB REPLACE_TRANSPARENT_COLOR = new RGB(255, 255, 255);
	
	private GC swtGC = null;
	
	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.ImageTranscoderEx#createGraphics(int, int)
	 */
	protected Graphics2D createGraphics(int w, int h) {
		Display display = Display.getDefault();

		ImageData imgData = new ImageData(w, h, 24, new PaletteData(0xFF0000, 0xFF00, 0xFF));
		imgData.transparentPixel = FigureUtilities.RGBToInteger(TRANSPARENT_COLOR).intValue();
		
		swtImage = new Image(display, imgData);
		swtGC = new GC(swtImage);
		
		Color transparentColor = new Color(null, TRANSPARENT_COLOR);
		swtGC.setBackground(transparentColor);
		swtGC.fillRectangle(0, 0, w, h);
		transparentColor.dispose();
		
        Graphics2D g2d = new Graphics2DToGraphicsAdaptor(swtGC, TRANSPARENT_COLOR, REPLACE_TRANSPARENT_COLOR);
        // needed to avoid eroneous error being dumped to console
        g2d.setRenderingHint(RenderingHintsKeyExt.KEY_TRANSCODING,
            RenderingHintsKeyExt.VALUE_TRANSCODING_PRINTING);
        
        return g2d;
	}

	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.ImageTranscoderEx#postRenderImage(java.awt.Graphics2D)
	 */
	protected void postRenderImage(Graphics2D g2d) {
		super.postRenderImage(g2d);
		
		swtGC.dispose();
	}
	
}
@


1.2
log
@bugzilla 131634 gmf-head sshaw 060404 SVG rendered through awt graphics lose transparency
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
@


1.2.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.1
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@d16 1
d76 6
a81 1
		return new Graphics2DToGraphicsAdaptor(swtGC, TRANSPARENT_COLOR, REPLACE_TRANSPARENT_COLOR);
@

