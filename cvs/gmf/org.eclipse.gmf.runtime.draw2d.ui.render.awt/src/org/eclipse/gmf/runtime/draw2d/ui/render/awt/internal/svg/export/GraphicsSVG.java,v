head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080903-1520:1.3
	v20080903-1510:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080603-1553:1.3
	v20080527-1255:1.3
	v20080507-2230:1.3
	v20080425-1959:1.3
	v20080328-1605:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20071003-0000:1.3
	v20070928-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070601-1400:1.2
	v20070504-1000:1.2
	v20070330-1300:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070105-1200:1.1.2.1
	M4_20:1.2
	v20061218-1500:1.1.2.1
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060919-0800:1.1.2.1
	v20060907-1100:1.1
	M1_20:1.1
	v20060803-1200:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	I20060505-1400:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1;
locks; strict;
comment	@# @;


1.3
date	2007.06.06.13.50.21;	author crevells;	state Exp;
branches;
next	1.2;
commitid	1dc94666bb9d4567;

1.2
date	2006.10.03.15.05.27;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.10.15.42.04;	author sshaw;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.13.16.44.42;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[190546] gmf_head crevells 070606 Fill & line colors change on SVG images sporadically  when one image has fill/line color set
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.export;

import java.awt.Color;
import java.awt.Dimension;

import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.dom.svg.SVGOMDocument;
import org.apache.batik.dom.util.DOMUtilities;
import org.apache.batik.svggen.DOMTreeManager;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.batik.util.SVGConstants;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.graphics.GraphicsToGraphics2DAdaptor;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.SVGColorConverter;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.SVGImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderingListener;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;


/**
 * Objects of this class can be used with draw2d to create an SVG DOM.
 * 
 * @@author jschofie / sshaw
 */
public class GraphicsSVG extends GraphicsToGraphics2DAdaptor implements DrawableRenderedImage {

	private Document doc;

	/**
	 * Static initializer that will return an instance of <code>GraphicsSVG</code>
	 * 
	 * @@param viewPort the <code>Rectangle</code> area that is to be rendered.
	 * @@return a new <code>GraphicsSVG</code> object.
	 */
	public static GraphicsSVG getInstance(Rectangle viewPort) {
		SVGGraphics2D svgGraphics;
		
		// Get the DOM implementation and create the document
		DOMImplementation impl = SVGDOMImplementation.getDOMImplementation();
		String svgNameSpace = SVGDOMImplementation.SVG_NAMESPACE_URI;
		Document doc = impl.createDocument(svgNameSpace, "svg", null); //$NON-NLS-1$

		// Create the SVG Graphics Object
		svgGraphics = new SVGGraphics2D(doc);

		// Set the precision level to avoid NPEs (issue with Batik 1.5)
		svgGraphics.getGeneratorContext().setPrecision( 3 );

		// Set the Width and Height Attributes on the Root Element
		svgGraphics.setSVGCanvasSize(
			new Dimension(viewPort.width, viewPort.height));
		
		return new GraphicsSVG(svgGraphics, doc, svgNameSpace, viewPort);
	}
	
	/**
	 * @@return <code>SVGGraphics2D</code> object
	 */
	public SVGGraphics2D getSVGGraphics2D() {
		return (SVGGraphics2D)getGraphics2D();
	}
	
	/**
	 * @@param graphics
	 * @@param doc
	 * @@param svgNameSpace
	 * @@param viewPort
	 */
	private GraphicsSVG( SVGGraphics2D graphics, Document doc, String svgNameSpace, Rectangle viewPort ) {
		
		this( graphics, doc, svgNameSpace, new org.eclipse.swt.graphics.Rectangle( viewPort.x,
						viewPort.y,
						viewPort.width,
						viewPort.height) );
	}

	/**
	 * @@param graphics
	 * @@param doc
	 * @@param svgNameSpace
	 * @@param viewPort
	 */
	private GraphicsSVG(SVGGraphics2D graphics, Document doc, String svgNameSpace, org.eclipse.swt.graphics.Rectangle viewPort) {

		super(graphics, viewPort );
		this.doc = doc;
	}

	/**
	 * Method used to get the SVG DOM from the Graphics
	 * 
	 * @@return SVG document
	 */
	public Document getDocument() {
		return doc;
	}

	/**
	 * Method used to get the SVG Root element from the document
	 * 
	 * @@return DOM Root element
	 */
	public Element getRoot() {
		return getSVGGraphics2D().getRoot();		
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.graphics.GraphicsToGraphics2DAdaptor#drawRenderedImage(org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage, org.eclipse.draw2d.geometry.Rectangle, org.eclipse.gmf.runtime.draw2d.ui.render.RenderingListener)
	 */
	public RenderedImage drawRenderedImage(RenderedImage srcImage, Rectangle rect, RenderingListener listener) {

		// Check for a change in the state
		checkState();

	    // Get the Tree Manager
	    DOMTreeManager treeManager = getSVGGraphics2D().getDOMTreeManager();

	    Point trans = getTranslationOffset();
	    // Get the Root element of the SVG document to export
	    if (srcImage instanceof SVGImage) {
	    	Document document = ((SVGImage)srcImage).getDocument();
            
          DOMImplementation impl = SVGDOMImplementation.getDOMImplementation();
          document = DOMUtilities.deepCloneDocument(document, impl);
            
	    	if (document instanceof SVGOMDocument) {
	    		RenderInfo info = srcImage.getRenderInfo();
				SVGColorConverter.getInstance().replaceDocumentColors((SVGOMDocument)document, 
					new Color(info.getBackgroundColor().red, 
						  info.getBackgroundColor().green,
						  info.getBackgroundColor().blue),
					new Color(info.getForegroundColor().red, 
						info.getForegroundColor().green,
						info.getForegroundColor().blue));
			}
			Element root = document.getDocumentElement();

			// Create a "deep" copy of the document
			Element toAppend = (Element)doc.importNode(root, true);

			// Modify the X Attribute
			toAppend.setAttributeNS(
					null,
					SVGConstants.SVG_X_ATTRIBUTE,
					String.valueOf(rect.x + trans.x));

			// Modify the Y Attribute
			toAppend.setAttributeNS(
					null,
					SVGConstants.SVG_Y_ATTRIBUTE,
					String.valueOf(rect.y + trans.y));

			// Modify the Width Attribute
			toAppend.setAttributeNS(
					null,
					SVGConstants.SVG_WIDTH_ATTRIBUTE,
					String.valueOf(rect.width));

			// Modify the Height Attribute
			toAppend.setAttributeNS(
					null,
					SVGConstants.SVG_HEIGHT_ATTRIBUTE,
					String.valueOf(rect.height));

			treeManager.appendGroup(toAppend, null);
			return srcImage;
	    }
	    else {
	    	return super.drawRenderedImage(srcImage, rect, listener);
		}
	}
	

}
@


1.2
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
d20 1
d140 4
d154 1
a154 1
			Element root = ((SVGImage)srcImage).getDocument().getDocumentElement();
@


1.1
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
@


1.1.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@

