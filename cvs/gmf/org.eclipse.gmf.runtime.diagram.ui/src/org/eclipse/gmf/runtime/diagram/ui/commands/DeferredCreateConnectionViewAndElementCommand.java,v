head	1.7;
access;
symbols
	v20081023-2107:1.7
	v20081022-1925:1.7
	v20081022-1005:1.7
	v20081020-0700:1.7
	v20080917-1925:1.7
	v20080916-2008:1.7
	v20080911-1728:1.7
	v20080911-1506:1.7
	v20080910-1520:1.7
	v20080910-1510:1.7
	v20080903-1520:1.7
	v20080903-1510:1.7
	v20080813-1510:1.7
	v20080811-1546:1.7
	v20080731-1520:1.7
	v20080725-1738:1.7
	v20080723-2246:1.7
	v20080723-2232:1.7
	v20080723-1700:1.7
	v20080722-1827:1.7
	v20080718-1700:1.7
	v20080718-1731:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080610-1132:1.7
	v20080603-1553:1.7
	v20080527-1255:1.7
	v20080527-1151:1.6
	v20080516-1748:1.7
	v20080516-1143:1.7
	v20080512-1200:1.7
	v20080503-1740:1.7
	v20080501-2127:1.6
	v20080501-1739:1.7
	m20080429-1543:1.6
	v20080425-1959:1.7
	v20080417-1610:1.7
	v20080407-2250:1.7
	v20080407-0930:1.6
	v20080404-1111:1.6
	v20080328-1605:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080201-2010:1.6
	v20080201-0201:1.6
	v20080118-1129:1.6
	v20080114-2222:1.6
	v20080114-1111:1.6
	v20080107-1111:1.6
	v20071222-1111:1.6
	v20071214-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20071112-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070915-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.4
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070518-1300:1.6
	bugzilla111892_group_support:1.6.0.2
	Root_bugzilla111892_group_support:1.6
	v20070504-1000:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070202-0200:1.5.2.1
	v20070119-1200:1.5.2.1
	v20070111-0800:1.5.2.1
	v20070105-1200:1.5.2.1
	v20070103-0300:1.6
	M4_20:1.6
	v20061218-1500:1.5.2.1
	v20061218-1200:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061027-1200:1.5.2.1
	v20061013-1330:1.6
	v20061012-1100:1.5.2.1
	v20060925-1700:1.5.2.1
	v20060919-0800:1.5.2.1
	v20060907-1100:1.5.2.1
	M1_20:1.5
	v20060831-1500:1.5.2.1
	v20060824-1600:1.5
	v20060817-1500:1.5
	v20060810-1700:1.5
	v20060803-1200:1.5
	v20060728-0500:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.4
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2008.04.08.02.16.38;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	4d0547fad5804567;

1.6
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.28.02.30.51;	author cmahoney;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.02.20.18.40.48;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.08.25.19.21.34;	author cmahoney;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[226065] gmf-head ahunter 080407 Fix warning: The type Assert is deprecated
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.commands;

import java.util.Collections;
import java.util.List;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.requests.CreateRequest;
import org.eclipse.gmf.runtime.common.core.command.AbstractCommand;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.SuppressibleUIRequest;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewAndElementRequest;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateUnspecifiedTypeConnectionRequest;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.notation.View;

/**
 * a command to create the both of the View and Semantic of the connection, but
 * the editparts of target and source to obtain the command has not been created
 * yet, since we have the ViewAdapter to we can use it to get its editpart once
 * it is created and hence on execution time we can get its editpart to get the
 * command for our request and then execute it.
 * 
 * <p>
 * This command can handle both
 * <code>CreateConnectionViewAndElementRequest</code> and
 * <code>CreateConnectionViewRequest</code>.
 * </p>
 * 
 * @@author choang
 */
public class DeferredCreateConnectionViewAndElementCommand
	extends AbstractCommand {

	CreateRequest request = null;

	IAdaptable typeInfoAdapter = null;

	IAdaptable sourceViewAdapter = null;

	IAdaptable targetViewAdapter = null;

	Command command = null;

	EditPartViewer viewer = null;

	private DeferredCreateConnectionViewAndElementCommand(
			IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter,
			EditPartViewer currentViewer) {

		super(DiagramUIMessages.Commands_CreateCommand_Connection_Label, null);
		Assert.isNotNull(currentViewer, "currentViewer is null"); //$NON-NLS-1$
		this.sourceViewAdapter = sourceViewAdapter;
		this.targetViewAdapter = targetViewAdapter;
		this.viewer = currentViewer;
	}

	/**
	 * Constructor for DeferredCreateConnectionViewAndElementCommand.
	 * 
	 * @@param request
	 *            the ceate connection request
	 * @@param sourceViewAdapter
	 *            will adapt to the source view at execution time
	 * @@param targetViewAdapter
	 *            will adapt to the target view at execution time
	 * @@param currentViewer
	 *            used to find the editparts for the views
	 */
	public DeferredCreateConnectionViewAndElementCommand(
			CreateConnectionViewAndElementRequest request,
			IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter,
			EditPartViewer currentViewer) {
		this(sourceViewAdapter, targetViewAdapter, currentViewer);
		this.request = request;
	}

	/**
	 * Constructor for DeferredCreateConnectionViewAndElementCommand.
	 * 
	 * @@param type
	 *            the type to be used in a new
	 *            <code>CreateConnectionViewAndElementRequest</code>
	 * @@param sourceViewAdapter
	 *            will adapt to the source view at execution time
	 * @@param targetViewAdapter
	 *            will adapt to the target view at execution time
	 * @@param currentViewer
	 *            used to find the editparts for the views
	 */
	public DeferredCreateConnectionViewAndElementCommand(IElementType type,
			IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter,
			EditPartViewer currentViewer, PreferencesHint preferencesHint) {
		this(new CreateConnectionViewAndElementRequest(type, preferencesHint),
			sourceViewAdapter, targetViewAdapter, currentViewer);
	}

	/**
	 * Constructor for DeferredCreateConnectionViewAndElementCommand.
	 * 
	 * @@param request
	 *            the ceate connection request
	 * @@param typeInfoAdapter
	 *            extracts the type to be used in a new
	 *            <code>CreateConnectionViewAndElementRequest</code> at
	 *            execution time
	 * @@param sourceViewAdapter
	 *            will adapt to the source view at execution time
	 * @@param targetViewAdapter
	 *            will adapt to the target view at execution time
	 * @@param currentViewer
	 *            used to find the editparts for the views
	 */
	public DeferredCreateConnectionViewAndElementCommand(CreateRequest request,
			IAdaptable typeInfoAdapter, IAdaptable sourceViewAdapter,
			IAdaptable targetViewAdapter, EditPartViewer currentViewer) {
		this(sourceViewAdapter, targetViewAdapter, currentViewer);
		this.request = request;
		this.typeInfoAdapter = typeInfoAdapter;
	}

    public List getAffectedFiles() {
		if (viewer != null) {
			EditPart editpart = viewer.getRootEditPart().getContents();
			if (editpart instanceof IGraphicalEditPart) {
				View view = (View) editpart.getModel();
				if (view != null) {
					IFile f = WorkspaceSynchronizer.getFile(view.eResource());
					return f != null ? Collections.singletonList(f)
						: Collections.EMPTY_LIST;
				}
			}
		}
        return super.getAffectedFiles();
	}

	public boolean canUndo() {
		return command != null && command.canUndo();
	}

	public boolean canRedo() {
		return CommandUtilities.canRedo(command);
	}

	/**
	 * gives access to the connection source edit part, which is the edit part
	 * of the connection's source <code>View</code>
	 * 
	 * @@return the source edit part
	 */
	protected EditPart getSourceEditPart() {
		return (IGraphicalEditPart) viewer.getEditPartRegistry().get(
			sourceViewAdapter.getAdapter(View.class));
	}

	/**
	 * gives access to the connection target edit part, which is the edit part
	 * of the connection's target <code>View</code>
	 * 
	 * @@return the source edit part
	 */
	protected EditPart getTargetEditPart() {
		return (IGraphicalEditPart) viewer.getEditPartRegistry().get(
			targetViewAdapter.getAdapter(View.class));
	}

	/**
	 * Finds the source and target editparts by extracting the views from the
	 * view adapaters and searching in the editpart viewer. Creates a connection
	 * view and element using the request.
	 * 
	 */
	protected CommandResult doExecuteWithResult(
            IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {
    
		CreateConnectionViewRequest req = null;
		if (request != null) {
			if (request instanceof CreateConnectionViewRequest) {
				req = (CreateConnectionViewRequest) request;
			}
		} else {
			return CommandResult.newErrorCommandResult(getLabel());
		}
		if (typeInfoAdapter != null) {
			IElementType typeInfo = (IElementType) typeInfoAdapter
				.getAdapter(IElementType.class);
			if (typeInfo == null) {
				CommandResult.newErrorCommandResult(getLabel());
			}

			if (request instanceof CreateUnspecifiedTypeConnectionRequest) {
				req = ((CreateConnectionViewRequest) ((CreateUnspecifiedTypeConnectionRequest) request)
					.getRequestForType(typeInfo));
			}
		}

		req.setLocation(null);

		// Suppressing UI if the target edit part has not been created yet
		// this is so that if we are creating a new target the connection
		// creation will just take default data instead of prompting
		// For Defect RATLC00524293
		if (targetViewAdapter.getAdapter(IGraphicalEditPart.class) == null
			&& req instanceof SuppressibleUIRequest)
			((SuppressibleUIRequest) req).setSuppressibleUI(true);

		EditPart sourceEP = getSourceEditPart();

		EditPart targetEP = getTargetEditPart();

		// There are situations where src or target can be null and we must
		// check for these
		// ie. When a Select Existing Dialog is presnetd to the user and the
		// user presses
		// cancel either the src or target can be null.
		// So the following assertions have been replaced with a check for null
		// on the editparts.
		// old code ... Assert.isNotNull(sourceEP); Assert.isNotNull(targetEP);
		if ((sourceEP == null) || (targetEP == null))
			return null;

		if (req instanceof CreateConnectionViewAndElementRequest) {
			command = CreateConnectionViewAndElementRequest.getCreateCommand(
				req, sourceEP, targetEP);
		} else {
			command = CreateConnectionViewRequest.getCreateCommand(req,
				sourceEP, targetEP);
		}

		if (command != null && command.canExecute()) {
			command.execute();
		}
		viewer = null;// for garbage collection

		View view = (View) req.getConnectionViewDescriptor().getAdapter(
			View.class);
		if (null == view) {
			return CommandResult.newCancelledCommandResult();
		}
		return CommandResult.newOKCommandResult(req.getNewObject());
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.core.command.ICommand#getLabel()
	 */
	public String getLabel() {
		if (command != null) {
			return command.getLabel();
		}
		return null;
	}

    
    protected CommandResult doRedoWithResult(IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {
 
		if (command != null) {
			command.redo();
		}
		return CommandResult.newOKCommandResult();
	}

    protected CommandResult doUndoWithResult(IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {

		if (command != null) {
			command.undo();
		}
		return CommandResult.newOKCommandResult();
	}

}
@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d19 1
a37 1
import org.eclipse.jface.util.Assert;
@


1.5
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d164 1
a164 1
		return command != null && command.canExecute();
@


1.5.2.1
log
@Bugzilla#150391 gmf_R1_0_maintenance cmahoney 060825 checking canRedo() for wrapped GEF commands
Contributed by:  Alex Boyko
@
text
@d164 1
a164 1
		return CommandUtilities.canRedo(command);
@


1.4
log
@[124928] gmf_head ldamus 060220 SemanticService should be deleted
@
text
@d21 1
a34 1
import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
d143 1
a143 1
    
d145 11
a155 11
        if (viewer != null) {
            EditPart editpart = viewer.getRootEditPart().getContents();
            if (editpart instanceof IGraphicalEditPart) {
                View view = (View) editpart.getModel();
                if (view != null) {
                    IFile f = EObjectUtil.getWorkspaceFile(view);
                    return f != null ? Collections.singletonList(f)
                        : Collections.EMPTY_LIST;
                }
            }
        }
d157 1
a157 1
    }
@


1.3
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@a26 1
import org.eclipse.gmf.runtime.diagram.core.internal.services.semantic.SuppressibleUIRequest;
d29 1
@


1.2
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
a13 1
import java.util.Collection;
d15 1
d17 1
d73 1
a73 1
		super(DiagramUIMessages.Commands_CreateCommand_Connection_Label);
d143 15
d159 1
a159 22
	/**
	 * @@see org.eclipse.gmf.runtime.common.core.command.ICommand#getAffectedObjects()
	 */
	public Collection getAffectedObjects() {
		if (viewer != null) {
			EditPart editpart = viewer.getRootEditPart().getContents();
			if (editpart instanceof IGraphicalEditPart) {
				View view = (View) editpart.getModel();
				if (view != null) {
					IFile f = EObjectUtil.getWorkspaceFile(view);
					return f != null ? Collections.singletonList(f)
						: Collections.EMPTY_LIST;
				}
			}
		}
		return super.getAffectedObjects();
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.core.command.ICommand#isUndoable()
	 */
	public boolean isUndoable() {
d163 1
a163 4
	/**
	 * @@see org.eclipse.gmf.runtime.common.core.command.ICommand#isRedoable()
	 */
	public boolean isRedoable() {
a193 1
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doExecute(org.eclipse.core.runtime.IProgressMonitor)
d195 4
a198 1
	protected CommandResult doExecute(IProgressMonitor progressMonitor) {
d205 1
a205 1
			return newErrorCommandResult(getLabel());
d211 1
a211 1
				newErrorCommandResult(getLabel());
d261 1
a261 1
			return newCancelledCommandResult();
d263 1
a263 1
		return newOKCommandResult(req.getNewObject());
d276 4
a279 4
	/**
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doRedo()
	 */
	protected CommandResult doRedo() {
d283 1
a283 1
		return newOKCommandResult();
d286 3
a288 4
	/**
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doUndo()
	 */
	protected CommandResult doUndo() {
d292 1
a292 1
		return newOKCommandResult();
@


1.1
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d29 1
a29 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d72 1
a72 2
		super(DiagramResourceManager
			.getI18NString("Commands.CreateCommand.Connection.Label")); //$NON-NLS-1$
@

