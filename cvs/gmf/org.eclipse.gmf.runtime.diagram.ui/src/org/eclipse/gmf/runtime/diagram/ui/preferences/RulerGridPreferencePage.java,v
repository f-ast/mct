head	1.12;
access;
symbols
	v20081023-2107:1.12
	v20081022-1925:1.12
	v20081022-1005:1.12
	v20081020-0700:1.12
	v20080917-1925:1.12
	v20080916-2008:1.12
	v20080911-1728:1.12
	v20080911-1506:1.12
	v20080910-1520:1.12
	v20080910-1510:1.12
	v20080903-1520:1.12
	v20080903-1510:1.12
	v20080813-1510:1.12
	v20080811-1546:1.12
	v20080731-1520:1.12
	v20080725-1738:1.12
	v20080723-2246:1.12
	v20080723-2232:1.12
	v20080723-1700:1.12
	v20080722-1827:1.12
	v20080718-1700:1.12
	v20080718-1731:1.12
	v20080716-1600:1.12
	v20080716-1642:1.12
	R2_1_maintenance:1.12.0.2
	Root_R2_1_maintenance:1.12
	R2_1_0:1.12
	v20080610-1132:1.12
	v20080603-1553:1.12
	v20080527-1255:1.12
	v20080527-1151:1.9
	v20080516-1748:1.12
	v20080516-1143:1.12
	v20080512-1200:1.12
	v20080503-1740:1.12
	v20080501-2127:1.9
	v20080501-1739:1.12
	m20080429-1543:1.9
	v20080425-1959:1.12
	v20080417-1610:1.12
	v20080407-2250:1.12
	v20080407-0930:1.12
	v20080404-1111:1.12
	v20080328-1605:1.12
	v20080322-0000:1.12
	v20080222-1200:1.12
	v20080201-2010:1.12
	v20080201-0201:1.9
	v20080118-1129:1.9
	v20080114-2222:1.9
	v20080114-1111:1.12
	v20080107-1111:1.12
	v20071222-1111:1.12
	v20071214-1111:1.12
	v20071130-1111:1.11
	v20071124-0000:1.9
	v20071112-0000:1.9
	v20071108-0000:1.9
	v20071003-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.4
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070518-1300:1.9
	bugzilla111892_group_support:1.9.0.2
	Root_bugzilla111892_group_support:1.9
	v20070504-1000:1.9
	v20070420-1000:1.9
	v20070413-1300:1.9
	v20070330-1300:1.9
	v20060330-1300:1.9
	v20070322-1100:1.9
	v20060316-0600:1.9
	v20070221-1500:1.9
	v20070208-1800:1.9
	v20070202-0200:1.8.2.1
	v20070119-1200:1.8.2.1
	v20070111-0800:1.8.2.1
	v20070105-1200:1.8.2.1
	v20070103-0300:1.9
	M4_20:1.9
	v20061218-1500:1.8.2.1
	v20061218-1200:1.9
	v20061214-0000:1.9
	M3_20:1.9
	v20061117-0800:1.9
	v20061027-1200:1.8.2.1
	v20061013-1330:1.9
	v20061012-1100:1.8.2.1
	v20060925-1700:1.8.2.1
	v20060919-0800:1.8.2.1
	v20060907-1100:1.8.2.1
	M1_20:1.8
	v20060831-1500:1.8.2.1
	v20060824-1600:1.8.2.1
	v20060817-1500:1.8.2.1
	v20060810-1700:1.8.2.1
	v20060803-1200:1.8
	v20060728-0500:1.8
	v20060721-1130:1.8
	v20060713-1700:1.8
	R1_0_maintenance:1.8.0.2
	R1_0:1.8
	v20060627-1200:1.8
	v20060616-1400:1.8
	v20060616-1200:1.8
	v20060609-1400:1.8
	v20060531-1730:1.8
	v20060530-1930:1.8
	v20060526-1200:1.8
	v20060519-0800:1.8
	v20060512-1000:1.7
	I20060512-1000:1.7
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.7
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.4
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.12
date	2007.12.11.15.17.03;	author crevells;	state Exp;
branches;
next	1.11;
commitid	70dc475ea9ed4567;

1.11
date	2007.11.16.20.03.20;	author ahunter;	state Exp;
branches;
next	1.10;
commitid	5eaf473df7884567;

1.10
date	2007.11.16.20.02.50;	author ahunter;	state Exp;
branches;
next	1.9;
commitid	5c11473df7694567;

1.9
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.17.20.36.52;	author cmahoney;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2006.03.24.19.27.49;	author ldamus;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.26.15.37.24;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.06.20.36.19;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.02.23.30.17;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.12;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.53;	author sshaw;	state Exp;
branches;
next	;

1.8.2.1
date	2006.08.10.19.35.58;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.12
log
@[188974] gmf_head crevells 071211 [RulersGrid] GEF alignment feature missing
Contributed by:  Carson Li
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.diagram.ui.preferences;

import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;

import org.eclipse.gef.rulers.RulerProvider;
import org.eclipse.gmf.runtime.common.ui.preferences.AbstractPreferencePage;
import org.eclipse.gmf.runtime.common.ui.preferences.ComboFieldEditor;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.jface.preference.BooleanFieldEditor;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.StringFieldEditor;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Text;

import com.ibm.icu.text.NumberFormat;


/**
 * Diagram Ruler & Grid preference page.
 * 
 * @@author jschofie
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.ui.*
 */
public class RulerGridPreferencePage
	extends AbstractPreferencePage {

	private class DoubleFieldEditor extends StringFieldEditor {
		
		private double minValidValue = 00.009;
		private double maxValidValue = 99.999;
		
		public DoubleFieldEditor(String pref, String label, Composite parent ) {
			super(pref,label,parent);
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.jface.preference.StringFieldEditor#doCheckState()
		 */
		protected boolean doCheckState() {
			Text text = getTextControl();

			if (text == null)
				return false;
			
			try {
				NumberFormat numberFormatter = NumberFormat.getInstance();
				ParsePosition parsePosition = new ParsePosition(0);
				Number parsedNumber = numberFormatter.parse(text.getText(), parsePosition);
				
				if (parsedNumber == null) {
					showErrorMessage();
					return false;
				}
				
				Double pageHeight = forceDouble(parsedNumber);
				double number = pageHeight.doubleValue();
				number = convertToBase(number);
				if (number >= minValidValue && number <= maxValidValue 
						&& parsePosition.getIndex() == text.getText().length()) {
					clearErrorMessage();
					return true;
				} else {
					showErrorMessage();
					return false;
				}
			} catch (NumberFormatException e1) {
				showErrorMessage();
			}

			return false;
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.jface.preference.StringFieldEditor#doLoadDefault()
		 */
		protected void doLoadDefault() {
			Text text = getTextControl();
			if (text != null) {
				double value = getPreferenceStore().getDefaultDouble(getPreferenceName());
				NumberFormat numberFormatter = NumberFormat.getNumberInstance();
				text.setText(numberFormatter.format(value));
			}
			valueChanged();
		}
		
		/* (non-Javadoc)
		 * Method declared on FieldEditor.
		 */
		protected void doLoad() {
			Text text = getTextControl();			
			if (text != null) {
				double value = getPreferenceStore().getDouble(getPreferenceName());
				NumberFormat numberFormatter = NumberFormat.getNumberInstance();
				text.setText(numberFormatter.format(value));				
			}
		}		
		
		protected void doStore() {
			NumberFormat numberFormatter = NumberFormat.getInstance();				
			Double gridWidth;
			try {
				gridWidth = forceDouble(numberFormatter.parse(getTextControl().getText()));
				getPreferenceStore().setValue(getPreferenceName(), gridWidth.doubleValue());				
			} catch (ParseException e) {
				showErrorMessage();
			}
			
		}		
	}

	private int oldUnits = -1;

	private static final int INCHES = 0;
	private static final int CENTIMETERS = 1;
	private static final int PIXELS = 2;

	// Conversion from inch to centimeter
	private static final double INCH2CM = 2.54;
	
	private String RULER_GROUP_LABEL = DiagramUIMessages.GridRulerPreferencePage_rulerGroup_label;
	private String SHOW_RULERS_LABEL = DiagramUIMessages.GridRulerPreferencePage_showRulers_label;
	private String RULER_UNITS_LABEL = DiagramUIMessages.GridRulerPreferencePage_rulerUnits_label;
	private String RULER_UNITS_IN_LABEL = DiagramUIMessages.GridRulerPreferencePage_rulerUnits_inch_label;
	private String RULER_UNITS_CM_LABEL = DiagramUIMessages.GridRulerPreferencePage_rulerUnits_cm_label;
	private String RULER_UNITS_PIXEL_LABEL = DiagramUIMessages.GridRulerPreferencePage_rulerUnits_pixel_label;

	private String GRID_GROUP_LABEL = DiagramUIMessages.GridRulerPreferencePage_gridGroup_label;
	private String SHOW_GRID_LABEL = DiagramUIMessages.GridRulerPreferencePage_showGrid_label;
	private String SNAP_TO_GRID_LABEL = DiagramUIMessages.GridRulerPreferencePage_snapToGrid_label;
	private String SNAP_TO_GEOMETRY_LABEL = DiagramUIMessages.GridRulerPreferencePage_snapToGeometry_label;
	private String GRID_SPACING_LABEL_INCHES = DiagramUIMessages.GridRulerPreferencePage_gridSpacing_label_inches;
    private String GRID_SPACING_LABEL_CM = DiagramUIMessages.GridRulerPreferencePage_gridSpacing_label_cm;
    private String GRID_SPACING_LABEL_PIXELS = DiagramUIMessages.GridRulerPreferencePage_gridSpacing_label_pixels;
    
	
	// Ruler Field Editors
	private BooleanFieldEditor showRulers = null;
    private ComboFieldEditor rulerUnits;

    // Grid Field Editors
    private BooleanFieldEditor showGrid = null;
	private BooleanFieldEditor snapToGrid = null;
	private BooleanFieldEditor snapToGeometry = null;
	private DoubleFieldEditor gridSpacing = null;
    private Composite dblGroup = null;

	private String convertUnits(int fromUnits, int toUnits ) {
		String valueStr = gridSpacing.getStringValue();
		if( fromUnits == toUnits ) {
			return valueStr;
		}
		
		//Double value = Double.valueOf( valueStr );
		NumberFormat numberFormatter = NumberFormat.getInstance();		
		Double value = new Double(0.125);
		try {
			value = forceDouble(numberFormatter.parse(valueStr));
		} catch (ParseException e) {
			// Use the default
		}
		double pixelValue = 0;

		switch( fromUnits ) {
			case INCHES:
				pixelValue = value.doubleValue() * Display.getDefault().getDPI().x;
				break;
			case CENTIMETERS:
				pixelValue = value.doubleValue() * Display.getDefault().getDPI().x / INCH2CM;
				break;
			case PIXELS:
				pixelValue = value.intValue();
		}
		
		double returnValue = 0;
		
		switch( toUnits ) {
			case INCHES:
				returnValue = pixelValue / Display.getDefault().getDPI().x;
				break;
			case CENTIMETERS:
				returnValue = pixelValue * INCH2CM / Display.getDefault().getDPI().x;
				break;
			case PIXELS:
				returnValue = pixelValue;
		}
		
		return numberFormatter.format(returnValue);		
	}

	
	/**
	 * 
	 * converts the current units used to a base unit value to be used (e.g. in validation)
	 * 
	 * @@param number Units to be converted to the base unit
	 * @@return
	 */
	private double convertToBase(double number) {
		
		double returnValue = 0;
		switch( getUnits() ) {
			case INCHES:
				returnValue = number;
				break;
			case CENTIMETERS:
				returnValue = number / INCH2CM;
				break;
			case PIXELS:
				returnValue = number / Display.getDefault().getDPI().x;
		}
		return returnValue;
	}

	private void updateUnits() {
		
		int units = getUnits();

		switch( units )
		{
			case INCHES:
                gridSpacing.setLabelText(GRID_SPACING_LABEL_INCHES);
				break;
				
			case CENTIMETERS:
                gridSpacing.setLabelText(GRID_SPACING_LABEL_CM);
				break;

			case PIXELS:
                gridSpacing.setLabelText(GRID_SPACING_LABEL_PIXELS);
				break;
		}

		gridSpacing.setStringValue( convertUnits( oldUnits, units ) );
		oldUnits = units;
        
        dblGroup.layout();
		
	}

	private int getUnits() {
		int units = rulerUnits.getComboControl().getSelectionIndex();
		
		// IF no selection has been made
		if( units == -1 ) {
			// Read the preference store
			units = getPreferenceStore().getInt(IPreferenceConstants.PREF_RULER_UNITS);
			oldUnits = units;
		}
		return units;
	}

	private void addRulerFields( Composite parent ) {

		// Create a Group to hold the ruler fields
    	Group group = new Group(parent, SWT.NONE);
		group.setText(RULER_GROUP_LABEL);
 
		GridLayout gridLayout = new GridLayout(2, false);
		GridData gridData = new GridData(GridData.FILL_HORIZONTAL);
		gridData.grabExcessHorizontalSpace = true;
		gridData.horizontalSpan = 2;
        
        // Add the fields to the group
		showRulers = new BooleanFieldEditor(
			IPreferenceConstants.PREF_SHOW_RULERS,
			SHOW_RULERS_LABEL, group);
		addField(showRulers);

    	rulerUnits = new ComboFieldEditor(
    		IPreferenceConstants.PREF_RULER_UNITS,
        	RULER_UNITS_LABEL,
			group,
			ComboFieldEditor.INT_TYPE,
			false,
			0,
			0,
			true);
    	addField(rulerUnits);
    	
    	Combo rulerUnitsCombo;
    	rulerUnitsCombo = rulerUnits.getComboControl();
    	rulerUnitsCombo.add(RULER_UNITS_IN_LABEL);
    	rulerUnitsCombo.add(RULER_UNITS_CM_LABEL);
    	rulerUnitsCombo.add(RULER_UNITS_PIXEL_LABEL);
    	
    	rulerUnitsCombo.addSelectionListener( new SelectionListener() {
    		public void widgetDefaultSelected(SelectionEvent e){
    			//do nothing
    			}
    		public void widgetSelected(SelectionEvent e){
    			updateUnits();
    		}
    	});
    	
		group.setLayoutData(gridData);
		group.setLayout(gridLayout);
	}
	
	private void addGridFields( Composite parent ) {
		
		// Create a Group to hold the grid fields
    	Group group = new Group(parent, SWT.NONE);
		group.setText(GRID_GROUP_LABEL);

		GridLayout gridLayout = new GridLayout(2, false);

		GridData gridData = new GridData(GridData.FILL_HORIZONTAL);
		gridData.grabExcessHorizontalSpace = true;
		gridData.horizontalSpan = 2;

		showGrid = new BooleanFieldEditor(
			IPreferenceConstants.PREF_SHOW_GRID,
			SHOW_GRID_LABEL, group);
		addField(showGrid);

		snapToGrid = new BooleanFieldEditor(
			IPreferenceConstants.PREF_SNAP_TO_GRID,
			SNAP_TO_GRID_LABEL, group);
		addField(snapToGrid);
		
		snapToGeometry = new BooleanFieldEditor(
				IPreferenceConstants.PREF_SNAP_TO_GEOMETRY,
				SNAP_TO_GEOMETRY_LABEL, group);
			addField(snapToGeometry);			
		
		addGridSpacing( group );

		group.setLayoutData(gridData);
		group.setLayout(gridLayout);
	}

	private void addGridSpacing( Composite parent ) {
	
		dblGroup = new Composite(parent, SWT.NONE);
		
		GridLayout gridLayout = new GridLayout(2, false);

		GridData gridData = new GridData(GridData.FILL_HORIZONTAL);
		gridData.grabExcessHorizontalSpace = true;
		gridData.horizontalSpan = 2;

		gridSpacing = new DoubleFieldEditor(
			IPreferenceConstants.PREF_GRID_SPACING,
			GRID_SPACING_LABEL_INCHES, dblGroup);
		gridSpacing.setTextLimit(10);
		addField(gridSpacing);
		
		updateUnits();
		
        dblGroup.setLayoutData(gridData);
        dblGroup.setLayout(gridLayout);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.preferences.AbstractPreferencePage#addFields(org.eclipse.swt.widgets.Composite)
	 */
	protected void addFields(Composite parent) {
		addRulerFields( parent );
		addGridFields( parent );
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.preferences.AbstractPreferencePage#initHelp()
	 */
	protected void initHelp() {
		// TODO: Implement to support context help
	}

	/**
	 * Initializes the default preference values for the preferences.
	 * 
	 * @@param IPreferenceStore preferences
	 */
	public static void initDefaults(IPreferenceStore preferenceStore) {
		preferenceStore.setDefault(IPreferenceConstants.PREF_SHOW_RULERS, false);
		String defaultCountry = Locale.getDefault().getCountry();
		if (defaultCountry == null
				|| defaultCountry.equals(Locale.US.getCountry())
				|| defaultCountry.equals(Locale.CANADA.getCountry())) {
			preferenceStore.setDefault(IPreferenceConstants.PREF_RULER_UNITS,
					RulerProvider.UNIT_INCHES);
		} else {
			preferenceStore.setDefault(IPreferenceConstants.PREF_RULER_UNITS,
					RulerProvider.UNIT_CENTIMETERS);
		}
		preferenceStore.setDefault(IPreferenceConstants.PREF_SHOW_GRID, false);
		preferenceStore.setDefault(IPreferenceConstants.PREF_SNAP_TO_GRID, true);
		preferenceStore.setDefault(IPreferenceConstants.PREF_SNAP_TO_GEOMETRY, false);
		preferenceStore.setDefault(IPreferenceConstants.PREF_GRID_SPACING, 0.125);
	}
	
	/**
	 * The NumberFormatter.parse() could return a Long or Double
	 * We are storing all values related to the page setup as doubles
	 * so we call this function when ever we are getting values from
	 * the dialog.
	 * @@param number
	 * @@return
	 */
	private Double forceDouble(Number number) {
		if (!(number instanceof Double))
			return new Double(number.doubleValue());			
		return (Double) number;
	}	

}
@


1.11
log
@[196715] gmf-head carson_li 071116 [RulersGrid] Grid spacing in inches even though page size is centimetres
@
text
@d152 1
d165 1
d343 5
d410 1
@


1.10
log
@[196715] gmf-head carson_li 071116 [RulersGrid] Grid spacing in inches even though page size is centimetres
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003, 2007 IBM Corporation and others.
@


1.9
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003, 2006 IBM Corporation and others.
d17 1
d391 10
a400 1
		preferenceStore.setDefault(IPreferenceConstants.PREF_RULER_UNITS, RulerProvider.UNIT_INCHES);
@


1.8
log
@Bugzilla#141449 gmf_head cmahoney 060517 ACC: Page Setup Dialog has fields that are not properly read by a screen reader
Contributed by: Syed
@
text
@d16 1
d67 10
a76 2
				NumberFormat numberFormatter = NumberFormat.getInstance();				
				Double pageHeight = forceDouble(numberFormatter.parse(text.getText()));
d79 2
a80 1
				if (number >= minValidValue && number <= maxValidValue) {
a88 2
			} catch (ParseException e2) {
				showErrorMessage();
@


1.8.2.1
log
@ [119255] gmf_R1_0_maintenance tmacdoug 060810 Validation of grid spacing is inconsistent
@
text
@a15 1
import java.text.ParsePosition;
d66 2
a67 10
				NumberFormat numberFormatter = NumberFormat.getInstance();
				ParsePosition parsePosition = new ParsePosition(0);
				Number parsedNumber = numberFormatter.parse(text.getText(), parsePosition);
				
				if (parsedNumber == null) {
					showErrorMessage();
					return false;
				}
				
				Double pageHeight = forceDouble(parsedNumber);
d70 1
a70 2
				if (number >= minValidValue && number <= maxValidValue 
						&& parsePosition.getIndex() == text.getText().length()) {
d79 2
@


1.7
log
@[131591] gmf_head tmacdoug 060324 ClassCastExcception after selecting Rulers and Grid preference page
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
a32 1
import org.eclipse.swt.widgets.Label;
d143 4
a146 1
	private String GRID_SPACING_LABEL = DiagramUIMessages.GridRulerPreferencePage_gridSpacing_label;
d156 1
a156 1
	private Label gridUnits = null;
d232 1
a232 1
				gridUnits.setText(RULER_UNITS_IN_LABEL);
d236 1
a236 1
				gridUnits.setText(RULER_UNITS_CM_LABEL);
d240 1
a240 1
				gridUnits.setText(RULER_UNITS_PIXEL_LABEL);
d246 3
d340 1
a340 1
		Composite group = new Composite(parent, SWT.NONE);
d342 1
a342 1
		GridLayout gridLayout = new GridLayout(3, false);
d346 1
a346 1
		gridData.horizontalSpan = 1;
d350 1
a350 1
			GRID_SPACING_LABEL, group);
a353 7
		GridData gridData2 = new GridData(GridData.FILL_HORIZONTAL);
		gridData2.grabExcessHorizontalSpace = true;
		gridData2.horizontalSpan = 1;
		
		gridUnits = new Label(group, SWT.LEFT);
		gridUnits.setLayoutData(gridData2);
		
d356 2
a357 2
		group.setLayoutData(gridData);
		group.setLayout(gridLayout);
@


1.6
log
@[112794] gmf_head etworkowska 060126 Adopt ICU4J as part of Eclipse 3.2
@
text
@d399 2
a400 2
		if (number instanceof Long)
			return new Double(number.doubleValue());
@


1.5
log
@Bugzilla 119255 gmf_head tmacdoug 051206 - Validation of grid spacing is inconsistent
@
text
@a14 1
import java.text.NumberFormat;
d36 2
@


1.4
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d49 1
a49 1
		private double minValidValue = 00.001;
d51 1
a51 1

d69 1
d126 7
d172 1
a172 2
			// Inches
			case 0:
d175 2
a176 2
			case 1: // cm
				pixelValue = value.doubleValue() * Display.getDefault().getDPI().x / 2.54;
d178 1
a178 1
			case 2: // pixels
d185 1
a185 1
			case 0:
d188 2
a189 2
			case 1:
				returnValue = pixelValue * 2.54 / Display.getDefault().getDPI().x;
d191 1
a191 1
			case 2:
d198 24
d224 1
a224 8
		int units = rulerUnits.getComboControl().getSelectionIndex();
		
		// IF no selection has been made
		if( units == -1 ) {
			// Read the preference store
			units = getPreferenceStore().getInt(IPreferenceConstants.PREF_RULER_UNITS);
			oldUnits = units;
		}
d228 1
a228 1
			case 0: // Inches
d232 1
a232 1
			case 1: // CM
d236 1
a236 1
			case 2: // Pixels
d245 12
@


1.3
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d19 3
a36 4
import org.eclipse.gmf.runtime.common.ui.preferences.AbstractPreferencePage;
import org.eclipse.gmf.runtime.common.ui.preferences.ComboFieldEditor;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;

d125 11
a135 21
	private String RULER_GROUP_LABEL = DiagramResourceManager
	.getI18NString("GriRulerPreferencePage.rulerGroup.label"); //$NON-NLS-1$
	private String SHOW_RULERS_LABEL = DiagramResourceManager
	.getI18NString("GridRulerPreferencePage.showRulers.label"); //$NON-NLS-1$
	private String RULER_UNITS_LABEL = DiagramResourceManager
	.getI18NString("GridRulerPreferencePage.rulerUnits.label"); //$NON-NLS-1$
	private String RULER_UNITS_IN_LABEL = DiagramResourceManager
	.getI18NString("GridRulerPreferencePage.rulerUnits.inch.label"); //$NON-NLS-1$
	private String RULER_UNITS_CM_LABEL = DiagramResourceManager
	.getI18NString("GridRulerPreferencePage.rulerUnits.cm.label"); //$NON-NLS-1$
	private String RULER_UNITS_PIXEL_LABEL = DiagramResourceManager
	.getI18NString("GridRulerPreferencePage.rulerUnits.pixel.label"); //$NON-NLS-1$

	private String GRID_GROUP_LABEL = DiagramResourceManager
	.getI18NString("GridRulerPreferencePage.gridGroup.label"); //$NON-NLS-1$
	private String SHOW_GRID_LABEL = DiagramResourceManager
	.getI18NString("GridRulerPreferencePage.showGrid.label"); //$NON-NLS-1$
	private String SNAP_TO_GRID_LABEL = DiagramResourceManager
	.getI18NString("GridRulerPreferencePage.snapToGrid.label"); //$NON-NLS-1$
	private String GRID_SPACING_LABEL = DiagramResourceManager
	.getI18NString("GridRulerPreferencePage.gridSpacing.label"); //$NON-NLS-1$
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d36 1
a36 2
import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d40 1
a40 1
 * Presentation Ruler & Grid preference page.
d126 1
a126 1
	private String RULER_GROUP_LABEL = PresentationResourceManager
d128 1
a128 1
	private String SHOW_RULERS_LABEL = PresentationResourceManager
d130 1
a130 1
	private String RULER_UNITS_LABEL = PresentationResourceManager
d132 1
a132 1
	private String RULER_UNITS_IN_LABEL = PresentationResourceManager
d134 1
a134 1
	private String RULER_UNITS_CM_LABEL = PresentationResourceManager
d136 1
a136 1
	private String RULER_UNITS_PIXEL_LABEL = PresentationResourceManager
d139 1
a139 1
	private String GRID_GROUP_LABEL = PresentationResourceManager
d141 1
a141 1
	private String SHOW_GRID_LABEL = PresentationResourceManager
d143 1
a143 1
	private String SNAP_TO_GRID_LABEL = PresentationResourceManager
d145 1
a145 1
	private String GRID_SPACING_LABEL = PresentationResourceManager
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 7
/***************************************************************************
 Licensed Materials - Property of IBM
 (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.

 US Government Users Restricted Rights - Use, duplication or disclosure
 restricted by GSA ADP Schedule Contract with IBM Corp.
***************************************************************************/
@

