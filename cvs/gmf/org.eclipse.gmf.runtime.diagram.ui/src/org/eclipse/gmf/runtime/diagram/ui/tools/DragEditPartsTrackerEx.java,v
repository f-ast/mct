head	1.10;
access;
symbols
	v20081023-2107:1.10
	v20081022-1925:1.10
	v20081022-1005:1.10
	v20081020-0700:1.10
	v20080917-1925:1.10
	v20080916-2008:1.10
	v20080911-1728:1.10
	v20080911-1506:1.10
	v20080910-1520:1.10
	v20080910-1510:1.10
	v20080903-1520:1.10
	v20080903-1510:1.10
	v20080813-1510:1.10
	v20080811-1546:1.10
	v20080731-1520:1.10
	v20080725-1738:1.10
	v20080723-2246:1.10
	v20080723-2232:1.10
	v20080723-1700:1.10
	v20080722-1827:1.10
	v20080718-1700:1.10
	v20080718-1731:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080603-1553:1.10
	v20080527-1255:1.10
	v20080527-1151:1.7
	v20080516-1748:1.10
	v20080516-1143:1.10
	v20080512-1200:1.10
	v20080503-1740:1.10
	v20080501-2127:1.7
	v20080501-1739:1.10
	m20080429-1543:1.7
	v20080425-1959:1.10
	v20080417-1610:1.10
	v20080407-2250:1.10
	v20080407-0930:1.10
	v20080404-1111:1.10
	v20080328-1605:1.10
	v20080322-0000:1.10
	v20080222-1200:1.10
	v20080201-2010:1.10
	v20080201-0201:1.7
	v20080118-1129:1.7
	v20080114-2222:1.7
	v20080114-1111:1.10
	v20080107-1111:1.9
	v20071222-1111:1.9
	v20071214-1111:1.9
	v20071130-1111:1.8
	v20071124-0000:1.7
	v20071112-0000:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070518-1300:1.6
	bugzilla111892_group_support:1.6.0.2
	Root_bugzilla111892_group_support:1.6
	v20070504-1000:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070202-0200:1.4.2.2
	v20070119-1200:1.4.2.2
	v20070111-0800:1.4.2.1
	v20070105-1200:1.4.2.1
	v20070103-0300:1.5
	M4_20:1.5
	v20061218-1500:1.4.2.1
	v20061218-1200:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061027-1200:1.4.2.1
	v20061013-1330:1.5
	v20061012-1100:1.4.2.1
	v20060925-1700:1.4.2.1
	v20060919-0800:1.4.2.1
	v20060907-1100:1.4
	M1_20:1.4
	v20060831-1500:1.4
	v20060824-1600:1.4
	v20060817-1500:1.4
	v20060810-1700:1.4
	v20060803-1200:1.4
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.10
date	2008.01.11.15.59.37;	author crevells;	state Exp;
branches;
next	1.9;
commitid	6a2c478792684567;

1.9
date	2007.12.11.15.17.03;	author crevells;	state Exp;
branches;
next	1.8;
commitid	70dc475ea9ed4567;

1.8
date	2007.11.21.17.57.28;	author crevells;	state Exp;
branches;
next	1.7;
commitid	4a12474471874567;

1.7
date	2007.06.18.19.10.08;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	7c604676d8904567;

1.6
date	2007.01.15.19.09.38;	author crevells;	state Exp;
branches
	1.6.2.1;
next	1.5;
commitid	5ad045abd1724567;

1.5
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.15.15.26.01;	author cmahoney;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2006.04.18.15.12.20;	author cmahoney;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.08;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.45;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2007.01.15.19.07.12;	author crevells;	state Exp;
branches;
next	;
commitid	4ff045abd0df4567;

1.6.2.1
date	2007.05.18.17.36.44;	author crevells;	state Exp;
branches;
next	;
commitid	1899464de42a4567;


desc
@@


1.10
log
@[111901] gmf_head crevells 080111 [KeyboardBindings] Ability to move shapes using cursors keys. (by default)
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.tools;

import java.util.Iterator;
import java.util.List;

import org.eclipse.draw2d.FigureCanvas;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.draw2d.Viewport;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.SharedCursors;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.requests.ChangeBoundsRequest;
import org.eclipse.gef.tools.DragEditPartsTracker;
import org.eclipse.gef.tools.ToolUtilities;
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.SnapToHelperUtil;
import org.eclipse.gmf.runtime.diagram.ui.requests.DuplicateRequest;
import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.widgets.Control;

/**
 * A dervied DragEditPartsTRacker that sends REQ_DRAG instead of REQ_ORPHAN
 * and REQ_DROP instead of REQ_ADD
 * 
 * @@author melaasar
 */
public class DragEditPartsTrackerEx extends DragEditPartsTracker {

    /**
	 * @@param sourceEditPart
	 */
	public DragEditPartsTrackerEx(EditPart sourceEditPart) {
		super(sourceEditPart);
	}

	/**
	 * @@see org.eclipse.gef.tools.AbstractTool#getCommand()
	 */
	protected Command getCommand() {
		if (!isMove()) {
			CompoundCommand command = new CompoundCommand();
			addSourceCommands(false, command); 
			if (getTargetEditPart()!=null){
				command.add(getTargetEditPart().getCommand(getTargetRequest()));
				if (command.canExecute())
					return command;
			} 
			
			
		}
		CompoundCommand command = new CompoundCommand();
		addSourceCommands(true, command);
		return command;
	}

	/**
	 * Collects the move/drag commands from the operation set
	 * @@param isMove
	 * @@param command
	 */
	protected void addSourceCommands(boolean isMove, CompoundCommand command) {
        Request request = getTargetRequest();

        if (isCloneActive()) {

            // do not use operation set in this case as connections will get
            // filtered out
            List editparts = ToolUtilities
                .getSelectionWithoutDependants(getCurrentViewer());

            DuplicateRequest duplicateRequest = new DuplicateRequest();
            duplicateRequest.setEditParts(editparts);
            duplicateRequest.setExtendedData(request.getExtendedData());
            if (request instanceof ChangeBoundsRequest) {
                Point delta = ((ChangeBoundsRequest) request).getMoveDelta();
                MapModeUtil.getMapMode(
                    ((IGraphicalEditPart) getTargetEditPart()).getFigure())
                    .DPtoLP(delta);

                duplicateRequest.setOffset(delta);
            }
            command.add(getTargetEditPart().getCommand(duplicateRequest));
        } else {
            request.setType(isMove ? REQ_MOVE
                : RequestConstants.REQ_DRAG);
            Iterator iter = getOperationSet().iterator();
            while (iter.hasNext()) {
                EditPart editPart = (EditPart) iter.next();
                command.add(editPart.getCommand(request));
            }
        }

        request.setType(RequestConstants.REQ_DROP);
    }

	/**
	 * @@see org.eclipse.gef.tools.AbstractTool#getCommandName()
	 */
	protected String getCommandName() {
		if (!isMove())
			return RequestConstants.REQ_DROP;
		return super.getCommandName();
	}

	/**
	 * If the source is not in the operation set, it is not a move
	 * @@see org.eclipse.gef.tool s.DragEditPartsTracker#isMove()
	 */
	protected boolean isMove() {		
		for (int i = 0 ; i < getOperationSet().size(); i++){
			if (getOperationSet().get(i).equals(getSourceEditPart())){
				return super.isMove();
			}
			//additional case for GroupEditPart, check the children
			//this is for snap to geometry			
			if (getOperationSet().get(i) instanceof GroupEditPart){
				GroupEditPart currPart = (GroupEditPart)getOperationSet().get(i);
				for (int j = 0 ; j < currPart.getChildren().size() ; j++){
					if (currPart.getChildren().get(j).equals(getSourceEditPart())){
						return super.isMove();
					}
				}
			}
		}
		return false;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.tools.AbstractTool#executeCurrentCommand()
	 */
	protected void executeCurrentCommand() {
		super.executeCurrentCommand();
		if (isActive()) {
			if (getOperationSet().size() > 0) {
				if (getOperationSet().get(0) instanceof IGraphicalEditPart) {
					IGraphicalEditPart editpart = (IGraphicalEditPart) getOperationSet()
						.get(0);
					if ((editpart.getFigure() == null)
						|| (editpart.getFigure().getParent() == null)
						|| (editpart.getFigure().getParent().getLayoutManager() == null))
						return;
					editpart.getFigure().getParent().getLayoutManager().layout(
						editpart.getFigure().getParent());
					reveal(editpart);
				}
			}
		}
	}
	
	/**
	 * @@param editpart
	 */
	protected void reveal(EditPart editpart){
		editpart.getViewer().reveal(editpart);
	}
   
    protected boolean handleDragInProgress() {
        boolean returnValue = super.handleDragInProgress();
        if (isInState(STATE_DRAG_IN_PROGRESS)
            || isInState(STATE_ACCESSIBLE_DRAG_IN_PROGRESS)) {
            
            // Expose the diagram as the user scrolls in the area handled by the
            // autoexpose helper.
            updateAutoexposeHelper();
        }
        return returnValue;
    }

    protected Cursor calculateCursor() {
        if (isInState(STATE_DRAG_IN_PROGRESS)
            || isInState(STATE_ACCESSIBLE_DRAG_IN_PROGRESS)) {

            // Give some feedback so the user knows the area where autoscrolling
            // will occur.
            if (getAutoexposeHelper() != null) {
                return SharedCursors.HAND;
            } else {

                // Give some feedback so the user knows that they can't drag
                // outside the viewport.
                Control control = getCurrentViewer().getControl();
                if (control instanceof FigureCanvas) {
                    Viewport viewport = ((FigureCanvas) control).getViewport();
                    Rectangle rect = Rectangle.SINGLETON;
                    viewport.getClientArea(rect);
                    viewport.translateToParent(rect);
                    viewport.translateToAbsolute(rect);

                    if (!rect.contains(getLocation())) {
                        return getDisabledCursor();
                    }
                }
            }
        }
        return super.calculateCursor();
    }
    
    protected boolean handleButtonDown(int button) {

        // If the group is selected, and the user clicks on a shape, defer the
        // selection of the shape until the mouse button is released instead of
        // selecting on mouse down because if the user does a drag they will
        // move the entire group and not the shape.
        if (button == 1
            && getSourceEditPart().getParent() instanceof GroupEditPart
            && getSourceEditPart().getParent().getSelected() != EditPart.SELECTED_NONE) {

            stateTransition(STATE_INITIAL, STATE_DRAG);
            return true;
        }

        return super.handleButtonDown(button);
    }

    protected boolean handleDoubleClick(int button) {
        // If the user double-clicks a shape in a group and the shape is not
        // selected, select the shape.
        if (getSourceEditPart().getParent() instanceof GroupEditPart
            && getSourceEditPart().getSelected() == EditPart.SELECTED_NONE) {
            performSelection();
            return true;
        } else {
            return super.handleDoubleClick(button);
        }
    }

    protected void performSelection() {
        super.performSelection();

        // If the new selection is a child of a group, we want to deselect the group.
        if (getSourceEditPart().getParent() instanceof GroupEditPart
            && getSourceEditPart().getParent().getSelected() != EditPart.SELECTED_NONE) {
            getCurrentViewer().deselect(getSourceEditPart().getParent());
        }
    }
    
    /**
     * Overridden to add extended data to the request to restrict snapping to
     * specific directions based on the move delta.
     */
    protected void snapPoint(ChangeBoundsRequest request) {
        Point moveDelta = request.getMoveDelta();
        if (getState() == STATE_ACCESSIBLE_DRAG_IN_PROGRESS) {
            int restrictedDirection = 0;

            if (moveDelta.x > 0) {
                restrictedDirection = restrictedDirection
                    | PositionConstants.EAST;
            } else if (moveDelta.x < 0) {
                restrictedDirection = restrictedDirection
                    | PositionConstants.WEST;
            }

            if (moveDelta.y > 0) {
                restrictedDirection = restrictedDirection
                    | PositionConstants.SOUTH;
            } else if (moveDelta.y < 0) {
                restrictedDirection = restrictedDirection
                    | PositionConstants.NORTH;
            }

            request.getExtendedData().put(SnapToHelperUtil.RESTRICTED_DIRECTIONS,
                restrictedDirection);
        }

        super.snapPoint(request);
    }
    
    protected boolean handleKeyDown(KeyEvent e) {
        if (acceptArrowKey(e)) {
            if (isInState(STATE_INITIAL)) {
                IGraphicalEditPart ep = (IGraphicalEditPart) getSourceEditPart();
                if (ep != null) {
                    Point location = ep.getFigure().getBounds().getCenter();
                    ep.getFigure().translateToAbsolute(location);
                    placeMouseInViewer(location);       
                    getCurrentInput().setMouseLocation(location.x, location.y);
                }
            }
        }
        return super.handleKeyDown(e);
    }

}
@


1.9
log
@[188974] gmf_head crevells 071211 [RulersGrid] GEF alignment feature missing
Contributed by:  Carson Li
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
d18 1
d20 1
d33 1
d37 1
d257 47
@


1.8
log
@[111892] gmf_head crevells 071121 Group/Ungroup support
@
text
@d123 1
a123 1
	 * @@see org.eclipse.gef.tools.DragEditPartsTracker#isMove()
d125 17
a141 4
	protected boolean isMove() {
		if (!getOperationSet().contains(getSourceEditPart()))
			return false;
		return super.isMove();
a143 1
	
@


1.7
log
@gmf_head ahunter 070618 Update Copyright for files changed in 2007 for GMF 2.0
@
text
@d29 1
d201 14
d216 24
@


1.6
log
@[168203] gmf_head crevells 070115 DragEditPartsTrackerEx should scroll when user drags shape outside viewport
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.6.2.1
log
@[111892] gmf_head crevells 070518 First milestone of group/ungroup support (painting issues when grouping shapes with border items)
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
a28 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
a199 14
    
    protected boolean handleButtonDown(int button) {

        // If the group is selected, and the user clicks on a shape, defer the
        // selection of the shape until the mouse button is released instead of
        // selecting on mouse down because if the user does a drag they will
        // move the entire group and not the shape.
        if (button == 1
            && getSourceEditPart().getParent() instanceof GroupEditPart
            && getSourceEditPart().getParent().getSelected() != EditPart.SELECTED_NONE) {

            stateTransition(STATE_INITIAL, STATE_DRAG);
            return true;
        }
a200 2
        return super.handleButtonDown(button);
    }
a201 21
    protected boolean handleDoubleClick(int button) {
        // If the user double-clicks a shape in a group and the shape is not
        // selected, select the shape.
        if (getSourceEditPart().getParent() instanceof GroupEditPart
            && getSourceEditPart().getSelected() == EditPart.SELECTED_NONE) {
            performSelection();
            return true;
        } else {
            return super.handleDoubleClick(button);
        }
    }

    protected void performSelection() {
        super.performSelection();

        // If the new selection is a child of a group, we want to deselect the group.
        if (getSourceEditPart().getParent() instanceof GroupEditPart
            && getSourceEditPart().getParent().getSelected() != EditPart.SELECTED_NONE) {
            getCurrentViewer().deselect(getSourceEditPart().getParent());
        }
    }
@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d17 2
d20 1
d23 1
d33 2
d44 1
a44 1
	/**
d159 42
@


1.4
log
@Bugzilla#140166 gmf_head cmahoney 060515 Move necessary client accessed internal classes into public API
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
@


1.4.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.4.2.2
log
@[168203] gmf_R1_0_maintenance crevells 070115 DragEditPartsTrackerEx should scroll when user drags shape outside viewport
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
a16 2
import org.eclipse.draw2d.FigureCanvas;
import org.eclipse.draw2d.Viewport;
a17 1
import org.eclipse.draw2d.geometry.Rectangle;
a19 1
import org.eclipse.gef.SharedCursors;
a28 2
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.widgets.Control;
d38 1
a38 1
    /**
a152 42
   
    protected boolean handleDragInProgress() {
        boolean returnValue = super.handleDragInProgress();
        if (isInState(STATE_DRAG_IN_PROGRESS)
            || isInState(STATE_ACCESSIBLE_DRAG_IN_PROGRESS)) {
            
            // Expose the diagram as the user scrolls in the area handled by the
            // autoexpose helper.
            updateAutoexposeHelper();
        }
        return returnValue;
    }

    protected Cursor calculateCursor() {
        if (isInState(STATE_DRAG_IN_PROGRESS)
            || isInState(STATE_ACCESSIBLE_DRAG_IN_PROGRESS)) {

            // Give some feedback so the user knows the area where autoscrolling
            // will occur.
            if (getAutoexposeHelper() != null) {
                return SharedCursors.HAND;
            } else {

                // Give some feedback so the user knows that they can't drag
                // outside the viewport.
                Control control = getCurrentViewer().getControl();
                if (control instanceof FigureCanvas) {
                    Viewport viewport = ((FigureCanvas) control).getViewport();
                    Rectangle rect = Rectangle.SINGLETON;
                    viewport.getClientArea(rect);
                    viewport.translateToParent(rect);
                    viewport.translateToAbsolute(rect);

                    if (!rect.contains(getLocation())) {
                        return getDisabledCursor();
                    }
                }
            }
        }
        return super.calculateCursor();
    }

@


1.3
log
@Bugzilla#124034 gmf_head cmahoney 060418 DragEditPartsTrackerEx should create DuplicateRequests since suberclass creates Clone requests
@
text
@d26 1
a26 1
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.DuplicateRequest;
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d15 1
d17 1
d22 1
d24 1
a24 1

d26 1
d28 1
d71 33
a103 9
		Iterator iter = getOperationSet().iterator();
		Request request = getTargetRequest();
		request.setType(isMove ? REQ_MOVE : RequestConstants.REQ_DRAG);
		while (iter.hasNext()) {
			EditPart editPart = (EditPart) iter.next();
			command.add(editPart.getCommand(request));
		}
		request.setType(RequestConstants.REQ_DROP);
	}
d153 1
a153 1

@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

