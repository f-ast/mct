head	1.3;
access;
symbols
	v20081022-1925:1.3
	v20080917-1925:1.3
	v20080911-1728:1.3
	v20080910-1520:1.3
	v20080903-1520:1.3
	v20080731-1520:1.3
	v20080723-2246:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.04.18.20.51.25;	author cmahoney;	state dead;
branches;
next	1.2;

1.2
date	2005.12.08.22.53.39;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.23.30.16;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Bugzilla#109422 gmf_head cmahoney 060418 Remove deprecated API
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;


/**
 * connection end point edit policy
 * @@author mmostafa
 * @@deprecated use {@@link org.eclipse.gef.editpolicies.ConnectionEndpointEditPolicy}. Will be removed on January 17th / 2006.
 */
public class ConnectionEndpointEditPolicy
	extends org.eclipse.gef.editpolicies.ConnectionEndpointEditPolicy {

	public ConnectionEndpointEditPolicy() {
		super();
		// TODO Auto-generated constructor stub
	}


}
@


1.2
log
@bugzilla 120017 gmf-head sshaw 051208 Redundant classes for managing connection retargetting
@
text
@@


1.1
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a13 15
import java.util.ArrayList;
import java.util.List;

import org.eclipse.draw2d.ConnectionAnchor;
import org.eclipse.draw2d.PolylineConnection;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.gef.AccessibleHandleProvider;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.editpolicies.FeedbackHelper;
import org.eclipse.gef.requests.ReconnectRequest;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.figures.ConnectionEndHandle;
import org.eclipse.gmf.runtime.diagram.ui.figures.ConnectionStartHandle;
d18 1
d23 3
a25 52
	private ConnectionAnchor originalAnchor;

	private FeedbackHelper feedbackHelper;
	
	protected void addSelectionHandles() {
		super.addSelectionHandles();
	}

	/**
	 * gets the connection figure
	 * @@return <code>PolylineConnection</code>
	 */
	protected PolylineConnection getConnectionFigure() {
		return (PolylineConnection) ((GraphicalEditPart) getHost()).getFigure();
	}

	protected void removeSelectionHandles() {
		super.removeSelectionHandles();
	}
	
	protected void eraseConnectionMoveFeedback(ReconnectRequest request){
		if (originalAnchor == null)
			return;
		if (request.isMovingStartAnchor())
			getConnection().setSourceAnchor(originalAnchor);
		else
			getConnection().setTargetAnchor(originalAnchor);
		originalAnchor = null;
		feedbackHelper = null;
	}

	protected void showConnectionMoveFeedback(ReconnectRequest request) {
		ShapeNodeEditPart node = null;
		if (request.getTarget() instanceof ShapeNodeEditPart)
			node = (ShapeNodeEditPart) request.getTarget();
		if (originalAnchor == null) {
			if (request.isMovingStartAnchor())
				originalAnchor = getConnection().getSourceAnchor();
			else
				originalAnchor = getConnection().getTargetAnchor();
		}
		ConnectionAnchor anchor = null;
		if (node != null) {
			if (request.isMovingStartAnchor())
				anchor = node.getSourceConnectionAnchor(request);
			else
				anchor = node.getTargetConnectionAnchor(request);
		}
		FeedbackHelper helper = getFeedbackHelper(request);
		Point p = new Point(request.getLocation());
		((IGraphicalEditPart)getHost()).getFigure().translateToAbsolute(p);
		helper.update(anchor, p);
a27 19
	protected FeedbackHelper getFeedbackHelper(ReconnectRequest request) {
		if (feedbackHelper == null) {
			feedbackHelper = new FeedbackHelper();
			feedbackHelper.setConnection(getConnection());
			feedbackHelper.setMovingStartAnchor(request.isMovingStartAnchor());
		}
		return feedbackHelper;
	}
	
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.editpolicies.SelectionHandlesEditPolicy#createSelectionHandles()
	 */
	protected List createSelectionHandles() {
		List list = new ArrayList();
		list.add(new ConnectionEndHandle((ConnectionEditPart)getHost()));
		list.add(new ConnectionStartHandle((ConnectionEditPart)getHost()));
		return list;
	}
a28 15
	/**
	 * Override for AccessibleHandleProvider when deactivated
	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=69316
	 * 
	 * @@see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
	 */
	public Object getAdapter(Class key) {
		if (key == AccessibleHandleProvider.class)
			//handles == null when deactivated
			if (handles == null) {
				return null;
			}
		return super.getAdapter(key);
	}
	
@

