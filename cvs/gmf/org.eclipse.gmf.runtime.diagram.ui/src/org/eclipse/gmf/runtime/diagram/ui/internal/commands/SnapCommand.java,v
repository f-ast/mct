head	1.4;
access;
symbols
	v20081023-2107:1.4
	v20081022-1925:1.4
	v20081022-1005:1.4
	v20081020-0700:1.4
	v20080917-1925:1.4
	v20080916-2008:1.4
	v20080911-1728:1.4
	v20080911-1506:1.4
	v20080910-1520:1.4
	v20080910-1510:1.4
	v20080903-1520:1.4
	v20080903-1510:1.4
	v20080813-1510:1.4
	v20080811-1546:1.4
	v20080731-1520:1.4
	v20080725-1738:1.4
	v20080723-2246:1.4
	v20080723-2232:1.4
	v20080723-1700:1.4
	v20080722-1827:1.4
	v20080718-1700:1.4
	v20080718-1731:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080610-1132:1.4
	v20080603-1553:1.4
	v20080527-1255:1.4
	v20080516-1748:1.4
	v20080516-1143:1.4
	v20080512-1200:1.4
	v20080503-1740:1.4
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080417-1610:1.4
	v20080407-2250:1.4
	v20080407-0930:1.4
	v20080404-1111:1.4
	v20080328-1605:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20080201-2010:1.4
	v20080114-1111:1.3
	v20080107-1111:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.1;
locks; strict;
comment	@# @;


1.4
date	2008.01.14.20.43.04;	author crevells;	state Exp;
branches;
next	1.3;
commitid	49e8478bc9584567;

1.3
date	2008.01.08.21.01.50;	author crevells;	state Exp;
branches;
next	1.2;
commitid	5b854783e4bd4567;

1.2
date	2007.12.10.21.51.20;	author ahunter;	state Exp;
branches;
next	1.1;
commitid	7088475db4d84567;

1.1
date	2007.11.20.20.26.16;	author crevells;	state Exp;
branches;
next	;
commitid	14c8474342e74567;


desc
@@


1.4
log
@[151214] gmf_head crevells 080114 [Layout] Arrange All should be a projection (P*P = P)
@
text
@/******************************************************************************
 * Copyright (c) 2007, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.commands;

import java.util.Iterator;
import java.util.List;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.PrecisionPoint;
import org.eclipse.draw2d.geometry.PrecisionRectangle;

import org.eclipse.emf.transaction.TransactionalEditingDomain;

import org.eclipse.gef.SnapToHelper;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.handles.HandleBounds;
import org.eclipse.gef.requests.ChangeBoundsRequest;
import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.gmf.runtime.notation.Bounds;
import org.eclipse.gmf.runtime.notation.LayoutConstraint;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;

/**
 * This command is used to snap edit parts on a diagram, where the edit parts are
 * passed in as the parameter.
 * 
 * @@author carson_li
 */
public class SnapCommand extends AbstractTransactionalCommand {

	/** the edit parts requested to be snapped to grid */
	protected List editparts;

	/**
	 * Constructor for <code>SnapCommand</code>.
	 * 
	 * @@param editingDomain
	 *            the editing domain through which model changes are made
	 * @@param editparts
	 *            the list containing the edit parts that need to be snapped
	 */
	public SnapCommand(TransactionalEditingDomain editingDomain, List editparts) {

		super(editingDomain, DiagramUIMessages.SnapToGrid_textLabel, null);
		this.editparts = editparts;

	}

	/*
	 * @@see org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand#getAffectedFiles()
	 */
	public List getAffectedFiles() {
		if (editparts != null) {
			// we only need the first child since all the edit parts being
			// snapped originate from the same diagram
			IGraphicalEditPart parent = (IGraphicalEditPart) editparts.get(0);
			View view = (View) parent.getParent().getModel();
			return getWorkspaceFiles(view);
		}
		return super.getAffectedFiles();
	}

	/**
	 * Executes a snap command for all the desired edit parts.
	 * 
	 */
	protected CommandResult doExecuteWithResult(
			IProgressMonitor progressMonitor, IAdaptable info)
			throws ExecutionException {

		CompoundCommand snapCommand = new CompoundCommand();

		for (Iterator iter = editparts.iterator(); iter.hasNext();) {
			IGraphicalEditPart newEditPart = (IGraphicalEditPart) iter.next();
			IMapMode mapMode = ((DiagramRootEditPart) newEditPart.getRoot()).getMapMode();

			if (newEditPart.getModel() instanceof Node) {

				LayoutConstraint constraint = ((Node) newEditPart.getModel()).getLayoutConstraint();
				if (constraint instanceof Bounds) {
					
					Bounds bounds = (Bounds) constraint;
					ChangeBoundsRequest request = new ChangeBoundsRequest(RequestConstants.REQ_MOVE);
					request.setEditParts(newEditPart);

					// translate all coordinates to device units as a standard if necessary
					// this is done since moveDelta uses device units
					
					PrecisionPoint moveDelta = new PrecisionPoint(bounds.getX()
                        - newEditPart.getFigure().getBounds().x, bounds.getY()
                        - newEditPart.getFigure().getBounds().y);
					mapMode.LPtoDP(moveDelta);

					// In the case that the figure bounds and model's layout constant are the same,
					// xDiff and yDiff will evaluate to zero, but snapToHelper will still locate the closest
					// NorthWest snap locations. In the case that they're not, we assume the figure's bounds
					// have not been updated, so the moveDelta value will simulate a drag to the new location
					// In both situations we base the resulting snap location off the figure's bounds

					// snapToGrid logic taken from DragEditPartsTracker.java
					request.getExtendedData().clear();
					request.setMoveDelta(moveDelta);

					PrecisionRectangle figureBounds = null;
					IFigure figure = newEditPart.getFigure();
					if (figure instanceof HandleBounds) {
						figureBounds = new PrecisionRectangle(
								((HandleBounds) figure).getHandleBounds());
					} else {
						figureBounds = new PrecisionRectangle(figure.getBounds());
					}

					figure.translateToAbsolute(figureBounds);
				
					SnapToHelper snapToHelper = (SnapToHelper) newEditPart.getAdapter(SnapToHelper.class);
					PrecisionRectangle baseRect = new PrecisionRectangle(figureBounds);
					baseRect.translate(moveDelta);

					if (snapToHelper != null) {
						snapToHelper.snapPoint(request,
								PositionConstants.HORIZONTAL | PositionConstants.VERTICAL,
								new PrecisionRectangle[] { baseRect },	moveDelta);
						request.setMoveDelta(moveDelta);
					}

					snapCommand.add(newEditPart.getCommand(request));
				}
			}
		}

		if (snapCommand != null && snapCommand.canExecute()) {
			snapCommand.execute();
		}
		return CommandResult.newOKCommandResult();
	}
}
@


1.3
log
@[214653] gmf_head crevells 080108 SnapCommand casts to GraphicalEditPart
@
text
@d109 4
a112 4
					int xDiff = mapMode.LPtoDP(bounds.getX())
							- mapMode.LPtoDP(newEditPart.getFigure().getBounds().x);
					int yDiff = mapMode.LPtoDP(bounds.getY())
							- mapMode.LPtoDP(newEditPart.getFigure().getBounds().y);
a120 1
					Point moveDelta = new Point(xDiff, yDiff);
a138 1
					PrecisionPoint preciseDelta = new PrecisionPoint(moveDelta);
d142 2
a143 2
								new PrecisionRectangle[] { baseRect },	preciseDelta);
						request.setMoveDelta(preciseDelta);
@


1.2
log
@[194282] gmf_head carson_li 071210 [RulersGrid] Useability: diagram arrange all should snap to grid if snap to grid is on
@
text
@d2 1
a2 1
 * Copyright (c) 2007 IBM Corporation and others.
a33 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;
d94 1
a94 1
			IGraphicalEditPart newEditPart = (GraphicalEditPart) iter.next();
@


1.1
log
@[119252] gmf_head crevells 071120 [RulersGrid] Useability: diagram arrange all should snap to grid if snap to grid is on
Contributed by:  Carson Li
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
d48 1
a48 1
 * @@author cli
d70 3
@

