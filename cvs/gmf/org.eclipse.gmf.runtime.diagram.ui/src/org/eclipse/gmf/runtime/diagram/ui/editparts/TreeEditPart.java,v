head	1.5;
access;
symbols
	v20081023-2107:1.5
	v20081022-1925:1.5
	v20081022-1005:1.5
	v20081020-0700:1.5
	v20080917-1925:1.5
	v20080916-2008:1.5
	v20080911-1728:1.5
	v20080911-1506:1.5
	v20080910-1520:1.5
	v20080910-1510:1.5
	v20080903-1520:1.5
	v20080903-1510:1.5
	v20080813-1510:1.5
	v20080811-1546:1.5
	v20080731-1520:1.5
	v20080725-1738:1.5
	v20080723-2246:1.5
	v20080723-2232:1.5
	v20080723-1700:1.5
	v20080722-1827:1.5
	v20080718-1700:1.5
	v20080718-1731:1.5
	v20080716-1600:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080610-1132:1.5
	v20080603-1553:1.5
	v20080527-1255:1.5
	v20080527-1151:1.4.2.1
	v20080516-1748:1.5
	v20080516-1143:1.5
	v20080512-1200:1.5
	v20080503-1740:1.5
	v20080501-2127:1.4.2.1
	v20080501-1739:1.5
	m20080429-1543:1.4.2.1
	v20080425-1959:1.5
	v20080417-1610:1.5
	v20080407-2250:1.5
	v20080407-0930:1.5
	v20080404-1111:1.5
	v20080328-1605:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20080201-2010:1.5
	v20080201-0201:1.4.2.1
	v20080118-1129:1.4.2.1
	v20080114-2222:1.4.2.1
	v20080114-1111:1.5
	v20080107-1111:1.5
	v20071222-1111:1.5
	v20071214-1111:1.5
	v20071130-1111:1.5
	v20071124-0000:1.4.2.1
	v20071112-0000:1.5
	v20071108-0000:1.5
	v20071003-0000:1.5
	v20070915-0000:1.4.2.1
	v20070903-0000:1.5
	v20070809-0000:1.4.2.1
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070518-1300:1.3
	bugzilla111892_group_support:1.3.0.2
	Root_bugzilla111892_group_support:1.3
	v20070504-1000:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070202-0200:1.1.2.1
	v20070119-1200:1.1.2.1
	v20070111-0800:1.1.2.1
	v20070105-1200:1.1.2.1
	v20070103-0300:1.3
	M4_20:1.3
	v20061218-1500:1.1.2.1
	v20061218-1200:1.3
	v20061214-0000:1.3
	M3_20:1.2
	v20061117-0800:1.2
	v20061027-1200:1.1.2.1
	v20061013-1330:1.2
	v20061012-1100:1.1.2.1
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	R1_0_maintenance:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2007.07.31.18.27.52;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	67ca46af7f284567;

1.4
date	2007.06.15.18.07.25;	author crevells;	state Exp;
branches
	1.4.2.1;
next	1.3;
commitid	34eb4672d55d4567;

1.3
date	2006.11.29.19.20.10;	author crevells;	state Exp;
branches;
next	1.2;
commitid	4d7f456ddd6a4567;

1.2
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.14.19.50.46;	author mmostafa;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.09.14.19.50.46;	author mmostafa;	state Exp;
branches;
next	;

1.4.2.1
date	2007.07.31.18.33.09;	author aboyko;	state Exp;
branches;
next	;
commitid	6d6346af80654567;


desc
@@


1.5
log
@[193813] gmf_head aboyko 070730 [Cleanup] java.lang.ClassCastException: org.eclipse.gmf.runtime.notation.impl.DiagramStyleImpl incompatible with org.eclipse.gmf.runtime.notation.ShapeStyle
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.domain.IEditingDomainProvider;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gef.editparts.AbstractTreeEditPart;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.ui.services.action.filter.ActionFilterService;
import org.eclipse.gmf.runtime.common.ui.services.icon.IconOptions;
import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserService;
import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.notation.DescriptionStyle;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.Style;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.IActionFilter;

import com.ibm.icu.util.StringTokenizer;

/**
 * @@author melaasar, mmostafa
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.ui.*
 */
public class TreeEditPart
    extends AbstractTreeEditPart
    implements NotificationListener, IEditingDomainProvider {

    /** the element parser */
    private IParser parser;

    /** the element parser */
    private IAdaptable referenceAdapter;
    
    private EObject[] objectListenningTo = new EObject[2];

    /**
     * Cache the editing domain after it is retrieved.
     */
    private TransactionalEditingDomain editingDomain;

    /**
     * Constructor
     * @@param model
     */
    public TreeEditPart(Object model) {
        super(model);
        
        EObject reference = ((View)model).getElement();
        if (reference == null) {
        
            this.referenceAdapter = new EObjectAdapter((EObject)model);
        } else {
            this.referenceAdapter =
                new EObjectAdapter(reference);
        }
    }

    /**
     * @@see org.eclipse.gef.EditPart#activate()
     */
    public void activate() {
        if (isActive())
            return;
        super.activate();
        View view = (View)getModel();
        EObject semanticElement = getSemanticElement();
        getDiagramEventBroker().addNotificationListener(view,this);
        getDiagramEventBroker().addNotificationListener(semanticElement,this);
        objectListenningTo[0] = view ;
        objectListenningTo[1] = semanticElement;
    }

    /**
     * @@see org.eclipse.gef.EditPart#deactivate()
     */
    public void deactivate() {
        if (!isActive())
            return;
        for (int index = 0; index < objectListenningTo.length; index++) {
            getDiagramEventBroker().removeNotificationListener( objectListenningTo[index],this);
            objectListenningTo[index] = null;
        }
        super.deactivate();
    }

    /** gets the model as a <code>View</code>
     * @@return View
     */
    protected View getNotationView() {
        if (getModel() instanceof View)
            return (View)getModel();
        return null;
    }

    /**
     * Return the editpart's underlying semantic element.
     * @@return semantic element
     */
    protected EObject getSemanticElement() {
        return ViewUtil.resolveSemanticElement((View)getModel());
    }

    /**
     * @@see org.eclipse.gef.editparts.AbstractTreeEditPart#getImage()
     */
    protected Image getImage() {
        if (referenceAdapter == null){
            return null;
        }
        IconOptions options = new IconOptions();
        options.set(IconOptions.GET_STEREOTYPE_IMAGE_FOR_ELEMENT);
        return IconService.getInstance().getIcon(referenceAdapter, options.intValue());
    }

    /**
     * @@see org.eclipse.gef.editparts.AbstractTreeEditPart#getText()
     */
    protected String getText() {
        if (getParser() != null)
            return getParser().getPrintString(referenceAdapter,
                ParserOptions.NONE.intValue());
        EObject eObject = ((View) getModel()).getElement();
        if (eObject != null) {
            String name = EMFCoreUtil.getName(eObject);
            if (name != null) {
                return name;
            }
        }

        DescriptionStyle descriptionStyle = (DescriptionStyle) ((View) getModel())
            .getStyle(NotationPackage.eINSTANCE.getDescriptionStyle());

        if (descriptionStyle != null) {
            String text = descriptionStyle.getDescription();
            StringTokenizer tokenizer = new StringTokenizer(text, "\n\r\f"); //$NON-NLS-1$
            if (tokenizer.hasMoreTokens()) {
                text = tokenizer.nextToken();
            }
            if (text.length() > 50) {
                text = text.substring(0, 50);
                text = text.concat(StringStatics.ELLIPSIS);
            }
            return text;
        }

        return ""; //$NON-NLS-1$
    }

    /**
     * Method getParser.
     * @@return IParser
     */
    private IParser getParser() {
        if (parser == null) {
            if (referenceAdapter != null && referenceAdapter.getAdapter(EObject.class) != null)
                parser = ParserService.getInstance().getParser(referenceAdapter);
        }
        return parser;
    }

    /**
     * Handles the passed property changed event only if the editpart's view is not deleted
     * @@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
     */
    public final void notifyChanged(Notification event) {
        // Receiving an event while a view is deleted could only happen during "undo" of view creation,
        // However, event handlers should be robust by using the event's value and not trying to read 
        // the value from the model
        if ((((View)getModel()).eResource() != null))
            handleNotificationEvent(event);
    }

    /**
     * Handles the supplied notification event. 
     * @@param event
     */
    protected void handleNotificationEvent( Notification notification ) {
        Object notifier = notification.getNotifier();
        if (NotationPackage.Literals.VIEW__ELEMENT==notification.getFeature()) {
            reactivateSemanticElement();
        } else if (notification.getNotifier() == getSemanticElement() ||
                   notifier instanceof Style){
            refreshVisuals();
        }
    }
    
    /**
     * deactivates, activates then refreshes the editpart
     */
    protected void reactivateSemanticElement() {
        deactivate();
        activate();
        refresh();
    }

    /**
     * @@see org.eclipse.core.runtime.IAdaptable#getAdapter(Class)
     */
    public Object getAdapter(Class key) {
        // Adapt to IActionFilter
        if (key == IActionFilter.class) {
            return ActionFilterService.getInstance();
        }
        
        if (View.class.isAssignableFrom(key)) {
            Object _model = getModel();
            if (key.isInstance(_model))
                return _model;
            else
                return null;
        }
        
        Object model = getModel();
        
        if (model != null && model instanceof View &&
            EObject.class.isAssignableFrom(key)) {
            // Adapt to semantic element
            EObject semanticObject = ((View)model).getElement();
            if (semanticObject!= null && !semanticObject.eIsProxy() && key.isInstance(semanticObject)){
                return semanticObject;
            }
        }
        return super.getAdapter(key);
    }
    
    /**
     * Derives my editing domain from my diagram element. Subclasses may
     * override.
     */
    public EditingDomain getEditingDomain() {
        if (editingDomain == null) {
            editingDomain = TransactionUtil.getEditingDomain(getModel());
        }
        return editingDomain;
    }
    
    /**
     * Gets the diagram event broker from the editing domain.
     * 
     * @@return the diagram event broker
     */
    protected DiagramEventBroker getDiagramEventBroker() {
        EditingDomain theEditingDomain = getEditingDomain();
        if (theEditingDomain instanceof TransactionalEditingDomain) {
            return DiagramEventBroker
                .getInstance((TransactionalEditingDomain) theEditingDomain);
        }
        return null;
    }
}
@


1.4
log
@[185339] gmf_head crevells 070615 Some shapes on a diagram are not read by the screen reader
@
text
@d34 1
a35 1
import org.eclipse.gmf.runtime.notation.ShapeStyle;
d153 1
a153 1
        ShapeStyle shapeStyle = (ShapeStyle) ((View) getModel())
d156 2
a157 2
        if (shapeStyle != null) {
            String text = shapeStyle.getDescription();
@


1.4.2.1
log
@[193813] gmf_R2_maintenance aboyko 070730 [Cleanup] java.lang.ClassCastException: org.eclipse.gmf.runtime.notation.impl.DiagramStyleImpl incompatible with org.eclipse.gmf.runtime.notation.ShapeStyle
@
text
@a33 1
import org.eclipse.gmf.runtime.notation.DescriptionStyle;
d35 1
d153 1
a153 1
        DescriptionStyle descriptionStyle = (DescriptionStyle) ((View) getModel())
d156 2
a157 2
        if (descriptionStyle != null) {
            String text = descriptionStyle.getDescription();
@


1.3
log
@[152706] gmf_head crevells 061129 "Ctrl+D" key stroke should be prohibited in outline view
Contributed by: Alex Boyko
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d22 1
d35 1
d41 2
d146 21
a166 2
        if (eObject == null) {
            return ""; //$NON-NLS-1$
d168 2
a169 2
        String name = EMFCoreUtil.getName(eObject);
        return name == null ? "" : name; //$NON-NLS-1$
@


1.2
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@a20 1
import org.eclipse.gef.EditPolicy;
a30 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ComponentEditPolicy;
a104 7
    /**
     * @@see org.eclipse.gef.editparts.AbstractEditPart#createEditPolicies()
     */
    protected void createEditPolicies() {
        installEditPolicy(EditPolicy.COMPONENT_ROLE, new ComponentEditPolicy());
    }

@


1.1
log
@file TreeEditPart.java was initially added on branch R1_0_maintenance.
@
text
@d1 259
@


1.1.2.1
log
@[153305] draw2d_maintenace aboyko 060914  compartment items not shown in outline view (tree)
@
text
@a0 259
/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.domain.IEditingDomainProvider;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.editparts.AbstractTreeEditPart;
import org.eclipse.gmf.runtime.common.ui.services.action.filter.ActionFilterService;
import org.eclipse.gmf.runtime.common.ui.services.icon.IconOptions;
import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserService;
import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ComponentEditPolicy;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.Style;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.IActionFilter;

/**
 * @@author melaasar, mmostafa
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.ui.*
 */
public class TreeEditPart
    extends AbstractTreeEditPart
    implements NotificationListener, IEditingDomainProvider {

    /** the element parser */
    private IParser parser;

    /** the element parser */
    private IAdaptable referenceAdapter;
    
    private EObject[] objectListenningTo = new EObject[2];

    /**
     * Cache the editing domain after it is retrieved.
     */
    private TransactionalEditingDomain editingDomain;

    /**
     * Constructor
     * @@param model
     */
    public TreeEditPart(Object model) {
        super(model);
        
        EObject reference = ((View)model).getElement();
        if (reference == null) {
        
            this.referenceAdapter = new EObjectAdapter((EObject)model);
        } else {
            this.referenceAdapter =
                new EObjectAdapter(reference);
        }
    }

    /**
     * @@see org.eclipse.gef.EditPart#activate()
     */
    public void activate() {
        if (isActive())
            return;
        super.activate();
        View view = (View)getModel();
        EObject semanticElement = getSemanticElement();
        getDiagramEventBroker().addNotificationListener(view,this);
        getDiagramEventBroker().addNotificationListener(semanticElement,this);
        objectListenningTo[0] = view ;
        objectListenningTo[1] = semanticElement;
    }

    /**
     * @@see org.eclipse.gef.EditPart#deactivate()
     */
    public void deactivate() {
        if (!isActive())
            return;
        for (int index = 0; index < objectListenningTo.length; index++) {
            getDiagramEventBroker().removeNotificationListener( objectListenningTo[index],this);
            objectListenningTo[index] = null;
        }
        super.deactivate();
    }

    /**
     * @@see org.eclipse.gef.editparts.AbstractEditPart#createEditPolicies()
     */
    protected void createEditPolicies() {
        installEditPolicy(EditPolicy.COMPONENT_ROLE, new ComponentEditPolicy());
    }

    /** gets the model as a <code>View</code>
     * @@return View
     */
    protected View getNotationView() {
        if (getModel() instanceof View)
            return (View)getModel();
        return null;
    }

    /**
     * Return the editpart's underlying semantic element.
     * @@return semantic element
     */
    protected EObject getSemanticElement() {
        return ViewUtil.resolveSemanticElement((View)getModel());
    }

    /**
     * @@see org.eclipse.gef.editparts.AbstractTreeEditPart#getImage()
     */
    protected Image getImage() {
        if (referenceAdapter == null){
            return null;
        }
        IconOptions options = new IconOptions();
        options.set(IconOptions.GET_STEREOTYPE_IMAGE_FOR_ELEMENT);
        return IconService.getInstance().getIcon(referenceAdapter, options.intValue());
    }

    /**
     * @@see org.eclipse.gef.editparts.AbstractTreeEditPart#getText()
     */
    protected String getText() {
        if (getParser() != null)
            return getParser().getPrintString(referenceAdapter,
                ParserOptions.NONE.intValue());
        EObject eObject = ((View) getModel()).getElement();
        if (eObject == null) {
            return ""; //$NON-NLS-1$
        }
        String name = EMFCoreUtil.getName(eObject);
        return name == null ? "" : name; //$NON-NLS-1$
    }

    /**
     * Method getParser.
     * @@return IParser
     */
    private IParser getParser() {
        if (parser == null) {
            if (referenceAdapter != null && referenceAdapter.getAdapter(EObject.class) != null)
                parser = ParserService.getInstance().getParser(referenceAdapter);
        }
        return parser;
    }

    /**
     * Handles the passed property changed event only if the editpart's view is not deleted
     * @@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
     */
    public final void notifyChanged(Notification event) {
        // Receiving an event while a view is deleted could only happen during "undo" of view creation,
        // However, event handlers should be robust by using the event's value and not trying to read 
        // the value from the model
        if ((((View)getModel()).eResource() != null))
            handleNotificationEvent(event);
    }

    /**
     * Handles the supplied notification event. 
     * @@param event
     */
    protected void handleNotificationEvent( Notification notification ) {
        Object notifier = notification.getNotifier();
        if (NotationPackage.Literals.VIEW__ELEMENT==notification.getFeature()) {
            reactivateSemanticElement();
        } else if (notification.getNotifier() == getSemanticElement() ||
                   notifier instanceof Style){
            refreshVisuals();
        }
    }
    
    /**
     * deactivates, activates then refreshes the editpart
     */
    protected void reactivateSemanticElement() {
        deactivate();
        activate();
        refresh();
    }

    /**
     * @@see org.eclipse.core.runtime.IAdaptable#getAdapter(Class)
     */
    public Object getAdapter(Class key) {
        // Adapt to IActionFilter
        if (key == IActionFilter.class) {
            return ActionFilterService.getInstance();
        }
        
        if (View.class.isAssignableFrom(key)) {
            Object _model = getModel();
            if (key.isInstance(_model))
                return _model;
            else
                return null;
        }
        
        Object model = getModel();
        
        if (model != null && model instanceof View &&
            EObject.class.isAssignableFrom(key)) {
            // Adapt to semantic element
            EObject semanticObject = ((View)model).getElement();
            if (semanticObject!= null && !semanticObject.eIsProxy() && key.isInstance(semanticObject)){
                return semanticObject;
            }
        }
        return super.getAdapter(key);
    }
    
    /**
     * Derives my editing domain from my diagram element. Subclasses may
     * override.
     */
    public EditingDomain getEditingDomain() {
        if (editingDomain == null) {
            editingDomain = TransactionUtil.getEditingDomain(getModel());
        }
        return editingDomain;
    }
    
    /**
     * Gets the diagram event broker from the editing domain.
     * 
     * @@return the diagram event broker
     */
    protected DiagramEventBroker getDiagramEventBroker() {
        EditingDomain theEditingDomain = getEditingDomain();
        if (theEditingDomain instanceof TransactionalEditingDomain) {
            return DiagramEventBroker
                .getInstance((TransactionalEditingDomain) theEditingDomain);
        }
        return null;
    }
}
@

