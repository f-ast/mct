head	1.4;
access;
symbols
	v20081023-2107:1.3.8.1
	v20081022-1925:1.4
	v20081022-1005:1.3.8.1
	v20081020-0700:1.4
	v20080917-1925:1.4
	v20080916-2008:1.3.8.1
	v20080911-1728:1.4
	v20080911-1506:1.3.8.1
	v20080910-1520:1.4
	v20080910-1510:1.3.8.1
	v20080903-1520:1.4
	v20080903-1510:1.3.8.1
	v20080813-1510:1.3.8.1
	v20080811-1546:1.4
	v20080731-1520:1.4
	v20080725-1738:1.3.8.1
	v20080723-2246:1.4
	v20080723-2232:1.3.8.1
	v20080723-1700:1.3.8.1
	v20080722-1827:1.4
	v20080718-1700:1.3.8.1
	v20080718-1731:1.4
	v20080716-1600:1.3.8.1
	v20080716-1642:1.4
	R2_1_maintenance:1.3.0.8
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080603-1553:1.3
	v20080527-1255:1.3
	v20080527-1151:1.3
	v20080516-1748:1.3
	v20080516-1143:1.3
	v20080512-1200:1.3
	v20080503-1740:1.3
	v20080501-2127:1.3
	v20080501-1739:1.3
	m20080429-1543:1.3
	v20080425-1959:1.3
	v20080417-1610:1.3
	v20080407-2250:1.3
	v20080407-0930:1.3
	v20080404-1111:1.3
	v20080328-1605:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080201-2010:1.3
	v20080201-0201:1.3
	v20080118-1129:1.3
	v20080114-2222:1.3
	v20080114-1111:1.3
	v20080107-1111:1.3
	v20071222-1111:1.3
	v20071214-1111:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071112-0000:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.6
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070518-1300:1.3
	bugzilla111892_group_support:1.3.0.4
	Root_bugzilla111892_group_support:1.3
	v20070504-1000:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070202-0200:1.3
	v20070119-1200:1.3
	v20070111-0800:1.3
	v20070105-1200:1.3
	v20070103-0300:1.3
	M4_20:1.3
	v20061218-1500:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061027-1200:1.3
	v20061013-1330:1.3
	v20061012-1100:1.3
	v20060925-1700:1.3
	v20060919-0800:1.3
	v20060907-1100:1.3
	M1_20:1.3
	v20060831-1500:1.3
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060810-1700:1.3
	v20060803-1200:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.4
date	2008.06.24.21.08.32;	author aboyko;	state Exp;
branches;
next	1.3;
commitid	a65486162504567;

1.3
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.45;	author sshaw;	state Exp;
branches;
next	;

1.3.8.1
date	2008.06.24.21.10.45;	author aboyko;	state Exp;
branches;
next	;
commitid	ce7486162d54567;


desc
@@


1.4
log
@[237013] gmf_head aboyko 080624 DND on the diagram doesn't work on Linux
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.parts;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.draw2d.Cursors;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.dnd.AbstractTransferDropTargetListener;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.dnd.DND;
import org.eclipse.swt.dnd.DropTargetEvent;
import org.eclipse.swt.dnd.Transfer;

import org.eclipse.gmf.runtime.diagram.ui.requests.DropObjectsRequest;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Performs a drop of one or more semantic elements using a given transfer. The Drop is performed by
 * using a {@@link DropObjectsRequest} to obtain a <code>Command</code> from the targeted
 * <code>EditPart</code>. The target edit part might re-interpret the <code>DropElementsRequest</code>
 * to mean another request. Note that some transfers on different OS's occur at the drop time, hence
 * live feedback cannot be provided for these transfers (i.e. command created). If this is the case then to enable
 * drag and drop on different platforms {@@link #isDataTransfered()} needs to be implemented.
 * <P>
 * This class is <code>abstract</code>. Subclasses are responsible for providing the
 * appropriate <code>Transfer</code> object based on the type of elements that are being dragged.
 *
 * @@author melaasar, aboyko
 */
public abstract class DiagramDropTargetListener
    extends AbstractTransferDropTargetListener {

    /**
     * Constructor for DiagramDropTargetListener.
     * @@param viewer
     */
    public DiagramDropTargetListener(EditPartViewer viewer) {
        super(viewer);
        setEnablementDeterminedByCommand(true);
    }

    /**
     * Constructor for DiagramDropTargetListener.
     * @@param viewer
     * @@param xfer
     */
    public DiagramDropTargetListener(EditPartViewer viewer, Transfer xfer) {
        super(viewer, xfer);
        setEnablementDeterminedByCommand(true);
    }

    /**
     *
     * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#createTargetRequest()
     */
    protected Request createTargetRequest() {
        return  new DropObjectsRequest();
    }

    /**
     * A helper method that casts the target Request to a DropElementsRequest.
     * @@return DropElementsRequest
     */
    protected final DropObjectsRequest getDropObjectsRequest() {
        return ((DropObjectsRequest) getTargetRequest());
    }

    /**
     * gets a list of objects being dropped on the diagram
    * @@return <code>List</code>
     */
    protected abstract List getObjectsBeingDropped();

    /**
     * @@see org.eclipse.swt.dnd.DropTargetListener#dragEnter(org.eclipse.swt.dnd.DropTargetEvent)
     */
    public void dragEnter(DropTargetEvent event) {
        super.dragEnter(event);
        handleDragEnter(); // called to properly initialize the effect
    }

    /**
     * Called whenever the User enters the target. By default, the target Request and
     * target EditPart are updated, and feedback is
     */
    protected void handleDragEnter() {
        handleDragOver();
    }    

    /**
     * The purpose of a template is to be copied. Therefore, the drop operation can't be
     * anything but <code>DND.DROP_COPY</code>.
     * @@see AbstractTransferDropTargetListener#handleDragOperationChanged()
     */
    protected void handleDragOperationChanged() {
        super.handleDragOperationChanged();
        /*
         * The edit policies creating the command for the drop request may modify the
         * required detail field, so it's being set for the event here. However, if the command
         * can't be created due to the fact that data hasn't been transfered yet then the request will
         * contain DND.DROP_NONE required detail that we don't want to set for the event.  
         */
        if (getDropObjectsRequest().getRequiredDetail() != DND.DROP_NONE) {
            getCurrentEvent().detail = getDropObjectsRequest().getRequiredDetail();
        }
    }

    /**
     * The purpose of a template is to be copied. Therefore, the Drop operation is set to
     * <code>DND.DROP_COPY</code> by default.
     * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#handleDragOver()
     */
    protected void handleDragOver() {
        super.handleDragOver();
        /*
         * The edit policies creating the command for the drop request may modify the
         * required detail field, so it's being set for the event here. However, if the command
         * can't be created due to the fact that data hasn't been transfered yet then the request will
         * contain DND.DROP_NONE required detail that we don't want to set for the event.  
         */
        if (getDropObjectsRequest().getRequiredDetail() != DND.DROP_NONE) {
            getCurrentEvent().detail = getDropObjectsRequest().getRequiredDetail();
        }
        getCurrentEvent().feedback = DND.FEEDBACK_SCROLL | DND.FEEDBACK_EXPAND;
    }

    /**
     * Overridden to select the request result if any
     * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#handleDrop()
     */
    protected void handleDrop() {
        getViewer().setCursor(Cursors.WAIT);
        super.handleDrop();
		getViewer().setCursor(null);
        selectAddedViews();
    }

    /**
     * Selects the created views that could result from the drop request if any
     */
    private void selectAddedViews() {
        Object result = getDropObjectsRequest().getResult();
        if (result == null || !(result instanceof Collection))
            return;
        EditPartViewer viewer = getViewer();
        List editParts = new ArrayList();
        Iterator views = ((Collection)result).iterator();

        while (views.hasNext()) {
            Object view = views.next();
            if (view instanceof IAdaptable) {
                EditPart editPart = (EditPart) viewer.getEditPartRegistry().get(((IAdaptable)view).getAdapter(View.class));
                if (editPart != null)
                    editParts.add(editPart);
            }
        }
                
        if (!editParts.isEmpty()) {
            //Force a layout first.
            viewer.getControl().forceFocus();
            getViewer().flush();
            viewer.setSelection(new StructuredSelection(editParts));
        }
    }

    /**
	 * Assumes that the target request is a {@@link DropObjectsRequest}. GEF
	 * wipes out the request in {@@link #isEnabled(DropTargetEvent)} method, we
	 * don't. Hence we just update the necessary fields: <li>the mouse location
	 * <li>the objects being dropped <li>the allowed detail that comes from the
	 * DND event
	 * 
	 * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#
	 * 	updateTargetRequest()
	 */
    protected void updateTargetRequest() {
        DropObjectsRequest request = getDropObjectsRequest();
        request.setLocation(getDropLocation());
        request.setObjects(getObjectsBeingDropped());
        request.setAllowedDetail(getCurrentEvent().operations);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#isEnabled(org.eclipse.swt.dnd.DropTargetEvent)
     */
    public boolean isEnabled(DropTargetEvent event) {
    	/*
    	 * Cache the current event 
    	 */
        setCurrentEvent(event);
        
        /*
         * Update the target request and target editpart
         */
        updateTargetRequest();
        updateTargetEditPart();
        
        if (getTargetEditPart() == null) {
            return false;
        } else if (isEnablementDeterminedByCommand() && isDataTransfered()) {
        	/*
        	 * Check the command only if:
        	 * 1) The data has been transfered from the drag source to the event
        	 * 2) The "ask for command" option is on. (It's "on" by default)
        	 */
            Command command = getCommand();
            return command != null && command.canExecute();
        } else {
        	/*
        	 * Otherwise we should enable the drop. Executable command needs to be created at the drop time anyway.
        	 * Hence, we'll fail the drop there if there is no target editpart or no data transfered. 
        	 */
            return true;
        }
    }

    /**
	 * It is not a common use case to have the transfered data at the drag time,
	 * hence live feedback cannot be provided for all types of DnD. Since the
	 * occurrence of the data transfer at the drag time depends mostly on the
	 * used OS and the the type of data transfer, clients are responsible to
	 * experiment with their DnD and come up with the appropriate implementation
	 * of this method for their specific DnD support. By default the method
	 * returns <code>true</code>, which means that we assume that the data has
	 * been transfered at the start of the drag
	 * 
	 * @@return <code>true</code> if data has been transfered.
	 */
    protected boolean isDataTransfered() {
        return true;
    }

}@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d9 1
a9 1
 *    IBM Corporation - initial API and implementation 
d38 3
a40 1
 * to mean another request.
d44 2
a45 2
 * 
 * @@author melaasar
d48 1
a48 1
	extends AbstractTransferDropTargetListener {
d50 104
a153 16
	/**
	 * Constructor for DiagramDropTargetListener.
	 * @@param viewer
	 */
	public DiagramDropTargetListener(EditPartViewer viewer) {
		super(viewer);
	}

	/**
	 * Constructor for DiagramDropTargetListener.
	 * @@param viewer
	 * @@param xfer
	 */
	public DiagramDropTargetListener(EditPartViewer viewer, Transfer xfer) {
		super(viewer, xfer);
	}
d155 34
a188 1
	/**
d190 2
a191 1
	 * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#createTargetRequest()
d193 52
a244 125
	protected Request createTargetRequest() {
		DropObjectsRequest request =  new DropObjectsRequest();
		request.setObjects(getObjectsBeingDropped());
		request.setAllowedDetail(getCurrentEvent().operations);
		return request;
	}

	/**
	 * A helper method that casts the target Request to a DropElementsRequest.
	 * @@return DropElementsRequest
	 */
	protected final DropObjectsRequest getDropObjectsRequest() {
		return ((DropObjectsRequest) getTargetRequest());
	}

	/**
	 * gets a list of objects being dropped on the diagram
	* @@return <code>List</code>
	 */
	protected abstract List getObjectsBeingDropped();

	/**
	 * @@see org.eclipse.swt.dnd.DropTargetListener#dragEnter(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void dragEnter(DropTargetEvent event) {
		super.dragEnter(event);
		handleDragEnter(); // called to properly initialize the effect
	}

	/**
	 * Called whenever the User enters the target. By default, the target Request and
	 * target EditPart are updated, and feedback is 
	 */
	protected void handleDragEnter() {
		handleDragOver();
	}	

	/**
	 * The purpose of a template is to be copied. Therefore, the drop operation can't be
	 * anything but <code>DND.DROP_COPY</code>.
	 * @@see AbstractTransferDropTargetListener#handleDragOperationChanged()
	 */
	protected void handleDragOperationChanged() {
		super.handleDragOperationChanged();
		getCurrentEvent().detail = getDropObjectsRequest().getRequiredDetail();
	}

	/**
	 * The purpose of a template is to be copied. Therefore, the Drop operation is set to
	 * <code>DND.DROP_COPY</code> by default.
	 * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#handleDragOver()
	 */
	protected void handleDragOver() {
		super.handleDragOver();
		getCurrentEvent().detail = getDropObjectsRequest().getRequiredDetail();
		getCurrentEvent().feedback = DND.FEEDBACK_SCROLL | DND.FEEDBACK_EXPAND;
	}

	/**
	 * Overridden to select the request result if any
	 * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#handleDrop()
	 */
	protected void handleDrop() {
		getViewer().setCursor(Cursors.WAIT);
		super.handleDrop();
		getViewer().setCursor(null);
		selectAddedViews();
	}

	/**
	 * Selects the created views that could result from the drop request if any
	 */
	private void selectAddedViews() {
		Object result = getDropObjectsRequest().getResult();
		if (result == null || !(result instanceof Collection))
			return;
		EditPartViewer viewer = getViewer();
		List editParts = new ArrayList();
		Iterator views = ((Collection)result).iterator();

		while (views.hasNext()) {
			Object view = views.next();
			if (view instanceof IAdaptable) {
				EditPart editPart = (EditPart) viewer.getEditPartRegistry().get(((IAdaptable)view).getAdapter(View.class));
				if (editPart != null)
					editParts.add(editPart);
			}
		}
				
		if (!editParts.isEmpty()) {
			//Force a layout first.
			viewer.getControl().forceFocus();
			getViewer().flush();
			viewer.setSelection(new StructuredSelection(editParts));
		}
	}

	/**
	 * Assumes that the target request is a {@@link DropObjectsRequest}. 
	 */
	protected void updateTargetRequest() {
		DropObjectsRequest request = getDropObjectsRequest();
		request.setLocation(getDropLocation());
	}

	/**
	 * Make sure the target can produce a command
	 */
	public boolean isEnabled(DropTargetEvent event) {
		if (super.isEnabled(event)){
			boolean result = calculateTargetEditPart() != null;
			return result;
		}
		return false;
	}

	/**
	 * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#updateTargetEditPart()
	 */
	protected void updateTargetEditPart() {
		setTargetEditPart(calculateTargetEditPart());
	}

	/**
	 * @@return an edit part that can produce an executable command for the target request
d246 3
a248 18
	private EditPart calculateTargetEditPart() {
		updateTargetRequest();
		EditPart ep = getViewer()
			.findObjectAtExcluding(
				getDropLocation(),
				getExclusionSet(),
				new EditPartViewer.Conditional() {
					public boolean evaluate(EditPart editpart) {
						Command command = editpart.getCommand(getTargetRequest());
						return command != null && command.canExecute();
					}
				});
		if (ep != null) {
			Command command = ep.getCommand(getTargetRequest());
			return (command != null && command.canExecute())? ep : null;
		}
		return ep;
	}
d250 1
a250 1
}
@


1.3.8.1
log
@[237013] gmf_R2_1_maintenance aboyko 080624 DND on the diagram doesn't work on Linux
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2008 IBM Corporation and others.
d9 1
a9 1
 *    IBM Corporation - initial API and implementation
d38 1
a38 3
 * to mean another request. Note that some transfers on different OS's occur at the drop time, hence
 * live feedback cannot be provided for these transfers (i.e. command created). If this is the case then to enable
 * drag and drop on different platforms {@@link #isDataTransfered()} needs to be implemented.
d42 2
a43 2
 *
 * @@author melaasar, aboyko
d46 43
a88 1
    extends AbstractTransferDropTargetListener {
d90 44
a133 101
    /**
     * Constructor for DiagramDropTargetListener.
     * @@param viewer
     */
    public DiagramDropTargetListener(EditPartViewer viewer) {
        super(viewer);
        setEnablementDeterminedByCommand(true);
    }

    /**
     * Constructor for DiagramDropTargetListener.
     * @@param viewer
     * @@param xfer
     */
    public DiagramDropTargetListener(EditPartViewer viewer, Transfer xfer) {
        super(viewer, xfer);
        setEnablementDeterminedByCommand(true);
    }

    /**
     *
     * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#createTargetRequest()
     */
    protected Request createTargetRequest() {
        return  new DropObjectsRequest();
    }

    /**
     * A helper method that casts the target Request to a DropElementsRequest.
     * @@return DropElementsRequest
     */
    protected final DropObjectsRequest getDropObjectsRequest() {
        return ((DropObjectsRequest) getTargetRequest());
    }

    /**
     * gets a list of objects being dropped on the diagram
    * @@return <code>List</code>
     */
    protected abstract List getObjectsBeingDropped();

    /**
     * @@see org.eclipse.swt.dnd.DropTargetListener#dragEnter(org.eclipse.swt.dnd.DropTargetEvent)
     */
    public void dragEnter(DropTargetEvent event) {
        super.dragEnter(event);
        handleDragEnter(); // called to properly initialize the effect
    }

    /**
     * Called whenever the User enters the target. By default, the target Request and
     * target EditPart are updated, and feedback is
     */
    protected void handleDragEnter() {
        handleDragOver();
    }    

    /**
     * The purpose of a template is to be copied. Therefore, the drop operation can't be
     * anything but <code>DND.DROP_COPY</code>.
     * @@see AbstractTransferDropTargetListener#handleDragOperationChanged()
     */
    protected void handleDragOperationChanged() {
        super.handleDragOperationChanged();
        /*
         * The edit policies creating the command for the drop request may modify the
         * required detail field, so it's being set for the event here. However, if the command
         * can't be created due to the fact that data hasn't been transfered yet then the request will
         * contain DND.DROP_NONE required detail that we don't want to set for the event.  
         */
        if (getDropObjectsRequest().getRequiredDetail() != DND.DROP_NONE) {
            getCurrentEvent().detail = getDropObjectsRequest().getRequiredDetail();
        }
    }

    /**
     * The purpose of a template is to be copied. Therefore, the Drop operation is set to
     * <code>DND.DROP_COPY</code> by default.
     * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#handleDragOver()
     */
    protected void handleDragOver() {
        super.handleDragOver();
        /*
         * The edit policies creating the command for the drop request may modify the
         * required detail field, so it's being set for the event here. However, if the command
         * can't be created due to the fact that data hasn't been transfered yet then the request will
         * contain DND.DROP_NONE required detail that we don't want to set for the event.  
         */
        if (getDropObjectsRequest().getRequiredDetail() != DND.DROP_NONE) {
            getCurrentEvent().detail = getDropObjectsRequest().getRequiredDetail();
        }
        getCurrentEvent().feedback = DND.FEEDBACK_SCROLL | DND.FEEDBACK_EXPAND;
    }

    /**
     * Overridden to select the request result if any
     * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#handleDrop()
     */
    protected void handleDrop() {
        getViewer().setCursor(Cursors.WAIT);
        super.handleDrop();
d135 38
a172 2
        selectAddedViews();
    }
d174 13
a186 37
    /**
     * Selects the created views that could result from the drop request if any
     */
    private void selectAddedViews() {
        Object result = getDropObjectsRequest().getResult();
        if (result == null || !(result instanceof Collection))
            return;
        EditPartViewer viewer = getViewer();
        List editParts = new ArrayList();
        Iterator views = ((Collection)result).iterator();

        while (views.hasNext()) {
            Object view = views.next();
            if (view instanceof IAdaptable) {
                EditPart editPart = (EditPart) viewer.getEditPartRegistry().get(((IAdaptable)view).getAdapter(View.class));
                if (editPart != null)
                    editParts.add(editPart);
            }
        }
                
        if (!editParts.isEmpty()) {
            //Force a layout first.
            viewer.getControl().forceFocus();
            getViewer().flush();
            viewer.setSelection(new StructuredSelection(editParts));
        }
    }

    /**
	 * Assumes that the target request is a {@@link DropObjectsRequest}. GEF
	 * wipes out the request in {@@link #isEnabled(DropTargetEvent)} method, we
	 * don't. Hence we just update the necessary fields: <li>the mouse location
	 * <li>the objects being dropped <li>the allowed detail that comes from the
	 * DND event
	 * 
	 * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#
	 * 	updateTargetRequest()
d188 6
a193 52
    protected void updateTargetRequest() {
        DropObjectsRequest request = getDropObjectsRequest();
        request.setLocation(getDropLocation());
        request.setObjects(getObjectsBeingDropped());
        request.setAllowedDetail(getCurrentEvent().operations);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.gef.dnd.AbstractTransferDropTargetListener#isEnabled(org.eclipse.swt.dnd.DropTargetEvent)
     */
    public boolean isEnabled(DropTargetEvent event) {
    	/*
    	 * Cache the current event 
    	 */
        setCurrentEvent(event);
        
        /*
         * Update the target request and target editpart
         */
        updateTargetRequest();
        updateTargetEditPart();
        
        if (getTargetEditPart() == null) {
            return false;
        } else if (isEnablementDeterminedByCommand() && isDataTransfered()) {
        	/*
        	 * Check the command only if:
        	 * 1) The data has been transfered from the drag source to the event
        	 * 2) The "ask for command" option is on. (It's "on" by default)
        	 */
            Command command = getCommand();
            return command != null && command.canExecute();
        } else {
        	/*
        	 * Otherwise we should enable the drop. Executable command needs to be created at the drop time anyway.
        	 * Hence, we'll fail the drop there if there is no target editpart or no data transfered. 
        	 */
            return true;
        }
    }

    /**
	 * It is not a common use case to have the transfered data at the drag time,
	 * hence live feedback cannot be provided for all types of DnD. Since the
	 * occurrence of the data transfer at the drag time depends mostly on the
	 * used OS and the the type of data transfer, clients are responsible to
	 * experiment with their DnD and come up with the appropriate implementation
	 * of this method for their specific DnD support. By default the method
	 * returns <code>true</code>, which means that we assume that the data has
	 * been transfered at the start of the drag
	 * 
	 * @@return <code>true</code> if data has been transfered.
d195 18
a212 3
    protected boolean isDataTransfered() {
        return true;
    }
d214 1
a214 1
}@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d30 1
a30 1
import com.ibm.xtools.notation.View;
@

