head	1.14;
access;
symbols
	v20081023-2107:1.14
	v20081022-1925:1.14
	v20081022-1005:1.14
	v20081020-0700:1.14
	v20080917-1925:1.14
	v20080916-2008:1.14
	v20080911-1728:1.14
	v20080911-1506:1.14
	v20080910-1520:1.14
	v20080910-1510:1.14
	v20080903-1520:1.14
	v20080903-1510:1.14
	v20080813-1510:1.14
	v20080811-1546:1.14
	v20080731-1520:1.14
	v20080725-1738:1.14
	v20080723-2246:1.14
	v20080723-2232:1.14
	v20080723-1700:1.14
	v20080722-1827:1.14
	v20080718-1700:1.14
	v20080718-1731:1.14
	v20080716-1600:1.14
	v20080716-1642:1.14
	R2_1_maintenance:1.14.0.2
	Root_R2_1_maintenance:1.14
	R2_1_0:1.14
	v20080610-1132:1.14
	v20080603-1553:1.14
	v20080527-1255:1.14
	v20080527-1151:1.13
	v20080516-1748:1.14
	v20080516-1143:1.14
	v20080512-1200:1.14
	v20080503-1740:1.14
	v20080501-2127:1.13
	v20080501-1739:1.14
	m20080429-1543:1.13
	v20080425-1959:1.14
	v20080417-1610:1.14
	v20080407-2250:1.14
	v20080407-0930:1.14
	v20080404-1111:1.14
	v20080328-1605:1.14
	v20080322-0000:1.14
	v20080222-1200:1.14
	v20080201-2010:1.14
	v20080201-0201:1.13
	v20080118-1129:1.13
	v20080114-2222:1.13
	v20080114-1111:1.14
	v20080107-1111:1.14
	v20071222-1111:1.14
	v20071214-1111:1.14
	v20071130-1111:1.14
	v20071124-0000:1.13
	v20071112-0000:1.14
	v20071108-0000:1.14
	v20071003-0000:1.13
	v20070915-0000:1.13
	v20070903-0000:1.13
	v20070809-0000:1.13
	R2_0_maintenance:1.13.0.4
	R2_0:1.13
	R4_20:1.13
	v20070621-0000:1.13
	RC3_20:1.13
	v20070614-1400:1.13
	v20070608-1300:1.13
	v20070605-1400:1.13
	v20070601-1400:1.13
	v20070525-1500:1.13
	v20070518-1300:1.13
	bugzilla111892_group_support:1.13.0.2
	Root_bugzilla111892_group_support:1.13
	v20070504-1000:1.13
	v20070420-1000:1.13
	v20070413-1300:1.13
	v20070330-1300:1.13
	v20060330-1300:1.13
	v20070322-1100:1.13
	v20060316-0600:1.13
	v20070221-1500:1.13
	v20070208-1800:1.13
	v20070202-0200:1.12.2.1
	v20070119-1200:1.12.2.1
	v20070111-0800:1.12.2.1
	v20070105-1200:1.12.2.1
	v20070103-0300:1.13
	M4_20:1.13
	v20061218-1500:1.12.2.1
	v20061218-1200:1.13
	v20061214-0000:1.13
	M3_20:1.13
	v20061117-0800:1.13
	v20061027-1200:1.12.2.1
	v20061013-1330:1.13
	v20061012-1100:1.12.2.1
	v20060925-1700:1.12.2.1
	v20060919-0800:1.12.2.1
	v20060907-1100:1.12
	M1_20:1.12
	v20060831-1500:1.12
	v20060824-1600:1.12
	v20060817-1500:1.12
	v20060810-1700:1.12
	v20060803-1200:1.12
	v20060728-0500:1.12
	v20060721-1130:1.12
	v20060713-1700:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20060627-1200:1.12
	v20060616-1400:1.12
	v20060616-1200:1.12
	v20060609-1400:1.12
	v20060531-1730:1.12
	v20060530-1930:1.12
	v20060526-1200:1.12
	v20060519-0800:1.12
	v20060512-1000:1.12
	I20060512-1000:1.12
	I20060505-1400:1.12
	I20060428-1300:1.12
	I20060424-0500:1.12
	I20060424-0300:1.12
	M6_10:1.12
	I20060407-1200:1.12
	I20060331-1000:1.12
	I20060324-0300:1.12
	I20060317-1300:1.12
	I20060317-1200:1.12
	I20060316-1300:1.12
	I20060309-1300:1.12
	M5_10:1.12
	S20060303-1600:1.12
	I20060227-1730:1.11
	I20060216-1945:1.11
	I20060210-1715:1.11
	I20060209-1815:1.11
	I20060203-0830:1.11
	I20060202-1415:1.11
	I20060129-1145:1.11
	I20060127-0900:1.11
	I20060120-1530:1.11
	I20060113-1700:1.11
	M4_10:1.11
	I20060107-1100:1.11
	I20060105-1630:1.11
	I20051230-1230:1.11
	I20051223-1100:1.11
	I20051217-0925:1.11
	I20051208-2000:1.10
	I20051201-1800:1.10
	I20051124-2000:1.9
	M3_10:1.8
	I20051118-1245:1.8
	I20051111-1800:1.8
	I20051106-0900:1.8
	v20051030:1.7;
locks; strict;
comment	@# @;


1.14
date	2007.10.16.14.11.54;	author crevells;	state Exp;
branches;
next	1.13;
commitid	2b604714c6a84567;

1.13
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.28.02.30.51;	author cmahoney;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2005.12.12.16.49.28;	author sshaw;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.25.19.38.12;	author cmahoney;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.21.16.12.29;	author cmahoney;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.7;

1.7
date	2005.09.23.18.37.25;	author sshaw;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.12.15.48.52;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.08.18.58.41;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.36;	author sshaw;	state Exp;
branches;
next	;

1.12.2.1
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.14
log
@[162932] gmf_head crevells 071016 [NoteTextLabel] WrapLabel should use Gef's text layout
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.HashMap;
import java.util.Iterator;

import org.eclipse.draw2d.Connection;
import org.eclipse.draw2d.ConnectionLocator;
import org.eclipse.draw2d.Cursors;
import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.PointList;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.transaction.RunnableWithResult;
import org.eclipse.gef.AccessibleEditPart;
import org.eclipse.gef.DragTracker;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.Request;
import org.eclipse.gef.editparts.AbstractConnectionEditPart;
import org.eclipse.gef.editparts.AbstractEditPart;
import org.eclipse.gef.editparts.AbstractGraphicalEditPart;
import org.eclipse.gef.editpolicies.ResizableEditPolicy;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableLabelEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.VisibilityComponentEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.figures.LabelLocator;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.LabelSnapBackEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.internal.figures.ResizableLabelLocator;
import org.eclipse.gmf.runtime.diagram.ui.internal.util.LabelViewConstants;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
import org.eclipse.gmf.runtime.diagram.ui.label.ILabelDelegate;
import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.accessibility.AccessibleEvent;
import org.eclipse.ui.views.properties.IPropertySource;

/**
 * Controller for all label that deals with interactions bewteen
 * the label figure the underline editpart
 * 
 * @@author jcorchis
 */
public class LabelEditPart extends TopGraphicEditPart {
		
	private String semanticHint = null;	
	
	/** 
	 * Map which maintains the default offsets for labels.
	 * Each plugin which overrides LabelEditPart and wants to have snap back action
	 * support must provide put an entry into this map.  The entry consists of the view's
	 * creation hint (key) and a <code>Point</code> (value) which constains the label's default
	 * offset.
	 */
	private static HashMap snapBackMap = new HashMap();

	/**
	 * Registers the default snap back position for this label that is retrievable from
	 * the editpolicy that creates the command to move the label back to it's original position.
	 * Subclasses of <code>LabelEditPart</code> should call this to register their labels default
	 * position.
	 * 
	 * @@param propertyName <code>String</code> that is usually the property identifier for the label or
	 * it can be any unique identifier the label subclass desires.
	 * @@param offset <code>Point</code> that is the offset Point position from the keypoint.
	 */
	public static void registerSnapBackPosition(String propertyName, Point offset) {
		snapBackMap.put(propertyName, offset);
	}
	
	/**
	 * Retrieves the default snap back position for this label that was registered using using
	 * the {@@link LabelEditPart#registerSnapBackPosition(String, Point)} method.
	 * 
	 * @@param propertyName <code>String</code> that is usually the property identifier for the label or
	 * it can be any unique identifier the label subclass desires.
	 * @@return offset <code>Point</code> that is the offset Point position from the keypoint.
	 */
	public static Point getSnapBackPosition(String propertyName) {
		return (Point)snapBackMap.get(propertyName);
	}

	/**
	 * constructor 
	 * @@param view this edit part's view
	 */
	public LabelEditPart(View view) {
		super(view);
	}

	protected IFigure createFigure() {
		IFigure label = new Figure();
		label.setCursor(Cursors.ARROW);
		label.setLayoutManager(new ConstrainedToolbarLayout());
		return label;
	}
	
	/**
	 * Returns the model's semantic hint.  This is used to calculate the reference
	 * point for the label's figure.
	 * @@return the semantic type
	 */
	protected String getSemanticType() {
		if (semanticHint == null) {
			try {
				semanticHint = ((String) getEditingDomain().runExclusive(
					new RunnableWithResult.Impl() {

							public void run() {
								setResult(((View) getModel()).getType());
							}
						}));
			} catch (InterruptedException e) {
				Trace.catching(DiagramUIPlugin.getInstance(),
					DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
					"getSemanticType", e); //$NON-NLS-1$
				Log.error(DiagramUIPlugin.getInstance(),
					DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
					"getSemanticType", e); //$NON-NLS-1$
			}

		}
		return semanticHint;
	}


	public void refresh() {
		super.refresh();
		refreshBounds();
	}
	
	/**
	 * Updates the locator based on the changes to the offset. 
	 */
	public void refreshBounds() {
		// try to handle both of resizable and nonresizable labels
		if (isResizable()){
			handleResizableRefreshBounds();
		} else {
			handleNonResizableRefreshBoundS();
		}
	}

	/**
	 * handles non resizable lable refresh bounds
	 */
	private void handleNonResizableRefreshBoundS() {
		int dx = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getLocation_X()))
			.intValue();
		int dy = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getLocation_Y()))
			.intValue();
		Point offset = new Point(dx, dy);
		if (getParent() instanceof AbstractConnectionEditPart) {
			((AbstractGraphicalEditPart) getParent()).setLayoutConstraint(this,
				getFigure(), new LabelLocator(
					((AbstractConnectionEditPart) getParent())
						.getConnectionFigure(), offset, getKeyPoint()));
		} else {
			getFigure().getParent().setConstraint( getFigure(),  new LabelLocator(
				getFigure().getParent(),
					offset, getKeyPoint()));
		}
		
	}

	/**
	 * handles resizable lable refresh bounds
	 */
	private void handleResizableRefreshBounds() {
		int dx = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getLocation_X()))
			.intValue();
		int dy = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getLocation_Y()))
			.intValue();
		int width = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getSize_Width()))
			.intValue();
		int height = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getSize_Height()))
			.intValue();
		Rectangle rectangle = new Rectangle(dx,dy,width,height);
		if (getParent() instanceof AbstractConnectionEditPart) {
			((AbstractGraphicalEditPart) getParent()).setLayoutConstraint(this,
				getFigure(), new ResizableLabelLocator(
					((AbstractConnectionEditPart) getParent())
						.getConnectionFigure(), rectangle, getKeyPoint()));
		} else {
			getFigure().getParent().setConstraint( getFigure(),  new ResizableLabelLocator(
				getFigure().getParent(),
				rectangle, getKeyPoint()));
		}
	}

	/**
	 * check if the edit part had a resizable edit policy installed or not 
	 * @@return	true is resizable edit policy is installed otherwise false
	 */
	private boolean isResizable() {
		EditPolicy editPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
		if(editPolicy instanceof ResizableEditPolicy )
			return true;
		return false;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#createDefaultEditPolicies()
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(
			EditPolicy.PRIMARY_DRAG_ROLE,
			new NonResizableLabelEditPolicy());
		installEditPolicy(
			EditPolicy.COMPONENT_ROLE,
			new VisibilityComponentEditPolicy());
		installEditPolicy(
			EditPolicyRoles.SNAP_FEEDBACK_ROLE,
			new LabelSnapBackEditPolicy());
	}

	/** Return a {@@link DragTracker} instance. */
	public DragTracker getDragTracker(Request request) {
		return new DragEditPartsTrackerEx(this) {
			protected boolean isMove() {
				return true;
			}
		};
	}

	/**
	 * Method isSnapBackNeeded.
	 * @@return boolean
	 *
	 * returns false only if the current location of the figure
	 * is not default one
	 */
	public boolean isSnapBackNeeded() {
		return true;
	}


	/**
	 * 
	 * @@see AbstractEditPart#refreshVisuals()
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshForegroundColor();
	}

	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#handlePropertyChangeEvent(java.beans.PropertyChangeEvent)
	 */
	protected void handleNotificationEvent(Notification notification) {
		Object feature = notification.getFeature();
		if (   NotationPackage.eINSTANCE.getLocation_X().equals(feature) 
			|| NotationPackage.eINSTANCE.getLocation_Y().equals(feature) 
			|| NotationPackage.eINSTANCE.getSize_Width().equals(feature)
			|| NotationPackage.eINSTANCE.getSize_Height().equals(feature)) {
			refreshBounds();
		}else if (NotationPackage.eINSTANCE.getLineStyle_LineColor().equals(feature)){
			Integer c = (Integer) notification.getNewValue();
			setForegroundColor(DiagramColorRegistry.getInstance().getColor(c));
		}
		else
			super.handleNotificationEvent(notification);
	}

	protected void addNotationalListeners() {
		super.addNotationalListeners();
		addListenerFilter("PrimaryView", this, getPrimaryView()); //$NON-NLS-1$
	}

	protected void removeNotationalListeners() {
		super.removeNotationalListeners();
		removeListenerFilter("PrimaryView"); //$NON-NLS-1$
	}

	/**
	 * @@see org.eclipse.gef.editparts.AbstractEditPart#getAccessibleEditPart()
	 */
	protected AccessibleEditPart getAccessibleEditPart() {
		if (accessibleEP == null)
			accessibleEP = new AccessibleGraphicalEditPart() {
			public void getName(AccessibleEvent e) {
				e.result = getAccessibleText();
			}
		};
		return accessibleEP;
	}

	/**
	 * Concatenates the text of all the text compartment children of
	 * this editpart to be used as the accessible text.
	 * @@return String the string to be used as the accessible text
	 */
	protected String getAccessibleText() {
		String accessibleString = ""; //$NON-NLS-1$
		for (Iterator iter = getChildren().iterator(); iter.hasNext();) {
            IGraphicalEditPart ep = (IGraphicalEditPart) iter.next();
            ILabelDelegate label = (ILabelDelegate) ep
                .getAdapter(ILabelDelegate.class);
            if (label != null) {
                accessibleString += label.getText() + " "; //$NON-NLS-1$
            }
        }
		return accessibleString;
	}

	/**
	 * Returns an object which is an instance of the given class
	 * associated with this object.  If there are specific class types
	 * that should be delegated to the connection editpart they must
	 * be explicitely handled here (e.g. <code>IPropertySource</code>
	 * is delegated to the connection editpart so that the property pages
	 * reflect the connection when the label is selected).  Otherwise, 
	 * the adapter from this editpart is first retrieved; if this is 
	 * null, then the adapter from the connection editpart is returned.
	 * This means if a client asks for <code>IView</code> the label view
	 * will be returned, but if a client asks for <code>IPrimaryView</code>
	 * the owner view will be returned.
	 * @@see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
	 */
	public Object getAdapter(Class key) {
		if (key == IPropertySource.class) {
			return getParent().getAdapter(key);
		}
		Object adapterFromSuper = super.getAdapter(key);
		if (adapterFromSuper == null) {
			return getParent().getAdapter(key);
		}
		return adapterFromSuper;
	}
	
	/**
	 * Returns a ConnectionLocator.MIDDLE as the key point.
	 * @@return the key point
	 */
	public int getKeyPoint() {
		return ConnectionLocator.MIDDLE;		
	}
	
	/**
	 * Returns a <code>Point</code> located on the parent which is
	 * used by the LabelEditPart to orient itself.
	 * @@return the anchorPoint
	 */
	public Point getReferencePoint() {
		if (getParent() instanceof AbstractConnectionEditPart) {
			switch (getKeyPoint()) {
				case ConnectionLocator.TARGET:
					return calculateRefPoint(LabelViewConstants.SOURCE_LOCATION);
				case ConnectionLocator.SOURCE:
					return calculateRefPoint(LabelViewConstants.TARGET_LOCATION);
				case ConnectionLocator.MIDDLE:
					return calculateRefPoint(LabelViewConstants.MIDDLE_LOCATION);
				default:
					return calculateRefPoint(LabelViewConstants.MIDDLE_LOCATION);
			}
		} 
		
		return ((AbstractGraphicalEditPart)getParent()).getFigure().getBounds().getTopLeft();
	}
	
	/**
	 * Calculates a point located at a percentage of the connection 
	 * @@param percent
	 * @@return the point
	 */
	private Point calculateRefPoint(int percent) {
		if (getParent() instanceof AbstractConnectionEditPart) {
			PointList ptList = ((Connection)((ConnectionEditPart)getParent()).getFigure()).getPoints();			
			Point refPoint = PointListUtilities.calculatePointRelativeToLine(ptList, 0, percent, true);
			return refPoint;
		} else if (getParent() instanceof GraphicalEditPart) {
			return ((AbstractGraphicalEditPart)getParent()).getFigure().getBounds().getTopLeft();
		}
		return null;			
	}
	
}
@


1.13
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d48 1
a50 1
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;
d316 7
a322 8
			IGraphicalEditPart ep = (IGraphicalEditPart) iter.next();
			if (ep instanceof TextCompartmentEditPart) {
				IFigure fig = ep.getFigure();
				if (fig instanceof WrapLabel) {
					accessibleString += ((WrapLabel)fig).getText() + " "; //$NON-NLS-1$
				}
			}
		}
@


1.12
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
@


1.12.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.11
log
@bugzilla 110316 gmf-head 051212 Compiler warning count should be 0 - runtime diagram layer
@
text
@d26 1
d32 1
d35 2
a36 1
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
d41 3
a51 1
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
d124 17
a140 5
			semanticHint = ((String) MEditingDomainGetter.getMEditingDomain((View)getModel()).runAsRead(new MRunnable() {
				public Object run() {
					return ((View)getModel()).getType();
				}
			}));
@


1.10
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@a30 1
import org.eclipse.gef.editparts.AbstractEditPart;
@


1.9
log
@Bugzilla#115895 gmf_head cmahoney 051121 Clean up usage of new String("abc")
@
text
@d42 1
a42 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d263 1
a263 1
			setForegroundColor(DiagramResourceManager.getInstance().getColor(c));
@


1.8
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d122 1
a122 1
					return new String(((View)getModel()).getType());
@


1.7
log
@Bugzilla 109092: gmf_head sshaw 050923 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d36 1
a36 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelNonResizableEditPolicy;
d42 1
a42 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d212 1
a212 1
			new LabelNonResizableEditPolicy());
d263 1
a263 1
			setForegroundColor(PresentationResourceManager.getInstance().getColor(c));
d314 1
a314 1
	 * that should be delegated to the connector editpart they must
d316 2
a317 2
	 * is delegated to the connector editpart so that the property pages
	 * reflect the connector when the label is selected).  Otherwise, 
d319 1
a319 1
	 * null, then the adapter from the connector editpart is returned.
d367 1
a367 1
	 * Calculates a point located at a percentage of the connector 
@


1.6
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@a40 1
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
d151 1
a151 1
		int dx = ((Integer) getPropertyValue(Properties.ID_POSITIONX))
d153 1
a153 1
		int dy = ((Integer) getPropertyValue(Properties.ID_POSITIONY))
d173 1
a173 1
		int dx = ((Integer) getPropertyValue(Properties.ID_POSITIONX))
d175 1
a175 1
		int dy = ((Integer) getPropertyValue(Properties.ID_POSITIONY))
d177 1
a177 1
		int width = ((Integer) getPropertyValue(Properties.ID_EXTENTX))
d179 1
a179 1
		int height = ((Integer) getPropertyValue(Properties.ID_EXTENTY))
@


1.5
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a13 1
import java.beans.PropertyChangeEvent;
d25 1
d41 1
a43 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
d49 1
d255 6
a260 5
	protected void handlePropertyChangeEvent(PropertyChangeEvent evt) {
		if (   evt.getPropertyName().equals(Properties.ID_POSITIONX) 
				|| evt.getPropertyName().equals(Properties.ID_POSITIONY) 
				|| evt.getPropertyName().equals(Properties.ID_EXTENTX)
				|| evt.getPropertyName().equals(Properties.ID_EXTENTY)) {
d262 2
a263 2
		}else if (evt.getPropertyName().equals(Properties.ID_LINECOLOR)){
			Integer c = (Integer) evt.getNewValue();
d267 1
a267 1
			super.handlePropertyChangeEvent(evt);
@


1.4
log
@Bugzilla109092 : rmp_head mmostafa 050912 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.3
log
@Bugzilla 109092  : rumv_head mmostafa 050908 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@a31 3
import org.eclipse.swt.accessibility.AccessibleEvent;
import org.eclipse.ui.views.properties.IPropertySource;

a42 1
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
d48 2
d268 1
a268 1
		addListenerFilter("PrimaryView", this, ViewUtil.getPropertyChangeNotifier(getPrimaryView())); //$NON-NLS-1$
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@a39 1
import org.eclipse.gmf.runtime.diagram.ui.figures.ResizableLabelLocator;
d41 2
a45 1
import org.eclipse.gmf.runtime.diagram.ui.util.LabelViewConstants;
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d51 1
a51 1
import com.ibm.xtools.notation.View;
@

