head	1.7;
access;
symbols
	v20081023-2107:1.7
	v20081022-1925:1.7
	v20081022-1005:1.7
	v20081020-0700:1.7
	v20080917-1925:1.7
	v20080916-2008:1.7
	v20080911-1728:1.7
	v20080911-1506:1.7
	v20080910-1520:1.7
	v20080910-1510:1.7
	v20080903-1520:1.7
	v20080903-1510:1.7
	v20080813-1510:1.7
	v20080811-1546:1.7
	v20080731-1520:1.7
	v20080725-1738:1.7
	v20080723-2246:1.7
	v20080723-2232:1.7
	v20080723-1700:1.7
	v20080722-1827:1.7
	v20080718-1700:1.7
	v20080718-1731:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080610-1132:1.7
	v20080603-1553:1.7
	v20080527-1255:1.7
	v20080527-1151:1.6
	v20080516-1748:1.7
	v20080516-1143:1.7
	v20080512-1200:1.7
	v20080503-1740:1.7
	v20080501-2127:1.6
	v20080501-1739:1.7
	m20080429-1543:1.6
	v20080425-1959:1.7
	v20080417-1610:1.7
	v20080407-2250:1.7
	v20080407-0930:1.6
	v20080404-1111:1.6
	v20080328-1605:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080201-2010:1.6
	v20080201-0201:1.6
	v20080118-1129:1.6
	v20080114-2222:1.6
	v20080114-1111:1.6
	v20080107-1111:1.6
	v20071222-1111:1.6
	v20071214-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20071112-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070915-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.4
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070518-1300:1.6
	bugzilla111892_group_support:1.6.0.2
	Root_bugzilla111892_group_support:1.6
	v20070504-1000:1.5
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070221-1500:1.4
	v20070208-1800:1.4
	v20070202-0200:1.3.2.1
	v20070119-1200:1.3.2.1
	v20070111-0800:1.3.2.1
	v20070105-1200:1.3.2.1
	v20070103-0300:1.4
	M4_20:1.4
	v20061218-1500:1.3.2.1
	v20061218-1200:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.3.2.1
	v20061013-1330:1.4
	v20061012-1100:1.3.2.1
	v20060925-1700:1.3.2.1
	v20060919-0800:1.3.2.1
	v20060907-1100:1.3
	M1_20:1.3
	v20060831-1500:1.3
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060810-1700:1.3
	v20060803-1200:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1;
locks; strict;
comment	@# @;


1.7
date	2008.04.08.02.16.38;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	4d0547fad5804567;

1.6
date	2007.05.16.16.50.41;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	43e3464b36614567;

1.5
date	2007.03.13.17.19.12;	author crevells;	state Exp;
branches;
next	1.4;
commitid	587545f6dd0f4567;

1.4
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.18.20.51.25;	author cmahoney;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2006.01.20.22.10.12;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.24.22.21.03;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[226065] gmf-head ahunter 080407 Fix warning: The type Assert is deprecated
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.services.layout;

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;
import org.eclipse.gmf.runtime.common.core.service.Service;
import org.eclipse.gmf.runtime.common.core.util.ObjectAdapter;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.OffscreenEditPartFactory;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.LayoutNode;
import org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.LayoutNodesOperation;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.widgets.Shell;

/**
 * A service that provides for diagram layout.
 * 
 * @@author schafe / sshaw
 */
final public class LayoutService extends Service implements
		ILayoutNodeProvider {

	private final static LayoutService instance = new LayoutService();

	private LayoutService() {
		super(); // no caching for now
		configureProviders(DiagramUIPlugin.getPluginId(), "layoutProviders"); //$NON-NLS-1$
	}

	public static LayoutService getInstance() {
		return instance;
	}

	/**
	 * Executes the specified layout operation using the <code>ExecutionStrategy.FIRST</code> 
	 * execution strategy.
	 * 
	 * @@param operation
	 * @@return Object
	 */
	private Object execute(LayoutNodesOperation operation) {
		List results = execute(ExecutionStrategy.FIRST, operation);
		return results.isEmpty() ? null : results.get(0);
	}

	/**
	 * Gets the <code>ILayoutNode</code> in order to retrieve the actual size
	 * of the Node object irrespective of the autosize properties.
	 * 
	 * @@param node
	 *            Node to get the layout node equivalent from
	 * @@return <code>ILayoutNode</code>object
	 * 
	 * @@throws NullPointerException
	 *             <code>node</code> is <code>null</code>
	 */
	public ILayoutNode getLayoutNode(Node node) {
		if (null == node) {
			throw new NullPointerException("Argument 'node' is null"); //$NON-NLS-1$
		}

        Shell shell = new Shell();
        try {
            Diagram diagram = node.getDiagram();
            DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance()
                .createDiagramEditPart(diagram, shell);
            Map registry = diagramEP.getViewer().getEditPartRegistry();
            GraphicalEditPart gep = (GraphicalEditPart) registry.get(node);
            Dimension size = gep.getFigure().getBounds().getSize();

            return new LayoutNode(node, size.width, size.height);
        } finally {
            shell.dispose();
        }
	}

	private void checkValidLayoutNodes(List nodes) {
		if (null == nodes) {
			throw new NullPointerException("Argument 'nodes' is null"); //$NON-NLS-1$
		}
		if (nodes.size() == 0) {
			throw new IllegalArgumentException("Argument 'nodes' is empty"); //$NON-NLS-1$
		}

		ListIterator li = nodes.listIterator();
		EObject parent = null;
		while (li.hasNext()) {
			Object next = li.next();
			if (!(next instanceof ILayoutNode))
				throw new IllegalArgumentException(
						"Argument 'nodes' contains objects which aren't of type 'ILayoutNode'"); //$NON-NLS-1$
			ILayoutNode node = (ILayoutNode) next;

			if (parent == null)
				parent = ViewUtil.getContainerView(node.getNode());
			else if (ViewUtil.getContainerView(node.getNode()) != parent)
				throw new IllegalArgumentException(
						"Argument 'nodes' contains objects which have a different parent containment"); //$NON-NLS-1$
		}
	}
	
	private void checkValidNodes(List nodes) {
		if (null == nodes) {
			throw new NullPointerException("Argument 'nodes' is null"); //$NON-NLS-1$
		}
		if (nodes.size() == 0) {
			throw new IllegalArgumentException("Argument 'nodes' is empty"); //$NON-NLS-1$
		}

		ListIterator li = nodes.listIterator();
		EObject parent = null;
		while (li.hasNext()) {
			Object next = li.next();
			if (!(next instanceof Node))
				throw new IllegalArgumentException(
						"Argument 'nodes' contains objects which aren't of type 'Node'"); //$NON-NLS-1$
			Node node = (Node) next;

			if (parent == null)
				parent = ViewUtil.getContainerView(node);
			else if (ViewUtil.getContainerView(node) != parent)
				throw new IllegalArgumentException(
						"Argument 'nodes' contains objects which have a different parent containment"); //$NON-NLS-1$
		}
	}

	/**
	 * @@param diagramEP
	 *            the diagram edit part to use
	 * @@param nodes
	 *            List of <code>Node</code> objects
	 * @@return List of <code>ILayoutNodes</code> objects
	 */
	public List getLayoutNodes(DiagramEditPart diagramEP, List nodes) {
		checkValidNodes(nodes);

        Shell shell = null;
        try {
            if (diagramEP == null) {
                shell = new Shell();
                Diagram diagram = ((Node) nodes.get(0)).getDiagram();
                diagramEP = OffscreenEditPartFactory.getInstance()
                    .createDiagramEditPart(diagram, shell);
            }
            Map registry = diagramEP.getViewer().getEditPartRegistry();

            List layoutNodes = new ArrayList(nodes.size());
            ListIterator li = nodes.listIterator();
            while (li.hasNext()) {
                Node node = (Node) li.next();
                GraphicalEditPart gep = (GraphicalEditPart) registry.get(node);
                Dimension size = gep.getFigure().getBounds().getSize();

                layoutNodes.add(new LayoutNode(node, size.width, size.height));
            }

            return layoutNodes;
        } finally {
            if (shell != null) {
                shell.dispose();
            }
        }
	}

	/**
	 * Utility method to layout the children of a view container.
	 * 
	 * @@param container
	 *            <code>View</code> object that is the container whose children will be laid
	 *            out.
	 * @@param hint
	 *            <code>String</code> representing a hint for what kind of layout will be
	 *            applied. Value can be one of
	 *            <code>ILayoutType.DEFAULT</code>, <code>ILayoutType.RADIAL</code>.
	 *            Other values would have to understand by custom providers.
	 * @@see org.eclipse.gmf.runtime.diagram.ui.services.layout.ILayoutNodeProvider
	 * @@throws NullPointerException
	 *             <code>View</code> is <code>null</code>
	 * @@throws NullPointerException
	 *             <code>hint</code> is <code>null</code>
	 */
	public void layout(View container, String hint) {
		if (null == container) {
			throw new NullPointerException("Argument 'view' is null"); //$NON-NLS-1$
		}
		if (null == hint) {
			throw new NullPointerException("Argument 'hint' is null"); //$NON-NLS-1$
		}

        Shell shell = new Shell();
        try {
            Diagram diagram = container.getDiagram();
            DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance()
                .createDiagramEditPart(diagram, shell);

            List hints = new ArrayList(2);
            hints.add(hint);
            hints.add(diagramEP);
            IAdaptable layoutHint = new ObjectAdapter(hints);
            final Runnable layoutRun = LayoutService.getInstance()
                .layoutLayoutNodes(
                    getLayoutNodes(diagramEP, container.getChildren()), false,
                    layoutHint);
            layoutRun.run();
        } finally {
            shell.dispose();
        }
    }

	/**
	 * Utility method to layout a list of Node children on a diagram.
	 * 
	 * @@param nodes
	 *            <code>List</code> of {@@link org.eclipse.gmf.runtime.notation.Node} objects or
	 *            <code>List</code> of {@@link org.eclipse.gmf.runtime.diagram.ui.services.layout.ILayoutNode} objects
	 * @@param offsetFromBoundingBox
	 *            <code>boolean</code> indicating whether the Nodes should be
	 *            laid out relative to the bounding box of the Nodes in the
	 *            nodesToSizes Map.       
	 * @@param hint
	 *            String representing a hint for what kind of layout will be
	 *            applied. Value can be one of
	 *            <code>ILayoutType.DEFAULT</code>, <code>ILayoutType.RADIAL</code>.
	 *            Other values can be provided but would have to be understand by custom providers.
	 * @@see org.eclipse.gmf.runtime.diagram.ui.services.layout.ILayoutNodeProvider
	 * @@throws NullPointerException
	 *             <code>nodes</code> is <code>null</code>
	 * @@throws IllegalArgumentException
	 *             nodes is an empty list
	 * @@throws NullPointerException
	 *             <code>hint</code> is <code>null</code>
	 * @@throws IllegalArgumentException
	 *             Argument <code>nodes</code> contains objects which aren't
	 *             of type <code>Node</code>
	 * @@throws IllegalArgumentException
	 *             Argument <code>nodes</code> contains objects which have a
	 *             different parent containment
	 */
	public void layoutNodes(List nodes, boolean offsetFromBoundingBox, String hint) {
		checkValidNodes(nodes);

		if (null == hint) {
			throw new NullPointerException("Argument 'hint' is null"); //$NON-NLS-1$
		}

        Shell shell = new Shell();
        try {
            Node nodeFirst = (Node) nodes.get(0);
            Diagram diagram = nodeFirst.getDiagram();
            DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance()
                .createDiagramEditPart(diagram, shell);

            List hints = new ArrayList(2);
            hints.add(hint);
            hints.add(diagramEP);
            IAdaptable layoutHint = new ObjectAdapter(hints);
            final Runnable layoutRun = LayoutService.getInstance()
                .layoutLayoutNodes(getLayoutNodes(diagramEP, nodes), true,
                    layoutHint);
            layoutRun.run();
        } finally {
            shell.dispose();
        }
    }
	
	public Runnable layoutLayoutNodes(List layoutNodes,
			boolean offsetFromBoundingBox, IAdaptable layoutHint) {
		if (null == layoutHint) {
			throw new NullPointerException("Argument 'layoutHint' is null"); //$NON-NLS-1$
		}
		checkValidLayoutNodes(layoutNodes);
		
		Assert.isNotNull(layoutNodes);
		Assert.isNotNull(layoutHint);
		return (Runnable) execute(new LayoutNodesOperation(layoutNodes,
				offsetFromBoundingBox, layoutHint));
	}
}
@


1.6
log
@gmf_head ahunter 070516 Update Copyright for files changed in 2007
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
d19 1
a35 1
import org.eclipse.jface.util.Assert;
@


1.5
log
@[170493] gmf_head crevells 070313 GMF Layout service getLayoutNode() does not dispose of off-screen shells
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d36 1
d85 13
a97 8
		Diagram diagram = node.getDiagram();
		DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance()
				.createDiagramEditPart(diagram);
		Map registry = diagramEP.getViewer().getEditPartRegistry();
		GraphicalEditPart gep = (GraphicalEditPart) registry.get(node);
		Dimension size = gep.getFigure().getBounds().getSize();

		return new LayoutNode(node, size.width, size.height);
d160 26
a185 18
		if (diagramEP == null) {
			Diagram diagram = ((Node) nodes.get(0)).getDiagram();
			diagramEP = OffscreenEditPartFactory.getInstance()
					.createDiagramEditPart(diagram);
		}
		Map registry = diagramEP.getViewer().getEditPartRegistry();

		List layoutNodes = new ArrayList(nodes.size());
		ListIterator li = nodes.listIterator();
		while (li.hasNext()) {
			Node node = (Node) li.next();
			GraphicalEditPart gep = (GraphicalEditPart) registry.get(node);
			Dimension size = gep.getFigure().getBounds().getSize();

			layoutNodes.add(new LayoutNode(node, size.width, size.height));
		}

		return layoutNodes;
d213 19
a231 13
		Diagram diagram = container.getDiagram();
		DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance()
				.createDiagramEditPart(diagram);

		List hints = new ArrayList(2);
		hints.add(hint);
		hints.add(diagramEP);
		IAdaptable layoutHint = new ObjectAdapter(hints);
		final Runnable layoutRun = LayoutService.getInstance().layoutLayoutNodes(
				getLayoutNodes(diagramEP, container.getChildren()), false,
				layoutHint);
		layoutRun.run();
	}
d269 19
a287 13
		Node nodeFirst = (Node) nodes.get(0);
		Diagram diagram = nodeFirst.getDiagram();
		DiagramEditPart diagramEP = OffscreenEditPartFactory.getInstance()
				.createDiagramEditPart(diagram);

		List hints = new ArrayList(2);
		hints.add(hint);
		hints.add(diagramEP);
		IAdaptable layoutHint = new ObjectAdapter(hints);
		final Runnable layoutRun = LayoutService.getInstance().layoutLayoutNodes(
				getLayoutNodes(diagramEP, nodes), true, layoutHint);
		layoutRun.run();
	}
@


1.3
log
@Bugzilla#109422 gmf_head cmahoney 060418 Remove deprecated API
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
@


1.3.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla#123313 gmf_head cmahoney 060120 Making DiagramUIPlugin, DiagramUIStatusCodes, and DiagramUIDebugOptions internal
@
text
@a262 12
	/**
	 * @@deprecated use {@@link LayoutService#layoutLayoutNodes(List, boolean, IAdaptable)} 
	 * Will be removed on December 16th / 2005
	 */
	public Runnable layoutNodes(List layoutNodes, boolean offsetFromBoundingBox, IAdaptable layoutHint) {
		return layoutLayoutNodes(layoutNodes, offsetFromBoundingBox, layoutHint);
	}

	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.services.layout.ILayoutNodesProvider#layoutLayoutNodes(java.util.List, boolean, org.eclipse.core.runtime.IAdaptable)
	 */
@


1.1
log
@bugzilla 116490 gmf-head sshaw 051124 LayoutService should be public
@
text
@a26 1
import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;
d29 1
@

