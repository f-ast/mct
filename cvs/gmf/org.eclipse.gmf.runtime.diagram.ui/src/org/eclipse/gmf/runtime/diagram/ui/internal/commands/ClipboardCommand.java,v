head	1.10;
access;
symbols
	v20081023-2107:1.9.2.1
	v20081022-1925:1.10
	v20081022-1005:1.9.2.1
	v20081020-0700:1.10
	v20080917-1925:1.10
	v20080916-2008:1.9.2.1
	v20080911-1728:1.10
	v20080911-1506:1.9.2.1
	v20080910-1520:1.10
	v20080910-1510:1.9.2.1
	v20080903-1520:1.10
	v20080903-1510:1.9.2.1
	v20080813-1510:1.9.2.1
	v20080811-1546:1.10
	v20080731-1520:1.10
	v20080725-1738:1.9.2.1
	v20080723-2246:1.9
	v20080723-2232:1.9
	v20080723-1700:1.9
	v20080722-1827:1.9
	v20080718-1700:1.9
	v20080718-1731:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080527-1255:1.9
	v20080527-1151:1.7
	v20080516-1748:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080503-1740:1.9
	v20080501-2127:1.7
	v20080501-1739:1.9
	m20080429-1543:1.7
	v20080425-1959:1.9
	v20080417-1610:1.8
	v20080407-2250:1.8
	v20080407-0930:1.8
	v20080404-1111:1.8
	v20080328-1605:1.8
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20080201-2010:1.8
	v20080201-0201:1.7
	v20080118-1129:1.7
	v20080114-2222:1.7
	v20080114-1111:1.8
	v20080107-1111:1.8
	v20071222-1111:1.8
	v20071214-1111:1.8
	v20071130-1111:1.8
	v20071124-0000:1.7
	v20071112-0000:1.8
	v20071108-0000:1.8
	v20071003-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.6
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070518-1300:1.7
	bugzilla111892_group_support:1.7.0.4
	Root_bugzilla111892_group_support:1.7
	v20070504-1000:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.7
	v20070119-1200:1.7
	v20070111-0800:1.7
	v20070105-1200:1.7
	v20070103-0300:1.7
	M4_20:1.7
	v20061218-1500:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.7
	v20061013-1330:1.7
	v20061012-1100:1.7
	v20060925-1700:1.7
	v20060919-0800:1.7
	v20060907-1100:1.7
	M1_20:1.7
	v20060831-1500:1.7
	v20060824-1600:1.7
	v20060817-1500:1.7
	v20060810-1700:1.7
	v20060803-1200:1.7
	v20060728-0500:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-0800:1.7
	v20060512-1000:1.7
	I20060512-1000:1.7
	I20060505-1400:1.7
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.10
date	2008.07.25.21.40.41;	author aboyko;	state Exp;
branches;
next	1.9;
commitid	45dc488a48594567;

1.9
date	2008.04.22.21.06.54;	author ahunter;	state Exp;
branches
	1.9.2.1;
next	1.8;
commitid	170e480e536d4567;

1.8
date	2007.11.02.21.03.37;	author aboyko;	state Exp;
branches;
next	1.7;
commitid	7608472b90a74567;

1.7
date	2006.04.28.20.17.39;	author sshaw;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.28.02.31.21;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.27.20.22.56;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.10;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.22;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.38;	author sshaw;	state Exp;
branches;
next	;

1.9.2.1
date	2008.07.25.21.23.42;	author aboyko;	state Exp;
branches;
next	;
commitid	4cd4488a445d4567;


desc
@@


1.10
log
@[242124] gmf_head aboyko 080725 [CopyPaste] Edges that shouldn't be copied are being copied without source/target
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.commands;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gmf.runtime.common.ui.action.actions.global.ClipboardManager;
import org.eclipse.gmf.runtime.common.ui.util.CustomData;
import org.eclipse.gmf.runtime.common.ui.util.CustomDataTransfer;
import org.eclipse.gmf.runtime.common.ui.util.ICustomData;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.emf.clipboard.core.ClipboardUtil;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Abstract parent for all concrete clipboard commands used for IViews
 * 
 * @@author Vishy Ramaswamy
 * @@canBeSeenBy %level1
 */
public abstract class ClipboardCommand extends AbstractTransactionalCommand {
    /**
     * String constant for the clipboard format
     */
    public static final String DRAWING_SURFACE = "Drawing Surface"; //$NON-NLS-1$

    /**
     * The target <code>View</code> used as a context for the clipboard
     * operations. The cut and copy will use this to retrieve the view model.
     * The paste will use this as the target view.
     */
    private final View viewContext;

    /**
     * Constructor for ClipboardCommand.
     * @@param editingDomain
     *            the editing domain through which model changes are made
     * @@param viewContext The target view used as a context for the clipboard operations
     */
    public ClipboardCommand(TransactionalEditingDomain editingDomain, View viewContext) {
        this(editingDomain, null, viewContext);
    }

    /**
     * Constructor for ClipboardCommand.
     * @@param editingDomain
     *            the editing domain through which model changes are made
     * @@param label The label for the command
     * @@param viewContext The target view used as a context for the clipboard operations
     */
    public ClipboardCommand(TransactionalEditingDomain editingDomain, 
        String label,
        View viewContext) {
        super(editingDomain, label, getWorkspaceFiles(viewContext));

        Assert.isNotNull(viewContext);

        this.viewContext = viewContext;
    }

    /**
     * Copies the list of views to the system clipboard by delegating the
     * serialization exercise to the view context's <code>IViewModel</code>
     * 
     * @@param source The list of views to be copied
     */
    protected void copyToClipboard(List source) {
        /* Check if the source has elements */
        if (source == null || source.size() == 0) {
            return;
        }

        /* Copy the views */
        CustomData data =
                new CustomData(
                    DRAWING_SURFACE,
                    copyViewsToString(source).getBytes());

        /* Add the data to the clipboard manager */
        if (data != null) {
            ClipboardManager.getInstance().addToCache(
                new ICustomData[] { data },
                CustomDataTransfer.getInstance());
        }
    }

    /**
     * Returns the viewContext.
     * @@return IView
     */
    protected View getViewContext() {
        return viewContext;
    }

	/**
	 * convert a <code>List</code> of <code>View</code>s to a string, using
	 * the serialized representation of each view
	 * @@param views
	 * @@return string representation of all supplied views
	 */
	public static String copyViewsToString(List views) {
		Assert.isNotNull(views);
		Assert.isTrue(views.size() > 0);

		/* Create an empty selection */
		List selection = new ArrayList();

		/* views iterator */
		Iterator iter = views.iterator();
		
		/* Add the elements to the selection */
		while (iter.hasNext()) {
			EObject viewElement =(View)iter.next();
			if (viewElement != null) {
				selection.add(viewElement);
			}
		}
		
		/*
		 * We must append all inner edges of a node being copied. Edges are non-containment
		 * references, hence they won't be copied for free. Therefore, we add them here to
		 * the list of views to copy.
		 */
		List<Edge> innerEdges = new LinkedList<Edge>();
		for (Iterator itr = views.iterator(); itr.hasNext();) {
			View view = (View) itr.next();
			if (!(view instanceof Diagram)) {
				innerEdges.addAll(ViewUtil.getAllInnerEdges(view));
			}
		}
		selection.addAll(innerEdges);

		// add the measurement unit in an annotation.  Put it in the last position
		//   to work around a limitation in the copy/paste infrastructure, that
		//   selects the ClipboardSupportFactory based on the first element in
		//   the copy list.  If the annotation is first, then we get the wrong
		//   clipboard support instance
		View firstView = (View)views.get(0);
		Diagram dgrm = firstView.getDiagram();
		EAnnotation measureUnitAnnotation  = EcoreFactory.eINSTANCE.createEAnnotation();
		measureUnitAnnotation.setSource(dgrm.getMeasurementUnit().getName());
		selection.add(measureUnitAnnotation);

		/* Copy the selection to the string */
		return ClipboardUtil.copyElementsToString(selection,
			new HashMap(), new NullProgressMonitor()); 	
	}
}
@


1.9
log
@[227655] gmf-head ahunter 080422 Clipboard support used for copy/paste does not preserve order
@
text
@a14 1
import java.util.Collections;
a15 1
import java.util.HashSet;
d17 1
d144 1
a144 1
		 * the list views to copy.
d146 1
a146 1
		HashSet<Edge> allInnerEdges = new HashSet<Edge>();
d148 4
a151 1
			ViewUtil.getAllRelatedEdgesFromViews(((View)itr.next()).getChildren(), allInnerEdges);
d153 1
a153 1
		selection.addAll(allInnerEdges);
@


1.9.2.1
log
@[242124] gmf_R2_1_maintenance aboyko 080725 [CopyPaste] Edges that shouldn't be copied are being copied without source/target
@
text
@d15 1
d17 1
a18 1
import java.util.LinkedList;
d145 1
a145 1
		 * the list of views to copy.
d147 1
a147 1
		List<Edge> innerEdges = new LinkedList<Edge>();
d149 1
a149 4
			View view = (View) itr.next();
			if (!(view instanceof Diagram)) {
				innerEdges.addAll(ViewUtil.getAllInnerEdges(view));
			}
d151 1
a151 1
		selection.addAll(innerEdges);
@


1.8
log
@[208622] gmf_HEAD aboyko 071102 Contents of Canonical compartments are duplicated incorrectly
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
d16 1
d166 1
a166 1
			Collections.EMPTY_MAP, new NullProgressMonitor()); 	
@


1.7
log
@bugzilla 136975 gmf-head sshaw 060428 ExecutionException undoing drag and drop operation...
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d16 1
d20 1
d30 1
d34 1
a35 1
import org.eclipse.jface.util.Assert;
d140 11
@


1.6
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@a128 7

		// add the measurement unit in a annotation
		View firstView = (View)views.get(0);
		Diagram dgrm = firstView.getDiagram();
		EAnnotation measureUnitAnnotation  = EcoreFactory.eINSTANCE.createEAnnotation();
		measureUnitAnnotation.setSource(dgrm.getMeasurementUnit().getName());
		selection.add(measureUnitAnnotation);
d138 11
@


1.5
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d19 1
d28 1
a29 1
import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
d146 2
a147 1
		return EObjectUtil.serialize( selection, Collections.EMPTY_MAP); 	
@


1.4
log
@bugzilla 116224 gmf-head sshaw 060119 Notation meta-model support for coordinate systems
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d22 1
d27 1
a27 1
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;
d39 1
a39 1
public abstract class ClipboardCommand extends AbstractModelCommand {
d54 2
d58 2
a59 2
    public ClipboardCommand(View viewContext) {
        this(null, viewContext);
d64 2
d69 1
a69 1
    public ClipboardCommand(
d72 1
a72 1
        super(label, viewContext);
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d19 1
d21 1
a21 2
import org.eclipse.jface.util.Assert;

d28 1
d30 1
d124 7
d134 1
a134 1
			if (viewElement != null)
d136 1
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d26 1
a26 1
import com.ibm.xtools.notation.View;
@

