head	1.6;
access;
symbols
	v20081023-2107:1.6
	v20081022-1925:1.6
	v20081022-1005:1.6
	v20081020-0700:1.6
	v20080917-1925:1.6
	v20080916-2008:1.6
	v20080911-1728:1.6
	v20080911-1506:1.6
	v20080910-1520:1.6
	v20080910-1510:1.6
	v20080903-1520:1.6
	v20080903-1510:1.6
	v20080813-1510:1.6
	v20080811-1546:1.6
	v20080731-1520:1.6
	v20080725-1738:1.6
	v20080723-2246:1.6
	v20080723-2232:1.6
	v20080723-1700:1.6
	v20080722-1827:1.6
	v20080718-1700:1.6
	v20080718-1731:1.6
	v20080716-1600:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.6
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080610-1132:1.6
	v20080603-1553:1.6
	v20080527-1255:1.6
	v20080527-1151:1.6
	v20080516-1748:1.6
	v20080516-1143:1.6
	v20080512-1200:1.6
	v20080503-1740:1.6
	v20080501-2127:1.6
	v20080501-1739:1.6
	m20080429-1543:1.6
	v20080425-1959:1.6
	v20080417-1610:1.6
	v20080407-2250:1.6
	v20080407-0930:1.6
	v20080404-1111:1.6
	v20080328-1605:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080201-2010:1.6
	v20080201-0201:1.6
	v20080118-1129:1.6
	v20080114-2222:1.6
	v20080114-1111:1.6
	v20080107-1111:1.6
	v20071222-1111:1.6
	v20071214-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20071112-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070915-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.4
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070518-1300:1.6
	bugzilla111892_group_support:1.6.0.2
	Root_bugzilla111892_group_support:1.6
	v20070504-1000:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070202-0200:1.4.2.2
	v20070119-1200:1.4.2.2
	v20070111-0800:1.4.2.1
	v20070105-1200:1.4
	v20070103-0300:1.4
	M4_20:1.4
	v20061218-1500:1.4
	v20061218-1200:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.4
	v20061013-1330:1.4
	v20061012-1100:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	v20060907-1100:1.4
	M1_20:1.4
	v20060831-1500:1.4
	v20060824-1600:1.4
	v20060817-1500:1.4
	v20060810-1700:1.4
	v20060803-1200:1.4
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.6
date	2007.01.11.19.48.39;	author aboyko;	state Exp;
branches;
next	1.5;
commitid	1f3745a694964567;

1.5
date	2007.01.09.14.51.19;	author aboyko;	state Exp;
branches;
next	1.4;
commitid	3c8545a3abe64567;

1.4
date	2005.11.25.19.38.12;	author cmahoney;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.11.02.23.30.18;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.11;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.42;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2007.01.09.14.54.26;	author aboyko;	state Exp;
branches;
next	1.4.2.2;
commitid	299845a3aca14567;

1.4.2.2
date	2007.01.11.19.51.14;	author aboyko;	state Exp;
branches;
next	;
commitid	2f7545a695314567;


desc
@@


1.6
log
@gmf_head aboyko 070111 Changed copyrights to 2007
@
text
@/******************************************************************************
 * Copyright (c) 2003, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.dialogs.sortfilter;

import java.util.Iterator;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CommandStack;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gmf.runtime.diagram.ui.dialogs.sortfilter.SortFilterPage;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.preference.IPreferenceNode;
import org.eclipse.jface.preference.IPreferencePage;
import org.eclipse.jface.preference.PreferenceDialog;
import org.eclipse.jface.preference.PreferenceManager;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.jface.util.Policy;
import org.eclipse.jface.util.SafeRunnable;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Shell;

/**
 * Sort/Filter dialog.  The OK button applies all changes from each 
 * page starting with the ROOT page. 
 * 
 * @@author jcorchis
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.ui.*
 */
public class SortFilterDialog extends PreferenceDialog {
	
	/** dialog title prefix */
	private final String title = DiagramUIMessages.SortFilterDialog_title;
	private CommandStack commandStack = null;
	
	/**
	 * CollectionEditorDialog constructor
	 * @@param parentShell 	the parent shell
	 */
	public SortFilterDialog(Shell parentShell, CommandStack commandStack) {
		super(parentShell, new SortFilterPageManager());
		this.commandStack = commandStack;
	}

	/**
	 * @@see org.eclipse.jface.dialogs.Dialog#createDialogArea(Composite)
	 */
	protected Control createDialogArea(Composite parent) {
		Control control = super.createDialogArea(parent);
		getShell().setText(title);
		getTreeViewer().expandAll();
		return control;
	}
	
	/**
	 * Overridden to give access to the root node to show it's
	 * child pages.
	 * @@param node the tree preference node
	 * @@return boolean
	 */
	public boolean showPage(IPreferenceNode node) {
		return super.showPage(node);
	}
	
	/**
	 * Get the name of the selected item preference.  Overridden to 
	 * always set the preference page to the root node.
	 */
	protected String getSelectedNodePreference() {
		return null;
	}	
	
	/* (non-Javadoc)
	 * @@see org.eclipse.jface.preference.PreferenceDialog#okPressed()
	 */
	protected void okPressed() {
		SafeRunnable.run(new SafeRunnable() {
			private boolean errorOccurred;

			
			 /* (non-Javadoc)
			 * 
			 * @@see org.eclipse.core.runtime.ISafeRunnable#run()
			 */
			 
			public void run() {
				getButton(IDialogConstants.OK_ID).setEnabled(false);
				errorOccurred = false;
				boolean hasFailedOK = false;
				try {
					// Notify all the pages and give them a chance to abort
					Iterator nodes = getPreferenceManager().getElements(PreferenceManager.PRE_ORDER)
							.iterator();
					CompoundCommand cc = new CompoundCommand();
					while (nodes.hasNext()) {
						IPreferenceNode node = (IPreferenceNode) nodes.next();
						IPreferencePage page = node.getPage();
						if (page != null) {
							if (page instanceof SortFilterPage) {
								Command cmd = ((SortFilterPage)page).getCommand();
								if (cmd != null && cmd.canExecute())
									cc.add(cmd);
							}
							else if (!page.performOk()){
								hasFailedOK = true;
								return;
							}
						}
					}
					if (cc.canExecute())
						commandStack.execute(cc);
				} catch (Exception e) {
					handleException(e);
				} finally {
					//Don't bother closing if the OK failed
					if(hasFailedOK){
						setReturnCode(FAILED);
						getButton(IDialogConstants.OK_ID).setEnabled(true);
						return;
					}
					
					if (!errorOccurred) {
						//Give subclasses the choice to save the state of the
					    //preference pages.
						handleSave();
					}
					setReturnCode(OK);
					close();
				}
			}

			
			 /* (non-Javadoc)
			 * 
			 * @@see org.eclipse.core.runtime.ISafeRunnable#handleException(java.lang.Throwable)
			 */
			 
			public void handleException(Throwable e) {
				errorOccurred = true;
				
				Policy.getLog().log(new Status(IStatus.ERROR, Policy.JFACE, 0, e.toString(), e));

				setSelectedNodePreference(null);
				String message = JFaceResources.getString("SafeRunnable.errorMessage"); //$NON-NLS-1$
				MessageDialog.openError(getShell(), JFaceResources.getString("Error"), message); //$NON-NLS-1$

			}
		});
	}

}
@


1.5
log
@[168283] gmf_head aboyko 070109 Issues with Sort and Filter Dialog (Issue 1 only)
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2004 IBM Corporation and others.
@


1.4
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d14 8
d23 2
d26 1
d28 4
d47 1
d53 1
a53 1
	public SortFilterDialog(Shell parentShell) {
d55 1
d86 77
@


1.4.2.1
log
@[168283] gmf_R1_maintenance aboyko 070109 Issues with Sort and Filter Dialog (Issue 1 only)
@
text
@a13 8
import java.util.Iterator;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CommandStack;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gmf.runtime.diagram.ui.dialogs.sortfilter.SortFilterPage;
a14 2
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialog;
a15 1
import org.eclipse.jface.preference.IPreferencePage;
a16 4
import org.eclipse.jface.preference.PreferenceManager;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.jface.util.Policy;
import org.eclipse.jface.util.SafeRunnable;
a31 1
	private CommandStack commandStack = null;
d37 1
a37 1
	public SortFilterDialog(Shell parentShell, CommandStack commandStack) {
a38 1
		this.commandStack = commandStack;
a68 77
	/* (non-Javadoc)
	 * @@see org.eclipse.jface.preference.PreferenceDialog#okPressed()
	 */
	protected void okPressed() {
		SafeRunnable.run(new SafeRunnable() {
			private boolean errorOccurred;

			
			 /* (non-Javadoc)
			 * 
			 * @@see org.eclipse.core.runtime.ISafeRunnable#run()
			 */
			 
			public void run() {
				getButton(IDialogConstants.OK_ID).setEnabled(false);
				errorOccurred = false;
				boolean hasFailedOK = false;
				try {
					// Notify all the pages and give them a chance to abort
					Iterator nodes = getPreferenceManager().getElements(PreferenceManager.PRE_ORDER)
							.iterator();
					CompoundCommand cc = new CompoundCommand();
					while (nodes.hasNext()) {
						IPreferenceNode node = (IPreferenceNode) nodes.next();
						IPreferencePage page = node.getPage();
						if (page != null) {
							if (page instanceof SortFilterPage) {
								Command cmd = ((SortFilterPage)page).getCommand();
								if (cmd != null && cmd.canExecute())
									cc.add(cmd);
							}
							else if (!page.performOk()){
								hasFailedOK = true;
								return;
							}
						}
					}
					if (cc.canExecute())
						commandStack.execute(cc);
				} catch (Exception e) {
					handleException(e);
				} finally {
					//Don't bother closing if the OK failed
					if(hasFailedOK){
						setReturnCode(FAILED);
						getButton(IDialogConstants.OK_ID).setEnabled(true);
						return;
					}
					
					if (!errorOccurred) {
						//Give subclasses the choice to save the state of the
					    //preference pages.
						handleSave();
					}
					setReturnCode(OK);
					close();
				}
			}

			
			 /* (non-Javadoc)
			 * 
			 * @@see org.eclipse.core.runtime.ISafeRunnable#handleException(java.lang.Throwable)
			 */
			 
			public void handleException(Throwable e) {
				errorOccurred = true;
				
				Policy.getLog().log(new Status(IStatus.ERROR, Policy.JFACE, 0, e.toString(), e));

				setSelectedNodePreference(null);
				String message = JFaceResources.getString("SafeRunnable.errorMessage"); //$NON-NLS-1$
				MessageDialog.openError(getShell(), JFaceResources.getString("Error"), message); //$NON-NLS-1$

			}
		});
	}
@


1.4.2.2
log
@gmf_R1_maintenance aboyko 070111 Changed copyrights to 2007
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2007 IBM Corporation and others.
@


1.3
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d14 1
a20 2
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;

d31 1
a31 1
	private final String title = DiagramResourceManager.getInstance().getString("SortFilterDialog.title");//$NON-NLS-1$
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d20 1
a20 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d32 1
a32 1
	private final String title = PresentationResourceManager.getInstance().getString("SortFilterDialog.title");//$NON-NLS-1$
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2003, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

