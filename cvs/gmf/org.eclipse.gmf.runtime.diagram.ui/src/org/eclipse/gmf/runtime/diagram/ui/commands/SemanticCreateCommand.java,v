head	1.9;
access;
symbols
	v20081023-2107:1.9
	v20081022-1925:1.9
	v20081022-1005:1.9
	v20081020-0700:1.9
	v20080917-1925:1.9
	v20080916-2008:1.9
	v20080911-1728:1.9
	v20080911-1506:1.9
	v20080910-1520:1.9
	v20080910-1510:1.9
	v20080903-1520:1.9
	v20080903-1510:1.9
	v20080813-1510:1.9
	v20080811-1546:1.9
	v20080731-1520:1.9
	v20080725-1738:1.9
	v20080723-2246:1.9
	v20080723-2232:1.9
	v20080723-1700:1.9
	v20080722-1827:1.9
	v20080718-1700:1.9
	v20080718-1731:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080527-1255:1.9
	v20080527-1151:1.7
	v20080516-1748:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080503-1740:1.9
	v20080501-2127:1.7
	v20080501-1739:1.9
	m20080429-1543:1.7
	v20080425-1959:1.9
	v20080417-1610:1.8
	v20080407-2250:1.8
	v20080407-0930:1.8
	v20080404-1111:1.8
	v20080328-1605:1.8
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20080201-2010:1.7
	v20080201-0201:1.7
	v20080118-1129:1.7
	v20080114-2222:1.7
	v20080114-1111:1.7
	v20080107-1111:1.7
	v20071222-1111:1.7
	v20071214-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.7
	v20071112-0000:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070518-1300:1.7
	bugzilla111892_group_support:1.7.0.2
	Root_bugzilla111892_group_support:1.7
	v20070504-1000:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.6.2.1
	v20070119-1200:1.6.2.1
	v20070111-0800:1.6.2.1
	v20070105-1200:1.6.2.1
	v20070103-0300:1.7
	M4_20:1.7
	v20061218-1500:1.6.2.1
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.6.2.1
	v20061013-1330:1.7
	v20061012-1100:1.6.2.1
	v20060925-1700:1.6.2.1
	v20060919-0800:1.6.2.1
	v20060907-1100:1.6.2.1
	M1_20:1.6
	v20060831-1500:1.6.2.1
	v20060824-1600:1.6.2.1
	v20060817-1500:1.6.2.1
	v20060810-1700:1.6.2.1
	v20060803-1200:1.6.2.1
	v20060728-0500:1.6
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.5
	v20060519-0800:1.5
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.9
date	2008.04.25.18.39.38;	author ahunter;	state Exp;
branches;
next	1.8;
commitid	2698481225694567;

1.8
date	2008.03.28.21.54.55;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	713047ed692e4567;

1.7
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.29.17.59.21;	author ldamus;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.05.17.13.55.48;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.13.19.35.52;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.08;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.46;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.08.01.18.18.08;	author mmostafa;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[228915] gmf-head ahunter 080425 Non-externalized string literal; it should be followed by //$NON-NLS-<n>
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.commands;

import java.util.Collection;
import java.util.List;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.operations.IUndoContext;
import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.common.core.command.AbstractCommand;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;

/**
 * A Wrapper around a real element creation command
 * The main use of this command is to ensure that the semantic
 * adapter is updated appropriately upon undo and redo of the real command
 * 
 * @@author melaasar
 */
public class SemanticCreateCommand extends AbstractCommand {

	/** the request adapter */
	CreateElementRequestAdapter requestAdapter;
	/** the real element creation command */
	private ICommand realSemanticCommand;

	/**
	 * Creates a new semantic create command that wraps around a real command
	 * @@param requestAdapter
	 * @@param realSemanticCommand
	 */
	public SemanticCreateCommand(
		CreateElementRequestAdapter requestAdapter,
		Command realSemanticCommand) {

		super((realSemanticCommand.getLabel() == null) ? StringStatics.BLANK : realSemanticCommand.getLabel(), null);

		Assert.isNotNull(requestAdapter);
		Assert.isNotNull(realSemanticCommand);

		this.requestAdapter = requestAdapter;
		this.realSemanticCommand =
			DiagramCommandStack.getICommand(realSemanticCommand);
		
		// propagate the contexts from the wrapped command
		recomputeContexts();
	}

	protected CommandResult doExecuteWithResult(
            IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {

		realSemanticCommand.execute(progressMonitor, info); 
		CommandResult result = realSemanticCommand.getCommandResult();
		if (result.getStatus().isOK()) {
			Object object =	result.getReturnValue();
			if (object instanceof Collection) {
				Collection col = (Collection) object;
				object = col.isEmpty() ? null : col.iterator().next();
			}
			if (object != null) {
				Assert.isTrue(object instanceof EObject, "Failed to get an IElement out of the semantic command returned value");//$NON-NLS-1$
				EObject element = (EObject) object;
				requestAdapter.setNewElement(element);
			}
			result = CommandResult.newOKCommandResult(requestAdapter);
		}
		
		recomputeContexts();
		return result;
	}

    protected CommandResult doRedoWithResult(IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {

		realSemanticCommand.redo(progressMonitor, info);
		CommandResult result = realSemanticCommand.getCommandResult();
		recomputeContexts();
		return result;
	}

    protected CommandResult doUndoWithResult(IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {

		realSemanticCommand.undo(progressMonitor, info);
		CommandResult result = realSemanticCommand.getCommandResult();
		recomputeContexts();
		return result;
	}

    public boolean canExecute() {
		return realSemanticCommand.canExecute();
	}

    public boolean canUndo() {
		return realSemanticCommand.canUndo();
	}

    public boolean canRedo() {
		return realSemanticCommand.canRedo();
	}
    
    public List getAffectedFiles() {
        return realSemanticCommand.getAffectedFiles();
    }
    
    /**
     * Propagates the contexts from my wrapped command.
     */
    private void recomputeContexts() {
    	
    	// Get my real contexts from my wrapped command
    	IUndoContext[] realContexts = realSemanticCommand.getContexts();
    	
    	// Clear my contexts
    	IUndoContext[] myContexts = getContexts();
    	for (int i = 0; i < myContexts.length; i++) {
    		removeContext(myContexts[i]);
    	}
    	
    	// Add the contexts from my wrapped command
		for (int i = 0; i < realContexts.length; i++) {
			addContext(realContexts[i]);
		}
    }
    
    /**
     * Adds the context to my wrapped command.
     */
    public void addContext(IUndoContext context) {
    	super.addContext(context);
    	realSemanticCommand.addContext(context);
    }
    
    /**
     * Removes the context from my wrapped command.
     */
    public void removeContext(IUndoContext context) {
    	super.removeContext(context);
    	realSemanticCommand.removeContext(context);
    }

    public void dispose() {
        super.dispose();
        realSemanticCommand.dispose();
    }

}
@


1.8
log
@[224706] gmf-head ahunter 080328 IUndoableOperation changes in the platform cause AssertionFailedException
@
text
@d27 1
d54 1
a54 1
		super((realSemanticCommand.getLabel() == null) ? "" : realSemanticCommand.getLabel(), null);
@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d19 1
a28 1
import org.eclipse.jface.util.Assert;
d53 1
a53 1
		super(realSemanticCommand.getLabel(), null);
@


1.6
log
@[141122] gmf_head ldamus 060529 SemanticCreateCommand does not return the contexts of realSemanticCommand
@
text
@d160 5
@


1.6.2.1
log
@[152364] gmf_R1_0_maintenance mmostafa  060801 dispose() events on Command not propagated properly
@
text
@a159 5
    public void dispose() {
        super.dispose();
        realSemanticCommand.dispose();
    }

@


1.5
log
@[141122] gmf_head ldamus 060517 SemanticCreateCommand does not return the contexts of realSemanticCommand
@
text
@d63 1
a63 4
		IUndoContext[] contexts = this.realSemanticCommand.getContexts();
		for (int i = 0; i < contexts.length; i++) {
			addContext(contexts[i]);
		}
d83 1
a83 1
			return CommandResult.newOKCommandResult(requestAdapter);
d85 2
d94 3
a96 1
		return realSemanticCommand.getCommandResult();
d103 3
a105 1
		return realSemanticCommand.getCommandResult();
d123 36
@


1.4
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d18 1
d61 6
@


1.3
log
@Bugzilla Bug 112453 gmf_head DmitriStadnik 051013 SemanticCreateCommand should not fail when empty list is returned as a result of "real" command execution
@
text
@d15 1
d17 2
a21 2
import org.eclipse.jface.util.Assert;

d27 1
d52 1
a52 1
		super(realSemanticCommand.getLabel());
d62 5
a66 5
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doExecute(org.eclipse.core.runtime.IProgressMonitor)
	 */
	protected CommandResult doExecute(IProgressMonitor progressMonitor) {
		realSemanticCommand.execute(progressMonitor); 
d79 1
a79 1
			return newOKCommandResult(requestAdapter);
d84 4
a87 5
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doRedo()
	 */
	protected CommandResult doRedo() {
		realSemanticCommand.redo();
d91 4
a94 5
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doUndo()
	 */
	protected CommandResult doUndo() {
		realSemanticCommand.undo();
d98 2
a99 5
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.core.command.ICommand#isExecutable()
	 */
	public boolean isExecutable() {
		return realSemanticCommand.isExecutable();
d102 2
a103 5
	/*
	 * @@see org.eclipse.gef.commands.Command#canUndo()
	 */
	public boolean isUndoable() {
		return realSemanticCommand.isUndoable();
d106 2
a107 12
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.core.command.ICommand#isRedoable()
	 */
	public boolean isRedoable() {
		return realSemanticCommand.isUndoable();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.core.command.ICommand#getAffectedObjects()
	 */
	public Collection getAffectedObjects() {
		return realSemanticCommand.getAffectedObjects();
d109 4
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d70 1
a70 2
				if (!col.isEmpty())
					object = col.iterator().next();
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

