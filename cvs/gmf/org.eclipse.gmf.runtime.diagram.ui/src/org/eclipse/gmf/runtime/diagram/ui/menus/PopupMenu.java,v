head	1.3;
access;
symbols
	v20081023-2107:1.3
	v20081022-1925:1.3
	v20081022-1005:1.3
	v20081020-0700:1.3
	v20080917-1925:1.3
	v20080916-2008:1.3
	v20080911-1728:1.3
	v20080911-1506:1.3
	v20080910-1520:1.3
	v20080910-1510:1.3
	v20080903-1520:1.3
	v20080903-1510:1.3
	v20080813-1510:1.3
	v20080811-1546:1.3
	v20080731-1520:1.3
	v20080725-1738:1.3
	v20080723-2246:1.3
	v20080723-2232:1.3
	v20080723-1700:1.3
	v20080722-1827:1.3
	v20080718-1700:1.3
	v20080718-1731:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080603-1553:1.3
	v20080527-1255:1.3
	v20080527-1151:1.2
	v20080516-1748:1.3
	v20080516-1143:1.3
	v20080512-1200:1.3
	v20080503-1740:1.3
	v20080501-2127:1.2
	v20080501-1739:1.3
	m20080429-1543:1.2
	v20080425-1959:1.3
	v20080417-1610:1.3
	v20080407-2250:1.3
	v20080407-0930:1.2
	v20080404-1111:1.2
	v20080328-1605:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20080201-2010:1.2
	v20080201-0201:1.2
	v20080118-1129:1.2
	v20080114-2222:1.2
	v20080114-1111:1.2
	v20080107-1111:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071112-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070915-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.6
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070614-1400:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070518-1300:1.2
	bugzilla111892_group_support:1.2.0.4
	Root_bugzilla111892_group_support:1.2
	v20070504-1000:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070202-0200:1.2
	v20070119-1200:1.2
	v20070111-0800:1.2
	v20070105-1200:1.2
	v20070103-0300:1.2
	M4_20:1.2
	v20061218-1500:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061027-1200:1.2
	v20061013-1330:1.2
	v20061012-1100:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	v20060907-1100:1.2
	M1_20:1.2
	v20060831-1500:1.2
	v20060824-1600:1.2
	v20060817-1500:1.2
	v20060810-1700:1.2
	v20060803-1200:1.2
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.3
date	2008.04.08.02.16.38;	author ahunter;	state Exp;
branches;
next	1.2;
commitid	4d0547fad5804567;

1.2
date	2005.09.12.21.29.10;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.52;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[226065] gmf-head ahunter 080407 Fix warning: The type Assert is deprecated
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.menus;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.Assert;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;

/**
 * A simple pop-up menu with a list from which the user can select one item.
 * 
 * <p>
 * The <code>show()</code> method returns false if the user cancelled the
 * gesture or clicked outside the popup.
 * </p>
 * 
 * <p>
 * The <code>getResult()</code> method returns the result which is the object
 * from the content list that the user selected, or in the case of cascading
 * menus, a list of the results from each popup.
 * 
 * @@author cmahoney
 */
public class PopupMenu {

	/**
	 * An instance of this class can be created to add a submenu to a menu item
	 * in a <code>PopupMenu</code>.
	 */
	public static class CascadingMenu {

		/** the content of the parent menu item */
		private Object parentMenuItem;

		/** the sub menu */
		private PopupMenu subMenu;

		/**
		 * Creates a new <code>CascadingMenu</code>.
		 * 
		 * @@param aParentMenuItem
		 *            content of the parent menu item
		 * @@param aSubMenu
		 *            PopupMenu to be used as a submenu
		 */
		public CascadingMenu(Object aParentMenuItem, PopupMenu aSubMenu) {
			this.parentMenuItem = aParentMenuItem;
			this.subMenu = aSubMenu;
		}

		/**
		 * Gets the parentMenuItem.
		 * 
		 * @@return Returns the parentMenuItem.
		 */
		public Object getParentMenuItem() {
			return parentMenuItem;
		}

		/**
		 * Gets the subMenu.
		 * 
		 * @@return Returns the subMenu.
		 */
		public PopupMenu getSubMenu() {
			return subMenu;
		}
	}

	/**
	 * The content of this menu. Each entry in the list becomes a menu item.
	 */
	private List content;

	/**
	 * Provides the text and icon for each menu item.
	 */
	private ILabelProvider labelProvider;

	/**
	 * The object from the content list that the user selected. In the case of
	 * cascading menus, this will have multiple objects.
	 */
	private List resultList = new ArrayList();

	/**
	 * Creates a new <code>PopupMenu</code>.
	 * 
	 * @@param aContent
	 *            the content for the menu, each object in the list represents a
	 *            menu item
	 * @@param aLabelProvider
	 *            the label provider used to provide the text for each object in
	 *            the content list
	 */
	public PopupMenu(List aContent, ILabelProvider aLabelProvider) {
		setContent(aContent);
		setLabelProvider(aLabelProvider);
	}

	/**
	 * Shows the popup menu and sets the resultList selected by the user.
	 * 
	 * @@param parent
	 *            menu will be shown in this parent Control
	 * @@return true if this succeeded, false otherwise (e.g. if the user
	 *         cancelled the gesture).
	 */
	public boolean show(Control parent) {
		Menu menu = new Menu(parent);
		createMenuItems(menu, this, new ArrayList());

		menu.setVisible(true);

		Display display = menu.getDisplay();
		while (!menu.isDisposed() && menu.isVisible()) {
			if (!display.readAndDispatch())
				display.sleep();
		}

		if (!menu.isDisposed()) {
			menu.dispose();

			if (getResult() != null) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Creates the menu items based on the content list.
	 * 
	 * @@param parentMenu
	 *            the parent Menu that the menu items will be created in
	 * @@param rootMenu
	 *            the root level Menu
	 * @@param resultThusFar
	 *            List of content objects, e.g. CascadingMenu objects
	 */
	protected void createMenuItems(Menu parentMenu, final PopupMenu rootMenu,
			final List resultThusFar) {
		Assert.isNotNull(getContent());
		Assert.isNotNull(getLabelProvider());

		for (Iterator iter = getContent().iterator(); iter.hasNext();) {
			Object contentObject = iter.next();

			MenuItem menuItem;

			if (contentObject instanceof CascadingMenu) {
				PopupMenu subMenu = ((CascadingMenu) contentObject)
					.getSubMenu();
				contentObject = ((CascadingMenu) contentObject)
					.getParentMenuItem();
				List thisResult = new ArrayList(resultThusFar);
				thisResult.add(contentObject);
				menuItem = new MenuItem(parentMenu, SWT.CASCADE);
				menuItem.setMenu(new Menu(parentMenu));

				subMenu.createMenuItems(menuItem.getMenu(), rootMenu,
					thisResult);
			} else {
				menuItem = new MenuItem(parentMenu, SWT.NONE);
			}

			final Object fContentObject = contentObject;
			menuItem.setText(getLabelProvider().getText(contentObject));
			menuItem.setImage(getLabelProvider().getImage(contentObject));
			menuItem.addSelectionListener(new SelectionListener() {

				public void widgetSelected(SelectionEvent e) {
					resultThusFar.add(fContentObject);
					rootMenu.setResult(resultThusFar);
				}

				public void widgetDefaultSelected(SelectionEvent e) {
					resultThusFar.add(fContentObject);
					rootMenu.setResult(resultThusFar);
				}
			});
		}
	}

	/**
	 * Gets the content.
	 * 
	 * @@return Returns the content.
	 */
	protected List getContent() {
		return content;
	}

	/**
	 * Sets the content.
	 * 
	 * @@param aContent
	 *            The content of this menu. Each entry in the list becomes a
	 *            menu item.
	 */
	public void setContent(List aContent) {
		this.content = aContent;
	}

	/**
	 * Gets the labelProvider.
	 * 
	 * @@return Returns the labelProvider.
	 */
	protected ILabelProvider getLabelProvider() {
		return labelProvider;
	}

	/**
	 * Sets the labelProvider.
	 * 
	 * @@param aLabelProvider
	 *            Provides the text and icon for each menu item.
	 */
	public void setLabelProvider(ILabelProvider aLabelProvider) {
		this.labelProvider = aLabelProvider;
	}

	/**
	 * Gets the result which is the object from the content list that the user
	 * selected, or in the case of cascading menus, a list of the results from
	 * each popup.
	 * 
	 * @@return Returns the resultList.
	 */
	public Object getResult() {
		if (resultList == null || resultList.isEmpty()) {
			return null;
		} else if (resultList.size() == 1) {
			return resultList.get(0);
		}
		return resultList;
	}

	/**
	 * Sets the resultList.
	 * 
	 * @@param aResultList
	 *            The resultList to set.
	 */
	protected void setResult(List aResultList) {
		this.resultList = aResultList;
	}

}@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2005 IBM Corporation and others.
d18 1
a18 1
import org.eclipse.jface.util.Assert;
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

