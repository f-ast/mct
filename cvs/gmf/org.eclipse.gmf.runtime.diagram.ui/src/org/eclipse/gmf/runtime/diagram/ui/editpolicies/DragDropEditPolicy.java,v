head	1.7;
access;
symbols
	v20081023-2107:1.7
	v20081022-1925:1.7
	v20081022-1005:1.7
	v20081020-0700:1.7
	v20080917-1925:1.7
	v20080916-2008:1.7
	v20080911-1728:1.7
	v20080911-1506:1.7
	v20080910-1520:1.7
	v20080910-1510:1.7
	v20080903-1520:1.7
	v20080903-1510:1.7
	v20080813-1510:1.7
	v20080811-1546:1.7
	v20080731-1520:1.7
	v20080725-1738:1.7
	v20080723-2246:1.7
	v20080723-2232:1.7
	v20080723-1700:1.7
	v20080722-1827:1.7
	v20080718-1700:1.7
	v20080718-1731:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.6
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080610-1132:1.7
	v20080603-1553:1.7
	v20080527-1255:1.7
	v20080527-1151:1.7
	v20080516-1748:1.7
	v20080516-1143:1.7
	v20080512-1200:1.7
	v20080503-1740:1.7
	v20080501-2127:1.7
	v20080501-1739:1.7
	m20080429-1543:1.7
	v20080425-1959:1.7
	v20080417-1610:1.7
	v20080407-2250:1.7
	v20080407-0930:1.7
	v20080404-1111:1.7
	v20080328-1605:1.7
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20080201-2010:1.7
	v20080201-0201:1.7
	v20080118-1129:1.7
	v20080114-2222:1.7
	v20080114-1111:1.7
	v20080107-1111:1.7
	v20071222-1111:1.7
	v20071214-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.7
	v20071112-0000:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070518-1300:1.7
	bugzilla111892_group_support:1.7.0.2
	Root_bugzilla111892_group_support:1.7
	v20070504-1000:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.6.2.1
	v20070119-1200:1.6.2.1
	v20070111-0800:1.6.2.1
	v20070105-1200:1.6.2.1
	v20070103-0300:1.7
	M4_20:1.7
	v20061218-1500:1.6.2.1
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.6.2.1
	v20061013-1330:1.7
	v20061012-1100:1.6.2.1
	v20060925-1700:1.6.2.1
	v20060919-0800:1.6.2.1
	v20060907-1100:1.6
	M1_20:1.6
	v20060831-1500:1.6
	v20060824-1600:1.6
	v20060817-1500:1.6
	v20060810-1700:1.6
	v20060803-1200:1.6
	v20060728-0500:1.6
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060202-1415:1.4
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.7
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.14.18.39.49;	author ahunter;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.02.02.20.24.44;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.01.20.17.40;	author mmostafa;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.06;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.22;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.37;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.editpolicies.GraphicalEditPolicy;
import org.eclipse.gef.requests.ChangeBoundsRequest;
import org.eclipse.gef.tools.ToolUtilities;
import org.eclipse.swt.dnd.DND;
import org.eclipse.swt.graphics.Color;

import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.requests.DropObjectsRequest;
import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Abstract Implementation for all EditPolicies that deal with the
 * REQ_DRAG, REQ_DROP and REQ_DROP_EOBJECTS requests 
 * as defined in <code>org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants<code>
 * 
 * The default implementation REQ_DRAG is to cast it into a REQ_ORPHAN request
 * The default implementation REQ_DROP is to cast it into a REQ_ADD request
 * 
 * 
 * @@author melaasar
 */
public class DragDropEditPolicy extends GraphicalEditPolicy {

	/**
	 * the background feedback color
	 */
	private static final Color GRAY = new Color(null, 200, 200, 200);

	/**
	 * the original background color
	 */
	protected Color revertColor;

	/**
	 * the original opacity
	 */
	protected boolean opacity;

	/**
	 * This will only return a command if the host is resolvable so that 
	 * trying to drop on an unresolved shape will not be allowed.
	 * @@see org.eclipse.gef.EditPolicy#getCommand(Request)
	 */
	public Command getCommand(Request request) {
		if (RequestConstants.REQ_DRAG.equals(request.getType())) {
			return getDragCommand((ChangeBoundsRequest) request);
		} else if (RequestConstants.REQ_DROP.equals(request.getType())) {
			return getDropCommand((ChangeBoundsRequest) request);
		} else if (
			RequestConstants.REQ_DROP_OBJECTS.equals(request.getType())) {
			DropObjectsRequest dndRequest = (DropObjectsRequest) request;
			dndRequest.setRequiredDetail(getRequiredDragDetail(dndRequest));
			return getDropObjectsCommand(dndRequest);
		}
		return null;
	}

	/**
	 * gets a drag command
	 * @@param request the request
	 * @@return command
	 */
	protected Command getDragCommand(ChangeBoundsRequest request) {
		ChangeBoundsRequest req = new ChangeBoundsRequest(REQ_ORPHAN);
		req.setEditParts(request.getEditParts());
		req.setMoveDelta(request.getMoveDelta());
		req.setSizeDelta(request.getSizeDelta());
		req.setLocation(request.getLocation());
		req.setResizeDirection(request.getResizeDirection());
		return getHost().getCommand(req);
	}

	/**
	 * gets a drop command
	 * @@param request the request
	 * @@return command
	 */
	protected Command getDropCommand(ChangeBoundsRequest request) {
		ChangeBoundsRequest req = new ChangeBoundsRequest(REQ_ADD);
		req.setEditParts(request.getEditParts());
		req.setMoveDelta(request.getMoveDelta());
		req.setSizeDelta(request.getSizeDelta());
		req.setLocation(request.getLocation());
		req.setResizeDirection(request.getResizeDirection());
		Command cmd = getHost().getCommand(req);
		if (cmd == null || !cmd.canExecute()) {
			return getDropObjectsCommand(castToDropObjectsRequest(request));
		}
		
		return cmd;
	}

	/**
	 * getDropElementCommand
	 * Returns a command to handle a DropObjectsRequest of an EObject
	 * 
	 * @@param element EObject that is being dropped.
	 * @@param request DropObjectsRequest that the element has retrieved from.
	 * @@return Command that handles the dropping of the EObject element.
	 */
	protected Command getDropElementCommand(EObject element, DropObjectsRequest request) {
		return null;
	}
	
	/**
	 * getDropObjectsCommand
	 * This provides a generic implementation for handling the 
	 * DropObjectsRequest which checks for EObject and gets a command
	 * from the getDropEementCommand method.
	 * @@param request DropObjectsRequest that is being handled
	 * @@return Command that handles the request.
	 */
	protected Command getDropObjectsCommand(DropObjectsRequest request) {
		CompoundCommand cm = new CompoundCommand();
		Iterator elements = request.getObjects().iterator();
		while (elements.hasNext()) {
			Object obj = elements.next();
			if (obj instanceof EObject) {
				Command cmd = getDropElementCommand((EObject)obj, request);
			if (cmd != null)
				cm.add(cmd);
		}
		}
		
		if (cm.isEmpty())
			return null;
		
		return new ICommandProxy(new CommandProxy(cm.unwrap()));
	}

	/**
	 * @@see org.eclipse.gef.EditPolicy#getTargetEditPart(Request)
	 */
	public EditPart getTargetEditPart(final Request request) {
		return understandsRequest(request) ? getHost() : null;
	}

	/**
	 * Only understands DRAG, DROP and DROP_ELEMENTS requests.
	 * 
	 * @@return whether the request is supported
	 */
	public boolean understandsRequest(Request request) {
		return RequestConstants.REQ_MOVE.equals(request.getType())
			|| RequestConstants.REQ_DRAG.equals(request.getType())
			|| RequestConstants.REQ_DROP.equals(request.getType())
			|| RequestConstants.REQ_DROP_OBJECTS.equals(request.getType());
	}

	/**
	 * @@see org.eclipse.gef.EditPolicy#showTargetFeedback(org.eclipse.gef.Request)
	 */
	public void showTargetFeedback(Request request) {
		Command c = getCommand(request);
		if (c != null && c.canExecute()) {
			if (revertColor == null) {
				revertColor = getHostFigure().getBackgroundColor();
				opacity = getHostFigure().isOpaque();
				getHostFigure().setBackgroundColor(
					FigureUtilities.mixColors(GRAY, revertColor));
				getHostFigure().setOpaque(true);
			}
		}
	}

	/**
	 * @@see org.eclipse.gef.EditPolicy#eraseTargetFeedback(org.eclipse.gef.Request)
	 */
	public void eraseTargetFeedback(Request request) {
		if (revertColor != null) {
			getHostFigure().setBackgroundColor(revertColor);
			getHostFigure().setOpaque(opacity);
			revertColor = null;
		}
	}

	/**
	 * 
	 * @@param request
	 * @@return int 
	 */
	protected int getRequiredDragDetail(Request request) {
		return DND.DROP_COPY;
	}

	/**
	 * return the host Edit Part's semantic element, if the semantic element
	 * is <code>null</code> or unresolvable it will return <code>null</code>
	 * @@return EObject
	 */
	protected EObject getHostObject() {
		return ViewUtil
			.resolveSemanticElement((View) ((IGraphicalEditPart) getHost())
				.getModel());
	}

	/**
	 * Retrieves the list of elements being dropped
	 * @@param request the request
	 * @@return List of elements
	 */
	protected DropObjectsRequest castToDropObjectsRequest(ChangeBoundsRequest request) {
		Iterator editParts =
			ToolUtilities
				.getSelectionWithoutDependants(request.getEditParts())
				.iterator();

		List elements = new ArrayList();
		while (editParts.hasNext()) {
			EditPart editPart = (EditPart) editParts.next();
			if (editPart instanceof IGraphicalEditPart) {
				EObject element = ViewUtil
					.resolveSemanticElement((View) ((IGraphicalEditPart) editPart)
						.getModel());
				if (element != null)
					elements.add(element);
			}
		}

		DropObjectsRequest req = new DropObjectsRequest();
		req.setObjects(elements);
		req.setAllowedDetail(DND.DROP_COPY | DND.DROP_MOVE | DND.DROP_LINK);
		req.setLocation(request.getLocation());
		req.setRequiredDetail(getRequiredDragDetail(request));
		return req;
	}

}
@


1.6
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
@


1.6.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.5
log
@bugzilla 126238 gmf-head sshaw 060202 DragDropEditPolicy#getDropCommand doesn't call getDropElementCommand
@
text
@d29 1
a29 1
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
d155 1
a155 1
		return new EtoolsProxyCommand(new CommandProxy(cm.unwrap()));
@


1.4
log
@bugzilla 109923 gmf-head mmostafa 060201 Class names contain 'xtools'
@
text
@d112 6
a117 1
		return getHost().getCommand(req);
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d30 1
a30 1
import org.eclipse.gmf.runtime.diagram.ui.commands.XtoolsProxyCommand;
d150 1
a150 1
		return new EtoolsProxyCommand(new XtoolsProxyCommand(cm.unwrap()));
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d34 1
a34 1
import com.ibm.xtools.notation.View;
@

