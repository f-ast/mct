head	1.8;
access;
symbols
	v20081023-2107:1.8
	v20081022-1925:1.8
	v20081022-1005:1.8
	v20081020-0700:1.8
	v20080917-1925:1.8
	v20080916-2008:1.8
	v20080911-1728:1.8
	v20080911-1506:1.8
	v20080910-1520:1.8
	v20080910-1510:1.8
	v20080903-1520:1.8
	v20080903-1510:1.8
	v20080813-1510:1.8
	v20080811-1546:1.8
	v20080731-1520:1.8
	v20080725-1738:1.8
	v20080723-2246:1.8
	v20080723-2232:1.8
	v20080723-1700:1.8
	v20080722-1827:1.8
	v20080718-1700:1.8
	v20080718-1731:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080527-1255:1.8
	v20080527-1151:1.7
	v20080516-1748:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080503-1740:1.8
	v20080501-2127:1.7
	v20080501-1739:1.8
	m20080429-1543:1.7
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080407-2250:1.8
	v20080407-0930:1.7
	v20080404-1111:1.7
	v20080328-1605:1.7
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20080201-2010:1.7
	v20080201-0201:1.7
	v20080118-1129:1.7
	v20080114-2222:1.7
	v20080114-1111:1.7
	v20080107-1111:1.7
	v20071222-1111:1.7
	v20071214-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.7
	v20071112-0000:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070518-1300:1.7
	bugzilla111892_group_support:1.7.0.2
	Root_bugzilla111892_group_support:1.7
	v20070504-1000:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.6.2.1
	v20070119-1200:1.6.2.1
	v20070111-0800:1.6.2.1
	v20070105-1200:1.6.2.1
	v20070103-0300:1.7
	M4_20:1.7
	v20061218-1500:1.6.2.1
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.6.2.1
	v20061013-1330:1.7
	v20061012-1100:1.6.2.1
	v20060925-1700:1.6.2.1
	v20060919-0800:1.6.2.1
	v20060907-1100:1.6
	M1_20:1.6
	v20060831-1500:1.6
	v20060824-1600:1.6
	v20060817-1500:1.6
	v20060810-1700:1.6
	v20060803-1200:1.6
	v20060728-0500:1.6
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2008.04.08.02.16.38;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	4d0547fad5804567;

1.7
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.14.18.39.49;	author ahunter;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.04.24.19.53.42;	author mmostafa;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.25.19.38.14;	author cmahoney;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.04.22.13.15;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.09.13.17.48.55;	author cmahoney;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[226065] gmf-head ahunter 080407 Fix warning: The type Assert is deprecated
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.requests;

import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.RequestConstants;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.requests.CreateConnectionRequest;
import org.eclipse.gef.requests.CreationFactory;
import org.eclipse.gmf.runtime.diagram.core.commands.SetConnectionEndsCommand;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor;
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.View;

/**
 * 
 * 
 * A request to create new <code>IView</code> (s)
 * 
 * To instantiate this request, clients have to create a
 * <code>ConnectionViewDescriptor</code> or a list of
 * <code>ConnectionViewDescriptor</code> s filling it with view creation
 * parameters. The <code>ConnectionViewDescriptor</code> is a inner class to
 * this request
 * 
 * The request object can be used to obtain a view creation command from a
 * target <code>EditPart</code> Once such command is executed, the request
 * cannot be reused again to create another view. A different instance of the
 * reqyest has to be used instead
 * 
 * @@author melaasar
 * 
 */
public class CreateConnectionViewRequest
	extends CreateConnectionRequest {

	/**
	 * A specialized view descriptor for connection views
	 */
	public static class ConnectionViewDescriptor
		extends ViewDescriptor {

		/**
		 * Constructor.
		 * 
		 * @@param elementAdapter
		 * @@param preferencesHint
		 *            The preference hint that is to be used to find the
		 *            appropriate preference store from which to retrieve
		 *            diagram preference values. The preference hint is mapped
		 *            to a preference store in the preference registry <@@link
		 *            DiagramPreferencesRegistry>.
		 */
		public ConnectionViewDescriptor(IAdaptable elementAdapter,
				PreferencesHint preferencesHint) {
			super(elementAdapter, Edge.class, preferencesHint);
		}
        
        /**
         * Constructor.
         * 
         * @@param elementAdapter
         * @@param persisted
         *            indicates if ths connector will be created as a persisted
         *            connector or transient connector
         * @@param preferencesHint
         *            The preference hint that is to be used to find the
         *            appropriate preference store from which to retrieve
         *            diagram preference values. The preference hint is mapped
         *            to a preference store in the preference registry <@@link
         *            DiagramPreferencesRegistry>.
         */
        public ConnectionViewDescriptor(IAdaptable elementAdapter,
                boolean persisted, PreferencesHint preferencesHint) {
            super(elementAdapter, Edge.class,persisted, preferencesHint);
        }

		/**
		 * Constructor.
		 * 
		 * @@param elementAdapter
		 * @@param semanticHint
		 * @@param preferencesHint
		 *            The preference hint that is to be used to find the
		 *            appropriate preference store from which to retrieve
		 *            diagram preference values. The preference hint is mapped
		 *            to a preference store in the preference registry <@@link
		 *            DiagramPreferencesRegistry>.
		 */
		public ConnectionViewDescriptor(IAdaptable elementAdapter,
				String semanticHint, PreferencesHint preferencesHint) {
			super(elementAdapter, Edge.class, semanticHint, preferencesHint);
		}
        
        /**
         * Constructor.
         * 
         * @@param elementAdapter
         * @@param semanticHint
         * @@param persisted
         *            Indicates if the connector will be created as a transient
         *            or persisted connector 
         * @@param preferencesHint
         *            The preference hint that is to be used to find the
         *            appropriate preference store from which to retrieve
         *            diagram preference values. The preference hint is mapped
         *            to a preference store in the preference registry <@@link
         *            DiagramPreferencesRegistry>.
         */
        public ConnectionViewDescriptor(IAdaptable elementAdapter,
                String semanticHint,boolean persisted, PreferencesHint preferencesHint) {
            super(elementAdapter, Edge.class, semanticHint,persisted, preferencesHint);
        }

		/**
		 * Constructor.
		 * 
		 * @@param elementAdapter
		 * @@param semanticHint
		 * @@param index
		 */
		public ConnectionViewDescriptor(IAdaptable elementAdapter,
				String semanticHint, int index, PreferencesHint preferencesHint) {
			super(elementAdapter, Edge.class, semanticHint, index,
				preferencesHint);
		}

		/**
		 * Constructor.
		 * 
		 * @@param elementAdapter
		 * @@param semanticHint
		 * @@param index
		 * @@param persisted
		 *            flag to indicate if this view will be persisted or not
		 */
		public ConnectionViewDescriptor(IAdaptable elementAdapter,
				String semanticHint, int index, boolean persisted,
				PreferencesHint preferencesHint) {
			super(elementAdapter, Edge.class, semanticHint, index, persisted,
				preferencesHint);
		}
	}

	/**
	 * The connection view descriptor set by the user
	 */
	private ConnectionViewDescriptor connectionViewDescriptor;

	/**
	 * Constructor.
	 * 
	 * @@param element
	 *            a semantic element
	 */
	public CreateConnectionViewRequest(EObject element,
			PreferencesHint preferencesHint) {
		this(new ConnectionViewDescriptor(new EObjectAdapter(element),
			preferencesHint));
	}
    
    /**
     * Constructor.
     * 
     * @@param element
     *            a semantic element
     * @@param boolean
     *            indicate if the connection will be persisted or not
     */
    public CreateConnectionViewRequest(EObject element,
            boolean persisted, PreferencesHint preferencesHint) {
        this(new ConnectionViewDescriptor(new EObjectAdapter(element),
            persisted,preferencesHint));
    }

	/**
	 * Constructor.
	 * 
	 * @@param ViewDescriptor
	 *            a view descriptor
	 */
	public CreateConnectionViewRequest(ConnectionViewDescriptor ViewDescriptor) {
		Assert.isNotNull(ViewDescriptor);
		this.connectionViewDescriptor = ViewDescriptor;
	}

	/**
	 * Gets the descriptor for the connection view to be created.
	 * 
	 * @@return the descriptor
	 */
	public ConnectionViewDescriptor getConnectionViewDescriptor() {
		return connectionViewDescriptor;
	}

	/**
	 * An <code>IAdaptable</code> object that adapts to <code>IView</code>
	 * .class
	 * 
	 * @@see org.eclipse.gef.requests.CreateRequest#getNewObject()
	 */
	public Object getNewObject() {
		return getConnectionViewDescriptor();
	}

	/**
	 * The type is a <code>IAdaptable</code> object that adapters to
	 * <code>IView</code> .class
	 * 
	 * @@see org.eclipse.gef.requests.CreateRequest#getNewObjectType()
	 */
	public Object getNewObjectType() {
		return IAdaptable.class;
	}

	/**
	 * The factory mechanism is not used
	 * 
	 * @@throws UnsupportedOperationException
	 */
	protected CreationFactory getFactory() {
		throw new UnsupportedOperationException(
			"The Factory mechanism is not used"); //$NON-NLS-1$
	}

	/**
	 * The factory mechanism is not used
	 */

	public void setFactory(CreationFactory factory) {
		throw new UnsupportedOperationException(
			"The Factory mechanism is not used"); //$NON-NLS-1$
	}

	/**
	 * Method getCreateCommand.
	 * 
	 * @@param element
	 * @@param sourceEditPart
	 * @@param targetEditPart
	 * @@return Command
	 */
	public static Command getCreateCommand(EObject element,
			EditPart sourceEditPart, EditPart targetEditPart,
			PreferencesHint preferencesHint) {

		Assert.isNotNull(element);
		Assert.isNotNull(sourceEditPart);
		Assert.isNotNull(targetEditPart);
        boolean transientTargetOrSource = hasTransientSourceOrTarget(sourceEditPart, targetEditPart);

		CreateConnectionViewRequest request = new CreateConnectionViewRequest(
			element,!transientTargetOrSource, preferencesHint);

		request.setSourceEditPart(sourceEditPart);
		request.setTargetEditPart(targetEditPart);
		request.setType(RequestConstants.REQ_CONNECTION_START);
		sourceEditPart.getCommand(request);
		request.setType(RequestConstants.REQ_CONNECTION_END);
		return targetEditPart.getCommand(request);
	}

    private static boolean hasTransientSourceOrTarget(EditPart sourceEditPart, EditPart targetEditPart) {
        boolean transientTargetOrSource = hasTransientView(sourceEditPart);
        if (!transientTargetOrSource){
            transientTargetOrSource = hasTransientView(targetEditPart);
        }
        return transientTargetOrSource;
    }
    
    private static boolean hasTransientSourceOrTarget(IAdaptable sourceView,IAdaptable targetView) {
        boolean transientTargetOrSource = hasTransientView(sourceView);
        if (!transientTargetOrSource){
            transientTargetOrSource = hasTransientView(targetView);
        }
        return transientTargetOrSource;
    }

    private static boolean hasTransientView(EditPart sourceEditPart) {
        boolean transientTargetOrSource = false;
        if (sourceEditPart.getModel() instanceof View){
            View srcView = (View)sourceEditPart.getModel();
            if (ViewUtil.isTransient(srcView)){
                transientTargetOrSource = true;
            }
        }
        return transientTargetOrSource;
    }
    
    private static boolean hasTransientView(IAdaptable adaptable) {
        View view = (View)adaptable.getAdapter(View.class);
        if (view !=null){
            if (ViewUtil.isTransient(view)){
                return true;
            }
        }
        return false;
    }

	/**
	 * Method getCreateCommand Gets the command given a request, source and
	 * target edit parts. (No semantic element required.)
	 * 
	 * @@param request
	 * @@param sourceEditPart
	 * @@param targetEditPart
	 * @@return <code>Command</code>
	 */
	public static Command getCreateCommand(CreateConnectionViewRequest request,
			EditPart sourceEditPart, EditPart targetEditPart) {

		Assert.isNotNull(request);
		Assert.isNotNull(sourceEditPart);
		Assert.isNotNull(targetEditPart);

		request.setSourceEditPart(sourceEditPart);
		request.setTargetEditPart(targetEditPart);
		request.setType(RequestConstants.REQ_CONNECTION_START);
		sourceEditPart.getCommand(request);
		request.setType(RequestConstants.REQ_CONNECTION_END);
		return targetEditPart.getCommand(request);
	}

	/**
	 * getCreateCommand.
	 * 
	 * @@param elementAdapter
	 * @@param sourceViewAdapter
	 * @@param targetViewAdapter
	 * @@param diagramEditPart
	 * @@return Command
	 */
	public static Command getCreateCommand(IAdaptable elementAdapter,
			IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter,
			DiagramEditPart diagramEditPart, PreferencesHint preferencesHint) {

        Diagram diagram = diagramEditPart.getDiagramView().getDiagram();
        boolean transientTargetOrSource = hasTransientSourceOrTarget(sourceViewAdapter, targetViewAdapter);
		CreateCommand createCommand = new CreateCommand(diagramEditPart.getEditingDomain(),
			new ConnectionViewDescriptor(elementAdapter,!transientTargetOrSource, preferencesHint),
            diagram);

		IAdaptable viewAdapter = (IAdaptable) createCommand.getCommandResult()
			.getReturnValue();
        
        TransactionalEditingDomain editingDomain = diagramEditPart.getEditingDomain();

		SetConnectionEndsCommand sceCommand = new SetConnectionEndsCommand(editingDomain, 
			DiagramUIMessages.Commands_SetConnectionEndsCommand_Source);
		sceCommand.setEdgeAdaptor(viewAdapter);
		sceCommand.setNewSourceAdaptor(sourceViewAdapter);
		sceCommand.setNewTargetAdaptor(targetViewAdapter);

		CompositeTransactionalCommand cc = new CompositeTransactionalCommand(diagramEditPart.getEditingDomain(), null);
		cc.compose(createCommand);
		cc.compose(sceCommand);
		return new ICommandProxy(cc);
	}

	/**
	 * Method getCreateCommand.
	 * 
	 * @@param viewDescriptor
	 * @@param sourceViewAdapter
	 * @@param targetViewAdapter
	 * @@param diagramEditPart
	 * @@return Command
	 */
	public static Command getCreateCommand(ViewDescriptor viewDescriptor,
			IAdaptable sourceViewAdapter, IAdaptable targetViewAdapter,
			DiagramEditPart diagramEditPart) {

        Diagram diagram = diagramEditPart.getDiagramView().getDiagram();
		CreateCommand createCommand = new CreateCommand(diagramEditPart.getEditingDomain(), viewDescriptor,
            diagram);
		IAdaptable viewAdapter = (IAdaptable) createCommand.getCommandResult()
			.getReturnValue();
        TransactionalEditingDomain editingDomain = diagramEditPart.getEditingDomain();
		SetConnectionEndsCommand sceCommand = new SetConnectionEndsCommand(editingDomain, 
			DiagramUIMessages.Commands_SetConnectionEndsCommand_Source);
		sceCommand.setEdgeAdaptor(viewAdapter);
		sceCommand.setNewSourceAdaptor(sourceViewAdapter);
		sceCommand.setNewTargetAdaptor(targetViewAdapter);
		CompositeTransactionalCommand cc = new CompositeTransactionalCommand(diagramEditPart.getEditingDomain(), null);
		cc.compose(createCommand);
		cc.compose(sceCommand);
		return new ICommandProxy(cc);
	}
}
@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d14 1
a35 1
import org.eclipse.jface.util.Assert;
@


1.6
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@a21 1
import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;
d30 1
d376 1
a376 1
		CompositeCommand cc = new CompositeCommand(null);
d406 1
a406 1
		CompositeCommand cc = new CompositeCommand(null);
a410 1

@


1.6.2.1
log
@Bugzilla#157108 gmf_R1_0_maintenance cmahoney 060913 DeferredLayoutCommand and CreateConnectionViewRequest uses too much memory with their commands
Contributed by: Maneesh Goyal
@
text
@d22 1
a30 1
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
d376 1
a376 1
		CompositeTransactionalCommand cc = new CompositeTransactionalCommand(diagramEditPart.getEditingDomain(), null);
d406 1
a406 1
		CompositeTransactionalCommand cc = new CompositeTransactionalCommand(diagramEditPart.getEditingDomain(), null);
d411 1
@


1.5
log
@bugzilla 137833 gmf-head mmostafa 060424 CreateConnectorViewRequest always creates persistant edgs
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
d379 1
a379 1
		return new EtoolsProxyCommand(cc);
d409 1
a409 1
		return new EtoolsProxyCommand(cc);
@


1.4
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d25 1
d34 1
d80 19
d116 20
d183 14
d272 1
d275 1
a275 1
			element, preferencesHint);
d285 37
d360 1
d362 1
a362 1
			new ConnectionViewDescriptor(elementAdapter, preferencesHint),
a397 1

a399 1
        
a400 1

a404 1
		// sceCommand.setNewSourceTerminal("anchor"); //$NON-NLS-1$
a405 12
		// sceCommand.setNewTargetTerminal("anchor"); //$NON-NLS-1$

		// Need some bendpoints set, otherwise a null exception occurs
		// when the user tries to bend the .
		// SetBendpointsCommand sbbCommand = new SetBendpointsCommand();
		// sbbCommand.setConnectorAdapter(viewAdapter);
		// PointList pointList = new PointList();
		// pointList.addPoint(new Point(0, 0));
		// pointList.addPoint(new Point(0, 0));
		// sbbCommand.setNewPointList(pointList, new Point(0, 0), new Point(0,
		// 0));

a408 1
		// cc.compose(sbbCommand);
@


1.3
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d16 1
d31 1
d266 2
a267 1
		CreateCommand createCommand = new CreateCommand(
d269 1
a269 1
			diagramEditPart.getDiagramView().getDiagram());
d273 2
d276 1
a276 1
		SetConnectionEndsCommand sceCommand = new SetConnectionEndsCommand(
d301 3
a303 2
		CreateCommand createCommand = new CreateCommand(viewDescriptor,
			diagramEditPart.getDiagramView().getDiagram());
d307 2
d310 1
a310 1
		SetConnectionEndsCommand sceCommand = new SetConnectionEndsCommand(
@


1.2
log
@Bugzilla#113157 gmf_head cmahoney 051104 Updating tutorial guides and some comments with name changes
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d38 5
a42 4
 * To instantiate this request, clients have to create a <code>ConnectionViewDescriptor</code>
 * or a list of <code>ConnectionViewDescriptor</code> s filling it with view
 * creation parameters. The <code>ConnectionViewDescriptor</code> is a inner
 * class to this request
d48 1
a48 1
 *  
d52 2
a53 1
public class CreateConnectionViewRequest extends CreateConnectionRequest {
d58 3
a60 1
	public static class ConnectionViewDescriptor extends ViewDescriptor {
d66 5
a70 4
		 *            The preference hint that is to be used to find the appropriate
		 *            preference store from which to retrieve diagram preference
		 *            values. The preference hint is mapped to a preference store in
		 *            the preference registry <@@link DiagramPreferencesRegistry>.
d72 2
a73 1
		public ConnectionViewDescriptor(IAdaptable elementAdapter, PreferencesHint preferencesHint) {
d83 5
a87 4
		 *            The preference hint that is to be used to find the appropriate
		 *            preference store from which to retrieve diagram preference
		 *            values. The preference hint is mapped to a preference store in
		 *            the preference registry <@@link DiagramPreferencesRegistry>.
d89 2
a90 4
		public ConnectionViewDescriptor(
			IAdaptable elementAdapter,
			String semanticHint, 
			PreferencesHint preferencesHint) {
d101 4
a104 6
		public ConnectionViewDescriptor(
			IAdaptable elementAdapter,
			String semanticHint,
			int index, 
			PreferencesHint preferencesHint) {
			super(elementAdapter, Edge.class, semanticHint, index, preferencesHint);
d109 1
d113 2
a114 1
		 * @@param persisted flag to indicate if this view will be persisted or not
d116 4
a119 12
		public ConnectionViewDescriptor(
			IAdaptable elementAdapter,
			String semanticHint,
			int index,
			boolean persisted, 
			PreferencesHint preferencesHint) {
			super(
				elementAdapter,
				Edge.class,
				semanticHint,
				index,
				persisted,
a120 1
			}
d122 1
d130 1
a130 1
		 * Constructor.
d132 2
a133 1
	 * @@param element a semantic element
d135 4
a138 2
	public CreateConnectionViewRequest(EObject element, PreferencesHint preferencesHint) {
		this(new ConnectionViewDescriptor(new EObjectAdapter(element), preferencesHint));
a140 1

d142 1
a142 1
		 * Constructor.
d144 2
a145 1
	 * @@param ViewDescriptor a  view descriptor
d172 2
a173 2
	 * The type is a <code>IAdaptable</code> object that adapters to <code>IView</code>
	 * .class
d183 1
d187 2
a188 1
		throw new UnsupportedOperationException("The Factory mechanism is not used"); //$NON-NLS-1$
d196 2
a197 1
		throw new UnsupportedOperationException("The Factory mechanism is not used"); //$NON-NLS-1$
d208 3
a210 5
	public static Command getCreateCommand(
		EObject element,
		EditPart sourceEditPart,
		EditPart targetEditPart,
		PreferencesHint preferencesHint) {
d216 2
a217 2
		CreateConnectionViewRequest request =
			new CreateConnectionViewRequest(element, preferencesHint);
d226 1
a226 1
	
d228 2
a229 3
	 * Method getCreateCommand
	 * Gets the command given a request, source and target
	 * edit parts.  (No semantic element required.)
d236 2
a237 4
	public static Command getCreateCommand(
		CreateConnectionViewRequest request,
		EditPart sourceEditPart,
		EditPart targetEditPart) {
a250 1

d253 1
d260 7
a266 11
	public static Command getCreateCommand(
		IAdaptable elementAdapter,
		IAdaptable sourceViewAdapter,
		IAdaptable targetViewAdapter,
		DiagramEditPart diagramEditPart,
		PreferencesHint preferencesHint) {

		CreateCommand createCommand =
			new CreateCommand(
				new ConnectionViewDescriptor(elementAdapter, preferencesHint),
				diagramEditPart.getDiagramView().getDiagram());
d268 2
a269 2
		IAdaptable viewAdapter =
			(IAdaptable) createCommand.getCommandResult().getReturnValue();
d271 2
a272 1
		SetConnectionEndsCommand sceCommand = new SetConnectionEndsCommand(DiagramResourceManager.getI18NString("Commands.SetConnectionEndsCommand.Source")); //$NON-NLS-1$
d282 1
a282 1
	
d285 1
d292 3
a294 9
	public static Command getCreateCommand(
		ViewDescriptor viewDescriptor,
		IAdaptable sourceViewAdapter,
		IAdaptable targetViewAdapter,
		DiagramEditPart diagramEditPart) {

		CreateCommand createCommand =
			new CreateCommand(viewDescriptor,
				diagramEditPart.getDiagramView().getDiagram());
d296 2
a297 2
		IAdaptable viewAdapter =
			(IAdaptable) createCommand.getCommandResult().getReturnValue();
d299 5
a303 1
		SetConnectionEndsCommand sceCommand = new SetConnectionEndsCommand(DiagramResourceManager.getI18NString("Commands.SetConnectionEndsCommand.Source")); //$NON-NLS-1$
d306 1
a306 1
		//sceCommand.setNewSourceTerminal("anchor"); //$NON-NLS-1$
d308 1
a308 1
		//sceCommand.setNewTargetTerminal("anchor"); //$NON-NLS-1$
d312 7
a318 6
//		SetBendpointsCommand sbbCommand = new SetBendpointsCommand();
//		sbbCommand.setConnectorAdapter(viewAdapter);
//		PointList pointList = new PointList();
//		pointList.addPoint(new Point(0, 0));
//		pointList.addPoint(new Point(0, 0));
//		sbbCommand.setNewPointList(pointList, new Point(0, 0), new Point(0, 0));
d323 1
a323 1
//		cc.compose(sbbCommand);
d325 2
a326 2
	}	
	
@


1.1
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d38 1
a38 1
 * To instantiate this request, clients have to create a <code>ConnectorViewDescriptor</code>
@

