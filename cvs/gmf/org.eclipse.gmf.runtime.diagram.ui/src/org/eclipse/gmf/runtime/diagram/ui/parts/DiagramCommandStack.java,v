head	1.11;
access;
symbols
	v20081023-2107:1.11
	v20081022-1925:1.11
	v20081022-1005:1.11
	v20081020-0700:1.11
	v20080917-1925:1.11
	v20080916-2008:1.11
	v20080911-1728:1.11
	v20080911-1506:1.11
	v20080910-1520:1.11
	v20080910-1510:1.11
	v20080903-1520:1.11
	v20080903-1510:1.11
	v20080813-1510:1.11
	v20080811-1546:1.11
	v20080731-1520:1.11
	v20080725-1738:1.11
	v20080723-2246:1.11
	v20080723-2232:1.11
	v20080723-1700:1.11
	v20080722-1827:1.11
	v20080718-1700:1.11
	v20080718-1731:1.11
	v20080716-1600:1.11
	v20080716-1642:1.11
	R2_1_maintenance:1.11.0.6
	Root_R2_1_maintenance:1.11
	R2_1_0:1.11
	v20080610-1132:1.11
	v20080603-1553:1.11
	v20080527-1255:1.11
	v20080527-1151:1.11
	v20080516-1748:1.11
	v20080516-1143:1.11
	v20080512-1200:1.11
	v20080503-1740:1.11
	v20080501-2127:1.11
	v20080501-1739:1.11
	m20080429-1543:1.11
	v20080425-1959:1.11
	v20080417-1610:1.11
	v20080407-2250:1.11
	v20080407-0930:1.11
	v20080404-1111:1.11
	v20080328-1605:1.11
	v20080322-0000:1.11
	v20080222-1200:1.11
	v20080201-2010:1.11
	v20080201-0201:1.11
	v20080118-1129:1.11
	v20080114-2222:1.11
	v20080114-1111:1.11
	v20080107-1111:1.11
	v20071222-1111:1.11
	v20071214-1111:1.11
	v20071130-1111:1.11
	v20071124-0000:1.11
	v20071112-0000:1.11
	v20071108-0000:1.11
	v20071003-0000:1.11
	v20070915-0000:1.11
	v20070903-0000:1.11
	v20070809-0000:1.11
	R2_0_maintenance:1.11.0.4
	R2_0:1.11
	R4_20:1.11
	v20070621-0000:1.11
	RC3_20:1.11
	v20070614-1400:1.11
	v20070608-1300:1.11
	v20070605-1400:1.11
	v20070601-1400:1.11
	v20070525-1500:1.11
	v20070518-1300:1.11
	bugzilla111892_group_support:1.11.0.2
	Root_bugzilla111892_group_support:1.11
	v20070504-1000:1.11
	v20070420-1000:1.11
	v20070413-1300:1.11
	v20070330-1300:1.11
	v20060330-1300:1.11
	v20070322-1100:1.11
	v20060316-0600:1.11
	v20070221-1500:1.11
	v20070208-1800:1.11
	v20070202-0200:1.10.2.1
	v20070119-1200:1.10.2.1
	v20070111-0800:1.10.2.1
	v20070105-1200:1.10.2.1
	v20070103-0300:1.11
	M4_20:1.11
	v20061218-1500:1.10.2.1
	v20061218-1200:1.11
	v20061214-0000:1.11
	M3_20:1.11
	v20061117-0800:1.11
	v20061027-1200:1.10.2.1
	v20061013-1330:1.11
	v20061012-1100:1.10.2.1
	v20060925-1700:1.10.2.1
	v20060919-0800:1.10.2.1
	v20060907-1100:1.10.2.1
	M1_20:1.10
	v20060831-1500:1.10.2.1
	v20060824-1600:1.10.2.1
	v20060817-1500:1.10.2.1
	v20060810-1700:1.10.2.1
	v20060803-1200:1.10.2.1
	v20060728-0500:1.10.2.1
	v20060721-1130:1.10.2.1
	v20060713-1700:1.10.2.1
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	v20060627-1200:1.10
	v20060616-1400:1.10
	v20060616-1200:1.10
	v20060609-1400:1.9
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.9
	v20060519-0800:1.9
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.6
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.11
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.14.18.39.49;	author ahunter;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2006.05.12.15.02.29;	author mmostafa;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.23.23.12.24;	author sshaw;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.16.17.43.35;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.06.23.25.39;	author ldamus;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.01.20.17.40;	author mmostafa;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.26.22.46.45;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.45;	author sshaw;	state Exp;
branches;
next	;

1.10.2.1
date	2006.07.13.15.10.10;	author mmostafa;	state Exp;
branches;
next	;


desc
@@


1.11
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.parts;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EventObject;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.operations.IOperationHistory;
import org.eclipse.core.commands.operations.IOperationHistoryListener;
import org.eclipse.core.commands.operations.IUndoContext;
import org.eclipse.core.commands.operations.IUndoableOperation;
import org.eclipse.core.commands.operations.ObjectUndoContext;
import org.eclipse.core.commands.operations.OperationHistoryEvent;
import org.eclipse.core.commands.operations.OperationHistoryFactory;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CommandStack;
import org.eclipse.gef.commands.CommandStackListener;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.common.core.command.ICompositeCommand;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.internal.tools.ConnectionHandleTool;

/**
 * GEF command stack that delegates to an {@@link IOperationHistory}.
 * 
 * @@author sshaw
 * @@author Tauseef A, Israr
 * @@author ldamus
 */
public class DiagramCommandStack
    extends CommandStack {

    private Map stackToManager = new HashMap();

    private IDiagramEditDomain editDomain;

    private Command cmdRecent = null;

    private IOperationHistory delegate;

    private IUndoContext undoContext;

    private final class HistoryEventObject
        extends EventObject {

        private final OperationHistoryEvent event;

        private HistoryEventObject(OperationHistoryEvent event) {
            super(event.getHistory());
            this.event = event;
        }

        /**
         * Gets my operation history event.
         * 
         * @@return my operation history event.
         */
        public OperationHistoryEvent getOperationHistoryEvent() {
            return event;
        }
    }

    /**
     * Initializes me with my diagram edit domain and undo context.
     * 
     * @@param editDomain
     *            the editing domain assoicated with this stack
     * @@param undoContext
     *            my undo context
     */
    public DiagramCommandStack(IDiagramEditDomain editDomain) {
        this.editDomain = editDomain;
    }

    /**
     * Adds a listener to this CommandStack.
     * 
     * @@param listener
     *            The Object listening to this CommandStack.
     */
    public void addCommandStackListener(CommandStackListener listener) {

        final CommandStackListener csl = listener;
        // The removal of the listener here is done to avoid multiple
        // commandchangelisteners added to the commandmanager.
        // Tauseef Israr
        removeCommandStackListener(csl);

        IOperationHistoryListener cmcl = new IOperationHistoryListener() {

            public void historyNotification(OperationHistoryEvent event) {
                if (csl != null) {
                    csl.commandStackChanged(new HistoryEventObject(event));
                }
            }
        };

        stackToManager.put(csl, cmcl);
        getOperationHistory().addOperationHistoryListener(cmcl);
    }

    /**
     * Returns <code>true</code> if there is a Command to redo.
     * 
     * @@return <code>true</code> if there is a Command to redo.
     */
    public boolean canRedo() {
        return getOperationHistory().canRedo(getUndoContext());
    }

    /**
     * Returns <code>true</code> if the last Command executed can be undone.
     * 
     * @@return <code>true</code> if the last Command executed can be undone.
     */
    public boolean canUndo() {
        return getOperationHistory().canUndo(getUndoContext());
    }

    /**
     * Executes the given Command if it can execute.
     * 
     * @@param command
     *            The Command to execute.
     */
    public void execute(Command command) {
        execute(command, null);
    }

    /**
     * Executes the given Command if it can execute.
     * 
     * @@param command
     *            The Command to execute.
     * @@param progressMonitor
     */
    public void execute(Command command, IProgressMonitor progressMonitor) {
        if (command == null || !command.canExecute())
            return;
        execute(getICommand(command), progressMonitor);
    }

    /**
     * exectus a the supplied command
     * 
     * @@param command
     *            the command to execute
     */
    protected void execute(ICommand command) {
        execute(command, null);
    }

    /**
     * executes the supplied command
     * 
     * @@param command
     *            the command to exectue
     * @@param progressMonitor
     */
    protected void execute(ICommand command, IProgressMonitor progressMonitor) {

        if (progressMonitor != null) {
            try {
                command.addContext(getUndoContext());
                getOperationHistory().execute(command, progressMonitor, null);

            } catch (ExecutionException e) {
                Trace.catching(DiagramUIPlugin.getInstance(),
                    DiagramUIDebugOptions.EXCEPTIONS_CATCHING,
                    getClass(), "execute", e); //$NON-NLS-1$
                Log.error(DiagramUIPlugin.getInstance(),
                    DiagramUIStatusCodes.COMMAND_FAILURE, "execute", e); //$NON-NLS-1$
            } 
        } else {
            try {
                command.addContext(getUndoContext());
                getOperationHistory().execute(command,
                    new NullProgressMonitor(), null);

            } catch (ExecutionException e) {
                Trace.catching(DiagramUIPlugin.getInstance(),
                    DiagramUIDebugOptions.EXCEPTIONS_CATCHING,
                    getClass(), "execute", e); //$NON-NLS-1$
                Log.error(DiagramUIPlugin.getInstance(),
                    DiagramUIStatusCodes.COMMAND_FAILURE, "execute", e); //$NON-NLS-1$
            }
        }

    }
    

    /**
     * Converts a GEF {@@link Command} into a GMF {@@link ICommand}
     * 
     * @@param command
     *            the GEF command
     * @@return the GMF command
     */
    public static ICommand getICommand(Command command) {

        if (command instanceof CompoundCommand) {

            CompositeCommand composite = new CompositeCommand(
                command.getLabel());
            Object[] subCommands = ((CompoundCommand) command).getChildren();

            for (int i = 0; i < subCommands.length; i++) {
                composite.compose(getICommand((Command) subCommands[i]));
            }
            return composite.reduce();
        }

        if (command instanceof ICommandProxy) {
            return getICommand(((ICommandProxy) command).getICommand());
        }

        return new CommandProxy(command);
    }

    /**
     * Removes redundancies from <code>command</code> by stripping out layers
     * of command wrappers used to accomodate the use of GEF commands on an
     * {@@link IOperationHistory} and {@@link ICommand}s on the GEF
     * {@@link CommandStack}.
     * 
     * @@param command
     *            the command to be processed
     * @@return a command representing the simplified form of the input command.
     *         May be a new command.
     */
    public static ICommand getICommand(ICommand command) {

        ICommand result = command;

        if (command instanceof ICompositeCommand) {
            // process composite command
            List processedCommands = new ArrayList();

            ICompositeCommand composite = (ICompositeCommand) command;

            if (!composite.isEmpty()) {

                for (Iterator i = composite.iterator(); i.hasNext();) {
                    IUndoableOperation nextOperation = (IUndoableOperation) i
                        .next();

                    // remove the next child from the composite
                    i.remove();

                    // convert any GEF commands to GMF commands
                    if (nextOperation instanceof ICommand) {
                        ICommand nextCommand = (ICommand) nextOperation;
                        processedCommands.add(getICommand(nextCommand));

                    } else {
                        processedCommands.add(nextOperation);
                    }
                }

                // add all the children back
                for (Iterator i = processedCommands.iterator(); i.hasNext();) {
                    composite.add((IUndoableOperation) i.next());
                }

                // reduce to the simplest equivalent form
                result = composite.reduce();
            }

        } else if (command instanceof CommandProxy) {
        	// process GEF command proxy
            return getICommand(((CommandProxy) command).getCommand());
        }

        return result;
    }

    /**
     * Returns the most recently executed command.
     * 
     * @@return The most recently executed command.
     */
    public Command getMostRecentCommand() {
        return cmdRecent;
    }

    /**
     * getRedoCommand Returns the command at the top of the redo stack.
     * 
     * @@see org.eclipse.gef.commands.CommandStack#getRedoCommand()
     */
    public Command getRedoCommand() {
        if (getOperationHistory().canRedo(getUndoContext())) {
            Command emptyCmd = new Command() {
                // empty
            };

            IUndoableOperation redo = getOperationHistory().getRedoOperation(
                getUndoContext());
            emptyCmd.setLabel(redo.getLabel());
            return emptyCmd;
        }

        return null;
    }

    /**
     * getUndoCommand() Returns the next command to be undone.
     * 
     * @@see org.eclipse.gef.commands.CommandStack#getUndoCommand()
     */
    public Command getUndoCommand() {
        if (getOperationHistory().canUndo(getUndoContext())) {
            Command emptyCmd = new Command() {
                // empty
            };

            IUndoableOperation undo = getOperationHistory().getUndoOperation(
                getUndoContext());
            emptyCmd.setLabel(undo.getLabel());
            return emptyCmd;
        }

        return null;
    }

    /**
     * Executes the last undone Command.
     */
    public void redo() {
        cmdRecent = getRedoCommand();

        try {
            getOperationHistory().redo(getUndoContext(),
                new NullProgressMonitor(), null);

        } catch (ExecutionException e) {
            Trace.catching(DiagramUIPlugin.getInstance(),
                DiagramUIDebugOptions.EXCEPTIONS_CATCHING,
                ConnectionHandleTool.class, "redo", e); //$NON-NLS-1$
            Log.error(DiagramUIPlugin.getInstance(),
                DiagramUIStatusCodes.COMMAND_FAILURE, "redo", e); //$NON-NLS-1$
        }
    }

    /**
     * Removes the given CommandStackListener.
     * 
     * @@param listener
     *            The object to be removed from the list of listeners.
     */
    public void removeCommandStackListener(CommandStackListener listener) {
        final CommandStackListener csl = listener;

        if (csl != null) {
            IOperationHistoryListener historyListener = (IOperationHistoryListener) stackToManager
                .get(csl);

            if (historyListener != null) {
                getOperationHistory().removeOperationHistoryListener(
                    historyListener);
            }
            // mgoyal: removing from stack manager
            stackToManager.remove(csl);
        }
    }

    /**
     * Undoes the last executed Command.
     */
    public void undo() {
        cmdRecent = getUndoCommand();

        try {
            getOperationHistory().undo(getUndoContext(),
                new NullProgressMonitor(), null);

        } catch (ExecutionException e) {
            Trace.catching(DiagramUIPlugin.getInstance(),
                DiagramUIDebugOptions.EXCEPTIONS_CATCHING,
                ConnectionHandleTool.class, "undo", e); //$NON-NLS-1$
            Log.error(DiagramUIPlugin.getInstance(),
                DiagramUIStatusCodes.COMMAND_FAILURE, "undo", e); //$NON-NLS-1$
        }
    }

    /**
     * Returns the editDomain.
     * 
     * @@return IDiagramEditDomain
     */
    protected IDiagramEditDomain getDiagramEditDomain() {
        return editDomain;
    }

    /**
     * Gets my operation history delegate.
     * 
     * @@return my operation history delegate
     */
    protected IOperationHistory getOperationHistory() {

        if (delegate == null) {
            delegate = OperationHistoryFactory.getOperationHistory();
        }
        return delegate;
    }

    /**
     * Sets my operation history delegate.
     * 
     * @@param operationHistory
     *            my operation history delegate
     */
    public void setOperationHistory(IOperationHistory operationHistory) {
        this.delegate = operationHistory;
    }

    /**
     * Gets the return values of the given executed command
     * 
     * @@param c
     *            The command
     * @@return A collection of values returned by the given command
     */
    public static Collection getReturnValues(Command c) {
        if (c instanceof CompoundCommand) {
            CompoundCommand cc = (CompoundCommand) c;
            List l = new ArrayList(cc.size());
            for (Iterator i = cc.getCommands().iterator(); i.hasNext();)
                l.addAll(getReturnValues((Command) i.next()));
            return l;

        } else if (c instanceof ICommandProxy) {
            return getReturnValues((ICommandProxy) c);
        }
        return Collections.EMPTY_LIST;
    }

    /**
     * gets the return the values for the supplied command.
     * 
     * @@param cmd
     *            command to use
     * @@return a collection of return values
     */
    public static Collection getReturnValues(ICommandProxy cmd) {
        return getReturnValues(cmd.getICommand());
    }


    
    
    /**
     * gets the return the values for the supplied command.
     * @@param cmd command to use
     * @@return a collection of return values
     */
    public static Collection getReturnValues( CommandProxy cmd ) {
        return getReturnValues( cmd.getCommand() );
    }

    /**
     * gets the return the values for the supplied command.
     * 
     * @@param cmd
     *            command to use
     * @@return a collection of return values
     */
    public static Collection getReturnValues(ICommand cmd) {
        
        if (cmd instanceof ICompositeCommand) {
            ICompositeCommand cc = (ICompositeCommand) cmd;
            List l = new ArrayList();
            for (Iterator i = cc.iterator(); i.hasNext();) {
            	IUndoableOperation child = (IUndoableOperation) i.next();
            	if (child instanceof ICommand) {
            		l.addAll(getReturnValues((ICommand) child));
            	}
            }
            return l;
            
        } else if ( cmd instanceof CommandProxy ) { //
            // Need to recurse into the proxy command(s) since they
            // will not have set the CommandProxy result
            // This Could be moved into CommandProxy but
            // #getCommandResult() can no longer be final.
            return getReturnValues((CommandProxy)cmd);
        
        } else {
            CommandResult r = cmd.getCommandResult();
            Object o = r != null ? r.getReturnValue()
                : null;
            
            if (o instanceof Collection) {
                return (Collection) o;
                
            } else if (o != null) {
                return Collections.singletonList(o);
            }
        }
        
        return Collections.EMPTY_LIST;
    }

    /**
     * Gets my undo context. I add my context to all commands executed through
     * me.
     * 
     * @@return my undo context
     */
    public IUndoContext getUndoContext() {

        if (undoContext == null) {
            undoContext = new ObjectUndoContext(this);
        }
        return undoContext;
    }
    
    /**
     * Sets my undo context.
     * 
     * @@param undoContext
     *            my undo context
     */
    public void setUndoContext(IUndoContext undoContext) {
        this.undoContext = undoContext;
    }

    public void dispose() {
        // clean up the known listeners (if there is any remaining)
        // this will prevent clients from causing memory leaks
        Set entries = stackToManager.entrySet();
        for (Iterator iter = entries.iterator(); iter.hasNext();) {
            Map.Entry element = (Map.Entry) iter.next();
            IOperationHistoryListener historyListener = (IOperationHistoryListener) element.getValue();
            if (historyListener != null) {
                getOperationHistory().removeOperationHistoryListener(
                    historyListener);
            }
        }
        super.dispose();
    }

}@


1.10
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@a22 1
import java.util.Map.Entry;
@


1.10.2.1
log
@[110316] gmf_R1_0_maintenance mmostafa  060713 Compiler warning count should be 0 - runtime diagram layer components
@
text
@d23 1
@


1.9
log
@bugzilla 141551 gmf-head mmostafa 060512 Memory leaks in the Diagram layer cause the edit parts to stay in memory
@
text
@d46 1
a46 1
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
d242 2
a243 2
        if (command instanceof EtoolsProxyCommand) {
            return getICommand(((EtoolsProxyCommand) command).getICommand());
d462 2
a463 2
        } else if (c instanceof EtoolsProxyCommand) {
            return getReturnValues((EtoolsProxyCommand) c);
d475 1
a475 1
    public static Collection getReturnValues(EtoolsProxyCommand cmd) {
@


1.8
log
@bugzilla 132032 gmf-head sshaw 060323 Can't drop a semantic element onto a diagram from non-UI thread
@
text
@d22 2
d558 15
@


1.7
log
@[132142] gmf_head cdamus 060316 Problems in Undo/Redo of DestroyElementCommand
@
text
@a48 1
import org.eclipse.swt.widgets.Display;
a189 5
            DiagramGraphicalViewer viewer = getDiagramGraphicalViewer();

            if (viewer != null && Display.getCurrent() == null)
                viewer.enableUpdates(false);

d200 1
a200 4
            } finally {
                if (viewer != null)
                    viewer.enableUpdates(true);
            }
a217 16
    private DiagramGraphicalViewer getDiagramGraphicalViewer() {
        IDiagramEditDomain ded = getDiagramEditDomain();
        DiagramGraphicalViewer viewer = null;

        if (ded instanceof DiagramEditDomain) {
            IDiagramWorkbenchPart dgrmWP = ((DiagramEditDomain) ded)
                .getDiagramEditorPart();
            if (dgrmWP != null) {
                IDiagramGraphicalViewer dgv = ((DiagramEditDomain) ded)
                    .getDiagramEditorPart().getDiagramGraphicalViewer();
                if (dgv instanceof DiagramGraphicalViewer)
                    viewer = (DiagramGraphicalViewer) dgv;
            }
        }
        return viewer;
    }
@


1.6
log
@[130641] gmf_head ldamus 060306 Overriding the disposal of the DiagramEditor undo context is inconvenient
@
text
@d526 6
a531 2
            for (Iterator i = cc.iterator(); i.hasNext();)
                l.addAll(getReturnValues((ICommand) i.next()));
@


1.5
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@a329 16
     * Flushes my undo context from my delegate operation history.
     */
    public void flush() {
        getOperationHistory().dispose(getUndoContext(), true, true, false);
        super.flush();
    }
    
    /**
     * Flushes my operation history delegate.
     */
    public void dispose() {
        super.dispose();
        flush();
    }

    /**
@


1.4
log
@bugzilla 109923 gmf-head mmostafa 060201 Class names contain 'xtools'
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d17 1
d23 8
d32 1
a36 2
import org.eclipse.gmf.runtime.common.core.command.CommandManager;
import org.eclipse.gmf.runtime.common.core.command.CommandManagerChangeEvent;
d40 4
a43 1
import org.eclipse.gmf.runtime.common.core.command.ICommandManagerChangeListener;
d45 4
a48 3
import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.commands.XtoolsProxyCommand;
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;
d52 2
d55 2
a56 5
 * 
 * <p>
 * Editted by Tauseef A, Israr Feb 7, 2003 Included a protected get method for
 * the edit domain.
 * </p>
d59 184
a242 1
	extends CommandStack {
d244 8
a251 1
	private Map stackToManager = new HashMap();
d253 1
a253 1
	private IDiagramEditDomain editDomain;
d255 16
a270 1
	private Command cmdRecent = null;
d272 51
a322 179
	private CommandManager commandManager;

	/**
	 * constructor
	 * @@param editDomain the editing domain assoicated with this stack
	 */
	public DiagramCommandStack(IDiagramEditDomain editDomain) {
		this.editDomain = editDomain;
	}

	/**
	 * Adds a listener to this CommandStack.
	 * 
	 * @@param listener
	 *            The Object listening to this CommandStack.
	 */
	public void addCommandStackListener(CommandStackListener listener) {
		final CommandStackListener csl = listener;
		//The removal of the listener here is done to avoid multiple 
		//commandchangelisteners added to the commandmanager.
		//Tauseef Israr
		removeCommandStackListener(csl);	
		ICommandManagerChangeListener cmcl = new ICommandManagerChangeListener() {
			public void commandManagerChanged(CommandManagerChangeEvent event) {
				if (csl != null)
					csl.commandStackChanged(event);
			}
		};

		stackToManager.put(csl, cmcl);
		getCommandManager().addCommandManagerChangeListener(cmcl);
	}

	/**
	 * Returns <code>true</code> if there is a Command to redo.
	 * 
	 * @@return <code>true</code> if there is a Command to redo.
	 */
	public boolean canRedo() {
		return getCommandManager().canRedo();
	}

	/**
	 * Returns <code>true</code> if the last Command executed can be undone.
	 * 
	 * @@return <code>true</code> if the last Command executed can be undone.
	 */
	public boolean canUndo() {
		return getCommandManager().canUndo();
	}

	/**
	 * Executes the given Command if it can execute.
	 * 
	 * @@param command
	 *            The Command to execute.
	 */
	public void execute(Command command) {
		execute(command, null);
	}

	/**
	 * Executes the given Command if it can execute.
	 * 
	 * @@param command The Command to execute.
	 * @@param progressMonitor
	 */
	public void execute(Command command, IProgressMonitor progressMonitor) {
		if (command == null || !command.canExecute())
			return;
		execute(getICommand(command), progressMonitor);
	}


	/**
	 * exectus a the supplied command
	 * @@param command the command to execute
	 */
	protected void execute(ICommand command) {
		execute(command, null);
	}

	/**
	 * executes the supplied command
	 * @@param command the command to exectue
	 * @@param progressMonitor
	 */
	protected void execute(ICommand command, IProgressMonitor progressMonitor) {
		if (progressMonitor != null) {
			DiagramGraphicalViewer viewer = getDiagramGraphicalViewer();
			
			if (viewer != null && Display.getCurrent() == null)
				viewer.enableUpdates(false);
			
			try {
				getCommandManager().execute(command, progressMonitor);
			} finally {
				if (viewer != null)
					viewer.enableUpdates(true);
			}
		}
		else
			getCommandManager().execute(command);
	}

	private DiagramGraphicalViewer getDiagramGraphicalViewer() {
		IDiagramEditDomain ded = getDiagramEditDomain();
		DiagramGraphicalViewer viewer = null;
		
		if (ded instanceof DiagramEditDomain) {
			IDiagramWorkbenchPart dgrmWP = ((DiagramEditDomain)ded).getDiagramEditorPart();
			if (dgrmWP != null) {
				IDiagramGraphicalViewer dgv = ((DiagramEditDomain)ded).getDiagramEditorPart().getDiagramGraphicalViewer();
				if (dgv instanceof DiagramGraphicalViewer)
					viewer = (DiagramGraphicalViewer)dgv;
			}
		}
		return viewer;
	}

	/**
	 * A method to convert a GEF Command into Xtools ICommand
	 * 
	 * @@param command
	 * @@return <code>ICommand</code>
	 */
	public static ICommand getICommand(Command command) {
		if (command instanceof CompoundCommand) {
			CompositeCommand cc = new CompositeCommand(command.getLabel());
			Object[] subCommands = ((CompoundCommand) command).getChildren();
			for (int i = 0; i < subCommands.length; i++) {
				cc.compose(getICommand((Command) subCommands[i]));
			}
			return cc.unwrap();
		}
		if (command instanceof EtoolsProxyCommand) {
			return getICommand(((EtoolsProxyCommand) command).getICommand());
		}
		return new CommandProxy(command);
	}

	/**
	 * A method to remove redundancies from an Xtools ICommand
	 * @@param command 
	 * @@return <code>ICommand</code>
	 */
	public static ICommand getICommand(ICommand command) {

//		if (command instanceof CompositeModelActionCommand) {
//			CompositeModelActionCommand cc = new CompositeModelActionCommand(
//				command.getLabel());
//			List subCommands = ((CompositeCommand) command).getCommands();
//			for (int i = 0; i < subCommands.size(); i++) {
//				cc.compose(getICommand((ICommand) subCommands.get(i)));
//			}
//			return cc;
//		}

		if (command instanceof CompositeModelCommand) {
			CompositeModelCommand cc = new CompositeModelCommand(command
				.getLabel());
			List subCommands = ((CompositeCommand) command).getCommands();
			for (int i = 0; i < subCommands.size(); i++) {
				cc.compose(getICommand((ICommand) subCommands.get(i)));
			}
			return cc.unwrap();
		}

		if (command instanceof CompositeCommand) {
			CompositeCommand cc = new CompositeCommand(command.getLabel());
			List subCommands = ((CompositeCommand) command).getCommands();
			for (int i = 0; i < subCommands.size(); i++) {
				cc.compose(getICommand((ICommand) subCommands.get(i)));
			}
			return cc.unwrap();
		}
		if (command instanceof XtoolsProxyCommand) {
			return getICommand(((XtoolsProxyCommand) command).getCommand());
		}else if (command instanceof CommandProxy) {
a324 3
        
		return command;
	}
d326 194
a519 155
	/**
	 * Clears both the undo and redo stacks, then sends a notification to any
	 * object listening to the CommandStack.
	 */
	public void flush() {
		getCommandManager().clear();
	}

	/**
	 * Returns the most recently executed command.
	 * 
	 * @@return The most recently executed command.
	 */
	public Command getMostRecentCommand() {
		return cmdRecent;
	}

	/**
	 * getRedoCommand Returns the command at the top of the redo stack.
	 * 
	 * @@see org.eclipse.gef.commands.CommandStack#getRedoCommand()
	 */
	public Command getRedoCommand() {
		if (getCommandManager().canRedo()) {
			Command emptyCmd = new Command() {
				// empty
			};

			emptyCmd.setLabel(getCommandManager().getRedoLabel());
			return emptyCmd;
		}

		return null;
	}

	/**
	 * getUndoCommand() Returns the next command to be undone.
	 * 
	 * @@see org.eclipse.gef.commands.CommandStack#getUndoCommand()
	 */
	public Command getUndoCommand() {
		if (getCommandManager().canUndo()) {
			Command emptyCmd = new Command() {
				//empty
			};

			emptyCmd.setLabel(getCommandManager().getUndoLabel());
			return emptyCmd;
		}

		return null;
	}

	/**
	 * Executes the last undone Command.
	 */
	public void redo() {
		cmdRecent = getRedoCommand();
		getCommandManager().redo();
	}

	/**
	 * Removes the given CommandStackListener.
	 * 
	 * @@param listener
	 *            The object to be removed from the list of listeners.
	 */
	public void removeCommandStackListener(CommandStackListener listener) {
		final CommandStackListener csl = listener;
		if (csl != null) {
			ICommandManagerChangeListener cmcl = (ICommandManagerChangeListener) stackToManager
				.get(csl);
			if (cmcl != null)
				getCommandManager().removeCommandManagerChangeListener(cmcl);
			// mgoyal: removing from stack manager
			stackToManager.remove(csl);
		}
	}

	/**
	 * Undoes the last executed Command.
	 */
	public void undo() {
		cmdRecent = getUndoCommand();
		getCommandManager().undo();
	}

	/**
	 * Returns the editDomain.
	 * 
	 * @@return IDiagramEditDomain
	 */
	protected IDiagramEditDomain getDiagramEditDomain() {
		return editDomain;
	}

	/**
	 * Returns the commandManager.
	 * 
	 * @@return CommandManager
	 */
	protected CommandManager getCommandManager() {
		if (commandManager == null)
			return CommandManager.getDefault();
		return commandManager;
	}

	/**
	 * Sets the commandManager.
	 * 
	 * @@param commandManager
	 *            The commandManager to set
	 */
	protected void setCommandManager(CommandManager commandManager) {
		this.commandManager = commandManager;
	}

	/**
	 * Gets the return values of the given executed command
	 * 
	 * @@param c The command
	 * @@return A collection of values returned by the given command
	 */
	public static Collection getReturnValues(Command c) {
		if (c instanceof CompoundCommand) {
			CompoundCommand cc = (CompoundCommand)c;
			List l = new ArrayList(cc.size());
			for (Iterator i = cc.getCommands().iterator(); i.hasNext();)
				l.addAll(getReturnValues((Command) i.next()));
			return l;
			
		} 
		else if ( c instanceof EtoolsProxyCommand ) {
			return getReturnValues((EtoolsProxyCommand)c);
		}
		return Collections.EMPTY_LIST;
	}
	
	/**
	 * gets the return the values for the supplied command.
	 * @@param cmd command to use
	 * @@return a collection of return values
	 */
	public static Collection getReturnValues( EtoolsProxyCommand cmd ) {
		return getReturnValues( cmd.getICommand() );
	}

	/**
	 * gets the return the values for the supplied command.
	 * @@param cmd command to use
	 * @@return a collection of return values
	 */
	public static Collection getReturnValues( XtoolsProxyCommand cmd ) {
		return getReturnValues( cmd.getCommand() );
	}
a528 2
    
    
d530 17
a546 21
	/**
	 * gets the return the values for the supplied command.
	 * @@param cmd command to use
	 * @@return a collection of return values
	 */	
	public static Collection getReturnValues( ICommand cmd ) {
		if ( cmd instanceof CompositeCommand ) {
			CompositeCommand cc = (CompositeCommand)cmd;
			List l = new ArrayList();
			for (Iterator i = cc.getCommands().iterator(); i.hasNext();)
				l.addAll(getReturnValues((ICommand) i.next()));
			return l;
		}
		else if ( cmd instanceof XtoolsProxyCommand ) {	//
			// Need to recurse into the proxy command(s) since they
			// will not have set the CommandProxy result
			// This Could be moved into CommandProxy but
			// #getCommandResult() can no longer be final.
			return getReturnValues((XtoolsProxyCommand)cmd);
		}
        else if ( cmd instanceof CommandProxy ) { //
d552 12
d565 27
a591 13
		else {
			CommandResult r = cmd.getCommandResult(); 
			Object o = r != null ? r.getReturnValue() : null;
			if (o instanceof Collection) {
				return (Collection) o;
			}
			else if (o != null) {
				return Collections.singletonList(o);
			}
		}
		return Collections.EMPTY_LIST;
		
	}
@


1.3
log
@bugzilla 124678 gmf-head sshaw 060126 DeferredLayoutCommand needs to be thread safe
@
text
@d34 1
d194 1
a194 1
		return new XtoolsProxyCommand(command);
d234 4
a237 1
		}
d396 11
d423 2
a424 2
			// will not have set the XtoolsProxyCommand result
			// This Could be moved into XtoolsProxyCommand but
d428 7
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a26 1

d36 1
d143 13
a155 2
		if (progressMonitor != null)
			getCommandManager().execute(command, progressMonitor);
d160 15
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

