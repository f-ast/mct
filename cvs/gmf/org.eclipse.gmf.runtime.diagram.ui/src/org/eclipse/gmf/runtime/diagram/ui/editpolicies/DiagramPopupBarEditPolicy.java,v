head	1.9;
access;
symbols
	v20081023-2107:1.9
	v20081022-1925:1.9
	v20081022-1005:1.9
	v20081020-0700:1.9
	v20080917-1925:1.9
	v20080916-2008:1.9
	v20080911-1728:1.9
	v20080911-1506:1.9
	v20080910-1520:1.9
	v20080910-1510:1.9
	v20080903-1520:1.9
	v20080903-1510:1.9
	v20080813-1510:1.9
	v20080811-1546:1.9
	v20080731-1520:1.9
	v20080725-1738:1.9
	v20080723-2246:1.9
	v20080723-2232:1.9
	v20080723-1700:1.9
	v20080722-1827:1.9
	v20080718-1700:1.9
	v20080718-1731:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.6
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080527-1255:1.9
	v20080527-1151:1.9
	v20080516-1748:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080503-1740:1.9
	v20080501-2127:1.9
	v20080501-1739:1.9
	m20080429-1543:1.9
	v20080425-1959:1.9
	v20080417-1610:1.9
	v20080407-2250:1.9
	v20080407-0930:1.9
	v20080404-1111:1.9
	v20080328-1605:1.9
	v20080322-0000:1.9
	v20080222-1200:1.9
	v20080201-2010:1.9
	v20080201-0201:1.9
	v20080118-1129:1.9
	v20080114-2222:1.9
	v20080114-1111:1.9
	v20080107-1111:1.9
	v20071222-1111:1.9
	v20071214-1111:1.9
	v20071130-1111:1.9
	v20071124-0000:1.9
	v20071112-0000:1.9
	v20071108-0000:1.9
	v20071003-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.4
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070518-1300:1.9
	bugzilla111892_group_support:1.9.0.2
	Root_bugzilla111892_group_support:1.9
	v20070504-1000:1.9
	v20070420-1000:1.8
	v20070413-1300:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.3.2.2
	v20070119-1200:1.3.2.2
	v20070111-0800:1.3.2.2
	v20070105-1200:1.3.2.2
	v20070103-0300:1.5
	M4_20:1.5
	v20061218-1500:1.3.2.2
	v20061218-1200:1.5
	v20061214-0000:1.5
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.3.2.2
	v20061013-1330:1.4
	v20061012-1100:1.3.2.2
	v20060925-1700:1.3.2.2
	v20060919-0800:1.3.2.2
	v20060907-1100:1.3.2.1
	M1_20:1.3
	v20060831-1500:1.3.2.1
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060810-1700:1.3
	v20060803-1200:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060202-1415:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2007.05.02.15.18.34;	author crevells;	state Exp;
branches;
next	1.8;
commitid	2d404638abca4567;

1.8
date	2007.03.13.17.17.39;	author crevells;	state Exp;
branches;
next	1.7;
commitid	56bf45f6dcb34567;

1.7
date	2007.01.12.16.44.53;	author crevells;	state Exp;
branches;
next	1.6;
commitid	69ab45a7bb054567;

1.6
date	2007.01.10.15.13.06;	author crevells;	state Exp;
branches;
next	1.5;
commitid	56f745a502824567;

1.5
date	2006.11.24.20.13.45;	author crevells;	state Exp;
branches;
next	1.4;
commitid	6338456752794567;

1.4
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.14.18.23.31;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2006.06.12.20.00.53;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.08.30.20.50.53;	author cmahoney;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[176751] gmf_head crevells 070502 [UI Reduction/DefaultPaletteProvider] if all tool entries are filtered out the holding drawer has to be filtered out as well
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.Iterator;
import java.util.List;

import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.Tool;
import org.eclipse.gef.palette.PaletteContainer;
import org.eclipse.gef.palette.PaletteDrawer;
import org.eclipse.gef.palette.PaletteEntry;
import org.eclipse.gef.palette.PaletteGroup;
import org.eclipse.gef.palette.PaletteListener;
import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gef.palette.SelectionToolEntry;
import org.eclipse.gef.palette.ToolEntry;
import org.eclipse.gef.ui.palette.PaletteViewer;
import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;
import org.eclipse.gmf.runtime.diagram.ui.internal.services.palette.PaletteToolEntry;
import org.eclipse.gmf.runtime.diagram.ui.tools.CreationTool;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.gef.ui.internal.palette.PaletteStack;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.RGB;

/**
 * This is the default popup bar editpolicy installed on diagrams. The popup bar
 * is populated using the element types of the tools of the palette drawer of
 * the last selected palette tool. If the diagram was just opened, the popup bar
 * is populated using the element types of the tools of the palette drawer that
 * is initially open. If there is no drawer initially open, then
 * <code>fillWithDefaults()</code> is called to initially populate the popup
 * bar.
 * 
 * @@author cmahoney
 */
public class DiagramPopupBarEditPolicy
	extends PopupBarEditPolicy
	implements PaletteListener {

	/**
	 * Holds the last active palette tool.
	 */
	private ToolEntry theLastTool = null;

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.EditPolicy#activate()
	 */
	public void activate() {
		super.activate();
		addPaletteListener();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.EditPolicy#deactivate()
	 */
	public void deactivate() {
		removePaletteListener();
		super.deactivate();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editpolicies.PopupBarEditPolicy#fillActionDescriptors()
	 */
	protected void fillPopupBarDescriptors() {
		fillBasedOnLastActivePaletteTool();
		if (getPopupBarDescriptors().isEmpty()) {
			fillBasedOnOpenPaletteDrawer();
			if (getPopupBarDescriptors().isEmpty()) {
				fillWithDefaults();
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.palette.PaletteListener#activeToolChanged(org.eclipse.gef.ui.palette.PaletteViewer,
	 *      org.eclipse.gef.palette.ToolEntry)
	 */
	public void activeToolChanged(PaletteViewer palette, ToolEntry tool) {
		if (!(tool instanceof SelectionToolEntry)) {
			theLastTool = tool;
		}
	}

	/**
	 * Adds this edit policy as a palette listener.
	 */
	private void addPaletteListener() {
		PaletteViewer paletteViewer = getHost().getViewer().getEditDomain()
			.getPaletteViewer();
		if (paletteViewer != null) {
			paletteViewer.addPaletteListener(this);
		}
	}

	/**
	 * Removes this edit policy as a palette listener.
	 */
	private void removePaletteListener() {
		PaletteViewer paletteViewer = getHost().getViewer().getEditDomain()
			.getPaletteViewer();
		if (paletteViewer != null) {
			paletteViewer.removePaletteListener(this);
		}
		theLastTool = null;
	}

	/**
     * Adds popup bar descriptors for all the shape tools in the palette
     * container of the last active palette tool. Subclasses may override if
     * they wish to customize this behavior for their diagram.
     */
	protected void fillBasedOnLastActivePaletteTool() {
		if (theLastTool == null)
			return;

        // Find the palette group or drawer containing the last active tool.
        PaletteContainer container = theLastTool.getParent();
        if (container == null) {
            return;
        }
        
        while (!(container instanceof PaletteDrawer)
            && !(container instanceof PaletteGroup)
            && !(container instanceof PaletteRoot)
            && container.getParent() != null) {
            container = container.getParent();
        }
        
        // Make sure the palette container is still in the palette root and has
        // not been removed.  See bugzilla#176752.
        PaletteRoot realPaletteRoot = getHost().getViewer().getEditDomain()
            .getPaletteViewer().getPaletteRoot();
        PaletteContainer paletteRoot = container;
        boolean sameRoot = false;
        while (paletteRoot != null) {
            paletteRoot = paletteRoot.getParent();
            if (paletteRoot == realPaletteRoot) {
                sameRoot = true;
                break;
            }
        }

        if (sameRoot) {
            fillWithPaletteToolsInContainer(container);
        }
 	}

    /**
     * Adds popup bar descriptors for all the shape tools in the given palette
     * container. Subclasses may override if they wish to customize this
     * behavior for their diagram.
     * 
     * @@param palContainer
     *            the <code>PaletteContainer</code>
     */
    protected void fillWithPaletteToolsInContainer(PaletteContainer palContainer) {
		if (palContainer != null) {
			List theEntries = palContainer.getChildren();
			int isz = theEntries.size();
			for (int i = 0; i < isz; i++) {
				PaletteEntry theEntry = (PaletteEntry) theEntries.get(i);

				if (theEntry != null) {
					if (theEntry instanceof PaletteToolEntry) {
						PaletteToolEntry theXtoolsEntry = (PaletteToolEntry) theEntry;
						Tool tempTool = theXtoolsEntry.createTool();
						if ((tempTool != null)
							&& (tempTool instanceof CreationTool)) {
							CreationTool theXtoolsTool = (CreationTool) tempTool;
							IElementType theToolType = theXtoolsTool
								.getElementType();
							if ((theToolType != null)) {
								
								Image image = IconService.getInstance().getIcon(theToolType);
                                
                                // Workaround for mirroring and SWT.ICON issue
                                if (image != null && image.type == SWT.ICON && isMirrored()) {
                                    image = convert(image);
                                }
								
								addPopupBarDescriptor(theToolType, image);
							}
						}
					} else if (theEntry instanceof PaletteStack) {
						// add all the entries from a palette stack as well
						PaletteStack theStack = (PaletteStack) theEntry;
						fillWithPaletteToolsInContainer(theStack);
					}
				}
			}
		}
	}
	
	private boolean isMirrored() {
		return ((getHost().getViewer().getControl().getStyle() & SWT.MIRRORED) != 0);
	}
	
	private Image convert( Image srcImage) {
		int height = srcImage.getBounds().height;
		int width = srcImage.getBounds().width;
		
		ImageData srcImageData = srcImage.getImageData();
		
		RGB backgroundRGB = ((GraphicalEditPart) getHost()).getFigure().getBackgroundColor().getRGB();
		int backgroundColor = srcImageData.palette.getPixel(backgroundRGB);		

		// Set the transparent pixels to the background color
		int count = 0;
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				if (((srcImageData.maskData[count>>3] >> (7-(count % 8))) & 1) == 0) {
					srcImageData.setPixel(x, y, backgroundColor);
				}
				count++;				
			}
		}
		srcImageData.maskData = null;

		Image convertedImage = ImageDescriptor.createFromImageData(srcImageData).createImage(srcImage.getDevice());
		
		imagesToBeDisposed.add(convertedImage);
		
		return convertedImage;
	}	
	

	/**
     * Adds popup bar descriptors for all the shape tools in the palette drawer
     * that is initially open. Subclasses may override if they wish to customize
     * this behavior for their diagram.
     */
    protected void fillBasedOnOpenPaletteDrawer() {
		PaletteViewer paletteViewer = getHost().getViewer().getEditDomain()
			.getPaletteViewer();
        
        if (paletteViewer != null) {
            for (Iterator iter = paletteViewer.getPaletteRoot().getChildren()
                .iterator(); iter.hasNext();) {
                Object child = iter.next();
                if (child instanceof PaletteDrawer) {
                    PaletteDrawer drawer = (PaletteDrawer) child;
                    if (drawer.isInitiallyOpen()) {
                        fillWithPaletteToolsInContainer(drawer);
                        break;
                    }
                }
            }
        }
	}

	/**
	 * Subclasses can override to provide default tools if the popup bar cannot
	 * be populated based on the state of the palette.
	 */
	protected void fillWithDefaults() {
		// by default, add no popup bar descriptors.
	}

}@


1.8
log
@[176752] gmf_head crevells 070313 DiagramPopupBarEditPolicy should update popupbar contents based on capability changes to palette
@
text
@d140 4
@


1.7
log
@gmf_head crevells 061012 Updated year in copyright in missed files
@
text
@d147 18
a164 2
		fillWithPaletteToolsInContainer(container);
	}
d253 1
@


1.6
log
@[166840] gmf_head crevells 070110 Access Specifier of DiagramPopupBarEditPolicy.class
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.5
log
@[158027] gmf_head crevells 061124 Diagram popup bar does not appear at all if there are missing icons
@
text
@d130 5
a134 4
	 * Adds popup bar descriptors for all the shape tools in the palette
	 * container of the last active palette tool.
	 */
	private void fillBasedOnLastActivePaletteTool() {
d151 8
a158 7
	 * Adds popup bar descriptors for all the shape tools in the given palette
	 * container.
	 * 
	 * @@param palContainer
	 *            the <code>PaletteContainer</code>
	 */
	private void fillWithPaletteToolsInContainer(PaletteContainer palContainer) {
d230 5
a234 4
	 * Adds popup bar descriptors for all the shape tools in the palette drawer
	 * that is initially open.
	 */
	private void fillBasedOnOpenPaletteDrawer() {
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d175 5
a180 4
								// Workaround for mirroring and SWT.ICON issue
								if (image.type == SWT.ICON && isMirrored()) {
									image = convert(image);
								}
@


1.3
log
@[142109] gmf_head tmacdoug 060614 TVT3.2:TCT502: AR: GMF: Tool Tips from the Popup Bar disappears.
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d22 1
d24 1
a58 8
	// /**
	// * Creates a new instance.
	// */
	// public DiagramPopupBarEditPolicy() {
	// super();
	// this.setIsDisplayAtMouseHoverLocation(true);
	// }

d137 10
a146 2
		PaletteContainer palContainer = theLastTool.getParent();
		fillWithPaletteToolsInContainer(palContainer);
d149 1
a149 1
	/**
d184 1
a184 1
						// RATLC00524208: fix for the pallete stack optimzation
@


1.3.2.1
log
@Bugzilla#155448 gmf_R1_0_maintenance cmahoney 060830 Popupbar should show all tools from palette not just from one group
@
text
@a21 1
import org.eclipse.gef.palette.PaletteGroup;
a22 1
import org.eclipse.gef.palette.PaletteRoot;
d57 8
d143 2
a144 10
        // Find the palette group or drawer containing the last active tool.
        PaletteContainer container = theLastTool.getParent();
        while (!(container instanceof PaletteDrawer)
            && !(container instanceof PaletteGroup)
            && !(container instanceof PaletteRoot)
            && container.getParent() != null) {
            container = container.getParent();
        }
        
		fillWithPaletteToolsInContainer(container);
d147 1
a147 1
    /**
d182 1
a182 1
						// add all the entries from a palette stack as well
@


1.3.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla#146103 gmf_head cmahoney 060609 DiagramPopupBarEditPolicy assumes that there is a palette for the diagram
@
text
@d17 1
d31 5
d171 8
a178 2
								addPopupBarDescriptor(theToolType, IconService
									.getInstance().getIcon(theToolType));
d190 33
@


1.1
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d186 13
a198 11
		for (Iterator iter = paletteViewer.getPaletteRoot().getChildren()
			.iterator(); iter.hasNext();) {
			Object child = iter.next();
			if (child instanceof PaletteDrawer) {
				PaletteDrawer drawer = (PaletteDrawer) child;
				if (drawer.isInitiallyOpen()) {
					fillWithPaletteToolsInContainer(drawer);
					break;
				}
			}
		}
@

