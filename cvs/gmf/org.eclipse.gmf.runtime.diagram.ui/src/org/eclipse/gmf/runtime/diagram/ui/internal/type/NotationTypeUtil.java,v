head	1.2;
access;
symbols
	v20081023-2107:1.2
	v20081022-1925:1.2
	v20081022-1005:1.2
	v20081020-0700:1.2
	v20080917-1925:1.2
	v20080916-2008:1.2
	v20080911-1728:1.2
	v20080911-1506:1.2
	v20080910-1520:1.2
	v20080910-1510:1.2
	v20080903-1520:1.2
	v20080903-1510:1.2
	v20080813-1510:1.2
	v20080811-1546:1.2
	v20080731-1520:1.2
	v20080725-1738:1.2
	v20080723-2246:1.2
	v20080723-2232:1.2
	v20080723-1700:1.2
	v20080722-1827:1.2
	v20080718-1700:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080603-1553:1.2
	v20080527-1255:1.2
	v20080527-1151:1.2
	v20080516-1748:1.2
	v20080516-1143:1.2
	v20080512-1200:1.2
	v20080503-1740:1.2
	v20080501-2127:1.2
	v20080501-1739:1.2
	m20080429-1543:1.2
	v20080425-1959:1.2
	v20080417-1610:1.2
	v20080407-2250:1.2
	v20080407-0930:1.2
	v20080404-1111:1.2
	v20080328-1605:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20080201-2010:1.2
	v20080201-0201:1.2
	v20080118-1129:1.2
	v20080114-2222:1.2
	v20080114-1111:1.2
	v20080107-1111:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071112-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070915-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070614-1400:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070518-1300:1.2
	bugzilla111892_group_support:1.2.0.2
	Root_bugzilla111892_group_support:1.2
	v20070504-1000:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070202-0200:1.1.2.1
	v20070119-1200:1.1.2.1
	v20070111-0800:1.1.2.1
	v20070105-1200:1.1.2.1
	v20070103-0300:1.2
	M4_20:1.2
	v20061218-1500:1.1.2.1
	v20061218-1200:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061027-1200:1.1.2.1
	v20061013-1330:1.2
	v20061012-1100:1.1.2.1
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	v20060907-1100:1.1.2.1
	v20060831-1500:1.1.2.1
	v20060824-1600:1.1.2.1
	v20060817-1500:1.1.2.1
	v20060810-1700:1.1.2.1
	v20060803-1200:1.1.2.1
	R1_0_maintenance:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.02.19.31.24;	author ldamus;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.08.02.19.31.24;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.type;

import org.eclipse.gmf.runtime.diagram.ui.util.INotationType;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.ISpecializationType;
import org.eclipse.gmf.runtime.emf.type.core.NullElementType;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Defines utility methods for notation type views.
 * 
 * @@author ldamus
 */
public class NotationTypeUtil {

	/**
	 * Relies on the fact the INotationType is used to distinguish notation-only
	 * elements and connections at the time of their creation.
	 * 
	 * @@param view
	 *            the view to be tested; must never be <code>null</code>
	 */
	public static boolean hasNotationType(View view) {
		return getNotationType(view) != null;
	}

	private static INotationType getNotationType(View view) {

		ISpecializationType[] specializations = ElementTypeRegistry
				.getInstance().getSpecializationsOf(NullElementType.ID);

		for (int i = 0; i < specializations.length; i++) {
			ISpecializationType nextSpecialization = specializations[i];

			if (nextSpecialization instanceof INotationType) {
				String notationHint = ((INotationType) nextSpecialization)
						.getSemanticHint();

				if (notationHint != null) {

					if (notationHint.equals(view.getType())) {
						return (INotationType) nextSpecialization;
					}
				}
			}
		}
		return null;
	}
}
@


1.1
log
@file NotationTypeUtil.java was initially added on branch R1_0_maintenance.
@
text
@d1 60
@


1.1.2.1
log
@[151097] gmf_R1_0_maintenance ldamus 060802 Connections with semantic meaning can be incorrectly reoriented to shapes
@
text
@a0 60
/******************************************************************************
 * Copyright (c) 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.type;

import org.eclipse.gmf.runtime.diagram.ui.util.INotationType;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.ISpecializationType;
import org.eclipse.gmf.runtime.emf.type.core.NullElementType;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Defines utility methods for notation type views.
 * 
 * @@author ldamus
 */
public class NotationTypeUtil {

	/**
	 * Relies on the fact the INotationType is used to distinguish notation-only
	 * elements and connections at the time of their creation.
	 * 
	 * @@param view
	 *            the view to be tested; must never be <code>null</code>
	 */
	public static boolean hasNotationType(View view) {
		return getNotationType(view) != null;
	}

	private static INotationType getNotationType(View view) {

		ISpecializationType[] specializations = ElementTypeRegistry
				.getInstance().getSpecializationsOf(NullElementType.ID);

		for (int i = 0; i < specializations.length; i++) {
			ISpecializationType nextSpecialization = specializations[i];

			if (nextSpecialization instanceof INotationType) {
				String notationHint = ((INotationType) nextSpecialization)
						.getSemanticHint();

				if (notationHint != null) {

					if (notationHint.equals(view.getType())) {
						return (INotationType) nextSpecialization;
					}
				}
			}
		}
		return null;
	}
}
@

