head	1.19;
access;
symbols
	v20081023-2107:1.19
	v20081022-1925:1.19
	v20081022-1005:1.19
	v20081020-0700:1.19
	v20080917-1925:1.19
	v20080916-2008:1.19
	v20080911-1728:1.19
	v20080911-1506:1.19
	v20080910-1520:1.19
	v20080910-1510:1.19
	v20080903-1520:1.19
	v20080903-1510:1.19
	v20080813-1510:1.19
	v20080811-1546:1.19
	v20080731-1520:1.19
	v20080725-1738:1.19
	v20080723-2246:1.19
	v20080723-2232:1.19
	v20080723-1700:1.19
	v20080722-1827:1.19
	v20080718-1700:1.19
	v20080718-1731:1.19
	v20080716-1600:1.19
	v20080716-1642:1.19
	R2_1_maintenance:1.19.0.2
	Root_R2_1_maintenance:1.19
	R2_1_0:1.19
	v20080610-1132:1.19
	v20080603-1553:1.19
	v20080527-1255:1.19
	v20080527-1151:1.17
	v20080516-1748:1.19
	v20080516-1143:1.19
	v20080512-1200:1.19
	v20080503-1740:1.19
	v20080501-2127:1.17
	v20080501-1739:1.19
	m20080429-1543:1.17
	v20080425-1959:1.19
	v20080417-1610:1.19
	v20080407-2250:1.19
	v20080407-0930:1.19
	v20080404-1111:1.19
	v20080328-1605:1.19
	v20080322-0000:1.18
	v20080222-1200:1.18
	v20080201-2010:1.18
	v20080201-0201:1.17
	v20080118-1129:1.17
	v20080114-2222:1.17
	v20080114-1111:1.18
	v20080107-1111:1.17
	v20071222-1111:1.17
	v20071214-1111:1.17
	v20071130-1111:1.17
	v20071124-0000:1.17
	v20071112-0000:1.17
	v20071108-0000:1.17
	v20071003-0000:1.17
	v20070915-0000:1.17
	v20070903-0000:1.17
	v20070809-0000:1.17
	R2_0_maintenance:1.17.0.2
	R2_0:1.17
	R4_20:1.17
	v20070621-0000:1.17
	RC3_20:1.17
	v20070614-1400:1.17
	v20070608-1300:1.17
	v20070605-1400:1.17
	v20070601-1400:1.17
	v20070525-1500:1.17
	v20070518-1300:1.16
	bugzilla111892_group_support:1.16.0.2
	Root_bugzilla111892_group_support:1.16
	v20070504-1000:1.15
	v20070420-1000:1.14
	v20070413-1300:1.14
	v20070330-1300:1.14
	v20060330-1300:1.14
	v20070322-1100:1.14
	v20060316-0600:1.14
	v20070221-1500:1.14
	v20070208-1800:1.14
	v20070202-0200:1.13.2.1
	v20070119-1200:1.13.2.1
	v20070111-0800:1.13.2.1
	v20070105-1200:1.13.2.1
	v20070103-0300:1.14
	M4_20:1.14
	v20061218-1500:1.13.2.1
	v20061218-1200:1.14
	v20061214-0000:1.14
	M3_20:1.14
	v20061117-0800:1.14
	v20061027-1200:1.13.2.1
	v20061013-1330:1.14
	v20061012-1100:1.13.2.1
	v20060925-1700:1.13.2.1
	v20060919-0800:1.13.2.1
	v20060907-1100:1.13
	M1_20:1.13
	v20060831-1500:1.13
	v20060824-1600:1.13
	v20060817-1500:1.13
	v20060810-1700:1.13
	v20060803-1200:1.13
	v20060728-0500:1.13
	v20060721-1130:1.13
	v20060713-1700:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060616-1400:1.13
	v20060616-1200:1.13
	v20060609-1400:1.13
	v20060531-1730:1.13
	v20060530-1930:1.12
	v20060526-1200:1.12
	v20060519-0800:1.12
	v20060512-1000:1.12
	I20060512-1000:1.12
	I20060505-1400:1.12
	I20060428-1300:1.12
	I20060424-0500:1.12
	I20060424-0300:1.12
	M6_10:1.12
	I20060407-1200:1.11
	I20060331-1000:1.11
	I20060324-0300:1.10
	I20060317-1300:1.10
	I20060317-1200:1.10
	I20060316-1300:1.10
	I20060309-1300:1.10
	M5_10:1.10
	S20060303-1600:1.10
	I20060227-1730:1.9
	I20060216-1945:1.9
	I20060210-1715:1.9
	I20060209-1815:1.9
	I20060203-0830:1.9
	I20060202-1415:1.9
	I20060129-1145:1.9
	I20060127-0900:1.9
	I20060120-1530:1.8
	I20060113-1700:1.8
	M4_10:1.8
	I20060107-1100:1.8
	I20060105-1630:1.8
	I20051230-1230:1.8
	I20051223-1100:1.8
	I20051217-0925:1.8
	I20051208-2000:1.8
	I20051201-1800:1.8
	I20051124-2000:1.7
	M3_10:1.6
	I20051118-1245:1.6
	I20051111-1800:1.6
	I20051106-0900:1.6
	v20051030:1.5;
locks; strict;
comment	@# @;


1.19
date	2008.03.25.18.13.36;	author crevells;	state Exp;
branches;
next	1.18;
commitid	42dc47e940cf4567;

1.18
date	2008.01.11.15.59.37;	author crevells;	state Exp;
branches;
next	1.17;
commitid	6a2c478792684567;

1.17
date	2007.05.24.18.05.40;	author crevells;	state Exp;
branches;
next	1.16;
commitid	24cb4655d3f44567;

1.16
date	2007.05.16.16.50.41;	author ahunter;	state Exp;
branches;
next	1.15;
commitid	43e3464b36614567;

1.15
date	2007.05.02.15.18.34;	author crevells;	state Exp;
branches;
next	1.14;
commitid	2d404638abca4567;

1.14
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.31.19.09.09;	author cmahoney;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2006.04.11.14.01.03;	author cmahoney;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.29.22.04.35;	author cmahoney;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.28.02.31.21;	author cmahoney;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.20.22.10.12;	author cmahoney;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.21.18.26.02;	author mmostafa;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.02.23.30.18;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.14.19.17.55;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.04.20.30.51;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.11;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.06.18.42.06;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.50;	author sshaw;	state Exp;
branches;
next	;

1.13.2.1
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.19
log
@GMF -- Icons
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.services.palette;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.domain.IEditingDomainProvider;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.palette.PaletteContainer;
import org.eclipse.gef.palette.PaletteEntry;
import org.eclipse.gef.palette.PaletteRoot;
import org.eclipse.gef.palette.SelectionToolEntry;
import org.eclipse.gef.palette.ToolEntry;
import org.eclipse.gmf.runtime.common.core.service.ExecutionStrategy;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.common.core.service.IProvider;
import org.eclipse.gmf.runtime.common.core.service.Service;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.services.util.ActivityFilterProviderDescriptor;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.services.palette.ContributeToPaletteOperation;
import org.eclipse.gmf.runtime.diagram.ui.internal.services.palette.PaletteProviderConfiguration;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.gef.ui.internal.palette.PaletteSeparator;
import org.eclipse.gmf.runtime.gef.ui.internal.palette.PaletteToolbar;
import org.eclipse.ui.IEditorPart;

/**
 * @@author melaasar
 *
 * A service to contributes to the palette of a given editor with a given content
 */
public class PaletteService extends Service implements IPaletteProvider {

	/**
	 * @@author schafe
	 * @@author melaasar
	 *
	 * A descriptor for palette providers defined by a configuration
	 * element.
	 */
	protected static class ProviderDescriptor
		extends ActivityFilterProviderDescriptor {

		/** the provider configuration parsed from XML */
		private PaletteProviderConfiguration providerConfiguration;

		/**
		 * Constructs a <code>ISemanticProvider</code> descriptor for
		 * the specified configuration element.
		 * 
		 * @@param element The configuration element describing the provider.
		 */
		public ProviderDescriptor(IConfigurationElement element) {
			super(element);

			this.providerConfiguration =
				PaletteProviderConfiguration.parse(element);
			Assert.isNotNull(providerConfiguration);
		}

		/**
		 * @@see org.eclipse.gmf.runtime.common.core.service.IProvider#provides(org.eclipse.gmf.runtime.common.core.service.IOperation)
		 */
		public boolean provides(IOperation operation) {
			if (!super.provides(operation)) {
				return false;
			}
			if (!policyInitialized){
				policy = getPolicy();
				policyInitialized = true;
			}
			if (policy != null)
				return policy.provides(operation);
			
			if (operation instanceof ContributeToPaletteOperation) {
				ContributeToPaletteOperation o =
					(ContributeToPaletteOperation) operation;

				return providerConfiguration.supports(
					o.getEditor(),
					o.getContent());
			}
			return false;
		}

		/**
		 * @@see org.eclipse.gmf.runtime.common.core.service.Service.ProviderDescriptor#getProvider()
		 */
		public IProvider getProvider() {
			if (provider == null) {
				IProvider newProvider = super.getProvider();
				if (provider instanceof IPaletteProvider) {
					IPaletteProvider defaultProvider =
						(IPaletteProvider) newProvider;
					defaultProvider.setContributions(getElement());
				}
				return newProvider;
			}
			return super.getProvider();
		}
	}

	
	/**
	 * Sets contribution
	 * Empty because contributions are stored in the providers
	 * 
	 * @@param configElement
	 */
	public void setContributions(IConfigurationElement configElement) {
	//  
	}

	/** the singleton instance of the palette service */
	private final static PaletteService instance = new PaletteService();

	static {
		instance.configureProviders(DiagramUIPlugin.getPluginId(), "paletteProviders"); //$NON-NLS-1$
	}

	/** the standard group id */
	public final static String GROUP_STANDARD = "standardGroup"; //$NON-NLS-1$

	/** the standard separator id */
	public final static String SEPARATOR_STANDARD = "standardSeparator"; //$NON-NLS-1$

	/** the standard separator id */
	public final static String TOOL_SELECTION = "selectionTool"; //$NON-NLS-1$

	/**
	 *  Creates a new instance of the Palette Service
	 */
	protected PaletteService() {
		super();
	}

	/**
	 * gets the singleton instance
	 * @@return <code>PaletteService</code>
	 */
	public static PaletteService getInstance() {
		return instance;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.core.service.Service#newProviderDescriptor(org.eclipse.core.runtime.IConfigurationElement)
	 */
	protected Service.ProviderDescriptor newProviderDescriptor(
		IConfigurationElement element) {
		return new ProviderDescriptor(element);
	}

	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.services.palette.IPaletteProvider#contributeToPalette(org.eclipse.ui.IEditorPart, java.lang.Object, org.eclipse.gef.palette.PaletteRoot, Map)
	 */
	public void contributeToPalette(
		IEditorPart editor,
		Object content,
		PaletteRoot root, Map predefinedEntries) {

	    PaletteToolbar standardGroup = new PaletteToolbar(GROUP_STANDARD, DiagramUIMessages.StandardGroup_Label);
		standardGroup.setDescription(DiagramUIMessages.StandardGroup_Description);
		root.add(standardGroup);

		PaletteSeparator standardSeparator = new PaletteSeparator(SEPARATOR_STANDARD);
		standardGroup.add(standardSeparator);

		ToolEntry selectTool = new SelectionToolEntry();
		selectTool.setId(TOOL_SELECTION);
		selectTool.setToolClass(SelectionToolEx.class);
		standardGroup.add(selectTool);
		root.setDefaultEntry(selectTool);

		execute(new ContributeToPaletteOperation(editor, content, root, predefinedEntries));       
	}


    /**
	 * Executes the palette operation using 
	 * the REVERSE execution strategy.
	 * 
	 * @@param operation
	 * @@return List of results
	 */
	private List execute(IOperation operation) {
		return execute(ExecutionStrategy.REVERSE, operation);
	}

	/**
	 * Creates default palette root.
	 * 
	 * @@param editor
	 *            the editor
	 * @@param content
	 *            the palette content
	 * @@return a new palette root with contributions from all providers
	 */
	public PaletteRoot createPalette(
		final IEditorPart editor,
		final Object content) {
		final PaletteRoot root = new PaletteRoot();
		try {
			IEditingDomainProvider provider = (IEditingDomainProvider) editor
				.getAdapter(IEditingDomainProvider.class);
			if (provider != null) {
				EditingDomain domain = provider.getEditingDomain();
				if (domain instanceof TransactionalEditingDomain) {
					((TransactionalEditingDomain) domain)
						.runExclusive(new Runnable() {

							public void run() {
								contributeToPalette(editor, content, root, new HashMap());
							}
						});
				}
			}
		} catch (Exception e) {
			Trace.catching(DiagramUIPlugin.getInstance(),
					DiagramUIDebugOptions.EXCEPTIONS_CATCHING, PaletteService.class,
					"createPalette()", //$NON-NLS-1$
					e);
		}
		return root;
	}
	
	/**
	 * Updates the palette root given.
	 * 
	 * @@param existingRoot
	 *            existing palette root in which to add/remove entries that are
	 *            now provided for or no longer provided for
	 * @@param editor
	 *            the editor
	 * @@param content
	 *            the palette content
	 */
	public void updatePalette(
		PaletteRoot existingRoot,
		final IEditorPart editor,
		final Object content) {
		
		PaletteRoot newRoot = createPalette(editor, content);
		updatePaletteContainerEntries(existingRoot, newRoot);
	}
	
	/**
	 * Updates the children of an existing palette container to match the
	 * palette entries in a new palette container by adding or removing new
	 * palette entries only. This method works recursively on any children that
	 * are palette container entries. Existing leaf palette entries that are to
	 * be kept remain the same -- they are not replaced with the new palette
	 * entry. This is so that palette state (such as whether a drawer is pinned
	 * or expanded) can be preserved when the palette is updated.
	 * 
	 * @@param existingContainer
	 *            the palette container to be updated with new entries, have
	 *            obsolete entries removed, and whose existing entries will
	 *            remain the same
	 * @@param newContainer
	 *            the new palette entries
	 */
	private void updatePaletteContainerEntries(
			PaletteContainer existingContainer, PaletteContainer newContainer) {

		HashMap existingEntryIds = new HashMap();
		for (Iterator iter = existingContainer.getChildren().iterator(); iter
			.hasNext();) {
			PaletteEntry entry = (PaletteEntry) iter.next();
			existingEntryIds.put(entry.getId(), entry);
		}

		int nextNewIndex = 0;
		// cycle through the new entries
		for (Iterator iter = newContainer.getChildren().iterator(); iter
			.hasNext();) {
			PaletteEntry newEntry = (PaletteEntry) iter.next();

			PaletteEntry existingEntry = (PaletteEntry) existingEntryIds
				.get(newEntry.getId());
			if (existingEntry != null) { // is already in existing container
				// update the index
				nextNewIndex = existingContainer.getChildren()
					.indexOf(existingEntry) + 1;

				// remove the entry that was just updated from the map
				existingEntryIds.remove(existingEntry.getId());

				if (existingEntry instanceof PaletteContainer
					&& newEntry instanceof PaletteContainer) {
					// look for new/deleted entries in
					// palette containers
					updatePaletteContainerEntries(
						(PaletteContainer) existingEntry,
						(PaletteContainer) newEntry);
				}
			} else { // this is a new entry that did not previously exist
				existingContainer.add(nextNewIndex++, newEntry);
			}
		}

		// remove existing entries that were not found in the new container
		for (Iterator iter = existingEntryIds.values().iterator(); iter
			.hasNext();) {
			PaletteEntry entry = (PaletteEntry) iter.next();
			existingContainer.remove(entry);
		}

	}
	
}
@


1.18
log
@[111901] gmf_head crevells 080111 [KeyboardBindings] Ability to move shapes using cursors keys. (by default)
@
text
@a39 1
import org.eclipse.gmf.runtime.gef.ui.internal.palette.PaletteGroup;
d41 1
d178 1
a178 1
		PaletteGroup standardGroup = new PaletteGroup(GROUP_STANDARD, DiagramUIMessages.StandardGroup_Label);
@


1.17
log
@[176751] gmf_head crevells 070525 REVERTING CHANGE [UI Reduction/DefaultPaletteProvider] if all tool entries are filtered out the holding drawer has to be filtered out as well
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
a13 1
import java.util.ArrayList;
d187 1
@


1.16
log
@gmf_head ahunter 070516 Update Copyright for files changed in 2007
@
text
@d191 1
a191 6
		execute(new ContributeToPaletteOperation(editor, content, root, predefinedEntries));
        
        // Remove any palette containers (drawers or stacks that do not have any
        // tool entries).
        removeEmptyContainers(root);
        
a325 35

    /**
     * A recursive method that removes all empty children palette containers and
     * checks if there is at least one tool entry in this palette container
     * 
     * @@param container
     *            a palette container
     * @@return true if there is at least one tool entry in this palette
     *         container; false otherwise
     */
    private boolean removeEmptyContainers(PaletteContainer container) {
        List childrenToRemove = new ArrayList();
        boolean containsToolEntries = false;
        for (Iterator iter = container.getChildren().iterator(); iter.hasNext();) {
            PaletteEntry entry = (PaletteEntry) iter.next();
            if (entry instanceof PaletteSeparator) {
                // ignore separators
                continue;
            } else if (entry instanceof PaletteContainer) {
                if (removeEmptyContainers((PaletteContainer) entry)) {
                    containsToolEntries = true;
                } else {
                    childrenToRemove.add(entry);
                }
            } else {
                // some sort of tool entry
                containsToolEntries = true;
            }
        }

        for (Iterator iter = childrenToRemove.iterator(); iter.hasNext();) {
            container.remove((PaletteEntry) iter.next());
        }
        return containsToolEntries;
    }
@


1.15
log
@[176751] gmf_head crevells 070502 [UI Reduction/DefaultPaletteProvider] if all tool entries are filtered out the holding drawer has to be filtered out as well
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.14
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d14 1
d20 1
a42 1
import org.eclipse.jface.util.Assert;
d192 5
d199 2
a200 1
	/**
d331 35
@


1.13
log
@Bugzilla#144734 gmf_head cmahoney 060531 PaletteService.updatePaletteContainerEntries throws NPE if only contains new entries
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
@


1.13.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.12
log
@Bugzilla#135692 gmf_head cmahoney 060411 Move IPaletteProvider interface in public api
@
text
@d287 1
a287 1
		int lastExistingEntryIndex = 0;
d297 2
a298 2
				lastExistingEntryIndex = existingContainer.getChildren()
					.indexOf(existingEntry);
d312 1
a312 1
				existingContainer.add(++lastExistingEntryIndex, newEntry);
@


1.11
log
@Bugzilla#111907 gmf_head cmahoney 060329 Support Separation of Palette Definition and Contribution
@
text
@a36 1
import org.eclipse.gmf.runtime.diagram.ui.internal.services.palette.IPaletteProvider;
d171 1
a171 1
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.services.palette.IPaletteProvider#contributeToPalette(org.eclipse.ui.IEditorPart, java.lang.Object, org.eclipse.gef.palette.PaletteRoot, Map)
@


1.10
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d17 1
d172 1
a172 1
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.services.palette.IPaletteProvider#contributeToPalette(org.eclipse.ui.IEditorPart, java.lang.Object, org.eclipse.gef.palette.PaletteRoot)
d177 1
a177 1
		PaletteRoot root) {
d191 1
a191 1
		execute(new ContributeToPaletteOperation(editor, content, root));
d228 1
a228 1
								contributeToPalette(editor, content, root);
@


1.9
log
@Bugzilla#123313 gmf_head cmahoney 060120 Making DiagramUIPlugin, DiagramUIStatusCodes, and DiagramUIDebugOptions internal
@
text
@d19 3
a37 1
import org.eclipse.gmf.runtime.diagram.ui.internal.util.DiagramMEditingDomainGetter;
a38 1
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
d218 14
a231 6
			DiagramMEditingDomainGetter.getMEditingDomain(editor).runAsRead( new MRunnable() {
		        public Object run() {
		            contributeToPalette(editor, content, root);
		            return null;
		        }
		    });
@


1.8
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d30 2
a31 2
import org.eclipse.gmf.runtime.diagram.ui.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;
@


1.7
log
@bugzilla 117343 gmf-head  mmostafa 051121 getPolicy on the Service class get called more than 500,000 times
@
text
@d36 1
a36 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d177 2
a178 2
		PaletteGroup standardGroup = new PaletteGroup(GROUP_STANDARD, DiagramResourceManager.getI18NString("StandardGroup.Label")); //$NON-NLS-1$
		standardGroup.setDescription(DiagramResourceManager.getI18NString("StandardGroup.Description")); //$NON-NLS-1$
@


1.6
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d84 7
a90 2
			if (getPolicy() != null)
				return getPolicy().provides(operation);
@


1.5
log
@Bugzilla 110616 gmf_head sshaw 051014 Palette stack is removed if active tool gets removed after capability is disabled
Contributed by: Cherie Mahoney
@
text
@d36 1
a36 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d172 2
a173 2
		PaletteGroup standardGroup = new PaletteGroup(GROUP_STANDARD, PresentationResourceManager.getI18NString("StandardGroup.Label")); //$NON-NLS-1$
		standardGroup.setDescription(PresentationResourceManager.getI18NString("StandardGroup.Description")); //$NON-NLS-1$
@


1.4
log
@Bugzilla 110635 gmf_head keithc 051004 Delay configuration of services
@
text
@a13 1
import java.util.ArrayList;
a23 3
import org.eclipse.jface.util.Assert;
import org.eclipse.ui.IEditorPart;

d40 2
d266 1
a266 1
		HashMap existingEntries = new HashMap();
d270 1
a270 1
			existingEntries.put(entry.getId(), entry);
d273 2
a274 2
		List updatedChildren = new ArrayList(newContainer.getChildren().size());

d279 10
a288 4
			Object existingEntry = existingEntries.get(newEntry.getId());
			if (existingEntry != null) {
				// keep the existing entry
				updatedChildren.add(existingEntry);
d297 2
a298 4
			} else {
				// add new entries that did not
				// previously exist
				updatedChildren.add(newEntry);
d300 1
d302 5
d308 1
a308 1
		existingContainer.setChildren(updatedChildren);
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d126 1
a126 3
	
	
	
d130 4
d147 1
a147 1
	    //empty ctor
@


1.2
log
@Bugzilla 108849 gmf_head sshaw 050906 Capability support for Modeling Assistant and Palette Services
Contribution by: Cherie Mahoney
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d12 3
d18 2
d31 1
d58 1
a58 1
		extends Service.ProviderDescriptor {
d81 3
d198 1
d200 1
d202 2
a203 2
	 * @@param type
	 * @@return <code>PaletteRoot</code>
d205 1
a205 1
	public static PaletteRoot createPalette(
d207 1
a207 2
		final Object content,
		final PaletteType type) {
d212 1
a212 1
		            getInstance().contributeToPalette(editor, content, root);
d224 48
d273 26
@

