head	1.4;
access;
symbols
	v20081023-2107:1.4
	v20081022-1925:1.4
	v20081022-1005:1.4
	v20081020-0700:1.4
	v20080917-1925:1.4
	v20080916-2008:1.4
	v20080911-1728:1.4
	v20080911-1506:1.4
	v20080910-1520:1.4
	v20080910-1510:1.4
	v20080903-1520:1.4
	v20080903-1510:1.4
	v20080813-1510:1.4
	v20080811-1546:1.4
	v20080731-1520:1.4
	v20080725-1738:1.4
	v20080723-2246:1.4
	v20080723-2232:1.4
	v20080723-1700:1.4
	v20080722-1827:1.4
	v20080718-1700:1.4
	v20080718-1731:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.6
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080610-1132:1.4
	v20080603-1553:1.4
	v20080527-1255:1.4
	v20080527-1151:1.4
	v20080516-1748:1.4
	v20080516-1143:1.4
	v20080512-1200:1.4
	v20080503-1740:1.4
	v20080501-2127:1.4
	v20080501-1739:1.4
	m20080429-1543:1.4
	v20080425-1959:1.4
	v20080417-1610:1.4
	v20080407-2250:1.4
	v20080407-0930:1.4
	v20080404-1111:1.4
	v20080328-1605:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20080201-2010:1.4
	v20080201-0201:1.4
	v20080118-1129:1.4
	v20080114-2222:1.4
	v20080114-1111:1.4
	v20080107-1111:1.4
	v20071222-1111:1.4
	v20071214-1111:1.4
	v20071130-1111:1.4
	v20071124-0000:1.4
	v20071112-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070915-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070614-1400:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070518-1300:1.4
	bugzilla111892_group_support:1.4.0.2
	Root_bugzilla111892_group_support:1.4
	v20070504-1000:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070330-1300:1.4
	v20060330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070221-1500:1.4
	v20070208-1800:1.4
	v20070202-0200:1.3.2.1
	v20070119-1200:1.3.2.1
	v20070111-0800:1.3.2.1
	v20070105-1200:1.3.2.1
	v20070103-0300:1.4
	M4_20:1.4
	v20061218-1500:1.3.2.1
	v20061218-1200:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.3.2.1
	v20061013-1330:1.4
	v20061012-1100:1.3.2.1
	v20060925-1700:1.3.2.1
	v20060919-0800:1.3.2.1
	v20060907-1100:1.3
	M1_20:1.3
	v20060831-1500:1.3
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060810-1700:1.3
	v20060803-1200:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.18.15.10.10;	author cmahoney;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.11.25.19.38.14;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.23.30.17;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2003, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.handles;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.ImageFigure;
import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.Locator;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.draw2d.StackLayout;
import org.eclipse.draw2d.TreeSearch;
import org.eclipse.gef.DragTracker;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.handles.AbstractHandle;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramUIPluginImages;
import org.eclipse.gmf.runtime.diagram.ui.internal.tools.ConnectionHandleTool;
import org.eclipse.gmf.runtime.diagram.ui.l10n.SharedImages;
import org.eclipse.swt.graphics.Image;

/**
 * This is the handle figure used to represent a connection handle.
 * 
 * @@author cmahoney
 */
public class ConnectionHandle extends AbstractHandle {

	/**
	 * An enumeration of connection directions.
	 * OUTGOING = source to target
	 * INCOMING = target to source
	 */
	public static final class HandleDirection {
		private HandleDirection() {
		    // empty
		}

		/** source to target */
		public static final HandleDirection OUTGOING = new HandleDirection();

		/** target to source */
		public static final HandleDirection INCOMING = new HandleDirection();
	}

	/** the error icon that can be superimposed on the connection handle image */
	private static final ImageFigure ERROR_IMAGE = new ImageFigure(SharedImages
		.get(SharedImages.IMG_ERROR));

	static {
		ERROR_IMAGE.setSize(SharedImages.get(SharedImages.IMG_ERROR)
			.getBounds().width, SharedImages.get(SharedImages.IMG_ERROR)
			.getBounds().height);
	}

	/** direction that the relationship is to be created */
	private HandleDirection handleDirection;

	/**
	 * Creates a new <code>ConnectionHandle</code>.
	 * @@param ownerEditPart the editpart for which the handle belongs
	 * @@param relationshipDirection direction that the relationship is to be created
	 * @@param tooltip the tooltip
	 */
	public ConnectionHandle(
		IGraphicalEditPart ownerEditPart,
		HandleDirection relationshipDirection,
		String tooltip) {

		setOwner(ownerEditPart);
		setRelationshipDirection(relationshipDirection);
		setToolTip(new Label(tooltip));

		// A stack layout is used so that the error icon can be overlayed on top.
		setLayoutManager(new StackLayout());
	}
	
	/**
	 * @@see org.eclipse.gef.handles.AbstractHandle#createDragTracker()
	 */
	protected DragTracker createDragTracker() {
		return new ConnectionHandleTool(this);
	}

	/**
	 * @@see org.eclipse.draw2d.IFigure#findFigureAt(int, int, org.eclipse.draw2d.TreeSearch)
	 */
	public IFigure findFigureAt(int x, int y, TreeSearch search) {
		// return the ConnectionHandle and not the children figures
		if (containsPoint(x, y)) {
			return this;
		}
		return super.findFigureAt(x, y, search);
	}

	/**
	 * Make public.
	 * @@see org.eclipse.gef.handles.AbstractHandle#setLocator(org.eclipse.draw2d.Locator)
	 */
	public void setLocator(Locator locator) {
		super.setLocator(locator);
	}

	/**
	 * Make public.
	 * @@see org.eclipse.gef.handles.AbstractHandle#getOwner()
	 */
	public GraphicalEditPart getOwner() {
		return super.getOwner();
	}

	/**
	 * Sets the direction that the relationship is to be created.
	 * @@param direction the <code>HandleDirection</code> that the relationship is to be created
	 */
	protected void setRelationshipDirection(HandleDirection direction) {
		handleDirection = direction;
	}

	/**
	 * Is this for incoming relationships?
	 * @@return true if this is for incoming relationships, false otherwise
	 */
	public boolean isIncoming() {
		return handleDirection == HandleDirection.INCOMING;
	}

	/**
	 * Superimposes an error icon on this connection handle.
	 */
	public void addErrorIcon() {
		add(ERROR_IMAGE);
	}

	/**
	 * Removes the error icon if it is being displayed.
	 */
	public void removeErrorIcon() {
		if (getChildren().contains(ERROR_IMAGE)) {
			remove(ERROR_IMAGE);
		}
	}

	/**
	 * Updates the images used for the handles, based on the side they will
	 * appear on.  Sets the location of the handles using the locator.
	 * @@see org.eclipse.draw2d.IFigure#validate()
	 */
	public void validate() {
		if (isValid())
			return;

		removeAll();
		int side = ((ConnectionHandleLocator) getLocator())
			.getBorderSide();
		Image image = getImage(side);

		ImageFigure imageFigure = new ImageFigure(image);
		imageFigure.setSize(image.getBounds().width, image.getBounds().height);
		add(imageFigure);

		setSize(imageFigure.getSize().getUnioned(ERROR_IMAGE.getSize()));

		super.validate();
	}
    
    /**
     * Gets the image to be used for the connection handle given the side of the
     * shape where the connection handle will appear. A call to
     * <code>isIncoming()</code> will reveal the direction of the handle.
     * 
     * @@param side
     *            the side of the shape where the connection handle will appear,
     *            a value in PositionConstants
     * @@return the image to be used for the connection handle
     */
    protected Image getImage(int side) {
        if (side == PositionConstants.WEST) {
            return isIncoming() ? DiagramUIPluginImages
                .get(DiagramUIPluginImages.IMG_HANDLE_INCOMING_WEST)
                : DiagramUIPluginImages
                    .get(DiagramUIPluginImages.IMG_HANDLE_OUTGOING_WEST);
        } else if (side == PositionConstants.EAST) {
            return isIncoming() ? DiagramUIPluginImages
                .get(DiagramUIPluginImages.IMG_HANDLE_INCOMING_EAST)
                : DiagramUIPluginImages
                    .get(DiagramUIPluginImages.IMG_HANDLE_OUTGOING_EAST);
        } else if (side == PositionConstants.SOUTH) {
            return isIncoming() ? DiagramUIPluginImages
                .get(DiagramUIPluginImages.IMG_HANDLE_INCOMING_SOUTH)
                : DiagramUIPluginImages
                    .get(DiagramUIPluginImages.IMG_HANDLE_OUTGOING_SOUTH);
        } else {
            return isIncoming() ? DiagramUIPluginImages
                .get(DiagramUIPluginImages.IMG_HANDLE_INCOMING_NORTH)
                : DiagramUIPluginImages
                    .get(DiagramUIPluginImages.IMG_HANDLE_OUTGOING_NORTH);
        }
    }

}
@


1.3
log
@Bugzilla#136220 gmf_head cmahoney 060418 Make it easier to specify image for ConnectionHandles
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2004 IBM Corporation and others.
@


1.3.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d164 1
a164 22
		Image image = null;
		if (side == PositionConstants.WEST) {
			image = isIncoming() ? DiagramUIPluginImages
				.get(DiagramUIPluginImages.IMG_HANDLE_INCOMING_WEST)
				: DiagramUIPluginImages
					.get(DiagramUIPluginImages.IMG_HANDLE_OUTGOING_WEST);
		} else if (side == PositionConstants.EAST) {
			image = isIncoming() ? DiagramUIPluginImages
				.get(DiagramUIPluginImages.IMG_HANDLE_INCOMING_EAST)
				: DiagramUIPluginImages
					.get(DiagramUIPluginImages.IMG_HANDLE_OUTGOING_EAST);
		} else if (side == PositionConstants.SOUTH) {
			image = isIncoming() ? DiagramUIPluginImages
				.get(DiagramUIPluginImages.IMG_HANDLE_INCOMING_SOUTH)
				: DiagramUIPluginImages
					.get(DiagramUIPluginImages.IMG_HANDLE_OUTGOING_SOUTH);
		} else {
			image = isIncoming() ? DiagramUIPluginImages
				.get(DiagramUIPluginImages.IMG_HANDLE_INCOMING_NORTH)
				: DiagramUIPluginImages
					.get(DiagramUIPluginImages.IMG_HANDLE_OUTGOING_NORTH);
		}
d174 34
@


1.1
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d25 1
d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d55 2
a56 3
	private static final ImageFigure ERROR_IMAGE = new ImageFigure(
		DiagramResourceManager.getInstance().getImage(
			DiagramResourceManager.IMAGE_ERROR));
d59 3
a61 4
		ERROR_IMAGE.setSize(DiagramResourceManager.getInstance().getImage(
			DiagramResourceManager.IMAGE_ERROR).getBounds().width,
			DiagramResourceManager.getInstance().getImage(
				DiagramResourceManager.IMAGE_ERROR).getBounds().height);
d166 4
a169 5
			image = isIncoming() ? DiagramResourceManager.getInstance()
				.getImage(
					DiagramResourceManager.IMAGE_HANDLE_INCOMING_WEST)
				: DiagramResourceManager.getInstance().getImage(
					DiagramResourceManager.IMAGE_HANDLE_OUTGOING_WEST);
d171 9
a179 11
			image = isIncoming() ? DiagramResourceManager.getInstance()
				.getImage(
					DiagramResourceManager.IMAGE_HANDLE_INCOMING_EAST)
				: DiagramResourceManager.getInstance().getImage(
					DiagramResourceManager.IMAGE_HANDLE_OUTGOING_EAST);
		} else if (side == PositionConstants.SOUTH){
			image = isIncoming() ? DiagramResourceManager.getInstance()
				.getImage(
					DiagramResourceManager.IMAGE_HANDLE_INCOMING_SOUTH)
				: DiagramResourceManager.getInstance().getImage(
					DiagramResourceManager.IMAGE_HANDLE_OUTGOING_SOUTH);
d181 4
a184 5
		image = isIncoming() ? DiagramResourceManager.getInstance()
			.getImage(
				DiagramResourceManager.IMAGE_HANDLE_INCOMING_NORTH)
			: DiagramResourceManager.getInstance().getImage(
				DiagramResourceManager.IMAGE_HANDLE_OUTGOING_NORTH);
@

