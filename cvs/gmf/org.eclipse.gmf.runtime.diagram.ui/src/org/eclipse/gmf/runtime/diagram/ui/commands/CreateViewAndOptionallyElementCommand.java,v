head	1.13;
access;
symbols
	v20081023-2107:1.13
	v20081022-1925:1.13
	v20081022-1005:1.13
	v20081020-0700:1.13
	v20080917-1925:1.13
	v20080916-2008:1.13
	v20080911-1728:1.13
	v20080911-1506:1.13
	v20080910-1520:1.13
	v20080910-1510:1.13
	v20080903-1520:1.13
	v20080903-1510:1.13
	v20080813-1510:1.13
	v20080811-1546:1.13
	v20080731-1520:1.13
	v20080725-1738:1.13
	v20080723-2246:1.13
	v20080723-2232:1.13
	v20080723-1700:1.13
	v20080722-1827:1.13
	v20080718-1700:1.13
	v20080718-1731:1.13
	v20080716-1600:1.13
	v20080716-1642:1.13
	R2_1_maintenance:1.13.0.6
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080603-1553:1.13
	v20080527-1255:1.13
	v20080527-1151:1.13
	v20080516-1748:1.13
	v20080516-1143:1.13
	v20080512-1200:1.13
	v20080503-1740:1.13
	v20080501-2127:1.13
	v20080501-1739:1.13
	m20080429-1543:1.13
	v20080425-1959:1.13
	v20080417-1610:1.13
	v20080407-2250:1.13
	v20080407-0930:1.13
	v20080404-1111:1.13
	v20080328-1605:1.13
	v20080322-0000:1.13
	v20080222-1200:1.13
	v20080201-2010:1.13
	v20080201-0201:1.13
	v20080118-1129:1.13
	v20080114-2222:1.13
	v20080114-1111:1.13
	v20080107-1111:1.13
	v20071222-1111:1.13
	v20071214-1111:1.13
	v20071130-1111:1.13
	v20071124-0000:1.13
	v20071112-0000:1.13
	v20071108-0000:1.13
	v20071003-0000:1.13
	v20070915-0000:1.13
	v20070903-0000:1.13
	v20070809-0000:1.13
	R2_0_maintenance:1.13.0.4
	R2_0:1.13
	R4_20:1.13
	v20070621-0000:1.13
	RC3_20:1.13
	v20070614-1400:1.13
	v20070608-1300:1.13
	v20070605-1400:1.13
	v20070601-1400:1.13
	v20070525-1500:1.13
	v20070518-1300:1.13
	bugzilla111892_group_support:1.13.0.2
	Root_bugzilla111892_group_support:1.13
	v20070504-1000:1.13
	v20070420-1000:1.13
	v20070413-1300:1.13
	v20070330-1300:1.13
	v20060330-1300:1.13
	v20070322-1100:1.13
	v20060316-0600:1.13
	v20070221-1500:1.13
	v20070208-1800:1.13
	v20070202-0200:1.11.2.2
	v20070119-1200:1.11.2.2
	v20070111-0800:1.11.2.2
	v20070105-1200:1.11.2.2
	v20070103-0300:1.13
	M4_20:1.13
	v20061218-1500:1.11.2.2
	v20061218-1200:1.13
	v20061214-0000:1.13
	M3_20:1.12
	v20061117-0800:1.12
	v20061027-1200:1.11.2.1
	v20061013-1330:1.12
	v20061012-1100:1.11.2.1
	v20060925-1700:1.11.2.1
	v20060919-0800:1.11
	v20060907-1100:1.11
	M1_20:1.11
	v20060831-1500:1.11
	v20060824-1600:1.11
	v20060817-1500:1.11
	v20060810-1700:1.11
	v20060803-1200:1.11
	v20060728-0500:1.11
	v20060721-1130:1.11
	v20060713-1700:1.11
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	v20060627-1200:1.11
	v20060616-1400:1.11
	v20060616-1200:1.11
	v20060609-1400:1.11
	v20060531-1730:1.11
	v20060530-1930:1.11
	v20060526-1200:1.11
	v20060519-0800:1.11
	v20060512-1000:1.11
	I20060512-1000:1.11
	I20060505-1400:1.11
	I20060428-1300:1.11
	I20060424-0500:1.11
	I20060424-0300:1.10
	M6_10:1.10
	I20060407-1200:1.9
	I20060331-1000:1.9
	I20060324-0300:1.9
	I20060317-1300:1.9
	I20060317-1200:1.9
	I20060316-1300:1.9
	I20060309-1300:1.9
	M5_10:1.9
	S20060303-1600:1.9
	I20060227-1730:1.8
	I20060216-1945:1.8
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.6
	I20051201-1800:1.6
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;


1.13
date	2006.11.23.20.10.13;	author crevells;	state Exp;
branches;
next	1.12;
commitid	3081456600254567;

1.12
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.18.15.09.39;	author cmahoney;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2006.04.10.20.33.48;	author ldamus;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.28.02.30.51;	author cmahoney;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.07.15.19.06;	author mmostafa;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.23.20.56.03;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.09;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.46;	author sshaw;	state Exp;
branches;
next	;

1.11.2.1
date	2006.09.20.17.27.06;	author cmahoney;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2006.11.23.19.25.16;	author crevells;	state Exp;
branches;
next	;
commitid	1c894565f59c4567;


desc
@@


1.13
log
@[158638] gmf_head crevells 061123 Cannot create connection to element if an alternate view for that element exists as a child
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.commands;

import java.util.Collections;
import java.util.List;
import java.util.ListIterator;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.common.core.command.AbstractCommand;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.common.core.util.ObjectAdapter;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequestFactory;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.osgi.util.NLS;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.MessageBox;

/**
 * A command used to optionally create a new view and new element. This command
 * is used when it is not known at command creation time whether or not an
 * element should be created as well. For example, when creating a connection to
 * an unspecified target, did the user want to
 * <li>create a new element for the target (view and element)?</li>
 * <li>use an existing element and its view already on the diagram (nothing
 * created)?</li>
 * <li>use an existing element and add a new view to the diagram (view only)?
 * 
 * <p>
 * Note: This command will pop up a dialog box if the element exists already and
 * there is a view for it on the diagram to ask the user what they want to do.
 * </p>
 * 
 * @@author cmahoney
 */
public class CreateViewAndOptionallyElementCommand
	extends AbstractCommand {

	/**
	 * Adapts to the element, if null at command execution time, an element is
	 * to be created.
	 */
	private IAdaptable elementAdapter;

	/** The location to create the new view. */
	private Point location;

	/** The container editpart to send the view request to. */
	private IGraphicalEditPart containerEP;

	/** The command executed, saved for undo/redo. */
	private Command command = null;

	/** The result to be returned from which the new view can be retrieved. */
	private ObjectAdapter resultAdapter = new ObjectAdapter();
	
	/**
	 * The hint used to find the appropriate preference store from which general
	 * diagramming preference values for properties of shapes, connections, and
	 * diagrams can be retrieved. This hint is mapped to a preference store in
	 * the {@@link DiagramPreferencesRegistry}.
	 */
	private PreferencesHint preferencesHint;

	/**
	 * Creates a new <code>CreateViewAndOptionallyElementCommand</code>.
	 * 
	 * @@param elementAdapter
	 *            Adapts to the element, if null at command execution time, an
	 *            element is to be created.
	 * @@param containerEP
	 *            The container edit part, where the view request is sent.
	 * @@param location
	 *            The location to create the new view. If null, a default
	 *            location is used
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 */
	public CreateViewAndOptionallyElementCommand(IAdaptable elementAdapter,
		IGraphicalEditPart containerEP, Point location, PreferencesHint preferencesHint) {
		super(DiagramUIMessages.CreateCommand_Label, null);

		setElementAdapter(elementAdapter);
		setContainerEP(containerEP);
		if (location != null) {
			setLocation(location);
		} else {
			setLocation(getContainerEP().getFigure().getBounds().getTopRight()
				.translate(100, 100));
		}
		setPreferencesHint(preferencesHint);
	}

    public List getAffectedFiles() {
		if (containerEP != null) {
			View view = (View)containerEP.getModel();
			if (view != null) {
				IFile f = WorkspaceSynchronizer.getFile(view.eResource());
				return f != null ? Collections.singletonList(f) : Collections.EMPTY_LIST;
			}
		}

        return super.getAffectedFiles();
	}
	
	/**
	 * Searches the container editpart to see if the element passed in already
	 * has a view.
	 * 
	 * @@param element
	 * @@return IView the view if found; or null
	 */
    protected View getExistingView(EObject element) {
        IGraphicalEditPart theTarget = (IGraphicalEditPart) findChildEditPart(
            getContainerEP(), element);
        if (theTarget != null)
            return (View) theTarget.getModel();
        return null;
    }

    /**
     * Returns an immediate child editpart of the editpart passed in whose
     * element is the same as the element passed in if it exists; returns null
     * if such an editpart does not exist.
     * 
     * @@param editpart
     *            the parent editpart
     * @@param theElement
     *            the element to match
     * @@return an immediate child editpart of the editpart passed in whose
     *         element is the same as the element passed in if it exists; null
     *         otherwise
     */
    private EditPart findChildEditPart(EditPart editpart, EObject theElement) {
        if (theElement == null) {
            return null;
        }

        ListIterator childLI = editpart.getChildren().listIterator();
        while (childLI.hasNext()) {
            EditPart epChild = (EditPart) childLI.next();
            Object model = epChild.getModel();

            if (model instanceof View) {
                EObject el = ((View) model).getElement();

                if ((el != null) && el.equals(theElement)) {
                    return epChild;
                }
            }
        }
        return null;
    }

	/**
     * Prompts the user to see if they would like to use an existing view on the
     * diagram. Clients may subclass this method to customize the message
     * dialog.
     * 
     * @@param view
     *            the existing view
     * @@return true if this view should be used; false otherwise
     */
    protected boolean useExistingView(View view) {
        MessageBox messageBox = new MessageBox(Display.getCurrent()
            .getActiveShell(), SWT.YES | SWT.NO);
        messageBox
            .setText(DiagramUIMessages.CreateViewAndOptionallyElementCommand_ViewExists_Title);
        messageBox
            .setMessage(NLS
                .bind(
                    DiagramUIMessages.CreateViewAndOptionallyElementCommand_ViewExists_Message,
                    EMFCoreUtil.getName(view.getElement())));
        return messageBox.open() == SWT.YES;
    }
	
	/**
	 * <li>If the element adapter is empty, this command creates a new element
	 * and view for it.</li>
	 * <li>If the element adapter is not empty, and a view for this element
	 * exists in the container, this command will prompt the user to see if they
	 * want to use the existing view or create a new view for the element and
	 * then execute accordingly.</li>
	 * <li>If the element adapter is not empty, and a view for this element
	 * does not exist in the container, this command will create a new element
	 * and view.</li>
	 * 
	 */
    protected CommandResult doExecuteWithResult(
            IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {
        
		CreateViewRequest createRequest;

		// Create the element first, if one does not exist.
		EObject element = (EObject) getElementAdapter().getAdapter(
			EObject.class);
		if (element == null) {
			IElementType type = (IElementType) getElementAdapter()
				.getAdapter(IElementType.class);
			if (type == null) {
				return CommandResult.newErrorCommandResult(getLabel());
			}
			createRequest = CreateViewRequestFactory
				.getCreateShapeRequest(type, getPreferencesHint());
		} else {
			createRequest = new CreateViewRequest(
				new CreateViewRequest.ViewDescriptor(
					new EObjectAdapter(element), getPreferencesHint()));
		}
		createRequest.setLocation(getLocation());

		if (createRequest != null) {
			IGraphicalEditPart target = (IGraphicalEditPart) getContainerEP().getTargetEditPart(createRequest);
			if ( target != null ) {
				Command theCmd = target.getCommand(createRequest);
				setCommand(theCmd);

				View theExistingView = getExistingView(element);            
                
                if (theExistingView != null && useExistingView(theExistingView)) {
                    setResult(new EObjectAdapter(theExistingView));
                    return CommandResult.newOKCommandResult(getResult());
                }
				// Fall-thru and create a new view
				if (getCommand().canExecute()) {
					ICommand cmd = DiagramCommandStack.getICommand(getCommand());
					cmd.execute(progressMonitor, info);					
					if (progressMonitor.isCanceled()) {
						return CommandResult.newCancelledCommandResult();
					}else if (!(cmd.getCommandResult().getStatus().isOK())){
						return cmd.getCommandResult();
					}				
					Object obj = ((List) createRequest.getNewObject()).get(0);										
					setResult((IAdaptable) obj);
					return CommandResult.newOKCommandResult(getResult());
				}
			}
		}
		containerEP = null;// to allow garbage collection
		return CommandResult.newErrorCommandResult(getLabel());
	}

    public boolean canUndo() {
		return getCommand() != null && getCommand().canUndo();
	}

    public boolean canRedo() {
		return CommandUtilities.canRedo(command);
	}

    
    protected CommandResult doRedoWithResult(IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {
        
		if (getCommand() != null) {
			getCommand().redo();
		}
        return CommandResult.newOKCommandResult();
	}

    protected CommandResult doUndoWithResult(IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {

		if (getCommand() != null) {
			getCommand().undo();
		}
        return CommandResult.newOKCommandResult();
	}

	/**
	 * @@return the adapter from which the view can be retrieved.
	 */
	public IAdaptable getResult() {
		return resultAdapter;
	}

	/**
	 * Sets the result to adapt to the view passed in.
	 * @@param viewAdapter
	 */
	protected void setResult(IAdaptable viewAdapter) {
		View view = (View) viewAdapter.getAdapter(View.class);
		resultAdapter.setObject(view);
	}

	/**
	 * Gets the elementAdapter.
	 * @@return Returns the elementAdapter.
	 */
	protected IAdaptable getElementAdapter() {
		return elementAdapter;
	}

	/**
	 * Sets the elementAdapter.
	 * @@param elementAdapter The elementAdapter to set.
	 */
	protected void setElementAdapter(IAdaptable elementAdapter) {
		this.elementAdapter = elementAdapter;
	}

	/**
	 * Gets the location.
	 * @@return Returns the location.
	 */
	protected Point getLocation() {
		return location;
	}

	/**
	 * Sets the location.
	 * @@param location The location to set.
	 */
	protected void setLocation(Point location) {
		this.location = location;
	}

	/**
	 * Gets the containerEP.
	 * @@return Returns the containerEP.
	 */
	protected IGraphicalEditPart getContainerEP() {
		return containerEP;
	}

	/**
	 * Sets the containerEP.
	 * @@param containerEP The containerEP to set.
	 */
	protected void setContainerEP(IGraphicalEditPart containerEP) {
		this.containerEP = containerEP;
	}

	/**
	 * Gets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@return the preferences hint
	 */
	protected PreferencesHint getPreferencesHint() {
		return preferencesHint;
	}
	
	/**
	 * Sets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@param preferencesHint the preferences hint
	 */
	protected void setPreferencesHint(PreferencesHint preferencesHint) {
		this.preferencesHint = preferencesHint;
	}

	/**
	 * Gets the command.
	 * @@return Returns the command.
	 */
	protected Command getCommand() {
		return command;
	}

	/**
	 * Sets the command.
	 * @@param command The command to set.
	 */
	protected void setCommand(Command command) {
		this.command = command;
	}
	
	
}
@


1.12
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d16 1
d25 1
d143 41
a183 8
	protected View getExistingView(EObject element) 
	{
		IGraphicalEditPart theTarget =(IGraphicalEditPart)getContainerEP().findEditPart(null, element);
		if(theTarget != null)
			return (View)theTarget.getModel();
		return null;
		
	}
@


1.11
log
@Bugzilla#125477 gmf_head cmahoney 060418 Existing view detected dialog should handle elements with no names
@
text
@d244 1
a244 1
		return getCommand() != null && getCommand().canExecute();
@


1.11.2.1
log
@Bugzilla#150391 gmf_R1_0_maintenance crevells 060920 checking canRedo() for wrapped GEF commands
Contributed by: Alex Boyko
@
text
@d244 1
a244 1
		return CommandUtilities.canRedo(command);
@


1.11.2.2
log
@[158638] gmf_R1_0_maintenance crevells 061123 Cannot create connection to element if an alternate view for that element exists as a child
@
text
@a15 1
import java.util.ListIterator;
a23 1
import org.eclipse.gef.EditPart;
d141 8
a148 41
    protected View getExistingView(EObject element) {
        IGraphicalEditPart theTarget = (IGraphicalEditPart) findChildEditPart(
            getContainerEP(), element);
        if (theTarget != null)
            return (View) theTarget.getModel();
        return null;
    }

    /**
     * Returns an immediate child editpart of the editpart passed in whose
     * element is the same as the element passed in if it exists; returns null
     * if such an editpart does not exist.
     * 
     * @@param editpart
     *            the parent editpart
     * @@param theElement
     *            the element to match
     * @@return an immediate child editpart of the editpart passed in whose
     *         element is the same as the element passed in if it exists; null
     *         otherwise
     */
    private EditPart findChildEditPart(EditPart editpart, EObject theElement) {
        if (theElement == null) {
            return null;
        }

        ListIterator childLI = editpart.getChildren().listIterator();
        while (childLI.hasNext()) {
            EditPart epChild = (EditPart) childLI.next();
            Object model = epChild.getModel();

            if (model instanceof View) {
                EObject el = ((View) model).getElement();

                if ((el != null) && el.equals(theElement)) {
                    return epChild;
                }
            }
        }
        return null;
    }
@


1.10
log
@[135584] gmf_head ldamus 060410 Classes and methods required by clients should be made public
@
text
@d149 22
d214 6
a219 15
				View theExistingView = getExistingView(element);
				if(theExistingView != null)
				{
					MessageBox messageBox = new MessageBox(Display.getCurrent().getActiveShell(), SWT.YES | SWT.NO);

					messageBox.setText(DiagramUIMessages.CreateViewAndOptionallyElementCommand_ViewExists_Title);
					messageBox.setMessage(NLS.bind(DiagramUIMessages.CreateViewAndOptionallyElementCommand_ViewExists_Message,
						EMFCoreUtil.getName(element)));
					int iResult = messageBox.open();
					if(iResult == SWT.YES)
					{
						setResult(new EObjectAdapter(theExistingView));
						return CommandResult.newOKCommandResult(getResult());
					}
				}
@


1.9
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@a30 1
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.CreateViewRequestFactory;
d34 1
@


1.8
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d23 1
d35 1
a36 1
import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
d123 7
a129 7
        if (containerEP != null) {
            View view = (View)containerEP.getModel();
            if (view != null) {
                IFile f = EObjectUtil.getWorkspaceFile(view);
                return f != null ? Collections.singletonList(f) : Collections.EMPTY_LIST;
            }
        }
d132 1
a132 1
    }
d199 1
a199 1
						EObjectUtil.getName(element)));
d227 2
a228 2
        return getCommand() != null && getCommand().canUndo();
    }
d231 2
a232 2
        return getCommand() != null && getCommand().canExecute();
    }
d238 3
a240 3
        if (getCommand() != null) {
            getCommand().redo();
        }
d242 1
a242 1
    }
d247 3
a249 3
        if (getCommand() != null) {
            getCommand().undo();
        }
d251 1
a251 1
    }
@


1.7
log
@bugzilla 117592 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
a13 1
import java.util.Collection;
d17 1
d108 1
a108 1
		super(DiagramUIMessages.CreateCommand_Label);
d121 11
a131 13
	/**
	 * @@see org.eclipse.gmf.runtime.common.core.command.ICommand#getAffectedObjects()
	 */
	public Collection getAffectedObjects() {
		if (containerEP != null) {
			View view = (View)containerEP.getModel();
			if (view != null) {
				IFile f = EObjectUtil.getWorkspaceFile(view);
				return f != null ? Collections.singletonList(f) : Collections.EMPTY_LIST;
			}
		}
		return super.getAffectedObjects();
	}
a159 1
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doExecute(org.eclipse.core.runtime.IProgressMonitor)
d161 4
a164 1
	protected CommandResult doExecute(IProgressMonitor progressMonitor) {
d174 1
a174 1
				return newErrorCommandResult(getLabel());
d203 1
a203 1
						return newOKCommandResult(getResult());
d209 1
a209 1
					cmd.execute(progressMonitor);					
d211 1
a211 1
						return newCancelledCommandResult();
d217 1
a217 1
					return newOKCommandResult(getResult());
d222 1
a222 1
		return newErrorCommandResult(getLabel());
d225 26
a250 33
	/**
	 * @@see org.eclipse.gmf.runtime.common.core.command.ICommand#isUndoable()
	 */
	public boolean isUndoable() {
		return getCommand() != null && getCommand().canUndo();
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.core.command.ICommand#isRedoable()
	 */
	public boolean isRedoable() {
		return getCommand() != null && getCommand().canExecute();
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doRedo()
	 */
	protected CommandResult doRedo() {
		if (getCommand() != null) {
			getCommand().redo();
		}
		return newOKCommandResult();
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doUndo()
	 */
	protected CommandResult doUndo() {
		if (getCommand() != null) {
			getCommand().undo();
		}
		return newOKCommandResult();
	}
@


1.6
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d208 2
a209 2
					ICommand xtoolsCommand = DiagramCommandStack.getICommand(getCommand());
					xtoolsCommand.execute(progressMonitor);					
d212 2
a213 2
					}else if (!(xtoolsCommand.getCommandResult().getStatus().isOK())){
						return xtoolsCommand.getCommandResult();
@


1.5
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a13 1
import java.text.MessageFormat;
a23 4
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.MessageBox;

d31 1
a31 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d38 4
d108 1
a108 1
		super(DiagramResourceManager.getI18NString("CreateCommand.Label")); //$NON-NLS-1$
d196 3
a198 4
					messageBox.setText(DiagramResourceManager.getI18NString("CreateViewAndOptionallyElementCommand.ViewExists.Title"));//$NON-NLS-1$
					messageBox.setMessage(MessageFormat.
						format(DiagramResourceManager.getI18NString("CreateViewAndOptionallyElementCommand.ViewExists.Message"), //$NON-NLS-1$
						new Object[] {EObjectUtil.getName(element)}));
@


1.4
log
@Bugzilla 110480 gmf_head sshaw 050923 Modeling Assistant Service should have generic getTypes() operation to be used in commands with popups
Contributed by Cherie Mahoney
@
text
@d36 1
a36 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d84 1
a84 1
	 * diagramming preference values for properties of shapes, connectors, and
d109 1
a109 1
		super(PresentationResourceManager.getI18NString("CreateCommand.Label")); //$NON-NLS-1$
d197 1
a197 1
					messageBox.setText(PresentationResourceManager.getI18NString("CreateViewAndOptionallyElementCommand.ViewExists.Title"));//$NON-NLS-1$
d199 1
a199 1
						format(PresentationResourceManager.getI18NString("CreateViewAndOptionallyElementCommand.ViewExists.Message"), //$NON-NLS-1$
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d364 2
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.              	   |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d40 1
a40 1
import com.ibm.xtools.notation.View;
@

