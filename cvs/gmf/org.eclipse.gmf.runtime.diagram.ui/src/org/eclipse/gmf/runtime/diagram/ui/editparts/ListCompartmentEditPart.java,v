head	1.13;
access;
symbols
	v20081023-2107:1.13
	v20081022-1925:1.13
	v20081022-1005:1.13
	v20081020-0700:1.13
	v20080917-1925:1.13
	v20080916-2008:1.13
	v20080911-1728:1.13
	v20080911-1506:1.13
	v20080910-1520:1.13
	v20080910-1510:1.13
	v20080903-1520:1.13
	v20080903-1510:1.13
	v20080813-1510:1.13
	v20080811-1546:1.13
	v20080731-1520:1.13
	v20080725-1738:1.13
	v20080723-2246:1.13
	v20080723-2232:1.13
	v20080723-1700:1.13
	v20080722-1827:1.13
	v20080718-1700:1.13
	v20080718-1731:1.13
	v20080716-1600:1.13
	v20080716-1642:1.13
	R2_1_maintenance:1.13.0.6
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080603-1553:1.13
	v20080527-1255:1.13
	v20080527-1151:1.13
	v20080516-1748:1.13
	v20080516-1143:1.13
	v20080512-1200:1.13
	v20080503-1740:1.13
	v20080501-2127:1.13
	v20080501-1739:1.13
	m20080429-1543:1.13
	v20080425-1959:1.13
	v20080417-1610:1.13
	v20080407-2250:1.13
	v20080407-0930:1.13
	v20080404-1111:1.13
	v20080328-1605:1.13
	v20080322-0000:1.13
	v20080222-1200:1.13
	v20080201-2010:1.13
	v20080201-0201:1.13
	v20080118-1129:1.13
	v20080114-2222:1.13
	v20080114-1111:1.13
	v20080107-1111:1.13
	v20071222-1111:1.13
	v20071214-1111:1.13
	v20071130-1111:1.13
	v20071124-0000:1.13
	v20071112-0000:1.13
	v20071108-0000:1.13
	v20071003-0000:1.13
	v20070915-0000:1.13
	v20070903-0000:1.13
	v20070809-0000:1.13
	R2_0_maintenance:1.13.0.4
	R2_0:1.13
	R4_20:1.13
	v20070621-0000:1.13
	RC3_20:1.13
	v20070614-1400:1.13
	v20070608-1300:1.13
	v20070605-1400:1.13
	v20070601-1400:1.13
	v20070525-1500:1.13
	v20070518-1300:1.13
	bugzilla111892_group_support:1.13.0.2
	Root_bugzilla111892_group_support:1.13
	v20070504-1000:1.13
	v20070420-1000:1.13
	v20070413-1300:1.13
	v20070330-1300:1.13
	v20060330-1300:1.13
	v20070322-1100:1.13
	v20060316-0600:1.13
	v20070221-1500:1.13
	v20070208-1800:1.13
	v20070202-0200:1.11.2.5
	v20070119-1200:1.11.2.5
	v20070111-0800:1.11.2.5
	v20070105-1200:1.11.2.5
	v20070103-0300:1.12
	M4_20:1.12
	v20061218-1500:1.11.2.5
	v20061218-1200:1.12
	v20061214-0000:1.12
	M3_20:1.12
	v20061117-0800:1.12
	v20061027-1200:1.11.2.5
	v20061013-1330:1.12
	v20061012-1100:1.11.2.5
	v20060925-1700:1.11.2.5
	v20060919-0800:1.11.2.5
	v20060907-1100:1.11.2.4
	M1_20:1.11
	v20060831-1500:1.11.2.4
	v20060824-1600:1.11.2.3
	v20060817-1500:1.11.2.3
	v20060810-1700:1.11.2.3
	v20060803-1200:1.11.2.3
	v20060728-0500:1.11.2.2
	v20060721-1130:1.11.2.1
	v20060713-1700:1.11.2.1
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	v20060627-1200:1.11
	v20060616-1400:1.11
	v20060616-1200:1.11
	v20060609-1400:1.11
	v20060531-1730:1.11
	v20060530-1930:1.11
	v20060526-1200:1.11
	v20060519-0800:1.11
	v20060512-1000:1.11
	I20060512-1000:1.11
	I20060505-1400:1.11
	I20060428-1300:1.11
	I20060424-0500:1.10
	I20060424-0300:1.10
	M6_10:1.10
	I20060407-1200:1.10
	I20060331-1000:1.10
	I20060324-0300:1.10
	I20060317-1300:1.10
	I20060317-1200:1.10
	I20060316-1300:1.10
	I20060309-1300:1.10
	M5_10:1.10
	S20060303-1600:1.10
	I20060227-1730:1.10
	I20060216-1945:1.10
	I20060210-1715:1.10
	I20060209-1815:1.10
	I20060203-0830:1.10
	I20060202-1415:1.10
	I20060129-1145:1.10
	I20060127-0900:1.10
	I20060120-1530:1.10
	I20060113-1700:1.10
	M4_10:1.10
	I20060107-1100:1.10
	I20060105-1630:1.10
	I20051230-1230:1.10
	I20051223-1100:1.10
	I20051217-0925:1.9
	I20051208-2000:1.9
	I20051201-1800:1.9
	I20051124-2000:1.8
	M3_10:1.7
	I20051118-1245:1.7
	I20051111-1800:1.7
	I20051106-0900:1.7
	v20051030:1.5;
locks; strict;
comment	@# @;


1.13
date	2007.01.05.15.24.18;	author mmostafa;	state Exp;
branches;
next	1.12;
commitid	40f3459e6d9f4567;

1.12
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.26.14.42.36;	author cmahoney;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2005.12.20.21.05.04;	author sshaw;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.01.15.31.51;	author mmostafa;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.22.16.54.57;	author cmahoney;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.04.21.27.48;	author sshaw;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.15.48.52;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.36;	author sshaw;	state Exp;
branches;
next	;

1.11.2.1
date	2006.07.06.18.43.08;	author cmahoney;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2006.07.26.20.06.00;	author sshaw;	state Exp;
branches;
next	1.11.2.3;

1.11.2.3
date	2006.07.28.20.40.45;	author sshaw;	state Exp;
branches;
next	1.11.2.4;

1.11.2.4
date	2006.08.30.18.39.10;	author mmostafa;	state Exp;
branches;
next	1.11.2.5;

1.11.2.5
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.13
log
@[169568]  gmf_head mmostafa 070104 Memory consumption by the ListCompartmentEditPart can be reduced
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.draw2d.IFigure;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure;
import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.ListComponentEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.ModifySortFilterEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.internal.figures.NestedResizableCompartmentFigure;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
import org.eclipse.gmf.runtime.notation.Filtering;
import org.eclipse.gmf.runtime.notation.FilteringStyle;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.Sorting;
import org.eclipse.gmf.runtime.notation.SortingDirection;
import org.eclipse.gmf.runtime.notation.SortingStyle;
import org.eclipse.gmf.runtime.notation.View;

/**
 * An editpart implementation of the ResizableCompartment as a list compartment
 * 
 * @@author melaasar
 */
public abstract class ListCompartmentEditPart
	extends ResizableCompartmentEditPart {
	
	static long count = 0;
	
    
    // semantic chil;dren count
    protected int  modelChildrenListenersCount = 0 ;
    
	/** State of listening */
	protected boolean listening;

	/**
	 * @@param view The IResizableCompartmentView compartment view
	 */
	public ListCompartmentEditPart(EObject model) {
		super(model);
	}
	
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.MODIFY_SORT_FILTER_ROLE, new ModifySortFilterEditPolicy());
		installEditPolicy(EditPolicy.COMPONENT_ROLE, new ListComponentEditPolicy());
	}
		

	/** 
	 * Adds a constrained flow layout algorithm to the content pane of compartment figure
	 * @@see org.eclipse.gef.editparts.AbstractGraphicalEditPart#createFigure()
	 */
	public IFigure createFigure() {
		ResizableCompartmentFigure rcf;
		if (getParent() == getTopGraphicEditPart()){
			rcf = (ResizableCompartmentFigure) super.createFigure();
		} else {
			rcf = new NestedResizableCompartmentFigure(getMapMode());
		}
		
		ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();
			layout.setStretchMajorAxis(false);
			layout.setStretchMinorAxis(false);
			layout.setMinorAlignment(ConstrainedToolbarLayout.ALIGN_TOPLEFT);
			rcf.getContentPane().setLayoutManager(layout);
		
		
		return rcf;
	}

	/**
	 * Returns a list of sorted / filtered model children.  To get the model children
	 * in their natural ordering and size use getBaseModelChildren();
	 * @@see org.eclipse.gef.editparts.AbstractEditPart#getModelChildren()
	 */
	protected List getModelChildren() {
		List sortedFilteredChildren = new ArrayList(getSortedChildren());
		sortedFilteredChildren.removeAll(getFilteredChildren());
		return sortedFilteredChildren;
	}
	
	/**
	 * Returns a list of model children in their natural model state.
	 * @@return list of model children of this edit part
	 */
	protected List getBaseModelChildren() {
		return super.getChildren();
	}

	/**
	 * Determines if the given event affects the semantic model children
	 * 
	 * @@param evt The event in question
	 * @@return <code>true</code> if the events affects model children, <code>false</code> otherwise
	 */
	abstract protected boolean hasModelChildrenChanged(Notification evt);

	protected void handleNotificationEvent(Notification event ) {
		// If a child has been added or removed while sorting
		// or filtering is automatic, re-register the listeners.		
		if (hasModelChildrenChanged(event) && modeAutomatic()) {
			removeSemanticChildrenListeners();
			addSemanticChildrenListeners();
			refresh();
		} 
		
		Object feature = event.getFeature();
		if (NotationPackage.eINSTANCE.getFilteringStyle_Filtering().equals(feature)
			|| NotationPackage.eINSTANCE.getFilteringStyle_FilteringKeys().equals(feature)
			|| NotationPackage.eINSTANCE.getFilteringStyle_FilteredObjects().equals(feature)
			|| NotationPackage.eINSTANCE.getSortingStyle_Sorting().equals(feature)
			|| NotationPackage.eINSTANCE.getSortingStyle_SortingKeys().equals(feature)
			|| NotationPackage.eINSTANCE.getSortingStyle_SortedObjects().equals(feature)) {
			refresh();			
			
			if (modeAutomatic() && !listening) {  // start listening...
				removeSemanticChildrenListeners();
				addSemanticChildrenListeners();
			} 
			if (!modeAutomatic() && listening) { // stop listening...
				removeSemanticChildrenListeners();
			}
		} else if  (event.getEventType() == EventType.UNRESOLVE 
                && event.getNotifier() == ((View)getModel()).getElement()){
            handleMajorSemanticChange();
        }  else {
			super.handleNotificationEvent(event);
		}
		
		// refresh() if one of the children have changed a feature
		// affecting sorting / filtering.
		if (isAffectingSortingFiltering(feature) && modeAutomatic())
			refresh();
	}
	

	/**
	 * Returns a <code>List</code> of model children corresponding appearance order of the list 
	 * compartment items.
	 * @@return a <code>List</code> of Ids
	 */
	protected List getSortedChildren() {
		SortingStyle style = (SortingStyle)  ((View)getModel()).getStyle(NotationPackage.eINSTANCE.getSortingStyle());

		if (style != null) {
			Sorting sorting = style.getSorting();
			if (Sorting.NONE_LITERAL == sorting) {
				
				return super.getModelChildren();
				
			} else if (Sorting.MANUAL_LITERAL == sorting) {
	
				List allChildren = super.getModelChildren();
				// Return the empty list if the model children have not yet been
				// created.
				if (allChildren.isEmpty())
					return allChildren;
				
				List sortedChildren = style.eIsSet(NotationPackage.eINSTANCE.getSortingStyle_SortedObjects())
					? style.getSortedObjects() 
					: Collections.EMPTY_LIST;
	
				List sorted = new ArrayList();
				
				// Get the corresponding views...
				Iterator i = sortedChildren.iterator();
				while(i.hasNext()) {
					EObject eObject = (EObject) i.next();
					View view = getModelChildByID(eObject);
					if (view != null)
						sorted.add(view);
				}	
				
				// Add any remaining model children to the end
				for (int j = 0; j < allChildren.size(); j++) {
					View view = (View) allChildren.get(j);
					if (!sorted.contains(view))
						sorted.add(view);
				}
				
				return sorted;
				
			} else if (Sorting.AUTOMATIC_LITERAL == sorting) {
				Map sortingKeys = style.eIsSet(NotationPackage.eINSTANCE.getSortingStyle_SortingKeys())
					? style.getSortingKeys() 
					: Collections.EMPTY_MAP;
				return getChildrenSortedBy(sortingKeys);
			}
		}
		
		return super.getModelChildren();		
	}
	
	/**
	 * Returns the model children sorted by the order specified by Properties.ID_SORTING_KEYS.
	 * This is used to support dynamic list compartment sorting.
	 * @@param sortingKeys
	 * @@return the model children sorted
	 */
	protected List getChildrenSortedBy(Map sortingKeys) {
		
		List allChildren = new ArrayList(super.getModelChildren());
		
		// Currently only one sorting key is supported.
		if (sortingKeys != null && !sortingKeys.isEmpty()) {
			Collection keySet = sortingKeys.keySet();
			Iterator i = keySet.iterator();
			String name = (String) i.next();
			SortingDirection direction = (SortingDirection) sortingKeys.get(name);
			
			Comparator comparator = getComparator(name, direction);
			
			if (comparator != null)
				Collections.sort(allChildren, getComparator(name, direction));									
		} 
		return allChildren;
	}
	
	/**
	 * Returns a <code>Comparator</code> that is used to sort the list compartment
	 * children.  Override to provide a <code>Comparator</code> that provides
	 * for a particular child type.
	 * @@param name
	 * @@param direction
	 * @@return comparator
	 */
	protected Comparator getComparator(String name, SortingDirection direction) {
		return null;
	}	
	
	/**
	 * Returns a <code>List</code> of <code>View</code> s corresponding
	 * to the unique id of the semantic elements which are filtered.
	 * 
	 * @@return list of filtered model children
	 */
	protected List getFilteredChildren() {
		Object model = getModel();
		if (model instanceof View){
			View view = (View)model;
			FilteringStyle style = (FilteringStyle)  view.getStyle(NotationPackage.eINSTANCE.getFilteringStyle());
			if (style != null) {
				Filtering filtering = style.getFiltering();
				if (Filtering.NONE_LITERAL == filtering) {
					
					return Collections.EMPTY_LIST;
					
				} else if (Filtering.MANUAL_LITERAL == filtering) {
					
					List filteredChildren = style.eIsSet(NotationPackage.eINSTANCE.getFilteringStyle_FilteredObjects())
						? style.getFilteredObjects() 
						: Collections.EMPTY_LIST;
		
					List filteredViews = new ArrayList();
					// Get the corresponding views...
					Iterator i = filteredChildren.iterator();
					while(i.hasNext()) {
						EObject eObject = (EObject) i.next();
                        View modelChild = getModelChildByID(eObject);
                        if (modelChild != null) {
                            filteredViews.add(modelChild);
                        }
					}
					return filteredViews;	
				
				} else if (Filtering.AUTOMATIC_LITERAL == filtering) {
					List filteringKeys = style.eIsSet(NotationPackage.eINSTANCE.getFilteringStyle_FilteringKeys())
						? style.getFilteringKeys() 
						: Collections.EMPTY_LIST;
					return getChildrenFilteredBy(filteringKeys);
				}
			}
		}
		
		return Collections.EMPTY_LIST;
	}
	
	/**
	 * Returns a list of model children that are filtered according to 
	 * Properties.ID_FILTERING_KEYS.  This is used to support dynamic sorting.
	 * @@param filterKeys
	 * @@return list of filtered children
	 */
	protected List getChildrenFilteredBy(List filterKeys) {
		return Collections.EMPTY_LIST;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ResizableCompartmentEditPart#getCompartmentName()
	 */
	public String getCompartmentName() {
		return null;
	}
	
	/**
	 * Returns the child view given the semantic ID.
	 * @@param eObject the semantic element
	 * @@return the view or null if not found
	 */
	protected View getModelChildByID(EObject eObject) {
        List modelChildren = super.getModelChildren();
        for (int i = 0; i < modelChildren.size(); i++) {
            View view = (View) modelChildren.get(i);
            EObject e = ViewUtil.resolveSemanticElement(view);
            if (eObject.equals(e))
                return view;
        }
        return null;
	}
	
	/**
	 * Returns <code>true</code> if sorting or filtering is in automatic mode
	 * and <code>false</code> otherwise.
	 * @@return <code>true</code> if yes, oherwise <code>false</code> 
	 */
	protected boolean modeAutomatic() {
		View view = getNotationView();
		if (view!=null){
			SortingStyle sortingStyle = (SortingStyle) view.getStyle(NotationPackage.eINSTANCE.getSortingStyle());
			FilteringStyle filteringStyle = (FilteringStyle) view.getStyle(NotationPackage.eINSTANCE.getFilteringStyle());
			if (sortingStyle != null && Sorting.AUTOMATIC_LITERAL == sortingStyle.getSorting()) 
				return true;
			if (filteringStyle != null && Filtering.AUTOMATIC_LITERAL == filteringStyle.getFiltering())
				return true;
		}
		return false;
	}
	
	/**
	 * checks whether the feature affects the sorting / filtering.
	 * @@param feature the feature to check
	 * @@return <tt>true</tt> if it affects it otherwise <tt>false</tt>
	 */
	protected boolean isAffectingSortingFiltering(Object feature) {
		return false;
	}

	/**
	 * Add listeners to the children of this list compartment so changes
	 * to the children can be pickup and the sorting / filtering may be
	 * updated.
	 */
	protected void addSemanticChildrenListeners() {
		List modelChildren = super.getModelChildren();
        modelChildrenListenersCount = modelChildren.size();
		for (int i = 0; i < modelChildrenListenersCount; i++) {
			EObject eObject = ViewUtil.resolveSemanticElement((View)modelChildren.get(i));
			if (eObject != null)
				addListenerFilter(
					"SemanticModel" + i, this, eObject); //$NON-NLS-1$
		}	
		listening = true;
	}
	
	/**
	 * Remove the listeners on the children of this list compartment.
	 */
	protected void removeSemanticChildrenListeners() {
		for (int i = 0; i < modelChildrenListenersCount; i++)
			removeListenerFilter("SemanticModel" + i); //$NON-NLS-1$
		listening = false;
	}
	
	/**
	 * Add semanticChildrenListeners when we activiate, if needed.
	 */
	protected void addSemanticListeners() {
		if (modeAutomatic() && !listening) {
			addSemanticChildrenListeners();
		}
		super.addSemanticListeners();
	}
	
	/**
	 * Remove semanticChildrenListeners when we stop listening.
	 */
	protected void removeSemanticListeners() {
		removeSemanticChildrenListeners();
		listening = false;
		super.removeSemanticListeners();
	}
}
@


1.12
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d51 4
a54 2
	/** list of model children that this edit part is listening */
	protected List modelChildrenListeners;
d367 4
a370 3
		modelChildrenListeners = super.getModelChildren();
		for (int i = 0; i < modelChildrenListeners.size(); i++) {
			EObject eObject = ViewUtil.resolveSemanticElement((View)modelChildrenListeners.get(i));
d382 2
a383 5
		if (modelChildrenListeners != null) {
			for (int i = 0; i < modelChildrenListeners.size(); i++)
				removeListenerFilter("SemanticModel" + i); //$NON-NLS-1$
			modelChildrenListeners.clear();
		}
a401 1
		modelChildrenListeners = null;
@


1.11
log
@Bugzilla#109422 gmf_head cmahoney 060426 Code clean-up
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
d97 1
a97 1
	protected final List getModelChildren() {
d144 4
a147 1
		} else {
d280 4
a283 1
						filteredViews.add(getModelChildByID(eObject));
d322 8
a329 7
		for (int i = 0; i < super.getModelChildren().size(); i++) {
			View view = (View)super.getModelChildren().get(i);
			EObject e = ViewUtil.resolveSemanticElement(view);
			if (eObject.equals(e))
				return view;
		}
		return null;
@


1.11.2.1
log
@Delivered: Bugzilla#149087 gmf_R1_0_maintenance cmahoney 060706 ListCompartmentEditPart.getFilteredChildren() can add null elements to its list
@
text
@d277 1
a277 4
                        View modelChild = getModelChildByID(eObject);
                        if (modelChild != null) {
                            filteredViews.add(modelChild);
                        }
d316 7
a322 8
        List modelChildren = super.getModelChildren();
        for (int i = 0; i < modelChildren.size(); i++) {
            View view = (View) modelChildren.get(i);
            EObject e = ViewUtil.resolveSemanticElement(view);
            if (eObject.equals(e))
                return view;
        }
        return null;
@


1.11.2.2
log
@bugzilla 150316 sshaw gmf-R1_0_maintenance 060726 SemanticListCompartmentEditPart could improve its performance

Contributed by: Yaser Lulu
@
text
@d47 272
a318 356
    extends ResizableCompartmentEditPart {

    static long count = 0;

    /** list of model children that this edit part is listening */
    protected List modelChildrenListeners;

    /** State of listening */
    protected boolean listening;

    /**
     * @@param view
     *            The IResizableCompartmentView compartment view
     */
    public ListCompartmentEditPart(EObject model) {
        super(model);
    }

    protected void createDefaultEditPolicies() {
        super.createDefaultEditPolicies();
        installEditPolicy(EditPolicyRoles.MODIFY_SORT_FILTER_ROLE,
            new ModifySortFilterEditPolicy());
        installEditPolicy(EditPolicy.COMPONENT_ROLE,
            new ListComponentEditPolicy());
    }

    /**
     * Adds a constrained flow layout algorithm to the content pane of
     * compartment figure
     * 
     * @@see org.eclipse.gef.editparts.AbstractGraphicalEditPart#createFigure()
     */
    public IFigure createFigure() {
        ResizableCompartmentFigure rcf;
        if (getParent() == getTopGraphicEditPart()) {
            rcf = (ResizableCompartmentFigure) super.createFigure();
        } else {
            rcf = new NestedResizableCompartmentFigure(getMapMode());
        }

        ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();
        layout.setStretchMajorAxis(false);
        layout.setStretchMinorAxis(false);
        layout.setMinorAlignment(ConstrainedToolbarLayout.ALIGN_TOPLEFT);
        rcf.getContentPane().setLayoutManager(layout);

        return rcf;
    }

    /**
     * Returns a list of sorted / filtered model children. To get the model
     * children in their natural ordering and size use getBaseModelChildren();
     * 
     * @@see org.eclipse.gef.editparts.AbstractEditPart#getModelChildren()
     */
    protected List getModelChildren() {
    	return getModelChildren(super.getModelChildren());
    }
    
    /**
     * Returns a list of sorted / filtered model children. To get the model
     * children in their natural ordering and size use getBaseModelChildren();
     * Applies sorting and filtering to the existing <code>modelChildren</code>
     * List.
     * 
     * @@param modelChildren raw <code>List</code> of elements to be processed 
     * @@return <code>List</code> of elements which are contained in the compartment
     */
    List getModelChildren(List modelChildren) {
    	if (modelChildren.isEmpty() == false) {
            List sorted = getSortedChildren(modelChildren);
            List filtered = getFilteredChildren(modelChildren);
            if (filtered.isEmpty() == false) {
                List sortedFilteredChildren = (sorted == modelChildren) ? new ArrayList(
                    sorted)
                    : sorted;
                sortedFilteredChildren.removeAll(filtered);
                return sortedFilteredChildren;
            } else {
                return sorted;
            }
        }
        return modelChildren;
    }

    /**
     * Returns a list of model children in their natural model state.
     * 
     * @@return list of model children of this edit part
     */
    protected List getBaseModelChildren() {
        return super.getChildren();
    }

    /**
     * Determines if the given event affects the semantic model children
     * 
     * @@param evt
     *            The event in question
     * @@return <code>true</code> if the events affects model children,
     *         <code>false</code> otherwise
     */
    abstract protected boolean hasModelChildrenChanged(Notification evt);

    protected void handleNotificationEvent(Notification event) {
        // If a child has been added or removed while sorting
        // or filtering is automatic, re-register the listeners.
        boolean modeAutomatic = modeAutomatic();
        if (hasModelChildrenChanged(event) && modeAutomatic) {
            removeSemanticChildrenListeners();
            addSemanticChildrenListeners();
            refresh();
        }

        Object feature = event.getFeature();
        if (NotationPackage.Literals.FILTERING_STYLE__FILTERING.equals(
            feature)
            || NotationPackage.Literals.FILTERING_STYLE__FILTERING_KEYS
                .equals(feature)
            || NotationPackage.Literals.FILTERING_STYLE__FILTERED_OBJECTS
                .equals(feature)
            || NotationPackage.Literals.SORTING_STYLE__SORTING.equals(
                feature)
            || NotationPackage.Literals.SORTING_STYLE__SORTING_KEYS.equals(
                feature)
            || NotationPackage.Literals.SORTING_STYLE__SORTED_OBJECTS
                .equals(feature)) {
            refresh();

            if (modeAutomatic && !listening) { // start listening...
                removeSemanticChildrenListeners();
                addSemanticChildrenListeners();
            }
            if (!modeAutomatic && listening) { // stop listening...
                removeSemanticChildrenListeners();
            }
        } else {
            super.handleNotificationEvent(event);
        }

        // refresh() if one of the children have changed a feature
        // affecting sorting / filtering.
        if (isAffectingSortingFiltering(feature) && modeAutomatic)
            refresh();
    }
    
    /**
     * Returns a <code>List</code> of model children corresponding appearance
     * order of the list compartment items.
     * 
     * @@param modelChildren list of model children to inspect
     * @@return a <code>List</code> of Ids
     */
    List getSortedChildren(final List modelChildren) {
        SortingStyle style = (SortingStyle) ((View) getModel())
            .getStyle(NotationPackage.Literals.SORTING_STYLE);
        if (style != null) {

            Sorting sorting = style.getSorting();
            if (Sorting.NONE_LITERAL == sorting) {

                return modelChildren;

            } else if (Sorting.MANUAL_LITERAL == sorting) {

                List sortedChildren = style.eIsSet(NotationPackage.Literals
                    .SORTING_STYLE__SORTED_OBJECTS) ? style
                    .getSortedObjects()
                    : Collections.EMPTY_LIST;

                if (sortedChildren.isEmpty()) {
                    return modelChildren;
                }

                List sorted = new ArrayList();

                // Get the corresponding views...
                Iterator i = sortedChildren.iterator();
                while (i.hasNext()) {
                    EObject eObject = (EObject) i.next();
                    View view = getModelChildByID(eObject);
                    if (view != null)
                        sorted.add(view);
                }

                // Add any remaining model children to the end
                int size = modelChildren.size();
                for (int j = 0; j < size; j++) {
                    View view = (View) modelChildren.get(j);
                    if (!sorted.contains(view))
                        sorted.add(view);
                }

                return sorted;

            } else if (Sorting.AUTOMATIC_LITERAL == sorting) {
                Map sortingKeys = style.eIsSet(NotationPackage.Literals
                    .SORTING_STYLE__SORTING_KEYS) ? style.getSortingKeys()
                    : Collections.EMPTY_MAP;
                return (sortingKeys.isEmpty()) ? modelChildren
                    : getChildrenSortedBy(sortingKeys, modelChildren);
            }

        }

        return modelChildren;
    }

    /**
     * Returns the model children sorted by the order specified by
     * Properties.ID_SORTING_KEYS. This is used to support dynamic list
     * compartment sorting.
     * 
     * @@param sortingKeys
     * @@param modelChildren <code>List</code> of elements to be processed
     * @@return the model children sorted
     */
    List getChildrenSortedBy(Map sortingKeys, List modelChildren) {
        if (sortingKeys != null && !sortingKeys.isEmpty()) {
            Map.Entry entry = (Map.Entry) sortingKeys.entrySet().iterator()
                .next();
            Comparator comparator = getComparator((String) entry.getKey(),
                (SortingDirection) entry.getValue());
            if (comparator != null) {
                List allChildren = new ArrayList(modelChildren);
                Collections.sort(allChildren, comparator);
                return allChildren;
            }
        }
        return modelChildren;
    }

    /**
     * Returns a <code>List</code> of model children corresponding appearance
     * order of the list compartment items.
     * 
     * @@return a <code>List</code> of Ids
     */
    protected List getSortedChildren() {
        List modelChildren = super.getModelChildren();
        if (modelChildren.isEmpty() == false) {
            return getSortedChildren(modelChildren);
        }
        return modelChildren;
    }

    /**
     * Returns the model children sorted by the order specified by
     * Properties.ID_SORTING_KEYS. This is used to support dynamic list
     * compartment sorting.
     * 
     * @@param sortingKeys
     * @@return the model children sorted
     */
    protected List getChildrenSortedBy(Map sortingKeys) {
        if (sortingKeys != null && !sortingKeys.isEmpty()) {
            List allChildren = new ArrayList(super.getModelChildren());
            // Currently only one sorting key is supported.
            Collection keySet = sortingKeys.keySet();
            Iterator i = keySet.iterator();
            String name = (String) i.next();
            SortingDirection direction = (SortingDirection) sortingKeys
                .get(name);

            Comparator comparator = getComparator(name, direction);

            if (comparator != null)
                Collections.sort(allChildren, comparator);

            return allChildren;
        }

        return super.getModelChildren();

    }

    /**
     * Returns a <code>Comparator</code> that is used to sort the list
     * compartment children. Override to provide a <code>Comparator</code>
     * that provides for a particular child type.
     * 
     * @@param name
     * @@param direction
     * @@return comparator
     */
    protected Comparator getComparator(String name, SortingDirection direction) {
        return null;
    }
    
    /**
     * Returns a <code>List</code> of <code>View</code> s corresponding to
     * the unique id of the semantic elements which are filtered.
     * 
     * @@param modelChildren list of model children to inspect
     * @@return list of filtered model children
     */
    List getFilteredChildren(final List modelChildren) {

        FilteringStyle style = (FilteringStyle) ((View) getModel())
            .getStyle(NotationPackage.Literals.FILTERING_STYLE);
        if (style != null) {

            Filtering filtering = style.getFiltering();
            if (Filtering.NONE_LITERAL == filtering) {

                return Collections.EMPTY_LIST;

            } else if (Filtering.MANUAL_LITERAL == filtering) {

                List filteredChildren = style.eIsSet(NotationPackage.Literals
                    .FILTERING_STYLE__FILTERED_OBJECTS) ? style
                    .getFilteredObjects()
                    : Collections.EMPTY_LIST;

                if (filteredChildren.isEmpty()) {
                    return Collections.EMPTY_LIST;
                }

                List filteredViews = new ArrayList();
                // Get the corresponding views...
                Iterator i = filteredChildren.iterator();
                while (i.hasNext()) {
                    Object childview = getModelChildByID((EObject) i.next(),
                        modelChildren);
                    if (childview != null) {
                        filteredViews.add(childview);
                    }
                }
                return filteredViews;

            } else if (Filtering.AUTOMATIC_LITERAL == filtering) {
                List filteringKeys = style.eIsSet(NotationPackage.Literals
                    .FILTERING_STYLE__FILTERING_KEYS) ? style
                    .getFilteringKeys()
                    : Collections.EMPTY_LIST;
                return (filteringKeys.isEmpty()) ? filteringKeys
                    : getChildrenFilteredBy(filteringKeys, modelChildren);
            }

        }

        return Collections.EMPTY_LIST;

    }

    protected List getChildrenFilteredBy(List filterKeys, List modelChildren) {
        return Collections.EMPTY_LIST;
    }

    /**
     * Returns a <code>List</code> of <code>View</code> s corresponding to
     * the unique id of the semantic elements which are filtered.
     * 
     * @@return list of filtered model children
     */
    protected List getFilteredChildren() {
d320 1
a320 48
        if (modelChildren.isEmpty() == false) {
            return getFilteredChildren(modelChildren);
        }
        return Collections.EMPTY_LIST;
    }

    /**
     * Returns a list of model children that are filtered according to
     * Properties.ID_FILTERING_KEYS. This is used to support dynamic sorting.
     * 
     * @@param filterKeys
     * @@return list of filtered children
     */
    protected List getChildrenFilteredBy(List filterKeys) {
        return Collections.EMPTY_LIST;
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ResizableCompartmentEditPart#getCompartmentName()
     */
    public String getCompartmentName() {
        return null;
    }

    /**
     * Returns the child view given the semantic ID.
     * 
     * @@param eObject
     *            the semantic element
     * @@return the view or null if not found
     */
    protected View getModelChildByID(EObject eObject) {
        return getModelChildByID(eObject, super.getModelChildren());
    }

    /**
     * Returns the child view given the semantic ID.
     * 
     * @@param eObject
     *            the semantic element
     * @@param modelChildren list of model children to inspect
     * @@return the view or null if not found
     */
    View getModelChildByID(EObject eObject, List modelChildren) {
        int size = modelChildren.size();
        for (int i = 0; i < size; i++) {
d327 76
a402 82
    }

    /**
     * Returns <code>true</code> if sorting or filtering is in automatic mode
     * and <code>false</code> otherwise.
     * 
     * @@return <code>true</code> if yes, oherwise <code>false</code>
     */
    protected boolean modeAutomatic() {
        View view = getNotationView();
        if (view != null) {
            SortingStyle sortingStyle = (SortingStyle) view
                .getStyle(NotationPackage.Literals.SORTING_STYLE);
            FilteringStyle filteringStyle = (FilteringStyle) view
                .getStyle(NotationPackage.Literals.FILTERING_STYLE);
            if (sortingStyle != null
                && Sorting.AUTOMATIC_LITERAL == sortingStyle.getSorting())
                return true;
            if (filteringStyle != null
                && Filtering.AUTOMATIC_LITERAL == filteringStyle.getFiltering())
                return true;
        }
        return false;
    }

    /**
     * checks whether the feature affects the sorting / filtering.
     * 
     * @@param feature
     *            the feature to check
     * @@return <tt>true</tt> if it affects it otherwise <tt>false</tt>
     */
    protected boolean isAffectingSortingFiltering(Object feature) {
        return false;
    }

    /**
     * Add listeners to the children of this list compartment so changes to the
     * children can be pickup and the sorting / filtering may be updated.
     */
    protected void addSemanticChildrenListeners() {
        modelChildrenListeners = super.getModelChildren();
        for (int i = 0; i < modelChildrenListeners.size(); i++) {
            EObject eObject = ViewUtil
                .resolveSemanticElement((View) modelChildrenListeners.get(i));
            if (eObject != null)
                addListenerFilter("SemanticModel" + i, this, eObject); //$NON-NLS-1$
        }
        listening = true;
    }

    /**
     * Remove the listeners on the children of this list compartment.
     */
    protected void removeSemanticChildrenListeners() {
        if (modelChildrenListeners != null) {
            for (int i = 0; i < modelChildrenListeners.size(); i++)
                removeListenerFilter("SemanticModel" + i); //$NON-NLS-1$
            modelChildrenListeners = null;
        }
        listening = false;
    }

    /**
     * Add semanticChildrenListeners when we activiate, if needed.
     */
    protected void addSemanticListeners() {
        if (modeAutomatic() && !listening) {
            addSemanticChildrenListeners();
        }
        super.addSemanticListeners();
    }

    /**
     * Remove semanticChildrenListeners when we stop listening.
     */
    protected void removeSemanticListeners() {
        removeSemanticChildrenListeners();
        modelChildrenListeners = null;
        listening = false;
        super.removeSemanticListeners();
    }
@


1.11.2.3
log
@bugzilla 150316 sshaw gmf-R1_0_maintenance 060726 SemanticListCompartmentEditPart could improve its performance

Contributed by: Yaser Lulu (less intrusive patch)
@
text
@d47 356
a402 272
	extends ResizableCompartmentEditPart {
	
	static long count = 0;
	
	/** list of model children that this edit part is listening */
	protected List modelChildrenListeners;
	/** State of listening */
	protected boolean listening;

	/**
	 * @@param view The IResizableCompartmentView compartment view
	 */
	public ListCompartmentEditPart(EObject model) {
		super(model);
	}
	
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.MODIFY_SORT_FILTER_ROLE, new ModifySortFilterEditPolicy());
		installEditPolicy(EditPolicy.COMPONENT_ROLE, new ListComponentEditPolicy());
	}
		

	/** 
	 * Adds a constrained flow layout algorithm to the content pane of compartment figure
	 * @@see org.eclipse.gef.editparts.AbstractGraphicalEditPart#createFigure()
	 */
	public IFigure createFigure() {
		ResizableCompartmentFigure rcf;
		if (getParent() == getTopGraphicEditPart()){
			rcf = (ResizableCompartmentFigure) super.createFigure();
		} else {
			rcf = new NestedResizableCompartmentFigure(getMapMode());
		}
		
		ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();
			layout.setStretchMajorAxis(false);
			layout.setStretchMinorAxis(false);
			layout.setMinorAlignment(ConstrainedToolbarLayout.ALIGN_TOPLEFT);
			rcf.getContentPane().setLayoutManager(layout);
		
		
		return rcf;
	}

	/**
	 * Returns a list of sorted / filtered model children.  To get the model children
	 * in their natural ordering and size use getBaseModelChildren();
	 * @@see org.eclipse.gef.editparts.AbstractEditPart#getModelChildren()
	 */
	protected List getModelChildren() {
		List sortedFilteredChildren = new ArrayList(getSortedChildren());
		sortedFilteredChildren.removeAll(getFilteredChildren());
		return sortedFilteredChildren;
	}
	
	/**
	 * Returns a list of model children in their natural model state.
	 * @@return list of model children of this edit part
	 */
	protected List getBaseModelChildren() {
		return super.getChildren();
	}

	/**
	 * Determines if the given event affects the semantic model children
	 * 
	 * @@param evt The event in question
	 * @@return <code>true</code> if the events affects model children, <code>false</code> otherwise
	 */
	abstract protected boolean hasModelChildrenChanged(Notification evt);

	protected void handleNotificationEvent(Notification event ) {
		// If a child has been added or removed while sorting
		// or filtering is automatic, re-register the listeners.		
		if (hasModelChildrenChanged(event) && modeAutomatic()) {
			removeSemanticChildrenListeners();
			addSemanticChildrenListeners();
			refresh();
		} 
		
		Object feature = event.getFeature();
		if (NotationPackage.eINSTANCE.getFilteringStyle_Filtering().equals(feature)
			|| NotationPackage.eINSTANCE.getFilteringStyle_FilteringKeys().equals(feature)
			|| NotationPackage.eINSTANCE.getFilteringStyle_FilteredObjects().equals(feature)
			|| NotationPackage.eINSTANCE.getSortingStyle_Sorting().equals(feature)
			|| NotationPackage.eINSTANCE.getSortingStyle_SortingKeys().equals(feature)
			|| NotationPackage.eINSTANCE.getSortingStyle_SortedObjects().equals(feature)) {
			refresh();			
			
			if (modeAutomatic() && !listening) {  // start listening...
				removeSemanticChildrenListeners();
				addSemanticChildrenListeners();
			} 
			if (!modeAutomatic() && listening) { // stop listening...
				removeSemanticChildrenListeners();
			}
		} else {
			super.handleNotificationEvent(event);
		}
		
		// refresh() if one of the children have changed a feature
		// affecting sorting / filtering.
		if (isAffectingSortingFiltering(feature) && modeAutomatic())
			refresh();
	}
	

	/**
	 * Returns a <code>List</code> of model children corresponding appearance order of the list 
	 * compartment items.
	 * @@return a <code>List</code> of Ids
	 */
	protected List getSortedChildren() {
		SortingStyle style = (SortingStyle)  ((View)getModel()).getStyle(NotationPackage.eINSTANCE.getSortingStyle());

		if (style != null) {
			Sorting sorting = style.getSorting();
			if (Sorting.NONE_LITERAL == sorting) {
				
				return super.getModelChildren();
				
			} else if (Sorting.MANUAL_LITERAL == sorting) {
	
				List allChildren = super.getModelChildren();
				// Return the empty list if the model children have not yet been
				// created.
				if (allChildren.isEmpty())
					return allChildren;
				
				List sortedChildren = style.eIsSet(NotationPackage.eINSTANCE.getSortingStyle_SortedObjects())
					? style.getSortedObjects() 
					: Collections.EMPTY_LIST;
	
				List sorted = new ArrayList();
				
				// Get the corresponding views...
				Iterator i = sortedChildren.iterator();
				while(i.hasNext()) {
					EObject eObject = (EObject) i.next();
					View view = getModelChildByID(eObject);
					if (view != null)
						sorted.add(view);
				}	
				
				// Add any remaining model children to the end
				for (int j = 0; j < allChildren.size(); j++) {
					View view = (View) allChildren.get(j);
					if (!sorted.contains(view))
						sorted.add(view);
				}
				
				return sorted;
				
			} else if (Sorting.AUTOMATIC_LITERAL == sorting) {
				Map sortingKeys = style.eIsSet(NotationPackage.eINSTANCE.getSortingStyle_SortingKeys())
					? style.getSortingKeys() 
					: Collections.EMPTY_MAP;
				return getChildrenSortedBy(sortingKeys);
			}
		}
		
		return super.getModelChildren();		
	}
	
	/**
	 * Returns the model children sorted by the order specified by Properties.ID_SORTING_KEYS.
	 * This is used to support dynamic list compartment sorting.
	 * @@param sortingKeys
	 * @@return the model children sorted
	 */
	protected List getChildrenSortedBy(Map sortingKeys) {
		
		List allChildren = new ArrayList(super.getModelChildren());
		
		// Currently only one sorting key is supported.
		if (sortingKeys != null && !sortingKeys.isEmpty()) {
			Collection keySet = sortingKeys.keySet();
			Iterator i = keySet.iterator();
			String name = (String) i.next();
			SortingDirection direction = (SortingDirection) sortingKeys.get(name);
			
			Comparator comparator = getComparator(name, direction);
			
			if (comparator != null)
				Collections.sort(allChildren, getComparator(name, direction));									
		} 
		return allChildren;
	}
	
	/**
	 * Returns a <code>Comparator</code> that is used to sort the list compartment
	 * children.  Override to provide a <code>Comparator</code> that provides
	 * for a particular child type.
	 * @@param name
	 * @@param direction
	 * @@return comparator
	 */
	protected Comparator getComparator(String name, SortingDirection direction) {
		return null;
	}	
	
	/**
	 * Returns a <code>List</code> of <code>View</code> s corresponding
	 * to the unique id of the semantic elements which are filtered.
	 * 
	 * @@return list of filtered model children
	 */
	protected List getFilteredChildren() {
		Object model = getModel();
		if (model instanceof View){
			View view = (View)model;
			FilteringStyle style = (FilteringStyle)  view.getStyle(NotationPackage.eINSTANCE.getFilteringStyle());
			if (style != null) {
				Filtering filtering = style.getFiltering();
				if (Filtering.NONE_LITERAL == filtering) {
					
					return Collections.EMPTY_LIST;
					
				} else if (Filtering.MANUAL_LITERAL == filtering) {
					
					List filteredChildren = style.eIsSet(NotationPackage.eINSTANCE.getFilteringStyle_FilteredObjects())
						? style.getFilteredObjects() 
						: Collections.EMPTY_LIST;
		
					List filteredViews = new ArrayList();
					// Get the corresponding views...
					Iterator i = filteredChildren.iterator();
					while(i.hasNext()) {
						EObject eObject = (EObject) i.next();
                        View modelChild = getModelChildByID(eObject);
                        if (modelChild != null) {
                            filteredViews.add(modelChild);
                        }
					}
					return filteredViews;	
				
				} else if (Filtering.AUTOMATIC_LITERAL == filtering) {
					List filteringKeys = style.eIsSet(NotationPackage.eINSTANCE.getFilteringStyle_FilteringKeys())
						? style.getFilteringKeys() 
						: Collections.EMPTY_LIST;
					return getChildrenFilteredBy(filteringKeys);
				}
			}
		}
		
		return Collections.EMPTY_LIST;
	}
	
	/**
	 * Returns a list of model children that are filtered according to 
	 * Properties.ID_FILTERING_KEYS.  This is used to support dynamic sorting.
	 * @@param filterKeys
	 * @@return list of filtered children
	 */
	protected List getChildrenFilteredBy(List filterKeys) {
		return Collections.EMPTY_LIST;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ResizableCompartmentEditPart#getCompartmentName()
	 */
	public String getCompartmentName() {
		return null;
	}
	
	/**
	 * Returns the child view given the semantic ID.
	 * @@param eObject the semantic element
	 * @@return the view or null if not found
	 */
	protected View getModelChildByID(EObject eObject) {
d404 48
a451 1
        for (int i = 0; i < modelChildren.size(); i++) {
d458 82
a539 76
	}
	
	/**
	 * Returns <code>true</code> if sorting or filtering is in automatic mode
	 * and <code>false</code> otherwise.
	 * @@return <code>true</code> if yes, oherwise <code>false</code> 
	 */
	protected boolean modeAutomatic() {
		View view = getNotationView();
		if (view!=null){
			SortingStyle sortingStyle = (SortingStyle) view.getStyle(NotationPackage.eINSTANCE.getSortingStyle());
			FilteringStyle filteringStyle = (FilteringStyle) view.getStyle(NotationPackage.eINSTANCE.getFilteringStyle());
			if (sortingStyle != null && Sorting.AUTOMATIC_LITERAL == sortingStyle.getSorting()) 
				return true;
			if (filteringStyle != null && Filtering.AUTOMATIC_LITERAL == filteringStyle.getFiltering())
				return true;
		}
		return false;
	}
	
	/**
	 * checks whether the feature affects the sorting / filtering.
	 * @@param feature the feature to check
	 * @@return <tt>true</tt> if it affects it otherwise <tt>false</tt>
	 */
	protected boolean isAffectingSortingFiltering(Object feature) {
		return false;
	}

	/**
	 * Add listeners to the children of this list compartment so changes
	 * to the children can be pickup and the sorting / filtering may be
	 * updated.
	 */
	protected void addSemanticChildrenListeners() {
		modelChildrenListeners = super.getModelChildren();
		for (int i = 0; i < modelChildrenListeners.size(); i++) {
			EObject eObject = ViewUtil.resolveSemanticElement((View)modelChildrenListeners.get(i));
			if (eObject != null)
				addListenerFilter(
					"SemanticModel" + i, this, eObject); //$NON-NLS-1$
		}	
		listening = true;
	}
	
	/**
	 * Remove the listeners on the children of this list compartment.
	 */
	protected void removeSemanticChildrenListeners() {
		if (modelChildrenListeners != null) {
			for (int i = 0; i < modelChildrenListeners.size(); i++)
				removeListenerFilter("SemanticModel" + i); //$NON-NLS-1$
			modelChildrenListeners.clear();
		}
		listening = false;
	}
	
	/**
	 * Add semanticChildrenListeners when we activiate, if needed.
	 */
	protected void addSemanticListeners() {
		if (modeAutomatic() && !listening) {
			addSemanticChildrenListeners();
		}
		super.addSemanticListeners();
	}
	
	/**
	 * Remove semanticChildrenListeners when we stop listening.
	 */
	protected void removeSemanticListeners() {
		removeSemanticChildrenListeners();
		modelChildrenListeners = null;
		listening = false;
		super.removeSemanticListeners();
	}
@


1.11.2.4
log
@[155720] gmf_R1_0_maintenace mmostafa 060830  ListCompartment does not handle unresolve event
@
text
@d144 1
a144 4
		} else if  (event.getEventType() == EventType.UNRESOLVE 
                && event.getNotifier() == ((View)getModel()).getElement()){
            handleMajorSemanticChange();
        }  else {
@


1.11.2.5
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.10
log
@bugzilla 121595 gmf_head sshaw 051220 Make ResizableCompartmentEditPart#getTitleName public
@
text
@d79 1
a79 1
			rcf = new NestedResizableCompartmentFigure(getMapMode().DPtoLP(11));
@


1.9
log
@ bugzilla 111894 gmf-head mmostafa 051201 Improve memory consumption of opened notation diagram
@
text
@d303 3
a305 5
	
	/**
	 * Returns the compartment name.
	 * @@return the compartment name.
	 */	
d307 1
a307 1
		return getTitleName();
a323 5

	/** Return <tt>null</tt> */
	protected String getTitleName() {
		return null;
	}
@


1.8
log
@Bugzilla#117299 gmf_head cmahoney 051123 Popup menu bar is not available for the list compartment
@
text
@d59 2
a60 2
	public ListCompartmentEditPart(View view) {
		super(view);
@


1.7
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@a26 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.PopupBarEditPolicy;
a62 3
	/**
	 * 
	 */
d64 1
a66 2
		installEditPolicy(EditPolicyRoles.POPUPBAR_ROLE, new PopupBarEditPolicy());
		super.createDefaultEditPolicies();
@


1.6
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d84 1
a84 1
			rcf = new NestedResizableCompartmentFigure();
@


1.5
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ActionBarEditPolicy;
d70 1
a70 1
		installEditPolicy(EditPolicyRoles.ACTIONBAR_ROLE, new ActionBarEditPolicy());
@


1.4
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a13 1
import java.beans.PropertyChangeEvent;
d23 1
a25 1
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;
a32 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
d50 2
a102 1
		
d122 1
a122 1
	abstract protected boolean hasModelChildrenChanged(PropertyChangeEvent evt);
d124 1
a124 7
	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#handlePropertyChangeEvent(java.beans.PropertyChangeEvent)
	 */
	protected void handlePropertyChangeEvent(PropertyChangeEvent event) {
		
		super.handlePropertyChangeEvent(event);
		
d132 8
a139 8

		if (Properties.ID_FILTERING.equals(event.getPropertyName())
			|| Properties.ID_FILTERING_KEYS.equals(event.getPropertyName())
			|| Properties.ID_FILTERED_OBJECTS.equals(event.getPropertyName())
			|| Properties.ID_SORTING.equals(event.getPropertyName())
			|| Properties.ID_SORTING_KEYS.equals(event.getPropertyName())
			|| Properties.ID_SORTED_OBJECTS.equals(event.getPropertyName())) {
			
d149 3
a151 1
		} 
d155 2
a156 7
		if (event instanceof NotificationEvent) {
			Object feature = ((NotificationEvent) event).getFeature();

			if (isAffectingSortingFiltering(feature) && modeAutomatic())
				refresh();
		}

d158 1
@


1.3
log
@Bugzilla109092 : rmp_head mmostafa 050912 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@a23 1

d25 1
a25 1
import org.eclipse.gmf.runtime.diagram.core.listener.PresentationListener;
a32 1
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
d382 1
a382 1
					"SemanticModel" + i, this, PresentationListener.getNotifier(eObject)); //$NON-NLS-1$
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d36 7
a42 7
import com.ibm.xtools.notation.Filtering;
import com.ibm.xtools.notation.FilteringStyle;
import com.ibm.xtools.notation.NotationPackage;
import com.ibm.xtools.notation.Sorting;
import com.ibm.xtools.notation.SortingDirection;
import com.ibm.xtools.notation.SortingStyle;
import com.ibm.xtools.notation.View;
@

