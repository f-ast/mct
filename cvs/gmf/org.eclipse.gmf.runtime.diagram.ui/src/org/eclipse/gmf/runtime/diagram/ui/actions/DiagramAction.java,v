head	1.9;
access;
symbols
	v20081023-2107:1.9
	v20081022-1925:1.9
	v20081022-1005:1.9
	v20081020-0700:1.9
	v20080917-1925:1.9
	v20080916-2008:1.9
	v20080911-1728:1.9
	v20080911-1506:1.9
	v20080910-1520:1.9
	v20080910-1510:1.9
	v20080903-1520:1.9
	v20080903-1510:1.9
	v20080813-1510:1.9
	v20080811-1546:1.9
	v20080731-1520:1.9
	v20080725-1738:1.9
	v20080723-2246:1.9
	v20080723-2232:1.9
	v20080723-1700:1.9
	v20080722-1827:1.9
	v20080718-1700:1.9
	v20080718-1731:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.6
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080527-1255:1.9
	v20080527-1151:1.9
	v20080516-1748:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080503-1740:1.9
	v20080501-2127:1.9
	v20080501-1739:1.9
	m20080429-1543:1.9
	v20080425-1959:1.9
	v20080417-1610:1.9
	v20080407-2250:1.9
	v20080407-0930:1.9
	v20080404-1111:1.9
	v20080328-1605:1.9
	v20080322-0000:1.9
	v20080222-1200:1.9
	v20080201-2010:1.9
	v20080201-0201:1.9
	v20080118-1129:1.9
	v20080114-2222:1.9
	v20080114-1111:1.9
	v20080107-1111:1.9
	v20071222-1111:1.9
	v20071214-1111:1.9
	v20071130-1111:1.9
	v20071124-0000:1.9
	v20071112-0000:1.9
	v20071108-0000:1.9
	v20071003-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.4
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070518-1300:1.9
	bugzilla111892_group_support:1.9.0.2
	Root_bugzilla111892_group_support:1.9
	v20070504-1000:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.4.2.2
	v20070119-1200:1.4.2.2
	v20070111-0800:1.4.2.2
	v20070105-1200:1.4.2.2
	v20070103-0300:1.5
	M4_20:1.5
	v20061218-1500:1.4.2.2
	v20061218-1200:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061027-1200:1.4.2.2
	v20061013-1330:1.5
	v20061012-1100:1.4.2.2
	v20060925-1700:1.4.2.2
	v20060919-0800:1.4.2.2
	v20060907-1100:1.4
	M1_20:1.4
	v20060831-1500:1.4
	v20060824-1600:1.4
	v20060817-1500:1.4
	v20060810-1700:1.4
	v20060803-1200:1.4
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2007.05.14.17.21.40;	author mmostafa;	state Exp;
branches;
next	1.8;
commitid	4f2446489aa34567;

1.8
date	2007.05.08.21.21.31;	author ldamus;	state Exp;
branches;
next	1.7;
commitid	ca74640e9db4567;

1.7
date	2007.01.12.16.44.53;	author crevells;	state Exp;
branches;
next	1.6;
commitid	69ab45a7bb054567;

1.6
date	2007.01.10.22.07.49;	author crevells;	state Exp;
branches;
next	1.5;
commitid	4a8345a563b44567;

1.5
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.18.20.51.25;	author cmahoney;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.27.20.40.50;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.23.30.18;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2006.09.15.16.03.11;	author cmahoney;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[186765] gmf_head mmostafa 070514 Check workbench part for null in DiagramAction before getting adapter from it
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.actions;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.gef.Disposable;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CommandStack;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.ui.action.AbstractActionHandler;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditDomain;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchPart;

/**
 * An abstract implementation of a diagram action that follows the
 * request-command architecture.
 * 
 * Notice: 1) This action retargets to the active workbench part 2) This action
 * can either be contributed programatically or through the
 * <code>ControbutionItemService</code>.
 * 
 * @@author melaasar
 */
public abstract class DiagramAction
	extends AbstractActionHandler
	implements Disposable {

	/** the target request */
	private Request targetRequest;

	/** the cached operation set */
	private List _operationSet = Collections.EMPTY_LIST;

	/**
	 * Constructs a new diagram action
	 * 
	 * @@param workbenchPage
	 *            The workbench page associated with this action
	 */
	public DiagramAction(IWorkbenchPage workbenchPage) {
		super(workbenchPage);
	}

	/**
	 * Constructs a new diagram action. This constructor is provided just in
	 * case a derived class needs to support both the construction of a diagram
	 * action with a workbenchpart. Typically this is only when the diagram
	 * declares its own action in additional to the one registered with the
	 * action serivce.
	 * 
	 * @@param workbenchpart
	 *            The workbench part associated with this action
	 */
	protected DiagramAction(IWorkbenchPart workbenchpart) {
		super(workbenchpart);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.action.IDisposableAction#dispose()
	 */
	public void dispose() {
		targetRequest = null;
		_operationSet = null;
		super.dispose();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractActionHandler#doRun(org.eclipse.core.runtime.IProgressMonitor)
	 */
	protected void doRun(IProgressMonitor progressMonitor) {
		execute(getCommand(), progressMonitor);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.action.IRepeatableAction#refresh()
	 */
	public void refresh() {
		_operationSet = null; // invalidate the cached set
		updateTargetRequest();
		setEnabled(calculateEnabled());
	}

	/**
	 * Calculates the enblement state of the action
	 * 
	 * @@return <code>true</code> if action should be enabled,
	 *         <code>false</code> otherwise
	 */
	protected boolean calculateEnabled() {
		Command command = getCommand();
		return command != null && command.canExecute();
	}

	/**
	 * Executes the given {@@link Command}.
	 * 
	 * @@param command
	 *            the command to execute
	 * @@param progressMonitor
	 *            the progress monitor to use during execution
	 */
	protected final void execute(Command command,
			IProgressMonitor progressMonitor) {
		if (command == null || !command.canExecute())
			return;
		if (getDiagramCommandStack() != null)
			getDiagramCommandStack().execute(command, progressMonitor);
	}

	/**
	 * gives access to the diagram command stack
	 * 
	 * @@return the diagram command stack
	 */
	protected DiagramCommandStack getDiagramCommandStack() {
		Object stack = getWorkbenchPart().getAdapter(CommandStack.class);
		return (stack instanceof DiagramCommandStack) ? (DiagramCommandStack) stack
			: null;
	}

	/**
	 * Gets the associated Command with this action based on the target request
	 * 
	 * @@return a command
	 */
	protected Command getCommand() {
		return getCommand(getTargetRequest());
	}

	/**
	 * Gets a command to execute on the operation set based on a given request
	 * 
	 * @@param request
	 *            request to use to get the command
	 * @@return a command
	 */
	protected Command getCommand(Request request) {
		List operationSet = getOperationSet();
		Iterator editParts = operationSet.iterator();
		CompoundCommand command = new CompoundCommand(getCommandLabel());
		while (editParts.hasNext()) {
			EditPart editPart = (EditPart) editParts.next();
			Command curCommand = editPart.getCommand(request);
			if (curCommand != null) {
				command.add(curCommand);
			}
		}
		return command.isEmpty() || command.size() != operationSet.size() ? UnexecutableCommand.INSTANCE
			: (Command) command;
	}

	/**
	 * Gets an optional label for the action's executed command
	 * 
	 * @@return An optional label for the action's executed command
	 */
	protected String getCommandLabel() {
		return StringStatics.BLANK;
	}

	/**
	 * Gets a request to be addressed to the operation set
	 * 
	 * @@return a target request
	 */
	protected Request getTargetRequest() {
		if (targetRequest == null)
			targetRequest = createTargetRequest();
		return targetRequest;
	}

	/**
	 * Creates a new target request
	 * 
	 * @@return the new target request
	 */
	protected abstract Request createTargetRequest();

	/**
	 * updates the target request. Clients should call this method whenever the
	 * request is expected to be changed
	 */
	protected void updateTargetRequest() {
		// no def impl
	}

	/**
	 * Sets the target request to <tt>null</tt>. This will force the creation
	 * of a new target request on the next {@@link #getTargetRequest()} call.
	 */
	protected void clearTargetRequest() {
		targetRequest = null;
	}

	/**
	 * A utility method to return a list of objects in the current structured
	 * selection
	 * 
	 * @@return A list of objects in the current structure selection
	 */
	protected List getSelectedObjects() {
		return getStructuredSelection().toList();
	}

	/**
	 * Return the list of editparts considered the operation set after caching
	 * them
	 * 
	 * @@return A list of editparts conidered the operation set
	 */
	protected final List getOperationSet() {
		if (_operationSet == null) {
			_operationSet = createOperationSet();
			if (_operationSet == null)
				_operationSet = Collections.EMPTY_LIST;
		}
		return _operationSet;
	}

	/**
	 * Filters the selected objects and returns only editparts that understands
	 * the request
	 * 
	 * @@return a list of editparts selected.
	 */
	protected List createOperationSet() {
		List selection = getSelectedObjects();
		if (selection.isEmpty()
			|| !(selection.get(0) instanceof IGraphicalEditPart))
			return Collections.EMPTY_LIST;
		Iterator selectedEPs = selection.iterator();
		List targetedEPs = new ArrayList();
		while (selectedEPs.hasNext()) {
			EditPart selectedEP = (EditPart) selectedEPs.next();
			targetedEPs.addAll(getTargetEditParts(selectedEP));
		}
		return targetedEPs.isEmpty() ? Collections.EMPTY_LIST
			: targetedEPs;
	}

    /**
     * Given an editpart, returns a list of target editparts to the current
     * request If no targets could be found, an empty list is returned
     * 
     * @@param editpart
     *            The given editpart
     * @@return a list of target editparts, or Empty list if none
     */
    protected List getTargetEditParts(EditPart editpart) {
        EditPart targetEP = editpart.getTargetEditPart(getTargetRequest());
        return (targetEP == null) ? Collections.EMPTY_LIST
            : Collections.singletonList(targetEP);
    }
    
	/**
	 * A utility method to get the <code>IDiagramEditDomain</code> from the
	 * current part if it adapts to it
	 * 
	 * @@return The diagram edit domain adapter if it exists; <code>null</code>
	 *         otherwise
	 */
	protected IDiagramEditDomain getDiagramEditDomain() {
		return (IDiagramEditDomain) getWorkbenchPart().getAdapter(
			IDiagramEditDomain.class);
	}

	/**
	 * A utility method to return the active part if it implements 
	 * or adapts to the <code>IDiagramWorkbenchPart</code> interface
	 * 
	 * @@return The current part if it implements or adapts to
	 *         <code>IDiagramWorkbenchPart</code>; <code>null</code>
	 *         otherwise
	 */
	protected IDiagramWorkbenchPart getDiagramWorkbenchPart() {
		IDiagramWorkbenchPart diagramPart = null;
		IWorkbenchPart part = getWorkbenchPart();
		
		if (part instanceof IDiagramWorkbenchPart) {
			diagramPart = (IDiagramWorkbenchPart) part;
			
		} else if (part!=null){
			diagramPart = (IDiagramWorkbenchPart) part
					.getAdapter(IDiagramWorkbenchPart.class);
		}

		return diagramPart;
	}

	/**
	 * A utility method to return the active <code>DiagramEditPart</code> if
	 * the current part implements <code>IDiagramWorkbenchPart</code>
	 * 
	 * @@return The current diagram if the parts implements
	 *         <code>IDiagramWorkbenchPart</code>; <code>null</code>
	 *         otherwise
	 */
	protected DiagramEditPart getDiagramEditPart() {
		IDiagramWorkbenchPart part = getDiagramWorkbenchPart();
		return part != null ? part.getDiagramEditPart()
			: null;
	}

	/**
	 * A utility method to return the active <code>DiagramEditPart</code> if
	 * the current part implements <code>IDiagramWorkbenchPart</code>
	 * 
	 * @@return The current diagram if the parts implements
	 *         <code>IDiagramWorkbenchPart</code>; <code>null</code>
	 *         otherwise
	 */
	protected IDiagramGraphicalViewer getDiagramGraphicalViewer() {
		IDiagramWorkbenchPart part = getDiagramWorkbenchPart();
		return part != null ? part.getDiagramGraphicalViewer()
			: null;
	}

	/**
	 * Filters the given list of EditParts so that the list only contains the
	 * EditParts that matches the given condition.
	 * 
	 * @@param list
	 *            the list of edit parts to filter
	 * @@param condition
	 *            the condition
	 * @@return a modified list containing those editparts that matched the
	 *         condition
	 */
	protected List filterEditPartsMatching(List list,
			EditPartViewer.Conditional condition) {
		List matchList = new ArrayList();
		Iterator iter = list.iterator();
		while (iter.hasNext()) {
			EditPart ep = (EditPart) iter.next();
			if (condition.evaluate(ep))
				matchList.add(ep);
		}
		return matchList;
	}

	/**
     * Does this action need to listen to selection change events? If the
     * enablement state of the context menu or the operation set depends on what
     * is selected in a diagram, then this needs to return true. If this action
     * targets the diagram only, then it should return false.
     * <p>
     * Actions that are only contributed to the popup menu (and not toolbar or
     * main menus) will not receive selection events at all. The refresh()
     * method will be called when the context menu is about to show.
     * </p>
     */
	protected abstract boolean isSelectionListener();

	/**
	 * @@param targetRequest
	 *            The targetRequest to set.
	 */
	protected void setTargetRequest(Request targetRequest) {
		this.targetRequest = targetRequest;
	}

	/**
	 * Gets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@return the preferences hint
	 */
	protected PreferencesHint getPreferencesHint() {
		if (getDiagramEditPart() != null) {
			return getDiagramEditPart().getDiagramPreferencesHint();
		}
		return PreferencesHint.USE_DEFAULTS;
	}
	
	/**
	 * Gets the location of the mouse pointer relative to the viewer.
	 * 
	 * @@return the location of the mouse pointer or null if it cannot be
	 *         determined
	 */
	protected final Point getMouseLocation() {
		Display display = Display.getCurrent();
		if (display != null) {
			IDiagramGraphicalViewer viewer = getDiagramGraphicalViewer();
			if (viewer != null) {
				return new Point(viewer.getControl().toControl(
						display.getCursorLocation()));
			}
		}
		return null;
	}
}
@


1.8
log
@[184140] gmf_head ldamus 070508 DiagramAction does not adapt active workbench part to IDiagramWorkbenchPart
@
text
@d316 1
a316 1
		} else {
@


1.7
log
@gmf_head crevells 061012 Updated year in copyright in missed files
@
text
@d302 2
a303 2
	 * A utility method to return the active part if it implements the
	 * <code>IDiagramWorkbenchPart</code> interface
d305 1
a305 1
	 * @@return The current part if it implements
d310 12
a321 2
		return getWorkbenchPart() instanceof IDiagramWorkbenchPart ? (IDiagramWorkbenchPart) getWorkbenchPart()
			: null;
@


1.6
log
@[154286] gmf_head crevells 061010 Random shape position on a diagram when using add from popup
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d20 1
d38 1
d400 18
@


1.4
log
@Bugzilla#109422 gmf_head cmahoney 060418 Remove deprecated API
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d364 10
a373 5
	 * Does this action need to listen to selection change events? If the
	 * enablement state of the context menu or the operation set depends on what
	 * is selected in a diagram, then this needs to return true. If this action
	 * targets the diagram only, then it should return false.
	 */
@


1.4.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.4.2.2
log
@Bugzilla#157471 gmf_R1_0_maintenance cmahoney 060915 Toolbar buttons become out of sync with current diagram selection
@
text
@d364 5
a368 10
     * Does this action need to listen to selection change events? If the
     * enablement state of the context menu or the operation set depends on what
     * is selected in a diagram, then this needs to return true. If this action
     * targets the diagram only, then it should return false.
     * <p>
     * Actions that are only contributed to the popup menu (and not toolbar or
     * main menus) will not receive selection events at all. The refresh()
     * method will be called when the context menu is about to show.
     * </p>
     */
@


1.3
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@a279 14
     * @@deprecated Use {@@link #getTargetEditParts(EditPart)} instead
     * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=125233.
     */
    protected List getTargetEdiParts(EditPart editpart) {
        return getTargetEditParts(editpart);
    }

    /**
     * Given an editpart, returns a list of target editparts to the current
     * request If no targets could be found, an empty list is returned
     * 
     * @@param editpart
     *            The given editpart
     * @@return a list of target editparts, or Empty list if none
@


1.2
log
@Bugzilla#125233 gmf_head cmahoney 060127 Rename method DiagramAction.getTargetEdiParts()
@
text
@d28 1
d190 1
a190 1
		return null;
@


1.1
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d266 1
a266 1
			targetedEPs.addAll(getTargetEdiParts(selectedEP));
d272 28
a299 14
	/**
	 * Given an editpart, returns a list of target editparts to the current
	 * request If no targets could be found, an empty list is returned
	 * 
	 * @@param editpart
	 *            The given editpart
	 * @@return a list of target editparts, or Empty list if none
	 */
	protected List getTargetEdiParts(EditPart editpart) {
		EditPart targetEP = editpart.getTargetEditPart(getTargetRequest());
		return (targetEP == null) ? Collections.EMPTY_LIST
			: Collections.singletonList(targetEP);
	}

@

