head	1.10;
access;
symbols
	v20081023-2107:1.10
	v20081022-1925:1.10
	v20081022-1005:1.10
	v20081020-0700:1.10
	v20080917-1925:1.10
	v20080916-2008:1.10
	v20080911-1728:1.10
	v20080911-1506:1.10
	v20080910-1520:1.10
	v20080910-1510:1.10
	v20080903-1520:1.10
	v20080903-1510:1.10
	v20080813-1510:1.10
	v20080811-1546:1.10
	v20080731-1520:1.10
	v20080725-1738:1.10
	v20080723-2246:1.10
	v20080723-2232:1.10
	v20080723-1700:1.10
	v20080722-1827:1.10
	v20080718-1700:1.10
	v20080718-1731:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080603-1553:1.10
	v20080527-1255:1.10
	v20080527-1151:1.9.4.1
	v20080516-1748:1.10
	v20080516-1143:1.10
	v20080512-1200:1.10
	v20080503-1740:1.10
	v20080501-2127:1.9.4.1
	v20080501-1739:1.10
	m20080429-1543:1.9.4.1
	v20080425-1959:1.10
	v20080417-1610:1.10
	v20080407-2250:1.10
	v20080407-0930:1.10
	v20080404-1111:1.10
	v20080328-1605:1.10
	v20080322-0000:1.10
	v20080222-1200:1.10
	v20080201-2010:1.10
	v20080201-0201:1.9.4.1
	v20080118-1129:1.9.4.1
	v20080114-2222:1.9.4.1
	v20080114-1111:1.10
	v20080107-1111:1.10
	v20071222-1111:1.9
	v20071214-1111:1.9
	v20071130-1111:1.9
	v20071124-0000:1.9
	v20071112-0000:1.9
	v20071108-0000:1.9
	v20071003-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.4
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070518-1300:1.9
	bugzilla111892_group_support:1.9.0.2
	Root_bugzilla111892_group_support:1.9
	v20070504-1000:1.8
	v20070420-1000:1.8
	v20070413-1300:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.5.2.1
	v20070119-1200:1.5.2.1
	v20070111-0800:1.5.2.1
	v20070105-1200:1.5.2.1
	v20070103-0300:1.7
	M4_20:1.7
	v20061218-1500:1.5.2.1
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.6
	v20061117-0800:1.6
	v20061027-1200:1.5.2.1
	v20061013-1330:1.6
	v20061012-1100:1.5.2.1
	v20060925-1700:1.5.2.1
	v20060919-0800:1.5.2.1
	v20060907-1100:1.5
	M1_20:1.5
	v20060831-1500:1.5
	v20060824-1600:1.5
	v20060817-1500:1.5
	v20060810-1700:1.5
	v20060803-1200:1.5
	v20060728-0500:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.10
date	2008.01.02.19.39.25;	author aboyko;	state Exp;
branches;
next	1.9;
commitid	2893477be86d4567;

1.9
date	2007.05.16.16.50.41;	author ahunter;	state Exp;
branches
	1.9.4.1;
next	1.8;
commitid	43e3464b36614567;

1.8
date	2007.04.17.15.31.45;	author aboyko;	state Exp;
branches;
next	1.7;
commitid	1caa4624e8604567;

1.7
date	2006.11.29.19.21.01;	author crevells;	state Exp;
branches;
next	1.6;
commitid	4de6456ddd9d4567;

1.6
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.04.19.15.37;	author cmahoney;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.12.12.16.49.28;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.02.23.30.16;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.08;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.42;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.09.13.16.43.41;	author ahunter;	state Exp;
branches;
next	;

1.9.4.1
date	2008.01.02.22.41.56;	author aboyko;	state Exp;
branches;
next	;
commitid	5ddc477c13334567;


desc
@@


1.10
log
@[214142] gmf_head aboyko 080102 [JUnit] Failure at org.eclipse.gmf.tests.runtime.diagram.ui.tools.RubberBandSelectionToolTest#test_basicSelect()
@
text
@/******************************************************************************
 * Copyright (c) 2000, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.tools;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

import org.eclipse.draw2d.ColorConstants;
import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.FigureCanvas;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Viewport;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.GraphicalViewer;
import org.eclipse.gef.LayerConstants;
import org.eclipse.gef.Request;
import org.eclipse.gef.RequestConstants;
import org.eclipse.gef.SharedCursors;
import org.eclipse.gef.editparts.LayerManager;
import org.eclipse.gef.tools.AbstractTool;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart;
import org.eclipse.gmf.runtime.diagram.ui.util.SelectInDiagramHelper;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.widgets.Display;

/**
 * A Tool which selects multiple objects inside a rectangular area of a Graphical Viewer. 
 * If the SHIFT key is pressed at the beginning of the drag, the enclosed items will be
 * appended to the current selection.  If the CONTROL key is pressed at the beginning of
 * the drag, the enclosed items will have their selection state inverted.
 * <P>
 * By default, only editparts whose figure's are on the primary layer will be considered
 * within the enclosed rectangle.
 * 
 * Tauseef Israr
 * September 20, 04.  This class is a copy of MarqueeSelectionTool but provides two
 * additional functionality. 
 * 1. The selection of connectors which is reported here
 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=74360

           Summary: MarqueeSelectionTool does not select connectors.
           Product: GEF
           Version: unspecified
          Platform: PC
        OS/Version: Windows XP
            Status: NEW
          Severity: normal
          Priority: P3
         Component: GEF
        AssignedTo: gef-inbox@@eclipse.org
        ReportedBy: tisrar@@ca.ibm.com
 *
 *and the 2. is the auto-scroll capability.
 */
/*
 * @@canBeSeenBy %level1
 */
public class RubberbandSelectionTool
	extends AbstractTool
{

static final int TOGGLE_MODE = 1;
static final int APPEND_MODE = 2;

private int mode;

private Figure marqueeRectangleFigure;
private HashSet allChildren = new HashSet();
private List selectedEditParts;
private Request targetRequest;

private Point feedBackStartLocation = null;

private WeakReference weakReference;

private static final Request MARQUEE_REQUEST =
	new Request(RequestConstants.REQ_SELECTION); 

/**
 * Creates a new MarqueeSelectionTool.
 */
public RubberbandSelectionTool() {
	setDefaultCursor(SharedCursors.CROSS); 
	setUnloadWhenFinished(false);
}

private List calculateNewSelection() {

	List newSelections = new ArrayList();
	Iterator children = getAllChildren().iterator();

	// Calculate new selections based on which children fall
	// inside the marquee selection rectangle.  Do not select
	// children who are not visible
	while (children.hasNext()){	
		EditPart child = (EditPart) children.next();
		if (!child.isSelectable())
			continue;
		IFigure figure = ((GraphicalEditPart)child).getFigure();
		Rectangle r = figure.getBounds().getCopy();
		figure.translateToAbsolute(r);

		Rectangle marqueeBounds = getMarqueeBounds();	
		getMarqueeFeedbackFigure().translateToRelative(r);
		if (marqueeBounds.contains(r.getTopLeft())
		  && marqueeBounds.contains(r.getBottomRight())		  
		  && child.getTargetEditPart(MARQUEE_REQUEST) == child
		  && isFigureVisible(figure)){
			newSelections.add(child);
		}
	}
	return newSelections;
}

private boolean isFigureVisible(IFigure fig) {
	Rectangle figBounds = fig.getBounds().getCopy();
	IFigure walker = fig.getParent();
	Viewport topViewport = ((FigureCanvas)getCurrentViewer().getControl()).getViewport();
	while (!figBounds.isEmpty() && walker != null && walker != topViewport) {
		walker.translateToParent(figBounds);
		figBounds.intersect(walker.getBounds());
		walker = walker.getParent();
	}
	return !figBounds.isEmpty();
}

private Request createTargetRequest() {
	return MARQUEE_REQUEST;
}

/**
 * Erases feedback if necessary and puts the tool into the terminal state.
 */
public void deactivate() {
	if (isInState(STATE_DRAG_IN_PROGRESS)) {
		eraseMarqueeFeedback();
		eraseTargetFeedback();
	}
	super.deactivate();
	allChildren = new HashSet();
	setState(STATE_TERMINAL);
}

private void eraseMarqueeFeedback() {
	if (marqueeRectangleFigure != null) {
		removeFeedback(marqueeRectangleFigure);
		marqueeRectangleFigure = null;		
	}
	feedBackStartLocation = null;
}

private void eraseTargetFeedback() {
	if (selectedEditParts == null)
		return;
	ListIterator oldEditParts = selectedEditParts.listIterator();
	while (oldEditParts.hasNext()) {
		EditPart editPart = (EditPart)oldEditParts.next();
		editPart.eraseTargetFeedback(getTargetRequest());
	}
}

/**
 * Returns a list including all of the children
 * of the edit part passed in.
 */
private HashSet getAllChildren(EditPart editPart, HashSet allChildren1){	
	List children = editPart.getChildren();
	for (int i = 0; i < children.size(); i++) {
		GraphicalEditPart child = (GraphicalEditPart) children.get(i);
		if (!(child instanceof IBorderItemEditPart)){
			allChildren1.add(child);
			getAllChildren(child, allChildren1);
		}
		allChildren1.addAll(child.getSourceConnections());
		allChildren1.addAll(child.getTargetConnections());		
	}
	return allChildren1;
}

/**
 * Return a vector including all of the children
 * of the root editpart
 */
private HashSet getAllChildren() {
	if (allChildren.isEmpty())
		allChildren = getAllChildren(
			getCurrentViewer().getContents(),
			new HashSet());
	return allChildren;
}

/**
 * @@see org.eclipse.gef.tools.AbstractTool#getCommandName()
 */
protected String getCommandName() {
	return REQ_SELECTION;
}

/**
 * @@see org.eclipse.gef.tools.AbstractTool#getDebugName()
 */
protected String getDebugName() {
	return "Marquee Tool";//$NON-NLS-1$
}

protected IFigure getMarqueeFeedbackFigure() {		
	if (marqueeRectangleFigure == null) {
		marqueeRectangleFigure = new MarqueeRectangleFigure();
		addFeedback(marqueeRectangleFigure);
	}
	return marqueeRectangleFigure;
}

protected Rectangle getMarqueeSelectionRectangle() {
	return new Rectangle(getStartLocation(),getLocation());
}

/**
 * Gets the relative bounds of the marquee feedback figure.
 * @@return
 */
private Rectangle getMarqueeBounds(){
	if (getMarqueeFeedbackFigure() == null)
		return new Rectangle();
	
	Rectangle rect = new Rectangle();
	if (feedBackStartLocation == null){
		rect = getMarqueeSelectionRectangle();
		getMarqueeFeedbackFigure().translateToRelative(rect);
		feedBackStartLocation = rect.getLocation();
		return rect;
	}else{
		Point location = getLocation().getCopy();
		getMarqueeFeedbackFigure().translateToRelative(location);
		rect = new Rectangle(feedBackStartLocation,location);
		return rect;
	}
	
}

private int getSelectionMode() {
	return mode;
}

private Request getTargetRequest() {
	if (targetRequest == null)
		targetRequest = createTargetRequest();
	return targetRequest;
}

/**
 * @@see org.eclipse.gef.tools.AbstractTool#handleButtonDown(int)
 */
protected boolean handleButtonDown(int button) {
	if (!isGraphicalViewer())
		return true;
	if (button != 1) {
		setState(STATE_INVALID);
		handleInvalidInput();
	}
	if (stateTransition(STATE_INITIAL, STATE_DRAG_IN_PROGRESS)) {
		if (getCurrentInput().isControlKeyDown())
			setSelectionMode(TOGGLE_MODE);
		else if (getCurrentInput().isShiftKeyDown())
			setSelectionMode(APPEND_MODE);
		
		// RATLC00740277:
		// clear current focus (if any) before we start computing selections,
		//   because we don't want to select any compartments in the focus
		//   edit part if they shouldn't be selectable
		clearFocus();
	}
	return true;
}

/**
 * Effectively clears the current focus edit part by deliberately setting the
 * diagram contents edit part as the focus.  This ensures that the rubber band
 * won't mistakenly select the selectable compartments and items in the current
 * focus edit part.
 */
private void clearFocus() {
	EditPart focusPart = getCurrentViewer().getFocusEditPart();
	
	if (focusPart != null) {
		// replace the current focus with the contents edit part, which effectively
		//   blocks unwanted selectability of compartments within the previous
		//  focus edit part
		getCurrentViewer().setFocus(getCurrentViewer().getContents());
	}
}

/**
 * Extends the inherited method by first restoring the current viewer's focus
 * edit part to the default (which is the last selected edit part).  This undoes
 * the work-around that sets the diagram root as the focus.
 * 
 * @@see #clearFocus()
 */
protected void handleFinished() {
	getCurrentViewer().setFocus(null);
	
	super.handleFinished();
}

/**
 * @@see org.eclipse.gef.tools.AbstractTool#handleButtonUp(int)
 */
protected boolean handleButtonUp(int button) {
	if (stateTransition(STATE_DRAG_IN_PROGRESS, STATE_TERMINAL)) {
		eraseTargetFeedback();
		performMarqueeSelect();
		eraseMarqueeFeedback();		
	}
	handleFinished();
	return true;
}

/**
 * @@see org.eclipse.gef.tools.AbstractTool#handleDragInProgress()
 */
protected boolean handleDragInProgress() {
	if (isInState(STATE_DRAG | STATE_DRAG_IN_PROGRESS)) {		
		
		showMarqueeFeedback();
		eraseTargetFeedback();		
		selectedEditParts = calculateNewSelection();
		showTargetFeedback();
		SelectInDiagramHelper.exposeLocation((FigureCanvas)getCurrentViewer().getControl(),getLocation());
				
	}
	return true;
}

/**
 * @@see org.eclipse.gef.tools.AbstractTool#handleFocusLost()
 */
protected boolean handleFocusLost() {
	if (isInState(STATE_DRAG | STATE_DRAG_IN_PROGRESS)) {
		handleFinished();
		return true;
	}
	return false;
}

/**
 * This method is called when mouse or keyboard input is invalid and erases the feedback.
 * @@return <code>true</code>
 */
protected boolean handleInvalidInput() {
	eraseTargetFeedback();
	eraseMarqueeFeedback();
	return true;
}

/**
 * Handles high-level processing of a key down event. 
 * KeyEvents are forwarded to the current viewer's {@@link KeyHandler}, 
 * via {@@link KeyHandler#keyPressed(KeyEvent)}.
 * @@see AbstractTool#handleKeyDown(KeyEvent)
 */
protected boolean handleKeyDown(KeyEvent e) {
	if (super.handleKeyDown(e))
		return true;
	if (getCurrentViewer().getKeyHandler() != null
		&& getCurrentViewer().getKeyHandler().keyPressed(e))
		return true;
	return false;		
}

private boolean isGraphicalViewer() {
	return getCurrentViewer() instanceof GraphicalViewer;
}

protected void performMarqueeSelect() {
	EditPartViewer viewer = getCurrentViewer();

	List newSelections = calculateNewSelection();

	// If in multi select mode, add the new selections to the already
	// selected group; otherwise, clear the selection and select the new group
	if (getSelectionMode() == APPEND_MODE) {
		for (int i = 0; i < newSelections.size(); i++) {
			EditPart editPart = (EditPart)newSelections.get(i);	
			viewer.appendSelection(editPart); 
		} 
	} else if (getSelectionMode() == TOGGLE_MODE) {
		List selected = new ArrayList(viewer.getSelectedEditParts());
		for (int i = 0; i < newSelections.size(); i++) {
			EditPart editPart = (EditPart)newSelections.get(i);	
			if (editPart.getSelected() != EditPart.SELECTED_NONE)
				selected.remove(editPart);
			else
				selected.add(editPart);
		}
		viewer.setSelection(new StructuredSelection(selected));
	} else {
		viewer.setSelection(new StructuredSelection(newSelections));
	}
}

/**
 * @@see org.eclipse.gef.Tool#setViewer(org.eclipse.gef.EditPartViewer)
 */
public void setViewer(EditPartViewer viewer) {
	if (viewer == getCurrentViewer())
		return;
	super.setViewer(viewer);
	if (viewer instanceof GraphicalViewer)
		setDefaultCursor(SharedCursors.CROSS);
	else
		setDefaultCursor(SharedCursors.NO);
	if (viewer != null)
		weakReference = new WeakReference(viewer);
}

private void setSelectionMode(int mode) {
	this.mode = mode;
}

private void showMarqueeFeedback() {
	getMarqueeFeedbackFigure().setBounds(getMarqueeBounds());
}

private void showTargetFeedback() {
	for (int i = 0; i < selectedEditParts.size(); i++) {
		EditPart editPart = (EditPart) selectedEditParts.get(i);
		editPart.showTargetFeedback(getTargetRequest());
	}
}/**
 * Convenience method to removes a figure from the feedback layer.
 * @@param figure the figure being removed
 */
	protected void removeFeedback(IFigure figure) {
		EditPartViewer viewer = getCurrentViewer();
		if ((viewer == null)&&(weakReference != null))
			viewer = (EditPartViewer) weakReference.get();
		if (viewer != null) {
			LayerManager lm = (LayerManager) viewer.getEditPartRegistry().get(
				LayerManager.ID);
			if (lm == null)
				return;
			lm.getLayer(LayerConstants.FEEDBACK_LAYER).remove(figure);
		}
	}

class MarqueeRectangleFigure 
extends Figure {

private int offset = 0;
private boolean schedulePaint = true;
private static final int DELAY = 110; //animation delay in millisecond
/**
 * @@see org.eclipse.draw2d.Figure#paintFigure(org.eclipse.draw2d.Graphics)
 */
protected void paintFigure(Graphics graphics) {	
	Rectangle bounds1 = getBounds().getCopy();
	graphics.translate(getLocation());
	
	graphics.setXORMode(true);
	graphics.setForegroundColor(ColorConstants.white);
	graphics.setBackgroundColor(ColorConstants.black);
	
	graphics.setLineStyle(Graphics.LINE_DOT);
	
	int[] points = new int[6];
	
	points[0] = 0 + offset;
	points[1] = 0;
	points[2] = bounds1.width - 1;
	points[3] = 0;
	points[4] = bounds1.width - 1;
	points[5] = bounds1.height - 1;
	
	graphics.drawPolyline(points);
	
	points[0] = 0;
	points[1] = 0 + offset;
	points[2] = 0;
	points[3] = bounds1.height - 1;
	points[4] = bounds1.width - 1;
	points[5] = bounds1.height - 1;
	
	graphics.drawPolyline(points);
	
	graphics.translate(getLocation().getNegated());
	
	if (schedulePaint) {
		Display.getCurrent().timerExec(DELAY, new Runnable() {
			public void run() {
				offset++;
				if (offset > 5)
					offset = 0;	
				
				schedulePaint = true;
				repaint();
			}
		});
	}
	
	schedulePaint = false;
}
	
}

}

@


1.9
log
@gmf_head ahunter 070516 Update Copyright for files changed in 2007
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2007 IBM Corporation and others.
d206 1
a206 1
			getCurrentViewer().getRootEditPart(),
@


1.9.4.1
log
@[214142] gmf_R2_0_maintenance aboyko 080102 [JUnit] Failure at org.eclipse.gmf.tests.runtime.diagram.ui.tools.RubberBandSelectionToolTest#test_basicSelect()
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2008 IBM Corporation and others.
d206 1
a206 1
			getCurrentViewer().getContents(),
@


1.8
log
@[161727] gmf_head aboyko 070417 Selection tool allows selection of objects in compartments that are not being shown.
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2006 IBM Corporation and others.
@


1.7
log
@[165826] gmf_head crevells 061129 RootEditPart should never have focus for GraphicalViewer
Contributed by: Alex Boyko
@
text
@d26 1
d39 2
a44 3
import org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart;
import org.eclipse.gmf.runtime.diagram.ui.util.SelectInDiagramHelper;

d126 2
a127 1
		  && child.getTargetEditPart(MARQUEE_REQUEST) == child){
d134 12
@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d284 1
a284 1
 * diagram root edit part as the focus.  This ensures that the rubber band
d292 1
a292 1
		// replace the current focus with the root edit part, which effectively
d295 1
a295 1
		getCurrentViewer().setFocus(getCurrentViewer().getRootEditPart());
@


1.5
log
@Bugzilla#111935 gmf_head cmahoney 060104 Border Item Infrastructure Consistency Issues
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2004 IBM Corporation and others.
@


1.5.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2006 IBM Corporation and others.
@


1.4
log
@bugzilla 110316 gmf-head 051212 Compiler warning count should be 0 - runtime diagram layer
@
text
@d42 1
a42 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.BorderItemEditPart;
d176 1
a176 1
		if (!(child instanceof BorderItemEditPart)){
@


1.3
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a31 1
import org.eclipse.gef.KeyHandler;
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d43 1
a43 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GateEditPart;
d177 1
a177 1
		if (!(child instanceof GateEditPart)){
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2000, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

