head	1.17;
access;
symbols
	v20081023-2107:1.17
	v20081022-1925:1.17
	v20081022-1005:1.17
	v20081020-0700:1.17
	v20080917-1925:1.17
	v20080916-2008:1.17
	v20080911-1728:1.17
	v20080911-1506:1.17
	v20080910-1520:1.17
	v20080910-1510:1.17
	v20080903-1520:1.17
	v20080903-1510:1.17
	v20080813-1510:1.17
	v20080811-1546:1.17
	v20080731-1520:1.17
	v20080725-1738:1.17
	v20080723-2246:1.17
	v20080723-2232:1.17
	v20080723-1700:1.17
	v20080722-1827:1.17
	v20080718-1700:1.17
	v20080718-1731:1.17
	v20080716-1600:1.17
	v20080716-1642:1.17
	R2_1_maintenance:1.17.0.2
	Root_R2_1_maintenance:1.17
	R2_1_0:1.17
	v20080610-1132:1.17
	v20080603-1553:1.17
	v20080527-1255:1.17
	v20080527-1151:1.14
	v20080516-1748:1.17
	v20080516-1143:1.17
	v20080512-1200:1.17
	v20080503-1740:1.17
	v20080501-2127:1.14
	v20080501-1739:1.17
	m20080429-1543:1.14
	v20080425-1959:1.16
	v20080417-1610:1.16
	v20080407-2250:1.16
	v20080407-0930:1.16
	v20080404-1111:1.16
	v20080328-1605:1.16
	v20080322-0000:1.15
	v20080222-1200:1.15
	v20080201-2010:1.15
	v20080201-0201:1.14
	v20080118-1129:1.14
	v20080114-2222:1.14
	v20080114-1111:1.15
	v20080107-1111:1.15
	v20071222-1111:1.15
	v20071214-1111:1.15
	v20071130-1111:1.15
	v20071124-0000:1.14
	v20071112-0000:1.15
	v20071108-0000:1.15
	v20071003-0000:1.14
	v20070915-0000:1.14
	v20070903-0000:1.14
	v20070809-0000:1.14
	R2_0_maintenance:1.14.0.4
	R2_0:1.14
	R4_20:1.14
	v20070621-0000:1.14
	RC3_20:1.14
	v20070614-1400:1.14
	v20070608-1300:1.14
	v20070605-1400:1.14
	v20070601-1400:1.14
	v20070525-1500:1.14
	v20070518-1300:1.14
	bugzilla111892_group_support:1.14.0.2
	Root_bugzilla111892_group_support:1.14
	v20070504-1000:1.14
	v20070420-1000:1.14
	v20070413-1300:1.14
	v20070330-1300:1.14
	v20060330-1300:1.14
	v20070322-1100:1.14
	v20060316-0600:1.14
	v20070221-1500:1.14
	v20070208-1800:1.14
	v20070202-0200:1.13.2.2
	v20070119-1200:1.13.2.2
	v20070111-0800:1.13.2.2
	v20070105-1200:1.13.2.2
	v20070103-0300:1.14
	M4_20:1.14
	v20061218-1500:1.13.2.2
	v20061218-1200:1.14
	v20061214-0000:1.14
	M3_20:1.14
	v20061117-0800:1.14
	v20061027-1200:1.13.2.2
	v20061013-1330:1.14
	v20061012-1100:1.13.2.2
	v20060925-1700:1.13.2.2
	v20060919-0800:1.13.2.2
	v20060907-1100:1.13.2.2
	M1_20:1.13
	v20060831-1500:1.13.2.1
	v20060824-1600:1.13.2.1
	v20060817-1500:1.13.2.1
	v20060810-1700:1.13.2.1
	v20060803-1200:1.13.2.1
	v20060728-0500:1.13.2.1
	v20060721-1130:1.13.2.1
	v20060713-1700:1.13.2.1
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060616-1400:1.13
	v20060616-1200:1.13
	v20060609-1400:1.13
	v20060531-1730:1.13
	v20060530-1930:1.13
	v20060526-1200:1.13
	v20060519-0800:1.13
	v20060512-1000:1.13
	I20060512-1000:1.13
	I20060505-1400:1.13
	I20060428-1300:1.13
	I20060424-0500:1.13
	I20060424-0300:1.13
	M6_10:1.13
	I20060407-1200:1.11
	I20060331-1000:1.11
	I20060324-0300:1.11
	I20060317-1300:1.11
	I20060317-1200:1.11
	I20060316-1300:1.11
	I20060309-1300:1.11
	M5_10:1.11
	S20060303-1600:1.11
	I20060227-1730:1.9
	I20060216-1945:1.9
	I20060210-1715:1.9
	I20060209-1815:1.9
	I20060203-0830:1.9
	I20060202-1415:1.9
	I20060129-1145:1.9
	I20060127-0900:1.9
	I20060120-1530:1.9
	I20060113-1700:1.9
	M4_10:1.9
	I20060107-1100:1.9
	I20060105-1630:1.9
	I20051230-1230:1.9
	I20051223-1100:1.9
	I20051217-0925:1.9
	I20051208-2000:1.9
	I20051201-1800:1.9
	I20051124-2000:1.7
	M3_10:1.7
	I20051118-1245:1.7
	I20051111-1800:1.7
	I20051106-0900:1.7
	v20051030:1.6;
locks; strict;
comment	@# @;


1.17
date	2008.04.28.15.05.52;	author crevells;	state Exp;
branches;
next	1.16;
commitid	70f34815e7cf4567;

1.16
date	2008.03.27.21.11.13;	author ahunter;	state Exp;
branches;
next	1.15;
commitid	3a4e47ec0d704567;

1.15
date	2007.10.16.14.11.55;	author crevells;	state Exp;
branches;
next	1.14;
commitid	2b604714c6a84567;

1.14
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.13.19.59.15;	author sshaw;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2006.04.12.15.54.18;	author sshaw;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.28.02.31.21;	author cmahoney;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.27.19.36.25;	author sshaw;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.01.15.31.53;	author mmostafa;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.12.15.48.52;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.06.20.55.01;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.36;	author sshaw;	state Exp;
branches;
next	;

1.13.2.1
date	2006.07.13.15.13.44;	author mmostafa;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2006.09.05.13.53.30;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.17
log
@[229080] gmf_head crevells 080428 GMF: NestableListItemEditPart.createFigure() should be overridable.
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 * 	  Dmitry Stadnik (Borland) - contribution for bugzilla 135694
 *	  Dmitry Stadnik (Borland) - contribution for bugzilla 136582
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.beans.PropertyChangeEvent;
import java.util.Collections;
import java.util.List;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.RunnableWithResult;
import org.eclipse.gef.AccessibleEditPart;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.Request;
import org.eclipse.gef.requests.DirectEditRequest;
import org.eclipse.gef.tools.DirectEditManager;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserService;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
import org.eclipse.gmf.runtime.diagram.ui.label.ILabelDelegate;
import org.eclipse.gmf.runtime.diagram.ui.label.WrappingLabelDelegate;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
import org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser;
import org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter;
import org.eclipse.gmf.runtime.notation.FontStyle;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.TextAlignment;
import org.eclipse.gmf.runtime.notation.TextStyle;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceConverter;
import org.eclipse.jface.text.contentassist.IContentAssistProcessor;
import org.eclipse.jface.viewers.ICellEditorValidator;
import org.eclipse.swt.SWT;
import org.eclipse.swt.accessibility.AccessibleEvent;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.Image;

/**
 * The controller for the text compartment.
 * 
 * @@author mmostafa
 */
public class TextCompartmentEditPart extends CompartmentEditPart implements ITextAwareEditPart {
	
	/** the direct edit manager for text editing */
	private DirectEditManager manager;
	/** the text parser */
	protected IParser parser;
	/** the text parser options */
	private ParserOptions parserOptions;
	/** the element to listen to as suggested by the parser*/
	private List parserElements = null;
	/** the number of icons in the text label */
	private int numIcons = 0;

	/** Label that is displayed as the tooltip. */
	private Label toolTipLabel = new Label();
	  
	private ILabelDelegate labelDelegate;

	/**
	 * coinstructor
	 * @@param view the view controlled by this edit part
	 */
	public TextCompartmentEditPart(EObject model) {
		super(model);
	}

	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(
			EditPolicy.DIRECT_EDIT_ROLE,
			new LabelDirectEditPolicy());
		// Text Compartment do not handle creation request for views
		removeEditPolicy(EditPolicyRoles.CREATION_ROLE);
		
	}

    /**
     * Override to use a different figure for this editpart.
     * <p>
     * IMPORTANT NOTES:
     * <li> If you override this to create a different type of figure, you
     * should also override {@@link #createLabelDelegate()} and make sure you no
     * longer call {@@link #getLabel()}.
     * <li> Do not call {@@link #getLabelDelegate()} from within this method. Any
     * initialization of the label delegate should be done in the
     * {@@link #createLabelDelegate()} method.
     * </p>
     */
    protected IFigure createFigure() {
        return createWrapLabel();
    }
    
    /**
     * @@return WrapLabel, the created wrap label
     * @@deprecated This method has been deprecated to remove the assumption that
     *             the figure of a <code>TextCompartmentEditPart</code> is a
     *             <code>WrapLabel</code>. Create your figure in the
     *             {@@link #createFigure()} method instead and don't forget to
     *             stop calling {@@link #getLabel()}.
     */
    protected WrapLabel createWrapLabel() {
        // alignment properties are set in createLabelDelegate().
        return new WrapLabel();
    }
    
    /**
     * Creates the label delegate that will be used to interact with the label
     * figure.
     * <p>
     * Note: If you have overridden {@@link #createFigure()} to create a
     * different type of figure, you need to also override this method to return
     * the appropriate type of <code>LabelDelegate</code>.
     * 
     * @@return the new label delegate
     * @@since 2.1
     */
    protected ILabelDelegate createLabelDelegate() {

        // just in case the client has overridden getLabel()...
        WrapLabel label = getLabel();
        ILabelDelegate newLabelDelegate = null;
        if (label != null) {
            newLabelDelegate = new WrappingLabelDelegate(label);
        } else {

            // this should be a WrappingLabel since this is what is created in
            // createFigure()...
            newLabelDelegate = new WrappingLabelDelegate(
                (WrappingLabel) getFigure());
        }

        newLabelDelegate.setTextJustification(PositionConstants.CENTER);
        newLabelDelegate.setAlignment(PositionConstants.CENTER);
        newLabelDelegate.setTextAlignment(PositionConstants.TOP);
        return newLabelDelegate;
    }
    
    public IFigure getFigure() {
        if (figure == null) {
            setFigure(createFigure());
            setLabelDelegate(createLabelDelegate());
        }
        return figure;
    }

    /**
     * Returns the label delegate that can be used to interact with the label
     * figure.
     * 
     * @@return the label delegate
     * @@since 2.1
     */
    public ILabelDelegate getLabelDelegate() {
        if (labelDelegate == null) {
            // this means that getFigure() has never been called as getFigure()
            // sets the label delegate. Call getFigure() first.
            getFigure();

            // check if the label delegate is null, just in case getFigure() was
            // overridden
            if (labelDelegate == null) {
                setLabelDelegate(createLabelDelegate());
            }

            return labelDelegate;
        }
        return labelDelegate;
    }

    /**
     * Sets the label delegate.
     * 
     * @@param labelDelegate
     *            the label delegate to be set
     * @@since 2.1
     */
    protected void setLabelDelegate(ILabelDelegate labelDelegate) {
        this.labelDelegate = labelDelegate;
    }
    
    public Object getAdapter(Class key) {
        if (key == ILabelDelegate.class) {
            return getLabelDelegate();
        }
        return super.getAdapter(key);
    }  
	
	/**
     * This should be used instead of getFigure() to get the figure
     * 
     * @@return Return the WrapLabel for the TextCompartment
     * @@deprecated This method has been deprecated to remove the assumption that
     *             the figure of a <code>TextCompartmentEditPart</code> is a
     *             <code>WrapLabel</code>. Use {@@link #getLabelDelegate()} if
     *             the behavior you need is available from the label delegate,
     *             if not use {@@link #getFigure()} and cast to the type of label
     *             that you created in the {@@link #createFigure()} method.
     */
    public WrapLabel getLabel() {
        return (WrapLabel) getFigure();
    }

	/**
	 * gets the label Icon for this edit part
	 * @@param index the index to use
	 * @@return Image
	 */
	protected Image getLabelIcon(int index) {
		return null;
	}

	/**
	 * gets the label text
	 * @@return the lebel text
	 */
	protected String getLabelText() {
		EObject element = resolveSemanticElement();
		return (element == null) ? null
			: (getParser() == null) ? null
				: getParser().getPrintString(new EObjectAdapter(element),
					getParserOptions().intValue());
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart#getEditText()
	 */
	public String getEditText() {
		EObject element = resolveSemanticElement();
		return (element == null) ? "" //$NON-NLS-1$
		: getParser().getEditString(
			new EObjectAdapter(element),
			getParserOptions().intValue());
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart#editTextModified(java.lang.String)
	 */
	public void setLabelText(String text) {
        getLabelDelegate().setText(text);
	}

	/* 
     * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart#getCompletionProcessor()
	 */
	public IContentAssistProcessor getCompletionProcessor() {
		EObject element = resolveSemanticElement();
		if (element != null) {
			return getParser().getCompletionProcessor(new EObjectAdapter(element));
		}
		return null;
	}

	private boolean canParse() {
		return getEditText() != null;
	}

	/* 
     * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart#getEditTextValidator()
	 */
	public ICellEditorValidator getEditTextValidator() {
		return new ICellEditorValidator() {
			public String isValid(final Object value) {
				if (value instanceof String) {
					final EObject element = resolveSemanticElement();

					final IParser theParser = getParser();
					try {
						IParserEditStatus isValid = (IParserEditStatus) getEditingDomain()
							.runExclusive(new RunnableWithResult.Impl() {

									public void run() {
										setResult(theParser.isValidEditString(
											new EObjectAdapter(element),
											(String) value));
									}
								});
						return isValid.getCode() == ParserEditStatus.EDITABLE ? null
							: isValid.getMessage();
					} catch (InterruptedException e) {
						Trace.catching(DiagramUIPlugin.getInstance(),
							DiagramUIDebugOptions.EXCEPTIONS_CATCHING,
							getClass(), "getEditTextValidator", e); //$NON-NLS-1$
						Log.error(DiagramUIPlugin.getInstance(),
							DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
							"getEditTextValidator", e); //$NON-NLS-1$
					}

				}

				// shouldn't get here
				return null;
			}
		};
	}

	/* 
     * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart#getParserOptions()
	 */
	public final ParserOptions getParserOptions() {
		if (parserOptions == null)
			parserOptions = buildParserOptions();
		return parserOptions;
	}

	/**
	 * Builds the parser options. 
	 * @@return ParserOptions the parser options
	 */
	protected ParserOptions buildParserOptions() {
		return ParserOptions.NONE;
	}

	/**
	 * Builds the parser options.
	 */
	protected final void refreshParserOptions() {
		parserOptions = buildParserOptions();
	}

	/**
	 * Determines if the given event affects the paser options
	 * 
	 * @@param evt The event in question
	 * @@return whether the given event affects the parser options
	 */
	protected boolean isAffectingParserOptions(PropertyChangeEvent evt) {
		return false;
	}
	
	/**
	 * Determines if the given Notification affects the paser options
	 * 
	 * @@param evt The notification in question
	 * @@return whether the given notification affects the parser options
	 */
	protected boolean isAffectingParserOptions(Notification evt) {
		return false;
	}


	/**
	 * Method getLabelToolTip.
	 * @@return IFigure
	 */
	protected IFigure getLabelToolTip() {
		String text = getToolTipText();
		if (text != null && text.length() > 0) {
			toolTipLabel.setText(text);
			return toolTipLabel;
		}
		return null;
	}

	/**
	 * This method can be overridden in the subclass to return
	 * text for the tooltip.  
	 * @@return String the tooltip
	 */
	protected String getToolTipText() {
		return null;
	}

	/**
	 * check if this edit part is editable or not
	 * @@return true or false
	 */
	protected boolean isEditable() {
		EObject element = resolveSemanticElement();
		if (element != null && canParse()) {
			return true;
		}
		return false;
	}
    

	/**
	 * performas direct edit
	 */
	protected void performDirectEdit() {
		getManager().show();
	}

	/**
	 * Performs direct edit and will initiate another mouse click 
	 * event so that the cursor will appear under the mouse
	 * 	 
	 *  @@param eventLocation
	 */
	protected void performDirectEdit(Point eventLocation) {
		if (getManager().getClass() == TextDirectEditManager.class) {
			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
		}
	}
	
	/**
	 * 
	 * Performs direct edit setting the initial text to be the initialCharacter
	 * 
	 * @@param initialCharacter
	 */
	private void performDirectEdit(char initialCharacter) {
		// Run the TextDirectEditManager show with the initial character
		// This will not send an extra mouse click
		if (getManager() instanceof TextDirectEditManager) {
			((TextDirectEditManager) getManager()).show(initialCharacter);
		} else {
			performDirectEdit();
		}
	}
    
    private void showEditPart(){
        EditPart parent = getParent();
        if (parent!=null){
            EditPartViewer viewer = parent.getViewer();
            if (viewer!=null){
                viewer.reveal(this);
            }
        }
    }

	
	/**
	 * 
	 * Performs direct edit request based on request type
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#performDirectEditRequest(org.eclipse.gef.requests.DirectEditRequest)
	 */
	protected void performDirectEditRequest(Request request) {

		final Request theRequest = request;

		try {
			getEditingDomain().runExclusive(new Runnable() {
				public void run() {
					if (isActive() && isEditable()) {
                        showEditPart();
						// IF the direct edit request has an initial character...
						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {							
							Character initialChar = (Character) theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
							performDirectEdit(initialChar.charValue());
						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
							performDirectEdit(editRequest.getLocation());
						} else { // Some other Request
							performDirectEdit();
						}
					}
				}
			});
		} catch (InterruptedException e) {
			Trace.catching(DiagramUIPlugin.getInstance(),
				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
				"performDirectEditRequest", e); //$NON-NLS-1$
			Log.error(DiagramUIPlugin.getInstance(),
				DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
				"performDirectEditRequest", e); //$NON-NLS-1$
		}

	}

	protected void handleNotificationEvent(Notification event) {
		Object feature = event.getFeature();
		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
			Integer c = (Integer) event.getNewValue();

			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
		} 
		else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature))
			refreshUnderline();
		else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature))
			refreshStrikeThrough();
		else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature) ||
				NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature) || 
				NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature) ||
				NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
			refreshFont();
		} 
		else if (NotationPackage.eINSTANCE.getTextStyle_TextAlignment().equals(feature))
			refreshTextAlignment();
		else if (isAffectingParserOptions(event)) {
			refreshParserOptions();
			refreshLabel();
			
		} else if (getParser() != null) {
			
			boolean sematicsAffected = getParser() instanceof ISemanticParser
					&& ((ISemanticParser) getParser())
							.areSemanticElementsAffected(null, event);
							
			boolean parserAffected = getParser().isAffectingEvent(event,
					getParserOptions().intValue());

			if (sematicsAffected) {
				removeSemanticListeners();
				
				if (resolveSemanticElement() != null) {
					addSemanticListeners();
				}
			}
			
			if (sematicsAffected || parserAffected) {
				refreshLabel();
			}
		}
		super.handleNotificationEvent(event);
	}


	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshParserOptions();
		refreshLabel();
        refreshFont();
		refreshUnderline();
		refreshStrikeThrough();
		refreshFontColor();
		refreshTextAlignment();
	}

    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#refreshFont()
     */
    protected void refreshFont() {
        FontStyle style = (FontStyle) getPrimaryView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
        FontData fontData = null;
        
        if (style != null) {
            fontData = new FontData(
                style.getFontName(), 
                style.getFontHeight(), 
                (style.isBold() ? SWT.BOLD : SWT.NORMAL) | 
                (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
        } else {
            // initialize font to defaults
            fontData =
                PreferenceConverter.getFontData(
                    (IPreferenceStore)getDiagramPreferencesHint().getPreferenceStore(),
                    IPreferenceConstants.PREF_DEFAULT_FONT);
        }
        
        setFont(fontData);
    }

	protected void setFontColor(Color color) {
		getFigure().setForegroundColor(color);
	}

	protected void addNotationalListeners() {
		super.addNotationalListeners();
		addListenerFilter("PrimaryView", this, getPrimaryView()); //$NON-NLS-1$
	}

	protected void addSemanticListeners() {
		if (getParser() instanceof ISemanticParser) {
			EObject semanticElement = resolveSemanticElement();
			parserElements =
				((ISemanticParser) getParser()).getSemanticElementsBeingParsed(semanticElement);

			for (int i = 0; i < parserElements.size(); i++)
				addListenerFilter("SemanticModel" + i, this,(EObject)parserElements.get(i)); //$NON-NLS-1$

		} else 
			super.addSemanticListeners();
	}

	protected void removeNotationalListeners() {
		super.removeNotationalListeners();
		removeListenerFilter("PrimaryView"); //$NON-NLS-1$
	}

	protected void removeSemanticListeners() {
		if (parserElements != null) {
			for (int i = 0; i < parserElements.size(); i++)
				removeListenerFilter("SemanticModel" + i); //$NON-NLS-1$
		} else
			super.removeSemanticListeners();
	}

	/**
	 * getter for the Num Icons
	 * @@return num icons
	 */
	public int getNumIcons() {
		return numIcons;
	}

	/**
	 * setter for the num icons
	 * @@param numIcons
	 */
	public void setNumIcons(int numIcons) {
		this.numIcons = numIcons;
	}

	protected List getModelChildren() {
		return Collections.EMPTY_LIST;
	}

	/* 
     * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart#getParser()
	 */
	public IParser getParser() {
		if (parser == null) {
			String parserHint = ((View)getModel()).getType();
			EObject element = resolveSemanticElement();
			if (element != null) {
				ParserHintAdapter hintAdapter =
					new ParserHintAdapter(element, parserHint);
				parser = ParserService.getInstance().getParser(hintAdapter);
			}
		}
		return parser;
	}

	/**
	 * Will update the tool tip text for the figure and also the icons for the label.  In additional
	 * it will apply any font constraints to the label based on the type of Text Compartment we
	 * are dealing with.
	 * Any body overriding this method should either can this super.refreshLabel() or
	 * call applyFontContraintsToLabel() to ensure the the proper font constraints are apply to
	 * the label.
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart#refreshLabel()
	 */
	protected void refreshLabel() {
		// refreshes the label text
		getLabelDelegate().setText(getLabelText());

		// refreshes the label icon(s)
		for (int i = 0; i < numIcons; i++)
			getLabelDelegate().setIcon(getLabelIcon(i), i);

		// refreshes the label tool tip
		getFigure().setToolTip(getLabelToolTip());
	}

	/**
	 * Refreshes the font underline property
	 */
	protected void refreshUnderline() {
		FontStyle style = (FontStyle) getPrimaryView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
		if (style != null)
			getLabelDelegate().setTextUnderline(style.isUnderline());
	}

	/**
	 * Refreshes the font underline property
	 */
	protected void refreshStrikeThrough() {
		FontStyle style = (FontStyle) getPrimaryView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
		if (style != null)
			getLabelDelegate().setTextStrikeThrough(style.isStrikeThrough());
	}

	/**
	 * @@see org.eclipse.gef.editparts.AbstractEditPart#getAccessibleEditPart()
	 */
	protected AccessibleEditPart getAccessibleEditPart() {
		if (accessibleEP == null)
			accessibleEP = new AccessibleGraphicalEditPart() {
			public void getName(AccessibleEvent e) {
                ILabelDelegate label = getLabelDelegate();
                if (label != null) {
                    e.result = label.getText();
                }

			}
		};
		return accessibleEP;
	}

	/**
	 * There is no children to text compartments 
	 * 
	 * @@param semanticHint
	 * @@return IGraphicalEditPart
	 */
	public IGraphicalEditPart getChildBySemanticHint(String semanticHint) {
		return null;
	}
	/**
	 * @@return Returns the manager.
	 *
	 */
	protected DirectEditManager getManager() {
		if (manager == null)
			setManager(
				new TextDirectEditManager(
					this));
		return manager;
	}
	/**
	 * @@param manager The manager to set.
	 * 
	 */
	protected void setManager(DirectEditManager manager) {
		this.manager = manager;
	}
	
	/**
	 * gets the primary child view for this edit part, this is usually used
	 * by direct edit requests, to see where the edit will happen
	 * @@return <code>View</code>
	 */
	public View getPrimaryChildView(){
		if (getModel()!=null){
			View view = (View)getModel();
			return ViewUtil.getChildBySemanticHint(view,CommonParserHint.DESCRIPTION);
		}
		return null;
	}

	/**
	 * Refreshes the text alignment property
	 */
	protected void refreshTextAlignment() {
		TextStyle style = (TextStyle) getPrimaryView().getStyle(NotationPackage.eINSTANCE.getTextStyle());
		if (style != null) {
			if (style.getTextAlignment() == TextAlignment.RIGHT_LITERAL) {
				getLabelDelegate().setTextJustification(PositionConstants.RIGHT);
			} else if (style.getTextAlignment() == TextAlignment.CENTER_LITERAL) {
				getLabelDelegate().setTextJustification(PositionConstants.CENTER);
			} else {
				// default to TextAlignment.LEFT_LITERAL
				getLabelDelegate().setTextJustification(PositionConstants.LEFT);
			}
		}
	}
}
@


1.16
log
@[224473] gmf-head ahunter 080327 Text alignment enhancement
@
text
@d147 4
@


1.15
log
@[162932] gmf_head crevells 071016 [NoteTextLabel] WrapLabel should use Gef's text layout
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
d61 2
a73 3
/*
 * @@canBeSeenBy %partners
 */
d75 2
a76 1
 * yhe conroller for hte text compartment
a77 1
 *
d515 2
d554 1
d749 17
@


1.14
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d49 2
d55 1
d95 2
d116 83
a198 6
	/**
	 * @@return WrapLabelFigure
	 */
	protected IFigure createFigure() {
		return createWrapLabel();
	}
d200 4
a203 9
	/**
	 * @@return WrapLabel, the created wrap label
	 */
	protected WrapLabel createWrapLabel() {
		WrapLabel label = new WrapLabel(""); //$NON-NLS-1$
		label.setLabelAlignment(PositionConstants.TOP);
		label.setTextAlignment(PositionConstants.TOP);
		return label;
	}
d205 17
d224 13
a236 15
	 * Use getLabel() instead if you which to get the WrapLabel
	 * for the the text compartent
	 * @@see org.eclipse.gef.GraphicalEditPart#getFigure()
	 */
	public IFigure getFigure() {
		return super.getFigure();
	}
	
	/**
	 * This should be used instead of getFigure() to get the figure
	 * @@return Return the WrapLabel for the TextCompartment 
	 */
	public WrapLabel getLabel() {
		return (WrapLabel) getFigure();
	}
d274 1
a274 1
		getLabel().setText(text);
d580 1
a580 1
		getLabel().setForegroundColor(color);
d662 1
a662 1
		getLabel().setText(getLabelText());
d666 1
a666 1
			getLabel().setIcon(getLabelIcon(i), i);
d669 1
a669 1
		getLabel().setToolTip(getLabelToolTip());
d678 1
a678 1
			getLabel().setTextUnderline(style.isUnderline());
d687 1
a687 1
			getLabel().setTextStrikeThrough(style.isStrikeThrough());
d697 5
a701 4
				IFigure fig = getFigure();
				if (fig instanceof WrapLabel) {
					e.result = ((WrapLabel)fig).getText();
				}
@


1.13
log
@bugzilla 136582 gmf-head sshaw 060413 Refactor DirectEditRequestWrapper in public API
@
text
@d28 2
d320 1
d336 1
a336 1
		if (getManager().getClass() == TextDirectEditManager.class) {			
d350 1
a350 1
		if (getManager() instanceof TextDirectEditManager) {									
d356 11
d382 1
a382 1

d409 1
a409 1
		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)){
d411 1
d413 1
a413 1
		}
d418 4
a421 4
        else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature) ||
                NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature) ||
                NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature) ||
                NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
d427 16
a442 7
		} 
		else {
			if (getParser() != null
				&& getParser().isAffectingEvent(event,
				getParserOptions().intValue())) {
			refreshLabel();
			return;
d444 3
a446 10
			if (getParser() instanceof ISemanticParser) {
				ISemanticParser modelParser = (ISemanticParser) getParser();
				if (modelParser.areSemanticElementsAffected(null,
						event)) {
					removeSemanticListeners();
					if (resolveSemanticElement() != null)
						addSemanticListeners();
					refreshLabel();
					return;
				}
d452 1
@


1.13.2.1
log
@[124977] gmf_R1_0_maintenance mmostafa  060713 Bad location of the inplace editor for the new list compartment item
@
text
@a27 2
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
a317 1
    
d333 1
a333 1
		if (getManager().getClass() == TextDirectEditManager.class) {
d347 1
a347 1
		if (getManager() instanceof TextDirectEditManager) {
a352 11
    
    private void showEditPart(){
        EditPart parent = getParent();
        if (parent!=null){
            EditPartViewer viewer = parent.getViewer();
            if (viewer!=null){
                viewer.reveal(this);
            }
        }
    }

d368 1
a368 1
                        showEditPart();
@


1.13.2.2
log
@[155581] gmf_R1_0_maintenance nbalaba 060905 TextCompartmentEditPart does facilitate proper event subscription /unsubscription
@
text
@d409 1
a409 1
		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
a410 1

d412 1
a412 1
		} 
d417 4
a420 4
		else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature) ||
				NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature) || 
				NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature) ||
				NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
d426 17
a442 15
			
		} else if (getParser() != null) {
			
			boolean sematicsAffected = getParser() instanceof ISemanticParser
					&& ((ISemanticParser) getParser())
							.areSemanticElementsAffected(null, event);
							
			boolean parserAffected = getParser().isAffectingEvent(event,
					getParserOptions().intValue());

			if (sematicsAffected) {
				removeSemanticListeners();
				
				if (resolveSemanticElement() != null) {
					addSemanticListeners();
a444 4
			
			if (sematicsAffected || parserAffected) {
				refreshLabel();
			}
a448 1

@


1.12
log
@bugzilla 135694 gmf-head sshaw 060412 Make TextDirectEditManager more generic to handle GEF labels
@
text
@d11 1
d48 1
a53 1
import org.eclipse.gmf.runtime.gef.ui.internal.requests.DirectEditRequestWrapper;
d370 3
a372 4
						if (theRequest instanceof DirectEditRequestWrapper) {							
							char initialCharacter = ((DirectEditRequestWrapper) theRequest)
							.getInitialCharacter();							
							performDirectEdit(initialCharacter);
@


1.11
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d10 1
d74 1
a74 1
public class TextCompartmentEditPart extends CompartmentEditPart {
d164 2
a165 3
	/**
	 * gets the edit text
	 * @@return the edit text
d174 11
a184 4
	
	/**
	 * get the completion processor
	 * @@return IContentAssistProcessor 
d198 3
a200 3
	/**
	 * Returns a validator for the user's edit text
	 * @@return a validator
d238 3
a240 4
	/**
	 * Gets the parser options. The result is passed as a parameter to the 
	 * parser's getPrintString() and isAffectingEvent() methods
	 * @@return ParserOptions the parser options
d524 3
a526 3
	/**
	 * Method getParser.
	 * @@return IParser
@


1.10
log
@bugzilla 127691 gmf-head sshaw 060227 Labels on connections don't print correctly - very small
@
text
@d24 1
d30 2
a37 1
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
d41 3
a47 1
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
a200 1
					final IParserEditStatus isValid[] = { null };
d202 20
a221 9
					MEditingDomainGetter.getMEditingDomain((View)getModel()).runAsRead(new MRunnable() {
							public Object run() {
								isValid[0] =
								    theParser.isValidEditString(
										new EObjectAdapter(element),
										(String) value);
								return null;
							}
						});
a222 1
					return isValid[0].getCode() == ParserEditStatus.EDITABLE ? null : isValid[0].getMessage();
d357 3
a359 2
		MEditingDomainGetter.getMEditingDomain((View)getModel()).runAsRead(new MRunnable() {
				public Object run() {
a373 2
					
					return null;
d376 9
d463 1
a463 1
    protected void setFontColor(Color color) {
@


1.9
log
@ bugzilla 111894 gmf-head mmostafa 051201 Improve memory consumption of opened notation diagram
@
text
@d40 1
d51 2
d55 1
d58 1
d376 6
d412 1
d418 25
a442 1
	protected void setFontColor(Color color) {
@


1.8
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d84 2
a85 2
	public TextCompartmentEditPart(View view) {
		super(view);
@


1.7
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d39 1
a39 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d365 1
a365 1
			setFontColor(DiagramResourceManager.getInstance().getColor(c));
@


1.6
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d39 1
a39 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d365 1
a365 1
			setFontColor(PresentationResourceManager.getInstance().getColor(c));
@


1.5
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d22 1
a35 1
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;
a39 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
d248 11
d361 17
a377 3
	protected void handleNotificationEvent(NotificationEvent event) {
		if (getParser() != null
			&& getParser().isAffectingEvent(event.getNotification(),
d381 11
a391 10
		}
		if (getParser() instanceof ISemanticParser) {
			ISemanticParser modelParser = (ISemanticParser) getParser();
			if (modelParser.areSemanticElementsAffected(null,
					event.getNotification())) {
				removeSemanticListeners();
				if (resolveSemanticElement() != null)
					addSemanticListeners();
				refreshLabel();
				return;
a395 19
	
	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#handlePropertyChangeEvent(java.beans.PropertyChangeEvent)
	 */
	protected void handlePropertyChangeEvent(PropertyChangeEvent evt) {
		if (evt.getPropertyName().equals(Properties.ID_FONTCOLOR)){
			Integer c = (Integer) evt.getNewValue();
			setFontColor(PresentationResourceManager.getInstance().getColor(c));
		}
		else if (evt.getPropertyName().equals(Properties.ID_FONTUNDERLINE))
			refreshUnderline();
		else if (evt.getPropertyName().equals(Properties.ID_FONTSTRIKETHROUGH))
			refreshStrikeThrough();
		else if (isAffectingParserOptions(evt)) {
			refreshParserOptions();
			refreshLabel();
		} else
			super.handlePropertyChangeEvent(evt);
	}
@


1.4
log
@Bugzilla109092 : rmp_head mmostafa 050912 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.3
log
@bugzilla 108310 gmf-head sshaw 050824 API analysis of draw2d / draw2d.render plug-ins
@
text
@a33 1
import org.eclipse.gmf.runtime.diagram.core.listener.PresentationListener;
d404 1
a404 1
		addListenerFilter("PrimaryView", this, ViewUtil.getPropertyChangeNotifier(getPrimaryView())); //$NON-NLS-1$
d414 1
a414 1
				addListenerFilter("SemanticModel" + i, this, PresentationListener.getNotifier((EObject)parserElements.get(i))); //$NON-NLS-1$
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@a15 1
import org.eclipse.draw2d.FigureUtilities;
a18 1
import org.eclipse.draw2d.geometry.Dimension;
a19 1
import org.eclipse.draw2d.geometry.Rectangle;
a24 1
import org.eclipse.gef.tools.CellEditorLocator;
a25 9
import org.eclipse.jface.text.contentassist.IContentAssistProcessor;
import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.jface.viewers.ICellEditorValidator;
import org.eclipse.swt.SWT;
import org.eclipse.swt.accessibility.AccessibleEvent;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Text;

d35 1
a40 1
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
a46 2
import org.eclipse.gmf.runtime.gef.ui.parts.TextCellEditorEx;
import org.eclipse.gmf.runtime.gef.ui.parts.WrapTextCellEditor;
d50 5
a65 24
	/**
	 * the text cell editor locator
	 * @@author mmostafa
	 *
	 */
	public class TextCellEditorLocator implements CellEditorLocator {

		public void relocate(CellEditor celleditor) {
			Text text = (Text) celleditor.getControl();
			Rectangle rect = getLabel().getTextBounds().getCopy();
			getLabel().translateToAbsolute(rect);
			
			if (getLabel().isTextWrapped() && getLabel().getText().length() > 0)
				rect.setSize(new Dimension(text.computeSize(rect.width, SWT.DEFAULT)));
			else {
				int avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();
				rect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr*2, 0));
			}

			if (!rect.equals(new Rectangle(text.getBounds())))
				text.setBounds(rect.x, rect.y, rect.width, rect.height);
		}

	}
d543 1
a543 5
					this,
					getLabel().isTextWrapped()
						? WrapTextCellEditor.class
						: TextCellEditorEx.class,
					new TextCellEditorLocator()));
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d62 3
a64 3
import com.ibm.xtools.notation.FontStyle;
import com.ibm.xtools.notation.NotationPackage;
import com.ibm.xtools.notation.View;
@

