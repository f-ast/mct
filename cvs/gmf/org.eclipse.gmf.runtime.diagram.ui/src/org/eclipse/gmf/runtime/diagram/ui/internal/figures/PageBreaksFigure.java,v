head	1.3;
access;
symbols
	v20081023-2107:1.3
	v20081022-1925:1.3
	v20081022-1005:1.3
	v20081020-0700:1.3
	v20080917-1925:1.3
	v20080916-2008:1.3
	v20080911-1728:1.3
	v20080911-1506:1.3
	v20080910-1520:1.3
	v20080910-1510:1.3
	v20080903-1520:1.3
	v20080903-1510:1.3
	v20080813-1510:1.3
	v20080811-1546:1.3
	v20080731-1520:1.3
	v20080725-1738:1.3
	v20080723-2246:1.3
	v20080723-2232:1.3
	v20080723-1700:1.3
	v20080722-1827:1.3
	v20080718-1700:1.3
	v20080718-1731:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.8
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080603-1553:1.3
	v20080527-1255:1.3
	v20080527-1151:1.3
	v20080516-1748:1.3
	v20080516-1143:1.3
	v20080512-1200:1.3
	v20080503-1740:1.3
	v20080501-2127:1.3
	v20080501-1739:1.3
	m20080429-1543:1.3
	v20080425-1959:1.3
	v20080417-1610:1.3
	v20080407-2250:1.3
	v20080407-0930:1.3
	v20080404-1111:1.3
	v20080328-1605:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080201-2010:1.3
	v20080201-0201:1.3
	v20080118-1129:1.3
	v20080114-2222:1.3
	v20080114-1111:1.3
	v20080107-1111:1.3
	v20071222-1111:1.3
	v20071214-1111:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071112-0000:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.6
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070518-1300:1.3
	bugzilla111892_group_support:1.3.0.4
	Root_bugzilla111892_group_support:1.3
	v20070504-1000:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070202-0200:1.3
	v20070119-1200:1.3
	v20070111-0800:1.3
	v20070105-1200:1.3
	v20070103-0300:1.3
	M4_20:1.3
	v20061218-1500:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061027-1200:1.3
	v20061013-1330:1.3
	v20061012-1100:1.3
	v20060925-1700:1.3
	v20060919-0800:1.3
	v20060907-1100:1.3
	M1_20:1.3
	v20060831-1500:1.3
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060810-1700:1.3
	v20060803-1200:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.3
date	2005.11.04.21.27.49;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.10;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.43;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.figures;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.draw2d.ColorConstants;
import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;


/**
 * Page Breaks Figure.  A rectangle divided into subrectangles 
 * which are usually based on the printable page size.  This figure
 * supports two different states.  One for the regular figure and one used
 * as a feedback figure. 
 *  
 * @@author jcorchis
 * @@canBeSeenBy %level1
 */
public class PageBreaksFigure extends Figure {

    /* constants used to indicated the type of figure */
    public static final boolean FIGURE = true;
    public static final boolean FEEDBACK = false;

    /* Initial number of rows and columns */
    private int rows = 1;
    private int cols = 1;

    // List that contains the bounds of the filled 
    // rectangles which comprise the figure.    
    private List recList;

    private boolean figureType = FIGURE;

    /**
     * Constructor for PageBreaksFigure.
     */
    public PageBreaksFigure(boolean type) {
        super();
        figureType = type;
        if (type) {
            recList = new ArrayList(5);
	    }
    }

    private int getBorderLineWidth() {
    		return MapModeUtil.getMapMode(this).DPtoLP(7);
    }
    
    private int getLineWidth() {
    		return MapModeUtil.getMapMode(this).DPtoLP(1);
    }
    
    private int getBottomPageMargin() {
    		return MapModeUtil.getMapMode(this).DPtoLP(60);
    }
    
    public void setPageCount(int rows, int cols) {
        this.rows = Math.max(1, rows);
        this.cols = Math.max(1, cols);
    }

    public void setRows(int rows) {
        this.rows = Math.max(1, rows);
    }

    public void setCols(int cols) {
        this.cols = Math.max(1, cols);
    }

    public Point getPageCount() {
        return new Point(rows, cols);
    }

    /**
     * @@see Figure#paintBorder(Graphics)
     */
    protected void paintBorder(Graphics g) {
        super.paintBorder(g);
    }

    /**
     * @@see Figure#paintFigure(Graphics)
     */
    protected void paintFigure(Graphics g) {
        if (figureType) {
            paintPageFigure(g);
        } else {
            paintFeedbackFigure(g);
        }
    }

    /**
     * The regular version of paint(Graphics g)
     */
    private void paintPageFigure(Graphics g) {
        super.paintFigure(g);
        recList.clear();
        Rectangle r = getBounds();

        g.setForegroundColor(ColorConstants.blue);
        g.setBackgroundColor(ColorConstants.blue);

        // Draw the border
        final int borderLineWidth = getBorderLineWidth();
        Rectangle top = new Rectangle(r.x, r.y, r.width, borderLineWidth);
        recList.add(top);

        Rectangle right =
            new Rectangle(
                r.x + r.width - borderLineWidth,
                r.y,
                borderLineWidth + 1,
                r.height);
        recList.add(right);

        Rectangle left = new Rectangle(r.x, r.y, borderLineWidth, r.height);
        recList.add(left);

        Rectangle bottom =
            new Rectangle(
                r.x,
                r.y + r.height - borderLineWidth,
                r.width,
                borderLineWidth + 1 );
        recList.add(bottom);

        for (int i = 0; i < recList.size(); i++) {
            g.fillRectangle((Rectangle) recList.get(i));
        }

        // Draw the internal page division lines
        g.setLineWidth(getLineWidth());
        Point location = getLocation();

        int colSize = (int) Math.floor(r.width / cols);
        for (int i = 1; i < cols; i++) {
            int colsOffset = colSize * i;
            Rectangle rec =
                new Rectangle(
                    location.x + colsOffset,
                    location.y,
                    getLineWidth(),
                    r.height);
            recList.add(rec);
            g.fillRectangle(rec);
        }

        int rowSize = (int) Math.floor(r.height / rows);
        for (int i = 1; i < rows; i++) {
            int rowOffset = rowSize * i;
            Rectangle rec =
                new Rectangle(
                    location.x,
                    location.y + rowOffset,
                    r.width,
                    getLineWidth());
            recList.add(rec);
            g.fillRectangle(rec);
        }

        // Add page numers centered at the bottom of each page
        int halfPageSize = (int) Math.floor(colSize / 2);
        for (int col = 1; col < cols + 1; col++) {
            for (int row = 1; row < rows + 1; row++) {
                int colsOffset = location.x + (colSize * col);
                int rowOffset = location.y + (rowSize * row);
                int topCenter = colsOffset - halfPageSize;
                String pageNumber = row + " - " + col; //$NON-NLS-1$
                Dimension size =
                    FigureUtilities.getTextExtents(pageNumber, getFont());
                g.drawString(
                    pageNumber,
                    topCenter - size.width,
                    rowOffset - (getBottomPageMargin() + size.height));
            }
        }
    }

    /**
     * The feedback version of paint(Graphics g)
     */
    private void paintFeedbackFigure(Graphics g) {
        super.paintFigure(g);
        Rectangle r = getBounds();

        g.setForegroundColor(ColorConstants.blue);
        g.setBackgroundColor(ColorConstants.blue);
        g.setLineStyle(Graphics.LINE_DASHDOT);

        g.drawRectangle(r.x, r.y, r.width - 1, r.height - 1);


        int colSize = (int) Math.floor(r.width / cols);
        for (int i = 1; i < cols; i++) {
            int colsOffset = colSize * i;
            g.drawLine(r.x + colsOffset, r.y, r.x + colsOffset, r.y + r.height);
        }

        int rowSize = (int) Math.floor(r.height / rows);
        for (int i = 1; i < rows; i++) {
            int rowOffset = rowSize * i;
            g.drawLine(r.x, r.y + rowOffset, r.x + r.width, r.y + rowOffset);
        }
    }

    public boolean containsPoint(int x, int y) {
    	if (figureType == FEEDBACK)
    		return false;
    		
        if (isOpaque())
            return super.containsPoint(x, y);

        for (int i = 0; i < recList.size(); i++) {
            Rectangle r = (Rectangle) recList.get(i);
            if (r.contains(x, y)) {
                return true;
            }
        }
        return false;
    }
}
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a22 1

d24 1
a24 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
a45 4
    private int BORDER_LINE_WIDTH = MapMode.DPtoLP(7);
    private int LINE_WIDTH = MapMode.DPtoLP(1);
    private int BOTTOM_PAGE_MARGIN = MapMode.DPtoLP(60);

d63 12
d122 2
a123 1
        Rectangle top = new Rectangle(r.x, r.y, r.width, BORDER_LINE_WIDTH);
d128 1
a128 1
                r.x + r.width - BORDER_LINE_WIDTH,
d130 1
a130 1
                BORDER_LINE_WIDTH + 1,
d134 1
a134 1
        Rectangle left = new Rectangle(r.x, r.y, BORDER_LINE_WIDTH, r.height);
d140 1
a140 1
                r.y + r.height - BORDER_LINE_WIDTH,
d142 1
a142 1
                BORDER_LINE_WIDTH + 1 );
d150 1
a150 1
        g.setLineWidth(LINE_WIDTH);
d160 1
a160 1
                    LINE_WIDTH,
d174 1
a174 1
                    LINE_WIDTH);
d192 1
a192 1
                    rowOffset - (BOTTOM_PAGE_MARGIN + size.height));
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

