head	1.14;
access;
symbols
	v20081023-2107:1.14
	v20081022-1925:1.14
	v20081022-1005:1.14
	v20081020-0700:1.14
	v20080917-1925:1.14
	v20080916-2008:1.14
	v20080911-1728:1.14
	v20080911-1506:1.14
	v20080910-1520:1.14
	v20080910-1510:1.14
	v20080903-1520:1.14
	v20080903-1510:1.14
	v20080813-1510:1.14
	v20080811-1546:1.14
	v20080731-1520:1.14
	v20080725-1738:1.14
	v20080723-2246:1.14
	v20080723-2232:1.14
	v20080723-1700:1.14
	v20080722-1827:1.14
	v20080718-1700:1.14
	v20080718-1731:1.14
	v20080716-1600:1.14
	v20080716-1642:1.14
	R2_1_maintenance:1.14.0.6
	Root_R2_1_maintenance:1.14
	R2_1_0:1.14
	v20080610-1132:1.14
	v20080603-1553:1.14
	v20080527-1255:1.14
	v20080527-1151:1.14
	v20080516-1748:1.14
	v20080516-1143:1.14
	v20080512-1200:1.14
	v20080503-1740:1.14
	v20080501-2127:1.14
	v20080501-1739:1.14
	m20080429-1543:1.14
	v20080425-1959:1.14
	v20080417-1610:1.14
	v20080407-2250:1.14
	v20080407-0930:1.14
	v20080404-1111:1.14
	v20080328-1605:1.14
	v20080322-0000:1.14
	v20080222-1200:1.14
	v20080201-2010:1.14
	v20080201-0201:1.14
	v20080118-1129:1.14
	v20080114-2222:1.14
	v20080114-1111:1.14
	v20080107-1111:1.14
	v20071222-1111:1.14
	v20071214-1111:1.14
	v20071130-1111:1.14
	v20071124-0000:1.14
	v20071112-0000:1.14
	v20071108-0000:1.14
	v20071003-0000:1.14
	v20070915-0000:1.14
	v20070903-0000:1.14
	v20070809-0000:1.14
	R2_0_maintenance:1.14.0.4
	R2_0:1.14
	R4_20:1.14
	v20070621-0000:1.14
	RC3_20:1.14
	v20070614-1400:1.14
	v20070608-1300:1.14
	v20070605-1400:1.14
	v20070601-1400:1.14
	v20070525-1500:1.14
	v20070518-1300:1.14
	bugzilla111892_group_support:1.14.0.2
	Root_bugzilla111892_group_support:1.14
	v20070504-1000:1.14
	v20070420-1000:1.14
	v20070413-1300:1.14
	v20070330-1300:1.14
	v20060330-1300:1.14
	v20070322-1100:1.14
	v20060316-0600:1.14
	v20070221-1500:1.14
	v20070208-1800:1.14
	v20070202-0200:1.13.2.2
	v20070119-1200:1.13.2.2
	v20070111-0800:1.13.2.2
	v20070105-1200:1.13.2.2
	v20070103-0300:1.14
	M4_20:1.14
	v20061218-1500:1.13.2.2
	v20061218-1200:1.14
	v20061214-0000:1.14
	M3_20:1.14
	v20061117-0800:1.14
	v20061027-1200:1.13.2.2
	v20061013-1330:1.14
	v20061012-1100:1.13.2.2
	v20060925-1700:1.13.2.2
	v20060919-0800:1.13.2.2
	v20060907-1100:1.13.2.1
	M1_20:1.13
	v20060831-1500:1.13.2.1
	v20060824-1600:1.13.2.1
	v20060817-1500:1.13.2.1
	v20060810-1700:1.13.2.1
	v20060803-1200:1.13.2.1
	v20060728-0500:1.13.2.1
	v20060721-1130:1.13.2.1
	v20060713-1700:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060616-1400:1.13
	v20060616-1200:1.11
	v20060609-1400:1.9
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.9
	v20060519-0800:1.9
	v20060512-1000:1.9
	I20060512-1000:1.9
	I20060505-1400:1.9
	I20060428-1300:1.9
	I20060424-0500:1.9
	I20060424-0300:1.9
	M6_10:1.9
	I20060407-1200:1.9
	I20060331-1000:1.9
	I20060324-0300:1.9
	I20060317-1300:1.9
	I20060317-1200:1.9
	I20060316-1300:1.9
	I20060309-1300:1.9
	M5_10:1.9
	S20060303-1600:1.9
	I20060227-1730:1.8
	I20060216-1945:1.8
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.7
	I20060202-1415:1.7
	I20060129-1145:1.7
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051208-2000:1.7
	I20051201-1800:1.7
	I20051124-2000:1.6
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.3;
locks; strict;
comment	@# @;


1.14
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.16.17.51.33;	author sshaw;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2006.06.16.17.16.43;	author sshaw;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.16.15.34.30;	author sshaw;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.13.20.21.04;	author sshaw;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.28.02.30.51;	author cmahoney;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.23.18.01.46;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.21.16.13.24;	author cmahoney;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.08;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.46;	author sshaw;	state Exp;
branches;
next	;

1.13.2.1
date	2006.07.13.21.51.55;	author sshaw;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2006.09.13.17.48.55;	author cmahoney;	state Exp;
branches;
next	;


desc
@@


1.14
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.commands;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.draw2d.IFigure;
import org.eclipse.emf.transaction.RunnableWithResult;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.requests.ArrangeRequest;
import org.eclipse.gmf.runtime.diagram.ui.services.layout.LayoutType;
import org.eclipse.gmf.runtime.diagram.ui.util.EditPartUtil;
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
import org.eclipse.gmf.runtime.notation.View;

/**
 * This command is used to arrange editparts on a diagram, when only the view
 * adapters are available at the time of creating the command. It is necessary
 * to have the editparts when creating a layout command so this command defers
 * the creation of the layout command until execution time at which point it can
 * get the editparts from the editpart registry using the view adapters.
 * 
 * @@author cmahoney
 */
public class DeferredLayoutCommand
	extends AbstractTransactionalCommand {

	/** the type of layout to be performed */
	protected String layoutType;

	/** the IAdaptables from which an View can be retrieved */
	protected List viewAdapters;

	/** the diagram editpart used to get the editpart registry */
	protected IGraphicalEditPart containerEP;

	/**
	 * Constructor for <code>DeferredLayoutCommand</code>.
	 * 
     * @@param editingDomain
     *            the editing domain through which model changes are made
	 * @@param viewAdapters
	 *            the IAdaptables from which an IView can be retrieved
	 * @@param containerEP
	 *            the container editpart used to get the editpart registry
	 */
	public DeferredLayoutCommand(TransactionalEditingDomain editingDomain, List viewAdapters,
		IGraphicalEditPart containerEP) {
		this(editingDomain, viewAdapters, containerEP, LayoutType.DEFAULT);
	}

	/**
	 * Constructor for <code>DeferredLayoutCommand</code>.
	 * 
     * @@param editingDomain
     *            the editing domain through which model changes are made
	 * @@param viewAdapters
	 *            the IAdaptables from which an IView can be retrieved
	 * @@param containerEP
	 *            the container editpart used to get the editpart registry
	 * @@param commandLayoutType
	 *            the type of layout to be performed
	 */
	public DeferredLayoutCommand(TransactionalEditingDomain editingDomain, List viewAdapters,
		IGraphicalEditPart containerEP, String commandLayoutType) {

		super(editingDomain,
            DiagramUIMessages.Command_Deferred_Layout, null);
		if (commandLayoutType != null) {
			this.layoutType = commandLayoutType;
		} else {
			this.layoutType = LayoutType.DEFAULT;
		}
		this.viewAdapters = viewAdapters;
		this.containerEP = containerEP;
	}

	public List getAffectedFiles() {
		if (containerEP != null) {
			View view = (View)containerEP.getModel();
			if (view != null) {
				IFile f = WorkspaceSynchronizer.getFile(view.eResource());
				return f != null ? Collections.singletonList(f)
					: Collections.EMPTY_LIST;
			}
		}
		return super.getAffectedFiles();
	}

	/**
	 * Executes a layout command with all the editparts for the view adapters.
	 * 
	 */
	protected CommandResult doExecuteWithResult(
            IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {

		RunnableWithResult refreshRunnable = new RunnableWithResult() {
			
			private IStatus status;
            private Object result;

            public Object getResult() {
                return result;
            }

            public void setStatus(IStatus status) {
                this.status = status;
            }

            public IStatus getStatus() {
                return status;
            }
            
			public void run() {
				containerEP.refresh();
				
				// The layout command requires that the figure world is updated.
				getContainerFigure().invalidate();
				getContainerFigure().validate();

				List editParts = new ArrayList(viewAdapters.size());
				Map epRegistry = containerEP.getRoot().getViewer()
					.getEditPartRegistry();
				for (Iterator iter = viewAdapters.iterator(); iter.hasNext();) {
					IAdaptable ad = (IAdaptable) iter.next();
					View view = (View) ad.getAdapter(View.class);
					Object ep = epRegistry.get(view);
					if (ep != null) {
						editParts.add(ep);
					}
				}

				if (editParts.isEmpty()) {
					result = editParts;
					return;
				}

				Set layoutSet = new HashSet(editParts.size());
				layoutSet.addAll(editParts);
				
				// refresh source and target connections of any shapes in the container not being considered for layout
				Iterator iter = containerEP.getChildren().iterator();
				while (iter.hasNext()) {
					Object obj = iter.next();
					if (!layoutSet.contains(obj) && obj instanceof IGraphicalEditPart) {
						IGraphicalEditPart ep = (IGraphicalEditPart)obj;
						ep.refresh();
					}
				}
				
				result = editParts;
			}
		};
		
		EditPartUtil.synchronizeRunnableToMainThread(containerEP, refreshRunnable);
		List editParts = (List)refreshRunnable.getResult();
		if (editParts == null || editParts.isEmpty()) {
			return CommandResult.newOKCommandResult();
		}
		
		//	add an arrange command, to layout the related shapes
		ArrangeRequest request = new ArrangeRequest(
			ActionIds.ACTION_ARRANGE_SELECTION, layoutType);
		request.setPartsToArrange(editParts);
		Command layoutCmd = containerEP.getCommand(request);

		if (layoutCmd != null && layoutCmd.canExecute()) {
            ICommand optimizedCommand = optimizeCommand(layoutCmd);
			optimizedCommand.execute(progressMonitor, info);
            optimizedCommand = null;
		}
		return CommandResult.newOKCommandResult();
	}

    private ICommand optimizeCommand(Command command) {
        if (command instanceof ICommandProxy) {
            ICommand icmd = ((ICommandProxy)command).getICommand();
            return icmd; 
        } else {
            if(command instanceof CompoundCommand) {
                CompositeTransactionalCommand transactionalCommand = new CompositeTransactionalCommand(getEditingDomain(), command.getLabel());
                transactionalCommand.setTransactionNestingEnabled(false);
                
                CompoundCommand compound = (CompoundCommand)command;
                Iterator commandIter = compound.getCommands().iterator();
                while(commandIter.hasNext()) {
                    Command iteredCommand = (Command)commandIter.next();
                    ICommand iteredICommand = optimizeCommand(iteredCommand);
                    transactionalCommand.compose(iteredICommand);
                }
                return transactionalCommand;
            }
            return new CommandProxy(command);
        }
    }
	protected void cleanup() {
		containerEP = null;//for garbage collection
		viewAdapters = null;
		super.cleanup();
	}

	/**
	 * gets the container edit part's figure
	 * @@return the container figure
	 */
	protected IFigure getContainerFigure() {
		return containerEP.getFigure();
	}

	/**
	 * gets the container edit part
	 * @@return the container edit part
	 */
	protected IGraphicalEditPart getContainerEP() {
		return containerEP;
	}

	/**
	 * gets a list of <code>IAdaptable</code> that can adapt to <code>
	 * View</code>
	 * @@return view adapters
	 */
	protected List getViewAdapters() {
		return viewAdapters;
	}
}@


1.13
log
@bugzilla 143198 gmf-head sshaw 060616 SWTExceptions occurring when handling notifications from worker thread transactions
@
text
@d32 1
d34 1
d42 1
a65 3
	/** the layout command saved for undo */
	protected Command layoutCmd;

d195 1
a195 1
		layoutCmd = containerEP.getCommand(request);
d198 3
a200 1
			layoutCmd.execute();
d205 21
@


1.13.2.1
log
@bugzilla 144531gmf_R1_0_maintenance sshaw 060713 DeferredLayoutCommand keeps a reference to layoutcmd and never uses it for undo redo.
@
text
@d63 3
d195 1
a195 1
		Command layoutCmd = containerEP.getCommand(request);
@


1.13.2.2
log
@Bugzilla#157108 gmf_R1_0_maintenance cmahoney 060913 DeferredLayoutCommand and CreateConnectionViewRequest uses too much memory with their commands
Contributed by: Maneesh Goyal
@
text
@a31 1
import org.eclipse.gef.commands.CompoundCommand;
a32 1
import org.eclipse.gmf.runtime.common.core.command.ICommand;
a39 1
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
d195 1
a195 3
            ICommand optimizedCommand = optimizeCommand(layoutCmd);
			optimizedCommand.execute(progressMonitor, info);
            optimizedCommand = null;
a199 21
    private ICommand optimizeCommand(Command command) {
        if (command instanceof ICommandProxy) {
            ICommand icmd = ((ICommandProxy)command).getICommand();
            return icmd; 
        } else {
            if(command instanceof CompoundCommand) {
                CompositeTransactionalCommand transactionalCommand = new CompositeTransactionalCommand(getEditingDomain(), command.getLabel());
                transactionalCommand.setTransactionNestingEnabled(false);
                
                CompoundCommand compound = (CompoundCommand)command;
                Iterator commandIter = compound.getCommands().iterator();
                while(commandIter.hasNext()) {
                    Command iteredCommand = (Command)commandIter.next();
                    ICommand iteredICommand = optimizeCommand(iteredCommand);
                    transactionalCommand.compose(iteredICommand);
                }
                return transactionalCommand;
            }
            return new CommandProxy(command);
        }
    }
@


1.12
log
@bugzilla 143198 gmf-head sshaw 060616 SWTExceptions occurring when handling notifications from worker thread transactions

rolled back change until test_drop_modalContextThread test failure can be verified...
@
text
@d26 1
d28 1
d38 1
d127 57
a183 1
		containerEP.refresh();
d185 3
a187 17
		// The layout command requires that the figure world is updated.
		getContainerFigure().invalidate();
		getContainerFigure().validate();

		List editParts = new ArrayList(viewAdapters.size());
		Map epRegistry = containerEP.getRoot().getViewer()
			.getEditPartRegistry();
		for (Iterator iter = viewAdapters.iterator(); iter.hasNext();) {
			IAdaptable ad = (IAdaptable) iter.next();
			View view = (View) ad.getAdapter(View.class);
			Object ep = epRegistry.get(view);
			if (ep != null) {
				editParts.add(ep);
			}
		}

		if (editParts.isEmpty()) {
a189 13

		Set layoutSet = new HashSet(editParts.size());
		layoutSet.addAll(editParts);
		
		// refresh source and target connections of any shapes in the container not being considered for layout
		Iterator iter = containerEP.getChildren().iterator();
		while (iter.hasNext()) {
			Object obj = iter.next();
			if (!layoutSet.contains(obj) && obj instanceof IGraphicalEditPart) {
				IGraphicalEditPart ep = (IGraphicalEditPart)obj;
				ep.refresh();
			}
		}
@


1.11
log
@bugzilla 143198 gmf-head sshaw 060616 SWTExceptions occurring when handling notifications from worker thread transactions
@
text
@a25 1
import org.eclipse.core.runtime.IStatus;
a26 1
import org.eclipse.emf.transaction.RunnableWithResult;
a35 1
import org.eclipse.gmf.runtime.diagram.ui.util.EditPartUtil;
d124 15
a138 55
		RunnableWithResult refreshRunnable = new RunnableWithResult() {
			
			private IStatus status;
            private Object result;

            public Object getResult() {
                return result;
            }

            public void setStatus(IStatus status) {
                this.status = status;
            }

            public IStatus getStatus() {
                return status;
            }
            
			public void run() {
				containerEP.refresh();
				
				// The layout command requires that the figure world is updated.
				getContainerFigure().invalidate();
				getContainerFigure().validate();

				List editParts = new ArrayList(viewAdapters.size());
				Map epRegistry = containerEP.getRoot().getViewer()
					.getEditPartRegistry();
				for (Iterator iter = viewAdapters.iterator(); iter.hasNext();) {
					IAdaptable ad = (IAdaptable) iter.next();
					View view = (View) ad.getAdapter(View.class);
					Object ep = epRegistry.get(view);
					if (ep != null) {
						editParts.add(ep);
					}
				}

				if (editParts.isEmpty()) {
					result = editParts;
					return;
				}

				Set layoutSet = new HashSet(editParts.size());
				layoutSet.addAll(editParts);
				
				// refresh source and target connections of any shapes in the container not being considered for layout
				Iterator iter = containerEP.getChildren().iterator();
				while (iter.hasNext()) {
					Object obj = iter.next();
					if (!layoutSet.contains(obj) && obj instanceof IGraphicalEditPart) {
						IGraphicalEditPart ep = (IGraphicalEditPart)obj;
						ep.refresh();
					}
				}
				
				result = editParts;
d140 8
a147 1
		};
d149 8
a156 4
		EditPartUtil.synchronizeRunnableToMainThread(containerEP, refreshRunnable);
		List editParts = (List)refreshRunnable.getResult();
		if (editParts == null || editParts.isEmpty()) {
			return CommandResult.newOKCommandResult();
@


1.10
log
@bugzilla 146587 gmf-head sshaw 060613 NullPointerException when DeferredLayoutCommand is called before transaction is committed
@
text
@d26 1
d28 1
d38 1
d127 57
a183 1
		containerEP.refresh();
d185 3
a187 17
		// The layout command requires that the figure world is updated.
		getContainerFigure().invalidate();
		getContainerFigure().validate();

		List editParts = new ArrayList(viewAdapters.size());
		Map epRegistry = containerEP.getRoot().getViewer()
			.getEditPartRegistry();
		for (Iterator iter = viewAdapters.iterator(); iter.hasNext();) {
			IAdaptable ad = (IAdaptable) iter.next();
			View view = (View) ad.getAdapter(View.class);
			Object ep = epRegistry.get(view);
			if (ep != null) {
				editParts.add(ep);
			}
		}

		if (editParts.isEmpty()) {
a189 13

		Set layoutSet = new HashSet(editParts.size());
		layoutSet.addAll(editParts);
		
		// refresh source and target connections of any shapes in the container not being considered for layout
		Iterator iter = containerEP.getChildren().iterator();
		while (iter.hasNext()) {
			Object obj = iter.next();
			if (!layoutSet.contains(obj) && obj instanceof IGraphicalEditPart) {
				IGraphicalEditPart ep = (IGraphicalEditPart)obj;
				ep.refresh();
			}
		}
@


1.9
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d16 1
d20 1
d146 13
@


1.8
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d26 1
a34 1
import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
d93 1
a93 1
        if (commandLayoutType != null) {
d106 1
a106 1
				IFile f = EObjectUtil.getWorkspaceFile(view);
@


1.7
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
a14 1
import java.util.Collection;
d20 1
d25 1
d33 1
a33 1
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;
d47 1
a47 1
	extends AbstractModelCommand {
d64 2
d71 1
a71 1
	public DeferredLayoutCommand(List viewAdapters,
d73 1
a73 1
		this(viewAdapters, containerEP, LayoutType.DEFAULT);
d79 2
d88 1
a88 1
	public DeferredLayoutCommand(List viewAdapters,
d91 3
a93 2
		super(DiagramUIMessages.Command_Deferred_Layout, null);
		if (commandLayoutType != null) {
d102 1
a102 4
	/**
	 * @@see org.eclipse.gmf.runtime.common.core.command.ICommand#getAffectedObjects()
	 */
	public Collection getAffectedObjects() {
d111 1
a111 1
		return super.getAffectedObjects();
a116 1
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doExecute(org.eclipse.core.runtime.IProgressMonitor)
d118 3
a120 1
	protected CommandResult doExecute(IProgressMonitor progressMonitor) {
d141 1
a141 1
			return newOKCommandResult();
d153 1
a153 1
		return newOKCommandResult();
@


1.6
log
@bugzilla 117725 gmf-head sshaw 051123 Memory leak in DeferredLayoutCommand
@
text
@a25 1

d29 1
a29 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d86 1
a86 2
		super(DiagramResourceManager
			.getI18NString("Command.Deferred_Layout"), null); //$NON-NLS-1$
@


1.5
log
@Bugzilla#116030 gmf_head cmahoney 051121 Diagram ActionIds should be public
@
text
@d151 4
d156 2
a157 1
		return newOKCommandResult();
@


1.4
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d28 1
a29 1
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d30 1
a30 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d87 1
a87 1
		super(PresentationResourceManager
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d33 1
a33 1
import com.ibm.xtools.notation.View;
@

