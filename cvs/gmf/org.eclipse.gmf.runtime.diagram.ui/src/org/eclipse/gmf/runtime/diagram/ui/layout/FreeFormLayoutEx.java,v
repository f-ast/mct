head	1.2;
access;
symbols
	v20081023-2107:1.2
	v20081022-1925:1.2
	v20081022-1005:1.2
	v20081020-0700:1.2
	v20080917-1925:1.2
	v20080916-2008:1.2
	v20080911-1728:1.2
	v20080911-1506:1.2
	v20080910-1520:1.2
	v20080910-1510:1.2
	v20080903-1520:1.2
	v20080903-1510:1.2
	v20080813-1510:1.2
	v20080811-1546:1.2
	v20080731-1520:1.2
	v20080725-1738:1.2
	v20080723-2246:1.2
	v20080723-2232:1.2
	v20080723-1700:1.2
	v20080722-1827:1.2
	v20080718-1700:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.2
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080603-1553:1.2
	v20080527-1255:1.2
	v20080527-1151:1.1
	v20080516-1748:1.2
	v20080516-1143:1.2
	v20080512-1200:1.2
	v20080503-1740:1.2
	v20080501-2127:1.1
	v20080501-1739:1.2
	m20080429-1543:1.1
	v20080425-1959:1.2
	v20080417-1610:1.2
	v20080407-2250:1.2
	v20080407-0930:1.2
	v20080404-1111:1.2
	v20080328-1605:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20080201-2010:1.2
	v20080201-0201:1.1
	v20080118-1129:1.1
	v20080114-2222:1.1
	v20080114-1111:1.2
	v20080107-1111:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	v20071124-0000:1.1
	v20071112-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070915-0000:1.1
	v20070903-0000:1.2
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.6
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070614-1400:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070518-1300:1.1
	bugzilla111892_group_support:1.1.0.4
	Root_bugzilla111892_group_support:1.1
	v20070504-1000:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1
	v20070202-0200:1.1.2.2
	v20070119-1200:1.1.2.2
	v20070111-0800:1.1.2.2
	v20070105-1200:1.1.2.2
	v20070103-0300:1.1
	M4_20:1.1
	v20061218-1500:1.1.2.2
	v20061218-1200:1.1
	v20061214-0000:1.1
	R1_0_maintenance:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2007.07.31.19.40.20;	author crevells;	state Exp;
branches;
next	1.1;
commitid	3c6346af90234567;

1.1
date	2006.12.13.19.40.01;	author mmostafa;	state Exp;
branches
	1.1.2.1;
next	;
commitid	1efd458056fd4567;

1.1.2.1
date	2006.12.13.19.40.01;	author mmostafa;	state dead;
branches;
next	1.1.2.2;
commitid	6b67458057304567;

1.1.2.2
date	2006.12.13.19.40.47;	author mmostafa;	state Exp;
branches;
next	;
commitid	6b67458057304567;


desc
@@


1.2
log
@[198401] gmf_head crevells 070731 FreeFormLayoutEx needs to pass hint to getMinimumSize()
@
text
@/******************************************************************************
 * Copyright (c) 2006, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.layout;

import java.util.Iterator;

import org.eclipse.draw2d.FreeformLayout;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;

/**
 * Free form layout that respect the min and max size of the shape 
 *  
 * @@author mmostafa
 *
 */

public class FreeFormLayoutEx
    extends FreeformLayout {

    public void layout(IFigure parent) {
        Iterator children = parent.getChildren().iterator();
        Point offset = getOrigin(parent);
        IFigure f;
        while (children.hasNext()) {
            f = (IFigure)children.next();
            Rectangle bounds = (Rectangle)getConstraint(f);
            if (bounds == null) continue;

            int widthHint = bounds.width;
            int heightHint = bounds.height;
            if (widthHint == -1 || heightHint == -1) {
                Dimension _preferredSize = f.getPreferredSize(widthHint, heightHint);
                bounds = bounds.getCopy();
                if (widthHint == -1)
                    bounds.width = _preferredSize.width;
                if (heightHint == -1)
                    bounds.height = _preferredSize.height;
            }
            Dimension min = f.getMinimumSize(widthHint, heightHint);
            Dimension max = f.getMaximumSize();
            
            if (min.width>bounds.width)
                bounds.width = min.width;
            else if (max.width < bounds.width)
                bounds.width = max.width;
            
            if (min.height>bounds.height)
                bounds.height = min.height;
            else if (max.height < bounds.height)
                bounds.height = max.height;
            bounds = bounds.getTranslated(offset);
            f.setBounds(bounds);
        }
    }
    
    

}
@


1.1
log
@[167878]  gmf_head mmostafa 061213 Users can resize Figures to be smaller than the min size
@
text
@d2 1
a2 1
 * Copyright (c) 2006 IBM Corporation and others.
d41 4
a44 2
            if (bounds.width == -1 || bounds.height == -1) {
                Dimension _preferredSize = f.getPreferredSize(bounds.width, bounds.height);
d46 1
a46 1
                if (bounds.width == -1)
d48 1
a48 1
                if (bounds.height == -1)
d51 1
a51 1
            Dimension min = f.getMinimumSize();
@


1.1.2.1
log
@file FreeFormLayoutEx.java was added on branch R1_0_maintenance on 2006-12-13 19:40:43 +0000
@
text
@d1 68
@


1.1.2.2
log
@[167878]  gmf_R1_0_maintenace mmostafa 061213 Users can resize Figures to be smaller than the min size
@
text
@a0 68
/******************************************************************************
 * Copyright (c) 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.layout;

import java.util.Iterator;

import org.eclipse.draw2d.FreeformLayout;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;

/**
 * Free form layout that respect the min and max size of the shape 
 *  
 * @@author mmostafa
 *
 */

public class FreeFormLayoutEx
    extends FreeformLayout {

    public void layout(IFigure parent) {
        Iterator children = parent.getChildren().iterator();
        Point offset = getOrigin(parent);
        IFigure f;
        while (children.hasNext()) {
            f = (IFigure)children.next();
            Rectangle bounds = (Rectangle)getConstraint(f);
            if (bounds == null) continue;

            if (bounds.width == -1 || bounds.height == -1) {
                Dimension _preferredSize = f.getPreferredSize(bounds.width, bounds.height);
                bounds = bounds.getCopy();
                if (bounds.width == -1)
                    bounds.width = _preferredSize.width;
                if (bounds.height == -1)
                    bounds.height = _preferredSize.height;
            }
            Dimension min = f.getMinimumSize();
            Dimension max = f.getMaximumSize();
            
            if (min.width>bounds.width)
                bounds.width = min.width;
            else if (max.width < bounds.width)
                bounds.width = max.width;
            
            if (min.height>bounds.height)
                bounds.height = min.height;
            else if (max.height < bounds.height)
                bounds.height = max.height;
            bounds = bounds.getTranslated(offset);
            f.setBounds(bounds);
        }
    }
    
    

}
@


