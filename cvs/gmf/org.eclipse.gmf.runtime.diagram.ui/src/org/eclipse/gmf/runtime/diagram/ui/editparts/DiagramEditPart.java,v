head	1.16;
access;
symbols
	v20081023-2107:1.16
	v20081022-1925:1.16
	v20081022-1005:1.16
	v20081020-0700:1.16
	v20080917-1925:1.16
	v20080916-2008:1.16
	v20080911-1728:1.16
	v20080911-1506:1.16
	v20080910-1520:1.16
	v20080910-1510:1.16
	v20080903-1520:1.16
	v20080903-1510:1.16
	v20080813-1510:1.16
	v20080811-1546:1.16
	v20080731-1520:1.16
	v20080725-1738:1.16
	v20080723-2246:1.16
	v20080723-2232:1.16
	v20080723-1700:1.16
	v20080722-1827:1.16
	v20080718-1700:1.16
	v20080718-1731:1.16
	v20080716-1600:1.16
	v20080716-1642:1.16
	R2_1_maintenance:1.16.0.6
	Root_R2_1_maintenance:1.16
	R2_1_0:1.16
	v20080610-1132:1.16
	v20080603-1553:1.16
	v20080527-1255:1.16
	v20080527-1151:1.16
	v20080516-1748:1.16
	v20080516-1143:1.16
	v20080512-1200:1.16
	v20080503-1740:1.16
	v20080501-2127:1.16
	v20080501-1739:1.16
	m20080429-1543:1.16
	v20080425-1959:1.16
	v20080417-1610:1.16
	v20080407-2250:1.16
	v20080407-0930:1.16
	v20080404-1111:1.16
	v20080328-1605:1.16
	v20080322-0000:1.16
	v20080222-1200:1.16
	v20080201-2010:1.16
	v20080201-0201:1.16
	v20080118-1129:1.16
	v20080114-2222:1.16
	v20080114-1111:1.16
	v20080107-1111:1.16
	v20071222-1111:1.16
	v20071214-1111:1.16
	v20071130-1111:1.16
	v20071124-0000:1.16
	v20071112-0000:1.16
	v20071108-0000:1.16
	v20071003-0000:1.16
	v20070915-0000:1.16
	v20070903-0000:1.16
	v20070809-0000:1.16
	R2_0_maintenance:1.16.0.4
	R2_0:1.16
	R4_20:1.16
	v20070621-0000:1.16
	RC3_20:1.16
	v20070614-1400:1.16
	v20070608-1300:1.16
	v20070605-1400:1.16
	v20070601-1400:1.16
	v20070525-1500:1.16
	v20070518-1300:1.16
	bugzilla111892_group_support:1.16.0.2
	Root_bugzilla111892_group_support:1.16
	v20070504-1000:1.16
	v20070420-1000:1.16
	v20070413-1300:1.16
	v20070330-1300:1.16
	v20060330-1300:1.16
	v20070322-1100:1.16
	v20060316-0600:1.16
	v20070221-1500:1.16
	v20070208-1800:1.16
	v20070202-0200:1.12.2.3
	v20070119-1200:1.12.2.3
	v20070111-0800:1.12.2.3
	v20070105-1200:1.12.2.3
	v20070103-0300:1.15
	M4_20:1.15
	v20061218-1500:1.12.2.3
	v20061218-1200:1.15
	v20061214-0000:1.15
	M3_20:1.14
	v20061117-0800:1.14
	v20061027-1200:1.12.2.2
	v20061013-1330:1.14
	v20061012-1100:1.12.2.2
	v20060925-1700:1.12.2.1
	v20060919-0800:1.12.2.1
	v20060907-1100:1.12.2.1
	M1_20:1.12
	v20060831-1500:1.12.2.1
	v20060824-1600:1.12.2.1
	v20060817-1500:1.12.2.1
	v20060810-1700:1.12.2.1
	v20060803-1200:1.12.2.1
	v20060728-0500:1.12.2.1
	v20060721-1130:1.12.2.1
	v20060713-1700:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20060627-1200:1.12
	v20060616-1400:1.12
	v20060616-1200:1.12
	v20060609-1400:1.12
	v20060531-1730:1.12
	v20060530-1930:1.12
	v20060526-1200:1.12
	v20060519-0800:1.12
	v20060512-1000:1.12
	I20060512-1000:1.12
	I20060505-1400:1.12
	I20060428-1300:1.12
	I20060424-0500:1.12
	I20060424-0300:1.11
	M6_10:1.11
	I20060407-1200:1.11
	I20060331-1000:1.11
	I20060324-0300:1.11
	I20060317-1300:1.11
	I20060317-1200:1.11
	I20060316-1300:1.11
	I20060309-1300:1.11
	M5_10:1.11
	S20060303-1600:1.11
	I20060227-1730:1.10
	I20060216-1945:1.10
	I20060210-1715:1.10
	I20060209-1815:1.10
	I20060203-0830:1.10
	I20060202-1415:1.10
	I20060129-1145:1.10
	I20060127-0900:1.9
	I20060120-1530:1.8
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051208-2000:1.7
	I20051201-1800:1.7
	I20051124-2000:1.7
	M3_10:1.7
	I20051118-1245:1.7
	I20051111-1800:1.7
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;


1.16
date	2007.01.16.14.53.59;	author mmostafa;	state Exp;
branches;
next	1.15;
commitid	78d445ace7064567;

1.15
date	2006.12.13.19.39.54;	author mmostafa;	state Exp;
branches;
next	1.14;
commitid	1efd458056fd4567;

1.14
date	2006.10.11.20.50.29;	author mmostafa;	state Exp;
branches;
next	1.13;

1.13
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.21.21.24.49;	author mmostafa;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2006.02.28.02.32.25;	author cmahoney;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.27.20.04.24;	author sshaw;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.20.22.07.28;	author cmahoney;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.16.19.48.39;	author sshaw;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.11.22.33.13;	author mmostafa;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.08.19.36.08;	author mmostafa;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.09.19.25.32;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.36;	author sshaw;	state Exp;
branches;
next	;

1.12.2.1
date	2006.07.14.14.31.01;	author sshaw;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2006.10.11.20.45.54;	author mmostafa;	state Exp;
branches;
next	1.12.2.3;

1.12.2.3
date	2006.12.13.19.41.21;	author mmostafa;	state Exp;
branches;
next	;
commitid	6b67458057304567;


desc
@@


1.16
log
@[112799]  gmf_head mmostafa 070116 Shapes do not snap to grid when dragged over other shapes
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.LayoutAnimator;
import org.eclipse.draw2d.LayoutListener;
import org.eclipse.draw2d.TreeSearch;
import org.eclipse.draw2d.Viewport;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.DragTracker;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.LayerConstants;
import org.eclipse.gef.Request;
import org.eclipse.gef.editpolicies.RootComponentEditPolicy;
import org.eclipse.gef.editpolicies.SnapFeedbackPolicy;
import org.eclipse.gef.requests.SelectionRequest;
import org.eclipse.gef.tools.DeselectAllTracker;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ContainerEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ContainerNodeEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DiagramDragDropEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DiagramPopupBarEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemsAwareFreeFormLayer;
import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ISurfaceEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.figures.PageBreaksFigure;
import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageInfoHelper;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
import org.eclipse.gmf.runtime.diagram.ui.internal.tools.RubberbandDragTracker;
import org.eclipse.gmf.runtime.diagram.ui.layout.FreeFormLayoutEx;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Routing;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.widgets.Scrollable;

/**
 * Controller for the diagram 
 *  
 * @@author jcorchis
 *
 */

public class DiagramEditPart
	extends GraphicalEditPart
	implements LayerConstants, ISurfaceEditPart {
	private boolean shouldUpdatePageBreakLocation = false;
	private boolean isSupportingViewActions = true;
    private boolean isActivatingDiagram = false;
	
	/**
	 * construcotr
	 * @@param diagramView the view controlled by this edit part
	 */
	public DiagramEditPart(View diagramView) {
		super(diagramView);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#createDefaultEditPolicies()
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(
			EditPolicyRoles.CREATION_ROLE,
			new CreationEditPolicy());
		installEditPolicy(EditPolicy.CONTAINER_ROLE, new ContainerEditPolicy());
		installEditPolicy(
			EditPolicy.COMPONENT_ROLE,
			new RootComponentEditPolicy());
		installEditPolicy(EditPolicy.LAYOUT_ROLE, new XYLayoutEditPolicy());
		installEditPolicy(
			EditPolicyRoles.DRAG_DROP_ROLE,
			new DiagramDragDropEditPolicy());
		installEditPolicy(
			EditPolicy.GRAPHICAL_NODE_ROLE,
			new ContainerNodeEditPolicy());
		installEditPolicy(EditPolicyRoles.SNAP_FEEDBACK_ROLE,
				new SnapFeedbackPolicy());
		installEditPolicy(EditPolicyRoles.POPUPBAR_ROLE,
			new DiagramPopupBarEditPolicy());
	}
	
	/**
	 * @@author mmostafa
	 * PageBreaksLayoutListener Listens to post layout so it can update the page breaks  
	 */
	private class PageBreaksLayoutListener extends LayoutListener.Stub {

		public void postLayout(IFigure container) {
			super.postLayout(container);
			updatePageBreaksLocation();
		}
		
		
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.editparts.AbstractGraphicalEditPart#createFigure()
	 */
	protected IFigure createFigure() {

		// Override the containsPoint and findFigureAt methods
		// to treat this layer (Primary Layer) as if it were opaque.

		// This is for the grid layer so that it can be seen beneath the
		// figures.
		IFigure f = new BorderItemsAwareFreeFormLayer() {	
			/* (non-Javadoc)
			 * @@see org.eclipse.draw2d.Layer#containsPoint(int, int)
			 */
			public boolean containsPoint(int x, int y) {
				return getBounds().contains(x, y);
			}

			/* (non-Javadoc)
			 * @@see org.eclipse.draw2d.Layer#findFigureAt(int, int, org.eclipse.draw2d.TreeSearch)
			 */
			public IFigure findFigureAt(int x, int y, TreeSearch search) {
				if (!isEnabled())
					return null;
				if (!containsPoint(x, y))
					return null;
				if (search.prune(this))
					return null;
				IFigure child = findDescendantAtExcluding(x, y, search);
				if (child != null)
					return child;
				if (search.accept(this))
					return this;
				return null;
			}

			/* (non-Javadoc)
			 * @@see org.eclipse.draw2d.Figure#validate()
			 */
			public void validate() {				
				super.validate();
				if (shouldUpdatePageBreakLocation){
					shouldUpdatePageBreakLocation = false;
					updatePageBreaksLocation();
				}
			}
		};
		f.setLayoutManager(new FreeFormLayoutEx());
		f.addLayoutListener(LayoutAnimator.getDefault());
		f.addLayoutListener(new PageBreaksLayoutListener());
		return f;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#getDiagramView()
	 */
	public Diagram getDiagramView() {
		return (Diagram)getModel();
	}

	public DragTracker getDragTracker(Request req) {
		if (req instanceof SelectionRequest
			&& ((SelectionRequest) req).getLastButtonPressed() == 3)
			return new DeselectAllTracker(this);
		return new RubberbandDragTracker();
	}

	public IFigure getLayer(Object layer) {
		return super.getLayer(layer);
	}

	/**
	 * Return the Scrollable Control of this edit part's Viewer
	 * @@return <code>Scrollable</code>
	 */
	public Scrollable getScrollableControl() {
		return (Scrollable) getViewer().getControl();
	}

	/**
	 * getter for this Edit Part's figure <code>Viewport</code>
	 * @@return the view port
	 */
	public Viewport getViewport() {
		IFigure fig = getFigure().getParent();
		while (fig != null) {
			if (fig instanceof Viewport)
				return (Viewport) fig;
			fig = fig.getParent();
		}
		return null;
	}

	/**
	 * getter for the connection layer
	 * @@return the connection layer
	 */
	protected IFigure getConnectionLayer() {
		return getLayer(LayerConstants.CONNECTION_LAYER);
	}

	/**
	 * returns all connections owned by this diagram, the returned list is a
	 * list of <code>ConnectionEditPart</code>s
	 * 
	 * @@return list of <code>ConnectionEditPart</code>s
	 */
	public List getConnections() {
		Iterator views = getDiagramView().getEdges().iterator(); 

		Map registry = getViewer().getEditPartRegistry();
		List connections = new ArrayList();
		while (views.hasNext()) {
			Object connectionEP = registry.get(views.next());
			if (connectionEP != null)
				connections.add(connectionEP);
		}
		return connections;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ISurfaceEditPart#getPrimaryEditParts()
	 */
	public List getPrimaryEditParts() {
		List connections = getConnections();
		List shapes = getChildren();
		if (connections.size() > 0 || shapes.size() > 0) {
			List myChildren = new ArrayList();
			myChildren.addAll(shapes);
			myChildren.addAll(connections);
			return myChildren;
		}
		return Collections.EMPTY_LIST;
	}

	/**
	 * Adds a figure listener to each figure that is added to the diagram so,
	 * the the page breaks can be notified of changes.
	 * @@see org.eclipse.gef.editparts.AbstractEditPart#addChildVisual(EditPart, int)
	 */
	protected void addChildVisual(EditPart childEditPart, int index) {
		final IFigure child = ((GraphicalEditPart) childEditPart).getFigure();
		getContentPane().add(child, index);
	}
	
	/**
	 * Updates the Viewer's preference store page breaks location.
	 */
	protected void updatePageBreaksLocation() {
		if ( getParent() == null || getRoot() == null ) {
			return;
		}
		// do not update unless we really need to
		IPreferenceStore preferenceStore = ((DiagramRootEditPart) getRoot()).getWorkspaceViewerPreferences();
		// do not update unless we really need to
		if (preferenceStore == null ||
			preferenceStore.getBoolean(WorkspaceViewerProperties.VIEWPAGEBREAKS)==false)
			return;

		((DiagramRootEditPart) getRoot())
				.getPageBreakEditPart().resize(getChildrenBounds());
	}

	/**
	 * Returns the bounds of the <code>PRINTABLE_LAYERS</code>
	 * @@return rectangle bounds of the diagram's children
	 */
	public Rectangle getChildrenBounds() {
		return PageInfoHelper.getChildrenBounds(this, PageBreaksFigure.class);
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#getAdapter(java.lang.Class)
	 */
	public Object getAdapter(Class adapter) {

		if (adapter == Routing.class) {
			IPreferenceStore store = (IPreferenceStore)getDiagramPreferencesHint().getPreferenceStore();
			Routing routingVal = Routing.get(store.getInt(IPreferenceConstants.PREF_LINE_STYLE));
			return routingVal;	
		}

		return super.getAdapter(adapter);
	}
	
	/**
	 * gets a list of all children that could affect the zoom capability
	 * @@return list of <code>View</code>s
	 */
	public List getChildrenAffectingZoom(){
		return new ArrayList(getChildren());
	}
	
	/**
	 * Refreshes the page breaks.
	 */
	public void refreshPageBreaks() {
		if ( getRoot() == null ) {
			return;
		}
		
		((DiagramRootEditPart)getRoot()).refreshPageBreaks();
	}
	
	
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ISurfaceEditPart#isSupportingViewActions()
	 */
	public boolean isSupportingViewActions(){
		return this.isSupportingViewActions;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ISurfaceEditPart#setIsSupportingViewActions(boolean)
	 */
	public void setIsSupportingViewActions(boolean supportsViewActions){
		this.isSupportingViewActions = supportsViewActions;
	}

    
    /**
     * checks if the Diagram is still in the process of activating it self
     * @@return true if activating; false if the activation process is finished
     */
    public boolean isActivatingDiagram() {
        return isActivatingDiagram;
    }

    public void activate() {
        isActivatingDiagram = true;
        try {
	        super.activate();
	    }finally{
        	isActivatingDiagram = false;
        }
    }
}
@


1.15
log
@[167878]  gmf_head mmostafa 061213 Users can resize Figures to be smaller than the min size
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
a25 1
import org.eclipse.gef.CompoundSnapToHelper;
a30 3
import org.eclipse.gef.SnapToGeometry;
import org.eclipse.gef.SnapToGrid;
import org.eclipse.gef.SnapToHelper;
a33 1
import org.eclipse.gef.rulers.RulerProvider;
a46 1
import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.SnapToGuidesEx;
d293 1
a293 24
		if (adapter == SnapToHelper.class) {

			List snapStrategies = new ArrayList();

			Boolean val = (Boolean)getViewer().getProperty(RulerProvider.PROPERTY_RULER_VISIBILITY);
			if (val != null && val.booleanValue())
				snapStrategies.add(new SnapToGuidesEx(this));

			val = (Boolean)getViewer().getProperty(SnapToGeometry.PROPERTY_SNAP_ENABLED);
			if (val != null && val.booleanValue())
				snapStrategies.add(new SnapToGrid(this));

			if (snapStrategies.size() == 0)
				return null;

			if (snapStrategies.size() == 1)
				return snapStrategies.get(0);

			SnapToHelper ss[] = new SnapToHelper[snapStrategies.size()];
			for (int i = 0; i < snapStrategies.size(); i++)
				ss[i] = (SnapToHelper)snapStrategies.get(i);
			return new CompoundSnapToHelper(ss);
		}
		else if (adapter == Routing.class) {
@


1.14
log
@[160534] gmf_R1_0_maintenace mmostafa 061011  Print/PrintView does not work with bordered items
@
text
@a19 1
import org.eclipse.draw2d.FreeformLayout;
d54 1
d170 1
a170 1
		f.setLayoutManager(new FreeformLayout());
@


1.13
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@a19 1
import org.eclipse.draw2d.FreeformLayer;
d48 1
d133 1
a133 1
		IFigure f = new FreeformLayer() {	
@


1.12
log
@bugzilla 138064 gmf-head mmostafa 060421 Redo is broken on canonically created elements
@
text
@d55 1
d57 1
d322 5
@


1.12.2.1
log
@bugzilla 145336 gmf_R1_0_maintenance sshaw 060713 Creating connections with Rectilinear routing doesn't respect initial anchor feedback
@
text
@a54 1
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
a55 1
import org.eclipse.gmf.runtime.notation.Routing;
a319 5
		else if (adapter == Routing.class) {
			IPreferenceStore store = (IPreferenceStore)getDiagramPreferencesHint().getPreferenceStore();
			Routing routingVal = Routing.get(store.getInt(IPreferenceConstants.PREF_LINE_STYLE));
			return routingVal;	
		}
@


1.12.2.2
log
@[160534] gmf_head mmostafa 061011  Print/PrintView does not work with bordered items
@
text
@d20 1
a48 1
import org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemsAwareFreeFormLayer;
d133 1
a133 1
		IFigure f = new BorderItemsAwareFreeFormLayer() {	
@


1.12.2.3
log
@[167878]  gmf_R1_0_maintenace mmostafa 061213 Users can resize Figures to be smaller than the min size
@
text
@d20 1
a54 1
import org.eclipse.gmf.runtime.diagram.ui.layout.FreeFormLayoutEx;
d170 1
a170 1
		f.setLayoutManager(new FreeFormLayoutEx());
@


1.11
log
@Bugzilla#109422 gmf_head cmahoney 060227 Removing deprecated API
@
text
@d72 1
d358 18
@


1.10
log
@bugzilla 125158 gmf-head sshaw 060126 Migrate GMF animation support to use GEF 3.2 infrastructure for animation
@
text
@a254 4
	public Map getAppearancePropertiesMap() {
		return Collections.EMPTY_MAP;
	}

@


1.9
log
@Bugzilla#123778 gmf_head cmahoney 060120 CopyToImageAction support in GMF
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
d23 1
a54 1
import org.eclipse.gmf.runtime.draw2d.ui.figures.AnimatableLayoutListener;
d168 1
a168 1
		f.addLayoutListener(new AnimatableLayoutListener());
@


1.8
log
@bugzilla 112992 gmf-head sshaw 060116 Recalculated page-breaks state of a diagram is not persisted
@
text
@d240 2
a241 3
	/**
	 * @@return List of primary edit parts.  If there are none then it returns
	 * a Collections.EMPTY_LIST, which is immutable
@


1.7
log
@bugzilla  116064 : gmf-head mmostafa 051111 :  Page Breaks don't get updated
@
text
@a53 1
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
a285 12
		
		Rectangle r =
			((DiagramRootEditPart) getRoot())
				.getPageBreakEditPart()
				.getFigure()
				.getBounds();
		((DiagramGraphicalViewer) getViewer())
			.getWorkspaceViewerPreferenceStore()
			.setValue(WorkspaceViewerProperties.PAGEBREAK_X, r.x);
		((DiagramGraphicalViewer) getViewer())
			.getWorkspaceViewerPreferenceStore()
			.setValue(WorkspaceViewerProperties.PAGEBREAK_Y, r.y);
d317 1
a317 1
				return (SnapToHelper)snapStrategies.get(0);
@


1.6
log
@Bugzilla 115517 : gmf-head mmostafa 051108 UpdatePagebreaks is being called although PageBreaks were turned off
@
text
@a48 1
import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.PageBreakEditPart;
d279 4
a282 3
		PageBreakEditPart pagebreakEditpart = ((DiagramRootEditPart)getRoot()).getPageBreakEditPart();
		if (pagebreakEditpart == null ||
			pagebreakEditpart.getFigure().isVisible())
d284 4
a287 1
		pagebreakEditpart.resize(getChildrenBounds());
@


1.5
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a13 2
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
a19 1
import org.eclipse.draw2d.FigureListener;
d23 1
d49 1
d59 1
a71 1
	
a72 1
	
d107 14
d157 1
a157 2
			
			
d171 1
a171 1

a269 19

		// Fired when figures are added or moved on the diagram			
		child.addFigureListener(new FigureListener() {
			public void figureMoved(IFigure source) {
				updatePageBreaksLocation();
			}
		});

		// Fired when figures are to be deleted on the diagram
		child.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {
				String pName = evt.getPropertyName();
				Object newValue = evt.getNewValue();
				if (pName == "parent" && newValue == null) { //$NON-NLS-1$
					shouldUpdatePageBreakLocation = true;
					//updatePageBreaksLocation();
				}
			}
		});
d279 4
a282 2

		if (((DiagramRootEditPart) getRoot()).getWorkspaceViewerPreferences() == null)
d284 1
a284 6

		((DiagramRootEditPart) getRoot())
		.getPageBreakEditPart()
		.resize(
		getChildrenBounds());
		
a371 1

@


1.4
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a42 2
import org.eclipse.swt.widgets.Scrollable;

a45 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DiagramActionBarEditPolicy;
d47 1
d60 1
d106 2
a107 2
		installEditPolicy(EditPolicyRoles.ACTIONBAR_ROLE,
			new DiagramActionBarEditPolicy());
d213 3
a215 2
	 * returns all connectors owned by this diagram, the returned list is 
	 * a list of <code>ConnectionEditPart</code>s
d218 1
a218 1
	public List getConnectors() {
d222 1
a222 1
		List connectors = new ArrayList();
d224 3
a226 3
			Object connectorEP = registry.get(views.next());
			if (connectorEP != null)
				connectors.add(connectorEP);
d228 1
a228 1
		return connectors;
d236 1
a236 1
		List connectors = getConnectors();
d238 1
a238 1
		if (connectors.size() > 0 || shapes.size() > 0) {
d241 1
a241 1
			myChildren.addAll(connectors);
a382 9
	
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.editparts.AbstractEditPart#refreshChildren()
	 */
	protected void refreshChildren() {
		// TODO Auto-generated method stub
		super.refreshChildren();
	}
@


1.3
log
@bugzilla 109197 rmp-head sshaw 050909 Create suite of JUnits to cover Canonical EditPolicy infrastructure
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d213 2
a214 2
	 * a list of <code>Edge</code>s
	 * @@return list of <code>Edge</code>s
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d58 2
a59 2
import com.ibm.xtools.notation.Diagram;
import com.ibm.xtools.notation.View;
@

