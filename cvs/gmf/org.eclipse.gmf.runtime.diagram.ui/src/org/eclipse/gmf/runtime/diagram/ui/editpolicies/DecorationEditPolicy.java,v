head	1.7;
access;
symbols
	v20081023-2107:1.7
	v20081022-1925:1.7
	v20081022-1005:1.7
	v20081020-0700:1.7
	v20080917-1925:1.7
	v20080916-2008:1.7
	v20080911-1728:1.7
	v20080911-1506:1.7
	v20080910-1520:1.7
	v20080910-1510:1.7
	v20080903-1520:1.7
	v20080903-1510:1.7
	v20080813-1510:1.7
	v20080811-1546:1.7
	v20080731-1520:1.7
	v20080725-1738:1.7
	v20080723-2246:1.7
	v20080723-2232:1.7
	v20080723-1700:1.7
	v20080722-1827:1.7
	v20080718-1700:1.7
	v20080718-1731:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.4
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080610-1132:1.7
	v20080603-1553:1.7
	v20080527-1255:1.7
	v20080527-1151:1.7
	v20080516-1748:1.7
	v20080516-1143:1.7
	v20080512-1200:1.7
	v20080503-1740:1.7
	v20080501-2127:1.7
	v20080501-1739:1.7
	m20080429-1543:1.7
	v20080425-1959:1.7
	v20080417-1610:1.7
	v20080407-2250:1.7
	v20080407-0930:1.7
	v20080404-1111:1.7
	v20080328-1605:1.7
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20080201-2010:1.7
	v20080201-0201:1.7
	v20080118-1129:1.7
	v20080114-2222:1.7
	v20080114-1111:1.7
	v20080107-1111:1.7
	v20071222-1111:1.7
	v20071214-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.7
	v20071112-0000:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070518-1300:1.6
	bugzilla111892_group_support:1.6.0.4
	Root_bugzilla111892_group_support:1.6
	v20070504-1000:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070202-0200:1.6
	v20070119-1200:1.6
	v20070111-0800:1.6
	v20070105-1200:1.6
	v20070103-0300:1.6
	M4_20:1.6
	v20061218-1500:1.6
	v20061218-1200:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061027-1200:1.6
	v20061013-1330:1.6
	v20061012-1100:1.6
	v20060925-1700:1.6
	v20060919-0800:1.6
	v20060907-1100:1.6
	M1_20:1.6
	v20060831-1500:1.6
	v20060824-1600:1.6
	v20060817-1500:1.6
	v20060810-1700:1.6
	v20060803-1200:1.6
	v20060728-0500:1.6
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-0800:1.6
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.2;
locks; strict;
comment	@# @;


1.7
date	2007.06.19.15.56.06;	author crevells;	state Exp;
branches;
next	1.6;
commitid	3c324677fc964567;

1.6
date	2006.05.16.18.30.54;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.11.13.59.43;	author cmahoney;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.04.21.27.49;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.02.23.30.16;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.06;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.37;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[193190] gmf_head crevells 070619 DecoratorTarget leaks memory
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.eclipse.core.runtime.Assert;
import org.eclipse.draw2d.Connection;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Locator;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.services.decorator.Decoration;
import org.eclipse.gmf.runtime.diagram.ui.internal.services.decorator.DecoratorService;
import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoration;
import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecorator;
import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget;
import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget.Direction;
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ImageFigureEx;
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.OnConnectionLocator;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
import org.eclipse.gmf.runtime.gef.ui.internal.editpolicies.GraphicalEditPolicyEx;
import org.eclipse.gmf.runtime.gef.ui.internal.figures.RelativeToBorderLocator;
import org.eclipse.swt.graphics.Image;

/**
 * This editpolicy is responsible for adding the decorations from the
 * <code>DecoratorService</code>. The decorations are added to a different
 * layer so that they have the option of being printed or not.
 * 
 * @@author cmahoney
 */
public class DecorationEditPolicy
	extends GraphicalEditPolicyEx {

	/**
	 * The decoratorTarget object to be passed to the service. This serves as a
	 * wrapper around this editpolicy.
	 */
	public class DecoratorTarget
		implements IDecoratorTarget {

		/*
		 * (non-Javadoc)
		 * 
		 * @@see org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget#installDecorator(java.lang.Object,
		 *      org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecorator)
		 */
		public void installDecorator(Object key, IDecorator decorator) {
			Assert.isNotNull(key, "Decorators must be installed with keys"); //$NON-NLS-1$
			decorators.put(key, decorator);
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @@see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
		 */
		public Object getAdapter(Class adapter) {
			return getHost().getAdapter(adapter);
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @@see org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget#createShapeDecoration(null,
		 *      int, int, boolean)
		 */
		public IDecoration addShapeDecoration(Image image, Direction direction,
				int margin, boolean isVolatile) {

			IMapMode mm = MapModeUtil.getMapMode(((GraphicalEditPart)getHost()).getFigure());
			ImageFigureEx figure = new ImageFigureEx();
			figure.setImage(image);
			figure.setSize(mm.DPtoLP(image.getBounds().width), mm
				.DPtoLP(image.getBounds().height));

			return addShapeDecoration(figure, direction, margin, isVolatile);
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @@see org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget#createConnectionDecoration(null,
		 *      int, boolean)
		 */
		public IDecoration addConnectionDecoration(Image image,
				int percentageFromSource, boolean isVolatile) {

			IMapMode mm = MapModeUtil.getMapMode(((GraphicalEditPart)getHost()).getFigure());
			ImageFigureEx figure = new ImageFigureEx();
			figure.setImage(image);
			figure.setSize(mm.DPtoLP(image.getBounds().width), mm
				.DPtoLP(image.getBounds().height));

			return addConnectionDecoration(figure, percentageFromSource,
				isVolatile);
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @@see org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget#deleteDecoration(org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoration)
		 */
		public void removeDecoration(IDecoration decoration) {
			if (decoration instanceof IFigure) {
				((IFigure) decoration).getParent().remove((IFigure) decoration);
			}
            GraphicalEditPart ownerEditPart = (GraphicalEditPart) getAdapter(GraphicalEditPart.class);
            ownerEditPart.getViewer().getVisualPartMap().remove(decoration);           
		}

		public IDecoration addShapeDecoration(IFigure figure,
				Direction direction, int margin, boolean isVolatile) {

			return addDecoration(figure, new RelativeToBorderLocator(
				((GraphicalEditPart) getAdapter(GraphicalEditPart.class))
					.getFigure(), getPositionConstant(direction), margin),
				isVolatile);
		}

		public IDecoration addConnectionDecoration(IFigure figure,
				int percentageFromSource, boolean isVolatile) {

			IFigure hostFigure = ((GraphicalEditPart) getAdapter(GraphicalEditPart.class))
				.getFigure();
			Assert.isTrue(hostFigure instanceof Connection);

			return addDecoration(figure, new OnConnectionLocator(
				(Connection) hostFigure, percentageFromSource), isVolatile);
		}

		public IDecoration addDecoration(IFigure figure, Locator locator,
				boolean isVolatile) {

			Decoration decoration = new Decoration();
			decoration.add(figure);
			decoration.setSize(figure.getSize());
            
            GraphicalEditPart ownerEditPart = (GraphicalEditPart) getAdapter(GraphicalEditPart.class);
            decoration.setOwnerFigure(ownerEditPart.getFigure());
			decoration.setLocator(locator);
            
            // Register this figure with it's owner editpart so mouse events
            // will be propagated to it's host.
            ownerEditPart.getViewer().getVisualPartMap().put(decoration,
                ownerEditPart);

			IFigure pane = getLayer(isVolatile ? DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER
				: DiagramRootEditPart.DECORATION_PRINTABLE_LAYER);

			pane.add(decoration);
			return decoration;
		}
	}

	/** the decorators */
	protected Map decorators;

	/**
	 * Updates all the decorations for the host editpart by calling refresh() on
	 * each of the decorators installed on this editpart. If this is the first
	 * time refresh() is called, then the <code>DecorationService</code> is
	 * first called to create the decorators.
	 * 
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.editpolicies.GraphicalEditPolicyEx#refresh()
	 */
	public void refresh() {
		if (decorators == null) {
			decorators = new HashMap();
			DecoratorService.getInstance().createDecorators(
				new DecoratorTarget());
		}
		for (Iterator iter = decorators.values().iterator(); iter.hasNext();) {
			IDecorator decorator = (IDecorator) iter.next();
			decorator.refresh();
		}
	}

	/**
	 * Activates all the decorators.
	 * 
	 * @@see org.eclipse.gef.EditPolicy#activate()
	 */
	public void activate() {
		if (decorators == null) {
			decorators = new HashMap();
			DecoratorService.getInstance().createDecorators(
				new DecoratorTarget());
		}	
		if (decorators != null) {
			for (Iterator iter = decorators.values().iterator(); iter.hasNext();) {
				IDecorator decorator = (IDecorator) iter.next();
				decorator.activate();
			}
		}
	}

	/**
	 * Deactivates all the decorators.
	 * 
	 * @@see org.eclipse.gef.EditPolicy#deactivate()
	 */
	public void deactivate() {
		if (decorators != null) {
			for (Iterator iter = decorators.values().iterator(); iter.hasNext();) {
				IDecorator decorator = (IDecorator) iter.next();
				decorator.deactivate();
			}
		}
	}

	/**
	 * Returns the decorators
	 * 
	 * @@return the decorators.
	 */
	protected final Map getDecorators() {
		return this.decorators;
	}

	/**
	 * Sets the decorators
	 * 
	 * @@param decorators
	 *            The decorators to set.
	 */
	protected final void setDecorators(Map decorators) {
		this.decorators = decorators;
	}

	/**
	 * Converts the direction to an int as defined in PositionConstant.
	 * 
	 * @@param direction
	 * @@return the int as defined in PositionConstant
	 */
	public int getPositionConstant(Direction direction) {

		if (direction == Direction.CENTER) {
			return PositionConstants.CENTER;
		} else

		if (direction == Direction.NORTH) {
			return PositionConstants.NORTH;
		} else

		if (direction == Direction.SOUTH) {
			return PositionConstants.SOUTH;
		} else

		if (direction == Direction.WEST) {
			return PositionConstants.WEST;
		} else

		if (direction == Direction.EAST) {
			return PositionConstants.EAST;
		} else

		if (direction == Direction.NORTH_EAST) {
			return PositionConstants.NORTH_EAST;
		} else

		if (direction == Direction.NORTH_WEST) {
			return PositionConstants.NORTH_WEST;
		} else

		if (direction == Direction.SOUTH_EAST) {
			return PositionConstants.SOUTH_EAST;
		} else

		if (direction == Direction.SOUTH_WEST) {
			return PositionConstants.SOUTH_WEST;
		}

		return PositionConstants.CENTER;
	}
}@


1.6
log
@Bugzilla#139734 gmf_head cmahoney 050516 Decoration no longer supports tooltips
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004, 2006 IBM Corporation and others.
d18 1
a36 1
import org.eclipse.jface.util.Assert;
d122 2
@


1.5
log
@Bugzilla#135827 gmf_head cmahoney 060411 addShapeDecoration(IFigure figure, Direction direction, int margin, boolean isVolatile) must be in IDecoratorTarget
@
text
@d150 3
a152 3
			decoration
				.setOwnerFigure(((GraphicalEditPart) getAdapter(GraphicalEditPart.class))
					.getFigure());
d154 5
@


1.4
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
a25 1
import org.eclipse.gmf.runtime.diagram.ui.internal.services.decorator.IDecoratorTargetBase.Direction;
d29 1
a123 20
		/**
		 * Adds a figure as a decoration on a shape.
		 * 
		 * @@param figure
		 *            the figure to be used as the decoration
		 * @@param direction
		 *            The direction relative to the shape to place the
		 *            decoration.
		 * @@param margin
		 *            The margin is the space, in himetric units, between the
		 *            shape's edge and the decoration. A positive margin will
		 *            place the figure outside the shape, a negative margin will
		 *            place the decoration inside the shape.
		 * @@param isVolatile
		 *            True if this decoration is volatile (i.e. not to be
		 *            included in the printed output of a diagram); false
		 *            otherwise.
		 * @@return The decoration object, which is needed to later remove the
		 *         decoration.
		 */
a132 16
		/**
		 * Adds a figure as a decoration on a connection.
		 * 
		 * @@param figure
		 *            the figure to be used as the decoration
		 * @@param percentageFromSource
		 *            The percentage of the connection length away from the
		 *            source end (range is from 0 to 100) where the decoration
		 *            should be positioned.
		 * @@param isVolatile
		 *            True if this decoration is volatile (i.e. not to be
		 *            included in the printed output of a diagram); false
		 *            otherwise.
		 * @@return The decoration object, which is needed to later remove the
		 *         decoration.
		 */
a143 14
		/**
		 * Adds a figure as a decoration on a shape or conenction.
		 * 
		 * @@param figure
		 *            the figure to be used as the decoration
		 * @@param locator
		 *            The locator to be used to position the decoration
		 * @@param isVolatile
		 *            True if this decoration is volatile (i.e. not to be
		 *            included in the printed output of a diagram); false
		 *            otherwise.
		 * @@return The decoration object, which is needed to later remove the
		 *         decoration.
		 */
@


1.3
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a22 3
import org.eclipse.jface.util.Assert;
import org.eclipse.swt.graphics.Image;

d32 2
a33 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d36 2
d85 1
d88 1
a88 1
			figure.setSize(MapMode.DPtoLP(image.getBounds().width), MapMode
d103 1
d106 1
a106 1
			figure.setSize(MapMode.DPtoLP(image.getBounds().width), MapMode
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d157 1
a157 1
		 *            The percentage of the connector length away from the
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

