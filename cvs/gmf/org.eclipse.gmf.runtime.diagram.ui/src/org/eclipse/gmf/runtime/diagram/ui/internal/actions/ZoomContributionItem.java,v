head	1.8;
access;
symbols
	v20081023-2107:1.8
	v20081022-1925:1.8
	v20081022-1005:1.8
	v20081020-0700:1.8
	v20080917-1925:1.8
	v20080916-2008:1.8
	v20080911-1728:1.8
	v20080911-1506:1.8
	v20080910-1520:1.8
	v20080910-1510:1.8
	v20080903-1520:1.8
	v20080903-1510:1.8
	v20080813-1510:1.8
	v20080811-1546:1.8
	v20080731-1520:1.8
	v20080725-1738:1.8
	v20080723-2246:1.8
	v20080723-2232:1.8
	v20080723-1700:1.8
	v20080722-1827:1.8
	v20080718-1700:1.8
	v20080718-1731:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080527-1255:1.8
	v20080527-1151:1.7
	v20080516-1748:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080503-1740:1.8
	v20080501-2127:1.7
	v20080501-1739:1.8
	m20080429-1543:1.7
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080407-2250:1.8
	v20080407-0930:1.8
	v20080404-1111:1.8
	v20080328-1605:1.8
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20080201-2010:1.8
	v20080201-0201:1.7
	v20080118-1129:1.7
	v20080114-2222:1.7
	v20080114-1111:1.7
	v20080107-1111:1.7
	v20071222-1111:1.7
	v20071214-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.7
	v20071112-0000:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.6
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070518-1300:1.7
	bugzilla111892_group_support:1.7.0.4
	Root_bugzilla111892_group_support:1.7
	v20070504-1000:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.7
	v20070119-1200:1.7
	v20070111-0800:1.7
	v20070105-1200:1.7
	v20070103-0300:1.7
	M4_20:1.7
	v20061218-1500:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.7
	v20061013-1330:1.7
	v20061012-1100:1.7
	v20060925-1700:1.7
	v20060919-0800:1.7
	v20060907-1100:1.7
	M1_20:1.7
	v20060831-1500:1.7
	v20060824-1600:1.7
	v20060817-1500:1.7
	v20060810-1700:1.7
	v20060803-1200:1.7
	v20060728-0500:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-0800:1.7
	v20060512-1000:1.7
	I20060512-1000:1.7
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.7
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.7
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.7
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.7
	I20060216-1945:1.7
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.7
	I20060202-1415:1.7
	I20060129-1145:1.7
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051208-2000:1.7
	I20051201-1800:1.7
	I20051124-2000:1.6
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.3;
locks; strict;
comment	@# @;


1.8
date	2008.01.14.22.19.32;	author crevells;	state Exp;
branches;
next	1.7;
commitid	2d04478bdff44567;

1.7
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.21.16.00.39;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.04.21.27.49;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.02.23.30.18;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.12.15.08.33;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.11;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.47;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[215264] gmf_head crevells 080114 Incorrect text shown in zoom drop down list
Contributed by:  James Bruck
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.actions;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Viewport;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.editparts.ZoomListener;
import org.eclipse.gef.editparts.ZoomManager;
import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;
import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramUIPluginImages;
import org.eclipse.gmf.runtime.diagram.ui.internal.util.IUIConstants;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchPart;

/**
 * @@author melaasar
 * @@canBeSeenBy %level1
 *
 * To change the template for this generated type comment go to
 * Window>Preferences>Java>Code Generation>Code and Comments
 */
public class ZoomContributionItem
	extends CustomContributionItem
	implements ZoomListener, Listener {

	/**
	 * Custom zoom operations
	 */
	private static final String ZOOM_IN = DiagramUIMessages.ZoomAction_ZoomCombo_ZoomIn;
	private static final String ZOOM_OUT = DiagramUIMessages.ZoomAction_ZoomCombo_ZoomOut;
	private static final String ZOOM_100 = DiagramUIMessages.ZoomAction_ZoomCombo_Zoom100;
	private static final String ZOOM_FIT = DiagramUIMessages.ZoomAction_ZoomCombo_ZoomToFit;
	private static final String ZOOM_WIDTH = DiagramUIMessages.ZoomAction_ZoomCombo_ZoomToWidth;
	private static final String ZOOM_HEIGHT = DiagramUIMessages.ZoomAction_ZoomCombo_ZoomToHeight;
	private static final String ZOOM_SELECTION = DiagramUIMessages.ZoomAction_ZoomCombo_ZoomToSelection;
	
	private static final String ZOOM_IN_ACTION = DiagramUIMessages.ZoomAction_ZoomIn;
	private static final String ZOOM_OUT_ACTION = DiagramUIMessages.ZoomAction_ZoomOut;
	private static final String ZOOM_100_ACTION = DiagramUIMessages.ZoomAction_Zoom100;
	private static final String ZOOM_FIT_ACTION = DiagramUIMessages.ZoomAction_ZoomToFit;
	private static final String ZOOM_WIDTH_ACTION = DiagramUIMessages.ZoomAction_ZoomToWidth;
	private static final String ZOOM_HEIGHT_ACTION = DiagramUIMessages.ZoomAction_ZoomToHeight;
	private static final String ZOOM_SELECTION_ACTION = DiagramUIMessages.ZoomAction_ZoomToSelection;
	
	/**
	 * The part's zoom manager
	 */
	private ZoomManager zoomManager;
	/**
	 * The zoom image
	 */
	private List zoomImages = new ArrayList();

	/**
	 * constructor
	 * @@param workbenchPage the workbench page
	 */
	public ZoomContributionItem(IWorkbenchPage workbenchPage) {
		super(workbenchPage, ActionIds.CUSTOM_ZOOM);
		setLabel(DiagramUIMessages.ZoomActionMenu_ZoomLabel);		
	}

	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.actions.CustomContributionItem#createTargetRequest()
	 */
	protected Request createTargetRequest() {
		return null;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractContributionItem#setWorkbenchPart(org.eclipse.ui.IWorkbenchPart)
	 */
	protected void setWorkbenchPart(IWorkbenchPart workbenchPart) {
		super.setWorkbenchPart(workbenchPart);
		if (workbenchPart != null)
			setZoomManager(
				(ZoomManager) workbenchPart.getAdapter(ZoomManager.class));
	}

	/**
	 * Returns true if the operation set is not empty and only if the diagram is selected. 
	 * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractContributionItem#calculateEnabled()
	 */
	protected boolean calculateEnabled() {
		return getZoomManager() != null;
	}

	/**
	 * Returns the zoomManager.
	 * @@return ZoomManager
	 */
	public ZoomManager getZoomManager() {
		return zoomManager;
	}

	/**
	 * Sets the ZoomManager
	 * @@param zm The ZoomManager
	 */
	public void setZoomManager(ZoomManager zm) {
		if (zoomManager == zm)
			return;
		if (zoomManager != null)
			zoomManager.removeZoomListener(this);

		zoomManager = zm;
		update();

		if (zoomManager != null)
			zoomManager.addZoomListener(this);
	}

	/**
	 * @@see org.eclipse.jface.action.ContributionItem#dispose()
	 */
	public void dispose() {
		if (getZoomManager() != null) {
			getZoomManager().removeZoomListener(this);
			zoomManager = null;
		}
		Iterator iter = zoomImages.iterator();
		while (iter.hasNext())
			 ((Image) iter.next()).dispose();
		zoomImages.clear();
		super.dispose();
	}

	/**
	 * @@see org.eclipse.gef.editparts.ZoomListener#zoomChanged(double)
	 */
	public void zoomChanged(double zoom) {
		update();
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractContributionItem#createControl(org.eclipse.swt.widgets.Composite)
	 */
	protected Control createControl(Composite parent) {
		Combo combo = new Combo(parent, SWT.DROP_DOWN);
		combo.addListener(SWT.Selection, this);
		combo.addListener(SWT.KeyDown, this);
		combo.setItems(getZoomLevelsAsText());
		combo.setVisibleItemCount(IUIConstants.DEFAULT_DROP_DOWN_SIZE);
		return combo;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractContributionItem#createMenuItem(org.eclipse.swt.widgets.Menu, int)
	 */
	protected MenuItem createMenuItem(Menu parent, int index) {
		MenuItem mi = index >= 0 
			? new MenuItem(parent, SWT.CASCADE, index) 
			: new MenuItem(parent, SWT.CASCADE);
		createMenu(mi);
		mi.setImage(DiagramUIPluginImages.get(DiagramUIPluginImages.IMG_ZOOM_IN));
		return mi;
	}

	/**
	 * Creates the zoom menu
	 * 
	 * @@param mi
	 */
	private void createMenu(MenuItem mi) {
		Menu menu = new Menu(mi.getParent());
		createMenuItem(menu, ZOOM_IN_ACTION, ZOOM_IN,
			DiagramUIPluginImages.DESC_ZOOM_IN);
		createMenuItem(menu, ZOOM_OUT_ACTION, ZOOM_OUT,
			DiagramUIPluginImages.DESC_ZOOM_OUT);
		createMenuItem(menu, ZOOM_100_ACTION, ZOOM_100,
			DiagramUIPluginImages.DESC_ZOOM_100);
		createMenuItem(menu, ZOOM_FIT_ACTION, ZOOM_FIT,
			DiagramUIPluginImages.DESC_ZOOM_TOFIT);
		createMenuItem(menu, ZOOM_WIDTH_ACTION, ZOOM_WIDTH,
			DiagramUIPluginImages.DESC_ZOOM_TOFIT);
		createMenuItem(menu, ZOOM_HEIGHT_ACTION, ZOOM_HEIGHT,
			DiagramUIPluginImages.DESC_ZOOM_TOFIT);
		createMenuItem(menu, ZOOM_SELECTION_ACTION, ZOOM_SELECTION,
			DiagramUIPluginImages.DESC_ZOOM_TOFIT);
		mi.setMenu(menu);
	}

	/**
	 * Creates a menu item with a given text and image with the push style
	 * 
	 * @@param menu The menu
	 * @@param text The menu item text
	 * @@param data The callback data to determine which zoom action to take
	 * @@param imageDescriptor The menu item image
	 * @@return mentu item
	 */
	 private MenuItem createMenuItem(
		Menu menu,
		String text,
		String data,
		ImageDescriptor imageDescriptor) {
		MenuItem mi = new MenuItem(menu, SWT.PUSH);
		mi.setText(text);
		mi.setData(data);
		if (imageDescriptor != null)
			mi.setImage(createImage(imageDescriptor));
		mi.addListener(SWT.Selection, this);
		return mi;
	}

	/**
	 * Get the zoom levels as text string array from the zoom manager.
	 * 
	 * @@return String array with zoom levels. 
	 * 
	 * @@see org.eclipse.gef.editparts.ZoomManager#getZoomLevelsAsText()
	 */
	public String[] getZoomLevelsAsText() {
		int nNumericZoomLevels =
			(getZoomManager() != null)
				? getZoomManager().getZoomLevels().length
				: 0;
		String[] allZoomLevels = new String[nNumericZoomLevels + 6];

		allZoomLevels[0] = ZOOM_IN;
		allZoomLevels[1] = ZOOM_OUT;
		allZoomLevels[2] = ZOOM_FIT;
		allZoomLevels[3] = ZOOM_WIDTH;
		allZoomLevels[4] = ZOOM_HEIGHT;
		allZoomLevels[5] = ZOOM_SELECTION;

		if (getZoomManager() != null) {
			String[] numericZoomLevels = getZoomManager().getZoomLevelsAsText();
			for (int i = 0; i < getZoomManager().getZoomLevels().length; i++) {
				allZoomLevels[i + 6] = numericZoomLevels[i];
			}
		}

		return allZoomLevels;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractContributionItem#refreshItem()
	 */
	protected void refreshItem() {
		if (getZoomManager() != null) {
			if (getControl() != null) {
				Combo combo = (Combo) getControl();
				combo.setItems(getZoomLevelsAsText());
				String zoom = getZoomManager().getZoomAsText();
				int index = combo.indexOf(zoom);
				if (index != -1)
					combo.select(index);
				else
					combo.setText(zoom);
			}
		}
		super.refreshItem();
	}

	/**
	 * @@see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
	 */
	public void handleEvent(Event event) {
		//Enter is commonly known as ascii 13 on all platforms.  To prevent
		//casting, this is the same as \r.
		if (event.type == SWT.KeyDown && event.character != '\r')
			return;
		if (getControl() != null)
			setZoomAsText(((Combo) getControl()).getText());
		else
			setZoomAsText((String) event.widget.getData());
	}

	/**
	 * Sets the zoom level to the zoom string using the zoom manager.
	 * First, it checks for the special cases.  If it isn't one of the special
	 * cases, it uses the zoom manager to do the zooming.
	 * There are six special cases, zoom to fit, zoom in, zoom out, zoom to width,
	 * zoom to height, and zoom to selected shapes.
	 * @@param zoomText the zoom string which we will zoom to.
	 * @@see org.eclipse.gef.editparts.ZoomManager#setZoomAsText(java.lang.String)
	 */
	public void setZoomAsText(String zoomText) {
		if (ZOOM_IN.equals(zoomText))
			getZoomManager().zoomIn();
		else if (ZOOM_OUT.equals(zoomText))
			getZoomManager().zoomOut();
		else if (ZOOM_100.equals(zoomText))
			getZoomManager().setZoom(1);
		else if (ZOOM_FIT.equals(zoomText))
			zoomToFit(true, true, false);
		else if (ZOOM_WIDTH.equals(zoomText))
			zoomToFit(true, false, false);
		else if (ZOOM_HEIGHT.equals(zoomText))
			zoomToFit(false, true, false);
		else if (ZOOM_SELECTION.equals(zoomText))
			zoomToFit(true, true, true);
		else
			getZoomManager().setZoomAsText(zoomText);
	}
	
	/**
	 * Performs the zoom operation.  Always zooms when possible.
	 *  
	 * @@param onWidth true to perform zoom on the width
	 * @@param onHeight true to perform zoom on the height
	 * @@param selectionOnly true to only zoom the selected items, false to zoom
	 * the entire diagram
	 */
	protected void zoomToFit(boolean onWidth,
			boolean onHeight,
			boolean selectionOnly) {
		zoomToFit(onWidth, onHeight, selectionOnly, false);
	}

	/**
	 * Performs the zoom operation.
	 *  
	 * @@param onWidth true to perform zoom on the width
	 * @@param onHeight true to perform zoom on the height
	 * @@param selectionOnly true to only zoom the selected items, false to zoom
	 * the entire diagram
	 * @@param zoomOutOnly true to only zoom out and avoid zooming to greater
	 * than 100%, false to always zoom even if it could make the shapes on the
	 * diagram very large
	 */
	protected void zoomToFit(
		boolean onWidth,
		boolean onHeight,
		boolean selectionOnly,
		boolean zoomOutOnly) {

			Iterator editParts;
			if (selectionOnly) {
				editParts = getStructuredSelection().iterator();
			} else {
				List allEditParts = getDiagramEditPart().getConnections();
				allEditParts.addAll(getDiagramEditPart().getChildrenAffectingZoom());
				editParts = allEditParts.iterator();
			}

			Rectangle rectangle = null;
			while (editParts.hasNext()) {
				IFigure f = ((GraphicalEditPart) editParts.next()).getFigure();
				rectangle = rectangle == null ? f.getBounds().getCopy() : rectangle.getUnion(f.getBounds());
			}

			// IF nothing to Zoom...
			if( rectangle == null ) {
				// do nothing
				return;
			}

			// Translate the region into pixels
			MapModeUtil.getMapMode(getDiagramEditPart().getFigure()).LPtoDP(rectangle);
			
			Viewport viewport = getZoomManager().getViewport();

			float xratio =
				viewport.getHorizontalRangeModel().getExtent()
					/ (float) rectangle.width;
			float yratio =
				viewport.getVerticalRangeModel().getExtent()
					/ (float) rectangle.height;

			double zoom = 1.0;
			if (onHeight && onWidth) {
				zoom =
					(yratio < xratio)
						? Math.floor(yratio * 100)
						: Math.floor(xratio * 100);
			} else if (onWidth) {
				zoom = Math.round(xratio * 100);
			} else if (onHeight) {
				zoom = Math.round(yratio * 100);
			}
			
			if (zoomOutOnly && zoom >= 100) {
				//we should always continue in order to set the viewport
				//location
				zoom = 100;
			}

			// apply thresholds
			zoom =
				Math.min(
					(int) (zoomManager.getMaxZoom() * 100),
					Math.max((int) (zoomManager.getMinZoom() * 100), zoom));

			int viewX =
				Math.round(rectangle.getTopLeft().x * (float) zoom / 100.0f);
			int viewY =
				Math.round(rectangle.getTopLeft().y * (float) zoom / 100.0f);

			getZoomManager().setZoom(zoom / 100);
			viewport.setHorizontalLocation(viewX);
			viewport.setVerticalLocation(viewY);
			
			// always refresh the zoom text when zoom to fit, 
			// required when the zoom percentage did not change but we wish
			// to display the text as a percentage.
			update();
	}

	/**
	 * Creates an image and caches it
	 * @@param descriptor
	 * @@return image
	 */
	private Image createImage(ImageDescriptor descriptor) {
		int index = zoomImages.indexOf(descriptor);
		if (index != -1)
			return (Image) zoomImages.get(index);
		Image image = descriptor.createImage();
		zoomImages.add(image);
		return image;
	}

}
@


1.7
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d422 5
@


1.6
log
@Bugzilla#116030 gmf_head cmahoney 051121 Diagram ActionIds should be public
@
text
@d26 1
d28 1
a28 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.Images;
a29 2
import org.eclipse.gmf.runtime.diagram.ui.internal.util.IUIConstants;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d57 7
a63 7
	private static final String ZOOM_IN = DiagramResourceManager.getI18NString("ZoomAction.ZoomCombo.ZoomIn"); //$NON-NLS-1$
	private static final String ZOOM_OUT = DiagramResourceManager.getI18NString("ZoomAction.ZoomCombo.ZoomOut"); //$NON-NLS-1$
	private static final String ZOOM_100 = DiagramResourceManager.getI18NString("ZoomAction.Zoom100"); //$NON-NLS-1$
	private static final String ZOOM_FIT = DiagramResourceManager.getI18NString("ZoomAction.ZoomCombo.ZoomToFit"); //$NON-NLS-1$
	private static final String ZOOM_WIDTH = DiagramResourceManager.getI18NString("ZoomAction.ZoomCombo.ZoomToWidth"); //$NON-NLS-1$
	private static final String ZOOM_HEIGHT = DiagramResourceManager.getI18NString("ZoomAction.ZoomCombo.ZoomToHeight"); //$NON-NLS-1$
	private static final String ZOOM_SELECTION = DiagramResourceManager.getI18NString("ZoomAction.ZoomCombo.ZoomToSelection"); //$NON-NLS-1$
d65 7
a71 7
	private static final String ZOOM_IN_ACTION = DiagramResourceManager.getI18NString("ZoomAction.ZoomIn"); //$NON-NLS-1$
	private static final String ZOOM_OUT_ACTION = DiagramResourceManager.getI18NString("ZoomAction.ZoomOut"); //$NON-NLS-1$
	private static final String ZOOM_100_ACTION = DiagramResourceManager.getI18NString("ZoomAction.Zoom100"); //$NON-NLS-1$
	private static final String ZOOM_FIT_ACTION = DiagramResourceManager.getI18NString("ZoomAction.ZoomToFit"); //$NON-NLS-1$
	private static final String ZOOM_WIDTH_ACTION = DiagramResourceManager.getI18NString("ZoomAction.ZoomToWidth"); //$NON-NLS-1$
	private static final String ZOOM_HEIGHT_ACTION = DiagramResourceManager.getI18NString("ZoomAction.ZoomToHeight"); //$NON-NLS-1$
	private static final String ZOOM_SELECTION_ACTION = DiagramResourceManager.getI18NString("ZoomAction.ZoomToSelection"); //$NON-NLS-1$
d88 1
a88 1
		setLabel(DiagramResourceManager.getI18NString("ZoomActionMenu.ZoomLabel")); //$NON-NLS-1$		
d183 1
a183 1
		mi.setImage(DiagramResourceManager.getInstance().getImage(DiagramResourceManager.IMAGE_ZOOM_IN));
d194 8
a201 12
		createMenuItem(menu, ZOOM_IN_ACTION, ZOOM_IN, DiagramResourceManager
			.getInstance().getImageDescriptor(
				DiagramResourceManager.IMAGE_ZOOM_IN));
		createMenuItem(menu, ZOOM_OUT_ACTION, ZOOM_OUT, DiagramResourceManager
			.getInstance().getImageDescriptor(
				DiagramResourceManager.IMAGE_ZOOM_OUT));
		createMenuItem(menu, ZOOM_100_ACTION, ZOOM_100, DiagramResourceManager
			.getInstance().getImageDescriptor(
				DiagramResourceManager.IMAGE_ZOOM_100));
		createMenuItem(menu, ZOOM_FIT_ACTION, ZOOM_FIT, DiagramResourceManager
			.getInstance().getImageDescriptor(
				DiagramResourceManager.IMAGE_ZOOM_TOFIT));
d203 1
a203 2
			DiagramResourceManager.getInstance().getImageDescriptor(
				DiagramResourceManager.IMAGE_ZOOM_TOFIT));
d205 1
a205 2
			DiagramResourceManager.getInstance().getImageDescriptor(
				DiagramResourceManager.IMAGE_ZOOM_TOFIT));
d207 1
a207 2
			DiagramResourceManager.getInstance().getImageDescriptor(
				DiagramResourceManager.IMAGE_ZOOM_TOFIT));
@


1.5
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@d25 1
a25 1
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;
a28 1
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;
@


1.4
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d27 4
a31 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d388 1
a388 1
			MapMode.translateToDP(rectangle);
@


1.3
log
@gmf_head sshaw 051012 Dropdown list sizes in diagram toolbar comboboxes are too small and require scrolling
Contributed by: Wayne Diu
Bugzilla: 112342
@
text
@d25 4
a41 6
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.ActionIds;
import org.eclipse.gmf.runtime.diagram.ui.internal.util.IUIConstants;
import org.eclipse.gmf.runtime.diagram.ui.l10n.Images;
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;

d50 1
a50 1
	extends PresentationContributionItem
d56 7
a62 7
	private static final String ZOOM_IN = PresentationResourceManager.getI18NString("ZoomAction.ZoomCombo.ZoomIn"); //$NON-NLS-1$
	private static final String ZOOM_OUT = PresentationResourceManager.getI18NString("ZoomAction.ZoomCombo.ZoomOut"); //$NON-NLS-1$
	private static final String ZOOM_100 = PresentationResourceManager.getI18NString("ZoomAction.Zoom100"); //$NON-NLS-1$
	private static final String ZOOM_FIT = PresentationResourceManager.getI18NString("ZoomAction.ZoomCombo.ZoomToFit"); //$NON-NLS-1$
	private static final String ZOOM_WIDTH = PresentationResourceManager.getI18NString("ZoomAction.ZoomCombo.ZoomToWidth"); //$NON-NLS-1$
	private static final String ZOOM_HEIGHT = PresentationResourceManager.getI18NString("ZoomAction.ZoomCombo.ZoomToHeight"); //$NON-NLS-1$
	private static final String ZOOM_SELECTION = PresentationResourceManager.getI18NString("ZoomAction.ZoomCombo.ZoomToSelection"); //$NON-NLS-1$
d64 7
a70 7
	private static final String ZOOM_IN_ACTION = PresentationResourceManager.getI18NString("ZoomAction.ZoomIn"); //$NON-NLS-1$
	private static final String ZOOM_OUT_ACTION = PresentationResourceManager.getI18NString("ZoomAction.ZoomOut"); //$NON-NLS-1$
	private static final String ZOOM_100_ACTION = PresentationResourceManager.getI18NString("ZoomAction.Zoom100"); //$NON-NLS-1$
	private static final String ZOOM_FIT_ACTION = PresentationResourceManager.getI18NString("ZoomAction.ZoomToFit"); //$NON-NLS-1$
	private static final String ZOOM_WIDTH_ACTION = PresentationResourceManager.getI18NString("ZoomAction.ZoomToWidth"); //$NON-NLS-1$
	private static final String ZOOM_HEIGHT_ACTION = PresentationResourceManager.getI18NString("ZoomAction.ZoomToHeight"); //$NON-NLS-1$
	private static final String ZOOM_SELECTION_ACTION = PresentationResourceManager.getI18NString("ZoomAction.ZoomToSelection"); //$NON-NLS-1$
d87 1
a87 1
		setLabel(PresentationResourceManager.getI18NString("ZoomActionMenu.ZoomLabel")); //$NON-NLS-1$		
d91 1
a91 1
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.actions.PresentationContributionItem#createTargetRequest()
d182 1
a182 1
		mi.setImage(createImage(Images.DESC_ACTION_ZOOM_IN));
d193 21
a213 7
		createMenuItem(menu, ZOOM_IN_ACTION, ZOOM_IN, Images.DESC_ACTION_ZOOM_IN); //$NON-NLS-1$
		createMenuItem(menu, ZOOM_OUT_ACTION, ZOOM_OUT, Images.DESC_ACTION_ZOOM_OUT); //$NON-NLS-1$
		createMenuItem(menu, ZOOM_100_ACTION, ZOOM_100, Images.DESC_ACTION_ZOOM_100); //$NON-NLS-1$
		createMenuItem(menu, ZOOM_FIT_ACTION, ZOOM_FIT, Images.DESC_ACTION_ZOOM_TOFIT); //$NON-NLS-1$
		createMenuItem(menu, ZOOM_WIDTH_ACTION, ZOOM_WIDTH, Images.DESC_ACTION_ZOOM_TOFIT); //$NON-NLS-1$
		createMenuItem(menu, ZOOM_HEIGHT_ACTION, ZOOM_HEIGHT, Images.DESC_ACTION_ZOOM_TOFIT); //$NON-NLS-1$
		createMenuItem(menu, ZOOM_SELECTION_ACTION, ZOOM_SELECTION, Images.DESC_ACTION_ZOOM_TOFIT); //$NON-NLS-1$
d367 1
a367 1
				List allEditParts = getDiagramEditPart().getConnectors();
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d39 1
d172 1
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

