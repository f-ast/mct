head	1.10;
access;
symbols
	v20081023-2107:1.10
	v20081022-1925:1.10
	v20081022-1005:1.10
	v20081020-0700:1.10
	v20080917-1925:1.10
	v20080916-2008:1.10
	v20080911-1728:1.10
	v20080911-1506:1.10
	v20080910-1520:1.10
	v20080910-1510:1.10
	v20080903-1520:1.10
	v20080903-1510:1.10
	v20080813-1510:1.10
	v20080811-1546:1.10
	v20080731-1520:1.10
	v20080725-1738:1.10
	v20080723-2246:1.10
	v20080723-2232:1.10
	v20080723-1700:1.10
	v20080722-1827:1.10
	v20080718-1700:1.10
	v20080718-1731:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.6
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080603-1553:1.10
	v20080527-1255:1.10
	v20080527-1151:1.10
	v20080516-1748:1.10
	v20080516-1143:1.10
	v20080512-1200:1.10
	v20080503-1740:1.10
	v20080501-2127:1.10
	v20080501-1739:1.10
	m20080429-1543:1.10
	v20080425-1959:1.10
	v20080417-1610:1.10
	v20080407-2250:1.10
	v20080407-0930:1.10
	v20080404-1111:1.10
	v20080328-1605:1.10
	v20080322-0000:1.10
	v20080222-1200:1.10
	v20080201-2010:1.10
	v20080201-0201:1.10
	v20080118-1129:1.10
	v20080114-2222:1.10
	v20080114-1111:1.10
	v20080107-1111:1.10
	v20071222-1111:1.10
	v20071214-1111:1.10
	v20071130-1111:1.10
	v20071124-0000:1.10
	v20071112-0000:1.10
	v20071108-0000:1.10
	v20071003-0000:1.10
	v20070915-0000:1.10
	v20070903-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.4
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070614-1400:1.10
	v20070608-1300:1.10
	v20070605-1400:1.10
	v20070601-1400:1.10
	v20070525-1500:1.10
	v20070518-1300:1.10
	bugzilla111892_group_support:1.10.0.2
	Root_bugzilla111892_group_support:1.10
	v20070504-1000:1.10
	v20070420-1000:1.10
	v20070413-1300:1.10
	v20070330-1300:1.10
	v20060330-1300:1.10
	v20070322-1100:1.10
	v20060316-0600:1.10
	v20070221-1500:1.10
	v20070208-1800:1.10
	v20070202-0200:1.9.2.2
	v20070119-1200:1.9.2.2
	v20070111-0800:1.9.2.2
	v20070105-1200:1.9.2.2
	v20070103-0300:1.10
	M4_20:1.10
	v20061218-1500:1.9.2.2
	v20061218-1200:1.10
	v20061214-0000:1.10
	M3_20:1.10
	v20061117-0800:1.10
	v20061027-1200:1.9.2.2
	v20061013-1330:1.10
	v20061012-1100:1.9.2.2
	v20060925-1700:1.9.2.2
	v20060919-0800:1.9.2.2
	v20060907-1100:1.9.2.1
	M1_20:1.9
	v20060831-1500:1.9.2.1
	v20060824-1600:1.9.2.1
	v20060817-1500:1.9.2.1
	v20060810-1700:1.9.2.1
	v20060803-1200:1.9.2.1
	v20060728-0500:1.9
	v20060721-1130:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060616-1400:1.9
	v20060616-1200:1.9
	v20060609-1400:1.9
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.9
	v20060519-0800:1.9
	v20060512-1000:1.9
	I20060512-1000:1.9
	I20060505-1400:1.9
	I20060428-1300:1.9
	I20060424-0500:1.9
	I20060424-0300:1.9
	M6_10:1.9
	I20060407-1200:1.9
	I20060331-1000:1.9
	I20060324-0300:1.9
	I20060317-1300:1.9
	I20060317-1200:1.9
	I20060316-1300:1.9
	I20060309-1300:1.9
	M5_10:1.9
	S20060303-1600:1.9
	I20060227-1730:1.8
	I20060216-1945:1.8
	I20060210-1715:1.8
	I20060209-1815:1.8
	I20060203-0830:1.7
	I20060202-1415:1.7
	I20060129-1145:1.7
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;


1.10
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.28.02.31.21;	author cmahoney;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2006.02.07.15.19.06;	author mmostafa;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.27.20.22.56;	author sshaw;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.20.16.49.27;	author mmostafa;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.02.23.30.16;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.14.20.58.50;	author mmostafa;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.07;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.08.18.58.40;	author sshaw;	state Exp;
branches;
next	;

1.9.2.1
date	2006.08.02.20.16.18;	author mmostafa;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.10
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.view.factories; 

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.core.services.ViewService;
import org.eclipse.gmf.runtime.diagram.core.view.factories.DiagramFactory;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.FontStyle;
import org.eclipse.gmf.runtime.notation.LineStyle;
import org.eclipse.gmf.runtime.notation.MeasurementUnit;
import org.eclipse.gmf.runtime.notation.NotationFactory;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceConverter;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.RGB;

/**
 * This is the bas factory class for all Diagram views, it will 
 * create the <code>Diagram</code> and decorate it using the default
 * decorations you can subclass it to add more decorations, or customize the 
 * way it looks, like adding new style
 * @@see #createDiagram(IAdaptable, String, PreferencesHint)
 * @@see #decorateView(View, IAdaptable, String)
 * @@see #createStyles()
 * @@author mmostafa
 * 
 */
public class DiagramViewFactory implements DiagramFactory{

	/**
	 * The hint used to find the appropriate preference store from which general
	 * diagramming preference values for properties of shapes, connections, and
	 * diagrams can be retrieved. This hint is mapped to a preference store in
	 * the {@@link DiagramPreferencesRegistry}.
	 */
	private PreferencesHint preferencesHint;

    /**
	 * factory method, that will be called by the view service to creat the
	 * <code>Diagram</code>
	 * 
	 * @@param semanticAdapter
	 *            semanitc element of the diagram, it can be null
	 * @@param diagramKind
	 *            a semantic hint to reflect the diagram type, it can be empty
	 * @@param thePreferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 */
	public Diagram createDiagram(IAdaptable semanticAdapter,
						 String diagramKind, PreferencesHint thePreferencesHint) {

		setPreferencesHint(thePreferencesHint);		
		Diagram diagram = NotationFactory.eINSTANCE.createDiagram();
		List styles = createStyles(diagram);
		if (styles.size() > 0) {
			diagram.getStyles().addAll(styles);
		}

		if (diagramKind != null)
			diagram.setType(diagramKind);
		if (semanticAdapter != null)
			diagram.setElement((EObject)semanticAdapter.getAdapter(EObject.class));
		else
			// enforce a set to NULL
			diagram.setElement(null);

		initializeMeasurementUnit(diagram);
		
		// do the necessary initializations (creating children, setting properties...etc)
		decorateView(diagram,semanticAdapter, diagramKind);
		
		return diagram;
	}
	
	/**
	 * Clients should override if they wish to initialize their <code>Diagram</code>
	 * to have a different coordinate system then the default <code>Himetric</code>.
	 * 
	 * @@return the <code>MeasurementUnit</code> that will be used to initialize the
	 * <code>Diagram</code> object that is being created by the factory.
	 */
	protected MeasurementUnit getMeasurementUnit() {
		return MeasurementUnit.HIMETRIC_LITERAL;
	}
	
	private void initializeMeasurementUnit(Diagram diagram) {
        if (!diagram.isSetMeasurementUnit()){
            diagram.setMeasurementUnit(getMeasurementUnit());
        }
	}

	/**
	 * This method is responsible for decorating the created view, it get called
	 * by the Factory method @@link #createView(IAdaptable, View, String, int, boolean),
	 * it will intiliaze the view with the default preferences also it will create 
	 * the default elements of the <code>View</code> if it had any
	 * @@param view the view itself
	 * @@param semanticAdapter the semantic elemnent of the view (it could be null)
	 * @@param diagramKind the semantic hint of the diagram
	 */
	protected void decorateView(View view, IAdaptable semanticAdapter, String diagramKind){
		initializeFromPreferences(view);
	}

	/**
	 * this method is called by @@link #createView(IAdaptable, View, String, int, boolean) to 
	 * create the styles for the view that will be created, you can override this 
	 * method in you factory sub class to provide additional styles
	 * @@return a list of style for the newly created view or an empty list if none (do not return null)
	 */
	protected List createStyles(View view) {
		List styles = new ArrayList();
		styles.add(NotationFactory.eINSTANCE.createDiagramStyle());
		return styles;
	}
	
	/**
	 * Initialize the newly created view from the preference store, this
	 * method get called by @@link #decorateView(View, IAdaptable, String)
	 * @@param view the view to initialize
	 */
	protected void initializeFromPreferences(View view) {
		
		IPreferenceStore store = (IPreferenceStore) getPreferencesHint().getPreferenceStore();

		
		LineStyle lineStyle = (LineStyle) view
			.getStyle(NotationPackage.Literals.LINE_STYLE);
		if (lineStyle != null) {
			// line color
			RGB lineRGB = PreferenceConverter.getColor(store,
				IPreferenceConstants.PREF_LINE_COLOR);

			lineStyle.setLineColor(FigureUtilities.RGBToInteger(lineRGB)
				.intValue());
		}


		FontStyle fontStyle = (FontStyle) view
			.getStyle(NotationPackage.Literals.FONT_STYLE);
		if (fontStyle != null) {
			// default font
			FontData fontData = PreferenceConverter.getFontData(store,
				IPreferenceConstants.PREF_DEFAULT_FONT);
			fontStyle.setFontName(fontData.getName());
			fontStyle.setFontHeight(fontData.getHeight());
			fontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
			fontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
			// font color
			RGB fontRGB = PreferenceConverter.getColor(store,
				IPreferenceConstants.PREF_FONT_COLOR);
			fontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
				.intValue());
		}
	}
	
			
	/**
	 * a utility method to return the view service instance
	 * @@return ViewService
	 */
	protected static ViewService getViewService() {
		return ViewService.getInstance();
	}
	
	/**
	 * Gets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@return the preferences hint
	 */
	protected PreferencesHint getPreferencesHint() {
		return preferencesHint;
	}
	
	/**
	 * Sets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@param preferencesHint the preferences hint
	 */
	protected void setPreferencesHint(PreferencesHint preferencesHint) {
		this.preferencesHint = preferencesHint;
	}
}@


1.9
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
a20 1
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
d25 2
d75 6
a80 5
		setPreferencesHint(thePreferencesHint);

		Diagram diagram = (Diagram)  NotationPackage.eINSTANCE.getDiagram().getEPackage().getEFactoryInstance().create(
			NotationPackage.eINSTANCE.getDiagram());
		diagram.getStyles().addAll(createStyles(diagram));
d149 6
a154 4
		// line color
		RGB lineRGB =
			PreferenceConverter.getColor(
				store,
a155 1
		ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities.RGBToInteger(lineRGB));
d157 10
a166 4
		//default font
		FontData fontData =
			PreferenceConverter.getFontData(
				store,
d168 6
a173 10
		
		ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getFontStyle_FontName(), fontData.getName());
		ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getFontStyle_FontHeight(), new Integer(fontData.getHeight()));
		ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getFontStyle_Bold(), Boolean.valueOf((fontData.getStyle() & SWT.BOLD) != 0));
		ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getFontStyle_Italic(), Boolean.valueOf((fontData.getStyle() & SWT.ITALIC) != 0));

		//font color
		RGB fontRGB =
			PreferenceConverter.getColor(
				store,
d175 3
a177 1
		ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getFontStyle_FontColor(), FigureUtilities.RGBToInteger(fontRGB));
@


1.9.2.1
log
@[152455] gmf_R1_0_maintenance  yLulu 060802 ViewFactories impl could be enhanced
@
text
@d21 1
a25 2
import org.eclipse.gmf.runtime.notation.FontStyle;
import org.eclipse.gmf.runtime.notation.LineStyle;
d74 5
a78 6
		setPreferencesHint(thePreferencesHint);		
		Diagram diagram = NotationFactory.eINSTANCE.createDiagram();
		List styles = createStyles(diagram);
		if (styles.size() > 0) {
			diagram.getStyles().addAll(styles);
		}
d147 4
a150 6
		
		LineStyle lineStyle = (LineStyle) view
			.getStyle(NotationPackage.Literals.LINE_STYLE);
		if (lineStyle != null) {
			// line color
			RGB lineRGB = PreferenceConverter.getColor(store,
d152 1
d154 4
a157 10
			lineStyle.setLineColor(FigureUtilities.RGBToInteger(lineRGB)
				.intValue());
		}


		FontStyle fontStyle = (FontStyle) view
			.getStyle(NotationPackage.Literals.FONT_STYLE);
		if (fontStyle != null) {
			// default font
			FontData fontData = PreferenceConverter.getFontData(store,
d159 10
a168 6
			fontStyle.setFontName(fontData.getName());
			fontStyle.setFontHeight(fontData.getHeight());
			fontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
			fontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
			// font color
			RGB fontRGB = PreferenceConverter.getColor(store,
d170 1
a170 3
			fontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
				.intValue());
		}
@


1.9.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.8
log
@bugzilla 117592 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@a18 1
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
d76 2
a77 1
		Diagram diagram = (Diagram)MEditingDomainGetter.getMEditingDomain(semanticAdapter).create(NotationPackage.eINSTANCE.getDiagram());
@


1.7
log
@bugzilla 116224 gmf-head sshaw 060119 Notation meta-model support for coordinate systems
@
text
@d108 3
a110 1
		diagram.initializeMeasurementUnit(getMeasurementUnit());
@


1.6
log
@bugzilla 115826 gmf-head mmostafa 051220 ViewService should be public
@
text
@d27 1
d88 2
d95 15
@


1.5
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a18 1
import org.eclipse.gmf.runtime.diagram.core.internal.services.view.ViewService;
d21 1
@


1.4
log
@bugzilla 110316 gmf-head mmostafa 051014 Compiler warning count should be 0 - runtime diagram layer components
@
text
@d24 1
a24 1
import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;
d51 1
a51 1
	 * diagramming preference values for properties of shapes, connectors, and
@


1.3
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@a18 6
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceConverter;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.RGB;

a21 2
import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
d24 1
d30 5
d132 1
a132 1
		ViewUtil.setPropertyValue(view,Properties.ID_LINECOLOR, FigureUtilities.RGBToInteger(lineRGB));
d140 4
a143 4
		ViewUtil.setPropertyValue(view,Properties.ID_FONTNAME, fontData.getName());
		ViewUtil.setPropertyValue(view,Properties.ID_FONTSIZE, new Integer(fontData.getHeight()));
		ViewUtil.setPropertyValue(view,Properties.ID_FONTBOLD, Boolean.valueOf((fontData.getStyle() & SWT.BOLD) != 0));
		ViewUtil.setPropertyValue(view,Properties.ID_FONTITALIC, Boolean.valueOf((fontData.getStyle() & SWT.ITALIC) != 0));
d150 1
a150 1
		ViewUtil.setPropertyValue(view,Properties.ID_FONTCOLOR, FigureUtilities.RGBToInteger(fontRGB));
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d29 1
a29 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
@


1.1
log
@Bugzilla 109092  : rumv_head mmostafa 050908 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 10
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

