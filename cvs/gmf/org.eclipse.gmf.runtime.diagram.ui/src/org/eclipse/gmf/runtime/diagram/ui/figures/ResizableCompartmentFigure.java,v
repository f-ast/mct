head	1.9;
access;
symbols
	v20081023-2107:1.9
	v20081022-1925:1.9
	v20081022-1005:1.9
	v20081020-0700:1.9
	v20080917-1925:1.9
	v20080916-2008:1.9
	v20080911-1728:1.9
	v20080911-1506:1.9
	v20080910-1520:1.9
	v20080910-1510:1.9
	v20080903-1520:1.9
	v20080903-1510:1.9
	v20080813-1510:1.9
	v20080811-1546:1.9
	v20080731-1520:1.9
	v20080725-1738:1.9
	v20080723-2246:1.9
	v20080723-2232:1.9
	v20080723-1700:1.9
	v20080722-1827:1.9
	v20080718-1700:1.9
	v20080718-1731:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080527-1255:1.9
	v20080527-1151:1.7.4.1
	v20080516-1748:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080503-1740:1.9
	v20080501-2127:1.7.4.1
	v20080501-1739:1.9
	m20080429-1543:1.7.4.1
	v20080425-1959:1.9
	v20080417-1610:1.9
	v20080407-2250:1.9
	v20080407-0930:1.9
	v20080404-1111:1.9
	v20080328-1605:1.9
	v20080322-0000:1.9
	v20080222-1200:1.9
	v20080201-2010:1.9
	v20080201-0201:1.7.4.1
	v20080118-1129:1.7.4.1
	v20080114-2222:1.7.4.1
	v20080114-1111:1.9
	v20080107-1111:1.8
	v20071222-1111:1.8
	v20071214-1111:1.8
	v20071130-1111:1.8
	v20071124-0000:1.7
	v20071112-0000:1.8
	v20071108-0000:1.8
	v20071003-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070518-1300:1.7
	bugzilla111892_group_support:1.7.0.2
	Root_bugzilla111892_group_support:1.7
	v20070504-1000:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.6.2.2
	v20070119-1200:1.6.2.2
	v20070111-0800:1.6.2.2
	v20070105-1200:1.6.2.2
	v20070103-0300:1.7
	M4_20:1.7
	v20061218-1500:1.6.2.2
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.6.2.2
	v20061013-1330:1.7
	v20061012-1100:1.6.2.2
	v20060925-1700:1.6.2.2
	v20060919-0800:1.6.2.2
	v20060907-1100:1.6.2.1
	M1_20:1.6
	v20060831-1500:1.6.2.1
	v20060824-1600:1.6.2.1
	v20060817-1500:1.6.2.1
	v20060810-1700:1.6.2.1
	v20060803-1200:1.6.2.1
	v20060728-0500:1.6.2.1
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-0800:1.6
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.9
date	2008.01.09.18.59.17;	author aboyko;	state Exp;
branches;
next	1.8;
commitid	3ee1478519844567;

1.8
date	2007.10.16.14.11.55;	author crevells;	state Exp;
branches;
next	1.7;
commitid	2b604714c6a84567;

1.7
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2006.05.09.19.45.24;	author cmahoney;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.04.21.20.41.53;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.30.21.14.57;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.04.21.27.48;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.09;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.46;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.07.26.16.04.05;	author mmostafa;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	;

1.7.4.1
date	2008.01.09.21.13.49;	author aboyko;	state Exp;
branches;
next	;
commitid	492d4785390d4567;


desc
@@


1.9
log
@[214622] gmf_head aboyko 080109 ShapeCompartmentEditPart.ConnectionRefreshMgr needs improvement
@
text
@/******************************************************************************
 * Copyright (c) 2000, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.figures;
import java.util.List;

import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.MarginBorder;
import org.eclipse.draw2d.ScrollPane;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
import org.eclipse.gmf.runtime.draw2d.ui.figures.OneLineBorder;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.AnimatableScrollPane;
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.OverlayScrollPaneLayout;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Font;


/**
 * A figure to represent the resizable compartment There are two constructors
 * available The one that takes a String:title consists of two childen: title
 * label + animatable scroll pane. The other one just consists of an animatable
 * scroll pane.
 *
 * <p>
 * Code taken from Eclipse reference bugzilla #98820
 * 
 * @@author melaasar
 * @@author choang
 */
/**
 * @@author Steve
 *
 */
public class ResizableCompartmentFigure extends NodeFigure {

	private boolean _horizontal = false;

	/**
	 * The pane for all text compartment including the title
	 */
	private Figure textPane = null;
	/**
	 * The compartment title label
	 */
	private WrappingLabel titleLabel;
	
	/**
	 * the minimum size the client area can occupy in logical coordinates
	 */
	private int minClientSize = 0;
	
	/**
	 * The compartment scroll pane
	 */
	protected ScrollPane scrollPane;
	/**
	 * The selected state
	 */
	private boolean selected;

	/**
	 * Indicates if the scroll pane has been initialized.
	 */
	private boolean isScrollPaneInitialized = false;

	/**
	 * Specifies the default minimum client size of this figure in device coordinates.
	 * Clients should use their editors <code>IMapMode</code> to convert this to logical
	 * coordinates.
	 */
	public static final int MIN_CLIENT_DP = 11;
    
    /**
     * A constructor for a top level resizable compartment figure
     * 
     * @@param compartmentTitle <code>String</code> that is the title that is
     * displayed at the top of the compartment figure (optional).
     * @@param mm the <code>IMapMode</code> that is used to initialize the
     * default values of of the scrollpane contained inside the figure.  This is
     * necessary since the figure is not attached at construction time and consequently
     * can't get access to the owned IMapMode in the parent containment hierarchy.
     */
    public ResizableCompartmentFigure(String compartmentTitle, IMapMode mm) {
        this.minClientSize = mm.DPtoLP(MIN_CLIENT_DP);
        setTextPane(new Figure() {
            public Dimension getMaximumSize() {
                return getPreferredSize();
            }
        });
        getTextPane().setLayoutManager(new ConstrainedToolbarLayout());
        add(getTextPane());
        add(scrollPane = createScrollPane(mm));
        setLayoutManager(new ConstrainedToolbarLayout());
        setTitle(compartmentTitle);
        setToolTip(compartmentTitle);
        setBorder(new OneLineBorder());
    }
    
	/**
	 * Creates the animatable scroll pane
	 * 
	 * @@return <code>AnimatableScrollPane</code>
     * @@deprecated use {@@link ResizableCompartmentFigure#createScrollPane(IMapMode)} instead
	 */
	protected AnimatableScrollPane createScrollpane() {
		return createScrollpane(MapModeUtil.getMapMode(this));
	}
    
    /**
     * Creates the animatable scroll pane
     * 
     * @@param mm the <code>IMapMode</code> that is used to initialize the
     * default values of of the scrollpane contained inside the figure.  This is
     * necessary since the figure is not attached at construction time and consequently
     * can't get access to the owned IMapMode in the parent containment hierarchy.
     * @@return <code>AnimatableScrollPane</code>
     * @@deprecated use {@@link ResizableCompartmentFigure#createScrollPane(IMapMode)} instead
     */
    protected AnimatableScrollPane createScrollpane(IMapMode mm) {
        scrollPane = new AnimatableScrollPane();
        scrollPane.getViewport().setContentsTracksWidth(true);
        scrollPane.getViewport().setContentsTracksHeight(false);
        scrollPane.setLayoutManager(new OverlayScrollPaneLayout());
        scrollPane.setVerticalScrollBarVisibility(ScrollPane.AUTOMATIC);
        scrollPane.setHorizontalScrollBarVisibility(ScrollPane.NEVER);
        scrollPane.setContents(new Figure());
        int half_minClient = getMinClientSize()/2;
        scrollPane.getContents().setBorder(
                new MarginBorder(1, half_minClient, 1, half_minClient));            
        return (AnimatableScrollPane)scrollPane;
    }    
    
    /**
     * Creates the animatable scroll pane
     * 
     * @@param mm the <code>IMapMode</code> that is used to initialize the
     * default values of of the scrollpane contained inside the figure.  This is
     * necessary since the figure is not attached at construction time and consequently
     * can't get access to the owned IMapMode in the parent containment hierarchy.
     * @@return <code>ScrollPane</code>
     */
    protected ScrollPane createScrollPane(IMapMode mm) {
        return createScrollpane(mm);
    }
	
	/**
	 * @@return that is the minimum size the client area can occupy in 
	 * logical coordinates.
	 */
	final protected int getMinClientSize() {
		return minClientSize;
	}
	
	/**
	 * Sets the compartment title visibility
	 * 
	 * @@param visibility
	 */
	public void setTitleVisibility(boolean visibility) {
		getTextPane().setVisible(visibility);
	}
	/**
	 * Expands the compartment figure
	 */
	public void expand() {
        scrollPane.getViewport().setVisible(true);
        if (scrollPane instanceof AnimatableScrollPane) {
            ((AnimatableScrollPane)scrollPane).expand();
        }
		scrollPane.setVerticalScrollBarVisibility(ScrollPane.AUTOMATIC);
	}
	/**
	 * Collapses the compartment figure
	 */
	public void collapse() {
		scrollPane.setVerticalScrollBarVisibility(ScrollPane.NEVER);
        if (scrollPane instanceof AnimatableScrollPane) {
            ((AnimatableScrollPane)scrollPane).collapse();
        }
        scrollPane.getViewport().setVisible(false);
	}
	/**
	 * Expands the compartment figure
	 */
	public void setExpanded() {
        scrollPane.getViewport().setVisible(true);
        if (scrollPane instanceof AnimatableScrollPane) {
            ((AnimatableScrollPane)scrollPane).setExpanded(true);
        }
		scrollPane.setVerticalScrollBarVisibility(ScrollPane.AUTOMATIC);
	}
	/**
	 * Collapses the compartment figure
	 */
	public void setCollapsed() {
		scrollPane.setVerticalScrollBarVisibility(ScrollPane.NEVER);
        if (scrollPane instanceof AnimatableScrollPane) {
            ((AnimatableScrollPane)scrollPane).setExpanded(false);
        }
        scrollPane.getViewport().setVisible(false);
	}
	
	/**
	 * @@return The contents pane of this compartment figure
	 */
	public IFigure getContentPane() {
		return scrollPane.getContents();
	}

	
	public void setFont(Font f) {
		textPane.setFont(f);
	}
	/**
	 * Sets the font color of the compartment title label
	 * 
	 * @@param c
	 *            The new color
	 */
	public void setFontColor(Color c) {
		textPane.setForegroundColor(c);
	}
	
	/**
	 * Set the compartment title to the supplied text.
	 * @@param title this figure title
	 */
	public void setTitle(String title) {
		if (title == null) {
			if (titleLabel != null)
				getTextPane().remove(titleLabel);
		} else if (titleLabel == null) {
			getTextPane().add(titleLabel = new WrappingLabel(title));
		} else
			titleLabel.setText(title);
	}
	
	/**
	 * Set the tooltip to the supplied text.
	 * @@param tooltip this figure tooltip
	 */
	public void setToolTip(String tooltip) {
		if (tooltip == null)
			setToolTip((IFigure) null);
		else if (getToolTip() instanceof Label)
			((Label) getToolTip()).setText(tooltip);
		else
			setToolTip(new Label(tooltip));
	}
	
	/**
	 * scrollpane accessor
	 * 
	 * @@return the scrollpane figure.
	 */
	public final ScrollPane getScrollPane() {
		return scrollPane;
	}
	
	/**
	 * Accessor for the expanded property
	 * 
	 * @@return boolean expanded
	 */
	public final boolean isExpanded() {
        if (scrollPane instanceof AnimatableScrollPane) {
            return ((AnimatableScrollPane)scrollPane).isExpanded();
        }
        
		return true;
	}
	
	/**
	 * Return this figure's compartment title.
	 * @@return <code>String</code>
	 */
	public final String getCompartmentTitle() {
		return titleLabel == null ? null : titleLabel.getText();
	}
	
	/**
	 * Gets the adjacent visible sibling before (or after) the figure
	 * @@param before flag to identify the before or after, <code>true</code>
	 * means before, <code>false</code> means after
	 * @@return <code>IFigure</code>
	 */
	public final IFigure getAdjacentSibling(boolean before) {
		List siblings = getParent().getChildren();
		int index = siblings.indexOf(this);
		if (before) {
			for (int i = index - 1; i >= 0; i--) {
				IFigure sibling = (IFigure) siblings.get(i);
				if (sibling instanceof ResizableCompartmentFigure
						&& sibling.isVisible())
					return sibling;
			}
		} else {
			for (int i = index + 1; i < siblings.size(); i++) {
				IFigure sibling = (IFigure) siblings.get(i);
				if (sibling instanceof ResizableCompartmentFigure
						&& sibling.isVisible())
					return sibling;
			}
		}
		return null;
	}
	
	/**
	 * Sets the selection state of this label
	 * 
	 * @@param b
	 *            true will cause the label to appear selected
	 */
	public void setSelected(boolean b) {
		if (this.selected == b)
			return;
		selected = b;
		repaint();
	}
	
	/**
	 * @@see org.eclipse.draw2d.Figure#paintFigure(org.eclipse.draw2d.Graphics)
	 */
	protected void paintFigure(Graphics graphics) {
		super.paintFigure(graphics);
		if (selected) {
			graphics.setLineWidth(2);
            int shrink = MapModeUtil.getMapMode(this).DPtoLP(1);
			graphics.drawRectangle(getClientArea().shrink(shrink, shrink));
		}
	}
	
	/**
	 * @@see org.eclipse.draw2d.IFigure#getPreferredSize(int, int)
	 */
	public Dimension getPreferredSize(int wHint, int hHint) {
		Dimension p = super.getPreferredSize(wHint, hHint);
		return p.getUnioned(getMinimumSize(wHint, hHint));
	}
	/**
	 * @@return makes sure that we can fit the collapse handles and the
	 * contents of the scroll pane. 
	 * @@see org.eclipse.draw2d.IFigure#getMinimumSize(int, int)
	 */
	public Dimension getMinimumSize(int w, int h) {
		
		if (minSize != null)
			return minSize;
		
		minSize = new Dimension(); 
		
		if (getLayoutManager() != null) {
			minSize = getLayoutManager().getMinimumSize(this, w, h);
		}
	
		int minHeight = getMinClientDimension().height+getInsets().getHeight();
		minSize.height = Math.max(minHeight, minSize.height);
		if (h >= 0)
			minSize.height = Math.min(minSize.height, h);
		
		int minWidth = getMinClientDimension().width+getInsets().getWidth();
		minSize.width = Math.max(minWidth, minSize.width);
		if (w >= 0)
			minSize.width = Math.min(minSize.width, w);
		
		return minSize;
	}

	/**
	 * getter for the horizontal flag
	 * @@return the horizontal flag
	 */
	public final boolean isHorizontal() {
		return _horizontal;
	}
	
	/**
	 * setter for the horizontal flag
	 * @@param horizontal the new value of the horizontal flag
	 */
	public final void setHorizontal(boolean horizontal) {
		_horizontal = horizontal;
	}
	
	/**
	 * @@see org.eclipse.draw2d.IFigure#getMaximumSize()
	 */
	public Dimension getMaximumSize() {
		Dimension d = super.getMaximumSize().getCopy();
		if (!isExpanded())
			if ( isHorizontal() ) {	
				d.width = getPreferredSize().width;	
			}
			else {	
				d.height = getPreferredSize().height;
			}
		return d;
	}
	/**
	 * @@see IFigure#invalidate()
	 */
	public void invalidate() {
		prefSize = null;
		minSize = null;
		super.invalidate();
	}
	/**
	 * @@return Returns the textPane.
	 */
	public Figure getTextPane() {
		return textPane;
	}
	/**
	 * @@param textPane
	 *            The textPane to set.
	 */
	private void setTextPane(Figure textPane) {
		this.textPane = textPane;
	}

	/**
	 * For this compartment we need it to be a min size so to fit the 
	 * collapse handles and to give the user an area they
	 * can drag and drop into the list compartment
	 * even if there is nothing in the compartment 
	 * @@return <code>Dimension</code>
	 */
	public Dimension getMinClientDimension(){
		return new Dimension(getMinClientSize(), getMinClientSize());
	}
	
	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.draw2d.IFigure#validate()
	 */
	public void validate() {
		super.validate();

		// Need a place to do this after the child figures have all been
		// created.
		initializeScrollPane();
	}
	
	/**
	 * Initializes the scroll to x and y locations on the scroll pane to
	 * accomodate children figures with negative locations. See RATLC00142157.
	 */
	private void initializeScrollPane() {
		if (!isScrollPaneInitialized) {
			if (getScrollPane() != null) {
				Point topLeft = getScrollPane().getContents().getBounds()
					.getTopLeft();
				if (topLeft.x < 0) {
					getScrollPane().getViewport().getHorizontalRangeModel()
						.setValue(topLeft.x);
				}
				if (topLeft.y < 0) {
					getScrollPane().getViewport().getVerticalRangeModel()
						.setValue(topLeft.y);
				}
			}
			isScrollPaneInitialized = true;
		}
	}
}
@


1.8
log
@[162932] gmf_head crevells 071016 [NoteTextLabel] WrapLabel should use Gef's text layout
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2007 IBM Corporation and others.
a24 1
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;
d183 1
d197 1
d203 1
d217 1
@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2006 IBM Corporation and others.
d26 1
d63 1
a63 1
	private WrapLabel titleLabel;
d247 1
a247 1
			getTextPane().add(titleLabel = new WrapLabel(title));
@


1.7.4.1
log
@[214622] gmf_R2_0_maintenance aboyko 080109 ShapeCompartmentEditPart.ConnectionRefreshMgr needs improvement
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2008 IBM Corporation and others.
a182 1
        scrollPane.getViewport().setVisible(true);
a195 1
        scrollPane.getViewport().setVisible(false);
a200 1
        scrollPane.getViewport().setVisible(true);
a213 1
        scrollPane.getViewport().setVisible(false);
@


1.6
log
@Bugzilla#109422 gmf_head cmahoney 060509 Removing deprecated classes from GMF diagram components
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2003  IBM Corporation and others.
a19 1
import org.eclipse.draw2d.Orientable;
a21 1
import org.eclipse.draw2d.geometry.Insets;
a23 1
import org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar;
a140 7
        
        Insets insets = new Insets(mm.DPtoLP(1), mm.DPtoLP(2),
            mm.DPtoLP(1), mm.DPtoLP(0));
        Dimension size = new Dimension(mm.DPtoLP(15), mm.DPtoLP(15));
        
        scrollPane.setVerticalScrollBar(new ListScrollBar(Orientable.VERTICAL, insets, size, 
                                    mm.DPtoLP(10), mm.DPtoLP(50)));
d144 1
d146 1
a146 1
                new MarginBorder(1, getMinClientSize()/2, 1, getMinClientSize()/2));            
d148 1
a148 1
    }
d341 2
a342 1
			graphics.drawRectangle(getClientArea().shrink(MapModeUtil.getMapMode(this).DPtoLP(1), MapModeUtil.getMapMode(this).DPtoLP(1)));
@


1.6.2.1
log
@[150403] gmf_R1_0_maintenace ylulu 060726  Scrollbar figures are created pre-maturely
@
text
@d20 1
d23 1
d26 1
d144 7
a153 1
        int half_minClient = getMinClientSize()/2;
d155 1
a155 1
                new MarginBorder(1, half_minClient, 1, half_minClient));            
d157 1
a157 1
    }    
d350 1
a350 2
            int shrink = MapModeUtil.getMapMode(this).DPtoLP(1);
			graphics.drawRectangle(getClientArea().shrink(shrink, shrink));
@


1.6.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2006 IBM Corporation and others.
@


1.5
log
@bugzilla 137787 gmf-head sshaw 060421 Need to set border of AnimatableScrollPane in ResizableCompartmentFigure subclass
@
text
@a91 31
	
	/**
	 * @@param compartmentTitle
	 * @@deprecated use @@link(ResizableCompartment(String compartmentTitle, IMapMode mm)} instead.
	 */
	public ResizableCompartmentFigure(String compartmentTitle) {
		this(compartmentTitle, MapModeUtil.getMapMode().DPtoLP(MIN_CLIENT_DP));
	}
    
	/**
	 * A constructor for a top level resizable compartment figure
	 * @@param compartmentTitle
	 * @@param minClientSize <code>int</code> that is the minimum size the client area can occupy in 
	 * logical coordinates.
     * @@deprecated use @@link(ResizableCompartment(String compartmentTitle, IMapMode mm)} instead.
	 */
	public ResizableCompartmentFigure(String compartmentTitle, int minClientSize) {
		this.minClientSize = minClientSize;
		setTextPane(new Figure() {
			public Dimension getMaximumSize() {
				return getPreferredSize();
			}
		});
		getTextPane().setLayoutManager(new ConstrainedToolbarLayout());
		add(getTextPane());
		add(scrollPane = createScrollpane());
		setLayoutManager(new ConstrainedToolbarLayout());
		setTitle(compartmentTitle);
		setToolTip(compartmentTitle);
		setBorder(new OneLineBorder());
	}
@


1.4
log
@bugzilla 132219 gmf-head sshaw 030630 Use diagram editor mapmode in ShapeCompartmentFigure and ResizableCompartmentFigure
@
text
@d75 1
a75 1
	protected AnimatableScrollPane scrollPane;
d143 1
a143 1
        add(scrollPane = createScrollpane(mm));
d154 1
a154 1
     * @@deprecated use {@@link ResizableCompartmentFigure#createScrollpane(IMapMode)} instead
d168 1
d187 14
a200 1
        return scrollPane;
d223 3
a225 1
		scrollPane.expand();
d233 3
a235 1
		scrollPane.collapse();
d241 3
a243 1
		scrollPane.setExpanded(true);
d251 3
a253 1
		scrollPane.setExpanded(false);
d309 1
a309 1
	public final AnimatableScrollPane getScrollPane() {
d319 5
a323 1
		return getScrollPane().isExpanded();
@


1.3
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@d95 1
a95 4
	 * @@deprecated use @@link(ResizableCompartment(String compartmentTitle, int minClientSize)} instead.
	 * Clients must specify the minClientSize in their own logical coordinate system instead of the
	 * figure assuming a default.  @@link{ ResizableCompartmentFigure.MIN_CLIENT_DP } is provided as a default
	 * value for convenience in device coordinates.
d100 1
d106 1
d123 27
d154 1
d157 1
a157 18
		scrollPane = new AnimatableScrollPane();
		scrollPane.getViewport().setContentsTracksWidth(true);
		scrollPane.getViewport().setContentsTracksHeight(false);
		scrollPane.setLayoutManager(new OverlayScrollPaneLayout());
		
		IMapMode mm = MapModeUtil.getMapMode(this);
		Insets insets = new Insets(mm.DPtoLP(1), mm.DPtoLP(2),
			mm.DPtoLP(1), mm.DPtoLP(0));
		Dimension size = new Dimension(mm.DPtoLP(15), mm.DPtoLP(15));
		
		scrollPane.setVerticalScrollBar(new ListScrollBar(Orientable.VERTICAL, insets, size, 
									mm.DPtoLP(10), mm.DPtoLP(50)));
		scrollPane.setVerticalScrollBarVisibility(ScrollPane.AUTOMATIC);
		scrollPane.setHorizontalScrollBarVisibility(ScrollPane.NEVER);
		scrollPane.setContents(new Figure());
		scrollPane.getContents().setBorder(
				new MarginBorder(1, getMinClientSize()/2, 1, getMinClientSize()/2));			
		return scrollPane;
d159 29
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d23 1
a24 3
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Font;

d31 2
a32 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d34 2
d50 4
a55 10
	/**
	 * The minimum client area height for the compartment
	 */
	public static final int MIN_CLIENT_SIZE = MapMode.DPtoLP(11);

	/**
	 * The minmum dimension for the compartment
	 */
	private static Dimension minClientDim = new Dimension(MIN_CLIENT_SIZE,MIN_CLIENT_SIZE);
	
d66 6
d87 17
d106 2
d109 2
a110 1
	public ResizableCompartmentFigure(String compartmentTitle) {
d134 8
a141 1
		scrollPane.setVerticalScrollBar(new ListScrollBar(Orientable.VERTICAL));
d146 1
a146 1
				new MarginBorder(1, MIN_CLIENT_SIZE/2, 1, MIN_CLIENT_SIZE/2));			
d149 9
d316 1
a316 1
			graphics.drawRectangle(getClientArea().shrink(MapMode.DPtoLP(1), MapMode.DPtoLP(1)));
d416 1
a416 1
		return minClientDim;
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 4
a4 4
/*******************************************************************************
 * Copyright (c) 2000, 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Common Public License v1.0
d6 2
a7 2
 * http://www.eclipse.org/legal/cpl-v10.html
 * 
d9 3
a11 2
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
@

