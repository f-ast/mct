head	1.13;
access;
symbols
	v20081023-2107:1.13
	v20081022-1925:1.13
	v20081022-1005:1.13
	v20081020-0700:1.13
	v20080917-1925:1.13
	v20080916-2008:1.13
	v20080911-1728:1.13
	v20080911-1506:1.13
	v20080910-1520:1.13
	v20080910-1510:1.13
	v20080903-1520:1.13
	v20080903-1510:1.13
	v20080813-1510:1.13
	v20080811-1546:1.13
	v20080731-1520:1.13
	v20080725-1738:1.13
	v20080723-2246:1.13
	v20080723-2232:1.13
	v20080723-1700:1.13
	v20080722-1827:1.13
	v20080718-1700:1.13
	v20080718-1731:1.13
	v20080716-1600:1.13
	v20080716-1642:1.13
	R2_1_maintenance:1.13.0.6
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080603-1553:1.13
	v20080527-1255:1.13
	v20080527-1151:1.13
	v20080516-1748:1.13
	v20080516-1143:1.13
	v20080512-1200:1.13
	v20080503-1740:1.13
	v20080501-2127:1.13
	v20080501-1739:1.13
	m20080429-1543:1.13
	v20080425-1959:1.13
	v20080417-1610:1.13
	v20080407-2250:1.13
	v20080407-0930:1.13
	v20080404-1111:1.13
	v20080328-1605:1.13
	v20080322-0000:1.13
	v20080222-1200:1.13
	v20080201-2010:1.13
	v20080201-0201:1.13
	v20080118-1129:1.13
	v20080114-2222:1.13
	v20080114-1111:1.13
	v20080107-1111:1.13
	v20071222-1111:1.13
	v20071214-1111:1.13
	v20071130-1111:1.13
	v20071124-0000:1.13
	v20071112-0000:1.13
	v20071108-0000:1.13
	v20071003-0000:1.13
	v20070915-0000:1.13
	v20070903-0000:1.13
	v20070809-0000:1.13
	R2_0_maintenance:1.13.0.4
	R2_0:1.13
	R4_20:1.13
	v20070621-0000:1.13
	RC3_20:1.13
	v20070614-1400:1.13
	v20070608-1300:1.13
	v20070605-1400:1.13
	v20070601-1400:1.13
	v20070525-1500:1.13
	v20070518-1300:1.13
	bugzilla111892_group_support:1.13.0.2
	Root_bugzilla111892_group_support:1.13
	v20070504-1000:1.13
	v20070420-1000:1.13
	v20070413-1300:1.13
	v20070330-1300:1.13
	v20060330-1300:1.13
	v20070322-1100:1.13
	v20060316-0600:1.13
	v20070221-1500:1.13
	v20070208-1800:1.13
	v20070202-0200:1.12.2.1
	v20070119-1200:1.12.2.1
	v20070111-0800:1.12.2.1
	v20070105-1200:1.12.2.1
	v20070103-0300:1.13
	M4_20:1.13
	v20061218-1500:1.12.2.1
	v20061218-1200:1.13
	v20061214-0000:1.13
	M3_20:1.13
	v20061117-0800:1.13
	v20061027-1200:1.12.2.1
	v20061013-1330:1.13
	v20061012-1100:1.12.2.1
	v20060925-1700:1.12.2.1
	v20060919-0800:1.12.2.1
	v20060907-1100:1.12
	M1_20:1.12
	v20060831-1500:1.12
	v20060824-1600:1.12
	v20060817-1500:1.12
	v20060810-1700:1.12
	v20060803-1200:1.12
	v20060728-0500:1.12
	v20060721-1130:1.12
	v20060713-1700:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20060627-1200:1.12
	v20060616-1400:1.12
	v20060616-1200:1.12
	v20060609-1400:1.11
	v20060531-1730:1.11
	v20060530-1930:1.11
	v20060526-1200:1.11
	v20060519-0800:1.11
	v20060512-1000:1.11
	I20060512-1000:1.11
	I20060505-1400:1.11
	I20060428-1300:1.11
	I20060424-0500:1.11
	I20060424-0300:1.11
	M6_10:1.11
	I20060407-1200:1.11
	I20060331-1000:1.11
	I20060324-0300:1.11
	I20060317-1300:1.11
	I20060317-1200:1.11
	I20060316-1300:1.11
	I20060309-1300:1.11
	M5_10:1.11
	S20060303-1600:1.11
	I20060227-1730:1.10
	I20060216-1945:1.10
	I20060210-1715:1.9
	I20060209-1815:1.9
	I20060203-0830:1.9
	I20060202-1415:1.9
	I20060129-1145:1.9
	I20060127-0900:1.9
	I20060120-1530:1.9
	I20060113-1700:1.9
	M4_10:1.9
	I20060107-1100:1.9
	I20060105-1630:1.9
	I20051230-1230:1.9
	I20051223-1100:1.9
	I20051217-0925:1.9
	I20051208-2000:1.9
	I20051201-1800:1.9
	I20051124-2000:1.8
	M3_10:1.8
	I20051118-1245:1.8
	I20051111-1800:1.8
	I20051106-0900:1.8
	v20051030:1.6;
locks; strict;
comment	@# @;


1.13
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.14.18.39.49;	author ahunter;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2006.02.28.02.31.20;	author cmahoney;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.04.21.27.49;	author sshaw;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.02.23.30.18;	author sshaw;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.14.20.58.50;	author mmostafa;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.15.48.52;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.48;	author sshaw;	state Exp;
branches;
next	;

1.12.2.1
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.13
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.diagram.ui.internal.ruler;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.rulers.RulerChangeListener;
import org.eclipse.gef.rulers.RulerProvider;
import org.eclipse.gmf.runtime.diagram.core.commands.SetPropertyCommand;
import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.commands.CreateGuideCommand;
import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.commands.DeleteGuideCommand;
import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.commands.MoveGuideCommand;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.notation.Guide;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;


/**
 * Custom RulerProvider methods.
 * 
 * @@author jschofie
 */
public class DiagramRulerProvider extends RulerProvider {

	/*
	 * PropertyChangeListerner for Rulers.
	 */
	private NotificationListener rulerListener = new NotificationListener() {
		public void notifyChanged(Notification evt) {
			handleNotificationEvent(evt);
		}
		
		private void handleNotificationEvent(Notification event) {
			Object feature = event.getFeature();

			if( (feature == NotationPackage.eINSTANCE.getGuideStyle_HorizontalGuides() &&
						!theRuler.isHorizontal() ) ||
				feature == NotationPackage.eINSTANCE.getGuideStyle_VerticalGuides() &&
						theRuler.isHorizontal())
			{
				Guide guide = null;

				// Add a new Guide
				if( event.getNewValue() != null && event.getOldValue() == null ) {
					guide = (Guide)event.getNewValue();
					DiagramEventBroker.getInstance(editingDomain).addNotificationListener(guide,guideListener);
				}

				// Remove Guide
				if( event.getNewValue() == null && event.getOldValue() != null ) {
					guide = (Guide)event.getOldValue();
					DiagramEventBroker.getInstance(editingDomain).removeNotificationListener(guide,guideListener);
				}
				
				for (int i = 0; i < listeners.size(); i++) {
					((RulerChangeListener)listeners.get(i))
							.notifyGuideReparented(guide);
				}
			}
		}
	};

	private NotificationListener guideListener = new NotificationListener() {
		public void notifyChanged(Notification evt) {
			handleNotificationEvent(evt);
		}
		
		private void handleNotificationEvent(Notification event) {
			Object feature = event.getFeature();
			// Notify when the guide's position changes
			if( feature == NotationPackage.eINSTANCE.getGuide_Position() ) {
				for (int i = 0; i < listeners.size(); i++) {
					((RulerChangeListener)listeners.get(i))
							.notifyGuideMoved(event.getNotifier());
				}
			}
			
			// Notify when parts are attached and detached
			if( feature == NotationPackage.eINSTANCE.getGuide_NodeMap() ) {

				refreshMap();

				for (int i = 0; i < listeners.size(); i++) {
					((RulerChangeListener)listeners.get(i))
							.notifyPartAttachmentChanged(event.getNewValue(), event.getNotifier());
				}
			}
		}
	};
	
	private DiagramRuler theRuler;
	private IMapMode mm;
    private final TransactionalEditingDomain editingDomain;
	
	public DiagramRulerProvider(TransactionalEditingDomain editingDomain, DiagramRuler ruler, IMapMode mm ) {
		theRuler = ruler;
		this.mm = mm;
        this.editingDomain = editingDomain;
	}
	
	private IMapMode getMapMode() {
		return mm;
	}
	public void init() {
		theRuler.addNotificationListener(editingDomain, rulerListener);

		Iterator iter = getGuides().iterator();
		while(iter.hasNext()) {
			Guide guide = (Guide)iter.next();
			DiagramEventBroker.getInstance(editingDomain).addNotificationListener(guide,guideListener);
		}
		
		refreshMap();
	}
	
	public void uninit() {
		theRuler.removeNotificationListener(editingDomain, rulerListener);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.rulers.RulerProvider#getRuler()
	 */
	public Object getRuler() {
		return theRuler;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.rulers.RulerProvider#getAttachedModelObjects(java.lang.Object)
	 */
	public List getAttachedModelObjects(Object guide) {
		Guide toGet = (Guide)guide;
		
		if( toGet.getNodeMap().size() == 0 )
			return Collections.EMPTY_LIST;
	
		List toReturn = new ArrayList();
		
		Iterator iter = toGet.getNodeMap().keySet().iterator();
		while(iter.hasNext()) {
			Node node = (Node)iter.next();
			if( node != null )
				toReturn.add(node);
		}
	
		return toReturn;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.rulers.RulerProvider#getCreateGuideCommand(int)
	 */
	public Command getCreateGuideCommand(int position) {
        return new ICommandProxy(new CreateGuideCommand(
            editingDomain, theRuler, position));
    }

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.rulers.RulerProvider#getDeleteGuideCommand(java.lang.Object)
	 */
	public Command getDeleteGuideCommand(Object guide) {
		return new ICommandProxy( new DeleteGuideCommand(editingDomain, (Guide)guide) );
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.rulers.RulerProvider#getMoveGuideCommand(java.lang.Object, int)
	 */
	public Command getMoveGuideCommand(Object guide, int pDelta) {
		CompoundCommand cmd = new CompoundCommand(DiagramUIMessages.Command_moveGuide);

		// Get the Command to Move the Guide
		cmd.add( new ICommandProxy( new MoveGuideCommand(editingDomain, (Guide)guide, pDelta) ) );
		
		// Get the Commands to Remove attached model objects
		Iterator iter = getAttachedModelObjects(guide).iterator();
		while (iter.hasNext()) {
			View part = (View)iter.next();
			
			int x = ((Integer) ViewUtil.getStructuralFeatureValue(part,NotationPackage.eINSTANCE.getLocation_X())).intValue();
			int y = ((Integer) ViewUtil.getStructuralFeatureValue(part,NotationPackage.eINSTANCE.getLocation_Y())).intValue();

			SetPropertyCommand spc;
            
			if( ((DiagramRuler)getRuler()).isHorizontal()) {
				x += getMapMode().DPtoLP(pDelta);
				spc = new SetPropertyCommand(editingDomain, new EObjectAdapter(part), Properties.ID_POSITIONX, Properties.ID_POSITIONX, new Integer(x));
			} else {
				y += getMapMode().DPtoLP(pDelta);
				spc = new SetPropertyCommand(editingDomain, new EObjectAdapter(part), Properties.ID_POSITIONY, Properties.ID_POSITIONY, new Integer(y));
			}

			cmd.add( new ICommandProxy(spc) );
		}

		return cmd.unwrap();
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.rulers.RulerProvider#getGuideAt(int)
	 */
	public Object getGuideAt(int position) {
		List guides = getGuides();
		for (int i = 0; i < guides.size(); i++) {
			Object guide = guides.get(i);
			if (position >= (getGuidePosition(guide)-2) &&
					position <= (getGuidePosition(guide)+2) ) {
				return guide;
			}
		}
		return null;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.rulers.RulerProvider#getGuidePositions()
	 */
	public int[] getGuidePositions() {
		List guides = getGuides();
		int[] result = new int[guides.size()];
		for (int i = 0; i < guides.size(); i++) {
			result[i] = ((Guide)guides.get(i)).getPosition();
		}
		return result;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.rulers.RulerProvider#getUnit()
	 */
	public int getUnit() {
		return theRuler.getUnit();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.rulers.RulerProvider#setUnit(int)
	 */
	public void setUnit(int newUnit) {
		theRuler.setUnit(newUnit);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.rulers.RulerProvider#getGuidePosition(java.lang.Object)
	 */
	public int getGuidePosition(Object guide) {
		return ((Guide)guide).getPosition();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.rulers.RulerProvider#getGuides()
	 */
	public List getGuides() {
		return theRuler.getGuides();
	}

	public void refreshMap() {
		if( theRuler.isHorizontal() )
			refreshVerticalGuideMap();
		else 
			refreshHorizontalGuideMap();
	}

	/**
	 * 
	 */
	private void refreshHorizontalGuideMap()
	{
		List guideList = getGuides();
		List viewList = DiagramGuide.getInstance().getViews();

		Iterator iter = guideList.iterator();
		while( iter.hasNext() ) {
			Guide guide = (Guide)iter.next();
			List attachedViewsList = getAttachedModelObjects(guide);
			
			Iterator viewIter = attachedViewsList.iterator();
			while( viewIter.hasNext() ) {
				View view = (View)viewIter.next();
				if( viewList.contains(view) )
					viewList.remove(view);
				else
					DiagramGuide.getInstance().setHorizontalGuide(view,guide);
			}
			
			// Remove remaining views
			viewIter = viewList.iterator();
			while( viewIter.hasNext() ) {
				View view = (View)viewIter.next();
				DiagramGuide.getInstance().setHorizontalGuide(view, null);
			}
		}
	}

	/**
	 * 
	 */
	private void refreshVerticalGuideMap()
	{
		List guideList = getGuides();
		List viewList = DiagramGuide.getInstance().getViews();

		Iterator iter = guideList.iterator();
		while( iter.hasNext() ) {
			Guide guide = (Guide)iter.next();
			List attachedViewsList = getAttachedModelObjects(guide);
			
			Iterator viewIter = attachedViewsList.iterator();
			while( viewIter.hasNext() ) {
				View view = (View)viewIter.next();
				//Node node = (Node)view.getAdapter(Node.class);

				if( viewList.contains(view) )
					viewList.remove(view);
				else
					DiagramGuide.getInstance().setVerticalGuide(view,guide);
			}
			
			// Remove remaining views
			viewIter = viewList.iterator();
			while( viewIter.hasNext() ) {
				View view = (View)viewIter.next();
				DiagramGuide.getInstance().setVerticalGuide(view, null);
			}
		}
	}


}
@


1.12
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
@


1.12.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.11
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d30 1
a30 1
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
d178 1
a178 1
        return new EtoolsProxyCommand(new CreateGuideCommand(
d186 1
a186 1
		return new EtoolsProxyCommand( new DeleteGuideCommand(editingDomain, (Guide)guide) );
d196 1
a196 1
		cmd.add( new EtoolsProxyCommand( new MoveGuideCommand(editingDomain, (Guide)guide, pDelta) ) );
d216 1
a216 1
			cmd.add( new EtoolsProxyCommand(spc) );
@


1.10
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d72 1
a72 1
					DiagramEventBroker.getInstance().addNotificationListener(guide,guideListener);
d78 1
a78 1
					DiagramEventBroker.getInstance().removeNotificationListener(guide,guideListener);
d131 1
a131 1
		theRuler.addNotificationListener(rulerListener);
d136 1
a136 1
			DiagramEventBroker.getInstance().addNotificationListener(guide,guideListener);
d143 1
a143 1
		theRuler.removeNotificationListener(rulerListener);
@


1.9
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d21 1
d119 1
d121 1
a121 1
	public DiagramRulerProvider( DiagramRuler ruler, IMapMode mm ) {
d124 1
d178 3
a180 2
		return new EtoolsProxyCommand( new CreateGuideCommand(theRuler, position) );
	}
d186 1
a186 1
		return new EtoolsProxyCommand( new DeleteGuideCommand((Guide)guide) );
d196 1
a196 1
		cmd.add( new EtoolsProxyCommand( new MoveGuideCommand((Guide)guide, pDelta) ) );
d207 1
a207 1

d210 1
a210 1
				spc = new SetPropertyCommand(new EObjectAdapter(part), Properties.ID_POSITIONX, Properties.ID_POSITIONX, new Integer(x));
d213 1
a213 1
				spc = new SetPropertyCommand(new EObjectAdapter(part), Properties.ID_POSITIONY, Properties.ID_POSITIONY, new Integer(y));
@


1.8
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@d26 1
a27 1
import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;
d34 1
a34 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d189 1
a189 1
		CompoundCommand cmd = new CompoundCommand(DiagramResourceManager.getInstance().getString( "Command.moveGuide" ));  //$NON-NLS-1$
@


1.7
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d35 1
a35 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d117 3
a119 2

	public DiagramRulerProvider( DiagramRuler ruler ) {
d121 1
d124 3
d205 1
a205 1
				x += MapMode.DPtoLP(pDelta);
d208 1
a208 1
				y += MapMode.DPtoLP(pDelta);
d343 2
@


1.6
log
@bugzilla 110316 gmf-head mmostafa 051014 Compiler warning count should be 0 - runtime diagram layer components
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.core.listener.PresentationListener;
d34 1
a34 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d71 1
a71 1
					PresentationListener.getInstance().addNotificationListener(guide,guideListener);
d77 1
a77 1
					PresentationListener.getInstance().removeNotificationListener(guide,guideListener);
d128 1
a128 1
			PresentationListener.getInstance().addNotificationListener(guide,guideListener);
d184 1
a184 1
		CompoundCommand cmd = new CompoundCommand(PresentationResourceManager.getInstance().getString( "Command.moveGuide" ));  //$NON-NLS-1$
@


1.5
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d194 2
a195 2
			int x = ((Integer) ViewUtil.getPropertyValue(part,Properties.ID_POSITIONX)).intValue();
			int y = ((Integer) ViewUtil.getPropertyValue(part,Properties.ID_POSITIONY)).intValue();
@


1.4
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a14 2
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
d20 1
a24 1

d26 1
a26 1
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;
d28 1
d30 1
a34 2
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
d53 3
a55 7
	private PropertyChangeListener rulerListener = new PropertyChangeListener() {
		public void propertyChange(PropertyChangeEvent evt) {

			if( evt instanceof NotificationEvent ) {
				handleNotificationEvent( (NotificationEvent)evt );
				return;
			}
d58 1
a58 1
		private void handleNotificationEvent(NotificationEvent event) {
d71 1
a71 1
					PresentationListener.getInstance().addPropertyChangeListener(guide,guideListener);
d77 1
a77 1
					PresentationListener.getInstance().removePropertyChangeListener(guide,guideListener);
d88 3
a90 7
	private PropertyChangeListener guideListener = new PropertyChangeListener() {
		public void propertyChange(PropertyChangeEvent evt) {
			
			if( evt instanceof NotificationEvent ) {
				handleNotificationEvent( (NotificationEvent)evt );
				return;
			}
d93 1
a93 2
		private void handleNotificationEvent(NotificationEvent event) {
		
a94 1
			
d99 1
a99 1
							.notifyGuideMoved(event.getSource());
d110 1
a110 1
							.notifyPartAttachmentChanged(event.getNewValue(), event.getSource());
d123 1
a123 1
		theRuler.addPropertyChangeListener(rulerListener);
d128 1
a128 1
			PresentationListener.getInstance().addPropertyChangeListener(guide,guideListener);
d135 1
a135 1
		theRuler.removePropertyChangeListener(rulerListener);
@


1.3
log
@Bugzilla109092 : rmp_head mmostafa 050912 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 7
/***************************************************************************
  Licensed Materials - Property of IBM
  (C) Copyright IBM Corp. 2004.  All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
***************************************************************************/
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d73 1
a73 1
					PresentationListener.getNotifier(guide).addPropertyChangeListener(guideListener);
d79 1
a79 1
					PresentationListener.getNotifier(guide).removePropertyChangeListener(guideListener);
d136 1
a136 1
			PresentationListener.getNotifier(guide).addPropertyChangeListener(guideListener);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d35 4
a38 4
import com.ibm.xtools.notation.Guide;
import com.ibm.xtools.notation.Node;
import com.ibm.xtools.notation.NotationPackage;
import com.ibm.xtools.notation.View;
@

