head	1.8;
access;
symbols
	v20081023-2107:1.8
	v20081022-1925:1.8
	v20081022-1005:1.8
	v20081020-0700:1.8
	v20080917-1925:1.8
	v20080916-2008:1.8
	v20080911-1728:1.8
	v20080911-1506:1.8
	v20080910-1520:1.8
	v20080910-1510:1.8
	v20080903-1520:1.8
	v20080903-1510:1.8
	v20080813-1510:1.8
	v20080811-1546:1.8
	v20080731-1520:1.8
	v20080725-1738:1.8
	v20080723-2246:1.8
	v20080723-2232:1.8
	v20080723-1700:1.8
	v20080722-1827:1.8
	v20080718-1700:1.8
	v20080718-1731:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080527-1255:1.8
	v20080527-1151:1.7.4.1
	v20080516-1748:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080503-1740:1.8
	v20080501-2127:1.7.4.1
	v20080501-1739:1.8
	m20080429-1543:1.7.4.1
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080407-2250:1.8
	v20080407-0930:1.8
	v20080404-1111:1.8
	v20080328-1605:1.8
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20080201-2010:1.8
	v20080201-0201:1.7.4.1
	v20080118-1129:1.7.4.1
	v20080114-2222:1.7.4.1
	v20080114-1111:1.8
	v20080107-1111:1.8
	v20071222-1111:1.8
	v20071214-1111:1.8
	v20071130-1111:1.8
	v20071124-0000:1.7.4.1
	v20071112-0000:1.8
	v20071108-0000:1.8
	v20071003-0000:1.8
	v20070915-0000:1.7.4.1
	v20070903-0000:1.8
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070518-1300:1.7
	bugzilla111892_group_support:1.7.0.2
	Root_bugzilla111892_group_support:1.7
	v20070504-1000:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.5.2.2
	v20070119-1200:1.5.2.2
	v20070111-0800:1.5.2.2
	v20070105-1200:1.5.2.2
	v20070103-0300:1.7
	M4_20:1.7
	v20061218-1500:1.5.2.2
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.5.2.2
	v20061013-1330:1.6
	v20061012-1100:1.5.2.1
	v20060925-1700:1.5.2.1
	v20060919-0800:1.5.2.1
	v20060907-1100:1.5.2.1
	M1_20:1.5
	v20060831-1500:1.5.2.1
	v20060824-1600:1.5.2.1
	v20060817-1500:1.5.2.1
	v20060810-1700:1.5.2.1
	v20060803-1200:1.5.2.1
	v20060728-0500:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2007.07.31.19.40.07;	author crevells;	state Exp;
branches;
next	1.7;
commitid	3c1946af90164567;

1.7
date	2006.10.31.15.46.29;	author crevells;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.14.18.39.49;	author ahunter;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.05.17.14.00.26;	author ldamus;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.08.02.20.00.40;	author ldamus;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2006.10.27.14.19.55;	author ahunter;	state Exp;
branches;
next	;

1.7.4.1
date	2007.09.07.17.31.43;	author crevells;	state Exp;
branches;
next	;
commitid	37d446e18aff4567;


desc
@@


1.8
log
@[198444] gmf_head crevells 070731 Support delete prompting when connections are on a canonical diagram
@
text
@/******************************************************************************
c * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies;

import org.eclipse.core.runtime.Assert;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gef.editparts.AbstractConnectionEditPart;
import org.eclipse.gef.requests.GroupRequest;
import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;
import org.eclipse.gmf.runtime.diagram.ui.requests.GroupRequestViaKeyboard;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialogWithToggle;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.widgets.Display;

/**
 * @@author melaasar
 * 
 * An editpolicy that is responsible for Connection related model events. It
 * currently handles only the DELETE request
 */
public class ConnectionEditPolicy
	extends org.eclipse.gef.editpolicies.ConnectionEditPolicy {
	
	private static final String DELETE_FROM_DIAGRAM_DLG_TITLE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Title;

	private static final String DELETE_FROM_DIAGRAM_DLG_MESSAGE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Message;

	private static final String DELETE_FROM_MODEL_DLG_TOGGLE_LABEL = DiagramUIMessages.MessageDialogWithToggle_DoNotPromptAgainToggle_label;

	/**
	 * Returns a delete command to honour the supplied request. Calls
	 * {@@link #createDeleteSemanticCommand(GroupRequest)}if
	 * {@@link #shouldDeleteSemantic()}returns <tt>true</tt>; othwerise
	 * {@@link #createDeleteViewCommand(GroupRequest)}is called.
	 */
	protected final Command getDeleteCommand(GroupRequest deleteRequest) {
		boolean isDeleteFromKeyBoard = deleteRequest instanceof GroupRequestViaKeyboard;
		
			if (shouldDeleteSemantic()){
				return createDeleteSemanticCommand(deleteRequest);
			}else{
					
				boolean proceedToDeleteView = true;
				if (isDeleteFromKeyBoard){
					GroupRequestViaKeyboard groupRequestViaKeyboard = (GroupRequestViaKeyboard)deleteRequest;					
					if (groupRequestViaKeyboard.isShowInformationDialog()){
						proceedToDeleteView = showPrompt();
						groupRequestViaKeyboard.setShowInformationDialog(false);
						if (!(proceedToDeleteView))
							return UnexecutableCommand.INSTANCE;
					}					
				}
				
				return createDeleteViewCommand(deleteRequest);
			}
					
	}

	
	/**
	 * Return <tt>true</tt> if either the connections source or target
	 * editparts are canonical; otherwise <tt>false</tt>.
	 */
	protected boolean shouldDeleteSemantic() {

		Assert.isTrue(getHost() instanceof AbstractConnectionEditPart);
		
		
		AbstractConnectionEditPart cep = (AbstractConnectionEditPart) getHost();
		
		if (cep instanceof ConnectionEditPart) {
			if (!((ConnectionEditPart) cep).isSemanticConnection()) {
				return false;
			}
		}

		boolean isCanonical = false;
		if (cep.getSource() != null)
			isCanonical = IsCanonical(cep.getSource());
		if (cep.getTarget() != null)
			isCanonical = isCanonical && IsCanonical(cep.getTarget());
		return isCanonical;
		
	}

	/**
	 * Return <tt>true</tt> if the supplied editpart is canonical; otherwise,
	 * <tt>false</tt>.
	 */
	private boolean IsCanonical(EditPart ep) {
		EditPart parent = ep.getParent();
		return parent instanceof GraphicalEditPart
			? ((GraphicalEditPart) parent).isCanonical()
			: false;
	}	

	/**
	 * Return a command to delete the host's view.
	 * 
	 * @@param deleteRequest
	 *            the original delete request.
	 */
	protected Command createDeleteViewCommand(GroupRequest deleteRequest) {
        
        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
            .getEditingDomain();
        
		return new ICommandProxy(
			new DeleteCommand(editingDomain, (View) getHost().getModel()));
	}
	/**
	 * Return a command to delete the host's semantic element. This method is
	 * called if the host is canonical.
	 * 
	 * @@see #shouldDeleteSemantic()
	 * @@param deleteRequest
	 *            the original delete request.
	 */
	protected Command createDeleteSemanticCommand(GroupRequest deleteRequest) {

        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
            .getEditingDomain();
        
		EditCommandRequestWrapper semReq = null;
		if ( deleteRequest instanceof GroupRequestViaKeyboard ) {
			GroupRequestViaKeyboard grDeleteRequest = (GroupRequestViaKeyboard)deleteRequest;
			semReq = 
				new EditCommandRequestWrapper(new DestroyElementRequest(editingDomain, 
						grDeleteRequest.isShowInformationDialog()), deleteRequest.getExtendedData());
		} else {
			semReq = 
				new EditCommandRequestWrapper(new DestroyElementRequest(editingDomain, false), deleteRequest.getExtendedData());

		}
		Command semanticCmd = getHost().getCommand(semReq);
		if (semanticCmd != null && semanticCmd.canExecute()) {
			CompoundCommand cc = new CompoundCommand();
			cc.add(semanticCmd);
			return cc;
		}
		return null;
	}
	/**
	 * Performs the delete action on the selected objects.
	 */
	private boolean showPrompt() {
		boolean prompt = ((IPreferenceStore)
			((IGraphicalEditPart) getHost()).getDiagramPreferencesHint().getPreferenceStore())
			.getBoolean(IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);
		
		if(prompt) 
			if(showMessageDialog()) 
				return true; 
			else
				return false;
											
		return true;		
		
	}	
	
	
	
	/**
	 * launches the prompting dialogBox on deletion of elements from the diagram for the end user.
	 * 
	 * @@return boolean  true if user pressed YES; false otherwise
	 */
	private boolean showMessageDialog() {	
		MessageDialogWithToggle dialog = MessageDialogWithToggle
			.openYesNoQuestion(Display.getCurrent().getActiveShell(),
				DELETE_FROM_DIAGRAM_DLG_TITLE, DELETE_FROM_DIAGRAM_DLG_MESSAGE,
				DELETE_FROM_MODEL_DLG_TOGGLE_LABEL, false,
				(IPreferenceStore) ((IGraphicalEditPart) getHost())
					.getDiagramPreferencesHint().getPreferenceStore(),
				IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);
		
		if (dialog.getReturnCode() == IDialogConstants.YES_ID) 
			return true;
		else 
			return false;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.editpolicies.ComponentEditPolicy#getCommand(org.eclipse.gef.Request)
	 */
	public Command getCommand(Request request) {
		if (request instanceof GroupRequestViaKeyboard){
			return getDeleteCommand((GroupRequest)request);
		}
		return super.getCommand(request);
	}

}
@


1.7
log
@[159782] gmf_head crevells 061031 Deleting a connection whose source/target is canonical automatically deletes the element
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d14 1
a36 1
import org.eclipse.jface.util.Assert;
d148 11
a158 2
		EditCommandRequestWrapper semReq =
			new EditCommandRequestWrapper(new DestroyElementRequest(editingDomain, false), deleteRequest.getExtendedData());
@


1.7.4.1
log
@[198444] gmf_R2_0_maintenance crevells 070907 Support delete prompting when connections are on a canonical diagram
@
text
@d2 1
a2 1
c * Copyright (c) 2002, 2007 IBM Corporation and others.
a13 1
import org.eclipse.core.runtime.Assert;
d36 1
d46 82
a127 82
    extends org.eclipse.gef.editpolicies.ConnectionEditPolicy {
    
    private static final String DELETE_FROM_DIAGRAM_DLG_TITLE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Title;

    private static final String DELETE_FROM_DIAGRAM_DLG_MESSAGE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Message;

    private static final String DELETE_FROM_MODEL_DLG_TOGGLE_LABEL = DiagramUIMessages.MessageDialogWithToggle_DoNotPromptAgainToggle_label;

    /**
     * Returns a delete command to honour the supplied request. Calls
     * {@@link #createDeleteSemanticCommand(GroupRequest)}if
     * {@@link #shouldDeleteSemantic()}returns <tt>true</tt>; othwerise
     * {@@link #createDeleteViewCommand(GroupRequest)}is called.
     */
    protected final Command getDeleteCommand(GroupRequest deleteRequest) {
        boolean isDeleteFromKeyBoard = deleteRequest instanceof GroupRequestViaKeyboard;
        
            if (shouldDeleteSemantic()){
                return createDeleteSemanticCommand(deleteRequest);
            }else{
                    
                boolean proceedToDeleteView = true;
                if (isDeleteFromKeyBoard){
                    GroupRequestViaKeyboard groupRequestViaKeyboard = (GroupRequestViaKeyboard)deleteRequest;                   
                    if (groupRequestViaKeyboard.isShowInformationDialog()){
                        proceedToDeleteView = showPrompt();
                        groupRequestViaKeyboard.setShowInformationDialog(false);
                        if (!(proceedToDeleteView))
                            return UnexecutableCommand.INSTANCE;
                    }                   
                }
                
                return createDeleteViewCommand(deleteRequest);
            }
                    
    }

    
    /**
     * Return <tt>true</tt> if either the connections source or target
     * editparts are canonical; otherwise <tt>false</tt>.
     */
    protected boolean shouldDeleteSemantic() {

        Assert.isTrue(getHost() instanceof AbstractConnectionEditPart);
        
        
        AbstractConnectionEditPart cep = (AbstractConnectionEditPart) getHost();
        
        if (cep instanceof ConnectionEditPart) {
            if (!((ConnectionEditPart) cep).isSemanticConnection()) {
                return false;
            }
        }

        boolean isCanonical = false;
        if (cep.getSource() != null)
            isCanonical = IsCanonical(cep.getSource());
        if (cep.getTarget() != null)
            isCanonical = isCanonical && IsCanonical(cep.getTarget());
        return isCanonical;
        
    }

    /**
     * Return <tt>true</tt> if the supplied editpart is canonical; otherwise,
     * <tt>false</tt>.
     */
    private boolean IsCanonical(EditPart ep) {
        EditPart parent = ep.getParent();
        return parent instanceof GraphicalEditPart
            ? ((GraphicalEditPart) parent).isCanonical()
            : false;
    }   

    /**
     * Return a command to delete the host's view.
     * 
     * @@param deleteRequest
     *            the original delete request.
     */
    protected Command createDeleteViewCommand(GroupRequest deleteRequest) {
d132 12
a143 12
        return new ICommandProxy(
            new DeleteCommand(editingDomain, (View) getHost().getModel()));
    }
    /**
     * Return a command to delete the host's semantic element. This method is
     * called if the host is canonical.
     * 
     * @@see #shouldDeleteSemantic()
     * @@param deleteRequest
     *            the original delete request.
     */
    protected Command createDeleteSemanticCommand(GroupRequest deleteRequest) {
d148 59
a206 68
        EditCommandRequestWrapper semReq = null;
        if ( deleteRequest instanceof GroupRequestViaKeyboard ) {
            GroupRequestViaKeyboard grDeleteRequest = (GroupRequestViaKeyboard)deleteRequest;
            semReq = 
                new EditCommandRequestWrapper(new DestroyElementRequest(editingDomain, 
                        grDeleteRequest.isShowInformationDialog()), deleteRequest.getExtendedData());
        } else {
            semReq = 
                new EditCommandRequestWrapper(new DestroyElementRequest(editingDomain, false), deleteRequest.getExtendedData());

        }
        Command semanticCmd = getHost().getCommand(semReq);
        if (semanticCmd != null && semanticCmd.canExecute()) {
            CompoundCommand cc = new CompoundCommand();
            cc.add(semanticCmd);
            return cc;
        }
        return null;
    }
    /**
     * Performs the delete action on the selected objects.
     */
    private boolean showPrompt() {
        boolean prompt = ((IPreferenceStore)
            ((IGraphicalEditPart) getHost()).getDiagramPreferencesHint().getPreferenceStore())
            .getBoolean(IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);
        
        if(prompt) 
            if(showMessageDialog()) 
                return true; 
            else
                return false;
                                            
        return true;        
        
    }   
    
    
    
    /**
     * launches the prompting dialogBox on deletion of elements from the diagram for the end user.
     * 
     * @@return boolean  true if user pressed YES; false otherwise
     */
    private boolean showMessageDialog() {   
        MessageDialogWithToggle dialog = MessageDialogWithToggle
            .openYesNoQuestion(Display.getCurrent().getActiveShell(),
                DELETE_FROM_DIAGRAM_DLG_TITLE, DELETE_FROM_DIAGRAM_DLG_MESSAGE,
                DELETE_FROM_MODEL_DLG_TOGGLE_LABEL, false,
                (IPreferenceStore) ((IGraphicalEditPart) getHost())
                    .getDiagramPreferencesHint().getPreferenceStore(),
                IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);
        
        if (dialog.getReturnCode() == IDialogConstants.YES_ID) 
            return true;
        else 
            return false;
    }
    
    /* (non-Javadoc)
     * @@see org.eclipse.gef.editpolicies.ComponentEditPolicy#getCommand(org.eclipse.gef.Request)
     */
    public Command getCommand(Request request) {
        if (request instanceof GroupRequestViaKeyboard){
            return getDeleteCommand((GroupRequest)request);
        }
        return super.getCommand(request);
    }
@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d105 1
a105 1
			return isCanonical ? isCanonical : IsCanonical(cep.getTarget());
@


1.5
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
a22 1
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
d24 1
d94 3
a96 5

		if (cep instanceof IGraphicalEditPart) {
			if (ViewUtil
				.resolveSemanticElement((View) ((IGraphicalEditPart) cep)
					.getModel()) == null)
d98 1
d100 1
@


1.5.2.1
log
@[144251] gmf_R1_0_maintenance ldamus 060802 Example ecore diagram editor creates invalid ecore file
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d23 1
a24 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;
d94 5
a98 3
		
		if (cep instanceof ConnectionEditPart) {
			if (!((ConnectionEditPart) cep).isSemanticConnection()) {
a99 1
			}
a100 1

@


1.5.2.2
log
@[159782] gmf_R1_0_maintenance crevells 061027 Deleting a connection whose source/target is canonical automatically deletes the element
@
text
@d105 1
a105 1
			isCanonical = isCanonical && IsCanonical(cep.getTarget());
@


1.4
log
@[137749] gmf_head ldamus 060517 Transfer GEF Request's extended data into IEditCommandRequest's parameters
@
text
@d24 1
a24 1
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
d132 1
a132 1
		return new EtoolsProxyCommand(
@


1.3
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d149 1
a149 1
			new EditCommandRequestWrapper(new DestroyElementRequest(editingDomain, false));
@


1.2
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d14 1
d128 4
d133 1
a133 1
			new DeleteCommand((View) getHost().getModel()));
d144 4
d149 1
a149 1
			new EditCommandRequestWrapper(new DestroyElementRequest(false));
@


1.1
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d26 1
a26 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d47 5
a51 6
	private static final String DELETE_FROM_DIAGRAM_DLG_TITLE = DiagramResourceManager
	.getI18NString("PromptingDeleteAction.DeleteFromDiagramDialog.Title"); //$NON-NLS-1$ 
	private static final String DELETE_FROM_DIAGRAM_DLG_MESSAGE = DiagramResourceManager
	.getI18NString("PromptingDeleteAction.DeleteFromDiagramDialog.Message"); //$NON-NLS-1$ 	
	private static final String DELETE_FROM_MODEL_DLG_TOGGLE_LABEL =DiagramResourceManager
	.getI18NString("MessageDialogWithToggle.DoNotPromptAgainToggle.label"); //$NON-NLS-1$
@

