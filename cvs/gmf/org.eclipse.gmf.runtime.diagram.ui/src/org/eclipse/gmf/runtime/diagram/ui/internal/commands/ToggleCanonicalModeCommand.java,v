head	1.7;
access;
symbols
	v20081023-2107:1.7
	v20081022-1925:1.7
	v20081022-1005:1.7
	v20081020-0700:1.7
	v20080917-1925:1.7
	v20080916-2008:1.7
	v20080911-1728:1.7
	v20080911-1506:1.7
	v20080910-1520:1.7
	v20080910-1510:1.7
	v20080903-1520:1.7
	v20080903-1510:1.7
	v20080813-1510:1.7
	v20080811-1546:1.7
	v20080731-1520:1.7
	v20080725-1738:1.7
	v20080723-2246:1.7
	v20080723-2232:1.7
	v20080723-1700:1.7
	v20080722-1827:1.7
	v20080718-1700:1.7
	v20080718-1731:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080610-1132:1.7
	v20080603-1553:1.7
	v20080527-1255:1.7
	v20080527-1151:1.4.4.2
	v20080516-1748:1.6
	v20080516-1143:1.6
	v20080512-1200:1.6
	v20080503-1740:1.6
	v20080501-2127:1.4.4.1
	v20080501-1739:1.5
	m20080429-1543:1.4.4.1
	v20080425-1959:1.5
	v20080417-1610:1.5
	v20080407-2250:1.5
	v20080407-0930:1.5
	v20080404-1111:1.5
	v20080328-1605:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20080201-2010:1.5
	v20080201-0201:1.4
	v20080118-1129:1.4
	v20080114-2222:1.4
	v20080114-1111:1.5
	v20080107-1111:1.5
	v20071222-1111:1.5
	v20071214-1111:1.5
	v20071130-1111:1.5
	v20071124-0000:1.4
	v20071112-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070915-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070614-1400:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070518-1300:1.4
	bugzilla111892_group_support:1.4.0.2
	Root_bugzilla111892_group_support:1.4
	v20070504-1000:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070330-1300:1.4
	v20060330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070221-1500:1.4
	v20070208-1800:1.4
	v20070202-0200:1.3.2.1
	v20070119-1200:1.3.2.1
	v20070111-0800:1.3.2.1
	v20070105-1200:1.3.2.1
	v20070103-0300:1.4
	M4_20:1.4
	v20061218-1500:1.3.2.1
	v20061218-1200:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.3.2.1
	v20061013-1330:1.4
	v20061012-1100:1.3.2.1
	v20060925-1700:1.3.2.1
	v20060919-0800:1.3.2.1
	v20060907-1100:1.3.2.1
	M1_20:1.3
	v20060831-1500:1.3.2.1
	v20060824-1600:1.3.2.1
	v20060817-1500:1.3.2.1
	v20060810-1700:1.3.2.1
	v20060803-1200:1.3.2.1
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3.2.1
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.1;
locks; strict;
comment	@# @;


1.7
date	2008.05.27.16.07.39;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	2e8e483c31cb4567;

1.6
date	2008.05.02.14.41.56;	author ahunter;	state Exp;
branches;
next	1.5;
commitid	3346481b28344567;

1.5
date	2007.11.21.17.57.28;	author crevells;	state Exp;
branches;
next	1.4;
commitid	4a12474471874567;

1.4
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches
	1.4.2.1
	1.4.4.1;
next	1.3;

1.3
date	2005.11.25.19.38.14;	author cmahoney;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.11.02.23.30.19;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.13.15.45.50;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.14.19.53.43;	author mmostafa;	state Exp;
branches;
next	;

1.4.2.1
date	2007.05.18.17.36.44;	author crevells;	state Exp;
branches;
next	;
commitid	1899464de42a4567;

1.4.4.1
date	2008.04.29.19.41.35;	author ahunter;	state Exp;
branches;
next	1.4.4.2;
commitid	495c481779ef4567;

1.4.4.2
date	2008.05.27.15.48.43;	author ahunter;	state Exp;
branches;
next	;
commitid	2120483c2d5a4567;


desc
@@


1.7
log
@[150705] gmf-head ahunter 080527 ToggleCanonicalEditPolicy might corrupt the undo stack
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.commands;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.workspace.AbstractEMFOperation;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;

/**
 * A command that will enable/disable the canonical editpolicy 
 * installed on the supplied editparts.
 * @@author mhanner
 */
public class ToggleCanonicalModeCommand extends Command {

	/** enablement flag. */
	private boolean _enable;
	
	/** list of semantic elements canonical editpolicies are listening to. */
	private Collection _semanticHosts = new ArrayList();
    
    // an operation to enable undo using Transaction API is possible
    private AbstractEMFOperation op = null;

    // domain to use to record the change that will happenwhen we re-enable the edit policy
    private TransactionalEditingDomain domain;
	
	/**
	 * Create an instance.
	 * @@param editParts collection of editparts who's canonical editpolicies will be affected.
	 * @@param enable enablement flag
	 */
	public ToggleCanonicalModeCommand(Collection editParts, boolean enable) {
		super(DiagramUIMessages.ToggleCanonicalModeCommand_Label); 
		Object[] editparts = new Object[editParts.size()];
		editParts.toArray(editparts);
		for ( int i = 0; i < editparts.length; i++ ) {
			EditPart editPart = (EditPart)editparts[i];
			if (editPart != null) {
				CanonicalEditPolicy editPolicy = getCanonicalEditPolicy(editPart);
				if ( editPolicy != null ) {
					_semanticHosts.add( new WeakReference(editPolicy.getSemanticHost()) );
				}
			}
		}
		_enable = enable;
	}
	
	/**
	 * Create an instance.
	 * @@param element a semantic element
	 * @@param enable enablement flag
	 */
	public ToggleCanonicalModeCommand( EObject element, boolean enable ) {
		super(DiagramUIMessages.ToggleCanonicalModeCommand_Label);
		_semanticHosts.add( new WeakReference(element) );
		_enable = enable;
	}
		
	/**
	 * Create an instance.
	 * @@param target the target editpart
	 * @@param enable the enablement flag
	 */
	public ToggleCanonicalModeCommand(EditPart target, boolean enable) {
		this( Collections.singletonList(target), enable);
	}
	
	/**
	 * <code>ToggleCanonicalModeCommand</code> factory method.  
	 * @@param editParts collection of editparts who's canonical editpolicies will be affected.
	 * @@param enable enablement flag
	 * @@return a <code>ToggleCanonicalModeCommand</code> if at least one of the supplied editparts
	 * has a <code>CanonicalEditPolicy</code> installed on it, otherwise <tt>null</tt>.
	 */
	public static ToggleCanonicalModeCommand getToggleCanonicalModeCommand( Collection editParts, boolean enable) {
		ToggleCanonicalModeCommand cmd = new ToggleCanonicalModeCommand( editParts, enable );
		return cmd.getSemanticHosts().isEmpty() ? null : cmd;
	}
	
	/**
	 * <code>ToggleCanonicalModeCommand</code> factory method.  This copy constructor style factory
	 * will return a new command that shares the supplied commands semantic hosts.
	 * @@param tcmd a <code>ToggleCanonicalModeCommand</code>
	 * @@param enable enablement flag
	 * @@return a <code>ToggleCanonicalModeCommand</code> if at least one of the supplied editparts
	 * has a <code>CanonicalEditPolicy</code> installed on it, otherwise <tt>null</tt>.
	 */
	public static ToggleCanonicalModeCommand getToggleCanonicalModeCommand( ToggleCanonicalModeCommand tcmd, boolean enable) {
		if ( tcmd == null  || tcmd.getSemanticHosts().isEmpty() ) {
			return null;
		}
		ToggleCanonicalModeCommand cmd = new ToggleCanonicalModeCommand( Collections.EMPTY_LIST, enable );
		cmd.setSemanticHosts( tcmd.getSemanticHosts() );
		return cmd;
	}

	/**
	 * Return the set of semantic hosts on which a canonical editpolicy is listening. 
	 * @@return semantic hosts
	 */
	protected final Collection getSemanticHosts() {
		return _semanticHosts;
	}
	
	private final void setSemanticHosts( Collection hosts ) {
		_semanticHosts.clear();
		_semanticHosts.addAll(hosts);
	}
	
	/**
	 * Return the canonical editpolicy installed on the supplied editpart.
	 * @@param editPart edit part to use
	 * @@return the canoncial edit policy if there is any
	 */
	protected static CanonicalEditPolicy getCanonicalEditPolicy(
            EditPart editPart) {

        // If the editpart is a group, then we want to get the first parent
        // that isn't a group and get the canonical editpolicy there.
        while (editPart instanceof GroupEditPart) {
            editPart = editPart.getParent();
        }

        return (CanonicalEditPolicy) editPart
            .getEditPolicy(EditPolicyRoles.CANONICAL_ROLE);
    }
	
	/** Removes the canonical editpolict from the target editpart. */ 
	public void execute() {
        // try to record only if we are enabling the edit policy
        if (_enable && domain != null) {
            op = new AbstractEMFOperation(domain, "") { //$NON-NLS-1$

                protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info)
                    throws ExecutionException {
                    DoEnable(_enable);
                    return Status.OK_STATUS;
                }
                
            };
            try {
                op.execute(null, null);
            } catch (ExecutionException e) {
                //I give up... just do the enable.
                DoEnable(_enable);
            }
        }else{
			DoEnable(_enable);
		}
	}

	/** 
	 * Enables the canonical editpolicies listening of the list of
	 * semantic elements. 
	 * @@param enable enablement flag
	 */
	private void DoEnable(boolean enable) {
		Iterator references = getSemanticHosts().iterator();
		while( references.hasNext() ) {
			WeakReference wr = (WeakReference)references.next();
			EObject semanticHost = (EObject)wr.get();
			if (semanticHost != null) {
				List ceps = CanonicalEditPolicy.getRegisteredEditPolicies(semanticHost);
				for ( int i = 0; i < ceps.size(); i++ ) {
					CanonicalEditPolicy cep = (CanonicalEditPolicy)ceps.get(i);
					cep.enableRefresh(enable); 
				}
			}
		}	
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.commands.Command#redo()
	 */
	public void redo() {
		if (op != null) {
			try {
				op.redo(null, null);
			} catch (ExecutionException e) {
				// Give up...
			}
		}
		DoEnable(_enable);
	}
	
    /* (non-Javadoc)
     * @@see org.eclipse.gef.commands.Command#undo()
     */
    public void undo() {
        // the enable is not an EMF command, so we had to undo it manually before undo the EMF operation
        DoEnable(!_enable);
        if (op != null) {
            try {
                op.undo(null, null);
            } catch (ExecutionException e) {
                // Give up...
            }
        }
    }
    
    public void setDomain(TransactionalEditingDomain d) {
        domain = d;
    }
}
@


1.6
log
@[150705] gmf-head ahunter 080502 ToggleCanonicalEditPolicy might corrupt the undo stack
@
text
@a209 2
		} else {
			DoEnable(_enable);
d211 1
@


1.5
log
@[111892] gmf_head crevells 071121 Group/Ungroup support
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2007 IBM Corporation and others.
d204 9
a212 1
		execute();
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d31 1
d143 12
a154 3
	protected static CanonicalEditPolicy getCanonicalEditPolicy( EditPart editPart ) {
		return (CanonicalEditPolicy)editPart.getEditPolicy(EditPolicyRoles.CANONICAL_ROLE);
	}
@


1.4.4.1
log
@[150705] gmf-R2_0Maintenance ahunter 080429 ToggleCanonicalEditPolicy might corrupt the undo stack
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2008 IBM Corporation and others.
d194 1
a194 9
		if (op != null) {
			try {
				op.redo(null, null);
			} catch (ExecutionException e) {
				// Give up...
			}
		} else {
			DoEnable(_enable);
		}
@


1.4.4.2
log
@[150705] gmf-R2_0Maintenance ahunter 080527 ToggleCanonicalEditPolicy might corrupt the undo stack
@
text
@d200 2
a202 1
		DoEnable(_enable);
@


1.4.2.1
log
@[111892] gmf_head crevells 070518 First milestone of group/ungroup support (painting issues when grouping shapes with border items)
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2007 IBM Corporation and others.
a30 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
d142 3
a144 12
	protected static CanonicalEditPolicy getCanonicalEditPolicy(
            EditPart editPart) {

        // If the editpart is a group, then we want to get the first parent
        // that isn't a group and get the canonical editpolicy there.
        while (editPart instanceof GroupEditPart) {
            editPart = editPart.getParent();
        }

        return (CanonicalEditPolicy) editPart
            .getEditPolicy(EditPolicyRoles.CANONICAL_ROLE);
    }
@


1.3
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d21 5
d27 2
d47 6
d148 20
a167 1
		DoEnable(_enable);
d197 18
a214 6
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.commands.Command#undo()
	 */
	public void undo() {
		DoEnable(!_enable);
	}
@


1.3.2.1
log
@[150705] gmf_R1_0_maintenance mmostafa  060714 ToggleCanonicalEditPolicy might corrupt the undo stack
@
text
@a20 5
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
a21 2
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.workspace.AbstractEMFOperation;
a39 6
    
    // an operation to enable undo using Transaction API is possible
    private AbstractEMFOperation op = null;

    // domain to use to record the change that will happenwhen we re-enable the edit policy
    private TransactionalEditingDomain domain;
d135 1
a135 20
        // try to record only if we are enabling the edit policy
        if (_enable && domain != null) {
            op = new AbstractEMFOperation(domain, "") { //$NON-NLS-1$

                protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info)
                    throws ExecutionException {
                    DoEnable(_enable);
                    return Status.OK_STATUS;
                }
                
            };
            try {
                op.execute(null, null);
            } catch (ExecutionException e) {
                //I give up... just do the enable.
                DoEnable(_enable);
            }
        }else{
			DoEnable(_enable);
		}
d165 6
a170 18
    /* (non-Javadoc)
     * @@see org.eclipse.gef.commands.Command#undo()
     */
    public void undo() {
        // the enable is not an EMF command, so we had to undo it manually before undo the EMF operation
        DoEnable(!_enable);
        if (op != null) {
            try {
                op.undo(null, null);
            } catch (ExecutionException e) {
                // Give up...
            }
        }
    }
    
    public void setDomain(TransactionalEditingDomain d) {
        domain = d;
    }
@


1.2
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a23 1

d26 1
a26 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d47 1
a47 1
		super(DiagramResourceManager.getI18NString("ToggleCanonicalModeCommand.Label")); //$NON-NLS-1$
d68 1
a68 1
		super(DiagramResourceManager.getI18NString("ToggleCanonicalModeCommand.Label")); //$NON-NLS-1$
@


1.1
log
@bugzilla 109407 gmf-head sshaw 050913 CanonicalEditPolicy hierarchy consolidation
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d48 1
a48 1
		super(PresentationResourceManager.getI18NString("ToggleCanonicalModeCommand.Label")); //$NON-NLS-1$
d69 1
a69 1
		super(PresentationResourceManager.getI18NString("ToggleCanonicalModeCommand.Label")); //$NON-NLS-1$
@

