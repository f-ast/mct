head	1.10;
access;
symbols
	v20081023-2107:1.10
	v20081022-1925:1.10
	v20081022-1005:1.10
	v20081020-0700:1.10
	v20080917-1925:1.10
	v20080916-2008:1.10
	v20080911-1728:1.10
	v20080911-1506:1.10
	v20080910-1520:1.10
	v20080910-1510:1.10
	v20080903-1520:1.10
	v20080903-1510:1.10
	v20080813-1510:1.10
	v20080811-1546:1.10
	v20080731-1520:1.10
	v20080725-1738:1.10
	v20080723-2246:1.10
	v20080723-2232:1.10
	v20080723-1700:1.10
	v20080722-1827:1.10
	v20080718-1700:1.10
	v20080718-1731:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.4
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080603-1553:1.10
	v20080527-1255:1.10
	v20080527-1151:1.10
	v20080516-1748:1.10
	v20080516-1143:1.10
	v20080512-1200:1.10
	v20080503-1740:1.10
	v20080501-2127:1.10
	v20080501-1739:1.10
	m20080429-1543:1.10
	v20080425-1959:1.10
	v20080417-1610:1.10
	v20080407-2250:1.10
	v20080407-0930:1.10
	v20080404-1111:1.10
	v20080328-1605:1.10
	v20080322-0000:1.10
	v20080222-1200:1.10
	v20080201-2010:1.10
	v20080201-0201:1.10
	v20080118-1129:1.10
	v20080114-2222:1.10
	v20080114-1111:1.10
	v20080107-1111:1.10
	v20071222-1111:1.10
	v20071214-1111:1.10
	v20071130-1111:1.10
	v20071124-0000:1.10
	v20071112-0000:1.10
	v20071108-0000:1.10
	v20071003-0000:1.10
	v20070915-0000:1.10
	v20070903-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.2
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070614-1400:1.10
	v20070608-1300:1.10
	v20070605-1400:1.8
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070518-1300:1.8
	bugzilla111892_group_support:1.8.0.2
	Root_bugzilla111892_group_support:1.8
	v20070504-1000:1.8
	v20070420-1000:1.8
	v20070413-1300:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070221-1500:1.8
	v20070208-1800:1.8
	v20070202-0200:1.7.2.1
	v20070119-1200:1.7.2.1
	v20070111-0800:1.7.2.1
	v20070105-1200:1.7.2.1
	v20070103-0300:1.8
	M4_20:1.8
	v20061218-1500:1.7.2.1
	v20061218-1200:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061027-1200:1.7.2.1
	v20061013-1330:1.8
	v20061012-1100:1.7.2.1
	v20060925-1700:1.7.2.1
	v20060919-0800:1.7.2.1
	v20060907-1100:1.7
	M1_20:1.7
	v20060831-1500:1.7
	v20060824-1600:1.7
	v20060817-1500:1.7
	v20060810-1700:1.7
	v20060803-1200:1.7
	v20060728-0500:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-0800:1.7
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.3;
locks; strict;
comment	@# @;


1.10
date	2007.06.08.17.19.36;	author crevells;	state Exp;
branches;
next	1.9;
commitid	30c646698fa84567;

1.9
date	2007.06.08.15.56.39;	author crevells;	state Exp;
branches;
next	1.8;
commitid	475846697c364567;

1.8
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.17.14.00.26;	author ldamus;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.11.15.36.16;	author cmahoney;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.09;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.22;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.48;	author sshaw;	state Exp;
branches;
next	;

1.7.2.1
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.10
log
@[183647] gmf_head crevells 070608 CreationEditPolicy doesn't set newObjects for CreateUnspecifiedTypeRequest when only one command can be executed
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.requests;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.gef.Request;
import org.eclipse.gef.requests.CreateRequest;
import org.eclipse.gef.requests.CreationFactory;

import org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest.ViewAndElementDescriptor;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor;
import org.eclipse.gmf.runtime.diagram.ui.util.INotationType;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.IHintedType;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
import org.eclipse.gmf.runtime.notation.Node;

/**
 * This request encapsulates a list of <code>CreateViewRequest</code> or
 * <code>CreateViewAndElementRequest</code> for each type that this tool
 * supports. Each method in <code>CreateRequest</code> that is called to
 * configure the request in <code>CreationTool</code> is propagated to each
 * individual request.
 * 
 * @@author cmahoney
 */
public class CreateUnspecifiedTypeRequest
	extends CreateRequest {

	/**
	 * List of element types of which one will be created (of type
	 * <code>IElementType</code>).
	 */
	protected List elementTypes;

	/**
	 * A map containing the <code>CreateRequest</code> for each element type.
	 */
	protected Map requests = new HashMap();

	/** The result to be returned from which the new views can be retrieved. */
	private List newObjectList = new ArrayList();

	/**
	 * The hint used to find the appropriate preference store from which general
	 * diagramming preference values for properties of shapes, connections, and
	 * diagrams can be retrieved. This hint is mapped to a preference store in
	 * the {@@link DiagramPreferencesRegistry}.
	 */
	private PreferencesHint preferencesHint;
	
	/**
	 * Creates a new <code>CreateUnspecifiedTypeRequest</code>.
	 * 
	 * @@param elementTypes
	 *            List of element types of which one will be created (of type
	 *            <code>IElementType</code>).
	 * @@param preferencesHint
	 *            The preference hint that is to be used to find the appropriate
	 *            preference store from which to retrieve diagram preference
	 *            values. The preference hint is mapped to a preference store in
	 *            the preference registry <@@link DiagramPreferencesRegistry>.
	 */
	public CreateUnspecifiedTypeRequest(List elementTypes, PreferencesHint preferencesHint) {
		super();
		this.elementTypes = elementTypes;
		this.preferencesHint = preferencesHint;
		createRequests();
	}

	/**
	 * Creates a <code>CreateViewRequest</code> or
	 * <code>CreateViewAndElementRequest</code> for each creation hint and
	 * adds it to the map of requests.
	 */
	protected void createRequests() {
		for (Iterator iter = elementTypes.iterator(); iter.hasNext();) {
			IElementType elementType = (IElementType) iter.next();

			Request request = null;
			if (elementType instanceof INotationType) {
				ViewDescriptor viewDescriptor = new ViewDescriptor(null,
					Node.class, ((INotationType) elementType)
						.getSemanticHint(), getPreferencesHint());
				request = new CreateViewRequest(viewDescriptor);
			} else if (elementType instanceof IHintedType) {
				ViewAndElementDescriptor viewDescriptor = new ViewAndElementDescriptor(
					new CreateElementRequestAdapter(new CreateElementRequest(
						elementType)), Node.class,
					((IHintedType) elementType).getSemanticHint(), getPreferencesHint());
				request = new CreateViewAndElementRequest(viewDescriptor);
				request.setExtendedData(getExtendedData());
			} else {
				ViewAndElementDescriptor viewDescriptor = new ViewAndElementDescriptor(
					new CreateElementRequestAdapter(new CreateElementRequest(
						elementType)), Node.class, getPreferencesHint());
				request = new CreateViewAndElementRequest(viewDescriptor);
				request.setExtendedData(getExtendedData());
			}

			request.setType(getType());
			requests.put(elementType, request);
		}
	}

	/**
	 * Returns the <code>CreateRequest</code> for the element type passed in.
	 * 
	 * @@param creationHint
	 * @@return the <code>CreateRequest</code>
	 */
	public CreateRequest getRequestForType(IElementType creationHint) {
		if (requests != null) {
			return (CreateRequest) requests.get(creationHint);
		}
		return null;
	}

	/**
	 * Returns the list of element types.
	 * 
	 * @@return Returns the list of element types.
	 */
	public List getElementTypes() {
		return elementTypes;
	}
	
	/**
	 * Gets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@return the preferences hint
	 */
	protected PreferencesHint getPreferencesHint() {
		return preferencesHint;
	}

	public void setLocation(Point location) {
		if (requests != null) {
			for (Iterator iter = requests.values().iterator(); iter.hasNext();) {
				CreateRequest request = (CreateRequest) iter.next();
				request.setLocation(location);
			}
		}
		super.setLocation(location);
	}

	public void setType(Object type) {
		if (requests != null) {
			for (Iterator iter = requests.values().iterator(); iter.hasNext();) {
				CreateRequest request = (CreateRequest) iter.next();
				request.setType(type);
			}
		}
		super.setType(type);
	}

	public void setSize(Dimension size) {
		if (requests != null) {
			for (Iterator iter = requests.values().iterator(); iter.hasNext();) {
				CreateRequest request = (CreateRequest) iter.next();
				request.setSize(size);
			}
		}
		super.setSize(size);
	}

	public void setFactory(CreationFactory factory) {
		if (requests != null) {
			for (Iterator iter = requests.values().iterator(); iter.hasNext();) {
				CreateRequest request = (CreateRequest) iter.next();
				request.setFactory(factory);
			}
		}
		super.setFactory(factory);
	}

	public void setExtendedData(Map map) {
		if (requests != null) {
			for (Iterator iter = requests.values().iterator(); iter.hasNext();) {
				CreateRequest request = (CreateRequest) iter.next();
				request.setExtendedData(map);
			}
		}
		super.setExtendedData(map);
	}

	/**
	 * Sets the new object to be returned. Must be of the type expected in
	 * getNewObjectType().
	 * @@param theNewObjects
	 */
	public void setNewObject(Collection theNewObjects) {
		newObjectList.addAll(theNewObjects);
	}

	public Object getNewObject() {
        if (newObjectList.isEmpty() && requests.size() == 1) {
            Object createRequest = requests.values().toArray()[0];
            if (createRequest instanceof CreateRequest) {
                return ((CreateRequest) createRequest).getNewObject();
            }
        }
        return newObjectList;
    }

	public Object getNewObjectType() {
		return List.class;
	}
}@


1.9
log
@[183647] gmf_head crevells 070608 CreationEditPolicy doesn't set newObjects for CreateUnspecifiedTypeRequest when only one command can be executed
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d219 8
a226 2
		return newObjectList;
	}
@


1.7
log
@[137749] gmf_head ldamus 060517 Transfer GEF Request's extended data into IEditCommandRequest's parameters
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
@


1.7.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.6
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d111 1
d117 1
@


1.5
log
@Bugzilla#122016 gmf_head cmahoney 060112 CreateUnspecifiedTypeRequest should setSize for all the wrapped requests
@
text
@a31 1
import org.eclipse.gmf.runtime.emf.core.internal.util.IHintedType;
d33 1
@


1.4
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d21 1
d25 1
a156 3
	/**
	 * @@see org.eclipse.gef.requests.CreateRequest#setLocation(org.eclipse.draw2d.geometry.Point)
	 */
a166 3
	/**
	 * @@see org.eclipse.gef.Request#setType(java.lang.Object)
	 */
d177 30
a215 3
	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest#getNewObject()
	 */
a219 3
	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest#getNewObjectType()
	 */
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d63 1
a63 1
	 * diagramming preference values for properties of shapes, connectors, and
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.          	       |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d31 1
a31 1
import com.ibm.xtools.notation.Node;
@

