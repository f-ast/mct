head	1.9;
access;
symbols
	v20081023-2107:1.9
	v20081022-1925:1.9
	v20081022-1005:1.9
	v20081020-0700:1.9
	v20080917-1925:1.9
	v20080916-2008:1.9
	v20080911-1728:1.9
	v20080911-1506:1.9
	v20080910-1520:1.9
	v20080910-1510:1.9
	v20080903-1520:1.9
	v20080903-1510:1.9
	v20080813-1510:1.9
	v20080811-1546:1.9
	v20080731-1520:1.9
	v20080725-1738:1.9
	v20080723-2246:1.9
	v20080723-2232:1.9
	v20080723-1700:1.9
	v20080722-1827:1.9
	v20080718-1700:1.9
	v20080718-1731:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.6
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080527-1255:1.9
	v20080527-1151:1.9
	v20080516-1748:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080503-1740:1.9
	v20080501-2127:1.9
	v20080501-1739:1.9
	m20080429-1543:1.9
	v20080425-1959:1.9
	v20080417-1610:1.9
	v20080407-2250:1.9
	v20080407-0930:1.9
	v20080404-1111:1.9
	v20080328-1605:1.9
	v20080322-0000:1.9
	v20080222-1200:1.9
	v20080201-2010:1.9
	v20080201-0201:1.9
	v20080118-1129:1.9
	v20080114-2222:1.9
	v20080114-1111:1.9
	v20080107-1111:1.9
	v20071222-1111:1.9
	v20071214-1111:1.9
	v20071130-1111:1.9
	v20071124-0000:1.9
	v20071112-0000:1.9
	v20071108-0000:1.9
	v20071003-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.4
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070518-1300:1.9
	bugzilla111892_group_support:1.9.0.2
	Root_bugzilla111892_group_support:1.9
	v20070504-1000:1.8
	v20070420-1000:1.8
	v20070413-1300:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070221-1500:1.8
	v20070208-1800:1.8
	v20070202-0200:1.7.2.2
	v20070119-1200:1.7.2.2
	v20070111-0800:1.7.2.2
	v20070105-1200:1.7.2.2
	v20070103-0300:1.8
	M4_20:1.8
	v20061218-1500:1.7.2.2
	v20061218-1200:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061027-1200:1.7.2.2
	v20061013-1330:1.8
	v20061012-1100:1.7.2.2
	v20060925-1700:1.7.2.2
	v20060919-0800:1.7.2.2
	v20060907-1100:1.7.2.1
	M1_20:1.7
	v20060831-1500:1.7.2.1
	v20060824-1600:1.7.2.1
	v20060817-1500:1.7.2.1
	v20060810-1700:1.7.2.1
	v20060803-1200:1.7.2.1
	v20060728-0500:1.7.2.1
	v20060721-1130:1.7.2.1
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-0800:1.7
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.9
date	2007.05.11.22.16.57;	author mmostafa;	state Exp;
branches;
next	1.8;
commitid	73b74644eb594567;

1.8
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.12.21.21.11;	author sshaw;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.05.04.14.32.07;	author mmostafa;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.21.14.02.26;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.06.16.08.40;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.26.22.46.45;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.46;	author sshaw;	state Exp;
branches;
next	;

1.7.2.1
date	2006.07.14.21.02.16;	author cmahoney;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[186630] gmf_head mmostafa 070511 Canonical edit policy installed on connections never use write transaction
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.parts;

import java.util.List;

import org.eclipse.draw2d.DeferredUpdateManager;
import org.eclipse.draw2d.LightweightSystem;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.ui.parts.ScrollingGraphicalViewer;
import org.eclipse.gmf.runtime.diagram.ui.internal.parts.ElementToEditPartsMap;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.jface.resource.LocalResourceManager;
import org.eclipse.jface.resource.ResourceManager;
import org.eclipse.jface.util.TransferDragSourceListener;
import org.eclipse.jface.util.TransferDropTargetListener;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.PlatformUI;

/**
 * @@author melaasar
 * 
 * Implementation of a diagram graphical viewer
 */
public class DiagramGraphicalViewer
    extends ScrollingGraphicalViewer
    implements IDiagramGraphicalViewer {

    /**
     * Resource manager to remember the resources allocated for this graphical
     * viewer.
     */
    private ResourceManager resourceManager;
    
    /**
     * Constructor
     */
    public DiagramGraphicalViewer() {
        super();
    }

    /**
     * @@param enable
     *            <code>boolean</code> <code>true</code> if client wishes to
     *            disable updates on the figure canvas, <code>false</code>
     *            indicates normal updates are to take place.
     */
    public void enableUpdates(boolean enable) {
        if (enable)
            getLightweightSystemWithUpdateToggle().enableUpdates();
        else
            getLightweightSystemWithUpdateToggle().disableUpdates();
    }
    
    /**
     * @@return
     */
    public boolean areUpdatesDisabled() {
        return getLightweightSystemWithUpdateToggle().getToggleUpdateManager().shouldDisableUpdates();
    }

    private class ToggleUpdateManager
        extends DeferredUpdateManager {

        private boolean disableUpdates = false;

        /**
         * @@return the disableUpdates
         */
        public boolean shouldDisableUpdates() {
            return disableUpdates;
        }

        /* (non-Javadoc)
         * @@see org.eclipse.draw2d.DeferredUpdateManager#sendUpdateRequest()
         */
        protected void sendUpdateRequest() {
            PlatformUI.getWorkbench().getDisplay().asyncExec(new UpdateRequest());
        }

        /**
         * @@param disableUpdates
         *            the disableUpdates to set
         */
        public synchronized void setDisableUpdates(boolean disableUpdates) {
            boolean prevDisableUpdates = this.disableUpdates;
            this.disableUpdates = disableUpdates;
            if (!disableUpdates && prevDisableUpdates != disableUpdates) {
                sendUpdateRequest();
            }
        }

        /*
         * (non-Javadoc)
         * 
         * @@see org.eclipse.draw2d.DeferredUpdateManager#performUpdate()
         */
        public synchronized void performUpdate() {
            if (!shouldDisableUpdates())
                super.performUpdate();
        }

        /*
         * (non-Javadoc)
         * 
         * @@see org.eclipse.draw2d.DeferredUpdateManager#performValidation()
         */
        public void performValidation() {
            if (!shouldDisableUpdates())
                super.performValidation();
        }
        
        /* (non-Javadoc)
         * @@see org.eclipse.draw2d.DeferredUpdateManager#queueWork()
         */
        public void queueWork() {
            if (!shouldDisableUpdates())
                super.queueWork();
        }
    }

    private class LightweightSystemWithUpdateToggle
        extends LightweightSystem {

        /*
         * (non-Javadoc)
         * 
         * @@see org.eclipse.draw2d.LightweightSystem#getUpdateManager()
         */
        public ToggleUpdateManager getToggleUpdateManager() {
            return (ToggleUpdateManager) getUpdateManager();
        }

        /**
         * disable updates on the figure canvas
         */
        public void disableUpdates() {
            getToggleUpdateManager().setDisableUpdates(true);
        }

        /**
         * allow updates on the figure canvas to occcur
         */
        public void enableUpdates() {
            getToggleUpdateManager().setDisableUpdates(false);
        }
    }

    private LightweightSystemWithUpdateToggle getLightweightSystemWithUpdateToggle() {
        return (LightweightSystemWithUpdateToggle) getLightweightSystem();
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.gef.ui.parts.GraphicalViewerImpl#createLightweightSystem()
     */
    protected LightweightSystem createLightweightSystem() {
        LightweightSystem lws = new LightweightSystemWithUpdateToggle();
        lws.setUpdateManager(new ToggleUpdateManager());
        return lws;
    }

    /**
     * A selection event pending flag (for asynchronous firing)
     */
    private boolean selectionEventPending = false;

    /**
     * A registry of editparts on the diagram, mapping an element's id string to
     * a list of <code>EditParts</code>.
     */
    private ElementToEditPartsMap elementToEditPartsMap = new ElementToEditPartsMap();

    /**
     * Hook a zoom enabled graphics source
     * 
     * @@see org.eclipse.gef.ui.parts.AbstractEditPartViewer#hookControl()
     */
    protected void hookControl() {
        super.hookControl();
        
        if (resourceManager == null) {
            resourceManager = new LocalResourceManager(JFaceResources
                .getResources());
        }          
    }

    /**
     * Refresh drag source adapters regardless if the adapter list is empty
     * 
     * @@see org.eclipse.gef.ui.parts.AbstractEditPartViewer#removeDragSourceListener(TransferDragSourceListener)
     */
    public void removeDragSourceListener(TransferDragSourceListener listener) {
        getDelegatingDragAdapter().removeDragSourceListener(listener);
        refreshDragSourceAdapter();
    }

    /**
     * Refresh drag target adapters regardless if the adapter list is empty
     * 
     * @@see org.eclipse.gef.ui.parts.AbstractEditPartViewer#removeDropTargetListener(TransferDropTargetListener)
     */
    public void removeDropTargetListener(TransferDropTargetListener listener) {
        getDelegatingDropAdapter().removeDropTargetListener(listener);
        refreshDropTargetAdapter();
    }

    /**
     * Overriden to also flush pending selection events to account for OS
     * diffences, since we are firing selection change events asynchronously.
     */
    public void flush() {
        super.flush();
        if (selectionEventPending) {
            flushSelectionEvents(getSelection());
        }

    }

    /**
     * For performance reasons, we fire the event asynchronously
     */
    protected void fireSelectionChanged() {
        if (selectionEventPending)
            return;
        selectionEventPending = true;
        Display display = PlatformUI.getWorkbench().getDisplay();
        if (display != null) {
            display.asyncExec(new Runnable() {

                public void run() {
                    flushSelectionEvents(getSelection());
                }
            });
        }
    }

    /**
     * flush the selection events
     * 
     * @@param sel
     */
    protected void flushSelectionEvents(ISelection sel) {
        selectionEventPending = false;
        SelectionChangedEvent event = new SelectionChangedEvent(this, sel);

        // avoid exceptions caused by selectionChanged
        // modifiying selectionListeners
        Object[] array = selectionListeners.toArray();

        for (int i = 0; i < array.length; i++) {
            ISelectionChangedListener l = (ISelectionChangedListener) array[i];
            if (selectionListeners.contains(l))
                l.selectionChanged(event);
        }
    }

    private void fireEmptySelection() {
        if (selectionEventPending)
            return;
        selectionEventPending = true;
        Display display = PlatformUI.getWorkbench().getDisplay();
        if (display != null) {
            display.asyncExec(new Runnable() {

                public void run() {
                    flushSelectionEvents(getSelection());
                    flushSelectionEvents(StructuredSelection.EMPTY);
                }
            });
        }
    }

    /**
     * @@see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#getDiagramEditDomain()
     */
    public IDiagramEditDomain getDiagramEditDomain() {
        return (IDiagramEditDomain) getEditDomain();
    }

    /**
     * @@see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#findEditPartsForElement(java.lang.String,
     *      java.lang.Class)
     */
    public List findEditPartsForElement(String elementIdStr, Class editPartClass) {
        return elementToEditPartsMap.findEditPartsForElement(elementIdStr,
            editPartClass);
    }

    /**
     * @@see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#registerEditPartForElement(java.lang.String,
     *      org.eclipse.gef.EditPart)
     */
    public void registerEditPartForElement(String elementIdStr, EditPart ep) {
        elementToEditPartsMap.registerEditPartForElement(elementIdStr, ep);
    }

    /**
     * @@see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#unregisterEditPartForElement(java.lang.String,
     *      org.eclipse.gef.EditPart)
     */
    public void unregisterEditPartForElement(String elementIdStr, EditPart ep) {
        elementToEditPartsMap.unregisterEditPartForElement(elementIdStr, ep);
    }

    /** The work space preference store */
    private IPreferenceStore workspacePreferenceStore;

    private boolean initializing;

    /**
     * The editor manages the workspaces preferences store. So viewers not using
     * a editor do not need to create a preference store. This method provides a
     * hook for clients requiring access to the preference store.
     * 
     * @@param store
     */
    public void hookWorkspacePreferenceStore(IPreferenceStore store) {
        this.workspacePreferenceStore = store;
    }

    /**
     * Returns the workspace preference store managed by the
     * <code>DiagramEditor</code>, if one is being used. May return null.
     * 
     * @@return the work space preference store
     */
    public IPreferenceStore getWorkspaceViewerPreferenceStore() {
        return workspacePreferenceStore;
    }

    /**
     * Gets the resource manager to remember the resources allocated for this
     * graphical viewer. All resources will be disposed when the graphical
     * viewer is closed if they have not already been disposed.
     */
    public final ResourceManager getResourceManager() {
        return resourceManager;
    }
    
    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.gef.ui.parts.AbstractEditPartViewer#unhookControl()
     */
    protected void unhookControl() {
        fireEmptySelection();
        super.unhookControl();
        
        if (resourceManager != null) {
            resourceManager.dispose();
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.gef.ui.parts.AbstractEditPartViewer#setContents(org.eclipse.gef.EditPart)
     */
    public void setContents(EditPart editpart) {
        initializing = true;
        try {
            super.setContents(editpart);
        } finally {
            initializing = false;
        }
    }

    /**
     * checks if the viewer is still in the process of initializing itself
     * 
     * @@return true if initializing; false if the initializing process is
     *         finished
     */
    public boolean isInitializing() {
        return initializing;
    }
}@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d324 2
d369 24
a392 2
    
    
@


1.7
log
@bugzilla 140488 gmf-head sshaw 060512 Adding shapes to a diagarm on a different thread makes diagram unusable
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d22 3
d44 6
d196 5
d345 9
d362 4
d367 2
@


1.7.2.1
log
@Bugzilla#146289 gmf_R1_0_maintenance cmahoney 060714 DiagramFontRegistry appears to be a permanent resource leak
@
text
@a21 3
import org.eclipse.jface.resource.JFaceResources;
import org.eclipse.jface.resource.LocalResourceManager;
import org.eclipse.jface.resource.ResourceManager;
a40 6
     * Resource manager to remember the resources allocated for this graphical
     * viewer.
     */
    private ResourceManager resourceManager;
    
    /**
a186 5
        
        if (resourceManager == null) {
            resourceManager = new LocalResourceManager(JFaceResources
                .getResources());
        }          
a330 9
    /**
     * Gets the resource manager to remember the resources allocated for this
     * graphical viewer. All resources will be disposed when the graphical
     * viewer is closed if they have not already been disposed.
     */
    public final ResourceManager getResourceManager() {
        return resourceManager;
    }
    
a338 4
        
        if (resourceManager != null) {
            resourceManager.dispose();
        }
a339 2
    
    
@


1.7.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.6
log
@bugzilla 140014 gmf-head mmostafa 060503 Edit Parts error when semantic events come from non-UI threads.
@
text
@d59 7
d90 2
a91 1
        public void setDisableUpdates(boolean disableUpdates) {
d93 2
a94 2
            if (!disableUpdates) {
                queueWork();
@


1.5
log
@bugzilla 137937 gmf-head sshaw 060421 Adding shapes to a diagarm on a different thread causes diagram not to refresh
@
text
@d220 1
a220 1
        Display display = Display.getCurrent();
d255 1
a255 1
        Display display = Display.getCurrent();
@


1.4
log
@bugzilla 125197 gmf-head sshaw 060405 DeferredUpdateManager not thread safe...

adopt GEF changes
@
text
@d109 8
@


1.3
log
@bugzilla 124678 gmf-head sshaw 060126 DeferredLayoutCommand needs to be thread safe
@
text
@a30 1

d33 1
a33 1
 *
a38 113
		
	/**
	 * Constructor
	 */
	public DiagramGraphicalViewer() {
		super();
	}
	
	/**
	 * @@param enable <code>boolean</code> <code>true</code> if client wishes to disable
	 * updates on the figure canvas, <code>false</code> indicates normal updates are
	 * to take place.
	 */
	public void enableUpdates(boolean enable) {
		if (enable)
			getLightweightSystemWithUpdateToggle().enableUpdates();
		else
			getLightweightSystemWithUpdateToggle().disableUpdates();	
	}
	
	private class ToggleUpdateManager extends DeferredUpdateManager {

		private boolean disableUpdates = false;
		
		/**
		 * @@return the disableUpdates
		 */
		public boolean shouldDisableUpdates() {
			return disableUpdates;
		}

		/**
		 * @@param disableUpdates the disableUpdates to set
		 */
		public void setDisableUpdates(boolean disableUpdates) {
			this.disableUpdates = disableUpdates;
			if (!disableUpdates) {
				PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
					/*
					 * (non-Javadoc)
					 * 
					 * @@see java.lang.Runnable#run()
					 */
					public void run() {
						queueWork();
					}
				});
			}
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.draw2d.DeferredUpdateManager#performUpdate()
		 */
		public synchronized void performUpdate() {
			if (!shouldDisableUpdates())
				super.performUpdate();
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.draw2d.DeferredUpdateManager#performValidation()
		 */
		public void performValidation() {
			if (!shouldDisableUpdates())
				super.performValidation();
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.draw2d.DeferredUpdateManager#queueWork()
		 */
		public void queueWork() {
			if (!shouldDisableUpdates())
				super.queueWork();
		}
	}

	private class LightweightSystemWithUpdateToggle extends LightweightSystem {
		
		/* 
		 * (non-Javadoc)
		 * @@see org.eclipse.draw2d.LightweightSystem#getUpdateManager()
		 */
		public ToggleUpdateManager getToggleUpdateManager() {
			return (ToggleUpdateManager)getUpdateManager();
		}
		
		/**
		 * disable updates on the figure canvas
		 */
		public void disableUpdates() {
			getToggleUpdateManager().setDisableUpdates(true);
		}
		
		/**
		 * allow updates on the figure canvas to occcur
		 */
		public void enableUpdates() {
			getToggleUpdateManager().setDisableUpdates(false);
		}
	}
	
	private LightweightSystemWithUpdateToggle getLightweightSystemWithUpdateToggle() {
		return (LightweightSystemWithUpdateToggle)getLightweightSystem();
	}
	
	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.gef.ui.parts.GraphicalViewerImpl#createLightweightSystem()
	 */
	protected LightweightSystem createLightweightSystem() {
		LightweightSystem lws = new LightweightSystemWithUpdateToggle();
		lws.setUpdateManager(new ToggleUpdateManager());
		return lws;
	}
d40 6
d47 107
a153 1
	/**
d159 2
a160 2
     * A registry of editparts on the diagram, mapping an element's id string
     * to a list of <code>EditParts</code>.  
d162 1
a162 2
    private ElementToEditPartsMap elementToEditPartsMap =
        new ElementToEditPartsMap();
d166 1
d175 1
d185 1
d194 2
a195 2
     * Overriden to also flush pending selection events to account for 
     * OS diffences, since we are firing selection change events asynchronously.
d215 1
d225 1
d230 1
a230 2
        SelectionChangedEvent event =
            new SelectionChangedEvent(this, sel);
d232 1
a232 1
        // avoid exceptions caused by selectionChanged 
d237 1
a237 1
            ISelectionChangedListener l = (ISelectionChangedListener)array[i];
d242 1
a242 1
    
d250 1
d258 1
a258 1
    
d263 1
a263 1
        return (IDiagramEditDomain)getEditDomain();
d267 2
a268 1
     * @@see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#findEditPartsForElement(java.lang.String, java.lang.Class)
d270 2
a271 5
    public List findEditPartsForElement(
        String elementIdStr,
        Class editPartClass) {
        return elementToEditPartsMap.findEditPartsForElement(
            elementIdStr,
d276 2
a277 1
     * @@see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#registerEditPartForElement(java.lang.String, org.eclipse.gef.EditPart)
d284 2
a285 1
     * @@see org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer#unregisterEditPartForElement(java.lang.String, org.eclipse.gef.EditPart)
d287 1
a287 3
    public void unregisterEditPartForElement(
        String elementIdStr,
        EditPart ep) {
d291 33
a323 33
	
	/** The work space preference store */
	private IPreferenceStore workspacePreferenceStore;
	
	
	/**
	 * The editor manages the workspaces preferences store. So viewers not using a editor
	 * do not need to create a preference store.  This method provides a hook for clients
	 * requiring access to the preference store.
	 * 
	 * @@param store
	 */
	public void hookWorkspacePreferenceStore(IPreferenceStore store) {
		this.workspacePreferenceStore = store;
	}
	
	/**
	 * Returns the workspace preference store managed by the <code>DiagramEditor</code>,
	 * if one is being used. May return null.
	 * 
	 * @@return the work space preference store
	 */
	public IPreferenceStore getWorkspaceViewerPreferenceStore() {
		return workspacePreferenceStore;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.ui.parts.AbstractEditPartViewer#unhookControl()
	 */
	protected void unhookControl() {
		fireEmptySelection();
		super.unhookControl();
	}
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d16 2
d20 1
d29 1
a29 2

import org.eclipse.gmf.runtime.diagram.ui.internal.parts.ElementToEditPartsMap;
d48 66
d115 41
a155 1
    /**
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

