head	1.16;
access;
symbols
	v20081023-2107:1.16
	v20081022-1925:1.16
	v20081022-1005:1.16
	v20081020-0700:1.16
	v20080917-1925:1.16
	v20080916-2008:1.16
	v20080911-1728:1.16
	v20080911-1506:1.16
	v20080910-1520:1.16
	v20080910-1510:1.16
	v20080903-1520:1.16
	v20080903-1510:1.16
	v20080813-1510:1.16
	v20080811-1546:1.16
	v20080731-1520:1.16
	v20080725-1738:1.16
	v20080723-2246:1.16
	v20080723-2232:1.16
	v20080723-1700:1.16
	v20080722-1827:1.16
	v20080718-1700:1.16
	v20080718-1731:1.16
	v20080716-1600:1.16
	v20080716-1642:1.16
	R2_1_maintenance:1.16.0.2
	Root_R2_1_maintenance:1.16
	R2_1_0:1.16
	v20080610-1132:1.16
	v20080603-1553:1.16
	v20080527-1255:1.16
	v20080527-1151:1.12
	v20080516-1748:1.16
	v20080516-1143:1.16
	v20080512-1200:1.16
	v20080503-1740:1.16
	v20080501-2127:1.12
	v20080501-1739:1.16
	m20080429-1543:1.12
	v20080425-1959:1.16
	v20080417-1610:1.15
	v20080407-2250:1.15
	v20080407-0930:1.15
	v20080404-1111:1.15
	v20080328-1605:1.15
	v20080322-0000:1.14
	v20080222-1200:1.14
	v20080201-2010:1.14
	v20080201-0201:1.12
	v20080118-1129:1.12
	v20080114-2222:1.12
	v20080114-1111:1.13
	v20080107-1111:1.13
	v20071222-1111:1.13
	v20071214-1111:1.13
	v20071130-1111:1.13
	v20071124-0000:1.12
	v20071112-0000:1.12
	v20071108-0000:1.12
	v20071003-0000:1.12
	v20070915-0000:1.12
	v20070903-0000:1.12
	v20070809-0000:1.12
	R2_0_maintenance:1.12.0.4
	R2_0:1.12
	R4_20:1.12
	v20070621-0000:1.12
	RC3_20:1.12
	v20070614-1400:1.12
	v20070608-1300:1.12
	v20070605-1400:1.12
	v20070601-1400:1.12
	v20070525-1500:1.12
	v20070518-1300:1.12
	bugzilla111892_group_support:1.12.0.2
	Root_bugzilla111892_group_support:1.12
	v20070504-1000:1.12
	v20070420-1000:1.12
	v20070413-1300:1.12
	v20070330-1300:1.12
	v20060330-1300:1.12
	v20070322-1100:1.12
	v20060316-0600:1.12
	v20070221-1500:1.12
	v20070208-1800:1.12
	v20070202-0200:1.11.2.2
	v20070119-1200:1.11.2.2
	v20070111-0800:1.11.2.2
	v20070105-1200:1.11.2.2
	v20070103-0300:1.12
	M4_20:1.12
	v20061218-1500:1.11.2.2
	v20061218-1200:1.12
	v20061214-0000:1.12
	M3_20:1.12
	v20061117-0800:1.12
	v20061027-1200:1.11.2.2
	v20061013-1330:1.12
	v20061012-1100:1.11.2.2
	v20060925-1700:1.11.2.2
	v20060919-0800:1.11.2.2
	v20060907-1100:1.11.2.1
	M1_20:1.11
	v20060831-1500:1.11.2.1
	v20060824-1600:1.11.2.1
	v20060817-1500:1.11.2.1
	v20060810-1700:1.11.2.1
	v20060803-1200:1.11.2.1
	v20060728-0500:1.11.2.1
	v20060721-1130:1.11
	v20060713-1700:1.11
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	v20060627-1200:1.11
	v20060616-1400:1.11
	v20060616-1200:1.11
	v20060609-1400:1.10
	v20060531-1730:1.10
	v20060530-1930:1.10
	v20060526-1200:1.10
	v20060519-0800:1.9
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.7
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.7
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.3;
locks; strict;
comment	@# @;


1.16
date	2008.04.25.18.39.38;	author ahunter;	state Exp;
branches;
next	1.15;
commitid	2698481225694567;

1.15
date	2008.03.28.21.54.55;	author ahunter;	state Exp;
branches;
next	1.14;
commitid	713047ed692e4567;

1.14
date	2008.01.28.20.36.35;	author ahunter;	state Exp;
branches;
next	1.13;
commitid	2f9479e3cd24567;

1.13
date	2007.11.21.17.57.28;	author crevells;	state Exp;
branches;
next	1.12;
commitid	4a12474471874567;

1.12
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2006.06.14.18.39.49;	author ahunter;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2006.05.25.20.28.34;	author cmahoney;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.17.14.00.26;	author ldamus;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.15.47.23;	author sshaw;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.28.02.30.51;	author cmahoney;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.25.19.38.12;	author cmahoney;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.02.23.30.16;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.07;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.37;	author sshaw;	state Exp;
branches;
next	;

1.11.2.1
date	2006.07.27.21.36.09;	author mmostafa;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;

1.12.2.1
date	2007.05.18.17.36.43;	author crevells;	state Exp;
branches;
next	;
commitid	1899464de42a4567;


desc
@@


1.16
log
@[228915] gmf-head ahunter 080425 Non-externalized string literal; it should be followed by //$NON-NLS-<n>
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.domain.IEditingDomainProvider;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gef.requests.GroupRequest;
import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IInsertableEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.SemanticListCompartmentEditPart;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;
import org.eclipse.gmf.runtime.diagram.ui.requests.GroupRequestViaKeyboard;
import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialogWithToggle;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.widgets.Display;

/**
 * Concrete class that extends the GEF's <code>ComponentEditPolicy</code>.
 * This edit policy will return a command in response to delete requests.
 * 
 * @@author Vishy Ramaswamy
 */
public class ComponentEditPolicy
	extends org.eclipse.gef.editpolicies.ComponentEditPolicy {
	
	private static final String DELETE_FROM_DIAGRAM_DLG_TITLE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Title;

	private static final String DELETE_FROM_DIAGRAM_DLG_MESSAGE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Message;

	private static final String DELETE_FROM_MODEL_DLG_TOGGLE_LABEL = DiagramUIMessages.MessageDialogWithToggle_DoNotPromptAgainToggle_label; 	


	/**
	 * Returns a delete command to honour the supplied request.  
	 * Calls {@@link #createDeleteSemanticCommand(GroupRequest)} if 
	 * {@@link #shouldDeleteSemantic()} returns <tt>true</tt>; othwerise
	 * {@@link #createDeleteViewCommand(GroupRequest)} is called.
	 * @@see org.eclipse.gef.editpolicies.ComponentEditPolicy#createDeleteCommand(GroupRequest)
	 */
	protected final Command createDeleteCommand(GroupRequest deleteRequest) {

		if (shouldDeleteSemantic()){
			return createDeleteSemanticCommand(deleteRequest);
		}
		if (deleteRequest instanceof GroupRequestViaKeyboard) {
			boolean shouldShowPrompt = ((GroupRequestViaKeyboard) deleteRequest)
				.isShowInformationDialog();
			if (shouldShowPrompt) {
				((GroupRequestViaKeyboard) deleteRequest)
					.setShowInformationDialog(false);
				if (showPrompt() == false) {
					return UnexecutableCommand.INSTANCE;
				}
			}
		}
		return createDeleteViewCommand(deleteRequest);
		
	}

	/**
	 * Return <tt>true</tt> if the host element should delete its semantic
	 * element; otherwise <tt>false</tt> to delete its view. A <tt>true</tt>
	 * return value implies that the host's parent is using a canonical
	 * model manager.
	 * @@return true or false
	 */
	protected boolean shouldDeleteSemantic() {
		EditPart parent = getHost().getParent();
        if (parent instanceof SemanticListCompartmentEditPart){
            SemanticListCompartmentEditPart semListCompartment  = 
                (SemanticListCompartmentEditPart)parent;
            return semListCompartment.isCanonicalOn();
            
        } else {

            // If the parent is a group, then we want to get the first parent
            // that isn't a group and test for a canonical editpolicy there.
            while (parent instanceof GroupEditPart) {
                parent = parent.getParent();
            }
        }
        
        EObject eObject = (EObject)getHost().getAdapter(EObject.class);
        if (eObject != null && parent != null ) { //sanity checks
			CanonicalEditPolicy cep = (CanonicalEditPolicy)parent.getEditPolicy(EditPolicyRoles.CANONICAL_ROLE);
			return cep != null 
				&& cep.isEnabled()
				&& cep.canCreate(eObject); 					
		} 	
		return false;
	}

	/** 
	 * Return a command to delete the host's view.  The host's primary view
	 * is deleted if {@@link GroupRequest#getEditParts()} returns a 
	 * <tt>null</tt> or empty list; otherwise each editpart's view is 
	 * deleted.
	 * @@param deleteRequest the original delete request.
	 * @@return Command
	 */
	protected Command createDeleteViewCommand(GroupRequest deleteRequest) {
		CompositeCommand cc = new CompositeCommand(StringStatics.BLANK);

        TransactionalEditingDomain editingDomain = getEditingDomain();
		if (editingDomain == null) {
			return null;
		}
		List toDel = deleteRequest.getEditParts();
		if (toDel == null || toDel.isEmpty()) {
			cc.compose(new DeleteCommand(editingDomain, (View) getHost()
				.getModel()));
		} else {
			for (int i = 0; i < toDel.size(); i++) {
				IGraphicalEditPart gep = (IGraphicalEditPart) toDel.get(i);
				cc.compose(new DeleteCommand(editingDomain, (View) gep
					.getModel()));
			}
		}
		return new ICommandProxy(cc.reduce());
	}

	/**
	 * Return a command to delete the host's semantic elements. This method is
	 * called if the host is canonical.
	 * 
	 * @@see #shouldDeleteSemantic()
	 * @@param deleteRequest
	 *            the original delete request.
	 * @@return Command
	 */
	protected Command createDeleteSemanticCommand(GroupRequest deleteRequest) {
        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
        
           boolean shouldShowPrompt = (deleteRequest instanceof GroupRequestViaKeyboard) ? ((GroupRequestViaKeyboard) deleteRequest)
            .isShowInformationDialog()
            : false;

        EditCommandRequestWrapper editCommandRequest = new EditCommandRequestWrapper(
            new DestroyElementRequest(editingDomain, shouldShowPrompt),
            deleteRequest.getExtendedData());
		
		Command semanticCmd = getHost().getCommand(editCommandRequest);
		if (semanticCmd != null && semanticCmd.canExecute()) {
			CompoundCommand cc = new CompoundCommand();
			cc.add(semanticCmd);
			return cc;
		}
		return createDeleteViewCommand(deleteRequest);
	}

	/**
	 * Returns the view element to be deleted.
	 * @@return the host's primary view element.
	 */
	protected View getView() {
	   if (getHost().getModel() instanceof View &&
			getHost() instanceof GraphicalEditPart){
			GraphicalEditPart ePart = (GraphicalEditPart)getHost();
			return ePart.getPrimaryView();
		}
		return null;
	}
	
		
	/**
	 * Performs the delete action on the selected objects.
	 */
	private boolean showPrompt() {
		boolean prompt = ((IPreferenceStore) ((IGraphicalEditPart) getHost())
			.getDiagramPreferencesHint().getPreferenceStore())
			.getBoolean(IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);
		
		if(prompt) 
			if(showMessageDialog()) 
				return true; 
			else
				return false;
											
		return true;		
		
	}	

	/**
	 * launches the prompting dialogBox on deletion of elements from the diagram for the end user.
	 * 
	 * @@return boolean  true if user pressed YES; false otherwise
	 */
	private boolean showMessageDialog() {	
		MessageDialogWithToggle dialog = MessageDialogWithToggle
			.openYesNoQuestion(Display.getCurrent().getActiveShell(),
				DELETE_FROM_DIAGRAM_DLG_TITLE, DELETE_FROM_DIAGRAM_DLG_MESSAGE,
				DELETE_FROM_MODEL_DLG_TOGGLE_LABEL, false,
				(IPreferenceStore) ((IGraphicalEditPart) getHost())
					.getDiagramPreferencesHint().getPreferenceStore(),
				IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);
		
		if (dialog.getReturnCode() == IDialogConstants.YES_ID) 
			return true;
		else 
			return false;
	}
	
	/**
	 * getInsertableEditPart
	 * Returns the EditPart that can be recipient of the default insert command.
	 * 
	 * @@return IInsertableEditPart 
	 */
	protected IInsertableEditPart getInsertableEditPart() {
		if (getHost() instanceof IInsertableEditPart) {
			return (IInsertableEditPart)getHost();
		}
		
		return null;
	}
	
	/**
	 * getInsertCommand
	 * Returns an creation command to honour the supplied request. 
	 * 
	 * @@param insertRequest
	 * @@return Command that will create the default sementic element responding to insert.
	 */
	protected Command getInsertCommand(GroupRequest insertRequest) {
		IInsertableEditPart insertEP = getInsertableEditPart();
		if (null == insertEP)
			return null;
		
		EObject hostElement = ViewUtil.resolveSemanticElement((View)insertEP.getModel());
		if (hostElement != null) {

            TransactionalEditingDomain editingDomain = getEditingDomain();
            if (editingDomain == null) {
                return null;
            }

            CreateElementRequest theReq = new CreateElementRequest(
                 editingDomain, hostElement, insertEP.getElementType());

            EditCommandRequestWrapper editCommandRequest = new EditCommandRequestWrapper(
                theReq, insertRequest.getExtendedData());
            Command cmd = ((IGraphicalEditPart) getHost())
                .getCommand(editCommandRequest);

            return cmd;
		}
		
		return null;
	}
	
	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.editpolicies.ComponentEditPolicy#getCommand(org.eclipse.gef.Request)
	 */
	public Command getCommand(Request request) {
		if (!(request instanceof GroupRequest))
			return null;
		
		GroupRequest grpRequest = (GroupRequest)request;
		if (grpRequest instanceof GroupRequestViaKeyboard){
			return getDeleteCommand(grpRequest);
		}
		else if (grpRequest.getType().equals(RequestConstants.REQ_INSERT_SEMANTIC)) {
			return getInsertCommand(grpRequest);
		}
		
		return super.getCommand(request);
	}
    
    private TransactionalEditingDomain getEditingDomain() {
         if (getHost() instanceof IGraphicalEditPart) {
            return ((IGraphicalEditPart) getHost()).getEditingDomain();
        } else if (getHost() instanceof IEditingDomainProvider) {
            Object domain = ((IEditingDomainProvider) getHost())
                .getEditingDomain();
            if (domain instanceof TransactionalEditingDomain) {
                return (TransactionalEditingDomain) domain;
            }
        }
        return null;
    }

 }@


1.15
log
@[224706] gmf-head ahunter 080328 IUndoableOperation changes in the platform cause AssertionFailedException
@
text
@d26 1
d133 1
a133 1
		CompositeCommand cc = new CompositeCommand("");
@


1.14
log
@[212195] gmf-head mhanner 080128 [DeleteFromSupport] Allow Delete from Diagram for elements in a container
@
text
@d132 1
a132 1
		CompositeCommand cc = new CompositeCommand(null);
@


1.13
log
@[111892] gmf_head crevells 071121 Group/Ungroup support
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
d113 2
a114 2
        
        if (parent instanceof IGraphicalEditPart) {
d116 3
a118 3
			if ( cep != null ) {
				return cep.isEnabled();						
			} 					
@


1.12
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d30 1
d104 7
d113 1
@


1.12.2.1
log
@[111892] gmf_head crevells 070518 First milestone of group/ungroup support (painting issues when grouping shapes with border items)
@
text
@a29 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
a102 7
        } else {

            // If the parent is a group, then we want to get the first parent
            // that isn't a group and test for a canonical editpolicy there.
            while (parent instanceof GroupEditPart) {
                parent = parent.getParent();
            }
a104 1
        
@


1.11
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003, 2004 IBM Corporation and others.
d32 1
d98 8
a105 1
		if (parent instanceof IGraphicalEditPart) {
@


1.11.2.1
log
@[152036] gmf_R1_0_maintenace mmostafa 060727  Componenet Edit Policy does not consider the semantic list compartment
@
text
@a31 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.SemanticListCompartmentEditPart;
d97 1
a97 8
        if (parent instanceof SemanticListCompartmentEditPart){
            SemanticListCompartmentEditPart semListCompartment  = 
                (SemanticListCompartmentEditPart)parent;
            return semListCompartment.isCanonicalOn();
            
        }
        
        if (parent instanceof IGraphicalEditPart) {
@


1.11.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.10
log
@Bugzilla#120764 gmf_head cmahoney 060525 ComponentEditPolicy doesn't preserve "show delete dialog" parameter
@
text
@d28 1
a28 1
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
d132 1
a132 1
		return new EtoolsProxyCommand(cc.reduce());
@


1.9
log
@[137749] gmf_head ldamus 060517 Transfer GEF Request's extended data into IEditCommandRequest's parameters
@
text
@d147 7
a153 3
		EditCommandRequestWrapper editCommandRequest = new EditCommandRequestWrapper(
				new DestroyElementRequest(editingDomain, false), deleteRequest
						.getExtendedData());
@


1.8
log
@bugzilla 133436 gmf-head sshaw 060328 Remove deprecated reference to MObjectType and MEditingDomain
@
text
@d147 4
a150 2
		EditCommandRequestWrapper editCommandRequest =
			new EditCommandRequestWrapper(new DestroyElementRequest(editingDomain, false));
d250 1
a250 1
                theReq);
@


1.7
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@a36 2
import org.eclipse.gmf.runtime.emf.core.edit.MObjectType;
import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
a73 10
			boolean isModellerElement = false;
			if (getHost() instanceof IGraphicalEditPart) {
				EObject semanticElement = ViewUtil
					.resolveSemanticElement((View) ((IGraphicalEditPart) getHost())
						.getModel());
				if ((semanticElement != null)
					&& (EObjectUtil.getType(semanticElement) == MObjectType.MODELING)) {
					isModellerElement = true;
				}
			}
d76 1
a76 1
			if (shouldShowPrompt && isModellerElement) {
d239 12
a250 14
            MObjectType theMType = EObjectUtil.getType(hostElement);
            if (theMType.equals(MObjectType.MODELING)) {
                TransactionalEditingDomain editingDomain = getEditingDomain();
                if (editingDomain == null) {
                    return null;
                }

                CreateElementRequest theReq = new CreateElementRequest(
                    editingDomain, hostElement, insertEP.getElementType());

                EditCommandRequestWrapper editCommandRequest = new EditCommandRequestWrapper(
                    theReq);
                Command cmd = ((IGraphicalEditPart) getHost())
                    .getCommand(editCommandRequest);
d252 1
a252 2
                return cmd;
            }
@


1.6
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d17 1
d129 4
a132 1
        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
d135 2
a136 1
			cc.compose(new DeleteCommand(editingDomain, (View)getHost().getModel()));
d140 2
a141 1
				cc.compose(new DeleteCommand(editingDomain, (View)gep.getModel()));
d147 2
a148 2
	/** 
	 * Return a command to delete the host's semantic elements.  This method is
d150 1
d152 2
a153 1
	 * @@param deleteRequest the original delete request.
d250 18
a267 14
			
			MObjectType theMType = EObjectUtil.getType(hostElement);
			if (theMType.equals(MObjectType.MODELING)) {
                TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
                
				CreateElementRequest theReq =
						new CreateElementRequest(editingDomain, hostElement, insertEP.getElementType());
					
				EditCommandRequestWrapper editCommandRequest = new EditCommandRequestWrapper(theReq);
				Command cmd =
					((IGraphicalEditPart)getHost()).getCommand(editCommandRequest);
					
				return cmd;
			}
d273 3
a275 1
	/* (non-Javadoc)
d292 13
@


1.5
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d17 1
d128 1
d131 1
a131 1
			cc.compose(new DeleteCommand((View)getHost().getModel()));
d135 1
a135 1
				cc.compose(new DeleteCommand((View)gep.getModel()));
d138 1
a138 1
		return new EtoolsProxyCommand(cc.unwrap());
d149 2
d152 1
a152 1
			new EditCommandRequestWrapper(new DestroyElementRequest(false));
d245 2
d248 1
a248 1
						new CreateElementRequest(hostElement, insertEP.getElementType());
@


1.4
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a22 5
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialogWithToggle;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.widgets.Display;

d25 1
d30 1
a30 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
a34 1
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
d40 4
d54 5
a58 6
	private static final String DELETE_FROM_DIAGRAM_DLG_TITLE = DiagramResourceManager
	.getI18NString("PromptingDeleteAction.DeleteFromDiagramDialog.Title"); //$NON-NLS-1$ 
	private static final String DELETE_FROM_DIAGRAM_DLG_MESSAGE = DiagramResourceManager
	.getI18NString("PromptingDeleteAction.DeleteFromDiagramDialog.Message"); //$NON-NLS-1$ 	
	private static final String DELETE_FROM_MODEL_DLG_TOGGLE_LABEL =DiagramResourceManager
	.getI18NString("MessageDialogWithToggle.DoNotPromptAgainToggle.label"); //$NON-NLS-1$ 	
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a29 1
import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;
d34 2
a35 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d55 1
a55 1
	private static final String DELETE_FROM_DIAGRAM_DLG_TITLE = PresentationResourceManager
d57 1
a57 1
	private static final String DELETE_FROM_DIAGRAM_DLG_MESSAGE = PresentationResourceManager
d59 1
a59 1
	private static final String DELETE_FROM_MODEL_DLG_TOGGLE_LABEL =PresentationResourceManager
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d42 1
a42 1
import com.ibm.xtools.notation.View;
@

