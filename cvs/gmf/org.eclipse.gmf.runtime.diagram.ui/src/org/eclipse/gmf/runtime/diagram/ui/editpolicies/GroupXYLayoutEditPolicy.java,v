head	1.3;
access;
symbols
	v20081023-2107:1.3
	v20081022-1925:1.3
	v20081022-1005:1.3
	v20081020-0700:1.3
	v20080917-1925:1.3
	v20080916-2008:1.3
	v20080911-1728:1.3
	v20080911-1506:1.3
	v20080910-1520:1.3
	v20080910-1510:1.3
	v20080903-1520:1.3
	v20080903-1510:1.3
	v20080813-1510:1.3
	v20080811-1546:1.3
	v20080731-1520:1.3
	v20080725-1738:1.3
	v20080723-2246:1.3
	v20080723-2232:1.3
	v20080723-1700:1.3
	v20080722-1827:1.3
	v20080718-1700:1.3
	v20080718-1731:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080603-1553:1.3
	v20080527-1255:1.3
	v20080516-1748:1.3
	v20080516-1143:1.3
	v20080512-1200:1.3
	v20080503-1740:1.3
	v20080501-1739:1.3
	v20080425-1959:1.3
	v20080417-1610:1.3
	v20080407-2250:1.3
	v20080407-0930:1.3
	v20080404-1111:1.3
	v20080328-1605:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080201-2010:1.3
	v20080114-1111:1.2
	v20080107-1111:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	bugzilla111892_group_support:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2008.01.16.16.51.00;	author crevells;	state Exp;
branches;
next	1.2;
commitid	349478e35f24567;

1.2
date	2007.11.21.17.57.28;	author crevells;	state Exp;
branches;
next	1.1;
commitid	4a12474471874567;

1.1
date	2007.05.18.17.36.44;	author crevells;	state dead;
branches
	1.1.2.1;
next	;
commitid	1899464de42a4567;

1.1.2.1
date	2007.05.18.17.36.44;	author crevells;	state Exp;
branches;
next	;
commitid	1899464de42a4567;


desc
@@


1.3
log
@[215505] gmf_head crevells 080116 Should be able to right-click a Circuit and arrange contents of its compartment
@
text
@/******************************************************************************
 * Copyright (c) 2007, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.Iterator;

import org.eclipse.gef.EditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.requests.ChangeBoundsRequest;
import org.eclipse.gmf.runtime.diagram.core.commands.UpdateGroupLocationCommand;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
import org.eclipse.gmf.runtime.notation.View;

/**
 * A <code>XYLayoutEditPolicy</code> for a <code>GroupEditPart</code>.
 * 
 * @@author crevells
 * @@since 2.1
 */
public class GroupXYLayoutEditPolicy
    extends XYLayoutEditPolicy {

    public boolean understandsRequest(Request req) {
        if (RequestConstants.REQ_AUTOSIZE.equals(req.getType())) {
            return true;
        }
        return super.understandsRequest(req);
    }

    public Command getCommand(Request request) {
        if (RequestConstants.REQ_AUTOSIZE.equals(request.getType()))
            return getCommandFromChildren(request);
        return super.getCommand(request);
    }

    /**
     * Overridden so that if a child shape is moved or resized such that the
     * group's location (i.e. top left corner) changes, the group's location as
     * well as all the children's relative locations are updated.
     */
    protected Command getResizeChildrenCommand(ChangeBoundsRequest request) {
        CompoundCommand resize = new CompoundCommand();
        resize.add(super.getResizeChildrenCommand(request));
        resize.add(new ICommandProxy(new UpdateGroupLocationCommand(
            ((IGraphicalEditPart) getHost()).getEditingDomain(),
            (View) getHost().getModel())));
        return resize;
    }

    public EditPart getTargetEditPart(Request request) {
        if (REQ_CREATE.equals(request.getType())) {
            return null;
        } else if (RequestConstants.REQ_AUTOSIZE.equals(request.getType())) {
            return getHost();
        }
        return super.getTargetEditPart(request);
    }

    /**
     * Gets a command from each child in the group.
     * 
     * @@param request
     * @@return the compound command
     */
    private Command getCommandFromChildren(Request request) {
        CompoundCommand cc = new CompoundCommand();
        for (Iterator iter = getHost().getChildren().iterator(); iter.hasNext();) {
            EditPart childEP = (EditPart) iter.next();
            cc.add(childEP.getCommand(request));
        }
        cc.unwrap();
        return cc;
    }

}
@


1.2
log
@[111892] gmf_head crevells 071121 Group/Ungroup support
@
text
@d2 1
a2 1
 * Copyright (c) 2007 IBM Corporation and others.
a15 4
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.PrecisionRectangle;
import org.eclipse.draw2d.geometry.Rectangle;
a16 1
import org.eclipse.gef.GraphicalEditPart;
a20 1
import org.eclipse.gef.requests.CreateRequest;
a23 1
import org.eclipse.gmf.runtime.diagram.ui.figures.LayoutHelper;
@


1.1
log
@file GroupXYLayoutEditPolicy.java was initially added on branch bugzilla111892_group_support.
@
text
@d1 95
@


1.1.2.1
log
@[111892] gmf_head crevells 070518 First milestone of group/ungroup support (painting issues when grouping shapes with border items)
@
text
@a0 87
/******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.Iterator;

import org.eclipse.gef.EditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.requests.ChangeBoundsRequest;
import org.eclipse.gmf.runtime.diagram.core.internal.commands.AdjustGroupLocationCommand;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
import org.eclipse.gmf.runtime.notation.View;

/**
 * A <code>XYLayoutEditPolicy</code> for a <code>GroupEditPart</code>.
 * 
 * @@author crevells
 */
public class GroupXYLayoutEditPolicy
    extends XYLayoutEditPolicy {

    public boolean understandsRequest(Request req) {
        if (RequestConstants.REQ_AUTOSIZE.equals(req.getType())) {
            return true;
        }
        return super.understandsRequest(req);
    }

    public Command getCommand(Request request) {
        if (RequestConstants.REQ_AUTOSIZE.equals(request.getType()))
            return getCommandFromChildren(request);
        return super.getCommand(request);
    }

    /**
     * Overridden so that if a child shape is moved or resized such that the
     * group's location (i.e. top left corner) changes, the group's location as
     * well as all the children's relative locations are updated.
     */
    protected Command getResizeChildrenCommand(ChangeBoundsRequest request) {
        CompoundCommand resize = new CompoundCommand();
        resize.add(super.getResizeChildrenCommand(request));
        resize.add(new ICommandProxy(new AdjustGroupLocationCommand(
            ((IGraphicalEditPart) getHost()).getEditingDomain(),
            (View) getHost().getModel())));
        return resize;
    }

    public EditPart getTargetEditPart(Request request) {
        if (REQ_CREATE.equals(request.getType())) {
            return null;
        } else if (RequestConstants.REQ_AUTOSIZE.equals(request.getType())) {
            return getHost();
        }
        return super.getTargetEditPart(request);
    }

    /**
     * Gets a command from each child in the group.
     * 
     * @@param request
     * @@return the compound command
     */
    private Command getCommandFromChildren(Request request) {
        CompoundCommand cc = new CompoundCommand();
        for (Iterator iter = getHost().getChildren().iterator(); iter.hasNext();) {
            EditPart childEP = (EditPart) iter.next();
            cc.add(childEP.getCommand(request));
        }
        cc.unwrap();
        return cc;
    }

}
@

