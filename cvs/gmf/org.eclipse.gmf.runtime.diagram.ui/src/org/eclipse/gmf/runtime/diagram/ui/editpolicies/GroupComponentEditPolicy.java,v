head	1.2;
access;
symbols
	v20081023-2107:1.2
	v20081022-1925:1.2
	v20081022-1005:1.2
	v20081020-0700:1.2
	v20080917-1925:1.2
	v20080916-2008:1.2
	v20080911-1728:1.2
	v20080911-1506:1.2
	v20080910-1520:1.2
	v20080910-1510:1.2
	v20080903-1520:1.2
	v20080903-1510:1.2
	v20080813-1510:1.2
	v20080811-1546:1.2
	v20080731-1520:1.2
	v20080725-1738:1.2
	v20080723-2246:1.2
	v20080723-2232:1.2
	v20080723-1700:1.2
	v20080722-1827:1.2
	v20080718-1700:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.2
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080603-1553:1.2
	v20080527-1255:1.2
	v20080516-1748:1.2
	v20080516-1143:1.2
	v20080512-1200:1.2
	v20080503-1740:1.2
	v20080501-1739:1.2
	v20080425-1959:1.2
	v20080417-1610:1.2
	v20080407-2250:1.2
	v20080407-0930:1.2
	v20080404-1111:1.2
	v20080328-1605:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20080201-2010:1.2
	v20080114-1111:1.2
	v20080107-1111:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	bugzilla111892_group_support:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.11.21.17.57.28;	author crevells;	state Exp;
branches;
next	1.1;
commitid	4a12474471874567;

1.1
date	2007.05.18.17.36.43;	author crevells;	state dead;
branches
	1.1.2.1;
next	;
commitid	1899464de42a4567;

1.1.2.1
date	2007.05.18.17.36.43;	author crevells;	state Exp;
branches;
next	;
commitid	1899464de42a4567;


desc
@@


1.2
log
@[111892] gmf_head crevells 071121 Group/Ungroup support
@
text
@/******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.Iterator;

import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.requests.GroupRequest;
import org.eclipse.gmf.runtime.diagram.core.commands.UngroupCommand;
import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;
import org.eclipse.gmf.runtime.diagram.ui.requests.GroupRequestViaKeyboard;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.notation.Node;

/**
 * A <code>ComponentEditPolicy</code> for a <code>GroupEditPart</code>.
 * 
 * @@author crevells
 * @@since 2.1
 */
public class GroupComponentEditPolicy
    extends ComponentEditPolicy {

    public boolean understandsRequest(Request request) {
        if (ActionIds.ACTION_UNGROUP.equals(request.getType())) {
            return true;
        }
        return super.understandsRequest(request);
    }

    public Command getCommand(Request request) {
        if (ActionIds.ACTION_UNGROUP.equals(request.getType())) {
            return getUngroupCommand(request);
        }
        return super.getCommand(request);
    }

    public EditPart getTargetEditPart(Request request) {
        return understandsRequest(request) ? getHost()
            : null;
    }

    /**
     * Returns a command to ungroup and then delete the group in the request.
     * 
     * @@param request
     *            the request containing the group to be ungrouped
     * @@return the command to perform the ungrouping
     */
    protected Command getUngroupCommand(Request request) {
        UngroupCommand cmd = new UngroupCommand(((GroupEditPart) getHost())
            .getEditingDomain(), (Node) getHost().getModel());
        return new ICommandProxy(cmd);
    }

    /**
     * Override to delete the group's children's semantic elements.
     */
    protected Command createDeleteSemanticCommand(GroupRequest deleteRequest) {
        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
            .getEditingDomain();

        boolean shouldShowPrompt = (deleteRequest instanceof GroupRequestViaKeyboard) ? ((GroupRequestViaKeyboard) deleteRequest)
            .isShowInformationDialog()
            : false;

        EditCommandRequestWrapper editCommandRequest = new EditCommandRequestWrapper(
            new DestroyElementRequest(editingDomain, shouldShowPrompt),
            deleteRequest.getExtendedData());

        CompoundCommand cc = new CompoundCommand();
        for (Iterator iter = ((GroupEditPart) getHost()).getShapeChildren()
            .iterator(); iter.hasNext();) {
            IGraphicalEditPart childEP = (IGraphicalEditPart) iter.next();
            Command semanticCmd = childEP.getCommand(editCommandRequest);
            if (semanticCmd != null && semanticCmd.canExecute()) {
                cc.add(semanticCmd);
            }
        }

        if (!cc.isEmpty()) {
            cc.add(createDeleteViewCommand(deleteRequest));
            return cc;
        }

        return createDeleteViewCommand(deleteRequest);
    }

}
@


1.1
log
@file GroupComponentEditPolicy.java was initially added on branch bugzilla111892_group_support.
@
text
@d1 106
@


1.1.2.1
log
@[111892] gmf_head crevells 070518 First milestone of group/ungroup support (painting issues when grouping shapes with border items)
@
text
@a0 103
/******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.Iterator;

import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.requests.GroupRequest;
import org.eclipse.gmf.runtime.diagram.core.commands.UngroupCommand;
import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;
import org.eclipse.gmf.runtime.diagram.ui.requests.GroupRequestViaKeyboard;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.notation.Node;

/**
 * A <code>ComponentEditPolicy</code> for a <code>GroupEditPart</code>.
 * 
 * @@author crevells
 */
public class GroupComponentEditPolicy
    extends ComponentEditPolicy {


    public boolean understandsRequest(Request request) {
        if (ActionIds.ACTION_UNGROUP.equals(request.getType())) {
            return true;
        }
        return super.understandsRequest(request);
    }
    
    public Command getCommand(Request request) {
        if (ActionIds.ACTION_UNGROUP.equals(request.getType())) {
            return getUngroupCommand(request);
        }
        return super.getCommand(request);
    }

    public EditPart getTargetEditPart(Request request) {
        return understandsRequest(request) ? getHost()
            : null;
    }
    
    /**
     * Returns a command to ungroup and then delete the group in the request.
     * 
     * @@param request
     *            the request containing the group to be ungrouped
     * @@return the command to perform the ungrouping
     */
    protected Command getUngroupCommand(Request request) {
        UngroupCommand cmd = new UngroupCommand(((GroupEditPart) getHost())
            .getEditingDomain(), (Node) getHost().getModel());
        return new ICommandProxy(cmd);
    }
    
    protected Command createDeleteSemanticCommand(GroupRequest deleteRequest) {
        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
            .getEditingDomain();

        boolean shouldShowPrompt = (deleteRequest instanceof GroupRequestViaKeyboard) ? ((GroupRequestViaKeyboard) deleteRequest)
            .isShowInformationDialog()
            : false;

        EditCommandRequestWrapper editCommandRequest = new EditCommandRequestWrapper(
            new DestroyElementRequest(editingDomain, shouldShowPrompt),
            deleteRequest.getExtendedData());

        CompoundCommand cc = new CompoundCommand();
        for (Iterator iter = ((GroupEditPart) getHost()).getFlattenedChildren()
            .iterator(); iter.hasNext();) {
            IGraphicalEditPart childEP = (IGraphicalEditPart) iter.next();
            Command semanticCmd = childEP.getCommand(editCommandRequest);
            if (semanticCmd != null && semanticCmd.canExecute()) {
                cc.add(semanticCmd);
            }
        }

        if (!cc.isEmpty()) {
            cc.add(createDeleteViewCommand(deleteRequest));
            return cc;
        }

        return createDeleteViewCommand(deleteRequest);
    }

}
@

