head	1.2;
access;
symbols
	v20081023-2107:1.2
	v20081022-1925:1.2
	v20081022-1005:1.2
	v20081020-0700:1.2
	v20080917-1925:1.2
	v20080916-2008:1.2
	v20080911-1728:1.2
	v20080911-1506:1.2
	v20080910-1520:1.2
	v20080910-1510:1.2
	v20080903-1520:1.2
	v20080903-1510:1.2
	v20080813-1510:1.2
	v20080811-1546:1.2
	v20080731-1520:1.2
	v20080725-1738:1.2
	v20080723-2246:1.2
	v20080723-2232:1.2
	v20080723-1700:1.2
	v20080722-1827:1.2
	v20080718-1700:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080603-1553:1.2
	v20080527-1255:1.2
	v20080527-1151:1.2
	v20080516-1748:1.2
	v20080516-1143:1.2
	v20080512-1200:1.2
	v20080503-1740:1.2
	v20080501-2127:1.2
	v20080501-1739:1.2
	m20080429-1543:1.2
	v20080425-1959:1.2
	v20080417-1610:1.2
	v20080407-2250:1.2
	v20080407-0930:1.2
	v20080404-1111:1.2
	v20080328-1605:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20080201-2010:1.2
	v20080201-0201:1.2
	v20080118-1129:1.2
	v20080114-2222:1.2
	v20080114-1111:1.2
	v20080107-1111:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071112-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070915-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070614-1400:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070518-1300:1.2
	bugzilla111892_group_support:1.2.0.2
	Root_bugzilla111892_group_support:1.2
	v20070504-1000:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070202-0200:1.1.2.1
	v20070119-1200:1.1.2.1
	v20070111-0800:1.1.2.1
	v20070105-1200:1.1.2.1
	v20070103-0300:1.2
	M4_20:1.2
	v20061218-1500:1.1.2.1
	v20061218-1200:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061027-1200:1.1.2.1
	v20061013-1330:1.2
	v20061012-1100:1.1.2.1
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	v20060907-1100:1.1.2.1
	M1_20:1.1
	v20060831-1500:1.1.2.1
	v20060824-1600:1.1.2.1
	v20060817-1500:1.1.2.1
	v20060810-1700:1.1.2.1
	v20060803-1200:1.1.2.1
	v20060728-0500:1.1.2.1
	v20060721-1130:1.1.2.1
	v20060713-1700:1.1.2.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1400:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060202-1415:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.07.19.21.25;	author sshaw;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.07.06.17.25.55;	author cmahoney;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies;

import org.eclipse.draw2d.MouseEvent;
import org.eclipse.draw2d.MouseMotionListener;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.editpolicies.AbstractEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.TopGraphicEditPart;

/**
 * This editpolicy forwards all mouse events to the editpolicy installed on its
 * nearest parent. The editpolicy to delegate to must implement the
 * <code>MouseMotionListener</code> interface.
 * 
 * @@author cmahoney
 */
public class DelegatingMouseEventsEditPolicy
    extends AbstractEditPolicy
    implements MouseMotionListener {

    /** The editpolicy role used to retrieve the editpolicy from the parent. */
    private final String editPolicyRole;

    /**
     * Creates a new instance.
     * 
     * @@param editPolicyRole
     *            The editpolicy role used to retrieve the editpolicy from the
     *            parent.
     */
    public DelegatingMouseEventsEditPolicy(String editPolicyRole) {
        super();
        this.editPolicyRole = editPolicyRole;
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.gef.EditPolicy#activate()
     */
    public void activate() {
        super.activate();

        ((IGraphicalEditPart) getHost()).getFigure().addMouseMotionListener(
            this);
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.gef.EditPolicy#deactivate()
     */
    public void deactivate() {
        ((IGraphicalEditPart) getHost()).getFigure().removeMouseMotionListener(
            this);

        super.deactivate();
    }

    /**
     * Traverses the parent editpart hierarchy to find the first parent with an
     * editpolicy of the appropriate role installed that implements the
     * <code>MouseMotionListener</code> interface. Stops if a parent is a
     * <code>TopGraphicEditPart</code>.
     * 
     * @@return the parent editpolicy role or null if none was found
     */
    private EditPolicy getParentEditPolicy() {
        EditPart parentEP = getHost().getParent();
        while (parentEP != null) {
            EditPolicy editPolicy = parentEP.getEditPolicy(editPolicyRole);
            if (editPolicy != null && editPolicy instanceof MouseMotionListener) {
                return editPolicy;
            }
            if (parentEP instanceof TopGraphicEditPart) {
                return null;
            }
            parentEP = parentEP.getParent();
        }
        return null;
    }

    /**
     * Forwards this mouse event to the first parent of the host editpart that
     * has the applicable editpolicy installed.
     */
    public void mouseEntered(MouseEvent me) {
        MouseMotionListener parentPolicy = (MouseMotionListener) getParentEditPolicy();
        if (parentPolicy != null) {
            translateLocation(me);            
            parentPolicy.mouseEntered(me);
        }
    }

    /**
     * Forwards this mouse event to the first parent of the host editpart that
     * has the applicable editpolicy installed.
     */
    public void mouseExited(MouseEvent me) {
        MouseMotionListener parentPolicy = (MouseMotionListener) getParentEditPolicy();
        if (parentPolicy != null) {
            translateLocation(me);            
            parentPolicy.mouseExited(me);
        }
    }

    /**
     * Forwards this mouse event to the first parent of the host editpart that
     * has the applicable editpolicy installed.
     */
    public void mouseHover(MouseEvent me) {
        MouseMotionListener parentPolicy = (MouseMotionListener) getParentEditPolicy();
        if (parentPolicy != null) {
            translateLocation(me);            
            parentPolicy.mouseHover(me);
        }
    }

    /**
     * Forwards this mouse event to the first parent of the host editpart that
     * has the applicable editpolicy installed.
     */
    public void mouseMoved(MouseEvent me) {
        MouseMotionListener parentPolicy = (MouseMotionListener) getParentEditPolicy();
        if (parentPolicy != null) {
            translateLocation(me);            
            parentPolicy.mouseMoved(me);
        }
    }

    /**
     * Forwards this mouse event to the first parent of the host editpart that
     * has the applicable editpolicy installed.
     */
    public void mouseDragged(MouseEvent me) {
        MouseMotionListener parentPolicy = (MouseMotionListener) getParentEditPolicy();
        if (parentPolicy != null) {
            translateLocation(me);            
            parentPolicy.mouseDragged(me);
        }
    }

    /**
     * Updates the location in the <code>MouseEvent</code> to be relative to
     * the host figure of the editpolicy being delegated to.
     * 
     * @@param mouseEvent
     *            the mouse event whose location will be updated
     */
    private void translateLocation(MouseEvent mouseEvent) {
        Point location = mouseEvent.getLocation();
        ((IGraphicalEditPart) getHost()).getFigure().translateToAbsolute(
            location);
        ((IGraphicalEditPart) getParentEditPolicy().getHost()).getFigure()
            .translateToRelative(location);
        mouseEvent.x = location.x;
        mouseEvent.y = location.y;
    }
}
@


1.1
log
@bugzilla 111952 gmf_head sshaw 051007 Connector handles do not appear when hovering over compartments
Contributed by: Cherie Mahoney
@
text
@d16 1
d31 2
a32 2
	extends AbstractEditPolicy
	implements MouseMotionListener {
d34 2
a35 116
	/** The editpolicy role used to retrieve the editpolicy from the parent. */
	private final String editPolicyRole;

	/**
	 * Creates a new instance.
	 * 
	 * @@param editPolicyRole
	 *            The editpolicy role used to retrieve the editpolicy from the
	 *            parent.
	 */
	public DelegatingMouseEventsEditPolicy(String editPolicyRole) {
		super();
		this.editPolicyRole = editPolicyRole;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.EditPolicy#activate()
	 */
	public void activate() {
		super.activate();

		((IGraphicalEditPart) getHost()).getFigure().addMouseMotionListener(
			this);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.EditPolicy#deactivate()
	 */
	public void deactivate() {
		((IGraphicalEditPart) getHost()).getFigure().removeMouseMotionListener(
			this);

		super.deactivate();
	}

	/**
	 * Traverses the parent editpart hierarchy to find the first parent with an
	 * editpolicy of the appropriate role installed that implements the
	 * <code>MouseMotionListener</code> interface. Stops if a parent is a
	 * <code>TopGraphicEditPart</code>.
	 * 
	 * @@return the parent editpolicy role or null if none was found
	 */
	private MouseMotionListener getParentEditPolicy() {
		EditPart parentEP = getHost().getParent();
		while (parentEP != null) {
			EditPolicy editPolicy = parentEP.getEditPolicy(editPolicyRole);
			if (editPolicy != null && editPolicy instanceof MouseMotionListener) {
				return (MouseMotionListener) editPolicy;
			}
			if (parentEP instanceof TopGraphicEditPart) {
				return null;
			}
			parentEP = parentEP.getParent();
		}
		return null;
	}

	/**
	 * Forwards this mouse event to the first parent of the host editpart that
	 * has the applicable editpolicy installed.
	 */
	public void mouseEntered(MouseEvent me) {
		MouseMotionListener parentPolicy = getParentEditPolicy();
		if (parentPolicy != null) {
			parentPolicy.mouseEntered(me);
		}
	}

	/**
	 * Forwards this mouse event to the first parent of the host editpart that
	 * has the applicable editpolicy installed.
	 */
	public void mouseExited(MouseEvent me) {
		MouseMotionListener parentPolicy = getParentEditPolicy();
		if (parentPolicy != null) {
			parentPolicy.mouseExited(me);
		}
	}

	/**
	 * Forwards this mouse event to the first parent of the host editpart that
	 * has the applicable editpolicy installed.
	 */
	public void mouseHover(MouseEvent me) {
		MouseMotionListener parentPolicy = getParentEditPolicy();
		if (parentPolicy != null) {
			parentPolicy.mouseHover(me);
		}
	}

	/**
	 * Forwards this mouse event to the first parent of the host editpart that
	 * has the applicable editpolicy installed.
	 */
	public void mouseMoved(MouseEvent me) {
		MouseMotionListener parentPolicy = getParentEditPolicy();
		if (parentPolicy != null) {
			parentPolicy.mouseMoved(me);
		}
	}

	/**
	 * Forwards this mouse event to the first parent of the host editpart that
	 * has the applicable editpolicy installed.
	 */
	public void mouseDragged(MouseEvent me) {
		MouseMotionListener parentPolicy = getParentEditPolicy();
		if (parentPolicy != null) {
			parentPolicy.mouseDragged(me);
		}
	}
d37 135
@


1.1.2.1
log
@Bugzilla#145335 gmf_R1_0_maintenance cmahoney 060706 DelegatingMouseEventsEditPolicy needs to translate location of mouse event
@
text
@a15 1
import org.eclipse.draw2d.geometry.Point;
d30 2
a31 2
    extends AbstractEditPolicy
    implements MouseMotionListener {
d33 116
a148 2
    /** The editpolicy role used to retrieve the editpolicy from the parent. */
    private final String editPolicyRole;
a149 135
    /**
     * Creates a new instance.
     * 
     * @@param editPolicyRole
     *            The editpolicy role used to retrieve the editpolicy from the
     *            parent.
     */
    public DelegatingMouseEventsEditPolicy(String editPolicyRole) {
        super();
        this.editPolicyRole = editPolicyRole;
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.gef.EditPolicy#activate()
     */
    public void activate() {
        super.activate();

        ((IGraphicalEditPart) getHost()).getFigure().addMouseMotionListener(
            this);
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.gef.EditPolicy#deactivate()
     */
    public void deactivate() {
        ((IGraphicalEditPart) getHost()).getFigure().removeMouseMotionListener(
            this);

        super.deactivate();
    }

    /**
     * Traverses the parent editpart hierarchy to find the first parent with an
     * editpolicy of the appropriate role installed that implements the
     * <code>MouseMotionListener</code> interface. Stops if a parent is a
     * <code>TopGraphicEditPart</code>.
     * 
     * @@return the parent editpolicy role or null if none was found
     */
    private EditPolicy getParentEditPolicy() {
        EditPart parentEP = getHost().getParent();
        while (parentEP != null) {
            EditPolicy editPolicy = parentEP.getEditPolicy(editPolicyRole);
            if (editPolicy != null && editPolicy instanceof MouseMotionListener) {
                return editPolicy;
            }
            if (parentEP instanceof TopGraphicEditPart) {
                return null;
            }
            parentEP = parentEP.getParent();
        }
        return null;
    }

    /**
     * Forwards this mouse event to the first parent of the host editpart that
     * has the applicable editpolicy installed.
     */
    public void mouseEntered(MouseEvent me) {
        MouseMotionListener parentPolicy = (MouseMotionListener) getParentEditPolicy();
        if (parentPolicy != null) {
            translateLocation(me);            
            parentPolicy.mouseEntered(me);
        }
    }

    /**
     * Forwards this mouse event to the first parent of the host editpart that
     * has the applicable editpolicy installed.
     */
    public void mouseExited(MouseEvent me) {
        MouseMotionListener parentPolicy = (MouseMotionListener) getParentEditPolicy();
        if (parentPolicy != null) {
            translateLocation(me);            
            parentPolicy.mouseExited(me);
        }
    }

    /**
     * Forwards this mouse event to the first parent of the host editpart that
     * has the applicable editpolicy installed.
     */
    public void mouseHover(MouseEvent me) {
        MouseMotionListener parentPolicy = (MouseMotionListener) getParentEditPolicy();
        if (parentPolicy != null) {
            translateLocation(me);            
            parentPolicy.mouseHover(me);
        }
    }

    /**
     * Forwards this mouse event to the first parent of the host editpart that
     * has the applicable editpolicy installed.
     */
    public void mouseMoved(MouseEvent me) {
        MouseMotionListener parentPolicy = (MouseMotionListener) getParentEditPolicy();
        if (parentPolicy != null) {
            translateLocation(me);            
            parentPolicy.mouseMoved(me);
        }
    }

    /**
     * Forwards this mouse event to the first parent of the host editpart that
     * has the applicable editpolicy installed.
     */
    public void mouseDragged(MouseEvent me) {
        MouseMotionListener parentPolicy = (MouseMotionListener) getParentEditPolicy();
        if (parentPolicy != null) {
            translateLocation(me);            
            parentPolicy.mouseDragged(me);
        }
    }

    /**
     * Updates the location in the <code>MouseEvent</code> to be relative to
     * the host figure of the editpolicy being delegated to.
     * 
     * @@param mouseEvent
     *            the mouse event whose location will be updated
     */
    private void translateLocation(MouseEvent mouseEvent) {
        Point location = mouseEvent.getLocation();
        ((IGraphicalEditPart) getHost()).getFigure().translateToAbsolute(
            location);
        ((IGraphicalEditPart) getParentEditPolicy().getHost()).getFigure()
            .translateToRelative(location);
        mouseEvent.x = location.x;
        mouseEvent.y = location.y;
    }
@

