head	1.1;
access;
symbols
	v20081023-2107:1.1
	v20081022-1925:1.1
	v20081022-1005:1.1
	v20081020-0700:1.1
	v20080917-1925:1.1
	v20080916-2008:1.1
	v20080911-1728:1.1
	v20080911-1506:1.1
	v20080910-1520:1.1
	v20080910-1510:1.1
	v20080903-1520:1.1
	v20080903-1510:1.1
	v20080813-1510:1.1
	v20080811-1546:1.1
	v20080731-1520:1.1
	v20080725-1738:1.1
	v20080723-2246:1.1
	v20080723-2232:1.1
	v20080723-1700:1.1
	v20080722-1827:1.1
	v20080718-1700:1.1
	v20080718-1731:1.1
	v20080716-1600:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.2
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080610-1132:1.1
	v20080603-1553:1.1
	v20080527-1255:1.1
	v20080516-1748:1.1
	v20080516-1143:1.1
	v20080512-1200:1.1
	v20080503-1740:1.1
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080417-1610:1.1
	v20080407-2250:1.1
	v20080407-0930:1.1
	v20080404-1111:1.1
	v20080328-1605:1.1
	v20080322-0000:1.1
	v20080222-1200:1.1
	v20080201-2010:1.1
	v20080114-1111:1.1
	v20080107-1111:1.1
	v20071222-1111:1.1
	v20071214-1111:1.1
	v20071130-1111:1.1
	v20071112-0000:1.1
	v20071108-0000:1.1;
locks; strict;
comment	@# @;


1.1
date	2007.10.16.14.11.55;	author crevells;	state Exp;
branches;
next	;
commitid	2b604714c6a84567;


desc
@@


1.1
log
@[162932] gmf_head crevells 071016 [NoteTextLabel] WrapLabel should use Gef's text layout
@
text
@/******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.label;

import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.draw2d.ui.figures.LabelEx;
import org.eclipse.swt.graphics.Image;

/**
 * The label delegate for a {@@link LabelEx}.
 * 
 * @@since 2.1
 * @@author crevells
 */
public class LabelExDelegate
    extends ILabelDelegate.Stub {

    private LabelEx label;

    public LabelExDelegate(LabelEx label) {
        this.label = label;
    }

    public void setFocus(boolean b) {
        label.setFocus(b);
    }

    public void setSelected(boolean b) {
        label.setSelected(b);
    }

    public String getText() {
        return label.getText();
    }

    public void setIcon(Image image, int index) {
        if (index == 0) {
            label.setIcon(image);
        }
    }

    public void setAlignment(int right) {
        label.setLabelAlignment(right);
    }

    public void setText(String text) {
        label.setText(text);
    }

    public void setTextAlignment(int alignment) {
        label.setTextAlignment(alignment);
    }

    public void setIconAlignment(int alignment) {
        label.setIconAlignment(alignment);
    }

    public Rectangle getTextBounds() {
        Rectangle rect = label.getTextBounds().getCopy();
        label.translateToAbsolute(rect);
        return rect;
    }

    public void setTextPlacement(int placement) {
        label.setTextPlacement(placement);
    }

    public void setTextStrikeThrough(boolean strikeThrough) {
        label.setTextStrikeThrough(strikeThrough);
    }

    public void setTextUnderline(boolean underline) {
        label.setTextUnderline(underline);
    }

    public Image getIcon(int index) {
        if (index == 0) {
            return label.getIcon();
        }
        return null;
    }

    public int getIconAlignment() {
        return label.getIconAlignment();
    }

    public int getTextAlignment() {
        return label.getTextAlignment();
    }

    public int getTextPlacement() {
        return label.getTextPlacement();
    }

    public boolean hasFocus() {
        return label.hasFocus();
    }

    public boolean isSelected() {
        return label.isSelected();
    }

    public boolean isTextStrikedThrough() {
        return label.isTextStrikedThrough();
    }

    public boolean isTextUnderlined() {
        return label.isTextUnderlined();
    }

}
@
