head	1.3;
access;
symbols
	v20081023-2107:1.2.4.1
	v20081022-1925:1.3
	v20081022-1005:1.2.4.1
	v20081020-0700:1.3
	v20080917-1925:1.3
	v20080916-2008:1.2.4.1
	v20080911-1728:1.3
	v20080911-1506:1.2.4.1
	v20080910-1520:1.3
	v20080910-1510:1.2.4.1
	v20080903-1520:1.3
	v20080903-1510:1.2.4.1
	v20080813-1510:1.2.4.1
	v20080811-1546:1.3
	v20080731-1520:1.3
	v20080725-1738:1.2.4.1
	v20080723-2246:1.3
	v20080723-2232:1.2.4.1
	v20080723-1700:1.2.4.1
	v20080722-1827:1.3
	v20080718-1700:1.2.4.1
	v20080718-1731:1.3
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080603-1553:1.2
	v20080527-1255:1.2
	v20080527-1151:1.2
	v20080516-1748:1.2
	v20080516-1143:1.2
	v20080512-1200:1.2
	v20080503-1740:1.2
	v20080501-2127:1.2
	v20080501-1739:1.2
	m20080429-1543:1.2
	v20080425-1959:1.2
	v20080417-1610:1.2
	v20080407-2250:1.2
	v20080407-0930:1.2
	v20080404-1111:1.2
	v20080328-1605:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20080201-2010:1.2
	v20080201-0201:1.2
	v20080118-1129:1.2
	v20080114-2222:1.2
	v20080114-1111:1.2
	v20080107-1111:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071112-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070915-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.1
	v20070614-1400:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070518-1300:1.1
	bugzilla111892_group_support:1.1.0.2
	Root_bugzilla111892_group_support:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2008.07.18.21.11.27;	author ahunter;	state Exp;
branches;
next	1.2;
commitid	5c16488106ff4567;

1.2
date	2007.06.18.16.57.50;	author ahunter;	state Exp;
branches
	1.2.4.1;
next	1.1;
commitid	70304676b98e4567;

1.1
date	2007.05.16.20.13.13;	author crevells;	state Exp;
branches;
next	;
commitid	2fe6464b65d94567;

1.2.4.1
date	2008.07.18.21.09.33;	author ahunter;	state Exp;
branches;
next	;
commitid	a434881068d4567;


desc
@@


1.3
log
@[241321] gmf-head ahunter 080718 when multi-delete elements from diagram, "prompt delete" dialog shows up more than once
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.actions;

import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.PlatformUI;

/**
 * This Action is used to send a request that will destroy a semantic element
 * from the model.
 * 
 * @@author melaasar
 * @@canBeSeenBy %level1
 * @@author choang 
 */
public class DeleteFromModelAction
	extends AbstractDeleteFromAction {
    
    
	/**
	 * Creates a <code>DeleteFromModelAction</code> with a default label.
	 *
	 * @@param part The part this action will be associated with.
	 */
	public DeleteFromModelAction(IWorkbenchPart part) {
		super(part);
		
		
	}
 
	/**
	 * Constructor
	 * @@param workbenchPage
	 */
	public DeleteFromModelAction(IWorkbenchPage workbenchPage) {
		super(workbenchPage);
		
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#calculateEnabled()
	 */
	protected boolean calculateEnabled() {
		List operationSet = getOperationSet();
		if (operationSet.isEmpty()) {
			return false;
		}
		Request request = getTargetRequest();
		Iterator editParts = operationSet.iterator();
		while (editParts.hasNext()) {
			EditPart editPart = (EditPart) editParts.next();
			// disable on diagram links 
			if (editPart instanceof IGraphicalEditPart) {
				IGraphicalEditPart gEditPart = (IGraphicalEditPart) editPart;
				View view = (View) gEditPart.getModel();
				// Disallow diagram deletion from model only if it is the top most diagram
				EObject container = view.eContainer();
				EObject element = ViewUtil.resolveSemanticElement(view);
				if ((element == null) || (element.eIsProxy())
						|| (element instanceof Diagram)
						|| (view instanceof Diagram && (container == null || !(container instanceof View)))) {
					return false;
				}
			} else {
				Command curCommand = editPart.getCommand(request);
				if (curCommand == null || (curCommand.canExecute() == false)) {
					return false;
				}
			}
		}
		return true;
	}

	/**
	 * Initializes this action's text and images.
	 */
	public void init() {
		super.init();
		setId(ActionIds.ACTION_DELETE_FROM_MODEL);
		setText(DiagramUIMessages.DiagramEditor_Delete_from_Model);
		setToolTipText(DiagramUIMessages.DiagramEditor_Delete_from_ModelToolTip);
		ISharedImages workbenchImages = PlatformUI.getWorkbench().getSharedImages();
		setHoverImageDescriptor(
			workbenchImages.getImageDescriptor(
				ISharedImages.IMG_TOOL_DELETE));
		setImageDescriptor(
			workbenchImages.getImageDescriptor(ISharedImages.IMG_TOOL_DELETE));
		setDisabledImageDescriptor(
			workbenchImages.getImageDescriptor(
				ISharedImages.IMG_TOOL_DELETE_DISABLED));
		
	}
	
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#getCommand(org.eclipse.gef.Request)
	 */
	protected Command getCommand(Request request) {	
		List operationSet = getOperationSet();
		Iterator editParts = operationSet.iterator();
		CompositeTransactionalCommand command =
			new CompositeTransactionalCommand(getEditingDomain(), getCommandLabel());
		while (editParts.hasNext()) {
			EditPart editPart = (EditPart) editParts.next();
			// disable on diagram links 
			if (editPart instanceof IGraphicalEditPart){
				IGraphicalEditPart gEditPart = 
					(IGraphicalEditPart) editPart;
				View view = (View)gEditPart.getModel();
				// Don't delete diagram from model only if it is the top most diagram
				EObject container = view.eContainer();
				EObject element = ViewUtil.resolveSemanticElement(view);
				if ((element instanceof Diagram)
						|| (view instanceof Diagram && (container == null || !(container instanceof View)))) {
					return null;
				}
			}
			Command curCommand = editPart.getCommand(request);
			if (curCommand != null) {
				command.compose(new CommandProxy(curCommand));				
			}
		}
		
		if ((command.isEmpty())
			|| (command.size() != operationSet.size())){
			return UnexecutableCommand.INSTANCE;
		}
		return new ICommandProxy(command);
	}
    
    protected String getCommandLabel() {
        return DiagramUIMessages.DiagramEditor_Delete_from_Model;
    };
    
    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#doRun(org.eclipse.core.runtime.IProgressMonitor)
     */
    protected void doRun(IProgressMonitor progressMonitor) {
    	Command command = getCommand();
    	//For performance improvement, sometimes, calculateEnable method
    	//won't disable the action for all valid unexecutable cases. At
    	//that time, we need this error check here to report delete 
    	//error to the users.
    	if (command == null || !command.canExecute()) {
    		MessageDialog
			.openError(
				Display.getCurrent().getActiveShell(),
				DiagramUIMessages.DeleteFromModelAction_ErrorDialog_Title,
				DiagramUIMessages.DeleteFromModelAction_ErrorDialog_Text);
    	}
		execute(getCommand(), progressMonitor);
	}
}
@


1.2
log
@gmf_head ahunter 070617 Update Copyright for files changed in 2007 for GMF 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
d17 1
d31 2
d164 19
@


1.2.4.1
log
@[241321] gmf-R2_1_maintenance ahunter 080718 when multi-delete elements from diagram, "prompt delete" dialog shows up more than once
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2008 IBM Corporation and others.
a16 1
import org.eclipse.core.runtime.IProgressMonitor;
a29 2
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Display;
a160 19
    
    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.actions.DiagramAction#doRun(org.eclipse.core.runtime.IProgressMonitor)
     */
    protected void doRun(IProgressMonitor progressMonitor) {
    	Command command = getCommand();
    	//For performance improvement, sometimes, calculateEnable method
    	//won't disable the action for all valid unexecutable cases. At
    	//that time, we need this error check here to report delete 
    	//error to the users.
    	if (command == null || !command.canExecute()) {
    		MessageDialog
			.openError(
				Display.getCurrent().getActiveShell(),
				DiagramUIMessages.DeleteFromModelAction_ErrorDialog_Title,
				DiagramUIMessages.DeleteFromModelAction_ErrorDialog_Text);
    	}
		execute(getCommand(), progressMonitor);
	}
@


1.1
log
@[187378] gmf_head crevells 070516 Make DeleteFromModelAction public
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@

