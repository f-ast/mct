head	1.8;
access;
symbols
	v20081023-2107:1.8
	v20081022-1925:1.8
	v20081022-1005:1.8
	v20081020-0700:1.8
	v20080917-1925:1.8
	v20080916-2008:1.8
	v20080911-1728:1.8
	v20080911-1506:1.8
	v20080910-1520:1.8
	v20080910-1510:1.8
	v20080903-1520:1.8
	v20080903-1510:1.8
	v20080813-1510:1.8
	v20080811-1546:1.8
	v20080731-1520:1.8
	v20080725-1738:1.8
	v20080723-2246:1.8
	v20080723-2232:1.8
	v20080723-1700:1.8
	v20080722-1827:1.8
	v20080718-1700:1.8
	v20080718-1731:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.6
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080527-1255:1.8
	v20080527-1151:1.8
	v20080516-1748:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080503-1740:1.8
	v20080501-2127:1.8
	v20080501-1739:1.8
	m20080429-1543:1.8
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080407-2250:1.8
	v20080407-0930:1.8
	v20080404-1111:1.8
	v20080328-1605:1.8
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20080201-2010:1.8
	v20080201-0201:1.8
	v20080118-1129:1.8
	v20080114-2222:1.8
	v20080114-1111:1.8
	v20080107-1111:1.8
	v20071222-1111:1.8
	v20071214-1111:1.8
	v20071130-1111:1.8
	v20071124-0000:1.8
	v20071112-0000:1.8
	v20071108-0000:1.8
	v20071003-0000:1.8
	v20070915-0000:1.8
	v20070903-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.4
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070614-1400:1.8
	v20070608-1300:1.8
	v20070605-1400:1.8
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070518-1300:1.8
	bugzilla111892_group_support:1.8.0.2
	Root_bugzilla111892_group_support:1.8
	v20070504-1000:1.8
	v20070420-1000:1.8
	v20070413-1300:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070221-1500:1.8
	v20070208-1800:1.8
	v20070202-0200:1.7.2.2
	v20070119-1200:1.7.2.2
	v20070111-0800:1.7.2.2
	v20070105-1200:1.7.2.2
	v20070103-0300:1.8
	M4_20:1.8
	v20061218-1500:1.7.2.2
	v20061218-1200:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061027-1200:1.7.2.2
	v20061013-1330:1.8
	v20061012-1100:1.7.2.2
	v20060925-1700:1.7.2.2
	v20060919-0800:1.7.2.2
	v20060907-1100:1.7.2.1
	M1_20:1.7
	v20060831-1500:1.7.2.1
	v20060824-1600:1.7.2.1
	v20060817-1500:1.7.2.1
	v20060810-1700:1.7.2.1
	v20060803-1200:1.7.2.1
	v20060728-0500:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-0800:1.7
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;


1.8
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.16.18.31.24;	author cmahoney;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2005.12.20.16.49.27;	author mmostafa;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.02.23.30.16;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.14.20.58.50;	author mmostafa;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.07;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.08.18.58.40;	author sshaw;	state Exp;
branches;
next	;

1.7.2.1
date	2006.08.02.20.16.18;	author mmostafa;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.view.factories;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.core.services.ViewService;
import org.eclipse.gmf.runtime.diagram.core.view.factories.ViewFactory;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
import org.eclipse.gmf.runtime.notation.FontStyle;
import org.eclipse.gmf.runtime.notation.LineStyle;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceConverter;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.RGB;


/**
 * The abstract implementation of the ViewFactory interface. This class could be the 
 * base class for any generic View  
 * @@author mmostafa
 */
abstract public class AbstractViewFactory implements ViewFactory {
	

	/**
	 * The hint used to find the appropriate preference store from which general
	 * diagramming preference values for properties of shapes, connections, and
	 * diagrams can be retrieved. This hint is mapped to a preference store in
	 * the {@@link DiagramPreferencesRegistry}.
	 */
	private PreferencesHint preferencesHint;

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.core.view.factories.ViewFactory#createView(org.eclipse.core.runtime.IAdaptable, org.eclipse.gmf.runtime.notation.View, java.lang.String, int, boolean, java.lang.String)
	 */
	abstract public View createView(final IAdaptable semanticAdapter,
			final View containerView, final String semanticHint,
			final int index, final boolean persisted, final PreferencesHint thePreferencesHint);

	/**
	 * creates styles for the passed view and return them as List; the returned list 
	 * could be empty if the view does not need any style
	 * 
	 * @@return a list of style for the passed view, or an empty list if none (do not return null)
	 * 
	 */
	protected List createStyles(View view) {
		return new ArrayList();
	}
	
	/**
	 * Indicates if the passed view requires an element inside it or it can use
	 * its container's element
	 * 
	 * @@param semanticAdapter
	 * @@param containerView
	 * @@return
	 */
	protected boolean requiresElement(IAdaptable semanticAdapter, View view) {		
		if (semanticAdapter!=null){			
			return requiresElement((EObject)semanticAdapter.getAdapter(EObject.class),view);
		}
		return true;
	}
	
	/**
	 * Indicates if the passed view requires an element inside it or it can use
	 * its container's element
	 * 
	 * @@param semanticAdapter
	 * @@param containerView
	 * @@return
	 */
	protected boolean requiresElement(EObject semanticElement, View view) {		
		return !(semanticElement == view.getElement());		
	}
	
	/**
	 * Initialize the passed view from the preference store
	 * @@param view the view to initialize
	 */
	protected void initializeFromPreferences(View view) {
		
		IPreferenceStore store = (IPreferenceStore) getPreferencesHint().getPreferenceStore();
		if (store == null) {
			return;
		}

        LineStyle lineStyle = (LineStyle) view
			.getStyle(NotationPackage.Literals.LINE_STYLE);
		if (lineStyle != null) {
			// line color
			RGB lineRGB = PreferenceConverter.getColor(store,
				IPreferenceConstants.PREF_LINE_COLOR);

			lineStyle.setLineColor(FigureUtilities.RGBToInteger(lineRGB)
				.intValue());
		}

		FontStyle fontStyle = (FontStyle) view
			.getStyle(NotationPackage.Literals.FONT_STYLE);

		if (fontStyle != null) {
			// default font
			FontData fontData = PreferenceConverter.getFontData(store,
				IPreferenceConstants.PREF_DEFAULT_FONT);
			fontStyle.setFontName(fontData.getName());
			fontStyle.setFontHeight(fontData.getHeight());
			fontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
			fontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
			// font color
			RGB fontRGB = PreferenceConverter.getColor(store,
				IPreferenceConstants.PREF_FONT_COLOR);
			fontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
				.intValue());
		}

	}
	
	
	/**
	 * Method getViewService.
	 * a utility function to return the view service instance
	 * @@return ViewService
	 */
	protected static ViewService getViewService() {
		return ViewService.getInstance();
	}
	
	/**
	 * Gets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@return the preferences hint
	 */
	protected PreferencesHint getPreferencesHint() {
		return preferencesHint;
	}
	
	/**
	 * Sets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@param preferencesHint the preferences hint
	 */
	protected void setPreferencesHint(PreferencesHint preferencesHint) {
		this.preferencesHint = preferencesHint;
	}

    /**
     * Determines the editing domain for the view creation.
     * 
     * @@param semanticElement
     *            the semantic elemement; may be null
     * @@param containerView
     *            the container view
     * @@return the editing domain
     */
    protected TransactionalEditingDomain getEditingDomain(EObject semanticElement, View containerView) {
    
        TransactionalEditingDomain result = null;
    
        if (semanticElement != null) {
            result = TransactionUtil.getEditingDomain(semanticElement);
        }
    
        if (result == null) {
            result = TransactionUtil.getEditingDomain(containerView);
        }
        return result;
    }
}
@


1.7
log
@Bugzilla#142033 gmf_head cmahoney 050516 Shape and connector factories should use the same mechanism to obtain editing domain
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
a22 1
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
d26 2
d43 1
d79 3
a81 5
	protected boolean requiresElement(IAdaptable semanticAdapter, View view) {
		EObject semanticElement = null;
		if (semanticAdapter!=null){
			semanticElement = (EObject)semanticAdapter.getAdapter(EObject.class);
			return requiresElement(semanticElement,view);
d94 2
a95 5
	protected boolean requiresElement(EObject semanticElement, View view) {
		EObject containerSemanticElement = view.getElement();
		if (containerSemanticElement==semanticElement)
			return false;
		return true;
d109 5
a113 4
		// line color
		RGB lineRGB =
			PreferenceConverter.getColor(
				store,
a114 1
		ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getLineStyle_LineColor(), FigureUtilities.RGBToInteger(lineRGB));
d116 10
a125 4
		//default font
		FontData fontData =
			PreferenceConverter.getFontData(
				store,
d127 6
a132 9
		ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getFontStyle_FontName(), fontData.getName());
		ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getFontStyle_FontHeight(), new Integer(fontData.getHeight()));
		ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getFontStyle_Bold(), Boolean.valueOf((fontData.getStyle() & SWT.BOLD) != 0));
		ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getFontStyle_Italic(), Boolean.valueOf((fontData.getStyle() & SWT.ITALIC) != 0));

		//font color
		RGB fontRGB =
			PreferenceConverter.getColor(
				store,
d134 4
a137 1
		ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getFontStyle_FontColor(), FigureUtilities.RGBToInteger(fontRGB));
@


1.7.2.1
log
@[152455] gmf_R1_0_maintenance  yLulu 060802 ViewFactories impl could be enhanced
@
text
@d23 1
a26 2
import org.eclipse.gmf.runtime.notation.FontStyle;
import org.eclipse.gmf.runtime.notation.LineStyle;
a41 1
	
d77 5
a81 3
	protected boolean requiresElement(IAdaptable semanticAdapter, View view) {		
		if (semanticAdapter!=null){			
			return requiresElement((EObject)semanticAdapter.getAdapter(EObject.class),view);
d94 5
a98 2
	protected boolean requiresElement(EObject semanticElement, View view) {		
		return !(semanticElement == view.getElement());		
d112 4
a115 5
        LineStyle lineStyle = (LineStyle) view
			.getStyle(NotationPackage.Literals.LINE_STYLE);
		if (lineStyle != null) {
			// line color
			RGB lineRGB = PreferenceConverter.getColor(store,
d117 1
d119 4
a122 10
			lineStyle.setLineColor(FigureUtilities.RGBToInteger(lineRGB)
				.intValue());
		}

		FontStyle fontStyle = (FontStyle) view
			.getStyle(NotationPackage.Literals.FONT_STYLE);

		if (fontStyle != null) {
			// default font
			FontData fontData = PreferenceConverter.getFontData(store,
d124 9
a132 6
			fontStyle.setFontName(fontData.getName());
			fontStyle.setFontHeight(fontData.getHeight());
			fontStyle.setBold((fontData.getStyle() & SWT.BOLD) != 0);
			fontStyle.setItalic((fontData.getStyle() & SWT.ITALIC) != 0);
			// font color
			RGB fontRGB = PreferenceConverter.getColor(store,
d134 1
a134 4
			fontStyle.setFontColor(FigureUtilities.RGBToInteger(fontRGB)
				.intValue());
		}

@


1.7.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.6
log
@bugzilla 115826 gmf-head mmostafa 051220 ViewService should be public
@
text
@d19 2
d170 23
@


1.5
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a18 1
import org.eclipse.gmf.runtime.diagram.core.internal.services.view.ViewService;
d20 1
@


1.4
log
@bugzilla 110316 gmf-head mmostafa 051014 Compiler warning count should be 0 - runtime diagram layer components
@
text
@d23 1
a23 1
import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;
d43 1
a43 1
	 * diagramming preference values for properties of shapes, connectors, and
@


1.3
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d16 1
a23 1
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
d25 1
d115 1
a115 1
		ViewUtil.setPropertyValue(view,Properties.ID_LINECOLOR, FigureUtilities.RGBToInteger(lineRGB));
d122 4
a125 4
		ViewUtil.setPropertyValue(view,Properties.ID_FONTNAME, fontData.getName());
		ViewUtil.setPropertyValue(view,Properties.ID_FONTSIZE, new Integer(fontData.getHeight()));
		ViewUtil.setPropertyValue(view,Properties.ID_FONTBOLD, Boolean.valueOf((fontData.getStyle() & SWT.BOLD) != 0));
		ViewUtil.setPropertyValue(view,Properties.ID_FONTITALIC, Boolean.valueOf((fontData.getStyle() & SWT.ITALIC) != 0));
d132 1
a132 1
		ViewUtil.setPropertyValue(view,Properties.ID_FONTCOLOR, FigureUtilities.RGBToInteger(fontRGB));
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d23 1
a23 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
@


1.1
log
@Bugzilla 109092  : rumv_head mmostafa 050908 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

