head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20080917-1925:1.7
	v20080911-1728:1.7
	v20080910-1520:1.7
	v20080903-1520:1.7
	v20080731-1520:1.7
	v20080723-2246:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	I20051124-2000:1.6
	M3_10:1.6
	I20051118-1245:1.6
	I20051111-1800:1.6
	I20051106-0900:1.6
	v20051030:1.5;
locks; strict;
comment	@# @;


1.7
date	2005.11.25.19.38.13;	author cmahoney;	state dead;
branches;
next	1.6;

1.6
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.21.21.54.04;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.01.14.22.38;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.36;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import org.eclipse.draw2d.IFigure;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.GraphicalEditPart;

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConnectionLabelsEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemFigure;
import org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemContainerFigure;
import org.eclipse.gmf.runtime.diagram.ui.figures.BorderedFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.View;

/**
 * This is a shape which contains gates. The shape responsible for setting the
 * client area such that gates can be placed on the sides of the shape. Also it
 * is responsible for adding the gate figure into the proper list. Created On:
 * Jul 14, 2003
 * 
 * @@author tisrar
 * @@author jbruck
 * @@deprecated Renamed BorderedShapeEditPart
 */
public abstract class GatedShapeEditPart extends ShapeNodeEditPart {
	/**
	 * Create an instance.
	 * @@param view editpart's model
	 */
	public GatedShapeEditPart(View view) {
		super(view);
	}	
	
	/**
	 * Returns the editpart's main figure.
	 * @@return <code>IFigure</code>
	 */
	protected IFigure getMainFigure() {
		return getGatedPaneFigure().getElementPane();
	}

	/**
	 * gets this editpart's gate figure.
	 * @@return <code>IFigure</code>
	 */
	protected final IFigure getGateFigure() {
		return getGatedPaneFigure().getBorderItemContainer();
	}

	/**
	 * Return the editpart's gated pane figure.
	 * @@return <code>IFigure</code>
	 */
	protected final BorderedFigure getGatedPaneFigure() {
		return (BorderedFigure)getFigure();
	}
	
	/**
	 * Sets the supplied constraint on the <tt>childFigure</tt>.
	 * @@see org.eclipse.gef.GraphicalEditPart#setLayoutConstraint(EditPart,
	 *      IFigure, Object)
	 */
	public void setLayoutConstraint(EditPart child, IFigure childFigure, Object constraint) {
		getContentPaneFor((IGraphicalEditPart) child).setConstraint(childFigure, constraint);
	}

	protected IFigure getContentPaneFor(IGraphicalEditPart editPart) {
		if ( editPart instanceof BorderItemEditPart ) {
			return getGatedPaneFigure().getBorderItemContainer();
		}
		else {
			return getMainFigure();
		}
	}

	/**
	 * Adds the supplied child to the editpart's gate figure if it is 
	 * an instanceof {@@link BorderItemEditPart} and its figure is an instanceof {@@link BorderItemFigure}.
	 */
	protected void addChildVisual(EditPart childEditPart, int index) {
		IFigure childFigure = ((GraphicalEditPart)childEditPart).getFigure();
		if ( childEditPart instanceof BorderItemEditPart && childFigure instanceof BorderItemFigure  ) {
			BorderItemFigure gateFigure = (BorderItemFigure) childFigure; 
			BorderItemContainerFigure gatedFigure = (BorderItemContainerFigure) getContentPaneFor((IGraphicalEditPart) childEditPart);
			IFigure boundaryFig = getGateBoundryFigure();
			if( gateFigure.getLocator() != null ) {
				gatedFigure.addBorderItem(gateFigure, gateFigure.getLocator());
			} else {
				gatedFigure.addBorderItem(gateFigure, new BorderItemFigure.BorderItemLocator(gateFigure, boundaryFig));
			}
		}
		else {
			IFigure fig = getContentPaneFor((IGraphicalEditPart) childEditPart);
			fig.add(childFigure, index);
		}
	}

	/**
	 * Return the figure on which the gate elements will be drawn.
	 * @@return {@@link #getMainFigure()}
	 */
	protected IFigure getGateBoundryFigure() {
		return getMainFigure();
	}
	
	/**
	 * Remove the supplied child editpart's figure from this editpart's figure.
	 */
	protected void removeChildVisual(EditPart child) {
		IFigure childFigure = ((GraphicalEditPart)child).getFigure();
		if ( child instanceof BorderItemEditPart && childFigure instanceof BorderItemFigure ) {
			BorderItemFigure gateFigure = (BorderItemFigure)childFigure;
			BorderItemContainerFigure gatedFigure = (BorderItemContainerFigure) getContentPaneFor((IGraphicalEditPart) child);
			gatedFigure.removeBorderItem(gateFigure);
		}
		else {
			IFigure fig = getContentPaneFor((IGraphicalEditPart) child);
			fig.remove(childFigure);
		}
	}

	/**
	 * Installs the desired EditPolicies for this.
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.CONNECTION_LABELS_ROLE,	new ConnectionLabelsEditPolicy());

	}
	/**
	 * Returns a {@@link BorderedFigure}that will <i>wrap </i> this editpart's
	 * main figure.
	 * 
	 * @@see #createMainFigure()
	 */
	protected  NodeFigure createNodeFigure() {
		return new BorderedFigure(createMainFigure());
	}

	/**
	 * Creates this editpart's main figure.
	 * @@return the created <code>NodeFigure</code>
	 */
	protected abstract NodeFigure createMainFigure();
}@


1.6
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@@


1.5
log
@bugzilla 110217 gmf-head sshaw 050921 GatedShapeEditPart should allow override of getMainFigure()
@
text
@d18 1
a18 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConnectorLabelsEditPolicy;
d20 3
a22 3
import org.eclipse.gmf.runtime.diagram.ui.figures.GateFigure;
import org.eclipse.gmf.runtime.diagram.ui.figures.GatedFigure;
import org.eclipse.gmf.runtime.diagram.ui.figures.GatedPaneFigure;
d34 1
d58 1
a58 1
		return getGatedPaneFigure().getGatePane();
d65 2
a66 2
	protected final GatedPaneFigure getGatedPaneFigure() {
		return (GatedPaneFigure)getFigure();
d79 2
a80 2
		if ( editPart instanceof GateEditPart ) {
			return getGatedPaneFigure().getGatePane();
d89 1
a89 1
	 * an instanceof {@@link GateEditPart} and its figure is an instanceof {@@link GateFigure}.
d93 3
a95 3
		if ( childEditPart instanceof GateEditPart && childFigure instanceof GateFigure  ) {
			GateFigure gateFigure = (GateFigure) childFigure; 
			GatedFigure gatedFigure = (GatedFigure) getContentPaneFor((IGraphicalEditPart) childEditPart);
d98 1
a98 1
				gatedFigure.addGate(gateFigure, gateFigure.getLocator());
d100 1
a100 1
				gatedFigure.addGate(gateFigure, new GateFigure.GateLocator(gateFigure, boundaryFig));
d122 4
a125 4
		if ( child instanceof GateEditPart && childFigure instanceof GateFigure ) {
			GateFigure gateFigure = (GateFigure)childFigure;
			GatedFigure gatedFigure = (GatedFigure) getContentPaneFor((IGraphicalEditPart) child);
			gatedFigure.removeGate(gateFigure);
d138 1
a138 1
		installEditPolicy(EditPolicyRoles.CONNECTOR_LABELS,	new ConnectorLabelsEditPolicy());
d142 1
a142 1
	 * Returns a {@@link GatedPaneFigure}that will <i>wrap </i> this editpart's
d148 1
a148 1
		return new GatedPaneFigure(createMainFigure());
@


1.4
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d48 1
a48 1
	protected final IFigure getMainFigure() {
@


1.3
log
@BUGZILLA 108571 gmf_head sshaw 050901  GatedShapeEditPart#createNodeFigure needs to be overridable
Contribution by: James Bruck
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d144 1
a144 1
	protected final NodeFigure createNodeFigure() {
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d22 1
a22 1
import com.ibm.xtools.notation.View;
@

