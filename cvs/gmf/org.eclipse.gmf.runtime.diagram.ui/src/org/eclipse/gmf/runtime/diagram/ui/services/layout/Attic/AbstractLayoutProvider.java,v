head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080731-1520:1.5
	v20080723-2246:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.5
date	2006.04.18.20.51.25;	author cmahoney;	state dead;
branches;
next	1.4;

1.4
date	2005.11.24.22.21.03;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.11;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.22;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.54;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Bugzilla#109422 gmf_head cmahoney 060418 Remove deprecated API
@
text
@/******************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.services.layout;

import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.common.core.service.IOperation;

/**
 * @@author sshaw
 * @@deprecated use
 *             {@@link org.eclipse.gmf.runtime.diagram.ui.services.layout.AbstractLayoutEditPartProvider}
 *             Will be removed on December 16th / 2005
 */
public class AbstractLayoutProvider
		extends
		org.eclipse.gmf.runtime.diagram.ui.services.layout.AbstractLayoutEditPartProvider {

	public Command layoutEditParts(GraphicalEditPart containerEditPart,
			IAdaptable layoutHint) {
		// TODO Auto-generated method stub
		return null;
	}

	public Command layoutEditParts(List selectedObjects, IAdaptable layoutHint) {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean provides(IOperation operation) {
		// TODO Auto-generated method stub
		return false;
	}

}
@


1.4
log
@bugzilla 116490 gmf-head sshaw 051124 LayoutService should be public
@
text
@@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
a13 3
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
a14 1
import java.util.Map;
a18 3
import org.eclipse.jface.util.Assert;

import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;
a19 7
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.IEditPartLayoutProvider;
import org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.IInternalLayoutRunnable;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;

d23 3
a25 3
 *
 * AbstractLayoutProvider for internal layout providers.  Provides a redirection from the
 * Node based api to the internal EditPart based api.
d27 8
a34 43
abstract public class AbstractLayoutProvider extends AbstractProvider 
	implements IEditPartLayoutProvider {
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.services.layout.ILayoutNodesProvider#layoutNodes(java.util.List, boolean, org.eclipse.core.runtime.IAdaptable)
	 */
	public Runnable layoutNodes(List layoutNodes,
			boolean offsetFromBoundingBox, IAdaptable layoutHint) {
		IGraphicalEditPart gep = (IGraphicalEditPart)layoutHint.getAdapter(IGraphicalEditPart.class);
		List editparts = new ArrayList(layoutNodes.size());
		Assert.isNotNull(gep, "The Graphical EditPart is null"); //$NON-NLS-1$

		Map registry = gep.getViewer().getEditPartRegistry();
		Iterator nodes = layoutNodes.listIterator();
		while (nodes.hasNext()) {
			Node view = ((ILayoutNode)nodes.next()).getNode();
			editparts.add(registry.get(view));
		}
		
		if (offsetFromBoundingBox) {
			final Command cmdSelect = layoutEditParts(editparts, layoutHint);
			return new IInternalLayoutRunnable() {
				public void run() {
					cmdSelect.execute(); 
				}
				
				public Command getCommand() {
					return cmdSelect;
				}
			};
		}
		else {
			final Command cmdDiag = layoutEditParts(gep, layoutHint);
		
			return new IInternalLayoutRunnable() {
				public void run() {
					cmdDiag.execute();
				}
				
				public Command getCommand() {
					return cmdDiag;
				}
			};
		}
d36 4
a39 35
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.IEditPartLayoutProvider#layoutEditParts(org.eclipse.gef.GraphicalEditPart, org.eclipse.core.runtime.IAdaptable)
	 */
	abstract public Command layoutEditParts(
        GraphicalEditPart containerEditPart,
		IAdaptable layoutHint);

    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.internal.services.layout.IEditPartLayoutProvider#layoutEditParts(java.util.List, org.eclipse.core.runtime.IAdaptable)
     */
    abstract public Command layoutEditParts(
        List selectedObjects,
		IAdaptable layoutHint);
	
	/**
	 * getContainer
	 * @@param operation
	 * @@return the <code>View</code> that contains the layout operation
	 */
	protected View getContainer(IOperation operation) {
		View container = null;
		
		if (operation instanceof ILayoutNodesOperation) {
			Iterator nodes = ((ILayoutNodesOperation)operation).getLayoutNodes().listIterator();
			if (nodes.hasNext()) { 
				Node node = ((ILayoutNode)nodes.next()).getNode();
				container = ViewUtil.getContainerView(node);
			}
		}
		else {
			return null;
		}
		
		return container;
d41 4
a44 22
	
	/**
	 * getViewsToSizesMap
	 * @@param operation
	 * @@return <code>Map</code>
	 */
	protected Map getViewsToSizesMap(IOperation operation) {
		if (operation instanceof ILayoutNodesOperation) { 
			List layoutNodes = ((ILayoutNodesOperation)operation).getLayoutNodes();  
			Map viewsToSizesMap = new HashMap(layoutNodes.size());
			Iterator nodes = layoutNodes.listIterator();
			while (nodes.hasNext()) {
				ILayoutNode layoutNode = ((ILayoutNode)nodes.next());
				Node node = layoutNode.getNode();
				
				viewsToSizesMap.put(node, new org.eclipse.draw2d.geometry.Dimension(layoutNode.getWidth(), layoutNode.getHeight()));
			}
			
			return viewsToSizesMap;
		}
		
		return null;
d46 1
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d29 2
a30 2
import com.ibm.xtools.notation.Node;
import com.ibm.xtools.notation.View;
@

