head	1.10;
access;
symbols
	v20081023-2107:1.10
	v20081022-1925:1.10
	v20081022-1005:1.10
	v20081020-0700:1.10
	v20080917-1925:1.10
	v20080916-2008:1.10
	v20080911-1728:1.10
	v20080911-1506:1.10
	v20080910-1520:1.10
	v20080910-1510:1.10
	v20080903-1520:1.10
	v20080903-1510:1.10
	v20080813-1510:1.10
	v20080811-1546:1.10
	v20080731-1520:1.10
	v20080725-1738:1.10
	v20080723-2246:1.10
	v20080723-2232:1.10
	v20080723-1700:1.10
	v20080722-1827:1.10
	v20080718-1700:1.10
	v20080718-1731:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.6
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080603-1553:1.10
	v20080527-1255:1.10
	v20080527-1151:1.10
	v20080516-1748:1.10
	v20080516-1143:1.10
	v20080512-1200:1.10
	v20080503-1740:1.10
	v20080501-2127:1.10
	v20080501-1739:1.10
	m20080429-1543:1.10
	v20080425-1959:1.10
	v20080417-1610:1.10
	v20080407-2250:1.10
	v20080407-0930:1.10
	v20080404-1111:1.10
	v20080328-1605:1.10
	v20080322-0000:1.10
	v20080222-1200:1.10
	v20080201-2010:1.10
	v20080201-0201:1.10
	v20080118-1129:1.10
	v20080114-2222:1.10
	v20080114-1111:1.10
	v20080107-1111:1.10
	v20071222-1111:1.10
	v20071214-1111:1.10
	v20071130-1111:1.10
	v20071124-0000:1.10
	v20071112-0000:1.10
	v20071108-0000:1.10
	v20071003-0000:1.10
	v20070915-0000:1.10
	v20070903-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.4
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070614-1400:1.10
	v20070608-1300:1.10
	v20070605-1400:1.10
	v20070601-1400:1.10
	v20070525-1500:1.10
	v20070518-1300:1.10
	bugzilla111892_group_support:1.10.0.2
	Root_bugzilla111892_group_support:1.10
	v20070504-1000:1.10
	v20070420-1000:1.10
	v20070413-1300:1.10
	v20070330-1300:1.10
	v20060330-1300:1.10
	v20070322-1100:1.10
	v20060316-0600:1.10
	v20070221-1500:1.10
	v20070208-1800:1.10
	v20070202-0200:1.9.2.3
	v20070119-1200:1.9.2.3
	v20070111-0800:1.9.2.3
	v20070105-1200:1.9.2.3
	v20070103-0300:1.10
	M4_20:1.10
	v20061218-1500:1.9.2.3
	v20061218-1200:1.10
	v20061214-0000:1.10
	M3_20:1.10
	v20061117-0800:1.10
	v20061027-1200:1.9.2.3
	v20061013-1330:1.10
	v20061012-1100:1.9.2.3
	v20060925-1700:1.9.2.3
	v20060919-0800:1.9.2.2
	v20060907-1100:1.9.2.1
	M1_20:1.9
	v20060831-1500:1.9
	v20060824-1600:1.9
	v20060817-1500:1.9
	v20060810-1700:1.9
	v20060803-1200:1.9
	v20060728-0500:1.9
	v20060721-1130:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060616-1400:1.9
	v20060616-1200:1.9
	v20060609-1400:1.9
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.9
	v20060519-0800:1.9
	v20060512-1000:1.9
	I20060512-1000:1.9
	I20060505-1400:1.9
	I20060428-1300:1.9
	I20060424-0500:1.9
	I20060424-0300:1.9
	M6_10:1.9
	I20060407-1200:1.9
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.7
	I20060216-1945:1.7
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.7
	I20060202-1415:1.7
	I20060129-1145:1.7
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.6
	I20051201-1800:1.6
	I20051124-2000:1.6
	M3_10:1.6
	I20051118-1245:1.6
	I20051111-1800:1.6
	I20051106-0900:1.6
	v20051030:1.5;
locks; strict;
comment	@# @;


1.10
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.06.20.04.27;	author sshaw;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2006.02.28.02.30.51;	author cmahoney;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.04.19.15.37;	author cmahoney;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.02.23.30.16;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.03.21.35.17;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.07;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.15.48.52;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.37;	author sshaw;	state Exp;
branches;
next	;

1.9.2.1
date	2006.09.06.21.15.17;	author mmostafa;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2006.09.19.21.15.32;	author cmahoney;	state Exp;
branches;
next	;


desc
@@


1.10
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartListener;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.requests.ChangeBoundsRequest;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ResizableCompartmentEditPart;
import org.eclipse.gmf.runtime.diagram.ui.figures.BorderedNodeFigure;
import org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure;
import org.eclipse.gmf.runtime.diagram.ui.handles.CompartmentCollapseHandle;
import org.eclipse.gmf.runtime.diagram.ui.internal.handles.CompartmentResizeHandle;

/**
 * A resizable editpolicy for resizable compartments. The editpolicy could be
 * vertical or horizontal
 * 
 * @@author melaasar
 */
public class ResizableCompartmentEditPolicy
	extends ResizableEditPolicyEx {

	private boolean horizontal;

	/**
	 * Creates a new vertical ResizableCompartmentEditPolicy
	 */
	public ResizableCompartmentEditPolicy() {
		this(false);
	}

	/**
	 * creates a new ResizableCompartmentEditPolicy with the given orientation
	 * 
	 * @@param horizontal
	 */
	public ResizableCompartmentEditPolicy(boolean horizontal) {
		this.horizontal = horizontal;
	}

	/**
	 * @@return Whether the editpolicy is horizontal
	 */
	protected boolean isHorizontal() {
		return horizontal;
	}

	/**
	 * This method is used to get the collapse handle(s). Subclasses can
	 * override to provide different collapse handles
	 * 
	 * @@return a list of collapse handles
	 */
	protected List createCollapseHandles() {
		IGraphicalEditPart part = (IGraphicalEditPart) getHost();

		List collapseHandles = new ArrayList();
		collapseHandles.add(new CompartmentCollapseHandle(part));
		return collapseHandles;
	}

	/**
	 * @@see org.eclipse.gef.editpolicies.SelectionHandlesEditPolicy#createSelectionHandles()
	 */
	protected List createSelectionHandles() {
		IGraphicalEditPart part = (IGraphicalEditPart) getHost();
		int d1 = isHorizontal() ? PositionConstants.WEST
			: PositionConstants.NORTH;
		int d2 = isHorizontal() ? PositionConstants.EAST
			: PositionConstants.SOUTH;
		List selectionHandles = new ArrayList();
		selectionHandles.addAll(createCollapseHandles());
		selectionHandles.add(new CompartmentResizeHandle(part, d1));
		selectionHandles.add(new CompartmentResizeHandle(part, d2));
		return selectionHandles;
	}

	/**
	 * @@return the <code>ResizableCompartmentFigure</code> that is the
	 *         corresponding figure for the host edit part.
	 */
	private ResizableCompartmentFigure getCompartmentFigure() {
		ResizableCompartmentFigure compartmentFigure = null;
		if (getGraphicalEditPart() instanceof ResizableCompartmentEditPart) {
			compartmentFigure = ((ResizableCompartmentEditPart) getGraphicalEditPart())
				.getCompartmentFigure();
		} else if (getGraphicalEditPart().getFigure() instanceof ResizableCompartmentFigure) {
			compartmentFigure = (ResizableCompartmentFigure) getGraphicalEditPart()
				.getFigure();
		}
		// TODO: remove later. this is a temporary fix for defect
		// RATLC00522565
		// eventually we will put the BorderedNodeFigure inside the resizable
		// compartment
		else if (getGraphicalEditPart().getFigure() instanceof BorderedNodeFigure) {
			BorderedNodeFigure gpf = (BorderedNodeFigure) getGraphicalEditPart()
				.getFigure();
			IFigure f = gpf.getMainFigure();
			if (f instanceof ResizableCompartmentFigure) {
				compartmentFigure = (ResizableCompartmentFigure) f;
			}
		}

		return compartmentFigure;
	}

	/**
	 * @@see org.eclipse.gef.editpolicies.SelectionEditPolicy#showSelection()
	 */
	protected void showSelection() {
		super.showSelection();
		if (getHost().getSelected() != EditPart.SELECTED_NONE) {
			ResizableCompartmentFigure compartmentFigure = getCompartmentFigure();
			if (compartmentFigure != null) {
				compartmentFigure.setSelected(true);
			}
		}
	}

	/**
	 * @@see org.eclipse.gef.editpolicies.SelectionEditPolicy#hideSelection()
	 */
	protected void hideSelection() {
		super.hideSelection();
		if (getHost().getSelected() == EditPart.SELECTED_NONE) {
			ResizableCompartmentFigure compartmentFigure = getCompartmentFigure();
			if (compartmentFigure != null) {
				compartmentFigure.setSelected(false);
			}
		}
	}
    
    /* (non-Javadoc)
     * @@see org.eclipse.gef.editpolicies.SelectionEditPolicy#activate()
     */
    public void activate() {
        super.activate();
        if (getHost().getParent().getSelected() != EditPart.SELECTED_NONE)
            setSelectedState();
    }

    private EditPartListener hostListener;

	private EditPartListener parentListener;

	/**
	 * @@see org.eclipse.gef.editpolicies.SelectionEditPolicy#addSelectionListener()
	 */
	protected void addSelectionListener() {
		hostListener = new EditPartListener.Stub() {

			public void selectedStateChanged(EditPart part) {
				setSelectedState();
				setFocus(part.hasFocus());
			}
		};
		getHost().addEditPartListener(hostListener);

		parentListener = new EditPartListener.Stub() {

			public void selectedStateChanged(EditPart part) {
				setSelectedState();
			}
		};
		getParentGraphicEditPart().addEditPartListener(parentListener);

	}

	/**
	 * @@see org.eclipse.gef.editpolicies.SelectionEditPolicy#removeSelectionListener()
	 */
	protected void removeSelectionListener() {
		getHost().removeEditPartListener(hostListener);
		getParentGraphicEditPart().removeEditPartListener(parentListener);
	}

	/**
	 * Determine the select state of the policy based on: 1- The select state of
	 * the compartment editpart 2- The select state of the parent graphic
	 * editpart 3- The visibility state of the compartment editpart
	 */
	protected void setSelectedState() {
		int hostState = getHost().getSelected();
		int topState = EditPart.SELECTED_NONE;

		if (getGraphicalEditPart().getTopGraphicEditPart() != null) {
			topState = getGraphicalEditPart().getTopGraphicEditPart().getSelected();
		}

		boolean vis = getGraphicalEditPart().getNotationView().isVisible();

		if (vis
			&& ((hostState != EditPart.SELECTED_NONE || topState != EditPart.SELECTED_NONE)))
			setSelectedState(EditPart.SELECTED);
		else
			setSelectedState(EditPart.SELECTED_NONE);
	}

	private IGraphicalEditPart getParentGraphicEditPart() {
		return (IGraphicalEditPart) getGraphicalEditPart().getParent();
	}

	private IGraphicalEditPart getGraphicalEditPart() {
		return (IGraphicalEditPart) getHost();
	}

	/**
	 * @@see org.eclipse.gef.editpolicies.NonResizableEditPolicy#showChangeBoundsFeedback(org.eclipse.gef.requests.ChangeBoundsRequest)
	 */
	protected void showChangeBoundsFeedback(ChangeBoundsRequest request) {
		super.showChangeBoundsFeedback(getResizeChildrenRequest(request));
	}

	/**
	 * @@see org.eclipse.gef.editpolicies.ResizableEditPolicy#getResizeCommand(org.eclipse.gef.requests.ChangeBoundsRequest)
	 */
	protected Command getResizeCommand(ChangeBoundsRequest request) {
		return getHost().getParent().getCommand(
			getResizeChildrenRequest(request));
	}

	/**
	 * Creates a new ChangeBoundsRequest that respects the min and max of the
	 * resize deltas
	 */
	private ChangeBoundsRequest getResizeChildrenRequest(ChangeBoundsRequest r) {
		Dimension delta = r.getSizeDelta();

		ResizableCompartmentFigure f = getCompartmentFigure();
		
		Dimension fd = f.getSize().getExpanded(delta);
		fd.intersect(f.getMaximumSize()).union(f.getMinimumSize());
		delta = fd.shrink(f.getSize().width, f.getSize().height);

		boolean moved = (r.getResizeDirection() & PositionConstants.NORTH_WEST) != 0;
		IFigure a = f.getAdjacentSibling(moved);
		if (a != null) {
			Dimension ad = a.getSize().getExpanded(delta.negate());
			ad.intersect(a.getMaximumSize()).union(a.getMinimumSize());
			delta = ad.shrink(a.getSize().width, a.getSize().height).negate();
		} else {
			delta.shrink(delta.width, delta.height);
		}

		ChangeBoundsRequest req = new ChangeBoundsRequest(REQ_RESIZE_CHILDREN);
		req.setEditParts(getHost());
		req.setLocation(r.getLocation());
		req.setResizeDirection(r.getResizeDirection());
		req.setSizeDelta(delta);
		if (moved)
			req.setMoveDelta(new Point(-delta.width, -delta.height));
		return req;
	}
	
}
@


1.9
log
@bugzilla 134462 gmf-head sshaw 060406 ResizableShapeEditPolicy doesn't follow contract of it's superclass
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
a20 2
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
a24 3
import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;
a30 1
import org.eclipse.gmf.runtime.notation.NotationPackage;
d150 9
d160 1
a160 1
	private EditPartListener hostListener;
a163 2
	private NotificationListener propertyListener;

a184 10
		propertyListener = new NotificationListener() {

			public void notifyChanged(Notification notification) {
				if (NotationPackage.eINSTANCE.getView_Visible().equals(
					notification.getFeature()))
					setSelectedState();
			}
		};
		getDiagramEventBroker().addNotificationListener(
			getGraphicalEditPart().getNotationView(), propertyListener);
a190 2
		getDiagramEventBroker().removeNotificationListener(
			getGraphicalEditPart().getNotationView(), propertyListener);
d204 2
a205 4
		if (((GraphicalEditPart) getGraphicalEditPart())
			.getTopGraphicEditPart() != null) {
			topState = ((GraphicalEditPart) getGraphicalEditPart())
				.getTopGraphicEditPart().getSelected();
d217 2
a218 2
	private GraphicalEditPart getParentGraphicEditPart() {
		return (GraphicalEditPart) getGraphicalEditPart().getParent();
a272 8
    private DiagramEventBroker getDiagramEventBroker() {
        TransactionalEditingDomain theEditingDomain = ((IGraphicalEditPart) getHost())
            .getEditingDomain();
        if (theEditingDomain != null) {
            return DiagramEventBroker.getInstance(theEditingDomain);
        }
        return null;
    }
@


1.9.2.1
log
@[115905] gmf_R1_0_maintenace aboyko 060906  ShapeCompartment collapse handle drawn outside shapecomartment figure
@
text
@a15 1
import java.util.ListIterator;
a16 1
import org.eclipse.draw2d.FigureListener;
d21 2
a22 1
import org.eclipse.draw2d.geometry.Rectangle;
d27 3
a31 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.TopGraphicEditPart;
d36 1
a36 1
import org.eclipse.jface.util.Assert;
d48 1
a48 27
	
	/**
	 * Listener to determine bounds changes of compartment figure and/or its container
	 * to display or hide collapse handles accordingly (Bugzilla #115905)
	 */
	private FigureListener figureListener = new FigureListener() {
		public void figureMoved(IFigure source) {
			if (handles != null) {
				ResizableCompartmentFigure compartment = getCompartmentFigure();
				Dimension minClientDimension = compartment.getMinClientDimension();
				if (source.equals(compartment))
				{
					Rectangle intersection = getGraphicalEditPart()
							.getTopGraphicEditPart().getFigure().getBounds().getCopy()
							.intersect(source.getBounds());
					
					refreshCollapseHandles(intersection.height>minClientDimension.height && intersection.width>minClientDimension.width);					
				}
				else if (source.equals(getGraphicalEditPart().getTopGraphicEditPart().getFigure()))
				{
					Rectangle intersection = source.getBounds().getCopy().intersect(compartment.getBounds());
					refreshCollapseHandles(intersection.height>minClientDimension.height && intersection.width>minClientDimension.width);
				}
			}
		}
	};
	
d82 1
a82 14
		
		CompartmentCollapseHandle collapseHandle = new CompartmentCollapseHandle(part);
		
		TopGraphicEditPart wrapper = part.getTopGraphicEditPart();
		Rectangle intersection = null;
		ResizableCompartmentFigure compartment = getCompartmentFigure();		
		if (wrapper != null && compartment != null)
			intersection = wrapper.getFigure().getBounds().getCopy().intersect(
					compartment.getBounds());
		collapseHandle.setVisible(intersection == null
				|| (intersection.width > compartment.getMinClientDimension().width && intersection.height > compartment
						.getMinClientDimension().height));
		
		collapseHandles.add(collapseHandle);
d85 1
a85 1
	
a95 1
		
d136 3
a138 10
		IGraphicalEditPart part = getGraphicalEditPart();
		TopGraphicEditPart topPart = part.getTopGraphicEditPart();
		ResizableCompartmentFigure compartmentFigure = getCompartmentFigure();
		if (compartmentFigure != null) {
			if (topPart != null)
			{
				topPart.getFigure().addFigureListener(figureListener);
				compartmentFigure.addFigureListener(figureListener);
			}
			if (getHost().getSelected() != EditPart.SELECTED_NONE) {
d149 3
a151 10
		IGraphicalEditPart part = getGraphicalEditPart();
		TopGraphicEditPart topPart = part.getTopGraphicEditPart();
		ResizableCompartmentFigure compartmentFigure = getCompartmentFigure();
		if (compartmentFigure != null) {
			if (topPart != null)
			{
				topPart.getFigure().removeFigureListener(figureListener);
				compartmentFigure.removeFigureListener(figureListener);
			}
			if (getHost().getSelected() == EditPart.SELECTED_NONE) {
d161 2
d183 11
a193 1
				
a195 8
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.editpolicies.SelectionEditPolicy#activate()
	 */
	public void activate() {
		super.activate();
		setSelectedState();
	}
	
d200 2
d215 1
a215 1
		if (getGraphicalEditPart()
d217 1
a217 1
			topState = getGraphicalEditPart()
d230 2
a231 2
	private IGraphicalEditPart getParentGraphicEditPart() {
		return (IGraphicalEditPart) getGraphicalEditPart().getParent();
d286 7
a292 17
    /**
     * Refreshes collapse handles - displays them if they need to be displayed but not displaying
     * and removes them if they shouldn't be displayed, but are displayed.
     * Method assumes that handles are not <code>null</code>, i.e. handles are being displayed
     *  
     * @@param shouldHaveHandles <code>true</code> if collapse handles need to be displayed 
     */
    private void refreshCollapseHandles(boolean shouldHaveHandles)
    {
    	Assert.isTrue(handles!=null);

    	for (ListIterator handlesIterator = handles.listIterator(); handlesIterator.hasNext();)
		{
    		Object handle = handlesIterator.next();
			if (handle instanceof CompartmentCollapseHandle)
				((CompartmentCollapseHandle)handle).setVisible(shouldHaveHandles);
		}
a293 1
        
@


1.9.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.9.2.3
log
@Bugzilla#115905 gmf_R1_0_maintenance crevells 060919 ShapeCompartment collapse handle drawn outside shapecomartment figure
Contributed by: Alex Boyko
@
text
@d16 1
d18 1
d23 1
d30 1
d35 1
d47 27
a73 1

d107 14
a120 1
		collapseHandles.add(new CompartmentCollapseHandle(part));
d123 1
a123 1

d134 1
d175 10
a184 3
		if (getHost().getSelected() != EditPart.SELECTED_NONE) {
			ResizableCompartmentFigure compartmentFigure = getCompartmentFigure();
			if (compartmentFigure != null) {
d195 10
a204 3
		if (getHost().getSelected() == EditPart.SELECTED_NONE) {
			ResizableCompartmentFigure compartmentFigure = getCompartmentFigure();
			if (compartmentFigure != null) {
a208 9
    
    /* (non-Javadoc)
     * @@see org.eclipse.gef.editpolicies.SelectionEditPolicy#activate()
     */
    public void activate() {
        super.activate();
        if (getHost().getParent().getSelected() != EditPart.SELECTED_NONE)
            setSelectedState();
    }
d210 1
a210 1
    private EditPartListener hostListener;
d234 2
d237 6
d244 1
a244 1

d262 4
a265 2
		if (getGraphicalEditPart().getTopGraphicEditPart() != null) {
			topState = getGraphicalEditPart().getTopGraphicEditPart().getSelected();
d333 19
@


1.8
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@a161 5
	
	/**
	 * Cache the diagram event broker after it is retrieved.
	 */
	private DiagramEventBroker diagramEventBroker;
@


1.7
log
@Bugzilla#111935 gmf_head cmahoney 060104 Border Item Infrastructure Consistency Issues
@
text
@d22 1
d27 1
a28 1
import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;
d162 5
d197 1
a197 1
		DiagramEventBroker.getInstance().addNotificationListener(
d205 1
a205 1
		DiagramEventBroker.getInstance().removeNotificationListener(
d290 9
a298 1

@


1.6
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d31 1
a31 1
import org.eclipse.gmf.runtime.diagram.ui.figures.BorderedFigure;
d116 1
a116 1
		// eventually we will put the BorderedFigure inside the resizable
d118 2
a119 2
		else if (getGraphicalEditPart().getFigure() instanceof BorderedFigure) {
			BorderedFigure gpf = (BorderedFigure) getGraphicalEditPart()
d121 1
a121 1
			IFigure f = gpf.getElementPane();
@


1.5
log
@bugzilla 110605 gmf-head sshaw 051003 ResizableComparmentEditPolicy doesn't get the compartment figure properly for ResizableCompartmentEditPart
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.core.listener.PresentationListener;
d31 1
a31 1
import org.eclipse.gmf.runtime.diagram.ui.figures.GatedPaneFigure;
d116 1
a116 1
		// eventually we will put the GatedPaneFigure inside the resizable
d118 2
a119 2
		else if (getGraphicalEditPart().getFigure() instanceof GatedPaneFigure) {
			GatedPaneFigure gpf = (GatedPaneFigure) getGraphicalEditPart()
d191 1
a191 1
		PresentationListener.getInstance().addNotificationListener(
d199 1
a199 1
		PresentationListener.getInstance().removeNotificationListener(
@


1.4
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d30 1
d38 2
a39 2
 * A resizable editpolicy for resizable compartments. The editpolicy could be vertical
 * or horizontal
d43 2
a44 1
public class ResizableCompartmentEditPolicy extends ResizableEditPolicyEx {
d49 1
a49 1
	 * Creates a new vertical ResizableCompartmentEditPolicy 
a54 1
	
d57 1
d72 3
a74 3
	 * This method is used to get the collapse handle(s). Subclasses can override
	 * to provide different collapse handles 
	 *
d81 1
a81 1
		collapseHandles.add( new CompartmentCollapseHandle(part) );		
d90 4
a93 2
		int d1 = isHorizontal() ? PositionConstants.WEST : PositionConstants.NORTH;
		int d2 = isHorizontal() ? PositionConstants.EAST : PositionConstants.SOUTH;
d102 29
d136 3
a138 13
			if ( getGraphicalEditPart().getFigure() instanceof ResizableCompartmentFigure){
			ResizableCompartmentFigure f = 
				(ResizableCompartmentFigure) getGraphicalEditPart().getFigure();
			f.setSelected(true);
			}
			// TODO: remove later.  this is a temporary fix for defect RATLC00522565
			// eventually we will put the GatedPaneFigure inside the resizable compartment
			if ( getGraphicalEditPart().getFigure() instanceof GatedPaneFigure){
				GatedPaneFigure gpf = (GatedPaneFigure) getGraphicalEditPart().getFigure();
				IFigure f = gpf.getElementPane();
				if( f instanceof ResizableCompartmentFigure ) {
					((ResizableCompartmentFigure)f).setSelected(true);
				}
d149 3
a151 13
			if ( getGraphicalEditPart().getFigure() instanceof ResizableCompartmentFigure){
				ResizableCompartmentFigure f =
					(ResizableCompartmentFigure) getGraphicalEditPart().getFigure();
				f.setSelected(false);
			}
			//TODO: remove later.  this is a temporary fix for defect RATLC00522565
			// eventually we will put the GatedPaneFigure inside the resizable compartment
			if ( getGraphicalEditPart().getFigure() instanceof GatedPaneFigure){
				GatedPaneFigure gpf = (GatedPaneFigure) getGraphicalEditPart().getFigure();
				IFigure f = gpf.getElementPane();
				if( f instanceof ResizableCompartmentFigure ) {
					((ResizableCompartmentFigure)f).setSelected(false);
				}
d157 1
d159 1
d161 1
a161 1
	
d167 1
d176 1
d184 1
d186 2
a187 1
				if (NotationPackage.eINSTANCE.getView_Visible().equals(notification.getFeature()))
d191 2
a192 1
		PresentationListener.getInstance().addNotificationListener(getGraphicalEditPart().getNotationView(),propertyListener);
d199 2
a200 1
		PresentationListener.getInstance().removeNotificationListener(getGraphicalEditPart().getNotationView(),propertyListener);
d206 3
a208 4
	 * Determine the select state of the policy based on:
	 * 1- The select state of the compartment editpart
	 * 2- The select state of the parent graphic editpart
	 * 3- The visibility state of the compartment editpart 
d213 5
a217 3
		
		if (((GraphicalEditPart)getGraphicalEditPart()).getTopGraphicEditPart()!=null){
			topState = ((GraphicalEditPart)getGraphicalEditPart()).getTopGraphicEditPart().getSelected();	
d219 1
a219 1
		
d222 2
a223 3
		if (vis 
			&& ((hostState != EditPart.SELECTED_NONE || 
			topState != EditPart.SELECTED_NONE)))
d230 1
a230 1
		return (GraphicalEditPart)getGraphicalEditPart().getParent();
d253 2
a254 1
	 * Creates a new ChangeBoundsRequest that respects the min and max of the resize deltas
d259 2
a260 2
		ResizableCompartmentFigure f =
			(ResizableCompartmentFigure) getHostFigure();
d265 1
a265 2
		boolean moved =
			(r.getResizeDirection() & PositionConstants.NORTH_WEST) != 0;
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a13 2
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
d21 1
d26 1
d34 1
a34 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
d145 2
a146 2
	private PropertyChangeListener propertyListener;

d166 3
a168 3
		propertyListener = new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {
				if (Properties.ID_ISVISIBLE.equals(evt.getPropertyName()))
d172 1
a172 1
		PresentationListener.getInstance().addPropertyChangeListener(getGraphicalEditPart().getNotationView(),propertyListener);
d179 1
a179 1
		PresentationListener.getInstance().removePropertyChangeListener(getGraphicalEditPart().getNotationView(),propertyListener);
@


1.2
log
@Bugzilla109092 : rmp_head mmostafa 050912 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d25 1
a25 2

import org.eclipse.gmf.runtime.diagram.core.listener.PropertyChangeNotifier;
a32 1
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
a143 1
	private PropertyChangeNotifier propertyNotifier;
d170 1
a170 3
		propertyNotifier = ViewUtil.getPropertyChangeNotifier(
			getGraphicalEditPart().getNotationView());
		propertyNotifier.addPropertyChangeListener(propertyListener);
d177 1
a177 2
		if (propertyNotifier != null)
			propertyNotifier.removePropertyChangeListener(propertyListener);
@

