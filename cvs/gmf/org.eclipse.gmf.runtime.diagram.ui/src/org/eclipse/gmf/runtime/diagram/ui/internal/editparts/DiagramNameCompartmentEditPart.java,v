head	1.12;
access;
symbols
	v20081023-2107:1.12
	v20081022-1925:1.12
	v20081022-1005:1.12
	v20081020-0700:1.12
	v20080917-1925:1.12
	v20080916-2008:1.12
	v20080911-1728:1.12
	v20080911-1506:1.12
	v20080910-1520:1.12
	v20080910-1510:1.12
	v20080903-1520:1.12
	v20080903-1510:1.12
	v20080813-1510:1.12
	v20080811-1546:1.12
	v20080731-1520:1.12
	v20080725-1738:1.12
	v20080723-2246:1.12
	v20080723-2232:1.12
	v20080723-1700:1.12
	v20080722-1827:1.12
	v20080718-1700:1.12
	v20080718-1731:1.12
	v20080716-1600:1.12
	v20080716-1642:1.12
	R2_1_maintenance:1.12.0.2
	Root_R2_1_maintenance:1.12
	R2_1_0:1.12
	v20080610-1132:1.12
	v20080603-1553:1.12
	v20080527-1255:1.12
	v20080527-1151:1.10.4.1
	v20080516-1748:1.12
	v20080516-1143:1.12
	v20080512-1200:1.12
	v20080503-1740:1.12
	v20080501-2127:1.10.4.1
	v20080501-1739:1.12
	m20080429-1543:1.10.4.1
	v20080425-1959:1.12
	v20080417-1610:1.12
	v20080407-2250:1.12
	v20080407-0930:1.12
	v20080404-1111:1.12
	v20080328-1605:1.12
	v20080322-0000:1.12
	v20080222-1200:1.12
	v20080201-2010:1.12
	v20080201-0201:1.10.4.1
	v20080118-1129:1.10.4.1
	v20080114-2222:1.10.4.1
	v20080114-1111:1.12
	v20080107-1111:1.12
	v20071222-1111:1.12
	v20071214-1111:1.12
	v20071130-1111:1.12
	v20071124-0000:1.10.4.1
	v20071112-0000:1.12
	v20071108-0000:1.12
	v20071003-0000:1.10
	v20070915-0000:1.10
	v20070903-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.4
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070614-1400:1.10
	v20070608-1300:1.10
	v20070605-1400:1.10
	v20070601-1400:1.10
	v20070525-1500:1.10
	v20070518-1300:1.10
	bugzilla111892_group_support:1.10.0.2
	Root_bugzilla111892_group_support:1.10
	v20070504-1000:1.10
	v20070420-1000:1.10
	v20070413-1300:1.10
	v20070330-1300:1.10
	v20060330-1300:1.10
	v20070322-1100:1.10
	v20060316-0600:1.10
	v20070221-1500:1.10
	v20070208-1800:1.10
	v20070202-0200:1.9.2.2
	v20070119-1200:1.9.2.2
	v20070111-0800:1.9.2.2
	v20070105-1200:1.9.2.2
	v20070103-0300:1.10
	M4_20:1.10
	v20061218-1500:1.9.2.2
	v20061218-1200:1.10
	v20061214-0000:1.10
	M3_20:1.10
	v20061117-0800:1.10
	v20061027-1200:1.9.2.2
	v20061013-1330:1.10
	v20061012-1100:1.9.2.2
	v20060925-1700:1.9.2.2
	v20060919-0800:1.9.2.2
	v20060907-1100:1.9.2.1
	M1_20:1.9
	v20060831-1500:1.9.2.1
	v20060824-1600:1.9.2.1
	v20060817-1500:1.9.2.1
	v20060810-1700:1.9.2.1
	v20060803-1200:1.9.2.1
	v20060728-0500:1.9.2.1
	v20060721-1130:1.9.2.1
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060616-1400:1.9
	v20060616-1200:1.9
	v20060609-1400:1.8
	v20060531-1730:1.8
	v20060530-1930:1.8
	v20060526-1200:1.8
	v20060519-0800:1.8
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.7
	I20060216-1945:1.7
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.6
	I20051201-1800:1.6
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;


1.12
date	2007.11.01.15.19.42;	author crevells;	state Exp;
branches;
next	1.11;
commitid	291c4729ee8d4567;

1.11
date	2007.10.16.14.11.55;	author crevells;	state Exp;
branches;
next	1.10;
commitid	2b604714c6a84567;

1.10
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2006.06.14.18.39.49;	author ahunter;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2006.02.28.02.31.21;	author cmahoney;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.02.23.30.17;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.15.14.59.19;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.08;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.52;	author sshaw;	state Exp;
branches;
next	;

1.9.2.1
date	2006.07.14.21.02.41;	author cmahoney;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	;

1.10.4.1
date	2007.11.01.19.48.44;	author crevells;	state Exp;
branches;
next	;
commitid	52e2472a2d9c4567;


desc
@@


1.12
log
@[208220] gmf_head crevells 071101 DiagramNameCompartmentEditpart does not listen to changes to the diagram
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.editparts;

import org.eclipse.draw2d.PositionConstants;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.RunnableWithResult;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.requests.GroupRequest;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.services.icon.IconOptions;
import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;
import org.eclipse.gmf.runtime.diagram.core.internal.commands.CreateDiagramLinkCommand;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ComponentEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.label.ILabelDelegate;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.graphics.Image;

/**
 * Name compartment for NalDiagramView elements.  
 * This compartment is not editable. 
 * 
 * @@author jcorchis
 * @@canBeSeenBy %level1
 */
public class DiagramNameCompartmentEditPart extends TextCompartmentEditPart {
	
	private IconOptions iconOptions;
	protected static final int ICON_INDEX = 0;
	protected static final int NUM_ICONS = 1;	

	/**
	 * @@param view
	 */
	public DiagramNameCompartmentEditPart(View view) {
		super(view);
		iconOptions = new IconOptions();
		iconOptions.set(IconOptions.GET_STEREOTYPE_IMAGE_FOR_ELEMENT);
		iconOptions.set(IconOptions.NO_DEFAULT_STEREOTYPE_IMAGE);
		setNumIcons(NUM_ICONS);
	}
    
    protected ILabelDelegate createLabelDelegate() {
        ILabelDelegate labelDelegate = super.createLabelDelegate();
        labelDelegate.setIconAlignment(PositionConstants.TOP);
        labelDelegate.setTextAlignment(PositionConstants.TOP);
        labelDelegate.setAlignment(PositionConstants.TOP);
        labelDelegate.setTextWrapOn(true);
        labelDelegate.setTextJustification(PositionConstants.CENTER);
        return labelDelegate;
    }
        
    public void activate() {
        super.activate();
        EObject semanticProxy = getElement();
        if (semanticProxy != null && !semanticProxy.eIsProxy()) {
            addSemanticListeners();
        }
    }

    /** Return the semantic element associated to this editpart. */
    public EObject resolveSemanticElement() {
        try {
            return (EObject) getEditingDomain().runExclusive(
                new RunnableWithResult.Impl() {

                public void run() {
                    View primary = getPrimaryView();
                    if (primary != null)
                        setResult(ViewUtil.resolveSemanticElement(primary));
                }
            });
        } catch (InterruptedException e) {
               Trace.catching(DiagramUIPlugin.getInstance(),
                DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                "resolveSemanticElement", e); //$NON-NLS-1$
                Log.error(DiagramUIPlugin.getInstance(),
                    DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
                    "resolveSemanticElement", e); //$NON-NLS-1$
            return null;
        }
    }
    
    /**
     * Helper method to get the element of this view. 
     * 
     * @@return
     */
    private EObject getElement() {
        // This uses the primary view only because that is what
        // {@@link #resolveSemanticElement()} uses and I am
        // assuming this was done for some reason.
        View primary = getPrimaryView();
        if (primary != null) {
            return primary.getElement();
        }
        return null;
    }

    /**
     * Returns the icon image associated with the diagram.
     * @@param the 
     * @@return Image
     */
    protected Image getLabelIcon(int i) {
        EObject element = getElement();
        if (element != null)
            return IconService.getInstance().getIcon(
                new EObjectAdapter(element));
        return null;
    }
    
    /**
     * @@return <tt>false</tt> 
     */
    protected boolean isEditable() { 
        return false; 
    }
    
    /**
     * Selectable if the parent edit part is not a DiagramLinkEditPart.
     *  @@return <tt>false</tt> if the parent is a DiagramLinkEditPart.
     */
    public boolean isSelectable() {
        return false;
    }
    
    public void createDefaultEditPolicies() {
        super.createDefaultEditPolicies();
        installEditPolicy(EditPolicy.COMPONENT_ROLE,
                new DiagramLinkComponentEditPolicy());  
    }
    
    protected void setVisibility(boolean vis) {
        super.setVisibility(vis && getElement() != null);
    }

    private class DiagramLinkComponentEditPolicy extends ComponentEditPolicy {
        
        /**
         * Returns a command to set the model to null. 
         */
        public Command createDeleteViewCommand(GroupRequest request) {
            
            TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
                .getEditingDomain();
            
            CreateDiagramLinkCommand com = new CreateDiagramLinkCommand(editingDomain,
                DiagramUIMessages.Command_CreateDiagramLink,
                    (View)getHost().getParent().getModel(), 
                    null);
            return new ICommandProxy(com);
        }
    }
    
    /**
     * Overridden so that the name of the diagram will still be displayed even
     * if the element is unresolved.
     */
    protected String getLabelText() {
        String label = super.getLabelText();
        if (label == null) {
            EObject element = getElement();
            if (element != null) {
                return EMFCoreUtil.getName(element);
            }
        }
        return label;
    }
}
@


1.11
log
@[162932] gmf_head crevells 071016 [NoteTextLabel] WrapLabel should use Gef's text layout
@
text
@d74 8
@


1.10
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
a13 1
import org.eclipse.draw2d.IFigure;
d35 1
a35 1
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;
d64 9
a72 9

    protected IFigure createFigure() {
        WrapLabel label = new WrapLabel();
        label.setLabelAlignment(PositionConstants.TOP);
        label.setIconAlignment(PositionConstants.TOP);
        label.setTextAlignment(PositionConstants.TOP);
        label.setTextWrap(true);
        label.setTextWrapAlignment(PositionConstants.CENTER);
        return label;
@


1.10.4.1
log
@[208220] gmf_R2_0_maintenance crevells 071101 DiagramNameCompartmentEditpart does not listen to changes to the diagram
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2007 IBM Corporation and others.
a74 8
    
    public void activate() {
        super.activate();
        EObject semanticProxy = getElement();
        if (semanticProxy != null && !semanticProxy.eIsProxy()) {
            addSemanticListeners();
        }
    }
@


1.9
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d37 1
d66 93
a158 79
	protected IFigure createFigure() {
		WrapLabel label = new WrapLabel();
		label.setLabelAlignment(PositionConstants.TOP);
		label.setIconAlignment(PositionConstants.TOP);
		label.setTextAlignment(PositionConstants.TOP);
		label.setTextWrap(true);
		label.setTextWrapAlignment(PositionConstants.CENTER);
		return label;
	}

	/** Return the semantic element associated to this editpart. */
	public EObject resolveSemanticElement() {
		try {
			return (EObject) getEditingDomain().runExclusive(
				new RunnableWithResult.Impl() {

				public void run() {
					View primary = getPrimaryView();
					if (primary != null)
						setResult(ViewUtil.resolveSemanticElement(primary));
				}
			});
		} catch (InterruptedException e) {
			   Trace.catching(DiagramUIPlugin.getInstance(),
				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
				"resolveSemanticElement", e); //$NON-NLS-1$
				Log.error(DiagramUIPlugin.getInstance(),
					DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
					"resolveSemanticElement", e); //$NON-NLS-1$
			return null;
		}
	}

	/**
	 * Returns the icon image associated with the diagram.
	 * @@param the 
	 * @@return Image
	 */
	protected Image getLabelIcon(int i) {
		EObject element = resolveSemanticElement();
		if (element != null)
			return IconService.getInstance().getIcon(new EObjectAdapter(element));
		return null;
	}
	
	/**
	 * @@return <tt>false</tt> 
	 */
	protected boolean isEditable() { 
		return false; 
	}
	
	/**
	 * Selectable if the parent edit part is not a DiagramLinkEditPart.
	 *  @@return <tt>false</tt> if the parent is a DiagramLinkEditPart.
	 */
	public boolean isSelectable() {
		return false;
	}
	
	public void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicy.COMPONENT_ROLE,
				new DiagramLinkComponentEditPolicy());	
	}
	
	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#setVisibilty(boolean)
	 */
	protected void setVisibility(boolean vis) {
		super.setVisibility(vis && resolveSemanticElement() != null);
	}

	private class DiagramLinkComponentEditPolicy extends ComponentEditPolicy {
		
		/**
		 * Returns a command to set the model to null. 
		 */
		public Command createDeleteViewCommand(GroupRequest request) {
d163 22
a184 7
			CreateDiagramLinkCommand com = new CreateDiagramLinkCommand(editingDomain,
				DiagramUIMessages.Command_CreateDiagramLink,
					(View)getHost().getParent().getModel(), 
					null);
			return new ICommandProxy(com);
		}
	}
@


1.9.2.1
log
@Bugzilla#146086 gmf_R1_0_maintenance cmahoney 060714 DiagramNameCompartmentEditPart should still show a name if the diagram is unresolved
@
text
@a36 1
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
d65 79
a143 93
    protected IFigure createFigure() {
        WrapLabel label = new WrapLabel();
        label.setLabelAlignment(PositionConstants.TOP);
        label.setIconAlignment(PositionConstants.TOP);
        label.setTextAlignment(PositionConstants.TOP);
        label.setTextWrap(true);
        label.setTextWrapAlignment(PositionConstants.CENTER);
        return label;
    }

    /** Return the semantic element associated to this editpart. */
    public EObject resolveSemanticElement() {
        try {
            return (EObject) getEditingDomain().runExclusive(
                new RunnableWithResult.Impl() {

                public void run() {
                    View primary = getPrimaryView();
                    if (primary != null)
                        setResult(ViewUtil.resolveSemanticElement(primary));
                }
            });
        } catch (InterruptedException e) {
               Trace.catching(DiagramUIPlugin.getInstance(),
                DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                "resolveSemanticElement", e); //$NON-NLS-1$
                Log.error(DiagramUIPlugin.getInstance(),
                    DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
                    "resolveSemanticElement", e); //$NON-NLS-1$
            return null;
        }
    }
    
    /**
     * Helper method to get the element of this view. 
     * 
     * @@return
     */
    private EObject getElement() {
        // This uses the primary view only because that is what
        // {@@link #resolveSemanticElement()} uses and I am
        // assuming this was done for some reason.
        View primary = getPrimaryView();
        if (primary != null) {
            return primary.getElement();
        }
        return null;
    }

    /**
     * Returns the icon image associated with the diagram.
     * @@param the 
     * @@return Image
     */
    protected Image getLabelIcon(int i) {
        EObject element = getElement();
        if (element != null)
            return IconService.getInstance().getIcon(
                new EObjectAdapter(element));
        return null;
    }
    
    /**
     * @@return <tt>false</tt> 
     */
    protected boolean isEditable() { 
        return false; 
    }
    
    /**
     * Selectable if the parent edit part is not a DiagramLinkEditPart.
     *  @@return <tt>false</tt> if the parent is a DiagramLinkEditPart.
     */
    public boolean isSelectable() {
        return false;
    }
    
    public void createDefaultEditPolicies() {
        super.createDefaultEditPolicies();
        installEditPolicy(EditPolicy.COMPONENT_ROLE,
                new DiagramLinkComponentEditPolicy());  
    }
    
    protected void setVisibility(boolean vis) {
        super.setVisibility(vis && getElement() != null);
    }

    private class DiagramLinkComponentEditPolicy extends ComponentEditPolicy {
        
        /**
         * Returns a command to set the model to null. 
         */
        public Command createDeleteViewCommand(GroupRequest request) {
d148 7
a154 22
            CreateDiagramLinkCommand com = new CreateDiagramLinkCommand(editingDomain,
                DiagramUIMessages.Command_CreateDiagramLink,
                    (View)getHost().getParent().getModel(), 
                    null);
            return new ICommandProxy(com);
        }
    }
    
    /**
     * Overridden so that the name of the diagram will still be displayed even
     * if the element is unresolved.
     */
    protected String getLabelText() {
        String label = super.getLabelText();
        if (label == null) {
            EObject element = getElement();
            if (element != null) {
                return EMFCoreUtil.getName(element);
            }
        }
        return label;
    }
@


1.9.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.8
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d28 1
a28 1
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
d152 1
a152 1
			return new EtoolsProxyCommand(com);
@


1.7
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d17 1
d22 2
a26 1
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
d32 3
a36 1
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
d77 19
a95 9
		return (EObject) MEditingDomainGetter.getMEditingDomain((View)getModel()).runAsRead(new MRunnable() {

			public Object run() {
				View primary = getPrimaryView();
				if (primary != null)
					return ViewUtil.resolveSemanticElement(primary);
				return null;
			}
		});
@


1.6
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d17 1
d27 1
d130 5
a134 1
			CreateDiagramLinkCommand com = new CreateDiagramLinkCommand(
@


1.5
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a19 2
import org.eclipse.swt.graphics.Image;

d24 1
d28 1
a28 2
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
d33 1
d129 1
a129 2
					DiagramResourceManager.
					getI18NString("Command.CreateDiagramLink"),//$NON-NLS-1$
@


1.4
log
@Bugzilla 109618: gmf_head mmostafa 050915 :  Remove the deprecated view facade interfaces and classes
@
text
@d29 1
a29 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d130 1
a130 1
					PresentationResourceManager.
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d71 1
a71 1
	protected EObject resolveSemanticElement() {
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.       		       |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d32 1
a32 1
import com.ibm.xtools.notation.View;
@

