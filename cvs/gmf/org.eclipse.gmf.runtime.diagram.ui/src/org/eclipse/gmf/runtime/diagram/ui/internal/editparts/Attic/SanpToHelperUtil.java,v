head	1.3;
access;
symbols
	v20081022-1925:1.3
	v20080917-1925:1.3
	v20080911-1728:1.3
	v20080910-1520:1.3
	v20080903-1520:1.3
	v20080731-1520:1.3
	v20080723-2246:1.3
	v20080527-1151:1.1
	v20080501-2127:1.1
	m20080429-1543:1.1
	v20080201-0201:1.1
	v20080118-1129:1.1
	v20080114-2222:1.1
	v20080107-1111:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20071112-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070915-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.4
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070614-1400:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070518-1300:1.1
	bugzilla111892_group_support:1.1.0.2
	Root_bugzilla111892_group_support:1.1
	v20070504-1000:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1;
locks; strict;
comment	@# @;


1.3
date	2008.01.11.15.59.37;	author crevells;	state dead;
branches;
next	1.2;
commitid	6a2c478792684567;

1.2
date	2007.12.11.15.17.03;	author crevells;	state Exp;
branches;
next	1.1;
commitid	70dc475ea9ed4567;

1.1
date	2007.01.16.14.54.00;	author mmostafa;	state Exp;
branches;
next	;
commitid	78d445ace7064567;


desc
@@


1.3
log
@[111901] gmf_head crevells 080111 [KeyboardBindings] Ability to move shapes using cursors keys. (by default)
@
text
@/******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.editparts;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.gef.CompoundSnapToHelper;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.SnapToGeometry;
import org.eclipse.gef.SnapToGrid;
import org.eclipse.gef.SnapToHelper;
import org.eclipse.gef.rulers.RulerProvider;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.SnapToGeometryEx;
import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.SnapToGuidesEx;

/**
 * @@author mmostafa
 * 
 * Utility class used by the EditPart to allow them to adapt a SnapToHelper.class
 * 
 */
public class SanpToHelperUtil {

    /**
     * returns the the appropriate snap helper(s), this method will always reach
     * for the first reachable DiagramEditPart using the passed edit part, then
     * use this Diagram edit part to get the snap helper
     * 
     * @@param editPart ,
     *            edit part to get the snap helper for
     * @@return
     */
    static public Object getSnapHelper(GraphicalEditPart editPart) {
        // get the diagram Edit Part
        GraphicalEditPart diagramEditPart = editPart;
        while (diagramEditPart != null
            && !(diagramEditPart instanceof DiagramEditPart)) {
            diagramEditPart = (GraphicalEditPart) diagramEditPart.getParent();
        }        

        if (diagramEditPart == null)
            return null;

        //for snap to geometry, attempt to locate a compartment as a parent
        GraphicalEditPart parent = (GraphicalEditPart)editPart;
        while (parent != null
        	&& !(parent instanceof ISurfaceEditPart)){
        	parent = (GraphicalEditPart) parent.getParent();	        	
        }

        if (parent == null)
        	parent = diagramEditPart;            

        List<SnapToHelper> snapStrategies = new ArrayList<SnapToHelper>();
        EditPartViewer viewer = diagramEditPart.getViewer();

        Boolean val = (Boolean) editPart.getViewer().getProperty(
            RulerProvider.PROPERTY_RULER_VISIBILITY);

        if (val != null && val.booleanValue())
            snapStrategies.add(new SnapToGuidesEx(diagramEditPart));

        val = (Boolean) viewer
        .getProperty(SnapToGeometry.PROPERTY_SNAP_ENABLED); 
        if (val != null && val.booleanValue())       	
        	snapStrategies.add(new SnapToGeometryEx(parent));        
        
        val = (Boolean) viewer
            .getProperty(SnapToGrid.PROPERTY_GRID_ENABLED);      	
     
        if (val != null && val.booleanValue())        	
            snapStrategies.add(new SnapToGrid(diagramEditPart));
        
        if (snapStrategies.size() == 0)
            return null;

        if (snapStrategies.size() == 1)
            return snapStrategies.get(0);

        SnapToHelper ss[] = new SnapToHelper[snapStrategies.size()];
        for (int i = 0; i < snapStrategies.size(); i++)
            ss[i] = (SnapToHelper) snapStrategies.get(i);
        return new CompoundSnapToHelper(ss);
    }
}
@


1.2
log
@[188974] gmf_head crevells 071211 [RulersGrid] GEF alignment feature missing
Contributed by:  Carson Li
@
text
@@


1.1
log
@[112799]  gmf_head mmostafa 070116 Shapes do not snap to grid when dragged over other shapes
@
text
@d25 1
d31 1
a31 1
 * Utility class used by the EditPart to allow them to adapt a SnapeHelper.class
d37 2
a38 2
     * returns the the appropiate snap helper(s), this method will always reach
     * for the first reachable DiagramEditPart using the poassed edit part, then
d51 1
a51 1
        }
d56 11
a66 1
        List snapStrategies = new ArrayList();
d76 8
a83 2
            .getProperty(SnapToGeometry.PROPERTY_SNAP_ENABLED);
        if (val != null && val.booleanValue())
d85 1
a85 1

@

