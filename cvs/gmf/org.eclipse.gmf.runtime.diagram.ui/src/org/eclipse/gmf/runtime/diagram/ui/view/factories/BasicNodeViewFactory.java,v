head	1.14;
access;
symbols
	v20081023-2107:1.13.2.1
	v20081022-1925:1.14
	v20081022-1005:1.13.2.1
	v20081020-0700:1.14
	v20080917-1925:1.14
	v20080916-2008:1.13.2.1
	v20080911-1728:1.14
	v20080911-1506:1.13.2.1
	v20080910-1520:1.14
	v20080910-1510:1.13.2.1
	v20080903-1520:1.14
	v20080903-1510:1.13.2.1
	v20080813-1510:1.13.2.1
	v20080811-1546:1.14
	v20080731-1520:1.14
	v20080725-1738:1.13.2.1
	v20080723-2246:1.14
	v20080723-2232:1.13.2.1
	v20080723-1700:1.13.2.1
	v20080722-1827:1.14
	v20080718-1700:1.13.2.1
	v20080718-1731:1.14
	v20080716-1600:1.13.2.1
	v20080716-1642:1.14
	R2_1_maintenance:1.13.0.2
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080603-1553:1.13
	v20080527-1255:1.13
	v20080527-1151:1.12.4.1
	v20080516-1748:1.13
	v20080516-1143:1.13
	v20080512-1200:1.13
	v20080503-1740:1.13
	v20080501-2127:1.12.4.1
	v20080501-1739:1.13
	m20080429-1543:1.12.4.1
	v20080425-1959:1.13
	v20080417-1610:1.13
	v20080407-2250:1.13
	v20080407-0930:1.13
	v20080404-1111:1.13
	v20080328-1605:1.13
	v20080322-0000:1.13
	v20080222-1200:1.13
	v20080201-2010:1.13
	v20080201-0201:1.12.4.1
	v20080118-1129:1.12
	v20080114-2222:1.12
	v20080114-1111:1.12
	v20080107-1111:1.12
	v20071222-1111:1.12
	v20071214-1111:1.12
	v20071130-1111:1.12
	v20071124-0000:1.12
	v20071112-0000:1.12
	v20071108-0000:1.12
	v20071003-0000:1.12
	v20070915-0000:1.12
	v20070903-0000:1.12
	v20070809-0000:1.12
	R2_0_maintenance:1.12.0.4
	R2_0:1.12
	R4_20:1.12
	v20070621-0000:1.12
	RC3_20:1.12
	v20070614-1400:1.12
	v20070608-1300:1.12
	v20070605-1400:1.12
	v20070601-1400:1.12
	v20070525-1500:1.12
	v20070518-1300:1.12
	bugzilla111892_group_support:1.12.0.2
	Root_bugzilla111892_group_support:1.12
	v20070504-1000:1.10
	v20070420-1000:1.10
	v20070413-1300:1.10
	v20070330-1300:1.10
	v20060330-1300:1.10
	v20070322-1100:1.10
	v20060316-0600:1.10
	v20070221-1500:1.10
	v20070208-1800:1.10
	v20070202-0200:1.9.2.3
	v20070119-1200:1.9.2.3
	v20070111-0800:1.9.2.3
	v20070105-1200:1.9.2.3
	v20070103-0300:1.10
	M4_20:1.10
	v20061218-1500:1.9.2.3
	v20061218-1200:1.10
	v20061214-0000:1.10
	M3_20:1.10
	v20061117-0800:1.10
	v20061027-1200:1.9.2.3
	v20061013-1330:1.10
	v20061012-1100:1.9.2.3
	v20060925-1700:1.9.2.3
	v20060919-0800:1.9.2.3
	v20060907-1100:1.9.2.1
	M1_20:1.9
	v20060831-1500:1.9.2.1
	v20060824-1600:1.9.2.1
	v20060817-1500:1.9.2.1
	v20060810-1700:1.9.2.1
	v20060803-1200:1.9.2.1
	v20060728-0500:1.9
	v20060721-1130:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060616-1400:1.9
	v20060616-1200:1.9
	v20060609-1400:1.9
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.9
	v20060519-0800:1.9
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.7
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.7
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.7
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.5
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.14
date	2008.07.07.15.35.07;	author aboyko;	state Exp;
branches;
next	1.13;
commitid	5cd487237ab4567;

1.13
date	2008.01.29.16.47.27;	author ahunter;	state Exp;
branches
	1.13.2.1;
next	1.12;
commitid	6438479f589e4567;

1.12
date	2007.05.16.16.50.41;	author ahunter;	state Exp;
branches
	1.12.4.1;
next	1.11;
commitid	43e3464b36614567;

1.11
date	2007.05.11.22.18.56;	author mmostafa;	state Exp;
branches;
next	1.10;
commitid	45a74644ebd04567;

1.10
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.16.18.31.24;	author cmahoney;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2006.04.27.20.59.22;	author sshaw;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.09.00.44.45;	author ldamus;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.28.02.31.21;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.27.20.22.56;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.09.22.30.02;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.02.23.30.16;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.07;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.08.18.58.40;	author sshaw;	state Exp;
branches;
next	;

1.9.2.1
date	2006.08.02.20.16.18;	author mmostafa;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2006.09.11.18.07.28;	author mmostafa;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;

1.12.4.1
date	2008.01.29.16.48.57;	author ahunter;	state Exp;
branches;
next	;
commitid	3810479f58f84567;

1.13.2.1
date	2008.07.07.15.31.41;	author aboyko;	state Exp;
branches;
next	;
commitid	1ca487236dd4567;


desc
@@


1.14
log
@[239648] gmf_head aboyko 080707 [Commands] Need to record creation of decorating views.
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.view.factories; 

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.Transaction;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.impl.InternalTransaction;
import org.eclipse.emf.transaction.impl.InternalTransactionalEditingDomain;
import org.eclipse.emf.workspace.AbstractEMFOperation;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
import org.eclipse.gmf.runtime.notation.LayoutConstraint;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationFactory;
import org.eclipse.gmf.runtime.notation.View;

/**
 * This is the base factory class for all Node views, it will 
 * create the view and decorate it using the default decorations
 * you can subclass it to add more decorations, or customize the 
 * way it looks, like adding new style
 * @@see #createView(IAdaptable, View, String, int, boolean, String)
 * @@see #decorateView(View, View, IAdaptable, String, int, boolean)
 * @@see #createStyles(View)
 * @@author mmostafa
 * 
 */
public class BasicNodeViewFactory extends AbstractViewFactory {
	private static final Map options = new HashMap();	
    static {
        options.put(Transaction.OPTION_UNPROTECTED, Boolean.TRUE);
        options.put(Transaction.OPTION_NO_NOTIFICATIONS, Boolean.TRUE);
        options.put(Transaction.OPTION_NO_TRIGGERS, Boolean.TRUE);
    }

    private static final Map setElementOptions = new HashMap();   
    static {
        options.put(Transaction.OPTION_UNPROTECTED, Boolean.FALSE);
        options.put(Transaction.OPTION_NO_NOTIFICATIONS, Boolean.TRUE);
        options.put(Transaction.OPTION_NO_TRIGGERS, Boolean.TRUE);
    }
    
	/**
	 * factory method, that will be called by the view service to creat
	 * the view
	 * @@param semanticAdapter semanitc element of the view, it can be null
     * @@param containerView the view to contain the connection
     * @@param semanticHint a semantic hint to reflect the view type, it can be empty 
     * @@param index position with parent's child collection 
     * @@param persisted persisted flag, this will indicate if the created view
	 * will be a presisted or transient view, transient views never get serialized
	 */
	public View createView(final IAdaptable semanticAdapter,
						   final View containerView,
						   final String semanticHint,
						   final int index,
		boolean persisted, final PreferencesHint preferencesHint) {
		setPreferencesHint(preferencesHint);
		final Node node = createNode();
		List styles = createStyles(node);
        if (styles.size() > 0) {
            node.getStyles().addAll(styles);
        }
		
        LayoutConstraint layoutConstraint = createLayoutConstraint();
        if (layoutConstraint != null) {
            node.setLayoutConstraint(layoutConstraint);
        }

		
		
		node.setType(semanticHint);
		
	    // decorate view assumes that the view had been inserted already, so
		// we had to call insert child before calling decorate view
		ViewUtil.insertChildView(containerView, node, index, persisted);	
        
        final EObject semanticEl = semanticAdapter==null ? null : (EObject)semanticAdapter.getAdapter(EObject.class);
        if (semanticEl==null)
            // enforce a set to NULL
            node.setElement(null);
        else if (requiresElement(semanticAdapter,containerView)){
            TransactionalEditingDomain domain = getEditingDomain(semanticEl,
                containerView);
            if (domain != null) {
                AbstractEMFOperation operation = new AbstractEMFOperation(
                    domain, StringStatics.BLANK, setElementOptions) {
        
                    protected IStatus doExecute(IProgressMonitor monitor,
                            IAdaptable info)
                        throws ExecutionException {
                        // setElement must create a record in the ChangeRecorder,
                        // otherwise setting the element will never be undone on Undo
                        // and cross reference adapters will always report this new node as having reference to semanticEl
                        // even when the node is itself dead.
                        // This will cause all kind of problems, semanticEl becoming "undeletable" being one.
                        node.setElement(semanticEl);
                        return Status.OK_STATUS;
                    }
                };
                try {
                    operation.execute(new NullProgressMonitor(), null);
                } catch (ExecutionException e) {
                    Trace.catching(DiagramUIPlugin.getInstance(),
                        DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                        "createView", e); //$NON-NLS-1$
                    Log
                        .warning(DiagramUIPlugin.getInstance(),
                            DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
                            "createView", e); //$NON-NLS-1$
                }
            }
        }
		
        TransactionalEditingDomain domain = getEditingDomain(semanticEl,
            containerView);
        
        if (domain != null) {
            // try to reuse the transaction
            if (isUnProtectedSilentTransactionInProgress(domain)){
                // decorate view had to run as a silent operation other wise
                // it will generate too many events
                decorateView(containerView, node, semanticAdapter,
                    semanticHint, index, true);
                
            }else{
        		AbstractEMFOperation operation = new AbstractEMFOperation(
                    domain, StringStatics.BLANK, options) {
        
        			protected IStatus doExecute(IProgressMonitor monitor,
        					IAdaptable info)
        				throws ExecutionException {
        				// decorate view had to run as a silent operation otherwise
        				// it will generate too many events
        				decorateView(containerView, node, semanticAdapter,
        					semanticHint, index, true);
        
        				return Status.OK_STATUS;
        			}
        		};
        		try {
        			operation.execute(new NullProgressMonitor(), null);
        		} catch (ExecutionException e) {
        			Trace.catching(DiagramUIPlugin.getInstance(),
        				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
        				"createView", e); //$NON-NLS-1$
        			Log
        				.warning(DiagramUIPlugin.getInstance(),
        					DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
        					"createView", e); //$NON-NLS-1$
        		}
            }
        }
		return node;
	}
    
    /**
     * This method is responsible for decorating the created view, it get called
     * by the Factory method
     * 
     * @@link #createView(IAdaptable, View, String, int, boolean), it will
     *       intiliaze the view with the default preferences also it will create
     *       the default elements of the <code>View</code> if it had any
     * @@param containerView
     *            the container of the view
     * @@param view
     *            the view itself
     * @@param semanticAdapter
     *            the semantic elemnent of the view (it could be null)
     * @@param semanticHint
     *            the semantic hint of the view
     * @@param index
     *            the index of the view
     * @@param persisted
     *            flag indicating the the view was created as persisted or not
     */
	protected void decorateView(View containerView,
								View view,
								IAdaptable semanticAdapter,
								String semanticHint,
								int index,
								boolean persisted){
		initializeFromPreferences(view);
	}

	/**
	 * Method used to create the layout constraint that will get set on the 
	 * created view. You can override this method in your own factory to change
	 * the default constraint. This method is called by @@link #createView(IAdaptable, View, String, int, boolean) 
	 * @@return a new layout constraint for the view
	 */
	protected LayoutConstraint createLayoutConstraint() {
		return null;
	}

	
	/**
	 * method to create the Notation meta model <code>Node</code>
	 * object that represents the view, you can override this method in your
	 * own factories to create you own node while extends the <code>Node</code> class
	 * this method is invoked by @@link #createView(IAdaptable, View, String, int, boolean)
	 * @@return the created <code>Node</code>
	 */
	protected Node createNode(){
		return NotationFactory.eINSTANCE.createNode();
	}
    
     /**
     * Checks if the current active transaction is a unprotected amd silent
     * 
     * @@param domain , the domain to use during the check
     * @@return <code>true</code> if the current active transaction is unprotected and silent 
     */
    protected static boolean isUnProtectedSilentTransactionInProgress(TransactionalEditingDomain domain) {
        if (domain instanceof InternalTransactionalEditingDomain){
            InternalTransactionalEditingDomain internalEditingDomain = 
                (InternalTransactionalEditingDomain)domain;
            InternalTransaction transaction = internalEditingDomain.getActiveTransaction();
            if (transaction!=null && !transaction.isReadOnly()) {
                Object unprotectedMode = transaction.getOptions().get(Transaction.OPTION_UNPROTECTED); 
                if (Boolean.TRUE.equals(unprotectedMode)) {
                    // check for silent
                    Object noNotificationMode = transaction.getOptions().get(Transaction.OPTION_NO_NOTIFICATIONS);
                    Object noTriggersMode = transaction.getOptions().get(Transaction.OPTION_NO_TRIGGERS);
                    if (Boolean.TRUE.equals(noNotificationMode) &&
                    	Boolean.TRUE.equals(noTriggersMode)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
	

}@


1.13
log
@[216931] gmf-head cdamus 080129 Erroneous dependencies on Boolean identity in transaction options
@
text
@d62 7
d104 1
a104 1
        EObject semanticEl = semanticAdapter==null ? null : (EObject)semanticAdapter.getAdapter(EObject.class);
d109 30
a138 1
            node.setElement(semanticEl);
@


1.13.2.1
log
@[239648] gmf_R2_1_miantenance aboyko 080707 [Commands] Need to record creation of decorating views.
@
text
@a61 7
    private static final Map setElementOptions = new HashMap();   
    static {
        options.put(Transaction.OPTION_UNPROTECTED, Boolean.FALSE);
        options.put(Transaction.OPTION_NO_NOTIFICATIONS, Boolean.TRUE);
        options.put(Transaction.OPTION_NO_TRIGGERS, Boolean.TRUE);
    }
    
d97 1
a97 1
        final EObject semanticEl = semanticAdapter==null ? null : (EObject)semanticAdapter.getAdapter(EObject.class);
d102 1
a102 30
            TransactionalEditingDomain domain = getEditingDomain(semanticEl,
                containerView);
            if (domain != null) {
                AbstractEMFOperation operation = new AbstractEMFOperation(
                    domain, StringStatics.BLANK, setElementOptions) {
        
                    protected IStatus doExecute(IProgressMonitor monitor,
                            IAdaptable info)
                        throws ExecutionException {
                        // setElement must create a record in the ChangeRecorder,
                        // otherwise setting the element will never be undone on Undo
                        // and cross reference adapters will always report this new node as having reference to semanticEl
                        // even when the node is itself dead.
                        // This will cause all kind of problems, semanticEl becoming "undeletable" being one.
                        node.setElement(semanticEl);
                        return Status.OK_STATUS;
                    }
                };
                try {
                    operation.execute(new NullProgressMonitor(), null);
                } catch (ExecutionException e) {
                    Trace.catching(DiagramUIPlugin.getInstance(),
                        DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                        "createView", e); //$NON-NLS-1$
                    Log
                        .warning(DiagramUIPlugin.getInstance(),
                            DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
                            "createView", e); //$NON-NLS-1$
                }
            }
@


1.12
log
@gmf_head ahunter 070516 Update Copyright for files changed in 2007
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2007 IBM Corporation and others.
d211 1
a211 1
                if (unprotectedMode != null && unprotectedMode == Boolean.TRUE) {
d215 2
a216 2
                    if (unprotectedMode != null && noNotificationMode == Boolean.TRUE &&
                        noTriggersMode !=null &&  noTriggersMode == Boolean.TRUE           ) {
@


1.12.4.1
log
@[216931] gmf-R2_0_aintenance cdamus 080129 Erroneous dependencies on Boolean identity in transaction options
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2008 IBM Corporation and others.
d211 1
a211 1
                if (Boolean.TRUE.equals(unprotectedMode)) {
d215 2
a216 2
                    if (Boolean.TRUE.equals(noNotificationMode) &&
                    	Boolean.TRUE.equals(noTriggersMode)) {
@


1.11
log
@[186637] gmf_head mmostafa 070511 View#setElement is not undone
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.10
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d89 1
a89 7
		EObject semanticEl = semanticAdapter==null ? null : (EObject)semanticAdapter.getAdapter(EObject.class);
		if (semanticEl==null)
			// enforce a set to NULL
			node.setElement(null);
		else if (requiresElement(semanticAdapter,containerView)){
			node.setElement(semanticEl);
		}
d95 9
a103 1
		ViewUtil.insertChildView(containerView, node, index, persisted);		
@


1.9
log
@Bugzilla#142033 gmf_head cmahoney 050516 Shape and connector factories should use the same mechanism to obtain editing domain
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d15 1
d27 2
d55 6
d79 9
a87 2
		node.getStyles().addAll(createStyles(node));
		node.setLayoutConstraint(createLayoutConstraint());
d101 1
a101 1
		ViewUtil.insertChildView(containerView, node, index, persisted);
a102 5
		Map options = new HashMap();
		options.put(Transaction.OPTION_UNPROTECTED, Boolean.TRUE);
		options.put(Transaction.OPTION_NO_NOTIFICATIONS, Boolean.TRUE);
		options.put(Transaction.OPTION_NO_TRIGGERS, Boolean.TRUE);

d107 34
a140 26
    		AbstractEMFOperation operation = new AbstractEMFOperation(
                domain, StringStatics.BLANK, options) {
    
    			protected IStatus doExecute(IProgressMonitor monitor,
    					IAdaptable info)
    				throws ExecutionException {
    
    				// decorate view had to run as a silent operation other wise
    				// it will generate too many events
    				decorateView(containerView, node, semanticAdapter,
    					semanticHint, index, true);
    
    				return Status.OK_STATUS;
    			}
    		};
    		try {
    			operation.execute(new NullProgressMonitor(), null);
    		} catch (ExecutionException e) {
    			Trace.catching(DiagramUIPlugin.getInstance(),
    				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
    				"createView", e); //$NON-NLS-1$
    			Log
    				.warning(DiagramUIPlugin.getInstance(),
    					DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
    					"createView", e); //$NON-NLS-1$
    		}
d195 27
@


1.9.2.1
log
@[152455] gmf_R1_0_maintenance  yLulu 060802 ViewFactories impl could be enhanced
@
text
@a14 1
import java.util.List;
a51 7
	
	private static final Map options = new HashMap();	
    static {
        options.put(Transaction.OPTION_UNPROTECTED, Boolean.TRUE);
        options.put(Transaction.OPTION_NO_NOTIFICATIONS, Boolean.TRUE);
        options.put(Transaction.OPTION_NO_TRIGGERS, Boolean.TRUE);
    }
d70 2
a71 9
		List styles = createStyles(node);
        if (styles.size() > 0) {
            node.getStyles().addAll(styles);
        }
		
        LayoutConstraint layoutConstraint = createLayoutConstraint();
        if (layoutConstraint != null) {
            node.setLayoutConstraint(layoutConstraint);
        }
d85 1
a85 1
		ViewUtil.insertChildView(containerView, node, index, persisted);		
d87 5
@


1.9.2.2
log
@[156907] gmf_R1_0_maintenace mmostafa 060911  number of transactions created by view factories can be reduced
@
text
@a26 2
import org.eclipse.emf.transaction.impl.InternalTransaction;
import org.eclipse.emf.transaction.impl.InternalTransactionalEditingDomain;
d53 1
d106 26
a131 34
            // try to reuse the transaction
            if (isUnProtectedSilentTransactionInProgress(domain)){
                // decorate view had to run as a silent operation other wise
                // it will generate too many events
                decorateView(containerView, node, semanticAdapter,
                    semanticHint, index, true);
                
            }else{
        		AbstractEMFOperation operation = new AbstractEMFOperation(
                    domain, StringStatics.BLANK, options) {
        
        			protected IStatus doExecute(IProgressMonitor monitor,
        					IAdaptable info)
        				throws ExecutionException {
        				// decorate view had to run as a silent operation otherwise
        				// it will generate too many events
        				decorateView(containerView, node, semanticAdapter,
        					semanticHint, index, true);
        
        				return Status.OK_STATUS;
        			}
        		};
        		try {
        			operation.execute(new NullProgressMonitor(), null);
        		} catch (ExecutionException e) {
        			Trace.catching(DiagramUIPlugin.getInstance(),
        				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
        				"createView", e); //$NON-NLS-1$
        			Log
        				.warning(DiagramUIPlugin.getInstance(),
        					DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
        					"createView", e); //$NON-NLS-1$
        		}
            }
a185 27
    
     /**
     * Checks if the current active transaction is a unprotected amd silent
     * 
     * @@param domain , the domain to use during the check
     * @@return <code>true</code> if the current active transaction is unprotected and silent 
     */
    protected static boolean isUnProtectedSilentTransactionInProgress(TransactionalEditingDomain domain) {
        if (domain instanceof InternalTransactionalEditingDomain){
            InternalTransactionalEditingDomain internalEditingDomain = 
                (InternalTransactionalEditingDomain)domain;
            InternalTransaction transaction = internalEditingDomain.getActiveTransaction();
            if (transaction!=null && !transaction.isReadOnly()) {
                Object unprotectedMode = transaction.getOptions().get(Transaction.OPTION_UNPROTECTED); 
                if (unprotectedMode != null && unprotectedMode == Boolean.TRUE) {
                    // check for silent
                    Object noNotificationMode = transaction.getOptions().get(Transaction.OPTION_NO_NOTIFICATIONS);
                    Object noTriggersMode = transaction.getOptions().get(Transaction.OPTION_NO_TRIGGERS);
                    if (unprotectedMode != null && noNotificationMode == Boolean.TRUE &&
                        noTriggersMode !=null &&  noTriggersMode == Boolean.TRUE           ) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
@


1.9.2.3
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.8
log
@bugzilla 117603 sshaw 060425 BasicNodeViewFactory's createView invokes decorateView with peristed=true

reverted original change
@
text
@a25 1
import org.eclipse.emf.transaction.util.TransactionUtil;
a126 24
     * Determines the editing domain for the view creation.
     * 
     * @@param semanticElement
     *            the semantic elemement; may be null
     * @@param containerView
     *            the container view
     * @@return the editing domain
     */
    protected TransactionalEditingDomain getEditingDomain(
            EObject semanticElement, View containerView) {

        TransactionalEditingDomain result = null;

        if (semanticElement != null) {
            result = TransactionUtil.getEditingDomain(semanticElement);
        }

        if (result == null) {
            result = TransactionUtil.getEditingDomain(containerView);
        }
        return result;
    }
	
	/**
@


1.7
log
@[131007] gmf_head ldamus 060308 NPE in BasicNodeViewFactory when node is not in a resource
@
text
@d87 1
a87 2
		final boolean childPersisted = persisted;

d107 1
a107 1
    					semanticHint, index, childPersisted);
@


1.6
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d25 1
d94 31
a124 27
		AbstractEMFOperation operation = new AbstractEMFOperation(
			TransactionUtil.getEditingDomain(node), StringStatics.BLANK,
			options) {

			protected IStatus doExecute(IProgressMonitor monitor,
					IAdaptable info)
				throws ExecutionException {

				// decorate view had to run as a silent operation other wise
				// it will generate too many events
				decorateView(containerView, node, semanticAdapter,
					semanticHint, index, childPersisted);

				return Status.OK_STATUS;
			}
		};
		try {
			operation.execute(new NullProgressMonitor(), null);
		} catch (ExecutionException e) {
			Trace.catching(DiagramUIPlugin.getInstance(),
				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
				"createView", e); //$NON-NLS-1$
			Log
				.warning(DiagramUIPlugin.getInstance(),
					DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
					"createView", e); //$NON-NLS-1$
		}
d127 24
d153 19
a171 11
	 * This method is responsible for decorating the created view, it get called
	 * by the Factory method @@link #createView(IAdaptable, View, String, int, boolean),
	 * it will intiliaze the view with the default preferences also it will create 
	 * the default elements of the <code>View</code> if it had any
	 * @@param containerView the container of the view
	 * @@param view the view itself
	 * @@param semanticAdapter the semantic elemnent of the view (it could be null)
	 * @@param semanticHint the semantic hint of the view
	 * @@param index the index of the view
	 * @@param persisted flag indicating the the view was created as persisted or not
	 */
@


1.5
log
@bugzilla 116224 gmf-head sshaw 060119 Notation meta-model support for coordinate systems
@
text
@d14 4
d19 4
d24 6
a29 1
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
d32 3
a34 2
import org.eclipse.gmf.runtime.emf.core.edit.MRunOption;
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
d83 1
a83 1
	    // decorate view assumes that the view had been inserted already, so 
d85 1
a85 2
		ViewUtil.insertChildView(containerView,node,index, persisted);
		int options = MRunOption.UNCHECKED | MRunOption.SILENT;
d87 14
a100 2
		MEditingDomainGetter.getMEditingDomain(containerView).runWithOptions(new MRunnable() {
			public Object run() {
d102 5
a106 3
				//it will generate too many events 
				decorateView(containerView,node, semanticAdapter, semanticHint, index, childPersisted);
				return null;
d108 12
a119 1
		},options);
@


1.4
log
@bugzilla 117603 gmf_head sshaw 060109 BasicNodeViewFactory's createView invokes decorateView with persisted=true
@
text
@d59 6
a64 6
		if (requiresElement(semanticAdapter,containerView)){
			if (semanticAdapter==null)
				// enforce a set to NULL
				node.setElement(null);
			else
				node.setElement((EObject)semanticAdapter.getAdapter(EObject.class));
@


1.3
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d73 1
d78 1
a78 1
				decorateView(containerView,node, semanticAdapter, semanticHint, index, true);
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d43 1
a43 1
     * @@param containerView the view to contain the connector
@


1.1
log
@Bugzilla 109092  : rumv_head mmostafa 050908 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 10
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

