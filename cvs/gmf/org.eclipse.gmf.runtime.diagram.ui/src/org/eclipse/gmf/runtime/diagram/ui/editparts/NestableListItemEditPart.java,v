head	1.7;
access;
symbols
	v20081023-2107:1.7
	v20081022-1925:1.7
	v20081022-1005:1.7
	v20081020-0700:1.7
	v20080917-1925:1.7
	v20080916-2008:1.7
	v20080911-1728:1.7
	v20080911-1506:1.7
	v20080910-1520:1.7
	v20080910-1510:1.7
	v20080903-1520:1.7
	v20080903-1510:1.7
	v20080813-1510:1.7
	v20080811-1546:1.7
	v20080731-1520:1.7
	v20080725-1738:1.7
	v20080723-2246:1.7
	v20080723-2232:1.7
	v20080723-1700:1.7
	v20080722-1827:1.7
	v20080718-1700:1.7
	v20080718-1731:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080610-1132:1.7
	v20080603-1553:1.7
	v20080527-1255:1.7
	v20080527-1151:1.6
	v20080516-1748:1.7
	v20080516-1143:1.7
	v20080512-1200:1.7
	v20080503-1740:1.7
	v20080501-2127:1.6
	v20080501-1739:1.7
	m20080429-1543:1.6
	v20080425-1959:1.6
	v20080417-1610:1.6
	v20080407-2250:1.6
	v20080407-0930:1.6
	v20080404-1111:1.6
	v20080328-1605:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080201-2010:1.6
	v20080201-0201:1.6
	v20080118-1129:1.6
	v20080114-2222:1.6
	v20080114-1111:1.6
	v20080107-1111:1.6
	v20071222-1111:1.6
	v20071214-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20071112-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070915-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.4
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070518-1300:1.6
	bugzilla111892_group_support:1.6.0.2
	Root_bugzilla111892_group_support:1.6
	v20070504-1000:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070202-0200:1.5.2.2
	v20070119-1200:1.5.2.2
	v20070111-0800:1.5.2.2
	v20070105-1200:1.5.2.2
	v20070103-0300:1.6
	M4_20:1.6
	v20061218-1500:1.5.2.2
	v20061218-1200:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061027-1200:1.5.2.2
	v20061013-1330:1.6
	v20061012-1100:1.5.2.2
	v20060925-1700:1.5.2.2
	v20060919-0800:1.5.2.2
	v20060907-1100:1.5.2.1
	M1_20:1.5
	v20060831-1500:1.5.2.1
	v20060824-1600:1.5.2.1
	v20060817-1500:1.5.2.1
	v20060810-1700:1.5.2.1
	v20060803-1200:1.5.2.1
	v20060728-0500:1.5.2.1
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2008.04.28.15.05.52;	author crevells;	state Exp;
branches;
next	1.6;
commitid	70f34815e7cf4567;

1.6
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.30.21.14.57;	author sshaw;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.12.20.21.05.04;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.01.15.31.43;	author mmostafa;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.04.21.27.48;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.07.26.20.06.00;	author sshaw;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[229080] gmf_head crevells 080428 GMF: NestableListItemEditPart.createFigure() should be overridable.
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.Collections;
import java.util.List;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.MarginBorder;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.ExposeHelper;
import org.eclipse.gef.editparts.ViewportExposeHelper;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableCompartmentEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure;
import org.eclipse.gmf.runtime.diagram.ui.internal.figures.NestedResizableCompartmentFigure;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
import org.eclipse.gmf.runtime.diagram.ui.label.ILabelDelegate;
import org.eclipse.gmf.runtime.diagram.ui.label.WrappingLabelDelegate;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.notation.DrawerStyle;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.Ratio;
import org.eclipse.gmf.runtime.notation.Style;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Extends ListItemEditPart to support nesting of list compartments. This edit
 * part supports a TextCompartmentView that contains children. Should be used if
 * you have a TextCompartment that contains other children such as a list
 * compartment.
 * 
 * @@author choang
 * 
 */
public class NestableListItemEditPart
	extends ListItemEditPart
	implements IResizableCompartmentEditPart {

	final static int IS_RESIZABLE_FLAG = MAX_FLAG << 5;

	/**
	 * @@param view
	 */
	public NestableListItemEditPart(EObject view) {
		super(view);

		setFlag(IS_RESIZABLE_FLAG, false);
		Object model = basicGetModel();
		if (model instanceof Node) {
			Node node = (Node) model;
			Style style = node.getStyle(NotationPackage.Literals
				.DRAWER_STYLE);
			if (style != null)
				setFlag(IS_RESIZABLE_FLAG, true);
		}
	}

	WrapLabel textLabel = null;

	/**
	 * @@return Returns the textLabel.
	 */
	public WrapLabel getLabel() {

		if (isResizable()) {
			if (textLabel == null) {
				textLabel = createWrapLabel();
			}
			return textLabel;
		} else {
			return super.getLabel();
		}
	}
	
	/**
     * The main label figure for this editpart (that is, the only label figure
     * if this is a regular list item or the header label of the nested list
     * items if this is a nestable list item. Clients may override to create
     * other label types.
     * 
     * @@return the main label figure
     */
    protected IFigure getMainLabel() {
        return getLabel();
    }

	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.IResizableCompartmentEditPart#getCompartmentName()
	 */
	public String getCompartmentName() {
		return getLabelDelegate().getText();
	}
	
	/**
	 * Override to create a figure that will create a figure that contains a
	 * text compartment and a pane to store the child figures of the text
	 * compartment.
	 */
	protected IFigure createFigure() {
		if (isResizable()) {
            IMapMode mm = getMapMode();
			ResizableCompartmentFigure compartmentFigure = new NestedResizableCompartmentFigure(mm);
			ConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();
			layout.setStretchMajorAxis(false);
			layout.setStretchMinorAxis(false);
			layout.setMinorAlignment(ConstrainedToolbarLayout.ALIGN_TOPLEFT);
			compartmentFigure.getContentPane().setLayoutManager(layout);

			compartmentFigure.getTextPane().add(getMainLabel());

			// if the compartment is resizeable then we need to put a border
			// around the text compartment so that we have enough room for the
			// collpase handle.
			
			int one = mm.DPtoLP(1);
            int half_15 = mm.DPtoLP(15) / 2;

			// indent to make room for collapse handle for each nested list item
			compartmentFigure.getTextPane().setBorder(
				new MarginBorder(one, half_15, one, half_15));
			// indent for visual appearance
			compartmentFigure.getContentPane().setBorder(
				new MarginBorder(one, mm.DPtoLP(15), one, half_15));

			getMainLabel().setVisible(true);
			return compartmentFigure;
		} else {
			return super.createFigure();
		}

	}
    
	/**
	 * Adds additional edit policy EditPolicy.PRIMARY_DRAG_ROLE to provide
	 * collapsiblity for list compartments
	 */
	protected void createDefaultEditPolicies() {

		super.createDefaultEditPolicies();
		if (isResizable()) {
			installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
				new ResizableCompartmentEditPolicy());
		}
	}

	/**
	 * This edit part can support either being ListItemListCompartmentEditPart
	 * or ListItemListCompartmentEditPart that is nested with children and hence
	 * is resizable. This helper method will help us determine which behavior we
	 * want.
	 * 
	 * @@return true iff the TextCompartment is mean to support children.
	 */
	final protected boolean isResizable() {
		return getFlag(IS_RESIZABLE_FLAG);
	}

	/*
	 * @@return getView()).getChildren() this editpart supports having children.
	 */
	protected List getModelChildren() {

		if (getModel() instanceof View) {
			return ((View) getModel()).getChildren();
		}

		return Collections.EMPTY_LIST;
	}

	/**
	 * This method helps in children navigation by scrolling the compartment
	 * until the child is visible in the viewport
	 */
	public Object getAdapter(Class key) {

		if (key == ExposeHelper.class) {
			ViewportExposeHelper helper = new ViewportExposeHelper(this);
			return helper;
		}
		return super.getAdapter(key);
	}

	protected void refreshVisuals() {
		super.refreshVisuals();

		if (isResizable()) {
			refreshCollapsed();
			refreshRatio();
		}
	}

	/**
	 * @@return The compartment's figure if isResizable() else return null;
	 */
	private ResizableCompartmentFigure getCompartmentFigure() {
		if (isResizable()) {
			return (ResizableCompartmentFigure) getFigure();
		} else {
			return null;
		}
	}

	public IFigure getContentPane() {
		if (getCompartmentFigure() != null) {

			return getCompartmentFigure().getContentPane();
		} else {
			return super.getContentPane();
		}
	}

	/**
	 * Handles the following properties: <BR>
	 * <UL>
	 * <LI>{@@link Properties#ID_RATIO} calls {@@link #refreshRatio()}
	 * <LI>{@@link Properties#ID_COLLAPSED} calls {@@link #refreshCollapsed()}
	 * <UL>
	 * <BR>
	 * All other properties are forwarded to the parent class for processing.
	 * 
	 * @@param evt
	 *            a property change event.
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#handlePropertyChangeEvent(java.beans.PropertyChangeEvent)
	 */
	protected void handleNotificationEvent(Notification evt) {
		Object feature = evt.getFeature();
		if (NotationPackage.Literals.RATIO__VALUE.equals(feature)
			|| evt.getOldValue() instanceof Ratio
			|| evt.getNewValue() instanceof Ratio)
			refreshRatio();
		else if (NotationPackage.Literals.DRAWER_STYLE__COLLAPSED.equals(
			feature)) {
			setCollapsed(((Boolean) evt.getNewValue()).booleanValue(), true);
			this.getFigure().revalidate();
		} else
			super.handleNotificationEvent(evt);
	}

	/**
	 * Refreshes the compartment ratio property
	 */
	protected void refreshRatio() {
		if (ViewUtil
			.isPropertySupported((View) getModel(), Properties.ID_RATIO))
			setRatio((Double) ViewUtil.getStructuralFeatureValue(
				(View) getModel(), NotationPackage.Literals.RATIO__VALUE));
		else
			setRatio(new Double(-1));
	}

	/**
	 * Refreshes the compartment collapse state
	 */
	protected void refreshCollapsed() {
		DrawerStyle style = (DrawerStyle) ((View) getModel())
			.getStyle(NotationPackage.Literals.DRAWER_STYLE);
		if (style != null)
			setCollapsed(style.isCollapsed(), false);
	}

	/**
	 * Sets the collapse state of the compartment figure, considering the passed
	 * animate flag while doing so
	 * 
	 * @@param collapsed
	 *            the collapsed state
	 * @@param animate
	 *            the animate flag
	 */
	protected void setCollapsed(boolean collapsed, boolean animate) {
		if (getCompartmentFigure() != null) {
			if (collapsed) {
				if (animate)
					getCompartmentFigure().collapse();
				else
					getCompartmentFigure().setCollapsed();
			} else {
				if (animate)
					getCompartmentFigure().expand();
				else
					getCompartmentFigure().setExpanded();
			}
		}
	}

	/**
	 * Sets the ratio of the resizable compartment
	 * 
	 * @@param ratio
	 */
	protected void setRatio(Double ratio) {
		((IGraphicalEditPart) getParent()).setLayoutConstraint(this,
			getFigure(), ratio);
	}

	/**
	 * Sets the visibility of the compartment title
	 * 
	 * @@param showCompartmentTitle
	 */
	protected void setShowCompartmentTitle(boolean showCompartmentTitle) {
		if (getCompartmentFigure() != null)
			getCompartmentFigure().setTitleVisibility(showCompartmentTitle);
	}

}
@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d28 1
a28 1
import org.eclipse.gmf.runtime.diagram.ui.internal.figures.NestedResizableCompartmentFigure; 
d30 2
d34 1
d91 12
d109 1
a109 1
		return getLabel().getText();
d127 1
a127 1
			compartmentFigure.getTextPane().add(getLabel());
d143 1
a143 3
			WrapLabel label = getLabel();
			label.setLabelAlignment(PositionConstants.LEFT);
			label.setVisible(true);
d150 1
a150 1

@


1.5
log
@bugzilla 132219 gmf-head sshaw 030630 Use diagram editor mapmode in ShapeCompartmentFigure and ResizableCompartmentFigure
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d62 1
a62 1
		Object model = getModel();
d65 2
a66 2
			Style style = node.getStyle(NotationPackage.eINSTANCE
				.getDrawerStyle());
a102 1

d104 2
a105 1
			ResizableCompartmentFigure compartmentFigure = new NestedResizableCompartmentFigure(getMapMode());
d117 1
a117 1
			IMapMode mm = getMapMode();
d119 1
d123 1
a123 1
				new MarginBorder(one, mm.DPtoLP(15) / 2, one, mm.DPtoLP(15) / 2));
d126 1
a126 1
				new MarginBorder(one, mm.DPtoLP(15), one, mm.DPtoLP(15) / 2));
d232 1
a232 1
		if (NotationPackage.eINSTANCE.getRatio_Value().equals(feature)
d236 1
a236 1
		else if (NotationPackage.eINSTANCE.getDrawerStyle_Collapsed().equals(
d251 1
a251 1
				(View) getModel(), NotationPackage.eINSTANCE.getRatio_Value()));
d261 1
a261 1
			.getStyle(NotationPackage.eINSTANCE.getDrawerStyle());
@


1.5.2.1
log
@bugzilla 150316 sshaw gmf-R1_0_maintenance 060726 SemanticListCompartmentEditPart could improve its performance

Contributed by: Yaser Lulu
@
text
@d62 1
a62 1
		Object model = basicGetModel();
d65 2
a66 2
			Style style = node.getStyle(NotationPackage.Literals
				.DRAWER_STYLE);
d103 1
d105 1
a105 2
            IMapMode mm = getMapMode();
			ResizableCompartmentFigure compartmentFigure = new NestedResizableCompartmentFigure(mm);
d117 1
a117 1
			
a118 1
            int half_15 = mm.DPtoLP(15) / 2;
d122 1
a122 1
				new MarginBorder(one, half_15, one, half_15));
d125 1
a125 1
				new MarginBorder(one, mm.DPtoLP(15), one, half_15));
d231 1
a231 1
		if (NotationPackage.Literals.RATIO__VALUE.equals(feature)
d235 1
a235 1
		else if (NotationPackage.Literals.DRAWER_STYLE__COLLAPSED.equals(
d250 1
a250 1
				(View) getModel(), NotationPackage.Literals.RATIO__VALUE));
d260 1
a260 1
			.getStyle(NotationPackage.Literals.DRAWER_STYLE);
@


1.5.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.4
log
@bugzilla 121595 gmf_head sshaw 051220 Make ResizableCompartmentEditPart#getTitleName public
@
text
@d105 1
a105 1
			ResizableCompartmentFigure compartmentFigure = new NestedResizableCompartmentFigure(getMapMode().DPtoLP(ResizableCompartmentFigure.MIN_CLIENT_DP));
@


1.3
log
@ bugzilla 111894 gmf-head mmostafa 051201 Improve memory consumption of opened notation diagram
@
text
@d89 8
@


1.2
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@d21 1
d58 1
a58 1
	public NestableListItemEditPart(View view) {
@


1.1
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.ui.internal.figures.NestedResizableCompartmentFigure;
d31 1
a31 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d96 1
a96 1
			ResizableCompartmentFigure compartmentFigure = new NestedResizableCompartmentFigure();
d108 2
a109 1
			int one = MapMode.DPtoLP(1);
d113 1
a113 2
				new MarginBorder(one, MapMode.DPtoLP(15) / 2, one, MapMode
					.DPtoLP(15) / 2));
d116 1
a116 2
				new MarginBorder(one, MapMode.DPtoLP(15), one, MapMode
					.DPtoLP(15) / 2));
@

