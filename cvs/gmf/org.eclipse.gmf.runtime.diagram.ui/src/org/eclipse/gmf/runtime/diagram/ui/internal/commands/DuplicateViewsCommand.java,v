head	1.10;
access;
symbols
	v20081023-2107:1.9.2.1
	v20081022-1925:1.10
	v20081022-1005:1.9.2.1
	v20081020-0700:1.10
	v20080917-1925:1.10
	v20080916-2008:1.9.2.1
	v20080911-1728:1.10
	v20080911-1506:1.9.2.1
	v20080910-1520:1.10
	v20080910-1510:1.9.2.1
	v20080903-1520:1.10
	v20080903-1510:1.9.2.1
	v20080813-1510:1.9.2.1
	v20080811-1546:1.10
	v20080731-1520:1.10
	v20080725-1738:1.9.2.1
	v20080723-2246:1.10
	v20080723-2232:1.9.2.1
	v20080723-1700:1.9.2.1
	v20080722-1827:1.10
	v20080718-1700:1.9.2.1
	v20080718-1731:1.10
	v20080716-1600:1.9.2.1
	v20080716-1642:1.10
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080527-1255:1.9
	v20080527-1151:1.8
	v20080516-1748:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080503-1740:1.9
	v20080501-2127:1.8
	v20080501-1739:1.9
	m20080429-1543:1.8
	v20080425-1959:1.9
	v20080417-1610:1.9
	v20080407-2250:1.9
	v20080407-0930:1.9
	v20080404-1111:1.9
	v20080328-1605:1.9
	v20080322-0000:1.9
	v20080222-1200:1.9
	v20080201-2010:1.9
	v20080201-0201:1.8
	v20080118-1129:1.8
	v20080114-2222:1.8
	v20080114-1111:1.9
	v20080107-1111:1.9
	v20071222-1111:1.9
	v20071214-1111:1.9
	v20071130-1111:1.9
	v20071124-0000:1.8
	v20071112-0000:1.9
	v20071108-0000:1.9
	v20071003-0000:1.8
	v20070915-0000:1.8
	v20070903-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.4
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070614-1400:1.8
	v20070608-1300:1.8
	v20070605-1400:1.8
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070518-1300:1.8
	bugzilla111892_group_support:1.8.0.2
	Root_bugzilla111892_group_support:1.8
	v20070504-1000:1.8
	v20070420-1000:1.8
	v20070413-1300:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070221-1500:1.8
	v20070208-1800:1.8
	v20070202-0200:1.7.2.2
	v20070119-1200:1.7.2.2
	v20070111-0800:1.7.2.2
	v20070105-1200:1.7.2.2
	v20070103-0300:1.8
	M4_20:1.8
	v20061218-1500:1.7.2.2
	v20061218-1200:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061027-1200:1.7.2.2
	v20061013-1330:1.8
	v20061012-1100:1.7.2.2
	v20060925-1700:1.7.2.2
	v20060919-0800:1.7.2.1
	v20060907-1100:1.7
	M1_20:1.7
	v20060831-1500:1.7
	v20060824-1600:1.7
	v20060817-1500:1.7
	v20060810-1700:1.7
	v20060803-1200:1.7
	v20060728-0500:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-0800:1.7
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.3;
locks; strict;
comment	@# @;


1.10
date	2008.07.08.19.07.47;	author ahunter;	state Exp;
branches;
next	1.9;
commitid	60ba4873bb034567;

1.9
date	2007.11.02.21.03.37;	author aboyko;	state Exp;
branches
	1.9.2.1;
next	1.8;
commitid	7608472b90a74567;

1.8
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.15.15.26.01;	author cmahoney;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.04.18.15.12.20;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.04.21.27.49;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.10;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.22;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.38;	author sshaw;	state Exp;
branches;
next	;

1.7.2.1
date	2006.09.18.21.57.42;	author cmahoney;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2006.09.22.21.18.42;	author cmahoney;	state Exp;
branches;
next	;

1.9.2.1
date	2008.07.08.18.20.01;	author ahunter;	state Exp;
branches;
next	;
commitid	726d4873afd14567;


desc
@@


1.10
log
@[236880] gmf-head lgrahek 080708 Exception occurs on Duplicate for design element
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.commands;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.diagram.ui.requests.DuplicateRequest;
import org.eclipse.gmf.runtime.emf.commands.core.commands.DuplicateEObjectsCommand;
import org.eclipse.gmf.runtime.notation.Bounds;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.LayoutConstraint;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;

/**
 * This command duplicates a list of notational views and adds each duplicate to
 * it's originator's container. It also duplicates the semantic element that the
 * view references (if it does reference a semantic element). All references
 * between views and elements that are duplicated are updated to refer to the
 * new duplicated objects.
 * 
 * <p>
 * The command returns the new duplicated views.
 * </p>
 * 
 * @@author cmahoney
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.ui.*
 */
public class DuplicateViewsCommand
	extends DuplicateEObjectsCommand {

	/**
	 * This is a map passed in by the client of all the elements that have been
	 * duplicated (key is original element, value is duplicated element) so that
	 * the views that are duplicated can be updated to point to the
	 * corresponding duplicated element.
	 */
	Map duplicatedElements;

	/**
	 * This will be populated with the views that are duplicated after the
	 * command executes.
	 */
	List duplicatedViewsToBeReturned = new ArrayList();
	
	private Point offset = new Point(0, 0);

	/**
     * Creates a new <code>DuplicateViewsCommand</code>.
     * 
     * @@param editingDomain
     *            the editing domain through which model changes are made
     * @@param label
     *            the command label
     * @@param request
     *            the <code>DuplicateElementsRequest</code> whose list of
     *            duplicated views will be populated
     * @@param viewsToDuplicate
     *            the views to be duplicated
     * @@param duplicatedElements
     *            the map of elements that were duplicated that should be used
     *            to change the duplicated views to reference its dupliated
     *            element (if applicable)
     * @@param offset
     *            the offset from the location of the original views where the
     *            new views will be placed.
     */
	public DuplicateViewsCommand(TransactionalEditingDomain editingDomain, String label, DuplicateRequest request,
			List viewsToDuplicate, Map duplicatedElements, Point offset) {
		super(editingDomain, label, viewsToDuplicate);
		this.duplicatedElements = duplicatedElements;
		duplicatedViewsToBeReturned = request.getDuplicatedViews();
		this.offset = offset;
	}

	/**
     * Creates a new <code>DuplicateViewsCommand</code>.
     * 
     * @@param editingDomain
     *            the editing domain through which model changes are made
     * @@param label
     *            the command label
     * @@param request
     *            the <code>DuplicateElementsRequest</code> whose list of
     *            duplicated views will be populated
     * @@param viewsToDuplicate
     *            the views to be duplicated
     * @@param offset
     *            the offset from the location of the original views where the
     *            new views will be placed.
     */
	public DuplicateViewsCommand(TransactionalEditingDomain editingDomain, String label, DuplicateRequest request,
			List viewsToDuplicate, Point offset) {
		this(editingDomain, label, request, viewsToDuplicate, null, offset);
	}

	/**
	 * Overridden to association the duplicated views with the duplicated
	 * elements.
	 */
	protected CommandResult doExecuteWithResult(
            IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {
        
		CommandResult result = super.doExecuteWithResult(progressMonitor, info);

		if (!result.getStatus().isOK()) {
			return result;
		}

		for (Iterator iter = getObjectsToBeDuplicated().iterator(); iter
			.hasNext();) {
			View originalView = (View) iter.next();
			View duplicateView = (View) getAllDuplicatedObjectsMap().get(
				originalView);

            // Update the duplicated views to reference the duplicated elements.
			assignSementicElementsDownViewTree(duplicateView);
            
			// Remove source and target edges that were not duplicated.
			List sourceRefs = new ArrayList(duplicateView.getSourceEdges());
			for (Iterator iterator = sourceRefs.iterator(); iterator.hasNext();) {
				EObject edge = (EObject) iterator.next();
				if (!getAllDuplicatedObjectsMap().containsValue(edge)) {
					sourceRefs.remove(edge);
				}
			}
			List targetRefs = new ArrayList(duplicateView.getTargetEdges());
			for (Iterator iterator = targetRefs.iterator(); iterator.hasNext();) {
				EObject edge = (EObject) iterator.next();
				if (!getAllDuplicatedObjectsMap().containsValue(edge)) {
					targetRefs.remove(edge);
				}
			}

			if (duplicateView instanceof Node) {
				// Change the location of the duplicated views.
				LayoutConstraint layoutConstraint = ((Node) duplicateView)
					.getLayoutConstraint();
				if (layoutConstraint instanceof Bounds) {
					Bounds bounds = (Bounds) layoutConstraint;
					int x = bounds.getX();
					bounds.setX(x + offset.x);
					int y = bounds.getY();
					bounds.setY(y + offset.y);
				}
			} else if (duplicateView instanceof Edge) {
                assert originalView instanceof Edge;
                
                // If the source/target wasn't duplicated, then the copier
                // would not have set the source/target.
                Edge duplicateEdge = (Edge) duplicateView;
                Edge originalEdge = (Edge) originalView;

                boolean sourceDuplicated = duplicateEdge.getSource() != null;
                boolean targetDuplicated = duplicateEdge.getTarget() != null;

                if (!sourceDuplicated) {
                    duplicateEdge.setSource(originalEdge.getSource());
                }
                if (!targetDuplicated) {
                    duplicateEdge.setTarget(originalEdge.getTarget());
                }
            }

			if (duplicateView != null) {
				duplicatedViewsToBeReturned.add(duplicateView);
			}
		}

		return CommandResult.newOKCommandResult(duplicatedViewsToBeReturned);

	}
	
	/**
	 * Assign semantic elements (if there are any to add) 
	 * to all children of a view down the view tree hierarchy
	 * 
	 * @@param view the view tree hierarchy root
	 */
	private void assignSementicElementsDownViewTree(View view) {
		EObject originalElement = view.getElement();
		if (originalElement != null) {
			Object duplicateElement = duplicatedElements.get(originalElement);
			if (duplicateElement != null) {
				view.setElement((EObject) duplicateElement);
			}
		}
		for (Iterator itr = view.getChildren().iterator(); itr.hasNext();) {
			assignSementicElementsDownViewTree((View) itr.next());
		}
	}
    
}@


1.9
log
@[208622] gmf_HEAD aboyko 071102 Contents of Canonical compartments are duplicated incorrectly
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2007 IBM Corporation and others.
d195 2
a196 1
	 * Assign semantic elements to all children of a view down the view tree hierarchy
d202 5
a206 3
		Object duplicateElement = duplicatedElements.get(originalElement);
		if (duplicateElement != null) {
			view.setElement((EObject) duplicateElement);
@


1.9.2.1
log
@[236880] gmf-R2_1_maintenance lgrahek 080708 Exception occurs on Duplicate for design element
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2008 IBM Corporation and others.
d195 1
a195 2
	 * Assign semantic elements (if there are any to add) 
	 * to all children of a view down the view tree hierarchy
d201 3
a203 5
		if (originalElement != null) {
			Object duplicateElement = duplicatedElements.get(originalElement);
			if (duplicateElement != null) {
				view.setElement((EObject) duplicateElement);
			}
@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d137 1
a137 8
			EObject originalElement = duplicateView.getElement();
            if (duplicatedElements != null) {
                Object duplicateElement = duplicatedElements
                    .get(originalElement);
                if (duplicateElement != null) {
                    duplicateView.setElement((EObject) duplicateElement);
                }
            }
d192 17
a208 1
	}  
@


1.7
log
@Bugzilla#140166 gmf_head cmahoney 060515 Move necessary client accessed internal classes into public API
@
text
@a23 1
import org.eclipse.emf.ecore.util.EcoreUtil;
d29 1
a129 8
		// Update the duplicated views to reference the duplicated elements.
		if (duplicatedElements != null && !duplicatedElements.isEmpty()) {
			EcoreUtil.Copier copier = new EcoreUtil.Copier();
			copier.putAll(duplicatedElements);
			copier.putAll(getAllDuplicatedObjectsMap());
			copier.copyReferences();
		}

d136 10
d173 18
a190 1
			}
d199 2
a200 1
	}
@


1.7.2.1
log
@Bugzilla#157685 gmf_R1_0_maintenance crevells 060918 Add ability to duplicate a connection without also duplicating the two ends
@
text
@a29 1
import org.eclipse.gmf.runtime.notation.Edge;
d129 1
a129 1
        
d171 1
a171 18
			} else if (duplicateView instanceof Edge) {
                assert originalView instanceof Edge;
                
                // If the source/target wasn't duplicated, then the copier
                // would not have set the source/target.
                Edge duplicateEdge = (Edge) duplicateView;
                Edge originalEdge = (Edge) originalView;

                boolean sourceDuplicated = duplicateEdge.getSource() != null;
                boolean targetDuplicated = duplicateEdge.getTarget() != null;

                if (!sourceDuplicated) {
                    duplicateEdge.setSource(originalEdge.getSource());
                }
                if (!targetDuplicated) {
                    duplicateEdge.setTarget(originalEdge.getTarget());
                }
            }
d180 1
a180 2
	}  
    
@


1.7.2.2
log
@Bugzilla#158349 gmf_R1_0_maintenance crevells 060922 DuplicateViewsCommand could modify the duplicated semantic elements
@
text
@d24 1
d130 8
a144 10
            // Update the duplicated views to reference the duplicated elements.
			EObject originalElement = duplicateView.getElement();
            if (duplicatedElements != null) {
                Object duplicateElement = duplicatedElements
                    .get(originalElement);
                if (duplicateElement != null) {
                    duplicateView.setElement((EObject) duplicateElement);
                }
            }
            
@


1.6
log
@Bugzilla#124034 gmf_head cmahoney 060418 DragEditPartsTrackerEx should create DuplicateRequests since suberclass creates Clone requests
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.DuplicateRequest;
@


1.5
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d22 1
d65 1
a65 1
	private int offset = 0;
d68 2
a69 2
	 * Creates a new <code>DuplicateViewsCommand</code>.
	 * 
d72 15
a86 15
	 * @@param label
	 *            the command label
	 * @@param request
	 *            the <code>DuplicateElementsRequest</code> whose list of duplicated
	 *            views will be populated
	 * @@param viewsToDuplicate
	 *            the views to be duplicated
	 * @@param duplicatedElements
	 *            the map of elements that were duplicated that should be used
	 *            to change the duplicated views to reference its dupliated
	 *            element (if applicable)
	 * @@param offset
	 * 			the <code>int</code> that is the offset from the original views that
	 * 			the new views will be placed in logical coordinates
	 */
d88 1
a88 1
			List viewsToDuplicate, Map duplicatedElements, int offset) {
d96 2
a97 2
	 * Creates a new <code>DuplicateViewsCommand</code>.
	 * 
d100 11
a110 11
	 * @@param label
	 *            the command label
	 * @@param request
	 *            the <code>DuplicateElementsRequest</code> whose list of duplicated
	 *            views will be populated
	 * @@param viewsToDuplicate
	 *            the views to be duplicated
	 * @@param offset
	 * 			the <code>int</code> that is the offset from the original views that
	 * 			the new views will be placed in logical coordinates
	 */
d112 1
a112 1
			List viewsToDuplicate, int offset) {
d167 1
a167 1
					bounds.setX(x + offset);
d169 1
a169 1
					bounds.setY(y + offset);
@


1.4
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d19 2
d24 1
d69 2
d86 1
a86 1
	public DuplicateViewsCommand(String label, DuplicateRequest request,
d88 1
a88 1
		super(label, viewsToDuplicate);
d97 2
d110 1
a110 1
	public DuplicateViewsCommand(String label, DuplicateRequest request,
d112 1
a112 1
		this(label, request, viewsToDuplicate, null, offset);
d119 5
a123 2
	protected CommandResult doExecute(IProgressMonitor progressMonitor) {
		CommandResult result = super.doExecute(progressMonitor);
d177 1
a177 1
		return newOKCommandResult(duplicatedViewsToBeReturned);
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a21 1

a23 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d60 2
d77 3
d82 1
a82 1
			List viewsToDuplicate, Map duplicatedElements) {
d86 1
d99 3
d104 2
a105 2
			List viewsToDuplicate) {
		this(label, request, viewsToDuplicate, null);
d156 1
a156 1
					bounds.setX(x + MapMode.DPtoLP(10));
d158 1
a158 1
					bounds.setY(y + MapMode.DPtoLP(10));
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d25 4
a28 4
import com.ibm.xtools.notation.Bounds;
import com.ibm.xtools.notation.LayoutConstraint;
import com.ibm.xtools.notation.Node;
import com.ibm.xtools.notation.View;
@

