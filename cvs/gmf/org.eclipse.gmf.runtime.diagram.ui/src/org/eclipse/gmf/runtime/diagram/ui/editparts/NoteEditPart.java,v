head	1.9;
access;
symbols
	v20081023-2107:1.8.2.1
	v20081022-1925:1.9
	v20081022-1005:1.8.2.1
	v20081020-0700:1.9
	v20080917-1925:1.9
	v20080916-2008:1.8.2.1
	v20080911-1728:1.9
	v20080911-1506:1.8.2.1
	v20080910-1520:1.9
	v20080910-1510:1.8.2.1
	v20080903-1520:1.8
	v20080903-1510:1.8
	v20080813-1510:1.8
	v20080811-1546:1.8
	v20080731-1520:1.8
	v20080725-1738:1.8
	v20080723-2246:1.8
	v20080723-2232:1.8
	v20080723-1700:1.8
	v20080722-1827:1.8
	v20080718-1700:1.8
	v20080718-1731:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080527-1255:1.8
	v20080527-1151:1.7
	v20080516-1748:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080503-1740:1.8
	v20080501-2127:1.7
	v20080501-1739:1.7
	m20080429-1543:1.7
	v20080425-1959:1.7
	v20080417-1610:1.7
	v20080407-2250:1.7
	v20080407-0930:1.7
	v20080404-1111:1.7
	v20080328-1605:1.7
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20080201-2010:1.7
	v20080201-0201:1.7
	v20080118-1129:1.7
	v20080114-2222:1.7
	v20080114-1111:1.7
	v20080107-1111:1.7
	v20071222-1111:1.7
	v20071214-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.7
	v20071112-0000:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070518-1300:1.7
	bugzilla111892_group_support:1.7.0.2
	Root_bugzilla111892_group_support:1.7
	v20070504-1000:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.5.2.4
	v20070119-1200:1.5.2.4
	v20070111-0800:1.5.2.4
	v20070105-1200:1.5.2.4
	v20070103-0300:1.7
	M4_20:1.7
	v20061218-1500:1.5.2.4
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.5.2.4
	v20061013-1330:1.7
	v20061012-1100:1.5.2.4
	v20060925-1700:1.5.2.2
	v20060919-0800:1.5.2.2
	v20060907-1100:1.5.2.2
	M1_20:1.5
	v20060831-1500:1.5.2.2
	v20060824-1600:1.5.2.2
	v20060817-1500:1.5.2.2
	v20060810-1700:1.5.2.2
	v20060803-1200:1.5.2.1
	v20060728-0500:1.5.2.1
	v20060721-1130:1.5.2.1
	v20060713-1700:1.5.2.1
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;


1.9
date	2008.09.10.19.15.51;	author aboyko;	state Exp;
branches;
next	1.8;
commitid	704348c81ce74567;

1.8
date	2008.05.03.20.56.21;	author ahunter;	state Exp;
branches
	1.8.2.1;
next	1.7;
commitid	608a481cd1724567;

1.7
date	2006.10.06.13.42.16;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.04.21.27.48;	author sshaw;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.36;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.07.11.15.10.29;	author cmahoney;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2006.08.10.18.40.27;	author mmostafa;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2006.10.05.21.11.48;	author ahunter;	state Exp;
branches;
next	1.5.2.4;

1.5.2.4
date	2006.10.05.21.21.35;	author ahunter;	state Exp;
branches;
next	;

1.8.2.1
date	2008.09.10.19.10.48;	author aboyko;	state Exp;
branches;
next	;
commitid	6da248c81bb84567;


desc
@@


1.9
log
@[118858] gmf_head jbruck 080910 [NoteTextLabel] Notes in diagram link mode are incorrectly sized
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.lang.ref.WeakReference;
import java.util.Collection;
import java.util.Iterator;

import org.eclipse.draw2d.geometry.Insets;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.transaction.NotificationFilter;
import org.eclipse.emf.transaction.ResourceSetChangeEvent;
import org.eclipse.emf.transaction.ResourceSetListenerImpl;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.OpenDiagramEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ViewComponentEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.figures.NoteFigure;
import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.DiagramLinkDragDropEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.NonSemanticEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceConverter;

/**
 * Note shape which provides textual annotations for diagram elements.  Notes are 
 * attachable. 
 * <p>
 * Notes support diagram links.
 * <p>
 * @@author jcorchis
 */
public class NoteEditPart extends ShapeNodeEditPart {
    
    // resource listener
    private ResourceListener listener = null;
    
    private boolean diagramLinkMode = false;

	/**
	 * constructor
	 * @@param view the view controlled by this edit part
	 */
	public NoteEditPart(View view) {
		super(view);
	}

	/**
	 * Creates a note figure.
	 */
	protected NodeFigure createNodeFigure() {
		IMapMode mm = getMapMode();
		int insetSize = mm.DPtoLP(5);
		Insets insets = new Insets(insetSize, insetSize, insetSize, insetSize);
		NoteFigure noteFigure = new NoteFigure(mm.DPtoLP(100), mm.DPtoLP(56), insets);
		Object model = getModel();
		if (model!=null && model instanceof View){
			View notationView = (View)model;
			if ( notationView!=null && 
				 (notationView.getEAnnotation(Properties.DIAGRAMLINK_ANNOTATION)!=null ||
				  notationView.getType() == null ||
				  notationView.getType().length() == 0)){
				diagramLinkMode = true;
				noteFigure.setDiagramLinkMode(true);
				
				// The default size is the minimum.
				noteFigure.setDefaultSize(insetSize, insetSize);
            }
		}
		return noteFigure;
	}

	/** Adds support for diagram links. */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();

		// Remove semantic edit policy and install a non-semantic edit policy
		removeEditPolicy(EditPolicyRoles.SEMANTIC_ROLE);
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
			new NonSemanticEditPolicy());

		// Add Note support for diagram links
		// The following two edit policies support the links.		
		installEditPolicy(
			EditPolicyRoles.DRAG_DROP_ROLE,
			new DiagramLinkDragDropEditPolicy());
		
		installEditPolicy(
			EditPolicyRoles.OPEN_ROLE,
			new OpenDiagramEditPolicy());

		// This View doesn't have semantic elements so use a component edit
		// policy that only gets a command to delete the view
		installEditPolicy(
			EditPolicy.COMPONENT_ROLE,
			new ViewComponentEditPolicy());
	}
	
	/**
	 * this method will return the primary child EditPart  inside this edit part
	 * @@return the primary child view inside this edit part
	 */
	public EditPart getPrimaryChildEditPart(){
		return getChildBySemanticHint(CommonParserHint.DESCRIPTION);
	}
    
    public Object getPreferredValue(EStructuralFeature feature) {
        Object preferenceStore = getDiagramPreferencesHint()
            .getPreferenceStore();
        if (preferenceStore instanceof IPreferenceStore) {
            if (feature == NotationPackage.eINSTANCE.getLineStyle_LineColor()) {
                
                return FigureUtilities.RGBToInteger(PreferenceConverter
                    .getColor((IPreferenceStore) preferenceStore,
                        IPreferenceConstants.PREF_NOTE_LINE_COLOR));
                
            } else if (feature == NotationPackage.eINSTANCE
                .getFillStyle_FillColor()) {
                
                return FigureUtilities.RGBToInteger(PreferenceConverter
                    .getColor((IPreferenceStore) preferenceStore,
                        IPreferenceConstants.PREF_NOTE_FILL_COLOR));
                
            }
        }

        return super.getPreferredValue(feature);
    } 
    
    private class ResourceListener extends ResourceSetListenerImpl{
        private WeakReference resourceRef = null; 
        private NoteEditPart editPart= null;
        public ResourceListener(Resource resource, NoteEditPart editPart){
            resourceRef = new WeakReference(resource);
            this.editPart = editPart;
        }
        
        /**
         * Disposes my context from the operation history when a resource is
         * unloaded from my editing domain.
         */
        public void resourceSetChanged(ResourceSetChangeEvent event) {
            if (editPart ==null || resourceRef.get()==null) {
                if (editPart != null && editPart.listener!=null) {
                    getEditingDomain().removeResourceSetListener(editPart.listener);
                    editPart.listener = null;
                }
                return;
            }
            boolean unloaded = isResourceUnloaded(event.getNotifications());
            if (unloaded && editPart.isActive()) {
                editPart.refresh();
                if (editPart.listener!=null) {
                    getEditingDomain().removeResourceSetListener(editPart.listener);
                    editPart.listener = null;
                }
            }
        }
        
        /**
         * Finds resources that have sent unload notifications.
         * 
         * @@param notifications
         *            notifications received from a transaction
         * @@return a set of resources that the notifications indicate have been
         *         unloaded, or <code>null</code> if none
         */
        private boolean isResourceUnloaded(Collection notifications) {
            for (Iterator iter = notifications.iterator(); iter.hasNext();) {
                Notification next = (Notification) iter.next();
                if (next.getNotifier()!=resourceRef.get())
                    return false;
                if (NotificationFilter.RESOURCE_UNLOADED.matches(next)) {
                    return true;
                }
            }
            return false;
        }

        public boolean isPostcommitOnly() {
            // only interested in post-commit "resourceSetChanged" event
            return true;
        }

    }
    
    protected void addSemanticListeners() {
        // the resource listener is needed only in diagram link mode
        if (diagramLinkMode){
            if (listener==null){
                listener = new ResourceListener(getNotationView().getElement().eResource(),this);
            }
            getEditingDomain().addResourceSetListener(listener);
        }
        super.addSemanticListeners();
    }

    protected void removeSemanticListeners() {
        //the resource listener is needed only in diagram link mode
        if (listener!=null) {
            getEditingDomain().removeResourceSetListener(listener);
            listener = null;
        }
        super.removeSemanticListeners();
    }

    protected void handleNotificationEvent(Notification notification) {
        Object feature = notification.getFeature();
        if (feature == NotationPackage.eINSTANCE.getView_Element() && notification.getEventType() == Notification.RESOLVE
                 && ((EObject)notification.getNotifier())== getNotationView() && listener != null) {
            // skipping the resolve event whenever the editpart is already resolved.
            return;
        }
   		if (NotationPackage.eINSTANCE.getLineStyle_LineWidth().equals(feature)) {
    			refreshLineWidth();
   		} else if (NotationPackage.eINSTANCE.getLineTypeStyle_LineType().equals(
    				feature)) {
   			refreshLineType();
   		} else {
            super.handleNotificationEvent(notification);
   		}
    }

    /*
     * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#setLineWidth(int)
     */
	protected void setLineWidth(int width) {
		((NoteFigure) getFigure()).setLineWidth(getMapMode().DPtoLP(width));
	}

	/*
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#setLineType(int)
	 */
	protected void setLineType(int lineType) {
		((NoteFigure)getFigure()).setLineStyle(lineType);
	}

	/*
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeEditPart#refreshVisuals()
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshLineType();
		refreshLineWidth();
	}
	
}
@


1.8
log
@[225137] gmf-head ahunter 080503 Line styles enhancement
@
text
@d73 2
a74 1
		Insets insets = new Insets(mm.DPtoLP(5), mm.DPtoLP(5), mm.DPtoLP(5), mm.DPtoLP(14));
d83 1
a83 1
                diagramLinkMode = true;
d85 3
@


1.8.2.1
log
@[118858] gmf_R2_1_maintenance jbruck 080910 [NoteTextLabel] Notes in diagram link mode are incorrectly sized
@
text
@d73 1
a73 2
		int insetSize = mm.DPtoLP(5);
		Insets insets = new Insets(insetSize, insetSize, insetSize, insetSize);
d82 1
a82 1
				diagramLinkMode = true;
a83 3
				
				// The default size is the minimum.
				noteFigure.setDefaultSize(insetSize, insetSize);
@


1.7
log
@[159112] gmf_head ahunter 061006 Merge 1.0.2 fix to head
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d230 8
a237 2
        
        super.handleNotificationEvent(notification);
d239 24
@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
d20 1
d148 2
a149 2
        private EditPart editPart= null;
        public ResourceListener(Resource resource, EditPart editPart){
d159 5
a163 1
            if (editPart ==null || resourceRef.get()==null)
d165 1
d169 4
d216 1
a216 1
        if (listener!=null)
d218 2
d223 10
@


1.5
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@d14 4
d19 6
d35 2
d39 1
d41 2
d53 5
d80 2
a81 1
				  notationView.getType().length() == 0))
d83 1
d121 90
@


1.5.2.1
log
@Bugzilla#146690 gmf_R1_0_maintenance cmahoney 060711 Inconsistent default colours
@
text
@a14 1
import org.eclipse.emf.ecore.EStructuralFeature;
a24 2
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
a26 1
import org.eclipse.gmf.runtime.notation.NotationPackage;
a27 2
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceConverter;
a98 23
    
    public Object getPreferredValue(EStructuralFeature feature) {
        Object preferenceStore = getDiagramPreferencesHint()
            .getPreferenceStore();
        if (preferenceStore instanceof IPreferenceStore) {
            if (feature == NotationPackage.eINSTANCE.getLineStyle_LineColor()) {
                
                return FigureUtilities.RGBToInteger(PreferenceConverter
                    .getColor((IPreferenceStore) preferenceStore,
                        IPreferenceConstants.PREF_NOTE_LINE_COLOR));
                
            } else if (feature == NotationPackage.eINSTANCE
                .getFillStyle_FillColor()) {
                
                return FigureUtilities.RGBToInteger(PreferenceConverter
                    .getColor((IPreferenceStore) preferenceStore,
                        IPreferenceConstants.PREF_NOTE_FILL_COLOR));
                
            }
        }

        return super.getPreferredValue(feature);
    } 
@


1.5.2.2
log
@[152470] gmf_R1_0_maintenance mmostafa  060810 Graphical edit part does not update the cached editing
[146337] gmf_R1_0_maintenance mmostafa  060810 DiagramEventBroker isn't listening to resource level events
@
text
@a13 4
import java.lang.ref.WeakReference;
import java.util.Collection;
import java.util.Iterator;

a14 1
import org.eclipse.emf.common.notify.Notification;
a15 4
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.transaction.NotificationFilter;
import org.eclipse.emf.transaction.ResourceSetChangeEvent;
import org.eclipse.emf.transaction.ResourceSetListenerImpl;
a43 5
    
    // resource listener
    private ResourceListener listener = null;
    
    private boolean diagramLinkMode = false;
d66 1
a66 2
				  notationView.getType().length() == 0)){
                diagramLinkMode = true;
a67 1
            }
a127 67
    
    private class ResourceListener extends ResourceSetListenerImpl{
        private WeakReference resourceRef = null; 
        private EditPart editPart= null;
        public ResourceListener(Resource resource, EditPart editPart){
            resourceRef = new WeakReference(resource);
            this.editPart = editPart;
        }
        
        /**
         * Disposes my context from the operation history when a resource is
         * unloaded from my editing domain.
         */
        public void resourceSetChanged(ResourceSetChangeEvent event) {
            if (editPart ==null || resourceRef.get()==null)
                return;
            boolean unloaded = isResourceUnloaded(event.getNotifications());
            if (unloaded && editPart.isActive()) {
                editPart.refresh();
            }
        }
        
        /**
         * Finds resources that have sent unload notifications.
         * 
         * @@param notifications
         *            notifications received from a transaction
         * @@return a set of resources that the notifications indicate have been
         *         unloaded, or <code>null</code> if none
         */
        private boolean isResourceUnloaded(Collection notifications) {
            for (Iterator iter = notifications.iterator(); iter.hasNext();) {
                Notification next = (Notification) iter.next();
                if (next.getNotifier()!=resourceRef.get())
                    return false;
                if (NotificationFilter.RESOURCE_UNLOADED.matches(next)) {
                    return true;
                }
            }
            return false;
        }

        public boolean isPostcommitOnly() {
            // only interested in post-commit "resourceSetChanged" event
            return true;
        }

    }
    
    protected void addSemanticListeners() {
        // the resource listener is needed only in diagram link mode
        if (diagramLinkMode){
            if (listener==null){
                listener = new ResourceListener(getNotationView().getElement().eResource(),this);
            }
            getEditingDomain().addResourceSetListener(listener);
        }
        super.addSemanticListeners();
    }

    protected void removeSemanticListeners() {
        //the resource listener is needed only in diagram link mode
        if (listener!=null)
            getEditingDomain().removeResourceSetListener(listener);
        super.removeSemanticListeners();
    }

@


1.5.2.3
log
@[159112] gmf_R1_0_maintenance mgoyal 061005 Opening a diagram with DiagramLink, causes StackOverFlow
@
text
@a19 1
import org.eclipse.emf.ecore.EObject;
d147 2
a148 2
        private NoteEditPart editPart= null;
        public ResourceListener(Resource resource, NoteEditPart editPart){
d158 1
a158 5
            if (editPart ==null || resourceRef.get()==null) {
                if (editPart != null && editPart.listener!=null) {
                    getEditingDomain().removeResourceSetListener(editPart.listener);
                    editPart.listener = null;
                }
a159 1
            }
a162 4
                if (editPart.listener!=null) {
                    getEditingDomain().removeResourceSetListener(editPart.listener);
                    editPart.listener = null;
                }
d206 1
a206 1
        if (listener!=null) {
a207 2
            listener = null;
        }
a210 10
    protected void handleNotificationEvent(Notification notification) {
        Object feature = notification.getFeature();
        if (feature == NotationPackage.eINSTANCE.getView_Element() && notification.getEventType() == Notification.RESOLVE
                 && ((EObject)notification.getNotifier())== getNotationView() && listener != null) {
            // skipping the resolve event whenever the editpart is already resolved.
            return;
        }
        
        super.handleNotificationEvent(notification);
    }
@


1.5.2.4
log
@[159112] gmf_R1_0_maintenance mgoyal 061005 Opening a diagram with DiagramLink, causes StackOverFlow
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.4
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d14 1
a16 1

d25 1
d51 3
a53 1
		NoteFigure noteFigure = new NoteFigure();
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d24 1
a24 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d24 1
a24 1
import com.ibm.xtools.notation.View;
@

