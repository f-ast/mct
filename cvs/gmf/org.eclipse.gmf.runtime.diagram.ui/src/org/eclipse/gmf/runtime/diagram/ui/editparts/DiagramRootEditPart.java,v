head	1.21;
access;
symbols
	v20081023-2107:1.21
	v20081022-1925:1.21
	v20081022-1005:1.21
	v20081020-0700:1.21
	v20080917-1925:1.21
	v20080916-2008:1.21
	v20080911-1728:1.21
	v20080911-1506:1.21
	v20080910-1520:1.21
	v20080910-1510:1.21
	v20080903-1520:1.21
	v20080903-1510:1.21
	v20080813-1510:1.21
	v20080811-1546:1.21
	v20080731-1520:1.21
	v20080725-1738:1.21
	v20080723-2246:1.21
	v20080723-2232:1.21
	v20080723-1700:1.21
	v20080722-1827:1.21
	v20080718-1700:1.21
	v20080718-1731:1.21
	v20080716-1600:1.21
	v20080716-1642:1.21
	R2_1_maintenance:1.21.0.2
	Root_R2_1_maintenance:1.21
	R2_1_0:1.21
	v20080610-1132:1.21
	v20080603-1553:1.21
	v20080527-1255:1.21
	v20080527-1151:1.20
	v20080516-1748:1.21
	v20080516-1143:1.21
	v20080512-1200:1.21
	v20080503-1740:1.21
	v20080501-2127:1.20
	v20080501-1739:1.21
	m20080429-1543:1.20
	v20080425-1959:1.21
	v20080417-1610:1.21
	v20080407-2250:1.21
	v20080407-0930:1.21
	v20080404-1111:1.21
	v20080328-1605:1.21
	v20080322-0000:1.21
	v20080222-1200:1.21
	v20080201-2010:1.21
	v20080201-0201:1.20
	v20080118-1129:1.20
	v20080114-2222:1.20
	v20080114-1111:1.21
	v20080107-1111:1.21
	v20071222-1111:1.21
	v20071214-1111:1.21
	v20071130-1111:1.20
	v20071124-0000:1.20
	v20071112-0000:1.20
	v20071108-0000:1.20
	v20071003-0000:1.20
	v20070915-0000:1.20
	v20070903-0000:1.20
	v20070809-0000:1.20
	R2_0_maintenance:1.20.0.4
	R2_0:1.20
	R4_20:1.20
	v20070621-0000:1.20
	RC3_20:1.20
	v20070614-1400:1.20
	v20070608-1300:1.20
	v20070605-1400:1.20
	v20070601-1400:1.20
	v20070525-1500:1.20
	v20070518-1300:1.20
	bugzilla111892_group_support:1.20.0.2
	Root_bugzilla111892_group_support:1.20
	v20070504-1000:1.20
	v20070420-1000:1.20
	v20070413-1300:1.20
	v20070330-1300:1.20
	v20060330-1300:1.20
	v20070322-1100:1.20
	v20060316-0600:1.20
	v20070221-1500:1.20
	v20070208-1800:1.20
	v20070202-0200:1.16.2.7
	v20070119-1200:1.16.2.6
	v20070111-0800:1.16.2.6
	v20070105-1200:1.16.2.6
	v20070103-0300:1.18
	M4_20:1.18
	v20061218-1500:1.16.2.6
	v20061218-1200:1.18
	v20061214-0000:1.18
	M3_20:1.18
	v20061117-0800:1.18
	v20061027-1200:1.16.2.6
	v20061013-1330:1.18
	v20061012-1100:1.16.2.6
	v20060925-1700:1.16.2.5
	v20060919-0800:1.16.2.5
	v20060907-1100:1.16.2.3
	M1_20:1.16
	v20060831-1500:1.16.2.2
	v20060824-1600:1.16.2.2
	v20060817-1500:1.16.2.2
	v20060810-1700:1.16.2.2
	v20060803-1200:1.16.2.2
	v20060728-0500:1.16.2.1
	v20060721-1130:1.16.2.1
	v20060713-1700:1.16
	R1_0_maintenance:1.16.0.2
	R1_0:1.16
	v20060627-1200:1.16
	v20060616-1400:1.16
	v20060616-1200:1.16
	v20060609-1400:1.16
	v20060531-1730:1.16
	v20060530-1930:1.16
	v20060526-1200:1.16
	v20060519-0800:1.16
	v20060512-1000:1.16
	I20060512-1000:1.16
	I20060505-1400:1.16
	I20060428-1300:1.16
	I20060424-0500:1.16
	I20060424-0300:1.16
	M6_10:1.16
	I20060407-1200:1.16
	I20060331-1000:1.16
	I20060324-0300:1.15
	I20060317-1300:1.15
	I20060317-1200:1.15
	I20060316-1300:1.15
	I20060309-1300:1.15
	M5_10:1.15
	S20060303-1600:1.15
	I20060227-1730:1.15
	I20060216-1945:1.15
	I20060210-1715:1.15
	I20060209-1815:1.15
	I20060203-0830:1.15
	I20060202-1415:1.15
	I20060129-1145:1.15
	I20060127-0900:1.14
	I20060120-1530:1.13
	I20060113-1700:1.11
	M4_10:1.11
	I20060107-1100:1.10
	I20060105-1630:1.10
	I20051230-1230:1.9
	I20051223-1100:1.9
	I20051217-0925:1.8
	I20051208-2000:1.8
	I20051201-1800:1.8
	I20051124-2000:1.8
	M3_10:1.8
	I20051118-1245:1.8
	I20051111-1800:1.8
	I20051106-0900:1.8
	v20051030:1.6;
locks; strict;
comment	@# @;


1.21
date	2007.12.11.15.17.03;	author crevells;	state Exp;
branches;
next	1.20;
commitid	70dc475ea9ed4567;

1.20
date	2007.01.26.21.46.31;	author aboyko;	state Exp;
branches;
next	1.19;
commitid	544545ba76b74567;

1.19
date	2007.01.26.21.35.18;	author aboyko;	state Exp;
branches;
next	1.18;
commitid	5dfc45ba74154567;

1.18
date	2006.10.11.20.50.29;	author mmostafa;	state Exp;
branches;
next	1.17;

1.17
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.27.16.04.46;	author mfeldman;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2006.01.27.20.22.56;	author sshaw;	state Exp;
branches;
next	1.14;

1.14
date	2006.01.20.22.10.12;	author cmahoney;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.17.14.58.29;	author sshaw;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.16.19.48.39;	author sshaw;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.13.15.27.49;	author sshaw;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.03.20.39.31;	author cmahoney;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.21.23.06.44;	author cmahoney;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.02.16.39.33;	author sshaw;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.28.14.29.38;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.26.20.47.13;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.14.19.37.49;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.12.22.25.22;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.37;	author sshaw;	state Exp;
branches;
next	;

1.16.2.1
date	2006.07.20.16.09.47;	author ldamus;	state Exp;
branches;
next	1.16.2.2;

1.16.2.2
date	2006.07.31.18.07.51;	author sshaw;	state Exp;
branches;
next	1.16.2.3;

1.16.2.3
date	2006.08.31.19.33.10;	author cmahoney;	state Exp;
branches;
next	1.16.2.4;

1.16.2.4
date	2006.09.13.16.09.57;	author sshaw;	state Exp;
branches;
next	1.16.2.5;

1.16.2.5
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	1.16.2.6;

1.16.2.6
date	2006.10.11.20.45.54;	author mmostafa;	state Exp;
branches;
next	1.16.2.7;

1.16.2.7
date	2007.01.26.21.49.57;	author aboyko;	state Exp;
branches;
next	;
commitid	560f45ba77854567;


desc
@@


1.21
log
@[188974] gmf_head crevells 071211 [RulersGrid] GEF alignment feature missing
Contributed by:  Carson Li
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;


import org.eclipse.draw2d.FreeformLayer;
import org.eclipse.draw2d.FreeformLayeredPane;
import org.eclipse.draw2d.LayeredPane;
import org.eclipse.draw2d.ScalableFigure;
import org.eclipse.draw2d.ScalableFreeformLayeredPane;
import org.eclipse.draw2d.Viewport;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.draw2d.geometry.Translatable;
import org.eclipse.gef.Request;
import org.eclipse.gef.SnapToGeometry;
import org.eclipse.gef.SnapToGrid;
import org.eclipse.gef.editparts.GridLayer;
import org.eclipse.gef.editparts.ScalableFreeformRootEditPart;
import org.eclipse.gef.editparts.ZoomListener;
import org.eclipse.gef.editparts.ZoomManager;
import org.eclipse.gef.rulers.RulerProvider;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemsAwareFreeFormLayer;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.GridLayerEx;
import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.PageBreakEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ZoomableEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.figures.PageBreaksFigure;
import org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup.PageInfoHelper;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.DiagramRuler;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
import org.eclipse.gmf.runtime.diagram.ui.util.MeasurementUnitHelper;
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ConnectionLayerEx;
import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScaledGraphics;
import org.eclipse.gmf.runtime.draw2d.ui.internal.mapmode.IMapModeHolder;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeTypes;
import org.eclipse.gmf.runtime.gef.ui.internal.editparts.AnimatableZoomManager;
import org.eclipse.gmf.runtime.notation.MeasurementUnit;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.util.IPropertyChangeListener;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.widgets.Display;

/**
 * RootEditPart which manages the Diagram's layers and creates the discrete zoom
 * levels for the <code>ZoomManager</code>.
 * 
 * @@author jcorchis
 */
public class DiagramRootEditPart
	extends ScalableFreeformRootEditPart
	implements ZoomableEditPart, IDiagramPreferenceSupport {
	
	private WrapperMapMode mm;
	
	/**
	 * @@author sshaw
	 * This pattern is necessary because, the constructor of the ScalableFreeformRootEditPart forces
	 * the scalable layered pane class to be instantiated where it gets initialized with the MapMode
	 * of the this root editpart.  However, we haven't had a chance to initialize the mapmode value yet since
	 * super must be called first.  So, this pattern allows us to set the mapmode into this container after
	 * super is called, but still have the scalable layered pane initialized with the mapmode value.
	 */
	private class WrapperMapMode implements IMapModeHolder {

		public WrapperMapMode() {
			super();
		}

		IMapMode containedMM = MapModeTypes.DEFAULT_MM;
		public void setContainedMapMode(IMapMode mm) {
			this.containedMM = mm;
		}
		
		/* (non-Javadoc)
		 * @@see org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode#DPtoLP(int)
		 */
		public int DPtoLP(int deviceUnit) {
			return containedMM.DPtoLP(deviceUnit);
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode#DPtoLP(org.eclipse.draw2d.geometry.Translatable)
		 */
		public Translatable DPtoLP(Translatable t) {
			return containedMM.DPtoLP(t);
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode#LPtoDP(int)
		 */
		public int LPtoDP(int logicalUnit) {
			return containedMM.LPtoDP(logicalUnit);
		}

		/* (non-Javadoc)
		 * @@see org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode#LPtoDP(org.eclipse.draw2d.geometry.Translatable)
		 */
		public Translatable LPtoDP(Translatable t) {
			return containedMM.LPtoDP(t);
		}
		
		public IMapMode getMapMode() {
			return containedMM;
		}
		
	}
	
	/**
	 * Default constructor
	 */
	public DiagramRootEditPart() {
		super();
	}
	
	/**
	 * @@param mu the <code>MeasurementUnit</code> that is used to display all contents
	 * within the root edit part.
	 */
	public DiagramRootEditPart(MeasurementUnit mu) {
		super();
		
		if (getMapMode() != null)
			mm.setContainedMapMode(MeasurementUnitHelper.getMapMode(mu));
	}

	/**
	 * GEF does not scale the FEEDBACK_LAYER but we do.
	 */
	class FeedbackLayer
		extends FreeformLayer
	{
		FeedbackLayer() {
			setEnabled(false);
		}
	}
    
	/**
	 * Listener for the workspace preference store.
	 */
	private class PreferenceStoreListener implements IPropertyChangeListener {
		public void propertyChange(org.eclipse.jface.util.PropertyChangeEvent event) {
			handlePreferenceStorePropertyChanged(event);
			
		}
	}
	
	static protected class DiagramScalableFreeformLayeredPane extends
		org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScalableFreeformLayeredPane implements ZoomListener {
	
        public DiagramScalableFreeformLayeredPane(IMapMode mm) {
			super(mm);
		}

		/* 
		 * (non-Javadoc)
		 * @@see org.eclipse.gef.editparts.ZoomListener#zoomChanged(double)
		 */
		public void zoomChanged(double zoom) {
			ScaledGraphics.resetFontCache();
		}
	}

	private DiagramRuler verticalRuler, horizontalRuler;
	private AnimatableZoomManager zoomManager;
	private double[] zoomLevels = {.05, .1, .25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 4};
	private PageBreakEditPart pageBreakEditPart;
	private PreferenceStoreListener listener = new PreferenceStoreListener();
		
	/* Keep layers to enable anti-aliasing */
	private ScalableFreeformLayeredPane layers;

	/**
	 * The hint used to find the appropriate preference store from which general
	 * diagramming preference values for properties of shapes, connections, and
	 * diagrams can be retrieved. This hint is mapped to a preference store in
	 * the {@@link DiagramPreferencesRegistry}.
	 */
	private PreferencesHint preferencesHint = PreferencesHint.USE_DEFAULTS;
	private int printableLayerIndex;
	private GridLayer gridLayer;
	
	/**
	 * Initializes the preferenceStore property change
	 * listener.
	 */
	private void initPreferenceStoreListener() {
		IPreferenceStore preferenceStore =
			(IPreferenceStore) getPreferencesHint().getPreferenceStore();
		preferenceStore.addPropertyChangeListener(listener);
	}
	
	/**
	 * This method removes all listeners to the notational world (views, figures, editpart...etc)
	 * Override this method to remove notational listeners down the hierarchy
	 */
	private void removePreferenceStoreListener() {
		//		remove preferenceStore listener
		IPreferenceStore preferenceStore =
			(IPreferenceStore) getPreferencesHint().getPreferenceStore();
		preferenceStore.removePropertyChangeListener(listener);
		listener = null;
	}
	
    /**
     * Identifies the layer containing the page breaks figure.
     */
    final public static String PAGE_BREAKS_LAYER = "Page Breaks Layer"; //$NON-NLS-1$   
 
	/**
	 * Identifies the layers containing printable decoration layer.
	 */
	final public static String DECORATION_PRINTABLE_LAYER = "Decoration Printable Layer"; //$NON-NLS-1$   
	/**
	 * Identifies the layers containing Unprintable decoration layer.
	 */
	final public static String DECORATION_UNPRINTABLE_LAYER = "Decoration Unprintable Layer"; //$NON-NLS-1$
    
    
    /* (non-Javadoc)
     * @@see org.eclipse.gef.ui.parts.FreeformGraphicalRootEditPart#createPrintableLayers()
     */
    protected LayeredPane createPrintableLayers() {
    	FreeformLayeredPane layeredPane = new FreeformLayeredPane();
              
    	layeredPane.add(new BorderItemsAwareFreeFormLayer(), PRIMARY_LAYER);
    	layeredPane.add(new ConnectionLayerEx(), CONNECTION_LAYER);
		layeredPane.add(new FreeformLayer(), DECORATION_PRINTABLE_LAYER);

        return layeredPane;        
    }

    protected void moveGridLayer(boolean inFront) {
    	if (layers.getChildren().indexOf(gridLayer) > printableLayerIndex && (! inFront)) {    	
    		layers.remove(gridLayer);
    		layers.add(gridLayer,GRID_LAYER, printableLayerIndex);
    	} else if (layers.getChildren().indexOf(gridLayer) <= printableLayerIndex && inFront) {
    		layers.remove(gridLayer);
    		layers.add(gridLayer,GRID_LAYER, printableLayerIndex+1);
    	}
    }
    
	/**
    * Creates and returns the scalable layers of this EditPart
    * 
    * @@return ScalableFreeformLayeredPane Pane that contains the scalable layers
    */
    protected ScalableFreeformLayeredPane createScaledLayers() {
    	
    	layers = createScalableFreeformLayeredPane();

        layers.add(new FreeformLayer(), PAGE_BREAKS_LAYER);
        printableLayerIndex = layers.getChildren().size();
        layers.add(getPrintableLayers(), PRINTABLE_LAYERS);
                
        gridLayer = createGridLayer();
        
        layers.add(gridLayer, GRID_LAYER);
        
        layers.add(new FreeformLayer(), DECORATION_UNPRINTABLE_LAYER);
        return layers;
    }
   
    /**
     * Creates the <code>ScalableFreeformLayeredPane</code>.
	 * @@return the new <code>ScalableFreeformLayeredPane</code>
	 */
	protected ScalableFreeformLayeredPane createScalableFreeformLayeredPane() {
		return new DiagramScalableFreeformLayeredPane(getMapMode());
	}

	/**
     * Override to set a non-default zoom levels
     * @@return the ZoomManager with the non-default zoom range
     */
    public ZoomManager getZoomManager() {
		if (zoomManager == null) {
			zoomManager = new AnimatableZoomManager((ScalableFigure)getScaledLayers(),
											((Viewport)getFigure()));		
			zoomManager.setZoomLevels(zoomLevels);	
			refreshEnableZoomAnimation(zoomManager);
		}
		
		return zoomManager;
	}
    
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ZoomableEditPart#zoomTo(double, org.eclipse.draw2d.geometry.Point)
	 */
	public void zoomTo(double zoom, Point center) {
		zoomManager.zoomTo(zoom, center);
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ZoomableEditPart#zoomTo(org.eclipse.draw2d.geometry.Rectangle)
	 */
	public void zoomTo(Rectangle rect) {
		zoomManager.zoomTo(rect);
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ZoomableEditPart#zoomIn()
	 */
	public void zoomIn() {
		zoomManager.zoomIn();
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ZoomableEditPart#zoomIn(org.eclipse.draw2d.geometry.Point)
	 */
	public void zoomIn(Point center) {
		zoomManager.zoomTo(zoomManager.getNextZoomLevel(), center);
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ZoomableEditPart#zoomOut()
	 */
	public void zoomOut() {
		zoomManager.zoomOut();
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.editparts.ZoomableEditPart#zoomOut(org.eclipse.draw2d.geometry.Point)
	 */
	public void zoomOut(Point center) {
		zoomManager.zoomTo(zoomManager.getPreviousZoomLevel(), center);
	}
	
    /**
     * Convience method to access the workspace viewer preferences.
     * @@return PreferenceStore the workspace viewer preference store
     */
    protected IPreferenceStore getWorkspaceViewerPreferences() {
		if (getViewer() == null) return null;
    	return ((DiagramGraphicalViewer) getViewer())
			.getWorkspaceViewerPreferenceStore();
	}


	/**
	 * Get the Grid Spacing from the Plug-ins preference store
	 * 
	 * @@return grid spacing value.
	 */
	public double getGridSpacing() {
		
		double gridSpacing = 0;
		// Check the workspace properties
		if (getWorkspaceViewerPreferences() != null)
			gridSpacing = getWorkspaceViewerPreferences().getDouble(WorkspaceViewerProperties.GRIDSPACING);
		
		// If the workspace property is not set then get the global preference value
		if (gridSpacing == 0) {
			IPreferenceStore pluginStore = (IPreferenceStore) getPreferencesHint().getPreferenceStore();
			gridSpacing = pluginStore.getDouble(IPreferenceConstants.PREF_GRID_SPACING);
		}
		return gridSpacing;
	}

	/**
	 * Sets the grid line style.  
	 * @@param color 
	 * 
	 * @@param style
	 */
	public void setGridStyle(int style) {
		if (gridLayer instanceof GridLayerEx) {
			((GridLayerEx) gridLayer).setLineStyle(style);			
		}
		gridLayer.repaint();
	}

	
	/**
	 * Sets the grid line color.  
	 * @@param color 
	 * 
	 * @@param gridSpacing
	 */
	public void setGridColor(Integer rgbValue) {
		gridLayer.setForegroundColor(DiagramColorRegistry.getInstance().getColor(rgbValue));
	}

	/**
	 * This method is called to set the grid spacing.  The units used
	 * for grid spacing are the same as the rulers current units.
	 * 
	 * @@param gridSpacing
	 */
	public void setGridSpacing(double gridSpacing) {
		
		int rulerUnits = RulerProvider.UNIT_INCHES;
		if (getWorkspaceViewerPreferences() != null)
			rulerUnits = getWorkspaceViewerPreferences().getInt(WorkspaceViewerProperties.RULERUNIT);
		
		// Get the Displays DPIs
		double dotsPerInch = Display.getDefault().getDPI().x;
		int spacingInPixels = 0;

		// Evaluate the Grid Spacing based on the ruler units
		switch( rulerUnits) {
			case RulerProvider.UNIT_INCHES:
				spacingInPixels = (int)Math.round(dotsPerInch * gridSpacing);
				break;

			case RulerProvider.UNIT_CENTIMETERS:
				spacingInPixels = (int)Math.round( dotsPerInch * gridSpacing / 2.54 );
				break;

			default:
				spacingInPixels = (int)gridSpacing;
		}

		int spacing = getMapMode().DPtoLP(spacingInPixels);
		getViewer().setProperty(SnapToGrid.PROPERTY_GRID_SPACING,
			new Dimension(spacing, spacing));
	}


	/**
	 * Returns the PageBreakEditPart controlled by this RootEditPart.
	 * @@return the <code>PageBreakEditPart</code>
	 */
	public PageBreakEditPart getPageBreakEditPart() {
		if (pageBreakEditPart == null) {
			pageBreakEditPart = new PageBreakEditPart();
			pageBreakEditPart.setParent(this);
		}
		return pageBreakEditPart;
	}	
	
	/**
	 * Refreshes the page breaks.
	 */
	protected void refreshPageBreaks() {
		if (getWorkspaceViewerPreferences().getBoolean(WorkspaceViewerProperties.VIEWPAGEBREAKS))
			showPageBreaks();
		else
			hidePageBreaks();
	}
	
	/**
	 * Adds the pagebreaks figure to the <code>PAGE_BREAKS_LAYER</code>
	 */
	private void showPageBreaks() {
		getLayer(PAGE_BREAKS_LAYER).add(getPageBreakEditPart().getFigure());
		Point p =
			new Point(
				getWorkspaceViewerPreferences().getInt(
					WorkspaceViewerProperties.PAGEBREAK_X),
				getWorkspaceViewerPreferences().getInt(
					WorkspaceViewerProperties.PAGEBREAK_Y));
		getPageBreakEditPart().set(
			p,
			PageInfoHelper.getChildrenBounds(
				(DiagramEditPart) getContents(),
				PageBreaksFigure.class));		
	}	
	
	/**
	 * Removes the pagebreaks figure from the <code>PAGE_BREAKS_LAYER</code>
	 */
	private void hidePageBreaks() {
		if (getLayer(PAGE_BREAKS_LAYER)
			.getChildren()
			.contains(getPageBreakEditPart().getFigure())) {
			getLayer(PAGE_BREAKS_LAYER).remove(
				getPageBreakEditPart().getFigure());

			getPageBreakEditPart().updatePreferenceStore();
		}
	}	
	
	/**
	 * Handler for the workspace preference store.  Updates the page breaks if 
	 * WorksapceViewerProperties.VIEWPAGEBREAKS value is modified.
	 * @@param event
	 */
	private void handlePreferenceStorePropertyChanged(org.eclipse.jface.util.PropertyChangeEvent event) {
		if (WorkspaceViewerProperties.VIEWPAGEBREAKS.equals(event.getProperty())) {
			refreshPageBreaks();
		} else if (isPageSizeChange(event.getProperty())) {
			Rectangle diagramBounds = PageInfoHelper.getChildrenBounds(
					(DiagramEditPart) getContents(),
					PageBreaksFigure.class);
			getPageBreakEditPart().resize(diagramBounds);
			getPageBreakEditPart().updatePreferenceStore();
			refreshPageBreaks();			
		} else if (WorkspaceViewerProperties.VIEWGRID.equals(event.getProperty())) {		
			// Set the state of the Grid Enabled Property
			getViewer().setProperty(SnapToGrid.PROPERTY_GRID_VISIBLE, event.getNewValue());
		} else if (WorkspaceViewerProperties.SNAPTOGRID.equals(event.getProperty())) {			
			// Set the state of the Snap to Grid Property
			getViewer().setProperty(SnapToGrid.PROPERTY_GRID_ENABLED, event.getNewValue());
		} else if (WorkspaceViewerProperties.SNAPTOGEOMETRY.equals(event.getProperty())) {			
			// Set the state of the Snap to Geometry Property
			getViewer().setProperty(SnapToGeometry.PROPERTY_SNAP_ENABLED, event.getNewValue());
		} else if (WorkspaceViewerProperties.GRIDORDER.equals(event.getProperty())) {
			// Set the grid level
			moveGridLayer(((Boolean) event.getNewValue()).booleanValue());
		} else if (WorkspaceViewerProperties.GRIDSPACING.equals(event.getProperty())) {
			// Set the grid spacing			
			Double spacing = (Double) event.getNewValue();
			setGridSpacing(spacing.doubleValue());
		} else if (WorkspaceViewerProperties.VIEWRULERS.equals(event.getProperty())) {			
			// Set the state of the Ruler Enabled Property
			getViewer().setProperty(RulerProvider.PROPERTY_RULER_VISIBILITY,
				event.getNewValue()); 
		} else if (WorkspaceViewerProperties.RULERUNIT.equals(event.getProperty())) { 
			Object newValue = event.getNewValue();
			int rulerUnits;
			
			if (newValue.getClass() == Integer.class) {
				rulerUnits = ((Integer) newValue).intValue();
				setRulers(rulerUnits);
			} else if (newValue.getClass() == String.class) {
				try {
					rulerUnits = Integer.parseInt((String) newValue);
					setRulers(rulerUnits);
				} catch (NumberFormatException e) {
					  Log.error( DiagramUIPlugin.getInstance(),
					  	DiagramUIStatusCodes.RESOURCE_FAILURE, e.toString() );
				}				
			} else {
				Log.error( DiagramUIPlugin.getInstance(),
				  	DiagramUIStatusCodes.RESOURCE_FAILURE,
					newValue.getClass().getName());
			}

			// Refresh the Rulers
			Boolean oldValue = (Boolean)getViewer().getProperty(RulerProvider.PROPERTY_RULER_VISIBILITY);
			getViewer().setProperty(RulerProvider.PROPERTY_RULER_VISIBILITY, Boolean.FALSE);
			getViewer().setProperty(RulerProvider.PROPERTY_RULER_VISIBILITY, oldValue );
			
			// Update the Grids
			double spacing = getGridSpacing();
			setGridSpacing(spacing);			
			
		} else if (WorkspaceViewerProperties.GRIDLINECOLOR.equals(event.getProperty())) {
			Integer newValue = (Integer) event.getNewValue();
			// Set the grid line color
			setGridColor(newValue);
		}  else if (WorkspaceViewerProperties.GRIDLINESTYLE.equals(event.getProperty())) {
			Integer newValue = (Integer) event.getNewValue();
			// Set the grid line style
			setGridStyle(newValue.intValue());
		} else if (event.getProperty().equals(IPreferenceConstants.PREF_ENABLE_ANIMATED_ZOOM)){
			refreshEnableZoomAnimation(getZoomManager());
		} else if (event.getProperty().equals(IPreferenceConstants.PREF_ENABLE_ANTIALIAS)){
			refreshEnableAntiAlias();
		}	
	}
	
	/**
	 * @@param rulerUnits
	 */
	private void setRulers(int rulerUnits) {
		if( getVerticalRuler() != null ) {
			getVerticalRuler().setUnit( rulerUnits );
		} else {
			setVerticalRuler(new DiagramRuler(false, rulerUnits, null));
		}
		if( getHorizontalRuler() != null ) {
			getHorizontalRuler().setUnit( rulerUnits );
		} else {
			setHorizontalRuler(new DiagramRuler(true, rulerUnits, null));			
		}
	}

	/**
	 * 
	 */
	private void refreshEnableZoomAnimation(ZoomManager zoomMangr) {
		IPreferenceStore preferenceStore =
			(IPreferenceStore) getPreferencesHint().getPreferenceStore();
		boolean animatedZoom = preferenceStore.getBoolean(
			IPreferenceConstants.PREF_ENABLE_ANIMATED_ZOOM);
		zoomMangr.setZoomAnimationStyle(animatedZoom ? ZoomManager.ANIMATE_ZOOM_IN_OUT : ZoomManager.ANIMATE_NEVER);
	}

	/**
	 * Refresh visuals in order to enable anti-aliasing
	 */
	public void refreshVisuals() {
        // Set the anti-aliasing
        refreshEnableAntiAlias();
	} 
	
	/**
	 * Refreshes anti-alias status on the diagram
	 */
	protected void refreshEnableAntiAlias() {
		IPreferenceStore preferenceStore =
			(IPreferenceStore) getPreferencesHint().getPreferenceStore();
		boolean antiAlias = preferenceStore.getBoolean(
			IPreferenceConstants.PREF_ENABLE_ANTIALIAS);
		if (getLayers() instanceof org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScalableFreeformLayeredPane)
			((org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScalableFreeformLayeredPane) layers).setAntiAlias(antiAlias);
	}

	/**
	 * Refreshes ruler units on the diagram
	 */
	protected void refreshRulerUnits() {
		if (getWorkspaceViewerPreferences() != null)
			setRulers(getWorkspaceViewerPreferences().getInt(WorkspaceViewerProperties.RULERUNIT));
	}
	
	/**
	 * This is a workspace property request.  It does not use a <code>Command</code>
	 * to execute since it does not change the model.
	 * @@param request 
	 */
	public void performRequest(Request request) {
		if (request.getType().equals(RequestConstants.REQ_RECALCULATE_PAGEBREAKS)) {		
			getPageBreakEditPart().calculatePageBreakFigureBounds();	
		} 
	}
	
	/**
	 * Adds a listener to the workspace preference store for changes related to the
	 * page breaks and diagram grid.
	 */
	public void activate() {
		super.activate();	
		
		if (getWorkspaceViewerPreferences() != null)
			getWorkspaceViewerPreferences().addPropertyChangeListener(listener);	
		
		initPreferenceStoreListener();
		
		ScalableFreeformLayeredPane pane = getLayers();
		
		refreshEnableAntiAlias();
		
		initWorkspaceViewerProperties();
		
		refreshRulerUnits();
		
		if (pane instanceof ZoomListener) {
			getZoomManager().addZoomListener((ZoomListener)pane);
		}
	}
	
	private static final int LIGHT_GRAY_RGB = 12632256;
	
	/**
	 * Initializes the workspace viewer property that are stored per diagram
	 */
	private void initWorkspaceViewerProperties() {		
		IPreferenceStore wsPrefStore = getWorkspaceViewerPreferences();
		
		if (wsPrefStore != null) {
			if (! wsPrefStore.contains(WorkspaceViewerProperties.GRIDORDER)) {
				wsPrefStore.setValue(WorkspaceViewerProperties.GRIDORDER, true);			
			} else {
				moveGridLayer(wsPrefStore.getBoolean(WorkspaceViewerProperties.GRIDORDER));
			}
			if (! wsPrefStore.contains(WorkspaceViewerProperties.GRIDLINECOLOR)) {
				wsPrefStore.setValue(WorkspaceViewerProperties.GRIDLINECOLOR, LIGHT_GRAY_RGB);			
			} else {
				setGridColor(new Integer(wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINECOLOR)));
			}
			if (! wsPrefStore.contains(WorkspaceViewerProperties.GRIDLINESTYLE)) {
				wsPrefStore.setValue(WorkspaceViewerProperties.GRIDLINESTYLE, SWT.LINE_CUSTOM);			
			} else {
				setGridStyle(wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINESTYLE));
			}
			
			if ((! wsPrefStore.contains(WorkspaceViewerProperties.RULERUNIT)) || 
					(! wsPrefStore.contains(WorkspaceViewerProperties.GRIDSPACING))) {
				IPreferenceStore preferenceStore =
					(IPreferenceStore) getPreferencesHint().getPreferenceStore();			
				// Set the ruler unit to 999 in order to force the setting 
				// and then change it to the appropriate value
				wsPrefStore.setValue(WorkspaceViewerProperties.RULERUNIT, 999);						
				wsPrefStore.setValue(WorkspaceViewerProperties.RULERUNIT, preferenceStore.getInt(IPreferenceConstants.PREF_RULER_UNITS));						
				wsPrefStore.setValue(WorkspaceViewerProperties.GRIDSPACING, preferenceStore.getDouble(IPreferenceConstants.PREF_GRID_SPACING));			
			}
		}
	}

	/**
	 * 
	 */
	public void deactivate() {
		if (getPageBreakEditPart() != null)
			getPageBreakEditPart().updatePreferenceStore();
		
		if (getWorkspaceViewerPreferences() != null)
			getWorkspaceViewerPreferences().removePropertyChangeListener(listener);
		removePreferenceStoreListener();
		
		ScalableFreeformLayeredPane pane = getLayers();
		if (pane instanceof ZoomListener) {
			getZoomManager().removeZoomListener((ZoomListener)pane);
		}
		
		super.deactivate();
	}
	
	/**
	 * Method that returns <code>true</code> if the given parameter corresponds to a
	 * workspace viewer property that affects the size of the page breaks.
	 * @@param s workspace viewer property
	 * @@return <code>true</code> if the String corresponds to a <code>WorkspaceViewerProperties</code>
	 * that affects the size of the <code>PageBreaksFigure</code>
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties
	 */
	private boolean isPageSizeChange(String s) {
		if (WorkspaceViewerProperties.PREF_MARGIN_TOP.equals(s)
			|| WorkspaceViewerProperties.PREF_MARGIN_LEFT.equals(s)
			|| WorkspaceViewerProperties.PREF_MARGIN_RIGHT.equals(s)
			|| WorkspaceViewerProperties.PREF_MARGIN_BOTTOM.equals(s)
			|| WorkspaceViewerProperties.PREF_PAGE_SIZE.equals(s)
			|| WorkspaceViewerProperties.PREF_USE_LANDSCAPE.equals(s)
			|| WorkspaceViewerProperties.PREF_USE_PORTRAIT.equals(s)
			|| WorkspaceViewerProperties.PREF_PAGE_HEIGHT.equals(s)
			|| WorkspaceViewerProperties.PREF_PAGE_WIDTH.equals(s)
			|| WorkspaceViewerProperties.PREF_USE_DIAGRAM_SETTINGS.equals(s))
			return true;
		else
			return false;
	}

	
	/**
	 * 
	 * Accessor for scalable layers. Subclasses can access them in order 
	 * to update the layer when a relevant preference has been modified
	 * @@return 
	 */
	protected ScalableFreeformLayeredPane getLayers() {
		return layers;
	}

	
	protected void setLayers(ScalableFreeformLayeredPane layers) {
		this.layers = layers;
	}	

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport#setPreferencesHint(org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint)
	 */
	public void setPreferencesHint(PreferencesHint preferenceHint) {
		this.preferencesHint = preferenceHint;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport#getPreferencesHint()
	 */
	public PreferencesHint getPreferencesHint() {
		return preferencesHint;
	}
	
	/**
	 * Clients must define the measurement unit in the <code>Diagram</code> notation
	 * object for their editor to affect this mapping mode object value.
	 * 
	 * @@return <code>IMapMode</code> that is the coordinate mapping for the Editor from device to
	 * logical coordinates.
	 */
	final public IMapMode getMapMode() {
		if (mm == null)
			mm = new WrapperMapMode();
		return mm;
	}

	public DiagramRuler getHorizontalRuler() {
		return horizontalRuler;
}
	
	private void setHorizontalRuler(DiagramRuler horizontalRuler) {
		this.horizontalRuler = horizontalRuler;
	}

	
	public DiagramRuler getVerticalRuler() {
		return verticalRuler;
	}

	
	private void setVerticalRuler(DiagramRuler verticalRuler) {
		this.verticalRuler = verticalRuler;
	}

	protected GridLayer createGridLayer() {
		return new GridLayerEx();
	}

	protected GridLayer createGridLayer(int r, int g, int b) {
		return new GridLayerEx(new Color(null,r,g,b));
	}

}
@


1.20
log
@gmf_head aboyko 070126 Updated copyrights date
@
text
@d513 3
@


1.19
log
@[171428] gmf_head aboyko 070126 Print Preview and page breaks on the diagram are different
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.18
log
@[160534] gmf_R1_0_maintenace mmostafa 061011  Print/PrintView does not work with bordered items
@
text
@d502 5
a506 1
			getPageBreakEditPart().calculatePageBreakFigureBounds(false);
@


1.17
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d35 1
d170 1
a170 1
		public DiagramScalableFreeformLayeredPane(IMapMode mm) {
d236 3
a238 2
	final public static String DECORATION_UNPRINTABLE_LAYER = "Decoration Unprintable Layer"; //$NON-NLS-1$   
   
d245 1
a245 1
    	layeredPane.add(new FreeformLayer(), PRIMARY_LAYER);
@


1.16
log
@Fix for the broken build 2006/03/27
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d14 1
d44 1
a48 1
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
d51 1
d82 1
a82 1
	private class WrapperMapMode implements IMapMode {
d121 4
d398 1
a398 1
		gridLayer.setForegroundColor(FigureUtilities.integerToColor(rgbValue));
d607 1
a607 1
		if (layers instanceof org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScalableFreeformLayeredPane)
d666 3
a668 1
			} 
@


1.16.2.1
log
@[148257] gmf_R1_0_maintenance tmacdoug 060720 "Grid In Front" setting not respected when editor is opened
@
text
@d660 1
a660 3
			} else {
				moveGridLayer(wsPrefStore.getBoolean(WorkspaceViewerProperties.GRIDORDER));
			}
@


1.16.2.2
log
@bugzilla 141621 sshaw gmf-R1_0_maintenance 060731 WrapLabel performance improvements

Contributed by: Yaser Lulu
@
text
@a49 1
import org.eclipse.gmf.runtime.draw2d.ui.internal.mapmode.IMapModeHolder;
d80 1
a80 1
	private class WrapperMapMode implements IMapModeHolder {
a118 4
		public IMapMode getMapMode() {
			return containedMM;
		}
		
@


1.16.2.3
log
@Bugzilla#155605 gmf_R1_0_maintenance cmahoney 060831
1 color object leaked when calling org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities.integerToColor(..) : using sleak
Contributed by: David Cummings
@
text
@a13 1

a42 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
d47 1
d397 1
a397 1
		gridLayer.setForegroundColor(DiagramColorRegistry.getInstance().getColor(rgbValue));
@


1.16.2.4
log
@Bugzilla#154982 gmf_R1_0_maintenance sshaw 060913 Cairo is not available on Sun Solaris
@
text
@d607 1
a607 1
		if (getLayers() instanceof org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScalableFreeformLayeredPane)
@


1.16.2.5
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.16.2.6
log
@[160534] gmf_head mmostafa 061011  Print/PrintView does not work with bordered items
@
text
@a34 1
import org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemsAwareFreeFormLayer;
d169 1
a169 1
        public DiagramScalableFreeformLayeredPane(IMapMode mm) {
d235 2
a236 3
	final public static String DECORATION_UNPRINTABLE_LAYER = "Decoration Unprintable Layer"; //$NON-NLS-1$
    
    
d243 1
a243 1
    	layeredPane.add(new BorderItemsAwareFreeFormLayer(), PRIMARY_LAYER);
@


1.16.2.7
log
@[171428] gmf_R1_maintenance aboyko 070126 Print Preview and page breaks on the diagram are different
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
d502 1
a502 5
			Rectangle diagramBounds = PageInfoHelper.getChildrenBounds(
					(DiagramEditPart) getContents(),
					PageBreaksFigure.class);
			getPageBreakEditPart().resize(diagramBounds);
			getPageBreakEditPart().updatePreferenceStore();
@


1.15
log
@bugzilla 116224 gmf-head sshaw 060119 Notation meta-model support for coordinate systems
@
text
@a42 1
import org.eclipse.gmf.runtime.diagram.ui.internal.util.MeasurementUnitHelper;
d46 1
@


1.14
log
@Bugzilla#123313 gmf_head cmahoney 060120 Making DiagramUIPlugin, DiagramUIStatusCodes, and DiagramUIDebugOptions internal
@
text
@d23 1
d43 1
d53 1
d70 69
d759 3
a761 2
	 * Override this if the Editor wishes to support a coordinate system other then the default 
	 * (usually HiMetric coordinates).  
d765 4
a768 2
	public IMapMode getMapMode() {
		return MapModeTypes.DEFAULT_MM;
@


1.13
log
@[123248] gmf_head tmacdoug 060117 Grid: Dot looks like Dash..
@
text
@d33 2
a34 2
import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.DiagramUIStatusCodes;
@


1.12
log
@bugzilla 112992 gmf-head sshaw 060116 Recalculated page-breaks state of a diagram is not persisted
@
text
@d307 1
a307 1
			((GridLayerEx) gridLayer).setLineStyle(style);
d595 1
a595 1
				wsPrefStore.setValue(WorkspaceViewerProperties.GRIDLINESTYLE, SWT.LINE_DOT);			
@


1.11
log
@[123283] gmf_head tmacdoug 060113 Grid: Grid spacing is not persisted...
@
text
@d405 1
a405 1
			.contains(getPageBreakEditPart().getFigure()))
d408 3
d617 3
@


1.10
log
@Bugzilla 122249 gmf_head tmacdoug 060103 - DiagramRootEditPart#initWorkspaceViewerProperties() can cause NPE
@
text
@d601 3
@


1.9
log
@Bugzilla 111902 gmf_head tmacdoug 051221 - Usability:  Some diagrams may be hard to see when the grid is visible [Grid Enhancements]
@
text
@d286 1
d288 2
a289 1
		double gridSpacing = getWorkspaceViewerPreferences().getDouble(WorkspaceViewerProperties.GRIDSPACING);
d331 3
a333 1
		int rulerUnits = getWorkspaceViewerPreferences().getInt(WorkspaceViewerProperties.RULERUNIT);
d534 2
a535 1
		setRulers(getWorkspaceViewerPreferences().getInt(WorkspaceViewerProperties.RULERUNIT));
d555 1
d558 1
d582 22
a603 20
		if (! wsPrefStore.contains(WorkspaceViewerProperties.GRIDORDER)) {
			wsPrefStore.setValue(WorkspaceViewerProperties.GRIDORDER, true);			
		} 
		if (! wsPrefStore.contains(WorkspaceViewerProperties.GRIDLINECOLOR)) {
			wsPrefStore.setValue(WorkspaceViewerProperties.GRIDLINECOLOR, LIGHT_GRAY_RGB);			
		} else {
			setGridColor(new Integer(wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINECOLOR)));
		}
		if (! wsPrefStore.contains(WorkspaceViewerProperties.GRIDLINESTYLE)) {
			wsPrefStore.setValue(WorkspaceViewerProperties.GRIDLINESTYLE, SWT.LINE_DOT);			
		} else {
			setGridStyle(wsPrefStore.getInt(WorkspaceViewerProperties.GRIDLINESTYLE));
		}
		
		if ((! wsPrefStore.contains(WorkspaceViewerProperties.RULERUNIT)) || 
				(! wsPrefStore.contains(WorkspaceViewerProperties.GRIDSPACING))) {
			IPreferenceStore preferenceStore =
				(IPreferenceStore) getPreferencesHint().getPreferenceStore();			
			wsPrefStore.setValue(WorkspaceViewerProperties.RULERUNIT, preferenceStore.getInt(IPreferenceConstants.PREF_RULER_UNITS));						
			wsPrefStore.setValue(WorkspaceViewerProperties.GRIDSPACING, preferenceStore.getDouble(IPreferenceConstants.PREF_GRID_SPACING));			
@


1.8
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d26 1
d35 1
d45 1
d53 2
d66 1
a66 1

d120 2
d172 10
d188 2
a189 1
        layers = createScalableFreeformLayeredPane();
a190 1
        layers.add(createGridLayer(), GRID_LAYER);
d192 1
d194 5
d273 2
a274 1
		return ((DiagramGraphicalViewer) getViewer())
d285 34
a318 2
		IPreferenceStore pluginStore = (IPreferenceStore) getPreferencesHint().getPreferenceStore();
		return pluginStore.getDouble(IPreferenceConstants.PREF_GRID_SPACING);
d329 2
a330 4
		// Get the Ruler Units from the Plug-in Preference Store
		IPreferenceStore preferenceStore = (IPreferenceStore) getPreferencesHint().getPreferenceStore();
		int rulerUnits = preferenceStore.getInt(IPreferenceConstants.PREF_RULER_UNITS);

d336 1
a336 1
		switch( rulerUnits ) {
d417 1
a417 2
		} else if (WorkspaceViewerProperties.VIEWGRID.equals(event.getProperty())) {
			
d419 2
a420 4
			getViewer().setProperty(SnapToGrid.PROPERTY_GRID_VISIBLE,
				event.getNewValue());
		} else if (WorkspaceViewerProperties.SNAPTOGRID.equals(event.getProperty())) {
			
d422 9
a430 4
			getViewer().setProperty(SnapToGeometry.PROPERTY_SNAP_ENABLED,
					event.getNewValue());
		} else if (WorkspaceViewerProperties.VIEWRULERS.equals(event.getProperty())) {
			
d434 1
a434 1
		} else if (IPreferenceConstants.PREF_RULER_UNITS.equals(event.getProperty())) { 
d447 2
a448 4
					  	DiagramUIStatusCodes.RESOURCE_FAILURE,
					  	e.toString() );
				}
				
d464 8
a471 20
		} else if (IPreferenceConstants.PREF_GRID_SPACING.equals(event.getProperty())) {
			Object newValue = event.getNewValue();
			double gridSpacing;
			try {
				if (newValue.getClass() == Double.class) {
					gridSpacing = ((Double) newValue).doubleValue();
					setGridSpacing(gridSpacing);
				} else if (newValue.getClass() == String.class) {
					gridSpacing = Double.parseDouble((String) newValue);
					setGridSpacing(gridSpacing);
				} else {
					Log.error( DiagramUIPlugin.getInstance(),
					  	DiagramUIStatusCodes.RESOURCE_FAILURE,
						newValue.getClass().getName());
				}
			} catch (NumberFormatException ex ) {
			  Log.error( DiagramUIPlugin.getInstance(),
			  	DiagramUIStatusCodes.RESOURCE_FAILURE,
			  	ex.toString() );	
			}
d530 1
a530 5
		IPreferenceStore preferenceStore =
			(IPreferenceStore) getPreferencesHint().getPreferenceStore();
		int rulerUnits = preferenceStore.getInt(
			IPreferenceConstants.PREF_RULER_UNITS);
		setRulers(rulerUnits);
d558 2
d567 31
d696 8
@


1.7
log
@Bugzilla 112990 gmf_head tmacdoug 051102 - The Logic Diagram does not respect the Anti-Aliasing Preference or the Ruler Units
@
text
@a33 1
import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;
d41 1
d110 1
a110 1
	 * diagramming preference values for properties of shapes, connectors, and
d179 1
a179 1
    
a493 1

d596 1
a596 1

d606 1
a606 1
	
d609 1
a609 2
	}

@


1.6
log
@bugzilla 112788 gmf-head sshaw 051029 API: Encapsulate MapMode / HiMetric coordinate system from clients

First phase delivery...
@
text
@d179 1
a179 1
   
d441 4
a444 2
		if( verticalRuler != null ) {
			verticalRuler.setUnit( rulerUnits );
d446 4
a449 2
		if( horizontalRuler != null ) {
			horizontalRuler.setUnit( rulerUnits );
d484 11
d521 2
d597 1
a597 1
	
d607 19
@


1.5
log
@Bugzilla 110975 gmf_head tmacdoug 051026 - Diagram defaults anti-aliasing enabled despite corresponding preference not to enable
@
text
@a43 1
import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.MapModeFreeformLayer;
d45 2
a46 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d86 4
a178 8
    
    /**
    * Creates the <code>MapModeFreeformLayer</code>.
	 * @@return the new <code>MapModeFreeformLayer</code>
	 */
	protected MapModeFreeformLayer createMapModeFreeformLayer() {
		return new MapModeFreeformLayer();
	}
d185 1
a185 1
		return new DiagramScalableFreeformLayeredPane();
d295 1
a295 1
		int spacing = MapMode.DPtoLP(spacingInPixels);
d580 10
@


1.4
log
@bugzilla 112685 gmf-head sshaw 051014 Sweep code for creation of Boolean objects
@
text
@d507 3
@


1.3
log
@bugzilla 111210 gmf-head sshaw 051012 Running out of SWT handles / Excessive GDI handles
@
text
@d407 1
a407 1
			getViewer().setProperty(RulerProvider.PROPERTY_RULER_VISIBILITY, new Boolean(false));
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d27 1
a29 4
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.util.IPropertyChangeListener;
import org.eclipse.swt.widgets.Display;

d45 1
d48 3
d83 12
d189 1
a189 1
		return new org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScalableFreeformLayeredPane();
d505 5
d519 6
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

