head	1.5;
access;
symbols
	v20081023-2107:1.5
	v20081022-1925:1.5
	v20081022-1005:1.5
	v20081020-0700:1.5
	v20080917-1925:1.5
	v20080916-2008:1.5
	v20080911-1728:1.5
	v20080911-1506:1.5
	v20080910-1520:1.5
	v20080910-1510:1.5
	v20080903-1520:1.5
	v20080903-1510:1.5
	v20080813-1510:1.5
	v20080811-1546:1.5
	v20080731-1520:1.5
	v20080725-1738:1.5
	v20080723-2246:1.5
	v20080723-2232:1.5
	v20080723-1700:1.5
	v20080722-1827:1.5
	v20080718-1700:1.5
	v20080718-1731:1.5
	v20080716-1600:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080610-1132:1.5
	v20080603-1553:1.5
	v20080527-1255:1.5
	v20080527-1151:1.4
	v20080516-1748:1.5
	v20080516-1143:1.5
	v20080512-1200:1.5
	v20080503-1740:1.5
	v20080501-2127:1.4
	v20080501-1739:1.5
	m20080429-1543:1.4
	v20080425-1959:1.5
	v20080417-1610:1.5
	v20080407-2250:1.5
	v20080407-0930:1.4
	v20080404-1111:1.4
	v20080328-1605:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20080201-2010:1.4
	v20080201-0201:1.4
	v20080118-1129:1.4
	v20080114-2222:1.4
	v20080114-1111:1.4
	v20080107-1111:1.4
	v20071222-1111:1.4
	v20071214-1111:1.4
	v20071130-1111:1.4
	v20071124-0000:1.4
	v20071112-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070915-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070614-1400:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070518-1300:1.4
	bugzilla111892_group_support:1.4.0.2
	Root_bugzilla111892_group_support:1.4
	v20070504-1000:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070330-1300:1.4
	v20060330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070221-1500:1.4
	v20070208-1800:1.4
	v20070202-0200:1.3.2.1
	v20070119-1200:1.3.2.1
	v20070111-0800:1.3.2.1
	v20070105-1200:1.3.2.1
	v20070103-0300:1.4
	M4_20:1.4
	v20061218-1500:1.3.2.1
	v20061218-1200:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.3.2.1
	v20061013-1330:1.4
	v20061012-1100:1.3.2.1
	v20060925-1700:1.3.2.1
	v20060919-0800:1.3.2.1
	v20060907-1100:1.3
	M1_20:1.3
	v20060831-1500:1.3
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060810-1700:1.3
	v20060803-1200:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2008.04.08.02.16.38;	author ahunter;	state Exp;
branches;
next	1.4;
commitid	4d0547fad5804567;

1.4
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.11.14.00.27;	author cmahoney;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.29.09;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.50;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[226065] gmf-head ahunter 080407 Fix warning: The type Assert is deprecated
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.services.decorator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.gmf.runtime.common.core.service.AbstractProviderConfiguration;
import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget;


/**
 * A provider configuration for the Decorator Service. It helps in filtering out
 * and delay the loading of unrelated providers.
 * 
 * @@see AbstractProviderConfiguration
 * 
 * @@author cmahoney
 * @@canBeSeenBy %level1
 */
public class DecoratorProviderConfiguration
	extends AbstractProviderConfiguration {

	/** constants corresponding to different symbols in the extension schema */
	private static final String CONTEXT = "context"; //$NON-NLS-1$
	private static final String DECORATOR_TARGETS = "decoratorTargets"; //$NON-NLS-1$

	/** a list of object descriptors supported by this provider */
	private List contextDescriptors = new ArrayList();

	/**
	 * Creates and builds a new provider contribution descriptor (<code>DecoratorProviderConfiguration</code>) by parsing its configuration element.
	 * 
	 * @@param configElement A provider XML configuration element
	 * @@return A provider XML contribution descriptor
	 */
	public static DecoratorProviderConfiguration parse(IConfigurationElement configElement) {
		Assert.isNotNull(configElement, "null provider configuration element"); //$NON-NLS-1$
		return new DecoratorProviderConfiguration(configElement);
	}

	/**
	 * Creates a new <code>ProviderContributionDescriptor</code> instance
	 * by parsing its configuration element.
	 * 
	 * @@param configElement The provider XML configuration element
	 */
	private DecoratorProviderConfiguration(IConfigurationElement configElement) {
		IConfigurationElement configChildren[];

		// read the object descriptors
		Map objects = new HashMap();
		configChildren = configElement.getChildren(OBJECT);
		for (int i = 0; i < configChildren.length; i++) {
			String id = configChildren[i].getAttribute(ID);
			if (id != null)
				objects.put(id, new ObjectDescriptor(configChildren[i]));
		}

		// read the context descriptors
		configChildren = configElement.getChildren(CONTEXT);
		for (int i = 0; i < configChildren.length; i++) {
			List decoratorTargets =
				getObjectList(
					configChildren[i].getAttribute(DECORATOR_TARGETS),
					objects, configElement);
			if (decoratorTargets != null)
				contextDescriptors.add(new ContextDescriptor(decoratorTargets));
		}
	}

	/**
	 * Determines if the provider understands the given context
	 * The provider understands the request if:
	 * 1- There are no listed provider contexts
	 * 2- The context matches one of the provider contexts 
	 * 
	 * @@param decoratorTarget the decoratorTarget
	 * @@return boolean <code>true</code> if it supports; <code>false</code> otherwise
	 */
	public boolean supports(IDecoratorTarget decoratorTarget) {
		if (contextDescriptors.isEmpty())
			return true;

		Iterator iter = contextDescriptors.iterator();
		while (iter.hasNext()) {
			ContextDescriptor descriptor = (ContextDescriptor) iter.next();
			if (descriptor.matches(decoratorTarget))
				return true;
		}
		return false;
	}

	/**
	 * A descriptor for a provider context
	 */
	private static class ContextDescriptor {

		/** the decoratorTargets */
		private final List decoratorTargets;

		/**
		 * creates a new context descriptor from some context info
		 * 
		 * @@param decoratorTargets the list of decoratorTargets
		 */
		public ContextDescriptor(List decoratorTargets) {
			this.decoratorTargets = decoratorTargets;
		}

		/**
		 * Determines if the context descriptor matches the given context
		 * 
		 * @@param decoratorTarget the decoratorTarget
		 * @@return boolean
		 */
		public boolean matches(IDecoratorTarget decoratorTarget) {
			if (decoratorTargets != null) {
				if (!objectMatches(decoratorTarget, decoratorTargets))
					return false;
			}
			return true;
		}
	}

}
@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
d20 1
a23 1
import org.eclipse.jface.util.Assert;
@


1.3
log
@Bugzilla#135594 gmf_head cmahoney 060411 IDecoratorTarget.Direction needs to be public
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
@


1.3.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d21 2
a24 2
import org.eclipse.gmf.runtime.common.core.service.AbstractProviderConfiguration;

d95 1
a95 1
	public boolean supports(IDecoratorTargetBase decoratorTarget) {
d131 1
a131 1
		public boolean matches(IDecoratorTargetBase decoratorTarget) {
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

