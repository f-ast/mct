head	1.9;
access;
symbols
	v20081023-2107:1.9
	v20081022-1925:1.9
	v20081022-1005:1.9
	v20081020-0700:1.9
	v20080917-1925:1.9
	v20080916-2008:1.9
	v20080911-1728:1.9
	v20080911-1506:1.9
	v20080910-1520:1.9
	v20080910-1510:1.9
	v20080903-1520:1.9
	v20080903-1510:1.9
	v20080813-1510:1.9
	v20080811-1546:1.9
	v20080731-1520:1.9
	v20080725-1738:1.9
	v20080723-2246:1.9
	v20080723-2232:1.9
	v20080723-1700:1.9
	v20080722-1827:1.9
	v20080718-1700:1.9
	v20080718-1731:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.6
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080527-1255:1.9
	v20080527-1151:1.9
	v20080516-1748:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080503-1740:1.9
	v20080501-2127:1.9
	v20080501-1739:1.9
	m20080429-1543:1.9
	v20080425-1959:1.9
	v20080417-1610:1.9
	v20080407-2250:1.9
	v20080407-0930:1.9
	v20080404-1111:1.9
	v20080328-1605:1.9
	v20080322-0000:1.9
	v20080222-1200:1.9
	v20080201-2010:1.9
	v20080201-0201:1.9
	v20080118-1129:1.9
	v20080114-2222:1.9
	v20080114-1111:1.9
	v20080107-1111:1.9
	v20071222-1111:1.9
	v20071214-1111:1.9
	v20071130-1111:1.9
	v20071124-0000:1.9
	v20071112-0000:1.9
	v20071108-0000:1.9
	v20071003-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.4
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070518-1300:1.9
	bugzilla111892_group_support:1.9.0.2
	Root_bugzilla111892_group_support:1.9
	v20070504-1000:1.9
	v20070420-1000:1.9
	v20070413-1300:1.9
	v20070330-1300:1.9
	v20060330-1300:1.9
	v20070322-1100:1.9
	v20060316-0600:1.9
	v20070221-1500:1.9
	v20070208-1800:1.9
	v20070202-0200:1.8.2.1
	v20070119-1200:1.8.2.1
	v20070111-0800:1.8.2.1
	v20070105-1200:1.8.2.1
	v20070103-0300:1.9
	M4_20:1.9
	v20061218-1500:1.8.2.1
	v20061218-1200:1.9
	v20061214-0000:1.9
	M3_20:1.9
	v20061117-0800:1.9
	v20061027-1200:1.8.2.1
	v20061013-1330:1.9
	v20061012-1100:1.8.2.1
	v20060925-1700:1.8.2.1
	v20060919-0800:1.8.2.1
	v20060907-1100:1.8
	M1_20:1.8
	v20060831-1500:1.8
	v20060824-1600:1.8
	v20060817-1500:1.8
	v20060810-1700:1.8
	v20060803-1200:1.8
	v20060728-0500:1.8
	v20060721-1130:1.8
	v20060713-1700:1.8
	R1_0_maintenance:1.8.0.2
	R1_0:1.8
	v20060627-1200:1.8
	v20060616-1400:1.8
	v20060616-1200:1.8
	v20060609-1400:1.8
	v20060531-1730:1.8
	v20060530-1930:1.8
	v20060526-1200:1.8
	v20060519-0800:1.8
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.7
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.7
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.7
	I20060216-1945:1.7
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.7
	I20060202-1415:1.7
	I20060129-1145:1.7
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051208-2000:1.7
	I20051201-1800:1.7
	I20051124-2000:1.6
	M3_10:1.6
	I20051118-1245:1.6
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;


1.9
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.10.20.33.48;	author ldamus;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.15.00.21.38;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.02.23.30.17;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.28.18.37.54;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.08;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.22;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.45;	author sshaw;	state Exp;
branches;
next	;

1.8.2.1
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.9
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.tools;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.Request;
import org.eclipse.gef.RequestConstants;
import org.eclipse.gef.RootEditPart;
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport;
import org.eclipse.gmf.runtime.diagram.ui.figures.LayoutHelper;
import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramUIPluginImages;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequestFactory;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.widgets.Display;

/**
 * Generic Creation Tool - creates a semantic model element and a view for it
 *
 * The usual usecase is to create "one" element and view. However, in case multiple
 * elements are needed, specialized Semantic and View requests are needed to create
 * new adapters that can adapt to multiple semantic elements and views in the same time
 * 
 * @@author melaasar
 */
public class CreationTool extends org.eclipse.gef.tools.CreationTool {

	// temporarily disable the autoexpose helper since it interferes with menu selection.
	// see defect RATLC00525995	
	/**
	 * the anti scroll flag
	 */
	protected boolean antiScroll = false;
	
	/** Constant used to specify no point has been defined for the shape creation
	 * request.  It will be up to the layout edit policy to lay the shape in 
	 * the correct position*/
	private static final Point UNDEFINED_POINT = LayoutHelper.UNDEFINED.getLocation();
	/** the requested element kind */
	private IElementType elementType =null;

	static private Cursor CURSOR_SHAPE = new Cursor(Display.getDefault(),
		DiagramUIPluginImages.DESC_SHAPECURSOR_SOURCE.getImageData(),
		DiagramUIPluginImages.DESC_SHAPECURSOR_MASK.getImageData(), 7, 7);

	static private Cursor CURSOR_SHAPE_NOT = new Cursor(Display.getDefault(),
		DiagramUIPluginImages.DESC_NOSHAPECURSOR_SOURCE.getImageData(),
		DiagramUIPluginImages.DESC_NOSHAPECURSOR_MASK.getImageData(), 7, 7);		

	/**
	 * Method CreationTool.
	 * Creates a new CreationTool with the given elementTypeInfo, and a defailt viewKind equals IShapeView
	 * and a default empty semanticHint
	 * @@param elementType
	 */
	public CreationTool(IElementType elementType) {
		setElementType(elementType);
		setDefaultCursor(CURSOR_SHAPE);
		setDisabledCursor(CURSOR_SHAPE_NOT);
	}
	
	/**
	 * Default constructor to allow subclasses to not require an element type.
	 */
	protected CreationTool() {
		// do nothing
	}
	
	/**
	 * Gets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@return the preferences hint
	 */
	protected PreferencesHint getPreferencesHint() {
		EditPartViewer viewer = getCurrentViewer();
		if (viewer != null) {
			RootEditPart rootEP = viewer.getRootEditPart();
			if (rootEP instanceof IDiagramPreferenceSupport) {
				return ((IDiagramPreferenceSupport) rootEP)
					.getPreferencesHint();
			}
		}
		return PreferencesHint.USE_DEFAULTS;
	}

	protected Request createTargetRequest() {
		return CreateViewRequestFactory.getCreateShapeRequest(getElementType(),
			getPreferencesHint());
	}

	/**
	 * Since both the view and semantic requests contain results we need to free
	 * them when the tool is deactivated
	 */
	public void deactivate() {
		super.deactivate();
		setTargetRequest(null);
	}

	protected void performCreation(int button) {
		
		antiScroll = true;
				
		EditPartViewer viewer = getCurrentViewer();
		Command c = getCurrentCommand();
		executeCurrentCommand();
		selectAddedObject(viewer, DiagramCommandStack.getReturnValues(c));
		
		antiScroll = false;
	}

	/**
	 * Select the newly added shape view by default
	 * @@param viewer
	 * @@param objects
	 */
	protected void selectAddedObject(EditPartViewer viewer, Collection objects) {
		final List editparts = new ArrayList();
		for (Iterator i = objects.iterator(); i.hasNext();) {
			Object object = i.next();
			if (object instanceof IAdaptable) {
				Object editPart =
					viewer.getEditPartRegistry().get(
						((IAdaptable)object).getAdapter(View.class));
				if (editPart != null)
					editparts.add(editPart);
			}
		}

		if (!editparts.isEmpty()) {
			viewer.setSelection(new StructuredSelection(editparts));
		
			// automatically put the first shape into edit-mode
			Display.getCurrent().asyncExec(new Runnable() {
				public void run(){
					EditPart editPart = (EditPart) editparts.get(0);
					//
					// add active test since test scripts are failing on this
					// basically, the editpart has been deleted when this 
					// code is being executed. (see RATLC00527114)
					if ( editPart.isActive() ) {
						editPart.performRequest(new Request(RequestConstants.REQ_DIRECT_EDIT));
						revealEditPart((EditPart)editparts.get(0));
					}
				}
			});
		}
	}

	/**
	*  Handles double click to create the shape in defualt position
	*/
	protected boolean handleDoubleClick(int button) {

		createShapeAt(UNDEFINED_POINT);
		setState(STATE_TERMINAL);
		handleFinished();
		
		return true;

	}
	
	/**
	 * Create the shape corresponding to the current selected tool
	 * on the current diagram at the <code>point</code> specified
	 * @@param point to create shape at
	 */
	protected void createShapeAt(Point point){
		
		setTargetEditPart(getCurrentViewer().getRootEditPart().getContents());
				getCreateRequest().setLocation(point);
				setCurrentCommand(getCommand());
		performCreation(0);
	}

	/*  Overide to handle use case when the user has selected an tool
	 * and then click on the enter key which translated to SWT.Selection
	 * it will result in the new shape being created
	 * @@see org.eclipse.gef.tools.AbstractTool#handleKeyUp(org.eclipse.swt.events.KeyEvent)
	 */
	protected boolean handleKeyUp(KeyEvent e) {
		if (e.keyCode==SWT.Selection){
			setEditDomain(getCurrentViewer().getEditDomain());
			createShapeAt(UNDEFINED_POINT);
			return true;
		}
		return false;
	}

	protected void setTargetEditPart(EditPart editpart) {
		// Set the target request to null if the target editpart has changed.
		// This needs to be done so that the context element (if applicable) in
		// the request can be reset.
		if (editpart != getTargetEditPart()) {
			setTargetRequest(null);
		}
		super.setTargetEditPart(editpart);
	}
	/**
	 * @@return Returns the elementType.
	 */
	public IElementType getElementType() {
		return elementType;
	}
	/**
	 * @@param elementType The elementType to set.
	 */
	private void setElementType(IElementType elementType) {
		this.elementType = elementType;
	}

	/**
	 * Overridden so that the current tool will remain active (locked) if the
	 * user is pressing the ctrl key.
	 */
	protected void handleFinished() {
		if (!getCurrentInput().isControlKeyDown()) {
			super.handleFinished();
		} else {
			reactivate();
		}
	}
	
		
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.tools.CreationTool#handleMove()
	 */
	protected boolean handleMove() {
		if (!antiScroll)
			return super.handleMove();
		return false;
	}
	
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.tools.TargetingTool#doAutoexpose()
	 */
	protected void doAutoexpose() {
		if (!antiScroll)
			super.doAutoexpose();
		return;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.tools.TargetingTool#getCommand()
	 */
	protected Command getCommand() {	
		if (!antiScroll)
			return super.getCommand();
		return null;
	}
	
	/**
	 * Reveals the newly created editpart
	 * @@param editPart
	 */
	protected void revealEditPart(EditPart editPart){
		if ((editPart != null)&&
				(editPart.getViewer() != null))
				editPart.getViewer().reveal(editPart);
	}

	/**
	 * Creates the request.
	 * 
	 * @@see #createTargetRequest()
	 */
	public final Request createCreateRequest() {
		return createTargetRequest();
}
	/**
	 * Selects the new shapes and puts them in direct edit mode if desired.
	 * 
	 * @@param viewer
	 *            the editpart viewer
	 * @@param objects
	 *            the collection of new shapes
	 * @@see #selectAddedObject(EditPartViewer, Collection)
	 */
	public final void selectNewShapes(EditPartViewer viewer, Collection objects) {
		selectAddedObject(viewer, objects);
	}

}
@


1.8
log
@[135584] gmf_head ldamus 060410 Classes and methods required by clients should be made public
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
@


1.8.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.7
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@a30 1
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.CreateViewRequestFactory;
d32 1
@


1.6
log
@Bugzilla#113580 gmf_head cmahoney 051114 Can not add elements to diagram doing drag and drop from palette
@
text
@d30 1
a31 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
a64 6
	
	static private String SHAPECURSOR_MASK = "elcl16/shapecursor_mask.bmp";//$NON-NLS-1$
	static private String SHAPECURSOR_SOURCE = "elcl16/shapecursor_source.bmp";//$NON-NLS-1$	
	
	static private String NOSHAPECURSOR_MASK = "dlcl16/noshapecursor_mask.bmp";//$NON-NLS-1$
	static private String NOSHAPECURSOR_SOURCE = "dlcl16/noshapecursor_source.bmp";//$NON-NLS-1$	
d66 7
a72 9
	static private Cursor CURSOR_SHAPE = new Cursor(Display.getDefault(), DiagramResourceManager
		.getInstance().getImageDescriptor(SHAPECURSOR_SOURCE).getImageData(),
		DiagramResourceManager.getInstance().getImageDescriptor(
			SHAPECURSOR_MASK).getImageData(), 7, 7);

	static private Cursor CURSOR_SHAPE_NOT = new Cursor(Display.getDefault(), DiagramResourceManager
		.getInstance().getImageDescriptor(NOSHAPECURSOR_SOURCE).getImageData(),
		DiagramResourceManager.getInstance().getImageDescriptor(
			NOSHAPECURSOR_MASK).getImageData(), 7, 7);		
d198 2
a199 2
		getCreateRequest().setLocation(point);
		setCurrentCommand(getCommand());
d297 1
a297 2
	}

@


1.5
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a120 3
	/**
	 * @@see org.eclipse.gef.tools.TargetingTool#createTargetRequest()
	 */
a128 2
	 * 
	 * @@see org.eclipse.gef.Tool#deactivate()
a134 4
	/**
	 * 
	 * @@see org.eclipse.gef.tools.CreationTool#performCreation(int)
	 */
a186 1
	* @@see org.eclipse.gef.tools.AbstractTool#handleDoubleClick(int)
d206 2
a207 2
				getCreateRequest().setLocation(point);
				setCurrentCommand(getCommand());
a224 3
	/**
	 * @@see org.eclipse.gef.tools.TargetingTool#setTargetEditPart(org.eclipse.gef.EditPart)
	 */
a249 2
	 * 
	 * @@see org.eclipse.gef.tools.AbstractTool#handleFinished()
d297 23
@


1.4
log
@bugzilla 113148  gmf-head sshaw 051028 Cursor hotspot is incorrect.
@
text
@a26 6
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.widgets.Display;

d31 1
a31 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d35 5
d72 1
a72 1
	static private Cursor CURSOR_SHAPE = new Cursor(Display.getDefault(), PresentationResourceManager
d74 1
a74 1
		PresentationResourceManager.getInstance().getImageDescriptor(
d77 1
a77 1
	static private Cursor CURSOR_SHAPE_NOT = new Cursor(Display.getDefault(), PresentationResourceManager
d79 1
a79 1
		PresentationResourceManager.getInstance().getImageDescriptor(
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d81 1
a81 1
			NOSHAPECURSOR_MASK).getImageData(), 0, 0);		
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d38 1
a38 1
import com.ibm.xtools.notation.View;
@

