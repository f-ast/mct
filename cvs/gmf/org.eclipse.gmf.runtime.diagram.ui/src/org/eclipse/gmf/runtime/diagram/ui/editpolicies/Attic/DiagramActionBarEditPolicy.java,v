head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080731-1520:1.5
	v20080723-2246:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.3;
locks; strict;
comment	@# @;


1.5
date	2005.11.25.19.34.25;	author cmahoney;	state dead;
branches;
next	1.4;

1.4
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.06;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.06.20.55.01;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.37;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Bugzilla#113157 gmf_head cmahoney 051125 Removing deprecated classes
@
text
@/******************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.Iterator;
import java.util.List;

import org.eclipse.gef.Tool;
import org.eclipse.gef.palette.PaletteContainer;
import org.eclipse.gef.palette.PaletteDrawer;
import org.eclipse.gef.palette.PaletteEntry;
import org.eclipse.gef.palette.PaletteListener;
import org.eclipse.gef.palette.SelectionToolEntry;
import org.eclipse.gef.palette.ToolEntry;
import org.eclipse.gef.ui.palette.PaletteViewer;

import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;
import org.eclipse.gmf.runtime.diagram.ui.internal.services.palette.PaletteToolEntry;
import org.eclipse.gmf.runtime.diagram.ui.tools.CreationTool;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.gef.ui.internal.palette.PaletteStack;

/**
 * This is the default popup bar editpolicy installed on diagrams. The
 * actionbar is populated using the element types of the tools of the palette
 * drawer of the last selected palette tool. If the diagram was just opened, the
 * actionbar is populated using the element types of the tools of the palette
 * drawer that is initially open. If there is no drawer initially open, then
 * <code>buildDefaultActionBar()</code> is called to initially populate the
 * actionbar.
 * 
 * @@author cmahoney
 * @@deprecated Renamed to {@@link org.eclipse.gmf.runtime.diagram.ui.editpolicies.DiagramPopupBarEditPolicy}
 */
public class DiagramActionBarEditPolicy
	extends PopupBarEditPolicy
	implements PaletteListener {

	/**
	 * Holds the last active palette tool.
	 */
	private ToolEntry theLastTool = null;

//	/**
//	 * Creates a new instance.
//	 */
//	public DiagramActionBarEditPolicy() {
//		super();
//		this.setIsDisplayAtMouseHoverLocation(true);
//	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.EditPolicy#activate()
	 */
	public void activate() {
		super.activate();
		addPaletteListener();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.EditPolicy#deactivate()
	 */
	public void deactivate() {
		removePaletteListener();
		super.deactivate();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editpolicies.PopupBarEditPolicy#fillActionDescriptors()
	 */
	protected void fillPopupBarDescriptors() {
		fillBasedOnLastActivePaletteTool();
		if (getPopupBarDescriptors().isEmpty()) {
			fillBasedOnOpenPaletteDrawer();
			if (getPopupBarDescriptors().isEmpty()) {
				fillWithDefaults();
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.palette.PaletteListener#activeToolChanged(org.eclipse.gef.ui.palette.PaletteViewer,
	 *      org.eclipse.gef.palette.ToolEntry)
	 */
	public void activeToolChanged(PaletteViewer palette, ToolEntry tool) {
		if (!(tool instanceof SelectionToolEntry)) {
			theLastTool = tool;
		}
	}

	/**
	 * Adds this edit policy as a palette listener.
	 */
	private void addPaletteListener() {
		PaletteViewer paletteViewer = getHost().getViewer().getEditDomain()
			.getPaletteViewer();
		if (paletteViewer != null) {
			paletteViewer.addPaletteListener(this);
		}
	}

	/**
	 * Removes this edit policy as a palette listener.
	 */
	private void removePaletteListener() {
		PaletteViewer paletteViewer = getHost().getViewer().getEditDomain()
			.getPaletteViewer();
		if (paletteViewer != null) {
			paletteViewer.removePaletteListener(this);
		}
		theLastTool = null;
	}

	/**
	 * Adds popup bar descriptors for all the shape tools in the palette
	 * container of the last active palette tool.
	 */
	private void fillBasedOnLastActivePaletteTool() {
		if (theLastTool == null)
			return;

		PaletteContainer palContainer = theLastTool.getParent();
		fillWithPaletteToolsInContainer(palContainer);
	}

	/**
	 * Adds popup bar descriptors for all the shape tools in the given palette
	 * container.
	 * 
	 * @@param palContainer
	 *            the <code>PaletteContainer</code>
	 */
	private void fillWithPaletteToolsInContainer(PaletteContainer palContainer) {
		if (palContainer != null) {
			List theEntries = palContainer.getChildren();
			int isz = theEntries.size();
			for (int i = 0; i < isz; i++) {
				PaletteEntry theEntry = (PaletteEntry) theEntries.get(i);

				if (theEntry != null) {
					if (theEntry instanceof PaletteToolEntry) {
						PaletteToolEntry theXtoolsEntry = (PaletteToolEntry) theEntry;
						Tool tempTool = theXtoolsEntry.createTool();
						if ((tempTool != null)
							&& (tempTool instanceof CreationTool)) {
							CreationTool theXtoolsTool = (CreationTool) tempTool;
							IElementType theToolType = theXtoolsTool
								.getElementType();
							if ((theToolType != null)) {
								addPopupBarDescriptor(theToolType, IconService
									.getInstance().getIcon(theToolType));
							}
						}
					} else if (theEntry instanceof PaletteStack) {
						// RATLC00524208: fix for the pallete stack optimzation
						PaletteStack theStack = (PaletteStack) theEntry;
						fillWithPaletteToolsInContainer(theStack);
					}
				}
			}
		}
	}

	/**
	 * Adds popup bar descriptors for all the shape tools in the palette drawer
	 * that is initially open.
	 */
	private void fillBasedOnOpenPaletteDrawer() {
		PaletteViewer paletteViewer = getHost().getViewer().getEditDomain()
			.getPaletteViewer();
		for (Iterator iter = paletteViewer.getPaletteRoot().getChildren()
			.iterator(); iter.hasNext();) {
			Object child = iter.next();
			if (child instanceof PaletteDrawer) {
				PaletteDrawer drawer = (PaletteDrawer) child;
				if (drawer.isInitiallyOpen()) {
					fillWithPaletteToolsInContainer(drawer);
					break;
				}
			}
		}
	}

	/**
	 * Subclasses can override to provide default tools if actionbar cannot be
	 * populated based on the state of the palette.
	 */
	protected void fillWithDefaults() {
		// by default, add no popup bar descriptors.
	}

}@


1.4
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d33 1
a33 1
 * This is the default action bar editpolicy installed on diagrams. The
d42 1
d45 1
a45 1
	extends ActionBarEditPolicy
d84 1
a84 1
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editpolicies.ActionBarEditPolicy#fillActionDescriptors()
d86 1
a86 1
	protected void fillActionDescriptors() {
d88 1
a88 1
		if (getActionBarDescriptors().isEmpty()) {
d90 1
a90 1
			if (getActionBarDescriptors().isEmpty()) {
d132 1
a132 1
	 * Adds action bar descriptors for all the shape tools in the palette
d144 1
a144 1
	 * Adds action bar descriptors for all the shape tools in the given palette
d167 1
a167 1
								addActionBarDescriptor2(theToolType, IconService
d182 1
a182 1
	 * Adds action bar descriptors for all the shape tools in the palette drawer
d206 1
a206 1
		// by default, add no action bar descriptors.
@


1.2
log
@bugzilla 108310 gmf-head sshaw 050824 API analysis of draw2d / draw2d.render plug-ins
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.          	       |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d25 1
a28 1
import org.eclipse.gmf.runtime.gef.ui.internal.palette.PaletteToolEntry;
@

