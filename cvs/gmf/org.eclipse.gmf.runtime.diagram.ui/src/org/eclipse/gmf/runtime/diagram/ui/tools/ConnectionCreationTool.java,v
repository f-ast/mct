head	1.10;
access;
symbols
	v20081023-2107:1.10
	v20081022-1925:1.10
	v20081022-1005:1.10
	v20081020-0700:1.10
	v20080917-1925:1.10
	v20080916-2008:1.10
	v20080911-1728:1.10
	v20080911-1506:1.10
	v20080910-1520:1.10
	v20080910-1510:1.10
	v20080903-1520:1.10
	v20080903-1510:1.10
	v20080813-1510:1.10
	v20080811-1546:1.10
	v20080731-1520:1.10
	v20080725-1738:1.10
	v20080723-2246:1.10
	v20080723-2232:1.10
	v20080723-1700:1.10
	v20080722-1827:1.10
	v20080718-1700:1.10
	v20080718-1731:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080603-1553:1.10
	v20080527-1255:1.10
	v20080527-1151:1.8.4.2
	v20080516-1748:1.10
	v20080516-1143:1.10
	v20080512-1200:1.10
	v20080503-1740:1.10
	v20080501-2127:1.8.4.2
	v20080501-1739:1.10
	m20080429-1543:1.8.4.2
	v20080425-1959:1.10
	v20080417-1610:1.10
	v20080407-2250:1.10
	v20080407-0930:1.10
	v20080404-1111:1.10
	v20080328-1605:1.10
	v20080322-0000:1.10
	v20080222-1200:1.10
	v20080201-2010:1.10
	v20080201-0201:1.8.4.2
	v20080118-1129:1.8.4.2
	v20080114-2222:1.8.4.2
	v20080114-1111:1.10
	v20080107-1111:1.10
	v20071222-1111:1.10
	v20071214-1111:1.10
	v20071130-1111:1.10
	v20071124-0000:1.8.4.2
	v20071112-0000:1.9
	v20071108-0000:1.9
	v20071003-0000:1.8
	v20070915-0000:1.8
	v20070903-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.4
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070614-1400:1.8
	v20070608-1300:1.8
	v20070605-1400:1.8
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070518-1300:1.8
	bugzilla111892_group_support:1.8.0.2
	Root_bugzilla111892_group_support:1.8
	v20070504-1000:1.8
	v20070420-1000:1.8
	v20070413-1300:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070221-1500:1.8
	v20070208-1800:1.8
	v20070202-0200:1.7.2.3
	v20070119-1200:1.7.2.3
	v20070111-0800:1.7.2.3
	v20070105-1200:1.7.2.3
	v20070103-0300:1.8
	M4_20:1.8
	v20061218-1500:1.7.2.3
	v20061218-1200:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061027-1200:1.7.2.3
	v20061013-1330:1.8
	v20061012-1100:1.7.2.3
	v20060925-1700:1.7.2.3
	v20060919-0800:1.7.2.3
	v20060907-1100:1.7.2.2
	M1_20:1.7
	v20060831-1500:1.7.2.2
	v20060824-1600:1.7.2.2
	v20060817-1500:1.7.2.2
	v20060810-1700:1.7.2.2
	v20060803-1200:1.7.2.1
	v20060728-0500:1.7.2.1
	v20060721-1130:1.7.2.1
	v20060713-1700:1.7.2.1
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-0800:1.7
	v20060512-1000:1.7
	I20060512-1000:1.7
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.7
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2007.11.23.18.33.19;	author crevells;	state Exp;
branches;
next	1.9;
commitid	476247471cef4567;

1.9
date	2007.10.30.14.11.26;	author crevells;	state Exp;
branches;
next	1.8;
commitid	580d47273b8e4567;

1.8
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2006.04.19.14.16.27;	author cmahoney;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.04.18.20.51.25;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.10.20.33.48;	author ldamus;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.02.20.19.20;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.20.22.09.01;	author cmahoney;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.23.30.17;	author sshaw;	state Exp;
branches;
next	;

1.7.2.1
date	2006.07.11.15.09.44;	author cmahoney;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2006.08.10.20.39.26;	author mmostafa;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	;

1.8.4.1
date	2007.11.01.19.48.26;	author crevells;	state Exp;
branches;
next	1.8.4.2;
commitid	52bb472a2d8a4567;

1.8.4.2
date	2007.11.23.18.41.26;	author crevells;	state Exp;
branches;
next	;
commitid	410647471ed64567;


desc
@@


1.10
log
@[207980] gmf_head crevells 071123 Fix a regression I introduced with the connection handles with bugzilla 207980
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.tools;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.draw2d.FigureCanvas;
import org.eclipse.draw2d.Viewport;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.Request;
import org.eclipse.gef.RootEditPart;
import org.eclipse.gef.SharedCursors;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.requests.CreateConnectionRequest;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.l10n.DiagramUIPluginImages;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequestFactory;
import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Display;

/**
 * Generic Connection Creation Tool - creates a semantic model element and a
 * view for it.
 * 
 * Supports creation of a connection when there is not information is not all
 * available even after ther user has selected the target. When the user clicks
 * on the target element, then they will be presented with a diaglog to permit
 * them to enter the additional information.
 * 
 * @@author melaasar
 */
public class ConnectionCreationTool
	extends org.eclipse.gef.tools.ConnectionCreationTool {

	private IElementType elementType = null;

	/** Should deactivation be avoided? */
	private boolean avoidDeactivation = false;

	/** Does the user have the ctrl key pressed? */
	private boolean isCtrlKeyDown;

	static private Cursor CURSOR_CONNECTION = new Cursor(Display.getDefault(),
		DiagramUIPluginImages.DESC_CONNECTION_CURSOR_SOURCE.getImageData(),
		DiagramUIPluginImages.DESC_CONNECTION_CURSOR_MASK.getImageData(), 0, 0);

	static private Cursor CURSOR_CONNECTION_NOT = new Cursor(Display
		.getDefault(), DiagramUIPluginImages.DESC_NO_CONNECTION_CURSOR_SOURCE
		.getImageData(), DiagramUIPluginImages.DESC_NO_CONNECTION_CURSOR_MASK
		.getImageData(), 0, 0);
	
	static private Cursor CURSOR_TARGET_MENU = new Cursor(Display.getDefault(), SWT.CURSOR_HAND);

	/**
	 * Creates a new ConnectionCreationTool, the elementTypeInfo and
	 * viewFactoryhint will be set later.
	 */
	public ConnectionCreationTool() {
		setUnloadWhenFinished(true);
		setDefaultCursor(CURSOR_CONNECTION);
		setDisabledCursor(CURSOR_CONNECTION_NOT);
	}

	/**
	 * Method CreationTool. Creates a new CreationTool with the given
	 * elementType
	 * 
	 * @@param elementType
	 */
	public ConnectionCreationTool(IElementType elementType) {
		this();
		setSemanticRequestType(elementType);
	}

	/**
	 * @@return Returns the elementType.
	 */
	protected IElementType getElementType() {
		return elementType;
	}

	/**
	 * Sets the elementType.
	 * 
	 * @@param elementType
	 *            The elementType to set
	 */
	protected void setSemanticRequestType(IElementType elementType) {
		this.elementType = elementType;
	}

	/**
	 * Gets the preferences hint that is to be used to find the appropriate
	 * preference store from which to retrieve diagram preference values. The
	 * preference hint is mapped to a preference store in the preference
	 * registry <@@link DiagramPreferencesRegistry>.
	 * 
	 * @@return the preferences hint
	 */
	protected PreferencesHint getPreferencesHint() {
		EditPartViewer viewer = getCurrentViewer();
		if (viewer != null) {
			RootEditPart rootEP = viewer.getRootEditPart();
			if (rootEP instanceof IDiagramPreferenceSupport) {
				return ((IDiagramPreferenceSupport) rootEP)
					.getPreferencesHint();
			}
		}
		return PreferencesHint.USE_DEFAULTS;
	}

	/**
	 * @@see org.eclipse.gef.tools.TargetingTool#createTargetRequest()
	 */
	protected Request createTargetRequest() {
		return CreateViewRequestFactory.getCreateConnectionRequest(
			getElementType(), getPreferencesHint());
	}

	/**
	 * Since both the view and semantic requests contain results we need to free
	 * them when the tool is deactivated
	 * 
	 * @@see org.eclipse.gef.Tool#deactivate()
	 */
	public void deactivate() {

		if (!avoidDeactivation()) {
			super.deactivate();
			setTargetRequest(null);
		}

	}

	/**
	 * @@see org.eclipse.gef.tools.AbstractConnectionCreationTool#eraseSourceFeedback()
	 */
	protected void eraseSourceFeedback() {
		if (!avoidDeactivation()) {
			super.eraseSourceFeedback();
		}
	}

	/**
	 * @@see org.eclipse.gef.tools.AbstractTool#handleButtonUp(int)
	 */
	protected boolean handleButtonUp(int button) {
		setCtrlKeyDown(getCurrentInput().isControlKeyDown());

		if (isInState(STATE_CONNECTION_STARTED))
			handleCreateConnection();
		setState(STATE_TERMINAL);

		if (isInState(STATE_TERMINAL | STATE_INVALID)) {
			handleFinished();
		}

		return true;
	}

	/**
	 * @@see org.eclipse.gef.tools.AbstractTool#handleFinished() Called when the
	 *      current tool operation is complete.
	 */
	protected void handleFinished() {
		if (!isCtrlKeyDown()) {
			super.handleFinished();
		} else {
			reactivate();
		}
	}

	/**
	 * Method selectAddedObject. Select the newly added connection
	 */
	protected void selectAddedObject(EditPartViewer viewer, Collection objects) {
		final List editparts = new ArrayList();
        final EditPart[] primaryEP = new EditPart[1];
		for (Iterator i = objects.iterator(); i.hasNext();) {
			Object object = i.next();
			if (object instanceof IAdaptable) {
				Object editPart = viewer.getEditPartRegistry().get(
					((IAdaptable) object).getAdapter(View.class));

                if (editPart instanceof IPrimaryEditPart) {
                    editparts.add(editPart);
                }
                
                // Priority is to put a shape into direct edit mode.
                if (editPart instanceof ShapeEditPart) {
                    primaryEP[0] = (ShapeEditPart) editPart;
                }
			}
		}

 		if (!editparts.isEmpty()) {
			viewer.setSelection(new StructuredSelection(editparts));

			// automatically put the first shape into edit-mode
			Display.getCurrent().asyncExec(new Runnable() {

				public void run() {
                    if (primaryEP[0] == null) {
                        primaryEP[0] = (EditPart) editparts.get(0);
                    }
					//
					// add active test since test scripts are failing on this
					// basically, the editpart has been deleted when this
					// code is being executed. (see RATLC00527114)
					if (primaryEP[0].isActive()) {
                        primaryEP[0].performRequest(new Request(
							RequestConstants.REQ_DIRECT_EDIT));
					}
				}
			});
		}
	}

	/**
	 * Handles double click to create the shape in defualt position
	 * 
	 * @@see org.eclipse.gef.tools.AbstractTool#handleDoubleClick(int)
	 */
	protected boolean handleDoubleClick(int button) {
		createConnection();
		return true;

	}

	/**
	 * Creates a connection between the two select shapes. edit parts.
	 */
	protected void createConnection() {

		List selectedEditParts = getCurrentViewer().getSelectedEditParts();

		// only attempt to create connection if there are two shapes selected
		if (!selectedEditParts.isEmpty()) {

			IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) selectedEditParts
				.get(0);

			IGraphicalEditPart targetEditPart = selectedEditParts.size() == 2 ? (IGraphicalEditPart) selectedEditParts
				.get(1)
				: sourceEditPart;

			CreateConnectionRequest connectionRequest = (CreateConnectionRequest) createTargetRequest();

			connectionRequest.setTargetEditPart(sourceEditPart);
			connectionRequest.setType(RequestConstants.REQ_CONNECTION_START);
			connectionRequest.setLocation(new Point(0, 0));

			// only if the connection is supported will we get a non null
			// command from the sourceEditPart
			if (sourceEditPart.getCommand(connectionRequest) != null) {

				connectionRequest.setSourceEditPart(sourceEditPart);
				connectionRequest.setTargetEditPart(targetEditPart);
				connectionRequest.setType(RequestConstants.REQ_CONNECTION_END);
				connectionRequest.setLocation(new Point(0, 0));

				Command command = targetEditPart.getCommand(connectionRequest);

				if (command != null) {
					setCurrentCommand(command);
					executeCurrentCommand();
					selectAddedObject(getCurrentViewer(), DiagramCommandStack
						.getReturnValues(command));
				}
			}
			deactivate();

		}

	}

	/**
	 * Overide to handle use case when the user has selected a tool and then
	 * click on the enter key which translated to SWT.Selection it will result
	 * in the new shape being created
	 * 
	 * @@see org.eclipse.gef.tools.AbstractTool#handleKeyUp(org.eclipse.swt.events.KeyEvent)
	 */
	protected boolean handleKeyUp(KeyEvent e) {
		if (e.keyCode == SWT.Selection) {
			setEditDomain(getCurrentViewer().getEditDomain());
			createConnection();
			return true;
		}
		return false;
	}

	/**
	 * Overridden so that the tool doesn't get deactivated and the feedback
	 * erased if popup dialogs appear to complete the command.
	 * 
	 * @@see org.eclipse.gef.tools.AbstractConnectionCreationTool#handleCreateConnection()
	 */
	protected boolean handleCreateConnection() {

		// When a connection is to be created, a dialog box may appear which
		// will cause this tool to be deactivated and the feedback to be
		// erased. This behavior is overridden by setting the avoid
		// deactivation flag.
		setAvoidDeactivation(true);

		EditPartViewer viewer = getCurrentViewer();
		Command endCommand = getCommand();
		setCurrentCommand(endCommand);

		executeCurrentCommand();

		selectAddedObject(viewer, DiagramCommandStack
			.getReturnValues(endCommand));

		setAvoidDeactivation(false);
		eraseSourceFeedback();
		deactivate();

		return true;
	}

	/**
	 * Should deactivation be avoided?
	 * 
	 * @@return true if deactivation is to be avoided
	 */
	protected boolean avoidDeactivation() {
		return avoidDeactivation;
	}

	/**
	 * Sets if deactivation be temporarily avoided.
	 * 
	 * @@param avoidDeactivation
	 *            true if deactivation is to be avoided
	 */
	protected void setAvoidDeactivation(boolean avoidDeactivation) {
		this.avoidDeactivation = avoidDeactivation;
	}

	/**
	 * @@return Returns the isCtrlKeyDown.
	 */
	protected boolean isCtrlKeyDown() {
		return isCtrlKeyDown;
	}

	/**
	 * @@param isCtrlKeyDown
	 *            The isCtrlKeyDown to set.
	 */
	protected void setCtrlKeyDown(boolean isCtrlKeyDown) {
		this.isCtrlKeyDown = isCtrlKeyDown;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.tools.CreationTool#handleMove()
	 */
	protected boolean handleMove() {
		boolean bool = super.handleMove();
		if (isInState(STATE_CONNECTION_STARTED)) {
            // Expose the diagram as the user scrolls in the area handled by the
            // autoexpose helper.
            updateAutoexposeHelper();
		}
		return bool;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.tools.AbstractConnectionCreationTool#calculateCursor()
	 */
	protected Cursor calculateCursor() {
        if (isInState(STATE_CONNECTION_STARTED)) {

            // Give some feedback so the user knows the area where autoscrolling
            // will occur.
            if (getAutoexposeHelper() != null) {
                return SharedCursors.HAND;
            } else {

                // Give some feedback so the user knows that they can't drag
                // outside the viewport.
                if (getCurrentViewer() != null) {
                Control control = getCurrentViewer().getControl();
                if (control instanceof FigureCanvas) {
                        Viewport viewport = ((FigureCanvas) control)
                            .getViewport();
                        Rectangle rect = Rectangle.SINGLETON;
                        viewport.getClientArea(rect);
                        viewport.translateToParent(rect);
                        viewport.translateToAbsolute(rect);

                        if (!rect.contains(getLocation())) {
                            return getDisabledCursor();
                        }
                    }
                }
            }
        }
		Command command = getCurrentCommand();
		if (command != null && command.canExecute())
		{
			EditPart ep = getTargetEditPart();
			if (ep instanceof DiagramEditPart || ep instanceof CompartmentEditPart)
				return CURSOR_TARGET_MENU;
		}
		return super.calculateCursor();
	}

}
@


1.9
log
@[207980] gmf_head crevells 071030 ConnectionCreationTool should scroll when tool is dragged to edge of diagram
@
text
@d416 1
d419 6
a424 5
                    Viewport viewport = ((FigureCanvas) control).getViewport();
                    Rectangle rect = Rectangle.SINGLETON;
                    viewport.getClientArea(rect);
                    viewport.translateToParent(rect);
                    viewport.translateToAbsolute(rect);
d426 3
a428 2
                    if (!rect.contains(getLocation())) {
                        return getDisabledCursor();
@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d21 1
d23 1
d28 1
a30 1
import org.eclipse.gef.ui.parts.ScrollingGraphicalViewer;
a41 1
import org.eclipse.gmf.runtime.diagram.ui.util.SelectInDiagramHelper;
d48 1
a64 4
	// temporarily disable the autoexpose helper since it interferes with menu
	// selection.
	private boolean antiScroll = false;

a295 1
					antiScroll = true;
a296 1
					antiScroll = false;
a340 1
		antiScroll = true;
a341 1
		antiScroll = false;
d393 5
a397 18
		if (!antiScroll) {
			boolean bool = super.handleMove();
			boolean cont = getState() == STATE_CONNECTION_STARTED
				&& ((getCurrentCommand() == null) || ((getCurrentCommand() != null) && (getCurrentCommand()
					.canExecute())));
			if (cont) {
				if ((getTargetEditPart() != null)
					&& (getTargetEditPart().getViewer() instanceof ScrollingGraphicalViewer)
					&& (getTargetEditPart().getViewer().getControl() instanceof FigureCanvas)) {
					FigureCanvas figureCanvas = (FigureCanvas) ((ScrollingGraphicalViewer) getTargetEditPart()
						.getViewer()).getControl();
					Point location1 = getLocation().getCopy();
					SelectInDiagramHelper.exposeLocation(figureCanvas,
						location1);

				}
			}
			return bool;
d399 1
a399 23
		return false;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.tools.TargetingTool#doAutoexpose()
	 */
	protected void doAutoexpose() {
		if (!antiScroll)
			super.doAutoexpose();
		return;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.tools.TargetingTool#getCommand()
	 */
	protected Command getCommand() {
		if (!antiScroll)
			return super.getCommand();
		return null;
d406 24
a438 2
	
	
@


1.8.4.1
log
@[207980] gmf_R2_0_maintenance crevells 071030 ConnectionCreationTool should scroll when tool is dragged to edge of diagram
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
a20 1
import org.eclipse.draw2d.Viewport;
a21 1
import org.eclipse.draw2d.geometry.Rectangle;
a25 1
import org.eclipse.gef.SharedCursors;
d28 1
d40 1
a46 1
import org.eclipse.swt.widgets.Control;
d61 1
a61 1
    extends org.eclipse.gef.tools.ConnectionCreationTool {
d63 147
a209 143
    private IElementType elementType = null;

    /** Should deactivation be avoided? */
    private boolean avoidDeactivation = false;

    /** Does the user have the ctrl key pressed? */
    private boolean isCtrlKeyDown;

    static private Cursor CURSOR_CONNECTION = new Cursor(Display.getDefault(),
        DiagramUIPluginImages.DESC_CONNECTION_CURSOR_SOURCE.getImageData(),
        DiagramUIPluginImages.DESC_CONNECTION_CURSOR_MASK.getImageData(), 0, 0);

    static private Cursor CURSOR_CONNECTION_NOT = new Cursor(Display
        .getDefault(), DiagramUIPluginImages.DESC_NO_CONNECTION_CURSOR_SOURCE
        .getImageData(), DiagramUIPluginImages.DESC_NO_CONNECTION_CURSOR_MASK
        .getImageData(), 0, 0);
    
    static private Cursor CURSOR_TARGET_MENU = new Cursor(Display.getDefault(), SWT.CURSOR_HAND);

    /**
     * Creates a new ConnectionCreationTool, the elementTypeInfo and
     * viewFactoryhint will be set later.
     */
    public ConnectionCreationTool() {
        setUnloadWhenFinished(true);
        setDefaultCursor(CURSOR_CONNECTION);
        setDisabledCursor(CURSOR_CONNECTION_NOT);
    }

    /**
     * Method CreationTool. Creates a new CreationTool with the given
     * elementType
     * 
     * @@param elementType
     */
    public ConnectionCreationTool(IElementType elementType) {
        this();
        setSemanticRequestType(elementType);
    }

    /**
     * @@return Returns the elementType.
     */
    protected IElementType getElementType() {
        return elementType;
    }

    /**
     * Sets the elementType.
     * 
     * @@param elementType
     *            The elementType to set
     */
    protected void setSemanticRequestType(IElementType elementType) {
        this.elementType = elementType;
    }

    /**
     * Gets the preferences hint that is to be used to find the appropriate
     * preference store from which to retrieve diagram preference values. The
     * preference hint is mapped to a preference store in the preference
     * registry <@@link DiagramPreferencesRegistry>.
     * 
     * @@return the preferences hint
     */
    protected PreferencesHint getPreferencesHint() {
        EditPartViewer viewer = getCurrentViewer();
        if (viewer != null) {
            RootEditPart rootEP = viewer.getRootEditPart();
            if (rootEP instanceof IDiagramPreferenceSupport) {
                return ((IDiagramPreferenceSupport) rootEP)
                    .getPreferencesHint();
            }
        }
        return PreferencesHint.USE_DEFAULTS;
    }

    /**
     * @@see org.eclipse.gef.tools.TargetingTool#createTargetRequest()
     */
    protected Request createTargetRequest() {
        return CreateViewRequestFactory.getCreateConnectionRequest(
            getElementType(), getPreferencesHint());
    }

    /**
     * Since both the view and semantic requests contain results we need to free
     * them when the tool is deactivated
     * 
     * @@see org.eclipse.gef.Tool#deactivate()
     */
    public void deactivate() {

        if (!avoidDeactivation()) {
            super.deactivate();
            setTargetRequest(null);
        }

    }

    /**
     * @@see org.eclipse.gef.tools.AbstractConnectionCreationTool#eraseSourceFeedback()
     */
    protected void eraseSourceFeedback() {
        if (!avoidDeactivation()) {
            super.eraseSourceFeedback();
        }
    }

    /**
     * @@see org.eclipse.gef.tools.AbstractTool#handleButtonUp(int)
     */
    protected boolean handleButtonUp(int button) {
        setCtrlKeyDown(getCurrentInput().isControlKeyDown());

        if (isInState(STATE_CONNECTION_STARTED))
            handleCreateConnection();
        setState(STATE_TERMINAL);

        if (isInState(STATE_TERMINAL | STATE_INVALID)) {
            handleFinished();
        }

        return true;
    }

    /**
     * @@see org.eclipse.gef.tools.AbstractTool#handleFinished() Called when the
     *      current tool operation is complete.
     */
    protected void handleFinished() {
        if (!isCtrlKeyDown()) {
            super.handleFinished();
        } else {
            reactivate();
        }
    }

    /**
     * Method selectAddedObject. Select the newly added connection
     */
    protected void selectAddedObject(EditPartViewer viewer, Collection objects) {
        final List editparts = new ArrayList();
d211 5
a215 5
        for (Iterator i = objects.iterator(); i.hasNext();) {
            Object object = i.next();
            if (object instanceof IAdaptable) {
                Object editPart = viewer.getEditPartRegistry().get(
                    ((IAdaptable) object).getAdapter(View.class));
d225 2
a226 2
            }
        }
d228 2
a229 2
        if (!editparts.isEmpty()) {
            viewer.setSelection(new StructuredSelection(editparts));
d231 2
a232 2
            // automatically put the first shape into edit-mode
            Display.getCurrent().asyncExec(new Runnable() {
d234 1
a234 1
                public void run() {
d238 5
a242 5
                    //
                    // add active test since test scripts are failing on this
                    // basically, the editpart has been deleted when this
                    // code is being executed. (see RATLC00527114)
                    if (primaryEP[0].isActive()) {
d244 214
a457 197
                            RequestConstants.REQ_DIRECT_EDIT));
                    }
                }
            });
        }
    }

    /**
     * Handles double click to create the shape in defualt position
     * 
     * @@see org.eclipse.gef.tools.AbstractTool#handleDoubleClick(int)
     */
    protected boolean handleDoubleClick(int button) {
        createConnection();
        return true;

    }

    /**
     * Creates a connection between the two select shapes. edit parts.
     */
    protected void createConnection() {

        List selectedEditParts = getCurrentViewer().getSelectedEditParts();

        // only attempt to create connection if there are two shapes selected
        if (!selectedEditParts.isEmpty()) {

            IGraphicalEditPart sourceEditPart = (IGraphicalEditPart) selectedEditParts
                .get(0);

            IGraphicalEditPart targetEditPart = selectedEditParts.size() == 2 ? (IGraphicalEditPart) selectedEditParts
                .get(1)
                : sourceEditPart;

            CreateConnectionRequest connectionRequest = (CreateConnectionRequest) createTargetRequest();

            connectionRequest.setTargetEditPart(sourceEditPart);
            connectionRequest.setType(RequestConstants.REQ_CONNECTION_START);
            connectionRequest.setLocation(new Point(0, 0));

            // only if the connection is supported will we get a non null
            // command from the sourceEditPart
            if (sourceEditPart.getCommand(connectionRequest) != null) {

                connectionRequest.setSourceEditPart(sourceEditPart);
                connectionRequest.setTargetEditPart(targetEditPart);
                connectionRequest.setType(RequestConstants.REQ_CONNECTION_END);
                connectionRequest.setLocation(new Point(0, 0));

                Command command = targetEditPart.getCommand(connectionRequest);

                if (command != null) {
                    setCurrentCommand(command);
                    executeCurrentCommand();
                    selectAddedObject(getCurrentViewer(), DiagramCommandStack
                        .getReturnValues(command));
                }
            }
            deactivate();

        }

    }

    /**
     * Overide to handle use case when the user has selected a tool and then
     * click on the enter key which translated to SWT.Selection it will result
     * in the new shape being created
     * 
     * @@see org.eclipse.gef.tools.AbstractTool#handleKeyUp(org.eclipse.swt.events.KeyEvent)
     */
    protected boolean handleKeyUp(KeyEvent e) {
        if (e.keyCode == SWT.Selection) {
            setEditDomain(getCurrentViewer().getEditDomain());
            createConnection();
            return true;
        }
        return false;
    }

    /**
     * Overridden so that the tool doesn't get deactivated and the feedback
     * erased if popup dialogs appear to complete the command.
     * 
     * @@see org.eclipse.gef.tools.AbstractConnectionCreationTool#handleCreateConnection()
     */
    protected boolean handleCreateConnection() {

        // When a connection is to be created, a dialog box may appear which
        // will cause this tool to be deactivated and the feedback to be
        // erased. This behavior is overridden by setting the avoid
        // deactivation flag.
        setAvoidDeactivation(true);

        EditPartViewer viewer = getCurrentViewer();
        Command endCommand = getCommand();
        setCurrentCommand(endCommand);

        executeCurrentCommand();

        selectAddedObject(viewer, DiagramCommandStack
            .getReturnValues(endCommand));

        setAvoidDeactivation(false);
        eraseSourceFeedback();
        deactivate();

        return true;
    }

    /**
     * Should deactivation be avoided?
     * 
     * @@return true if deactivation is to be avoided
     */
    protected boolean avoidDeactivation() {
        return avoidDeactivation;
    }

    /**
     * Sets if deactivation be temporarily avoided.
     * 
     * @@param avoidDeactivation
     *            true if deactivation is to be avoided
     */
    protected void setAvoidDeactivation(boolean avoidDeactivation) {
        this.avoidDeactivation = avoidDeactivation;
    }

    /**
     * @@return Returns the isCtrlKeyDown.
     */
    protected boolean isCtrlKeyDown() {
        return isCtrlKeyDown;
    }

    /**
     * @@param isCtrlKeyDown
     *            The isCtrlKeyDown to set.
     */
    protected void setCtrlKeyDown(boolean isCtrlKeyDown) {
        this.isCtrlKeyDown = isCtrlKeyDown;
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.gef.tools.CreationTool#handleMove()
     */
    protected boolean handleMove() {
        boolean bool = super.handleMove();
        if (isInState(STATE_CONNECTION_STARTED)) {
            // Expose the diagram as the user scrolls in the area handled by the
            // autoexpose helper.
            updateAutoexposeHelper();
        }
        return bool;
    }

    /* (non-Javadoc)
     * @@see org.eclipse.gef.tools.AbstractConnectionCreationTool#calculateCursor()
     */
    protected Cursor calculateCursor() {
        if (isInState(STATE_CONNECTION_STARTED)) {

            // Give some feedback so the user knows the area where autoscrolling
            // will occur.
            if (getAutoexposeHelper() != null) {
                return SharedCursors.HAND;
            } else {

                // Give some feedback so the user knows that they can't drag
                // outside the viewport.
                Control control = getCurrentViewer().getControl();
                if (control instanceof FigureCanvas) {
                    Viewport viewport = ((FigureCanvas) control).getViewport();
                    Rectangle rect = Rectangle.SINGLETON;
                    viewport.getClientArea(rect);
                    viewport.translateToParent(rect);
                    viewport.translateToAbsolute(rect);

                    if (!rect.contains(getLocation())) {
                        return getDisabledCursor();
                    }
                }
            }
        }
        Command command = getCurrentCommand();
        if (command != null && command.canExecute())
        {
            EditPart ep = getTargetEditPart();
            if (ep instanceof DiagramEditPart || ep instanceof CompartmentEditPart)
                return CURSOR_TARGET_MENU;
        }
        return super.calculateCursor();
    }
@


1.8.4.2
log
@[207980] gmf_R2_0_maintenance crevells 071123 Fix a regression I introduced with the connection handles with bugzilla 207980
@
text
@d416 7
a422 9
                if (getCurrentViewer() != null) {
                    Control control = getCurrentViewer().getControl();
                    if (control instanceof FigureCanvas) {
                        Viewport viewport = ((FigureCanvas) control)
                            .getViewport();
                        Rectangle rect = Rectangle.SINGLETON;
                        viewport.getClientArea(rect);
                        viewport.translateToParent(rect);
                        viewport.translateToAbsolute(rect);
d424 2
a425 3
                        if (!rect.contains(getLocation())) {
                            return getDisabledCursor();
                        }
@


1.7
log
@Bugzilla#113594 gmf_head cmahoney 060419 When creating a connection to an unspecified other end, the new shape should be in edit mode
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
d30 2
a64 1
	// see defect RATLC00525995
d83 2
d402 1
a402 1
				&& ((getCommand() == null) || ((getCommand() != null) && (getCommand()
d443 16
@


1.7.2.1
log
@Bugzilla#133179 gmf_R1_0_maintenance cmahoney 060711 ConnectionCreationTool uses the wrong method to get command
@
text
@d63 1
d399 1
a399 1
				&& ((getCurrentCommand() == null) || ((getCurrentCommand() != null) && (getCurrentCommand()
@


1.7.2.2
log
@[146692] gmf_R1_0_maintenance ABoyko  060810 support a consistent and ample snap zone for wiring to all object types
@
text
@a29 2
import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
a80 2
	
	static private Cursor CURSOR_TARGET_MENU = new Cursor(Display.getDefault(), SWT.CURSOR_HAND);
a438 16
	/* (non-Javadoc)
	 * @@see org.eclipse.gef.tools.AbstractConnectionCreationTool#calculateCursor()
	 */
	protected Cursor calculateCursor() {
		Command command = getCurrentCommand();
		if (command != null && command.canExecute())
		{
			EditPart ep = getTargetEditPart();
			if (ep instanceof DiagramEditPart || ep instanceof CompartmentEditPart)
				return CURSOR_TARGET_MENU;
		}
		return super.calculateCursor();
	}
	
	

@


1.7.2.3
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.6
log
@Bugzilla#109422 gmf_head cmahoney 060418 Remove deprecated API
@
text
@a26 1
import org.eclipse.gef.editparts.AbstractConnectionEditPart;
d32 2
d207 1
d213 9
a221 5
				if (editPart instanceof AbstractConnectionEditPart) {
					editparts.add(editPart);
				}
				// if (editPart != null)
				// editparts.add(editPart);
d225 1
a225 1
		if (!editparts.isEmpty()) {
d232 3
a234 1
					EditPart editPart = (EditPart) editparts.get(0);
d239 2
a240 2
					if (editPart.isActive()) {
						editPart.performRequest(new Request(
@


1.5
log
@[135584] gmf_head ldamus 060410 Classes and methods required by clients should be made public
@
text
@a64 1
	/** @@deprecated the requested element kind */
@


1.4
log
@bugzilla 125387 gmf-head sshaw 060202 Make ConnectionCreationTool#selectAddedObject () protected
@
text
@a33 1
import org.eclipse.gmf.runtime.diagram.ui.internal.requests.CreateViewRequestFactory;
d35 1
@


1.3
log
@Bugzilla#124343 gmf_head cmahoney 060120 Unable to create connection by double-clicking UnspecifiedTypeConnectionTool palette entries
@
text
@d205 1
a205 1
	private void selectAddedObject(EditPartViewer viewer, Collection objects) {
@


1.2
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d28 1
a35 1
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest;
d269 1
a269 1
			CreateConnectionViewRequest connectionRequest = (CreateConnectionViewRequest) createTargetRequest();
@


1.1
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d32 1
a33 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
a73 8
	static private String CONNECTION_CURSOR_MASK = "elcl16/connectcursor_mask.bmp";//$NON-NLS-1$

	static private String CONNECTION_CURSOR_SOURCE = "elcl16/connectcursor_source.bmp";//$NON-NLS-1$	

	static private String NO_CONNECTION_CURSOR_MASK = "dlcl16/noconnectcursor_mask.bmp";//$NON-NLS-1$

	static private String NO_CONNECTION_CURSOR_SOURCE = "dlcl16/noconnectcursor_source.bmp";//$NON-NLS-1$	

d75 2
a76 4
		DiagramResourceManager.getInstance().getImageDescriptor(
			CONNECTION_CURSOR_SOURCE).getImageData(), DiagramResourceManager
			.getInstance().getImageDescriptor(CONNECTION_CURSOR_MASK)
			.getImageData(), 0, 0);
d79 2
a80 3
		.getDefault(), DiagramResourceManager.getInstance().getImageDescriptor(
		NO_CONNECTION_CURSOR_SOURCE).getImageData(), DiagramResourceManager
		.getInstance().getImageDescriptor(NO_CONNECTION_CURSOR_MASK)
@

