head	1.11;
access;
symbols
	v20081023-2107:1.10.6.1
	v20081022-1925:1.11
	v20081022-1005:1.10.6.1
	v20081020-0700:1.11
	v20080917-1925:1.11
	v20080916-2008:1.10.6.1
	v20080911-1728:1.10
	v20080911-1506:1.10
	v20080910-1520:1.10
	v20080910-1510:1.10
	v20080903-1520:1.10
	v20080903-1510:1.10
	v20080813-1510:1.10
	v20080811-1546:1.10
	v20080731-1520:1.10
	v20080725-1738:1.10
	v20080723-2246:1.10
	v20080723-2232:1.10
	v20080723-1700:1.10
	v20080722-1827:1.10
	v20080718-1700:1.10
	v20080718-1731:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.6
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080603-1553:1.10
	v20080527-1255:1.10
	v20080527-1151:1.10
	v20080516-1748:1.10
	v20080516-1143:1.10
	v20080512-1200:1.10
	v20080503-1740:1.10
	v20080501-2127:1.10
	v20080501-1739:1.10
	m20080429-1543:1.10
	v20080425-1959:1.10
	v20080417-1610:1.10
	v20080407-2250:1.10
	v20080407-0930:1.10
	v20080404-1111:1.10
	v20080328-1605:1.10
	v20080322-0000:1.10
	v20080222-1200:1.10
	v20080201-2010:1.10
	v20080201-0201:1.10
	v20080118-1129:1.10
	v20080114-2222:1.10
	v20080114-1111:1.10
	v20080107-1111:1.10
	v20071222-1111:1.10
	v20071214-1111:1.10
	v20071130-1111:1.10
	v20071124-0000:1.10
	v20071112-0000:1.10
	v20071108-0000:1.10
	v20071003-0000:1.10
	v20070915-0000:1.10
	v20070903-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.4
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070614-1400:1.10
	v20070608-1300:1.10
	v20070605-1400:1.10
	v20070601-1400:1.10
	v20070525-1500:1.10
	v20070518-1300:1.10
	bugzilla111892_group_support:1.10.0.2
	Root_bugzilla111892_group_support:1.10
	v20070504-1000:1.10
	v20070420-1000:1.10
	v20070413-1300:1.10
	v20070330-1300:1.10
	v20060330-1300:1.10
	v20070322-1100:1.10
	v20060316-0600:1.10
	v20070221-1500:1.10
	v20070208-1800:1.10
	v20070202-0200:1.9.2.3
	v20070119-1200:1.9.2.3
	v20070111-0800:1.9.2.3
	v20070105-1200:1.9.2.3
	v20070103-0300:1.10
	M4_20:1.10
	v20061218-1500:1.9.2.3
	v20061218-1200:1.10
	v20061214-0000:1.10
	M3_20:1.10
	v20061117-0800:1.10
	v20061027-1200:1.9.2.3
	v20061013-1330:1.10
	v20061012-1100:1.9.2.3
	v20060925-1700:1.9.2.3
	v20060919-0800:1.9.2.3
	v20060907-1100:1.9.2.2
	M1_20:1.9
	v20060831-1500:1.9.2.2
	v20060824-1600:1.9.2.1
	v20060817-1500:1.9.2.1
	v20060810-1700:1.9.2.1
	v20060803-1200:1.9.2.1
	v20060728-0500:1.9.2.1
	v20060721-1130:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060616-1400:1.9
	v20060616-1200:1.9
	v20060609-1400:1.9
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.9
	v20060519-0800:1.9
	v20060512-1000:1.9
	I20060512-1000:1.9
	I20060505-1400:1.9
	I20060428-1300:1.9
	I20060424-0500:1.9
	I20060424-0300:1.9
	M6_10:1.9
	I20060407-1200:1.9
	I20060331-1000:1.9
	I20060324-0300:1.8
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.7
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;


1.11
date	2008.09.16.23.39.30;	author ahunter;	state Exp;
branches;
next	1.10;
commitid	fad948d043b24567;

1.10
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches
	1.10.6.1;
next	1.9;

1.9
date	2006.03.27.18.48.23;	author sshaw;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2006.03.23.05.32.29;	author sshaw;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.28.02.30.51;	author cmahoney;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.08.22.53.39;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.36;	author sshaw;	state Exp;
branches;
next	;

1.9.2.1
date	2006.07.25.19.04.48;	author mmostafa;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2006.08.25.16.01.09;	author cmahoney;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;

1.10.6.1
date	2008.09.16.23.21.40;	author ahunter;	state Exp;
branches;
next	;
commitid	cf3f48d03f844567;


desc
@@


1.11
log
@[225353] gmf-head rraugi 080916 Null anchors not supported by the ShapeNodeEditPart
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.List;

import org.eclipse.draw2d.ConnectionAnchor;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.transaction.RunnableWithResult;
import org.eclipse.gef.ConnectionEditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.Request;
import org.eclipse.gef.requests.DropRequest;
import org.eclipse.gef.requests.ReconnectRequest;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConnectionHandleEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SortFilterCompartmentItemsEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.NoteAttachmentReorientEditPolicy;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.Anchor;
import org.eclipse.gmf.runtime.notation.IdentityAnchor;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/*
 * @@canBeSeenBy %partners
 */
/**
 * the shape node controller
 * @@author mmostafa
 *
 */
public abstract class ShapeNodeEditPart
	extends ShapeEditPart
	implements INodeEditPart {

	/**
	 * constructor
	 * @@param view the view controlled by this edit part
	 */
	public ShapeNodeEditPart(View view) {
		super(view);
	}

	protected List getModelSourceConnections() {
        return ViewUtil.getSourceConnectionsConnectingVisibleViews((View)getModel());
	}

	protected List getModelTargetConnections() {
        return ViewUtil.getTargetConnectionsConnectingVisibleViews((View)getModel());
	}

	protected void createDefaultEditPolicies() {
		// node edit policy needs to be installed before component editpolicy
		// from the super
		// since connections of a node need to be deleted before the node
		//installEditPolicy(EditPolicy.NODE_ROLE, new NodeEditPolicy());
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE,
			new GraphicalNodeEditPolicy());
		installEditPolicy(EditPolicyRoles.SORT_FILTER_ROLE,
			new SortFilterCompartmentItemsEditPolicy());
			installEditPolicy(EditPolicyRoles.CONNECTION_HANDLES_ROLE,
				new ConnectionHandleEditPolicy());

        // Disable note attachment reorient between two shapes where neither is a note.
        installEditPolicy("NoteAttachmentReorient", //$NON-NLS-1$
            new NoteAttachmentReorientEditPolicy());
	}

	protected final IFigure createFigure() {
		return createNodeFigure();
	}

	/**
	 * creates a node figure
	 * @@return <code>NodeFigure</code>
	 */
	abstract protected NodeFigure createNodeFigure();

	/**
	 * getter for the node Figure
	 * @@return <code>NodeFigure</code>
	 */
	protected NodeFigure getNodeFigure() {
		return (NodeFigure) getFigure();
	}

	/*
	 * @@see org.eclipse.gef.NodeEditPart#getSourceConnectionAnchor(org.eclipse.gef.ConnectionEditPart)
	 */
	public ConnectionAnchor getSourceConnectionAnchor(
			ConnectionEditPart connEditPart) {
		final org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart connection = 
            (org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart)connEditPart;
		String t = ""; //$NON-NLS-1$
		try {
			t = (String) getEditingDomain().runExclusive(
				new RunnableWithResult.Impl() {

				public void run() {
					Anchor a = connection.getEdge().getSourceAnchor();
					if (a instanceof IdentityAnchor)
						setResult(((IdentityAnchor) a).getId());
                    else
                        setResult(""); //$NON-NLS-1$
				}
			});
		} catch (InterruptedException e) {
			Trace.catching(DiagramUIPlugin.getInstance(),
				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
				"getSourceConnectionAnchor", e); //$NON-NLS-1$
			Log.error(DiagramUIPlugin.getInstance(),
				DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
				"getSourceConnectionAnchor", e); //$NON-NLS-1$
		}
		return getNodeFigure().getConnectionAnchor(t);
	}

	/*
	 * @@see org.eclipse.gef.NodeEditPart#getSourceConnectionAnchor(org.eclipse.gef.Request)
	 */
	public ConnectionAnchor getSourceConnectionAnchor(Request request) {
		if (request instanceof ReconnectRequest) {
			if (((DropRequest) request).getLocation() == null) {
				return getNodeFigure().getSourceConnectionAnchorAt(null);
			}
			Point pt = ((DropRequest) request).getLocation().getCopy();
			return getNodeFigure().getSourceConnectionAnchorAt(pt);
		}
		else if (request instanceof DropRequest){
			return getNodeFigure().getSourceConnectionAnchorAt(
				((DropRequest) request).getLocation());
		}
		return getNodeFigure().getSourceConnectionAnchorAt(null);
	}

	/*
	 * @@see org.eclipse.gef.NodeEditPart#getTargetConnectionAnchor(org.eclipse.gef.ConnectionEditPart)
	 */
	public ConnectionAnchor getTargetConnectionAnchor(
			ConnectionEditPart connEditPart) {
        final org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart connection = 
            (org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart)connEditPart;
        
		String t = ""; //$NON-NLS-1$
		try {
			t = (String) getEditingDomain().runExclusive(
				new RunnableWithResult.Impl() {

				public void run() {
					Anchor a = connection.getEdge().getTargetAnchor();
					if (a instanceof IdentityAnchor)
						setResult(((IdentityAnchor) a).getId());
                    else
                        setResult(""); //$NON-NLS-1$
				}
			});
		} catch (InterruptedException e) {
			Trace.catching(DiagramUIPlugin.getInstance(),
				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
				"getTargetConnectionAnchor", e); //$NON-NLS-1$
			Log.error(DiagramUIPlugin.getInstance(),
				DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
				"getTargetConnectionAnchor", e); //$NON-NLS-1$
		}

		return getNodeFigure().getConnectionAnchor(t);
	}

	/*
	 * @@see org.eclipse.gef.NodeEditPart#getTargetConnectionAnchor(org.eclipse.gef.Request)
	 */
	public ConnectionAnchor getTargetConnectionAnchor(Request request) {
		if (request instanceof ReconnectRequest) {
			if (((DropRequest) request).getLocation() == null) {
				return getNodeFigure().getTargetConnectionAnchorAt(null);
			}
			Point pt = ((DropRequest) request).getLocation().getCopy();
			return getNodeFigure().getTargetConnectionAnchorAt(pt);
		}
		else if (request instanceof DropRequest){
			return getNodeFigure().getTargetConnectionAnchorAt(
				((DropRequest) request).getLocation());
		}
		return getNodeFigure().getTargetConnectionAnchorAt(null);
	}

	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.INodeEditPart#mapConnectionAnchorToTerminal(ConnectionAnchor)
	 */
	final public String mapConnectionAnchorToTerminal(ConnectionAnchor c) {
		return getNodeFigure().getConnectionAnchorTerminal(c);
	}

	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.INodeEditPart#mapTerminalToConnectionAnchor(String)
	 */
	final public ConnectionAnchor mapTerminalToConnectionAnchor(String terminal) {
		return getNodeFigure().getConnectionAnchor(terminal);
	}

	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#handlePropertyChangeEvent(java.beans.PropertyChangeEvent)
	 */
	protected void handleNotificationEvent(Notification notification) {
		Object feature = notification.getFeature();
		if (NotationPackage.eINSTANCE.getView_SourceEdges().equals(feature))
			refreshSourceConnections();
		else if (NotationPackage.eINSTANCE.getView_TargetEdges().equals(feature))
			refreshTargetConnections();
		else
			super.handleNotificationEvent(notification);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.editparts.INoteableEditPart#canAttachNote()
	 */
	public boolean canAttachNote() {
		return true;
	}

}

@


1.10
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d143 3
d194 3
@


1.10.6.1
log
@[225353] gmf-R2_1_maintenance rraugi 080916 Null anchors not supported by the ShapeNodeEditPart
@
text
@a142 3
			if (((DropRequest) request).getLocation() == null) {
				return getNodeFigure().getSourceConnectionAnchorAt(null);
			}
a190 3
			if (((DropRequest) request).getLocation() == null) {
				return getNodeFigure().getTargetConnectionAnchorAt(null);
			}
@


1.9
log
@bugzilla 133308 gmf-head sshaw 060327 Unnecessary cast to ConnectionNodeEditPart
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d36 1
d64 1
a64 1
		return ViewUtil.getSourceConnections((View)getModel());
d68 1
a68 1
		return ViewUtil.getTargetConnections((View)getModel());
d83 4
@


1.9.2.1
log
@[149689] gmf_R1_0_maintenace mmostafa 060725  Canonical edipolicy does not refresh connectors if one compartment becomes invisible.
@
text
@d63 1
a63 1
        return ViewUtil.getSourceConnectionsConnectingVisibleViews((View)getModel());
d67 1
a67 1
        return ViewUtil.getTargetConnectionsConnectingVisibleViews((View)getModel());
@


1.9.2.2
log
@Bugzilla#155116 gmf_R1_0_maintenance cmahoney 060825 Note attachment can be reoriented between two LEDs
@
text
@a35 1
import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.NoteAttachmentReorientEditPolicy;
a81 4

        // Disable note attachment reorient between two shapes where neither is a note.
        installEditPolicy("NoteAttachmentReorient", //$NON-NLS-1$
            new NoteAttachmentReorientEditPolicy());
@


1.9.2.3
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.8
log
@bugzilla 132194 gmf-head sshaw 060321 Cannot slide anchor when using SlidableAnchor
@
text
@d107 2
a108 1
		final ConnectionNodeEditPart connection = (ConnectionNodeEditPart) connEditPart;
d153 3
a155 2
		final ConnectionNodeEditPart connection = (ConnectionNodeEditPart) connEditPart;

@


1.7
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d117 2
a118 1
					setResult(""); //$NON-NLS-1$
d163 2
a164 1
					setResult(""); //$NON-NLS-1$
@


1.6
log
@bugzilla 120017 gmf-head sshaw 051208 Redundant classes for managing connection retargetting
@
text
@d20 1
d26 2
a27 1
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
d33 3
a35 1
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
d108 20
a127 9
		String t = (String) MEditingDomainGetter.getMEditingDomain((View)getModel()).runAsRead(new MRunnable() {

			public Object run() {
				Anchor a = connection.getEdge().getSourceAnchor();
				if (a instanceof IdentityAnchor)
					return ((IdentityAnchor) a).getId();
				return ""; //$NON-NLS-1$
			}
		});
a151 1
		String t = (String) MEditingDomainGetter.getMEditingDomain((View)getModel()).runAsRead(new MRunnable() {
d153 21
a173 7
			public Object run() {
				Anchor a = connection.getEdge().getTargetAnchor();
				if (a instanceof IdentityAnchor)
					return ((IdentityAnchor) a).getId();
				return ""; //$NON-NLS-1$
			}
		});
@


1.5
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a121 2
			((ReconnectRequest) request).getConnectionEditPart().getFigure()
				.translateToAbsolute(pt);
a154 2
			((ReconnectRequest) request).getConnectionEditPart().getFigure()
				.translateToAbsolute(pt);
a189 20
	
	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.EditPart#activate()
	 */
	public void activate() {
		super.activate();
		//
		// bad hack - check if really required by sequence diagram plugin.
		//	if (getParent() instanceof GraphicalEditPart &&
		// ((GraphicalEditPart)getParent()).isCanonical()){
		//		EditPolicy editPolicy =
		// getParent().getEditPolicy(EditPolicyRoles.CANONICAL_ROLE);
		//		if (editPolicy != null){
		//			editPolicy.deactivate();
		//			editPolicy.activate();
		//		}
		//	}
	}
@


1.4
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConnectorHandleEditPolicy;
d76 2
a77 2
			installEditPolicy(EditPolicyRoles.CONNECTOR_HANDLES_ROLE,
				new ConnectorHandleEditPolicy());
d103 1
a103 1
		final ConnectionNodeEditPart connector = (ConnectionNodeEditPart) connEditPart;
d107 1
a107 1
				Anchor a = connector.getConnectorView().getSourceAnchor();
d138 1
a138 1
		final ConnectionNodeEditPart connector = (ConnectionNodeEditPart) connEditPart;
d142 1
a142 1
				Anchor a = connector.getConnectorView().getTargetAnchor();
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a13 1
import java.beans.PropertyChangeEvent;
d19 1
a24 1

d26 1
a30 2
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
d35 1
d185 3
a187 2
	protected void handlePropertyChangeEvent(PropertyChangeEvent evt) {
		if (Properties.ID_SOURCECONNECTIONS.equals(evt.getPropertyName()))
d189 1
a189 1
		else if (Properties.ID_TARGETCONNECTIONS.equals(evt.getPropertyName()))
d192 1
a192 1
			super.handlePropertyChangeEvent(evt);
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d33 3
a35 3
import com.ibm.xtools.notation.Anchor;
import com.ibm.xtools.notation.IdentityAnchor;
import com.ibm.xtools.notation.View;
@

