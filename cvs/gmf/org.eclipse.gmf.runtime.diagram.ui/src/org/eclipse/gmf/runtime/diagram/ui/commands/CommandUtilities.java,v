head	1.3;
access;
symbols
	v20081023-2107:1.3
	v20081022-1925:1.3
	v20081022-1005:1.3
	v20081020-0700:1.3
	v20080917-1925:1.3
	v20080916-2008:1.3
	v20080911-1728:1.3
	v20080911-1506:1.3
	v20080910-1520:1.3
	v20080910-1510:1.3
	v20080903-1520:1.3
	v20080903-1510:1.3
	v20080813-1510:1.3
	v20080811-1546:1.3
	v20080731-1520:1.3
	v20080725-1738:1.3
	v20080723-2246:1.3
	v20080723-2232:1.3
	v20080723-1700:1.3
	v20080722-1827:1.3
	v20080718-1700:1.3
	v20080718-1731:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.6
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080603-1553:1.3
	v20080527-1255:1.3
	v20080527-1151:1.3
	v20080516-1748:1.3
	v20080516-1143:1.3
	v20080512-1200:1.3
	v20080503-1740:1.3
	v20080501-2127:1.3
	v20080501-1739:1.3
	m20080429-1543:1.3
	v20080425-1959:1.3
	v20080417-1610:1.3
	v20080407-2250:1.3
	v20080407-0930:1.3
	v20080404-1111:1.3
	v20080328-1605:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080201-2010:1.3
	v20080201-0201:1.3
	v20080118-1129:1.3
	v20080114-2222:1.3
	v20080114-1111:1.3
	v20080107-1111:1.3
	v20071222-1111:1.3
	v20071214-1111:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071112-0000:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070518-1300:1.3
	bugzilla111892_group_support:1.3.0.2
	Root_bugzilla111892_group_support:1.3
	v20070504-1000:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070202-0200:1.1.2.2
	v20070119-1200:1.1.2.2
	v20070111-0800:1.1.2.2
	v20070105-1200:1.1.2.2
	v20070103-0300:1.3
	M4_20:1.3
	v20061218-1500:1.1.2.2
	v20061218-1200:1.3
	v20061214-0000:1.3
	M3_20:1.2
	v20061117-0800:1.2
	v20061027-1200:1.1.2.1
	v20061013-1330:1.2
	v20061012-1100:1.1.2.1
	v20060925-1700:1.1.2.1
	v20060919-0800:1.1.2.1
	v20060907-1100:1.1.2.1
	v20060831-1500:1.1.2.1
	R1_0_maintenance:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.11.22.13.13.37;	author ldamus;	state Exp;
branches;
next	1.2;
commitid	564a45644d004567;

1.2
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.25.19.21.34;	author cmahoney;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.08.25.19.21.34;	author cmahoney;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.11.22.13.12.19;	author ldamus;	state Exp;
branches;
next	;
commitid	5ce545644cb34567;


desc
@@


1.3
log
@[161668] gmf_head ldamus 061122 File validation not performed when using UnspecifiedTypeCreationTool
@
text
@/******************************************************************************
 * Copyright (c) 2006, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.commands;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashSet;

import org.eclipse.core.commands.operations.IUndoableOperation;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gmf.runtime.common.core.command.ICommand;

/**
 * Class containing commands utility methods.
 * 
 * @@author aboyko
 *
 */
public class CommandUtilities {
	
	/**
	 * This utility function determines whether the command is redoable.
	 * Since GEF commands API doesn't support for canRedo method, this
	 * utility will help to travel through the contents of GEF wrapper
	 * commands and determine redoability of the GEF command based on
	 * the redoability of the commands it contains.
	 * 
	 * @@param command The command to be examined
	 * @@return <code>true</code> if the passed command is redoable
	 */
	public static boolean canRedo(Command command)
	{
		if (command == null)
			return false;
		
		if (command instanceof IUndoableOperation)
		{
			return ((IUndoableOperation) command).canRedo();
		}
		else if (command instanceof CompoundCommand)
		{
			for ( Iterator iter = ((CompoundCommand)command).getCommands().iterator(); iter.hasNext(); )
			{
				try
				{
					if (!canRedo((Command)iter.next()))
						return false;
				}
				catch (ClassCastException e)
				{
					return false;
				}
			}
			return true;
		}
		else if (command instanceof ICommandProxy)
		{
			return ((ICommandProxy)command).getICommand().canRedo();
		}
		return command.canUndo();
	}
	
	/**
	 * Determines the files affected by <code>command</code>. Since GEF
	 * command API has no support for #getAffectedFiles, this utility will
	 * traverse the contents of GEF wrapper commands and determine the files
	 * affected by the <code>ICommands</code> it contains.
	 * 
	 * @@param command
	 *            the command
	 * @@return the affected files
	 */
	public static Collection getAffectedFiles(Command command)
	{
		if (command == null)
			return Collections.EMPTY_LIST;
		
		if (command instanceof ICommand) {
			return ((ICommand) command).getAffectedFiles();
			
		} else if (command instanceof ICommandProxy) {
			return ((ICommandProxy)command).getICommand().getAffectedFiles();
			
		} else if (command instanceof CompoundCommand) {
			LinkedHashSet result = new LinkedHashSet();
			
			for (Iterator iter = ((CompoundCommand)command).getCommands().iterator(); iter.hasNext();) {
				result.addAll(getAffectedFiles((Command) iter.next()));
			}
			return result;
		}
		return Collections.EMPTY_LIST;
	}

}
@


1.2
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d14 2
d17 1
d22 1
d73 32
@


1.1
log
@file CommandUtilities.java was initially added on branch R1_0_maintenance.
@
text
@d1 70
@


1.1.2.1
log
@Bugzilla#150391 gmf_R1_0_maintenance cmahoney 060825 checking canRedo() for wrapped GEF commands
Contributed by:  Alex Boyko
@
text
@a0 70
/******************************************************************************
 * Copyright (c) 2006, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.commands;

import java.util.Iterator;

import org.eclipse.core.commands.operations.IUndoableOperation;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;

/**
 * Class containing commands utility methods.
 * 
 * @@author aboyko
 *
 */
public class CommandUtilities {
	
	/**
	 * This utility function determines whether the command is redoable.
	 * Since GEF commands API doesn't support for canRedo method, this
	 * utility will help to travel through the contents of GEF wrapper
	 * commands and determine redoability of the GEF command based on
	 * the redoability of the commands it contains.
	 * 
	 * @@param command The command to be examined
	 * @@return <code>true</code> if the passed command is redoable
	 */
	public static boolean canRedo(Command command)
	{
		if (command == null)
			return false;
		
		if (command instanceof IUndoableOperation)
		{
			return ((IUndoableOperation) command).canRedo();
		}
		else if (command instanceof CompoundCommand)
		{
			for ( Iterator iter = ((CompoundCommand)command).getCommands().iterator(); iter.hasNext(); )
			{
				try
				{
					if (!canRedo((Command)iter.next()))
						return false;
				}
				catch (ClassCastException e)
				{
					return false;
				}
			}
			return true;
		}
		else if (command instanceof ICommandProxy)
		{
			return ((ICommandProxy)command).getICommand().canRedo();
		}
		return command.canUndo();
	}

}
@


1.1.2.2
log
@[161668] gmf_R1_0_maintenance ldamus 061122 File validation not performed when using UnspecifiedTypeCreationTool
@
text
@a13 2
import java.util.Collection;
import java.util.Collections;
a14 1
import java.util.LinkedHashSet;
a18 1
import org.eclipse.gmf.runtime.common.core.command.ICommand;
a68 32
	
	/**
	 * Determines the files affected by <code>command</code>. Since GEF
	 * command API has no support for #getAffectedFiles, this utility will
	 * traverse the contents of GEF wrapper commands and determine the files
	 * affected by the <code>ICommands</code> it contains.
	 * 
	 * @@param command
	 *            the command
	 * @@return the affected files
	 */
	public static Collection getAffectedFiles(Command command)
	{
		if (command == null)
			return Collections.EMPTY_LIST;
		
		if (command instanceof ICommand) {
			return ((ICommand) command).getAffectedFiles();
			
		} else if (command instanceof ICommandProxy) {
			return ((ICommandProxy)command).getICommand().getAffectedFiles();
			
		} else if (command instanceof CompoundCommand) {
			LinkedHashSet result = new LinkedHashSet();
			
			for (Iterator iter = ((CompoundCommand)command).getCommands().iterator(); iter.hasNext();) {
				result.addAll(getAffectedFiles((Command) iter.next()));
			}
			return result;
		}
		return Collections.EMPTY_LIST;
	}
@


