head	1.12;
access;
symbols
	v20081022-1925:1.12
	v20080917-1925:1.12
	v20080911-1728:1.12
	v20080910-1520:1.12
	v20080903-1520:1.12
	v20080731-1520:1.12
	v20080723-2246:1.12
	v20060907-1100:1.11.2.7
	M1_20:1.11
	v20060831-1500:1.11.2.6
	v20060824-1600:1.11.2.5
	v20060817-1500:1.11.2.5
	v20060810-1700:1.11.2.5
	v20060803-1200:1.11.2.5
	v20060728-0500:1.11.2.2
	v20060721-1130:1.11.2.2
	v20060713-1700:1.11.2.2
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	v20060627-1200:1.11
	v20060616-1400:1.11
	v20060616-1200:1.11
	v20060609-1400:1.11
	v20060531-1730:1.11
	v20060530-1930:1.11
	v20060526-1200:1.11
	v20060519-0800:1.11
	v20060512-1000:1.11
	I20060512-1000:1.11
	I20060505-1400:1.11
	I20060428-1300:1.11
	I20060424-0500:1.11
	I20060424-0300:1.11
	M6_10:1.11
	I20060407-1200:1.11
	I20060331-1000:1.11
	I20060324-0300:1.11
	I20060317-1300:1.10
	I20060317-1200:1.10
	I20060316-1300:1.10
	I20060309-1300:1.10
	M5_10:1.10
	S20060303-1600:1.10
	I20060227-1730:1.9
	I20060216-1945:1.9
	I20060210-1715:1.9
	I20060209-1815:1.9
	I20060203-0830:1.9
	I20060202-1415:1.9
	I20060129-1145:1.9
	I20060127-0900:1.9
	I20060120-1530:1.9
	I20060113-1700:1.9
	M4_10:1.9
	I20060107-1100:1.9
	I20060105-1630:1.9
	I20051230-1230:1.9
	I20051223-1100:1.9
	I20051217-0925:1.9
	I20051208-2000:1.9
	I20051201-1800:1.9
	I20051124-2000:1.8
	M3_10:1.7
	I20051118-1245:1.7
	I20051111-1800:1.7
	I20051106-0900:1.7
	v20051030:1.6;
locks; strict;
comment	@# @;


1.12
date	2006.10.03.15.39.02;	author ahunter;	state dead;
branches;
next	1.11;

1.11
date	2006.03.23.21.30.56;	author ldamus;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2006.02.28.02.31.21;	author cmahoney;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.25.21.27.24;	author sshaw;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.23.18.02.03;	author sshaw;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.02.23.30.17;	author sshaw;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.15.14.59.19;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.12.21.29.08;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.15.48.52;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.52;	author sshaw;	state Exp;
branches;
next	;

1.11.2.1
date	2006.07.12.16.33.56;	author ahunter;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2006.07.13.15.10.10;	author mmostafa;	state Exp;
branches;
next	1.11.2.3;

1.11.2.3
date	2006.08.01.18.18.00;	author mmostafa;	state Exp;
branches;
next	1.11.2.4;

1.11.2.4
date	2006.08.01.19.10.24;	author mmostafa;	state Exp;
branches;
next	1.11.2.5;

1.11.2.5
date	2006.08.02.13.38.48;	author mmostafa;	state Exp;
branches;
next	1.11.2.6;

1.11.2.6
date	2006.08.25.19.44.30;	author mmostafa;	state Exp;
branches;
next	1.11.2.7;

1.11.2.7
date	2006.09.07.14.02.22;	author mmostafa;	state Exp;
branches;
next	1.11.2.8;

1.11.2.8
date	2006.09.08.18.42.17;	author mmostafa;	state Exp;
branches;
next	1.11.2.9;

1.11.2.9
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	1.11.2.10;

1.11.2.10
date	2006.09.14.19.50.46;	author mmostafa;	state dead;
branches;
next	;


desc
@@


1.12
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.editparts;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.domain.IEditingDomainProvider;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.editparts.AbstractTreeEditPart;
import org.eclipse.gmf.runtime.common.ui.services.action.filter.ActionFilterService;
import org.eclipse.gmf.runtime.common.ui.services.icon.IconOptions;
import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserService;
import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationListener;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ComponentEditPolicy;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.IActionFilter;
import org.eclipse.ui.PlatformUI;

/**
 * @@author melaasar, mmostafa
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.ui.*
 */
public class TreeEditPart
	extends AbstractTreeEditPart
	implements NotificationListener, IEditingDomainProvider {

	/** the element parser */
	private IParser parser;

	/** the element parser */
	private IAdaptable referenceAdapter;
	
    /**
     * Cache the editing domain after it is retrieved.
     */
    private TransactionalEditingDomain editingDomain;

	/**
	 * @@param model
	 */
	public TreeEditPart(Object model) {
		super(model);
		
		EObject reference = ((View)model).getElement();
		if (reference == null) {
		
			this.referenceAdapter = new EObjectAdapter((EObject)model);
		} else {
			this.referenceAdapter =
				new EObjectAdapter(reference);
		}
	}

	/**
	 * @@see org.eclipse.gef.EditPart#activate()
	 */
	public void activate() {
		super.activate();

		getDiagramEventBroker().addNotificationListener((View)getModel(),this);
		getDiagramEventBroker().addNotificationListener(getSemanticElement(),this);
	}

	/**
	 * @@see org.eclipse.gef.EditPart#deactivate()
	 */
	public void deactivate() {
		getDiagramEventBroker().removeNotificationListener((View)getModel(),this);
		getDiagramEventBroker().removeNotificationListener(getSemanticElement(),this);
		super.deactivate();
	}

	/**
	 * @@see org.eclipse.gef.editparts.AbstractEditPart#createEditPolicies()
	 */
	protected void createEditPolicies() {
		installEditPolicy(EditPolicy.COMPONENT_ROLE, new ComponentEditPolicy());
	}

	/** gets the model as a <code>View</code>
	 * @@return View
	 */
	protected View getNotationView() {
		if (getModel() instanceof View)
			return (View)getModel();
		return null;
	}

	/** Return the editpart's underlying semantic element. */
	protected EObject getSemanticElement() {
		return ViewUtil.resolveSemanticElement((View)getModel());
	}

	/**
	 * @@see org.eclipse.gef.editparts.AbstractTreeEditPart#getImage()
	 */
	protected Image getImage() {
		if (referenceAdapter == null){
			return null;
		}
		IconOptions options = new IconOptions();
		options.set(IconOptions.GET_STEREOTYPE_IMAGE_FOR_ELEMENT);
		return IconService.getInstance().getIcon(referenceAdapter, options.intValue());
	}

	/**
	 * @@see org.eclipse.gef.editparts.AbstractTreeEditPart#getText()
	 */
	protected String getText() {
		if (getParser() != null)
			return getParser().getPrintString(referenceAdapter,
				ParserOptions.NONE.intValue());
		EObject eObject = ((View) getModel()).getElement();
		if (eObject == null) {
			return ""; //$NON-NLS-1$
		}
		String name = EMFCoreUtil.getName(eObject);
		return name == null ? "" : name; //$NON-NLS-1$
	}

	/**
	 * Method getParser.
	 * @@return IParser
	 */
	private IParser getParser() {
		if (parser == null) {
			if (referenceAdapter != null && referenceAdapter.getAdapter(EObject.class) != null)
				parser = ParserService.getInstance().getParser(referenceAdapter);
		}
		return parser;
	}

	/**
	 * Handles the passed property changed event only if the editpart's view is not deleted
	 * @@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
	 */
	public final void notifyChanged(Notification event) {
		final Notification eventToHandle = event;
        PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() { 
            public void run() {
                // Receiving an event while a view is deleted could only happen during "undo" of view creation,
                // However, event handlers should be robust by using the event's value and not trying to read 
                // the value from the model
                if ((((View)getModel()).eResource() != null))
                    handleNotificationEvent(eventToHandle);
            }
        });

	}

	/**
	 * Handles the supplied notification event. 
	 * @@param event
	 */
	protected void handleNotificationEvent( Notification notification ) {
		if (NotationPackage.eINSTANCE.getView_Element()==notification.getFeature()) {
			reactivateSemanticElement();
		} else{
			refreshVisuals();
		}
	}
	
	/**
	 * deactivates, activates then refreshes the editpart
	 */
	protected void reactivateSemanticElement() {
		deactivate();
		activate();
		refresh();
	}

	/**
	 * @@see org.eclipse.core.runtime.IAdaptable#getAdapter(Class)
	 */
	public Object getAdapter(Class key) {
		// Adapt to IActionFilter
		if (key == IActionFilter.class) {
			return ActionFilterService.getInstance();
		}
		
		Object model = getModel();
		// Adapt to IView
		if (key.isInstance(model)) {
			return model;
		}

		if (model != null && model instanceof View) {
			// Adapt to semantic element
			EObject semanticObject = ViewUtil.resolveSemanticElement((View)model);
			if (key.isInstance(semanticObject)) {
				return semanticObject;
			}
		}

		Object adapter = Platform.getAdapterManager().getAdapter(this, key);
		if (adapter != null)
			return adapter;

		return super.getAdapter(key);
	}
	
    /**
     * Derives my editing domain from my diagram element. Subclasses may
     * override.
     */
    public EditingDomain getEditingDomain() {
        if (editingDomain == null) {
            editingDomain = TransactionUtil.getEditingDomain(getModel());
        }
        return editingDomain;
    }
    
    /**
     * Gets the diagram event broker from the editing domain.
     * 
     * @@return the diagram event broker
     */
    private DiagramEventBroker getDiagramEventBroker() {
        EditingDomain theEditingDomain = getEditingDomain();
        if (theEditingDomain instanceof TransactionalEditingDomain) {
            return DiagramEventBroker
                .getInstance((TransactionalEditingDomain) theEditingDomain);
        }
        return null;
    }
}
@


1.11
log
@[133066] gmf_head ldamus 060323 TreeEditPart#notifyChanged participates in deadlock
@
text
@@


1.11.2.1
log
@[150030] gmf_R1_0_maintenance mgoyal 060712 Outline view (TreeEditPart) is causing an infinite loop when creating views (long running operation)
@
text
@d161 11
a171 5
        // Receiving an event while a view is deleted could only happen during "undo" of view creation,
        // However, event handlers should be robust by using the event's value and not trying to read 
        // the value from the model
        if ((((View)getModel()).eResource() != null))
            handleNotificationEvent(event);
@


1.11.2.2
log
@[110316] gmf_R1_0_maintenance mmostafa  060713 Compiler warning count should be 0 - runtime diagram layer components
@
text
@d40 1
@


1.11.2.3
log
@[152392] gmf_R1_0_maintenance yLulu 060801 Performance of DiagramEditPart and ConnectionEditPart could be enhanced
@
text
@d15 1
d172 1
a172 1
		if (NotationPackage.Literals.VIEW__ELEMENT==notification.getFeature()) {
d210 5
@


1.11.2.4
log
@[152392] gmf_R1_0_maintenance Reverting  yLulu 060801 Performance of DiagramEditPart and ConnectionEditPart could be enhanced
@
text
@a14 1
import org.eclipse.core.runtime.Platform;
d45 2
a46 2
    extends AbstractTreeEditPart
    implements NotificationListener, IEditingDomainProvider {
d48 2
a49 2
    /** the element parser */
    private IParser parser;
d51 3
a53 3
    /** the element parser */
    private IAdaptable referenceAdapter;
    
d59 100
a158 100
    /**
     * @@param model
     */
    public TreeEditPart(Object model) {
        super(model);
        
        EObject reference = ((View)model).getElement();
        if (reference == null) {
        
            this.referenceAdapter = new EObjectAdapter((EObject)model);
        } else {
            this.referenceAdapter =
                new EObjectAdapter(reference);
        }
    }

    /**
     * @@see org.eclipse.gef.EditPart#activate()
     */
    public void activate() {
        super.activate();

        getDiagramEventBroker().addNotificationListener((View)getModel(),this);
        getDiagramEventBroker().addNotificationListener(getSemanticElement(),this);
    }

    /**
     * @@see org.eclipse.gef.EditPart#deactivate()
     */
    public void deactivate() {
        getDiagramEventBroker().removeNotificationListener((View)getModel(),this);
        getDiagramEventBroker().removeNotificationListener(getSemanticElement(),this);
        super.deactivate();
    }

    /**
     * @@see org.eclipse.gef.editparts.AbstractEditPart#createEditPolicies()
     */
    protected void createEditPolicies() {
        installEditPolicy(EditPolicy.COMPONENT_ROLE, new ComponentEditPolicy());
    }

    /** gets the model as a <code>View</code>
     * @@return View
     */
    protected View getNotationView() {
        if (getModel() instanceof View)
            return (View)getModel();
        return null;
    }

    /** Return the editpart's underlying semantic element. */
    protected EObject getSemanticElement() {
        return ViewUtil.resolveSemanticElement((View)getModel());
    }

    /**
     * @@see org.eclipse.gef.editparts.AbstractTreeEditPart#getImage()
     */
    protected Image getImage() {
        if (referenceAdapter == null){
            return null;
        }
        IconOptions options = new IconOptions();
        options.set(IconOptions.GET_STEREOTYPE_IMAGE_FOR_ELEMENT);
        return IconService.getInstance().getIcon(referenceAdapter, options.intValue());
    }

    /**
     * @@see org.eclipse.gef.editparts.AbstractTreeEditPart#getText()
     */
    protected String getText() {
        if (getParser() != null)
            return getParser().getPrintString(referenceAdapter,
                ParserOptions.NONE.intValue());
        EObject eObject = ((View) getModel()).getElement();
        if (eObject == null) {
            return ""; //$NON-NLS-1$
        }
        String name = EMFCoreUtil.getName(eObject);
        return name == null ? "" : name; //$NON-NLS-1$
    }

    /**
     * Method getParser.
     * @@return IParser
     */
    private IParser getParser() {
        if (parser == null) {
            if (referenceAdapter != null && referenceAdapter.getAdapter(EObject.class) != null)
                parser = ParserService.getInstance().getParser(referenceAdapter);
        }
        return parser;
    }

    /**
     * Handles the passed property changed event only if the editpart's view is not deleted
     * @@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
     */
    public final void notifyChanged(Notification event) {
d164 1
a164 1
    }
d166 46
a211 51
    /**
     * Handles the supplied notification event. 
     * @@param event
     */
    protected void handleNotificationEvent( Notification notification ) {
        if (NotationPackage.eINSTANCE.getView_Element()==notification.getFeature()) {
            reactivateSemanticElement();
        } else{
            refreshVisuals();
        }
    }
    
    /**
     * deactivates, activates then refreshes the editpart
     */
    protected void reactivateSemanticElement() {
        deactivate();
        activate();
        refresh();
    }

    /**
     * @@see org.eclipse.core.runtime.IAdaptable#getAdapter(Class)
     */
    public Object getAdapter(Class key) {
        // Adapt to IActionFilter
        if (key == IActionFilter.class) {
            return ActionFilterService.getInstance();
        }
        
        Object model = getModel();
        // Adapt to IView
        if (key.isInstance(model)) {
            return model;
        }

        if (model != null && model instanceof View) {
            // Adapt to semantic element
            EObject semanticObject = ViewUtil.resolveSemanticElement((View)model);
            if (key.isInstance(semanticObject)) {
                return semanticObject;
            }
        }

        Object adapter = Platform.getAdapterManager().getAdapter(this, key);
        if (adapter != null)
            return adapter;

        return super.getAdapter(key);
    }
    
@


1.11.2.5
log
@[152392] gmf_R1_0_maintenance Reverting  yLulu 060801 Performance of DiagramEditPart and ConnectionEditPart could be enhanced
@
text
@d15 1
d172 1
a172 1
        if (NotationPackage.Literals.VIEW__ELEMENT==notification.getFeature()) {
d210 5
@


1.11.2.6
log
@[155260] gmf_R1_0_maintenance mmostafa  060825  TreeEditPart calls refresh visuals too many times
@
text
@a35 1
import org.eclipse.gmf.runtime.notation.Style;
d53 1
a53 1

a170 1
        Object notifier = notification.getNotifier();
d173 1
a173 2
        } else if (notification.getNotifier() == getSemanticElement() ||
                   notifier instanceof Style){
@


1.11.2.7
log
@[156434] gmf_R1_0_maintenace mmostafa 060906  TreeEditPart.getAdapter always returns the view of model element and not the semantic element
@
text
@d199 4
a202 6
        if (View.class.isAssignableFrom(key)) {
            Object _model = getModel();
            if (key.isInstance(_model))
                return _model;
            else
                return null;
d204 2
a205 5
        
        Object model = getModel();
        
        if (model != null && model instanceof View &&
            EObject.class.isAssignableFrom(key)) {
d207 2
a208 2
            EObject semanticObject = ((View)model).getElement();
            if (semanticObject!= null && !semanticObject.eIsProxy() && key.isInstance(semanticObject)){
@


1.11.2.8
log
@[156705] gmf_R1_0_maintenace mmostafa 060908  TreeEditPart might cause the semantic model to load in response to unload events
@
text
@a53 2
    
    private EObject[] objectListenningTo = new EObject[2];
a79 2
        if (isActive())
            return;
d81 3
a83 6
        View view = (View)getModel();
        EObject semanticElement = getSemanticElement();
        getDiagramEventBroker().addNotificationListener(view,this);
        getDiagramEventBroker().addNotificationListener(semanticElement,this);
        objectListenningTo[0] = view ;
        objectListenningTo[1] = semanticElement;
d90 2
a91 6
        if (!isActive())
            return;
        for (int index = 0; index < objectListenningTo.length; index++) {
            getDiagramEventBroker().removeNotificationListener( objectListenningTo[index],this);
            objectListenningTo[index] = null;
        }
@


1.11.2.9
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.11.2.10
log
@[153305] draw2d_maintenace aboyko 060914  compartment items not shown in outline view (tree)
@
text
@@


1.10
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d162 10
a171 14
		PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
			/*
			 * (non-Javadoc)
			 * 
			 * @@see java.lang.Runnable#run()
			 */
			public void run() {
				// Receiving an event while a view is deleted could only happen during "undo" of view creation,
				// However, event handlers should be robust by using the event's value and not trying to read 
				// the value from the model
				if ((((View)getModel()).eResource() != null))
					handleNotificationEvent(eventToHandle);
			}
		});
@


1.9
log
@bugzilla 117532 gmf-head sshaw 051123 TreeEditPart (maybe others) may cause SWT InvalidThreadAccess
@
text
@d18 4
d34 1
a35 1
import org.eclipse.gmf.runtime.emf.core.util.ProxyUtil;
d48 1
a48 1
	implements NotificationListener {
d56 5
d83 2
a84 2
		DiagramEventBroker.getInstance().addNotificationListener((View)getModel(),this);
		DiagramEventBroker.getInstance().addNotificationListener(getSemanticElement(),this);
d91 2
a92 2
		DiagramEventBroker.getInstance().removeNotificationListener((View)getModel(),this);
		DiagramEventBroker.getInstance().removeNotificationListener(getSemanticElement(),this);
d134 1
a134 2
			return getParser().getPrintString(
				referenceAdapter,
d136 5
a140 1
		String name = ProxyUtil.getProxyName(((View)getModel()).getElement());
d228 25
@


1.8
log
@bugzilla 117532 gmf-head sshaw 051123 TreeEditPart (maybe others) may cause SWT InvalidThreadAccess
@
text
@d26 1
a27 1
import org.eclipse.gmf.runtime.diagram.core.listener.DiagramEventBroker;
a34 1
import org.eclipse.swt.widgets.Display;
d36 1
d150 1
a150 1
		Display.getDefault().syncExec(new Runnable() {
@


1.7
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d35 1
d149 15
a163 5
		// Receiving an event while a view is deleted could only happen during "undo" of view creation,
		// However, event handlers should be robust by using the event's value and not trying to read 
		// the value from the model
		if ((((View)getModel()).eResource() != null))
			handleNotificationEvent(event);
@


1.6
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.core.listener.PresentationListener;
d73 2
a74 2
		PresentationListener.getInstance().addNotificationListener((View)getModel(),this);
		PresentationListener.getInstance().addNotificationListener(getSemanticElement(),this);
d81 2
a82 2
		PresentationListener.getInstance().removeNotificationListener((View)getModel(),this);
		PresentationListener.getInstance().removeNotificationListener(getSemanticElement(),this);
@


1.5
log
@Bugzilla 109618: gmf_head mmostafa 050915 :  Remove the deprecated view facade interfaces and classes
@
text
@a13 3
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

d16 1
d26 1
a26 1
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;
a29 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
d32 1
d38 1
a38 1
 * @@author melaasar
d43 1
a43 1
	implements PropertyChangeListener {
d73 2
a74 2
		PresentationListener.getInstance().addPropertyChangeListener((View)getModel(),this);
		PresentationListener.getInstance().addPropertyChangeListener(getSemanticElement(),this);
d81 2
a82 2
		PresentationListener.getInstance().removePropertyChangeListener((View)getModel(),this);
		PresentationListener.getInstance().removePropertyChangeListener(getSemanticElement(),this);
d147 1
a147 1
	public final void propertyChange(PropertyChangeEvent event) {
d152 1
a152 1
			handlePropertyChangeEvent(event);
d156 2
a157 2
	 * Handles the property changed event
	 * @@param event the property changed event
d159 2
a160 2
	protected void handlePropertyChangeEvent(PropertyChangeEvent event) {
		if (event.getPropertyName().equals(Properties.ID_SEMANTICREF)) {
d162 2
a163 3
		} 
		else if (event instanceof NotificationEvent) {
			handleNotificationEvent((NotificationEvent) event);
a167 8
	 * Handles the supplied notification event. 
	 * @@param event
	 */
	protected void handleNotificationEvent( NotificationEvent event ) { 
		refreshVisuals();
	}
	
	/**
@


1.4
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a27 1
import org.eclipse.gmf.runtime.diagram.core.internal.view.IView;
a31 1
import org.eclipse.gmf.runtime.diagram.ui.internal.util.IncarnationUtil;
a52 2
	private IView view = null;

d95 2
a96 2
	/** gets the model as an <code>IView</code>
	 * @@return IView
d98 4
a101 4
	protected IView getView() {
		if (view==null)
			view = IncarnationUtil.incarnateView((View)getModel()); 
		return view;
@


1.3
log
@Bugzilla109092 : rmp_head mmostafa 050912 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@a19 3
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.IActionFilter;

d29 1
a29 1
import org.eclipse.gmf.runtime.diagram.core.listener.PropertyChangeNotifier;
a32 1
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
d36 2
a51 6

	/** the container view's notifier */
	private PropertyChangeNotifier viewNotifier = null;

	/** the container view's notifier */
	private PropertyChangeNotifier semanticNotifier = null;
d77 2
a78 7
		viewNotifier = ViewUtil.getPropertyChangeNotifier((View)getModel());
		if (viewNotifier != null)
			viewNotifier.addPropertyChangeListener(this);

		semanticNotifier = PresentationListener.getNotifier(getSemanticElement());
		if (semanticNotifier != null)
			semanticNotifier.addPropertyChangeListener(this);
d85 2
a86 8
		if (semanticNotifier != null) {
			semanticNotifier.removePropertyChangeListener(this);
			semanticNotifier = null;
		}

		if (viewNotifier != null)
			viewNotifier.removePropertyChangeListener(this);

@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d39 1
a39 1
import com.ibm.xtools.notation.View;
@

