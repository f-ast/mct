head	1.4;
access;
symbols
	v20081023-2107:1.4
	v20081022-1925:1.4
	v20081022-1005:1.4
	v20081020-0700:1.4
	v20080917-1925:1.4
	v20080916-2008:1.4
	v20080911-1728:1.4
	v20080911-1506:1.4
	v20080910-1520:1.4
	v20080910-1510:1.4
	v20080903-1520:1.4
	v20080903-1510:1.4
	v20080813-1510:1.4
	v20080811-1546:1.4
	v20080731-1520:1.4
	v20080725-1738:1.4
	v20080723-2246:1.4
	v20080723-2232:1.4
	v20080723-1700:1.4
	v20080722-1827:1.4
	v20080718-1700:1.4
	v20080718-1731:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.6
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080610-1132:1.4
	v20080603-1553:1.4
	v20080527-1255:1.4
	v20080527-1151:1.4
	v20080516-1748:1.4
	v20080516-1143:1.4
	v20080512-1200:1.4
	v20080503-1740:1.4
	v20080501-2127:1.4
	v20080501-1739:1.4
	m20080429-1543:1.4
	v20080425-1959:1.4
	v20080417-1610:1.4
	v20080407-2250:1.4
	v20080407-0930:1.4
	v20080404-1111:1.4
	v20080328-1605:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20080201-2010:1.4
	v20080201-0201:1.4
	v20080118-1129:1.4
	v20080114-2222:1.4
	v20080114-1111:1.4
	v20080107-1111:1.4
	v20071222-1111:1.4
	v20071214-1111:1.4
	v20071130-1111:1.4
	v20071124-0000:1.4
	v20071112-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070915-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070614-1400:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070518-1300:1.4
	bugzilla111892_group_support:1.4.0.2
	Root_bugzilla111892_group_support:1.4
	v20070504-1000:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070330-1300:1.4
	v20060330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070221-1500:1.4
	v20070208-1800:1.4
	v20070202-0200:1.1.2.3
	v20070119-1200:1.1.2.3
	v20070111-0800:1.1.2.3
	v20070105-1200:1.1.2.3
	v20070103-0300:1.4
	M4_20:1.4
	v20061218-1500:1.1.2.2
	v20061218-1200:1.3
	v20061214-0000:1.3
	M3_20:1.2
	v20061117-0800:1.2
	v20061027-1200:1.1.2.1
	v20061013-1330:1.2
	v20061012-1100:1.1.2.1
	R1_0_maintenance:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2007.01.02.21.57.26;	author ahunter;	state Exp;
branches;
next	1.3;
commitid	43e7459ad5464567;

1.3
date	2006.11.23.21.11.33;	author mmostafa;	state Exp;
branches;
next	1.2;
commitid	291545660e854567;

1.2
date	2006.10.11.20.50.29;	author mmostafa;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.11.20.45.54;	author mmostafa;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.10.11.20.45.54;	author mmostafa;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.11.23.21.10.10;	author mmostafa;	state Exp;
branches;
next	1.1.2.3;
commitid	1e3d45660e324567;

1.1.2.3
date	2007.01.02.21.57.49;	author ahunter;	state Exp;
branches;
next	;
commitid	4858459ad55d4567;


desc
@@


1.4
log
@[161215] gmf_head ahunter 070102 Update copyright to indicate change in 2006
@
text
@/******************************************************************************
 * Copyright (c) 2006, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.figures;

import java.util.Iterator;
import java.util.List;

import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.FigureListener;
import org.eclipse.draw2d.FreeformFigure;
import org.eclipse.draw2d.FreeformLayer;
import org.eclipse.draw2d.FreeformListener;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.geometry.Insets;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.diagram.ui.internal.figures.IExpandableFigure;


/**
 * a Border item aware implementation for the free form layer
 * This layer will make sure that scroll bars and bounds calculations 
 * respect the border items implementation
 * @@author mmostafa
 *
 */
public class BorderItemsAwareFreeFormLayer
    extends FreeformLayer {
    
    private BorderItemAwareFreeFormHelper _helper = new BorderItemAwareFreeFormHelper(this);
    
    Rectangle extendedBounds = null;
    
    /**
     * The helper class used by the border item aware free form layer
     * This helper class will calculate the correct extent of the layer, considering the 
     * border items
     * @@author mmostafa
     *
     */
    public class BorderItemAwareFreeFormHelper implements FreeformListener
    {

        class ChildTracker implements FigureListener {
            public void figureMoved(IFigure source) {
                invalidate();
            }
        }

        private FreeformFigure host;
        private Rectangle freeformExtent;
        private FigureListener figureListener = new ChildTracker();

        public BorderItemAwareFreeFormHelper(FreeformFigure host) {
            this.host = host;
        }
        
        public void reset(){
            freeformExtent = null;
        }

        public Rectangle getFreeformExtent() {
            if (freeformExtent != null)
                return freeformExtent;
            Rectangle r;
            List children = host.getChildren();
            for (int i = 0; i < children.size(); i++) {
                IFigure child = (IFigure)children.get(i);
                if (child instanceof FreeformFigure)
                    r = ((FreeformFigure) child).getFreeformExtent();
                else if (child instanceof IExpandableFigure)
                    r = ((IExpandableFigure) child).getExtendedBounds();
                else
                    r = child.getBounds();
                if (freeformExtent == null)
                    freeformExtent = r.getCopy();
                else
                    freeformExtent.union(r);
            }
            Insets insets = host.getInsets();
            if (freeformExtent == null)
                freeformExtent = new Rectangle(0, 0, insets.getWidth(), insets.getHeight());
            else {
                host.translateToParent(freeformExtent);
                freeformExtent.expand(insets);
            }
            return freeformExtent;
        }

        public void hookChild(IFigure child) {
            invalidate();
            if (child instanceof FreeformFigure)
                ((FreeformFigure)child).addFreeformListener(this);
            else
                child.addFigureListener(figureListener);
        }

        void invalidate() {
            freeformExtent = null;
            host.fireExtentChanged();
            if (host.getParent() != null)
                host.getParent().revalidate();
            else
                host.revalidate();
        }

        public void notifyFreeformExtentChanged() {
            //A childs freeform extent has changed, therefore this extent must be recalculated
            invalidate();
        }

        public void setFreeformBounds(Rectangle bounds) {
            host.setBounds(bounds);
            bounds = bounds.getCopy();
            host.translateFromParent(bounds);
            List children = host.getChildren();
            for (int i = 0; i < children.size(); i++) {
                IFigure child = (IFigure)children.get(i);
                if (child instanceof FreeformFigure)
                    ((FreeformFigure) child).setFreeformBounds(bounds);
            }
        }

        public void unhookChild(IFigure child) {
            invalidate();
            if (child instanceof FreeformFigure)
                ((FreeformFigure)child).removeFreeformListener(this);
            else
                child.removeFigureListener(figureListener);
        }

   }

    
    public Rectangle getBounds() {
        if (extendedBounds==null){
            Iterator  figuresIter = getChildren().iterator();
            Rectangle _bounds = super.getBounds().getCopy();
            while (figuresIter.hasNext()) {
                Figure element = (Figure) figuresIter.next();
                Rectangle rect = null;
                if (element instanceof IExpandableFigure){
                    rect = ((IExpandableFigure)element).getExtendedBounds();
                }else {
                    rect = element.getBounds();
                }
                _bounds.union(rect);
            }
            extendedBounds = _bounds; 
        }
        return extendedBounds;
    }

    public void invalidate() {
        extendedBounds = null;
        super.invalidate();
    }

    public void validate() {
        extendedBounds = null;
        super.validate();
    }
    
    /**
     * @@see IFigure#add(IFigure, Object, int)
     */
    public void add(IFigure child, Object constraint, int index) {
        super.add(child, constraint, index);
        _helper.hookChild(child);
    }
    
    /**
     * @@see FreeformFigure#getFreeformExtent()
     */
    public Rectangle getFreeformExtent() {
        return _helper.getFreeformExtent();
    }
    
    /**
     * @@see IFigure#remove(IFigure)
     */
    public void remove(IFigure child) {
        _helper.unhookChild(child);
        super.remove(child);
    }
    
    /**
     * @@see FreeformFigure#setFreeformBounds(Rectangle)
     */
    public void setFreeformBounds(Rectangle bounds) {
        _helper.setFreeformBounds(bounds);
    }
    
    /**
     * will notify the layer that a border item had been moved; which will result in 
     * invalidating the layer (recalculating the bounds and extent).
     */
    public void borderFigureMoved(){
        _helper.invalidate();
    }
    
}
@


1.3
log
@ [161215]   gmf_head mmostafa 061123 Scrollpanes do not consider space occupied by border items
@
text
@d2 1
a2 1
 * Copyright (c) 2006 IBM Corporation and others.
d10 1
a10 1
 ***/
@


1.2
log
@[160534] gmf_R1_0_maintenace mmostafa 061011  Print/PrintView does not work with bordered items
@
text
@d15 1
d18 2
d21 3
d28 7
d38 2
d42 101
d172 37
@


1.1
log
@file BorderItemsAwareFreeFormLayer.java was initially added on branch R1_0_maintenance.
@
text
@d1 57
@


1.1.2.1
log
@[160534] gmf_head mmostafa 061011  Print/PrintView does not work with bordered items
@
text
@a0 57
/******************************************************************************
 * Copyright (c) 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ***/

package org.eclipse.gmf.runtime.diagram.ui.figures;

import java.util.Iterator;

import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.FreeformLayer;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.diagram.ui.internal.figures.IExpandableFigure;


public class BorderItemsAwareFreeFormLayer
    extends FreeformLayer {
    
    Rectangle extendedBounds = null;
    
    public Rectangle getBounds() {
        if (extendedBounds==null){
            Iterator  figuresIter = getChildren().iterator();
            Rectangle _bounds = super.getBounds().getCopy();
            while (figuresIter.hasNext()) {
                Figure element = (Figure) figuresIter.next();
                Rectangle rect = null;
                if (element instanceof IExpandableFigure){
                    rect = ((IExpandableFigure)element).getExtendedBounds();
                }else {
                    rect = element.getBounds();
                }
                _bounds.union(rect);
            }
            extendedBounds = _bounds; 
        }
        return extendedBounds;
    }

    public void invalidate() {
        extendedBounds = null;
        super.invalidate();
    }

    public void validate() {
        extendedBounds = null;
        super.validate();
    }
    
    
}
@


1.1.2.2
log
@ [161215]   gmf_R1_0_maintenace mmostafa 061123 Scrollpanes do not consider space occupied by border items
@
text
@a14 1
import java.util.List;
a16 2
import org.eclipse.draw2d.FigureListener;
import org.eclipse.draw2d.FreeformFigure;
a17 3
import org.eclipse.draw2d.FreeformListener;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.geometry.Insets;
a21 7
/**
 * a Border item aware implementation for the free form layer
 * This layer will make sure that scroll bars and bounds calculations 
 * respect the border items implementation
 * @@author mmostafa
 *
 */
a24 2
    private BorderItemAwareFreeFormHelper _helper = new BorderItemAwareFreeFormHelper(this);
    
a26 101
    /**
     * The helper class used by the border item aware free form layer
     * This helper class will calculate the correct extent of the layer, considering the 
     * border items
     * @@author mmostafa
     *
     */
    public class BorderItemAwareFreeFormHelper implements FreeformListener
    {

        class ChildTracker implements FigureListener {
            public void figureMoved(IFigure source) {
                invalidate();
            }
        }

        private FreeformFigure host;
        private Rectangle freeformExtent;
        private FigureListener figureListener = new ChildTracker();

        public BorderItemAwareFreeFormHelper(FreeformFigure host) {
            this.host = host;
        }
        
        public void reset(){
            freeformExtent = null;
        }

        public Rectangle getFreeformExtent() {
            if (freeformExtent != null)
                return freeformExtent;
            Rectangle r;
            List children = host.getChildren();
            for (int i = 0; i < children.size(); i++) {
                IFigure child = (IFigure)children.get(i);
                if (child instanceof FreeformFigure)
                    r = ((FreeformFigure) child).getFreeformExtent();
                else if (child instanceof IExpandableFigure)
                    r = ((IExpandableFigure) child).getExtendedBounds();
                else
                    r = child.getBounds();
                if (freeformExtent == null)
                    freeformExtent = r.getCopy();
                else
                    freeformExtent.union(r);
            }
            Insets insets = host.getInsets();
            if (freeformExtent == null)
                freeformExtent = new Rectangle(0, 0, insets.getWidth(), insets.getHeight());
            else {
                host.translateToParent(freeformExtent);
                freeformExtent.expand(insets);
            }
            return freeformExtent;
        }

        public void hookChild(IFigure child) {
            invalidate();
            if (child instanceof FreeformFigure)
                ((FreeformFigure)child).addFreeformListener(this);
            else
                child.addFigureListener(figureListener);
        }

        void invalidate() {
            freeformExtent = null;
            host.fireExtentChanged();
            if (host.getParent() != null)
                host.getParent().revalidate();
            else
                host.revalidate();
        }

        public void notifyFreeformExtentChanged() {
            //A childs freeform extent has changed, therefore this extent must be recalculated
            invalidate();
        }

        public void setFreeformBounds(Rectangle bounds) {
            host.setBounds(bounds);
            bounds = bounds.getCopy();
            host.translateFromParent(bounds);
            List children = host.getChildren();
            for (int i = 0; i < children.size(); i++) {
                IFigure child = (IFigure)children.get(i);
                if (child instanceof FreeformFigure)
                    ((FreeformFigure) child).setFreeformBounds(bounds);
            }
        }

        public void unhookChild(IFigure child) {
            invalidate();
            if (child instanceof FreeformFigure)
                ((FreeformFigure)child).removeFreeformListener(this);
            else
                child.removeFigureListener(figureListener);
        }

   }

    
a55 37
    /**
     * @@see IFigure#add(IFigure, Object, int)
     */
    public void add(IFigure child, Object constraint, int index) {
        super.add(child, constraint, index);
        _helper.hookChild(child);
    }
    
    /**
     * @@see FreeformFigure#getFreeformExtent()
     */
    public Rectangle getFreeformExtent() {
        return _helper.getFreeformExtent();
    }
    
    /**
     * @@see IFigure#remove(IFigure)
     */
    public void remove(IFigure child) {
        _helper.unhookChild(child);
        super.remove(child);
    }
    
    /**
     * @@see FreeformFigure#setFreeformBounds(Rectangle)
     */
    public void setFreeformBounds(Rectangle bounds) {
        _helper.setFreeformBounds(bounds);
    }
    
    /**
     * will notify the layer that a border item had been moved; which will result in 
     * invalidating the layer (recalculating the bounds and extent).
     */
    public void borderFigureMoved(){
        _helper.invalidate();
    }
@


1.1.2.3
log
@[161215] gmf_R1_0_maintenance ahunter 070102 Update copyright to indicate change in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2006 IBM Corporation and others.
d10 1
a10 1
 ****************************************************************************/
@


