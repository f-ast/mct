head	1.8;
access;
symbols
	v20081023-2107:1.8
	v20081022-1925:1.8
	v20081022-1005:1.8
	v20081020-0700:1.8
	v20080917-1925:1.8
	v20080916-2008:1.8
	v20080911-1728:1.8
	v20080911-1506:1.8
	v20080910-1520:1.8
	v20080910-1510:1.8
	v20080903-1520:1.8
	v20080903-1510:1.8
	v20080813-1510:1.8
	v20080811-1546:1.8
	v20080731-1520:1.8
	v20080725-1738:1.8
	v20080723-2246:1.8
	v20080723-2232:1.8
	v20080723-1700:1.8
	v20080722-1827:1.8
	v20080718-1700:1.8
	v20080718-1731:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080527-1255:1.8
	v20080527-1151:1.7.4.1
	v20080516-1748:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080503-1740:1.8
	v20080501-2127:1.7.4.1
	v20080501-1739:1.8
	m20080429-1543:1.7.4.1
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080407-2250:1.8
	v20080407-0930:1.8
	v20080404-1111:1.8
	v20080328-1605:1.8
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20080201-2010:1.8
	v20080201-0201:1.7.4.1
	v20080118-1129:1.7
	v20080114-2222:1.7
	v20080114-1111:1.7
	v20080107-1111:1.7
	v20071222-1111:1.7
	v20071214-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.7
	v20071112-0000:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070518-1300:1.7
	bugzilla111892_group_support:1.7.0.2
	Root_bugzilla111892_group_support:1.7
	v20070504-1000:1.5
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	v20070202-0200:1.4.2.3
	v20070119-1200:1.4.2.3
	v20070111-0800:1.4.2.3
	v20070105-1200:1.4.2.3
	v20070103-0300:1.5
	M4_20:1.5
	v20061218-1500:1.4.2.3
	v20061218-1200:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061027-1200:1.4.2.3
	v20061013-1330:1.5
	v20061012-1100:1.4.2.3
	v20060925-1700:1.4.2.3
	v20060919-0800:1.4.2.3
	v20060907-1100:1.4.2.1
	M1_20:1.4
	v20060831-1500:1.4.2.1
	v20060824-1600:1.4.2.1
	v20060817-1500:1.4.2.1
	v20060810-1700:1.4.2.1
	v20060803-1200:1.4.2.1
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2008.01.29.16.47.27;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	6438479f589e4567;

1.7
date	2007.05.16.16.50.41;	author ahunter;	state Exp;
branches
	1.7.4.1;
next	1.6;
commitid	43e3464b36614567;

1.6
date	2007.05.11.22.18.56;	author mmostafa;	state Exp;
branches;
next	1.5;
commitid	45a74644ebd04567;

1.5
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.16.18.31.24;	author cmahoney;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2006.02.28.02.31.21;	author cmahoney;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.27.20.22.56;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.23.30.16;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.08.02.20.16.18;	author mmostafa;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2006.09.11.18.07.28;	author mmostafa;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;

1.7.4.1
date	2008.01.29.16.48.57;	author ahunter;	state Exp;
branches;
next	;
commitid	3810479f58f84567;


desc
@@


1.8
log
@[216931] gmf-head cdamus 080129 Erroneous dependencies on Boolean identity in transaction options
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.diagram.ui.view.factories;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.Transaction;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.impl.InternalTransaction;
import org.eclipse.emf.transaction.impl.InternalTransactionalEditingDomain;
import org.eclipse.emf.workspace.AbstractEMFOperation;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.core.view.factories.ViewFactory;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.notation.Bendpoints;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.NotationFactory;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.RelativeBendpoints;
import org.eclipse.gmf.runtime.notation.Routing;
import org.eclipse.gmf.runtime.notation.RoutingStyle;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint;
import org.eclipse.jface.preference.IPreferenceStore;

/**
 * This is the bas factory class for all connection views, it will 
 * create the view and decorate it using the default decorations
 * you can subclass it to add more decorations, or customize the 
 * way it looks, like adding new style
 * @@see #createView(IAdaptable, View, String, int, boolean, String)
 * @@see #decorateView(View, View, IAdaptable, String, int, boolean)
 * @@see #createStyles()
 * @@author mmostafa
 * 
 */

public class ConnectionViewFactory
	extends AbstractViewFactory implements ViewFactory {
	private static final Map options = new HashMap();	
    static {
        options.put(Transaction.OPTION_UNPROTECTED, Boolean.TRUE);
        options.put(Transaction.OPTION_NO_NOTIFICATIONS, Boolean.TRUE);
        options.put(Transaction.OPTION_NO_TRIGGERS, Boolean.TRUE);
    }
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.core.view.factories.ViewFactory#createView(org.eclipse.core.runtime.IAdaptable, org.eclipse.gmf.runtime.notation.View, java.lang.String, int, boolean, java.lang.String)
	 */
	public View createView(final IAdaptable semanticAdapter,
			final View containerView, final String semanticHint,
			final int index, final boolean persisted,
			final PreferencesHint preferencesHint) {

		setPreferencesHint(preferencesHint);

		final Edge edge = NotationFactory.eINSTANCE.createEdge();
		List styles = createStyles(edge);
        if (styles.size() > 0) {
        	edge.getStyles().addAll(styles);
        }
        
        Bendpoints bendPoints = createBendpoints();
        if (bendPoints != null) {
			edge.setBendpoints(bendPoints);
		}

		edge.setType(semanticHint);
		
		// decorate view assumes the view had been inserted already, so 
		// we had to call insert child before calling decorate view
		ViewUtil.insertChildView(containerView,edge, index, persisted);
        
        EObject semanticEl = semanticAdapter==null ? null : (EObject)semanticAdapter.getAdapter(EObject.class);
        if (semanticEl==null)
            // enforce a set to NULL
            edge.setElement(null);
        else if (requiresElement(semanticAdapter,containerView)){
            edge.setElement(semanticEl);
        }
        
        TransactionalEditingDomain domain = getEditingDomain(semanticEl, containerView);
		
        if (isUnProtectedSilentTransactionInProgress(domain)){
            // decorate view had to run as a silent operation other wise
            // it will generate too many events
            decorateView(containerView, edge, semanticAdapter,
                semanticHint, index, true);
            
        }else{
    		AbstractEMFOperation operation = new AbstractEMFOperation(
                domain, StringStatics.BLANK,
    			options) {
    
    			protected IStatus doExecute(IProgressMonitor monitor,
    					IAdaptable info)
    				throws ExecutionException {
    			    decorateView(containerView, edge, semanticAdapter,
    					semanticHint, index, true);
    
    				return Status.OK_STATUS;
    			}
    		};
    		try {
    			operation.execute(new NullProgressMonitor(), null);
    		} catch (ExecutionException e) {
    			Trace.catching(DiagramUIPlugin.getInstance(),
    				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
    				"createView", e); //$NON-NLS-1$
    			Log
    				.warning(DiagramUIPlugin.getInstance(),
    					DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
    					"createView", e); //$NON-NLS-1$
    		}
        }

		return edge;
	}
	
	/**
	 * this method will create the default bend point on the connection, connections are
	 * created as Straight linem you can override this method in your own factory that 
	 * subclass this class and change this behavior by adding extra bend points or returning
	 * a new list of bend points. This method get called by @@link #createView(IAdaptable, View, String, int, boolean) 
	 * @@return a list of style for the newly created view or an empty list if none (do not return null)
	 */
	protected Bendpoints createBendpoints() {
		RelativeBendpoints bendpoints = NotationFactory.eINSTANCE
			.createRelativeBendpoints();
		List points = new ArrayList(2);
		points.add(new RelativeBendpoint());
		points.add(new RelativeBendpoint());
		bendpoints.setPoints(points);
		return bendpoints;
	}

	/**
	 * This method is responsible for decorating the created view, it get called
	 * by the Factory method @@link #createView(IAdaptable, View, String, int, boolean),
	 * it will intiliaze the view with the default preferences also it will create 
	 * the default elements of the <code>View</code> if it had any
	 * @@param containerView the container of the view
	 * @@param view the view itself
	 * @@param element the semantic elemnent of the view (it could be null)
	 * @@param semanticHint the semantic hint of the view
	 * @@param index the index of the view
	 * @@param persisted flag indicating the the view was created as persisted or not
	 */
	protected void decorateView(View containerView, View view, IAdaptable element,
			String semanticHint, int index, boolean persisted) {
		initializeFromPreferences(view);
	}
	

	/**
	 * this method is called by @@link #createView(IAdaptable, View, String, int, boolean) to 
	 * create the styles for the view that will be created, you can override this 
	 * method in you factory sub class to provide additional styles
	 * @@return a list of style for the newly created view or an empty list if none (do not return null)
	 */
	protected List createStyles(View view) {
		List styles = new ArrayList();
		styles.add(NotationFactory.eINSTANCE.createConnectorStyle());
		return styles;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.view.factories.AbstractViewFactory#initializeFromPreferences(org.eclipse.gmf.runtime.notation.View)
	 */
	protected void initializeFromPreferences(View view) {
		super.initializeFromPreferences(view);

		IPreferenceStore store = (IPreferenceStore) getPreferencesHint()
			.getPreferenceStore();

		RoutingStyle routingStyle = (RoutingStyle)view.getStyle(NotationPackage.Literals.ROUTING_STYLE);
		if (routingStyle != null) {
			Routing routing = Routing.get(store
				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
			if (routing != null) {
				routingStyle.setRouting(routing);
			}
		}				
	}
    
    /**
     * Checks if the current active transaction is a unprotected amd silent
     * 
     * @@param domain , the domain to use during the check
     * @@return <code>true</code> if the current active transaction is unprotected and silent 
     */
    protected static boolean isUnProtectedSilentTransactionInProgress(TransactionalEditingDomain domain) {
        if (domain instanceof InternalTransactionalEditingDomain){
            InternalTransactionalEditingDomain internalEditingDomain = 
                (InternalTransactionalEditingDomain)domain;
            InternalTransaction transaction = internalEditingDomain.getActiveTransaction();
            if (transaction!=null && !transaction.isReadOnly()) {
                Object unprotectedMode = transaction.getOptions().get(Transaction.OPTION_UNPROTECTED); 
                if (Boolean.TRUE.equals(unprotectedMode)) {
                    // check for silent
                    Object noNotificationMode = transaction.getOptions().get(Transaction.OPTION_NO_NOTIFICATIONS);
                    Object noTriggersMode = transaction.getOptions().get(Transaction.OPTION_NO_TRIGGERS);
                    if (Boolean.TRUE.equals(noNotificationMode) &&
                        Boolean.TRUE.equals(noTriggersMode)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

}@


1.7
log
@gmf_head ahunter 070516 Update Copyright for files changed in 2007
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2007 IBM Corporation and others.
d226 1
a226 1
                if (unprotectedMode != null && unprotectedMode == Boolean.TRUE) {
d230 2
a231 2
                    if (unprotectedMode != null && noNotificationMode == Boolean.TRUE &&
                        noTriggersMode !=null &&  noTriggersMode == Boolean.TRUE           ) {
@


1.7.4.1
log
@[216931] gmf-R2_0_aintenance cdamus 080129 Erroneous dependencies on Boolean identity in transaction options
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2008 IBM Corporation and others.
d226 1
a226 1
                if (Boolean.TRUE.equals(unprotectedMode)) {
d230 2
a231 2
                    if (Boolean.TRUE.equals(noNotificationMode) &&
                        Boolean.TRUE.equals(noTriggersMode)) {
@


1.6
log
@[186637] gmf_head mmostafa 070511 View#setElement is not undone
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@a94 8
		EObject semanticEl = semanticAdapter==null ? null : (EObject)semanticAdapter.getAdapter(EObject.class);
		if (semanticEl==null)
			// enforce a set to NULL
			edge.setElement(null);
		else if (requiresElement(semanticAdapter,containerView)){
			edge.setElement(semanticEl);
		}

d101 8
@


1.4
log
@Bugzilla#142033 gmf_head cmahoney 050516 Shape and connector factories should use the same mechanism to obtain editing domain
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d28 3
d48 1
d67 6
d85 9
a93 2
		edge.getStyles().addAll(createStyles(edge));
		edge.setBendpoints(createBendpoints());
d108 2
d111 32
a142 32
		Map options = new HashMap();
		options.put(Transaction.OPTION_UNPROTECTED, Boolean.TRUE);
		options.put(Transaction.OPTION_NO_NOTIFICATIONS, Boolean.TRUE);
		options.put(Transaction.OPTION_NO_TRIGGERS, Boolean.TRUE);

		AbstractEMFOperation operation = new AbstractEMFOperation(
			getEditingDomain(semanticEl, containerView), StringStatics.BLANK,
			options) {

			protected IStatus doExecute(IProgressMonitor monitor,
					IAdaptable info)
				throws ExecutionException {

				//	decorate view had to run as a silent operation other wise
				//	it will generate too many events
				decorateView(containerView, edge, semanticAdapter,
					semanticHint, index, true);

				return Status.OK_STATUS;
			}
		};
		try {
			operation.execute(new NullProgressMonitor(), null);
		} catch (ExecutionException e) {
			Trace.catching(DiagramUIPlugin.getInstance(),
				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
				"createView", e); //$NON-NLS-1$
			Log
				.warning(DiagramUIPlugin.getInstance(),
					DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
					"createView", e); //$NON-NLS-1$
		}
d203 8
a210 2
		ViewUtil.setStructuralFeatureValue(view, NotationPackage.eINSTANCE.getRoutingStyle_Routing(), Routing
			.get(store.getInt(IPreferenceConstants.PREF_LINE_STYLE)));
d212 27
@


1.4.2.1
log
@[152455] gmf_R1_0_maintenance  yLulu 060802 ViewFactories impl could be enhanced
@
text
@a44 1
import org.eclipse.gmf.runtime.notation.RoutingStyle;
d62 1
a62 8
	extends AbstractViewFactory implements ViewFactory {	
	
	private static final Map options = new HashMap();	
    static {
        options.put(Transaction.OPTION_UNPROTECTED, Boolean.TRUE);
        options.put(Transaction.OPTION_NO_NOTIFICATIONS, Boolean.TRUE);
        options.put(Transaction.OPTION_NO_TRIGGERS, Boolean.TRUE);
    }
d75 2
a76 9
		List styles = createStyles(edge);
        if (styles.size() > 0) {
        	edge.getStyles().addAll(styles);
        }
        
        Bendpoints bendPoints = createBendpoints();
        if (bendPoints != null) {
			edge.setBendpoints(bendPoints);
		}
d92 5
a96 1
		
d184 2
a185 8
		RoutingStyle routingStyle = (RoutingStyle)view.getStyle(NotationPackage.Literals.ROUTING_STYLE);
		if (routingStyle != null) {
			Routing routing = Routing.get(store
				.getInt(IPreferenceConstants.PREF_LINE_STYLE));
			if (routing != null) {
				routingStyle.setRouting(routing);
			}
		}				
@


1.4.2.2
log
@[156907] gmf_R1_0_maintenace mmostafa 060911  number of transactions created by view factories can be reduced
@
text
@a27 3
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.impl.InternalTransaction;
import org.eclipse.emf.transaction.impl.InternalTransactionalEditingDomain;
d63 2
a64 1
	extends AbstractViewFactory implements ViewFactory {
a105 2
        
        TransactionalEditingDomain domain = getEditingDomain(semanticEl, containerView);
d107 28
a134 32
        if (isUnProtectedSilentTransactionInProgress(domain)){
            // decorate view had to run as a silent operation other wise
            // it will generate too many events
            decorateView(containerView, edge, semanticAdapter,
                semanticHint, index, true);
            
        }else{
    		AbstractEMFOperation operation = new AbstractEMFOperation(
                domain, StringStatics.BLANK,
    			options) {
    
    			protected IStatus doExecute(IProgressMonitor monitor,
    					IAdaptable info)
    				throws ExecutionException {
    			    decorateView(containerView, edge, semanticAdapter,
    					semanticHint, index, true);
    
    				return Status.OK_STATUS;
    			}
    		};
    		try {
    			operation.execute(new NullProgressMonitor(), null);
    		} catch (ExecutionException e) {
    			Trace.catching(DiagramUIPlugin.getInstance(),
    				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
    				"createView", e); //$NON-NLS-1$
    			Log
    				.warning(DiagramUIPlugin.getInstance(),
    					DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
    					"createView", e); //$NON-NLS-1$
    		}
        }
a203 27
    
    /**
     * Checks if the current active transaction is a unprotected amd silent
     * 
     * @@param domain , the domain to use during the check
     * @@return <code>true</code> if the current active transaction is unprotected and silent 
     */
    protected static boolean isUnProtectedSilentTransactionInProgress(TransactionalEditingDomain domain) {
        if (domain instanceof InternalTransactionalEditingDomain){
            InternalTransactionalEditingDomain internalEditingDomain = 
                (InternalTransactionalEditingDomain)domain;
            InternalTransaction transaction = internalEditingDomain.getActiveTransaction();
            if (transaction!=null && !transaction.isReadOnly()) {
                Object unprotectedMode = transaction.getOptions().get(Transaction.OPTION_UNPROTECTED); 
                if (unprotectedMode != null && unprotectedMode == Boolean.TRUE) {
                    // check for silent
                    Object noNotificationMode = transaction.getOptions().get(Transaction.OPTION_NO_NOTIFICATIONS);
                    Object noTriggersMode = transaction.getOptions().get(Transaction.OPTION_NO_TRIGGERS);
                    if (unprotectedMode != null && noNotificationMode == Boolean.TRUE &&
                        noTriggersMode !=null &&  noTriggersMode == Boolean.TRUE           ) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
@


1.4.2.3
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.3
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@a27 1
import org.eclipse.emf.transaction.util.TransactionUtil;
d98 1
a98 1
			TransactionUtil.getEditingDomain(edge), StringStatics.BLANK,
@


1.2
log
@bugzilla 116224 gmf-head sshaw 060119 Notation meta-model support for coordinate systems
@
text
@d16 1
d18 1
d20 1
d22 4
d27 6
a32 1
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
d36 3
a39 2
import org.eclipse.gmf.runtime.emf.core.edit.MRunOption;
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
d92 13
a104 2
		int options = MRunOption.UNCHECKED | MRunOption.SILENT;
		MEditingDomainGetter.getMEditingDomain(containerView).runWithOptions(new MRunnable() {
a105 1
			public Object run() {
d110 2
a111 1
				return null;
d113 13
a125 1
		},options);
@


1.1
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d66 6
a71 7
		if (requiresElement(semanticAdapter, containerView)) {
			if (semanticAdapter == null)
				// enforce a set to NULL
				edge.setElement(null);
			else
				edge.setElement((EObject) semanticAdapter
					.getAdapter(EObject.class));
@

