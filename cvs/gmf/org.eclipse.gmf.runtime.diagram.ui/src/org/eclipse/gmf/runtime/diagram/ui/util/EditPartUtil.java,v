head	1.9;
access;
symbols
	v20081023-2107:1.9
	v20081022-1925:1.9
	v20081022-1005:1.9
	v20081020-0700:1.9
	v20080917-1925:1.9
	v20080916-2008:1.9
	v20080911-1728:1.9
	v20080911-1506:1.9
	v20080910-1520:1.9
	v20080910-1510:1.9
	v20080903-1520:1.9
	v20080903-1510:1.9
	v20080813-1510:1.9
	v20080811-1546:1.9
	v20080731-1520:1.9
	v20080725-1738:1.9
	v20080723-2246:1.9
	v20080723-2232:1.9
	v20080723-1700:1.9
	v20080722-1827:1.9
	v20080718-1700:1.9
	v20080718-1731:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080527-1255:1.9
	v20080527-1151:1.8.4.1
	v20080516-1748:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080503-1740:1.9
	v20080501-2127:1.8.4.1
	v20080501-1739:1.9
	m20080429-1543:1.8.4.1
	v20080425-1959:1.9
	v20080417-1610:1.9
	v20080407-2250:1.9
	v20080407-0930:1.9
	v20080404-1111:1.9
	v20080328-1605:1.9
	v20080322-0000:1.9
	v20080222-1200:1.9
	v20080201-2010:1.9
	v20080201-0201:1.8.4.1
	v20080118-1129:1.8
	v20080114-2222:1.8
	v20080114-1111:1.8
	v20080107-1111:1.8
	v20071222-1111:1.8
	v20071214-1111:1.8
	v20071130-1111:1.8
	v20071124-0000:1.8
	v20071112-0000:1.8
	v20071108-0000:1.8
	v20071003-0000:1.8
	v20070915-0000:1.8
	v20070903-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.4
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070614-1400:1.8
	v20070608-1300:1.8
	v20070605-1400:1.8
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070518-1300:1.8
	bugzilla111892_group_support:1.8.0.2
	Root_bugzilla111892_group_support:1.8
	v20070504-1000:1.8
	v20070420-1000:1.8
	v20070413-1300:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070221-1500:1.8
	v20070208-1800:1.8
	v20070202-0200:1.7.2.2
	v20070119-1200:1.7.2.2
	v20070111-0800:1.7.2.2
	v20070105-1200:1.7.2.2
	v20070103-0300:1.8
	M4_20:1.8
	v20061218-1500:1.7.2.2
	v20061218-1200:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061027-1200:1.7.2.2
	v20061013-1330:1.8
	v20061012-1100:1.7.2.2
	v20060925-1700:1.7.2.2
	v20060919-0800:1.7.2.2
	v20060907-1100:1.7.2.1
	M1_20:1.7
	v20060831-1500:1.7.2.1
	v20060824-1600:1.7.2.1
	v20060817-1500:1.7
	v20060810-1700:1.7
	v20060803-1200:1.7
	v20060728-0500:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1400:1.7
	v20060616-1200:1.6
	v20060609-1400:1.5
	v20060531-1730:1.4
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060202-1415:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;


1.9
date	2008.01.29.16.47.27;	author ahunter;	state Exp;
branches;
next	1.8;
commitid	6438479f589e4567;

1.8
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2006.06.16.17.51.33;	author sshaw;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.06.16.15.34.30;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.02.13.15.59;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.31.17.05.01;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.31.16.24.07;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.28.02.31.21;	author cmahoney;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.15.14.59.19;	author sshaw;	state Exp;
branches;
next	;

1.7.2.1
date	2006.08.18.16.17.29;	author mmostafa;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2006.09.13.16.43.41;	author ahunter;	state Exp;
branches;
next	;

1.8.4.1
date	2008.01.29.16.48.57;	author ahunter;	state Exp;
branches;
next	;
commitid	3810479f58f84567;


desc
@@


1.9
log
@[216931] gmf-head cdamus 080129 Erroneous dependencies on Boolean identity in transaction options
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.util;

import java.util.Iterator;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.Transaction;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.impl.InternalTransaction;
import org.eclipse.emf.transaction.impl.InternalTransactionalEditingDomain;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.editparts.AbstractGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.PlatformUI;

/**
 * provides different utility functions for the EditPart
 * @@author mmostafa
 */

public class EditPartUtil {
	
	/** 
	 * gets the <code>Editpart</code>'s semantic element Class Id, this could be used to
	 * check the semantic element type
	 * @@param editpart the owner of the semantic element
	 * @@return the semantic element class Id
	 */
	public static String getSemanticEClassName(IGraphicalEditPart editPart) {
		if (editPart.getModel() instanceof View){
			View view = (View)editPart.getModel();
			EObject element = view.getElement();
			return element == null ? null : PackageUtil.getID(EMFCoreUtil.getProxyClass(element));
		}
		return null;
	}
    
    /**
     * remove all the canonical edit policies on the passed edit part, if the considerChildren 
     * flag is ON, it will remove the canonical editpolicies on every edit part in the 
     * passed edit part hirarchy
     * @@param editPart the edit part to remove the edit policy from
     * @@param considerChildren determine the the canonical edit policies will be removed from 
     *        children as well or not
     */
    public static void removeCanonicalEditPolicies(EditPart editPart, boolean considerChildren) {
        EditPolicy ep = editPart.getEditPolicy(EditPolicyRoles.CANONICAL_ROLE);
        if (ep!=null){
            editPart.removeEditPolicy(ep);
        }
        if (considerChildren){
            Iterator childrenIterator = editPart.getChildren().iterator();
            removeCanonicalEditPolicies(childrenIterator);
            if (editPart instanceof AbstractGraphicalEditPart){
                AbstractGraphicalEditPart gEP = (AbstractGraphicalEditPart)editPart;
                Iterator sourceConnectionsIterator = gEP.getSourceConnections().iterator();
                removeCanonicalEditPolicies(sourceConnectionsIterator);
                Iterator targetConnectionsIterator = gEP.getTargetConnections().iterator();
                removeCanonicalEditPolicies(targetConnectionsIterator);
            }
        }
    }

    private static void removeCanonicalEditPolicies(Iterator childrenIterator) {
        while (childrenIterator.hasNext()) {
            EditPart child = (EditPart)childrenIterator.next();
            removeCanonicalEditPolicies(child,true);
        }
    }
	
	/**
	 * Used as general utility usually in the context of handling notifications to ensure that a runnable will
	 * be run in the appropriate thread context so that SWT or other reservered resources can be accessed.  Should be only
	 * be used when the client is sure that in the stack of execution SWT resources will be accessed directly.  Otherwise,
	 * this could incur a performance penalty when handling notifications.  Also, it may spawn the runnable asynchronously
	 * to the main thread which may break assumptions on ordering when the events are handled.
	 * 
	 * @@param editPart the <code>EditPart</code> that is receiving notification or is being accessed potentially
	 * on a worker thread that needs to ensure safe access to SWT or other resources reserved for the main thread.
	 * @@param runThreadSafe the <code>Runnable</code> that is to be executed in a thread safe manner.
	 */
	public static void synchronizeRunnableToMainThread(IGraphicalEditPart editPart, Runnable runThreadSafe) {
		InternalTransactionalEditingDomain editingDomain = (InternalTransactionalEditingDomain)editPart.getEditingDomain();
        
		if (Display.getCurrent() == null && editingDomain != null && editingDomain.getActiveTransaction() != null) {
			if (editingDomain != null) {
	        	PlatformUI.getWorkbench().getDisplay().syncExec(editingDomain.createPrivilegedRunnable(runThreadSafe));
	            return;
	        }
	        else {
	        	PlatformUI.getWorkbench().getDisplay().asyncExec(runThreadSafe);
			}
		}
		else {
			runThreadSafe.run();
		}
	}
	
    /**
     * Checks if the current active transaction is a Write transaction or not
     * unprotected transaction are not considered write transaction
     * 
     * @@param editPart the <code>IGraphicalEditPart</code> that is used as a context to find the currently
     * running transaction if any.
     * @@param includeUnprotected <code>boolean</code> value that if <code>true</code> will consider unprotected
     * transactions when determining if a write transaction is in progress.
     * @@param otherThread <code>boolean</code> value that if <code>true</code>, will verify whether there is
     * an active transaction only when on a different thread then the caller.  This is useful to determine if a 
     * deadlock scenario will occur.
     * @@return <code>true</code> if the current active transaction is a write transaction 
     */
    public static boolean isWriteTransactionInProgress(IGraphicalEditPart editPart, boolean includeUnprotected, boolean otherThread) {
        TransactionalEditingDomain theEditingDomain = editPart.getEditingDomain();
        if (theEditingDomain instanceof InternalTransactionalEditingDomain){
            InternalTransactionalEditingDomain internalEditingDomain = 
                (InternalTransactionalEditingDomain)theEditingDomain;
            InternalTransaction transaction = internalEditingDomain.getActiveTransaction();
            if (transaction!=null && !transaction.isReadOnly()) {
            	if (!includeUnprotected) {
	                Object unprotectedMode = transaction.getOptions().get(Transaction.OPTION_UNPROTECTED); 
	                if (Boolean.TRUE.equals(unprotectedMode)) {
	                	return false;
	                }
            	}
                
            	if (otherThread && Thread.currentThread() != transaction.getOwner())
            		return true;
            	else if (!otherThread)
            		return true;
            }
        }
        return false;
    }
}
@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d137 1
a137 1
	                if (unprotectedMode != null && unprotectedMode == Boolean.TRUE) {
@


1.8.4.1
log
@[216931] gmf-R2_0_aintenance cdamus 080129 Erroneous dependencies on Boolean identity in transaction options
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2008 IBM Corporation and others.
d137 1
a137 1
	                if (Boolean.TRUE.equals(unprotectedMode)) {
@


1.7
log
@bugzilla 143198 gmf-head sshaw 060616 SWTExceptions occurring when handling notifications from worker thread transactions
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
d14 2
d21 3
d25 1
d53 33
@


1.7.2.1
log
@[152644] gmf_R1_0_maintenance mmostafa  060816  need a way to disable CanonicalEditPolicy for diagrams
@
text
@a13 2
import java.util.Iterator;

a18 3
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.editparts.AbstractGraphicalEditPart;
a19 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
a46 33
    
    /**
     * remove all the canonical edit policies on the passed edit part, if the considerChildren 
     * flag is ON, it will remove the canonical editpolicies on every edit part in the 
     * passed edit part hirarchy
     * @@param editPart the edit part to remove the edit policy from
     * @@param considerChildren determine the the canonical edit policies will be removed from 
     *        children as well or not
     */
    public static void removeCanonicalEditPolicies(EditPart editPart, boolean considerChildren) {
        EditPolicy ep = editPart.getEditPolicy(EditPolicyRoles.CANONICAL_ROLE);
        if (ep!=null){
            editPart.removeEditPolicy(ep);
        }
        if (considerChildren){
            Iterator childrenIterator = editPart.getChildren().iterator();
            removeCanonicalEditPolicies(childrenIterator);
            if (editPart instanceof AbstractGraphicalEditPart){
                AbstractGraphicalEditPart gEP = (AbstractGraphicalEditPart)editPart;
                Iterator sourceConnectionsIterator = gEP.getSourceConnections().iterator();
                removeCanonicalEditPolicies(sourceConnectionsIterator);
                Iterator targetConnectionsIterator = gEP.getTargetConnections().iterator();
                removeCanonicalEditPolicies(targetConnectionsIterator);
            }
        }
    }

    private static void removeCanonicalEditPolicies(Iterator childrenIterator) {
        while (childrenIterator.hasNext()) {
            EditPart child = (EditPart)childrenIterator.next();
            removeCanonicalEditPolicies(child,true);
        }
    }
@


1.7.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.6
log
@bugzilla 143198 gmf-head sshaw 060616 SWTExceptions occurring when handling notifications from worker thread transactions
@
text
@a18 1
import org.eclipse.gef.EditPartViewer;
a19 1
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramGraphicalViewer;
d60 4
a63 3
		if (Display.getCurrent() == null) {
			TransactionalEditingDomain editingDomain = (TransactionalEditingDomain)editPart.getEditingDomain();
	        if (editingDomain != null) {
@


1.5
log
@bugzilla 140020 gmf-head sshaw 060602 Deadlock in PopupBarEditPolicy$PopupBarLabelHandle
@
text
@d63 4
a66 12
			EditPartViewer viewer = editPart.getViewer();
			if (viewer instanceof DiagramGraphicalViewer) {
	            if (!((DiagramGraphicalViewer)viewer).areUpdatesDisabled()) {
	            	TransactionalEditingDomain editingDomain = (TransactionalEditingDomain)editPart.getEditingDomain();
	                if (editingDomain != null) {
	                    PlatformUI.getWorkbench().getDisplay().syncExec(editingDomain.createPrivilegedRunnable(runThreadSafe));
	                    return;
	                }
	            }
	            else {
					PlatformUI.getWorkbench().getDisplay().asyncExec(runThreadSafe);
				}
d68 2
a69 2
			else {
				PlatformUI.getWorkbench().getDisplay().asyncExec(runThreadSafe);
@


1.4
log
@bugzilla 142803 gmf-head sshaw 060531 Illegal Asynchronous Access to ResourceSetChangeEvent in DiagramEventBrokerThreadSafe
@
text
@d91 2
d98 1
a98 1
    public static boolean isWriteTransactionInProgress(IGraphicalEditPart editPart, boolean otherThread) {
d104 12
a115 6
            if (transaction!=null && !transaction.isReadOnly()){
                Object unprotectedMode = transaction.getOptions().get(Transaction.OPTION_UNPROTECTED); 
                if (unprotectedMode == null || unprotectedMode == Boolean.FALSE) {
                	if (!otherThread || (Thread.currentThread() != transaction.getOwner()))
                		return true;
                }
@


1.3
log
@bugzilla 142803 gmf-head sshaw 060531 Illegal Asynchronous Access to ResourceSetChangeEvent in DiagramEventBrokerThreadSafe
@
text
@d61 1
a61 1
	public static void handleRunnableForAccessingSWT(IGraphicalEditPart editPart, Runnable runThreadSafe) {
@


1.2
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d15 5
d21 1
d25 2
d49 63
@


1.1
log
@Bugzilla 109618: gmf_head mmostafa 050915 :  Remove the deprecated view facade interfaces and classes
@
text
@d16 2
a17 1
import org.eclipse.gmf.runtime.emf.core.util.ProxyUtil;
d37 1
a37 1
			return element == null ? null : ProxyUtil.getProxyClassID(element);
@

