head	1.13;
access;
symbols
	v20081023-2107:1.13
	v20081022-1925:1.13
	v20081022-1005:1.13
	v20081020-0700:1.13
	v20080917-1925:1.13
	v20080916-2008:1.13
	v20080911-1728:1.13
	v20080911-1506:1.13
	v20080910-1520:1.13
	v20080910-1510:1.13
	v20080903-1520:1.13
	v20080903-1510:1.13
	v20080813-1510:1.13
	v20080811-1546:1.13
	v20080731-1520:1.13
	v20080725-1738:1.13
	v20080723-2246:1.13
	v20080723-2232:1.13
	v20080723-1700:1.13
	v20080722-1827:1.13
	v20080718-1700:1.13
	v20080718-1731:1.13
	v20080716-1600:1.13
	v20080716-1642:1.13
	R2_1_maintenance:1.13.0.2
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080603-1553:1.13
	v20080527-1255:1.13
	v20080527-1151:1.10
	v20080516-1748:1.13
	v20080516-1143:1.13
	v20080512-1200:1.12
	v20080503-1740:1.12
	v20080501-2127:1.10
	v20080501-1739:1.12
	m20080429-1543:1.10
	v20080425-1959:1.12
	v20080417-1610:1.12
	v20080407-2250:1.12
	v20080407-0930:1.12
	v20080404-1111:1.12
	v20080328-1605:1.12
	v20080322-0000:1.12
	v20080222-1200:1.12
	v20080201-2010:1.12
	v20080201-0201:1.10
	v20080118-1129:1.10
	v20080114-2222:1.10
	v20080114-1111:1.11
	v20080107-1111:1.11
	v20071222-1111:1.11
	v20071214-1111:1.11
	v20071130-1111:1.11
	v20071124-0000:1.10
	v20071112-0000:1.10
	v20071108-0000:1.10
	v20071003-0000:1.10
	v20070915-0000:1.10
	v20070903-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.4
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070614-1400:1.10
	v20070608-1300:1.10
	v20070605-1400:1.10
	v20070601-1400:1.10
	v20070525-1500:1.10
	v20070518-1300:1.10
	bugzilla111892_group_support:1.10.0.2
	Root_bugzilla111892_group_support:1.10
	v20070504-1000:1.10
	v20070420-1000:1.10
	v20070413-1300:1.10
	v20070330-1300:1.10
	v20060330-1300:1.10
	v20070322-1100:1.10
	v20060316-0600:1.10
	v20070221-1500:1.10
	v20070208-1800:1.10
	v20070202-0200:1.9.2.3
	v20070119-1200:1.9.2.3
	v20070111-0800:1.9.2.3
	v20070105-1200:1.9.2.3
	v20070103-0300:1.10
	M4_20:1.10
	v20061218-1500:1.9.2.3
	v20061218-1200:1.10
	v20061214-0000:1.10
	M3_20:1.10
	v20061117-0800:1.10
	v20061027-1200:1.9.2.3
	v20061013-1330:1.10
	v20061012-1100:1.9.2.3
	v20060925-1700:1.9.2.3
	v20060919-0800:1.9.2.3
	v20060907-1100:1.9.2.1
	M1_20:1.9
	v20060831-1500:1.9.2.1
	v20060824-1600:1.9.2.1
	v20060817-1500:1.9.2.1
	v20060810-1700:1.9.2.1
	v20060803-1200:1.9.2.1
	v20060728-0500:1.9.2.1
	v20060721-1130:1.9.2.1
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060616-1400:1.9
	v20060616-1200:1.9
	v20060609-1400:1.9
	v20060531-1730:1.8
	v20060530-1930:1.8
	v20060526-1200:1.8
	v20060519-0800:1.8
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.7
	I20060216-1945:1.7
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.7
	I20060202-1415:1.7
	I20060129-1145:1.7
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051208-2000:1.7
	I20051201-1800:1.7
	I20051124-2000:1.6
	M3_10:1.6
	I20051118-1245:1.6
	I20051111-1800:1.6
	I20051106-0900:1.6
	v20051030:1.5;
locks; strict;
comment	@# @;


1.13
date	2008.05.14.13.38.45;	author rgronback;	state Exp;
branches;
next	1.12;
commitid	273482aeb654567;

1.12
date	2008.01.16.16.51.00;	author crevells;	state Exp;
branches;
next	1.11;
commitid	349478e35f24567;

1.11
date	2007.11.21.17.57.28;	author crevells;	state Exp;
branches;
next	1.10;
commitid	4a12474471874567;

1.10
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2006.06.05.17.57.00;	author mmostafa;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2006.02.28.02.32.25;	author cmahoney;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.23.18.37.25;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.36;	author sshaw;	state Exp;
branches;
next	;

1.9.2.1
date	2006.07.18.22.37.27;	author mmostafa;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2006.09.15.14.59.52;	author mmostafa;	state Exp;
branches;
next	;

1.10.2.1
date	2007.05.18.17.36.44;	author crevells;	state Exp;
branches;
next	;
commitid	1899464de42a4567;


desc
@@


1.13
log
@Removed unused imports.  Specifically, needed to remove import org.eclipse.osgi.internal.resolver.ComputeNodeOrder which was causing 'Discouraged access' warning (keeps our release review slides honest).
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.Iterator;
import java.util.List;

import org.eclipse.draw2d.XYLayout;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.RequestConstants;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.requests.SelectionRequest;
import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ComponentEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ContainerEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.PopupBarEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
import org.eclipse.gmf.runtime.diagram.ui.requests.ArrangeRequest;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/**
 * the base controler for shapes
 * @@author mmostafa, crevells
 *
 */
public abstract class ShapeEditPart extends TopGraphicEditPart implements IPrimaryEditPart {

    /**
     * A <code>ContainerEditPolicy</code> for a <code>ShapeEditPart</code>.
     * 
     * @@since 2.1
     */
    protected static class ShapeContainerEditPolicy
        extends ContainerEditPolicy {

        protected Command getArrangeCommand(ArrangeRequest request) {
            if (ActionIds.ACTION_ARRANGE_SELECTION.equals(request.getType())
                || ActionIds.ACTION_TOOLBAR_ARRANGE_SELECTION.equals(request
                    .getType())) {
                List parts = request.getPartsToArrange();
                if (parts.size() == 1 && parts.contains(getHost())) {
                    // Create arrange commands for the compartments within this shape.
                    CompoundCommand cc = new CompoundCommand();
                    for (Iterator iterator = getHost().getChildren().iterator(); iterator
                        .hasNext();) {
                        Object childEP = iterator.next();
                        if (childEP instanceof CompartmentEditPart
                            && ((CompartmentEditPart) childEP).getContentPane()
                                .getLayoutManager() instanceof XYLayout) {
                            ArrangeRequest newRequest = createRequest(request,
                                ((CompartmentEditPart) childEP).getChildren());
                            cc.add(super.getArrangeCommand(newRequest));
                        }
                    }
                    return cc;
                }
            }
            return super.getArrangeCommand(request);
        }

        private ArrangeRequest createRequest(ArrangeRequest request,
                List partsToArrange) {
            ArrangeRequest newRequest = new ArrangeRequest((String) request
                .getType(), request.getLayoutType());
            newRequest.setExtendedData(request.getExtendedData());
            newRequest.setPartsToArrange(partsToArrange);
            return newRequest;
        }
    }
    
	/**
	 * copnstructor
	 * @@param view the view controlled by this edit part
	 */
	public ShapeEditPart(View view) {
		super(view);
	}
    
    
    protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicy.CONTAINER_ROLE, new ShapeContainerEditPolicy());
		installEditPolicy(EditPolicy.COMPONENT_ROLE, new ComponentEditPolicy());
		installEditPolicy(EditPolicyRoles.POPUPBAR_ROLE, new PopupBarEditPolicy());
	}

	/**
	 * gets the location of this edit part's Figure
	 * @@return <code>Point</code>
	 */
	final public Point getLocation() {
		return getFigure().getBounds().getLocation();
	}

	/**
	 * gets the size of this edit part's Figure 
	 * @@return <code>Dimension</code>
	 */
	final public Dimension getSize() {
		return getFigure().getBounds().getSize();
	}

	protected void handleNotificationEvent(Notification notification) {
		Object feature = notification.getFeature();
		if (NotationPackage.eINSTANCE.getSize_Width().equals(feature)
			|| NotationPackage.eINSTANCE.getSize_Height().equals(feature)
			|| NotationPackage.eINSTANCE.getLocation_X().equals(feature)
			|| NotationPackage.eINSTANCE.getLocation_Y().equals(feature)) {
			refreshBounds();
		} 
		else if (NotationPackage.eINSTANCE.getFillStyle_FillColor().equals(feature)) {
			Integer c = (Integer) notification.getNewValue();
			setBackgroundColor(DiagramColorRegistry.getInstance().getColor(c));
		} 
		else if (NotationPackage.eINSTANCE.getLineStyle_LineColor().equals(feature)) {
			Integer c = (Integer) notification.getNewValue();
			setForegroundColor(DiagramColorRegistry.getInstance().getColor(c));
		} 
		else if (NotationPackage.eINSTANCE.getFontStyle().isInstance(notification.getNotifier()))
			refreshFont();
		else if (notification.getFeature() == NotationPackage.eINSTANCE.getView_Element()
		 && ((EObject)notification.getNotifier())== getNotationView())
			handleMajorSemanticChange();
        else if (notification.getEventType() == EventType.UNRESOLVE && hasNotationView()){
            // make sure we refresh if the unresolved element is the edit
            // part's semantic element the comparison should be id based not
            // instance based, since get element will resolve the element
            // and resolving the element will  result in returning a different
            // instance than the proxy we had as a notifier
            EObject notifier = (EObject) notification.getNotifier();
            EObject viewElement = getNotationView().getElement();
            if (viewElement!=null){
                String id1 = EMFCoreUtil.getProxyID(notifier);
                String id2 = EMFCoreUtil.getProxyID(viewElement);
                if (id1.equals(id2)) {
                    handleMajorSemanticChange();
                }
            }
         }
         else
			super.handleNotificationEvent(notification);
	}

	
	/**
	 * refresh the bounds 
	 */
	protected void refreshBounds() {
		int width = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getSize_Width())).intValue();
		int height = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getSize_Height())).intValue();
		Dimension size = new Dimension(width, height);
		int x = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getLocation_X())).intValue();
		int y = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getLocation_Y())).intValue();
		Point loc = new Point(x, y);
		((GraphicalEditPart) getParent()).setLayoutConstraint(
			this,
			getFigure(),
			new Rectangle(loc, size));
	}

	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshBounds();
		refreshBackgroundColor();
		refreshForegroundColor();
		refreshFont();
	}

	/**
	 * Return the editpolicy to be installed as an <code>EditPolicy#PRIMARY_DRAG_ROLE</code>
	 * role.  This method is typically called by <code>LayoutEditPolicy#createChildEditPolicy()</code>
	 * @@return EditPolicy
	 */
	public EditPolicy getPrimaryDragEditPolicy() {
		return new ResizableShapeEditPolicy();
	}

    public EditPart getTargetEditPart(Request request) {

        if (RequestConstants.REQ_SELECTION == request.getType()
            && getParent() instanceof GroupEditPart) {
            
            // If the shape is already selected then do not give up selection to
            // the group.
            if (getSelected() != SELECTED_NONE) {
                return super.getTargetEditPart(request);
            }

            GroupEditPart groupEP = (GroupEditPart) getParent();

            // Normally when a shape is not selected, the right-mouse button
            // will cause the shape to be selected and the context menu to show.
            // If the shape is in a group, we do not want this behavior as we
            // want the context menu of the group to show.
            if (getSelected() == SELECTED_NONE
                && (request instanceof SelectionRequest)
                && ((SelectionRequest) request).getLastButtonPressed() == 3) {
                return groupEP.getTargetEditPart(request);
            }
          
            // If the group is currently selected, then this is the second click
            // then the shape should be selected.
            if (groupEP.getSelected() != SELECTED_NONE) {
                return super.getTargetEditPart(request);
            }

            // If any of the group's children are currently selected then the
            // selection of another child of the group will result in the child
            // being selected and not the group.
            for (Iterator iter = groupEP.getChildren().iterator(); iter
                .hasNext();) {
                EditPart childEP = (EditPart) iter.next();
                if (childEP.getSelected() != SELECTED_NONE) {
                    return super.getTargetEditPart(request);
                }

            }

            // otherwise we want the group to get selected
            return groupEP.getTargetEditPart(request);
        }

        return super.getTargetEditPart(request);
    }

     
}
@


1.12
log
@[215505] gmf_head crevells 080116 Should be able to right-click a Circuit and arrange contents of its compartment
@
text
@a13 1
import java.util.ArrayList;
a37 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
a41 1
import org.eclipse.osgi.internal.resolver.ComputeNodeOrder;
@


1.11
log
@[111892] gmf_head crevells 071121 Group/Ungroup support
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
d14 1
d16 1
d18 1
d29 2
d32 1
d39 2
d44 1
d53 43
d107 1
a107 1
		installEditPolicy(EditPolicy.CONTAINER_ROLE, new ContainerEditPolicy());
@


1.10
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d14 2
d21 1
d24 3
a36 3
/*
 * @@canBeSeenBy %partners
 */
d39 1
a39 1
 * @@author mmostafa
d150 50
@


1.10.2.1
log
@[111892] gmf_head crevells 070518 First milestone of group/ungroup support (painting issues when grouping shapes with border items)
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
a13 2
import java.util.Iterator;

a18 1
import org.eclipse.gef.EditPart;
a20 3
import org.eclipse.gef.Request;
import org.eclipse.gef.RequestConstants;
import org.eclipse.gef.requests.SelectionRequest;
d31 3
d36 1
a36 1
 * @@author mmostafa, crevells
a146 50

    public EditPart getTargetEditPart(Request request) {

        if (RequestConstants.REQ_SELECTION == request.getType()
            && getParent() instanceof GroupEditPart) {
            
            // If the shape is already selected then do not give up selection to
            // the group.
            if (getSelected() != SELECTED_NONE) {
                return super.getTargetEditPart(request);
            }

            GroupEditPart groupEP = (GroupEditPart) getParent();

            // Normally when a shape is not selected, the right-mouse button
            // will cause the shape to be selected and the context menu to show.
            // If the shape is in a group, we do not want this behavior as we
            // want the context menu of the group to show.
            if (getSelected() == SELECTED_NONE
                && (request instanceof SelectionRequest)
                && ((SelectionRequest) request).getLastButtonPressed() == 3) {
                return groupEP.getTargetEditPart(request);
            }
          
            // If the group is currently selected, then this is the second click
            // then the shape should be selected.
            if (groupEP.getSelected() != SELECTED_NONE) {
                return super.getTargetEditPart(request);
            }

            // If any of the group's children are currently selected then the
            // selection of another child of the group will result in the child
            // being selected and not the group.
            for (Iterator iter = groupEP.getChildren().iterator(); iter
                .hasNext();) {
                EditPart childEP = (EditPart) iter.next();
                if (childEP.getSelected() != SELECTED_NONE) {
                    return super.getTargetEditPart(request);
                }

            }

            // otherwise we want the group to get selected
            return groupEP.getTargetEditPart(request);
        }

        return super.getTargetEditPart(request);
    }

     
@


1.9
log
@bugzilla 144693 gmf-head mmostafa 060606 Shape Edit Part does not handle the Unresolve Event any more
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d27 1
d50 1
a50 11
    /**
     * This is a HAck to avoid breaking clients who still send the Unresolved event
     * It should be remomved in 1.1 release and replaced by a refresh edit policy 
     * that will be installed by the clients
     *
     */
    private interface EventType {
        public static final int UNRESOLVE = 1003;
    }

	protected void createDefaultEditPolicies() {
d94 17
a110 5
        else if (notification.getEventType() == EventType.UNRESOLVE 
                && notification.getNotifier() == ((View)getModel()).getElement())
            handleMajorSemanticChange();

		else
@


1.9.2.1
log
@ [148860] gmf_R1_0_maintenance mmostafa  060718 Connection Edit Part does not handle the Unresolve Event any more
@
text
@d49 11
a59 1
    protected void createDefaultEditPolicies() {
@


1.9.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.9.2.3
log
@[157472] gmf_R1_0_maintenace mmostafa 060915  incorrect handling for unresolved events in ShapeEditPart
@
text
@a26 1
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
d93 5
a97 17
        else if (notification.getEventType() == EventType.UNRESOLVE && hasNotationView()){
            // make sure we refresh if the unresolved element is the edit
            // part's semantic element the comparison should be id based not
            // instance based, since get element will resolve the element
            // and resolving the element will  result in returning a different
            // instance than the proxy we had as a notifier
            EObject notifier = (EObject) notification.getNotifier();
            EObject viewElement = getNotationView().getElement();
            if (viewElement!=null){
                String id1 = EMFCoreUtil.getProxyID(notifier);
                String id2 = EMFCoreUtil.getProxyID(viewElement);
                if (id1.equals(id2)) {
                    handleMajorSemanticChange();
                }
            }
         }
         else
@


1.8
log
@Bugzilla#109422 gmf_head cmahoney 060227 Removing deprecated API
@
text
@d47 11
d103 3
@


1.7
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@a13 4
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.Map;

a17 1
import org.eclipse.emf.ecore.ENamedElement;
a18 1
import org.eclipse.emf.ecore.EStructuralFeature;
a25 1
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
a26 2
import org.eclipse.gmf.runtime.emf.core.EventTypes;
import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;
a38 12
	/**
	 * a static array of appearance property ids applicable to shapes
	 */
	private static final String[] appearanceProperties =
		new String[] {
			Properties.ID_FONTNAME,
			Properties.ID_FONTSIZE,
			Properties.ID_FONTBOLD,
			Properties.ID_FONTITALIC,
			Properties.ID_FONTCOLOR,
			Properties.ID_LINECOLOR,
			Properties.ID_FILLCOLOR};
a92 4
		else if (notification.getEventType() == EventTypes.UNRESOLVE 
				&& notification.getNotifier() == ((View)getModel()).getElement())
			handleMajorSemanticChange();

a122 40
	 * Returns an array of the appearance property ids applicable to the receiver.
	 * Fro this type it is  Properties.ID_FONT, Properties.ID_FONTCOLOR, Properties.ID_LINECOLOR, Properties.ID_FILLCOLOR,Properties.ID_AUTOSIZE 
	 * 
	 * @@return - an array of the appearance property ids applicable to the receiver
	 */
	private String[] getAppearancePropertyIDs() {
		return appearanceProperties;
	}

	/* Contributing appearance properties specific to this class definition
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart#fillAppearancePropertiesMap(java.util.Map)
	 */
	public void fillAppearancePropertiesMap(Map properties) {

		super.fillAppearancePropertiesMap(properties);

		Dictionary local_properties =
			(Dictionary) properties.get(
				((View)getModel()).getType());

		if (local_properties == null) {
			local_properties = new Hashtable();
		}

		if (getAppearancePropertyIDs().length > 0) {
			// only if there are any appearance properties
			for (int i = 0; i < getAppearancePropertyIDs().length; i++){
				ENamedElement element = MetaModelUtil.getElement(getAppearancePropertyIDs()[i]);
				if (element instanceof EStructuralFeature)
					local_properties.put(
						getAppearancePropertyIDs()[i],
						getStructuralFeatureValue((EStructuralFeature)element));
			}
			properties.put(
				((View)getModel()).getType(),
				local_properties);
		}
	}

	/**
@


1.6
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a26 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.PopupBarEditPolicy;
d30 1
d33 1
a33 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d102 1
a102 1
			setBackgroundColor(DiagramResourceManager.getInstance().getColor(c));
d106 1
a106 1
			setForegroundColor(DiagramResourceManager.getInstance().getColor(c));
@


1.5
log
@Bugzilla 109092: gmf_head sshaw 050923 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ActionBarEditPolicy;
d31 1
a31 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ShapeResizableEditPolicy;
d33 1
a33 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d73 1
a73 1
		installEditPolicy(EditPolicyRoles.ACTIONBAR_ROLE, new ActionBarEditPolicy());
d102 1
a102 1
			setBackgroundColor(PresentationResourceManager.getInstance().getColor(c));
d106 1
a106 1
			setForegroundColor(PresentationResourceManager.getInstance().getColor(c));
d193 1
a193 1
		return new ShapeResizableEditPolicy();
@


1.4
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d22 1
d24 1
d35 1
d127 2
a128 2
		int width = ((Integer) getPropertyValue(Properties.ID_EXTENTX)).intValue();
		int height = ((Integer) getPropertyValue(Properties.ID_EXTENTY)).intValue();
d130 2
a131 2
		int x = ((Integer) getPropertyValue(Properties.ID_POSITIONX)).intValue();
		int y = ((Integer) getPropertyValue(Properties.ID_POSITIONY)).intValue();
d174 7
a180 5

			for (int i = 0; i < getAppearancePropertyIDs().length; i++)
				local_properties.put(
					getAppearancePropertyIDs()[i],
					getPropertyValue(getAppearancePropertyIDs()[i]));
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a13 1
import java.beans.PropertyChangeEvent;
a24 2

import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;
d30 1
a31 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
d89 6
a94 8
	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#handlePropertyChangeEvent(java.beans.PropertyChangeEvent)
	 */
	protected void handlePropertyChangeEvent(PropertyChangeEvent evt) {
		if (evt.getPropertyName().equals(Properties.ID_EXTENTX)
			|| evt.getPropertyName().equals(Properties.ID_EXTENTY)
			|| evt.getPropertyName().equals(Properties.ID_POSITIONX)
			|| evt.getPropertyName().equals(Properties.ID_POSITIONY)) {
d97 2
a98 2
		else if (evt.getPropertyName().equals(Properties.ID_FILLCOLOR)) {
			Integer c = (Integer) evt.getNewValue();
d101 2
a102 2
		else if (evt.getPropertyName().equals(Properties.ID_LINECOLOR)) {
			Integer c = (Integer) evt.getNewValue();
d105 1
a105 9
		else {
			super.handlePropertyChangeEvent(evt);
		}
	}

	protected void handleNotificationEvent(NotificationEvent e) {
		Notification event = e.getNotification();
		
		if (NotationPackage.eINSTANCE.getFontStyle().isInstance(e.getElement()))
d107 2
a108 2
		else if (event.getFeature() == NotationPackage.eINSTANCE.getView_Element()
		 && ((EObject)event.getNotifier())== getNotationView())
d111 2
a112 2
		else if (event.getEventType() == EventTypes.UNRESOLVE 
				&& event.getNotifier() == ((View)getModel()).getElement())
d116 1
a116 1
			super.handleNotificationEvent(e);
d119 1
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d34 2
a35 2
import com.ibm.xtools.notation.NotationPackage;
import com.ibm.xtools.notation.View;
@

