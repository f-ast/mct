head	1.6;
access;
symbols
	v20081023-2107:1.6
	v20081022-1925:1.6
	v20081022-1005:1.6
	v20081020-0700:1.6
	v20080917-1925:1.6
	v20080916-2008:1.6
	v20080911-1728:1.6
	v20080911-1506:1.6
	v20080910-1520:1.6
	v20080910-1510:1.6
	v20080903-1520:1.6
	v20080903-1510:1.6
	v20080813-1510:1.6
	v20080811-1546:1.6
	v20080731-1520:1.6
	v20080725-1738:1.6
	v20080723-2246:1.6
	v20080723-2232:1.6
	v20080723-1700:1.6
	v20080722-1827:1.6
	v20080718-1700:1.6
	v20080718-1731:1.6
	v20080716-1600:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.6
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080610-1132:1.6
	v20080603-1553:1.6
	v20080527-1255:1.6
	v20080527-1151:1.6
	v20080516-1748:1.6
	v20080516-1143:1.6
	v20080512-1200:1.6
	v20080503-1740:1.6
	v20080501-2127:1.6
	v20080501-1739:1.6
	m20080429-1543:1.6
	v20080425-1959:1.6
	v20080417-1610:1.6
	v20080407-2250:1.6
	v20080407-0930:1.6
	v20080404-1111:1.6
	v20080328-1605:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080201-2010:1.6
	v20080201-0201:1.6
	v20080118-1129:1.6
	v20080114-2222:1.6
	v20080114-1111:1.6
	v20080107-1111:1.6
	v20071222-1111:1.6
	v20071214-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20071112-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070915-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.4
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070518-1300:1.6
	bugzilla111892_group_support:1.6.0.2
	Root_bugzilla111892_group_support:1.6
	v20070504-1000:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070202-0200:1.4.2.2
	v20070119-1200:1.4.2.2
	v20070111-0800:1.4.2.2
	v20070105-1200:1.4.2.2
	v20070103-0300:1.6
	M4_20:1.6
	v20061218-1500:1.4.2.2
	v20061218-1200:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061027-1200:1.4.2.2
	v20061013-1330:1.6
	v20061012-1100:1.4.2.2
	v20060925-1700:1.4.2.1
	v20060919-0800:1.4.2.1
	v20060907-1100:1.4
	M1_20:1.4
	v20060831-1500:1.4
	v20060824-1600:1.4
	v20060817-1500:1.4
	v20060810-1700:1.4
	v20060803-1200:1.4
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.6
date	2006.10.11.20.48.05;	author mmostafa;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.20.22.10.12;	author cmahoney;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.11.04.21.27.49;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.10;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.44;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.09.13.16.43.41;	author ahunter;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2006.10.11.20.44.11;	author mmostafa;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[160533] gmf_R1_0_maintenace mmostafa 061011  Page breaks do not work on bordered items
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.pagesetup;

import java.awt.geom.Point2D;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.internal.figures.IExpandableFigure;
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.WorkspaceViewerProperties;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.SWT;
import org.eclipse.swt.SWTError;
import org.eclipse.swt.printing.Printer;
import org.eclipse.swt.widgets.Display;

/**
 * Helper to get information about a page.  Used by page breaks and print
 * preview.
 * 
 * @@author Wayne Diu, wdiu
 * @@canBeSeenBy %level1
 */
public class PageInfoHelper {
    /**
     * Calculate the diagram bounds excluding the page breaks figure
     * 
     * @@param diagramEditPart, the diagram edit part containing the diagram
     * we are calculating the bounds for.
     * @@param pageBreakClass, figures of this class should be ignored
     * 
     * @@return rectangle bounds of the diagram's children
     */
    public static Rectangle getChildrenBounds(DiagramEditPart diagramEditPart, Class pageBreakClass) {
        Rectangle diagramRec = null;
        Point location = new Point();
        IFigure f = diagramEditPart.getContentPane();
        List list = f.getChildren();

        if (java.util.Collections.EMPTY_LIST == list) {
            return new Rectangle();
        }
        boolean init = true;
        for (int i = 0; i < list.size(); i++) {
            Figure childFigure = (Figure) list.get(i);
            if (pageBreakClass != null && pageBreakClass.isInstance(childFigure)) {
                continue;
            }

            Rectangle r = null;
            Point childLocation = null;
            if (childFigure instanceof IExpandableFigure){
                r = ((IExpandableFigure)childFigure).getExtendedBounds();
                childLocation = r.getLocation();
                
            }else {
                r = childFigure.getBounds();
                childLocation = childFigure.getLocation();
            }
            
            
            if (init) {
                location.x = childLocation.x;
                location.y = childLocation.y;
                diagramRec = r;
                init = false;
            }

            diagramRec = diagramRec.getUnion(r);

            if (childLocation.x < location.x) {
                location.x = childLocation.x;
            }
            if (childLocation.y < location.y) {
                location.y = childLocation.y;
            }

        }

        if (diagramRec == null) {
            // The diagram is empty
            return new Rectangle();
        } else {
            diagramRec.x = location.x;
            diagramRec.y = location.y;
        }

        return diagramRec;
    }
    

    /**
     * Utility method that calculate the printer page size.      
     * @@return point the page size point.x == width, point.y == height
     */
    public static Point getPageSize(IPreferenceStore store, IMapMode mm) {
    	return getPageSize(store, true, mm);
    }
    
    /**
     * Utility method that calculate the printer page size.      
     * @@return point the page size point.x == width, point.y == height
     */
    public static Point getPageSize(IPreferenceStore store, boolean subtractMargins, IMapMode mm) {

		double paperSizeWidth =
			store.getDouble(WorkspaceViewerProperties.PREF_PAGE_WIDTH);
		double paperSizeHeight =
			store.getDouble(WorkspaceViewerProperties.PREF_PAGE_HEIGHT);
		double leftMargin =
			store.getDouble(WorkspaceViewerProperties.PREF_MARGIN_LEFT);
		double topMargin =
			store.getDouble(WorkspaceViewerProperties.PREF_MARGIN_TOP);
		double bottomMargin =
			store.getDouble(WorkspaceViewerProperties.PREF_MARGIN_BOTTOM);
		double rightMargin =
			store.getDouble(WorkspaceViewerProperties.PREF_MARGIN_RIGHT);

		//if (nnn
		//	.LANDSCAPE
		//	.equals(
		//		store.getString(WorkspaceViewerProperties.PAGE_ORIENTATION))) {
		//	double temp = paperSizeWidth;
		//	paperSizeWidth = paperSizeHeight;
		//	paperSizeHeight = temp;
		//}

		if (store.getBoolean(WorkspaceViewerProperties.PREF_USE_LANDSCAPE)) {
			double temp = paperSizeWidth;
			paperSizeWidth = paperSizeHeight;
			paperSizeHeight = temp;
		}
		// inches
		double width = paperSizeWidth;
		double height = paperSizeHeight;
		
		if (subtractMargins) {
			width -= (leftMargin + rightMargin);
			height -= (topMargin + bottomMargin);
		}

		int[] paperSize = { 0, 0 };
		org.eclipse.swt.widgets.Display display = Display.getDefault();
		org.eclipse.swt.graphics.Point displayDPI = display.getDPI();
		paperSize[0] = mm.DPtoLP((int)(width * displayDPI.x));
		paperSize[1] = mm.DPtoLP((int)(height * displayDPI.y));

		return new Point(paperSize[0], paperSize[1]);
    }
    
    /**
     * Returns a page type (e.g. PSPageType.A4) based on the 
     * size of the page in the default printer.  If no printer is
     * installed a default of PSPageType.LETTER is returned.
     * 
     * @@return String the default page size name
     */    
    static public String getPrinterPageType() {
    	
    	//String pageType = nnn.LETTER;
    	String pageType = PageSetupPageType.LETTER.getName();
    	
    	Printer printer = null;

		try {
			printer = new Printer();
		} catch (SWTError e) {
			//I cannot printer.dispose(); because it may not have been
			//initialized
			Trace.catching(DiagramUIPlugin.getInstance(),
				DiagramUIDebugOptions.EXCEPTIONS_CATCHING,
				PageInfoHelper.class, "getPrinterPage", //$NON-NLS-1$
				e);

			if (e.code == SWT.ERROR_NO_HANDLES) {
				//it might have really been ERROR_NO_HANDLES, but there's
				//no way for me to really know
				return pageType;
			}

			//if (e.code != SWT.ERROR_NO_HANDLES)
			Log.error(DiagramUIPlugin.getInstance(),
				DiagramUIStatusCodes.GENERAL_UI_FAILURE,
				"Failed to make instance of Printer object", e); //$NON-NLS-1$

			//else if another swt error
			Trace.throwing(DiagramUIPlugin.getInstance(),
				DiagramUIDebugOptions.EXCEPTIONS_CATCHING,
				PageInfoHelper.class, "getPrinterPage", //$NON-NLS-1$
				e);
			throw e;
		}
    	
    	if (printer != null) {
    		
    		// Physical page size in pixels
    		org.eclipse.swt.graphics.Rectangle physicalSize = printer.getBounds();
    		org.eclipse.swt.graphics.Point dpi = printer.getDPI();
    		
    		// Convert physical size to inches.
    		Point2D.Double size = new Point2D.Double(physicalSize.width / dpi.x, physicalSize.height / dpi.y);
    		
    		Map pageTypes = getPaperSizesMap();
    		Iterator iterator = pageTypes.keySet().iterator();
    		boolean first = true;
    		double bestFit = 0.0;
    		
    		while(iterator.hasNext()) {
    			
    			String thisPageType = (String)iterator.next();
    			Point2D.Double thisSize = (Point2D.Double)pageTypes.get(thisPageType);
    			
    			if (first) {
    				bestFit = size.distance(thisSize);
    				pageType = thisPageType;
    				first = false;
    				continue;
    			}
    			
    			double thisFit = size.distance(thisSize);
    			if (thisFit < bestFit) {
    				bestFit = thisFit;
    				pageType = thisPageType;
    			}
    			
    		}
    		printer.dispose();	    		
    	}     	   	
    	
    	return pageType;
    }
    
	private static final Map pageSizes = new HashMap();

	static {
		pageSizes.put(PageSetupPageType.LETTER, new Point2D.Double(8.5, 11));
		pageSizes.put(PageSetupPageType.LEGAL, new Point2D.Double(8.5, 14));
		pageSizes.put(PageSetupPageType.EXECUTIVE, new Point2D.Double(7.25, 10.5));
		pageSizes.put(PageSetupPageType.llX17, new Point2D.Double(11, 17));
		pageSizes.put(PageSetupPageType.A3, new Point2D.Double(11.69, 16.54));
		pageSizes.put(PageSetupPageType.A4, new Point2D.Double(8.268, 11.69));
		pageSizes.put(PageSetupPageType.B4, new Point2D.Double(14.33, 10.12));
		pageSizes.put(PageSetupPageType.B5, new Point2D.Double(7.165, 10.12));
	}
	
	public static final Map getPaperSizesMap() {
		return pageSizes;
	}
	
	public static final class PageMargins {
		public int left;
		public int right;
		public int top;
		public int bottom;
	}	
	
	
	public static PageMargins getPageMargins(IPreferenceStore preferenceStore, IMapMode mm) {
		assert Display.getDefault() != null;
		
		org.eclipse.swt.graphics.Point displayDPI = Display.getDefault().getDPI();
		PageMargins margins = new PageMargins();
		margins.left = mm.DPtoLP((int) ( displayDPI.x * preferenceStore
			.getDouble(WorkspaceViewerProperties.PREF_MARGIN_LEFT)));
		margins.right = mm.DPtoLP((int) ( displayDPI.x * preferenceStore
			.getDouble(WorkspaceViewerProperties.PREF_MARGIN_RIGHT)));
		margins.top = mm.DPtoLP((int) ( displayDPI.y * preferenceStore
			.getDouble(WorkspaceViewerProperties.PREF_MARGIN_TOP)));
		margins.bottom = mm.DPtoLP((int) ( displayDPI.y * preferenceStore
			.getDouble(WorkspaceViewerProperties.PREF_MARGIN_BOTTOM)));
		
		return margins;
		
	}
}
@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d30 1
d72 12
a83 2
            Rectangle r = childFigure.getBounds();
            Point childLocation = childFigure.getLocation();
@


1.4
log
@Bugzilla#123313 gmf_head cmahoney 060120 Making DiagramUIPlugin, DiagramUIStatusCodes, and DiagramUIDebugOptions internal
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
@


1.4.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.4.2.2
log
@[160533] gmf_head mmostafa 061011  Page breaks do not work on bordered items
@
text
@a29 1
import org.eclipse.gmf.runtime.diagram.ui.internal.figures.IExpandableFigure;
d71 2
a72 12
            Rectangle r = null;
            Point childLocation = null;
            if (childFigure instanceof IExpandableFigure){
                r = ((IExpandableFigure)childFigure).getExtendedBounds();
                childLocation = r.getLocation();
                
            }else {
                r = childFigure.getBounds();
                childLocation = childFigure.getLocation();
            }
            
            
@


1.3
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@a25 3
import org.eclipse.gmf.runtime.diagram.ui.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.DiagramUIStatusCodes;
d27 3
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a23 6
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.swt.SWT;
import org.eclipse.swt.SWTError;
import org.eclipse.swt.printing.Printer;
import org.eclipse.swt.widgets.Display;

d31 6
a36 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d107 2
a108 2
    public static Point getPageSize(IPreferenceStore store) {
    	return getPageSize(store, true);
d115 1
a115 1
    public static Point getPageSize(IPreferenceStore store, boolean subtractMargins) {
d156 2
a157 2
		paperSize[0] = MapMode.DPtoLP((int)(width * displayDPI.x));
		paperSize[1] = MapMode.DPtoLP((int)(height * displayDPI.y));
d269 1
a269 1
	public static PageMargins getPageMargins(IPreferenceStore preferenceStore) {
d274 1
a274 2
		margins.left = MapMode
		.DPtoLP((int) ( displayDPI.x * preferenceStore
d276 1
a276 2
		margins.right = MapMode
		.DPtoLP((int) ( displayDPI.x * preferenceStore
d278 1
a278 2
		margins.top = MapMode
		.DPtoLP((int) ( displayDPI.y * preferenceStore
d280 1
a280 2
		margins.bottom = MapMode
		.DPtoLP((int) ( displayDPI.y * preferenceStore
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

