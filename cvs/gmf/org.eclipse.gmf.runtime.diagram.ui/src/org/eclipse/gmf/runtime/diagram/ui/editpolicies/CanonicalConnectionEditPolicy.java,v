head	1.24;
access;
symbols
	v20081023-2107:1.24
	v20081022-1925:1.24
	v20081022-1005:1.24
	v20081020-0700:1.24
	v20080917-1925:1.24
	v20080916-2008:1.24
	v20080911-1728:1.24
	v20080911-1506:1.24
	v20080910-1520:1.24
	v20080910-1510:1.24
	v20080903-1520:1.24
	v20080903-1510:1.24
	v20080813-1510:1.24
	v20080811-1546:1.24
	v20080731-1520:1.24
	v20080725-1738:1.24
	v20080723-2246:1.24
	v20080723-2232:1.24
	v20080723-1700:1.24
	v20080722-1827:1.24
	v20080718-1700:1.24
	v20080718-1731:1.24
	v20080716-1600:1.24
	v20080716-1642:1.24
	R2_1_maintenance:1.24.0.2
	Root_R2_1_maintenance:1.24
	R2_1_0:1.24
	v20080610-1132:1.24
	v20080603-1553:1.24
	v20080527-1255:1.24
	v20080527-1151:1.22
	v20080516-1748:1.24
	v20080516-1143:1.24
	v20080512-1200:1.24
	v20080503-1740:1.24
	v20080501-2127:1.22
	v20080501-1739:1.24
	m20080429-1543:1.22
	v20080425-1959:1.24
	v20080417-1610:1.24
	v20080407-2250:1.24
	v20080407-0930:1.24
	v20080404-1111:1.24
	v20080328-1605:1.24
	v20080322-0000:1.24
	v20080222-1200:1.24
	v20080201-2010:1.24
	v20080201-0201:1.22
	v20080118-1129:1.22
	v20080114-2222:1.22
	v20080114-1111:1.23
	v20080107-1111:1.23
	v20071222-1111:1.23
	v20071214-1111:1.23
	v20071130-1111:1.23
	v20071124-0000:1.22
	v20071112-0000:1.22
	v20071108-0000:1.22
	v20071003-0000:1.22
	v20070915-0000:1.22
	v20070903-0000:1.22
	v20070809-0000:1.22
	R2_0_maintenance:1.22.0.4
	R2_0:1.22
	R4_20:1.22
	v20070621-0000:1.22
	RC3_20:1.22
	v20070614-1400:1.22
	v20070608-1300:1.22
	v20070605-1400:1.22
	v20070601-1400:1.22
	v20070525-1500:1.22
	v20070518-1300:1.22
	bugzilla111892_group_support:1.22.0.2
	Root_bugzilla111892_group_support:1.22
	v20070504-1000:1.22
	v20070420-1000:1.22
	v20070413-1300:1.22
	v20070330-1300:1.22
	v20060330-1300:1.22
	v20070322-1100:1.22
	v20060316-0600:1.22
	v20070221-1500:1.22
	v20070208-1800:1.22
	v20070202-0200:1.20.2.2
	v20070119-1200:1.20.2.2
	v20070111-0800:1.20.2.2
	v20070105-1200:1.20.2.2
	v20070103-0300:1.21
	M4_20:1.21
	v20061218-1500:1.20.2.2
	v20061218-1200:1.21
	v20061214-0000:1.21
	M3_20:1.21
	v20061117-0800:1.21
	v20061027-1200:1.20.2.2
	v20061013-1330:1.21
	v20061012-1100:1.20.2.2
	v20060925-1700:1.20.2.2
	v20060919-0800:1.20.2.2
	v20060907-1100:1.20.2.1
	M1_20:1.20
	v20060831-1500:1.20.2.1
	v20060824-1600:1.20.2.1
	v20060817-1500:1.20.2.1
	v20060810-1700:1.20.2.1
	v20060803-1200:1.20.2.1
	v20060728-0500:1.20.2.1
	v20060721-1130:1.20.2.1
	v20060713-1700:1.20
	R1_0_maintenance:1.20.0.2
	R1_0:1.20
	v20060627-1200:1.20
	v20060616-1400:1.20
	v20060616-1200:1.20
	v20060609-1400:1.19
	v20060531-1730:1.19
	v20060530-1930:1.19
	v20060526-1200:1.19
	v20060519-0800:1.18
	v20060512-1000:1.18
	I20060512-1000:1.18
	I20060505-1400:1.18
	I20060428-1300:1.18
	I20060424-0500:1.18
	I20060424-0300:1.17
	M6_10:1.17
	I20060407-1200:1.17
	I20060331-1000:1.17
	I20060324-0300:1.17
	I20060317-1300:1.17
	I20060317-1200:1.17
	I20060316-1300:1.17
	I20060309-1300:1.17
	M5_10:1.17
	S20060303-1600:1.17
	I20060227-1730:1.16
	I20060216-1945:1.16
	I20060210-1715:1.15
	I20060209-1815:1.15
	I20060203-0830:1.14
	I20060202-1415:1.14
	I20060129-1145:1.13
	I20060127-0900:1.13
	I20060120-1530:1.12
	I20060113-1700:1.12
	M4_10:1.12
	I20060107-1100:1.12
	I20060105-1630:1.12
	I20051230-1230:1.12
	I20051223-1100:1.11
	I20051217-0925:1.10
	I20051208-2000:1.10
	I20051201-1800:1.9
	I20051124-2000:1.8
	M3_10:1.7
	I20051118-1245:1.7
	I20051111-1800:1.7
	I20051106-0900:1.7
	v20051030:1.4;
locks; strict;
comment	@# @;


1.24
date	2008.01.28.20.36.35;	author ahunter;	state Exp;
branches;
next	1.23;
commitid	2f9479e3cd24567;

1.23
date	2007.11.21.17.57.28;	author crevells;	state Exp;
branches;
next	1.22;
commitid	4a12474471874567;

1.22
date	2007.01.12.17.08.59;	author mmostafa;	state Exp;
branches
	1.22.2.1;
next	1.21;
commitid	7e7245a7c0aa4567;

1.21
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.20;

1.20
date	2006.06.14.18.39.49;	author ahunter;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2006.05.25.20.58.09;	author mmostafa;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.18.20.51.25;	author cmahoney;	state Exp;
branches;
next	1.17;

1.17
date	2006.02.28.02.30.51;	author cmahoney;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.07.15.19.06;	author mmostafa;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.01.19.03.44;	author mmostafa;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.20.22.10.12;	author cmahoney;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.24.02.22.07;	author sshaw;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.23.01.30.56;	author sshaw;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.07.19.46.08;	author sshaw;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.25.19.38.12;	author cmahoney;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.23.18.02.20;	author sshaw;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.04.22.13.15;	author sshaw;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.04.21.23.06;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.02.23.30.16;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.06.18.17.45;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.15.21.25.18;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.15.20.38.16;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.13.15.45.50;	author sshaw;	state Exp;
branches;
next	;

1.20.2.1
date	2006.07.17.19.05.10;	author cmahoney;	state Exp;
branches;
next	1.20.2.2;

1.20.2.2
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;

1.22.2.1
date	2007.05.18.17.36.43;	author crevells;	state Exp;
branches;
next	;
commitid	1899464de42a4567;


desc
@@


1.24
log
@[212195] gmf-head mhanner 080128 [DeleteFromSupport] Allow Delete from Diagram for elements in a container
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gef.requests.CreateRequest;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand;
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.INodeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.figures.ICanonicalShapeCompartmentLayout;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;
import org.eclipse.gmf.runtime.diagram.ui.requests.DropObjectsRequest;
import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor;
import org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.osgi.util.NLS;

/**
 * A specialized implementation of <code>CanonicalEditPolicy</code>.
 * This implementation will manage connections owned by the semantic host.
 * 
 * @@author mhanner / sshaw
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.ui.*
 */
public abstract class CanonicalConnectionEditPolicy
	extends CanonicalEditPolicy {

	/**
	 * Return a list of semantic relationships contained inside this
	 * compartment.
	 * @@return EObject list
	 * 
	 */
	abstract protected List getSemanticConnectionsList();

	/**
	 * Return the supplied relationship's source element
	 * @@param relationship semantic connection
     * @@return EObject the source EObject
	 */
	abstract protected EObject getSourceElement(EObject relationship);

	/**
	 * Return the supplied relationship's target element.
	 * 
	 * @@param relationship semantic connection
     * @@return EObject the target EObject
	 */
	abstract protected EObject getTargetElement(EObject relationship);

	/** Return an empty list. */
	protected List getSemanticChildrenList() {
		return Collections.EMPTY_LIST;
	}

	/* 
	 * Override to ensure that all owned editparts are activated before the editpolicy refresh
	 * is invoked that will try to canonically create connections and shapes.
	 */
	protected void refreshOnActivate() {
		// need to activate editpart children before invoking the canonical refresh
		List c = getHost().getChildren();
		for (int i = 0; i < c.size(); i++)
			((EditPart)c.get(i)).activate();

		refresh();
	}
	
	/**
	 * Return <tt>true</tt> if the connection should be drawn between the
	 * supplied endpoints; otherwise return <tt>false</tt>.
	 * 
	 * @@param a
	 *            connection's source element
	 * @@param a
	 *            connection's target element
	 * @@return <tt>true</tt> if both parameters are not <tt>null</tt>;
	 *         otherwise <tt>false</tt>
	 */
	protected boolean canCreateConnection(EditPart sep, EditPart tep,
			EObject connection) {
		if (sep != null && sep.isActive() && tep != null && tep.isActive()) {

			View src = (View) sep.getAdapter(View.class);
			View tgt = (View) tep.getAdapter(View.class);
			if (src != null && tgt != null) {
                EditPart sourceParent = sep.getParent();
                while (sourceParent instanceof GroupEditPart) {
                    sourceParent = sourceParent.getParent();
                }
                EditPart targetParent = tep.getParent();
                while (targetParent instanceof GroupEditPart) {
                    targetParent = targetParent.getParent();
                }
				
                return sourceParent.getEditPolicy(
					EditPolicyRoles.CANONICAL_ROLE) != null
					&& targetParent.getEditPolicy(
						EditPolicyRoles.CANONICAL_ROLE) != null;
			}
		}
		return false;
	}

	/**
	 * Return the editpart mapped to the object. The editpart is retrieved from
	 * a [view,semantic] mapping. {@@link #getView(IElement)}is called if the
	 * mapping cannot be found inside this manager.
	 * 
	 * @@param element
	 *            an <tt>View</tt> or <tt>EObject</tt> instance.
	 * @@param context
	 * 			  an <code>EObject</code> that is the context for the element.  Typically,
	 * 			  this will be either <code>null</code> or it will the <code>Edge</code>
	 * 			  that is connected to the <code>element</code> to find the <code>EditPart</code> of.
	 * @@return an editpart; <tt>null</tt> if non could be found.
	 */
	private EditPart getEditPartFor(EObject element, EObject context) {
		if (element != null && !(element instanceof View)) {
			EditPartViewer viewer = getHost().getViewer();
			if (viewer instanceof IDiagramGraphicalViewer) {
				List parts = ((IDiagramGraphicalViewer) viewer)
					.findEditPartsForElement(EMFCoreUtil.getProxyID(element),
						INodeEditPart.class);

				if (parts.isEmpty()) {
					// reach for the container's editpart instead and force it
					// to refresh
					EObject container = element.eContainer();
					EditPart containerEP = getEditPartFor(container, null);
					if (containerEP != null) {
						containerEP.refresh();
						parts = ((IDiagramGraphicalViewer) viewer)
							.findEditPartsForElement(EMFCoreUtil.getProxyID(element),
								INodeEditPart.class);
					}
				}

				// Check if the part is contained with-in the host EditPart
				// since we are canonically updated the host.
				return findEditPartForElement(element, context, parts);
			}
		}

		return (EditPart) host().getViewer().getEditPartRegistry().get(element);
	}

	/**
	 * Finds the specific <code>EditPart</code> from a <code>List</code> of editparts
	 * that is the exact representation of the given <code>element</code> in the 
	 * host context.
	 * 
	 * @@param element
	 *            an <tt>View</tt> or <tt>EObject</tt> instance.
	 * @@param context
	 * 			  an <code>EObject</code> that is the context for the element.  Typically,
	 * 			  this will be either <code>null</code> or it will the <code>Edge</code>
	 * 			  that is connected to the <code>element</code> to find the <code>EditPart</code> of.
	 * @@param parts
	 * 			  a <code>List</code> of <code>EditPart</codes> to search for a specific
	 * 			  instance that is the exact representation of <code>element</code>
	 * 			  in the host context.
	 * @@return an editpart; <tt>null</tt> if non could be found.
	 */
	protected EditPart findEditPartForElement(EObject element, EObject context, List parts) {
		EditPart ancestor = getHost();
		while (ancestor != null) {
			EditPart ep = reachForEditPartWithAncestor(parts, ancestor);
			if (ep != null) {
				return ep;
			}
			ancestor = ancestor.getParent();
		}
		
		return null;
	}

	/**
	 * Walks up the container tree and tries to find the EditPart that has the
	 * given <code>EditPart</code> as an ancestor.
	 * 
	 * @@param results
	 *            <code>List</code> of <code>EditPart</code> objects
	 * @@param ancestor
	 *            <code>EditPart</code> to check against.
	 * @@return <code>EditPart</code> that contains the <code>ancestor</code>
	 *         in it's containment hierarchy
	 */
	private EditPart reachForEditPartWithAncestor(List results,
			EditPart ancestor) {
		ListIterator li = results.listIterator();
		while (li.hasNext()) {
			EditPart ep = (EditPart) li.next();

			EditPart walker = ep.getParent();
			while (walker != null) {
				if (walker.equals(ancestor))
					return ep;
				walker = walker.getParent();
			}
		}

		return null;
	}

	/**
	 * Returns the default factory hint.
	 * 
	 * @@return an empty string
	 */
	protected String getDefaultFactoryHint() {
		return "";//$NON-NLS-1$
	}

	/**
	 * Creates a connection view facde element for the supplied semantic element.
	 * An empty string is used as the default factory hint.
	 * 
	 * @@param element
	 *            the semantic element
	 * @@param the
	 *            connections source editpart
	 * @@param the
	 *            connections target editpart
	 * @@param index
	 *            semantic elements position
	 */
	protected final Edge createConnectionView(EObject connection, int index) {
		EditPart sep = getSourceEditPartFor(connection);
		EditPart tep = getTargetEditPartFor(connection);
		if (!canCreateConnection(sep, tep, connection)) {
			return null;
		}

		View sView = (View) sep.getModel();
		View tView = (View) tep.getModel();
		Edge model = null;
		String factoryHint = getDefaultFactoryHint();
		IAdaptable elementAdapter = new CanonicalElementAdapter(connection,
			factoryHint);
		CreateConnectionViewRequest ccr = getCreateConnectionViewRequest(
			elementAdapter, getFactoryHint(elementAdapter, factoryHint), index);

		ccr.setType(RequestConstants.REQ_CONNECTION_START);
		ccr.setSourceEditPart(sep);
		getCreateViewCommand(ccr); // sep.getCommand(ccr); //prime the command
		ccr.setTargetEditPart(tep);
		ccr.setType(RequestConstants.REQ_CONNECTION_END);
		Command cmd = getCreateViewCommand(ccr); // tep.getCommand(ccr);
		if (cmd != null && cmd.canExecute()) {
			List viewAdapters = new ArrayList();
			viewAdapters.add(new EObjectAdapter(((View) host().getModel())
				.getDiagram()));
			viewAdapters.add(new EObjectAdapter(sView));
			viewAdapters.add(new EObjectAdapter(tView));

			SetViewMutabilityCommand.makeMutable(viewAdapters).execute();

			executeCommand(cmd);
			IAdaptable adapter = (IAdaptable) ccr.getNewObject();
			SetViewMutabilityCommand.makeMutable(adapter).execute();
			model = (Edge) adapter.getAdapter(Edge.class);
			if (model == null) {
				String eMsg = NLS
					.bind(
						DiagramUIMessages.CanonicalEditPolicy_create_view_failed_ERROR_,
						connection);
				IllegalStateException ise = new IllegalStateException(eMsg);
				Log.error(DiagramUIPlugin.getInstance(), IStatus.ERROR, eMsg,
					ise);
				throw ise;
			}
		}
		return model;
	}

	/**
	 * Calculates the <code>EditPart</code> that this connection element is
	 * connected to at it's target.
	 * 
	 * @@param connection
	 *            the <code>EObject</code> element that we are canonical
	 *            trying to create a view for.
	 * @@return the <code>EditPart</code> that is the source of the
	 *         <code>View</code> we want to create
	 */
	protected EditPart getTargetEditPartFor(EObject connection) {
		EObject tel;
		EditPart tep;
		tel = getTargetElement(connection);
		tep = getEditPartFor(tel, connection);
		return tep;
	}

	/**
	 * Calculates the <code>EditPart</code> that this connection element is
	 * connected to at it's source.
	 * 
	 * @@param connection
	 *            the <code>EObject</code> element that we are canonical
	 *            trying to create a view for.
	 * @@return the <code>EditPart</code> that is the target of the
	 *         <code>View</code> we want to create
	 */
	protected EditPart getSourceEditPartFor(EObject connection) {
		EObject sel;
		EditPart sep;
		sel = getSourceElement(connection);
		sep = getEditPartFor(sel, connection);
		return sep;
	}

	/**
	 * Forwards the supplied request to its source if the target is
	 * <tt>null</tt>; otherwise it is forwarded to the target. Forwards the
	 * supplied request to the editpart's <code>host</code>.
	 * 
	 * @@param request
	 *            a <code>CreareConnecgtorViewRequest</code>
	 * @@return Command to create the views in the request
	 */
	protected Command getCreateViewCommand(CreateRequest request) {
		if (request instanceof CreateConnectionViewRequest) {
			CreateConnectionViewRequest ccr = (CreateConnectionViewRequest) request;
			EditPart ep = ccr.getTargetEditPart() == null ? ccr
				.getSourceEditPart()
				: ccr.getTargetEditPart();
			return ep.getCommand(request);
		}

		return super.getCreateViewCommand(request);
	}

	/**
	 * Return a create view request.
	 * 
	 * @@param descriptor
	 *            a {@@link CreateViewRequest.ViewDescriptor}.
	 * @@return a create request
	 */
	protected CreateViewRequest getCreateViewRequest(
			CreateViewRequest.ViewDescriptor descriptor) {
		return getCreateViewRequest(Collections.singletonList(descriptor));
	}

	/**
	 * Return a create view request. The request's location is set to
	 * {@@link ICanonicalShapeCompartmentLayout#UNDEFINED}.
	 * 
	 * @@param descriptors
	 *            a {@@link CreateViewRequest.ViewDescriptor} list.
	 * @@return a create request
	 */
	protected CreateViewRequest getCreateViewRequest(List descriptors) {
		CreateViewRequest cvr = super.getCreateViewRequest(descriptors);
		Point loc = ICanonicalShapeCompartmentLayout.UNDEFINED.getLocation();
		cvr.setLocation(loc);
		return cvr;
	}

	/**
	 * Return a create connection view request.
	 * 
	 * @@param elementAdapter
	 *            semantic element
	 * @@param viewKind
	 *            type of view to create
	 * @@param hint
	 *            factory hint
	 * @@param index
	 *            index
	 * @@return a create <i>non-persisted </i> view request
	 */
	private CreateConnectionViewRequest getCreateConnectionViewRequest(
			IAdaptable elementAdapter, String hint, int index) {
		return new CreateConnectionViewRequest(getConnectionViewDescriptor(
			elementAdapter, hint, index));
	}

	/**
	 * Return a connection view descriptor.
	 * 
	 * @@param elementAdapter
	 *            semantic element
	 * @@param hint
	 *            factory hint
	 * @@param index
	 *            index
	 * @@return a create <i>non-persisted </i> connection view descriptor
	 */
	private ConnectionViewDescriptor getConnectionViewDescriptor(
			IAdaptable elementAdapter, String hint, int index) {
		return new ConnectionViewDescriptor(elementAdapter, hint, index, false,
			((IGraphicalEditPart) getHost()).getDiagramPreferencesHint());
	}

	/**
	 * Updates the set of connection views so that it is in sync with the
	 * semantic connections. This method is called in response to notification
	 * from the model.
	 * <P>
	 * The update is performed by comparing the exising connection views with the
	 * set of semantic connections returned from {@@link #getSemanticConnections()}.
	 * Views whose semantic connection no longer exists or whose semantic
	 * connection ends are <tt>null</tt> are
	 * {@@link org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy#deleteViews(Iterator) removed}.
	 * New semantic children have their View
	 * {@@link  #createEdge(IElement, EditPart, EditPart, int, String)
	 * created}. Subclasses must override <code>getSemanticConnections()</code>.
	 * <P>
	 * This refresh routine will not reorder the view list to ensure both it and
	 * the semantic children are in the same order since it is possible that
	 * this editpolicy will only handle a specifc subset of the host's views.
	 * 
	 * This method should <em>not</em> be overridden.
	 * 
	 * @@return <code>List</code> of new <code>IAdaptable</code> objects that
	 *         adapt to <code>View</code> objects that were created as a
	 *         result of the synchronization
	 */
	protected List refreshSemanticConnections() {
		Edge viewChild;
		EObject semanticChild;
		//
		// current connection views
		Collection viewChildren = getConnectionViews();
		Collection semanticChildren = new HashSet();
		semanticChildren.addAll(getSemanticConnectionsList());

		List orphaned = cleanCanonicalSemanticChildren(viewChildren,
			semanticChildren);
		//
		// delete all the remaining views
		deleteViews(orphaned.iterator());

		//
		// create a view for each remaining semantic element.
		List viewDescriptors = new ArrayList();
		Iterator semanticChildrenIT = semanticChildren.iterator();
		while (semanticChildrenIT.hasNext()) {
			semanticChild = (EObject) semanticChildrenIT.next();
			viewChild = createConnectionView(semanticChild, ViewUtil.APPEND);
			if (viewChild != null) {
				viewDescriptors.add(new EObjectAdapter(viewChild)); 
			}
		}
		
		makeViewsMutable(viewDescriptors);

		// now refresh all the connection containers to update the editparts
		HashSet ends = new HashSet();
		ListIterator li = viewDescriptors.listIterator();
		while (li.hasNext()) {
			IAdaptable adaptable = (IAdaptable) li.next();
			Edge edge = (Edge) adaptable.getAdapter(Edge.class);
			EditPart sourceEP = getEditPartFor(edge.getSource(), edge);
			if (sourceEP != null) {
				ends.add(sourceEP);
			}
			EditPart targetEP = getEditPartFor(edge.getTarget(), edge);
			if (targetEP != null) {
				ends.add(targetEP);
			}
		}

		for (Iterator iter = ends.iterator(); iter.hasNext();) {
			EditPart end = (EditPart) iter.next();
			end.refresh();
		}

		return viewDescriptors;
	}
    
    protected boolean isOrphaned(Collection semanticChildren, View view) {
        EObject element = view.getElement();
        if (semanticChildren.contains(element)) {
            if (view instanceof Edge) {
                Edge edge = (Edge) view;
                if (edge.getSource().getElement() != getSourceElement(element)
                    || edge.getTarget().getElement() != getTargetElement(element))
                    return true;
            }
        } else
            return true;
        return false;
    }
    

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy#refreshSemantic()
	 */
	protected void refreshSemantic() {
		List createdViews = super.refreshSemanticChildren();
		List createdConnectionViews = refreshSemanticConnections();

		if (createdViews.size() > 1) {
			// perform a layout of the container
			DeferredLayoutCommand layoutCmd = new DeferredLayoutCommand(host().getEditingDomain(),
				createdViews, host());
			executeCommand(new ICommandProxy(layoutCmd));
		}

		List allViews = new ArrayList(createdConnectionViews.size()
			+ createdViews.size());
		allViews.addAll(createdViews);
		allViews.addAll(createdConnectionViews);
		makeViewsImmutable(allViews);
	}

	/**
	 * Return <tt>true</tt> if this editpolicy should try and delete the
	 * supplied view; otherwise <tt>false<tt>.  
	 * The default behaviour is to return <tt>true</tt> if the view's semantic element is <tt>null</tt>.
	 * <P>
	 * Subclasses should override this method to ensure the correct behaviour.
	 * @@return  <code>view.resolveSemanticElement() == null</code>
	 */
	protected boolean shouldDeleteView(View view) {
		return ViewUtil.resolveSemanticElement(view) == null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy#postProcessRefreshSemantic(java.util.List)
	 */
	protected void postProcessRefreshSemantic(List viewDescriptors) {
		makeViewsMutable(viewDescriptors);

		super.postProcessRefreshSemantic(viewDescriptors);
	}

	/**
	 * Return the list of connections between elements contained within the host
	 * compartment. 
	 * 
	 * @@return list of <code>Edge</code>s.
	 */
	protected Collection getConnectionViews() {
		Collection children = getViewChildren();
		Set connections = new HashSet();
		if (getHost() instanceof IGraphicalEditPart) {
			IGraphicalEditPart gep = (IGraphicalEditPart)getHost();
			getConnectionViews(connections, gep.getNotationView(), children);
		}
		
		return connections;
	}
	
	/**
	 * Add all connections that are attached to the given node and any of it's
	 * children.
	 * 
	 * @@param connections
	 * @@param node
	 */
	private void getConnectionViews(Set connections, View view, Collection viewChildren ) {
		IGraphicalEditPart gep = (IGraphicalEditPart)getHost();
		View hostView = gep.getNotationView();
		if (hostView != view) {
			if (!shouldCheckForConnections(view, viewChildren))
				return;
		}
		
		Iterator sourceIter = view.getSourceEdges().listIterator();
		while (sourceIter.hasNext()) {
			Edge sourceEdge = (Edge)sourceIter.next();
			if (shouldIncludeConnection(sourceEdge, viewChildren))
				connections.add(sourceEdge);
		}
		
		Iterator targetIter = view.getTargetEdges().listIterator();
		while (targetIter.hasNext()) {
			Edge targetEdge = (Edge)targetIter.next();
			if (shouldIncludeConnection(targetEdge, viewChildren))
				connections.add(targetEdge);
		}
		
		List children = view.getChildren();
		Iterator iter = children.listIterator();
		while (iter.hasNext()) {
			View viewChild = (View)iter.next();
			if (viewChild instanceof Node) {
				getConnectionViews(connections, viewChild, viewChildren );
			}
		}
	}

	/**
	 * Determines if a given view should be checked to see if any attached connections should be considered
	 * by the canonical synchronization routine.  By default it will consider views that are 2 levels deep from the
	 * container in order to allow for connections that are attached to border items on children views in the 
	 * container.
	 * 
	 * @@param view a <code>View</code> to check to see if attached connections should be considered.
	 * @@param viewChildren a <code>Collection</code> of view children of the host notation view, that can be used
	 * as a context to determine if the given view's attached connections should be considered.
	 * @@return a <code>boolean</code> <code>true</code> if connections on the view are used as part of the 
	 * canonical synchronization.  <code>false</code> if the view's attached connections are to be ignored.
	 */
	protected boolean shouldCheckForConnections(View view, Collection viewChildren) {
		return (view != null && 
			(viewChildren.contains(view) || viewChildren.contains(view.eContainer())));
	}
	
	/**
	 * Called by {@@link #getConnectionViews()} to determine if the underlying
	 * shape compartment is responsible for the supplied connection. By default,
	 * the following conditition must be met for the connection to be accepted:
	 * <UL>
	 * <LI> its source must not be null.
	 * <LI> its target must not be null.
	 * <LI> the shape compartment contains the source (or the source's container
	 * view).
	 * <LI> the shape compartment contains the target (or the target's container
	 * view). </LI>
	 * 
	 * @@param connection
	 *            the connection view
	 * @@param children
	 *            underlying shape compartment's children.
	 * @@return <tt>false</tt> if supplied connection should be ignored;
	 *         otherwise <tt>true</tt>.
	 */
	protected boolean shouldIncludeConnection(Edge connection, Collection children) {
		return shouldCheckForConnections(connection.getSource(), children) ||
				shouldCheckForConnections(connection.getTarget(), children);
	}
	
	/**
	 * Return {@@link UnexecutableCommand} if the editpolicy is enabled and a
	 * {@@link DropObjectsRequest} is passed as an argument and its objects are
	 * contained in the list of semantic children.
	 */
	public Command getCommand(Request request) {
		if (understandsRequest(request)) {
			if (isEnabled() && request instanceof DropObjectsRequest) {
				return getDropCommand((DropObjectsRequest) request);
			}
		}
		return super.getCommand(request);
	}

	/**
	 * gets an <code>UnexecutableCommand</code> if the droprequest cannot be
	 * supported; the semantic host cannot contain the element being dropped or
	 * this editpolicy is enabled and it already contains of view for the
	 * elements being dropped.
	 * 
	 * @@param request
	 *            the request to use
	 * @@return <code>Command</code>
	 */
	protected Command getDropCommand(DropObjectsRequest request) {
		boolean enabled = isEnabled();
		List children = getSemanticChildrenList();
		Iterator dropElements = request.getObjects().iterator();
		while (dropElements.hasNext()) {
			Object dropElement = dropElements.next();
			// Allow diagram links on Canonical shapes compartments
			if (allowDropElement(dropElement))
				continue;
			if (dropElement instanceof EObject
				&& preventDropElement(dropElement)) {
				return UnexecutableCommand.INSTANCE;
			}
			boolean containsElement = children.contains(dropElement);
			if (enabled) {
				if (containsElement || preventDropElement(dropElement)) {
					return UnexecutableCommand.INSTANCE;
				}
			}
		}
		return null;
	}

	/**
	 * Return <tt>false</tt> if the supplied element should be prevented from
	 * being dropped into this editpolicy's host; otherwise <tt>true</tt>.
	 * This method is called by {@@link #getDropCommand(DropObjectsRequest)} if
	 * this editpolicy is enabled.
	 * 
	 * @@param dropElement
	 *            object being dropped.
	 * @@return <code>PackageUtil.canContain(getSemanticHost().eClass(), ((EObject)dropElement).eClass(), false)</code>
	 *         if the supplied elemnt is an <code>EObject</code>; otherwise
	 *         <tt>false</tt>
	 */
	protected boolean preventDropElement(Object dropElement) {
		return dropElement instanceof EObject ? !PackageUtil.canContain(
			getSemanticHost().eClass(), ((EObject) dropElement).eClass(), false)
			: false;
	}

    /**
     * Return <tt>true</tt> if the supplied element should be able to be
     * dropped into this editpolicy's host; otherwise <tt>false</tt>. This
     * method is called by {@@link #getDropCommand(DropObjectsRequest)} if this
     * editpolicy is enabled. Returning false will necessarily prevent the
     * element from being dropped; the <code>getDropCommand</code> method will
     * also invoke <code>preventDropElement</code>.
     * 
     * @@param dropElement
     *            object being dropped.
     * @@return true if dropping the supplied element is supported, false
     *         otherwise.
     */
    protected boolean allowDropElement(Object dropElement) {
        return dropElement instanceof Diagram;
    }
    
	/**
	 * Understands the following:
	 * <UL>
	 * <LI>{@@link DropObjectsRequest}
	 * <LI>{@@link RequestConstants#REQ_DROP_OBJECTS}
	 * <LI>{@@link org.eclipse.gef.RequestConstants#REQ_CREATE}
	 * </UL>
	 */
	public boolean understandsRequest(Request req) {
		return (RequestConstants.REQ_DROP_OBJECTS.equals(req.getType())
			|| req instanceof DropObjectsRequest || RequestConstants.REQ_CREATE
			.equals(req.getType())) ? true
			: super.understandsRequest(req);
	}

    /**
     * Determines if this editpolicy would create a view for the supplied 
     * semantic element.  The default implementation will return <tt>true</tt>
     * if the supplied <tt>eObject</tt> is contained in {@@link #getSemanticConnectionsList()}.
     * @@param eObject a semantic element
     * @@return <tt>true</tt> if this policy would create a view; 
     * <tt>false</tt> otherwise.
     */
    public boolean canCreate( EObject eObject ) {
        return super.canCreate(eObject) || getSemanticConnectionsList().contains(eObject);
    }

}
@


1.23
log
@[111892] gmf_head crevells 071121 Group/Ungroup support
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2007 IBM Corporation and others.
d770 12
@


1.22
log
@[170328]  gmf_head mmostafa 070112 Canonical Connection Edit Policy does not refresh correctly
@
text
@d38 1
d128 10
a137 2

				return sep.getParent().getEditPolicy(
d139 1
a139 1
					&& tep.getParent().getEditPolicy(
@


1.22.2.1
log
@[111892] gmf_head crevells 070518 First milestone of group/ungroup support (painting issues when grouping shapes with border items)
@
text
@a37 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.GroupEditPart;
d128 1
a128 10
                EditPart sourceParent = sep.getParent();
                while (sourceParent instanceof GroupEditPart) {
                    sourceParent = sourceParent.getParent();
                }
                EditPart targetParent = sep.getParent();
                while (targetParent instanceof GroupEditPart) {
                    targetParent = targetParent.getParent();
                }
				
                return sourceParent.getEditPolicy(
d130 1
a130 1
					&& targetParent.getEditPolicy(
@


1.21
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
d505 15
a519 1

@


1.20
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d681 1
a681 1
			if (dropElement instanceof Diagram)
d715 17
@


1.20.2.1
log
@Bugzilla#148705 gmf_R1_0_maintenance cmahoney 060717 CanonicalConnectionEditPolicy too restrictive of drag-and-drop for links
@
text
@d681 1
a681 1
			if (allowDropElement(dropElement))
a714 17
    /**
     * Return <tt>true</tt> if the supplied element should be able to be
     * dropped into this editpolicy's host; otherwise <tt>false</tt>. This
     * method is called by {@@link #getDropCommand(DropObjectsRequest)} if this
     * editpolicy is enabled. Returning false will necessarily prevent the
     * element from being dropped; the <code>getDropCommand</code> method will
     * also invoke <code>preventDropElement</code>.
     * 
     * @@param dropElement
     *            object being dropped.
     * @@return true if dropping the supplied element is supported, false
     *         otherwise.
     */
    protected boolean allowDropElement(Object dropElement) {
        return dropElement instanceof Diagram;
    }
    
@


1.20.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.19
log
@bugzilla 128167 gmf-head mmostafa 060525 Mapping of semantic elements to editparts doesn't work
@
text
@d36 1
a36 1
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
d520 1
a520 1
			executeCommand(new EtoolsProxyCommand(layoutCmd));
@


1.18
log
@Bugzilla#109422 gmf_head cmahoney 060418 Remove deprecated API
@
text
@a26 1
import org.eclipse.emf.ecore.xmi.XMLResource;
d49 1
d155 1
a155 1
					.findEditPartsForElement(((XMLResource) element.eResource()).getID(element),
d166 1
a166 1
							.findEditPartsForElement(((XMLResource) element.eResource()).getID(element),
@


1.17
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d588 1
a588 1
			if (shouldIncludeConnection(sourceEdge, (List)viewChildren))
d595 1
a595 1
			if (shouldIncludeConnection(targetEdge, (List)viewChildren))
a650 26
	 * Called by {@@link #getConnectionViews()} to determine if the underlying
	 * shape compartment is responsible for the supplied connection. By default,
	 * the following conditition must be met for the connection to be accepted:
	 * <UL>
	 * <LI> its source must not be null.
	 * <LI> its target must not be null.
	 * <LI> the shape compartment contains the source (or the source's container
	 * view).
	 * <LI> the shape compartment contains the target (or the target's container
	 * view). </LI>
	 * 
	 * @@param connection
	 *            the connection view
	 * @@param children
	 *            underlying shape compartment's children.
	 * @@return <tt>false</tt> if supplied connection should be ignored;
	 *         otherwise <tt>true</tt>.
	 * @@deprecated clients should override {@@link CanonicalConnectionEditPolicy#shouldIncludeConnection(Edge, Collection) instead
	 * 				deprecated on Dec 22nd / 2005
	 * 				to be deleted on Jan 30th / 2006
	 */
	protected boolean shouldIncludeConnection(Edge connection, List children) {
		return shouldIncludeConnection(connection, (Collection)children);
	}
	
	/**
@


1.16
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d27 1
d51 1
a51 1
import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
d155 1
a155 1
					.findEditPartsForElement(EObjectUtil.getID(element),
d166 1
a166 1
							.findEditPartsForElement(EObjectUtil.getID(element),
d731 1
a731 1
	 * @@return <code>EObjectUtil.canContain(getSemanticHost(), ((EObject)dropElement).eClass(), false)</code>
d736 2
a737 2
		return dropElement instanceof EObject ? !EObjectUtil.canContain(
			getSemanticHost(), ((EObject) dropElement).eClass(), false)
@


1.15
log
@bugzilla 117592 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@d517 1
a517 1
			DeferredLayoutCommand layoutCmd = new DeferredLayoutCommand(
@


1.14
log
@bugzilla 117592 gmf-head mmostafa 060201 CanonicalConnectionEditPolicy makes diagram dirty when creating edge if source is non-transient
@
text
@d70 1
a70 9
	 * <P>
	 * Sample implementation - Region.
	 * 
	 * <pre>
	 *   IUML2Region regions = (IUML2Region)resolveSemanticElement();
	 *   return regions == null
	 *   ? Collections.EMPTY_LIST
	 *   : regions.getTransitions();
	 *   @@return IElements list
d76 3
a78 11
	 * Return the supplied relationship's source connection.
	 * <P>
	 * Sample implementation - a transition element <BR>
	 * 
	 * <pre>
	 * return ProxyUtil.resolve((InternalEObject) ((IUML2Transition) relationship)
	 * 	.getSource());
	 * </pre>
	 * 
	 * @@param relationship
	 *            semantic connection
d83 1
a83 8
	 * Return the supplied relationship's target connection.
	 * <P>
	 * Sample implementation - a transition element <BR>
	 * 
	 * <pre>
	 * return ProxyUtil.resolve((InternalEObject) ((IUML2Transition) relationship)
	 * 	.getTarget());
	 * </pre>
d85 2
a86 2
	 * @@param relationship
	 *            semantic connection
@


1.13
log
@Bugzilla#123313 gmf_head cmahoney 060120 Making DiagramUIPlugin, DiagramUIStatusCodes, and DiagramUIDebugOptions internal
@
text
@a297 19
		//
		// I do not think that the following hack is necessary. The root
		// of the problem is that AbstractConnectorView#setSourceView() and
		// #setTargetView() are not persisting the source and target views
		// It used to but it was removed during a refactoring wave
		// TODO - remove hack.
		/*
		 * This is a temporary fix to the problem that if the source or the
		 * targetedit part is persisted the set connection ends command will
		 * modify the source and targets notational element by adding an edge
		 * there. For Now if either the source or the target is persisted this
		 * will create a persisted connection view.
		 */
		if (!ViewUtil.isTransient(sView) || !ViewUtil.isTransient(tView)) {
			CreateConnectionViewRequest.ConnectionViewDescriptor descriptor = ccr
				.getConnectionViewDescriptor();
			descriptor.setPersisted(true);
		}

@


1.12
log
@bugzilla 122028 gmf-head sshaw 051223 CanonicalConnectionEditPolicy fails with class cast exception for the diagram
@
text
@a34 1
import org.eclipse.gmf.runtime.diagram.ui.DiagramUIPlugin;
d41 1
@


1.11
log
@bugzilla 121945 gmf_head sshaw 051222 CanonicalConnectionEditPolicy#getConnectorViews has wrong assumptions
@
text
@d605 1
a605 2
			Node node = (Node)gep.getNotationView();
			getConnectionViews(connections, node, children);
d618 1
a618 1
	private void getConnectionViews(Set connections, Node node, Collection viewChildren ) {
d621 2
a622 2
		if (hostView != node) {
			if (!shouldCheckForConnections(node, viewChildren))
d626 1
a626 1
		Iterator sourceIter = node.getSourceEdges().listIterator();
d633 1
a633 1
		Iterator targetIter = node.getTargetEdges().listIterator();
d640 1
a640 1
		List children = node.getChildren();
d645 1
a645 1
				getConnectionViews(connections, (Node)viewChild, viewChildren );
@


1.10
log
@bugzilla 118836 gmf-head sshaw 051207 CanonicalConnectionEditPolicy should delete orphans before creating new ones
@
text
@d21 1
d53 1
a112 7
	/** Returns the diagram's connection views. */
	private List getDiagramConnections() {
		Diagram dView = ((View) host().getModel()).getDiagram();
		return dView == null ? Collections.EMPTY_LIST
			: new ArrayList(dView.getEdges());
	}

d596 1
a596 3
	 * compartment. Subclasses should override
	 * {@@link #shouldIncludeConnection(Edge, List)} to modify the returned
	 * collection's contents.
d598 1
a598 1
	 * @@return list of <code>IConnectionView</code>s.
d601 46
a646 8
		Collection retval = new HashSet();
		List children = getViewChildren();
		Iterator connections = getDiagramConnections().iterator();
		while (connections.hasNext()) {
			Edge connection = (Edge) connections.next();
			if (connection.getSource() != null && connection.getTarget() != null
				&& shouldIncludeConnection(connection, children)) {
				retval.add(connection);
a648 1
		return retval;
d652 41
d710 3
d715 1
a715 8
		View src = connection.getSource();
		View target = connection.getTarget();
		//
		// testing the src/tgt containerview in case the src/tgt are
		// some type of gate view.
		return ((src != null && target != null) && (children.contains(src)
			|| children.contains(src.eContainer()) || children.contains(target) || children
			.contains(target.eContainer())));
d717 1
a717 1

@


1.9
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d510 3
d525 1
a525 4
		//
		// delete all the remaining views
		deleteViews(orphaned.iterator());

@


1.8
log
@bugzilla 117563 gmf-head sshaw 051123 CanonicalConnectionEditPolicy should use INodeEditPart instead of ShapeNodeEditPart
@
text
@a13 1
import java.text.MessageFormat;
d41 1
a41 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d53 1
d342 4
a345 5
				String eMsg = MessageFormat
					.format(
						DiagramResourceManager
							.getI18NString("CanonicalEditPolicy.create.view.failed_ERROR_"),//$NON-NLS-1$
						new Object[] {connection});
@


1.7
log
@Bugzilla#113157 gmf_head cmahoney 051104 Updating tutorial guides and some comments with name changes
@
text
@d40 1
a40 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
d183 1
a183 1
						ShapeNodeEditPart.class);
d194 1
a194 1
								ShapeNodeEditPart.class);
d520 1
a520 1
				viewDescriptors.add(new EObjectAdapter(viewChild)); //$NON-NLS-1$
@


1.6
log
@ bugzilla 114992  gmf-head sshaw 051104 Connectors not showing up on diagram open
@
text
@d482 1
a482 1
	 * set of semantic connections returned from {@@link #getSemanticConnectors()}.
d488 1
a488 1
	 * created}. Subclasses must override <code>getSemanticConnectors()</code>.
d561 1
a561 1
		List createdConnectorViews = refreshSemanticConnections();
d570 1
a570 1
		List allViews = new ArrayList(createdConnectorViews.size()
d573 1
a573 1
		allViews.addAll(createdConnectorViews);
d606 1
a606 1
	 * @@return list of <code>IConnectorView</code>s.
@


1.5
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d123 13
@


1.4
log
@bugzilla 111816 gmf-head sshaw 051006 CanonicalConnectionEditPolicy NPE when semantic  source or target is null
@
text
@d42 1
a42 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d44 1
a44 1
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectorViewRequest;
d48 1
a48 1
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectorViewRequest.ConnectorViewDescriptor;
d57 1
a57 1
 * This implementation will manage connectors owned by the semantic host.
d92 1
a92 1
	 *            semantic connector
d107 1
a107 1
	 *            semantic connector
d111 1
a111 1
	/** Returns the diagram's connector views. */
d124 1
a124 1
	 * Return <tt>true</tt> if the connector should be drawn between the
d128 1
a128 1
	 *            connector's source element
d130 1
a130 1
	 *            connector's target element
d135 1
a135 1
			EObject connector) {
d262 1
a262 1
	 * Creates a connector view facde element for the supplied semantic element.
d268 1
a268 1
	 *            connectors source editpart
d270 1
a270 1
	 *            connectors target editpart
d287 1
a287 1
		CreateConnectorViewRequest ccr = getCreateConnectionViewRequest(
d298 1
a298 1
		 * targetedit part is persisted the set connector ends command will
d301 1
a301 1
		 * will create a persisted connector view.
d304 2
a305 2
			CreateConnectorViewRequest.ConnectorViewDescriptor descriptor = ccr
				.getConnectorViewDescriptor();
d331 1
a331 1
						PresentationResourceManager
d347 1
a347 1
	 * @@param connector
d353 1
a353 1
	protected EditPart getTargetEditPartFor(EObject connector) {
d356 2
a357 2
		tel = getTargetElement(connector);
		tep = getEditPartFor(tel, connector);
d365 1
a365 1
	 * @@param connector
d371 1
a371 1
	protected EditPart getSourceEditPartFor(EObject connector) {
d374 2
a375 2
		sel = getSourceElement(connector);
		sep = getEditPartFor(sel, connector);
d389 2
a390 2
		if (request instanceof CreateConnectorViewRequest) {
			CreateConnectorViewRequest ccr = (CreateConnectorViewRequest) request;
d428 1
a428 1
	 * Return a create connector view request.
d440 1
a440 1
	private CreateConnectorViewRequest getCreateConnectionViewRequest(
d442 1
a442 1
		return new CreateConnectorViewRequest(getConnectionViewDescriptor(
d447 1
a447 1
	 * Return a connector view descriptor.
d455 1
a455 1
	 * @@return a create <i>non-persisted </i> connector view descriptor
d457 1
a457 1
	private ConnectorViewDescriptor getConnectionViewDescriptor(
d459 1
a459 1
		return new ConnectorViewDescriptor(elementAdapter, hint, index, false,
d464 2
a465 2
	 * Updates the set of connector views so that it is in sync with the
	 * semantic connectors. This method is called in response to notification
d468 4
a471 4
	 * The update is performed by comparing the exising connector views with the
	 * set of semantic connectors returned from {@@link #getSemanticConnectors()}.
	 * Views whose semantic connector no longer exists or whose semantic
	 * connector ends are <tt>null</tt> are
d474 1
a474 1
	 * {@@link  #createConnectorView(IElement, EditPart, EditPart, int, String)
d491 1
a491 1
		// current connector views
d516 1
a516 1
		// now refresh all the connector containers to update the editparts
d588 1
a588 1
	 * Return the list of connectors between elements contained within the host
d598 6
a603 6
		Iterator connectors = getDiagramConnections().iterator();
		while (connectors.hasNext()) {
			Edge connector = (Edge) connectors.next();
			if (connector.getSource() != null && connector.getTarget() != null
				&& shouldIncludeConnection(connector, children)) {
				retval.add(connector);
d611 2
a612 2
	 * shape compartment is responsible for the supplied connector. By default,
	 * the following conditition must be met for the connector to be accepted:
d621 2
a622 2
	 * @@param connector
	 *            the connector view
d625 1
a625 1
	 * @@return <tt>false</tt> if supplied connector should be ignored;
d628 3
a630 3
	protected boolean shouldIncludeConnection(Edge connector, List children) {
		View src = connector.getSource();
		View target = connector.getTarget();
@


1.3
log
@bugzilla 109666 gmf-head sshaw 050915 Canonical ConnectionEditPolicy should provide a filtering mechanism
@
text
@d165 1
a165 1
		if (!(element instanceof View)) {
@


1.2
log
@bugzilla 109666 gmf-head sshaw 050915 Canonical ConnectionEditPolicy should provide a filtering mechanism
@
text
@d158 4
d164 2
a165 3
	protected final EditPart getEditPartFor(Object element) {
		if (element instanceof EObject && !(element instanceof View)) {
			EObject eObject = (EObject) element;
d169 1
a169 1
					.findEditPartsForElement(EObjectUtil.getID(eObject),
d175 2
a176 2
					EObject container = ((EObject) element).eContainer();
					EditPart containerEP = getEditPartFor(container);
d180 1
a180 1
							.findEditPartsForElement(EObjectUtil.getID(eObject),
d187 1
a187 1
				return findEditPartForElement(element, parts);
d201 4
d211 1
a211 1
	protected EditPart findEditPartForElement(Object element, List parts) {
d357 1
a357 1
		tep = getEditPartFor(tel);
d375 1
a375 1
		sep = getEditPartFor(sel);
d522 1
a522 1
			EditPart sourceEP = getEditPartFor(edge.getSource());
d526 1
a526 1
			EditPart targetEP = getEditPartFor(edge.getTarget());
@


1.1
log
@bugzilla 109407 gmf-head sshaw 050913 CanonicalEditPolicy hierarchy consolidation
@
text
@d157 1
a157 1
	 *            an <tt>View</tt> or <tt>IElement</tt> instance.
d184 1
a184 9
				EditPart ancestor = getHost();
				while (ancestor != null) {
					EditPart ep = reachForEditPartWithAncestor(parts, ancestor);
					if (ep != null)
						return ep;
					ancestor = ancestor.getParent();
				}

				return null;
d192 26
@

