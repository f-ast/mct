head	1.7;
access;
symbols
	v20081023-2107:1.6.2.1
	v20081022-1925:1.7
	v20081022-1005:1.6.2.1
	v20081020-0700:1.7
	v20080917-1925:1.7
	v20080916-2008:1.6.2.1
	v20080911-1728:1.7
	v20080911-1506:1.6.2.1
	v20080910-1520:1.7
	v20080910-1510:1.6.2.1
	v20080903-1520:1.7
	v20080903-1510:1.6.2.1
	v20080813-1510:1.6.2.1
	v20080811-1546:1.7
	v20080731-1520:1.7
	v20080725-1738:1.6.2.1
	v20080723-2246:1.7
	v20080723-2232:1.6.2.1
	v20080723-1700:1.6.2.1
	v20080722-1827:1.7
	v20080718-1700:1.6.2.1
	v20080718-1731:1.7
	v20080716-1600:1.6.2.1
	v20080716-1642:1.7
	R2_1_maintenance:1.6.0.2
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080610-1132:1.6
	v20080603-1553:1.6
	v20080527-1255:1.6
	v20080527-1151:1.5.4.1
	v20080516-1748:1.6
	v20080516-1143:1.6
	v20080512-1200:1.6
	v20080503-1740:1.6
	v20080501-2127:1.5.4.1
	v20080501-1739:1.6
	m20080429-1543:1.5.4.1
	v20080425-1959:1.6
	v20080417-1610:1.6
	v20080407-2250:1.6
	v20080407-0930:1.6
	v20080404-1111:1.6
	v20080328-1605:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080201-2010:1.6
	v20080201-0201:1.5.4.1
	v20080118-1129:1.5.4.1
	v20080114-2222:1.5.4.1
	v20080114-1111:1.6
	v20080107-1111:1.6
	v20071222-1111:1.6
	v20071214-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.5.4.1
	v20071112-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.5
	v20070915-0000:1.5
	v20070903-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.4
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070614-1400:1.5
	v20070608-1300:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070518-1300:1.5
	bugzilla111892_group_support:1.5.0.2
	Root_bugzilla111892_group_support:1.5
	v20070504-1000:1.5
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	v20070202-0200:1.4.2.3
	v20070119-1200:1.4.2.3
	v20070111-0800:1.4.2.2
	v20070105-1200:1.4.2.2
	v20070103-0300:1.5
	M4_20:1.5
	v20061218-1500:1.4.2.1
	v20061218-1200:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061027-1200:1.4.2.1
	v20061013-1330:1.5
	v20061012-1100:1.4.2.1
	v20060925-1700:1.4.2.1
	v20060919-0800:1.4.2.1
	v20060907-1100:1.4
	M1_20:1.4
	v20060831-1500:1.4
	v20060824-1600:1.4
	v20060817-1500:1.4
	v20060810-1700:1.4
	v20060803-1200:1.4
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.7
date	2008.06.24.21.08.32;	author aboyko;	state Exp;
branches;
next	1.6;
commitid	a65486162504567;

1.6
date	2007.11.05.15.24.35;	author ahunter;	state Exp;
branches
	1.6.2.1;
next	1.5;
commitid	25c9472f35b24567;

1.5
date	2006.10.03.15.02.05;	author ahunter;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2006.03.21.20.04.10;	author ldamus;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2005.10.14.20.58.50;	author mmostafa;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.06;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.44;	author sshaw;	state Exp;
branches;
next	;

1.4.2.1
date	2006.09.13.16.43.41;	author ahunter;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2007.01.05.16.24.08;	author ahunter;	state Exp;
branches;
next	1.4.2.3;
commitid	49c6459e7ba84567;

1.4.2.3
date	2007.01.18.19.37.11;	author ahunter;	state Exp;
branches;
next	;
commitid	4f7a45afcc674567;

1.5.4.1
date	2007.11.05.15.44.44;	author ahunter;	state Exp;
branches;
next	;
commitid	3c6a472f3a6c4567;

1.6.2.1
date	2008.06.24.21.10.45;	author aboyko;	state Exp;
branches;
next	;
commitid	ce7486162d54567;


desc
@@


1.7
log
@[237013] gmf_head aboyko 080624 DND on the diagram doesn't work on Linux
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.parts;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.swt.SWTException;
import org.eclipse.swt.dnd.DropTargetEvent;
import org.eclipse.swt.dnd.FileTransfer;

/**
 * Drop target listener to support dropping of image files onto the diagram
 * surface.
 *
 * @@author sshaw
 */
public class ImageFileDropTargetListener
    extends DiagramDropTargetListener {

    /**
     * @@param viewer
     * @@param xfer
     */
    public ImageFileDropTargetListener(EditPartViewer viewer) {
        super(viewer, FileTransfer.getInstance());
    }

    /**
     * This implementation includes in the list only elements that are instances
     * of IElement.
     *
     * @@see org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener#getElementsBeingDropped()
     */
    protected List getObjectsBeingDropped() {
        List<String> filesList = new ArrayList<String>();
        if (getCurrentEvent().data instanceof String[]) {
            insertFileNamesFromStringArray(filesList,
                    (String[]) getCurrentEvent().data);
        } else if (getCurrentEvent().data instanceof IStructuredSelection) {
			Object[] array = ((IStructuredSelection)getCurrentEvent().data).toArray();
			for (int j = 0; j < array.length; j++) {
				if (array[j] instanceof IFile) {
					IFile dropFile = (IFile)array[j];
					filesList.add(dropFile.getLocation().toOSString());
				}
			}
        	
        } else {
        	/*
        	 * No needs to check if transfered data we're looking at is FileTransfer type data.
        	 * This drop target listener is invoked as <code>DelegatingDropAdapter</code>, hence
        	 * if we get here the transfer is supported for the DropTargetEvent#currentDataType 
        	 */
            try {
                Object files = FileTransfer.getInstance().nativeToJava(
                        getCurrentEvent().currentDataType);
                if (files instanceof String[]) {
                    insertFileNamesFromStringArray(filesList, (String[]) files);
                }
            } catch (SWTException e) {
                return null;
            }
        }

        if (filesList.size() > 0) {
            return filesList;
        }

        return null;
    }
        
    private void insertFileNamesFromStringArray(List<String> filesList, String[] fileNames) {
        for (int i = 0; i < fileNames.length; i++) {
            filesList.add(fileNames[i]);
        }
    }
    
    /**
     * This implementation assumes that elements being dropped are instances of
     * IElement.
     *
     */
    public boolean isEnabled(DropTargetEvent event) {

        if (super.isEnabled(event)) {
            Object modelObj = getViewer().getContents().getModel();
            
            if (modelObj instanceof EObject) {
                return true;
            } else if (modelObj instanceof IAdaptable) {
                final EObject target = (EObject) ((IAdaptable) modelObj)
                    .getAdapter(EObject.class);

                // additional check
                if (target == null) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener#isDataTransfered()
	 */
	protected boolean isDataTransfered() {
		/*
		 * The data transfer occurs at the drop time on Linux, hence data is transfered when the request
		 * has some objects that are being dropped.
		 */
		return super.isDataTransfered() && !getDropObjectsRequest().getObjects().isEmpty();
	}

}@


1.6
log
@[169892] gmf-head ahunter 071105 [Linux] ImageFileDropTargetListener does not work on Linux
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2007 IBM Corporation and others.
d9 1
a9 1
 *    IBM Corporation - initial API and implementation 
a21 2
import org.eclipse.jface.util.LocalSelectionTransfer;
import org.eclipse.jface.viewers.ISelection;
a25 1
import org.eclipse.swt.dnd.TransferData;
d30 1
a30 1
 * 
d34 1
a34 9
	extends DiagramDropTargetListener {

	/**
	 * @@param viewer
	 * @@param xfer
	 */
	public ImageFileDropTargetListener(EditPartViewer viewer) {
		super(viewer, FileTransfer.getInstance());
	}
d36 25
a60 25
	/**
	 * This implementation includes in the list only elements that are instances
	 * of IElement.
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener#getElementsBeingDropped()
	 */
	protected List getObjectsBeingDropped() {
		/*  Get the selection from the transfer agent */
		TransferData[] data = getCurrentEvent().dataTypes;
		List fileList = new ArrayList();
		
		for (int i=0; i < data.length; i++) {
			
			if (FileTransfer.getInstance().isSupportedType(data[i])) {
				// FileTransfers from the PE are supported, but an 
				// SWT exception is thrown when using nativeToJava call.
				try {
					Object files = FileTransfer.getInstance().nativeToJava(data[i]);
					if (files instanceof String[]) {
						String[] fileStrings = (String[])files;
						for	(int j=0; j<fileStrings.length; j++)
							fileList.add(fileStrings[j]);
					}				
				} catch (SWTException e) {
					continue;
d63 40
a102 11
		}
		
		if (fileList.size() == 0) {
			ISelection selection = null;
	        
	        if (LocalSelectionTransfer.getTransfer().getSelection() != null) {
	        	selection = LocalSelectionTransfer.getTransfer().getSelection();
	        }
			
			if (selection instanceof IStructuredSelection
	            && !selection.isEmpty()) {
d104 15
a118 18
				/* Get the array of objects in the selection */
				Object[] array = ((IStructuredSelection)selection).toArray();
				for (int j = 0; j < array.length; j++) {
					if (array[j] instanceof IFile) {
						IFile dropFile = (IFile)array[j];
						fileList.add(dropFile.getLocation().toOSString());
					}
				}
			}
			
            return fileList;
		}
		
		if (fileList.size() > 0)
			return fileList;
		
		return null;
	}
d120 2
a121 4
	/**
	 * This implementation assumes that elements being dropped are instances of
	 * IElement.
	 * 
d123 6
a128 22
	public boolean isEnabled(DropTargetEvent event) {

		if (super.isEnabled(event)) {
			Object modelObj = getViewer().getContents().getModel();
			List dropObjects = getDropObjectsRequest().getObjects();
			
			if (modelObj instanceof EObject) {
				return dropObjects != null && !dropObjects.isEmpty();
				
			} else if (modelObj instanceof IAdaptable) {
				final EObject target = (EObject) ((IAdaptable) modelObj)
					.getAdapter(EObject.class);

				// additional check
				if (dropObjects == null || dropObjects.isEmpty()
						|| target == null) {
					return false;
				}
			}
			return true;
		}
		return false;
@


1.6.2.1
log
@[237013] gmf_R2_1_maintenance aboyko 080624 DND on the diagram doesn't work on Linux
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2008 IBM Corporation and others.
d9 1
a9 1
 *    IBM Corporation - initial API and implementation
d22 2
d28 1
d33 1
a33 1
 *
d37 9
a45 1
    extends DiagramDropTargetListener {
d47 25
a71 25
    /**
     * @@param viewer
     * @@param xfer
     */
    public ImageFileDropTargetListener(EditPartViewer viewer) {
        super(viewer, FileTransfer.getInstance());
    }

    /**
     * This implementation includes in the list only elements that are instances
     * of IElement.
     *
     * @@see org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener#getElementsBeingDropped()
     */
    protected List getObjectsBeingDropped() {
        List<String> filesList = new ArrayList<String>();
        if (getCurrentEvent().data instanceof String[]) {
            insertFileNamesFromStringArray(filesList,
                    (String[]) getCurrentEvent().data);
        } else if (getCurrentEvent().data instanceof IStructuredSelection) {
			Object[] array = ((IStructuredSelection)getCurrentEvent().data).toArray();
			for (int j = 0; j < array.length; j++) {
				if (array[j] instanceof IFile) {
					IFile dropFile = (IFile)array[j];
					filesList.add(dropFile.getLocation().toOSString());
d74 11
a84 40
        	
        } else {
        	/*
        	 * No needs to check if transfered data we're looking at is FileTransfer type data.
        	 * This drop target listener is invoked as <code>DelegatingDropAdapter</code>, hence
        	 * if we get here the transfer is supported for the DropTargetEvent#currentDataType 
        	 */
            try {
                Object files = FileTransfer.getInstance().nativeToJava(
                        getCurrentEvent().currentDataType);
                if (files instanceof String[]) {
                    insertFileNamesFromStringArray(filesList, (String[]) files);
                }
            } catch (SWTException e) {
                return null;
            }
        }

        if (filesList.size() > 0) {
            return filesList;
        }

        return null;
    }
        
    private void insertFileNamesFromStringArray(List<String> filesList, String[] fileNames) {
        for (int i = 0; i < fileNames.length; i++) {
            filesList.add(fileNames[i]);
        }
    }
    
    /**
     * This implementation assumes that elements being dropped are instances of
     * IElement.
     *
     */
    public boolean isEnabled(DropTargetEvent event) {

        if (super.isEnabled(event)) {
            Object modelObj = getViewer().getContents().getModel();
d86 18
a103 15
            if (modelObj instanceof EObject) {
                return true;
            } else if (modelObj instanceof IAdaptable) {
                final EObject target = (EObject) ((IAdaptable) modelObj)
                    .getAdapter(EObject.class);

                // additional check
                if (target == null) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
d105 4
a108 2
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener#isDataTransfered()
d110 22
a131 6
	protected boolean isDataTransfered() {
		/*
		 * The data transfer occurs at the drop time on Linux, hence data is transfered when the request
		 * has some objects that are being dropped.
		 */
		return super.isDataTransfered() && !getDropObjectsRequest().getObjects().isEmpty();
@


1.5
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d17 1
d22 3
a30 3
 * @@author sshaw
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.ui.*
 * 
d33 2
d71 22
a92 1
					return null;
a93 1

d95 2
@


1.5.4.1
log
@[169892] gmf-R2_0_maintenance ahunter 071105 [Linux] ImageFileDropTargetListener does not work on Linux
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2007 IBM Corporation and others.
a16 1
import org.eclipse.core.resources.IFile;
a20 3
import org.eclipse.jface.util.LocalSelectionTransfer;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
d27 3
a31 2
 * 
 * @@author sshaw
d68 1
a68 1
					continue;
d70 1
a73 23
		if (fileList.size() == 0) {
			ISelection selection = null;
	        
	        if (LocalSelectionTransfer.getTransfer().getSelection() != null) {
	        	selection = LocalSelectionTransfer.getTransfer().getSelection();
	        }
			
			if (selection instanceof IStructuredSelection
	            && !selection.isEmpty()) {
            
				/* Get the array of objects in the selection */
				Object[] array = ((IStructuredSelection)selection).toArray();
				for (int j = 0; j < array.length; j++) {
					if (array[j] instanceof IFile) {
						IFile dropFile = (IFile)array[j];
						fileList.add(dropFile.getLocation().toOSString());
					}
				}
			}
			
            return fileList;
		}
		
@


1.4
log
@[132692] gmf_head ldamus 060321 ImageFileDropTargetListener.isEnabled() returning false positive
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
@


1.4.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.4.2.2
log
@[166425] gmf_R1_0_maintenance wdiu 070104 FileDiagramDocumentProvider not handling renames of diagram file properly
@
text
@a59 1
                System.out.println("here");
@


1.4.2.3
log
@[166425] gmf_R1_0_maintenance ahunter 070118 Revert change erroniously added from committers workspace
@
text
@d60 1
@


1.3
log
@bugzilla 110316 gmf-head mmostafa 051014 Compiler warning count should be 0 - runtime diagram layer components
@
text
@d89 2
d92 2
a93 1
				return getDropObjectsRequest().getObjects() != null;
a96 1
				List elements = getDropObjectsRequest().getObjects();
d99 2
a100 1
				if (elements == null || target == null) {
a103 1

a105 1

@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d20 1
a25 2
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener;

a83 1
	 * @@see org.eclipse.gef.dnd.TransferDropTargetListener#isEnabled(org.eclipse.swt.dnd.DropTargetEvent)
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

