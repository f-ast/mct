head	1.14;
access;
symbols
	v20081022-1925:1.14
	v20080917-1925:1.14
	v20080911-1728:1.14
	v20080910-1520:1.14
	v20080903-1520:1.14
	v20080731-1520:1.14
	v20080723-2246:1.14
	v20080527-1151:1.12
	v20080501-2127:1.12
	m20080429-1543:1.12
	v20080417-1610:1.13
	v20080407-2250:1.13
	v20080407-0930:1.12
	v20080404-1111:1.12
	v20080328-1605:1.12
	v20080322-0000:1.12
	v20080222-1200:1.12
	v20080201-2010:1.12
	v20080201-0201:1.12
	v20080118-1129:1.12
	v20080114-2222:1.12
	v20080114-1111:1.12
	v20080107-1111:1.12
	v20071222-1111:1.12
	v20071214-1111:1.12
	v20071130-1111:1.12
	v20071124-0000:1.12
	v20071112-0000:1.12
	v20071108-0000:1.12
	v20071003-0000:1.12
	v20070915-0000:1.12
	v20070903-0000:1.12
	v20070809-0000:1.12
	R2_0_maintenance:1.12.0.6
	R2_0:1.12
	R4_20:1.12
	v20070621-0000:1.12
	RC3_20:1.12
	v20070614-1400:1.12
	v20070608-1300:1.12
	v20070605-1400:1.12
	v20070601-1400:1.12
	v20070525-1500:1.12
	v20070518-1300:1.12
	bugzilla111892_group_support:1.12.0.4
	Root_bugzilla111892_group_support:1.12
	v20070504-1000:1.12
	v20070420-1000:1.12
	v20070413-1300:1.12
	v20070330-1300:1.12
	v20060330-1300:1.12
	v20070322-1100:1.12
	v20060316-0600:1.12
	v20070221-1500:1.12
	v20070208-1800:1.12
	v20070202-0200:1.12
	v20070119-1200:1.12
	v20070111-0800:1.12
	v20070105-1200:1.12
	v20070103-0300:1.12
	M4_20:1.12
	v20061218-1500:1.12
	v20061218-1200:1.12
	v20061214-0000:1.12
	M3_20:1.12
	v20061117-0800:1.12
	v20061027-1200:1.12
	v20061013-1330:1.12
	v20061012-1100:1.12
	v20060925-1700:1.12
	v20060919-0800:1.12
	v20060907-1100:1.12
	M1_20:1.12
	v20060831-1500:1.12
	v20060824-1600:1.12
	v20060817-1500:1.12
	v20060810-1700:1.12
	v20060803-1200:1.12
	v20060728-0500:1.12
	v20060721-1130:1.12
	v20060713-1700:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20060627-1200:1.12
	v20060616-1400:1.12
	v20060616-1200:1.12
	v20060609-1400:1.12
	v20060531-1730:1.12
	v20060530-1930:1.12
	v20060526-1200:1.12
	v20060519-0800:1.12
	v20060512-1000:1.12
	I20060512-1000:1.12
	I20060505-1400:1.12
	I20060428-1300:1.12
	I20060424-0500:1.12
	I20060424-0300:1.12
	M6_10:1.12
	I20060407-1200:1.12
	I20060331-1000:1.12
	I20060324-0300:1.11
	I20060317-1300:1.11
	I20060317-1200:1.11
	I20060316-1300:1.11
	I20060309-1300:1.11
	M5_10:1.11
	S20060303-1600:1.11
	I20060227-1730:1.11
	I20060216-1945:1.9
	I20060210-1715:1.8
	I20060209-1815:1.8
	I20060203-0830:1.8
	I20060202-1415:1.8
	I20060129-1145:1.8
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051208-2000:1.7
	I20051201-1800:1.7
	I20051124-2000:1.7
	M3_10:1.7
	I20051118-1245:1.7
	I20051111-1800:1.6
	I20051106-0900:1.6
	v20051030:1.5;
locks; strict;
comment	@# @;


1.14
date	2008.04.22.21.06.54;	author ahunter;	state dead;
branches;
next	1.13;
commitid	170e480e536d4567;

1.13
date	2008.04.08.02.16.38;	author ahunter;	state Exp;
branches;
next	1.12;
commitid	4d0547fad5804567;

1.12
date	2006.03.24.20.53.11;	author mmostafa;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.24.23.34.47;	author mmostafa;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.17.22.52.40;	author sshaw;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.27.20.22.56;	author sshaw;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.17.22.17.17;	author cmahoney;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.04.21.27.49;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.14.20.58.50;	author mmostafa;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.10;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.22;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.38;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.14
log
@[227655] gmf-head ahunter 080422 Clipboard support used for copy/paste does not preserve order
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.commands;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.ui.util.ICustomData;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.util.MeasurementUnitHelper;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.emf.clipboard.core.ClipboardUtil;
import org.eclipse.gmf.runtime.notation.Bendpoints;
import org.eclipse.gmf.runtime.notation.Edge;
import org.eclipse.gmf.runtime.notation.LayoutConstraint;
import org.eclipse.gmf.runtime.notation.Location;
import org.eclipse.gmf.runtime.notation.MeasurementUnit;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.RelativeBendpoints;
import org.eclipse.gmf.runtime.notation.Size;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.gmf.runtime.notation.datatype.RelativeBendpoint;

/**
 * Paste Command for the views
 * 
 * @@author Vishy Ramaswamy
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.ui.*
 */
public final class PasteCommand extends ClipboardCommand {
    /**
     * The clipboard data
     */
    private final ICustomData[] data; 
    
    private int offset = 0;
    private IMapMode mm;

    /**
     * Constructor for PasteCommand.
     * @@param editingDomain
     *            the editing domain through which model changes are made
     * @@param label
     * @@param viewContext
     * @@param data
     * @@param mm
	 * 			the <code>IMapMode</code> that is used to convert the layout constraint
	 * 			and calculate the offset in logical coordinates
     */
    public PasteCommand(TransactionalEditingDomain editingDomain, 
        String label,
        View viewContext,
        ICustomData[] data, IMapMode mm) {
        super(editingDomain, label, viewContext);

        Assert.isNotNull(data);
        this.data = data;
        this.offset = mm.DPtoLP(10);
        this.mm = mm;
    }

	protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info)
	    throws ExecutionException {

	    /* Paste on the target */
	    if (data != null && data.length > 0) {
	        List allViews = new ArrayList();
	    	for (int j = 0; j < data.length; j++) {
	            /* Get the string from the clipboard data */
	            String xml = new String(data[j].getData());
	
	            /* Paste the xml on to the target view's diagram */
	            List views = pasteFromString(getViewContext(),xml);
	            allViews.addAll(views);
	        }
	        return CommandResult.newOKCommandResult(allViews);
	    }
	    return CommandResult.newOKCommandResult();
	}
	
	/**
     * Method pasteFromString.
     * pastes the clipboard contents on to self
     * @@param clipboard The clipboard contents - serialization used during copy
     * @@return List The list of IView resulting from the paste
     */
	 private List pasteFromString(View view, String clipboard) {
	    ArrayList retval = new ArrayList();
	    Iterator pastedElements = ClipboardUtil.pasteElementsFromString(clipboard, view, null, null).iterator();
	    
	    // get the measurement unit
	    MeasurementUnit mu = MeasurementUnit.HIMETRIC_LITERAL;
	    
	    while( pastedElements.hasNext() ) {
            Object element = pastedElements.next();
            if (element instanceof View) {
	            retval.add(element);
	        }
            else if (element instanceof EAnnotation) {
            	EAnnotation measureUnitAnnotation  = (EAnnotation)element;
        		String unitName = measureUnitAnnotation.getSource();
        		mu = MeasurementUnit.get(unitName);
                view.getEAnnotations().remove(element);
            }
        }
	    
        /* Set the new bounds for the pasted IShapeView views */
	    Set edges = convertNodesConstraint(retval, mu, new Point(offset, offset));
        
        // now go through all associated edges and adjust the bendpoints
        convertEdgeBendpoints(mu, edges);
        
        return retval;
	}

	/**
	 * @@param mu the <code>MeasurementUnit</code> for the notation diagram.
	 * @@param edges the <code>Set</code> of edges to convert the bendpoints of.
	 */
	private void convertEdgeBendpoints(MeasurementUnit mu, Set edges) {
		for (Iterator i = edges.iterator(); i.hasNext();) {
        	Edge nextEdge = (Edge)i.next();
        	Bendpoints bendpoints = nextEdge.getBendpoints();
        	
        	if (bendpoints instanceof RelativeBendpoints) {
    			RelativeBendpoints relBendpoints = (RelativeBendpoints)bendpoints;
        		List points = relBendpoints.getPoints();
        		List newpoints = new ArrayList(points.size());
        		ListIterator li = points.listIterator();
        		
        		IMapMode viewMapMode = MeasurementUnitHelper.getMapMode(mu);
        		
        		while (li.hasNext()) {
        			RelativeBendpoint rb = (RelativeBendpoint)li.next();
        			
        			Dimension source = new Dimension(rb.getSourceX(), rb.getSourceY());
        			Dimension target = new Dimension(rb.getTargetX(), rb.getTargetY());
        			if (!viewMapMode.equals(mm)) {
        				source = (Dimension)viewMapMode.LPtoDP(source);
        				source = (Dimension)mm.DPtoLP(source);
        				
        				target = (Dimension)viewMapMode.LPtoDP(target);
        				target = (Dimension)mm.DPtoLP(target);
        			}
        			
        			newpoints.add(new RelativeBendpoint(source.width, source.height, 
        							target.width, target.height));
        		}
        		
        		relBendpoints.setPoints(newpoints);
        	}
        	
        }
	}

	/**
	 * @@param retval the <code>List</code> of <code>Node</code> objects to convert the constraint of.
	 * @@param mu the <code>MeasurementUnit</code> for the notation diagram.
	 * @@return the <code>Set</code> of <code>Edge</code> views that are attached to the list of nodes 
	 */
	private Set convertNodesConstraint(List retval, MeasurementUnit mu, Point ptOffset) {
		Set edges = new HashSet();
        for (Iterator i = retval.iterator(); i.hasNext();) {
            View nextView = (View) i.next();
            if (nextView instanceof Node) {
            	Node node = (Node)nextView;
        		Point loc = new Point(0, 0);
        		LayoutConstraint lc = node.getLayoutConstraint();
        		if (lc instanceof Location) {
        			Location locC = (Location)lc;
        			loc = new Point(locC.getX(), locC.getY());
        		}
        			
        		Dimension size = new Dimension(0, 0);
        		if (lc instanceof Size) {
        			Size sizeC = (Size)lc;
        			size = new Dimension(sizeC.getWidth(), sizeC.getHeight());
        		}
        		
        		IMapMode viewMapMode = MeasurementUnitHelper.getMapMode(mu);
        				
        		if (!viewMapMode.equals(mm)) {
        			// convert location to native coordinates
        			loc = (Point)viewMapMode.LPtoDP(loc);
        			loc = (Point)mm.DPtoLP(loc);
        			
        			// convert size to native coordinates
        			Dimension origSize = new Dimension(size);
        			size = (Dimension)viewMapMode.LPtoDP(size);
        			size = (Dimension)mm.DPtoLP(size);
        			if (origSize.width == -1)
        				size.width = -1;
        			if (origSize.height == -1)
        				size.height = -1;
        		}
        		
        		Rectangle constraintRect = new Rectangle(loc, size);
        		constraintRect = constraintRect.getTranslated(ptOffset.x, ptOffset.y);
    			ViewUtil.setStructuralFeatureValue(nextView,NotationPackage.eINSTANCE.getLocation_X(), new Integer(constraintRect.x));
                ViewUtil.setStructuralFeatureValue(nextView,NotationPackage.eINSTANCE.getLocation_Y(), new Integer(constraintRect.y));
                ViewUtil.setStructuralFeatureValue(nextView,NotationPackage.eINSTANCE.getSize_Width(), new Integer(constraintRect.width));
                ViewUtil.setStructuralFeatureValue(nextView,NotationPackage.eINSTANCE.getSize_Height(), new Integer(constraintRect.height));
                
                edges.addAll(((Node)nextView).getTargetEdges());
                edges.addAll(((Node)nextView).getSourceEdges());
                
                // recursively perform the same operation on children of the node
                edges.addAll(convertNodesConstraint(node.getPersistedChildren(), mu, new Point(0, 0)));
            }
        }
		return edges;
	}

}
@


1.13
log
@[226065] gmf-head ahunter 080407 Fix warning: The type Assert is deprecated
@
text
@@


1.12
log
@gmf-head mmostafa 060324 moving the MeasurmentUnitHelper to the public util
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d22 1
a46 1
import org.eclipse.jface.util.Assert;
@


1.11
log
@bugzilla 110698 gmf-head mmostafa 060224 Auto-layout doesn't layout out connections between nested nodes and top level nodes
@
text
@d32 1
a32 1
import org.eclipse.gmf.runtime.diagram.ui.internal.util.MeasurementUnitHelper;
@


1.10
log
@bugzilla 127074 gmf-head sshaw 060217 Copy / Paste of border shapes between different coordinate system editors
@
text
@d127 1
@


1.9
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@a14 1
import java.util.Collections;
d34 1
a34 1
import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;
d113 2
a114 2
	    Iterator pastedElements = EObjectUtil.deserialize(view, clipboard, Collections.EMPTY_MAP).iterator();
        
d131 1
a131 1
	    Set edges = convertNodesConstraint(retval, mu);
d184 1
a184 1
	private Set convertNodesConstraint(List retval, MeasurementUnit mu) {
d221 1
a221 1
        		constraintRect = constraintRect.getTranslated(offset, offset);
d229 3
@


1.8
log
@bugzilla 116224 gmf-head sshaw 060119 Notation meta-model support for coordinate systems
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d22 2
d29 1
d66 2
d75 1
a75 1
    public PasteCommand(
d79 1
a79 1
        super(label, viewContext);
d87 3
a89 1
	protected CommandResult doExecute(IProgressMonitor progressMonitor) {
d101 1
a101 1
	        return newOKCommandResult(allViews);
d103 1
a103 1
	    return newOKCommandResult();
@


1.7
log
@Bugzilla#110848 gmf_head cmahoney 051117 Paste puts new shapes right on top of old shapes
@
text
@d16 1
d19 2
d23 4
d30 2
d33 3
d37 1
d40 2
d43 1
d59 1
a59 14

    /**
     * Constructor for PasteCommand.
     * @@param viewContext
     * @@param data
     * @@param offset
	 * 			the <code>int</code> that is the offset from the original views that
	 * 			the new views will be placed in logical coordinates
     */
    public PasteCommand(
        View viewContext,
        ICustomData[] data, int offset) {
        this(null, viewContext, data, offset);
    }
d66 3
a68 3
     * @@param offset
	 * 			the <code>int</code> that is the offset from the original views that
	 * 			the new views will be placed in logical coordinates
d73 1
a73 1
        ICustomData[] data, int offset) {
d78 2
a79 1
        this.offset = offset;
a92 12
	            
	            /* Set the new bounds for the pasted IShapeView views */
                for (Iterator i = views.iterator(); i.hasNext();) {
                    View view = (View) i.next();
                    if (view instanceof Node &&
                    	((Node)view).getLayoutConstraint() instanceof Location/*view instanceof IShapeView*/) {
                    	Integer x = (Integer) ViewUtil.getStructuralFeatureValue(view,NotationPackage.eINSTANCE.getLocation_X());
                        ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getLocation_X(), new Integer(x.intValue() + offset));
                        Integer y = (Integer) ViewUtil.getStructuralFeatureValue(view,NotationPackage.eINSTANCE.getLocation_Y());
                        ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getLocation_Y(), new Integer(y.intValue() + offset));
                    }
                }
d108 5
a112 1
        while( pastedElements.hasNext() ) {
d117 5
d123 7
d133 95
@


1.6
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@d75 1
d119 1
a119 1
	            retval.add(view);
@


1.5
log
@bugzilla 110316 gmf-head mmostafa 051014 Compiler warning count should be 0 - runtime diagram layer components
@
text
@a22 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d41 2
d48 3
d54 2
a55 2
        ICustomData[] data) {
        this(null, viewContext, data);
d63 3
a65 1
     * 
d70 1
a70 1
        ICustomData[] data) {
d95 1
a95 1
                        ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getLocation_X(), new Integer(x.intValue() + MapMode.DPtoLP(10)));
d97 1
a97 1
                        ViewUtil.setStructuralFeatureValue(view,NotationPackage.eINSTANCE.getLocation_Y(), new Integer(y.intValue() + MapMode.DPtoLP(10)));
@


1.4
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@a19 2
import org.eclipse.jface.util.Assert;

a21 1
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
d27 1
d29 1
d88 4
a91 4
                    	Integer x = (Integer) ViewUtil.getPropertyValue(view,Properties.ID_POSITIONX);
                        ViewUtil.setPropertyValue(view,Properties.ID_POSITIONX, new Integer(x.intValue() + MapMode.DPtoLP(10)));
                        Integer y = (Integer) ViewUtil.getPropertyValue(view,Properties.ID_POSITIONY);
                        ViewUtil.setPropertyValue(view,Properties.ID_POSITIONY, new Integer(y.intValue() + MapMode.DPtoLP(10)));
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d24 1
a24 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d26 3
a28 3
import com.ibm.xtools.notation.Location;
import com.ibm.xtools.notation.Node;
import com.ibm.xtools.notation.View;
@

