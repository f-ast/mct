head	1.5;
access;
symbols
	v20081023-2107:1.5
	v20081022-1925:1.5
	v20081022-1005:1.5
	v20081020-0700:1.5
	v20080917-1925:1.5
	v20080916-2008:1.5
	v20080911-1728:1.5
	v20080911-1506:1.5
	v20080910-1520:1.5
	v20080910-1510:1.5
	v20080903-1520:1.5
	v20080903-1510:1.5
	v20080813-1510:1.5
	v20080811-1546:1.5
	v20080731-1520:1.5
	v20080725-1738:1.5
	v20080723-2246:1.5
	v20080723-2232:1.5
	v20080723-1700:1.5
	v20080722-1827:1.5
	v20080718-1700:1.5
	v20080718-1731:1.5
	v20080716-1600:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080610-1132:1.5
	v20080603-1553:1.5
	v20080527-1255:1.5
	v20080527-1151:1.3
	v20080516-1748:1.5
	v20080516-1143:1.5
	v20080512-1200:1.5
	v20080503-1740:1.5
	v20080501-2127:1.3
	v20080501-1739:1.4
	m20080429-1543:1.3
	v20080425-1959:1.4
	v20080417-1610:1.4
	v20080407-2250:1.4
	v20080407-0930:1.4
	v20080404-1111:1.4
	v20080328-1605:1.4
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080201-2010:1.3
	v20080201-0201:1.3
	v20080118-1129:1.3
	v20080114-2222:1.3
	v20080114-1111:1.3
	v20080107-1111:1.3
	v20071222-1111:1.3
	v20071214-1111:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071112-0000:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070518-1300:1.3
	bugzilla111892_group_support:1.3.0.2
	Root_bugzilla111892_group_support:1.3
	v20070504-1000:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070202-0200:1.2.2.1
	v20070119-1200:1.2.2.1
	v20070111-0800:1.2.2.1
	v20070105-1200:1.2.2.1
	v20070103-0300:1.3
	M4_20:1.3
	v20061218-1500:1.2.2.1
	v20061218-1200:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061027-1200:1.2.2.1
	v20061013-1330:1.3
	v20061012-1100:1.2.2.1
	v20060925-1700:1.2.2.1
	v20060919-0800:1.2.2.1
	v20060907-1100:1.2
	M1_20:1.2
	v20060831-1500:1.2
	v20060824-1600:1.2
	v20060817-1500:1.2
	v20060810-1700:1.2
	v20060803-1200:1.2
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060202-1415:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;


1.5
date	2008.05.03.20.56.21;	author ahunter;	state Exp;
branches;
next	1.4;
commitid	608a481cd1724567;

1.4
date	2008.03.27.21.11.13;	author ahunter;	state Exp;
branches;
next	1.3;
commitid	3a4e47ec0d704567;

1.3
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.28.02.31.20;	author cmahoney;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	;

1.2.2.1
date	2006.09.13.16.43.40;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[225137] gmf-head ahunter 080503 Line styles enhancement
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.properties;

import org.eclipse.gmf.runtime.emf.core.util.PackageUtil;
import org.eclipse.gmf.runtime.notation.NotationPackage;

/*
 * @@canBeSeenBy %partners
 */
/**
 * constants for the Diagtam ui
 * @@author sshae
 *
 */
public interface Properties {
	/**
	 * the persisted edges Structural featrue Id
	 */
	public static String ID_PERSISTED_EDGES = PackageUtil.getID(NotationPackage.eINSTANCE.getDiagram_PersistedEdges());
	/**
	 * the transient edges Structural featrue Id
	 */
	public static String ID_TRANSIENT_EDGES = PackageUtil.getID(NotationPackage.eINSTANCE.getDiagram_TransientEdges());

	/**
	 * the  visible property ID
	 */
	public static String ID_ISVISIBLE = PackageUtil.getID(NotationPackage.eINSTANCE.getView_Visible());
	
	/**
	 * the  persisted children property ID
	 */
	public static String ID_PERSISTED_CHILDREN = PackageUtil.getID(NotationPackage.eINSTANCE.getView_PersistedChildren());
	
	/**
	 * the  transient children property ID
	 */
	public static String ID_TRANSIENT_CHILDREN = PackageUtil.getID(NotationPackage.eINSTANCE.getView_TransientChildren());
	
	/**
	 * the  source connections  property ID
	 */
	public static String ID_SOURCECONNECTIONS = PackageUtil.getID(NotationPackage.eINSTANCE.getView_SourceEdges());
	
	/**
	 * the  target  connections  property ID
	 */
	public static String ID_TARGETCONNECTIONS = PackageUtil.getID(NotationPackage.eINSTANCE.getView_TargetEdges());

	/**
	 * the  bend point property ID
	 */
	public static String ID_BENDPOINT = PackageUtil.getID(NotationPackage.eINSTANCE.getRelativeBendpoints_Points());

	/**
	 * the  semantic hint  property ID
	 */
	public static String ID_SEMANTICREF = PackageUtil.getID(NotationPackage.eINSTANCE.getView_Element());

	/**
	 * the  font name   property ID
	 */
	public static String ID_FONTNAME = PackageUtil.getID(NotationPackage.eINSTANCE.getFontStyle_FontName());
	/**
	 * the  font size   property ID
	 */
	public static String ID_FONTSIZE = PackageUtil.getID(NotationPackage.eINSTANCE.getFontStyle_FontHeight());
	/**
	 * the  font bold   property ID
	 */
	public static String ID_FONTBOLD = PackageUtil.getID(NotationPackage.eINSTANCE.getFontStyle_Bold());
	/**
	 * the  font Italic  property ID
	 */
	public static String ID_FONTITALIC = PackageUtil.getID(NotationPackage.eINSTANCE.getFontStyle_Italic());
	/**
	 * the  font under line  property ID
	 */
	public static String ID_FONTUNDERLINE = PackageUtil.getID(NotationPackage.eINSTANCE.getFontStyle_Underline());
	/**
	 * the  font strike through  property ID
	 */
	public static String ID_FONTSTRIKETHROUGH = PackageUtil.getID(NotationPackage.eINSTANCE.getFontStyle_StrikeThrough());
	/**
	 * the  font color   property ID
	 */
	public static String ID_FONTCOLOR = PackageUtil.getID(NotationPackage.eINSTANCE.getFontStyle_FontColor());
	/**
	 * the  line color property ID
	 */
	public static String ID_LINECOLOR = PackageUtil.getID(NotationPackage.eINSTANCE.getLineStyle_LineColor());
	/**
	 * the  fill color property ID
	 */
	public static String ID_FILLCOLOR = PackageUtil.getID(NotationPackage.eINSTANCE.getFillStyle_FillColor());
	/**
	 * the  show compartment title  property ID
	 */
	public static String ID_SHOWCOMPARTMENTTITLE = PackageUtil.getID(NotationPackage.eINSTANCE.getTitleStyle_ShowTitle());
	/**
	 * the  collapsed property ID
	 */
	public static String ID_COLLAPSED = PackageUtil.getID(NotationPackage.eINSTANCE.getDrawerStyle_Collapsed());
	/**
	 * the  routing  property ID
	 */
	public static String ID_ROUTING = PackageUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_Routing());
	/**
	 * the  smoothness   property ID
	 */
	public static String ID_SMOOTHNESS = PackageUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_Smoothness());
	/**
	 * the  avoid obstructions  property ID
	 */
	public static String ID_AVOIDOBSTRUCTIONS = PackageUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_AvoidObstructions());
	/**
	 * the  closest distance   property ID
	 */
	public static String ID_CLOSESTDISTANCE = PackageUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_ClosestDistance());
	/**
	 * the  jump links status property ID
	 */
	public static String ID_JUMPLINKS_STATUS = PackageUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkStatus());
	/**
	 * the  jump links type property ID
	 */
	public static String ID_JUMPLINKS_TYPE = PackageUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkType());
	/**
	 * the  jump links reverse property ID
	 */
	public static String ID_JUMPLINKS_REVERSE = PackageUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_JumpLinksReverse());
	/**
	 * the  description   property ID
	 */
	public static String ID_DESCRIPTION = PackageUtil.getID(NotationPackage.eINSTANCE.getDescriptionStyle_Description());
	/**
	 * the is canonical   property ID
	 */
	public static String ID_ISCANONICAL = PackageUtil.getID(NotationPackage.eINSTANCE.getCanonicalStyle_Canonical());
	/**
	 * the  sorting  property ID
	 */
	public static String ID_SORTING = PackageUtil.getID(NotationPackage.eINSTANCE.getSortingStyle_Sorting());
	/**
	 * the  sorting keys   property ID
	 */
	public static String ID_SORTING_KEYS = PackageUtil.getID(NotationPackage.eINSTANCE.getSortingStyle_SortingKeys());
	/**
	 * the  sorted objects property ID
	 */
	public static String ID_SORTED_OBJECTS = PackageUtil.getID(NotationPackage.eINSTANCE.getSortingStyle_SortedObjects());
	/**
	 * the  filtering  property ID
	 */
	public static String ID_FILTERING = PackageUtil.getID(NotationPackage.eINSTANCE.getFilteringStyle_Filtering());
	/**
	 * the  filtering keys   property ID
	 */
	public static String ID_FILTERING_KEYS = PackageUtil.getID(NotationPackage.eINSTANCE.getFilteringStyle_FilteringKeys());
	/**
	 * the  filtered objects   property ID
	 */
	public static String ID_FILTERED_OBJECTS = PackageUtil.getID(NotationPackage.eINSTANCE.getFilteringStyle_FilteredObjects());

	/**
	 * the  page x   property ID
	 */
	public static String ID_PAGEX = PackageUtil.getID(NotationPackage.eINSTANCE.getPageStyle_PageX());
	/**
	 * the  page y  property ID
	 */
	public static String ID_PAGEY = PackageUtil.getID(NotationPackage.eINSTANCE.getPageStyle_PageY());
	/**
	 * the  page width   property ID
	 */
	public static String ID_PAGE_WIDTH = PackageUtil.getID(NotationPackage.eINSTANCE.getPageStyle_PageWidth());
	/**
	 * the  page height   property ID
	 */
	public static String ID_PAGE_HEIGHT = PackageUtil.getID(NotationPackage.eINSTANCE.getPageStyle_PageHeight());
	
	/**
	 * the  extent x   property ID
	 */
	public static String ID_EXTENTX = PackageUtil.getID(NotationPackage.eINSTANCE.getSize_Width());
	/**
	 * the  extent y   property ID
	 */
	public static String ID_EXTENTY = PackageUtil.getID(NotationPackage.eINSTANCE.getSize_Height());
	/**
	 * the  position x   property ID
	 */
	public static String ID_POSITIONX = PackageUtil.getID(NotationPackage.eINSTANCE.getLocation_X());
	/**
	 * the  position y   property ID
	 */
	public static String ID_POSITIONY = PackageUtil.getID(NotationPackage.eINSTANCE.getLocation_Y());
	/**
	 * the  ratio   property ID
	 */
	public static String ID_RATIO = PackageUtil.getID(NotationPackage.eINSTANCE.getRatio_Value());

	/**
	 * the diagram link annotation source
	 */
	public static String DIAGRAMLINK_ANNOTATION = "DiagramLink"; //$NON-NLS-1$
	
	/**
	 * the text alignment property id
	 */
	public static String ID_TEXT_ALIGNMENT = PackageUtil.getID(NotationPackage.eINSTANCE.getTextStyle_TextAlignment());
	
	/**
	 * the line width property id
	 */
	public static String ID_LINE_WIDTH = PackageUtil.getID(NotationPackage.eINSTANCE.getLineStyle_LineWidth());
	
	/**
	 * the line type property id
	 */
	public static String ID_LINE_TYPE = PackageUtil.getID(NotationPackage.eINSTANCE.getLineTypeStyle_LineType());
	
	/**
	 * the arrow source decoration property id
	 */
	public static String ID_ARROW_SOURCE = PackageUtil.getID(NotationPackage.eINSTANCE.getArrowStyle_ArrowSource());
	
	/**
	 * the arrow target decoration property id
	 */
	public static String ID_ARROW_TARGET = PackageUtil.getID(NotationPackage.eINSTANCE.getArrowStyle_ArrowTarget());
}
@


1.4
log
@[224473] gmf-head ahunter 080327 Text alignment enhancement
@
text
@d223 19
@


1.3
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d217 6
@


1.2
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
@


1.2.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.1
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d14 1
a14 1
import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;
d29 1
a29 1
	public static String ID_PERSISTED_EDGES = MetaModelUtil.getID(NotationPackage.eINSTANCE.getDiagram_PersistedEdges());
d33 1
a33 1
	public static String ID_TRANSIENT_EDGES = MetaModelUtil.getID(NotationPackage.eINSTANCE.getDiagram_TransientEdges());
d38 1
a38 1
	public static String ID_ISVISIBLE = MetaModelUtil.getID(NotationPackage.eINSTANCE.getView_Visible());
d43 1
a43 1
	public static String ID_PERSISTED_CHILDREN = MetaModelUtil.getID(NotationPackage.eINSTANCE.getView_PersistedChildren());
d48 1
a48 1
	public static String ID_TRANSIENT_CHILDREN = MetaModelUtil.getID(NotationPackage.eINSTANCE.getView_TransientChildren());
d53 1
a53 1
	public static String ID_SOURCECONNECTIONS = MetaModelUtil.getID(NotationPackage.eINSTANCE.getView_SourceEdges());
d58 1
a58 1
	public static String ID_TARGETCONNECTIONS = MetaModelUtil.getID(NotationPackage.eINSTANCE.getView_TargetEdges());
d63 1
a63 1
	public static String ID_BENDPOINT = MetaModelUtil.getID(NotationPackage.eINSTANCE.getRelativeBendpoints_Points());
d68 1
a68 1
	public static String ID_SEMANTICREF = MetaModelUtil.getID(NotationPackage.eINSTANCE.getView_Element());
d73 1
a73 1
	public static String ID_FONTNAME = MetaModelUtil.getID(NotationPackage.eINSTANCE.getFontStyle_FontName());
d77 1
a77 1
	public static String ID_FONTSIZE = MetaModelUtil.getID(NotationPackage.eINSTANCE.getFontStyle_FontHeight());
d81 1
a81 1
	public static String ID_FONTBOLD = MetaModelUtil.getID(NotationPackage.eINSTANCE.getFontStyle_Bold());
d85 1
a85 1
	public static String ID_FONTITALIC = MetaModelUtil.getID(NotationPackage.eINSTANCE.getFontStyle_Italic());
d89 1
a89 1
	public static String ID_FONTUNDERLINE = MetaModelUtil.getID(NotationPackage.eINSTANCE.getFontStyle_Underline());
d93 1
a93 1
	public static String ID_FONTSTRIKETHROUGH = MetaModelUtil.getID(NotationPackage.eINSTANCE.getFontStyle_StrikeThrough());
d97 1
a97 1
	public static String ID_FONTCOLOR = MetaModelUtil.getID(NotationPackage.eINSTANCE.getFontStyle_FontColor());
d101 1
a101 1
	public static String ID_LINECOLOR = MetaModelUtil.getID(NotationPackage.eINSTANCE.getLineStyle_LineColor());
d105 1
a105 1
	public static String ID_FILLCOLOR = MetaModelUtil.getID(NotationPackage.eINSTANCE.getFillStyle_FillColor());
d109 1
a109 1
	public static String ID_SHOWCOMPARTMENTTITLE = MetaModelUtil.getID(NotationPackage.eINSTANCE.getTitleStyle_ShowTitle());
d113 1
a113 1
	public static String ID_COLLAPSED = MetaModelUtil.getID(NotationPackage.eINSTANCE.getDrawerStyle_Collapsed());
d117 1
a117 1
	public static String ID_ROUTING = MetaModelUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_Routing());
d121 1
a121 1
	public static String ID_SMOOTHNESS = MetaModelUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_Smoothness());
d125 1
a125 1
	public static String ID_AVOIDOBSTRUCTIONS = MetaModelUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_AvoidObstructions());
d129 1
a129 1
	public static String ID_CLOSESTDISTANCE = MetaModelUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_ClosestDistance());
d133 1
a133 1
	public static String ID_JUMPLINKS_STATUS = MetaModelUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkStatus());
d137 1
a137 1
	public static String ID_JUMPLINKS_TYPE = MetaModelUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_JumpLinkType());
d141 1
a141 1
	public static String ID_JUMPLINKS_REVERSE = MetaModelUtil.getID(NotationPackage.eINSTANCE.getRoutingStyle_JumpLinksReverse());
d145 1
a145 1
	public static String ID_DESCRIPTION = MetaModelUtil.getID(NotationPackage.eINSTANCE.getDescriptionStyle_Description());
d149 1
a149 1
	public static String ID_ISCANONICAL = MetaModelUtil.getID(NotationPackage.eINSTANCE.getCanonicalStyle_Canonical());
d153 1
a153 1
	public static String ID_SORTING = MetaModelUtil.getID(NotationPackage.eINSTANCE.getSortingStyle_Sorting());
d157 1
a157 1
	public static String ID_SORTING_KEYS = MetaModelUtil.getID(NotationPackage.eINSTANCE.getSortingStyle_SortingKeys());
d161 1
a161 1
	public static String ID_SORTED_OBJECTS = MetaModelUtil.getID(NotationPackage.eINSTANCE.getSortingStyle_SortedObjects());
d165 1
a165 1
	public static String ID_FILTERING = MetaModelUtil.getID(NotationPackage.eINSTANCE.getFilteringStyle_Filtering());
d169 1
a169 1
	public static String ID_FILTERING_KEYS = MetaModelUtil.getID(NotationPackage.eINSTANCE.getFilteringStyle_FilteringKeys());
d173 1
a173 1
	public static String ID_FILTERED_OBJECTS = MetaModelUtil.getID(NotationPackage.eINSTANCE.getFilteringStyle_FilteredObjects());
d178 1
a178 1
	public static String ID_PAGEX = MetaModelUtil.getID(NotationPackage.eINSTANCE.getPageStyle_PageX());
d182 1
a182 1
	public static String ID_PAGEY = MetaModelUtil.getID(NotationPackage.eINSTANCE.getPageStyle_PageY());
d186 1
a186 1
	public static String ID_PAGE_WIDTH = MetaModelUtil.getID(NotationPackage.eINSTANCE.getPageStyle_PageWidth());
d190 1
a190 1
	public static String ID_PAGE_HEIGHT = MetaModelUtil.getID(NotationPackage.eINSTANCE.getPageStyle_PageHeight());
d195 1
a195 1
	public static String ID_EXTENTX = MetaModelUtil.getID(NotationPackage.eINSTANCE.getSize_Width());
d199 1
a199 1
	public static String ID_EXTENTY = MetaModelUtil.getID(NotationPackage.eINSTANCE.getSize_Height());
d203 1
a203 1
	public static String ID_POSITIONX = MetaModelUtil.getID(NotationPackage.eINSTANCE.getLocation_X());
d207 1
a207 1
	public static String ID_POSITIONY = MetaModelUtil.getID(NotationPackage.eINSTANCE.getLocation_Y());
d211 1
a211 1
	public static String ID_RATIO = MetaModelUtil.getID(NotationPackage.eINSTANCE.getRatio_Value());
@

