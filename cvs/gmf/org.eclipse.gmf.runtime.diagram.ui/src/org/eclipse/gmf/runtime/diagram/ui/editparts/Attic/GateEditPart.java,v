head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20080917-1925:1.7
	v20080911-1728:1.7
	v20080910-1520:1.7
	v20080903-1520:1.7
	v20080731-1520:1.7
	v20080723-2246:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	I20051124-2000:1.6
	M3_10:1.6
	I20051118-1245:1.6
	I20051111-1800:1.6
	I20051106-0900:1.6
	v20051030:1.5;
locks; strict;
comment	@# @;


1.7
date	2005.11.25.19.38.13;	author cmahoney;	state dead;
branches;
next	1.6;

1.6
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.23.18.37.25;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.37;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.Collection;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Locator;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.DragTracker;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.Request;
import org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConnectionLabelsEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GateNonResizableEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemFigure;
import org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemContainerFigure;
import org.eclipse.gmf.runtime.diagram.ui.figures.BorderedFigure;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest;
import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;
import org.eclipse.gmf.runtime.diagram.ui.util.DrawConstant;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/**
 * The class which controls the behavior of a gate. It determines the
 * connections coming in and out. Created On: Jul 8, 2003
 * 
 * @@author tisrar
 * @@author jbruck
 * @@deprecated Renamed BorderItemEditPart
 */
public class GateEditPart extends ShapeNodeEditPart {  // inherit from GatedShapeEditPart eventually

	/** 
	 * Create an instance.
	 * @@param view the editpart's model.
	 */
	public GateEditPart(View view) {
		super(view);
	}
	

	/**
	 * Refresh the bounds using a <tt>locator</tt> if this editpart's figure
	 * is a {@@link BorderItemFigure}instance; otherwise, the <tt>super</tt>
	 * implementation is used. Locators are used since a <tt>gate element</tt>
	 * 's position and extent properties are not persisted.
	 */
	protected void refreshBounds() {
		if ( getFigure() instanceof BorderItemFigure ) {
		 	BorderItemFigure.BorderItemLocator locator = (BorderItemFigure.BorderItemLocator) getLocator();
			if (locator != null) {
				int x = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getLocation_X())).intValue();
		    	int y = ((Integer) getStructuralFeatureValue(NotationPackage.eINSTANCE.getLocation_Y())).intValue();
		    	Point loc = new Point(x, y);
				locator.resetPosition(new Rectangle(loc, getFigure().getPreferredSize()));
			} else {
				super.refreshBounds();
			}
		}
		else {
			super.refreshBounds();
		}
	}

	
	/** Create a gate figure. */
	protected NodeFigure createNodeFigure() {
		return new BorderItemFigure(DrawConstant.EAST);
	}
	
	
	/**
	 * Creates this editpart's main figure.
	 * @@return the created <code>NodeFigure</code>
	 */
	protected NodeFigure createMainFigure()	{
		return new BorderItemFigure(DrawConstant.EAST);
	}

	/**
	 * sets the locator for the figure. This locator locates the figure when
	 * ever the validation is called on the shape.
	 * 
	 * @@param locator The locator which will be called when the parent figure is
	 *        validated.
	 */
	
	public void setLocator(Locator locator) {
		((BorderItemFigure) getFigure()).setLocator(locator);
	}
	

	/**
	 * Convenience method to return this gate figure's locator.
	 * @@return the <code>Locator</code>
	 */
	public Locator getLocator() {
		return ((BorderItemFigure) getFigure()).getLocator();
	}
	

	/**
	 * Return the editpolicy to be installed as an <code>EditPolicy#PRIMARY_DRAG_ROLE</code>
	 * role.  This method is typically called by <code>LayoutEditPolicy#createChildEditPolicy()</code>
	 * @@return <code>EditPolicy</code>
	 */
	public EditPolicy getPrimaryDragEditPolicy() {
		return new GateNonResizableEditPolicy();
	}
	

	/**
	 * get this edit part's main figure
	 * @@return the <code>IFigure</code>
	 */
	public final IFigure getMainFigure() {
		if(getFigure() instanceof BorderedFigure )	{
			return ((BorderedFigure)getFigure()).getElementPane();
		}
		return getFigure();
	}
	
		
	/**
	 * gets this editpart's gated pane figure.
	 * @@return the <codE>BorderedFigure</code>
	 */
	protected final BorderedFigure getGatedPaneFigure() {
		return (BorderedFigure)getFigure();
	}
	
		
	protected IFigure getContentPaneFor(IGraphicalEditPart editPart) {
		if (editPart instanceof BorderItemEditPart) {
			return getGatedPaneFigure().getBorderItemContainer();
		} else {
			return getMainFigure();
		}
	}
	
	
	
	/**
	 * Adds the supplied child to the editpart's gate figure if it is 
	 * an instanceof {@@link BorderItemEditPart} and its figure is an instanceof {@@link BorderItemFigure}.
	 */
	
	protected void addChildVisual(EditPart childEditPart, int index) {
		
		IFigure childFigure = ((GraphicalEditPart)childEditPart).getFigure();
		if ( childEditPart instanceof BorderItemEditPart && childFigure instanceof BorderItemFigure ) {
			BorderItemFigure gateFigure = (BorderItemFigure) childFigure; 
			BorderItemContainerFigure gatedFigure = (BorderItemContainerFigure) getContentPaneFor((IGraphicalEditPart) childEditPart);
			if (gateFigure.getLocator() != null) {
				gatedFigure.addBorderItem(gateFigure, gateFigure.getLocator());
			} else {
				gatedFigure.addBorderItem(gateFigure, new BorderItemFigure.BorderItemLocator(gateFigure, getMainFigure()));	
			}
		}
		else {
			IFigure fig = getContentPaneFor((IGraphicalEditPart) childEditPart);
			fig.add(childFigure, index);
		}
	}
	
	
		
	/**
	 * Remove the supplied child editpart's figure from this editpart's figure.
	 */
	protected void removeChildVisual(EditPart child) {
		IFigure childFigure = ((GraphicalEditPart)child).getFigure();
		if ( child instanceof BorderItemEditPart && childFigure instanceof BorderItemFigure ) {
			BorderItemFigure gateFigure = (BorderItemFigure)childFigure;
			BorderItemContainerFigure gatedFigure = (BorderItemContainerFigure) getContentPaneFor((IGraphicalEditPart) child);
			gatedFigure.removeBorderItem(gateFigure);
		}
		else {
			IFigure fig = getContentPaneFor((IGraphicalEditPart) child);
			fig.remove(childFigure);
		}
	}

	/** Include the gates's parent's parent to the list. */
	Collection disableCanonicalFor( final Request request ) {
		Collection disabled = super.disableCanonicalFor(request);
		if ((request instanceof CreateConnectionViewRequest) ) {
			CreateConnectionViewRequest ccvr = (CreateConnectionViewRequest)request;
			if ( ccvr.getSourceEditPart() instanceof BorderItemEditPart ) {
				disabled.add( ccvr.getSourceEditPart().getParent().getParent() );
			}
			if ( ccvr.getTargetEditPart() instanceof BorderItemEditPart ) {
				disabled.add( ccvr.getTargetEditPart().getParent().getParent() );
			}
		}
		return disabled;
	}
	
	/**
	 * Sets the supplied constraint on the <tt>childFigure</tt>.
	 * @@see org.eclipse.gef.GraphicalEditPart#setLayoutConstraint(EditPart,
	 *      IFigure, Object)
	 */
	public void setLayoutConstraint(EditPart child, IFigure childFigure, Object constraint) {
		getContentPaneFor((IGraphicalEditPart) child).setConstraint(childFigure, constraint);
	}
	
	/**
	 * Installs the desired EditPolicies for this.
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.CONNECTION_LABELS_ROLE,	new ConnectionLabelsEditPolicy()); // enable the +/- for floating labels.

	}
	
	 /**
	  * this method will return the primary child EditPart  inside this edit part
	  * @@return the primary child view inside this edit part
	  */
	 public EditPart getPrimaryChildEditPart(){
		return getChildBySemanticHint(CommonParserHint.NAME);
	 }
	
	/** Return a {@@link DragTracker} instance. */
	public DragTracker getDragTracker(Request request) {
		return new DragEditPartsTrackerEx(this) {
			protected boolean isMove() {
				return true;
			}
		};
	}
	
	
}@


1.6
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@@


1.5
log
@Bugzilla 109092: gmf_head sshaw 050923 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d25 1
a25 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConnectorLabelsEditPolicy;
d28 4
a31 4
import org.eclipse.gmf.runtime.diagram.ui.figures.GateFigure;
import org.eclipse.gmf.runtime.diagram.ui.figures.GatedFigure;
import org.eclipse.gmf.runtime.diagram.ui.figures.GatedPaneFigure;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectorViewRequest;
d44 1
d59 1
a59 1
	 * is a {@@link GateFigure}instance; otherwise, the <tt>super</tt>
d64 2
a65 2
		if ( getFigure() instanceof GateFigure ) {
		 	GateFigure.GateLocator locator = (GateFigure.GateLocator) getLocator();
d83 1
a83 1
		return new GateFigure(DrawConstant.EAST);
d92 1
a92 1
		return new GateFigure(DrawConstant.EAST);
d104 1
a104 1
		((GateFigure) getFigure()).setLocator(locator);
d113 1
a113 1
		return ((GateFigure) getFigure()).getLocator();
d132 2
a133 2
		if(getFigure() instanceof GatedPaneFigure )	{
			return ((GatedPaneFigure)getFigure()).getElementPane();
d141 1
a141 1
	 * @@return the <codE>GatedPaneFigure</code>
d143 2
a144 2
	protected final GatedPaneFigure getGatedPaneFigure() {
		return (GatedPaneFigure)getFigure();
d149 2
a150 2
		if (editPart instanceof GateEditPart) {
			return getGatedPaneFigure().getGatePane();
d160 1
a160 1
	 * an instanceof {@@link GateEditPart} and its figure is an instanceof {@@link GateFigure}.
d166 3
a168 3
		if ( childEditPart instanceof GateEditPart && childFigure instanceof GateFigure ) {
			GateFigure gateFigure = (GateFigure) childFigure; 
			GatedFigure gatedFigure = (GatedFigure) getContentPaneFor((IGraphicalEditPart) childEditPart);
d170 1
a170 1
				gatedFigure.addGate(gateFigure, gateFigure.getLocator());
d172 1
a172 1
				gatedFigure.addGate(gateFigure, new GateFigure.GateLocator(gateFigure, getMainFigure()));	
d188 4
a191 4
		if ( child instanceof GateEditPart && childFigure instanceof GateFigure ) {
			GateFigure gateFigure = (GateFigure)childFigure;
			GatedFigure gatedFigure = (GatedFigure) getContentPaneFor((IGraphicalEditPart) child);
			gatedFigure.removeGate(gateFigure);
d202 3
a204 3
		if ((request instanceof CreateConnectorViewRequest) ) {
			CreateConnectorViewRequest ccvr = (CreateConnectorViewRequest)request;
			if ( ccvr.getSourceEditPart() instanceof GateEditPart ) {
d207 1
a207 1
			if ( ccvr.getTargetEditPart() instanceof GateEditPart ) {
d228 1
a228 1
		installEditPolicy(EditPolicyRoles.CONNECTOR_LABELS,	new ConnectorLabelsEditPolicy()); // enable the +/- for floating labels.
@


1.4
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@a23 1

a30 1
import org.eclipse.gmf.runtime.diagram.ui.internal.properties.Properties;
d35 1
d66 2
a67 2
				int x = ((Integer) getPropertyValue(Properties.ID_POSITIONX)).intValue();
		    	int y = ((Integer) getPropertyValue(Properties.ID_POSITIONY)).intValue();
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d32 1
a32 1
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d35 1
a35 1
import com.ibm.xtools.notation.View;
@

