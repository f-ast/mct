head	1.8;
access;
symbols
	v20081023-2107:1.8
	v20081022-1925:1.8
	v20081022-1005:1.8
	v20081020-0700:1.8
	v20080917-1925:1.8
	v20080916-2008:1.8
	v20080911-1728:1.8
	v20080911-1506:1.8
	v20080910-1520:1.8
	v20080910-1510:1.8
	v20080903-1520:1.8
	v20080903-1510:1.8
	v20080813-1510:1.8
	v20080811-1546:1.8
	v20080731-1520:1.8
	v20080725-1738:1.8
	v20080723-2246:1.8
	v20080723-2232:1.8
	v20080723-1700:1.8
	v20080722-1827:1.8
	v20080718-1700:1.8
	v20080718-1731:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080527-1255:1.8
	v20080527-1151:1.7
	v20080516-1748:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080503-1740:1.8
	v20080501-2127:1.7
	v20080501-1739:1.8
	m20080429-1543:1.7
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080407-2250:1.8
	v20080407-0930:1.7
	v20080404-1111:1.7
	v20080328-1605:1.7
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20080201-2010:1.7
	v20080201-0201:1.7
	v20080118-1129:1.7
	v20080114-2222:1.7
	v20080114-1111:1.7
	v20080107-1111:1.7
	v20071222-1111:1.7
	v20071214-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.7
	v20071112-0000:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070518-1300:1.7
	bugzilla111892_group_support:1.7.0.2
	Root_bugzilla111892_group_support:1.7
	v20070504-1000:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.6.2.1
	v20070119-1200:1.6.2.1
	v20070111-0800:1.6.2.1
	v20070105-1200:1.6.2.1
	v20070103-0300:1.7
	M4_20:1.7
	v20061218-1500:1.6.2.1
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.6.2.1
	v20061013-1330:1.7
	v20061012-1100:1.6.2.1
	v20060925-1700:1.6.2.1
	v20060919-0800:1.6.2.1
	v20060907-1100:1.6
	M1_20:1.6
	v20060831-1500:1.6
	v20060824-1600:1.6
	v20060817-1500:1.6
	v20060810-1700:1.6
	v20060803-1200:1.6
	v20060728-0500:1.6
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-0800:1.6
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.3;
locks; strict;
comment	@# @;


1.8
date	2008.04.08.02.16.38;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	4d0547fad5804567;

1.7
date	2006.10.03.15.02.04;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.28.02.30.51;	author cmahoney;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2005.11.25.19.38.13;	author cmahoney;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.08;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.46;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.09.13.16.43.41;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[226065] gmf-head ahunter 080407 Fix warning: The type Assert is deprecated
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.diagram.ui.commands;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.transaction.Transaction;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.emf.workspace.AbstractEMFOperation;
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Command that sets the view's mutability. if a view is Mutability state is used
 * by the Diagram Listener to decide if a view can move from the transient childern 
 * list of its container to the persisted list. so a mutable view will never be persisted
 * keep in mind that the mutability state of the view is a transient state so as soon as the 
 * model is closed and oppened again all views will be immutable.
 * @@author mhanner
 */
public class SetViewMutabilityCommand extends Command {
	
	/** cached non-persisted views. */
	private List _viewAdapters = Collections.EMPTY_LIST;
	
	/** immutable flag. */
	private boolean _immutable = true;

	/**
	 * Creates a command instance.
	 * @@param viewAdapter an <code>IAdaptable</code> that adapts to <code>View</code>
	 * @@param immutable immutable state
	 */
	public SetViewMutabilityCommand(IAdaptable viewAdapter, boolean immutable) {
		this( Collections.singletonList(viewAdapter), immutable );
	}
	
	/**
	 * Creates a command instance.
	 * @@param viewAdapters a list of <code>IAdaptable</code> objects that adapts to <code>View</code>
	 * @@param immutable immutable state
	 */
	public SetViewMutabilityCommand(List viewAdapters, boolean immutable) {
		super( DiagramUIMessages.SetViewMutabilityCommand_Label);
		Assert.isNotNull(viewAdapters);
		_viewAdapters = viewAdapters;
		_immutable = immutable;
	}

	/**
	 * Convenience method returning a command to make the supplied views mutable.
	 * @@param viewAdapters views to be associated with the command 
	 * @@return <code>SetViewMutabilityCommand</code>
	 */
	public static SetViewMutabilityCommand makeMutable( List viewAdapters ) {
		return new SetViewMutabilityCommand(viewAdapters, false);
	}

	/**
	 * Convenience method returning a command to make the supplied view mutable.
	 * @@param viewAdapter view to be associated with the command 
	 * @@return <code>SetViewMutabilityCommand</code>
	 */
	public static SetViewMutabilityCommand makeMutable( IAdaptable viewAdapter) {
		return new SetViewMutabilityCommand(viewAdapter, false);
	}

	
	/**
	 * Convenience method returning a command to make the supplied views immutable. 
	 * @@param viewAdapters views to be associated with the command 
	 * @@return <code>SetViewMutabilityCommand</code>
	 */
	public static SetViewMutabilityCommand makeImmutable( List viewAdapters ) {
		return new SetViewMutabilityCommand(viewAdapters, true);
	}

	/**
	 * Convenience method returning a command to make the supplied view immutable. 
	 * @@param viewAdapter views to be associated with the command 
	 * @@return <code>SetViewMutabilityCommand</code>
	 */
	public static SetViewMutabilityCommand makeImmutable( IAdaptable viewAdapter) {
		return new SetViewMutabilityCommand(viewAdapter, true);
	}
	
	/**
	 * gets an unmodifiable copy of the cached view adapters. 
	 * @@return view adapters
	 */
	protected List getViewAdapters() {
		return Collections.unmodifiableList(_viewAdapters);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.commands.Command#execute()
	 */
	public void execute() {
		setMutability(_immutable);
	}
	
	/** Set the mutability flag on all views. */
	private void setMutability(final boolean immutable) {
		if (!_viewAdapters.isEmpty()) {
			
			TransactionalEditingDomain editingDomain = TransactionUtil
				.getEditingDomain(((IAdaptable) _viewAdapters.get(0))
					.getAdapter(View.class));
			if (editingDomain != null) {

				Map options = Collections.singletonMap(
					Transaction.OPTION_UNPROTECTED, Boolean.TRUE);
				AbstractEMFOperation operation = new AbstractEMFOperation(
					editingDomain, StringStatics.BLANK, options) {

					protected IStatus doExecute(IProgressMonitor monitor,
							IAdaptable info)
						throws ExecutionException {
						Iterator adapters = _viewAdapters.iterator();
						while (adapters.hasNext()) {
							IAdaptable adapter = (IAdaptable) adapters.next();
							View notationView = (View) adapter
								.getAdapter(View.class);
							if (notationView != null) {
								notationView.setMutable(!immutable);
							}
						}
						return Status.OK_STATUS;
					}
				};
				try {
					operation.execute(new NullProgressMonitor(), null);
				} catch (ExecutionException e) {
					Trace.catching(DiagramUIPlugin.getInstance(),
						DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
						"setMutability", e); //$NON-NLS-1$
					Log.warning(DiagramUIPlugin.getInstance(),
						DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
						"setMutability", e); //$NON-NLS-1$

				}

			}
		}
	}

	/** 
	 * Returns the view that would be affected if this
	 * command were executed, undone, or redone.
	 * @@return views adapter Collection
	 */
	public Collection getAffectedObjects() {
		return getViewAdapters();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.commands.Command#redo()
	 */
	public void redo() {
		setMutability(_immutable);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.commands.Command#undo()
	 */
	public void undo() {
		setMutability(!_immutable);
	}

}
@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d22 1
a40 1
import org.eclipse.jface.util.Assert;
@


1.6
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
@


1.6.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.5
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d19 1
d21 1
d23 8
d32 6
a37 1
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
a38 1
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
d128 1
a128 1
		SetMutability(_immutable);
d132 26
a157 9
	private void SetMutability(final boolean immutable) {
		MEditingDomainGetter.getMEditingDomain(_viewAdapters).runAsUnchecked(new MRunnable() {
			public Object run() {
				Iterator adapters = _viewAdapters.iterator();
				while (adapters.hasNext()) {
					IAdaptable adapter = (IAdaptable)adapters.next();
					View notationView = (View)adapter.getAdapter(View.class);
					if (notationView != null) {
						notationView.setMutable(!immutable);
d159 11
d171 1
a171 1
				return null; 
d173 1
a173 1
		});
d189 1
a189 1
		SetMutability(_immutable);
d196 1
a196 1
		SetMutability(!_immutable);
@


1.4
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@a21 2
import org.eclipse.jface.util.Assert;

d23 1
a23 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d26 1
d59 1
a59 1
		super( DiagramResourceManager.getI18NString("SetViewMutabilityCommand.Label"));//$NON-NLS-1$
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d25 1
a25 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d60 1
a60 1
		super( PresentationResourceManager.getI18NString("SetViewMutabilityCommand.Label"));//$NON-NLS-1$
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d25 1
a25 1
import com.ibm.xtools.notation.View;
@

