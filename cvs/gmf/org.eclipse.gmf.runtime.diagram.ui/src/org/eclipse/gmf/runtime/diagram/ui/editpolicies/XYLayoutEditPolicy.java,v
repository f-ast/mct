head	1.11;
access;
symbols
	v20081023-2107:1.11
	v20081022-1925:1.11
	v20081022-1005:1.11
	v20081020-0700:1.11
	v20080917-1925:1.11
	v20080916-2008:1.11
	v20080911-1728:1.11
	v20080911-1506:1.11
	v20080910-1520:1.11
	v20080910-1510:1.11
	v20080903-1520:1.11
	v20080903-1510:1.11
	v20080813-1510:1.11
	v20080811-1546:1.11
	v20080731-1520:1.11
	v20080725-1738:1.11
	v20080723-2246:1.11
	v20080723-2232:1.11
	v20080723-1700:1.11
	v20080722-1827:1.11
	v20080718-1700:1.11
	v20080718-1731:1.11
	v20080716-1600:1.11
	v20080716-1642:1.11
	R2_1_maintenance:1.11.0.2
	Root_R2_1_maintenance:1.11
	R2_1_0:1.11
	v20080610-1132:1.11
	v20080603-1553:1.11
	v20080527-1255:1.11
	v20080527-1151:1.10
	v20080516-1748:1.11
	v20080516-1143:1.11
	v20080512-1200:1.11
	v20080503-1740:1.11
	v20080501-2127:1.10
	v20080501-1739:1.11
	m20080429-1543:1.10
	v20080425-1959:1.11
	v20080417-1610:1.11
	v20080407-2250:1.11
	v20080407-0930:1.10
	v20080404-1111:1.10
	v20080328-1605:1.10
	v20080322-0000:1.10
	v20080222-1200:1.10
	v20080201-2010:1.10
	v20080201-0201:1.10
	v20080118-1129:1.10
	v20080114-2222:1.10
	v20080114-1111:1.10
	v20080107-1111:1.10
	v20071222-1111:1.10
	v20071214-1111:1.10
	v20071130-1111:1.10
	v20071124-0000:1.10
	v20071112-0000:1.10
	v20071108-0000:1.10
	v20071003-0000:1.10
	v20070915-0000:1.10
	v20070903-0000:1.10
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.4
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070614-1400:1.10
	v20070608-1300:1.10
	v20070605-1400:1.10
	v20070601-1400:1.10
	v20070525-1500:1.10
	v20070518-1300:1.10
	bugzilla111892_group_support:1.10.0.2
	Root_bugzilla111892_group_support:1.10
	v20070504-1000:1.10
	v20070420-1000:1.10
	v20070413-1300:1.10
	v20070330-1300:1.10
	v20060330-1300:1.10
	v20070322-1100:1.10
	v20060316-0600:1.10
	v20070221-1500:1.10
	v20070208-1800:1.10
	v20070202-0200:1.9.2.1
	v20070119-1200:1.9.2.1
	v20070111-0800:1.9.2.1
	v20070105-1200:1.9.2.1
	v20070103-0300:1.10
	M4_20:1.10
	v20061218-1500:1.9.2.1
	v20061218-1200:1.10
	v20061214-0000:1.10
	M3_20:1.10
	v20061117-0800:1.10
	v20061027-1200:1.9.2.1
	v20061013-1330:1.10
	v20061012-1100:1.9.2.1
	v20060925-1700:1.9.2.1
	v20060919-0800:1.9.2.1
	v20060907-1100:1.9
	M1_20:1.9
	v20060831-1500:1.9
	v20060824-1600:1.9
	v20060817-1500:1.9
	v20060810-1700:1.9
	v20060803-1200:1.9
	v20060728-0500:1.9
	v20060721-1130:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060616-1400:1.9
	v20060616-1200:1.9
	v20060609-1400:1.8
	v20060531-1730:1.8
	v20060530-1930:1.8
	v20060526-1200:1.8
	v20060519-0800:1.8
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.8
	I20060216-1945:1.7
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.6
	I20051201-1800:1.6
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.3;
locks; strict;
comment	@# @;


1.11
date	2008.04.08.02.16.39;	author ahunter;	state Exp;
branches;
next	1.10;
commitid	4d0547fad5804567;

1.10
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.14.18.39.49;	author ahunter;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2006.02.24.23.34.27;	author mmostafa;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.13.19.11.49;	author ldamus;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.25.19.38.12;	author cmahoney;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.04.21.27.49;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.02.23.30.16;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.06;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.37;	author sshaw;	state Exp;
branches;
next	;

1.9.2.1
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.11
log
@[226065] gmf-head ahunter 080407 Fix warning: The type Assert is deprecated
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

import java.util.Iterator;

import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartViewer;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.GraphicalEditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.SnapToGuides;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.requests.ChangeBoundsRequest;
import org.eclipse.gef.requests.CreateRequest;
import org.eclipse.gef.rulers.RulerProvider;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.figures.LayoutHelper;
import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.DiagramGuide;
import org.eclipse.gmf.runtime.diagram.ui.internal.ruler.commands.ChangeGuideCommand;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.notation.Guide;
import org.eclipse.gmf.runtime.notation.View;

/*
 * @@canBeSeenBy %partners
 */
/**
 * the xy layout edit policy 
 * @@see org.eclipse.gef.editpolicies.XYLayoutEditPolicy
 * @@author sshaw
 *
 */
public class XYLayoutEditPolicy
	extends org.eclipse.gef.editpolicies.XYLayoutEditPolicy {


	/** 
	 * Called in response to a <tt>REQ_ADD</tt> (reparent) request.  
	 * Returns a <tt>SetPropertyCommand</tt> to set the <tt>child<tt>'s bounds
	 * to the supplied constraint.
	 * 
	 * @@param child element being reparented.
	 * @@param constraint - rectangle containing the child's bounds (location)
	 * @@return a new command or null if the compound command is empty
	 * 
	 */
	protected Command createAddCommand(EditPart child, Object constraint) {
		if ( child instanceof ShapeEditPart && constraint instanceof Rectangle) {
			Rectangle rect = (Rectangle) constraint;
			
	 		ICommand boundsCommand = 
	 			new SetBoundsCommand(((ShapeEditPart) child).getEditingDomain(),
	 				DiagramUIMessages.SetLocationCommand_Label_Resize,
	 				new EObjectAdapter((View) child.getModel()),
					rect.getTopLeft()); 
			return new ICommandProxy(boundsCommand);
		}
		return null;
	}

	
	

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy#createChangeConstraintCommand(org.eclipse.gef.requests.ChangeBoundsRequest, org.eclipse.gef.EditPart, java.lang.Object)
	 */
	protected Command createChangeConstraintCommand(
			ChangeBoundsRequest request, EditPart child, Object constraint) {
		

        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
            .getEditingDomain();
        
		Command cmd = createChangeConstraintCommand(child, constraint);
		View view = (View)child.getModel();
		if ((request.getResizeDirection() & PositionConstants.NORTH_SOUTH) != 0) {
			Integer guidePos = (Integer)request.getExtendedData()
					.get(SnapToGuides.KEY_HORIZONTAL_GUIDE);
			if (guidePos != null) {
				int hAlignment = ((Integer)request.getExtendedData()
						.get(SnapToGuides.KEY_HORIZONTAL_ANCHOR)).intValue();
				ChangeGuideCommand cgm = new ChangeGuideCommand(editingDomain, view, true);
				cgm.setNewGuide(findGuideAt(guidePos.intValue(), true), hAlignment);
				cmd = cmd.chain(new ICommandProxy(cgm));
			} else if (DiagramGuide.getInstance().getHorizontalGuide(view) != null) {
				// SnapToGuides didn't provide a horizontal guide, but this part is attached
				// to a horizontal guide.  Now we check to see if the part is attached to
				// the guide along the edge being resized.  If that is the case, we need to
				// detach the part from the guide; otherwise, we leave it alone.
				int alignment = DiagramGuide.getInstance().getHorizontalAlignment(view);
				int edgeBeingResized = 0;
				if ((request.getResizeDirection() & PositionConstants.NORTH) != 0)
					edgeBeingResized = -1;
				else
					edgeBeingResized = 1;
				if (alignment == edgeBeingResized) {
					ChangeGuideCommand cgm = new ChangeGuideCommand(editingDomain, view, true);
					cmd = cmd.chain(new ICommandProxy(cgm));
				}
			}
		}
		
		if ((request.getResizeDirection() & PositionConstants.EAST_WEST) != 0) {
			Integer guidePos = (Integer)request.getExtendedData()
					.get(SnapToGuides.KEY_VERTICAL_GUIDE);
			if (guidePos != null) {
				int vAlignment = ((Integer)request.getExtendedData()
						.get(SnapToGuides.KEY_VERTICAL_ANCHOR)).intValue();
				ChangeGuideCommand cgm = new ChangeGuideCommand(editingDomain, view, false);
				cgm.setNewGuide(findGuideAt(guidePos.intValue(), false), vAlignment);
				cmd = cmd.chain(new ICommandProxy(cgm));
			} else if (DiagramGuide.getInstance().getVerticalGuide(view) != null) {
				int alignment = DiagramGuide.getInstance().getVerticalAlignment(view);
				int edgeBeingResized = 0;
				if ((request.getResizeDirection() & PositionConstants.WEST) != 0)
					edgeBeingResized = -1;
				else
					edgeBeingResized = 1;
				if (alignment == edgeBeingResized) {
					ChangeGuideCommand cgm = new ChangeGuideCommand(editingDomain, view, false);
					cmd = cmd.chain(new ICommandProxy(cgm));
				}
			}
		}
		
        if (request.getType().equals(REQ_MOVE_CHILDREN)
                || request.getType().equals(REQ_ALIGN_CHILDREN)) {
            Integer guidePos = (Integer)request.getExtendedData()
                    .get(SnapToGuides.KEY_HORIZONTAL_GUIDE);
            ChangeGuideCommand cgm = null;
            if (guidePos != null) {
                cgm = new ChangeGuideCommand(editingDomain,view, true);;
                int hAlignment = ((Integer)request.getExtendedData()
                        .get(SnapToGuides.KEY_HORIZONTAL_ANCHOR)).intValue();
                cgm.setNewGuide(findGuideAt(guidePos.intValue(), true), hAlignment);
            }else {
                Guide theOldGuide = DiagramGuide.getInstance().getHorizontalGuide(view);
                if (theOldGuide!=null)
                    cgm = new ChangeGuideCommand(editingDomain,view, true);
            }
            // If know this creates a lot of extra commands.  They are currently
            // required for attaching/detaching shapes to guides
            if (cgm!=null)
                cmd = cmd.chain(new ICommandProxy(cgm));
            
            guidePos = (Integer)request.getExtendedData()
                    .get(SnapToGuides.KEY_VERTICAL_GUIDE);
            cgm = null;
            if (guidePos != null) {
                cgm = new ChangeGuideCommand(editingDomain, view, false);
                int vAlignment = ((Integer)request.getExtendedData()
                        .get(SnapToGuides.KEY_VERTICAL_ANCHOR)).intValue();
                cgm.setNewGuide(findGuideAt(guidePos.intValue(), false), vAlignment);
            }else {
                 Guide theOldGuide = DiagramGuide.getInstance().getVerticalGuide(view);
                    if (theOldGuide!=null)
                        cgm = new ChangeGuideCommand(editingDomain, view, true);
            }
            // If know this creates a lot of extra commands.  They are currently
            // required for attaching/detaching shapes to guides
            if (cgm!=null)
                cmd = cmd.chain(new ICommandProxy(cgm));
        }


		return cmd;
	}
	
	/** 
	 * Called in response to a <tt>REQ_RESIZE_CHILDREN</tt> request.
	 * 
	 * This implementation creates a <tt>SetPropertyCommand</i> and sets
	 * the <tt>ID_BOUNDS</tt> property value to the supplied constraints.
	 * 
	 * @@param child the element being resized.
	 * @@param constraint the elements new bounds.
	 * @@return {@@link SetBoundsCommand}
	 */
	protected Command createChangeConstraintCommand(
		EditPart child,
		Object constraint) {
		Rectangle newBounds = (Rectangle) constraint;
		View shapeView = (View) child.getModel();

        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
            .getEditingDomain();
        
 		ICommand boundsCommand = 
 			new SetBoundsCommand(editingDomain,
 				DiagramUIMessages.SetLocationCommand_Label_Resize,
 				new EObjectAdapter(shapeView),
				newBounds); 
		return new ICommandProxy(boundsCommand);
	}

	/**
	 * @@see org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy#getConstraintFor(org.eclipse.gef.requests.ChangeBoundsRequest, org.eclipse.gef.GraphicalEditPart)
	 */
	protected Object getConstraintFor(
		ChangeBoundsRequest request,
		GraphicalEditPart child) {
		Rectangle rect = (Rectangle) super.getConstraintFor(request, child);
		Rectangle cons = getCurrentConstraintFor(child);
		if (request.getSizeDelta().width == 0)
			rect.width = cons.width;
		if (request.getSizeDelta().height == 0)
			rect.height = cons.height;
		return rect;
	}

	/**
	 * Called in response to a <tt>REQ_CREATE</tt> request. Returns a command
	 * to set each created element bounds and autosize properties.
	 * 
	 * @@param request a create request (understands instances of {@@link CreateViewRequest}).
	 * @@return a command to satify the request; <tt>null</tt> if the request is not
	 * understood.
	 */
	protected Command getCreateCommand(CreateRequest request) {
		CreateViewRequest req = (CreateViewRequest) request;
        

        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
            .getEditingDomain();

		CompositeTransactionalCommand cc = new CompositeTransactionalCommand(
            editingDomain, DiagramUIMessages.AddCommand_Label);
        Iterator iter = req.getViewDescriptors().iterator();

		final Rectangle BOUNDS = (Rectangle) getConstraintFor(request);



		while (iter.hasNext()) {
			CreateViewRequest.ViewDescriptor viewDescriptor = (CreateViewRequest.ViewDescriptor)iter.next(); 
			Rectangle rect = getBoundsOffest(req, BOUNDS,viewDescriptor);
			cc.compose(new SetBoundsCommand(editingDomain, 
				DiagramUIMessages.SetLocationCommand_Label_Resize,
				viewDescriptor,
				rect));
		}
		
		if( cc.reduce() == null )
			return null;

		return chainGuideAttachmentCommands( request,
			new ICommandProxy(cc.reduce()));
	}

	/**
	 * Return bounds offset by some predefined amount.
	 * @@param request the request
	 * @@param bounds	the rectangle bounds
	 * @@param viewDescriptor the view descriptor
	 * @@return rectangle
	 */
	protected Rectangle getBoundsOffest( CreateViewRequest request, Rectangle bounds, CreateViewRequest.ViewDescriptor viewDescriptor ) {
		int translate = request.getViewDescriptors().indexOf(viewDescriptor) * 10;
		return bounds.getCopy().translate( translate, translate );
	}
	
	/** 
	 * <tt>null</tt> implementation: request not handled.
	 */
	protected Command getDeleteDependantCommand(Request request) {
		return null;
	}

	/** 
	 * <tt>null</tt> implementation: request not handled.
	 */
	protected Command getOrphanChildrenCommand(Request request) {
		return null;
	}

	protected EditPolicy createChildEditPolicy(EditPart child) {
		if ( child instanceof ShapeEditPart ) {
			return ((ShapeEditPart)child).getPrimaryDragEditPolicy();
		}
		
		return null;
	}	
	
	/**
	 * Creates command for <tt>REQ_CREATE</tt> 
	 * requests only; all others requests are forwarded to the parent class.
	 * 
	 * @@see #getCommand(Request) 
	 */
	public Command getCommand(Request request) {

		if (REQ_CREATE.equals(request.getType())) {

			if (request instanceof CreateViewRequest) {
				return getCreateCommand((CreateViewRequest) request);
			} else {
				return null;
			}

		}
		return super.getCommand(request);
	}
	
	/* Override to use to deal with causes where the point is UNDERFINED
	 * we will ask the layout helper to find a location for us
	 * @@see org.eclipse.gef.editpolicies.ConstrainedLayoutEditPolicy#getConstraintFor(org.eclipse.gef.requests.CreateRequest)
	 */
	protected Object getConstraintFor(CreateRequest request) {
		
		Object constraint = super.getConstraintFor(request);
		
		if ( LayoutHelper.UNDEFINED.getLocation().equals(request.getLocation()) ){	
			Rectangle rect = (Rectangle)constraint;
			rect.setLocation(getLayoutHelper().getReferencePosition(getHostFigure()));
			Point point = getLayoutHelper().validatePosition(getHostFigure(),rect);
			rect.setLocation(point);
			return rect;	
		}
		return constraint;	
	}
	
	/** 
	 * Return the host's figure. 
	 * The super calls getFigure().  This is a problem when used with shapecompartments.  Instead,
	 * return getContextPane().  In shape comaprtments this will return the correct containing figure.
	 */
	protected IFigure getHostFigure() {
		return ((GraphicalEditPart)getHost()).getContentPane();
	}
	
	// layout helper used to help locate shape created with undefined points
	LayoutHelper layoutHelper = null;
	
	/** Return this layout helper. */
	private LayoutHelper getLayoutHelper() {
		if (layoutHelper == null) {
			layoutHelper = new LayoutHelper();
		}
		return layoutHelper;
	}
	
	/**
	 * @@param request
	 * @@param cmd
	 * @@return command
	 */
	protected Command chainGuideAttachmentCommands(
			Request request, Command cmd) {
		Assert.isNotNull(request);
		Assert.isNotNull(cmd);

		EditPartViewer editPartViewer = getHost().getRoot().getViewer();
		Command result = cmd;

		CreateViewRequest req = (CreateViewRequest) request;
        
        TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost())
            .getEditingDomain();

		// Attach to horizontal guide, if one is given
		Integer guidePos = (Integer)request.getExtendedData()
				.get(SnapToGuides.KEY_HORIZONTAL_GUIDE);
		if (guidePos != null) {
			int hAlignment = ((Integer)request.getExtendedData()
					.get(SnapToGuides.KEY_HORIZONTAL_ANCHOR)).intValue();

			Guide guide = findGuideAt(guidePos.intValue(), true);

			Iterator iter = req.getViewDescriptors().iterator();

			while (iter.hasNext()) {
				IAdaptable desc = (IAdaptable)iter.next();
				ChangeGuideCommand cgm = new ChangeGuideCommand(editingDomain,
                    editPartViewer, desc, true);
				cgm.setNewGuide(guide, hAlignment);
				result = result.chain(new ICommandProxy(cgm));
			}
		}

		// Attach to vertical guide, if one is given
		guidePos = (Integer)request.getExtendedData()
				.get(SnapToGuides.KEY_VERTICAL_GUIDE);
		if (guidePos != null) {
			int vAlignment = ((Integer)request.getExtendedData()
					.get(SnapToGuides.KEY_VERTICAL_ANCHOR)).intValue();

			Guide guide = findGuideAt(guidePos.intValue(), false);

			Iterator iter = req.getViewDescriptors().iterator();

			while (iter.hasNext()) {
				IAdaptable desc = (IAdaptable)iter.next();

				ChangeGuideCommand cgm = new ChangeGuideCommand(editingDomain,
                    editPartViewer, desc, false);
				cgm.setNewGuide(guide, vAlignment);
				result = result.chain(new ICommandProxy(cgm));
			}
		}

		return result;
	}

	/**
	 * gets the guid at a specific pos
	 * @@param pos	the position
	 * @@param horizontal the horizontal flag	
	 * @@return the guid
	 */
	protected Guide findGuideAt(int pos, boolean horizontal) {
		RulerProvider provider = ((RulerProvider)getHost().getViewer().getProperty(
				horizontal ? RulerProvider.PROPERTY_VERTICAL_RULER 
				: RulerProvider.PROPERTY_HORIZONTAL_RULER));
		IMapMode mm = MapModeUtil.getMapMode(((GraphicalEditPart)getHost()).getFigure());
		
		return (Guide)provider.getGuideAt(mm.LPtoDP(pos));
	}
}
@


1.10
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d16 1
a48 1
import org.eclipse.jface.util.Assert;
@


1.9
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
@


1.9.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.8
log
@bugzilla 128209 gmf-head mmostafa 060224 Memory/Performance reduce the number of created commands in response to Arrange All action
@
text
@d33 1
a33 1
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
d82 1
a82 1
			return new EtoolsProxyCommand(boundsCommand);
d110 1
a110 1
				cmd = cmd.chain(new EtoolsProxyCommand(cgm));
d124 1
a124 1
					cmd = cmd.chain(new EtoolsProxyCommand(cgm));
d137 1
a137 1
				cmd = cmd.chain(new EtoolsProxyCommand(cgm));
d147 1
a147 1
					cmd = cmd.chain(new EtoolsProxyCommand(cgm));
d170 1
a170 1
                cmd = cmd.chain(new EtoolsProxyCommand(cgm));
d188 1
a188 1
                cmd = cmd.chain(new EtoolsProxyCommand(cgm));
d219 1
a219 1
		return new EtoolsProxyCommand(boundsCommand);
d273 1
a273 1
			new EtoolsProxyCommand(cc.reduce()));
d402 1
a402 1
				result = result.chain(new EtoolsProxyCommand(cgm));
d423 1
a423 1
				result = result.chain(new EtoolsProxyCommand(cgm));
@


1.7
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d152 39
a190 26
		if (request.getType().equals(REQ_MOVE_CHILDREN)
				|| request.getType().equals(REQ_ALIGN_CHILDREN)) {
			Integer guidePos = (Integer)request.getExtendedData()
					.get(SnapToGuides.KEY_HORIZONTAL_GUIDE);
			ChangeGuideCommand cgm = new ChangeGuideCommand(editingDomain, view, true);
			if (guidePos != null) {
				int hAlignment = ((Integer)request.getExtendedData()
						.get(SnapToGuides.KEY_HORIZONTAL_ANCHOR)).intValue();
				cgm.setNewGuide(findGuideAt(guidePos.intValue(), true), hAlignment);
			}
			// If know this creates a lot of extra commands.  They are currently
			// required for attaching/detaching shapes to guides
			cmd = cmd.chain(new EtoolsProxyCommand(cgm));
			
			guidePos = (Integer)request.getExtendedData()
					.get(SnapToGuides.KEY_VERTICAL_GUIDE);
			cgm = new ChangeGuideCommand(editingDomain, view, false);
			if (guidePos != null) {
				int vAlignment = ((Integer)request.getExtendedData()
						.get(SnapToGuides.KEY_VERTICAL_ANCHOR)).intValue();
				cgm.setNewGuide(findGuideAt(guidePos.intValue(), false), vAlignment);
			}
			// If know this creates a lot of extra commands.  They are currently
			// required for attaching/detaching shapes to guides
			cmd = cmd.chain(new EtoolsProxyCommand(cgm));
		}
@


1.6
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d21 1
d35 1
d44 1
a44 1
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;
d78 1
a78 1
	 			new SetBoundsCommand(
d96 4
d108 1
a108 1
				ChangeGuideCommand cgm = new ChangeGuideCommand(view, true);
d123 1
a123 1
					ChangeGuideCommand cgm = new ChangeGuideCommand(view, true);
d135 1
a135 1
				ChangeGuideCommand cgm = new ChangeGuideCommand(view, false);
d146 1
a146 1
					ChangeGuideCommand cgm = new ChangeGuideCommand(view, false);
d156 1
a156 1
			ChangeGuideCommand cgm = new ChangeGuideCommand(view, true);
d168 1
a168 1
			cgm = new ChangeGuideCommand(view, false);
d198 3
d202 1
a202 1
 			new SetBoundsCommand(
d234 4
d239 3
a241 2
		CompositeModelCommand cc = new CompositeModelCommand(DiagramUIMessages.AddCommand_Label);
		Iterator iter = req.getViewDescriptors().iterator();
d250 1
a250 1
			cc.compose(new SetBoundsCommand(
d256 1
a256 1
		if( cc.unwrap() == null )
d260 1
a260 1
			new EtoolsProxyCommand(cc.unwrap()));
d369 3
d386 2
a387 2
				ChangeGuideCommand cgm = new ChangeGuideCommand(editPartViewer,
					desc, true);
d407 2
a408 2
				ChangeGuideCommand cgm = new ChangeGuideCommand(editPartViewer,
					desc, false);
@


1.5
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@a30 2
import org.eclipse.jface.util.Assert;

d38 1
a38 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d46 1
d77 1
a77 1
	 				DiagramResourceManager.getInstance().getString("SetLocationCommand.Label.Resize"),//$NON-NLS-1$
d194 1
a194 1
 				DiagramResourceManager.getInstance().getString("SetLocationCommand.Label.Resize"),//$NON-NLS-1$
d226 1
a226 1
		CompositeModelCommand cc = new CompositeModelCommand(DiagramResourceManager.getInstance().getString("AddCommand.Label")); //$NON-NLS-1$
d237 1
a237 1
				DiagramResourceManager.getInstance().getString("SetLocationCommand.Label.Resize"),//$NON-NLS-1$
@


1.4
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d42 2
a43 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d411 3
a413 1
		return (Guide)provider.getGuideAt(MapMode.LPtoDP(pos));
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d40 1
a40 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.PresentationResourceManager;
d77 1
a77 1
	 				PresentationResourceManager.getInstance().getString("SetLocationCommand.Label.Resize"),//$NON-NLS-1$
d194 1
a194 1
 				PresentationResourceManager.getInstance().getString("SetLocationCommand.Label.Resize"),//$NON-NLS-1$
d226 1
a226 1
		CompositeModelCommand cc = new CompositeModelCommand(PresentationResourceManager.getInstance().getString("AddCommand.Label")); //$NON-NLS-1$
d237 1
a237 1
				PresentationResourceManager.getInstance().getString("SetLocationCommand.Label.Resize"),//$NON-NLS-1$
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d43 2
a44 2
import com.ibm.xtools.notation.Guide;
import com.ibm.xtools.notation.View;
@

