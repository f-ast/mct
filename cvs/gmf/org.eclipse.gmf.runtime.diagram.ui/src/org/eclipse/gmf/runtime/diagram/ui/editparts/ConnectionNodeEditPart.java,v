head	1.10;
access;
symbols
	v20081023-2107:1.10
	v20081022-1925:1.10
	v20081022-1005:1.10
	v20081020-0700:1.10
	v20080917-1925:1.10
	v20080916-2008:1.10
	v20080911-1728:1.10
	v20080911-1506:1.10
	v20080910-1520:1.10
	v20080910-1510:1.10
	v20080903-1520:1.10
	v20080903-1510:1.10
	v20080813-1510:1.10
	v20080811-1546:1.10
	v20080731-1520:1.10
	v20080725-1738:1.10
	v20080723-2246:1.10
	v20080723-2232:1.10
	v20080723-1700:1.10
	v20080722-1827:1.10
	v20080718-1700:1.10
	v20080718-1731:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080603-1553:1.10
	v20080527-1255:1.10
	v20080527-1151:1.9.4.1
	v20080516-1748:1.10
	v20080516-1143:1.10
	v20080512-1200:1.10
	v20080503-1740:1.10
	v20080501-2127:1.9.4.1
	v20080501-1739:1.10
	m20080429-1543:1.9.4.1
	v20080425-1959:1.10
	v20080417-1610:1.10
	v20080407-2250:1.10
	v20080407-0930:1.10
	v20080404-1111:1.10
	v20080328-1605:1.10
	v20080322-0000:1.10
	v20080222-1200:1.10
	v20080201-2010:1.10
	v20080201-0201:1.9.4.1
	v20080118-1129:1.9.4.1
	v20080114-2222:1.9.4.1
	v20080114-1111:1.10
	v20080107-1111:1.10
	v20071222-1111:1.10
	v20071214-1111:1.10
	v20071130-1111:1.10
	v20071124-0000:1.9.4.1
	v20071112-0000:1.10
	v20071108-0000:1.10
	v20071003-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.4
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070518-1300:1.9
	bugzilla111892_group_support:1.9.0.2
	Root_bugzilla111892_group_support:1.9
	v20070504-1000:1.9
	v20070420-1000:1.9
	v20070413-1300:1.9
	v20070330-1300:1.9
	v20060330-1300:1.9
	v20070322-1100:1.9
	v20060316-0600:1.9
	v20070221-1500:1.9
	v20070208-1800:1.9
	v20070202-0200:1.7.2.4
	v20070119-1200:1.7.2.3
	v20070111-0800:1.7.2.3
	v20070105-1200:1.7.2.3
	v20070103-0300:1.8
	M4_20:1.8
	v20061218-1500:1.7.2.3
	v20061218-1200:1.8
	v20061214-0000:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061027-1200:1.7.2.3
	v20061013-1330:1.8
	v20061012-1100:1.7.2.3
	v20060925-1700:1.7.2.3
	v20060919-0800:1.7.2.2
	v20060907-1100:1.7.2.1
	M1_20:1.7
	v20060831-1500:1.7.2.1
	v20060824-1600:1.7
	v20060817-1500:1.7
	v20060810-1700:1.7
	v20060803-1200:1.7
	v20060728-0500:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-0800:1.7
	v20060512-1000:1.7
	I20060512-1000:1.7
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.7
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.7
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.7
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;


1.10
date	2007.11.01.15.19.47;	author crevells;	state Exp;
branches;
next	1.9;
commitid	29484729ee924567;

1.9
date	2007.01.25.16.46.33;	author aboyko;	state Exp;
branches
	1.9.4.1;
next	1.8;
commitid	327345b8dee94567;

1.8
date	2006.10.03.15.02.03;	author ahunter;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.28.02.30.51;	author cmahoney;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2005.12.08.22.53.39;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.02.23.30.15;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.22.15.42.19;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.05;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.49.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.36;	author sshaw;	state Exp;
branches;
next	;

1.7.2.1
date	2006.08.25.16.01.09;	author cmahoney;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2006.09.13.16.43.39;	author ahunter;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2006.09.19.18.49.46;	author mmostafa;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2007.01.25.16.54.20;	author aboyko;	state Exp;
branches;
next	;
commitid	4cd145b8e0bc4567;

1.9.4.1
date	2007.11.01.19.48.50;	author crevells;	state Exp;
branches;
next	;
commitid	5311472a2da24567;


desc
@@


1.10
log
@[208408] gmf_head crevells 071101 Cannot move connection anchor points on connections
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.editparts;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.eclipse.draw2d.Connection;
import org.eclipse.draw2d.ConnectionAnchor;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.transaction.RunnableWithResult;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.NodeEditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.requests.CreateRequest;
import org.eclipse.gef.requests.DropRequest;
import org.eclipse.gef.requests.ReconnectRequest;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIPlugin;
import org.eclipse.gmf.runtime.diagram.ui.internal.DiagramUIStatusCodes;
import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.NoteAttachmentReorientEditPolicy;
import org.eclipse.gmf.runtime.draw2d.ui.figures.IAnchorableFigure;
import org.eclipse.gmf.runtime.notation.Anchor;
import org.eclipse.gmf.runtime.notation.IdentityAnchor;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.View;

/**
 * Connection Node EditPart, a specialized Connection EditPart that installs 
 * a <code>ditPolicy.GRAPHICAL_NODE_ROLE</code> on this edit part. it also implements
 * INodeEditPart which defines the connectable edit parts
 * @@author mmostafa
 */
abstract public class ConnectionNodeEditPart
	extends ConnectionEditPart
	implements INodeEditPart {

	/**
	 * constructor 
	 * @@param view owned view by this edit part 
	 */
	public ConnectionNodeEditPart(View view) {
		super(view);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart#createDefaultEditPolicies()
	 */
	protected void createDefaultEditPolicies() {
		// node edit policy needs to be installed before connection editpolicy from the super
		// since connections of a node need to be deleted before the node
		//installEditPolicy(EditPolicy.NODE_ROLE, new NodeEditPolicy());
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new GraphicalNodeEditPolicy());

        // Disable note attachment reorient between two shapes where neither is a note.
        installEditPolicy("NoteAttachmentReorient", //$NON-NLS-1$
            new NoteAttachmentReorientEditPolicy());
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.editparts.AbstractGraphicalEditPart#getModelSourceConnections()
	 */
	protected List getModelSourceConnections(){
		return ViewUtil.getSourceConnections(getEdge());
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gef.editparts.AbstractGraphicalEditPart#getModelTargetConnections()
	 */
	protected List getModelTargetConnections(){
		return ViewUtil.getTargetConnections(getEdge());
	}

	protected ConnectionAnchor getSourceConnectionAnchor() {
		if (getSource() != null && getSource() instanceof NodeEditPart) {
			NodeEditPart editPart = (NodeEditPart) getSource();
			return editPart.getSourceConnectionAnchor(this);
		}
		return super.getSourceConnectionAnchor();
	}

	/*
	 * @@see NodeEditPart#getSourceConnectionAnchor(ConnectionEditPart)
	 */
	public ConnectionAnchor getSourceConnectionAnchor(org.eclipse.gef.ConnectionEditPart connEditPart) {
		final ConnectionNodeEditPart connection = (ConnectionNodeEditPart) connEditPart;
		String t = ""; //$NON-NLS-1$
		try {
			t = (String) getEditingDomain().runExclusive(
				new RunnableWithResult.Impl() {

				public void run() {
					Anchor a = connection.getEdge().getSourceAnchor();
					if (a instanceof IdentityAnchor)
						setResult(((IdentityAnchor) a).getId());
					else 
					    setResult(""); //$NON-NLS-1$
				}
			});
		} catch (InterruptedException e) {
			Trace.catching(DiagramUIPlugin.getInstance(),
				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
				"getSourceConnectionAnchor", e); //$NON-NLS-1$
			Log.error(DiagramUIPlugin.getInstance(),
				DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
				"getSourceConnectionAnchor", e); //$NON-NLS-1$
		}
		return ((IAnchorableFigure)getFigure()).getConnectionAnchor(t);
	}

	/*
	 * @@see NodeEditPart#getSourceConnectionAnchor(Request)
	 */
	public ConnectionAnchor getSourceConnectionAnchor(Request request) {
		Point center = getFigure().getBounds().getCenter();
		getFigure().translateToAbsolute(center);
		Point pt = ((DropRequest)request).getLocation()==null ? 
			center : new Point(((DropRequest)request).getLocation()); 
		if (request instanceof CreateRequest) {
			getFigure().translateToRelative(pt);
		}
		return ((IAnchorableFigure)getFigure()).getSourceConnectionAnchorAt(pt);
	}

	protected ConnectionAnchor getTargetConnectionAnchor() {
		if (getTarget() instanceof NodeEditPart) {
			NodeEditPart editPart = (NodeEditPart) getTarget();
			return editPart.getTargetConnectionAnchor(this);
		}
		return super.getTargetConnectionAnchor();
	}

	/*
	 * @@see NodeEditPart#getTargetConnectionAnchor(ConnectionEditPart)
	 */
	public ConnectionAnchor getTargetConnectionAnchor(org.eclipse.gef.ConnectionEditPart connEditPart) {
		final ConnectionNodeEditPart connection = (ConnectionNodeEditPart) connEditPart;
		String t = ""; //$NON-NLS-1$
		try {
			t = (String) getEditingDomain().runExclusive(
				new RunnableWithResult.Impl() {

				public void run() {
					Anchor a = connection.getEdge().getTargetAnchor();
					if (a instanceof IdentityAnchor)
						setResult(((IdentityAnchor) a).getId());
					else 
					    setResult(""); //$NON-NLS-1$
				}
			});
		} catch (InterruptedException e) {
			Trace.catching(DiagramUIPlugin.getInstance(),
				DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
				"getTargetConnectionAnchor", e); //$NON-NLS-1$
			Log.error(DiagramUIPlugin.getInstance(),
				DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
				"getTargetConnectionAnchor", e); //$NON-NLS-1$
		}
		return ((IAnchorableFigure)getFigure()).getConnectionAnchor(t);
	}
	
	/*
	 * @@see NodeEditPart#getTargetConnectionAnchor(Request)
	 */
	public ConnectionAnchor getTargetConnectionAnchor(Request request) {
		Point center = getFigure().getBounds().getCenter();
		getFigure().translateToAbsolute(center);
		Point pt = ((DropRequest)request).getLocation()==null ? 
			center : new Point(((DropRequest)request).getLocation()); 
		if (request instanceof CreateRequest) {
			getFigure().translateToRelative(pt);
		}
		return ((IAnchorableFigure)getFigure()).getTargetConnectionAnchorAt(pt);
	}
	
    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.INodeEditPart#mapConnectionAnchorToTerminal(org.eclipse.draw2d.ConnectionAnchor)
     */
    final public String mapConnectionAnchorToTerminal(ConnectionAnchor c) {
        return ((IAnchorableFigure) getFigure()).getConnectionAnchorTerminal(c);
    }

	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.INodeEditPart#mapTerminalToConnectionAnchor(String)
	 */
	final public ConnectionAnchor mapTerminalToConnectionAnchor(String terminal) {
		return ((IAnchorableFigure) getFigure()).getConnectionAnchor(terminal);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.editparts.INoteableEditPart#canAttachNote()
	 */
	public boolean canAttachNote() {		
		return true;
	}

	/*
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart#handleNotificationEvent(org.eclipse.gmf.runtime.diagram.ui.internal.listener.NotificationEvent)
	 */
	protected void handleNotificationEvent(Notification notification) {
		Object feature = notification.getFeature();
		if (NotationPackage.eINSTANCE.getView_SourceEdges().equals(feature))
			refreshSourceConnections();
		else
		if (NotationPackage.eINSTANCE.getView_TargetEdges().equals(feature))
			refreshTargetConnections();
		else
			super.handleNotificationEvent(notification);

        if (  NotationPackage.eINSTANCE.getIdentityAnchor_Id().equals(feature) ||
        	  notification.getNewValue() instanceof IdentityAnchor ||
        	  notification.getOldValue() instanceof IdentityAnchor) {
        	anchorChange();
        }
	}

    /**
     * updates identity connection anchors
     */
	public void anchorChange() {
		refreshSourceAnchor();
		refreshTargetAnchor();
	}
    
    /**
     * Retrieve the list of all source and target connections for the connection.
     * @@param set HashSet to add the connections to.
     * @@param connectionEditPart the connection edit part.
     */
    private void getSourceAndTargetConnections(HashSet set, 
            org.eclipse.gef.ConnectionEditPart connectionEditPart) {
        
        if (connectionEditPart == null || set == null)
            return;
            
        for (Iterator i = connectionEditPart.getSourceConnections().iterator(); 
        i.hasNext();) {
            
            org.eclipse.gef.ConnectionEditPart next = 
                (org.eclipse.gef.ConnectionEditPart) i.next();
            Connection sourceConnection = (Connection) next.getFigure();
            set.add(sourceConnection);
            getSourceAndTargetConnections(set, next);
        }

        for (Iterator i = connectionEditPart.getTargetConnections().iterator(); 
        i.hasNext();) {
            
            org.eclipse.gef.ConnectionEditPart next = 
                (org.eclipse.gef.ConnectionEditPart) i.next();
            Connection targetConnection = (Connection) next.getFigure();
            set.add(targetConnection);
            getSourceAndTargetConnections(set, next);
        }
    }
    
    /**
     * Figure out if a cyclic dependency will arise if target connection edit part
     * is connected to the source connection edit part.
     * @@param targetCEP the target connection edit part
     * @@param sourceCEP the source connection edit part
     * @@param checkSourceAndTargetEditParts check both the source and taret edit parts 
     * for cyclic dependencies
     * @@param doNotCheckSourceEditPart (if checkSourceAndTargetEditParts is false) check 
     * only the target edit part if true, otherwise check only the source edit part
     * @@return true if a cyclic dependency would be create when targetCEP and 
     * sourceCEP were to be connected, false otherwise.  
     */
    private boolean isCyclicConnectionRequest(org.eclipse.gef.ConnectionEditPart targetCEP,
            org.eclipse.gef.ConnectionEditPart sourceCEP, 
            boolean checkSourceAndTargetEditParts, boolean doNotCheckSourceEditPart) {
        
        if (targetCEP == null || sourceCEP == null)
            return false;
        
        if (sourceCEP == targetCEP)
        	return true;
        
        // first, do a cyclic check on source and target connections 
        // of the source connection itself.
        // (as every connection is also a node).
        
        HashSet set = new HashSet();
        getSourceAndTargetConnections(set, sourceCEP);
        if (set.contains(targetCEP.getFigure()))
            return true;
        
        
        // now do the cyclic check on the source and target of the source connection...  
        EditPart sourceEP = sourceCEP.getSource(),
                 targetEP = sourceCEP.getTarget();
                 
        if ((sourceEP == targetCEP) || (targetEP == targetCEP)) {
            return true;
        }
        else {
            
            if (!checkSourceAndTargetEditParts && doNotCheckSourceEditPart) {
                // .
            }
            else
                if (sourceEP instanceof org.eclipse.gef.ConnectionEditPart && 
                        isCyclicConnectionRequest(targetCEP, 
                            (org.eclipse.gef.ConnectionEditPart)sourceEP,
                            true, doNotCheckSourceEditPart))
                        return true;
            
            if (!checkSourceAndTargetEditParts && !doNotCheckSourceEditPart) {
                // .
            }
            else
                if (targetEP instanceof org.eclipse.gef.ConnectionEditPart &&
                     isCyclicConnectionRequest(targetCEP, 
                         (org.eclipse.gef.ConnectionEditPart)targetEP,
                         true, doNotCheckSourceEditPart))
                return true;
        }
        
        return false;
    }
    
    /* (non-Javadoc)
     * @@see org.eclipse.gef.editparts.AbstractEditPart#getTargetEditPart(org.eclipse.gef.Request)
     */
    public EditPart getTargetEditPart(Request request) {
        EditPart ep = super.getTargetEditPart(request);
        
        if (ep != null && ep instanceof org.eclipse.gef.ConnectionEditPart) {
            if (request instanceof ReconnectRequest) {
                ReconnectRequest rRequest = (ReconnectRequest)request; 
                
                // If this is just moving an anchor point on the same target or
                // source, then it is fine.  See bugzilla# 208408. 
                if (rRequest.isMovingStartAnchor()) {
                    if (rRequest.getConnectionEditPart().getSource() == ep) {
                        return ep;
                    } 
                } else if (rRequest.getConnectionEditPart().getTarget() == ep) {
                    return ep;
                }
                
                // If source anchor is moved, the connection's source edit part
                // should not be taken into account for a cyclic dependency
                // check so as to avoid false checks. Same goes for the target
                // anchor. See bugzilla# 155243 -- we do not want to target a
                // connection that is already connected to us so that we do not
                // introduce a cyclic connection                
                if (isCyclicConnectionRequest((org.eclipse.gef.ConnectionEditPart)ep, 
                    rRequest.getConnectionEditPart(), false, rRequest.isMovingStartAnchor()))
                    return null;
            }
        }
        
        return ep;
    }
}
@


1.9
log
@[171457] gmf_head aboyko 070125 Reconnecting connection to its bookmark hangs the app
@
text
@d113 2
a114 1
					setResult(""); //$NON-NLS-1$
d164 2
a165 1
					setResult(""); //$NON-NLS-1$
a343 2
        //TODO: this is a workaround for a GEf issue; the actual fix should be in GEF's ConnectionEndPointTracker
        //      the work around should be removed after the gef problem is fixed
a344 5
        /* see bugzilla# 155243
         * 
         * we do not want to target a connection that is already connected to us 
         * so that we do not introduce a cyclic connection.
         */
d349 9
a357 3
                // If source anchor is moved, the connection's source edit part should not
                // be taken into account for a cyclic dependency check so as to avoid
                // false checks. Same goes for the target anchor.
d359 6
@


1.9.4.1
log
@[208408] gmf_R2_0_maintenance crevells 071101 Cannot move connection anchor points on connections
@
text
@d51 2
a52 2
    extends ConnectionEditPart
    implements INodeEditPart {
d54 17
a70 17
    /**
     * constructor 
     * @@param view owned view by this edit part 
     */
    public ConnectionNodeEditPart(View view) {
        super(view);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart#createDefaultEditPolicies()
     */
    protected void createDefaultEditPolicies() {
        // node edit policy needs to be installed before connection editpolicy from the super
        // since connections of a node need to be deleted before the node
        //installEditPolicy(EditPolicy.NODE_ROLE, new NodeEditPolicy());
        super.createDefaultEditPolicies();
        installEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new GraphicalNodeEditPolicy());
d75 1
a75 1
    }
d77 114
a190 116
    /* (non-Javadoc)
     * @@see org.eclipse.gef.editparts.AbstractGraphicalEditPart#getModelSourceConnections()
     */
    protected List getModelSourceConnections(){
        return ViewUtil.getSourceConnections(getEdge());
    }

    /* (non-Javadoc)
     * @@see org.eclipse.gef.editparts.AbstractGraphicalEditPart#getModelTargetConnections()
     */
    protected List getModelTargetConnections(){
        return ViewUtil.getTargetConnections(getEdge());
    }

    protected ConnectionAnchor getSourceConnectionAnchor() {
        if (getSource() != null && getSource() instanceof NodeEditPart) {
            NodeEditPart editPart = (NodeEditPart) getSource();
            return editPart.getSourceConnectionAnchor(this);
        }
        return super.getSourceConnectionAnchor();
    }

    /*
     * @@see NodeEditPart#getSourceConnectionAnchor(ConnectionEditPart)
     */
    public ConnectionAnchor getSourceConnectionAnchor(org.eclipse.gef.ConnectionEditPart connEditPart) {
        final ConnectionNodeEditPart connection = (ConnectionNodeEditPart) connEditPart;
        String t = ""; //$NON-NLS-1$
        try {
            t = (String) getEditingDomain().runExclusive(
                new RunnableWithResult.Impl() {

                public void run() {
                    Anchor a = connection.getEdge().getSourceAnchor();
                    if (a instanceof IdentityAnchor)
                        setResult(((IdentityAnchor) a).getId());
                    else 
                        setResult(""); //$NON-NLS-1$
                }
            });
        } catch (InterruptedException e) {
            Trace.catching(DiagramUIPlugin.getInstance(),
                DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                "getSourceConnectionAnchor", e); //$NON-NLS-1$
            Log.error(DiagramUIPlugin.getInstance(),
                DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
                "getSourceConnectionAnchor", e); //$NON-NLS-1$
        }
        return ((IAnchorableFigure)getFigure()).getConnectionAnchor(t);
    }

    /*
     * @@see NodeEditPart#getSourceConnectionAnchor(Request)
     */
    public ConnectionAnchor getSourceConnectionAnchor(Request request) {
        Point center = getFigure().getBounds().getCenter();
        getFigure().translateToAbsolute(center);
        Point pt = ((DropRequest)request).getLocation()==null ? 
            center : new Point(((DropRequest)request).getLocation()); 
        if (request instanceof CreateRequest) {
            getFigure().translateToRelative(pt);
        }
        return ((IAnchorableFigure)getFigure()).getSourceConnectionAnchorAt(pt);
    }

    protected ConnectionAnchor getTargetConnectionAnchor() {
        if (getTarget() instanceof NodeEditPart) {
            NodeEditPart editPart = (NodeEditPart) getTarget();
            return editPart.getTargetConnectionAnchor(this);
        }
        return super.getTargetConnectionAnchor();
    }

    /*
     * @@see NodeEditPart#getTargetConnectionAnchor(ConnectionEditPart)
     */
    public ConnectionAnchor getTargetConnectionAnchor(org.eclipse.gef.ConnectionEditPart connEditPart) {
        final ConnectionNodeEditPart connection = (ConnectionNodeEditPart) connEditPart;
        String t = ""; //$NON-NLS-1$
        try {
            t = (String) getEditingDomain().runExclusive(
                new RunnableWithResult.Impl() {

                public void run() {
                    Anchor a = connection.getEdge().getTargetAnchor();
                    if (a instanceof IdentityAnchor)
                        setResult(((IdentityAnchor) a).getId());
                    else 
                        setResult(""); //$NON-NLS-1$
                }
            });
        } catch (InterruptedException e) {
            Trace.catching(DiagramUIPlugin.getInstance(),
                DiagramUIDebugOptions.EXCEPTIONS_CATCHING, getClass(),
                "getTargetConnectionAnchor", e); //$NON-NLS-1$
            Log.error(DiagramUIPlugin.getInstance(),
                DiagramUIStatusCodes.IGNORED_EXCEPTION_WARNING,
                "getTargetConnectionAnchor", e); //$NON-NLS-1$
        }
        return ((IAnchorableFigure)getFigure()).getConnectionAnchor(t);
    }
    
    /*
     * @@see NodeEditPart#getTargetConnectionAnchor(Request)
     */
    public ConnectionAnchor getTargetConnectionAnchor(Request request) {
        Point center = getFigure().getBounds().getCenter();
        getFigure().translateToAbsolute(center);
        Point pt = ((DropRequest)request).getLocation()==null ? 
            center : new Point(((DropRequest)request).getLocation()); 
        if (request instanceof CreateRequest) {
            getFigure().translateToRelative(pt);
        }
        return ((IAnchorableFigure)getFigure()).getTargetConnectionAnchorAt(pt);
    }
    
d198 26
a223 26
    /**
     * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.INodeEditPart#mapTerminalToConnectionAnchor(String)
     */
    final public ConnectionAnchor mapTerminalToConnectionAnchor(String terminal) {
        return ((IAnchorableFigure) getFigure()).getConnectionAnchor(terminal);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.diagram.ui.internal.editparts.INoteableEditPart#canAttachNote()
     */
    public boolean canAttachNote() {        
        return true;
    }

    /*
     * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart#handleNotificationEvent(org.eclipse.gmf.runtime.diagram.ui.internal.listener.NotificationEvent)
     */
    protected void handleNotificationEvent(Notification notification) {
        Object feature = notification.getFeature();
        if (NotationPackage.eINSTANCE.getView_SourceEdges().equals(feature))
            refreshSourceConnections();
        else
        if (NotationPackage.eINSTANCE.getView_TargetEdges().equals(feature))
            refreshTargetConnections();
        else
            super.handleNotificationEvent(notification);
d226 3
a228 3
              notification.getNewValue() instanceof IdentityAnchor ||
              notification.getOldValue() instanceof IdentityAnchor) {
            anchorChange();
d230 1
a230 1
    }
d235 4
a238 4
    public void anchorChange() {
        refreshSourceAnchor();
        refreshTargetAnchor();
    }
d292 1
a292 1
            return true;
d342 2
d345 5
d354 3
a356 9
                // If this is just moving an anchor point on the same target or
                // source, then it is fine.  See bugzilla# 208408. 
                if (rRequest.isMovingStartAnchor()) {
                    if (rRequest.getConnectionEditPart().getSource() == ep) {
                        return ep;
                    } 
                } else if (rRequest.getConnectionEditPart().getTarget() == ep) {
                    return ep;
                }
a357 6
                // If source anchor is moved, the connection's source edit part
                // should not be taken into account for a cyclic dependency
                // check so as to avoid false checks. Same goes for the target
                // anchor. See bugzilla# 155243 -- we do not want to target a
                // connection that is already connected to us so that we do not
                // introduce a cyclic connection                
@


1.8
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d291 3
@


1.7
log
@Bugzilla#113850 gmf_head cmahoney 060227 Diagram plug-in adoption of EMF transaction API enhancements
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d14 2
d18 1
d23 1
d29 1
d37 1
d71 4
d239 124
@


1.7.2.1
log
@Bugzilla#155116 gmf_R1_0_maintenance cmahoney 060825 Note attachment can be reoriented between two LEDs
@
text
@a31 1
import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.NoteAttachmentReorientEditPolicy;
a64 4

        // Disable note attachment reorient between two shapes where neither is a note.
        installEditPolicy("NoteAttachmentReorient", //$NON-NLS-1$
            new NoteAttachmentReorientEditPolicy());
@


1.7.2.2
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.7.2.3
log
@[152432] gmf_R1_0_maintenace SyedAtif 060919  Application hangs when two connections are connected to each other.
@
text
@a13 2
import java.util.HashSet;
import java.util.Iterator;
a15 1
import org.eclipse.draw2d.Connection;
a19 1
import org.eclipse.gef.EditPart;
a24 1
import org.eclipse.gef.requests.ReconnectRequest;
a233 124
    
    /**
     * Retrieve the list of all source and target connections for the connection.
     * @@param set HashSet to add the connections to.
     * @@param connectionEditPart the connection edit part.
     */
    private void getSourceAndTargetConnections(HashSet set, 
            org.eclipse.gef.ConnectionEditPart connectionEditPart) {
        
        if (connectionEditPart == null || set == null)
            return;
            
        for (Iterator i = connectionEditPart.getSourceConnections().iterator(); 
        i.hasNext();) {
            
            org.eclipse.gef.ConnectionEditPart next = 
                (org.eclipse.gef.ConnectionEditPart) i.next();
            Connection sourceConnection = (Connection) next.getFigure();
            set.add(sourceConnection);
            getSourceAndTargetConnections(set, next);
        }

        for (Iterator i = connectionEditPart.getTargetConnections().iterator(); 
        i.hasNext();) {
            
            org.eclipse.gef.ConnectionEditPart next = 
                (org.eclipse.gef.ConnectionEditPart) i.next();
            Connection targetConnection = (Connection) next.getFigure();
            set.add(targetConnection);
            getSourceAndTargetConnections(set, next);
        }
    }
    
    /**
     * Figure out if a cyclic dependency will arise if target connection edit part
     * is connected to the source connection edit part.
     * @@param targetCEP the target connection edit part
     * @@param sourceCEP the source connection edit part
     * @@param checkSourceAndTargetEditParts check both the source and taret edit parts 
     * for cyclic dependencies
     * @@param doNotCheckSourceEditPart (if checkSourceAndTargetEditParts is false) check 
     * only the target edit part if true, otherwise check only the source edit part
     * @@return true if a cyclic dependency would be create when targetCEP and 
     * sourceCEP were to be connected, false otherwise.  
     */
    private boolean isCyclicConnectionRequest(org.eclipse.gef.ConnectionEditPart targetCEP,
            org.eclipse.gef.ConnectionEditPart sourceCEP, 
            boolean checkSourceAndTargetEditParts, boolean doNotCheckSourceEditPart) {
        
        if (targetCEP == null || sourceCEP == null)
            return false;
        
        // first, do a cyclic check on source and target connections 
        // of the source connection itself.
        // (as every connection is also a node).
        
        HashSet set = new HashSet();
        getSourceAndTargetConnections(set, sourceCEP);
        if (set.contains(targetCEP.getFigure()))
            return true;
        
        
        // now do the cyclic check on the source and target of the source connection...  
        EditPart sourceEP = sourceCEP.getSource(),
                 targetEP = sourceCEP.getTarget();
                 
        if ((sourceEP == targetCEP) || (targetEP == targetCEP)) {
            return true;
        }
        else {
            
            if (!checkSourceAndTargetEditParts && doNotCheckSourceEditPart) {
                // .
            }
            else
                if (sourceEP instanceof org.eclipse.gef.ConnectionEditPart && 
                        isCyclicConnectionRequest(targetCEP, 
                            (org.eclipse.gef.ConnectionEditPart)sourceEP,
                            true, doNotCheckSourceEditPart))
                        return true;
            
            if (!checkSourceAndTargetEditParts && !doNotCheckSourceEditPart) {
                // .
            }
            else
                if (targetEP instanceof org.eclipse.gef.ConnectionEditPart &&
                     isCyclicConnectionRequest(targetCEP, 
                         (org.eclipse.gef.ConnectionEditPart)targetEP,
                         true, doNotCheckSourceEditPart))
                return true;
        }
        
        return false;
    }
    
    /* (non-Javadoc)
     * @@see org.eclipse.gef.editparts.AbstractEditPart#getTargetEditPart(org.eclipse.gef.Request)
     */
    public EditPart getTargetEditPart(Request request) {
        EditPart ep = super.getTargetEditPart(request);
        //TODO: this is a workaround for a GEf issue; the actual fix should be in GEF's ConnectionEndPointTracker
        //      the work around should be removed after the gef problem is fixed
        
        /* see bugzilla# 155243
         * 
         * we do not want to target a connection that is already connected to us 
         * so that we do not introduce a cyclic connection.
         */
        if (ep != null && ep instanceof org.eclipse.gef.ConnectionEditPart) {
            if (request instanceof ReconnectRequest) {
                ReconnectRequest rRequest = (ReconnectRequest)request; 
                
                // If source anchor is moved, the connection's source edit part should not
                // be taken into account for a cyclic dependency check so as to avoid
                // false checks. Same goes for the target anchor.
                
                if (isCyclicConnectionRequest((org.eclipse.gef.ConnectionEditPart)ep, 
                    rRequest.getConnectionEditPart(), false, rRequest.isMovingStartAnchor()))
                    return null;
            }
        }
        
        return ep;
    }
@


1.7.2.4
log
@[171457] gmf_R1_maintenance aboyko 070125 Reconnecting connection to its bookmark hangs the app
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2007 IBM Corporation and others.
a290 3
        if (sourceCEP == targetCEP)
        	return true;
        
@


1.6
log
@bugzilla 120017 gmf-head sshaw 051208 Redundant classes for managing connection retargetting
@
text
@d19 1
d25 2
a26 1
import org.eclipse.gmf.runtime.diagram.core.internal.util.MEditingDomainGetter;
d29 3
a32 1
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
d94 20
a113 8
		String t = (String) MEditingDomainGetter.getMEditingDomain((View)getModel()).runAsRead( new MRunnable() {
			public Object run() {
				Anchor a = connection.getEdge().getSourceAnchor();
				if (a instanceof IdentityAnchor)
					return ((IdentityAnchor) a).getId();
				return ""; //$NON-NLS-1$
			}
		});
d144 20
a163 8
		String t = (String) MEditingDomainGetter.getMEditingDomain((View)getModel()).runAsRead( new MRunnable() {
			public Object run() {
				Anchor a = connection.getEdge().getTargetAnchor();
				if (a instanceof IdentityAnchor)
					return ((IdentityAnchor) a).getId();
				return ""; //$NON-NLS-1$
			}
		});
@


1.5
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx;
d98 1
a98 1
		return ((PolylineConnectionEx)getFigure()).getConnectionAnchor(t);
d106 1
d112 1
a112 1
		return ((PolylineConnectionEx)getFigure()).getSourceConnectionAnchorAt(pt);
d136 1
a136 1
		return ((PolylineConnectionEx)getFigure()).getConnectionAnchor(t);
d144 1
d150 1
a150 1
		return ((PolylineConnectionEx)getFigure()).getTargetConnectionAnchorAt(pt);
d157 1
a157 1
        return ((PolylineConnectionEx) getFigure()).getConnectionAnchorTerminal(c);
d164 1
a164 1
		return ((PolylineConnectionEx) getFigure()).getConnectionAnchor(terminal);
@


1.4
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@d67 1
a67 1
		return ViewUtil.getSourceConnections(getConnectorView());
d74 1
a74 1
		return ViewUtil.getTargetConnections(getConnectorView());
d89 1
a89 1
		final ConnectionNodeEditPart connector = (ConnectionNodeEditPart) connEditPart;
d92 1
a92 1
				Anchor a = connector.getConnectorView().getSourceAnchor();
d126 1
a126 1
		final ConnectionNodeEditPart connector = (ConnectionNodeEditPart) connEditPart;
d129 1
a129 1
				Anchor a = connector.getConnectorView().getTargetAnchor();
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a13 1
import java.beans.PropertyChangeEvent;
a23 1

d25 1
a25 1
import org.eclipse.gmf.runtime.diagram.core.listener.NotificationEvent;
a26 2
import org.eclipse.gmf.runtime.diagram.ui.properties.Properties;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
a28 1
import org.eclipse.gmf.runtime.emf.core.util.MetaModelUtil;
a33 3
/*
 * @@canBeSeenBy %partners
 */
a164 18
	/**
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart#handlePropertyChangeEvent(java.beans.PropertyChangeEvent)
	 */
	protected void handlePropertyChangeEvent(PropertyChangeEvent event) {
		if (Properties.ID_SOURCECONNECTIONS.equals(event.getPropertyName()))
			refreshSourceConnections();
		else
		if (Properties.ID_TARGETCONNECTIONS.equals(event.getPropertyName()))
			refreshTargetConnections();
		else
			super.handlePropertyChangeEvent(event);

        Object element = MetaModelUtil.getElement(event.getPropertyName());
        if (element != null && element.equals(NotationPackage.eINSTANCE.getIdentityAnchor_Id())) {
        	anchorChange();
        }
	}
		
d175 15
a189 7
	protected void handleNotificationEvent(NotificationEvent e) {
		super.handleNotificationEvent(e);
		Notification event = e.getNotification();
		if (event.getNewValue() instanceof IdentityAnchor ||
	 			event.getOldValue() instanceof IdentityAnchor){
	   		anchorChange();
	    }
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d32 4
a35 4
import com.ibm.xtools.notation.Anchor;
import com.ibm.xtools.notation.IdentityAnchor;
import com.ibm.xtools.notation.NotationPackage;
import com.ibm.xtools.notation.View;
@

