head	1.9;
access;
symbols
	v20081020-0700:1.9
	v20080903-1520:1.9
	v20080903-1510:1.9
	v20080722-1827:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080603-1553:1.9
	v20080527-1255:1.9
	v20080512-1200:1.9
	v20080425-1959:1.9
	v20080328-1605:1.9
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20080114-1111:1.8
	v20071124-0000:1.7
	v20071108-0000:1.8
	v20071003-0000:1.8
	v20070903-0000:1.8
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070601-1400:1.7
	v20070518-1300:1.7
	v20070330-1300:1.7
	v20060316-0600:1.7
	v20070208-1800:1.7
	v20070202-0200:1.6.2.1
	v20070105-1200:1.6.2.1
	M4_20:1.7
	v20061218-1500:1.6.2.1
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061020-1000:1.6.2.1
	v20061013-1330:1.7
	v20061012-1100:1.6.2.1
	v20060919-0800:1.6.2.1
	M1_20:1.6
	v20060721-1130:1.6.2.1
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060531-1730:1.6
	v20060519-0800:1.6
	I20060428-1300:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.4
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.9
date	2008.03.28.18.13.58;	author ahunter;	state Exp;
branches;
next	1.8;
commitid	175547ed35664567;

1.8
date	2007.07.31.18.31.07;	author aboyko;	state Exp;
branches;
next	1.7;
commitid	6b8646af7fe94567;

1.7
date	2006.10.03.15.04.50;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.10.19.18.21;	author sshaw;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2005.12.05.19.18.11;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.25.19.37.45;	author cmahoney;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.02.23.30.25;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.16;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.55;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.07.17.19.48.05;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[212024] gmf-head jbruck 080328 GMF should support PDF format when saving diagrams as image file
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.render.clipboard;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;

import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.eclipse.core.runtime.IStatus;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.l10n.SharedImages;
import org.eclipse.gmf.runtime.diagram.ui.render.internal.DiagramUIRenderDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.render.internal.DiagramUIRenderPlugin;
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.image.ImageConverter;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.svg.export.GraphicsSVG;
import org.eclipse.gmf.runtime.draw2d.ui.render.factory.RenderedImageFactory;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderedImageDescriptor;
import org.eclipse.jface.resource.ImageDescriptor;
import org.w3c.dom.Element;

/**
 * Supports generation of an SVG DOM for a diagram or a subset of
 * editparts on a diagram.
 * 
 * @@author jschofie / sshaw
 */
public class DiagramSVGGenerator
	extends DiagramGenerator {

	private RenderedImage renderedImage = null;

	private Element svgRoot = null;

	private Rectangle viewBox = null;

	/**
	 * Creates a new instance.
	 * 
	 * @@param diagramEditPart
	 *            the diagram editpart
	 */
	public DiagramSVGGenerator(DiagramEditPart diagramEditPart) {
		super(diagramEditPart);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.render.clipboard.DiagramGenerator#setUpGraphics(int, int)
	 */
	protected Graphics setUpGraphics(int width, int height) {
		viewBox = new Rectangle(0, 0, width, height);
		return GraphicsSVG.getInstance(viewBox);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.render.clipboard.DiagramGenerator#getImageDescriptor(org.eclipse.draw2d.Graphics)
	 */
	protected ImageDescriptor getImageDescriptor(Graphics g) {
		try {
			GraphicsSVG svgG = (GraphicsSVG) g;
			// Get the root element (the svg element)
			svgRoot = svgG.getRoot();

			ByteArrayOutputStream os = new ByteArrayOutputStream(5000); // 5K
																		// buffer
			stream(os);
			os.close();

			setRenderedImage(RenderedImageFactory.getInstance(os.toByteArray()));

			return RenderedImageDescriptor
				.createFromRenderedImage(getRenderedImage());
		} catch (IOException ex) {
			Log.error(DiagramUIRenderPlugin.getInstance(), IStatus.ERROR, ex
				.getMessage(), ex);
		}

		return null;
	}

	/**
	 * Writes the SVG Model out to a file.
	 * 
	 * @@param outputStream
	 *            output stream to store the SVG Model
	 */
	public void stream(OutputStream outputStream) {
		try {

			// Define the view box
			svgRoot.setAttributeNS(null,
				"viewBox", String.valueOf(viewBox.x) + " " + //$NON-NLS-1$ //$NON-NLS-2$
					String.valueOf(viewBox.y) + " " + //$NON-NLS-1$
					String.valueOf(viewBox.width) + " " + //$NON-NLS-1$
					String.valueOf(viewBox.height));

			// Write the document to the stream
			Transformer transformer = TransformerFactory.newInstance()
				.newTransformer();
			transformer.setOutputProperty(OutputKeys.METHOD, "xml"); //$NON-NLS-1$
			transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8"); //$NON-NLS-1$
			transformer.setOutputProperty(OutputKeys.INDENT, "yes"); //$NON-NLS-1$

			DOMSource source = new DOMSource(svgRoot);
			StreamResult result = new StreamResult(outputStream);
			transformer.transform(source, result);
		} catch (Exception ex) {
			Log.error(DiagramUIRenderPlugin.getInstance(), IStatus.ERROR, ex
				.getMessage(), ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.clipboard.DiagramGenerator#createAWTImageForParts(java.util.List)
	 */
	public Image createAWTImageForParts(List editparts, org.eclipse.swt.graphics.Rectangle sourceRect) {
		createSWTImageDescriptorForParts(editparts, sourceRect);
		if (getRenderedImage() != null) {
			try {
				BufferedImage bufImg = (BufferedImage)getRenderedImage().getAdapter(BufferedImage.class);
				if (bufImg == null)
					bufImg = ImageConverter.convert(getRenderedImage().getSWTImage());
				return bufImg;
			} catch (Error e) {
				// log the Error but allow execution to continue
				Trace.catching(DiagramUIRenderPlugin.getInstance(),
					DiagramUIRenderDebugOptions.EXCEPTIONS_THROWING, getClass(),
					"createAWTImageForParts() failed to generate image", //$NON-NLS-1$
					e);
				return ImageConverter.convert(SharedImages
					.get(SharedImages.IMG_ERROR));

			} catch (Exception ex) {
				// log the Exception but allow execution to continue
				Trace.catching(DiagramUIRenderPlugin.getInstance(),
					DiagramUIRenderDebugOptions.EXCEPTIONS_THROWING, getClass(),
					"createAWTImageForParts() failed to generate image", //$NON-NLS-1$
					ex);
				return ImageConverter.convert(SharedImages
					.get(SharedImages.IMG_ERROR));
			}
		}

		return ImageConverter.convert(SharedImages.get(SharedImages.IMG_ERROR));
	}

	/**
	 * @@return Returns the rendered image created by previous 
	 * call to createSWTImageDescriptorForParts
	 */
	public RenderedImage getRenderedImage() {
		return renderedImage;
	}

	/**
	 * @@param svgImage
	 *            The svgImage to set.
	 */
	private void setRenderedImage(RenderedImage renderedImage) {
		this.renderedImage = renderedImage;
	}
}@


1.8
log
@[160386] gmf_head aboyko 070731 [ImageSupport] Save as Image fails when saving large diagrams
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
d53 1
a53 1
	private RenderedImage svgImage = null;
d91 1
a91 1
			setSVGImage(RenderedImageFactory.getInstance(os.toByteArray()));
d94 1
a94 1
				.createFromRenderedImage(getSVGImage());
d142 1
a142 1
		if (getSVGImage() != null) {
d144 1
a144 1
				BufferedImage bufImg = (BufferedImage)getSVGImage().getAdapter(BufferedImage.class);
d146 1
a146 1
					bufImg = ImageConverter.convert(getSVGImage().getSWTImage());
d172 2
a173 1
	 * @@return Returns the svgImage.
d175 2
a176 2
	private RenderedImage getSVGImage() {
		return svgImage;
d183 2
a184 2
	private void setSVGImage(RenderedImage svgImage) {
		this.svgImage = svgImage;
@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d140 2
a141 2
	public Image createAWTImageForParts(List editparts) {
		createSWTImageDescriptorForParts(editparts);
@


1.6
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@d2 1
a2 1
 * Copyright (c) 2004 - 2005 IBM Corporation and others.
@


1.6.2.1
log
@[150280] gmf_R1_0_maintenance ahunter 060717 Incorrect copyright in some GMF files
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.5
log
@bugzilla 111436 gmf-head sshaw 051205 Improve performance of SVG transcoder
@
text
@d37 2
a39 1
import org.eclipse.gmf.runtime.draw2d.ui.render.image.ImageConverter;
a40 1
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.svg.export.GraphicsSVG;
@


1.4
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d15 1
d144 4
a147 1
				return getSVGImage().getBufferedImage();
@


1.3
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d32 1
a32 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d150 2
a151 3
				return ImageConverter
					.convert(DiagramResourceManager.getInstance().getImage(
						DiagramResourceManager.IMAGE_ERROR));
d159 2
a160 3
				return ImageConverter
					.convert(DiagramResourceManager.getInstance().getImage(
						DiagramResourceManager.IMAGE_ERROR));
d164 1
a164 2
		return ImageConverter.convert(DiagramResourceManager.getInstance()
			.getImage(DiagramResourceManager.IMAGE_ERROR));
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a28 3
import org.eclipse.jface.resource.ImageDescriptor;
import org.w3c.dom.Element;

d32 1
a32 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.Images;
d40 2
d150 3
a152 1
				return ImageConverter.convert(Images.ICON_ERROR);
d160 3
a162 1
				return ImageConverter.convert(Images.ICON_ERROR);
d166 2
a167 1
		return ImageConverter.convert(Images.ICON_ERROR);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004 - 2005.  All Rights Reserved.             |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

