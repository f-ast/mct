head	1.6;
access;
symbols
	v20080903-1520:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	I20060428-1300:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;


1.6
date	2006.05.15.15.25.59;	author cmahoney;	state dead;
branches;
next	1.5;

1.5
date	2005.11.02.23.30.25;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.22.15.42.33;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.12.21.29.16;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.48.12;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.49;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Bugzilla#140166 gmf_head cmahoney 060515 Move necessary client accessed internal classes into public API
@
text
@/******************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.render.internal.editparts;

import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.figures.ScalableImageFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;
import org.eclipse.gmf.runtime.gef.ui.figures.WrapperNodeFigure;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.util.IPropertyChangeListener;

/**
 * @@author sshaw
 * @@canBeSeenBy org.eclipse.gmf.runtime.diagram.ui.*
 * 
 * Abstract EditPart for handling display of a image of the diagram surface.
 * There are no assumptions about a semantic element being owned by the view. It
 * is up to subclasses to determine where the image information is being
 * retrieved from.
 */
public abstract class AbstractImageEditPart
	extends ShapeNodeEditPart {

	private RenderedImage renderedImage = null;
	
	/* Keep figure in order to apply anti-aliasing */
	ScalableImageFigure sif = null;

	   /**
	* Listener for the PreferenceStore.
	* Listen and respond for changes to the 
	* drop shadow preference store value.
	* 
	*/
	protected class PreferencePropertyChangeListener 
		implements IPropertyChangeListener {
	
		public void propertyChange(org.eclipse.jface.util.PropertyChangeEvent event) {			           
			if (event.getProperty().equals(IPreferenceConstants.PREF_ENABLE_ANTIALIAS)){
				refreshEnableAntiAlias();
			}			
		}
	}

	
	
	/**
	 * Constructor
	 * 
	 * @@param view
	 *            IShapeView element that this is a controller for.
	 */
	public AbstractImageEditPart(View view) {
		super(view);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart#createNodeFigure()
	 */
	protected NodeFigure createNodeFigure() {

		// Check anti-aliasing preference
		IPreferenceStore preferenceStore =
			(IPreferenceStore) getDiagramPreferencesHint().getPreferenceStore();
		boolean antiAlias = preferenceStore.getBoolean(
			IPreferenceConstants.PREF_ENABLE_ANTIALIAS);
		sif = new ScalableImageFigure(getRenderedImage(),
			true, true, antiAlias);
		sif.setMaintainAspectRatio(false);

		return new WrapperNodeFigure(sif);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gef.editparts.AbstractEditPart#refreshVisuals()
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshImage();
	}

	/**
	 * Refresh the display image if accessible. Essentially toggles between the
	 * comment mode and image mode depending on whether there is an image that
	 * can be displayed.
	 */
	protected void refreshImage() {
		renderedImage = null;
		getFigure().invalidate();
	}

	/**
	 * Refreshes the figures and enables anti-aliasing on the
	 * non-text portions
	 */
	protected void refreshEnableAntiAlias() {
		// Check anti-aliasing preference
		IPreferenceStore preferenceStore =
			(IPreferenceStore) getDiagramPreferencesHint().getPreferenceStore();
		boolean antiAlias = preferenceStore.getBoolean(
			IPreferenceConstants.PREF_ENABLE_ANTIALIAS);
		sif.setAntiAlias(antiAlias);
	}	
	
	
	/**
	 * regenerateImageFromSource This method will recreate the RenderedImage
	 * object from a specific source (file, bits etc.).
	 * 
	 * @@return RenderedImage object that will be rendered to the screen using
	 *         the ScalableImageFigure class. Concrete clients of
	 *         AbstractImageEditPart need to override this method to return an
	 *         instance that can be used for rendering.
	 */
	abstract protected RenderedImage regenerateImageFromSource();

	/**
	 * getRenderedImage Accessor method to return the cached rendered image used
	 * for display.
	 * 
	 * @@return RenderedImage object that was generated using the
	 *         regenerateImageFromSource api.
	 */
	final public RenderedImage getRenderedImage() {
		if (renderedImage == null) {
			RenderedImage img = regenerateImageFromSource();
			if (img != null && img.getSWTImage() != null)
				renderedImage = img;
		}

		return renderedImage;
	}
}@


1.5
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@@


1.4
log
@Bugzilla 109092: gmf_head sshaw 050922 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
Contributed by Mohammed Mostafa
@
text
@a13 1
import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;
d15 1
@


1.3
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a13 5
import java.beans.PropertyChangeEvent;

import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.util.IPropertyChangeListener;

d21 2
a148 9

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart#handlePropertyChangeEvent(java.beans.PropertyChangeEvent)
	 */
	protected void handlePropertyChangeEvent(PropertyChangeEvent evt) {
		super.handlePropertyChangeEvent(evt);
	}
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d23 1
a23 1
import com.ibm.xtools.notation.View;
@

