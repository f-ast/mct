head	1.8;
access;
symbols
	v20081020-0700:1.8
	v20080903-1520:1.8
	v20080903-1510:1.8
	v20080722-1827:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080603-1553:1.8
	v20080527-1255:1.8
	v20080512-1200:1.8
	v20080425-1959:1.8
	v20080328-1605:1.7
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080114-1111:1.6
	v20071124-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.4
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070601-1400:1.6
	v20070518-1300:1.6
	v20070330-1300:1.6
	v20060316-0600:1.6
	v20070208-1800:1.6
	v20070202-0200:1.6
	v20070105-1200:1.6
	M4_20:1.6
	v20061218-1500:1.6
	v20061218-1200:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061020-1000:1.6
	v20061013-1330:1.6
	v20061012-1100:1.6
	v20060919-0800:1.6
	M1_20:1.6
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060531-1730:1.6
	v20060519-0800:1.6
	I20060428-1300:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4;
locks; strict;
comment	@# @;


1.8
date	2008.04.25.18.39.35;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	2663481225674567;

1.7
date	2008.03.28.21.54.53;	author ahunter;	state Exp;
branches;
next	1.6;
commitid	711347ed692d4567;

1.6
date	2006.02.13.19.12.22;	author ldamus;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.25.19.37.45;	author cmahoney;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.12.21.29.16;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.08.18.58.45;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.30.18.48.12;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.56;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[228915] gmf-head ahunter 080425 Non-externalized string literal; it should be followed by //$NON-NLS-<n>
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.render.internal.commands;

import java.awt.Image;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.gmf.runtime.common.core.command.AbstractCommand;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.StringStatics;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.util.CustomData;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.internal.commands.ClipboardCommand;
import org.eclipse.gmf.runtime.diagram.ui.render.clipboard.AWTClipboardHelper;
import org.eclipse.gmf.runtime.diagram.ui.render.clipboard.DiagramImageGenerator;
import org.eclipse.gmf.runtime.diagram.ui.render.internal.DiagramUIRenderDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.render.internal.DiagramUIRenderPlugin;
import org.eclipse.gmf.runtime.diagram.ui.render.internal.l10n.DiagramUIRenderMessages;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.dialogs.MessageDialog;

/**
 * Command for copying an image to the clipboard
 * 
 * @@author sshaw
 * @@canBeSeenBy %level1
 */
public class CopyImageCommand
	extends AbstractCommand {

	/**
	 * The list of <code>IView</code> used for the copy operation
	 */
	private final List source;

	private DiagramEditPart diagramEP;

	/**
	 * String constant for the clipboard format
	 */
	public static final String DRAWING_SURFACE = "Drawing Surface"; //$NON-NLS-1$

	/**
	 * The target <code>IView</code> used as a context for the clipboard
	 * operations. The cut and copy will use this to retrieve the view model.
	 * The paste will use this as the target view.
	 */
	private final View viewContext;

	/**
	 * Constructor for CopyImageCommand.
	 * 
	 * @@param context
	 * @@param viewContext
	 * @@param source
	 */
	public CopyImageCommand(View viewContext, List source,
			DiagramEditPart diagramEP) {
		this(StringStatics.BLANK, viewContext, source, diagramEP);
	}

	/**
	 * Constructor for CopyImageCommand.
	 * 
	 * @@param label
	 * @@param context
	 * @@param viewContext
	 * @@param source
	 */
	public CopyImageCommand(String label, View viewContext, List source,
			DiagramEditPart diagramEP) {
		super(label, null);

		Assert.isNotNull(source);
		Assert.isNotNull(viewContext);

		this.source = source;
		this.viewContext = viewContext;
		this.diagramEP = diagramEP;
	}

    // Documentation copied from interface
	protected CommandResult doExecuteWithResult(
            IProgressMonitor progressMonitor, IAdaptable info)
        throws ExecutionException {

		/* Check if the source has elements */
		boolean imageCopyDiagram = false;
		if (getSource() == null || getSource().size() == 0) {
			imageCopyDiagram = true;
		}

		Map epRegistry = diagramEP.getViewer().getEditPartRegistry();
		ArrayList editParts = new ArrayList(getSource().size());
		ListIterator li = getSource().listIterator();
		while (li.hasNext()) {
			editParts.add(epRegistry.get(li.next()));
		}

		DiagramImageGenerator imageGenerator = new DiagramImageGenerator(
			getDiagramEditPart());

		Image image = null;
		try {
			if (imageCopyDiagram)
				image = imageGenerator.createAWTImageForDiagram();
			else
				image = imageGenerator.createAWTImageForParts(editParts);
		} catch (OutOfMemoryError error) {
			String eMsg = DiagramUIRenderMessages.CopyAction_UnableToCopyImageMessage;
			Log.error(DiagramUIRenderPlugin.getInstance(), IStatus.ERROR, eMsg,
				error);
			MessageDialog.openInformation(null,
				DiagramUIRenderMessages.CopyAction_ErrorDialogTitle, eMsg);
		}

		/* Get the view model from the view context */
		CustomData data = null;
		if (!imageCopyDiagram) {
			/* Copy the views */
			data = (getViewContext() != null) ? new CustomData(DRAWING_SURFACE,
				ClipboardCommand.copyViewsToString(getSource()).getBytes())
				: null;
		}

		AWTClipboardHelper.getInstance().copyToClipboard(data, image);
		diagramEP = null; // we don't want this to end up on the undo stack
		return CommandResult.newOKCommandResult();
	}
    
    /**
     * @@throws UnsupportedOperationException because redo not supported
     */
    protected CommandResult doRedoWithResult(IProgressMonitor progressMonitor,
            IAdaptable info)
        throws ExecutionException {

        UnsupportedOperationException uoe = new UnsupportedOperationException();
        Trace.throwing(DiagramUIRenderPlugin.getInstance(),
            DiagramUIRenderDebugOptions.EXCEPTIONS_THROWING, getClass(),
            "doRedoWithResult", uoe); //$NON-NLS-1$
        throw uoe;
    }
    
    /**
     * @@throws UnsupportedOperationException
     *             undo not supported
     */
    protected CommandResult doUndoWithResult(IProgressMonitor progressMonitor,
            IAdaptable info)
        throws ExecutionException {

        UnsupportedOperationException uoe = new UnsupportedOperationException();
        Trace.throwing(DiagramUIRenderPlugin.getInstance(),
            DiagramUIRenderDebugOptions.EXCEPTIONS_THROWING, getClass(),
            "doUndoWithResult", uoe); //$NON-NLS-1$
        throw uoe;
    }

	/**
	 * @@return Returns the diagramEP.
	 */
	private DiagramEditPart getDiagramEditPart() {
		return diagramEP;
	}

	/**
	 * Returns the source.
	 * 
	 * @@return List
	 */
	private List getSource() {
		return source;
	}

	/**
	 * @@return Returns the viewContext.
	 */
	private View getViewContext() {
		return viewContext;
	}
    
    public boolean canRedo() {
        return false;
    }
    
    public boolean canUndo() {
        return false;
    }
}@


1.7
log
@[224706] gmf-head ahunter 080328 IUndoableOperation changes in the platform cause AssertionFailedException
@
text
@d28 1
d78 1
a78 1
		this("", viewContext, source, diagramEP);
@


1.6
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d21 1
a38 1
import org.eclipse.jface.util.Assert;
d77 1
a77 1
		this(null, viewContext, source, diagramEP);
@


1.5
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d20 2
d27 1
d33 1
d41 2
a44 2
 * 
 * Command for copying an image to the clipboard
d90 1
a90 1
		super(label);
d100 5
a104 6
	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.core.command.AbstractCommand#doExecute(org.eclipse.core.runtime.IProgressMonitor)
	 */
	protected CommandResult doExecute(IProgressMonitor progressMonitor) {
d146 1
a146 1
		return newOKCommandResult();
d148 29
d200 8
@


1.4
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a21 3
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.util.Assert;

d31 1
a31 1
import org.eclipse.gmf.runtime.diagram.ui.render.internal.l10n.ResourceManager;
d33 2
d125 1
a125 2
			String eMsg = ResourceManager
				.getI18NString("CopyAction.UnableToCopyImageMessage");//$NON-NLS-1$
d128 2
a129 3
			MessageDialog.openInformation(null, ResourceManager
				.getI18NString("CopyAction.ErrorDialogTitle"), //$NON-NLS-1$
				eMsg);
@


1.3
log
@Bugzilla 109092  : rumv_head mmostafa 050908 : API Analysis: Diagram layer API.  Determine if all API is needed and/or has appropriate signatures
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@


1.2
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d32 1
a32 1
import org.eclipse.gmf.runtime.diagram.ui.render.l10n.ResourceManager;
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d33 1
a33 1
import com.ibm.xtools.notation.View;
@

