head	1.10;
access;
symbols
	v20081020-0700:1.10
	v20080903-1520:1.10
	v20080903-1510:1.9.2.1
	v20080722-1827:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080603-1553:1.9
	v20080527-1255:1.9
	v20080512-1200:1.8
	v20080425-1959:1.8
	v20080328-1605:1.8
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20080114-1111:1.8
	v20071124-0000:1.7
	v20071108-0000:1.8
	v20071003-0000:1.8
	v20070903-0000:1.8
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070601-1400:1.7
	v20070518-1300:1.7
	v20070330-1300:1.7
	v20060316-0600:1.7
	v20070208-1800:1.7
	v20070202-0200:1.6.2.1
	v20070105-1200:1.6.2.1
	M4_20:1.7
	v20061218-1500:1.6.2.1
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061020-1000:1.6.2.1
	v20061013-1330:1.7
	v20061012-1100:1.6.2.1
	v20060919-0800:1.6.2.1
	M1_20:1.6
	v20060721-1130:1.6.2.1
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060531-1730:1.6
	v20060519-0800:1.6
	I20060428-1300:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.3;
locks; strict;
comment	@# @;


1.10
date	2008.08.27.20.25.22;	author aboyko;	state Exp;
branches;
next	1.9;
commitid	5aad48b5b8314567;

1.9
date	2008.05.23.03.17.36;	author aboyko;	state Exp;
branches
	1.9.2.1;
next	1.8;
commitid	499d4836374a4567;

1.8
date	2007.07.31.18.31.07;	author aboyko;	state Exp;
branches;
next	1.7;
commitid	6b8646af7fe94567;

1.7
date	2006.10.03.15.04.50;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.10.19.18.21;	author sshaw;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2005.11.25.19.37.45;	author cmahoney;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.02.23.30.25;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.28.14.29.39;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.29.16;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.18.55;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.07.17.19.48.04;	author ahunter;	state Exp;
branches;
next	;

1.9.2.1
date	2008.08.27.20.20.07;	author aboyko;	state Exp;
branches;
next	;
commitid	579848b5b6f64567;


desc
@@


1.10
log
@[239653] gmf_head aboyko 080827 [ImageSupport] Support DiagramPartInfo API for exporting the scaled down diagram to image
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.render.clipboard;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.List;

import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.SWTGraphics;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.PrecisionPoint;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScaledGraphics;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.graphics.GraphicsToGraphics2DAdaptor;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.graphics.RenderedMapModeGraphics;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.widgets.Display;

/**
 * Supports generation of AWT and SWT images of a diagram or a subset of
 * editparts on a diagram.
 * 
 * @@author schafe / sshaw
 */
public class DiagramImageGenerator
	extends DiagramGenerator {

	/**
	 * Creates a new instance.
	 * @@param dgrmEP
	 *            the diagram editpart
	 */
	public DiagramImageGenerator(DiagramEditPart dgrmEP) {
		super(dgrmEP);
	}

	private GC gc = null;

	private Image image = null;

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.clipboard.DiagramGenerator#setUpGraphics(int,
	 *      int)
	 */
	protected Graphics setUpGraphics(int width, int height) {
		Display display = Display.getDefault();

		image = new Image(display, new org.eclipse.swt.graphics.Rectangle(0, 0, width, height));
		gc = new GC(image);
		SWTGraphics swtG = new SWTGraphics(gc);
		
		/*
		IPreferenceStore preferenceStore =
			(IPreferenceStore) getDiagramEditPart().getDiagramPreferencesHint().getPreferenceStore();
		
		if (preferenceStore.getBoolean(IPreferenceConstants.PREF_ENABLE_ANTIALIAS)) {
			swtG.setAntialias(SWT.ON);
		} else {
			swtG.setAntialias(SWT.OFF);
		}
		*/
		return swtG;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.clipboard.DiagramGenerator#disposeGraphics(org.eclipse.draw2d.Graphics)
	 */
	protected void disposeGraphics(Graphics g) {
		super.disposeGraphics(g);

		image.dispose();

		if (gc != null)
			gc.dispose();
		gc = null;

	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.render.clipboard.DiagramGenerator#getImageDescriptor(org.eclipse.draw2d.Graphics)
	 */
	protected ImageDescriptor getImageDescriptor(Graphics g) {
		return new ImageDescriptor() {

			ImageData imgData = image.getImageData();

			/*
			 * (non-Javadoc)
			 * 
			 * @@see org.eclipse.jface.resource.ImageDescriptor#getImageData()
			 */
			public ImageData getImageData() {
				return imgData;
			}
		};
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.diagram.ui.render.clipboard.DiagramGenerator#createAWTImageForParts(java.util.List,
	 *      org.eclipse.swt.graphics.Rectangle)
	 */
	public java.awt.Image createAWTImageForParts(List selectedObjects, org.eclipse.swt.graphics.Rectangle sourceRect) {

		BufferedImage awtImage = null;
			IMapMode mm = getMapMode();
		awtImage = new BufferedImage(mm.LPtoDP(sourceRect.width), mm
				.LPtoDP(sourceRect.height), BufferedImage.TYPE_4BYTE_ABGR_PRE);

		Graphics2D g2d = awtImage.createGraphics();
		g2d.setColor(Color.white);
		g2d.fillRect(0, 0, awtImage.getWidth(), awtImage.getHeight());

		// Check anti-aliasing preference
		IPreferenceStore preferenceStore = (IPreferenceStore) getDiagramEditPart()
				.getDiagramPreferencesHint().getPreferenceStore();

		if (preferenceStore
				.getBoolean(IPreferenceConstants.PREF_ENABLE_ANTIALIAS)) {
			g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
					RenderingHints.VALUE_ANTIALIAS_ON);
		} else {
			g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
					RenderingHints.VALUE_ANTIALIAS_OFF);
		}

		g2d.clip(new java.awt.Rectangle(0, 0, awtImage.getWidth(), awtImage
				.getHeight()));

		Graphics graphics = new GraphicsToGraphics2DAdaptor(g2d,
				new Rectangle(0, 0, mm.LPtoDP(sourceRect.width), mm
						.LPtoDP(sourceRect.height)));

		RenderedMapModeGraphics mapModeGraphics = new RenderedMapModeGraphics(
				graphics, mm);

		renderToGraphics(mapModeGraphics,
				new Point(sourceRect.x, sourceRect.y), selectedObjects);

		graphics.dispose();
		g2d.dispose();
		return awtImage;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.diagram.ui.render.clipboard.DiagramGenerator#createConstrainedAWTImageForParts(java.util.List, int, int, boolean)
	 */
	public java.awt.Image createConstrainedAWTImageForParts(List editParts,
			int maxDeviceWidth, int maxDeviceHeight, boolean useMargins) {
		BufferedImage awtImage = null;
		IMapMode mm = getMapMode();
		
		ConstrainedImageRenderingData data = getConstrainedImageRenderingData(editParts, maxDeviceWidth, maxDeviceHeight, useMargins);
		
		awtImage = new BufferedImage(data.imageWidth, data.imageHeight, BufferedImage.TYPE_4BYTE_ABGR_PRE);

		Graphics2D g2d = awtImage.createGraphics();
		g2d.setColor(Color.white);
		g2d.fillRect(0, 0, awtImage.getWidth(), awtImage.getHeight());

		// Check anti-aliasing preference
		IPreferenceStore preferenceStore = (IPreferenceStore) getDiagramEditPart()
				.getDiagramPreferencesHint().getPreferenceStore();

		if (preferenceStore
				.getBoolean(IPreferenceConstants.PREF_ENABLE_ANTIALIAS)) {
			g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
					RenderingHints.VALUE_ANTIALIAS_ON);
		} else {
			g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
					RenderingHints.VALUE_ANTIALIAS_OFF);
		}

		g2d.clip(new java.awt.Rectangle(0, 0, awtImage.getWidth(), awtImage
				.getHeight()));

		
		Graphics graphics = new GraphicsToGraphics2DAdaptor(g2d,
				new org.eclipse.swt.graphics.Rectangle(0, 0, data.imageWidth, data.imageHeight));
		
		ScaledGraphics scaledGraphics = new ScaledGraphics(graphics);

		RenderedMapModeGraphics mapModeGraphics = new RenderedMapModeGraphics(
				scaledGraphics, mm);

		g2d.translate(data.margin, data.margin);
		mapModeGraphics.scale(data.scalingFactor);
		
		Point location = new PrecisionPoint(data.imageOriginalBounds.preciseX(), data.imageOriginalBounds.preciseY());
		mm.DPtoLP(location);
		renderToGraphics(mapModeGraphics,
				location, editParts);

		graphics.dispose();
		g2d.dispose();
		return awtImage;
	}

}@


1.9
log
@[233585] gmf_head aboyko 080522 [ImageSupport] Diagram Image Export API additions to enable BIRT integration
@
text
@a23 1
import org.eclipse.draw2d.geometry.PrecisionRectangle;
a175 2
		Rectangle originalBounds = new PrecisionRectangle(new Rectangle(calculateImageRectangle(editParts)));
		mm.LPtoDP(originalBounds);
d177 1
a177 3
		int deviceMargins = mm.LPtoDP(getImageMargin());
		int threshold = useMargins ? deviceMargins : 0; 
		double xScalingFactor = 1.0, yScalingFactor = xScalingFactor;
d179 1
a179 20
		originalBounds.shrink(deviceMargins, deviceMargins);
		
		if (maxDeviceWidth > threshold) {
			xScalingFactor = (maxDeviceWidth  - threshold - threshold)/ (originalBounds.preciseWidth());
		}
		if (maxDeviceHeight > threshold) {
			yScalingFactor = (maxDeviceHeight - threshold - threshold) / (originalBounds.preciseHeight());
		}
		
		double scalingFactor = Math.min(Math.min(xScalingFactor, yScalingFactor), 1);
		
		int imageWidth = originalBounds.width + threshold + threshold;
		int imageHeight = originalBounds.height + threshold + threshold;
		
		if (scalingFactor < 1) {
			imageWidth = (int) Math.round(originalBounds.preciseWidth() * scalingFactor) + threshold + threshold;
			imageHeight = (int) Math.round(originalBounds.preciseHeight() * scalingFactor) + threshold + threshold;
		}
		
		awtImage = new BufferedImage(imageWidth, imageHeight, BufferedImage.TYPE_4BYTE_ABGR_PRE);
d203 1
a203 1
				new org.eclipse.swt.graphics.Rectangle(0, 0, imageWidth, imageHeight));
d210 2
a211 2
		g2d.translate(threshold, threshold);
		mapModeGraphics.scale(scalingFactor);
d213 1
a213 1
		Point location = new PrecisionPoint(originalBounds.preciseX(), originalBounds.preciseY());
@


1.9.2.1
log
@[239653] gmf_R2_1_maintenance aboyko 080827 [ImageSupport] Support DiagramPartInfo API for exporting the scaled down diagram to image
@
text
@d24 1
d177 2
d180 3
a182 1
		ConstrainedImageRenderingData data = getConstrainedImageRenderingData(editParts, maxDeviceWidth, maxDeviceHeight, useMargins);
d184 20
a203 1
		awtImage = new BufferedImage(data.imageWidth, data.imageHeight, BufferedImage.TYPE_4BYTE_ABGR_PRE);
d227 1
a227 1
				new org.eclipse.swt.graphics.Rectangle(0, 0, data.imageWidth, data.imageHeight));
d234 2
a235 2
		g2d.translate(data.margin, data.margin);
		mapModeGraphics.scale(data.scalingFactor);
d237 1
a237 1
		Point location = new PrecisionPoint(data.imageOriginalBounds.preciseX(), data.imageOriginalBounds.preciseY());
@


1.8
log
@[160386] gmf_head aboyko 070731 [ImageSupport] Save as Image fails when saving large diagrams
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d23 3
d28 1
a36 1
import org.eclipse.swt.graphics.Rectangle;
d70 1
a70 1
		image = new Image(display, new Rectangle(0, 0, width, height));
d170 77
@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@a22 1
import org.eclipse.gmf.runtime.common.core.util.Trace;
a23 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.SharedImages;
a24 2
import org.eclipse.gmf.runtime.diagram.ui.render.internal.DiagramUIRenderDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.render.internal.DiagramUIRenderPlugin;
a26 1
import org.eclipse.gmf.runtime.draw2d.ui.render.awt.internal.image.ImageConverter;
d122 2
a123 1
	 * @@see org.eclipse.gmf.runtime.diagram.ui.internal.clipboard.DiagramGenerator#createAWTImageForParts(java.util.List)
d125 1
a125 2
	public java.awt.Image createAWTImageForParts(List selectedObjects) {
		org.eclipse.swt.graphics.Rectangle sourceRect = calculateImageRectangle(selectedObjects);
a127 1
		try {
d129 14
a142 14
			awtImage = new BufferedImage(mm.LPtoDP(sourceRect.width),
				mm.LPtoDP(sourceRect.height),
				BufferedImage.TYPE_4BYTE_ABGR_PRE);

			Graphics2D g2d = awtImage.createGraphics();
			g2d.setColor(Color.white);
			g2d.fillRect(0, 0, awtImage.getWidth(), awtImage.getHeight());

			// Check anti-aliasing preference
			IPreferenceStore preferenceStore =
				(IPreferenceStore) getDiagramEditPart().getDiagramPreferencesHint().getPreferenceStore();
			
			if (preferenceStore.getBoolean(IPreferenceConstants.PREF_ENABLE_ANTIALIAS)) {				
				g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
d144 2
a145 2
			} else {
				g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
d147 3
a149 3
			}
			
			g2d.clip(new java.awt.Rectangle(0, 0, awtImage.getWidth(), awtImage
d152 1
a152 1
			Graphics graphics = new GraphicsToGraphics2DAdaptor(g2d,
d154 1
a154 1
					.LPtoDP(sourceRect.height)));
d156 1
a156 1
			RenderedMapModeGraphics mapModeGraphics = new RenderedMapModeGraphics(
d159 2
a160 20
			renderToGraphics(mapModeGraphics, new Point(sourceRect.x, sourceRect.y), selectedObjects);

			graphics.dispose();
			g2d.dispose();
		} catch (Error e) {
			// log the Error but allow execution to continue
			Trace.catching(DiagramUIRenderPlugin.getInstance(),
				DiagramUIRenderDebugOptions.EXCEPTIONS_THROWING, getClass(),
				"createAWTImageForParts() failed to generate image", //$NON-NLS-1$
				e);
			awtImage = ImageConverter.convert(SharedImages.get(SharedImages.IMG_ERROR));

		} catch (Exception ex) {
			// log the Exception but allow execution to continue
			Trace.catching(DiagramUIRenderPlugin.getInstance(),
				DiagramUIRenderDebugOptions.EXCEPTIONS_THROWING, getClass(),
				"createAWTImageForParts() failed to generate image", //$NON-NLS-1$
				ex);
			awtImage = ImageConverter.convert(SharedImages.get(SharedImages.IMG_ERROR));
		}
d162 2
@


1.6
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@d2 1
a2 1
 * Copyright (c) 2002 - 2005 IBM Corporation and others.
@


1.6.2.1
log
@[150280] gmf_R1_0_maintenance ahunter 060717 Incorrect copyright in some GMF files
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.5
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@d30 2
a31 2
import org.eclipse.gmf.runtime.draw2d.ui.render.image.ImageConverter;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.graphics.GraphicsToGraphics2DAdaptor;
@


1.4
log
@Bugzilla#113157 gmf_head cmahoney 051102 GMF Diagram Layer Public API Name Changes
@
text
@d25 1
a25 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramResourceManager;
d175 1
a175 2
			awtImage = ImageConverter.convert(DiagramResourceManager
				.getInstance().getImage(DiagramResourceManager.IMAGE_ERROR));
d183 1
a183 2
			awtImage = ImageConverter.convert(DiagramResourceManager
				.getInstance().getImage(DiagramResourceManager.IMAGE_ERROR));
@


1.3
log
@bugzilla 112788 gmf-head sshaw 051029 API: Encapsulate MapMode / HiMetric coordinate system from clients

First phase delivery...
@
text
@a23 1
import org.eclipse.gmf.runtime.diagram.ui.IPreferenceConstants;
d25 2
a26 1
import org.eclipse.gmf.runtime.diagram.ui.l10n.Images;
d175 2
a176 1
			awtImage = ImageConverter.convert(Images.ICON_ERROR);
d184 2
a185 1
			awtImage = ImageConverter.convert(Images.ICON_ERROR);
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a22 8
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.widgets.Display;

d29 1
a29 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d33 7
d134 3
a136 2
			awtImage = new BufferedImage(MapMode.LPtoDP(sourceRect.width),
				MapMode.LPtoDP(sourceRect.height),
d159 1
a159 1
				new Rectangle(0, 0, MapMode.LPtoDP(sourceRect.width), MapMode
d163 1
a163 1
				graphics);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002 - 2005.  All Rights Reserved.             |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

