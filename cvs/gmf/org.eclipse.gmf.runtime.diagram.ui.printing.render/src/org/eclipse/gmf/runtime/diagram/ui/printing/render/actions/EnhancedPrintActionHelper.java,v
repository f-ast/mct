head	1.5;
access;
symbols
	v20081020-0700:1.5
	v20080924-1925:1.5
	v20080916-2008:1.5
	v20080827-1510:1.5
	v20080820-2230:1.5
	v20080722-1827:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080425-1959:1.5
	v20080407-0930:1.4
	v20080404-1111:1.4
	v20080331-1625:1.4
	v20080328-1605:1.4
	v20080322-0000:1.4
	v20080222-1200:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070330-1300:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20060919-0800:1.2.2.1
	M1_20:1.2
	v20060721-1130:1.2.2.1
	v20060713-1700:1.2.2.1
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051201-1800:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2008.04.24.14.45.41;	author ahunter;	state Exp;
branches;
next	1.4;
commitid	6ee148109d144567;

1.4
date	2008.03.07.16.51.30;	author ahunter;	state Exp;
branches;
next	1.3;
commitid	29b447d1728f4567;

1.3
date	2006.10.03.15.03.02;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.07.20.08.15;	author ldamus;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2005.11.10.18.57.18;	author ahunter;	state Exp;
branches;
next	;

1.2.2.1
date	2006.07.12.13.51.19;	author cmahoney;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[227373] gmf-head jbruck 080424 [Printing] Combined commit for Bug 228057 , Bug 227796 , Bug 227006 and Bug 227373
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.printing.render.actions;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Platform;
import org.eclipse.gef.RootEditPart;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.common.ui.action.actions.IPrintActionHelper;
import org.eclipse.gmf.runtime.common.ui.services.editor.EditorService;
import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IDiagramPreferenceSupport;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;
import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer;
import org.eclipse.gmf.runtime.diagram.ui.printing.render.internal.DiagramUIPrintingRenderDebugOptions;
import org.eclipse.gmf.runtime.diagram.ui.printing.render.internal.DiagramUIPrintingRenderPlugin;
import org.eclipse.gmf.runtime.diagram.ui.printing.render.internal.JPSDiagramPrinter;
import org.eclipse.gmf.runtime.diagram.ui.printing.render.internal.JPSDiagramPrinterHelper;
import org.eclipse.gmf.runtime.diagram.ui.printing.render.util.RenderedDiagramPrinter;
import org.eclipse.gmf.runtime.diagram.ui.printing.util.DiagramPrinterUtil;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IWorkbenchPart;

/**
 * Enhanced printing.  The doPrint() method will invoke a dialog prompting the
 * user to choose options for printing.  The user will be able to choose from
 * printing diagrams of the current type.  If possible, the IFile path of the
 * appicable diagrams will be displayed to the user, when prompting the user
 * to select a diagram for printing.  If the diagram does not correspond to an
 * IFile, its part name will be used as the next choice.
 * 
 * This class implements the IPrintActionHelper interface that can be passed
 * into Print Preview, enabling the print action from there.
 * 
 * @@author Wayne Diu, wdiu
 */
public class EnhancedPrintActionHelper implements IPrintActionHelper {
	
	/**
	 * Show the print dialog and print
	 * 
	 * @@param IWorkbenchPart the workbenchPart containing the diagram to print
	 */
	
	public void doPrint(IWorkbenchPart workbenchPart) {
		DiagramEditor diagramEditor = null;

		if (workbenchPart instanceof DiagramEditor) {
			diagramEditor = (DiagramEditor) workbenchPart;
		}
		else {
			Log.error(DiagramUIPrintingRenderPlugin.getInstance(), IStatus.ERROR, "Invalid IWorkbenchPart"); //$NON-NLS-1$
			IllegalArgumentException e = new IllegalArgumentException("Invalid IWorkbenchPart."); //$NON-NLS-1$
			Trace.throwing(DiagramUIPrintingRenderPlugin.getInstance(), DiagramUIPrintingRenderDebugOptions.EXCEPTIONS_THROWING,  EnhancedPrintActionHelper.class, "doPrint()", e); //$NON-NLS-1$
			throw e;
		}
		
		IDiagramGraphicalViewer viewer = diagramEditor.getDiagramGraphicalViewer(); 
		RootEditPart rootEP = (viewer == null)?  null : viewer.getRootEditPart();
		
		//splitting the instanceof checks for readability, DiagramRootEditPart implements IDiagramPreferenceSupport 
		
		//try to get actual preferences, if not then use default of PreferencesHint.USE_DEFAULTS
		PreferencesHint preferencesHint = (rootEP instanceof IDiagramPreferenceSupport) ? ((IDiagramPreferenceSupport) rootEP)
			.getPreferencesHint()
			: PreferencesHint.USE_DEFAULTS;
		
		//get actual map mode, default is MapModeUtil.getMapMode()
		IMapMode mapMode = (rootEP instanceof DiagramRootEditPart) ? ((DiagramRootEditPart) rootEP)
				.getMapMode()
				: MapModeUtil.getMapMode();
		
		if (Platform.getOS().startsWith(Platform.OS_WIN32)) {
			DiagramPrinterUtil.printWithSettings(diagramEditor,
					createDiagramMap(), new RenderedDiagramPrinter(
							preferencesHint, mapMode));
		} else {
			JPSDiagramPrinterHelper.getDiagramPrinterHelper()
					.printWithSettings(diagramEditor, createDiagramMap(),
							new JPSDiagramPrinter(preferencesHint, mapMode));
		}
	}

	/**
	 * Return a Map with diagram name String as key and Diagram as value All
	 * entries in the map correspond to open editors.
	 * 
	 * @@return Map with diagram name String as key and Diagram as value All
	 *         entries in the map correspond to open editors with the
	 *         diagramEditor's id.
	 */
	protected Map<String, Diagram> createDiagramMap() {
		
		Map<String, Diagram> diagramMap = new HashMap<String, Diagram>();
		
		//get all diagram editors with the matching id 
		List diagramEditors = EditorService.getInstance().getRegisteredEditorParts();

		Iterator it = diagramEditors.iterator();
		while (it.hasNext()) {
			Object obj = it.next();
			
			if (obj instanceof DiagramEditor) { //DiagramDocumentEditor
				DiagramEditor dEditor = (DiagramEditor) obj;
				
				String diagramName = null;
				
				IEditorInput editorInput = dEditor.getEditorInput();
				          
                
				//try to be more descriptive and get the IFile path which includes the project
				IFile file = (IFile)(editorInput.getAdapter(IFile.class));
				if (file != null) {
					diagramName = file.getFullPath().toOSString();
				}
				else {
					//otherwise we can only get the editor title or part name
					diagramName = dEditor.getPartName();
					
					if (diagramName == null) {
						diagramName = dEditor.getTitle();
					}
				}
				
				if (diagramName == null) {
					//the last choice is to use the actual name of the diagram
                    //this has to exist!
					diagramName = dEditor.getDiagram().getName();
				}
                
				diagramMap.put(diagramName, dEditor.getDiagram());
				
			}
		}
		return diagramMap;
	}
}
@


1.4
log
@[196834] gmf-head jbruck 080307 [Printing] Multi-platform Diagram Printing
@
text
@d92 1
a92 4
		//
		// Eventually the windows based printing will be replaced with the
		// JPSDiagramPrinter.
		//
d97 1
a97 2
		}
		else {
d105 2
a106 2
	 * Return a Map with diagram name String as key and Diagram as value
	 * All entries in the map correspond to open editors.
d108 3
a110 3
	 * @@return Map with diagram name String as key and Diagram as value
	 * All entries in the map correspond to open editors with the
	 * diagramEditor's id. 
@


1.3
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
d21 1
a31 1
import org.eclipse.gmf.runtime.diagram.ui.printing.actions.DefaultPrintActionHelper;
d34 2
d40 1
d64 1
d90 15
a104 8
			.getMapMode()
			: MapModeUtil.getMapMode();
		
		if (!System.getProperty("os.name").toUpperCase().startsWith("WIN")) { //$NON-NLS-1$ //$NON-NLS-2$
			//do default action when not Windows and this action is enabled
			DefaultPrintActionHelper.doRun(diagramEditor,
				new RenderedDiagramPrinter(preferencesHint, mapMode));
			return;
a105 3
		
		DiagramPrinterUtil.printWithSettings(diagramEditor, createDiagramMap(),
			new RenderedDiagramPrinter(preferencesHint, mapMode));
d116 1
a116 1
	private Map createDiagramMap() {
d118 1
a118 1
		Map diagramMap = new HashMap();
d133 1
a133 2
				
                
@


1.2
log
@[124426] gmf_head wdiu 060207 Improper dependency from EnhancedPrintActionHelper
@
text
@d96 1
a96 1
		DiagramPrinterUtil.printWithSettings(diagramEditor, createDiagramMap(diagramEditor),
d102 1
a102 5
	 * All entries in the map correspond to open editors with the
	 * diagramEditor's id.
	 * 
	 * @@param diagramEditor, we'll check for open editors with the
	 * diagramEditor's id.
d108 1
a108 3
	private Map createDiagramMap(DiagramEditor diagramEditor) {
		
		assert diagramEditor != null;
a111 5
		String id = diagramEditor.getEditorSite().getId();
		
		//you cannot have a diagram with no id
		assert id != null;
		
d113 1
a113 1
		List diagramEditors = EditorService.getInstance().getRegisteredEditors(id);
d126 2
d143 3
a145 3
					//the last choice is to use the id.
					//not very descriptive but better than nothing.
					diagramName = id;
d147 1
a147 1
				
@


1.2.2.1
log
@Bugzilla#144771 gmf_R1_0_maintenance cmahoney 060712 Different diagrams do not appear in "Select Diagrams" list
Contributed by: Syed Atif Ali
@
text
@d96 1
a96 1
		DiagramPrinterUtil.printWithSettings(diagramEditor, createDiagramMap(),
d102 5
a106 1
	 * All entries in the map correspond to open editors.
d112 3
a114 1
	private Map createDiagramMap() {
d118 5
d124 1
a124 1
		List diagramEditors = EditorService.getInstance().getRegisteredEditorParts();
a136 2
                
                
d152 3
a154 3
					//the last choice is to use the actual name of the diagram
                    //this has to exist!
					diagramName = dEditor.getDiagram().getName();
d156 1
a156 1
                
@


1.1
log
@Bugzilla Bug 113979 gmf_head wdiu 051110 Examples need printing global actions setup
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
a20 1
import org.eclipse.emf.validation.internal.util.Trace;
d23 1
d32 1
d70 1
a70 1
			Trace.throwing(EnhancedPrintActionHelper.class, "doPrint()", e); //$NON-NLS-1$
@

