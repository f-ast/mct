head	1.1;
access;
symbols
	v20081020-0700:1.1
	v20080924-1925:1.1
	v20080916-2008:1.1
	v20080827-1510:1.1
	v20080820-2230:1.1
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.2
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20080407-0930:1.1
	v20080404-1111:1.1
	v20080331-1625:1.1
	v20080328-1605:1.1
	v20080322-0000:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.03.07.16.51.28;	author ahunter;	state Exp;
branches;
next	;
commitid	29b447d1728f4567;


desc
@@


1.1
log
@[196834] gmf-head jbruck 080307 [Printing] Multi-platform Diagram Printing
@
text
@/******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.printing.render.model;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

/**
 * This class is used as the model in the MVC infrastructure required for databindings
 * used with the JPS dialog.
 *
 * @@author Christian Damus (cdamus)
 * @@author James Bruck (jbruck)
 */
abstract class PrintModelElement {
    protected final PropertyChangeSupport bean = new PropertyChangeSupport(this);
    
    public PrintModelElement() {
        super();
    }

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        bean.addPropertyChangeListener(listener);
    }

    public void addPropertyChangeListener(String propertyName,
            PropertyChangeListener listener) {
        bean.addPropertyChangeListener(propertyName, listener);
    }

    public PropertyChangeListener[] getPropertyChangeListeners() {
        return bean.getPropertyChangeListeners();
    }

    public PropertyChangeListener[] getPropertyChangeListeners(
            String propertyName) {
        return bean.getPropertyChangeListeners(propertyName);
    }

    public boolean hasListeners(String propertyName) {
        return bean.hasListeners(propertyName);
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        bean.removePropertyChangeListener(listener);
    }

    public void removePropertyChangeListener(String propertyName,
            PropertyChangeListener listener) {
        bean.removePropertyChangeListener(propertyName, listener);
    }
    
    protected void firePropertyChange(String propertyName, Object oldValue, Object newValue) {
        bean.firePropertyChange(propertyName, oldValue, newValue);
    }
    
    protected void firePropertyChange(String propertyName, int oldValue, int newValue) {
        bean.firePropertyChange(propertyName, oldValue, newValue);
    }
    
    protected void firePropertyChange(String propertyName, boolean oldValue, boolean newValue) {
        bean.firePropertyChange(propertyName, oldValue, newValue);
    }
}
@
