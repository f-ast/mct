head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080924-1925:1.4
	v20080916-2008:1.4
	v20080827-1510:1.4
	v20080820-2230:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20080407-0930:1.4
	v20080404-1111:1.4
	v20080331-1625:1.3
	v20080328-1605:1.2
	v20080322-0000:1.1;
locks; strict;
comment	@# @;


1.4
date	2008.04.04.21.44.32;	author ahunter;	state Exp;
branches;
next	1.3;
commitid	94047f6a13f4567;

1.3
date	2008.03.31.15.00.56;	author crevells;	state Exp;
branches;
next	1.2;
commitid	3a5247f0fca74567;

1.2
date	2008.03.28.17.33.29;	author ahunter;	state Exp;
branches;
next	1.1;
commitid	4f7947ed2be84567;

1.1
date	2008.03.07.16.51.28;	author ahunter;	state Exp;
branches;
next	;
commitid	29b447d1728f4567;


desc
@@


1.4
log
@[225213] gmf-head jbruck 080404 Multi-platform printing should support selection of multi diagrams to print
@
text
@/******************************************************************************
 * Copyright (c) 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/



package org.eclipse.gmf.runtime.diagram.ui.printing.render.dialogs;

import java.util.List;

import org.eclipse.core.databinding.DataBindingContext;
import org.eclipse.gmf.runtime.diagram.ui.printing.internal.l10n.DiagramUIPrintingMessages;
import org.eclipse.gmf.runtime.diagram.ui.printing.render.model.PrintOptions;
import org.eclipse.jface.databinding.swt.SWTObservables;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.TrayDialog;
import org.eclipse.jface.window.IShellProvider;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Shell;


/**
 * A dialog that supports platform independent printing based on the 
 * Java Printing Service API.
 * 
 * @@author Christian Damus (cdamus)
 * @@author James Bruck (jbruck)
 */
public class JPSPrintDialog
    extends TrayDialog {

    private DataBindingContext bindings;
    private final PrintOptions options;
    
    protected PrinterBlock printerBlock;
    protected DiagramPrintRangeBlock diagramPrintRangeBlock;
    protected ScalingBlock scalingBlock;
    private RangeBlock rangeBlock;
    private CopiesBlock copiesBlock;
    private ActionsBlock actionsBlock;
    
    private List<String> allDiagrams;
    
    private final DialogBlock.IDialogUnitConverter dluConverter = new DialogBlock.IDialogUnitConverter() {

		public int convertHorizontalDLUsToPixels(int dlus) {
			return JPSPrintDialog.this.convertHorizontalDLUsToPixels(dlus);
		}

		public Shell getShell() {
			return JPSPrintDialog.this.getShell();
		}
	};
    
    public JPSPrintDialog(IShellProvider parentShell, PrintOptions options, List<String> allDiagrams) {
        super(parentShell);
        this.options = options;
        this.allDiagrams = allDiagrams;
    }

    public JPSPrintDialog(Shell shell, PrintOptions options, List<String> allDiagrams) {
        super(shell);
        this.options = options;
        this.allDiagrams = allDiagrams;
    }

    /*
     * (non-Javadoc)
     * @@see org.eclipse.jface.window.Window#configureShell(org.eclipse.swt.widgets.Shell)
     */
    protected void configureShell(Shell newShell) {
        super.configureShell(newShell);
        
        newShell.setText(DiagramUIPrintingMessages.JPSPrintDialog_Title);
    }
    
    /*
     * (non-Javadoc)
     * @@see org.eclipse.jface.dialogs.Dialog#createDialogArea(org.eclipse.swt.widgets.Composite)
     */
    protected Control createDialogArea(Composite parent) {
		bindings = new DataBindingContext(SWTObservables.getRealm(parent
				.getDisplay()));

		Composite result = new Composite(parent, SWT.NONE);
		DialogBlock.layout(result, 2);

		createPrinterBlockArea(result);
		createDiagramPrintRangeBlockArea(result);
		createScalingBlockArea(result);
		createRangeBlockArea(result);
		createCopiesBlockArea(result);
		createActionsBlockArea(result);
		createExtensibleBlockArea(result);

		return result;
	}
    
    protected void createPrinterBlockArea(Composite result) {
		printerBlock = new PrinterBlock(dluConverter, bindings, options);
		printerBlock.layoutSpanHorizontal(printerBlock.createContents(result),
				2);
	}
    
    protected void createScalingBlockArea(Composite result) {
    	 scalingBlock = new ScalingBlock(dluConverter, bindings, options);
         scalingBlock.layoutSpanHorizontal(scalingBlock.createContents(result), 2);
	}
    
    protected void createRangeBlockArea(Composite result) {
    	 rangeBlock = new RangeBlock(dluConverter, bindings, options);
         rangeBlock.createContents(result);
	}
    
    protected void createCopiesBlockArea(Composite result) {
    	  copiesBlock = new CopiesBlock(dluConverter, bindings, options);
          copiesBlock.createContents(result);
	}
    
    protected void createActionsBlockArea(Composite result) {
    	 actionsBlock = new ActionsBlock(dluConverter, options);
         actionsBlock.layoutSpanHorizontal(actionsBlock.createContents(result), 2);
	}
    
    protected void createDiagramPrintRangeBlockArea(Composite result){
    	diagramPrintRangeBlock = new DiagramPrintRangeBlock(dluConverter,bindings,options, allDiagrams);
    	diagramPrintRangeBlock.layoutSpanHorizontal(diagramPrintRangeBlock.createContents(result),
				2);
    }
    
    protected void createExtensibleBlockArea(Composite result) {
    	  // meant to be overridden by subclasses to add additional blocks.
  	}
    
        
    protected void createButtonsForButtonBar(Composite parent) {
        createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL, true);
        createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);
    }
    
    protected void buttonPressed(int buttonId) {
		switch (buttonId) {
		case -1:
			break;
		default:
			super.buttonPressed(buttonId);
		}
	}

	public boolean close() {
		bindings.dispose();
		copiesBlock.dispose();
		printerBlock.dispose();
		diagramPrintRangeBlock.dispose();
		scalingBlock.dispose();
		rangeBlock.dispose();
		actionsBlock.dispose();
		return super.close();
	}

	protected void cancelPressed() {
		super.cancelPressed();
	}
    
    /**
	 * Obtains the user's selected printing options, or <code>null</code> if
	 * the user canceled the print operation.
	 * 
	 * @@return the printing options, or <code>null</code> if canceled
	 */
    public PrintOptions getPrintOptions() {
        return options;
    }
}
@


1.3
log
@[224387] gmf-head jbruck 080331 [Printing] Enahncements to multi-platform printing
@
text
@d16 2
d45 1
d51 2
d64 1
a64 1
    public JPSPrintDialog(IShellProvider parentShell, PrintOptions options) {
d67 1
d70 1
a70 1
    public JPSPrintDialog(Shell shell, PrintOptions options) {
d73 1
d91 16
a106 14
        bindings = new DataBindingContext(SWTObservables.getRealm(parent.getDisplay()));
     
        Composite result = new Composite(parent,SWT.NONE);
        DialogBlock.layout(result, 2);
                      
        createPrinterBlockArea(result);
        createScalingBlockArea(result);
        createExtensibleBlockArea(result);
        createRangeBlockArea(result);
        createCopiesBlockArea(result);
        createActionsBlockArea(result);
                     
        return result;
    }
d134 6
d151 22
a172 17
        switch (buttonId) {
            case -1:
                break;
            default:
                super.buttonPressed(buttonId);
        }
    }
    
    public boolean close() {
        bindings.dispose();
        copiesBlock.dispose();
        return super.close();
    }
    
    protected void cancelPressed() {
        super.cancelPressed();
    }
d175 5
a179 5
     * Obtains the user's selected printing options, or <code>null</code> if
     * the user canceled the print operation.
     * 
     * @@return the printing  options, or <code>null</code> if canceled
     */
@


1.2
log
@[224387] gmf-head jbruck 080328 [Printing] Enahncements to multi-platform printing
@
text
@d146 1
@


1.1
log
@[196834] gmf-head jbruck 080307 [Printing] Multi-platform Diagram Printing
@
text
@d48 10
a57 10
    private final DialogBlock.IDialogUnitConverter dluConverter =
        new DialogBlock.IDialogUnitConverter() {
        
        public int convertHorizontalDLUsToPixels(int dlus) {
            return JPSPrintDialog.this.convertHorizontalDLUsToPixels(dlus);
        }
        
        public Shell getShell() {
            return JPSPrintDialog.this.getShell();
        }};
d69 4
d126 1
a126 1
    	  // meant to be overiden by subclasses to add additional blocks.
@

