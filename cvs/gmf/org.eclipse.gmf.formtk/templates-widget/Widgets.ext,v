head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2008.04.02.18.39.40;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	7ee847f3d2eb4567;

1.1
date	2008.04.01.17.16.12;	author atikhomirov;	state Exp;
branches;
next	;
commitid	20f147f26ddb4567;


desc
@@


1.2
log
@[192711] general forms ui model, Phase II: further imporved models (Section subclasses Composite not to duplicate widgets and layout containments), reference from Condition to Action reverted (to make condition model independent); templates updated
@
text
@/*
 * Copyright (c) 2008 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
import "http://www.eclipse.org/gmf/2008/Widget";
import "http://www.eclipse.org/emf/2002/Ecore";

String fieldName(Widget w) : "my" + w.name.toFirstUpper() ;


boolean hasTextWidgets(Composite c) : hasTextWidgets(c.children) ;
boolean hasRadioButtons(Composite c) : hasRadioButtons(c.children) ;
boolean hasCheckBoxes(Composite c) : hasCheckBoxes(c.children) ;
boolean hasSpins(Composite c) : hasSpins(c.children) ;
boolean hasCombos(Composite c) : hasCombos(c.children) ;

boolean hasTextWidgets(List[Widget] w) : !w.textWidgets().isEmpty() ;
boolean hasRadioButtons(List[Widget] w) : !w.radioWidgets().isEmpty() ;
boolean hasCheckBoxes(List[Widget] w) : !w.checkboxWidgets().isEmpty() ;
boolean hasSpins(List[Widget] w) : !w.spinWidgets().isEmpty() ;
boolean hasCombos(List[Widget] w) : !w.comboWidgets().isEmpty();

List[TextEntry] textWidgets(Composite c) : allWidgets(c.children).typeSelect(TextEntry) ;
List[RadioButton] radioWidgets(Composite c) : allWidgets(c.children).typeSelect(RadioButton) ;
List[CheckBox] checkboxWidgets(Composite c) : allWidgets(c.children).typeSelect(CheckBox) ;
List[Spin] spinWidgets(Composite c) : allWidgets(c.children).typeSelect(Spin) ;
List[Combo] comboWidgets(Composite c) : allWidgets(c.children).typeSelect(Combo) ;

List[TextEntry] textWidgets(List[Widget] w) : allWidgets(w).typeSelect(TextEntry) ;
List[RadioButton] radioWidgets(List[Widget] w) : allWidgets(w).typeSelect(RadioButton) ;
List[CheckBox] checkboxWidgets(List[Widget] w) : allWidgets(w).typeSelect(CheckBox) ;
List[Spin] spinWidgets(List[Widget] w) : allWidgets(w).typeSelect(Spin) ;
List[Combo] comboWidgets(List[Widget] w) : allWidgets(w).typeSelect(Combo) ;

List[Widget] allWidgets(List[Widget] w) :
	w.typeSelect(Composite).isEmpty()
	? w
	: w.union(w.typeSelect(Composite).children.allWidgets()) // flatten?
;

boolean createsAnyLabel(List[Widget] w) :
	let aw = allWidgets(w) : 
		(!aw.typeSelect(Spin).isEmpty() 
		|| aw.typeSelect(TextEntry).exists(te | te.label != null))
;
@


1.1
log
@[192711] generalization of propsheet towards common forms UI codegen. Phase I - placeholder project with (not yet refactored) templates.
@
text
@d17 7
d30 6
@

