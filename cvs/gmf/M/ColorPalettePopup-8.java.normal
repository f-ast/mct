package org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance;

public class ColorPalettePopup {
    private Button customColorButton;
    private HashMap buttonMap = new HashMap ();
    private RGB selectedColor = null;
    private Shell shell;
    private boolean useDefaultColor = false;
    private int previousColor;
    private static class InventoryColorDescriptor extends ImageDescriptor {

        public Image createImage ();
        public ImageData getImageData ();
        public InventoryColorDescriptor (RGB colorValue) {
        }

        public RGB rgb;

    }

    final private static HashMap imageColorMap = new HashMap ();
    final private static InventoryColorDescriptor BLACK = new InventoryColorDescriptor (new RGB (0, 0, 0));
    final private static InventoryColorDescriptor BLUE = new InventoryColorDescriptor (new RGB (152, 168, 191));
    final private static InventoryColorDescriptor GRAY = new InventoryColorDescriptor (new RGB (128, 128, 128));
    final private static InventoryColorDescriptor GREEN = new InventoryColorDescriptor (new RGB (166, 193, 152));
    final private static InventoryColorDescriptor LIGHT_GRAY = new InventoryColorDescriptor (new RGB (192, 192, 192));
    final private static InventoryColorDescriptor ORANGE = new InventoryColorDescriptor (new RGB (237, 201, 122));
    final private static InventoryColorDescriptor PINK = new InventoryColorDescriptor (new RGB (228, 179, 229));
    final private static InventoryColorDescriptor PURPLE = new InventoryColorDescriptor (new RGB (184, 151, 192));
    final private static InventoryColorDescriptor RED = new InventoryColorDescriptor (new RGB (227, 164, 156));
    final private static InventoryColorDescriptor TEAL = new InventoryColorDescriptor (new RGB (155, 199, 204));
    final private static InventoryColorDescriptor WHITE = new InventoryColorDescriptor (new RGB (255, 255, 255));
    final private static InventoryColorDescriptor YELLOW = new InventoryColorDescriptor (new RGB (225, 225, 135));
    final private static String CUSTOM_COLOR_STRING = DiagramUIPropertiesMessages.ColorPalettePopup_custom;
    final private static String DEAFULT_COLOR_STRING = DiagramUIPropertiesMessages.ColorPalettePopup_default;

    private static int checkStyle (int style);
    public ColorPalettePopup (Shell parent, String preferenceId, int rowHeight) {
    }

    public ColorPalettePopup (Shell parent, int rowHeight) {
    }

    public RGB getSelectedColor ();
    public RGB open (Point location);
    public boolean useDefaultColor ();
    public int getPreviousColor (); final public static Point ICON_SIZE = new Point (20, 20);

    public void setPreviousColor (int previousColor);
    static {
        imageColorMap.put (WHITE.rgb, WHITE.createImage ());
        imageColorMap.put (BLACK.rgb, BLACK.createImage ());
        imageColorMap.put (LIGHT_GRAY.rgb, LIGHT_GRAY.createImage ());
        imageColorMap.put (GRAY.rgb, GRAY.createImage ());
        imageColorMap.put (RED.rgb, RED.createImage ());
        imageColorMap.put (GREEN.rgb, GREEN.createImage ());
        imageColorMap.put (BLUE.rgb, BLUE.createImage ());
        imageColorMap.put (YELLOW.rgb, YELLOW.createImage ());
        imageColorMap.put (PURPLE.rgb, PURPLE.createImage ());
        imageColorMap.put (TEAL.rgb, TEAL.createImage ());
        imageColorMap.put (PINK.rgb, PINK.createImage ());
        imageColorMap.put (ORANGE.rgb, ORANGE.createImage ());
    }

}

