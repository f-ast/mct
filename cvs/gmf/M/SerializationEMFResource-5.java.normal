package org.eclipse.gmf.runtime.emf.clipboard.core.internal;

abstract public class SerializationEMFResource extends XMIResourceImpl {
    private IClipboardSupport clipboardOperationHelper;

    protected XMLLoad createXMLLoad ();
    protected boolean useIDAttributes ();
    protected boolean useUUIDs ();
    final protected IClipboardSupport getClipboardOperationHelper ();
    protected void throwUnsupportedOperationException (String methodName, UnsupportedOperationException ex);
    protected void unloaded (InternalEObject internalEObject);
    public SerializationEMFResource (String encoding, IClipboardSupport clipboardOperationHelper) {
    }

    public SerializationEMFResource (String encoding, URI uri, IClipboardSupport clipboardOperationHelper) {
    }

    public boolean eNotificationRequired (); public static String SERIALIZATION_ANNOTATIONS = "serialization_annotations";
    final public static Map LOAD_OPTIONS = new HashMap ();
    final public static Map SAVE_OPTIONS = new HashMap ();

    public void setEObjectToIDMap (Map eObjectToIDMap);
    public void setIDToEObjectMap (Map idToEObjectMap);
    static {
        XMIResource resource = new XMIResourceImpl ();
        LOAD_OPTIONS.putAll (resource.getDefaultLoadOptions ());
        SAVE_OPTIONS.putAll (resource.getDefaultSaveOptions ());
        SAVE_OPTIONS.put (XMIResource.OPTION_DECLARE_XML, Boolean.TRUE);
        SAVE_OPTIONS.put (XMIResource.OPTION_PROCESS_DANGLING_HREF, XMIResource.OPTION_PROCESS_DANGLING_HREF_DISCARD);
        SAVE_OPTIONS.put (XMIResource.OPTION_SCHEMA_LOCATION, Boolean.TRUE);
        SAVE_OPTIONS.put (XMIResource.OPTION_USE_XMI_TYPE, Boolean.TRUE);
        SAVE_OPTIONS.put (XMIResource.OPTION_SAVE_TYPE_INFORMATION, Boolean.TRUE);
        SAVE_OPTIONS.put (XMIResource.OPTION_SKIP_ESCAPE_URI, Boolean.FALSE);
    }

}

