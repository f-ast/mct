package org.eclipse.gmf.internal.bridge.ui.dashboard;

public class DashboardMediator implements DashboardFacade {
    private DashboardFigure view;
    private DashboardState state;
    private IProject project;
    private Map < DashboardActionDescriptor, IFigure > contributions;
    private Map < String, ActionContainer > locations;
    private Shell shell;
    private class CombineMMAction extends RunWizardAction {

        protected IWizard createWizard ();
        protected void wizardFinished (IWizard wizard);
        public boolean isEnabled ();
    }

    private class CreateDMAction extends RunWizardAction {

        protected IWizard createWizard ();
        protected void wizardFinished (IWizard wizard);
    }

    private class CreateGDMAction extends RunWizardAction {

        protected IWizard createWizard ();
        protected void wizardFinished (IWizard wizard);
    }

    private class CreateGMAction extends RunWizardAction {

        protected IWizard createWizard ();
        protected void wizardFinished (IWizard wizard);
    }

    private class CreateMMAction extends RunWizardAction {

        protected IWizard createWizard ();
        protected void wizardFinished (IWizard wizard);
    }

    private class CreateTDMAction extends RunWizardAction {

        protected IWizard createWizard ();
        protected void wizardFinished (IWizard wizard);
    }

    private class DeriveDGMAction extends RunWizardAction {

        protected IStructuredSelection getSelection ();
        protected IWizard createWizard ();
        protected void wizardFinished (IWizard wizard);
        public boolean isEnabled ();
    }

    private class DeriveGDMAction extends RunWizardAction {

        protected IWizard createWizard ();
        protected void wizardFinished (IWizard wizard);
        public boolean isEnabled ();
    }

    private class DeriveTDMAction extends RunWizardAction {

        protected IWizard createWizard ();
        protected void wizardFinished (IWizard wizard);
        public boolean isEnabled ();
    }

    private class EditDGMAction extends EditFileAction {

        protected URI getURI ();
    }

    private class EditDMAction extends EditFileAction {

        protected URI getURI ();
    }

    private class EditGDMAction extends EditFileAction {

        protected URI getURI ();
    }

    private class EditGMAction extends EditFileAction {

        protected URI getURI ();
    }

    private class EditMMAction extends EditFileAction {

        protected URI getURI ();
    }

    private class EditTDMAction extends EditFileAction {

        protected URI getURI ();
    }

    private class ReloadDGMAction implements DashboardAction {

        public boolean isEnabled ();
        public void init (DashboardFacade context);
        public void run ();
    }

    private class SelectDGMAction extends SelectFileAction {

        protected ModelFigure getFigure ();
        protected String getFileExtension ();
        protected URI getURI ();
        protected void setURI (URI uri);
    }

    private class SelectDMAction extends SelectFileAction {

        protected ModelFigure getFigure ();
        protected String getFileExtension ();
        protected URI getURI ();
        protected void setURI (URI uri);
    }

    private class SelectGDMAction extends SelectFileAction {

        protected ModelFigure getFigure ();
        protected String getFileExtension ();
        protected URI getURI ();
        protected void setURI (URI uri);
    }

    private class SelectGMAction extends SelectFileAction {

        protected ModelFigure getFigure ();
        protected String getFileExtension ();
        protected URI getURI ();
        protected void setURI (URI uri);
    }

    private class SelectMMAction extends SelectFileAction {

        protected ModelFigure getFigure ();
        protected String getFileExtension ();
        protected URI getURI ();
        protected void setURI (URI uri);
    }

    private class SelectTDMAction extends SelectFileAction {

        protected ModelFigure getFigure ();
        protected String getFileExtension ();
        protected URI getURI ();
        protected void setURI (URI uri);
    }

    private static class OpenEMFModelWizard extends EMFModelWizard {

        public IFile getModelFile ();
    }

    final private static boolean STRICT = true;
    abstract protected class EditFileAction implements DashboardAction {

        abstract protected URI getURI ();
        public boolean isEnabled ();
        public void init (DashboardFacade context);
        public void run ();
    }

    abstract protected class RunWizardAction implements DashboardAction {
        ;
        final private static int SIZING_WIZARD_HEIGHT = 500;
        final private static int SIZING_WIZARD_WIDTH = 500;

        protected IStructuredSelection getSelection ();
        abstract protected IWizard createWizard ();
        protected void addFile (List < IFile > files, URI uri);
        protected void wizardFinished (IWizard wizard);
        public boolean isEnabled ();
        public void init (DashboardFacade context);
        public void run ();
    }

    abstract protected class SelectFileAction implements DashboardAction {

        abstract protected ModelFigure getFigure ();
        abstract protected String getFileExtension ();
        abstract protected URI getURI ();
        abstract protected void setURI (URI uri);
        public boolean isEnabled ();
        public void init (DashboardFacade context);
        public void run ();
    }

    protected void setModelName (ModelFigure figure, URI uri);
    public DashboardMediator (Shell shell) {
    }

    public DashboardState getState ();
    public IFigure createLinkFigure (String text, DashboardAction action);
    public IProject getProject ();
    public boolean isStrict ();
    public void addDashboardAction (DashboardActionDescriptor descriptor);
    public void removeDashboardAction (DashboardActionDescriptor descriptor);
    public void setProjectAndState (IProject project, DashboardState state);
    public void setView (DashboardFigure view);
    public void updateStatus ();
}

