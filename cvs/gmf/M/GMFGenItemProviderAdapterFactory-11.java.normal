package org.eclipse.gmf.codegen.gmfgen.provider;

public class GMFGenItemProviderAdapterFactory extends GMFGenAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    protected BasicNodeViewmapItemProvider basicNodeViewmapItemProvider;
    protected Collection supportedTypes = new ArrayList ();
    protected ColorAttributesItemProvider colorAttributesItemProvider;
    protected CompartmentViewmapItemProvider compartmentViewmapItemProvider;
    protected ComposedAdapterFactory parentAdapterFactory;
    protected DecoratedConnectionViewmapItemProvider decoratedConnectionViewmapItemProvider;
    protected DefaultSizeAttributesItemProvider defaultSizeAttributesItemProvider;
    protected DiagramViewmapItemProvider diagramViewmapItemProvider;
    protected FeatureModelFacetItemProvider featureModelFacetItemProvider;
    protected GenChildContainerItemProvider genChildContainerItemProvider;
    protected GenChildNodeItemProvider genChildNodeItemProvider;
    protected GenDiagramItemProvider genDiagramItemProvider;
    protected GenFeatureSeqInitializerItemProvider genFeatureSeqInitializerItemProvider;
    protected GenFeatureValueSpecItemProvider genFeatureValueSpecItemProvider;
    protected GenLinkItemProvider genLinkItemProvider;
    protected GenLinkLabelItemProvider genLinkLabelItemProvider;
    protected GenNodeItemProvider genNodeItemProvider;
    protected GenNodeLabelItemProvider genNodeLabelItemProvider;
    protected IChangeNotifier changeNotifier = new ChangeNotifier ();
    protected LabelViewmapItemProvider labelViewmapItemProvider;
    protected LinkDecorationItemProvider linkDecorationItemProvider;
    protected LinkEntryItemProvider linkEntryItemProvider;
    protected ModelElementSelectorItemProvider modelElementSelectorItemProvider;
    protected NodeEntryItemProvider nodeEntryItemProvider;
    protected PaletteItemProvider paletteItemProvider;
    protected ShapeAttributesItemProvider shapeAttributesItemProvider;
    protected ToolGroupItemProvider toolGroupItemProvider;
    protected TypeLinkModelFacetItemProvider typeLinkModelFacetItemProvider;
    protected TypeModelFacetItemProvider typeModelFacetItemProvider;
    protected ValueExpressionItemProvider valueExpressionItemProvider;

    public Adapter adapt (Notifier notifier, Object type);
    public Adapter createBasicNodeViewmapAdapter ();
    public Adapter createColorAttributesAdapter ();
    public Adapter createCompartmentViewmapAdapter ();
    public Adapter createDecoratedConnectionViewmapAdapter ();
    public Adapter createDefaultSizeAttributesAdapter ();
    public Adapter createDiagramViewmapAdapter ();
    public Adapter createFeatureModelFacetAdapter ();
    public Adapter createGenChildContainerAdapter ();
    public Adapter createGenChildNodeAdapter ();
    public Adapter createGenDiagramAdapter ();
    public Adapter createGenFeatureSeqInitializerAdapter ();
    public Adapter createGenFeatureValueSpecAdapter ();
    public Adapter createGenLinkAdapter ();
    public Adapter createGenLinkLabelAdapter ();
    public Adapter createGenNodeAdapter ();
    public Adapter createGenNodeLabelAdapter ();
    public Adapter createLabelViewmapAdapter ();
    public Adapter createLinkDecorationAdapter ();
    public Adapter createLinkEntryAdapter ();
    public Adapter createModelElementSelectorAdapter ();
    public Adapter createNodeEntryAdapter ();
    public Adapter createPaletteAdapter ();
    public Adapter createShapeAttributesAdapter ();
    public Adapter createToolGroupAdapter ();
    public Adapter createTypeLinkModelFacetAdapter ();
    public Adapter createTypeModelFacetAdapter ();
    public Adapter createValueExpressionAdapter ();
    public ComposeableAdapterFactory getRootAdapterFactory ();
    public GMFGenItemProviderAdapterFactory () {
    }

    public Object adapt (Object object, Object type);
    public boolean isFactoryForType (Object type);
    public void addListener (INotifyChangedListener notifyChangedListener);
    public void dispose ();
    public void fireNotifyChanged (Notification notification);
    public void removeListener (INotifyChangedListener notifyChangedListener);
    public void setParentAdapterFactory (ComposedAdapterFactory parentAdapterFactory);
}

