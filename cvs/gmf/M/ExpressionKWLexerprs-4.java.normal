package org.eclipse.gmf.internal.xpand.expression.parser;

public class ExpressionKWLexerprs implements ExpressionKWLexersym, lpg.lpgjavaruntime.ParseTable {

    final public String name (int index);
    final public boolean getBacktrack ();
    final public boolean isKeyword (int index);
    final public boolean isValidForParser ();
    final public int asb (int index);
    final public int asi (int state);
    final public int asr (int index);
    final public int baseAction (int index);
    final public int baseCheck (int index);
    final public int getAcceptAction ();
    final public int getEoftSymbol ();
    final public int getEoltSymbol ();
    final public int getErrorAction ();
    final public int getErrorSymbol ();
    final public int getIdentifierSymbol ();
    final public int getLaStateOffset ();
    final public int getMaxLa ();
    final public int getMaxNameLength ();
    final public int getNtOffset ();
    final public int getNumNonterminals ();
    final public int getNumRules ();
    final public int getNumStates ();
    final public int getNumSymbols ();
    final public int getScopeSize ();
    final public int getScopeUbound ();
    final public int getSegmentSize ();
    final public int getStartState ();
    final public int getStartSymbol ();
    final public int inSymb (int index);
    final public int inSymbol (int state);
    final public int lhs (int index);
    final public int lookAhead (int la_state, int sym);
    final public int nasb (int index);
    final public int nasi (int state);
    final public int nasr (int index);
    final public int nonterminalIndex (int index);
    final public int ntAction (int state, int sym);
    final public int originalState (int state);
    final public int rhs (int index);
    final public int scopeLa (int index);
    final public int scopeLhs (int index);
    final public int scopePrefix (int index);
    final public int scopeRhs (int index);
    final public int scopeState (int index);
    final public int scopeStateSet (int index);
    final public int scopeSuffix (int index);
    final public int tAction (int state, int sym);
    final public int termAction (int index);
    final public int termCheck (int index);
    final public int terminalIndex (int index); final public static boolean BACKTRACK = false;
    final public static byte baseCheck [] = BaseCheck.baseCheck;
    final public static byte isKeyword [] = IsKeyword.isKeyword;
    final public static byte rhs [] = baseCheck;
    final public static byte termCheck [] = TermCheck.termCheck;
    final public static char baseAction [] = BaseAction.baseAction;
    final public static char lhs [] = baseAction;
    final public static char termAction [] = TermAction.termAction;
    final public static int ACCEPT_ACTION = 109, EOFT_SYMBOL = 26, EOLT_SYMBOL = 54, ERROR_ACTION = 110, IDENTIFIER_SYMBOL = 0, LA_STATE_OFFSET = 129, MAX_LA = 0, NT_OFFSET = 53, NUM_NONTERMINALS = 2, NUM_RULES = 19, NUM_STATES = 87, NUM_SYMBOLS = 55, SEGMENT_SIZE = 8192, START_STATE = 20;
    public interface BaseAction {
        final public static char baseAction [] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 22, 8, 32, 21, 37, 40, 41, 45, 47, 20, 29, 49, 31, 14, 15, 51, 52, 9, 53, 56, 54, 55, 60, 64, 61, 69, 71, 72, 76, 73, 77, 79, 80, 83, 88, 91, 90, 93, 97, 98, 100, 103, 107, 109, 101, 110, 115, 117, 105, 111, 119, 122, 120, 126, 127, 130, 128, 134, 136, 140, 135, 142, 143, 144, 145, 152, 147, 154, 155, 156, 160, 163, 161, 165, 166, 169, 173, 175, 178, 179, 180, 183, 184, 187, 189, 188, 194, 110, 110};

    };

    public interface BaseCheck {
        final public static byte baseCheck [] = {0, 4, 4, 5, 3, 3, 6, 4, 7, 7, 3, 4, 10, 6, 6, 9, 7, 6, 6, 10};

    };

    public interface IsKeyword {
        final public static byte isKeyword [] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    };

    public interface TermAction {
        final public static char termAction [] = {0, 110, 24, 32, 34, 31, 30, 28, 110, 110, 23, 57, 33, 35, 110, 110, 53, 27, 29, 110, 110, 110, 52, 51, 25, 54, 26, 43, 44, 110, 45, 110, 110, 36, 109, 50, 37, 110, 48, 49, 110, 110, 40, 46, 38, 110, 39, 110, 42, 110, 47, 110, 110, 110, 110, 110, 110, 58, 56, 120, 110, 110, 61, 63, 110, 41, 60, 59, 62, 110, 55, 110, 110, 110, 115, 64, 110, 110, 66, 110, 110, 65, 69, 110, 110, 70, 67, 68, 110, 71, 110, 110, 73, 110, 114, 72, 121, 110, 110, 74, 110, 110, 76, 110, 117, 110, 75, 110, 77, 110, 110, 110, 78, 111, 80, 110, 81, 110, 112, 110, 110, 85, 110, 79, 83, 84, 110, 110, 110, 82, 110, 88, 86, 89, 110, 110, 110, 87, 91, 90, 110, 113, 110, 110, 110, 110, 128, 110, 124, 96, 94, 92, 110, 95, 110, 110, 110, 93, 127, 97, 110, 110, 123, 110, 98, 110, 110, 99, 100, 110, 119, 110, 118, 110, 116, 110, 126, 101, 110, 110, 110, 104, 102, 110, 110, 103, 105, 110, 110, 110, 110, 106, 107, 125, 110, 110, 110, 129, 110, 110, 122};

    };

    public interface TermCheck {
        final public static byte termCheck [] = {0, 0, 1, 2, 3, 4, 5, 6, 0, 0, 9, 2, 11, 12, 0, 0, 1, 16, 17, 0, 0, 0, 7, 9, 23, 10, 25, 7, 8, 0, 1, 0, 0, 1, 26, 21, 15, 0, 7, 8, 0, 0, 1, 14, 7, 0, 6, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 4, 6, 3, 0, 0, 2, 2, 0, 20, 11, 13, 4, 0, 19, 0, 0, 0, 3, 6, 0, 0, 2, 0, 0, 9, 3, 0, 0, 2, 13, 10, 0, 1, 0, 0, 2, 0, 14, 4, 3, 0, 0, 2, 0, 0, 2, 0, 1, 0, 8, 0, 1, 0, 0, 0, 3, 2, 4, 0, 1, 0, 1, 0, 0, 1, 0, 22, 5, 3, 0, 0, 0, 24, 0, 1, 6, 5, 0, 0, 0, 10, 2, 5, 0, 1, 0, 0, 0, 0, 3, 0, 4, 2, 5, 16, 0, 1, 0, 0, 0, 15, 3, 5, 0, 0, 2, 0, 1, 0, 0, 6, 3, 0, 4, 0, 3, 0, 18, 0, 3, 2, 0, 0, 0, 1, 4, 0, 0, 6, 3, 0, 0, 0, 0, 7, 5, 4, 0, 0, 0, 3, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    };

}

