package org.eclipse.gmf.internal.common.codegen;

public class OrganizeImportsPostprocessor {

    private String [] substract (String [] declaredImports, List list);
    private boolean addImport (String typeName, String fullName, ImportRewrite importRewrite, ImportRewrite.ImportRewriteContext context, Collection < String > importsAdded);
    private boolean checkForNoSyntaxErrors (CompilationUnit astRoot); private class ReferencedTypesAwareImportRewriteContext extends ImportRewrite.ImportRewriteContext {

        public ReferencedTypesAwareImportRewriteContext (Collection < SimpleName > simpleTypesReferenced, ImportRewrite importRewrite) {
        }

        public int findInContext (String qualifier, String name, int kind);
    };

    final private boolean myRestoreExistingImports;

    private static ImportRewrite configureImportRewrite (ImportRewrite rewrite);
    private static boolean isDebug ();
    private static void copyImports (ImportRewrite importRewrite, String [] importsToCopy);
    private void collectExistingImports (CompilationUnit astRoot, Set < String > oldSingleImports, Set < String > oldDemandImports, String [] declaredImports);
    private void determineImportDifferences (ImportRewrite importsStructure, Set < String > oldSingleImports, Set < String > oldDemandImports);
    public ImportRewrite createImportRewrite (CompilationUnit astRoot);
    public OrganizeImportsPostprocessor () {
    }

    public OrganizeImportsPostprocessor (boolean restoreExistingImports) {
    }

    public TextEdit organizeImports (CompilationUnit astRoot, IProgressMonitor progress) throws CoreException;
    public TextEdit organizeImports (CompilationUnit astRoot, String [] declaredImports, IProgressMonitor progress) throws CoreException;
    public void organizeImports (ICompilationUnit icu, IProgressMonitor progress) throws CoreException;
    public void organizeImports (ICompilationUnit icu, String [] declaredImportsAsStrings, IProgressMonitor progress) throws CoreException;
}

