package org.eclipse.gmf.runtime.draw2d.ui.figures;

public class PolylineConnectionEx extends PolylineConnection implements IPolygonAnchorableFigure {

    private Dimension calculateJumpLinkSize (boolean isFeedbackLayer); private Hashtable connectionAnchors;

    private JumpLinkSet getJumpLinkSet (); private JumpLinkSet jumpLinkSet;
    private RotatableDecoration endDecoration, startDecoration;

    private boolean isFeedbackLayer ();
    private boolean lineContainsPoint (int x1, int y1, int x2, int y2, int px, int py, boolean isFeedbackLayer);
    private boolean regenerateJumpLinks ();
    final private int getSmoothFactor (); private int [] dashes = null;

    private int calculateJumpLinkIncline (boolean isFeedbackLayer);
    private int calculateTolerance (boolean isFeedbackLayer); private long styleBits;
    private static Rectangle LINEBOUNDS = Rectangle.SINGLETON;
    final private static Dimension dimCheck = new Dimension (100, 100);
    final private static int JUMPLINK_DEFAULT_HEIGHT = 10;
    final private static int JUMPLINK_DEFAULT_SMOOTHNESS = 30;
    final private static int JUMPLINK_DEFAULT_WIDTH = 25;
    final private static int JUMPLINK_FLAG_ANGLEIN = 0x1000;
    final private static int JUMPLINK_FLAG_ONBOTTOM = 0x2000;
    final private static int JUMPLINK_FLAG_SMOOTH = 0x0800;
    final private static int ROUTE_AVOID_OBSTACLE = 0x0100;
    final private static int ROUTE_CLOSEST_ROUTE = 0x0200;
    final private static int ROUTE_JUMP_LINKS = 0x0400;
    final private static int SMOOTH_FACTOR_LESS = 15;
    final private static int SMOOTH_FACTOR_MORE = 50;
    final private static int SMOOTH_FACTOR_NORMAL = 30;
    private static int TOLERANCE = 3;

    protected ConnectionAnchor createAnchor (PrecisionPoint p);
    protected ConnectionAnchor createConnectionAnchor (Point p);
    protected ConnectionAnchor createDefaultAnchor ();
    protected Hashtable getConnectionAnchors ();
    protected RotatableDecoration getSourceDecoration ();
    protected RotatableDecoration getTargetDecoration ();
    protected boolean isDefaultAnchorArea (PrecisionPoint p); protected class JumpLink {
        public Point m_ptIntersect;
        public int m_nDistance;
        public int m_nHeight;
        public int m_nWidth;

    }

    protected class JumpLinkSet {
        private List m_pJumpLinks;
        private boolean m_bDirty;
        private class CompareDistance implements Comparator {

            public int compare (Object obj1, Object obj2);
        }

        private void addJumpLink (Point ptIntersect, int nDistance, boolean isFeedbackLayer);
        private void calculateIntersections (Connection connect);
        private void combineCloseLinks (PointList tmpLine);
        private void sortByDistance ();
        protected void cleanJumpLinks (Connection connect);
        public JumpLinkSet () {
        }

        public boolean isDirty ();
        public boolean regenerateJumpLinks (Connection connect);
        public void dirtyJumpLinks ();
    }

    protected double getSlidableAnchorArea ();
    protected void outlineShape (Graphics g);
    public ConnectionAnchor getConnectionAnchor (String terminal);
    public ConnectionAnchor getSourceConnectionAnchorAt (Point p);
    public ConnectionAnchor getTargetConnectionAnchorAt (Point p);
    public PointList getPolygonPoints ();
    public PointList getSmoothPoints ();
    public PolylineConnectionEx () {
    }

    public Rectangle getBounds ();
    public Rectangle getSimpleBounds ();
    public String getConnectionAnchorTerminal (ConnectionAnchor c);
    public boolean containsPoint (int x, int y);
    final public boolean isAvoidObstacleRouting ();
    final public boolean isClosestDistanceRouting ();
    final public boolean isJumpLinksAngledIn ();
    final public boolean isJumpLinksOnBottom ();
    final public boolean isJumpLinksSmooth ();
    final public boolean shouldJumpLinks ();
    final public int getSmoothness ();
    final public void setSmoothness (int smooth);
    public int findLineSegIndexOfPoint (int x, int y); final public static int JUMPLINK_FLAG_ABOVE = 0x8000;
    final public static int JUMPLINK_FLAG_ALL = JUMPLINK_FLAG_BELOW | JUMPLINK_FLAG_ABOVE;
    final public static int JUMPLINK_FLAG_BELOW = 0x4000;
    final public static int SMOOTH_LESS = 0x0010;
    final public static int SMOOTH_MORE = 0x0040;
    final public static int SMOOTH_NONE = 0x0000;
    final public static int SMOOTH_NORMAL = 0x0020;

    public void addPoint (Point pt);
    public void dirtyAllJumpLinks ();
    public void insertPoint (Point pt, int index);
    public void paintFigure (Graphics graphics);
    public void refreshLine ();
    public void setForegroundColor (Color fg);
    public void setJumpLinks (boolean on);
    public void setJumpLinksStyles (int jumpType, boolean curved, boolean angleIn, boolean onBottom);
    public void setLineDash (int [] dashes);
    public void setLineWidth (int w);
    public void setPoint (Point pt, int index);
    public void setPoints (PointList points);
    public void setRoutingStyles (final boolean closestDistance, final boolean avoidObstacles);
    public void setSourceDecoration (RotatableDecoration dec);
    public void setSourceDecoration (RotatableDecoration dec, ConnectionLocator locator);
    public void setTargetDecoration (RotatableDecoration dec);
    public void setTargetDecoration (RotatableDecoration dec, ConnectionLocator locator); final private static String szAnchor = "";

    void dirtyJumpLinks ();
}

