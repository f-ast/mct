package org.eclipse.gmf.internal.validate;

public class ExternModelImport {

    boolean hasPackageImportsProcessed (EPackage importingPackage); private EPackage.Registry registry;

    private ExternModelImport (EObject validatedObject) {
    }

    private HashSet < EPackage > processedPackages;
    private ResourceSet importedModels;

    private boolean importModelFromResource (URI modelURI) throws RuntimeException;
    private boolean loadAsResourceURI (String importValue, EAnnotation annotation, DiagnosticChain diagnostics);
    private boolean processAnnotation (EAnnotation annotation, DiagnosticChain diagnostics);
    private boolean processAnnotations (EPackage importingPackage, DiagnosticChain diagnostics);
    private boolean processImportEAnnotation (EAnnotation annotation, DiagnosticChain diagnostics); final private static EValidator VALIDATOR = new AbstractValidator () {

        public boolean validate (EClass eClass, EObject eObject, DiagnosticChain diagnostics, Map < Object, Object > context);
    }

    ;
    final private static String DIAGNOSTIC_SOURCE = GMFValidationPlugin.getDefault ().getBundle ().getSymbolicName () + ".imports";

    private static void reportInvalidModelURI (String modelURIValue, EModelElement annotatedElement, DiagnosticChain diagnostics);
    private static void reportModelLoadingError (String modelURIValue, EModelElement annotatedElement, DiagnosticChain diagnostics, RuntimeException error);
    public static EPackage.Registry getPackageRegistry (Map < Object, Object > context);
    public static EValidator getImportValidator ();
    public static ExternModelImport getImporter (Map context, EObject validatedEObject);
    public void intializeExternPackages (EObject root);
}

