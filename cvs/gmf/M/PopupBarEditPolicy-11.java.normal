package org.eclipse.gmf.runtime.diagram.ui.editpolicies;

public class PopupBarEditPolicy extends DiagramAssistantEditPolicy {

    String getPreferenceName ();
    private IFigure getBalloon (); private IFigure myBalloon = null;
    private List myPopupBarDescriptors = new ArrayList ();
    private OwnerMovedListener myOwnerMovedListener = new OwnerMovedListener ();

    private Point getBalloonPosition (Point referencePoint); private PopupBarMouseListener myMouseKeyListener = new PopupBarMouseListener ();

    private boolean getFlag (int bit);
    private boolean getPopupBarOnDiagramActivated ();
    private boolean isSelectionToolActive (); private class OwnerMovedListener implements FigureListener {

        public void figureMoved (IFigure source);
    }

    private class PopupBarDescriptor {

        public PopupBarDescriptor (String s, Image i, IElementType elementType, DragTracker theTracker) {
        }

        final public DragTracker getDragTracker ();
        final public IElementType getElementtype ();
        final public Image getIcon ();
        final public String getToolTip ();
    }

    private class PopupBarLabelHandle extends Label implements Handle {

        protected void paintBorder (Graphics graphics);
        protected void paintFigure (Graphics graphics);
        public DragTracker getDragTracker ();
        public Point getAccessibleLocation ();
        public PopupBarLabelHandle (DragTracker tracker, Image theImage) {
        }

        public void handleMouseEntered (MouseEvent event);
        public void handleMouseExited (MouseEvent event);
        public void handleMousePressed (MouseEvent event);
    }

    private class PopupBarMouseListener extends MouseListener.Stub {

        public void mousePressed (MouseEvent me);
        public void mouseReleased (MouseEvent me);
    }

    private class RoundedRectangleWithTail extends RoundedRectangle {

        public RoundedRectangleWithTail () {
        }

        public void paintFigure (Graphics graphics);
    }

    private double myBallonOffsetPercent = BALLOON_X_OFFSET_RHS;
    private int myPopupBarFlags = POPUPBAR_ACTIVATEONHOVER;
    private static Image IMAGE_POPUPBAR = DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_POPUPBAR);
    private static Image IMAGE_POPUPBAR_PLUS = DiagramUIPluginImages.get (DiagramUIPluginImages.IMG_POPUPBAR_PLUS);

    private void adjustToFitInViewport (Point balloonLocation);
    private void initPopupBars ();
    private void setFlag (int bit, boolean b);
    private void setPopupBarOnDiagramActivated (boolean bVal);
    private void teardownPopupBar ();
    protected IFigure createPopupBarFigure ();
    protected List getPopupBarDescriptors (); protected List imagesToBeDisposed = null;

    protected String getDiagramAssistantID ();
    protected boolean getIsDisplayAtMouseHoverLocation ();
    protected boolean isDiagramAssistant (Object object);
    protected boolean isDiagramAssistantShowing ();
    protected boolean isHostConnection ();
    protected boolean isRightDisplay ();
    protected boolean shouldShowDiagramAssistant ();
    protected int getAppearanceDelayLocationSpecific ();
    protected void addPopupBarDescriptor (IElementType elementType, Image theImage);
    protected void addPopupBarDescriptor (IElementType elementType, Image theImage, CreateRequest theRequest);
    protected void addPopupBarDescriptor (IElementType elementType, Image theImage, DragTracker theTracker);
    protected void addPopupBarDescriptor (IElementType elementType, Image theImage, DragTracker theTracker, String theTip);
    protected void addPopupBarDescriptor (IElementType elementType, Image theImage, String theTip);
    protected void fillPopupBarDescriptors ();
    protected void hideDiagramAssistant ();
    protected void populatePopupBars ();
    protected void setHostConnection (boolean bVal);
    protected void setIsDisplayAtMouseHoverLocation (boolean bVal);
    protected void setLeftHandDisplay ();
    protected void setRightHandDisplay ();
    protected void showDiagramAssistant (Point referencePoint);
    protected void showDiagramAssistantAfterDelay (int theDelay);
    public void activate ();
    public void deactivate ();
    public void mouseHover (MouseEvent me);
    public void mouseMoved (MouseEvent me); private static double BALLOON_X_OFFSET_LHS = 0.25;
    private static double BALLOON_X_OFFSET_RHS = 0.65;
    private static int ACTION_BUTTON_START_X = 5;
    private static int ACTION_BUTTON_START_Y = 5;
    private static int ACTION_MARGIN_RIGHT = 10;
    private static int ACTION_WIDTH_HGT = 30;
    private static int BALLOON_Y_OFFSET = 10;
    private static int POPUPBAR_ACTIVATEONHOVER = 0x01;
    private static int POPUPBAR_DISPLAYATMOUSEHOVERLOCATION = 0x04;
    private static int POPUPBAR_HOST_IS_CONNECTION = 0x20;
    private static int POPUPBAR_MOVE_FIGURE = 0x02;
    private static int POPUPBAR_ONDIAGRAMACTIVATED = 0x10;

}

