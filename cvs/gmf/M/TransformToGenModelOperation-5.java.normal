package org.eclipse.gmf.internal.bridge.transform;

public class TransformToGenModelOperation {

    GenModel findGenmodel (ResourceSet rs) throws CoreException;
    GenModel loadGenModel (ResourceSet rs, URI uri, IProgressMonitor pm) throws CoreException;
    GenModelDetector getGenModelDetector ();
    IStatus executeTransformation (ResourceSet rs, IProgressMonitor pm);
    IStatus getLoadMappingStatus ();
    IStatus getStaleGenmodelStatus ();
    Mapping getMapping ();
    Mapping loadMappingModel (ResourceSet rs, URI uri, IProgressMonitor pm) throws CoreException;
    private DiagramRunTimeModelHelper detectRunTimeModel ();
    private GenModel getGenModel (); private GenModel myGenModel;
    private GenModelDetector myGMDetector;

    private GenModelProducer createGenModelProducer (GenModel domainGenModel, final DiagramRunTimeModelHelper drtModelHelper, final ViewmapProducer viewmapProducer, final VisualIdentifierDispenser idDespenser);
    private IStatus getFirst (Diagnostic d); private IStatus myLoadMapmodelStatus;
    private IStatus myStaleGenmodelStatus;

    private IStatus validate (GenEditorGenerator genBurdern, IProgressMonitor monitor);
    private Map getSaveOptions (); private Mapping myMapping;
    private TransformOptions myOptions;
    private URI myGMFGenModelURI;
    private URI myMapModelURI;

    private ViewmapProducer detectTransformationOptions ();
    private VisualIdentifierDispenserProvider getVisualIdDispenser ();
    private static void subTask (IProgressMonitor monitor, int ticks, String name, String cancelMessage) throws CoreException;
    private void reconcile (ResourceSet rs, GenEditorGenerator genBurdern);
    private void save (ResourceSet rs, GenEditorGenerator genBurdern) throws IOException;
    private void setMapping (Mapping m);
    public TransformOptions getOptions ();
    public TransformToGenModelOperation (URI mapURI) {
    }

    public URI getGenURI ();
    public URI getMapURI ();
    public void reset (URI uri);
    void setGenURI (URI gmfGen);
}

