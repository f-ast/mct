package org.eclipse.gmf.internal.graphdef.codegen.ui;

public class ConverterSection extends OptionTemplateSection {
    private BooleanOption myNeedsMapModeOption;
    private BooleanOption myUseRuntimeFiguresOption;

    private Bundle getContributingBundle ();
    private ConverterOptions newConverterOptions ();
    private FileNameOption addFileNameOption (boolean saveNotLoad, String name, String label, String value, int pageIndex); private FileNameOption myInputPathOption;
    private FileNameOption myOutputDiagramElementsPathOption;
    private FileNameOption myOutputGalleryPathOption;

    private IFile findGeneratedManifest (); private ManifestElement [] myRequiredBundles;

    private String getFormattedPackageName (String id); private TemplateOption myPackageNameOption;

    private WizardPage getTheOnlyPage ();
    private boolean validateInputPath ();
    private boolean validateMirrorDiagramWithoutFigureGallery ();
    private boolean validateOutputOption (FileNameOption option);
    private boolean validatePackageName ();
    private boolean validatePath (String path); final private InputValidationState myCachedInputValidationState;
    final private boolean shouldWarnLiteVerstionDoesNotSupportMapMode;

    private static Resource loadResource (String path);
    private static boolean shouldGenerate (FileNameOption option); private static class InputValidationState {

        public InputValidationState (FileNameOption galleryOption, FileNameOption diagramElementsOption) {
        }

        public String getErrorMessage ();
        public boolean isValid ();
        public void updateInput (String path);
    }

    final private static String MY_PLUGIN_ID = "org.eclipse.gmf.graphdef.codegen.ui";
    final private static String SECTION_ID = "org.eclipse.gmf.graphdef.codegen.ui.ConverterSection";
    final private static int THE_ONLY_PAGE_INDEX = 0;

    private void addImport (String importedPluginId) throws CoreException;
    private void flagError (String message);
    private void readRequiredBundles () throws CoreException, IOException;
    protected ResourceBundle getPluginResourceBundle ();
    protected URL getInstallURL ();
    protected void generateFiles (IProgressMonitor monitor) throws CoreException;
    protected void initializeFields (IFieldData data);
    protected void updateModel (IProgressMonitor monitor) throws CoreException;
    public ConverterSection () {
    }

    public IPluginReference [] getDependencies (String schemaVersion);
    public String [] getNewFiles ();
    public String getPluginActivatorClassFQN ();
    public String getPluginFriendlyName ();
    public String getPluginID ();
    public String getPluginProviderName ();
    public String getSectionId ();
    public String getUsedExtensionPoint ();
    public boolean isDependentOnParentWizard (); final public static String OPTION_INPUT_RESOURCE_FULL_PATH = SECTION_ID + ".inputResource";
    final public static String OPTION_MAIN_PACKAGE_NAME = SECTION_ID + ".mainPackageName";
    final public static String OPTION_NEEDS_MAP_MODE = SECTION_ID + ".needsMapMode";
    final public static String OPTION_OUTPUT_DIAGRAM_ELEMENTS_FULL_PATH = SECTION_ID + ".outputDiagramElements";
    final public static String OPTION_OUTPUT_GALLERY_FULL_PATH = SECTION_ID + ".outputGallery";
    final public static String OPTION_USE_RUNTIME_FIGURES = SECTION_ID + ".useRuntimeFigures";

    public void addPages (Wizard wizard);
    public void validateOptions (TemplateOption changed);
}

