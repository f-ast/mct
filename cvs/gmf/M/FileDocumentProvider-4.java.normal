package org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document;

abstract public class FileDocumentProvider extends StorageDocumentProvider {
    ;

    private ISchedulingRule computeSchedulingRule (IResource toCreateOrModify); private WorkspaceOperationRunner fOperationRunner;

    private void handleExistingDocumentSaved (IFileEditorInput fileEditorInput, FileInfo info, IStatus status);
    protected ElementInfo createElementInfo (Object element) throws CoreException;
    protected ElementInfo getElementInfo (Object element);
    protected FileInfo createFileInfo (IDocument document, FileSynchronizer synchronizer, IFileEditorInput input); protected IResourceRuleFactory fResourceRuleFactory;

    protected IRunnableContext getOperationRunner (IProgressMonitor monitor);
    protected ISchedulingRule getResetRule (Object element);
    protected ISchedulingRule getSaveRule (Object element);
    protected ISchedulingRule getSynchronizeRule (Object element);
    protected ISchedulingRule getValidateStateRule (Object element);
    abstract protected void saveDocumentToFile (IDocument document, IFile file, boolean overwrite, IProgressMonitor monitor) throws CoreException; protected class FileInfo extends StorageInfo {

        public FileInfo (IDocument document, FileSynchronizer fileSynchronizer) {
        }

        public FileSynchronizer fFileSynchronizer;
        public long fModificationStamp = IResource.NULL_STAMP;

    }

    protected class FileSynchronizer implements IResourceChangeListener, IResourceDeltaVisitor {

        protected IFile getFile (); protected IFileEditorInput fFileEditorInput;
        protected boolean fIsInstalled = false;

        protected void update (Runnable runnable);
        public FileSynchronizer (IFileEditorInput fileEditorInput) {
        }

        public boolean visit (IResourceDelta delta) throws CoreException;
        public void install ();
        public void resourceChanged (IResourceChangeEvent e);
        public void uninstall ();
    }

    protected class SafeChange implements Runnable {

        protected void execute (IFileEditorInput input) throws Exception;
        public SafeChange (IFileEditorInput input) {
        }

        public void run ();
    }

    protected long computeModificationStamp (IResource resource);
    protected void checkSynchronizationState (long cachedModificationStamp, IResource resource) throws CoreException;
    protected void disposeElementInfo (Object element, ElementInfo info);
    protected void doResetDocument (Object element, IProgressMonitor monitor) throws CoreException;
    protected void doSaveDocument (IProgressMonitor monitor, Object element, IDocument document, boolean overwrite) throws CoreException;
    protected void doSynchronize (Object element, IProgressMonitor monitor) throws CoreException;
    protected void doValidateState (Object element, Object computationContext) throws CoreException;
    protected void handleElementContentChanged (IFileEditorInput fileEditorInput);
    protected void handleElementDeleted (IFileEditorInput fileEditorInput);
    protected void handleElementMoved (IFileEditorInput fileEditorInput, IPath path);
    protected void refreshFile (IFile file) throws CoreException;
    protected void refreshFile (IFile file, IProgressMonitor monitor) throws CoreException;
    protected void setDocumentContent (IDocument document, Object content) throws CoreException;
    public FileDocumentProvider () {
    }

    public boolean isDeleted (Object element);
    public boolean isModifiable (Object element);
    public boolean isSynchronized (Object element);
    public long getModificationStamp (Object element);
    public long getSynchronizationStamp (Object element);
    void handleExistingDocumentSaved (IFileEditorInput input);
}

