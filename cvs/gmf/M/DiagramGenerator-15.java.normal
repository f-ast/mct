package org.eclipse.gmf.runtime.diagram.ui.render.clipboard;

abstract public class DiagramGenerator {

    abstract protected Graphics setUpGraphics (int width, int height);
    abstract protected ImageDescriptor getImageDescriptor (Graphics g);
    final protected void renderToGraphics (Graphics graphics, Point translateOffset, List editparts);
    final public Image createAWTImageForDiagram ();
    final public ImageDescriptor createConstrainedSWTImageDecriptorForParts (List editParts, int maxDeviceWidth, int maxDeviceHeight, boolean useMargins) {
        ImageDescriptor imageDesc = new ImageDescriptor () {

            public ImageData getImageData ();
        }

        ;
        Graphics graphics = null;
        try {
            IMapMode mm = getMapMode ();
            Rectangle originalBounds = new PrecisionRectangle (new Rectangle (calculateImageRectangle (editParts)));
            getMapMode ().LPtoDP (originalBounds);
            int deviceMargins = mm.LPtoDP (getImageMargin ());
            int threshold = useMargins ? deviceMargins : 0;
            double xScalingFactor = 1.0, yScalingFactor = xScalingFactor;
            originalBounds.shrink (deviceMargins, deviceMargins);
            if (maxDeviceWidth > threshold) {
                xScalingFactor = (maxDeviceWidth - threshold - threshold) / (originalBounds.preciseWidth ());
            }
            if (maxDeviceHeight > threshold) {
                yScalingFactor = (maxDeviceHeight - threshold - threshold) / (originalBounds.preciseHeight ());
            }
            double scalingFactor = Math.min (Math.min (xScalingFactor, yScalingFactor), 1);
            int imageWidth = originalBounds.width + threshold + threshold;
            int imageHeight = originalBounds.height + threshold + threshold;
            if (scalingFactor < 1) {
                imageWidth = (int) Math.round (originalBounds.preciseWidth () * scalingFactor) + threshold + threshold;
                imageHeight = (int) Math.round (originalBounds.preciseHeight () * scalingFactor) + threshold + threshold;
            }
            graphics = setUpGraphics (imageWidth, imageHeight);
            ScaledGraphics scaledGraphics = new ScaledGraphics (graphics);
            RenderedMapModeGraphics mapModeGraphics = new RenderedMapModeGraphics (scaledGraphics, getMapMode ());
            graphics.translate (threshold, threshold);
            mapModeGraphics.scale (scalingFactor);
            Point location = new PrecisionPoint (originalBounds.preciseX (), originalBounds.preciseY ());
            mm.DPtoLP (location);
            renderToGraphics (mapModeGraphics, location, editParts);
            imageDesc = getImageDescriptor (graphics);
        } finally {
            if (graphics != null) disposeGraphics (graphics);

        }
        return imageDesc;
    }
    final public ImageDescriptor createSWTImageDescriptorForDiagram ();
    final public ImageDescriptor createSWTImageDescriptorForParts (List editparts);
    final public ImageDescriptor createSWTImageDescriptorForParts (List editparts, org.eclipse.swt.graphics.Rectangle sourceRect);
    private Collection < ConnectionEditPart > findConnectionsToPaint (IGraphicalEditPart editPart); private DiagramEditPart _dgrmEP;

    private List < ConnectionEditPart > getAllConnectionsFrom (GraphicalEditPart ep);
    private List calculateEnvelopingPolyline (PointList polyPts, Point origin);
    private List convertPolylineUnits (List polyPts);
    private List sortSelection (List toSort);
    private Map findDecorations (Collection editparts);
    private Map mapFiguresToEditParts (Collection editParts); private int image_margin = 0;

    private void getNestedEditParts (IGraphicalEditPart childEditPart, Collection editParts);
    private void paintDecorations (Graphics graphics, IFigure figure, Map decorations);
    private void paintFigure (Graphics graphics, IFigure figure);
    private void sortSelection (GraphicalEditPart editPart, List open, List closed);
    private void translateToPrintableLayer (IFigure figure, Translatable translatable);
    protected DiagramEditPart getDiagramEditPart ();
    protected IMapMode getMapMode ();
    protected int getImageMargin ();
    protected void disposeGraphics (Graphics g);
    public DiagramGenerator (DiagramEditPart dgrmEP) {
    }

    public Image createAWTImageForParts (List editParts, org.eclipse.swt.graphics.Rectangle diagramArea);
    public Image createAWTImageForParts (List editparts);
    public Image createConstrainedAWTImageForParts (List editParts, int maxDeviceWidth, int maxDeviceHeight, boolean useMargins);
    public List getDiagramPartInfo ();
    public List getDiagramPartInfo (DiagramEditPart diagramEditPart);
    public org.eclipse.swt.graphics.Rectangle calculateImageRectangle (List editparts);
}

