package org.eclipse.gmf.runtime.common.core.command;

public class CompositeCommand extends AbstractCommand implements ICompositeCommand {

    private boolean anyChildHasContext (IUndoContext ctx); private boolean executed;
    private class ChildIterator implements Iterator {
        protected Object last;
        final protected ListIterator iter;

        public Object next ();
        public boolean hasNext ();
        public void remove ();
    }

    private class ChildListIterator extends ChildIterator implements ListIterator {

        public Object previous ();
        public boolean hasPrevious ();
        public int nextIndex ();
        public int previousIndex ();
        public void add (Object o);
        public void set (Object o);
    }

    final private List children;

    private void didAdd (IUndoableOperation operation);
    private void didRemove (IUndoableOperation operation);
    private void unwindFailedExecute (ListIterator iter, IAdaptable info);
    private void unwindFailedRedo (ListIterator iter, IAdaptable info);
    private void unwindFailedUndo (ListIterator iter, IAdaptable info);
    protected CommandResult doExecuteWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException;
    protected CommandResult doRedoWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException;
    protected CommandResult doUndoWithResult (IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException;
    protected IStatus aggregateStatuses (List statuses);
    protected List getChildren ();
    protected List getReturnValues ();
    final protected boolean isExecuted ();
    final protected void assertNotExecuted ();
    public CompositeCommand (String label) {
    }

    public CompositeCommand (String label, List children) {
    }

    public ICommand reduce ();
    public Iterator iterator ();
    public List getAffectedFiles ();
    public ListIterator listIterator ();
    public ListIterator listIterator (int index);
    public boolean canExecute ();
    public boolean canRedo ();
    public boolean canUndo ();
    final public ICommand compose (IUndoableOperation operation);
    final public boolean isEmpty ();
    public int size ();
    public void add (IUndoableOperation operation);
    public void dispose ();
    public void remove (IUndoableOperation operation);
}

