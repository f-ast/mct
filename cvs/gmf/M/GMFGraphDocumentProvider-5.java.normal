package org.eclipse.gmf.graphdef.editor.part;

public class GMFGraphDocumentProvider extends StorageDocumentProvider implements IDiagramDocumentProvider {

    private ISchedulingRule computeSchedulingRule (IResource toCreateOrModify);
    private TransactionalEditingDomain createEditingDomain (); private class ResourceSetModificationListener extends EContentAdapter {

        public ResourceSetModificationListener (ResourceSetInfo info) {
        }

        public void notifyChanged (Notification notification);
    }

    private long computeModificationStamp (ResourceSetInfo info);
    protected ElementInfo createElementInfo (Object element) throws CoreException;
    protected IDocument createEmptyDocument ();
    protected ISchedulingRule getResetRule (Object element);
    protected ISchedulingRule getSaveRule (Object element);
    protected ISchedulingRule getSynchronizeRule (Object element);
    protected ISchedulingRule getValidateStateRule (Object element); protected class ResourceSetInfo extends StorageInfo {
        private Collection myUnSynchronizedResources = new ArrayList ();
        private FileEditorInput myEditorInput;
        private IDiagramDocument myDocument;
        private WorkspaceSynchronizer mySynchronizer;
        private class SynchronizerDelegate implements WorkspaceSynchronizer.Delegate {

            public boolean handleResourceChanged (final Resource resource);
            public boolean handleResourceDeleted (Resource resource);
            public boolean handleResourceMoved (Resource resource, final org.eclipse.emf.common.util.URI newURI);
            public void dispose ();
        }

        private long myModificationStamp = IResource.NULL_STAMP;

        public FileEditorInput getEditorInput ();
        public ResourceSet getResourceSet ();
        public ResourceSetInfo (IDiagramDocument document, FileEditorInput editorInput) {
        }

        public boolean isSynchronized ();
        final public void startResourceListening ();
        final public void stopResourceListening ();
        public long getModificationStamp ();
        public void dispose ();
        public void setModificationStamp (long modificationStamp);
        public void setSynchronized ();
        public void setSynchronized (Resource resource);
        public void setUnSynchronized (Resource resource);
    }

    protected void disposeElementInfo (Object element, ElementInfo info);
    protected void doSaveDocument (IProgressMonitor monitor, Object element, IDocument document, boolean overwrite) throws CoreException;
    protected void doSynchronize (Object element, IProgressMonitor monitor) throws CoreException;
    protected void doValidateState (Object element, Object computationContext) throws CoreException;
    protected void handleElementChanged (ResourceSetInfo info, Resource changedResource, IProgressMonitor monitor);
    protected void handleElementDeleted (FileEditorInput input);
    protected void handleElementMoved (FileEditorInput input, IPath path);
    protected void markWholeResourceSetAsDirty (ResourceSet resourceSet);
    protected void setDocumentContentFromStorage (IDocument document, IStorage storage) throws CoreException;
    protected void updateCache (IStorageEditorInput input) throws CoreException;
    public IDiagramDocument getDiagramDocument (Object element);
    public IEditorInput createInputWithEditingDomain (IEditorInput editorInput, TransactionalEditingDomain domain);
    public ResourceSetInfo getResourceSetInfo (Object editorInput);
    public boolean isDeleted (Object element);
    public boolean isModifiable (Object element);
    public boolean isSynchronized (Object element);
    public long getModificationStamp (Object element);
    public long getSynchronizationStamp (Object element);
}

