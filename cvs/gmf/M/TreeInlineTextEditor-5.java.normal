package org.eclipse.gmf.runtime.common.ui.util;

public class TreeInlineTextEditor {
    private Color proposalPopupBackgroundColor;
    private Color proposalPopupForegroundColor;

    private Composite getTextEditorParent (); private Composite textEditorParent;
    private ContentAssistHandler contentAssistHandler = null;
    private IEditStringProvider editStringProvider;

    private IEditStringProvider getEditStringProvider ();
    private IInlineTextActionHandler getTextActionHandler (); private IInlineTextActionHandler textActionHandler;

    private Rectangle getNullRectangle ();
    private Shell getShell (); private String finalText;
    private String initialText;

    private Text getTextEditor (); private Text textEditor;

    private Tree getTree (); private Tree tree;

    private TreeEditor getTreeEditor (); private TreeEditor treeEditor;

    private TreeItem getTreeItem (); private TreeItem treeItem;

    private TreeViewer getTreeViewer (); private TreeViewer viewer;

    private boolean canProceed ();
    private boolean isF2disabled (); private boolean isF2disabled;

    private boolean isSelectedItemEditable (); final private static Rectangle nullRectangle = new Rectangle (0, 0, 0, 0);

    private void adjustTextEditorBounds ();
    private void createControl ();
    private void hide ();
    private void init () {
        getTextEditorParent ().addListener (SWT.Paint, new Listener () {

            public void handleEvent (Event e);
        }

        );
        getTextEditor ().addListener (SWT.Modify, new Listener () {

            public void handleEvent (Event e);
        }

        );
        getTextEditor ().addKeyListener (new KeyAdapter () {

            public void keyReleased (KeyEvent event);
        }

        );
        getTextEditor ().addFocusListener (new FocusAdapter () {

            public void focusGained (FocusEvent e);
            public void focusLost (FocusEvent fe) {
                Shell activeShell = fe.display.getActiveShell ();
                if (activeShell != null && getTextEditor ().getShell ().equals (activeShell.getParent ())) {
                    return;
                }
                if ((getTreeViewer ().getSelection ().isEmpty () == false) && canProceed ()) {
                    final Object obj = getTreeItem ().getData ();
                    getTreeItem ().getDisplay ().asyncExec (new Runnable () {

                        public void run ();
                    }

                    );
                }
                endEdit ();
            }
        }

        );
        getTreeViewer ().addSelectionChangedListener (new ISelectionChangedListener () {

            public void selectionChanged (SelectionChangedEvent event);
        }

        );
        if (! isF2disabled ()) {
            getTree ().addKeyListener (new KeyAdapter () {

                public void keyReleased (KeyEvent event);
            }

            );
        }
    }
    private void initTextActionHandler (IActionBars actionBars, List disableActionsIds) {
        if (actionBars == null) {
            return;
        }
        actionBars.getMenuManager ().addMenuListener (new IMenuListener () {

            public void menuAboutToShow (IMenuManager manager);
        }

        );
        setTextActionHandler (new InlineTextActionHandler (actionBars, getTextEditor (), disableActionsIds));
    }
    private void setEditStringProvider (IEditStringProvider editStringProvider);
    private void setFinalText (String finalText);
    private void setInitialText (String initialText);
    private void setIsF2disabled (boolean isF2disabled);
    private void setTextActionHandler (IInlineTextActionHandler textActionHandler);
    private void setTextEditor (Text textEditor);
    private void setTextEditorParent (Composite textEditorParent);
    private void setTree (Tree tree);
    private void setTreeEditor (TreeEditor treeEditor);
    private void setTreeItem (TreeItem treeItem);
    private void setTreeViewer (TreeViewer viewer);
    private void show ();
    private void uninstallContentAssist (boolean fork); private volatile boolean inEndEdit;

    protected void openErrorDialog (IStatus status);
    public String getCurrentText ();
    public String getFinalText ();
    public String getInitialText ();
    public TreeInlineTextEditor (TreeViewer treeViewer, IActionBars actionBars, List disableActionsIds, IEditStringProvider editStringProvider) {
    }

    public TreeInlineTextEditor (TreeViewer treeViewer, IEditStringProvider editStringProvider, boolean isF2disabled) {
    }

    public boolean canEdit ();
    public boolean isDisposed ();
    public void cancelEdit ();
    public void dispose ();
    public void endEdit ();
    public void startEdit ();
}

