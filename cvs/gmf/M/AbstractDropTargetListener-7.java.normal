package org.eclipse.gmf.runtime.common.ui.services.dnd.drop;

abstract public class AbstractDropTargetListener implements IDropTargetListener {
    ;
    private IDropTargetContext context = null;
    private IDropTargetEvent currentEvent = null;
    private ITransferAgent currentAgent = null;
    final private List transferIds = new Vector ();

    private void runCommandInProgressMonitorDialog (final ICommand command, boolean cancelable);
    private void runInProgressMonitorDialog (IRunnableWithProgress runnable, boolean cancelable);
    protected WorkIndicatorType getWorkIndicatorType ();
    final protected IDropTargetContext getContext ();
    final protected IDropTargetEvent getCurrentEvent ();
    final protected ITransferAgent getCurrentAgent ();
    final protected Shell getShell ();
    public AbstractDropTargetListener () {
    }

    public AbstractDropTargetListener (String [] transferIdArray) {
    }

    public ICommand getExecutableContext (DropTargetEvent event);
    abstract public boolean canSupport ();
    final public String [] getSupportingTransferIds ();
    final public boolean canSupport (IDropTargetContext cntxt, IDropTargetEvent currEvent, ITransferAgent currAgent);
    final public void addSupportingTransferId (String transferId);
    final public void drop (DropTargetEvent event); public static class WorkIndicatorType extends EnumeratedType {

        protected List getValues ();
        protected WorkIndicatorType (String name, int ordinal) {
        }

        final public static WorkIndicatorType BUSY = new WorkIndicatorType ("Busy");
        final public static WorkIndicatorType CANCELABLE_PROGRESS_MONITOR = new WorkIndicatorType ("Cancelable Progress Monitor");
        final public static WorkIndicatorType NONE = new WorkIndicatorType ("None");
        final public static WorkIndicatorType PROGRESS_MONITOR = new WorkIndicatorType ("Progress Monitor");

    }

    public void dragEnter (DropTargetEvent event);
    public void dragLeave (DropTargetEvent event);
    public void dragOperationChanged (DropTargetEvent event);
    public void dragOver (DropTargetEvent event);
    public void dropAccept (DropTargetEvent event);
    public void setFeedback (DropTargetEvent event);
}

