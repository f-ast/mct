package org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance;

public class ColorsAndFontsPropertySection extends AbstractNotationPropertiesSection {
    private CCombo fontSizeCombo;
    private CoolBar coolBar;
    private ToolItem fontBoldButton;
    private ToolItem fontItalicButton;
    protected CCombo fontFamilyCombo;
    protected Group colorsAndFontsGroup;

    protected Group createFontsAndColorsGroups (Composite parent);
    protected Iterator getInputIterator ();
    protected RGB changeColor (SelectionEvent event, ToolItem button, String preferenceId, final String propertyId, String commandName, ImageDescriptor imageDescriptor) {
        ColorPalettePopup popup = new ColorPalettePopup (button.getParent ().getShell (), preferenceId, IDialogConstants.BUTTON_BAR_HEIGHT);
        Rectangle r = button.getBounds ();
        Point location = button.getParent ().toDisplay (r.x, r.y);
        popup.open (new Point (location.x, location.y + r.height));
        if (popup.getSelectedColor () != null) {
            final RGB color = popup.getSelectedColor ();
            if (color != null) {
                List commands = new ArrayList ();
                Iterator it = getInputIterator ();
                while (it.hasNext ()) {
                    final IGraphicalEditPart ep = (IGraphicalEditPart) it.next ();
                    commands.add (createCommand (commandName, ((View) ep.getModel ()).eResource (), new Runnable () {

                        public void run ();
                    }

                    ));
                }
                executeAsCompositeCommand (commandName, commands);
                Image overlyedImage = new ColorOverlayImageDescriptor (imageDescriptor.getImageData (), color).createImage ();
                button.setImage (overlyedImage);
            }
            return color;
        }
        return null;
    }
    protected RGB changeColor (SelectionEvent event, ToolItem button, String preferenceId, final String propertyId, String commandName, String imageName); protected RGB fillColor = null;
    protected RGB fontColor;
    protected RGB lineColor;

    protected ToolBar createFontsGroup (Composite parent); protected ToolItem fillColorButton;
    protected ToolItem fontColorButton;
    protected ToolItem lineColorButton;
    protected static class ColorOverlayImageDescriptor extends CompositeImageDescriptor {

        protected Point getSize ();
        protected void drawCompositeImage (int width, int height);
        public ColorOverlayImageDescriptor (ImageData basicImgData, RGB rgb) {
        }

    }

    final protected static RGB DEFAULT_PREF_COLOR = new RGB (0, 0, 0);
    final protected static String FONTS_AND_COLORS_LABEL = DiagramUIPropertiesMessages.FontAndColor_nameLabel;
    final protected static String FONT_COLOR_COMMAND_NAME = DiagramUIPropertiesMessages.FontColor_commandText + StringStatics.SPACE + VALUE_CHANGED_STRING;
    final protected static String FONT_COMMAND_NAME = DiagramUIPropertiesMessages.Font_commandText + StringStatics.SPACE + VALUE_CHANGED_STRING;
    final protected static String LINE_COLOR_COMMAND_NAME = DiagramUIPropertiesMessages.LineColor_commandText + StringStatics.SPACE + VALUE_CHANGED_STRING;

    protected void changeFontColor (SelectionEvent event);
    protected void changeLineColor (SelectionEvent event);
    protected void initializeControls (Composite parent);
    protected void updateColorCache ();
    protected void updateFontBold ();
    protected void updateFontFamily ();
    protected void updateFontItalic ();
    protected void updateFontSize ();
    public void refresh ();
    public void setInput (IWorkbenchPart part, ISelection selection);
    public void update (final Notification notification, final EObject element); final protected static String FILL_COLOR_COMMAND_NAME = DiagramUIPropertiesMessages.FillColor_commandText + StringStatics.SPACE + VALUE_CHANGED_STRING;

}

