package org.eclipse.gmf.runtime.draw2d.ui.geometry;

public class LineSeg implements Cloneable, Translatable, java.io.Serializable {
    final private static int DEFAULT_INTERSECTION_TOLERANCE = 1;
    private Point origin;
    private Point terminus;
    final private static float BIGSLOPE = 9999;

    public LineSeg (Point ptStart, Point ptEnd) {
    }

    public LineSeg (final KeyPoint start, final int fromX, final int fromY, final float slope, final long len, final int xdir) {
    }

    public Point getOrigin ();
    public Point getTerminus ();
    public Point intersect (final LineSeg line, final int nTolerance);
    public PointList getLineIntersectionsWithEllipse (Rectangle ellipseBounds);
    public PointList getLineIntersectionsWithLineSegs (final PointList points);
    public PointList getLinesIntersections (LineSeg line);
    public TrigValues getTrigValues (final Ray ptToVector);
    public boolean equals (Object seg);
    public double [] getEquation ();
    final public LineSeg getParallelLineSegThroughPoint (Point ptLoc);
    final public Point getInfimum ();
    final public Point getSupremum ();
    final public Point locatePoint (final double pctDist, final long theHeight, final Sign asOriented);
    final public Point perpIntersect (final int startX, final int startY);
    final public Sign positionRelativeTo (Point rel);
    final public boolean containsPoint (final Point aPoint, final int tolerance);
    final public boolean isHorizontal ();
    final public boolean isVertical ();
    final public boolean pointOn (final long theDistance, final KeyPoint fromKeyPoint, Point ptResult);
    final public double length ();
    final public double projection (final int xCoord, final int yCoord);
    final public float distanceAlong (Point coord);
    final public float perpSlope ();
    final public float slope ();
    final public long distanceToPoint (final int xCoord, final int yCoord);
    public int hashCode ();
    public static double [] getLineEquation (double x1, double y1, double x2, double y2);
    public void performScale (double factor);
    public void performTranslate (int dx, int dy);
    public void setOrigin (Point origin);
    public void setTerminus (Point terminus); final static long serialVersionUID = 1;
    public static class KeyPoint {

        public String toString (); final public static KeyPoint MIDPOINT = new KeyPoint ("midpoint");
        final public static KeyPoint ORIGIN = new KeyPoint ("origin");
        final public static KeyPoint TERMINUS = new KeyPoint ("terminus");

    }

    public static class Sign {

        public String toString (); final public static Sign NEGATIVE = new Sign ("negative");
        final public static Sign POSITIVE = new Sign ("positive");

    }

    public static class TrigValues {
        public double cosTheta;
        public double sinTheta;

    }

}

