package org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts;

public class DiagramDocumentEditor extends DiagramEditorWithFlyOutPalette implements IDocumentEditor, IReusableEditor {
    class ActivationListener implements IPartListener, IWindowListener {
        private IPartService fPartService;
        private IWorkbenchPart fActivePart;
        private boolean fIsHandlingActivation = false;

        private void handleActivation ();
        public ActivationListener (IPartService partService) {
        }

        public void activate ();
        public void deactivate ();
        public void dispose ();
        public void partActivated (IWorkbenchPart part);
        public void partBroughtToTop (IWorkbenchPart part);
        public void partClosed (IWorkbenchPart part);
        public void partDeactivated (IWorkbenchPart part);
        public void partOpened (IWorkbenchPart part);
        public void windowActivated (IWorkbenchWindow window);
        public void windowClosed (IWorkbenchWindow window);
        public void windowDeactivated (IWorkbenchWindow window);
        public void windowOpened (IWorkbenchWindow window);
    }

    class ElementStateListener implements IElementStateListener {
        private Display fDisplay;

        private void execute (Runnable runnable, boolean postAsync);
        protected boolean canHandleMove (IEditorInput originalElement, IEditorInput movedElement);
        public void elementContentAboutToBeReplaced (Object element);
        public void elementContentReplaced (Object element);
        public void elementDeleted (Object deletedElement);
        public void elementDirtyStateChanged (Object element, boolean isDirty);
        public void elementMoved (final Object originalElement, final Object movedElement);
        public void elementStateChangeFailed (Object element);
        public void elementStateChanging (Object element);
        public void elementStateValidationChanged (final Object element, final boolean isStateValidated);
    }

    final protected IEditorDescriptor getEditorDescriptor (); private ActivationListener fActivationListener;
    private IDocumentProvider fExplicitDocumentProvider;
    private IElementStateListener fElementStateListener = new ElementStateListener ();

    private IStatusLineManager getStatusLineManager (); private Image fTitleImage;
    private boolean fIsSanityCheckEnabled = true;
    private boolean fIsStateValidationEnabled = true;
    private boolean isHandlingElementDeletion = false;

    private boolean isNotSynchronizedException (CoreException ex); private int fErrorCorrectionOnSave;
    private long fModificationStamp = IResource.NULL_STAMP;

    private void initializeTitle (IEditorInput input);
    private void updateDocumentProvider (IEditorInput input);
    protected ActionManager createActionManager ();
    protected IDocumentProvider getDocumentProvider (IEditorInput input) {
        IDocumentProvider provider = DocumentProviderRegistry.getDefault ().getDocumentProvider (input, new IDocumentProviderSelector () {

            public boolean select (String documentType);
        }

        );
        return provider;
    }
    protected IOperationHistory createOperationHistory ();
    protected IProgressMonitor getProgressMonitor ();
    protected Object getDefaultPaletteContent ();
    protected String getEditingDomainID ();
    protected TransactionalEditingDomain createEditingDomain ();
    protected boolean reuseDiagramOnMove (); final protected String fErrorLabel = EditorMessages.Editor_statusline_error_label;

    final protected void setSite (IWorkbenchPartSite site);
    protected void configureDiagramEditDomain ();
    protected void disposeDocumentProvider ();
    protected void editorSaved ();
    protected void enableSanityChecking (boolean enable);
    protected void enableStateValidation (boolean enable);
    protected void firePropertyChange (int property);
    protected void handleEditorInputChanged ();
    protected void handleElementContentAboutToBeReplaced ();
    protected void handleElementContentReplaced ();
    protected void handleExceptionOnSave (CoreException exception, IProgressMonitor progressMonitor);
    protected void performSave (boolean overwrite, IProgressMonitor progressMonitor);
    protected void performSaveAs (IProgressMonitor progressMonitor);
    protected void releaseInput ();
    protected void safelySanityCheckState (IEditorInput input);
    protected void sanityCheckState (IEditorInput input);
    protected void setDocumentProvider (IDocumentProvider provider);
    protected void setDocumentProvider (IEditorInput input);
    protected void updateState (IEditorInput input);
    protected void validateState (IEditorInput input);
    public Diagram getDiagram ();
    public DiagramDocumentEditor (boolean hasFlyoutPalette) {
    }

    public IDiagramDocument getDiagramDocument ();
    public IDocumentProvider getDocumentProvider ();
    public Object getAdapter (Class type);
    public TransactionalEditingDomain getEditingDomain ();
    public boolean askUserReload ();
    public boolean askUserSaveOverwrite ();
    public boolean isDirty ();
    public boolean isEditable ();
    public boolean isEditorInputModifiable ();
    public boolean isEditorInputReadOnly ();
    public boolean isSaveAsAllowed ();
    public boolean validateEditorInputState ();
    public int askUserSaveClose ();
    public void close (final boolean save);
    public void createPartControl (Composite parent);
    public void dispose ();
    public void doSave (IProgressMonitor progressMonitor);
    public void doSaveAs ();
    public void doSetInput (IEditorInput input, boolean releaseEditorContents) throws CoreException;
    public void init (final IEditorSite site, final IEditorInput input) throws PartInitException;
    public void selectionChanged (IWorkbenchPart part, ISelection selection);
    public void setInput (IEditorInput input);
}

