package org.eclipse.gmf.runtime.gef.ui.internal.editpolicies;

abstract public class ConnectionBendpointEditPolicy extends SelectionHandlesEditPolicy implements PropertyChangeListener {
    ;

    abstract protected Command getBendpointsChangedCommand (BendpointRequest request); private FeedbackState feedbackState = null;

    private FeedbackState getFeedbackState (); private LineMode lineSegMode = LineMode.OBLIQUE;

    private Point getFirstReferencePoint ();
    private Point getSecondReferencePoint ();
    private boolean lineContainsPoint (Point p1, Point p2, Point p);
    private boolean useRealtimeFeedback ();
    private int adjustOutsideBoundsLineFeedback (LineSeg newLine, int index, List constraint, LineSeg moveLine);
    private int getStickyTolerance (); private static List NULL_CONSTRAINT = new ArrayList ();
    final private static int STICKY_TOLERANCE_DP = 6;

    private void setNewFeedbackConstraint (List constraint);
    private void setReferencePoints (BendpointRequest request);
    private void showMoveOrthogonalBenspointFeedback (BendpointRequest request);
    private void showOutsideSourceFeedback (LineSeg newLine, LineSeg moveLine, List constraint);
    private void showOutsideTargetFeedback (LineSeg newLine, LineSeg moveLine, List constraint);
    protected Command getCreateBendpointCommand (BendpointRequest request);
    protected Command getDeleteBendpointCommand (BendpointRequest request);
    protected Command getMoveBendpointCommand (BendpointRequest request);
    protected Command getMoveLineSegCommand (BendpointRequest request);
    protected Connection createDragSourceFeedbackConnection ();
    protected Connection getConnection ();
    protected List createManualHandles ();
    protected List createSelectionHandles ();
    protected boolean lineOutsideSource (LineSeg line);
    protected boolean lineOutsideTarget (LineSeg line);
    final protected LineSeg getLineSeg (List bendPoints, int nIndex);
    protected void addInvisibleCreationHandle (List list, ConnectionEditPart connEP, int i);
    protected void addSelectionHandles ();
    protected void eraseConnectionFeedback (BendpointRequest request, boolean removeFeedbackFigure);
    protected void removeOutsideSourceFeedback (List constraint);
    protected void removeOutsideTargetFeedback (List constraint);
    protected void restoreOriginalConstraint ();
    protected void saveOriginalConstraint ();
    protected void setLineSeg (List bendPoints, int nIndex, LineSeg newLine);
    protected void showCreateBendpointFeedback (BendpointRequest request);
    protected void showDeleteBendpointFeedback (BendpointRequest request);
    protected void showMoveBendpointFeedback (BendpointRequest request);
    protected void showMoveLineSegFeedback (BendpointRequest request);
    protected void stickyStraightLineFeedback (List constraint, int nIndex, Bendpoint bp);
    public Command getCommand (Request request);
    public ConnectionBendpointEditPolicy (LineMode lineSegMode) {
    }

    public LineMode getLineSegMode ();
    public Object getAdapter (Class key);
    public void activate ();
    public void deactivate ();
    public void eraseSourceFeedback (Request request);
    public void propertyChange (PropertyChangeEvent evt);
    public void showSourceFeedback (Request request); private static class FeedbackState {
        public List originalConstraint;
        public Point ref1 = new Point ();
        public Point ref2 = new Point ();
        public boolean init = false;
        public boolean isDeleting = false;
        public boolean isOutsideSource = false;
        public boolean isOutsideTarget = false;

    }

}

