package org.eclipse.gmf.runtime.diagram.ui.actions.internal;

public class ColorPropertyContributionItem extends PropertyChangeContributionItem implements Listener {
    private HashMap imageColorMap = new HashMap ();
    private Image disabledBasicImage;
    private Image overlyedImage;
    private ImageData basicImageData;
    private ImageData disabledBasicImageData;
    private Integer lastColor;
    private List customColors = new ArrayList ();
    private List inventoryColors = new ArrayList ();
    private Menu menu;

    private MenuItem createMenuItem (Menu theMenu, String text, Image image); private String preferenceId;

    private static AbstractUIResourceManager getResources (); private static class ColorBoxImageDescriptor extends ImageDescriptor {

        public ColorBoxImageDescriptor (RGB rgb) {
        }

        public ImageData getImageData ();
    }

    private static class ColorMenuImageDescriptor extends CompositeImageDescriptor {

        protected Point getSize ();
        protected void drawCompositeImage (int width, int height);
        public ColorMenuImageDescriptor (ImageData basicImgData, RGB rgb) {
        }

    }

    private static class InventoryColorDescriptor {

        public InventoryColorDescriptor (RGB colorValue, String colorName) {
        }

        public RGB colorValue;
        public String colorName;

    }

    final private static InventoryColorDescriptor BLACK = new InventoryColorDescriptor (new RGB (0, 0, 0), getResources ().getString ("ColorPropertyChangeAction.black"));
    final private static InventoryColorDescriptor BLUE = new InventoryColorDescriptor (new RGB (152, 168, 191), getResources ().getString ("ColorPropertyChangeAction.blue"));
    final private static InventoryColorDescriptor DARK_GRAY = new InventoryColorDescriptor (new RGB (64, 64, 64), getResources ().getString ("ColorPropertyChangeAction.darkGray"));
    final private static InventoryColorDescriptor GRAY = new InventoryColorDescriptor (new RGB (128, 128, 128), getResources ().getString ("ColorPropertyChangeAction.gray"));
    final private static InventoryColorDescriptor GREEN = new InventoryColorDescriptor (new RGB (166, 193, 152), getResources ().getString ("ColorPropertyChangeAction.green"));
    final private static InventoryColorDescriptor LIGHT_GRAY = new InventoryColorDescriptor (new RGB (192, 192, 192), getResources ().getString ("ColorPropertyChangeAction.lightGray"));
    final private static InventoryColorDescriptor ORANGE = new InventoryColorDescriptor (new RGB (237, 201, 122), getResources ().getString ("ColorPropertyChangeAction.orange"));
    final private static InventoryColorDescriptor PINK = new InventoryColorDescriptor (new RGB (228, 179, 229), getResources ().getString ("ColorPropertyChangeAction.pink"));
    final private static InventoryColorDescriptor PURPLE = new InventoryColorDescriptor (new RGB (184, 151, 192), getResources ().getString ("ColorPropertyChangeAction.magenta"));
    final private static InventoryColorDescriptor RED = new InventoryColorDescriptor (new RGB (227, 164, 156), getResources ().getString ("ColorPropertyChangeAction.red"));
    final private static InventoryColorDescriptor TEAL = new InventoryColorDescriptor (new RGB (155, 199, 204), getResources ().getString ("ColorPropertyChangeAction.cyan"));
    final private static InventoryColorDescriptor WHITE = new InventoryColorDescriptor (new RGB (255, 255, 255), getResources ().getString ("ColorPropertyChangeAction.white"));
    final private static InventoryColorDescriptor YELLOW = new InventoryColorDescriptor (new RGB (225, 225, 135), getResources ().getString ("ColorPropertyChangeAction.yellow"));
    final private static Point ICON_SIZE = new Point (16, 16);
    final private static RGB DEFAULT_PREF_COLOR = new RGB (0, 0, 0);
    final private static RGB OUTLINE_COLOR = new RGB (192, 192, 192);
    final private static String CHOOSE = "Choose";
    final private static String CLEAR = "Clear";
    final private static String DEFAULT = "Default";
    final private static int CUSTOM_SIZE = 3;

    private void buildMenu (Menu theMenu);
    private void createChooseColorMenuItem (Menu theMenu);
    private void createClearCustomColorMenuItem (Menu theMenu);
    private void createColorMenuItem (Menu theMenu, RGB rgb);
    private void createDefaultColorMenuItem (Menu theMenu);
    private void createInventoryColorMenuItem (Menu theMenu, InventoryColorDescriptor color);
    private void createMenu (Item item);
    private void createMenuSeparator (Menu theMenu);
    private void handleWidgetSelection (Event e);
    protected ImageData getBasicImageData ();
    protected MenuItem createMenuItem (Menu parent, int index);
    protected Object getNewPropertyValue ();
    protected RGB getBrowseColor ();
    protected RGB getDefaultColor ();
    protected ToolItem createToolItem (ToolBar parent, int index);
    protected void handleWidgetEvent (Event e);
    protected void init ();
    public ColorPropertyContributionItem (IWorkbenchPage workbenchPage, String id, String propertyId, String propertyName, String preferenceId, String toolTipText, ImageData basicImageData, ImageData disabledBasicImageData) {
    }

    public static ColorPropertyContributionItem createFillColorContributionItem (IWorkbenchPage workbenchPage);
    public static ColorPropertyContributionItem createFontColorContributionItem (IWorkbenchPage workbenchPage);
    public static ColorPropertyContributionItem createLineColorContributionItem (IWorkbenchPage workbenchPage);
    public void dispose ();
    public void handleEvent (Event event);
}

