package org.eclipse.gmf.runtime.draw2d.ui.internal.routers;

public class ObliqueRouter extends BendpointConnectionRouter {

    final public void route (Connection conn); private ArrayListMap selfRelConnections = new ArrayListMap ();
    private class ArrayListKey {

        public ConnectionAnchor getSourceAnchor ();
        public ConnectionAnchor getTargetAnchor ();
        public boolean equals (Object object);
        public int hashCode ();
    }

    private void getCornerSelfRelVertices (Connection conn, Rectangle bBox, PointList newLine, int nOffset, int nXDir, int nYDir, Point ptOrient);
    private void getHorizontalSelfRelVertices (Connection conn, Rectangle bBox, PointList newLine, int nOffset, int nDir, Point ptOrient);
    private void getVerticalSelfRelVertices (Connection conn, Rectangle bBox, PointList newLine, int nOffset, int nDir, Point ptOrient);
    private void removeSelfRelConnection (Connection conn);
    protected PointList calculateBendPoints (Connection conn);
    protected PointList getFigurePolygon (IFigure owner, Connection conn);
    protected boolean checkSelfRelConnection (Connection conn, PointList newLine);
    protected boolean isReorienting (Connection conn);
    protected boolean removePointsInViews (Connection conn, PointList newLine); protected int routerFlags;

    protected static Point getStraightEdgePoint (final Point ptEdge, final Point ptRef1, final Point ptRef2); final protected static int SELFRELSIZEINCR = 10;
    final protected static int SELFRELSIZEINIT = 62;

    protected void getSelfRelVertices (Connection conn, PointList newLine);
    protected void resetEndPointsToEdge (Connection conn, PointList newLine);
    public ObliqueRouter () {
    }

    public boolean isAvoidingObstructions (Connection conn);
    public boolean isClosestDistance (Connection conn); final public static int ROUTER_FLAG_SKIPNORMALIZATION = 1;

    public void invalidate (Connection connection);
    public void remove (Connection connection);
    public void routeBendpoints (Connection conn);
    public void routeLine (Connection conn, int nestedRoutingDepth, PointList newLine);
    public void setConstraint (Connection connection, Object constraint); public static class ArrayListMap {

        public ArrayList get (Object key);
        public ArrayListMap () {
        }

        public int size ();
        public void put (Object key, Object value);
        public void remove (Object key, Object value);
    }

}

