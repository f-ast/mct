package org.eclipse.gmf.gmfgraph.presentation;

public class GMFGraphEditor extends MultiPageEditorPart implements IEditingDomainProvider, IGotoMarker, IMenuListener, ISelectionProvider, IViewerProvider {

    private static String getString (String key);
    private static String getString (String key, Object s1); protected AdapterFactoryEditingDomain editingDomain;
    protected Collection < ISelectionChangedListener > selectionChangedListeners = new ArrayList < ISelectionChangedListener > ();
    protected Collection < Resource > changedResources = new ArrayList < Resource > ();
    protected Collection < Resource > removedResources = new ArrayList < Resource > ();
    protected Collection < Resource > savedResources = new ArrayList < Resource > ();
    protected ComposedAdapterFactory adapterFactory;
    protected EContentAdapter problemIndicationAdapter = new EContentAdapter () {

        protected void setTarget (Resource target);
        protected void unsetTarget (Resource target);
        public void notifyChanged (Notification notification);
    }

    ;
    protected IContentOutlinePage contentOutlinePage;
    protected IPartListener partListener = new IPartListener () {

        public void partActivated (IWorkbenchPart p);
        public void partBroughtToTop (IWorkbenchPart p);
        public void partClosed (IWorkbenchPart p);
        public void partDeactivated (IWorkbenchPart p);
        public void partOpened (IWorkbenchPart p);
    }

    ;
    protected IResourceChangeListener resourceChangeListener = new IResourceChangeListener () {

        public void resourceChanged (IResourceChangeEvent event);
    }

    ;
    protected ISelection editorSelection = StructuredSelection.EMPTY;
    protected ISelectionChangedListener selectionChangedListener;
    protected IStatusLineManager contentOutlineStatusLineManager;
    protected ListViewer listViewer;
    protected Map < Resource, Diagnostic > resourceToDiagnosticMap = new LinkedHashMap < Resource, Diagnostic > ();
    protected MarkerHelper markerHelper = new EditUIMarkerHelper ();
    protected PropertySheetPage propertySheetPage;
    protected TableViewer tableViewer;
    protected TreeViewer contentOutlineViewer;
    protected TreeViewer parentViewer;
    protected TreeViewer selectionViewer;
    protected TreeViewer treeViewer;
    protected TreeViewer treeViewerWithColumns;
    protected Viewer currentViewer;
    protected ViewerPane currentViewerPane;

    protected boolean handleDirtyConflict ();
    protected boolean isPersisted (Resource resource);
    protected boolean showOutlineView (); protected boolean updateProblemIndication = true;

    protected void createContextMenuFor (StructuredViewer viewer);
    protected void doSaveAs (URI uri, IEditorInput editorInput);
    protected void firePropertyChange (int action);
    protected void handleActivate ();
    protected void handleChangedResources ();
    protected void hideTabs ();
    protected void initializeEditingDomain ();
    protected void pageChange (int pageIndex);
    protected void showTabs ();
    protected void updateProblemIndication ();
    public AdapterFactory getAdapterFactory ();
    public Diagnostic analyzeResourceProblems (Resource resource, Exception exception);
    public EditingDomain getEditingDomain ();
    public EditingDomainActionBarContributor getActionBarContributor ();
    public GMFGraphEditor () {
    }

    public IActionBars getActionBars ();
    public IContentOutlinePage getContentOutlinePage ();
    public IPropertySheetPage getPropertySheetPage () {
        if (propertySheetPage == null) {
            propertySheetPage = new ExtendedPropertySheetPage (editingDomain) {

                public void setActionBars (IActionBars actionBars);
                public void setSelectionToViewer (List < ? > selection);
            }

            ;
            propertySheetPage.setPropertySourceProvider (new AdapterFactoryContentProvider (adapterFactory));
        }
        return propertySheetPage;
    }
    public ISelection getSelection ();
    public Object getAdapter (Class key);
    public Viewer getViewer ();
    public boolean isDirty ();
    public boolean isSaveAsAllowed (); public class ReverseAdapterFactoryContentProvider extends AdapterFactoryContentProvider {

        public Object [] getChildren (Object object);
        public Object [] getElements (Object object);
        public Object getParent (Object object);
        public ReverseAdapterFactoryContentProvider (AdapterFactory adapterFactory) {
        }

        public boolean hasChildren (Object object);
    }

    public void addSelectionChangedListener (ISelectionChangedListener listener);
    public void createModel ();
    public void createModelGen ();
    public void createPages () {
        createModel ();
        if (! getEditingDomain ().getResourceSet ().getResources ().isEmpty ()) {
            {
                ViewerPane viewerPane = new ViewerPane (getSite ().getPage (), GMFGraphEditor.this) {

                    public Viewer createViewer (Composite composite);
                    public void requestActivation ();
                }

                ;
                viewerPane.createControl (getContainer ());
                selectionViewer = (TreeViewer) viewerPane.getViewer ();
                selectionViewer.setContentProvider (new AdapterFactoryContentProvider (adapterFactory));
                selectionViewer.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                selectionViewer.setInput (editingDomain.getResourceSet ());
                selectionViewer.setSelection (new StructuredSelection (editingDomain.getResourceSet ().getResources ().get (0)), true);
                viewerPane.setTitle (editingDomain.getResourceSet ());
                new AdapterFactoryTreeEditor (selectionViewer.getTree (), adapterFactory);
                createContextMenuFor (selectionViewer);
                int pageIndex = addPage (viewerPane.getControl ());
                setPageText (pageIndex, getString ("_UI_SelectionPage_label"));
            } {
                ViewerPane viewerPane = new ViewerPane (getSite ().getPage (), GMFGraphEditor.this) {

                    public Viewer createViewer (Composite composite);
                    public void requestActivation ();
                }

                ;
                viewerPane.createControl (getContainer ());
                parentViewer = (TreeViewer) viewerPane.getViewer ();
                parentViewer.setAutoExpandLevel (30);
                parentViewer.setContentProvider (new ReverseAdapterFactoryContentProvider (adapterFactory));
                parentViewer.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                createContextMenuFor (parentViewer);
                int pageIndex = addPage (viewerPane.getControl ());
                setPageText (pageIndex, getString ("_UI_ParentPage_label"));
            } {
                ViewerPane viewerPane = new ViewerPane (getSite ().getPage (), GMFGraphEditor.this) {

                    public Viewer createViewer (Composite composite);
                    public void requestActivation ();
                }

                ;
                viewerPane.createControl (getContainer ());
                listViewer = (ListViewer) viewerPane.getViewer ();
                listViewer.setContentProvider (new AdapterFactoryContentProvider (adapterFactory));
                listViewer.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                createContextMenuFor (listViewer);
                int pageIndex = addPage (viewerPane.getControl ());
                setPageText (pageIndex, getString ("_UI_ListPage_label"));
            } {
                ViewerPane viewerPane = new ViewerPane (getSite ().getPage (), GMFGraphEditor.this) {

                    public Viewer createViewer (Composite composite);
                    public void requestActivation ();
                }

                ;
                viewerPane.createControl (getContainer ());
                treeViewer = (TreeViewer) viewerPane.getViewer ();
                treeViewer.setContentProvider (new AdapterFactoryContentProvider (adapterFactory));
                treeViewer.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                new AdapterFactoryTreeEditor (treeViewer.getTree (), adapterFactory);
                createContextMenuFor (treeViewer);
                int pageIndex = addPage (viewerPane.getControl ());
                setPageText (pageIndex, getString ("_UI_TreePage_label"));
            } {
                ViewerPane viewerPane = new ViewerPane (getSite ().getPage (), GMFGraphEditor.this) {

                    public Viewer createViewer (Composite composite);
                    public void requestActivation ();
                }

                ;
                viewerPane.createControl (getContainer ());
                tableViewer = (TableViewer) viewerPane.getViewer ();
                Table table = tableViewer.getTable ();
                TableLayout layout = new TableLayout ();
                table.setLayout (layout);
                table.setHeaderVisible (true);
                table.setLinesVisible (true);
                TableColumn objectColumn = new TableColumn (table, SWT.NONE);
                layout.addColumnData (new ColumnWeightData (3, 100, true));
                objectColumn.setText (getString ("_UI_ObjectColumn_label"));
                objectColumn.setResizable (true);
                TableColumn selfColumn = new TableColumn (table, SWT.NONE);
                layout.addColumnData (new ColumnWeightData (2, 100, true));
                selfColumn.setText (getString ("_UI_SelfColumn_label"));
                selfColumn.setResizable (true);
                tableViewer.setColumnProperties (new String [] {"a", "b"});
                tableViewer.setContentProvider (new AdapterFactoryContentProvider (adapterFactory));
                tableViewer.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                createContextMenuFor (tableViewer);
                int pageIndex = addPage (viewerPane.getControl ());
                setPageText (pageIndex, getString ("_UI_TablePage_label"));
            } {
                ViewerPane viewerPane = new ViewerPane (getSite ().getPage (), GMFGraphEditor.this) {

                    public Viewer createViewer (Composite composite);
                    public void requestActivation ();
                }

                ;
                viewerPane.createControl (getContainer ());
                treeViewerWithColumns = (TreeViewer) viewerPane.getViewer ();
                Tree tree = treeViewerWithColumns.getTree ();
                tree.setLayoutData (new FillLayout ());
                tree.setHeaderVisible (true);
                tree.setLinesVisible (true);
                TreeColumn objectColumn = new TreeColumn (tree, SWT.NONE);
                objectColumn.setText (getString ("_UI_ObjectColumn_label"));
                objectColumn.setResizable (true);
                objectColumn.setWidth (250);
                TreeColumn selfColumn = new TreeColumn (tree, SWT.NONE);
                selfColumn.setText (getString ("_UI_SelfColumn_label"));
                selfColumn.setResizable (true);
                selfColumn.setWidth (200);
                treeViewerWithColumns.setColumnProperties (new String [] {"a", "b"});
                treeViewerWithColumns.setContentProvider (new AdapterFactoryContentProvider (adapterFactory));
                treeViewerWithColumns.setLabelProvider (new AdapterFactoryLabelProvider (adapterFactory));
                createContextMenuFor (treeViewerWithColumns);
                int pageIndex = addPage (viewerPane.getControl ());
                setPageText (pageIndex, getString ("_UI_TreeWithColumnsPage_label"));
            } getSite ().getShell ().getDisplay ().asyncExec (new Runnable () {

                public void run ();
            }

            );
        }
        getContainer ().addControlListener (new ControlAdapter () {

            public void controlResized (ControlEvent event);
        }

        );
        getSite ().getShell ().getDisplay ().asyncExec (new Runnable () {

            public void run ();
        }

        );
    }
    public void dispose ();
    public void doSave (IProgressMonitor progressMonitor);
    public void doSaveAs ();
    public void gotoMarker (IMarker marker);
    public void handleContentOutlineSelection (ISelection selection);
    public void init (IEditorSite site, IEditorInput editorInput);
    public void menuAboutToShow (IMenuManager menuManager);
    public void removeSelectionChangedListener (ISelectionChangedListener listener);
    public void setCurrentViewer (Viewer viewer);
    public void setCurrentViewerPane (ViewerPane viewerPane);
    public void setFocus ();
    public void setSelection (ISelection selection);
    public void setSelectionToViewer (Collection < ? > collection);
    public void setStatusLineManager (ISelection selection);
}

