package org.eclipse.gmf.runtime.common.ui.dialogs;

public class ShowRelatedElementsComposite extends Composite {
    private Button allConnected;
    private Button both;
    private Button consumerToSelection;
    private Button expandIndefinitely;
    private Button selectionToSupplier;
    private Composite expansionComposite;
    private ExpansionType cachedExpansionType = ExpansionType.INCOMING;
    private Image showRelatedElementsImage1;
    private Image showRelatedElementsImage2;
    private Image showRelatedElementsImage3;
    private List selectedSelectableElements;
    private SelectableElement rootElement;
    private Text levels;
    private TreeViewer viewer;
    private boolean cachedExpandIndefinitely;
    private boolean needsExpansionControls;

    private boolean select (List list, SelectableElement selectableElement);
    private boolean validateLevels (); private int cachedExpandLevels;
    final private static int DEFAULT_LEVELS = 1;

    private void disposeImages ();
    private void onDispose ();
    private void performValidateFailed (); protected Composite contributedExpansionGroupComposite = null;
    protected IShowRelatedElementsWithDetails detailsChangedListener;

    protected Object getImmediateCustomData (); protected boolean showAllConnected = false;

    protected int getImmediateExpansionLevels ();
    protected int getImmediateExpansionType (); protected int viewerWidth = - 1;

    protected void contributeToExpansionGroupComposite (Composite parent);
    protected void createContents ();
    protected void createExpansionControls () {
        this.expansionComposite = new Composite (this, SWT.NULL);
        GridData gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.horizontalSpan = 2;
        this.expansionComposite.setLayoutData (gridData);
        GridLayout gridLayout = new GridLayout (2, false);
        gridLayout.marginHeight = gridLayout.marginWidth = 0;
        this.expansionComposite.setLayout (gridLayout);
        Label label1 = new Label (this.expansionComposite, SWT.NULL);
        gridData = new GridData (GridData.VERTICAL_ALIGN_BEGINNING);
        label1.setLayoutData (gridData);
        label1.setText (CommonUIMessages.ShowRelatedElementsDialog_ExpansionGroup_Text);
        Composite expansionGroupComposite = new Composite (this.expansionComposite, SWT.NONE);
        gridData = new GridData (GridData.FILL_HORIZONTAL);
        expansionGroupComposite.setLayoutData (gridData);
        gridLayout = new GridLayout ();
        gridLayout.marginHeight = gridLayout.marginWidth = 0;
        expansionGroupComposite.setLayout (gridLayout);
        consumerToSelection = new Button (expansionGroupComposite, SWT.RADIO);
        consumerToSelection.setText (CommonUIMessages.ShowRelatedElementsDialog_Incoming);
        consumerToSelection.addSelectionListener (new SelectionListener () {

            public void widgetDefaultSelected (SelectionEvent e);
            public void widgetSelected (SelectionEvent e);
        }

        );
        selectionToSupplier = new Button (expansionGroupComposite, SWT.RADIO);
        selectionToSupplier.setText (CommonUIMessages.ShowRelatedElementsDialog_Outgoing);
        selectionToSupplier.addSelectionListener (new SelectionListener () {

            public void widgetDefaultSelected (SelectionEvent e);
            public void widgetSelected (SelectionEvent e);
        }

        );
        allConnected = new Button (expansionGroupComposite, SWT.RADIO);
        allConnected.setText (CommonUIMessages.ShowRelatedElementsDialog_AllConnected);
        allConnected.addSelectionListener (new SelectionListener () {

            public void widgetDefaultSelected (SelectionEvent e);
            public void widgetSelected (SelectionEvent e);
        }

        );
        gridData = new GridData ();
        gridData.exclude = ! showAllConnected;
        allConnected.setLayoutData (gridData);
        allConnected.setVisible (showAllConnected);
        both = new Button (expansionGroupComposite, SWT.RADIO);
        both.setText (CommonUIMessages.ShowRelatedElementsDialog_ExpansionGroup_RadioButton_Both);
        both.addSelectionListener (new SelectionListener () {

            public void widgetDefaultSelected (SelectionEvent e);
            public void widgetSelected (SelectionEvent e);
        }

        );
        contributeToExpansionGroupComposite (this.expansionComposite);
        Label label2 = new Label (this.expansionComposite, SWT.NULL);
        gridData = new GridData (GridData.VERTICAL_ALIGN_BEGINNING);
        label2.setLayoutData (gridData);
        label2.setText (CommonUIMessages.ShowRelatedElementsDialog_ExpansionGroup_Label_Levels);
        Composite levelsGroupComposite = new Composite (this.expansionComposite, SWT.NONE);
        gridData = new GridData (GridData.FILL_HORIZONTAL);
        levelsGroupComposite.setLayoutData (gridData);
        gridLayout = new GridLayout ();
        gridLayout.marginHeight = gridLayout.marginWidth = 0;
        levelsGroupComposite.setLayout (gridLayout);
        levels = new Text (levelsGroupComposite, SWT.BORDER);
        gridData = new GridData ();
        gridData.widthHint = 50;
        levels.setLayoutData (gridData);
        levels.addKeyListener (new KeyListener () {

            public void keyPressed (KeyEvent e);
            public void keyReleased (KeyEvent e);
        }

        );
        expandIndefinitely = new Button (levelsGroupComposite, SWT.CHECK);
        expandIndefinitely.setText (CommonUIMessages.ShowRelatedElementsDialog_ExpansionGroup_CheckBox_Expand_Indefinitely);
        expandIndefinitely.addSelectionListener (new SelectionListener () {

            public void widgetDefaultSelected (SelectionEvent e);
            public void widgetSelected (SelectionEvent e);
        }

        );
    }
    protected void createViewer ();
    protected void reset ();
    protected void setTreeViewer (TreeViewer aViewer);
    public ExpansionType getExpansionType ();
    public List getImmediateIds ();
    public List getSelectedRelationshipTypes ();
    public SelectableElement getRootElement ();
    public ShowRelatedElementsComposite (Composite parent, SelectableElement aRootElement, boolean createExpansion, int preferredViewerWidth) {
    }

    public ShowRelatedElementsComposite (Composite parent, SelectableElement aRootElement, int preferredViewerWidth) {
    }

    public ShowRelatedElementsPreset getCurrentSettings ();
    public String validate (boolean alert);
    public Text getLevels ();
    public TreeViewer getTreeViewer ();
    public boolean getAllConnected ();
    public boolean getConsumerToSelection ();
    public boolean getExpandIndefinitely ();
    public boolean getSelectionToSupplier ();
    public int getExpandLevel ();
    public int getViewerWidth ();
    public void ExpandIndefinitely (boolean enable);
    public void checkAndAskExpandIndefinitely ();
    public void detailsChanged ();
    public void enableDirectionControls (boolean enable);
    public void enableExpandLevels (boolean enable);
    public void initializeSettings (boolean cts, boolean sts, int expandLevel, List selectedHints);
    public void resetRootElement (SelectableElement newRootElement);
    public void saveCachedValues ();
    public void setAllConnected ();
    public void setBoth ();
    public void setConsumerToSelection ();
    public void setDetailsChangedListener (IShowRelatedElementsWithDetails newDetailsChangedListener);
    public void setExpand (int expandLevels);
    public void setSelectionToSupplier ();
    public void updateRelationships (ShowRelatedElementsPreset preset);
}

