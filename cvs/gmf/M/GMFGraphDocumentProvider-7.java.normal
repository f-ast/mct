package org.eclipse.gmf.graphdef.editor.part;

public class GMFGraphDocumentProvider extends AbstractDocumentProvider implements IDiagramDocumentProvider {

    private ISchedulingRule computeSchedulingRule (IResource toCreateOrModify); private class ResourceSetModificationListener extends EContentAdapter {

        public ResourceSetModificationListener (ResourceSetInfo info) {
        }

        public void notifyChanged (Notification notification);
    }

    private long computeModificationStamp (ResourceSetInfo info);
    private org.eclipse.emf.transaction.TransactionalEditingDomain createEditingDomain ();
    protected ElementInfo createElementInfo (Object element) throws CoreException, org.eclipse.core.runtime.CoreException;
    protected IDocument createDocument (Object element) throws CoreException;
    protected IDocument createEmptyDocument ();
    protected IRunnableContext getOperationRunner (IProgressMonitor monitor);
    protected ISchedulingRule getResetRule (Object element);
    protected ISchedulingRule getSaveRule (Object element);
    protected ISchedulingRule getSynchronizeRule (Object element);
    protected ISchedulingRule getValidateStateRule (Object element); protected class ResourceSetInfo extends ElementInfo {
        private Collection myUnSynchronizedResources = new ArrayList ();
        private IDiagramDocument myDocument;
        private IEditorInput myEditorInput;
        private ResourceSetModificationListener myResourceSetListener;
        private WorkspaceSynchronizer mySynchronizer;
        private boolean myModifiable = false;
        private boolean myReadOnly = true;
        private boolean myUpdateCache = true;
        private class SynchronizerDelegate implements WorkspaceSynchronizer.Delegate {

            public boolean handleResourceChanged (final Resource resource);
            public boolean handleResourceDeleted (Resource resource);
            public boolean handleResourceMoved (Resource resource, final org.eclipse.emf.common.util.URI newURI);
            public void dispose ();
        }

        private long myModificationStamp = IResource.NULL_STAMP;

        public IEditorInput getEditorInput ();
        public ResourceSet getResourceSet ();
        public ResourceSetInfo (IDiagramDocument document, IEditorInput editorInput) {
        }

        public boolean isModifiable ();
        public boolean isReadOnly ();
        public boolean isSynchronized ();
        public boolean isUpdateCache ();
        final public void startResourceListening ();
        final public void stopResourceListening ();
        public long getModificationStamp ();
        public void dispose ();
        public void setModifiable (boolean modifiable);
        public void setModificationStamp (long modificationStamp);
        public void setReadOnly (boolean readOnly);
        public void setSynchronized (Resource resource);
        public void setUnSynchronized (Resource resource);
        public void setUpdateCache (boolean update);
    }

    protected void disposeElementInfo (Object element, ElementInfo info);
    protected void doSaveDocument (IProgressMonitor monitor, Object element, IDocument document, boolean overwrite) throws CoreException;
    protected void doSynchronize (Object element, IProgressMonitor monitor) throws CoreException;
    protected void doUpdateStateCache (Object element) throws CoreException;
    protected void doValidateState (Object element, Object computationContext) throws CoreException, org.eclipse.core.runtime.CoreException;
    protected void handleElementChanged (ResourceSetInfo info, Resource changedResource, IProgressMonitor monitor);
    protected void handleElementMoved (IEditorInput input, org.eclipse.emf.common.util.URI uri);
    protected void setDocumentContent (IDocument document, IEditorInput element) throws CoreException;
    protected void setupDocument (Object element, IDocument document);
    protected void updateCache (Object element) throws CoreException;
    public IDiagramDocument getDiagramDocument (Object element);
    public IEditorInput createInputWithEditingDomain (IEditorInput editorInput, TransactionalEditingDomain domain);
    public ResourceSetInfo getResourceSetInfo (Object editorInput);
    public boolean isDeleted (Object element);
    public boolean isModifiable (Object element);
    public boolean isReadOnly (Object element);
    public boolean isSynchronized (Object element);
    public long getModificationStamp (Object element);
}

