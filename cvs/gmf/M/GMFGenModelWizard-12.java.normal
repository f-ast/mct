package org.eclipse.gmf.codegen.gmfgen.presentation;

public class GMFGenModelWizard extends Wizard implements INewWizard {

    protected Collection < String > getInitialObjectNames ();
    protected EObject createInitialModel (); protected GMFGenFactory gmfGenFactory = gmfGenPackage.getGMFGenFactory ();
    protected GMFGenModelWizardInitialObjectCreationPage initialObjectCreationPage;
    protected GMFGenModelWizardNewFileCreationPage newFileCreationPage;
    protected GMFGenPackage gmfGenPackage = GMFGenPackage.eINSTANCE;
    protected IStructuredSelection selection;
    protected IWorkbench workbench;
    protected List < String > initialObjectNames;

    public boolean performFinish (); public class GMFGenModelWizardInitialObjectCreationPage extends WizardPage {

        protected Collection < String > getEncodings (); protected Combo encodingField;
        protected Combo initialObjectField;
        protected List < String > encodings;
        protected ModifyListener validator = new ModifyListener () {

            public void modifyText (ModifyEvent e);
        }

        ;

        protected String getLabel (String typeName);
        protected boolean validatePage ();
        public GMFGenModelWizardInitialObjectCreationPage (String pageId) {
        }

        public String getEncoding ();
        public String getInitialObjectName ();
        public void createControl (Composite parent);
        public void setVisible (boolean visible);
    }

    public class GMFGenModelWizardNewFileCreationPage extends WizardNewFileCreationPage {

        protected boolean validatePage ();
        public GMFGenModelWizardNewFileCreationPage (String pageId, IStructuredSelection selection) {
        }

    }

    final public static List < String > FILE_EXTENSIONS = Collections.unmodifiableList (Arrays.asList (EditorPlugin.INSTANCE.getString ("_UI_GMFGenEditorFilenameExtensions").split ("\\s*,\\s*")));
    final public static String FORMATTED_FILE_EXTENSIONS = EditorPlugin.INSTANCE.getString ("_UI_GMFGenEditorFilenameExtensions").replaceAll ("\\s*,\\s*", ", ");

    public void addPages ();
    public void init (IWorkbench workbench, IStructuredSelection selection);
}

