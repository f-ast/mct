package org.eclipse.gmf.runtime.common.core.service;

abstract public class Service extends AbstractProvider implements IProvider, IProviderChangeListener {

    final List getProviders (ProviderPriority priority); final private ArrayList [] providers;
    final private Map [] cache;
    final private boolean optimistic;

    private static boolean safeProvides (IProvider provider, IOperation operation); final private static List ignoredProviders = new ArrayList ();
    final private static String A_NAME = "name";
    final private static String E_PRIORITY = "Priority";
    final private static int priorityCount;

    protected Map createPriorityCache ();
    protected Object getCachingKey (IOperation operation);
    protected ProviderDescriptor newProviderDescriptor (IConfigurationElement element);
    protected Service () {
    }

    protected Service (boolean optimized) {
    }

    protected Service (boolean optimized, boolean optimistic) {
    }

    final protected List execute (ExecutionStrategy strategy, IOperation operation);
    final protected List getAllProviders ();
    final protected List getProviders (ExecutionStrategy strategy, ProviderPriority priority, IOperation operation);
    final protected Object executeUnique (ExecutionStrategy strategy, IOperation operation);
    final protected boolean isOptimistic ();
    final protected boolean isOptimized ();
    final protected boolean provides (ExecutionStrategy strategy, IOperation operation);
    final protected void addProvider (ProviderPriority priority, ProviderDescriptor provider);
    final protected void clearCache ();
    final protected void removeProvider (ProviderDescriptor provider); final protected static String INVALID_ELEMENT_MESSAGE_PATTERN = "Invalid XML element ({0}).";

    public String getPriority (IConfigurationElement element);
    final public boolean provides (IOperation operation);
    final public void configureProviders (IConfigurationElement [] elements);
    final public void configureProviders (String namespace, String extensionPointName);
    final public void providerChanged (ProviderChangeEvent event); public static class ProviderDescriptor extends AbstractProvider implements IProvider, IProviderChangeListener {
        protected IProvider provider;

        protected IProviderPolicy getPolicy (); protected IProviderPolicy policy;

        protected ProviderDescriptor (IConfigurationElement element) {
        }

        protected boolean policyInitialized = false;

        final protected IConfigurationElement getElement (); final protected static String A_CLASS = "class";
        final protected static String A_PLUGIN = "plugin";
        final protected static String E_POLICY = "Policy";

        public IProvider getProvider ();
        public String toString ();
        public boolean provides (IOperation operation);
        public void providerChanged (ProviderChangeEvent event);
    }

    static List getIgnoredProviders ();
    static {
        List priorities = ProviderPriority.HIGHEST.getValues ();
        int maxOrdinal = 0;
        for (Iterator i = priorities.iterator ();
        i.hasNext ();) {
            int ordinal = ((ProviderPriority) i.next ()).getOrdinal ();
            if (maxOrdinal < ordinal) maxOrdinal = ordinal;

        }
        priorityCount = maxOrdinal + 1;
    }

}

