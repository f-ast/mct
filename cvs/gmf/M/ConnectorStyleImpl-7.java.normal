package org.eclipse.gmf.runtime.notation.impl;

public class ConnectorStyleImpl extends EObjectImpl implements ConnectorStyle {

    protected ConnectorStyleImpl () {
    }

    protected EClass eStaticClass (); protected JumpLinkStatus jumpLinkStatus = JUMP_LINK_STATUS_EDEFAULT;
    protected JumpLinkType jumpLinkType = JUMP_LINK_TYPE_EDEFAULT;
    protected Routing routing = ROUTING_EDEFAULT;
    protected Smoothness smoothness = SMOOTHNESS_EDEFAULT;
    protected int lineColor = LINE_COLOR_EDEFAULT;
    protected int lineWidth = LINE_WIDTH_EDEFAULT;
    final protected static JumpLinkStatus JUMP_LINK_STATUS_EDEFAULT = JumpLinkStatus.NONE_LITERAL;
    final protected static JumpLinkType JUMP_LINK_TYPE_EDEFAULT = JumpLinkType.SEMICIRCLE_LITERAL;
    final protected static Routing ROUTING_EDEFAULT = Routing.MANUAL_LITERAL;
    final protected static Smoothness SMOOTHNESS_EDEFAULT = Smoothness.NONE_LITERAL;
    final protected static boolean AVOID_OBSTRUCTIONS_EDEFAULT = false;
    final protected static boolean CLOSEST_DISTANCE_EDEFAULT = false;
    final protected static boolean JUMP_LINKS_REVERSE_EDEFAULT = false;
    final protected static int AVOID_OBSTRUCTIONS_EFLAG = 1 << 8;
    final protected static int CLOSEST_DISTANCE_EFLAG = 1 << 9;
    final protected static int JUMP_LINKS_REVERSE_EFLAG = 1 << 10;
    final protected static int LINE_COLOR_EDEFAULT = 11579568;
    final protected static int LINE_WIDTH_EDEFAULT = 1;

    public JumpLinkStatus getJumpLinkStatus ();
    public JumpLinkType getJumpLinkType ();
    public Object eGet (int featureID, boolean resolve, boolean coreType);
    public Routing getRouting ();
    public Smoothness getSmoothness ();
    public String toString ();
    public boolean eIsSet (int featureID);
    public boolean isAvoidObstructions ();
    public boolean isClosestDistance ();
    public boolean isJumpLinksReverse ();
    public int eBaseStructuralFeatureID (int derivedFeatureID, Class baseClass);
    public int eDerivedStructuralFeatureID (int baseFeatureID, Class baseClass);
    public int getLineColor ();
    public int getLineWidth ();
    public void eSet (int featureID, Object newValue);
    public void eUnset (int featureID);
    public void setAvoidObstructions (boolean newAvoidObstructions);
    public void setClosestDistance (boolean newClosestDistance);
    public void setJumpLinkStatus (JumpLinkStatus newJumpLinkStatus);
    public void setJumpLinkType (JumpLinkType newJumpLinkType);
    public void setJumpLinksReverse (boolean newJumpLinksReverse);
    public void setLineColor (int newLineColor);
    public void setLineWidth (int newLineWidth);
    public void setRouting (Routing newRouting);
    public void setSmoothness (Smoothness newSmoothness);
}

