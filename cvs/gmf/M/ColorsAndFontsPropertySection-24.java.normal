package org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance;

public class ColorsAndFontsPropertySection extends AbstractNotationPropertiesSection {
    private CCombo fontSizeCombo;
    private ToolBar toolBar;
    private ToolItem fontBoldButton;
    private ToolItem fontItalicButton;
    protected CCombo fontFamilyCombo;

    protected Composite createFontsGroup (Composite parent); protected Group colorsAndFontsGroup;

    protected Group createFontsAndColorsGroups (Composite parent);
    protected Iterator getInputIterator ();
    protected RGB changeColor (SelectionEvent event, Button button, String preferenceId, final String propertyId, String commandName, ImageDescriptor imageDescriptor);
    protected RGB changeColor (SelectionEvent event, Button button, final String propertyId, String commandName, ImageDescriptor imageDescriptor);
    protected RGB changeColor (SelectionEvent event, ToolItem toolItem, String preferenceId, final String propertyId, String commandName, ImageDescriptor imageDescriptor);
    protected RGB changeColor (SelectionEvent event, ToolItem toolItem, final String propertyId, String commandName, ImageDescriptor imageDescriptor) {
        ColorPalettePopup popup = new ColorPalettePopup (toolItem.getParent ().getShell (), IDialogConstants.BUTTON_BAR_HEIGHT);
        popup.setPreviousColor (previousColor);
        Rectangle r = toolItem.getBounds ();
        Point location = toolItem.getParent ().toDisplay (r.x, r.y);
        popup.open (new Point (location.x, location.y + r.height));
        if (popup.getSelectedColor () == null && ! popup.useDefaultColor ()) {
            return null;
        }
        final RGB selectedColor = popup.getSelectedColor ();
        final EStructuralFeature feature = (EStructuralFeature) PackageUtil.getElement (propertyId);
        List commands = new ArrayList ();
        Iterator it = getInputIterator ();
        RGB colorToReturn = selectedColor;
        RGB color = selectedColor;
        while (it.hasNext ()) {
            final IGraphicalEditPart ep = (IGraphicalEditPart) it.next ();
            color = selectedColor;
            if (popup.useDefaultColor ()) {
                Object preferredValue = ep.getPreferredValue (feature);
                if (preferredValue instanceof Integer) {
                    color = FigureUtilities.integerToRGB ((Integer) preferredValue);
                }
            }
            if (colorToReturn == null) {
                colorToReturn = color;
            }
            if (color != null) {
                final RGB finalColor = color;
                commands.add (createCommand (commandName, ((View) ep.getModel ()).eResource (), new Runnable () {

                    public void run ();
                }

                ));
            }
        }
        if (! commands.isEmpty ()) {
            executeAsCompositeCommand (commandName, commands);
            Image overlyedImage = new ColorOverlayImageDescriptor (imageDescriptor.getImageData (), color).createImage ();
            disposeImage (toolItem.getImage ());
            toolItem.setImage (overlyedImage);
        }
        return colorToReturn;
    } protected RGB fillColor = null;
    protected RGB fontColor;
    protected RGB lineColor;
    protected ToolItem fillColorButton;
    protected ToolItem fontColorButton;
    protected ToolItem lineColorButton;

    protected boolean digIntoGroups (); protected int previousColor;
    protected static class ColorOverlayImageDescriptor extends CompositeImageDescriptor {

        protected Point getSize ();
        protected void drawCompositeImage (int width, int height);
        public ColorOverlayImageDescriptor (ImageData basicImgData, RGB rgb) {
        }

    }

    final protected static RGB DEFAULT_PREF_COLOR = new RGB (0, 0, 0);
    final protected static String FONTS_AND_COLORS_LABEL = DiagramUIPropertiesMessages.FontAndColor_nameLabel;
    final protected static String FONT_COLOR_COMMAND_NAME = DiagramUIPropertiesMessages.FontColor_commandText + StringStatics.SPACE + VALUE_CHANGED_STRING;
    final protected static String FONT_COMMAND_NAME = DiagramUIPropertiesMessages.Font_commandText + StringStatics.SPACE + VALUE_CHANGED_STRING;
    final protected static String LINE_COLOR_COMMAND_NAME = DiagramUIPropertiesMessages.LineColor_commandText + StringStatics.SPACE + VALUE_CHANGED_STRING;

    protected void changeFontColor (SelectionEvent event);
    protected void changeLineColor (SelectionEvent event);
    protected void disposeImage (Image image);
    protected void initializeControls (Composite parent);
    protected void updateColorCache ();
    protected void updateFontBold ();
    protected void updateFontFamily ();
    protected void updateFontItalic ();
    protected void updateFontSize ();
    public void dispose ();
    public void refresh ();
    public void setInput (IWorkbenchPart part, ISelection selection);
    public void update (final Notification notification, final EObject element); final protected static String FILL_COLOR_COMMAND_NAME = DiagramUIPropertiesMessages.FillColor_commandText + StringStatics.SPACE + VALUE_CHANGED_STRING;

}

