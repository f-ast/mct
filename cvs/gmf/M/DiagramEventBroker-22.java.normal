package org.eclipse.gmf.runtime.diagram.core.listener;

public class DiagramEventBroker extends ResourceSetListenerImpl {

    final protected Set getInterestedNotificationListeners (Notification event, NotifierToKeyToListenersSetMap listeners);
    private Command fireTransactionAboutToCommit (Notification event);
    private Set getNotificationListeners (Object notifier, NotifierToKeyToListenersSetMap listeners);
    private Set getNotificationListeners (Object notifier, Object key, NotifierToKeyToListenersSetMap listeners);
    private View getViewToPersist (Notification event, Set elementsInPersistQueue); private WeakReference editingDomainRef;

    private boolean isDeleted (Set deletedObjects, EObject notifier); final private NotifierToKeyToListenersSetMap postListeners = new NotifierToKeyToListenersSetMap ();
    final private NotifierToKeyToListenersSetMap preListeners = new NotifierToKeyToListenersSetMap ();
    final private class NotifierToKeyToListenersSetMap {

        public Set getAllListeners (Object notifier);
        public Set getListeners (Object notifier, Object key);
        public boolean isEmpty ();
        public void addListener (EObject notifier, Object key, Object listener);
        public void addListener (EObject notifier, Object listener);
        public void removeListener (EObject notifier, Object key, Object listener);
    }

    private static DiagramEventBroker initializeDiagramEventBroker (TransactionalEditingDomain editingDomain); private static DiagramEventBrokerFactory debFactory = new DiagramEventBrokerFactoryImpl ();
    private static String LISTEN_TO_ALL_FEATURES = "*";
    private static class DiagramEventBrokerFactoryImpl implements DiagramEventBrokerFactory {

        public DiagramEventBroker createDiagramEventBroker (TransactionalEditingDomain editingDomain);
    }

    final private static Map instanceMap = new WeakHashMap ();

    private void addDeletedBranch (Set deletedObjects, EObject notifier);
    private void addListenersOfNotifier (Set listenerSet, EObject notifier, Notification event, NotifierToKeyToListenersSetMap listeners);
    private void fireNotification (Notification event);
    protected DiagramEventBroker () {
    }

    protected boolean shouldIgnoreNotification (Notification notification);
    public Command transactionAboutToCommit (ResourceSetChangeEvent event);
    public boolean isAggregatePrecommitListener ();
    final public void addNotificationListener (EObject target, EStructuralFeature key, NotificationListener listener);
    final public void addNotificationListener (EObject target, EStructuralFeature key, NotificationPreCommitListener listener);
    final public void addNotificationListener (EObject target, NotificationListener listener);
    final public void addNotificationListener (EObject target, NotificationPreCommitListener listener);
    final public void removeNotificationListener (EObject target, NotificationListener listener);
    final public void removeNotificationListener (EObject target, NotificationPreCommitListener listener);
    final public void removeNotificationListener (EObject target, Object key, NotificationListener listener);
    final public void removeNotificationListener (EObject target, Object key, NotificationPreCommitListener listener);
    public static DiagramEventBroker getInstance (TransactionalEditingDomain editingDomain); public static interface DiagramEventBrokerFactory {

        public DiagramEventBroker createDiagramEventBroker (TransactionalEditingDomain editingDomain);
    }

    public static void registerDiagramEventBrokerFactory (DiagramEventBrokerFactory newDebFactory);
    public static void startListening (TransactionalEditingDomain editingDomain);
    public static void stopListening (TransactionalEditingDomain editingDomain);
    public void resourceSetChanged (ResourceSetChangeEvent event);
}

