package org.eclipse.gmf.runtime.emf.ui.preferences;

public class PathmapsPreferencePage extends PreferencePage implements IWorkbenchPreferencePage {
    private Button add;
    private Button remove;
    private IPathVariableChangeListener pathVariableChangeListener;
    private ScrolledComposite pathVariablesScroll;
    private ScrolledComposite referencedPathVariablesScroll;

    private String getValue (String pathVariable, boolean includeRegistered); private StringsContentProvider pathVariablesContent;
    private StringsContentProvider referencedPathVariablesContent;
    private TableViewer pathVariables;
    private TableViewer referencedPathVariables;
    private boolean disposed = true;

    private boolean validateAdditions (IStructuredSelection selection, boolean showError);
    private boolean validateRemovals (IStructuredSelection selection, boolean showError); private static class StringsContentProvider implements IStructuredContentProvider {

        public Object [] getElements (Object inputElement);
        public void dispose ();
        public void inputChanged (Viewer viewer, Object oldInput, Object newInput);
    }

    private static class StringsLabelProvider implements IColorProvider, ITableLabelProvider {

        public Color getBackground (Object element);
        public Color getForeground (Object element);
        public Image getColumnImage (Object element, int columnIndex);
        public String getColumnText (Object element, int columnIndex);
        public boolean isLabelProperty (Object element, String property);
        public void addListener (ILabelProviderListener listener);
        public void dispose ();
        public void removeListener (ILabelProviderListener listener);
    }

    private static class StringsViewerComparator extends ViewerComparator {

        public int category (Object element);
    }

    private void adjustScrollpanes ();
    private void initializeContents ();
    protected Control createContents (Composite parent) {
        GridData gridData = null;
        Composite composite = new Composite (parent, SWT.NONE);
        composite.setFont (parent.getFont ());
        composite.setLayout (new GridLayout (3, false));
        gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.horizontalSpan = 2;
        composite.setLayoutData (gridData);
        PreferenceLinkArea pathVariablesArea = new PreferenceLinkArea (composite, SWT.NONE, "org.eclipse.ui.preferencePages.LinkedResources", EMFUIMessages.PathmapsPreferencePage_mainDescription, (IWorkbenchPreferenceContainer) getContainer (), null);
        gridData = new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.grabExcessVerticalSpace = false;
        gridData.horizontalSpan = 3;
        pathVariablesArea.getControl ().setLayoutData (gridData);
        Composite pathVariablesComposite = new Composite (composite, SWT.NONE);
        pathVariablesComposite.setLayout (new GridLayout (1, false));
        gridData = new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.grabExcessVerticalSpace = true;
        gridData.horizontalSpan = 1;
        pathVariablesComposite.setLayoutData (gridData);
        Label pathVariablesLabel = new Label (pathVariablesComposite, SWT.LEFT);
        gridData = new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.grabExcessVerticalSpace = false;
        gridData.horizontalSpan = 2;
        gridData.verticalIndent = 20;
        pathVariablesLabel.setLayoutData (gridData);
        pathVariablesLabel.setText (EMFUIMessages.PathmapsPreferencePage_availablePathVariables);
        pathVariablesScroll = new ScrolledComposite (pathVariablesComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
        pathVariablesScroll.setExpandHorizontal (true);
        pathVariablesScroll.setExpandVertical (true);
        gridData = new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.grabExcessVerticalSpace = true;
        gridData.horizontalSpan = 1;
        pathVariablesScroll.setLayoutData (gridData);
        pathVariables = new TableViewer (pathVariablesScroll, SWT.MULTI);
        pathVariablesScroll.setContent (pathVariables.getTable ());
        TableColumn column = new TableColumn (pathVariables.getTable (), SWT.LEFT);
        column.setMoveable (false);
        column.setResizable (false);
        pathVariables.getTable ().addControlListener (new ControlAdapter () {

            public void controlResized (ControlEvent e);
        }

        );
        pathVariablesContent = new StringsContentProvider ();
        pathVariables.setContentProvider (pathVariablesContent);
        pathVariables.setLabelProvider (new StringsLabelProvider ());
        pathVariables.setComparator (new StringsViewerComparator ());
        Composite buttonComposite = new Composite (composite, SWT.NONE);
        buttonComposite.setLayout (new GridLayout (1, false));
        add = new Button (buttonComposite, SWT.CENTER);
        add.setText (EMFUIMessages.PathmapsPreferencePage_addChevron);
        gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.grabExcessVerticalSpace = false;
        gridData.horizontalSpan = 1;
        add.setLayoutData (gridData);
        Button addAll = new Button (buttonComposite, SWT.CENTER);
        addAll.setText (EMFUIMessages.PathmapsPreferencePage_addAllChevron);
        gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.grabExcessVerticalSpace = false;
        addAll.setLayoutData (gridData);
        remove = new Button (buttonComposite, SWT.CENTER);
        remove.setText (EMFUIMessages.PathmapsPreferencePage_removeChevron);
        gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.grabExcessVerticalSpace = false;
        gridData.horizontalSpan = 1;
        gridData.verticalIndent = 10;
        remove.setLayoutData (gridData);
        Button removeAll = new Button (buttonComposite, SWT.CENTER);
        removeAll.setText (EMFUIMessages.PathmapsPreferencePage_removeAllChevron);
        gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.grabExcessVerticalSpace = false;
        gridData.horizontalSpan = 1;
        removeAll.setLayoutData (gridData);
        gridData = new GridData (GridData.FILL_HORIZONTAL);
        gridData.grabExcessHorizontalSpace = false;
        gridData.grabExcessVerticalSpace = false;
        gridData.horizontalSpan = 1;
        buttonComposite.setLayoutData (gridData);
        Composite referencedPathVariablesComposite = new Composite (composite, SWT.NONE);
        referencedPathVariablesComposite.setLayout (new GridLayout (1, false));
        gridData = new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.grabExcessVerticalSpace = true;
        gridData.horizontalSpan = 1;
        referencedPathVariablesComposite.setLayoutData (gridData);
        Label referencedPathVariablesLabel = new Label (referencedPathVariablesComposite, SWT.LEFT);
        gridData = new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.grabExcessVerticalSpace = false;
        gridData.horizontalSpan = 1;
        gridData.verticalIndent = 20;
        referencedPathVariablesLabel.setLayoutData (gridData);
        referencedPathVariablesLabel.setText (EMFUIMessages.PathmapsPreferencePage_pathVariablesUsedInModeling);
        referencedPathVariablesScroll = new ScrolledComposite (referencedPathVariablesComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
        referencedPathVariablesScroll.setExpandHorizontal (true);
        referencedPathVariablesScroll.setExpandVertical (true);
        gridData = new GridData (GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
        gridData.grabExcessHorizontalSpace = true;
        gridData.grabExcessVerticalSpace = true;
        gridData.horizontalSpan = 1;
        referencedPathVariablesScroll.setLayoutData (gridData);
        referencedPathVariables = new TableViewer (referencedPathVariablesScroll, SWT.MULTI);
        referencedPathVariablesScroll.setContent (referencedPathVariables.getTable ());
        column = new TableColumn (referencedPathVariables.getTable (), SWT.LEFT);
        column.setMoveable (false);
        column.setResizable (false);
        referencedPathVariables.getTable ().addControlListener (new ControlAdapter () {

            public void controlResized (ControlEvent e);
        }

        );
        referencedPathVariablesContent = new StringsContentProvider ();
        referencedPathVariables.setContentProvider (referencedPathVariablesContent);
        referencedPathVariables.setLabelProvider (new StringsLabelProvider (true));
        referencedPathVariables.setComparator (new StringsViewerComparator ());
        composite.addControlListener (new ControlAdapter () {

            public void controlResized (ControlEvent e);
        }

        );
        pathVariables.getTable ().addMouseTrackListener (new MouseTrackAdapter () {

            public void mouseHover (MouseEvent e);
        }

        );
        pathVariables.addSelectionChangedListener (new ISelectionChangedListener () {

            public void selectionChanged (SelectionChangedEvent event);
        }

        );
        referencedPathVariables.getTable ().addMouseTrackListener (new MouseTrackAdapter () {

            public void mouseHover (MouseEvent e);
        }

        );
        referencedPathVariables.addSelectionChangedListener (new ISelectionChangedListener () {

            public void selectionChanged (SelectionChangedEvent event);
        }

        );
        add.addSelectionListener (new SelectionListener () {

            public void widgetDefaultSelected (SelectionEvent e);
            public void widgetSelected (SelectionEvent e);
        }

        );
        addAll.addSelectionListener (new SelectionListener () {

            public void widgetDefaultSelected (SelectionEvent e);
            public void widgetSelected (SelectionEvent e);
        }

        );
        remove.addSelectionListener (new SelectionListener () {

            public void widgetDefaultSelected (SelectionEvent e);
            public void widgetSelected (SelectionEvent e);
        }

        );
        removeAll.addSelectionListener (new SelectionListener () {

            public void widgetDefaultSelected (SelectionEvent e);
            public void widgetSelected (SelectionEvent e);
        }

        );
        initializeContents ();
        pathVariableChangeListener = new IPathVariableChangeListener () {

            public void pathVariableChanged (IPathVariableChangeEvent event);
        }

        ;
        ResourcesPlugin.getWorkspace ().getPathVariableManager ().addChangeListener (pathVariableChangeListener);
        disposed = false;
        applyDialogFont (composite);
        return composite;
    }
    protected void initHelp ();
    protected void performDefaults ();
    public boolean performOk ();
    public void dispose ();
    public void init (IWorkbench workbench);
}

