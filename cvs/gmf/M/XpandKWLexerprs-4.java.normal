package org.eclipse.gmf.internal.xpand.parser;

public class XpandKWLexerprs implements XpandKWLexersym, lpg.lpgjavaruntime.ParseTable {

    final public String name (int index);
    final public boolean getBacktrack ();
    final public boolean isKeyword (int index);
    final public boolean isValidForParser ();
    final public int asb (int index);
    final public int asi (int state);
    final public int asr (int index);
    final public int baseAction (int index);
    final public int baseCheck (int index);
    final public int getAcceptAction ();
    final public int getEoftSymbol ();
    final public int getEoltSymbol ();
    final public int getErrorAction ();
    final public int getErrorSymbol ();
    final public int getIdentifierSymbol ();
    final public int getLaStateOffset ();
    final public int getMaxLa ();
    final public int getMaxNameLength ();
    final public int getNtOffset ();
    final public int getNumNonterminals ();
    final public int getNumRules ();
    final public int getNumStates ();
    final public int getNumSymbols ();
    final public int getScopeSize ();
    final public int getScopeUbound ();
    final public int getSegmentSize ();
    final public int getStartState ();
    final public int getStartSymbol ();
    final public int inSymb (int index);
    final public int inSymbol (int state);
    final public int lhs (int index);
    final public int lookAhead (int la_state, int sym);
    final public int nasb (int index);
    final public int nasi (int state);
    final public int nasr (int index);
    final public int nonterminalIndex (int index);
    final public int ntAction (int state, int sym);
    final public int originalState (int state);
    final public int rhs (int index);
    final public int scopeLa (int index);
    final public int scopeLhs (int index);
    final public int scopePrefix (int index);
    final public int scopeRhs (int index);
    final public int scopeState (int index);
    final public int scopeStateSet (int index);
    final public int scopeSuffix (int index);
    final public int tAction (int state, int sym);
    final public int termAction (int index);
    final public int termCheck (int index);
    final public int terminalIndex (int index); final public static boolean BACKTRACK = false;
    final public static byte baseCheck [] = BaseCheck.baseCheck;
    final public static byte isKeyword [] = IsKeyword.isKeyword;
    final public static byte rhs [] = baseCheck;
    final public static byte termCheck [] = TermCheck.termCheck;
    final public static char baseAction [] = BaseAction.baseAction;
    final public static char lhs [] = baseAction;
    final public static char termAction [] = TermAction.termAction;
    final public static int ACCEPT_ACTION = 238, EOFT_SYMBOL = 39, EOLT_SYMBOL = 54, ERROR_ACTION = 239, IDENTIFIER_SYMBOL = 0, LA_STATE_OFFSET = 286, MAX_LA = 1, NT_OFFSET = 53, NUM_NONTERMINALS = 2, NUM_RULES = 47, NUM_STATES = 188, NUM_SYMBOLS = 55, SEGMENT_SIZE = 8192, START_STATE = 48;
    public interface BaseAction {
        final public static char baseAction [] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 50, 63, 4, 50, 61, 37, 35, 42, 83, 78, 27, 55, 66, 82, 87, 12, 72, 88, 59, 29, 47, 92, 91, 19, 93, 96, 97, 94, 98, 103, 75, 112, 104, 107, 114, 118, 117, 121, 120, 122, 119, 127, 130, 133, 134, 135, 137, 136, 142, 143, 145, 146, 148, 153, 151, 155, 154, 161, 163, 166, 167, 152, 168, 175, 24, 174, 179, 184, 185, 186, 189, 190, 192, 191, 196, 197, 203, 194, 205, 206, 210, 211, 213, 214, 217, 222, 225, 227, 228, 230, 200, 221, 233, 235, 238, 239, 246, 234, 76, 250, 240, 248, 252, 253, 254, 255, 256, 262, 264, 267, 258, 269, 271, 274, 275, 276, 277, 278, 281, 282, 283, 286, 284, 293, 289, 290, 170, 291, 296, 295, 306, 300, 297, 311, 315, 318, 307, 319, 320, 322, 324, 327, 328, 330, 332, 334, 337, 336, 340, 342, 343, 345, 347, 352, 349, 354, 355, 358, 356, 357, 360, 362, 368, 370, 372, 375, 378, 377, 379, 383, 386, 380,
          387, 396, 392, 382, 393, 399, 402, 404, 403, 405, 406, 407, 411, 409, 410, 413, 239, 239};

    };

    public interface BaseCheck {
        final public static byte baseCheck [] = {0, 4, 4, 5, 3, 3, 6, 4, 7, 7, 3, 4, 10, 6, 6, 9, 7, 6, 6, 10, 6, 9, 6, 9, 6, 9, 5, 6, 3, 9, 2, 8, 7, 10, 4, 7, 2, 6, 4, 5, 3, 6, 7, 6, 4, 2, 7, 10};

    };

    public interface IsKeyword {
        final public static byte isKeyword [] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    };

    public interface TermAction {
        final public static char termAction [] = {0, 239, 55, 58, 239, 66, 68, 70, 54, 239, 65, 56, 239, 53, 64, 62, 52, 61, 60, 239, 59, 51, 107, 57, 239, 67, 69, 239, 84, 239, 93, 149, 63, 94, 146, 239, 148, 239, 77, 147, 75, 145, 239, 85, 144, 86, 78, 239, 80, 103, 239, 101, 76, 269, 284, 239, 87, 275, 72, 239, 71, 239, 74, 239, 100, 102, 239, 89, 90, 88, 104, 73, 239, 79, 95, 239, 239, 98, 239, 81, 99, 115, 239, 239, 177, 82, 176, 239, 239, 92, 97, 239, 239, 239, 239, 114, 239, 239, 239, 96, 105, 112, 238, 239, 239, 110, 83, 239, 106, 108, 111, 109, 239, 116, 239, 113, 91, 239, 239, 239, 239, 239, 239, 121, 117, 122, 279, 239, 119, 120, 239, 123, 249, 239, 239, 239, 239, 239, 127, 124, 118, 129, 239, 239, 128, 239, 239, 244, 239, 132, 130, 239, 239, 239, 239, 239, 125, 126, 135, 136, 137, 239, 273, 28, 138, 131, 239, 239, 239, 142, 239, 134, 133, 139, 239, 239, 280, 140, 243, 239, 151, 150, 141, 143, 239, 239, 239, 152, 154, 239, 239, 239, 239, 153, 239, 157, 239, 239, 155, 156, 239, 250, 283, 239, 158,
          239, 239, 159, 246, 161, 239, 239, 162, 239, 239, 160, 163, 239, 239, 166, 164, 239, 239, 165, 241, 239, 167, 239, 239, 168, 239, 240, 171, 239, 239, 38, 170, 169, 239, 239, 239, 265, 174, 179, 172, 173, 239, 175, 239, 278, 239, 178, 239, 239, 239, 239, 239, 183, 239, 180, 182, 185, 239, 181, 239, 186, 187, 239, 184, 239, 188, 239, 189, 191, 239, 239, 239, 239, 239, 242, 194, 239, 239, 239, 239, 263, 239, 192, 193, 239, 239, 239, 190, 239, 195, 239, 239, 239, 200, 202, 239, 197, 198, 199, 276, 261, 239, 239, 201, 196, 203, 239, 266, 205, 204, 239, 253, 206, 239, 239, 239, 259, 239, 257, 239, 282, 209, 239, 239, 208, 239, 210, 239, 207, 239, 256, 239, 239, 252, 212, 239, 211, 239, 239, 285, 239, 281, 239, 274, 239, 213, 214, 239, 215, 239, 239, 239, 239, 239, 216, 239, 220, 239, 221, 245, 218, 219, 247, 239, 248, 239, 271, 239, 255, 222, 239, 224, 239, 239, 239, 239, 223, 239, 239, 217, 225, 239, 239, 226, 270, 227, 228, 239, 239, 229, 230, 239, 232, 231, 239, 264, 233, 239, 239, 239, 239, 239, 239,
          268, 239, 239, 239, 234, 239, 262, 260, 254, 286, 258, 236, 239, 235, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 251, 239, 239, 272};

    };

    public interface TermCheck {
        final public static byte termCheck [] = {0, 0, 1, 2, 0, 4, 5, 3, 7, 0, 9, 10, 0, 12, 13, 14, 15, 16, 17, 0, 19, 20, 3, 22, 0, 24, 25, 0, 1, 0, 18, 7, 31, 21, 10, 0, 12, 0, 3, 15, 3, 17, 0, 16, 20, 18, 11, 0, 6, 2, 0, 22, 17, 16, 12, 0, 1, 15, 8, 0, 10, 0, 1, 0, 35, 18, 0, 1, 2, 14, 23, 10, 0, 38, 2, 0, 0, 18, 0, 37, 21, 6, 0, 0, 8, 2, 10, 0, 0, 2, 2, 0, 0, 0, 0, 20, 0, 0, 0, 27, 8, 3, 39, 0, 0, 8, 28, 0, 17, 16, 16, 15, 0, 1, 0, 12, 34, 0, 0, 0, 0, 0, 0, 6, 20, 4, 6, 0, 14, 11, 0, 9, 5, 0, 0, 0, 0, 0, 4, 20, 33, 4, 0, 0, 9, 0, 0, 5, 0, 4, 14, 0, 0, 0, 0, 0, 26, 24, 5, 4, 6, 0, 1, 0, 1, 22, 0, 0, 0, 1, 0, 23, 26, 7, 0, 0, 6, 10, 27, 0, 1, 7, 30, 8, 0, 0, 0, 3, 2, 0, 0, 0, 0, 8, 0, 4, 0, 0, 9, 7, 0, 5, 12, 0, 7, 0, 0, 4, 2, 4, 0, 0, 2, 0, 0, 21, 5, 0, 0, 2, 7, 0, 0, 9, 2, 0, 1, 0, 0, 1, 0, 4, 11, 0, 0, 0, 36, 7, 0, 0, 0, 3, 3, 3, 11, 10, 0, 1, 0, 15, 0, 1, 0, 0, 0, 0, 0, 3, 0, 11, 7, 5, 0, 11, 0, 3, 2, 0, 13, 0, 3, 0, 14, 2, 0, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 1, 0, 13, 13, 0, 0, 0, 23, 0, 16, 0, 0, 0, 8,
          3, 0, 19, 19, 17, 15, 12, 0, 0, 17, 28, 15, 0, 12, 16, 8, 0, 9, 6, 0, 0, 0, 6, 0, 5, 0, 6, 2, 0, 0, 7, 0, 4, 0, 13, 0, 5, 0, 0, 4, 2, 0, 13, 0, 0, 1, 0, 6, 0, 1, 0, 14, 6, 0, 1, 0, 0, 0, 0, 0, 10, 0, 5, 0, 6, 32, 10, 8, 5, 0, 9, 0, 29, 0, 5, 4, 0, 1, 0, 0, 0, 0, 9, 0, 0, 30, 7, 0, 0, 11, 3, 11, 8, 0, 0, 14, 8, 0, 5, 2, 0, 1, 19, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 19, 0, 12, 11, 9, 6, 5, 13, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    };

}

