package org.eclipse.gmf.runtime.emf.core.internal.resources;

public class PathmapManager extends AdapterImpl implements IPathmapManager, IPathmapManager2 {

    private Map getURIMap ();
    private ResourceSet getResourceSet ();
    private static IEclipsePreferences getPreferenceStore (); private static IEclipsePreferences preferenceStore = null;

    private static Map configure ();
    private static Set allInstances (); private static Set referencedPathVariablesList;

    private static URI makeURI (String var);
    private static boolean isDirectory (IPath value); final private static Map PATH_MAP = Collections.synchronizedMap (configure ());
    final private static Map instances = Collections.synchronizedMap (new WeakHashMap ());
    final private static Set FILE_VARIABLES = Collections.synchronizedSet (new HashSet ());
    final private static String NAME = "name";
    final private static String NODE_QUALIFIER = EMFCorePlugin.getDefault ().getBundle ().getSymbolicName ();
    final private static String PATH = "path";
    final private static String PLUGIN = "plugin";
    final private static String PREFERENCE_KEY = "referenced.path.variables";

    private static void internalSetPathVariable (String var, String val);
    private void addEntry (String var, String val);
    private void denormalize (Resource resource, URIConverter converter);
    private void denormalizeAll ();
    private void normalize (Resource resource, URIConverter converter);
    private void normalizeAll ();
    private void resyncEntries (boolean resync, boolean dirtyResources);
    public IStatus addFilePathVariable (String name, String value, boolean dirtyResources);
    public IStatus addFilePathVariables (Map settings, boolean dirtyResources);
    public IStatus addFolderPathVariable (String name, String value, boolean dirtyResources);
    public IStatus addFolderPathVariables (Map settings, boolean dirtyResources);
    public IStatus addPathVariable (String name, String value);
    public IStatus removePathVariable (String name);
    public PathmapManager () {
    }

    public String getPathVariable (String var);
    public static PathmapManager getExistingPathmapManager (ResourceSet rset);
    public static Set getAllPathVariables ();
    public static Set getPathVariableReferences ();
    public static String getRegisteredValue (String variable);
    public static URI denormalizeURI (URI uri);
    public static boolean isCompatiblePathVariable (String variable);
    public static boolean isRegisteredPathVariable (String variable);
    public static void addPathVariableReference (String pathVariable);
    public static void removePathVariableReference (String pathVariable);
    public static void setFilePathVariable (String var, String val, boolean dirtyResources);
    public static void setFilePathVariables (Map settings, boolean dirtyResources);
    public static void setPathVariable (String var, String val);
    public static void setPathVariable (String var, String val, boolean dirtyResources);
    public static void setPathVariables (Map settings, boolean dirtyResources);
    public static void unsetPathVariable (String var);
    public static void updatePreferenceStore ();
    public void notifyChanged (Notification msg);
    public void setTarget (Notifier newTarget);
    static {
        IPathVariableManager pathManager = ResourcesPlugin.getWorkspace ().getPathVariableManager ();
        IEclipsePreferences preferences = getPreferenceStore ();
        String referencedPathVariables = preferences.get (PREFERENCE_KEY, "");
        StringTokenizer tokenizer = new StringTokenizer (referencedPathVariables, " ");
        referencedPathVariablesList = new HashSet (tokenizer.countTokens ());
        for (; tokenizer.hasMoreTokens ();) {
            String pathVariable = tokenizer.nextToken ();
            addPathVariableReference (pathVariable);
        }
        updatePreferenceStore ();
        pathManager.addChangeListener (new IPathVariableChangeListener () {

            public void pathVariableChanged (IPathVariableChangeEvent event);
        }

        );
    }

}

