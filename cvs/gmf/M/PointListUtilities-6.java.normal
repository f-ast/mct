package org.eclipse.gmf.runtime.draw2d.ui.geometry;

public class PointListUtilities {
    final static int INTERSECT_TOLERANCE = 1;
    final static int MAX_BEZIERLINES = 32;
    final static int MIN_LINE_LENGTH = 5;
    final private static int BIGDISTANCE = 32766;

    private static boolean BezierToLines (PointList thePolyPoints, Point ptCtl1, Point ptCtl2, Point ptCtl3, Point ptCtl4, int nSteps);
    private static boolean locateSegment (List mySegments, final double pctDist, final LineSeg.KeyPoint fromKeyPoint, LocateInfo locateInfo);
    protected static Point pointOn (List mySegments, final long theDistance, final LineSeg.KeyPoint fromKeyPoint, Point ptResult);
    protected static double distanceAlong (List mySegments, final Point aPoint);
    protected static double segmentDistance (List mySegments, LineSeg theSegment, final LineSeg.KeyPoint uptoKeyPoint);
    protected static long length (List mySegments); final public static int DEFAULT_BEZIERLINES = 16;

    public static LineSeg getNearestSegment (List mySegments, final int xCoord, final int yCoord);
    public static List getLineSegments (PointList points);
    public static Point calculatePointRelativeToLine (PointList pointList, int fromLine, int fromEnd, boolean isPercentage);
    public static Point pickClosestPoint (PointList points, Point p);
    public static Point pickFarestPoint (PointList points, Point p);
    public static boolean containsPoint (PointList points, Point point);
    public static long getPointsLength (PointList points);
    static boolean flattenSegments (PointList points, int straightLineTolerance);
    static boolean sameOrientation (Point pt1, Point pt2, Point pt3, int straightLineTolerance);
    private static Point removePoint (PointList points, int index);
    private static PointList calcApproxPolylineFromBezier (final PointList points, int nBezierSteps);
    private static PointList calcBezier (final PointList points, int nSmoothFactor, int nStartIndex, int nEndIndex); private static class LocateInfo {
        public LineSeg theSegment;
        public long remainingDist;

    }

    private static int addRoutedPoints (PointList routePoints, LineSeg pCurBoxSeg1, LineSeg pCurBoxSeg2, final PointList routePoly, final boolean bForward, final int nBuffer);
    private static int crossProduct (int ax, int ay, int bx, int by, int cx, int cy);
    private static void copyFrom (PointList pointsTo, PointList pointsFrom);
    private static void getRoutedPoints (PointList points, PointList newRoutePoints, final Point ptIntersect1, final Point ptIntersect2, final Point ptPrev, final Point ptNext, LineSeg pCurBoxSeg1, LineSeg pCurBoxSeg2, final PointList routePoly, int nSmoothFactor, boolean bShortestDistance, final boolean bIncludeIntersectionPoints, final int nBuffer);
    private static void reAdjustBoxSize (List boxSegs, Point containedPoint);
    public static Point getPointsInfimum (PointList points);
    public static Point getPointsSupremum (PointList points);
    public static Point pointOn (PointList points, final long theDistance, final LineSeg.KeyPoint fromKeyPoint, Point ptResult);
    public static PointList calcSmoothPolyline (PointList points, int nSmoothFactor, int nBezierSteps, int nStartIndex, int nEndIndex);
    public static PointList copyPoints (PointList pointsFrom);
    public static PointList createPointsFromRect (Rectangle rBox);
    public static PointList routeAroundPoint (PointList points, final Point ptCenter, int nHeight, int nWidth, int nSmoothFactor, int nInclineOffset, boolean bTop);
    public static PointList routeAroundPoly (PointList points, final PointList poly, int nSmoothFactor, boolean bShortestDistance, final boolean bIncludeIntersectionPoints, final int nBuffer);
    public static PointList routeAroundRect (PointList points, final Rectangle rBox, int nSmoothFactor, final boolean bIncludeIntersectionPoints, final int nBuffer);
    public static boolean findIntersections (PointList points, final PointList poly, PointList intersections, PointList distances);
    public static boolean normalizeSegments (PointList points);
    public static boolean normalizeSegments (PointList points, int straightLineTolerance);
    final public static PointList calcSmoothPolyline (PointList points, int nSmoothFactor, int nBezierSteps);
    public static int findNearestLineSegIndexOfPoint (PointList points, final Point ptCoord);
}

