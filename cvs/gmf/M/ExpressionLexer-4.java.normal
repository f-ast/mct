package org.eclipse.gmf.internal.xpand.expression.parser;

public class ExpressionLexer extends LpgLexStream implements ExpressionLexersym, ExpressionParsersym, RuleAction {

    public ExpressionLexer () {
    }

    public ExpressionLexer (String filename) throws java.io.IOException {
        this (filename, ECLIPSE_TAB_VALUE);
        this.kwLexer = new ExpressionKWLexer (getInputChars (), TK_IDENT);
    }

    public ExpressionLexer (String filename, int tab) throws java.io.IOException {
    }

    public ExpressionLexer (char [] input_chars, String filename) {
    }

    public ExpressionLexer (char [] input_chars, String filename, int tab) {
    }

    public LexStream getLexStream ();
    public PrsStream getPrsStream ();
    public String [] orderedExportedSymbols ();
    final public int getKind (int i); final public static int tokenKind [] = {Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_HT, Char_LF, Char_CtlCharNotWS, Char_FF, Char_CR, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_CtlCharNotWS, Char_Space, Char_Exclamation, Char_DoubleQuote, Char_Sharp, Char_DollarSign, Char_Percent, Char_Ampersand, Char_SingleQuote, Char_LeftParen, Char_RightParen, Char_Star, Char_Plus, Char_Comma, Char_Minus, Char_Dot, Char_Slash, Char_0, Char_1, Char_2, Char_3, Char_4, Char_5, Char_6, Char_7, Char_8, Char_9, Char_Colon, Char_SemiColon, Char_LessThan, Char_Equal, Char_GreaterThan
      , Char_QuestionMark, Char_AtSign, Char_A, Char_B, Char_C, Char_D, Char_E, Char_F, Char_G, Char_H, Char_I, Char_J, Char_K, Char_L, Char_M, Char_N, Char_O, Char_P, Char_Q, Char_R, Char_S, Char_T, Char_U, Char_V, Char_W, Char_X, Char_Y, Char_Z, Char_LeftBracket, Char_BackSlash, Char_RightBracket, Char_Caret, Char__, Char_BackQuote, Char_a, Char_b, Char_c, Char_d, Char_e, Char_f, Char_g, Char_h, Char_i, Char_j, Char_k, Char_l, Char_m, Char_n, Char_o, Char_p, Char_q, Char_r, Char_s, Char_t, Char_u, Char_v, Char_w, Char_x, Char_y, Char_z, Char_LeftBrace, Char_VerticalBar, Char_RightBrace, Char_Tilde, Char_AfterASCII, Char_EOF};

    public int [] getKeywordKinds ();
    public int getLeftSpan ();
    public int getRhsFirstTokenIndex (int i);
    public int getRhsLastTokenIndex (int i);
    public int getRightSpan ();
    public int getToken (int i);
    public void initialize (char [] content, String filename);
    public void lexer (Monitor monitor, PrsStream prsStream);
    public void lexer (PrsStream prsStream);
    public void ruleAction (int ruleNumber);
}

