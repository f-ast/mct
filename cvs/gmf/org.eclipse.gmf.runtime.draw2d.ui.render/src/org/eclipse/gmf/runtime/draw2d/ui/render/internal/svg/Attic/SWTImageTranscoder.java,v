head	1.5;
access;
symbols
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.5
date	2006.02.10.19.18.31;	author sshaw;	state dead;
branches;
next	1.4;

1.4
date	2006.01.03.15.15.18;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.29.16.33.55;	author sshaw;	state dead;
branches;
next	1.2;

1.2
date	2005.09.12.21.24.38;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.49;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.5
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@/******************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.render.internal.svg;

import java.awt.Graphics2D;

import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.graphics.Graphics2DToGraphicsAdaptor;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.PaletteData;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.widgets.Display;


/**
 * Image transcoder that will allow direct rendering to an swt <code>GC</code> object through
 * a delegating class.
 * 
 * @@see Graphics2DToGraphicsAdaptor
 * 
 * @@author sshaw
 *
 */
public class SWTImageTranscoder
	extends ImageTranscoderEx {

	private Image swtImage = null;
	
	public SWTImageTranscoder() {
		super();
	}

	/**
	 * @@return Returns the swtImage.
	 */
	public Image getSWTImage() {
		return swtImage;
	}

	private static final RGB TRANSPARENT_COLOR = new RGB(254, 255, 254);
	private static final RGB REPLACE_TRANSPARENT_COLOR = new RGB(255, 255, 255);
	
	private GC swtGC = null;
	
	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.internal.svg.ImageTranscoderEx#createGraphics(int, int)
	 */
	protected Graphics2D createGraphics(int w, int h) {
		Display display = Display.getDefault();

		ImageData imgData = new ImageData(w, h, 24, new PaletteData(0xFF0000, 0xFF00, 0xFF));
		imgData.transparentPixel = FigureUtilities.RGBToInteger(TRANSPARENT_COLOR).intValue();
		
		swtImage = new Image(display, imgData);
		swtGC = new GC(swtImage);
		
		Color transparentColor = new Color(null, TRANSPARENT_COLOR);
		swtGC.setBackground(transparentColor);
		swtGC.fillRectangle(0, 0, w, h);
		transparentColor.dispose();
		
		return new Graphics2DToGraphicsAdaptor(swtGC, TRANSPARENT_COLOR, REPLACE_TRANSPARENT_COLOR);
	}

	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.internal.svg.ImageTranscoderEx#postRenderImage(java.awt.Graphics2D)
	 */
	protected void postRenderImage(Graphics2D g2d) {
		super.postRenderImage(g2d);
		
		swtGC.dispose();
	}
	
}
@


1.4
log
@bugzilla 111436 gmf-head sshaw 060103 Improve performance of SVG transcoder
@
text
@@


1.3
log
@bugzilla 111436 gmf-head sshaw 051128 Improve performance of SVG transcoder
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d14 1
a14 2
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
d16 4
a19 2
import org.apache.batik.transcoder.TranscoderException;
import org.apache.batik.transcoder.TranscoderOutput;
d23 1
d26 1
d28 5
a34 2
 * The is a specialization of the ImageTranscoder class to support the SWT Image
 * format.  
d36 2
a37 1
class SWTImageTranscoder extends ImageTranscoderEx {
d39 1
a39 1
	protected Image swtImage = null;
a40 3
	/**
	 * Constructor to create an instance of SWTImageTranscoder.
	 */
d42 1
a42 1
		// empty constructor
d44 1
a44 1
		
d46 1
a46 4
	 * Override to create a BufferedImage type that support an alpha channel for
	 * transparency.
	 * 
	 * @@see org.apache.batik.transcoder.image.ImageTranscoder#createImage(int, int)
d48 2
a49 2
	public BufferedImage createImage(int w, int h) {
		return new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
d52 8
a59 5
	/** 
	 * Override to support the translation of the BufferedImage type into the SWT Image
	 * format.
	 * 
	 * @@see org.apache.batik.transcoder.image.ImageTranscoder#writeImage(java.awt.image.BufferedImage, org.apache.batik.transcoder.TranscoderOutput)
d61 2
a62 2
	public void writeImage(BufferedImage img, TranscoderOutput arg1)
		throws TranscoderException {
d64 13
a76 1
		PaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);
d78 6
a83 7
		// We can force bitdepth to be 24 bit because BufferedImage getRGB allows us to always
		// retrieve 24 bit data regardless of source color depth.
		ImageData swtImageData =
			new ImageData(img.getWidth(), img.getHeight(), 24, palette);

		// ensure scansize is aligned on 32 bit.
		int scansize = (((img.getWidth() * 3) + 3) * 4) / 4;
d85 1
a85 17
		WritableRaster alphaRaster = img.getAlphaRaster();
			
		for (int y=0; y<img.getHeight(); y++) {
			int[] buff = img.getRGB(0, y, img.getWidth(), 1, null, 0, scansize);
			swtImageData.setPixels(0, y, img.getWidth(), buff, 0);
			
			// check for alpha channel
			if (alphaRaster != null) {
				int[] alpha = alphaRaster.getPixels(0, y, img.getWidth(), 1, (int[])null);
				byte[] alphaBytes = new byte[img.getWidth()];
				for (int i=0; i<img.getWidth(); i++)
					alphaBytes[i] = (byte)alpha[i];
				swtImageData.setAlphas(0, y, img.getWidth(), alphaBytes, 0);
			}
		}
	
		swtImage = new Image(Display.getDefault(), swtImageData);
a87 10
	/**
	 * getSWTImage
	 * Accessor to retrieve the rendered SWT Image.
	 * 
	 * @@return Image that conains the rendered SVG data.
	 */
	public Image getSWTImage(){
		return swtImage;
	}

@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

