head	1.9;
access;
symbols
	v20081020-0700:1.9
	v20080722-1827:1.9
	R2_1_maintenance:1.9.0.4
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080507-2230:1.9
	v20080425-1959:1.9
	v20080331-1625:1.9
	v20080328-1605:1.9
	v20080222-1200:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.8
	v20070605-1400:1.8
	v20070601-1400:1.8
	v20070330-1300:1.8
	v20070208-1800:1.8
	M4_20:1.8
	v20061218-1500:1.5.2.2
	v20061214-0000:1.8
	M3_20:1.6
	v20061013-1330:1.6
	v20060919-0800:1.5.2.1
	M1_20:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060526-1200:1.5
	I20060505-1400:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.3
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.9
date	2007.06.11.17.45.16;	author aboyko;	state Exp;
branches;
next	1.8;
commitid	59ea466d8a2c4567;

1.8
date	2006.12.06.14.39.55;	author crevells;	state Exp;
branches;
next	1.7;
commitid	2cc14576d63b4567;

1.7
date	2006.11.20.22.04.48;	author crevells;	state Exp;
branches;
next	1.6;
commitid	22d4456226804567;

1.6
date	2006.10.03.15.05.23;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.03.15.15.18;	author sshaw;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.12.05.19.18.18;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.29.16.33.55;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.24.39;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.53;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.09.13.16.44.44;	author ahunter;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2006.11.20.21.58.16;	author crevells;	state Exp;
branches;
next	;
commitid	2fa3456224f84567;


desc
@@


1.9
log
@[191573] gmf_head aboyko 070611 Revert fix from Bug # 163001
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.draw2d.ui.render.internal.image;

import java.io.ByteArrayInputStream;
import java.security.InvalidParameterException;

import org.eclipse.draw2d.SWTGraphics;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.AbstractRenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderDebugOptions;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderPlugin;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory.RenderedImageKey;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.ImageLoader;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.ui.PlatformUI;

/**
* Class that represents a Image image. This is a useful abstraction so that it
* can be used similar to an SWT Image object.
*  
* @@author sshaw
* @@canBeSeenBy org.eclipse.gmf.runtime.draw2d.ui.render.*
*/
public final class ImageRenderedImage extends AbstractRenderedImage {

	/**
	 * Constructor for SVGImage
	 * 
	 * @@param buffer
	 *            byte[] array containing an cached SVG image file.
	 * @@param key
	 *            ImageKey instance which is unique for the byte array.
	 */
	public ImageRenderedImage(byte[] buff, RenderedImageKey key) { 
		super(buff, key); 
	}

	/**
	 * loadImageFromBuffer
	 * Utility to load the image file.  Throws an exception if the image
	 * buffer is not legitimate.
	 * 
	 * @@throws Exception indicating that the buffer is not a legitimate or recognizable
	 * to the SWT ImageLoader class.
	 */
	protected Image renderImage() {
		try {
			ImageLoader loader = new ImageLoader();
			ByteArrayInputStream byteIS = new ByteArrayInputStream(getBuffer());
			// otherwise render the image.
			ImageData[] imgData = loader.load(byteIS);
			if (imgData == null)
				throw new InvalidParameterException();
				
			int origWidth = imgData[0].width;
			int origHeight = imgData[0].height;
			
			int bufferWidth = getKey().getWidth() == 0 ? origWidth : getKey().getWidth();
			int bufferHeight = getKey().getHeight() == 0 ? origHeight : getKey().getHeight();
			
			int newWidth = bufferWidth;
            int newHeight = bufferHeight;
            
            if (getKey().shouldMaintainAspectRatio()) {
                double origAspectRatio = origHeight / (double)origWidth;
                if (origAspectRatio > newHeight / (double)newWidth) {
                    newWidth = (int)Math.round(newHeight / origAspectRatio);
                } else {
                    newHeight = (int)Math.round(newWidth * origAspectRatio);
                }
				
				double scale = 1.0;
				if (newWidth > bufferWidth)
					scale = bufferWidth / newWidth;
				if (newHeight > bufferHeight)
					scale = Math.min(scale, bufferHeight / (double)newHeight);
				
				newWidth *= scale;
				newHeight *= scale;
				
				Image origImage = new Image(PlatformUI.getWorkbench().getDisplay(), imgData[0]);
				Image image = new Image(PlatformUI.getWorkbench().getDisplay(), new Rectangle(0, 0, bufferWidth, bufferHeight));
				GC gc = new GC(image);
				SWTGraphics swtG = new SWTGraphics(gc);
				swtG.drawImage(origImage, 0, 0, origWidth, origHeight, (bufferWidth - newWidth) / 2, (bufferHeight - newHeight) / 2, newWidth, newHeight);
				swtG.dispose();
				gc.dispose();
				origImage.dispose();
				
				return image;
			}
			else {
				ImageData scaledImgData = imgData[0].scaledTo(newWidth, newHeight);
				return new Image(PlatformUI.getWorkbench().getDisplay(), scaledImgData);
			}
		} catch (Exception e) {
			Trace.throwing(Draw2dRenderPlugin.getInstance(), Draw2dRenderDebugOptions.EXCEPTIONS_THROWING, ImageRenderedImage.class, 
				"ImageRenderedImage.renderImage() : couldn't load image from buffer", //$NON-NLS-1$
				e);
			return null;
		}

	}
}
@


1.8
log
@[163001] gmf_head crevells 061206 Not enough feedback provided when image fails to render
Contributed by: Alex Boyko
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
a17 1
import org.eclipse.core.runtime.IStatus;
d19 1
a19 1
import org.eclipse.gmf.runtime.common.core.util.Log;
d21 1
d111 3
a113 2
            Log.error(Draw2dRenderPlugin.getInstance(),
                IStatus.ERROR, e.toString(), e);
@


1.7
log
@[163123] gmf_head crevells 061120 ScalableImageFigure image is cut off when aspect ratio is respected
Contributed by: Alex Boyko
@
text
@d18 1
d20 1
a20 1
import org.eclipse.gmf.runtime.common.core.util.Trace;
a21 1
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderDebugOptions;
d111 2
a112 3
			Trace.throwing(Draw2dRenderPlugin.getInstance(), Draw2dRenderDebugOptions.EXCEPTIONS_THROWING, ImageRenderedImage.class, 
				"ImageRenderedImage.renderImage() : couldn't load image from buffer", //$NON-NLS-1$
				e);
@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d76 9
a84 9
			int newHeight = bufferWidth;
			
			if (getKey().shouldMaintainAspectRatio()) {
				if (newWidth > newHeight) {
					newHeight = (int)Math.round(newWidth * origHeight / (double)origWidth);
				}
				else {
					newWidth = (int)Math.round(newHeight * origWidth / (double)origHeight);
				}
@


1.5
log
@bugzilla 111436 gmf-head sshaw 060103 Improve performance of SVG transcoder
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2004 IBM Corporation and others.
@


1.5.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.5.2.2
log
@[163123] gmf_R1_0_maintenance crevells 061120 ScalableImageFigure image is cut off when aspect ratio is respected
Contributed by: Alex Boyko
@
text
@d76 9
a84 9
            int newHeight = bufferHeight;
            
            if (getKey().shouldMaintainAspectRatio()) {
                double origAspectRatio = origHeight / (double)origWidth;
                if (origAspectRatio > newHeight / (double)newWidth) {
                    newWidth = (int)Math.round(newHeight / origAspectRatio);
                } else {
                    newHeight = (int)Math.round(newWidth * origAspectRatio);
                }
@


1.4
log
@bugzilla 111436 gmf-head sshaw 051205 Improve performance of SVG transcoder
@
text
@d100 1
@


1.3
log
@bugzilla 111436 gmf-head sshaw 051128 Improve performance of SVG transcoder
@
text
@d18 1
d24 1
d28 2
a29 1
import org.eclipse.swt.widgets.Display;
a52 27
	 * Accessor for retrieving the default image for the rendered SVG data.
	 * This method will render the image if it doesn't exist yet. This allows
	 * for "on-demand" loading. If no-one accesses the image, then it will not
	 * be rendered.
	 * 
	 * @@see com.ibm.xtools.gef.figure.svg.ResizableImage#getDefaultImage()
	 */
	public Image getSWTImage() {
		if (img != null)
			return img;

		try {
			img = loadImageFromBuffer();
		}
		catch (Exception e) {
			Trace.throwing(Draw2dRenderPlugin.getInstance(), Draw2dRenderDebugOptions.EXCEPTIONS_THROWING, ImageRenderedImage.class, 
				"ImageRenderedImage.getSWTImage() : couldn't load image from buffer", //$NON-NLS-1$
				e);
			
			// handle failure gracefully - we can't predict all the failures
			// that may occur in the 3rd party library.
			//img = new Image(Display.getDefault(), 8, 8);
		}
		return img;
	}

	/**
d60 14
a73 7
	private Image loadImageFromBuffer() throws Exception {
		ImageLoader loader = new ImageLoader();
		ByteArrayInputStream byteIS = new ByteArrayInputStream(getBuffer());
		// otherwise render the image.
		ImageData[] imgData = loader.load(byteIS);
		if (imgData == null)
			throw new InvalidParameterException();
d75 39
a113 11
		int origWidth = imgData[0].width;
		int origHeight = imgData[0].height;
		
		int newWidth = getKey().getWidth() == 0 ? origWidth : getKey().getWidth();
		int newHeight = getKey().getHeight() == 0 ? origHeight : getKey().getHeight();
		
		if (getKey().shouldMaintainAspectRatio()) {
			if (origWidth < origHeight)
				newWidth = (int)Math.round(newHeight * origWidth / (double)origHeight);
			else
				newHeight = (int)Math.round(newWidth * origHeight / (double)origWidth);
a114 3
			
		ImageData scaledImgData = imgData[0].scaledTo(newWidth, newHeight);
		return new Image(Display.getDefault(), scaledImgData);
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d18 5
a27 6
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.AbstractRenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderDebugOptions;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderPlugin;

d45 1
a45 1
	public ImageRenderedImage(byte[] buff, RenderInfo key) { 
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 7
/****************************************************************************
Licensed Materials - Property of IBM
(C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.

US Government Users Restricted Rights - Use, duplication or disclosure
restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************************/
@

