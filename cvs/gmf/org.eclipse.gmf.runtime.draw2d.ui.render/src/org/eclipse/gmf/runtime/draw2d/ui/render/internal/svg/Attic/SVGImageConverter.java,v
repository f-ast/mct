head	1.7;
access;
symbols
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.4
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.7
date	2006.02.10.19.18.31;	author sshaw;	state dead;
branches;
next	1.6;

1.6
date	2006.01.03.15.15.18;	author sshaw;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.05.19.18.18;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.29.16.33.55;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.14.19.37.54;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.24.38;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.49;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.render.internal.svg;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.InputStream;

import org.apache.batik.transcoder.Transcoder;
import org.apache.batik.transcoder.TranscoderInput;
import org.apache.batik.transcoder.TranscoderOutput;
import org.apache.batik.transcoder.image.ImageTranscoder;
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
import org.eclipse.swt.graphics.Image;
import org.w3c.dom.Document;


/**
 * @@author sshaw
 *
 * Class for conversion of SVG to different Image formats
 */
class SVGImageConverter {
	/**
	 * Consructor to create a new instance of SVGtoBufferedImageConverter
	 */
	public SVGImageConverter() {
		// empty constructor
	}

	/**
	 * renderSVGToAWTImage
	 * Given a filename, will render the SVG file into an SWT Image
	 * 
	 * @@param document Document of svg file
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return BufferedImage AWT image containing the rendered SVG file.
	 * @@throws Exception
	 */
	public BufferedImage renderSVGToAWTImage(Document document, RenderInfo info)
		throws Exception {
		ImageTranscoderEx transcoder = new ImageTranscoderEx();
		setUpTranscoders(document, transcoder, info);
		
		return transcoder.getBufferedImage();
	}
	
	/**
	 * renderSVGtoSWTImage
	 * Given an InputStream, will render the SVG file into an SWT Image
	 * 
	 * @@param document Document of svg file
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return Image SWT image containing the rendered SVG file.
	 * @@throws Exception
	 */
	public Image renderSVGtoSWTImage(Document document, RenderInfo info)
		throws Exception {
		
		SWTImageTranscoder transcoder = new SWTImageTranscoder();
		setUpTranscoders(document, transcoder, info);
		
		return transcoder.getSWTImage();
	}
	
	/**
	 * renderSVGToAWTImage
	 * Given a filename, will render the SVG file into an SWT Image
	 * 
	 * @@param strFileName String file path of svg file
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return BufferedImage AWT image containing the rendered SVG file.
	 * @@throws Exception
	 */
	public BufferedImage renderSVGToAWTImage(String strFileName, RenderInfo info)
		throws Exception {
		InputStream in = new FileInputStream(strFileName);
		return renderSVGToAWTImage(in, info);
	}

	/**
	 * renderSVGToAWTImage
	 * Given a buffer, will render the SVG file into an SWT Image
	 * 
	 * @@param buffer byte[] array containing an cached SVG image file.
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return BufferedImage AWT iimage containing the rendered SVG file.
	 * @@throws Exception
	 */
	public BufferedImage renderSVGToAWTImage(byte[] buffer, RenderInfo info)
		throws Exception {
		InputStream in = new ByteArrayInputStream(buffer);
		return renderSVGToAWTImage(in, info);
	}
	
	/**
	 * setUpTranscoders
	 * sets up the transcoders with the hints based on the RenderInfo structure.
	 * 
	 * @@param in
	 * @@param transcoder
	 * @@param info
	 */
	private void setUpTranscoders(InputStream in, Transcoder transcoder, RenderInfo info)
		throws Exception {
		initializeTranscoderFromInfo(transcoder, info);
		
		TranscoderInput input = null;
		TranscoderOutput output = null;

		input = new TranscoderInput(in);
		output = new ImageTranscoderOutput(); 
		transcoder.transcode(input, output);
	}
	
	/**
	 * setUpTranscoders
	 * sets up the transcoders with the hints based on the RenderInfo structure.
	 * 
	 * @@param document
	 * @@param transcoder
	 * @@param info
	 */
	private void setUpTranscoders(Document document, Transcoder transcoder, RenderInfo info)
		throws Exception {
		initializeTranscoderFromInfo(transcoder, info);
		
		TranscoderInput input = null;
		TranscoderOutput output = null;

		input = new TranscoderInput(document);
		output = new ImageTranscoderOutput(); 
		transcoder.transcode(input, output);
	}

	private void initializeTranscoderFromInfo(Transcoder transcoder, RenderInfo info) {
		if (info.getWidth() > 0)
			transcoder.addTranscodingHint(
				ImageTranscoder.KEY_WIDTH,
				new Float(info.getWidth()));
		if (info.getHeight() > 0)
			transcoder.addTranscodingHint(
				ImageTranscoder.KEY_HEIGHT,
				new Float(info.getHeight()));
		
		transcoder.addTranscodingHint(
			ImageTranscoderEx.KEY_MAINTAIN_ASPECT_RATIO,
				Boolean.valueOf(info.shouldMaintainAspectRatio()));
	
		transcoder.addTranscodingHint(
			ImageTranscoderEx.KEY_ANTI_ALIASING,
				Boolean.valueOf(info.shouldAntiAlias()));
				
		if (info.getBackgroundColor() != null) {
			transcoder.addTranscodingHint(
				ImageTranscoderEx.KEY_FILL_COLOR,
				new Color(info.getBackgroundColor().red, 
						  info.getBackgroundColor().green,
						  info.getBackgroundColor().blue));
		}
		
		if (info.getForegroundColor() != null) {
					transcoder.addTranscodingHint(
						ImageTranscoderEx.KEY_OUTLINE_COLOR,
						new Color(info.getForegroundColor().red, 
								  info.getForegroundColor().green,
								  info.getForegroundColor().blue));
		}

	}
	
	/**
	 * renderSVG
	 * Given an InputStream, will render the SVG file into an SWT Image
	 * 
	 * @@param in InputSteam which contains the SVG file data
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return BufferedImage AWT iimage containing the rendered SVG file.
	 * @@throws Exception
	 */
	public BufferedImage renderSVGToAWTImage(InputStream in, RenderInfo info)
		throws Exception {
		ImageTranscoderEx transcoder = new ImageTranscoderEx();
		setUpTranscoders(in, transcoder, info);

		return transcoder.getBufferedImage();
	}
	
	/**
	 * renderSVGtoSWTImage
	 * Given a filename, will render the SVG file into an SWT Image
	 * 
	 * @@param strFileName String file path of svg file
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return Image SWT image containing the rendered SVG file.
	 * @@throws Exception
	 */
	public Image renderSVGtoSWTImage(String strFileName, RenderInfo info)
		throws Exception {
		InputStream in = new FileInputStream(strFileName);
		return renderSVGtoSWTImage(in, info);
	}

	/**
	 * renderSVGtoSWTImage
	 * Given a buffer, will render the SVG file into an SWT Image
	 * 
	 * @@param buffer byte[] array containing an cached SVG image file.
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return Image SWT image containing the rendered SVG file.
	 * @@throws Exception
	 */
	public Image renderSVGtoSWTImage(byte[] buffer, RenderInfo info)
		throws Exception {
		InputStream in = new ByteArrayInputStream(buffer);
		return renderSVGtoSWTImage(in, info);
	}

	/**
	 * renderSVGtoSWTImage
	 * Given an InputStream, will render the SVG file into an SWT Image
	 * 
	 * @@param in InputSteam which contains the SVG file data
	 * @@param RenderInfo object containing information about the size and 
	 * general data regarding how the image will be rendered.
	 * @@return Image SWT image containing the rendered SVG file.
	 * @@throws Exception
	 */
	public Image renderSVGtoSWTImage(InputStream in, RenderInfo info)
		throws Exception {
		
		SWTImageTranscoder transcoder = new SWTImageTranscoder();
		setUpTranscoders(in, transcoder, info);
		
		return transcoder.getSWTImage();
	}
}
@


1.6
log
@bugzilla 111436 gmf-head sshaw 060103 Improve performance of SVG transcoder
@
text
@@


1.5
log
@bugzilla 111436 gmf-head sshaw 051205 Improve performance of SVG transcoder
@
text
@a24 1
import org.eclipse.gmf.runtime.draw2d.ui.render.image.ImageConverter;
d73 4
a76 2
		BufferedImage img = renderSVGToAWTImage(document, info);
		return ImageConverter.convert(img);
d250 4
a253 2
		BufferedImage img = renderSVGToAWTImage(in, info);
		return ImageConverter.convert(img);
@


1.4
log
@bugzilla 111436 gmf-head sshaw 051128 Improve performance of SVG transcoder
@
text
@d168 1
a168 1
		if (info.getFillColor() != null) {
d171 3
a173 3
				new Color(info.getFillColor().getRed(), 
						  info.getFillColor().getGreen(),
						  info.getFillColor().getBlue()));
d176 1
a176 1
		if (info.getOutlineColor() != null) {
d179 3
a181 3
						new Color(info.getOutlineColor().getRed(), 
								  info.getOutlineColor().getGreen(),
								  info.getOutlineColor().getBlue()));
d183 1
@


1.3
log
@bugzilla 112685 gmf-head sshaw 051014 Sweep code for creation of Boolean objects
@
text
@d24 2
d27 1
a27 2

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
d47 35
d120 31
d161 1
a161 1
				SWTImageTranscoder.KEY_MAINTAIN_ASPECT_RATIO,
d165 1
a165 1
				SWTImageTranscoder.KEY_ANTI_ALIASING,
d170 1
a170 1
				SWTImageTranscoder.KEY_FILL_COLOR,
d178 1
a178 1
						SWTImageTranscoder.KEY_OUTLINE_COLOR,
a182 7
		
		TranscoderInput input = null;
		TranscoderOutput output = null;

		input = new TranscoderInput(in);
		output = new ImageTranscoderOutput(); 
		transcoder.transcode(input, output);
a197 1

d247 3
a249 5
		SWTImageTranscoder transcoder = new SWTImageTranscoder();

		setUpTranscoders(in, transcoder, info);

		return transcoder.getSWTImage();
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d95 1
a95 1
				new Boolean(info.shouldMaintainAspectRatio()));
d99 1
a99 1
				new Boolean(info.shouldAntiAlias()));
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 7
/****************************************************************************
  Licensed Materials - Property of IBM
  (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
 
  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************************/
@

