head	1.1;
access;
symbols
	v20081020-0700:1.1
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.6
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080507-2230:1.1
	v20080425-1959:1.1
	v20080331-1625:1.1
	v20080328-1605:1.1
	v20080222-1200:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.4
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070614-1400:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070330-1300:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061218-1500:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061013-1330:1.1
	v20060919-0800:1.1
	M1_20:1.1
	v20060721-1130:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060526-1200:1.1
	I20060505-1400:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1;
locks; strict;
comment	@# @;


1.1
date	2006.02.10.19.18.31;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.1
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@/******************************************************************************
 * Copyright (c) 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.render.factory;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory.RenderedImageKey;


/**
 * This interface allows the RenderedImageFactory to auto-defect an image type through
 * an extension point.  Implementors need to know how to auto-defect the type of image
 * given a byte buffer representing the contents of the image.
 * 
 * @@author sshaw
 */
public interface RenderedImageType {

	/**
	 * @@param buffer the <code>byte[]</code> array that is the contents of the image file.
	 * This is used as the input in order to detect the type of file format.
	 * @@param key the <code>RenderedImageKey</code> that defines the parameters of how
	 * to render the particular image.
	 * @@return a <code>RenderedImage</code> if the <code>buffer</code> was auto-detected as
	 * being this type.  <code>null</code> is returned if the buffer stream is not detected
	 * as this type.
	 */
	public RenderedImage autoDetect(byte[] buffer,
			final RenderedImageKey key);
}
@
