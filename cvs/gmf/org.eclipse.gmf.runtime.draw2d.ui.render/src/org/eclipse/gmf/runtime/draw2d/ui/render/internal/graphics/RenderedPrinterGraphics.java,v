head	1.6;
access;
symbols
	v20081020-0700:1.6
	v20080722-1827:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080507-2230:1.6
	v20080425-1959:1.6
	v20080331-1625:1.6
	v20080328-1605:1.6
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070330-1300:1.6
	v20070208-1800:1.6
	M4_20:1.6
	v20061218-1500:1.5.2.1
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	v20060919-0800:1.5.2.1
	M1_20:1.5
	v20060721-1130:1.5.2.1
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060526-1200:1.5
	I20060505-1400:1.5
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.3
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.6
date	2006.10.03.15.05.23;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.04.18.16.37;	author sshaw;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.12.05.19.18.18;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.29.16.33.56;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.24.39;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.50;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.07.17.19.48.11;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2003, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.draw2d.ui.render.internal.graphics;

import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.PrinterGraphics;
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderingListener;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.printing.Printer;

/**
 * Created on May 8, 2003
 *
 * @@author sshaw
 * @@version 1.0
 * 
 * Overridden to handle printing problem with transparencies.  Specifically,
 * dropshadows print with as a black bar (RATLC00513998)
 */
public class RenderedPrinterGraphics extends PrinterGraphics 
								implements DrawableRenderedImage {
	
    /* 
	 * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#allowDelayRender()
	 */
	public boolean shouldAllowDelayRender() {
		return false;
	}
	
    /**
	* Creates a new PrinterGraphics with Graphics g, using Printer p
	* @@param g Graphics object to draw with
	* @@param p Printer to print to
	* @@param roundFonts the <code>boolean</code> if <code>true</code> indicates that fonts 
	* should be rounded to account for printer font scaling errors.
	*/
	public RenderedPrinterGraphics(Graphics g, Printer p, boolean roundFonts) {
		super(g, p, roundFonts);
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#drawRenderedImage(org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage, org.eclipse.draw2d.geometry.Rectangle, org.eclipse.gmf.runtime.draw2d.ui.render.RenderingListener)
	 */
	public RenderedImage drawRenderedImage(RenderedImage srcImage, Rectangle rect, RenderingListener listener) {
        int nNewWidth = (int)Math.round(rect.width * getPrintScale());
        int nNewHeight = (int)Math.round(rect.height * getPrintScale());
            
        RenderInfo info = srcImage.getRenderInfo();
        info.setValues(nNewWidth, nNewHeight, 
                        info.shouldMaintainAspectRatio(), false, 
                        info.getBackgroundColor(), info.getForegroundColor());
            
        RenderedImage img = srcImage.getNewRenderedImage(info);
        
        Image swtImg = null;
        try {
            swtImg = img.getSWTImage();
        }
        catch (OutOfMemoryError e) {
            // don't do any scaling and rerender with anti-aliasing on
            nNewWidth = rect.width;
            nNewHeight = rect.height;
            info.setValues(nNewWidth, nNewHeight, 
                info.shouldMaintainAspectRatio(), true, 
                info.getBackgroundColor(), info.getForegroundColor());
            img = srcImage.getNewRenderedImage(info);
            swtImg = img.getSWTImage();
        }
        catch (Exception ex) {
            // don't do any scaling and rerender with anti-aliasing on
            nNewWidth = rect.width;
            nNewHeight = rect.height;
            info.setValues(nNewWidth, nNewHeight, 
                info.shouldMaintainAspectRatio(), true, 
                info.getBackgroundColor(), info.getForegroundColor());
            img = srcImage.getNewRenderedImage(info);
            swtImg = img.getSWTImage();
        }
        
        drawImage(swtImg, 0, 0, nNewWidth, nNewHeight, 
                rect.x, rect.y, rect.width, rect.height);
        
        return img;
	}
	
    /* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#getMaximumRenderSize()
	 */
	public Dimension getMaximumRenderSize() {
        return null;
	}
}
@


1.5
log
@bugzilla 140212 gmf-head sshaw 060504 SVG images corrupted when print scaling is applied...
@
text
@d2 1
a2 1
 * Copyright (c) 2003 - 2005 IBM Corporation and others.
@


1.5.2.1
log
@[150280] gmf_R1_0_maintenance ahunter 060717 Incorrect copyright in some GMF files
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2006 IBM Corporation and others.
@


1.4
log
@bugzilla 111436 gmf-head sshaw 051205 Improve performance of SVG transcoder
@
text
@d38 1
a38 1
	/* 
d61 39
a99 13
		int nNewWidth = (int)Math.round(rect.width * getPrintScale());
		int nNewHeight = (int)Math.round(rect.height * getPrintScale());
		
		RenderInfo info = srcImage.getRenderInfo();
		info.setValues(nNewWidth, nNewHeight, 
						info.shouldMaintainAspectRatio(), true,
						info.getBackgroundColor(), info.getForegroundColor());
		
		RenderedImage img = srcImage.getNewRenderedImage(info);
		
		Image swtImg = img.getSWTImage();
		drawImage(swtImg, rect.x, rect.y + rect.height - swtImg.getBounds().height);
		return img;
d102 1
a102 1
	/* (non-Javadoc)
d106 1
a106 1
		return null;
@


1.3
log
@bugzilla 111436 gmf-head sshaw 051128 Improve performance of SVG transcoder
@
text
@d16 2
a17 3
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.printing.Printer;

d22 3
d38 8
d57 2
a58 3
	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#drawRenderedImage(org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage, int, int, int, int)
d60 3
a62 3
	public RenderedImage drawRenderedImage(RenderedImage srcImage, int x, int y, int width, int height) {
		int nNewWidth = (int)Math.round(width * getPrintScale());
		int nNewHeight = (int)Math.round(height * getPrintScale());
d66 2
a67 2
						info.getFillColor(), info.getOutlineColor(), 
						info.shouldMaintainAspectRatio(), true);
d72 1
a72 1
		drawImage(swtImg, x, y + height - swtImg.getBounds().height);
d75 7
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d51 1
a51 1
	public void drawRenderedImage(RenderedImage srcImage, int x, int y, int width, int height) {
d64 1
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2003 - 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

