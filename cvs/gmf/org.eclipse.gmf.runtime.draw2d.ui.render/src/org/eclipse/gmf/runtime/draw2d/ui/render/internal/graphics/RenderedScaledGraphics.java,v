head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.6
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080507-2230:1.3
	v20080425-1959:1.3
	v20080331-1625:1.3
	v20080328-1605:1.3
	v20080222-1200:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070330-1300:1.3
	v20070208-1800:1.3
	M4_20:1.3
	v20061218-1500:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060526-1200:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.2
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;


1.3
date	2005.12.05.19.18.18;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.29.16.33.56;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.12.22.25.25;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@bugzilla 111436 gmf-head sshaw 051205 Improve performance of SVG transcoder
@
text
@/******************************************************************************
 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.render.internal.graphics;

import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderHelper;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.RenderingListener;

/**
 * @@author sshaw
 * @@canBeSeenBy org.eclipse.gmf.runtime.draw2d.ui.render.*
 * 
 * Subclass to allow implementation of the DrawableRenderedImage interface
 */
public class RenderedScaledGraphics
	extends org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScaledGraphics
	implements DrawableRenderedImage {

	boolean allowDelayRender = false;
	Dimension maximumRenderSize = null;

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#allowDelayRender()
	 */
	public boolean shouldAllowDelayRender() {
		return allowDelayRender;
	}

	/**
	 * Constructs a new ScaledGraphics based on the given Graphics object.
	 * 
	 * @@param g
	 *            the base graphics object
	 */
	public RenderedScaledGraphics(Graphics g) {
		this(g, false, null);
	}

	/**
	 * Constructs a new ScaledGraphics based on the given Graphics object.
	 * 
	 * @@param g
	 *            the base graphics object
	 * @@param allowDelayRender
	 */
	public RenderedScaledGraphics(Graphics g, boolean allowDelayRender, Dimension maximumRenderSize) {
		super(g);
		this.allowDelayRender = allowDelayRender;
		this.maximumRenderSize = maximumRenderSize;
	}

	private double scale = 1.0;

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.draw2d.Graphics#scale(double)
	 */
	public void scale(double amount) {
		scale = amount;
		super.scale(amount);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#drawRenderedImage(org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage,
	 *      org.eclipse.draw2d.geometry.Rectangle,
	 *      org.eclipse.gmf.runtime.draw2d.ui.render.RenderingListener)
	 */
	public RenderedImage drawRenderedImage(RenderedImage srcImage,
			Rectangle rect, RenderingListener listener) {
		return RenderHelper.getInstance(scale, true, shouldAllowDelayRender(), getMaximumRenderSize())
			.drawRenderedImage(getGraphics(), srcImage, rect, listener);
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#getMaximumRenderSize()
	 */
	public Dimension getMaximumRenderSize() {
		// TODO Auto-generated method stub
		return maximumRenderSize;
	}
}
@


1.2
log
@bugzilla 111436 gmf-head sshaw 051128 Improve performance of SVG transcoder
@
text
@a11 1

d15 1
a16 1
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
d19 2
a20 2
import org.eclipse.swt.graphics.Image;

d25 1
a25 1
 *
d28 16
a43 3
public class RenderedScaledGraphics extends org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.ScaledGraphics 
					implements DrawableRenderedImage {
	
d46 3
a48 1
	 * @@param g the base graphics object
d51 11
d63 2
d66 4
a69 2
	
	/* 
d71 23
a93 1
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#drawRenderedImage(org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage, int, int, int, int)
d95 3
a97 19
	public RenderedImage drawRenderedImage(RenderedImage srcImage, int x, int y, int width, int height) {
		if (getGraphics() instanceof DrawableRenderedImage) {
			Rectangle r = zoomRect(x, y, width, height);
			return ((DrawableRenderedImage)getGraphics()).drawRenderedImage(srcImage, r.x, r.y, r.width, r.height);
		}
		else {
			Rectangle r = zoomRect(x, y, width, height);
			RenderInfo info = srcImage.getRenderInfo();
			info.setValues(r.width, r.height, 
							info.getFillColor(), info.getOutlineColor(), 
							info.shouldMaintainAspectRatio(), info.shouldAntiAlias());
			
			RenderedImage img = srcImage.getNewRenderedImage(info);
			
			Image swtImg = img.getSWTImage();
			if (swtImg!=null)
				getGraphics().drawImage(swtImg, r.x, r.y + r.height - swtImg.getBounds().height);
			return img;
		}
@


1.1
log
@bugzilla 111210 gmf-head sshaw 051012 Running out of SWT handles / Excessive GDI handles
@
text
@d16 1
a16 3
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;

d20 1
a31 2
	private Graphics graphics;
	
a37 11
		graphics = g;
	}
	
	private double scale = 1.0;
	
	/* (non-Javadoc)
	 * @@see org.eclipse.draw2d.Graphics#scale(double)
	 */
	public void scale(double amount) {
		scale = amount;
		super.scale(amount);
d40 3
a42 2
	/**
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.internal.DrawableRenderedImage#drawRenderedImage(RenderedImage, int, int, int)
d44 4
a47 7
	public void drawRenderedImage(RenderedImage srcImage, int x, int y, int width, int height) {
		if (graphics instanceof DrawableRenderedImage) {
			Point tr = new Point((int)(Math.round(x * scale)), (int)(Math.round(y * scale)));
			Dimension dim = new Dimension((int)(Math.round(((x + width) * scale))) - tr.x,
				(int)(Math.round(((y + height) * scale))) - tr.y);
			
			((DrawableRenderedImage)graphics).drawRenderedImage(srcImage, tr.x, tr.y, dim.width, dim.height);
d50 1
a50 3
			int nNewWidth = (int)Math.round(srcImage.getRenderInfo().getWidth() * scale);
			int nNewHeight = (int)Math.round(srcImage.getRenderInfo().getHeight() * scale);
				
d52 1
a52 1
			info.setValues(nNewWidth, nNewHeight, 
d55 1
a55 1
				
d57 5
a61 3
				
			drawImage(img.getSWTImage(), 0, 0, nNewWidth, nNewHeight, 
					x, y, srcImage.getRenderInfo().getWidth(), srcImage.getRenderInfo().getHeight());
@

