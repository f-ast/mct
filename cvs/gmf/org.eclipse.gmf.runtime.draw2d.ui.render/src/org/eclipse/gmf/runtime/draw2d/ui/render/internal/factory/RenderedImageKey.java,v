head	1.6;
access;
symbols
	v20081020-0700:1.6
	v20080722-1827:1.6
	R2_1_maintenance:1.6.0.2
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080507-2230:1.6
	v20080425-1959:1.5
	v20080331-1625:1.5
	v20080328-1605:1.5
	v20080222-1200:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	RC3_20:1.5
	v20070614-1400:1.5
	v20070608-1300:1.5
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070330-1300:1.4
	v20070208-1800:1.4
	M4_20:1.4
	v20061218-1500:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060526-1200:1.4
	I20060505-1400:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.3
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.6
date	2008.05.07.18.07.28;	author aboyko;	state Exp;
branches;
next	1.5;
commitid	78364821efdf4567;

1.5
date	2007.06.06.13.50.22;	author crevells;	state Exp;
branches;
next	1.4;
commitid	1dfb4666bb9e4567;

1.4
date	2005.12.05.19.18.18;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.29.16.33.56;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.24.38;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.46;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[229256] gmf_head aboyko 080507 GMF can't render SVG's with xlinked or embedded images.
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
import org.eclipse.swt.graphics.RGB;

/**
 * @@author sshaw
 * @@canBeSeenBy org.eclipse.gmf.runtime.draw2d.ui.render.*
 *
 * This class defines the unique key used to get the appropriate RenderedImage from the map.
 */
public final class RenderedImageKey extends RenderInfoImpl {

    public RenderedImageKey() {
        super();
    }

    public RenderedImageKey(RenderInfo info) {
        this(info, 0, null);
    }

    public RenderedImageKey(RenderInfo info, long checksum, Object extraData) {
        super(info);
        this.checksum = checksum;
        this.extraData = extraData;
    }
    
    public RenderedImageKey(RenderInfo info, long checksum, Object extraData, String url) {
    	this(info, checksum, extraData);
    	this.url = url;
    }

    private long checksum = 0;
    private Object extraData = null;
    private String url;

    /**
     * @@return Long value that is the checksum
     */
    public long getChecksum() {
        return checksum;
    }
    
    /**
     * Returns a String representation of the URL of the image (a path to the image file) 
     * 
     * @@return the URL string
     * @@since 2.1
     */
    public String getURLString() {
    	return url;
    }

    /**
     * @@return <code>Object</code> that is extra data to be cached for the rendered image.  The
     * extra data is always unique with respect to the checksum so it doesn't have to be
     * considered in the hashcode calculation.
     */
    public Object getExtraData() {
        return extraData;
    }

    /**
     * Sets the extra data to bee cached for the rendered image.  The
     * extra data should always unique with respect to the checksum so it doesn't have to be
     * considered in the hashcode calculation.
     * @@param extraData
     */
    public void setExtraData(Object extraData) {
        this.extraData = extraData;
    }

    /**
     * Retrieves a hash code value for this output operation. This method is 
     * supported for the benefit of hashtables such as those provided by 
     * <code>java.util.Hashtable</code>.
     * 
     * @@return A hash code value for this output operation.
     * 
     * @@see Object#hashCode()
     */
    public int hashCode() {
        int hashCode = new Long(getChecksum()).hashCode();
        hashCode += super.hashCode();

        return hashCode;
    }

    /**
     * @@see java.lang.Object#equals(java.lang.Object)
     */
    public boolean equals(Object object) {

        RenderedImageKey imagekey = null;
        if (object instanceof RenderedImageKey) {
            imagekey = (RenderedImageKey) object;
        }

        if (imagekey != null
            && getChecksum() == imagekey.getChecksum()
            && super.equals(imagekey)) {
            return true;
        }

        return false;
    }

    public void setValues(int width, int height, boolean maintainAspectRatio, boolean antialias, RGB fill, RGB outline) {
        
        // if the colors have changed, the document needs to be recreated
        if (fill != null && !fill.equals(getBackgroundColor())) {
            setExtraData(null);
        }
        if (outline != null && !outline.equals(getForegroundColor())) {
            setExtraData(null);
        }
        
        super.setValues(width, height, maintainAspectRatio, antialias, fill, outline);

    }
    
    
}
@


1.5
log
@[190546] gmf_head crevells 070606 Fill & line colors change on SVG images sporadically  when one image has fill/line color set
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2007 IBM Corporation and others.
d38 5
d46 1
d54 10
@


1.4
log
@bugzilla 111436 gmf-head sshaw 051205 Improve performance of SVG transcoder
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
d15 1
d25 93
a117 77
	public RenderedImageKey() {
		super();
	}

	public RenderedImageKey(RenderInfo info) {
		this(info, 0, null);
	}

	public RenderedImageKey(RenderInfo info, long checksum, Object extraData) {
		super(info);
		this.checksum = checksum;
		this.extraData = extraData;
	}

	private long checksum = 0;
	private Object extraData = null;

	/**
	 * @@return Long value that is the checksum
	 */
	public long getChecksum() {
		return checksum;
	}

	/**
	 * @@return <code>Object</code> that is extra data to be cached for the rendered image.  The
	 * extra data is always unique with respect to the checksum so it doesn't have to be
	 * considered in the hashcode calculation.
	 */
	public Object getExtraData() {
		return extraData;
	}

	/**
	 * Sets the extra data to bee cached for the rendered image.  The
	 * extra data should always unique with respect to the checksum so it doesn't have to be
	 * considered in the hashcode calculation.
	 * @@param extraData
	 */
	public void setExtraData(Object extraData) {
		this.extraData = extraData;
	}

	/**
	 * Retrieves a hash code value for this output operation. This method is 
	 * supported for the benefit of hashtables such as those provided by 
	 * <code>java.util.Hashtable</code>.
	 * 
	 * @@return A hash code value for this output operation.
	 * 
	 * @@see Object#hashCode()
	 */
	public int hashCode() {
		int hashCode = new Long(getChecksum()).hashCode();
		hashCode += super.hashCode();

		return hashCode;
	}

	/**
	 * @@see java.lang.Object#equals(java.lang.Object)
	 */
	public boolean equals(Object object) {

		RenderedImageKey imagekey = null;
		if (object instanceof RenderedImageKey) {
			imagekey = (RenderedImageKey) object;
		}

		if (imagekey != null
			&& getChecksum() == imagekey.getChecksum()
			&& super.equals(imagekey)) {
			return true;
		}

		return false;
	}
@


1.3
log
@bugzilla 111436 gmf-head sshaw 051128 Improve performance of SVG transcoder
@
text
@a13 2
import java.awt.Color;

a15 1

d22 5
a26 1
public final class RenderedImageKey implements RenderInfo {
d28 6
a33 1
	public RenderedImageKey(long checksum, RenderInfo info, Object extraData) {
a34 1
		this.info = info;
d38 2
a39 3
	private long checksum;
	private RenderInfo info;
	private Object extraData;
a48 10
	 * getRenderInfo
	 * Accessor to return RenderInfo object.
	 * 
	 * @@return RenderInfo object.
	 */
	public RenderInfo getRenderInfo() {
		return info;
	}

	/**
a66 54
	/* (non-Javadoc)
	 * @@see com.ibm.xtools.gef.figure.svg.RenderInfo#getWidth()
	 */
	public int getWidth() {
		return info.getWidth();
	}

	/* (non-Javadoc)
	 * @@see com.ibm.xtools.gef.figure.svg.RenderInfo#getHeight()
	 */
	public int getHeight() {
		return info.getHeight();
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderInfo#getFillColor()
	 */
	public Color getFillColor() {
		return info.getFillColor();
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderInfo#getOutlineColor()
	 */
	public Color getOutlineColor() {
		return info.getOutlineColor();
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderInfo#setValues(int, int, java.awt.Color, java.awt.Color, boolean, boolean)
	 */
	public void setValues(int width, int height, Color fill, Color outline,
							boolean maintainAspectRatio, 
							boolean antialias) {
		// Don't do anything - this class implementation is used as a key and as
		// such should be immutable.  A copy should be made if they wish to 
		// modify the values.
		throw new UnsupportedOperationException();
	}

	/* (non-Javadoc)
	 * @@see com.ibm.xtools.gef.figure.svg.RenderInfo#shouldMaintainAspectRatio()
	 */
	public boolean shouldMaintainAspectRatio() {
		return info.shouldMaintainAspectRatio();
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderInfo#shouldAntiAlias()
	 */
	public boolean shouldAntiAlias() {
		return info.shouldAntiAlias();
	}

d77 2
a78 2
		int hashCode = new Long(checksum).hashCode();
		hashCode = hashCode + getRenderInfo().hashCode();
d95 1
a95 1
			&& getRenderInfo().equals(imagekey.getRenderInfo())) {
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d27 1
a27 1
	public RenderedImageKey(long checksum, RenderInfo info) {
d30 1
d35 1
d54 19
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

