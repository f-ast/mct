head	1.9;
access;
symbols
	v20081020-0700:1.9
	v20080722-1827:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080507-2230:1.9
	v20080425-1959:1.8
	v20080331-1625:1.8
	v20080328-1605:1.8
	v20080222-1200:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	RC3_20:1.8
	v20070614-1400:1.8
	v20070608-1300:1.8
	v20070605-1400:1.8
	v20070601-1400:1.7
	v20070330-1300:1.7
	v20070208-1800:1.7
	M4_20:1.7
	v20061218-1500:1.6.2.1
	v20061214-0000:1.7
	M3_20:1.7
	v20061013-1330:1.7
	v20060919-0800:1.6.2.1
	M1_20:1.6
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060526-1200:1.6
	I20060505-1400:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.5
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.3
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.9
date	2008.05.07.18.07.28;	author aboyko;	state Exp;
branches;
next	1.8;
commitid	78364821efdf4567;

1.8
date	2007.06.01.20.41.43;	author mmostafa;	state Exp;
branches;
next	1.7;
commitid	2433466084874567;

1.7
date	2006.10.03.15.05.23;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.10.19.18.31;	author sshaw;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.02.07.15.19.07;	author mmostafa;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.05.19.18.18;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.29.16.33.55;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.24.39;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.51;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.09.13.16.44.44;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[229256] gmf_head aboyko 080507 GMF can't render SVG's with xlinked or embedded images.
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.draw2d.ui.render.internal;

import java.security.InvalidParameterException;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.factory.RenderedImageFactory;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory.RenderedImageKey;
import org.eclipse.swt.graphics.Image;

/**
* Abstract class for RenderedImage interface.
*  
* @@author sshaw
* @@canBeSeenBy org.eclipse.gmf.runtime.draw2d.ui.render.*
*/
abstract public class AbstractRenderedImage implements RenderedImage {
	
	/**
	 * Constructor for AbstractRenderedImage
	 * 
	 * @@param buffer
	 *            byte[] array containing an cached SVG image file.
	 * @@param key
	 *            ImageKey instance which is unique for the byte array.
	 */
	public AbstractRenderedImage(final byte[] buff, RenderedImageKey key) { 
		if (buff == null || key == null)
			throw new InvalidParameterException();

		this.buffer = buff;
		this.key = key;
	}

	private byte[] buffer = null;
	private RenderedImageKey key = null;
	private Image img = null;
	
	/**
	 * @@return Returns the buffer.
	 */
	public byte[] getBuffer() {
		return buffer;
	}
	
	/**
	 * @@return Returns the key.
	 */
	public RenderedImageKey getKey() {
		return new RenderedImageKey(key, key.getChecksum(), key.getExtraData(), key.getURLString());
	}
	
	/**
	 * Overridden so that image can be disposed.
	 * 
	 * @@see java.lang.Object#finalize()
	 */
	protected void finalize() throws Throwable {
		if (img != null) {
			img.dispose();
			img = null;
		}
		key = null;

		super.finalize();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderedImage#getRenderInfo()
	 */
	public RenderInfo getRenderInfo() {
		return getKey();
	} 

	/**
     *Implementation of the ResizableImage interface that will allow the SVG
     * to be re-rendered into a different ImageSize.
     * @@see org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage#getNewRenderedImage(org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo)
	 */
	public RenderedImage getNewRenderedImage(RenderInfo info) {
		if (!getRenderInfo().equals(info)) { 
			RenderedImage rndImg = RenderedImageFactory.getRelatedInstance(this, info);
			if (rndImg != null) {
				return rndImg;
			} else {
				return RenderedImageFactory.getInstance(getBuffer(), info);
			}
		}

		return this;
	}

	/**
	 * @@return <code>true</code> if image has been fully rendered, <code>false</code> if
	 * it needs to be rendered.
	 */
	public boolean isRendered() {
		if (img != null)
			return true;
		
		return false;
	}

	/**
     * Accessor for retrieving the default image for the rendered SVG data.
     * This method will render the image if it doesn't exist yet. This allows
     * for "on-demand" loading. If no-one accesses the image, then it will not
     * be rendered.
     * 
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.RenderedImage#getSWTImage()
	 */
	 final public Image getSWTImage() {
		if (img != null)
			return img;

		img = renderImage();

		return img;
	}
	
	/**
	 * @@return the new <code>Image</code> rendered to the specification of the
	 * <code>RenderInfo</code> structure stored with the this <code>RenderedImage</code>
	 */
	abstract protected Image renderImage();

	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
	 */
	public Object getAdapter(Class adapter) {
		if (adapter.equals(Image.class)) {
			return getSWTImage();
		}
		return null;
	}
}
@


1.8
log
@[190527] gmf_head mmostafa 070601 Application Locks Up when you D&D a shape from the PE to a diagram. Linux only
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2007 IBM Corporation and others.
d62 1
a62 1
		return new RenderedImageKey(key, key.getChecksum(), key.getExtraData());
@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
d126 1
a126 1
	synchronized final public Image getSWTImage() {
@


1.6
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
@


1.6.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.5
log
@bugzilla 117592 gmf-head mmostafa 060207 Eroneous references to xtools in diagram plugins
@
text
@a14 1
import java.awt.image.BufferedImage;
a19 1
import org.eclipse.gmf.runtime.draw2d.ui.render.image.ImageConverter;
a150 7

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderedImage#getBufferedImage()
	 */
	public BufferedImage getBufferedImage() {
		return ImageConverter.convert(getSWTImage());
	}
@


1.4
log
@bugzilla 111436 gmf-head sshaw 051205 Improve performance of SVG transcoder
@
text
@d92 3
a94 5
	 * Implementation of the ResizableImage interface that will allow the SVG
	 * to be re-rendered into a different ImageSize.
	 * 
	 * @@see com.ibm.xtools.gef.figure.svg.ResizableImage#getResizedImage(int,
	 *      int)
d121 6
a126 6
	 * Accessor for retrieving the default image for the rendered SVG data.
	 * This method will render the image if it doesn't exist yet. This allows
	 * for "on-demand" loading. If no-one accesses the image, then it will not
	 * be rendered.
	 * 
	 * @@see com.ibm.xtools.gef.figure.svg.ResizableImage#getDefaultImage()
@


1.3
log
@bugzilla 111436 gmf-head sshaw 051128 Improve performance of SVG transcoder
@
text
@d51 1
a51 2

	protected Image img = null;
d64 1
a64 1
		return key;
d88 1
a88 2
		return RenderedImageFactory.createInfo(key.getWidth(), key.getHeight(), key.getFillColor(), key.getOutlineColor(),
								key.shouldMaintainAspectRatio(), key.shouldAntiAlias());
d110 28
d139 17
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a17 2
import org.eclipse.swt.graphics.Image;

d22 2
d41 1
a41 1
	public AbstractRenderedImage(byte[] buff, RenderInfo key) { 
d45 1
a45 1
		this.buffer = new byte[buff.length];
a46 2

		System.arraycopy(buff, 0, this.buffer, 0, buff.length);
d50 1
a50 1
	private RenderInfo key = null;
d64 1
a64 1
	public RenderInfo getKey() {
d102 6
a107 1
			return RenderedImageFactory.getInstance(this.buffer, info);
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 7
/****************************************************************************
Licensed Materials - Property of IBM
(C) Copyright IBM Corp. 2004. All Rights Reserved.

US Government Users Restricted Rights - Use, duplication or disclosure
restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************************/
@

