head	1.6;
access;
symbols
	v20081020-0700:1.6
	v20080722-1827:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080507-2230:1.6
	v20080425-1959:1.6
	v20080331-1625:1.6
	v20080328-1605:1.6
	v20080222-1200:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070330-1300:1.6
	v20070208-1800:1.6
	M4_20:1.6
	v20061218-1500:1.5.2.1
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	v20060919-0800:1.5.2.1
	M1_20:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060526-1200:1.5
	I20060505-1400:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.6
date	2006.10.03.15.05.23;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.10.19.18.31;	author sshaw;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.12.05.19.18.18;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.14.19.37.54;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.24.38;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.46;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.09.13.16.44.44;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory;

import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
import org.eclipse.swt.graphics.RGB;

/**
 * @@author sshaw
 * @@canBeSeenBy org.eclipse.gmf.runtime.draw2d.ui.render.*
 * 
 * Contains information needed by RenderedImage to perform the rendering of the
 * graphics data.
 */
class RenderInfoImpl
	implements RenderInfo {

	private boolean maintainAspectRatio;

	private boolean antialias;

	private int width;

	private int height;

	private RGB fill = null;

	private RGB outline = null;

	/**
	 * getWidth Accessor method to return the width of the rendered image.
	 * 
	 * @@return int width of the rendered image.
	 */
	public int getWidth() {
		return width;
	}

	/**
	 * getHeight Accessor method to return the height of the rendered image.
	 * 
	 * @@return int height of the rendered image.
	 */
	public int getHeight() {
		return height;
	}

	/**
	 * shouldMaintainAspectRatio Accessor method to return whether or not the
	 * aspect ratio is maintained.
	 * 
	 * @@return boolean true if aspect ratio of original vector file is
	 *         maintained, false otherwise.
	 */
	public boolean shouldMaintainAspectRatio() {
		return maintainAspectRatio;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderInfo#shouldAntiAlias()
	 */
	public boolean shouldAntiAlias() {
		return antialias;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo#getBackgroundColor()
	 */
	public RGB getBackgroundColor() {
		if (fill == null)
			return null;
		return new RGB(fill.red, fill.green, fill.blue);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo#getForegroundColor()
	 */
	public RGB getForegroundColor() {
		if (outline == null)
			return null;
		return new RGB(outline.red, outline.green, outline.blue);
	}

	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo#setValues(int, int, boolean, boolean, org.eclipse.swt.graphics.RGB, org.eclipse.swt.graphics.RGB)
	 */
	public void setValues(int width, int height,
			boolean maintainAspectRatio, boolean antialias, RGB fill, RGB outline) {
		this.width = width;
		this.height = height;
		this.fill = fill == null ? null : new RGB(fill.red, fill.green, fill.blue);
		this.outline = outline == null ? null : new RGB(outline.red, outline.green, outline.blue);
		this.maintainAspectRatio = maintainAspectRatio;
		this.antialias = antialias;
	}

	/**
	 * Default Constructor for the SVGInfo class
	 */
	public RenderInfoImpl() {
		super();

		this.width = 0;
		this.height = 0;
		this.fill = null;
		this.outline = null;
		this.maintainAspectRatio = true;
		this.antialias = true;
	}

	/**
	 * Copy Constructor for the SVGInfo class
	 */
	public RenderInfoImpl(RenderInfo info) {
		super();

		this.width = info.getWidth();
		this.height = info.getHeight();
		this.fill = info.getBackgroundColor();
		this.outline = info.getForegroundColor();
		this.maintainAspectRatio = info.shouldMaintainAspectRatio();
		this.antialias = info.shouldAntiAlias();
	}

	/**
	 * Retrieves a hash code value for this output operation. This method is
	 * supported for the benefit of hashtables such as those provided by
	 * <code>java.util.Hashtable</code>.
	 * 
	 * @@return A hash code value for this output operation.
	 * 
	 * @@see Object#hashCode()
	 */
	public int hashCode() {
		int hashCode = (new Integer(width)).hashCode();
		hashCode = hashCode + (new Integer(height)).hashCode();
		hashCode = hashCode + (Boolean.valueOf(maintainAspectRatio)).hashCode();
		hashCode = hashCode + (Boolean.valueOf(antialias)).hashCode();
		if (fill != null)
			hashCode = hashCode + fill.hashCode();
		if (outline != null)
			hashCode = hashCode + outline.hashCode();
		return hashCode;
	}

	/**
	 * @@see java.lang.Object#equals(java.lang.Object)
	 */
	public boolean equals(Object object) {

		RenderInfoImpl info = null;
		if (object instanceof RenderInfoImpl) {
			info = (RenderInfoImpl) object;
		}

		if (info != null
			&& (getWidth() == info.getWidth()
				&& getHeight() == info.getHeight()
				&& shouldMaintainAspectRatio() == info
					.shouldMaintainAspectRatio() && shouldAntiAlias() == info
				.shouldAntiAlias())) {

			if (getBackgroundColor() == null) {
				if (info.getBackgroundColor() != null)
					return false;
			} else if (!getBackgroundColor().equals(info.getBackgroundColor()))
				return false;

			if (getForegroundColor() == null) {
				if (info.getForegroundColor() != null)
					return false;
			} else if (!getForegroundColor().equals(info.getForegroundColor()))
				return false;

			return true;
		}

		return false;
	}

}
@


1.5
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@d2 1
a2 1
 * Copyright (c) 2004 IBM Corporation and others.
@


1.5.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.4
log
@bugzilla 111436 gmf-head sshaw 051205 Improve performance of SVG transcoder
@
text
@a112 39
	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderInfo#getFillColor()
	 */
	public java.awt.Color getFillColor() {
		if (fill != null)
			return new java.awt.Color(fill.red, fill.green, fill.blue);
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderInfo#getOutlineColor()
	 */
	public java.awt.Color getOutlineColor() {
		if (outline != null)
			return new java.awt.Color(outline.red, outline.green, outline.blue);
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderInfo#setValues(int,
	 *      int, boolean)
	 */
	public void setValues(int width, int height, java.awt.Color fill,
			java.awt.Color outline, boolean maintainAspectRatio,
			boolean antialias) {
		this.width = width;
		this.height = height;
		this.fill = fill == null ? null : new RGB(fill.getRed(), fill.getGreen(), fill.getBlue());
		this.outline = outline == null ? null : new RGB(outline.getRed(), outline.getGreen(), outline.getBlue());
		this.maintainAspectRatio = maintainAspectRatio;
		this.antialias = antialias;
	}

@


1.3
log
@bugzilla 112685 gmf-head sshaw 051014 Sweep code for creation of Boolean objects
@
text
@a13 2
import java.awt.Color;

d15 1
a15 1

d20 2
a21 2
 *
 * Contains information needed by RenderedImage to perform the rendering of the 
d24 2
a25 1
public final class RenderInfoImpl implements RenderInfo {
d28 1
d30 1
d32 1
d34 4
a37 2
	private Color fill;
	private Color outline;
d40 4
a43 5
	* getWidth
	* Accessor method to return the width of the rendered image.
	* 
	* @@return int width of the rendered image.
	*/
d49 1
a49 2
	 * getHeight
	 * Accessor method to return the height of the rendered image.
d58 2
a59 2
	 * shouldMaintainAspectRatio
	 * Accessor method to return whether or not the aspect ratio is maintained.
d61 2
a62 1
	 * @@return boolean true if aspect ratio of original vector file is maintained, false otherwise.
d68 3
a70 1
	/* (non-Javadoc)
d76 40
a115 2
	
	/* (non-Javadoc)
d118 4
a121 2
	public Color getFillColor() {
		return fill;
d123 4
a126 2
	
	/* (non-Javadoc)
d129 4
a132 2
	public Color getOutlineColor() {
		return outline;
d135 5
a139 2
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderInfo#setValues(int, int, boolean)
d141 3
a143 6
	public void setValues(
		int width,
		int height,
		Color fill, Color outline,
		boolean maintainAspectRatio,
		boolean antialias) {
d146 2
a147 2
		this.fill = fill;
		this.outline = outline;
d174 2
a175 2
		this.fill = info.getFillColor();
		this.outline = info.getOutlineColor();
d181 2
a182 2
	 * Retrieves a hash code value for this output operation. This method is 
	 * supported for the benefit of hashtables such as those provided by 
d214 8
a221 9
				&& shouldMaintainAspectRatio()
					== info.shouldMaintainAspectRatio()
				&& shouldAntiAlias() == info.shouldAntiAlias())) {
			
			if (getFillColor() == null)	{
				if (info.getFillColor() != null)
					return false;	
			}
			else if (!getFillColor().equals(info.getFillColor()))
d223 3
a225 3
				
			if (getOutlineColor() == null) {
				if (info.getOutlineColor() != null)
d227 1
a227 2
			}
			else if (!getOutlineColor().equals(info.getOutlineColor()))
d229 1
a229 1
				
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d143 2
a144 2
		hashCode = hashCode + (new Boolean(maintainAspectRatio)).hashCode();
		hashCode = hashCode + (new Boolean(antialias)).hashCode();
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

