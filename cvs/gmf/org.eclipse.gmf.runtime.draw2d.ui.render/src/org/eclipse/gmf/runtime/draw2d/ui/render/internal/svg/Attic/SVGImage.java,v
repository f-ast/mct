head	1.6;
access;
symbols
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.3
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.6
date	2006.02.10.19.18.31;	author sshaw;	state dead;
branches;
next	1.5;

1.5
date	2006.01.03.15.15.18;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.05.19.18.18;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.29.16.33.55;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.24.38;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.49;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.6
log
@bugzilla 119319 gmf-head sshaw 060210 Support extensibility for RenderedImageFactory
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.draw2d.ui.render.internal.svg;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.apache.batik.dom.svg.SAXSVGDocumentFactory;
import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.util.XMLResourceDescriptor;
import org.eclipse.gmf.runtime.common.core.util.Log;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.draw2d.ui.render.image.ImageConverter;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.AbstractRenderedImage;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderDebugOptions;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderPlugin;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.Draw2dRenderStatusCodes;
import org.eclipse.gmf.runtime.draw2d.ui.render.internal.factory.RenderedImageKey;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Display;
import org.w3c.dom.Document;

/**
 * Class that represents a SVG image. This is a useful abstraction so that it
 * can be used similar to an SWT Image object.
 *  
 * @@author sshaw
 */
public final class SVGImage extends AbstractRenderedImage {

	/**
	 * Constructor for SVGImage
	 * 
	 * @@param buffer
	 *            byte[] array containing an cached SVG image file.
	 * @@param key
	 *            ImageKey instance which is unique for the byte array.
	 */
	public SVGImage(byte[] buff, RenderedImageKey key) { 
		super(buff, key);
		
		if (key.getExtraData() == null)
			key.setExtraData(getDocument());
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.draw2d.ui.render.internal.AbstractRenderedImage#renderImage()
	 */
	protected Image renderImage() {
		// otherwise render the image.
		try {
			SVGImageConverter converter = new SVGImageConverter();
			return converter.renderSVGtoSWTImage(getDocument(), getRenderInfo());
		} catch (Exception e) {
			try {
				// try rendering to awt since the SWT renderered may not support the SVG image capabilities
				SVGImageConverter converter = new SVGImageConverter();
				BufferedImage img = converter.renderSVGToAWTImage(getDocument(), getRenderInfo());
				return ImageConverter.convert(img);
			} catch (Exception e1) {
				Trace.catching(Draw2dRenderPlugin.getInstance(), Draw2dRenderDebugOptions.EXCEPTIONS_THROWING, getClass(), "getSWTImage()", //$NON-NLS-1$
					e1);

				// handle failure gracefully - we can't predict all the failures
				// that
				// may occur in the 3rd party library.
				return new Image(Display.getDefault(), 8, 8);
			}
		}
	}

	/**
	 * getDocument
	 * Accessor for retrieving the SVG document for this Image
	 * 
	 * @@return SVG Document that represents the image
	 */
	public Document getDocument() {

		Document document = null;
		
		// IF the document has already been created...
		if (getKey().getExtraData() != null) {
			// Return it
			return (Document)getKey().getExtraData();
		}

		// Otherwise Parse the buffer can create the document
		String parser = XMLResourceDescriptor.getXMLParserClassName();
		SAXSVGDocumentFactory f = new SAXSVGDocumentFactory(parser);
		InputStream in = new ByteArrayInputStream(getBuffer());

		try {
			document =
				f.createDocument(SVGDOMImplementation.SVG_NAMESPACE_URI, in);

		} catch (IOException e) {
			// Log the exception to the Error Log
			Log.error(
				Draw2dRenderPlugin.getInstance(),
				Draw2dRenderStatusCodes.SVG_GENERATION_FAILURE,
				e.getMessage());
		}

		return document;
	}

	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
	 */
	public Object getAdapter(Class adapter) {
		if (adapter.equals(BufferedImage.class)) {
			BufferedImage buffImg = null;
			
			// otherwise render the image.
			try {
				SVGImageConverter converter = new SVGImageConverter();
				buffImg = converter.renderSVGToAWTImage(getDocument(), getRenderInfo());
			} catch (Exception e) {
				Trace.catching(Draw2dRenderPlugin.getInstance(), Draw2dRenderDebugOptions.EXCEPTIONS_THROWING, getClass(), "getSWTImage()", //$NON-NLS-1$
				e);

				// handle failure gracefully - we can't predict all the failures
				// that
				// may occur in the 3rd party library.
				buffImg = new BufferedImage(8, 8, BufferedImage.TYPE_INT_ARGB);
			}

			return buffImg;
		}
		
		return super.getAdapter(adapter);
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.render.RenderedImage#getBufferedImage()
	 */
	public BufferedImage getBufferedImage() {
		return (BufferedImage)getAdapter(BufferedImage.class);
	}
}
@


1.5
log
@bugzilla 111436 gmf-head sshaw 060103 Improve performance of SVG transcoder
@
text
@@


1.4
log
@bugzilla 111436 gmf-head sshaw 051205 Improve performance of SVG transcoder
@
text
@d25 1
d67 8
a74 2
			Trace.catching(Draw2dRenderPlugin.getInstance(), Draw2dRenderDebugOptions.EXCEPTIONS_THROWING, getClass(), "getSWTImage()", //$NON-NLS-1$
			e);
d76 5
a80 4
			// handle failure gracefully - we can't predict all the failures
			// that
			// may occur in the 3rd party library.
			return new Image(Display.getDefault(), 8, 8);
@


1.3
log
@bugzilla 111436 gmf-head sshaw 051128 Improve performance of SVG transcoder
@
text
@d57 2
a58 7
	/**
	 * Accessor for retrieving the default image for the rendered SVG data.
	 * This method will render the image if it doesn't exist yet. This allows
	 * for "on-demand" loading. If no-one accesses the image, then it will not
	 * be rendered.
	 * 
	 * @@see com.ibm.xtools.gef.figure.svg.ResizableImage#getDefaultImage()
d60 1
a60 4
	public Image getSWTImage() {
		if (img != null)
			return img;

d64 1
a64 1
			img = converter.renderSVGtoSWTImage(getDocument(), getRenderInfo());
d72 1
a72 1
			img = new Image(Display.getDefault(), 8, 8);
a73 2

		return img;
d112 28
d144 1
a144 17
		BufferedImage buffImg = null;
		
		// otherwise render the image.
		try {
			SVGImageConverter converter = new SVGImageConverter();
			buffImg = converter.renderSVGToAWTImage(getDocument(), getRenderInfo());
		} catch (Exception e) {
			Trace.catching(Draw2dRenderPlugin.getInstance(), Draw2dRenderDebugOptions.EXCEPTIONS_THROWING, getClass(), "getSWTImage()", //$NON-NLS-1$
			e);

			// handle failure gracefully - we can't predict all the failures
			// that
			// may occur in the 3rd party library.
			buffImg = new BufferedImage(8, 8, BufferedImage.TYPE_INT_ARGB);
		}

		return buffImg;
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a21 1
import org.apache.batik.dom.svg.SVGOMDocument;
a22 4
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Display;
import org.w3c.dom.Document;

a24 1
import org.eclipse.gmf.runtime.draw2d.ui.render.RenderInfo;
d29 4
d50 1
a50 1
	public SVGImage(byte[] buff, RenderInfo key) { 
d52 3
a56 2
	private Document document = null;

d72 1
a72 1
			img = converter.renderSVGtoSWTImage(getBuffer(), getRenderInfo());
d94 2
d97 1
a97 1
		if (document != null) {
d99 1
a99 1
			return document;
a109 5
			if (document instanceof SVGOMDocument) {
				SVGColorConverter.getInstance().replaceDocumentColors((SVGOMDocument)document, 
					getRenderInfo().getFillColor(),
					getRenderInfo().getOutlineColor());
			}
d131 1
a131 1
			buffImg = converter.renderSVGToAWTImage(getBuffer(), getRenderInfo());
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 7
/****************************************************************************
  Licensed Materials - Property of IBM
  (C) Copyright IBM Corp. 2002, 2004. All Rights Reserved.
 
  US Government Users Restricted Rights - Use, duplication or disclosure
  restricted by GSA ADP Schedule Contract with IBM Corp.
*****************************************************************************/
@

