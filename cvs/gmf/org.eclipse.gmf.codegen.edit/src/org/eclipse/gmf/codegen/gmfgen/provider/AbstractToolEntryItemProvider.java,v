head	1.5;
access;
symbols
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080722-1827:1.5
	v20080718-1700:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080610-1132:1.5
	v20080521:1.5
	v20080512-1200:1.5
	v20080508-2000:1.5
	v20080507-1326:1.5
	v20080425-1959:1.5
	v20080417-1610:1.5
	v20080322-0000:1.5
	v20080222-1200:1.4
	v20071130-1111:1.4
	v20071124-0000:1.3
	v20071003-0000:1.4
	v20070921-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.4
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070427-0600:1.3
	v20070413-1300:1.3
	v20070403-1500:1.3
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061218-1200:1.1
	v20061214-0000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2008.03.03.17.45.17;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	161e47cc392a4567;

1.4
date	2007.06.28.15.32.52;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	446e4683d4a44567;

1.3
date	2007.04.03.16.29.55;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	5ebd461280e04567;

1.2
date	2007.03.14.14.39.04;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	43e345f808fc4567;

1.1
date	2006.11.22.20.09.47;	author atikhomirov;	state Exp;
branches;
next	;
commitid	29264564ae8a4567;


desc
@@


1.5
log
@regenerated with EMF 2.4M5
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.codegen.gmfgen.AbstractToolEntry;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.codegen.gmfgen.AbstractToolEntry} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class AbstractToolEntryItemProvider
	extends EntryBaseItemProvider
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public AbstractToolEntryItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addDefaultPropertyDescriptor(object);
			addQualifiedToolNamePropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Default feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addDefaultPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_AbstractToolEntry_default_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_AbstractToolEntry_default_feature", "_UI_AbstractToolEntry_type"),
				 GMFGenPackage.eINSTANCE.getAbstractToolEntry_Default(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
				 getString("_UI_ToolPropertyCategory"),
				 null));
	}

	/**
	 * This adds a property descriptor for the Qualified Tool Name feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addQualifiedToolNamePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_AbstractToolEntry_qualifiedToolName_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_AbstractToolEntry_qualifiedToolName_feature", "_UI_AbstractToolEntry_type"),
				 GMFGenPackage.eINSTANCE.getAbstractToolEntry_QualifiedToolName(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 getString("_UI_ToolPropertyCategory"),
				 null));
	}

	/**
	 * This specifies how to implement {@@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@@link org.eclipse.emf.edit.command.AddCommand}, {@@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@@link org.eclipse.emf.edit.command.MoveCommand} in {@@link #createCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Collection<? extends EStructuralFeature> getChildrenFeatures(Object object) {
		if (childrenFeatures == null) {
			super.getChildrenFeatures(object);
			childrenFeatures.add(GMFGenPackage.eINSTANCE.getAbstractToolEntry_Properties());
		}
		return childrenFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EStructuralFeature getChildFeature(Object object, Object child) {
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String getText(Object object) {
		String label = ((AbstractToolEntry)object).getTitle();
		return label == null || label.length() == 0 ?
			getString("_UI_AbstractToolEntry_type") :
			getString("_UI_AbstractToolEntry_type") + " " + label;
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(AbstractToolEntry.class)) {
			case GMFGenPackage.ABSTRACT_TOOL_ENTRY__DEFAULT:
			case GMFGenPackage.ABSTRACT_TOOL_ENTRY__QUALIFIED_TOOL_NAME:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
				return;
			case GMFGenPackage.ABSTRACT_TOOL_ENTRY__PROPERTIES:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void collectNewChildDescriptorsGen(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);
	}

	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		collectNewChildDescriptorsGen(newChildDescriptors, object);
		newChildDescriptors.add(createChildParameter(GMFGenPackage.eINSTANCE.getAbstractToolEntry_Properties(), EcoreFactory.eINSTANCE.create(EcorePackage.eINSTANCE.getEStringToStringMapEntry())));
	}

}
@


1.4
log
@[193303] Update categories of gmfgen model properties
@
text
@a14 1
import org.eclipse.emf.common.util.ResourceLocator;
a28 1
import org.eclipse.gmf.codegen.gmfgen.presentation.EditorPlugin;
a197 11
	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public ResourceLocator getResourceLocator() {
		return EditorPlugin.INSTANCE;
	}

@


1.3
log
@EMF.Edit and editor were regenerated with EMF M6
@
text
@d91 1
a91 1
				 null,
d113 1
a113 1
				 null,
d155 1
a155 1
		String label = ((AbstractToolEntry)object).getCreateMethodName();
@


1.2
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a14 1

a15 1

a16 1
import org.eclipse.emf.edit.command.CommandParameter;
a27 1

a29 1

d185 2
a186 2
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
d191 1
a191 1
	protected void collectNewChildDescriptorsGen(Collection<CommandParameter> newChildDescriptors, Object object) {
d195 1
a195 1
	protected void collectNewChildDescriptors(Collection<CommandParameter> newChildDescriptors, Object object) {
@


1.1
log
@[164021] allow to choose standard tools
@
text
@d18 2
d25 1
d67 2
a68 1
	public List getPropertyDescriptors(Object object) {
d130 2
a131 1
	public Collection getChildrenFeatures(Object object) {
d140 13
d158 1
d173 1
d196 1
a196 1
	protected void collectNewChildDescriptorsGen(Collection newChildDescriptors, Object object) {
d200 1
a200 1
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
d211 1
@

