head	1.9;
access;
symbols
	v20081015-1925:1.9
	v20081008-1925:1.9
	v20080924-1925:1.9
	v20080917-1925:1.9
	v20080903-1520:1.9
	v20080827-1520:1.9
	v20080813-1520:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2005.10.26.18.43.50;	author atikhomirov;	state dead;
branches;
next	1.8;

1.8
date	2005.10.21.13.32.04;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.20.16.04.37;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.13.12.45.45;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.11.16.43.46;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.11.12.25.37;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.03.19.08.56;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.29.09.49.28;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.21.38;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EStructuralFeature;

import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenBaseElement;
import org.eclipse.gmf.codegen.gmfgen.presentation.EditorPlugin;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.codegen.gmfgen.GenBaseElement} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class GenBaseElementItemProvider
	extends GenCommonBaseItemProvider
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenBaseElementItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public List getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

		}
		return itemPropertyDescriptors;
	}

	/**
	 * This specifies how to implement {@@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@@link org.eclipse.emf.edit.command.AddCommand}, {@@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@@link org.eclipse.emf.edit.command.MoveCommand} in {@@link #createCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Collection getChildrenFeatures(Object object) {
		if (childrenFeatures == null) {
			super.getChildrenFeatures(object);
			childrenFeatures.add(GMFGenPackage.eINSTANCE.getGenBaseElement_ModelElementSelector());
			childrenFeatures.add(GMFGenPackage.eINSTANCE.getGenBaseElement_ModelElementInitializer());
		}
		return childrenFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EStructuralFeature getChildFeature(Object object, Object child) {
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getText(Object object) {
		String label = ((GenBaseElement)object).getEditPartClassName();
		return label == null || label.length() == 0 ?
			getString("_UI_GenBaseElement_type") :
			getString("_UI_GenBaseElement_type") + " " + label;
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(GenBaseElement.class)) {
			case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_SELECTOR:
			case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_INITIALIZER:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);

		newChildDescriptors.add
			(createChildParameter
				(GMFGenPackage.eINSTANCE.getGenBaseElement_ModelElementSelector(),
				 GMFGenFactory.eINSTANCE.createModelElementSelector()));

		newChildDescriptors.add
			(createChildParameter
				(GMFGenPackage.eINSTANCE.getGenBaseElement_ModelElementInitializer(),
				 GMFGenFactory.eINSTANCE.createGenFeatureSeqInitializer()));
	}

	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ResourceLocator getResourceLocator() {
		return EditorPlugin.INSTANCE;
	}

}
@


1.8
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@@


1.7
log
@[rdvorak] #113224 Generate custom initialization code for domain model elements
@
text
@a63 2
			addDomainNameFeaturePropertyDescriptor(object);
			addContainmentMetaFeaturePropertyDescriptor(object);
a68 40
	 * This adds a property descriptor for the Domain Name Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addDomainNameFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_GenBaseElement_domainNameFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_GenBaseElement_domainNameFeature_feature", "_UI_GenBaseElement_type"),
				 GMFGenPackage.eINSTANCE.getGenBaseElement_DomainNameFeature(),
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Containment Meta Feature feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addContainmentMetaFeaturePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_GenBaseElement_containmentMetaFeature_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_GenBaseElement_containmentMetaFeature_feature", "_UI_GenBaseElement_type"),
				 GMFGenPackage.eINSTANCE.getGenBaseElement_ContainmentMetaFeature(),
				 true,
				 null,
				 null,
				 null));
	}

	/**
a78 1
			childrenFeatures.add(GMFGenPackage.eINSTANCE.getGenBaseElement_Viewmap());
a120 1
			case GMFGenPackage.GEN_BASE_ELEMENT__VIEWMAP:
a140 10
				(GMFGenPackage.eINSTANCE.getGenBaseElement_Viewmap(),
				 GMFGenFactory.eINSTANCE.createBasicNodeViewmap()));

		newChildDescriptors.add
			(createChildParameter
				(GMFGenPackage.eINSTANCE.getGenBaseElement_Viewmap(),
				 GMFGenFactory.eINSTANCE.createDecoratedConnectionViewmap()));

		newChildDescriptors.add
			(createChildParameter
@


1.6
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@d123 1
d166 1
d197 5
@


1.5
log
@#111775 cleanup in gmfgen - unused attributes gone
@
text
@d16 2
a23 1
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
d122 1
d128 12
d164 1
d190 5
@


1.4
log
@#112191 colors as Viewmap's Attributes
@
text
@a64 1
			addNotationViewFactoryClassNamePropertyDescriptor(object);
a109 20
	 * This adds a property descriptor for the Notation View Factory Class Name feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addNotationViewFactoryClassNamePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_GenBaseElement_notationViewFactoryClassName_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_GenBaseElement_notationViewFactoryClassName_feature", "_UI_GenBaseElement_type"),
				 GMFGenPackage.eINSTANCE.getGenBaseElement_NotationViewFactoryClassName(),
				 true,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
a148 3
			case GMFGenPackage.GEN_BASE_ELEMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
				return;
@


1.3
log
@figure class could be specified in .gmfgen along with dependent attributes. Notion of "Viewmap" captures that (visualization) information
@
text
@a63 1
			addForegroundColorPropertyDescriptor(object);
a90 20
	 * This adds a property descriptor for the Foreground Color feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addForegroundColorPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_GenBaseElement_foregroundColor_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_GenBaseElement_foregroundColor_feature", "_UI_GenBaseElement_type"),
				 GMFGenPackage.eINSTANCE.getGenBaseElement_ForegroundColor(),
				 true,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
a169 1
			case GMFGenPackage.GEN_BASE_ELEMENT__FOREGROUND_COLOR:
@


1.2
log
@[dstadnik] Use Notation Model as runtime model
@
text
@a14 1

a15 1

d24 1
a24 1

a26 1

d152 16
d195 3
d211 10
@


1.1
log
@*** empty log message ***
@
text
@d69 1
d135 20
d179 1
@

