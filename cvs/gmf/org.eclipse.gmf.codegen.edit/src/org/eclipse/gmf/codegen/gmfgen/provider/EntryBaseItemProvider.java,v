head	1.11;
access;
symbols
	v20081015-1925:1.11
	v20081008-1925:1.11
	v20080924-1925:1.11
	v20080917-1925:1.11
	v20080903-1520:1.11
	v20080827-1520:1.11
	v20080813-1520:1.11
	v20080722-1827:1.11
	v20080718-1700:1.11
	v20080716-1642:1.11
	R2_1_maintenance:1.11.0.2
	Root_R2_1_maintenance:1.11
	R2_1_0:1.11
	v20080610-1132:1.11
	v20080521:1.11
	v20080512-1200:1.11
	v20080508-2000:1.11
	v20080507-1326:1.11
	v20080425-1959:1.11
	v20080417-1610:1.11
	v20080322-0000:1.11
	v20080222-1200:1.10
	v20071130-1111:1.10
	v20071124-0000:1.9
	v20071003-0000:1.10
	v20070921-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.10
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070520-1200:1.9
	v20070518-1300:1.9
	v20070504-1000:1.9
	v20070427-0600:1.9
	v20070413-1300:1.9
	v20070403-1500:1.9
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070208-1800:1.7
	v20070103-0300:1.7
	M4_20:1.7
	v20061222-1800:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	v20061120-1300:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061013-1330:1.7
	M1_20:1.7
	v20060904-1500:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.6
	v20060620-0400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-0800:1.6
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2008.03.03.18.38.20;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	61fc47cc45964567;

1.10
date	2007.06.28.15.32.52;	author dstadnik;	state Exp;
branches;
next	1.9;
commitid	446e4683d4a44567;

1.9
date	2007.04.03.16.29.56;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	5ebd461280e04567;

1.8
date	2007.03.14.14.39.04;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	43e345f808fc4567;

1.7
date	2006.06.27.09.26.23;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.17.14.22.35;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.19.19.42.10;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.19.14.59.27;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.13.17.11.23;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.03.19.08.56;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.21.38;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.11
log
@[220598] Utilize EMF child extenders for GMF models
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ItemProviderAdapter;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.codegen.gmfgen.EntryBase;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.codegen.gmfgen.EntryBase} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class EntryBaseItemProvider
	extends ItemProviderAdapter
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EntryBaseItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addTitlePropertyDescriptor(object);
			addDescriptionPropertyDescriptor(object);
			addLargeIconPathPropertyDescriptor(object);
			addSmallIconPathPropertyDescriptor(object);
			addCreateMethodNamePropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Title feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addTitlePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_EntryBase_title_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_EntryBase_title_feature", "_UI_EntryBase_type"),
				 GMFGenPackage.eINSTANCE.getEntryBase_Title(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 getString("_UI_EntryPropertyCategory"),
				 null));
	}

	/**
	 * This adds a property descriptor for the Description feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addDescriptionPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_EntryBase_description_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_EntryBase_description_feature", "_UI_EntryBase_type"),
				 GMFGenPackage.eINSTANCE.getEntryBase_Description(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 getString("_UI_EntryPropertyCategory"),
				 null));
	}

	/**
	 * This adds a property descriptor for the Large Icon Path feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addLargeIconPathPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_EntryBase_largeIconPath_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_EntryBase_largeIconPath_feature", "_UI_EntryBase_type"),
				 GMFGenPackage.eINSTANCE.getEntryBase_LargeIconPath(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 getString("_UI_EntryPropertyCategory"),
				 null));
	}

	/**
	 * This adds a property descriptor for the Small Icon Path feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addSmallIconPathPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_EntryBase_smallIconPath_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_EntryBase_smallIconPath_feature", "_UI_EntryBase_type"),
				 GMFGenPackage.eINSTANCE.getEntryBase_SmallIconPath(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 getString("_UI_EntryPropertyCategory"),
				 null));
	}

	/**
	 * This adds a property descriptor for the Create Method Name feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addCreateMethodNamePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_EntryBase_createMethodName_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_EntryBase_createMethodName_feature", "_UI_EntryBase_type"),
				 GMFGenPackage.eINSTANCE.getEntryBase_CreateMethodName(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 getString("_UI_EntryPropertyCategory"),
				 null));
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String getText(Object object) {
		String label = ((EntryBase)object).getTitle();
		return label == null || label.length() == 0 ?
			getString("_UI_EntryBase_type") :
			getString("_UI_EntryBase_type") + " " + label;
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(EntryBase.class)) {
			case GMFGenPackage.ENTRY_BASE__TITLE:
			case GMFGenPackage.ENTRY_BASE__DESCRIPTION:
			case GMFGenPackage.ENTRY_BASE__LARGE_ICON_PATH:
			case GMFGenPackage.ENTRY_BASE__SMALL_ICON_PATH:
			case GMFGenPackage.ENTRY_BASE__CREATE_METHOD_NAME:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);
	}

	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public ResourceLocator getResourceLocator() {
		return ((IChildCreationExtender)adapterFactory).getResourceLocator();
	}

}
@


1.10
log
@[193303] Update categories of gmfgen model properties
@
text
@d17 1
a28 1
import org.eclipse.gmf.codegen.gmfgen.presentation.EditorPlugin;
d241 1
a241 1
		return EditorPlugin.INSTANCE;
@


1.9
log
@EMF.Edit and editor were regenerated with EMF M6
@
text
@d192 1
a192 1
		String label = ((EntryBase)object).getCreateMethodName();
@


1.8
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a15 1
import org.eclipse.emf.edit.command.CommandParameter;
d222 2
a223 2
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
d229 1
a229 1
	protected void collectNewChildDescriptors(Collection<CommandParameter> newChildDescriptors, Object object) {
@


1.7
log
@add property categories
@
text
@d16 1
d20 1
d61 2
a62 1
	public List getPropertyDescriptors(Object object) {
d191 1
d206 1
d229 2
a230 1
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
d240 1
@


1.6
log
@#139127 Provide an option for labels to display node icon
@
text
@d90 1
a90 1
				 null,
d112 1
a112 1
				 null,
d134 1
a134 1
				 null,
d156 1
a156 1
				 null,
d178 1
a178 1
				 null,
@


1.5
log
@#131270 Duplicated tool entries when same tool definition is referenced from gmfmap.
@
text
@d87 2
d109 2
d131 2
d153 2
d175 2
@


1.4
log
@#124466
entryID attribute introduced to avoid duplicate names generation
@
text
@d63 2
a64 3
			addOrderPropertyDescriptor(object);
			addTitleKeyPropertyDescriptor(object);
			addDescriptionKeyPropertyDescriptor(object);
a67 1
			addEntryIDPropertyDescriptor(object);
d73 1
a73 1
	 * This adds a property descriptor for the Order feature.
d78 1
a78 1
	protected void addOrderPropertyDescriptor(Object object) {
d83 3
a85 23
				 getString("_UI_EntryBase_order_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_EntryBase_order_feature", "_UI_EntryBase_type"),
				 GMFGenPackage.eINSTANCE.getEntryBase_Order(),
				 true,
				 ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Title Key feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addTitleKeyPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_EntryBase_titleKey_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_EntryBase_titleKey_feature", "_UI_EntryBase_type"),
				 GMFGenPackage.eINSTANCE.getEntryBase_TitleKey(),
d93 1
a93 1
	 * This adds a property descriptor for the Description Key feature.
d98 1
a98 1
	protected void addDescriptionKeyPropertyDescriptor(Object object) {
d103 3
a105 3
				 getString("_UI_EntryBase_descriptionKey_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_EntryBase_descriptionKey_feature", "_UI_EntryBase_type"),
				 GMFGenPackage.eINSTANCE.getEntryBase_DescriptionKey(),
a172 20
	 * This adds a property descriptor for the Entry ID feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addEntryIDPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_EntryBase_entryID_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_EntryBase_entryID_feature", "_UI_EntryBase_type"),
				 GMFGenPackage.eINSTANCE.getEntryBase_EntryID(),
				 true,
				 ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
d196 2
a197 3
			case GMFGenPackage.ENTRY_BASE__ORDER:
			case GMFGenPackage.ENTRY_BASE__TITLE_KEY:
			case GMFGenPackage.ENTRY_BASE__DESCRIPTION_KEY:
a200 1
			case GMFGenPackage.ENTRY_BASE__ENTRY_ID:
@


1.3
log
@#120553
- Adding accessors for the palette entries factory methods into genmodel
- Refreshing unit-tests
- Fixing some old problems found by this refreshment.
@
text
@d69 1
d195 20
d244 1
@


1.2
log
@figure class could be specified in .gmfgen along with dependent attributes. Notion of "Viewmap" captures that (visualization) information
@
text
@d68 1
d174 20
d200 4
a203 2
		EntryBase entryBase = (EntryBase)object;
		return getString("_UI_EntryBase_type") + " " + entryBase.getOrder();
d222 1
@


1.1
log
@*** empty log message ***
@
text
@a14 1

a15 1

a24 1

a26 1

@

