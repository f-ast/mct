head	1.18;
access;
symbols
	v20081015-1925:1.18
	v20081008-1925:1.18
	v20080924-1925:1.18
	v20080917-1925:1.18
	v20080903-1520:1.18
	v20080827-1520:1.17
	v20080813-1520:1.16
	v20080722-1827:1.15
	v20080718-1700:1.15
	v20080716-1642:1.15
	R2_1_maintenance:1.15.0.2
	Root_R2_1_maintenance:1.15
	R2_1_0:1.15
	v20080610-1132:1.15
	v20080521:1.15
	v20080512-1200:1.15
	v20080508-2000:1.15
	v20080507-1326:1.15
	v20080425-1959:1.15
	v20080417-1610:1.15
	v20080322-0000:1.15
	v20080222-1200:1.13
	v20071130-1111:1.13
	v20071124-0000:1.13
	v20071003-0000:1.13
	v20070921-0000:1.13
	v20070915-0000:1.13
	v20070903-0000:1.13
	v20070809-0000:1.13
	R2_0_maintenance:1.13.0.2
	R2_0:1.13
	R4_20:1.13
	RC3_20:1.13
	v20070614-1400:1.13
	v20070601-1400:1.13
	v20070525-1500:1.13
	v20070520-1200:1.12
	v20070518-1300:1.12
	v20070504-1000:1.12
	v20070427-0600:1.11
	v20070413-1300:1.10
	v20070403-1500:1.10
	v20070330-1300:1.9
	v20060330-1300:1.9
	v20070322-1100:1.9
	v20060316-0600:1.9
	v20070208-1800:1.8
	v20070103-0300:1.8
	M4_20:1.8
	v20061222-1800:1.8
	v20061218-1200:1.8
	v20061214-0000:1.8
	v20061120-1300:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061013-1330:1.5
	M1_20:1.5
	v20060904-1500:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060620-0400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-0800:1.5
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.18
date	2008.08.29.16.09.53;	author atikhomirov;	state Exp;
branches;
next	1.17;
commitid	4a1648b81f4f4567;

1.17
date	2008.08.25.16.54.53;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	58e48b2e3db4567;

1.16
date	2008.08.13.13.51.07;	author dstadnik;	state Exp;
branches;
next	1.15;
commitid	45a448a2e6c74567;

1.15
date	2008.03.03.18.38.20;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	61fc47cc45964567;

1.14
date	2008.03.03.17.45.17;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	161e47cc392a4567;

1.13
date	2007.05.23.17.30.44;	author dstadnik;	state Exp;
branches;
next	1.12;
commitid	15fb46547a444567;

1.12
date	2007.05.03.09.59.00;	author dstadnik;	state Exp;
branches;
next	1.11;
commitid	51f44639b2634567;

1.11
date	2007.04.26.14.11.58;	author dstadnik;	state Exp;
branches;
next	1.10;
commitid	4c834630b32c4567;

1.10
date	2007.04.03.16.29.56;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	5ebd461280e04567;

1.9
date	2007.03.14.14.39.04;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	43e345f808fc4567;

1.8
date	2006.10.18.14.21.29;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.10.18.09.56.52;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.17.13.08.13;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.17.14.22.35;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.07.14.08.47;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.03.18.32.38;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.06.14.30.05;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.03.12.37.53;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.18
log
@[244419] Support for custom parser - finalize parsers/labelmodelfacet relationship
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.provider;


import java.util.Collection;
import java.util.List;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.emf.edit.provider.ItemPropertyDescriptor;
import org.eclipse.emf.edit.provider.ViewerNotification;
import org.eclipse.gmf.codegen.gmfgen.FeatureLabelModelFacet;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;

/**
 * This is the item provider adapter for a {@@link org.eclipse.gmf.codegen.gmfgen.FeatureLabelModelFacet} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @@generated
 */
public class FeatureLabelModelFacetItemProvider
	extends LabelModelFacetItemProvider
	implements	
		IEditingDomainItemProvider,	
		IStructuredItemContentProvider,	
		ITreeItemContentProvider,	
		IItemLabelProvider,	
		IItemPropertySource {
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FeatureLabelModelFacetItemProvider(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {
		if (itemPropertyDescriptors == null) {
			super.getPropertyDescriptors(object);

			addMetaFeaturesPropertyDescriptor(object);
			addEditableMetaFeaturesPropertyDescriptor(object);
			addViewPatternPropertyDescriptor(object);
			addEditorPatternPropertyDescriptor(object);
			addEditPatternPropertyDescriptor(object);
			addViewMethodPropertyDescriptor(object);
			addEditMethodPropertyDescriptor(object);
		}
		return itemPropertyDescriptors;
	}

	/**
	 * This adds a property descriptor for the Meta Features feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addMetaFeaturesPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelModelFacet_metaFeatures_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelModelFacet_metaFeatures_feature", "_UI_FeatureLabelModelFacet_type"),
				 GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_MetaFeatures(),
				 true,
				 false,
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Editable Meta Features feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addEditableMetaFeaturesPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelModelFacet_editableMetaFeatures_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelModelFacet_editableMetaFeatures_feature", "_UI_FeatureLabelModelFacet_type"),
				 GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_EditableMetaFeatures(),
				 true,
				 false,
				 true,
				 null,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the View Pattern feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addViewPatternPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelModelFacet_viewPattern_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelModelFacet_viewPattern_feature", "_UI_FeatureLabelModelFacet_type"),
				 GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_ViewPattern(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Editor Pattern feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addEditorPatternPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelModelFacet_editorPattern_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelModelFacet_editorPattern_feature", "_UI_FeatureLabelModelFacet_type"),
				 GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_EditorPattern(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the View Method feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addViewMethodPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelModelFacet_viewMethod_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelModelFacet_viewMethod_feature", "_UI_FeatureLabelModelFacet_type"),
				 GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_ViewMethod(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Edit Pattern feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addEditPatternPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelModelFacet_editPattern_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelModelFacet_editPattern_feature", "_UI_FeatureLabelModelFacet_type"),
				 GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_EditPattern(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This adds a property descriptor for the Edit Method feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addEditMethodPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelModelFacet_editMethod_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelModelFacet_editMethod_feature", "_UI_FeatureLabelModelFacet_type"),
				 GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_EditMethod(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
	 * This returns FeatureLabelModelFacet.gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object getImage(Object object) {
		return overlayImage(object, getResourceLocator().getImage("full/obj16/FeatureLabelModelFacet"));
	}

	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	@@Override
	public String getText(Object object) {
		StringBuffer sb = new StringBuffer();
		for (GenFeature feature : ((FeatureLabelModelFacet) object).getMetaFeatures()) {
			if (sb.length() > 0) {
				sb.append(", "); //$NON-NLS-1$
			}
			sb.append(feature.getName());
		}
		return getString("_UI_FeatureLabelModelFacet_type") + " " + sb.toString();
	}

	/**
	 * This handles model notifications by calling {@@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void notifyChanged(Notification notification) {
		updateChildren(notification);

		switch (notification.getFeatureID(FeatureLabelModelFacet.class)) {
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_PATTERN:
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDITOR_PATTERN:
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN:
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_METHOD:
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_METHOD:
				fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), false, true));
				return;
		}
		super.notifyChanged(notification);
	}

	/**
	 * This adds {@@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {
		super.collectNewChildDescriptors(newChildDescriptors, object);
	}

}
@


1.17
log
@[235113] alternative parser access, step 1: introduce separate entity into genmodel to keep track of attributes related to parsing
@
text
@a15 1
import org.eclipse.emf.common.util.ResourceLocator;
a16 1
import org.eclipse.emf.edit.provider.IChildCreationExtender;
a23 1
import org.eclipse.emf.edit.provider.ItemProviderAdapter;
d35 1
a35 1
	extends ItemProviderAdapter
a69 1
			addParserPropertyDescriptor(object);
a228 22
	 * This adds a property descriptor for the Parser feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addParserPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelModelFacet_parser_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelModelFacet_parser_feature", "_UI_FeatureLabelModelFacet_type"),
				 GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_Parser(),
				 true,
				 false,
				 true,
				 null,
				 null,
				 null));
	}

	/**
a291 11
	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public ResourceLocator getResourceLocator() {
		return ((IChildCreationExtender)adapterFactory).getResourceLocator();
	}

@


1.16
log
@[231322] allow to specify editable features
@
text
@d73 1
d233 22
@


1.15
log
@[220598] Utilize EMF child extenders for GMF models
@
text
@d67 1
d100 22
@


1.14
log
@regenerated with EMF 2.4M5
@
text
@d18 1
a29 1
import org.eclipse.gmf.codegen.gmfgen.presentation.EditorPlugin;
d280 1
a280 1
		return EditorPlugin.INSTANCE;
@


1.13
log
@fix labels
@
text
@a16 1
import org.eclipse.emf.ecore.EStructuralFeature;
@


1.12
log
@refactor message format parser; introduce editor pattern
@
text
@d13 1
d17 1
d224 1
a224 1
	 * @@generated
d228 8
a235 4
		String label = ((FeatureLabelModelFacet)object).getViewPattern();
		return label == null || label.length() == 0 ?
			getString("_UI_FeatureLabelModelFacet_type") :
			getString("_UI_FeatureLabelModelFacet_type") + " " + label;
@


1.11
log
@additional methods to produce label text and parse user input
@
text
@d67 2
a69 1
			addEditPatternPropertyDescriptor(object);
d120 22
d245 2
a247 1
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN:
@


1.10
log
@EMF.Edit and editor were regenerated with EMF M6
@
text
@d67 1
d69 1
d119 22
d163 22
d222 1
d224 1
@


1.9
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a14 1

a15 2

import org.eclipse.emf.edit.command.CommandParameter;
a25 1

a27 1

d184 2
a185 2
	 * This adds to the collection of {@@link org.eclipse.emf.edit.command.CommandParameter}s
	 * describing all of the children that can be created under this object.
d191 1
a191 1
	protected void collectNewChildDescriptors(Collection<CommandParameter> newChildDescriptors, Object object) {
@


1.8
log
@#161380 simplify feature model facets
@
text
@d18 1
d22 1
d65 2
a66 1
	public List getPropertyDescriptors(Object object) {
d149 1
d160 1
d175 1
d195 2
a196 1
	protected void collectNewChildDescriptors(Collection newChildDescriptors, Object object) {
d206 1
@


1.7
log
@#161380 move readOnly back to GenLabel
@
text
@d25 1
d40 1
a40 1
	extends FeatureModelFacetItemProvider
d67 1
d75 22
@


1.6
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@a65 1
			addReadOnlyPropertyDescriptor(object);
a72 22
	 * This adds a property descriptor for the Read Only feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addReadOnlyPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_LabelModelFacet_readOnly_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_LabelModelFacet_readOnly_feature", "_UI_LabelModelFacet_type"),
				 GMFGenPackage.eINSTANCE.getLabelModelFacet_ReadOnly(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
d133 4
a136 2
		FeatureLabelModelFacet featureLabelModelFacet = (FeatureLabelModelFacet)object;
		return getString("_UI_FeatureLabelModelFacet_type") + " " + featureLabelModelFacet.isReadOnly();
a149 1
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__READ_ONLY:
@


1.5
log
@#139127 Provide an option for labels to display node icon
@
text
@d66 1
d74 22
d156 2
a157 4
		String label = ((FeatureLabelModelFacet)object).getViewPattern();
		return label == null || label.length() == 0 ?
			getString("_UI_FeatureLabelModelFacet_type") :
			getString("_UI_FeatureLabelModelFacet_type") + " " + label;
d171 1
@


1.4
log
@#130715 Use default label text defined in gmfgraph model
@
text
@d87 2
d109 2
@


1.3
log
@[rdvorak] #114196 Allow for the definition of diagram validation rules
@
text
@a65 1
			addDefaultTextPropertyDescriptor(object);
a72 20
	 * This adds a property descriptor for the Default Text feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected void addDefaultTextPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_FeatureLabelModelFacet_defaultText_feature"),
				 getString("_UI_PropertyDescriptor_description", "_UI_FeatureLabelModelFacet_defaultText_feature", "_UI_FeatureLabelModelFacet_type"),
				 GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet_DefaultText(),
				 true,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}

	/**
d129 1
a129 1
		String label = ((FeatureLabelModelFacet)object).getDefaultText();
a145 1
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__DEFAULT_TEXT:
@


1.2
log
@#111949 Provide a possibility to invoke inplace for inner elements with empty name
@
text
@d140 1
a140 1
		return getResourceLocator().getImage("full/obj16/FeatureLabelModelFacet");
@


1.1
log
@refactor feature model facet; use distinct feature-based model facets for links and labels
@
text
@d66 1
d74 20
d150 1
a150 1
		String label = ((FeatureLabelModelFacet)object).getViewPattern();
d167 1
@

