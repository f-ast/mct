head	1.3;
access;
symbols
	v20070208-1800:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	M1_20:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	RC2_10:1.2
	I20060505-1400:1.2
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.02.09.20.08.32;	author atikhomirov;	state dead;
branches;
next	1.2;
commitid	179c45ccd4b34567;

1.2
date	2006.05.05.16.31.18;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.12.33.35;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[173496] akarjakina - updated gmfgraph.editor bootstrap sample with recent GMF changes
@
text
@public class CLASS {

// [graphdef++]
	private java.util.Map myMethodsMap;
	
	private java.util.Set mySkippedDataTypeFeatures;
	
	private java.util.Set myAllowedNonDataTypeFeatures;

	private java.util.Map getMethodsMap() {
		if (myMethodsMap == null) {
			myMethodsMap = new java.util.HashMap();
			myMethodsMap.put("XorFill", "myFigure.setFillXOR");
			myMethodsMap.put("XorOutline", "myFigure.setOutlineXOR");
			myMethodsMap.put("LineKind", "myFigure.setLineStyle");
			myMethodsMap.put("CornerWidth", "myFigure.setCornerDimensions");
			myMethodsMap.put("CornerHeight", "myFigure.setCornerDimensions");
			myMethodsMap.put("Template", "myFigure.setPoints");
		}
		return myMethodsMap;
	}
	
	private java.util.Set getSkippedDataTypeFeatures() {
		if (mySkippedDataTypeFeatures == null) {
			mySkippedDataTypeFeatures = new java.util.HashSet();
			mySkippedDataTypeFeatures.add("name");
		}
		return mySkippedDataTypeFeatures;
	}
	
	private java.util.Set getAllowedNonDataTypeFeatures() {
		if (myAllowedNonDataTypeFeatures == null) {
			myAllowedNonDataTypeFeatures = new java.util.HashSet();
			myAllowedNonDataTypeFeatures.add("layout");
			myAllowedNonDataTypeFeatures.add("layoutData");
			myAllowedNonDataTypeFeatures.add("layout");
			myAllowedNonDataTypeFeatures.add("template");
		}
		return myAllowedNonDataTypeFeatures;
	}
	
	protected final boolean skip(GenFeature feature) {
		if (feature.getTypeGenClassifier() instanceof GenDataType) {
			return getSkippedDataTypeFeatures().contains(feature.getName());
		}
		return !getAllowedNonDataTypeFeatures().contains(feature.getName());
	}
	
	private final StringBuffer getValue(String modelElementVariable, GenFeature feature) {
		StringBuffer result = new StringBuffer();
		String featureName = feature.getName();
		if ("cornerWidth".equals(featureName) || "cornerHeight".equals(featureName)) {
			result.append("getMapMode().DPtoLP(");
			result.append(modelElementVariable);
			result.append(".getCornerWidth()), getMapMode().DPtoLP(");
			result.append(modelElementVariable);
			result.append(".getCornerHeight())");
		} else {
			result.append(modelElementVariable);
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result;
	}
	
	private final void transform(StringBuffer value, GenFeature feature) {
		String featureName = feature.getName();
		if ("cornerWidth".equals(featureName) || "cornerHeight".equals(featureName)) {
			value.insert(0, "new org.eclipse.draw2d.geometry.Dimension(");
			value.append(")");
		} else if ("lineKind".equals(featureName)) {
			value.insert(0, "getLineStyle(");
			value.append(")");
		} else if ("template".equals(featureName)) {
			value.insert(0, "getPointList(");
			value.append(")");
		}
	}
	
	private final void setValue(StringBuffer value, GenFeature feature) {
		value.insert(0, "(");
		java.util.Map map = getMethodsMap();
		String accessorName = feature.getAccessorName();
		if (map.containsKey(accessorName)) {
			value.insert(0, (String) map.get(accessorName));
		} else {
			if (feature.getTypeGenClassifier() instanceof GenDataType) {
				value.insert(0, accessorName);
				value.insert(0, "myFigure.set");
			} else {
				value.insert(0, "Changed");
				value.insert(0, feature.getName());
			}
		}	
		value.append(")");
	}
	
	protected final String getProcessChangesCall(String modelElementVariable, GenFeature feature) {
		StringBuffer result = getValue(modelElementVariable, feature);
		transform(result, feature);
		setValue(result, feature);
		return result.toString();
	}
// [graphdef--] 

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument) {
		return "";
	}
   
}@


1.2
log
@Polylines partually supported.
@
text
@@


1.1
log
@Initial import
@
text
@d4 5
a8 1
	private java.util.Map myMap;
d10 28
a37 9
	private java.util.Map getMap() {
		if (myMap == null) {
			myMap = new java.util.HashMap();
			myMap.put("XorFill", "FillXOR");
			myMap.put("XorOutline", "OutlineXOR");
			myMap.put("LineKind", "LineStyle");
			myMap.put("CornerWidth", "CornerDimensions");
			myMap.put("CornerHeight", "CornerDimensions");
			myMap.put("Name", null);
d39 1
a39 1
		return myMap;
d44 1
a44 3
			java.util.Map map = getMap();
			String accessorName = feature.getAccessorName();
			return map.containsKey(accessorName) && map.get(accessorName) == null;
d46 1
a46 1
		return true;
d48 10
a57 6

	protected final String getSetterName(GenFeature feature) {
		java.util.Map map = getMap();
		String accessorName = feature.getAccessorName();
		if (map.containsKey(accessorName)) {
			return "set" + ((String) map.get(accessorName));
d59 4
a62 1
			return "set" + accessorName;
d64 1
d67 1
a67 1
	protected final String getValue(String valueVariable, String modelElementVariable, GenFeature feature) {
d69 9
a77 15
		if ("cornerWidth".equals(featureName)) {
			return "new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(" + valueVariable + ")," +
				"getMapMode().DPtoLP(" + modelElementVariable + ".getCornerHeight()))";
		}
		if ("cornerHeight".equals(featureName)) {
			return "new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(" + modelElementVariable + ".getCornerWidth()), " + 
				"getMapMode().DPtoLP(" + valueVariable + "))";
		}
		if ("lineKind".equals(featureName)) {
			return "\"LINE_DASH\".equals(" + valueVariable + ".getName()) ? org.eclipse.draw2d.Graphics.LINE_DASH :" +
				"\"LINE_DOT\".equals(" + valueVariable + ".getName()) ? org.eclipse.draw2d.Graphics.LINE_DOT :" +
				"\"LINE_DASHDOT\".equals(" + valueVariable + ".getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOT :" +
				"\"LINE_DASHDOTDOT\".equals(" + valueVariable + ".getName()) ? org.eclipse.draw2d.Graphics.LINE_DASHDOTDOT :" +
				"\"LINE_CUSTOM\".equals(" + valueVariable + ".getName()) ? org.eclipse.draw2d.Graphics.LINE_CUSTOM :" +
				"org.eclipse.draw2d.Graphics.LINE_SOLID";
d79 25
a103 1
		return valueVariable;
@

