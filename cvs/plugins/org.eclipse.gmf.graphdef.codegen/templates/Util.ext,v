head	1.9;
access;
symbols
	v20080813-1520:1.9
	v20080807-1333:1.9
	v20080806-1520:1.8
	v20080731-1520:1.8
	v20080722-1827:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080528-1052:1.7
	v20080417-1610:1.7
	v20080222-1200:1.7
	v20080215-1500:1.7
	v20080207-0207:1.6.2.1
	v20071214-1111:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070809-0000:1.6.2.1
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.5
	v20070608-1300:1.5
	v20070605-1400:1.5
	v20070601-1400:1.3
	v20070518-1300:1.2
	v20070330-1300:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070228-2000:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2008.08.07.13.29.48;	author dstadnik;	state Exp;
branches;
next	1.8;
commitid	6561489af8ca4567;

1.8
date	2008.07.31.12.17.18;	author dstadnik;	state Exp;
branches;
next	1.7;
commitid	4c9e4891ad4c4567;

1.7
date	2007.09.28.18.51.59;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	51ac46fd4d4e4567;

1.6
date	2007.06.20.11.39.51;	author atikhomirov;	state Exp;
branches
	1.6.2.1;
next	1.5;
commitid	95e467912074567;

1.5
date	2007.06.05.19.16.11;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	2c54665b67a4567;

1.4
date	2007.06.05.13.39.12;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	3131466567804567;

1.3
date	2007.05.28.13.33.47;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	3e69465ada3a4567;

1.2
date	2007.05.17.22.14.20;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	640b464cd3bb4567;

1.1
date	2006.11.02.21.58.36;	author atikhomirov;	state Exp;
branches;
next	;

1.6.2.1
date	2007.09.28.19.00.13;	author atikhomirov;	state Exp;
branches;
next	;
commitid	5f1c46fd4f3d4567;


desc
@@


1.9
log
@[243403] support float properties
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/gmf/2006/GraphicalDefinition";
import "http://www.eclipse.org/emf/2002/Ecore";

String compilationUnitName(gmfgraph::FigureDescriptor figure) :
	figure.name.toFirstUpper()
;

Boolean hasSourceDecoration(gmfgraph::PolylineConnection figure) :
	null != figure.sourceDecoration
;

List[String] requiredBundles(List[String] referencedBundles) :
	isFullRuntime() /*&& usesLabelOrPolyline) || usesMapMode()*/ ?
		{"org.eclipse.core.runtime","org.eclipse.draw2d", "org.eclipse.gmf.runtime.draw2d.ui"}.union(referencedBundles).toList().purgeDups() :
		{"org.eclipse.core.runtime","org.eclipse.draw2d"}.union(referencedBundles).toList().purgeDups()
;

String additionalStaticFields() :
GLOBALVAR outputStaticFields
;

EBoolean hasTargetDecoration(gmfgraph::PolylineConnection figure) :
	null != figure.targetDecoration
;

cached boolean isFullRuntime() :
	internalCheckRuntimeToken() != null ? internalCheckRuntimeToken().toLowerCase() == "full" : true
;

private String internalCheckRuntimeToken() : GLOBALVAR runtimeToken;

boolean needsField(gmfgraph::RealFigure figure) :
	// XXX consider adding generation option "fields for all figures"
	figure.descriptor != null && figure.descriptor.accessors.figure.contains(figure)
;

String figureVariableName(gmfgraph::RealFigure figure, EInt count) :
	needsField(figure)
		? figureFieldName(figure)
		: (	figure.name != null && figure.name.trim().length() > 0
			? figure.name.toFirstLower() + count
			: variableNameStem(figure) + count )
;

String nameStem(FigureRef fig) : variableNameStem(fig.figure);
String nameStem(Figure fig) : variableNameStem(fig);

// actually, should be smth like fig.eClass().name
private String variableNameStem(Figure fig) : "fig";
private String variableNameStem(RealFigure fig) : "fig";
private String variableNameStem(Shape fig) : "shape";
private String variableNameStem(Rectangle fig) : "rect";
private String variableNameStem(RoundedRectangle fig) : "rrect";
private String variableNameStem(Ellipse fig) : "elli";
private String variableNameStem(Polyline fig) : "polyline";
private String variableNameStem(Label fig) : "l";
private String variableNameStem(DecorationFigure fig) : "dec";
private String variableNameStem(ConnectionFigure fig) : "conn";


// assert needsField() == true
String figureFieldName(gmfgraph::RealFigure figure) :
	figureFieldName(figure.descriptor.accessors.select(a | (figure == a.figure)))
;

private String figureFieldName(List[ChildAccess] aaa) :
	aaa.collect(x | figureFieldName(x)).toList().first()
;

String figureFieldName(gmfgraph::ChildAccess childAccess) :
	"f" + (childAccess.accessor.startsWith("get") && childAccess.accessor.length() > 3 ? childAccess.accessor.subString(3) : childAccess.accessor)
;

String borderLayoutConstant(gmfgraph::BorderLayoutData layoutData) :
	switch (layoutData.alignment) {
		case Alignment::BEGINNING : ( layoutData.vertical ? "TOP" : "LEFT" )
		case Alignment::END : ( layoutData.vertical ? "BOTTOM" : "RIGHT" )
		default : "CENTER" 
	}
;

cached List[gmfgraph::CustomBorder] getBordersInUse() : {} ;


cached List[FigureAccessor] allCustomAccessors(FigureDescriptor fd) :
	filterCustom( { fd.actualFigure } ).customChildren
;

// all CustimFigures in the hierarchy of each figure 
private List[CustomFigure] filterCustom(List[Figure] figures) :
	figures.isEmpty() ? {}
		: figures.typeSelect(CustomFigure).union(filterCustom(figures.typeSelect(RealFigure).children))
;

EString messageFormat(EString pattern, List[Object] argument) :
	JAVA java.text.MessageFormat.format(java.lang.String, java.lang.Object.List)
;

String svgPropertyType(gmfgraph::SVGProperty p) :
	switch (p.type) {
		case SVGPropertyType::COLOR : "org.eclipse.swt.graphics.Color"
		case SVGPropertyType::FLOAT : "float"
		default : "String"
	}
;
@


1.8
log
@[234668] support svg figures in gmfgraph
@
text
@d114 1
@


1.7
log
@[204940] child accessors to custom figure's internals are not generated correctly
@
text
@d109 8
a116 1
;@


1.6
log
@[193180] not every child of a link deserves to be generated. Even labels are not that good, but decorations are even worse. Left labels for legacy reasons (users tend to edfine link's label as a child), omit every other child kind.
In addition, use field name right away as figure variable to minimize number of names introduced, fight potential name clashes
@
text
@d96 11
@


1.6.2.1
log
@[204940] child accessors to custom figure's internals are not generated correctly - merged into 2.0 maintenance stream
@
text
@a95 11

cached List[FigureAccessor] allCustomAccessors(FigureDescriptor fd) :
	filterCustom( { fd.actualFigure } ).customChildren
;

// all CustimFigures in the hierarchy of each figure 
private List[CustomFigure] filterCustom(List[Figure] figures) :
	figures.isEmpty() ? {}
		: figures.typeSelect(CustomFigure).union(filterCustom(figures.typeSelect(RealFigure).children))
;

@


1.5
log
@fix failing ViewmapProducersTest#testAbleToProcessFigureAccessor. ChildAccess should be the sole point to control naming for figure getters, hence NamingStrategy no needed any more. Plus, since ChildAccess always has a reference to figure, we may specify exact class names in ParentAssignedViewmap
@
text
@d50 5
a54 3
	figure.name != null && figure.name.trim().length() > 0 ?
		figure.name.toFirstLower() + count :
		variableNameStem(figure) + count
@


1.4
log
@handle composite custom borders (fixes failing test) in a way that doesn't mandate any special additional output streams
@
text
@d81 1
a81 6
	"f" + childAccess.accessor
;

// assert needsField() == true
String figureFieldGetter(gmfgraph::ChildAccess childAccess) :
	"getFigure" + childAccess.accessor
@


1.3
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@d97 2
@


1.2
log
@moving towards not using fqnswitch and java to tell draw2d figure names; let toolsmith to control what draw2d classes are being used; fqnSwitch argument replaced with simple token indicator
@
text
@d13 1
a13 1
import "http://www.eclipse.org/gmf/2005/GraphicalDefinition";
d16 1
a16 1
EString compilationUnitName(gmfgraph::Figure figure) :
a29 8
String packageStatement() :
GLOBALVAR packageStatement
;

String additionalMethods() :
GLOBALVAR outputAdditionalMethods
;

a33 4
String methodName(gmfgraph::CustomBorder customBorder, String figureVarName) :
	"createBorder" + figureVarName
;

d44 25
a68 3
//nonNull(ecore::EObject obj) :
//	{obj}.select(e | null != e)
//;
d70 4
a73 2
figureVariableName(gmfgraph::Figure figure, EInt count) :
	figure.name.toFirstLower() + count
d76 2
a77 2
figureFieldName(gmfgraph::Figure figure) :
	"f" + figure.name
d79 3
a81 2
figureFieldGetter(gmfgraph::Figure figure) :
	"getFigure" + figure.name
d83 4
a86 2
figureFieldSetter(gmfgraph::Figure figure) :
	"setFigure" + figure.name
@


1.1
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
d20 2
a21 14
String qualifiedClassNameGEF(gmfgraph::Figure figure) :
JAVA [FigureQualifiedNameSwitch] org.eclipse.gmf.gmfgraph.util.FigureQualifiedNameSwitch.get(org.eclipse.emf.ecore.EObject)
;

String qualifiedClassNameGEF(gmfgraph::ScalablePolygon figure) :
	"org.eclipse.draw2d.Shape"
;

String qualifiedClassNameGEF(gmfgraph::Layout layout) :
JAVA [FigureQualifiedNameSwitch] org.eclipse.gmf.gmfgraph.util.FigureQualifiedNameSwitch.get(org.eclipse.emf.ecore.EObject)
;

String qualifiedClassNameGEF(gmfgraph::LayoutData layout) :
JAVA [FigureQualifiedNameSwitch] org.eclipse.gmf.gmfgraph.util.FigureQualifiedNameSwitch.get(org.eclipse.emf.ecore.EObject)
d24 4
a27 6
String qualifiedClassNameGEF(gmfgraph::Border border) :
JAVA [FigureQualifiedNameSwitch] org.eclipse.gmf.gmfgraph.util.FigureQualifiedNameSwitch.get(org.eclipse.emf.ecore.EObject)
;

Boolean hasSourceDecoration(gmfgraph::PolylineConnection figure) :
	null != figure.sourceDecoration
d50 5
@

