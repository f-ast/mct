head	1.2;
access;
symbols
	v20080813-1520:1.2
	v20080807-1333:1.2
	v20080806-1520:1.2
	v20080731-1520:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080528-1052:1.2
	v20080417-1610:1.2
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20080207-0207:1.2
	v20071214-1111:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070518-1300:1.1
	v20070330-1300:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070228-2000:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.05.28.13.33.47;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	3e69465ada3a4567;

1.1
date	2006.11.02.21.58.38;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GraphicalDefinition"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»


«DEFINE behaviour FOR gmfgraph::ScalablePolygon-»
	/**
	 * @@generated
	 */
	private final org.eclipse.draw2d.geometry.PointList myTemplate = new org.eclipse.draw2d.geometry.PointList();
	/**
	 * @@generated
	 */
	private org.eclipse.draw2d.geometry.Rectangle myTemplateBounds;
	
	/**
	 * @@generated
	 */
	public void addPoint(org.eclipse.draw2d.geometry.Point point){
		myTemplate.addPoint(point);
		myTemplateBounds = null;
	}
	
	/**
	 * @@generated
	 */
	protected void fillShape(org.eclipse.draw2d.Graphics graphics) {
		org.eclipse.draw2d.geometry.Rectangle bounds = getBounds();
		graphics.pushState();
		graphics.translate(bounds.x, bounds.y);
		graphics.fillPolygon(scalePointList());
		graphics.popState();
	}
	
	/**
	 * @@generated
	 */
	protected void outlineShape(org.eclipse.draw2d.Graphics graphics) {
		org.eclipse.draw2d.geometry.Rectangle bounds = getBounds();
		graphics.pushState();
		graphics.translate(bounds.x, bounds.y);
		graphics.drawPolygon(scalePointList());
		graphics.popState();
	}
	
	/**
	 * @@generated
	 */
	private org.eclipse.draw2d.geometry.Rectangle getTemplateBounds(){
		if (myTemplateBounds == null){
			myTemplateBounds = myTemplate.getBounds().getCopy().union(0, 0);
			//just safety -- we are going to use this as divider 
			if (myTemplateBounds.width < 1){
				myTemplateBounds.width = 1;
			}
			if (myTemplateBounds.height < 1){
				myTemplateBounds.height = 1;
			}
		}
		return myTemplateBounds;
	}
	
	/**
	 * @@generated
	 */
	private int[] scalePointList() {
		org.eclipse.draw2d.geometry.Rectangle pointsBounds = getTemplateBounds();
		org.eclipse.draw2d.geometry.Rectangle actualBounds = getBounds();

		float xScale = ((float) actualBounds.width) / pointsBounds.width;
		float yScale = ((float) actualBounds.height) / pointsBounds.height;

		if (xScale == 1 && yScale == 1) {
			return myTemplate.toIntArray();
		}
		int[] scaled = (int[]) myTemplate.toIntArray().clone();
		for (int i = 0; i < scaled.length; i += 2) {
			scaled[i] = (int) Math.floor(scaled[i] * xScale);
			scaled[i + 1] = (int) Math.floor(scaled[i + 1] * yScale);
		}
		return scaled;
	}
«ENDDEFINE»@


1.1
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GraphicalDefinition"»
@

