head	1.5;
access;
symbols
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20080731-1520:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.02.06.18.10.23;	author atikhomirov;	state dead;
branches;
next	1.4;

1.4
date	2006.01.25.14.02.29;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.10.16.46.00;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.10.16.16.54;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.06.19.17.28;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@		<%=fqnSwitch.doSwitch(df)%> <%=decFigVarName%> = new <%=fqnSwitch.doSwitch(df)%>();
<%  { // scope
Figure figureInstance = df;
String figureVarName = decFigVarName;
%>
<%@@ include file="FigureAttrs.jetinc"%><%} // scope %>
<% /*include FigureChildren*/ %>
<%
if ((df instanceof PolylineDecoration || df instanceof PolygonDecoration)) {
	if (!((Polyline) df).getTemplate().isEmpty()) {
%>
		org.eclipse.draw2d.geometry.PointList pl = new org.eclipse.draw2d.geometry.PointList();
<%		for (Iterator pointIt = ((Polyline) df).getTemplate().iterator(); pointIt.hasNext(); ) {
		Point p = (Point) pointIt.next();%>
		pl.addPoint(<%=p.getX()%>, <%=p.getY()%>);
<%		} /*for*/ %>
		<%=decFigVarName%>.setTemplate(pl);
<%	} /*!if getTemplate().isEmpty()*/ %>
		<%=decFigVarName%>.setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));
<%} /*if instanceof */ %>
@


1.4
log
@support Figure.color attributes
@
text
@@


1.3
log
@Setting scale only for Polyline & Polygon decorations.
@
text
@d2 5
a6 1
<%@@ include file="FigureAttrs.jetinc"%>
@


1.2
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@d4 4
a7 1
<%if ((df instanceof PolylineDecoration || df instanceof PolygonDecoration) && !((Polyline) df).getTemplate().isEmpty()) {%>
d9 1
a9 1
<%	for (Iterator pointIt = ((Polyline) df).getTemplate().iterator(); pointIt.hasNext(); ) {
d12 1
a12 1
<%} /*for*/ %>
d14 2
a16 1
		<%=decFigVarName%>.setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));@


1.1
log
@ some templates to support #114177 (graphical definition model) - with GEF IFigure code as an outcome
@
text
@d12 1
@

