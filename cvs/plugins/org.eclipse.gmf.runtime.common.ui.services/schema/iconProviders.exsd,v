head	1.7;
access;
symbols
	v20081020-0700:1.7
	v20080722-1827:1.7
	v20080718-1700:1.7
	v20080718-1731:1.7
	R2_1_maintenance:1.7.0.6
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080612-1229:1.7
	v20080425-1959:1.7
	v20080222-1200:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.4
	R2_0:1.7
	R4_20:1.7
	RC3_20:1.7
	v20070601-1400:1.7
	v20070518-1300:1.7
	v20070504-1000:1.7
	v20070420-1000:1.7
	v20070330-1300:1.7
	v20070208-1800:1.7
	v20070105-1200:1.7
	v20070103-0300:1.7
	M4_20:1.7
	v20061218-1500:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061013-1330:1.7
	v20061012-1100:1.7
	v20060925-1700:1.7
	v20060919-0800:1.7
	M1_20:1.7
	v20060831-1500:1.7
	v20060824-1600:1.7
	v20060803-1200:1.7
	v20060721-1130:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060526-1200:1.7
	v20060519-0800:1.7
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.7
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.7
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.7
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.7
	I20060216-1945:1.7
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.7
	I20060202-1415:1.7
	I20060129-1145:1.7
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.6
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;


1.7
date	2005.12.22.20.12.04;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.12.21.22.24;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.02.19.24.38;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.12.20.55.15;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.05.17.23.59;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.14.18.22.21;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.23;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[112797] gmf_head ahunter 051222 Deprecate the use of fragments for service providers
@
text
@<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.gmf.runtime.common.ui.services">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.gmf.runtime.common.ui.services" id="iconProviders" name="Icon Providers Extension Point"/>
      </appInfo>
      <documentation>
         This extension point is used to define icon providers for the icon service
      (&lt;tt&gt;org.eclipse.gmf.runtime.common.ui.services.icon.IconService&lt;/tt&gt;).
      &lt;p&gt;
      The icon service supplies an icon for a given element.
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="IconProvider"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  The identifier of the extension point, i.e. &lt;tt&gt;org.eclipse.gmf.runtime.common.ui.services.iconProviders&lt;/tt&gt;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  The identifier of the extension, e.g. &lt;tt&gt;iconProviders&lt;/tt&gt;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  The name of the extension, e.g. &lt;tt&gt;%ext.iconProviders&lt;/tt&gt;.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="IconProvider">
      <complexType>
         <sequence>
            <element ref="Priority"/>
            <element ref="Policy" minOccurs="0" maxOccurs="1"/>
            <element ref="object" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="context" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The provider class.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.gmf.runtime.common.ui.services.icon.IIconProvider"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="Priority">
      <complexType>
         <attribute name="name" use="required">
            <annotation>
               <documentation>
                  The name of the provider priority, i.e. Lowest, Low, Medium, High, or Highest.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="Lowest">
                  </enumeration>
                  <enumeration value="Low">
                  </enumeration>
                  <enumeration value="Medium">
                  </enumeration>
                  <enumeration value="High">
                  </enumeration>
                  <enumeration value="Highest">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
      </complexType>
   </element>

   <element name="Policy">
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The provider policy class.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="object">
      <annotation>
         <documentation>
            A descriptor of an object that is examined by this provider. The object descriptor can include an optional set of methods to call on the object.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="method" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique (within the context of this provider definition) identifier for the object
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  The fully qualified name of a class/interface that is assignable from or adaptable to the object. The name could be followed (between paranthesis &quot;()&quot;) by the id of a plugin whose classloader is able to load that class. The finaly syntax is:
className(plugin id)
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="method">
      <annotation>
         <documentation>
            A method to call by reflection on the object. The method has a name and a value. The value could be described by its string representation (value &amp; notValue), or as an object &quot;value&quot; or &quot;notValue&quot;. 

The rules of evaluation are as follows:

1- The return value string has to be in the &quot;value&quot; string set.
2- The return value string has to be not in the &quot;notValue&quot; string set.
3- The return value object has to be in the &quot;value&quot; object set.
4- The return value object has to be not in the &quot;notValue&quot; object set.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="value" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="notValue" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The name of the method followed by an optional paramter set between paranthesis &quot;()&quot;. The parameter set can contain any number of string parameters (literals). other param types are not supported. The method name could contain nested calling separated by &quot;.&quot; The general format for this method name is : func(param[,param]*)
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string">
            <annotation>
               <documentation>
                  A comma-separated (&quot;,&quot;) list of string representations of the method return value. The string representation of the value is expected to be &quot;one&quot; of those in the list. The syntax to use is the following: string[,string]*
If (&quot;,&quot;) is expected to be in one of the strings, it has to be escaped by a forward slash (&quot;\&quot;). &quot;null&quot; is accepted as a string and it means (a null object).
               </documentation>
            </annotation>
         </attribute>
         <attribute name="notValue" type="string">
            <annotation>
               <documentation>
                  A comma-separated (&quot;,&quot;) list of string representations of the method return value that is not expected (the execulsion set). The string representation of the value is expected &quot;not&quot; to be &quot;one&quot; of those in the list. The syntax to use is the following: string[,string]*
If (&quot;,&quot;) is expected to be in one of the strings, it has to be escaped by a forward slash (&quot;\&quot;). &quot;null&quot; is accepted as a string and it means (a null object).
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="value">
      <annotation>
         <documentation>
            A descriptor of an object that represents a method&apos;s returned value. The descriptor can include an optional set of methods to call on the &quot;value&quot; object.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="method" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  The fully qualified name of a class/interface that is assignable from or adaptable to the &quot;value&quot; object. The name could be followed (between paranthesis &quot;()&quot;) by the id of a plugin whose classloader is able to load that class. The finaly syntax is:
className(plugin id)
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="context">
      <annotation>
         <documentation>
            A context supported by the editpart provider.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="elements" type="string">
            <annotation>
               <documentation>
                  A comma-separated list of element object ids (from the provider XML definition) that are supported by this provider in this context.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="notValue">
      <annotation>
         <documentation>
            A descriptor of an object that represents a method&apos;s returned value that is not required. The descriptor can include an optional set of methods to call on the &quot;notValue&quot; object.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="method" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="class" type="string">
            <annotation>
               <documentation>
                  The fully qualified name of a class/interface that is assignable from or adaptable to the &quot;value&quot; object. The name could be followed (between paranthesis &quot;()&quot;) by the id of a plugin whose classloader is able to load that class. The finaly syntax is:
className(plugin id)
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         Following is an example of an icon provider extension:
&lt;p&gt;
&lt;pre&gt;
   &lt;extension 
        id=&quot;iconProviders&quot; 
        name=&quot;%ext.iconProviders&quot; 
        point=&quot;org.eclipse.gmf.runtime.common.ui.services.iconProviders&quot;&gt; 
      &lt;IconProvider 
        class=&quot;org.eclipse.test.project.providers.icon.MyIconProvider&quot;&gt; 
         &lt;Priority name=&quot;Lowest&quot;&gt;&lt;/Priority&gt; 
      &lt;/IconProvider&gt; 
   &lt;/extension&gt; 
&lt;/pre&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         The value of the class attribute must be the fully qualified name of 
         a class that implements &lt;tt&gt;org.eclipse.gmf.runtime.common.ui.services.icon.IIconProvider&lt;/tt&gt;.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2003  IBM Corporation and others.&lt;br&gt;
 All rights reserved. This program and the accompanying materials 
 are made available under the terms of the Eclipse Public License v1.0 
 which accompanies this distribution, and is available at 
 &lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
@


1.6
log
@[110317] gmf_head ahunter 051212 Compiler warning count should be 0 - runtime foundation layer components
@
text
@a100 10
         <attribute name="plugin" type="string">
            <annotation>
               <documentation>
                  The name of the plug-in containing the provider policy.
               </documentation>
               <appInfo>
                  <meta.attribute deprecated="true"/>
               </appInfo>
            </annotation>
         </attribute>
@


1.5
log
@Bugzilla Bug 112797 gmf_head wdiu 051102 Deprecate the use of fragments for service providers
@
text
@d135 1
a135 1
className&lt;(plugin id)&gt;?
d163 1
a163 1
                  The name of the method followed by an optional paramter set between paranthesis &quot;()&quot;. The parameter set can contain any number of string parameters (literals). other param types are not supported. The method name could contain nested calling separated by &quot;.&quot; The general format for this method name is : &lt;func(&lt;param&lt;,param&gt;*&gt;?).&lt;&lt;func(&lt;param&lt;,param&gt;*&gt;?)&gt;*
d170 1
a170 1
                  A comma-separated (&quot;,&quot;) list of string representations of the method return value. The string representation of the value is expected to be &quot;one&quot; of those in the list. The syntax to use is the following: &lt;string&gt;&lt;,&lt;string&gt;&gt;*
d178 1
a178 1
                  A comma-separated (&quot;,&quot;) list of string representations of the method return value that is not expected (the execulsion set). The string representation of the value is expected &quot;not&quot; to be &quot;one&quot; of those in the list. The syntax to use is the following: &lt;string&gt;&lt;,&lt;string&gt;&gt;*
d200 1
a200 1
className&lt;(plugin id)&gt;?
d238 1
a238 1
className&lt;(plugin id)&gt;?
d291 5
a295 6
        Copyright (c) 2003  IBM Corporation and others.&lt;br&gt;
	All rights reserved. This program and the accompanying materials 
	are made available under the terms of the Eclipse Public License v1.0 
	which accompanies this distribution, and is available at 
	&lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;

@


1.4
log
@Bugzilla 110653 gmf_head ahunter 051012 Eroneous references to xtools in gmf common namespace
@
text
@d101 1
a101 1
         <attribute name="plugin" type="string" use="required">
d106 3
@


1.3
log
@Bugzilla 111508 gmf_head etworkow 051005 Extension Point and Schema Cleanup
@
text
@d255 1
a255 1
        class=&quot;com.ibm.xtools.project.providers.icon.MyIconProvider&quot;&gt; 
@


1.2
log
@Bugzilla 109527 gmf_head tmacdoug 050914 - GMF runtime and EMFT copyrights in exsd shema files need updating
@
text
@d59 1
a59 1
                  <meta.attribute kind="java"/>
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d288 6
a293 1
         Copyright 2003 Rational Software Corporation. All Rights Reserved.
@

