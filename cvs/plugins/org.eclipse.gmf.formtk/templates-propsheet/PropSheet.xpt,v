head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2008.04.17.17.19.13;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	2048480786914567;

1.4
date	2008.04.02.18.39.40;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	7ee847f3d2eb4567;

1.3
date	2008.04.01.18.42.12;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	523c47f282044567;

1.2
date	2008.04.01.17.56.17;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	1b8947f277404567;

1.1
date	2008.04.01.17.16.12;	author atikhomirov;	state Exp;
branches;
next	;
commitid	20f147f26ddb4567;


desc
@@


1.5
log
@Refactoring template to better customize generated class behaviour by using custom template and subclassing it.
@
text
@/*
 * Copyright (c) 2008 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
«IMPORT "http://www.eclipse.org/gmf/2008/Widget"»
«IMPORT "http://www.eclipse.org/gmf/2008/Context"»
«IMPORT "http://www.eclipse.org/gmf/2008/Binding"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«EXTENSION Forms»
«EXTENSION Widgets»

«DEFINE Main FOR Editor-»
package «packageName»;
«EXPAND imports FOREACH sections»
«EXPAND class("public ") FOREACH sections»
«ENDDEFINE»

«DEFINE imports FOR Section»
import org.eclipse.gmf.dsl.internal.ui.emf.AttachAdapter;
import org.eclipse.gmf.dsl.internal.ui.emf.ChangeTracker;
import org.eclipse.gmf.dsl.internal.ui.emf.FeatureTracker;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.jface.viewers.*;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.*;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.forms.widgets.*;
import org.eclipse.ui.views.properties.tabbed.*;
«ENDDEFINE»

«DEFINE packageStatement FOR Section»package org.eclipse.gmf.graphdef.editor.sheet;«ENDDEFINE»

// Temp solution for hand-moved generated artifacts
«DEFINE Main FOR Section-»
«EXPAND packageStatement»
«EXPAND imports»
import org.eclipse.gmf.gmfgraph.*;

«EXPAND class("public ")»
«ENDDEFINE»

«DEFINE class(String classModifiers) FOR Section»
«classModifiers»class «className» extends AbstractPropertySection implements ChangeTracker, Listener {

	«EXPAND Update::AdaptersField-»

	private boolean myIsCommit;
	private boolean myIsRefresh;
	private Object myInput;

«EXPAND Visual::Fields FOR children»

	@@Override
	public void createControls(Composite parent, TabbedPropertySheetPage page) {
		super.createControls(parent, page);
		getWidgetFactory().paintBordersFor(parent);
«EXPAND Visual::Main("parent", "getWidgetFactory()") FOR children»
«IF layout != null»«EXPAND Layout::Main("parent") FOR layout»«ENDIF-»
«EXPAND Update::PopulateWidgets-»
«EXPAND Update::registerListeners-»
	}

	@@Override
	public void setInput(IWorkbenchPart part, ISelection selection) {
		super.setInput(part, selection);
		Object newInput = null;
		if (selection instanceof IStructuredSelection && ((IStructuredSelection) selection).size() == 1) {
			newInput = unwrap(((IStructuredSelection) selection).getFirstElement());
		}
		if (newInput != myInput) {
			if (myInput != null) {
				detach();
			}
			myInput = newInput;
			if (newInput != null) {
				attach();
			}
		}
	}

	protected void commit() {
		«EXPAND Update::Commit»
	}

	@@Override
	public void refresh() {
		myIsRefresh = true;
		«EXPAND Update::Refresh»
		myIsRefresh = false;
	}

	@@Override
	public void aboutToBeHidden() {
		if (myInput != null) {
			detach();
		}
	}

	public void handleEvent(Event event) {
		if (myIsRefresh) {
			return;
		}
		«EXPAND Update::handleEventMethodBody-»
	}

	public void modelChanged(Notification msg) {
		if (!myIsCommit && Display.getCurrent() != null) {
			refresh();
		}
	}

	private void markDirty() {
		// NO-OP, need that to share Update::handleEvent template with IFormPart which has same method
		// Perhaps, clients may find this method useful for some purpose?
	}

	protected void applyChanges() {
		try {
			myIsCommit = true;
			commit();
		} finally {
			myIsCommit = false;
		}
	}

	protected void discardChanges() {
		refresh();
	}

	protected Object unwrap(Object element) {
		// TODO may need to adapt selected element to smth else,
		// do it here
		return element;
	}

	private void attach() {
	«EXPAND Update::AttachAdapters»
	}

	private void detach() {
	«EXPAND Update::DetachAdapters»
	}

	protected «deduceInputType().name» getInput() {
		// TODO implement;
		return («deduceInputType().name») myInput;
	}
«EXPAND Visual::ExtraMethods(true, "getWidgetFactory()") FOR children»
}
«ENDDEFINE»@


1.4
log
@[192711] general forms ui model, Phase II: further imporved models (Section subclasses Composite not to duplicate widgets and layout containments), reference from Condition to Action reverted (to make condition model independent); templates updated
@
text
@d41 2
d45 1
a45 1
package org.eclipse.gmf.forms.example.figure;
d128 6
a133 12
		new org.eclipse.gmf.dsl.internal.project.ui.editor.AbstractCommand(getInput()) {
			@@Override
			protected IStatus doExecute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
				try {
					myIsCommit = true;
					commit();
				} finally {
					myIsCommit = false;
				}
				return Status.OK_STATUS;
			}
		}.go();
d140 1
a140 1
	private Object unwrap(Object element) {
d154 1
a154 1
	private «deduceInputType().name» getInput() {
@


1.3
log
@[192711] general forms ui model, Phase I: bring models in, break them according to their function, update templates to reflect updated model structure
@
text
@d59 1
a59 1
«EXPAND Visual::Fields FOR widgets»
d65 1
a65 1
«EXPAND Visual::Main("parent", "getWidgetFactory()") FOR widgets»
d162 1
a162 1
«EXPAND Visual::ExtraMethods(true, "getWidgetFactory()") FOR widgets»
@


1.2
log
@fix package names
@
text
@d17 2
a18 2
«EXTENSION forms::Forms»
«EXTENSION widgets::Widgets»
d53 1
a53 1
	«EXPAND forms::Update::AdaptersField-»
d59 1
a59 1
«EXPAND widgets::Visual::Fields FOR widgets»
d65 4
a68 4
«EXPAND widgets::Visual::Main("parent", "getWidgetFactory()") FOR widgets»
«IF layout != null»«EXPAND widgets::Visual::Main("parent") FOR layout»«ENDIF-»
«EXPAND forms::Update::PopulateWidgets-»
«EXPAND forms::Update::registerListeners-»
d90 1
a90 1
		«EXPAND forms::Update::Commit»
d96 1
a96 1
		«EXPAND forms::Update::Refresh»
d111 1
a111 1
		«EXPAND forms::Update::handleEventMethodBody-»
d151 1
a151 1
	«EXPAND forms::Update::AttachAdapters»
d155 1
a155 1
	«EXPAND forms::Update::DetachAdapters»
d162 1
a162 1
«EXPAND widgets::Visual::ExtraMethods(true, "getWidgetFactory()") FOR widgets»
@


1.1
log
@[192711] generalization of propsheet towards common forms UI codegen. Phase I - placeholder project with (not yet refactored) templates.
@
text
@d27 3
a29 3
import com.borland.dsl.internal.ui.emf.AttachAdapter;
import com.borland.dsl.internal.ui.emf.ChangeTracker;
import com.borland.dsl.internal.ui.emf.FeatureTracker;
d43 1
a43 1
package com.borland.forms.example.figure;
d126 1
a126 1
		new com.borland.dsl.internal.project.ui.editor.AbstractCommand(getInput()) {
@

