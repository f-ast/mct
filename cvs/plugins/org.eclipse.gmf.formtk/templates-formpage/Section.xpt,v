head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2008.04.02.18.39.40;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	7ee847f3d2eb4567;

1.3
date	2008.04.01.18.42.12;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	523c47f282044567;

1.2
date	2008.04.01.17.56.16;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	1b8947f277404567;

1.1
date	2008.04.01.17.16.12;	author atikhomirov;	state Exp;
branches;
next	;
commitid	20f147f26ddb4567;


desc
@@


1.4
log
@[192711] general forms ui model, Phase II: further imporved models (Section subclasses Composite not to duplicate widgets and layout containments), reference from Condition to Action reverted (to make condition model independent); templates updated
@
text
@/*
 * Copyright (c) 2008 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
«IMPORT "http://www.eclipse.org/gmf/2008/Widget"»
«IMPORT "http://www.eclipse.org/gmf/2008/Context"»
«IMPORT "http://www.eclipse.org/gmf/2008/Binding"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«EXTENSION Forms»
«EXTENSION Widgets»
«EXTENSION Context»

«DEFINE Main FOR Section-»
package org.eclipse.gmf.dsl.internal.project.ui.editor.pages.deploy;
«EXPAND imports»
«EXPAND class("public ")»
«ENDDEFINE»

«DEFINE imports FOR Section-»
import org.eclipse.gmf.dsl.internal.ui.emf.AttachAdapter;
import org.eclipse.gmf.dsl.internal.ui.emf.ChangeTracker;
import org.eclipse.gmf.dsl.internal.ui.emf.FeatureTracker;
import org.eclipse.gmf.dsl.internal.project.ui.editor.CommitOperation;
import org.eclipse.gmf.dsl.internal.project.ui.editor.sections.GridToolkit;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.*;
import org.eclipse.ui.forms.*;
import org.eclipse.ui.forms.widgets.*;
«ENDDEFINE»

«DEFINE class(String classModifiers) FOR Section-»
«classModifiers»class «className» extends SectionPart implements ChangeTracker, Listener { 

	«EXPAND Update::AdaptersField-»

	private boolean myIsCommit;
	private boolean myIsRefresh;
	private Object myInput;

«EXPAND Visual::Fields FOR children»

	public «className»(Composite parent, IManagedForm form) {
		super(parent, form.getToolkit(), Section.TITLE_BAR | Section.TWISTIE | Section.DESCRIPTION);
	}

	@@Override
	public void initialize(IManagedForm form) {
		super.initialize(form);
		Composite c = form.getToolkit().createComposite(getSection());
		form.getToolkit().paintBordersFor(c);
		org.eclipse.jface.layout.GridLayoutFactory.fillDefaults().applyTo(getSection());
		org.eclipse.jface.layout.GridDataFactory.fillDefaults().grab( true, true ).applyTo(c);
		createContents(c);
		getSection().setClient(c);
	}

	protected void createContents(Composite parent) {
		getSection().setText("Generated Section");
		final FormToolkit ftk = getManagedForm().getToolkit();
«EXPAND Visual::Main("parent", "ftk") FOR children»
«IF layout != null»«EXPAND Layout::Main("parent") FOR layout»«ENDIF-»
«EXPAND Update::PopulateWidgets-»
		// getEditor().getGlobalActionSupport().register(«FOREACH textWidgets() AS te SEPARATOR ", "»«te.fieldName()»«ENDFOREACH»);
«EXPAND Update::registerListeners-»
	}

	@@Override
	public void commit(boolean onSave) {
		try {
			myIsCommit = true;
			«EXPAND Update::Commit»
		} finally {
			super.commit(onSave);
			myIsCommit = false;
		}
	}

	@@Override
	public void refresh() {
		myIsRefresh = true;
		«EXPAND Update::Refresh»
		myIsRefresh = false;
	}

	@@Override
	public void dispose() {
		if (myInput != null) {
			detach();
		}
	}

	public void modelChanged(Notification msg) {
		if (!myIsCommit && Display.getCurrent() != null) {
			refresh();
		}
	}

	@@Override
	public boolean setFormInput(Object input) {
		// super.setFormInput(input); // Do I really need that? 
		if (myInput != null) {
			detach();
		}
		myInput = input;
		if (input != null) {
			attach();
		}
		return false;
	}

	public void handleEvent(Event event) {
		if (myIsRefresh) {
			return;
		}
«EXPAND Update::handleEventMethodBody-»
	}

	private void attach() {
	«EXPAND Update::AttachAdapters-»
	}

	private void detach() {
	«EXPAND Update::DetachAdapters-»
	}

	protected void applyChanges() {
		new CommitOperation(this, TransactionalEditingDomain.Factory.INSTANCE.getEditingDomain(getInput().eResource().getResourceSet())).go();
	}

	protected void discardChanges() {
		refresh();
	}

	private «deduceInputType().name» getInput() {
		// TODO implement;
		// XXX or move cast to setInput?
		return («deduceInputType().name») myInput;
	}
«EXPAND Visual::ExtraMethods(false, "getManagedForm().getToolkit()") FOR children-»
}
«ENDDEFINE»
@


1.3
log
@[192711] general forms ui model, Phase I: bring models in, break them according to their function, update templates to reflect updated model structure
@
text
@d51 1
a51 1
«EXPAND Visual::Fields FOR widgets»
d71 1
a71 1
«EXPAND Visual::Main("parent", "ftk") FOR widgets»
d74 1
a74 1
		// getEditor().getGlobalActionSupport().register(«FOREACH widgets.typeSelect(TextEntry) AS te SEPARATOR ", "»«te.fieldName()»«ENDFOREACH»);
d150 1
a150 1
«EXPAND Visual::ExtraMethods(false, "getManagedForm().getToolkit()") FOR widgets-»
@


1.2
log
@fix package names
@
text
@d45 1
a45 1
	«EXPAND AdaptersField-»
d51 1
a51 1
«EXPAND widgets::Visual::Fields FOR widgets»
d71 3
a73 3
«EXPAND widgets::Visual::Main("parent", "ftk") FOR widgets»
«IF layout != null»«EXPAND widgets::Visual::Main("parent") FOR layout»«ENDIF-»
«EXPAND PopulateWidgets-»
d75 1
a75 1
«EXPAND registerListeners-»
d82 1
a82 1
			«EXPAND Commit»
d92 1
a92 1
		«EXPAND Refresh»
d126 1
a126 1
«EXPAND handleEventMethodBody-»
d130 1
a130 1
	«EXPAND AttachAdapters-»
d134 1
a134 1
	«EXPAND DetachAdapters-»
d150 1
a150 1
«EXPAND widgets::Visual::ExtraMethods(false, "getManagedForm().getToolkit()") FOR widgets-»
@


1.1
log
@[192711] generalization of propsheet towards common forms UI codegen. Phase I - placeholder project with (not yet refactored) templates.
@
text
@d22 1
a22 1
package com.borland.dsl.internal.project.ui.editor.pages.deploy;
d28 5
a32 5
import com.borland.dsl.internal.ui.emf.AttachAdapter;
import com.borland.dsl.internal.ui.emf.ChangeTracker;
import com.borland.dsl.internal.ui.emf.FeatureTracker;
import com.borland.dsl.internal.project.ui.editor.CommitOperation;
import com.borland.dsl.internal.project.ui.editor.sections.GridToolkit;
@

