head	1.7;
access;
symbols
	v20080910-1520:1.7
	v20070608-1300:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.6
	v20070518-1300:1.6
	v20070504-1000:1.4
	v20070427-0600:1.4
	v20070420-1000:1.4
	v20070413-1300:1.3
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061214-0000:1.2
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1;
locks; strict;
comment	@# @;


1.7
date	2007.06.12.16.33.04;	author bblajer;	state dead;
branches;
next	1.6;
commitid	1a98466ecabe4567;

1.6
date	2007.05.18.13.54.38;	author bblajer;	state Exp;
branches;
next	1.5;
commitid	40c4464db01d4567;

1.5
date	2007.05.18.10.36.19;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	a20464d81a24567;

1.4
date	2007.04.13.15.21.20;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	797b461f9fef4567;

1.3
date	2007.04.10.14.40.10;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	5b02461ba1c84567;

1.2
date	2006.11.23.18.57.16;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	66934565ef0a4567;

1.1
date	2006.11.09.18.15.43;	author bblajer;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[192167]: Convert /policies/OpenDiagramEditPolicy.javajet lite template to Xpand;
Typo in NavigatorActionProvider fixed;
gif images removed (they should be inherited from the full-RT templates instead)
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.policies" class="OpenDiagramPolicyGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final OpenDiagramBehaviour behaviour = (OpenDiagramBehaviour) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenDiagram genDiagram = behaviour.getSubject().getDiagram();
final boolean openAsEditor = behaviour.isOpenAsEclipseEditor();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
importManager.registerInnerClass("OpenDiagramCommand");
importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class <%=importManager.getCompilationUnitName()%> extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.policies.OpenDiagramEditPolicy")%> {
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getOpenCommand(<%=importManager.getImportedName("org.eclipse.gef.Request")%> openRequest) {
		<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> targetEditPart = getTargetEditPart(openRequest);
		if (false == targetEditPart.getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
			return null;
		}
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) targetEditPart.getModel();
		return getOpenCommand(view);
	}

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getOpenCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Style")%> linkStyle = view.getStyle(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getHintedDiagramLinkStyle());
		if (false == linkStyle instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle")%>) {
			return null;
		}
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(linkStyle);
		<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> result = new OpenDiagramCommand((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle")%>) linkStyle);
		return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(domain, result);
	}

	/**
	 * @@generated
	 */
	protected static class OpenDiagramCommand extends <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%> {
		/**
		 * @@generated
		 */
		private final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle")%> myDiagramLink;

		/**
		 * @@generated
		 */
		protected OpenDiagramCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle")%> linkStyle) {
			myDiagramLink = linkStyle;
		}

		/**
		 * @@generated
		 */
		protected boolean prepare() {
			return true;
		}

		/**
		 * @@generated
		 */
		public void execute() {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagramToOpen = getDiagramToOpen();
			if (diagramToOpen == null) {
				diagramToOpen = createNewDiagram();
			}
			<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> diagramURI = <%=importManager.getImportedName("org.eclipse.emf.ecore.util.EcoreUtil")%>.getURI(diagramToOpen);
			<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPage")%> page = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getActiveWorkbenchWindow().getActivePage();
<%
if (openAsEditor) {
%>
			<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> editorInput = new <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>(diagramURI);
			try {
				page.openEditor(editorInput, getEditorID());
			} catch (<%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> e) {
				throw new RuntimeException("Can't open diagram", e);
			}
<%
} else {
%>
			try {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart")%> diagramView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart")%>)page.showView(getViewID());
				diagramView.showDiagram(null, diagramURI);
			} catch (<%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> e) {
				throw new RuntimeException("Can't open diagram", e);
			}
<%
}
%>
		}

		/**
		 * @@generated
		 */
		public void redo() {
			execute();
		}

		/**
		 * @@generated
		 */
		public boolean canUndo() {
			return false;
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> getDiagramToOpen() {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> result = myDiagramLink.getDiagramLink();
			// take first that matches the given model ID.
			if (result != null && result.getType().equals(getDiagramKind())) {
				return result;
			}
			return null;
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> createNewDiagram() {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> result = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDiagram();
			myDiagramLink.setDiagramLink(result);
			result.setElement(getDiagramDomainElement());
			addToResource(result);
			try {
				for (<%=importManager.getImportedName("java.util.Iterator")%> it = myDiagramLink.eResource().getResourceSet().getResources().iterator(); it.hasNext(); ) {
					<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> next = (<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%>) it.next();
					if (next.isLoaded() && !<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.isReadOnly(next)) {
						next.save(<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.getSaveOptions());
					}
				}
			} catch (<%=importManager.getImportedName("java.io.IOException")%> e) {
				<%/*XXX: Throwing runtime exceptions is definitely not the most elegant way*/%>
				throw new RuntimeException("Can't create diagram of '" + getDiagramKind() + "' kind", e);
			}
			return result;
		}

		/**
		 * Returns the element that should be the underlying model element for the diagram.
		 * By default, the element associated with the edit part is returned.
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> getDiagramDomainElement() {
			return ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) myDiagramLink.eContainer()).getElement();
		}

		/**
		 * Adds the created diagram to a resource. By default, the diagram is added to the resource which contains the initiating diagram.
		 * @@generated
		 */
		protected void addToResource(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram) {
			assert diagram.eResource() == null;
			assert myDiagramLink.eResource() != null;
			myDiagramLink.eResource().getContents().add(diagram);
		}

		/**
		 * @@generated
		 */
		protected String getDiagramKind() {
<%if (behaviour.getDiagramKind() == null) {%>
			return <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID;
<%} else {%>
			return "<%=behaviour.getDiagramKind()%>";
<%}%>
		}

		/**
		 * @@generated
		 */
<%
if (openAsEditor) {
%>
		protected String getEditorID() {
<%
} else {
%>
		protected String getViewID() {
<%
}
%>
<%if (behaviour.getEditorID() == null) { %>
			return <%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>.ID;
<%} else {%>
			return "<%=behaviour.getEditorID()%>";
<%}%>
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.6
log
@Uncompilable code used to be generated -- fixed
@
text
@@


1.5
log
@Updated OpenDiagramEditPolicy generation to utilize newly introduced (bug #159479) appropriate diagram styles instead of annotations
@
text
@d42 1
a42 1
		<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> result = new OpenDiagramCommand(linkStyle);
@


1.4
log
@Never save read-only resources
@
text
@d37 2
a38 2
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation")%> annotation = view.getEAnnotation("<%=org.eclipse.gmf.codegen.gmfgen.impl.OpenDiagramBehaviourImpl.ANNOTATION_SOURCE%>");
		if (annotation == null) {
d41 2
a42 2
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(annotation);
		<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> result = new OpenDiagramCommand(annotation);
d53 1
a53 1
		private final <%=importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation")%> myAnnotation;
d58 2
a59 2
		protected OpenDiagramCommand(<%=importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation")%> annotation) {
			myAnnotation = annotation;
d120 1
d122 2
a123 8
			for (<%=importManager.getImportedName("java.util.Iterator")%> it = myAnnotation.getReferences().iterator(); it.hasNext(); ) {
				Object next = it.next();
				if (next instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> result = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) next;
					if (result.getType().equals(getDiagramKind())) {
						return result;
					}
				}
d133 1
a133 1
			myAnnotation.getReferences().add(result);
d137 1
a137 1
				for (<%=importManager.getImportedName("java.util.Iterator")%> it = myAnnotation.eResource().getResourceSet().getResources().iterator(); it.hasNext(); ) {
d156 1
a156 1
			return ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) myAnnotation.getEModelElement()).getElement();
d160 1
a160 1
		 * Adds the created diagram to a resource. By default, the diagram is added to the resource which contains the annotation.
d165 2
a166 2
			assert myAnnotation.eResource() != null;
			myAnnotation.eResource().getContents().add(diagram);
@


1.3
log
@[179970] - Adopt code generater to make use of EMF "conditional resource saving";
Correctly set charset for IFiles
@
text
@d144 1
a144 1
					if (next.isLoaded()) {
@


1.2
log
@[163214]: Lite runtime should support generation to a View
[164843]: Make it possible to specify the editing domain with which the editor/viewer should operate
@
text
@d144 2
a145 2
					if (next.isLoaded() && (!next.isTrackingModification() || next.isModified())) {
						next.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
@


1.1
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d7 1
d78 4
a82 1
			<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPage")%> page = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getActiveWorkbenchWindow().getActivePage();
d88 12
d188 3
d192 7
@

