head	1.10;
access;
symbols
	v20080910-1520:1.10
	v20070403-1500:1.9
	v20070330-1300:1.9
	v20060330-1300:1.9
	v20070322-1100:1.9
	v20060316-0600:1.8
	v20070307-0700:1.7
	v20070228-2000:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070103-0300:1.7
	M4_20:1.7
	v20061222-1800:1.6
	v20061214-0000:1.6
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.3
	v20061005-1700:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060824-1600:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2007.04.04.11.05.02;	author bblajer;	state dead;
branches;
next	1.9;
commitid	18c54613864d4567;

1.9
date	2007.03.16.18.54.21;	author bblajer;	state Exp;
branches;
next	1.8;
commitid	7fce45fae7dc4567;

1.8
date	2007.03.15.16.43.30;	author bblajer;	state Exp;
branches;
next	1.7;
commitid	617845f977b04567;

1.7
date	2006.12.25.12.00.12;	author bblajer;	state Exp;
branches;
next	1.6;
commitid	430d458fbd4b4567;

1.6
date	2006.12.05.16.11.39;	author bblajer;	state Exp;
branches;
next	1.5;
commitid	371645759a3a4567;

1.5
date	2006.11.29.15.23.08;	author bblajer;	state Exp;
branches;
next	1.4;
commitid	1928456da5db4567;

1.4
date	2006.11.23.18.57.15;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	66934565ef0a4567;

1.3
date	2006.10.02.12.29.34;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.18.27.23;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="DiagramEditorUtilGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final GenPlugin genPlugin = editorGen.getPlugin();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenModel genModel = genDiagram.getEditorGen().getDomainGenModel();
final boolean isRichClientPlatform = genDiagram.getEditorGen().getApplication() != null;

importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);
importManager.addImport("java.io.File");
importManager.addImport("org.eclipse.ui.IWorkbench");
importManager.addImport("org.eclipse.ui.IWorkbenchPage");
importManager.addImport("org.eclipse.ui.IWorkbenchWindow");
importManager.addImport("org.eclipse.ui.PlatformUI");
importManager.addImport("org.eclipse.ui.PartInitException");
importManager.addImport("org.eclipse.ui.IEditorDescriptor");
importManager.addImport("org.eclipse.swt.widgets.Shell");
importManager.addImport("org.eclipse.swt.widgets.FileDialog"); 
importManager.addImport("org.eclipse.jface.dialogs.MessageDialog");
importManager.addImport("org.eclipse.emf.common.util.URI");
importManager.addImport("org.eclipse.emf.common.ui.URIEditorInput");

importManager.registerInnerClass("DiagramInitializer");
%>

<%@@include file="../common/featureGetAccessor.jetinc"%>

/**
 * @@generated
 */
public class <%=genDiagram.getDiagramEditorUtilClassName()%> {
	/**
	 * @@generated
	 */
	public static String openFilePathDialog(Shell shell, String fileExtensionFilter, int style) {
		FileDialog fileDialog = new FileDialog(shell, style);
		fileDialog.setFilterExtensions(new String[]{fileExtensionFilter});

		fileDialog.open();
		if (fileDialog.getFileName() != null && fileDialog.getFileName().length() > 0) {
			return fileDialog.getFilterPath() + File.separator + fileDialog.getFileName();
		}
		else
		{
			return null;
		}
	}

<%
if (editorGen.getEditor().isEclipseEditor()) {
%>
	/**
	 * @@generated
	 */
	public static <%=importManager.getImportedName("org.eclipse.ui.IEditorPart")%> openEditor(URI fileURI) {
		IWorkbench workbench = PlatformUI.getWorkbench();
		IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow();
		IWorkbenchPage page = workbenchWindow.getActivePage();

		IEditorDescriptor editorDescriptor = workbench.getEditorRegistry().getDefaultEditor(fileURI.lastSegment());
		if (editorDescriptor == null) {
			MessageDialog.openError(
			workbenchWindow.getShell(),
			"Error",
			"There is no editor registered for the file " + fileURI.toFileString());
			return null;
		} else {
			try {
				return page.openEditor(new URIEditorInput(fileURI), editorDescriptor.getId());
			} catch (PartInitException exception) {
				MessageDialog.openError(
				workbenchWindow.getShell(),
				"Error Opening Editor",
				exception.getMessage());
				return null;
			}
		}
	}
<%
} else {
%>
	/**
	 * @@generated
	 */
	public static <%=importManager.getImportedName("org.eclipse.ui.IViewPart")%> showView(URI fileURI) {
		IWorkbench workbench = PlatformUI.getWorkbench();
		IWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow();
		IWorkbenchPage page = workbenchWindow.getActivePage();


		try {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart")%> diagramView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart")%>) page.showView(<%=importManager.getImportedName(editorGen.getEditor().getQualifiedClassName())%>.ID);
			if (!diagramView.showDiagram(null, fileURI)) {
				return null;
			}
			return diagramView;
		} catch (PartInitException exception) {
			MessageDialog.openError(
			workbenchWindow.getShell(),
			"Error Opening View",
			exception.getMessage());
			return null;
		}
	}
<%
}
%>

	/**
	 * @@generated
	 */
	public static <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> createDiagramFor(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> diagramRoot) {
		if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.VISUAL_ID != <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getDiagramVisualID(diagramRoot)) {
			return null;
		}
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> result = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDiagram();
		result.setElement(diagramRoot);
		<%=importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName())%>.INSTANCE.decorateView(result);
		new DiagramInitializer().initDiagramContents(result);
		return result;
	}

	/**
	 * @@generated
	 */
	private static class DiagramInitializer {
<%@@ include file="../common/initDiagramContents.jetinc"%>
	}
<%
if (!genDiagram.getEditorGen().isSameFileForDiagramAndModel()) {
%>
	/**
	 * @@generated
	 */
	public static URI getDiagramFileURI(URI modelFileURI) {
		if (modelFileURI == null || !modelFileURI.isFile()) {
			return null;
		}
		return modelFileURI.trimFileExtension().appendFileExtension("<%=editorGen.getDiagramFileExtension()%>");
	}

	/**
	 * @@generated
	 */
	public static URI getModelFileURI(URI diagramFileURI) {
		if (diagramFileURI == null || !diagramFileURI.isFile()) {
			return null;
		}
		return diagramFileURI.trimFileExtension().appendFileExtension("<%=editorGen.getDomainFileExtension()%>");
	}
<%
}
%>

	/**
	 * Returns whether the given element is read only in its editing domain.
	 * @@generated
	 */
	public static boolean isReadOnly(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element) {
		if (element == null) {
			return true;
		}
		<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = element.eResource();
		if (resource == null) {
			return false;
		}
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(resource);
		if (editingDomain == null) {
			return false;
		}
		return editingDomain.isReadOnly(resource);
	}
}
<%importManager.emitSortedImports();%>
@


1.9
log
@EObjects that are not attached to any resource should be treated as not read only
@
text
@@


1.8
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@d169 1
a169 1
			return true;
d173 1
a173 1
			return true;
@


1.7
log
@[159567]: Use GenApplication element from gmfgen model to generate RCP code
Use as much of the runtime templates as possible (changes are isolated as aspects)
@
text
@d158 19
@


1.6
log
@When generating views for RCP, initialize position of the view in the perspective;
Misspelt word corrected
@
text
@d9 1
a9 1
final boolean isRichClientPlatform = genDiagram.getEditorGen().getDomainGenModel().isRichClientPlatform();
a157 356
<%
if (isRichClientPlatform) {
	boolean shouldGenerateApplication = true;	/*XXX: option in gmfgen*/
	if (shouldGenerateApplication) {
%>
	/**
	 * Looks up a string in the plugin's plugin.properties file.
	 * @@generated
	 */
	private static String getString(String key) {
		return <%=importManager.getImportedName(genPlugin.getActivatorQualifiedClassName())%>.getInstance().getBundleString(key);
	}

	/**
	 * RCP's application
	 * @@generated
	 */
	public static class Application implements <%=importManager.getImportedName("org.eclipse.core.runtime.IPlatformRunnable")%> {
		/**
		 * @@see org.eclipse.core.runtime.IPlatformRunnable#run(java.lang.Object)
		 * @@generated
		 */
		public Object run(Object args) {
			<%=importManager.getImportedName("org.eclipse.ui.application.WorkbenchAdvisor")%> workbenchAdvisor = new Advisor();
			<%=importManager.getImportedName("org.eclipse.swt.widgets.Display")%> display = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.createDisplay();
			try {
				int returnCode = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.createAndRunWorkbench(display, workbenchAdvisor);
				if (returnCode == <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.RETURN_RESTART) {
					return <%=importManager.getImportedName("org.eclipse.core.runtime.IPlatformRunnable")%>.EXIT_RESTART;
				} else {
					return <%=importManager.getImportedName("org.eclipse.core.runtime.IPlatformRunnable")%>.EXIT_OK;
				}
			} finally {
				display.dispose();
			}
		}
	}
 
  	/**
	 * RCP's perspective
	 * @@generated
	 */
	public static class Advisor extends <%=importManager.getImportedName("org.eclipse.ui.application.WorkbenchAdvisor")%> {
		/**
		 * @@see org.eclipse.ui.application.WorkbenchAdvisor#getInitialWindowPerspectiveId()
		 * @@generated
		 */
		public String getInitialWindowPerspectiveId() {
			return Perspective.ID_PERSPECTIVE;
		}

		/**
		 * @@see org.eclipse.ui.application.WorkbenchAdvisor#initialize(org.eclipse.ui.application.IWorkbenchConfigurer)
		 * @@generated
		 */
		public void initialize(<%=importManager.getImportedName("org.eclipse.ui.application.IWorkbenchConfigurer")%> configurer) {
			super.initialize(configurer);
			configurer.setSaveAndRestore(true);
		}

		/**
		 * @@see org.eclipse.ui.application.WorkbenchAdvisor#createWorkbenchWindowAdvisor(org.eclipse.ui.application.IWorkbenchWindowConfigurer)
		 * @@generated
		 */
		public WorkbenchWindowAdvisor createWorkbenchWindowAdvisor(<%=importManager.getImportedName("org.eclipse.ui.application.IWorkbenchWindowConfigurer")%> configurer) {
			return new WindowAdvisor(configurer);
		}
	}

  	/**
	 * RCP's perspective
	 * @@generated
	 */
	public static class Perspective implements <%=importManager.getImportedName("org.eclipse.ui.IPerspectiveFactory")%> {
		/**
		 * Perspective ID
		 * @@generated
		 */
		public static final String ID_PERSPECTIVE = "<%=genPlugin.getID()%>.Perspective";	//$NON-NLS-1$

		/**
		 * @@see org.eclipse.ui.IPerspectiveFactory#createInitialLayout(org.eclipse.ui.IPageLayout)
		 * @@generated
		 */
		public void createInitialLayout(<%=importManager.getImportedName("org.eclipse.ui.IPageLayout")%> layout) {
			layout.setEditorAreaVisible(true);
			layout.addPerspectiveShortcut(ID_PERSPECTIVE);

			<%=importManager.getImportedName("org.eclipse.ui.IFolderLayout")%> right = layout.createFolder("right", <%=importManager.getImportedName("org.eclipse.ui.IPageLayout")%>.RIGHT, (float)0.66, layout.getEditorArea());	//$NON-NLS-1$
			right.addView(IPageLayout.ID_OUTLINE);
<%
if (!genDiagram.getEditorGen().getEditor().isEclipseEditor()) {
%>
			<%=importManager.getImportedName("org.eclipse.ui.IFolderLayout")%> top = layout.createFolder("top", <%=importManager.getImportedName("org.eclipse.ui.IPageLayout")%>.TOP, (float)0.5, layout.getEditorArea());	//$NON-NLS-1$
			top.addView(<%=importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName())%>.ID);
<%
}
%>
			<%=importManager.getImportedName("org.eclipse.ui.IFolderLayout")%> bottomRight = layout.createFolder("bottomRight", <%=importManager.getImportedName("org.eclipse.ui.IPageLayout")%>.BOTTOM, (float)0.60, "right");	//$NON-NLS-1$	//$NON-NLS-2$
			bottomRight.addView(<%=importManager.getImportedName("org.eclipse.ui.IPageLayout")%>.ID_PROP_SHEET);
		}
	}

	/**
	 * RCP's window advisor
	 * @@generated
	 */
	public static class WindowAdvisor extends <%=importManager.getImportedName("org.eclipse.ui.application.WorkbenchWindowAdvisor")%> {
		/**
		 * @@see WorkbenchWindowAdvisor#WorkbenchWindowAdvisor(org.eclipse.ui.application.IWorkbenchWindowConfigurer)
		 * @@generated
		 */
		public WindowAdvisor(<%=importManager.getImportedName("org.eclipse.ui.application.IWorkbenchWindowConfigurer")%> configurer) {
			super(configurer);
		}
		
		/**
		 * @@see org.eclipse.ui.application.WorkbenchWindowAdvisor#preWindowOpen()
		 * @@generated
		 */
		public void preWindowOpen() {
			<%=importManager.getImportedName("org.eclipse.ui.application.IWorkbenchWindowConfigurer")%> configurer = getWindowConfigurer();
			configurer.setInitialSize(new <%=importManager.getImportedName("org.eclipse.swt.graphics.Point")%>(600, 450));
			configurer.setShowCoolBar(false);
			configurer.setShowStatusLine(true);
			configurer.setTitle(getString("_UI_Application_title"));	//$NON-NLS-1$
		}
		
		/**
		 * @@see org.eclipse.ui.application.WorkbenchWindowAdvisor#createActionBarAdvisor(org.eclipse.ui.application.IActionBarConfigurer)
		 * @@generated
		 */
		public <%=importManager.getImportedName("org.eclipse.ui.application.ActionBarAdvisor")%> createActionBarAdvisor(<%=importManager.getImportedName("org.eclipse.ui.application.IActionBarConfigurer")%> configurer) {
			return new WindowActionBarAdvisor(configurer);
		}
	}

	/**
	 * RCP's action bar advisor
	 * @@generated
	 */
	public static class WindowActionBarAdvisor extends <%=importManager.getImportedName("org.eclipse.ui.application.ActionBarAdvisor")%> {
		/**
		 * @@see ActionBarAdvisor#ActionBarAdvisor(org.eclipse.ui.application.IActionBarConfigurer)
		 * @@generated
		 */
		public WindowActionBarAdvisor(<%=importManager.getImportedName("org.eclipse.ui.application.IActionBarConfigurer")%> configurer) {
			super(configurer);
		}
		
		/**
		 * @@see org.eclipse.ui.application.ActionBarAdvisor#fillMenuBar(org.eclipse.jface.action.IMenuManager)
		 * @@generated
		 */
		protected void fillMenuBar(<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menuBar) {
			<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchWindow")%> window = getActionBarConfigurer().getWindowConfigurer().getWindow();
			menuBar.add(createFileMenu(window));
			menuBar.add(createEditMenu(window));
			menuBar.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.MB_ADDITIONS));
			menuBar.add(createWindowMenu(window));
			menuBar.add(createHelpMenu(window));					
		}

		/**
		 * Creates the 'File' menu.
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> createFileMenu(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchWindow")%> window) {
			<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menu = new <%=importManager.getImportedName("org.eclipse.jface.action.MenuManager")%>(getString("_UI_Menu_File_label"),	//$NON-NLS-1$
				<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.M_FILE);
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.FILE_START));
	
			<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> newMenu = new <%=importManager.getImportedName("org.eclipse.jface.action.MenuManager")%>(getString("_UI_Menu_New_label"), "new");	//$NON-NLS-1$	//$NON-NLS-2$
			newMenu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.MB_ADDITIONS));
	
			menu.add(newMenu);
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.Separator")%>());
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.MB_ADDITIONS));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.Separator")%>());
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.CLOSE.create(window));
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.CLOSE_ALL.create(window));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.Separator")%>());
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.SAVE.create(window));
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.SAVE_AS.create(window));
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.SAVE_ALL.create(window));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.Separator")%>());
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.QUIT.create(window));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.FILE_END));
			return menu;
		}

		/**
		 * Creates the 'Edit' menu.
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> createEditMenu(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchWindow")%> window) {
			<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menu = new <%=importManager.getImportedName("org.eclipse.jface.action.MenuManager")%>(getString("_UI_Menu_Edit_label"),	//$NON-NLS-1$
				<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.M_EDIT);
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.EDIT_START));
	
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.UNDO.create(window));
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.REDO.create(window));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.UNDO_EXT));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.Separator")%>());
	
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.CUT.create(window));
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.COPY.create(window));
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.PASTE.create(window));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.CUT_EXT));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.Separator")%>());
	
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.DELETE.create(window));
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.SELECT_ALL.create(window));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.Separator")%>());
	
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.ADD_EXT));
	
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.EDIT_END));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.Separator")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.MB_ADDITIONS));
			return menu;
		}
	
		/**
		 * Creates the 'Window' menu.
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> createWindowMenu(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchWindow")%> window) {
			<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menu = new <%=importManager.getImportedName("org.eclipse.jface.action.MenuManager")%>(getString("_UI_Menu_Window_label"),	//$NON-NLS-1$
				<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.M_WINDOW);
	
			addToMenuAndRegister(menu, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.OPEN_NEW_WINDOW.create(window));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.MB_ADDITIONS));
			menu.add(<%=importManager.getImportedName("org.eclipse.ui.actions.ContributionItemFactory")%>.OPEN_WINDOWS.create(window));
	
			return menu;
		}
	
		/**
		 * Creates the 'Help' menu.
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> createHelpMenu(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchWindow")%> window) {
			<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menu = new <%=importManager.getImportedName("org.eclipse.jface.action.MenuManager")%>(getString("_UI_Menu_Help_label"), <%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.M_HELP);	//$NON-NLS-1$
			// Welcome or intro page would go here
			// Help contents would go here
			// Tips and tricks page would go here
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.HELP_START));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.HELP_END));
			menu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.GroupMarker")%>(<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchActionConstants")%>.MB_ADDITIONS));
			return menu;
		}
		
		/**
		 * Adds the specified action to the given menu and also registers the action with the
		 * action bar configurer, in order to activate its key binding.
		 * @@generated
		 */
		protected void addToMenuAndRegister(<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menuManager, <%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> action) {
			menuManager.add(action);
			getActionBarConfigurer().registerGlobalAction(action);			
		}		
	}

	/**
	 * About action for the RCP application.
	 * @@generated
	 */
	public static class AboutAction extends <%=importManager.getImportedName("org.eclipse.emf.common.ui.action.WorkbenchWindowActionDelegate")%> {
		/**
		 * @@see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)
		 * @@generated
		 */
		public void run(<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> action) {
			<%=importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog")%>.openInformation(getWindow().getShell(), getString("_UI_About_title"),	//$NON-NLS-1$
			getString("_UI_About_text"));	//$NON-NLS-1$
		}
	}
 <%
 	}
 %>

 	/**
	 * Open action for the <%=genModel.getModelName()%> diagram.
	 * @@generated
	 */
	public static class OpenDiagramAction extends <%=importManager.getImportedName("org.eclipse.emf.common.ui.action.WorkbenchWindowActionDelegate")%> {
		/**
		 * Opens the editors for the files selected using the file dialog.
		 * @@generated
		 */
		public void run(<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> action) {
			String filePath = openFilePathDialog(getWindow().getShell(), "*.<%=editorGen.getDiagramFileExtension()%>", <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.OPEN);	//$NON-NLS-1$
			if (filePath != null) {
<%
if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {
%>
				openEditor(URI.createFileURI(filePath));
<%
} else {
%>
				showView(URI.createFileURI(filePath));
<%
}
%>
			}
		}
 	}

	/**
	 * Open URI action for the <%=genModel.getModelName()%> diagram.
	 * @@generated
	 */
	public static class OpenURIAction extends <%=importManager.getImportedName("org.eclipse.emf.common.ui.action.WorkbenchWindowActionDelegate")%> {
		/**
		 * Opens the editors for the files selected using the LoadResourceDialog.
		 * @@generated
		 */
		public void run(<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> action) {
			<%=importManager.getImportedName("org.eclipse.emf.edit.ui.action.LoadResourceAction")%>.LoadResourceDialog loadResourceDialog = new <%=importManager.getImportedName("org.eclipse.emf.edit.ui.action.LoadResourceAction")%>.LoadResourceDialog(getWindow().getShell());
			if (<%=importManager.getImportedName("org.eclipse.jface.dialogs.Dialog")%>.OK == loadResourceDialog.open()) {
				for (<%=importManager.getImportedName("java.util.Iterator")%> it = loadResourceDialog.getURIs().iterator(); it.hasNext(); ) {
<%
if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {
%>
					openEditor((URI) it.next());
<%
} else {
%>
					showView((URI) it.next());
<%
}
%>
				}
			}
		}
	}

	/**
	 * New diagram action for the <%=genModel.getModelName()%> diagram.
	 * @@generated
	 */
	public static class NewDiagramAction extends <%=importManager.getImportedName("org.eclipse.emf.common.ui.action.WorkbenchWindowActionDelegate")%> {
		/**
		 * Opens the wizard to create the diagram.
		 * @@generated
		 */
		public void run(<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> action) {
			<%=importManager.getImportedName(genDiagram.getCreationWizardQualifiedClassName())%> wizard = new <%=importManager.getImportedName(genDiagram.getCreationWizardQualifiedClassName())%>();
			wizard.init(getWindow().getWorkbench(), <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>.EMPTY);
			<%=importManager.getImportedName("org.eclipse.jface.wizard.WizardDialog")%> wizardDialog = new <%=importManager.getImportedName("org.eclipse.jface.wizard.WizardDialog")%>(getWindow().getShell(), wizard);
			wizardDialog.open();
		}
	}
<%
}
%>
@


1.5
log
@[164844]: Refactor InitDiagramFileAction to be able to use it in headless mode: XyzDiagramEditorUtil.createDiagramFor(EObject diagramRoot) method is now generated;
If a node has compartments, but does not have any direct children, do not generate unused method getXyz_1234NotationalChildNodeCommand() and method createXyz_1234Children() that always returns Collections.EMPTY_LIST.
@
text
@d248 9
a256 2

			<%=importManager.getImportedName("org.eclipse.ui.IFolderLayout")%> bottomRight = layout.createFolder("bottonRight", <%=importManager.getImportedName("org.eclipse.ui.IPageLayout")%>.BOTTOM, (float)0.60, "right");	//$NON-NLS-1$	//$NON-NLS-2$
@


1.4
log
@[163214]: Lite runtime should support generation to a View
[164843]: Make it possible to specify the editing domain with which the editor/viewer should operate
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
d26 2
d30 2
d113 20
@


1.3
log
@[158023] bblajer - Diagram Layout
@
text
@d49 3
d79 29
d420 3
d424 7
d448 3
d452 7
@


1.2
log
@[bblajer] #114200 Provide an option to generate RCP application - added RCP support for pure-GEF (lite) generator
@
text
@d52 1
a52 1
	public static boolean openEditor(URI fileURI) {
d63 1
a63 1
			return false;
d66 1
a66 1
				page.openEditor(new URIEditorInput(fileURI), editorDescriptor.getId());
d72 1
a72 1
				return false;
a74 2

		return true;
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
d6 1
d8 2
d57 1
a57 1
		IEditorDescriptor editorDescriptor = workbench.getEditorRegistry().getDefaultEditor(fileURI.toFileString());
d79 3
d101 333
a433 1
 }
@

