head	1.21;
access;
symbols
	v20080910-1520:1.21
	v20070103-0300:1.20
	M4_20:1.20
	v20061222-1800:1.19
	v20061214-0000:1.17
	v20061120-1300:1.15
	M3_20:1.13
	v20061117-0800:1.13
	v20061013-1330:1.11
	v20061005-1700:1.6
	M1_20:1.8
	v20060904-1500:1.8
	v20060824-1600:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060626-1420:1.6
	v20060620-0400:1.6
	v20060616-1400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-1300:1.4
	v20060519-0800:1.4
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.3
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.21
date	2007.02.02.17.14.33;	author bblajer;	state dead;
branches;
next	1.20;
commitid	78d445c371764567;

1.20
date	2006.12.25.12.00.12;	author bblajer;	state Exp;
branches;
next	1.19;
commitid	430d458fbd4b4567;

1.19
date	2006.12.21.20.35.34;	author bblajer;	state Exp;
branches;
next	1.18;
commitid	bee458af0104567;

1.18
date	2006.12.19.19.09.57;	author bblajer;	state Exp;
branches;
next	1.17;
commitid	9c1458839044567;

1.17
date	2006.11.29.13.51.55;	author bblajer;	state Exp;
branches;
next	1.16;
commitid	50c1456d907a4567;

1.16
date	2006.11.23.18.57.15;	author bblajer;	state Exp;
branches;
next	1.15;
commitid	66934565ef0a4567;

1.15
date	2006.11.20.16.03.11;	author bblajer;	state Exp;
branches;
next	1.14;
commitid	253a4561d1be4567;

1.14
date	2006.11.20.12.37.40;	author bblajer;	state Exp;
branches;
next	1.13;
commitid	71004561a1934567;

1.13
date	2006.11.16.18.31.56;	author bblajer;	state Exp;
branches;
next	1.12;
commitid	4bc7455cae9b4567;

1.12
date	2006.11.09.18.15.43;	author bblajer;	state Exp;
branches;
next	1.11;

1.11
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.02.12.29.34;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.11.15.45.01;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.01.16.14.09;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.04.17.05.48;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.25.14.19.01;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.15.15.54.30;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.01.09.57.20;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.20.18.27.23;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.21
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="EditorGenerator"
    imports="org.eclipse.emf.common.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenEditorView genEditor = (GenEditorView) ((Object[]) argument)[0];
final GenDiagram genDiagram = genEditor.getEditorGen().getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final boolean isRichClientPlatform = genDiagram.getEditorGen().getApplication() != null;
final boolean isEclipseEditor = genEditor.isEclipseEditor();

importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);%>

<%
importManager.registerInnerClass(genEditor.getClassName() + "ContextMenuProvider");
if (!isRichClientPlatform) {
	importManager.registerInnerClass("ResourceTracker");
}
%>

/**
 * @@generated
 */
public class <%=genEditor.getClassName()%> extends <%=importManager.getImportedName(isEclipseEditor ? "org.eclipse.gmf.runtime.lite.parts.DiagramEditor" : "org.eclipse.gmf.runtime.lite.parts.DiagramViewPart")%> {
	/**
	 * @@generated
	 */
	public static final String ID = "<%=genEditor.getID()%>"; //$NON-NLS-1$

<%
if (!isRichClientPlatform && isEclipseEditor) {
%>
	/**
	 * This class listens to changes to the file system in the workspace, and
	 * makes the following changes: 
	 * <ul><li>If an open, saved file gets deleted, the editor is closed.</li>
	 * <li>If an open file gets renamed or moved, the editor's
	 * input is changed accordingly.</li></ul>
	 *
	 * @@generated
	 */
	private class ResourceTracker implements <%=importManager.getImportedName("org.eclipse.core.resources.IResourceChangeListener")%> {
		/**
		 * @@generated
		 */
		public void resourceChanged(<%=importManager.getImportedName("org.eclipse.core.resources.IResourceChangeEvent")%> event) {
			<%=importManager.getImportedName("org.eclipse.core.resources.IResourceDelta")%> delta = event.getDelta();
			if (delta != null) {
				<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> file = getFileFromInput(getEditorInput());
				if (file != null) {
					<%=importManager.getImportedName("org.eclipse.core.resources.IResourceDelta")%> fileDelta = delta.findMember(file.getFullPath());
					if (fileDelta != null) {
						processFileDelta(fileDelta);
					}
				}
			}
		}

		/**
		 * @@generated
		 */
		private void processFileDelta(<%=importManager.getImportedName("org.eclipse.core.resources.IResourceDelta")%> delta) {
			assert (delta != null && delta.getResource().equals(getFileFromInput(getEditorInput())));
			if (delta.getKind() == <%=importManager.getImportedName("org.eclipse.core.resources.IResourceDelta")%>.REMOVED) {
				if ((<%=importManager.getImportedName("org.eclipse.core.resources.IResourceDelta")%>.MOVED_TO & delta.getFlags()) == 0) {
					<%/*XXX: make sure unsaved deleted file is handled correctly*/%>
					if (!isDirty()) {
						closeEditor();
					}
				} else {
					// else if it was moved or renamed
					final <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> newFile = <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().getFile(delta.getMovedToPath());
					final <%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> newEditorInput;
					if (getEditorInput() instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
						<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> newFileURI = <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(newFile.getFullPath().toString(), true);
						<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> oldFileURI = ((<%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) getEditorInput()).getURI();
						if (oldFileURI.fragment() != null) {
							newFileURI = newFileURI.appendFragment(oldFileURI.fragment());
						}
						newEditorInput = new <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>(newFileURI);
					} else {
						newEditorInput = new <%=importManager.getImportedName("org.eclipse.ui.part.FileEditorInput")%>(newFile);
					}
					<%=importManager.getImportedName("org.eclipse.swt.widgets.Display")%> display = getSite().getShell().getDisplay();
					display.asyncExec(new Runnable() {
						public void run() {
							setInput(newEditorInput);
						}
					});
				}
			}
		}
	}

	/**
	 * @@generated
	 */
	private ResourceTracker resourceTracker;

	/**
	 * @@generated
	 */
	private ResourceTracker getResourceTracker() {
		if (resourceTracker == null) {
			resourceTracker = new ResourceTracker();
		}
		return resourceTracker;
	}

<%
}
if (!isEclipseEditor) {
%>
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName(genEditor.getActionBarContributorQualifiedClassName())%> myActionBarContributor;
<%
}
%>

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> diagramRoot;

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram;

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.emf.edit.provider.ComposedAdapterFactory")%> domainAdapterFactory;

	/**
	 * @@generated
	 */
	protected void createActions() {
		addStackAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.UndoAction")%>(this));
		addStackAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.RedoAction")%>(this));

		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.DeleteAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this));
		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.DirectEditAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this));

		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.AlignmentAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this, <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.LEFT));
		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.AlignmentAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this, <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.RIGHT));
		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.AlignmentAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this, <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.TOP));
		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.AlignmentAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this, <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.BOTTOM));
		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.AlignmentAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this, <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.CENTER));
		addEditPartAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.AlignmentAction")%>((<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%>) this, <%=importManager.getImportedName("org.eclipse.draw2d.PositionConstants")%>.MIDDLE));

<%
if (isEclipseEditor) {
%>
		addEditorAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.SaveAction")%>(this));
<%
}
%>
		addEditorAction(new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.PrintAction")%>(this));
		addEditorAction(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.ui.actions.LayoutDiagramAction")%>(this));

		<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> zoomIn = new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.ZoomInAction")%>(getZoomManager());
		<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> zoomOut = new <%=importManager.getImportedName("org.eclipse.gef.ui.actions.ZoomOutAction")%>(getZoomManager());
		addAction(zoomIn);
		addAction(zoomOut);
		getSite().getKeyBindingService().registerAction(zoomIn);
		getSite().getKeyBindingService().registerAction(zoomOut);
		<%=importManager.getImportedName("org.eclipse.gef.KeyHandler")%> keyHandler = getGraphicalViewer().getKeyHandler();
		keyHandler.put(<%=importManager.getImportedName("org.eclipse.gef.KeyStroke")%>.getPressed(<%=importManager.getImportedName("org.eclipse.swt.SWT")%>.DEL, 127, 0), getActionRegistry().getAction(<%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.DELETE.getId()));
		keyHandler.put(<%=importManager.getImportedName("org.eclipse.gef.KeyStroke")%>.getPressed(<%=importManager.getImportedName("org.eclipse.swt.SWT")%>.F2, 0), getActionRegistry().getAction(<%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.DIRECT_EDIT));
	}

<%
if (!isRichClientPlatform && isEclipseEditor) {
%>
	/**
	 * @@generated
	 */
	void closeEditor() {
		getSite().getShell().getDisplay().syncExec(new Runnable() {
			public void run() {
				getSite().getPage().closeEditor(<%=genEditor.getClassName()%>.this, false);
			}
		});
	}
<%
}
if (!isEclipseEditor) {
%>
	/**
	 * @@generated
	 */
	protected void updateActionBars() {
		if (myActionBarContributor != null) {
			myActionBarContributor.updateGlobalActions(this);
		}
	}

<%
}
%>
	/**
	 * @@generated
	 */
	public void dispose() {
<%
if (!isRichClientPlatform && isEclipseEditor) {
%>
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> oldResource = getFileFromInput(getEditorInput());
		if (oldResource != null) {
			oldResource.getWorkspace().removeResourceChangeListener(getResourceTracker());
		}
<%
}
if (!isEclipseEditor) {
%>
		myActionBarContributor.dispose();
		myActionBarContributor = null;
<%
}
%>
		// important: always call super implementation of dispose
		super.dispose();
	}

<%
if (isEclipseEditor) {
%>
	/**
	 * @@generated
	 */
	public void doSave(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> monitor) {
		try {
			save(monitor);
			getCommandStack().markSaveLocation();
		} catch (<%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> e) {
			<%=importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog")%>.openError(getSite().getShell(), "Error During Save", "The current <%=genDiagram.getEditorGen().getDomainGenModel().getModelName()%> model could not be saved.", e.getStatus());
		}
	}

<%
}
%>
	/**
	 * @@generated
	 */
	public void configurePalette(<%=importManager.getImportedName("org.eclipse.gef.palette.PaletteRoot")%> paletteRoot) {
<%
{
	final Palette palette = genDiagram.getPalette();
	if (palette != null) {
%>
		new <%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>(getDomainAdapterFactory()).contributeToPalette(paletteRoot);
<%
	}
}
%>
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> getDiagramRoot() {
		return diagramRoot;
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> getDiagram() {
		return diagram;
	}

<%
if (genEditor.getEditorGen().getPropertySheet() != null) {
%>
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySheetPage")%> getPropertySheetPage() {
		if (myPropertySheetPage == null) {
			myPropertySheetPage = new <%=importManager.getImportedName("org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage")%>(new <%=importManager.getImportedName("org.eclipse.ui.views.properties.tabbed.ITabbedPropertySheetPageContributor")%>() {
				public String getContributorId() {
					return <%=genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()%>.ID;
				}
			});
		}
		return myPropertySheetPage;
	}

	/**
	 * @@generated
	 */
	private org.eclipse.ui.views.properties.IPropertySheetPage myPropertySheetPage;
<%
}
if (isEclipseEditor) {
%>
	/**
	 * @@generated
	 */
	public void init(<%=importManager.getImportedName("org.eclipse.ui.IEditorSite")%> site, <%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) throws <%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> {
		<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> file = getURIFromInput(input);
		if (file == null) {
			throw new <%=importManager.getImportedName("org.eclipse.ui.PartInitException")%>("The specified input is not valid.");
		}
		super.init(site, input);
		// validate
		if (getDiagramRoot() == null) {
			throw new <%=importManager.getImportedName("org.eclipse.ui.PartInitException")%>("The specified input is not valid.");
		}
	}

	/**
	 * @@generated
	 */
	protected void setInput(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
<%
	if (!isRichClientPlatform) {
%>
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> oldResource = getFileFromInput(getEditorInput());
		if (oldResource != null) {
			oldResource.getWorkspace().removeResourceChangeListener(getResourceTracker());
		}
<%
	}
%>
		<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> file = getURIFromInput(input);
		load(file);
		setPartName(file.lastSegment());
		super.setInput(input);
<%
	if (!isRichClientPlatform) {
%>
		<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> newResource = getFileFromInput(getEditorInput());
		if (newResource != null) {
			newResource.getWorkspace().addResourceChangeListener(getResourceTracker());
		}
<%
	}
%>
	}

<%
	if (!isRichClientPlatform) {
%>
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> getFileFromInput(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
		if (input instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) {
			return ((<%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) input).getFile();
		}
		<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> uri = getURIFromInput(input);
		if (uri != null) {
			if ("platform".equals(uri.scheme()) && (uri.segmentCount() > 2)) { //$NON-NLS-1$
				if ("resource".equals(uri.segment(0))) { //$NON-NLS-1$
					<%=importManager.getImportedName("org.eclipse.core.runtime.IPath")%> path = new <%=importManager.getImportedName("org.eclipse.core.runtime.Path")%>(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.decode(uri.path())).removeFirstSegments(1);
					return <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().getFile(path);
				}
			}
		}
		return null;
	}

<%
	}
%>
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> getURIFromInput(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
		if (input == null) {
			return null;
		}
<%
	if (!isRichClientPlatform) {
%>
		if (input instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) {
			return <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(((<%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>)input).getFile().getFullPath().toString(), true);
		}
<%
	}
%>
		if (input instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
			return ((<%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) input).getURI();
		}
		if (input instanceof <%=importManager.getImportedName("org.eclipse.ui.IPathEditorInput")%>) {
			return <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createFileURI(((<%=importManager.getImportedName("org.eclipse.ui.IPathEditorInput")%>)input).getPath().toOSString());
		}
		<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> uri = (<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>) input.getAdapter(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.class);
		if (uri != null) {
			return uri;
		}
		return null;
	}

<%
}	//editor-specific code
%>

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.emf.common.notify.AdapterFactory")%> getDomainAdapterFactory() {
		if (domainAdapterFactory == null) {
			<%=importManager.getImportedName("java.util.List")%> factories = new <%=importManager.getImportedName("java.util.ArrayList")%>();
			factories.add(new <%=importManager.getImportedName("org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory")%>());
<%
final EList genPackages = genDiagram.getEditorGen().getAllDomainGenPackages(true);
for (int i = 0; i < genPackages.size(); i++) {
	GenPackage genPackage = (GenPackage) genPackages.get(i);
%>
			factories.add(new <%=importManager.getImportedName(genPackage.getQualifiedItemProviderAdapterFactoryClassName())%>());
<%}%>
			factories.add(new <%=importManager.getImportedName("org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory")%>());
			factories.add(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.provider.NotationItemProviderAdapterFactory")%>());
			domainAdapterFactory = new <%=importManager.getImportedName("org.eclipse.emf.edit.provider.ComposedAdapterFactory")%>(factories);
		}
		return domainAdapterFactory;
	}

<%
if (!isEclipseEditor) {
%>
	/**
	 * @@generated
	 */
	public void createPartControl(<%=importManager.getImportedName("org.eclipse.swt.widgets.Composite")%> parent) {
		super.createPartControl(parent);
		<%=importManager.getImportedName("org.eclipse.ui.IActionBars")%> bars = getViewSite().getActionBars();
		myActionBarContributor = new <%=importManager.getImportedName(genEditor.getActionBarContributorQualifiedClassName())%>();
		myActionBarContributor.init(bars, getSite().getPage());
		bars.updateActionBars();
	}

	/**
	 * @@generated
	 */
	protected void setInput(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> diagramURI) throws <%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%> {
		load(diagramURI);
		if (diagram == null || diagramRoot == null) {
			throw new <%=importManager.getImportedName("org.eclipse.core.runtime.CoreException")%>(new <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>(<%=importManager.getImportedName("org.eclipse.core.runtime.IStatus")%>.ERROR,
				<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.ID, 0, "Failed to load diagram", null));
		}
	}
<%
}
%>
	/**
	 * @@generated
	 */
	private void load(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> diagramFile) {
		diagramRoot = null;
		diagram = null;
		if (diagramFile == null) {
			return;
		}
		final <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> diagramFileURI = diagramFile;
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = getEditingDomain();
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%> resourceSet = editingDomain.getResourceSet();
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> diagramResource = resourceSet.getResource(diagramFile.trimFragment(), true);
		if (diagramResource == null) {
			return;
		}
		<%=importManager.getImportedName("org.eclipse.emf.workspace.AbstractEMFOperation")%> operation = new <%=importManager.getImportedName("org.eclipse.emf.workspace.AbstractEMFOperation")%>(editingDomain, "Load diagram", null) {
			protected <%=importManager.getImportedName("org.eclipse.core.runtime.IStatus")%> doExecute(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> monitor, <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%> info) throws <%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%> {
				if (diagramFileURI.fragment() != null) {
					<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> possibleDiagram = diagramResource.getEObject(diagramFileURI.fragment());
					if (possibleDiagram instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) {
						diagram = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) possibleDiagram;
					} else {
						return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.CANCEL_STATUS;
					}
				} else {
					diagram = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) findInResource(diagramResource, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>.class);
					if (diagram == null) {
						diagram = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDiagram();
						diagramResource.getContents().add(0, diagram);
						//Auxiliary creation should not be undoable.
						try {
							diagramResource.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
						} catch (<%=importManager.getImportedName("java.io.IOException")%> e) {
							diagram = null;
							diagramRoot = null;
							return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.CANCEL_STATUS;
						}
					}
				}
				diagramRoot = (<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>) diagram.getElement();
				if (diagramRoot == null) {
<%
{
%>
<%
	boolean sameFile = genDiagram.getEditorGen().isSameFileForDiagramAndModel();
	String resourceToUse;
	if (!sameFile) {
%>
					<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> modelFile = <%=genDiagram.getDiagramEditorUtilClassName()%>.getModelFileURI(diagramFileURI);
					<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> modelResource = resourceSet.getResource(modelFile, true);
					if (modelResource == null) {
						diagram = null;
						return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.CANCEL_STATUS;
					}
<%
		resourceToUse = "modelResource";
	} else {
		resourceToUse = "diagramResource";
	}
%>
					diagramRoot = (<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>) findInResource(<%=resourceToUse%>, <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>.class);
					if (diagramRoot == null) {
						diagramRoot = <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>();
						<%=resourceToUse%>.getContents().add(0, <%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>diagramRoot);
						//We don't want this auxiliary creation to be undoable.
						try {
							<%=resourceToUse%>.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
						} catch (<%=importManager.getImportedName("java.io.IOException")%> e) {
							diagram = null;
							diagramRoot = null;
							return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.CANCEL_STATUS;
						}
					}
					if (!diagramRoot.equals(diagram.getElement())) {
						diagram.setElement(<%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>diagramRoot);
					}
				}
				if (!diagram.eIsSet(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getView_Type())) {
					<%=importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName())%>.INSTANCE.decorateView(diagram);
<%
	if (isEclipseEditor) {
%>
					doSave(new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>());
<%
	} else {
%>
						try {
							diagramResource.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
						} catch (<%=importManager.getImportedName("java.io.IOException")%> e) {
							diagram = null;
							diagramRoot = null;
							return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.CANCEL_STATUS;
						}
<%
	}
%>
				}
				return <%=importManager.getImportedName("org.eclipse.core.runtime.Status")%>.OK_STATUS;
			}
		};
		try {
			operation.execute(new <%=importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%>(), null);
		} catch (<%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%> e) {
			diagram = null;
			diagramRoot = null;
		}
	}
<%
}//local declarations
%>

	/**
	 * @@generated
	 */
	private Object findInResource(<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource, Class expectedClass) {
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = resource.getContents().iterator(); it.hasNext(); ) {
			Object next = it.next();
			if (expectedClass.isInstance(next)) {
				return next;
			}
		}
		return null;
	}

	/**
	 * @@generated
	 */
	public void initializeGraphicalViewer() {
		// initialize the viewer with input
		<%=importManager.getImportedName("org.eclipse.gef.editparts.ScalableFreeformRootEditPart")%> root = new <%=importManager.getImportedName("org.eclipse.gef.editparts.ScalableFreeformRootEditPart")%>();
		getGraphicalViewer().setRootEditPart(root);
		getGraphicalViewer().setEditPartFactory(new <%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>());

		<%=importManager.getImportedName("org.eclipse.draw2d.LayeredPane")%> printableLayers = (<%=importManager.getImportedName("org.eclipse.draw2d.LayeredPane")%>) root.getLayer(<%=importManager.getImportedName("org.eclipse.gef.LayerConstants")%>.PRINTABLE_LAYERS);
		<%=importManager.getImportedName("org.eclipse.draw2d.FreeformLayer")%> extLabelsLayer = new <%=importManager.getImportedName("org.eclipse.draw2d.FreeformLayer")%>();
		extLabelsLayer.setLayoutManager(new <%=importManager.getImportedName("org.eclipse.draw2d.DelegatingLayout")%>());
		printableLayers.addLayerAfter(extLabelsLayer, <%=importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName())%>.EXTERNAL_NODE_LABELS_LAYER, <%=importManager.getImportedName("org.eclipse.gef.LayerConstants")%>.PRIMARY_LAYER);
		getGraphicalViewer().setContents(getDiagram());
	}

	/**
	 * @@generated
	 */
	public void configureGraphicalViewer() {
		super.configureGraphicalViewer();
		<%=importManager.getImportedName("org.eclipse.gef.GraphicalViewer")%> viewer = getGraphicalViewer();
		// configure the context menu
		<%=importManager.getImportedName("org.eclipse.gef.ContextMenuProvider")%> provider = new <%=genEditor.getClassName()%>ContextMenuProvider(viewer);
		viewer.setContextMenu(provider);
		getSite().registerContextMenu(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.ID + ".editor.contextmenu", provider, getSite().getSelectionProvider()); //$NON-NLS-1$

		<%=importManager.getImportedName("org.eclipse.gef.KeyHandler")%> keyHandler = new <%=importManager.getImportedName("org.eclipse.gef.ui.parts.GraphicalViewerKeyHandler")%>(viewer);
		viewer.setKeyHandler(keyHandler);

		viewer.setProperty(<%=importManager.getImportedName("org.eclipse.gef.MouseWheelHandler")%>.KeyGenerator.getKey(<%=importManager.getImportedName("org.eclipse.swt.SWT")%>.CTRL), <%=importManager.getImportedName("org.eclipse.gef.MouseWheelZoomHandler")%>.SINGLETON);
	}

	/**
	 * @@generated
	 */
	public boolean isFlyoutPalette() {
		return <%=genDiagram.getPalette() != null && genDiagram.getPalette().isFlyout()%>;
	}

	/**
	 * @@generated
	 */
	private class <%=genEditor.getClassName()%>ContextMenuProvider extends <%=importManager.getImportedName("org.eclipse.gef.ContextMenuProvider")%> {
		/**
		 * @@generated
		 */
		public <%=genEditor.getClassName()%>ContextMenuProvider(<%=importManager.getImportedName("org.eclipse.gef.EditPartViewer")%> viewer) {
			super(viewer);
		}

		/**
		 * @@generated
		 */
	    public void buildContextMenu(<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menuManager) {
	        <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.addStandardActionGroups(menuManager);
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.UNDO.getId(), <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_UNDO);
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.REDO.getId(), <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_UNDO);
	
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.COPY.getId(), <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_EDIT);
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.PASTE.getId(), <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_EDIT);
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.DELETE.getId(), <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_EDIT);
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.DIRECT_EDIT, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_EDIT);

			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.ui.actions.ActionIds")%>.LAYOUT_ALL_ACTION, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_REST);

<%
if (isEclipseEditor) {
%>
			appendActionToMenu(menuManager, <%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.SAVE.getId(), <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_SAVE);
<%
}
%>
			appendAlignmentSubmenu(menuManager);
	    }

		/**
		 * @@generated
		 */
		private void appendAlignmentSubmenu(<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menuManager) {
			// Alignment Actions
			<%=importManager.getImportedName("org.eclipse.jface.action.MenuManager")%> submenu = new <%=importManager.getImportedName("org.eclipse.jface.action.MenuManager")%>("Align");
			submenu.add(new <%=importManager.getImportedName("org.eclipse.jface.action.Separator")%>(<%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS));
	
			appendActionToMenu(submenu, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.ALIGN_LEFT, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS);
			appendActionToMenu(submenu, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.ALIGN_CENTER, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS);
			appendActionToMenu(submenu, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.ALIGN_RIGHT, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS);
			appendActionToMenu(submenu, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.ALIGN_TOP, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS);
			appendActionToMenu(submenu, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.ALIGN_MIDDLE, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS);
			appendActionToMenu(submenu, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.ALIGN_BOTTOM, <%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.MB_ADDITIONS);
	
			if (!submenu.isEmpty()) {
				menuManager.appendToGroup(<%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.GROUP_REST, submenu);
			}
		}

		/**
		 * @@generated
		 */
		private void appendActionToMenu(<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menu, String actionId, String menuGroup) {
			<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> action = getActionRegistry().getAction(actionId);
			if (action != null && action.isEnabled()) {
				menu.appendToGroup(menuGroup, action);
			}
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.20
log
@[159567]: Use GenApplication element from gmfgen model to generate RCP code
Use as much of the runtime templates as possible (changes are isolated as aspects)
@
text
@@


1.19
log
@Tabbed property sheet provided for the lite runtime (if GenPropertySheet is not null);
IllegalStateException when closing editor fixed.
@
text
@d7 1
a7 1
final boolean isRichClientPlatform = genDiagram.getEditorGen().getDomainGenModel().isRichClientPlatform();
@


1.18
log
@Make tests pass: Resource.getContents() is now parametrized
@
text
@d276 22
@


1.17
log
@[165791]: Diagrams that share EMF EditingDomain should share GEF CommandStacks
@
text
@d494 1
a494 1
						<%=resourceToUse%>.getContents().add(0, diagramRoot);
@


1.16
log
@[163214]: Lite runtime should support generation to a View
[164843]: Make it possible to specify the editing domain with which the editor/viewer should operate
@
text
@a280 10
	protected <%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> getEditingDomain(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input) {
		if (input instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramEditorInput")%>) {
			return <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(((<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramEditorInput")%>) input).getDiagram());
		}
		return null;
	}

	/**
	 * @@generated
	 */
@


1.15
log
@[165167]: Unregister listeners when editor is closed
@
text
@d8 1
d23 1
a23 1
public class <%=genEditor.getClassName()%> extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramEditor")%> {
d30 1
a30 1
if (!isRichClientPlatform) {
d74 1
a74 1
						<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> newFileURI = <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(newFile.getFullPath().toString());
d111 8
d153 3
d157 3
d175 1
a175 1
if (!isRichClientPlatform) {
d189 13
d208 1
a208 1
if (!isRichClientPlatform) {
d216 6
d227 3
d242 3
d275 3
d308 1
a308 1
if (!isRichClientPlatform) {
d315 1
a315 1
}
d322 1
a322 1
if (!isRichClientPlatform) {
d329 1
a329 1
}
d333 3
a335 1
<%if (!isRichClientPlatform) {%>
d355 3
a357 1
<%}%>
d365 3
a367 1
<%if (!isRichClientPlatform) {%>
d369 1
a369 1
			return <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(((<%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>)input).getFile().getFullPath().toString());
d371 3
a373 1
<%}%>
d387 4
d412 27
d475 1
a475 1
							return Status.CANCEL_STATUS;
d493 1
a493 1
						return Status.CANCEL_STATUS;
d511 1
a511 1
							return Status.CANCEL_STATUS;
d520 17
a536 1
					doSave(new NullProgressMonitor());
d538 1
a538 1
				return Status.OK_STATUS;
d549 1
a549 1
}
d631 3
d635 3
a637 1

@


1.14
log
@NPE when opening editor for the first time
@
text
@d179 10
@


1.13
log
@[164843]: Make it possible to specify the editing domain with which the editor/viewer should operate;
Refactoring to use as much common code as possible for diagram editors and viewers (for #163214);
Manifest.mf specifies J2SE1.5 as required execution environment.
@
text
@d305 3
@


1.12
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d198 1
a198 1
	protected void configurePalette(<%=importManager.getImportedName("org.eclipse.gef.palette.PaletteRoot")%> paletteRoot) {
d228 10
d288 6
a293 8
		if (input instanceof <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) {
			<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> uri = ((<%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>) input).getURI();
			if (uri != null) {
				if ("platform".equals(uri.scheme()) && (uri.segmentCount() > 2)) { //$NON-NLS-1$
					if ("resource".equals(uri.segment(0))) { //$NON-NLS-1$
						<%=importManager.getImportedName("org.eclipse.core.runtime.IPath")%> path = new <%=importManager.getImportedName("org.eclipse.core.runtime.Path")%>(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.decode(uri.path())).removeFirstSegments(1);
						return <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot().getFile(path);
					}
d307 1
a307 1
			return <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(((IFileEditorInput)input).getFile().getFullPath().toString());
d314 5
a318 1
			return <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createFileURI(((IPathEditorInput)input).getPath().toOSString());
d326 1
a326 1
	protected <%=importManager.getImportedName("org.eclipse.emf.common.notify.AdapterFactory")%> getDomainAdapterFactory() {
d457 1
a457 2
	protected void createGraphicalViewer(<%=importManager.getImportedName("org.eclipse.swt.widgets.Composite")%> parent) {
		super.createGraphicalViewer(parent);
d473 1
a473 1
	protected void configureGraphicalViewer() {
d490 7
@


1.11
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d23 5
d47 6
a52 3
				<%=importManager.getImportedName("org.eclipse.core.resources.IResourceDelta")%> fileDelta = delta.findMember(((<%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) getEditorInput()).getFile().getFullPath());
				if (fileDelta != null) {
					processFileDelta(fileDelta);
d61 1
a61 1
			assert (delta != null && delta.getResource().equals(((<%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) getEditorInput()).getFile()));
d71 11
d85 1
a85 1
							setInput(new <%=importManager.getImportedName("org.eclipse.ui.part.FileEditorInput")%>(newFile));
d243 1
a243 1
	protected void setInput(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> input)  {
d247 3
a249 3
		if (getEditorInput() instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) {
			<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> resource = ((<%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) getEditorInput()).getFile();
			resource.getWorkspace().removeResourceChangeListener(getResourceTracker());
d261 3
a263 3
		if (getEditorInput() instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) {
			<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> resource = ((<%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) getEditorInput()).getFile();
			resource.getWorkspace().addResourceChangeListener(getResourceTracker());
d270 23
d297 5
a301 1
<%if (isRichClientPlatform) {%>
a307 5
<%} else {%>
		if (input instanceof <%=importManager.getImportedName("org.eclipse.ui.IFileEditorInput")%>) {
			return <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(((IFileEditorInput)input).getFile().getFullPath().toString());
		}
<%}%>
d341 1
d343 2
a344 2
		<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%> resourceSet = editingDomain.getResourceSet();
		<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> diagramResource = resourceSet.getResource(diagramFile, true);
d346 1
a346 1
			diagramResource = resourceSet.createResource(diagramFile);
d348 26
a373 15
		diagram = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) findInResource(diagramResource, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>.class);
		if (diagram == null) {
			diagram = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDiagram();
			diagramResource.getContents().add(0, diagram);
			//Auxiliary creation should not be undoable.
			try {
				diagramResource.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
			} catch (<%=importManager.getImportedName("java.io.IOException")%> e) {
				diagram = null;
				diagramRoot = null;
				return;
			}
		}
		diagramRoot = (<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>) diagram.getElement();
		if (diagramRoot == null) {
d382 6
a387 5
			<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> modelFile = <%=genDiagram.getDiagramEditorUtilClassName()%>.getModelFileURI(diagramFile);
			<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> modelResource = resourceSet.getResource(modelFile, true);
			if (modelResource == null) {
				modelResource = resourceSet.createResource(modelFile);
			}
d394 20
a413 11
			diagramRoot = (<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>) findInResource(<%=resourceToUse%>, <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>.class);
			if (diagramRoot == null) {
				diagramRoot = <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>();
				<%=resourceToUse%>.getContents().add(0, diagramRoot);
				//We don't want this auxiliary creation to be undoable.
				try {
					<%=resourceToUse%>.save(<%=importManager.getImportedName("java.util.Collections")%>.EMPTY_MAP);
				} catch (<%=importManager.getImportedName("java.io.IOException")%> e) {
					diagram = null;
					diagramRoot = null;
					return;
d415 1
d417 6
a422 3
			if (!diagram.isSetElement()) {
				diagram.setElement(<%if (genDiagram.getDomainDiagramElement().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>diagramRoot);
			}
@


1.10
log
@[158023] bblajer - Diagram Layout
@
text
@d342 1
a342 1
				diagramRoot = <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryClassName())%>.eINSTANCE.create<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>();
@


1.9
log
@[156358] bblajer - Diagram overview with Lite runtime
@
text
@d127 1
d433 2
@


1.8
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d134 3
a402 2
		keyHandler.put(<%=importManager.getImportedName("org.eclipse.gef.KeyStroke")%>.getPressed(<%=importManager.getImportedName("org.eclipse.swt.SWT")%>.DEL, 127, 0), getActionRegistry().getAction(<%=importManager.getImportedName("org.eclipse.ui.actions.ActionFactory")%>.DELETE.getId()));
		keyHandler.put(<%=importManager.getImportedName("org.eclipse.gef.KeyStroke")%>.getPressed(<%=importManager.getImportedName("org.eclipse.swt.SWT")%>.F2, 0), getActionRegistry().getAction(<%=importManager.getImportedName("org.eclipse.gef.ui.actions.GEFActionConstants")%>.DIRECT_EDIT));
@


1.7
log
@[bblajer] #152774 Compilable code when EClass has instance class attribute set
@
text
@a12 4
importManager.registerInnerClass("UndoablePropertySheetEntry");
importManager.registerInnerClass("SetValueCommand");
importManager.registerInnerClass("ResetValueCommand");
importManager.registerInnerClass("UpdatableActionGroup");
a16 76

importManager.addImport("java.io.IOException");
importManager.addImport("java.util.ArrayList");
importManager.addImport("java.util.Collections");
importManager.addImport("java.util.EventObject");
importManager.addImport("java.util.HashMap");
importManager.addImport("java.util.Iterator");
importManager.addImport("java.util.List");

importManager.addImport("org.eclipse.core.runtime.CoreException");
importManager.addImport("org.eclipse.core.runtime.IProgressMonitor");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.core.runtime.NullProgressMonitor");
importManager.addImport("org.eclipse.core.runtime.Status");
importManager.addImport("org.eclipse.draw2d.PositionConstants");
importManager.addImport("org.eclipse.emf.common.util.URI");
importManager.addImport("org.eclipse.emf.ecore.resource.Resource");
importManager.addImport("org.eclipse.emf.ecore.resource.ResourceSet");
importManager.addImport("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain");
importManager.addImport("org.eclipse.emf.transaction.TransactionalEditingDomain");
importManager.addImport("org.eclipse.emf.edit.provider.ComposedAdapterFactory");
importManager.addImport("org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory");
importManager.addImport("org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory");
importManager.addImport("org.eclipse.gef.ContextMenuProvider");
importManager.addImport("org.eclipse.gef.EditPartViewer");
importManager.addImport("org.eclipse.gef.GraphicalViewer");
importManager.addImport("org.eclipse.gef.KeyHandler");
importManager.addImport("org.eclipse.gef.KeyStroke");
importManager.addImport("org.eclipse.gef.RootEditPart");
importManager.addImport("org.eclipse.gef.MouseWheelHandler");
importManager.addImport("org.eclipse.gef.MouseWheelZoomHandler");
importManager.addImport("org.eclipse.gef.commands.CommandStack");
importManager.addImport("org.eclipse.gef.commands.CommandStackListener");
importManager.addImport("org.eclipse.gef.editparts.ScalableFreeformRootEditPart");
importManager.addImport("org.eclipse.gef.editparts.ScalableRootEditPart");
importManager.addImport("org.eclipse.gef.editparts.ZoomManager");
importManager.addImport("org.eclipse.gef.palette.PaletteRoot");
importManager.addImport("org.eclipse.gef.ui.actions.AlignmentAction");
importManager.addImport("org.eclipse.gef.ui.actions.DeleteAction");
importManager.addImport("org.eclipse.gef.ui.actions.DirectEditAction");
importManager.addImport("org.eclipse.gef.ui.actions.GEFActionConstants");
importManager.addImport("org.eclipse.gef.ui.actions.PrintAction");
importManager.addImport("org.eclipse.gef.ui.actions.RedoAction");
importManager.addImport("org.eclipse.gef.ui.actions.SaveAction");
importManager.addImport("org.eclipse.gef.ui.actions.SelectionAction");
importManager.addImport("org.eclipse.gef.ui.actions.StackAction");
importManager.addImport("org.eclipse.gef.ui.actions.UndoAction");
importManager.addImport("org.eclipse.gef.ui.actions.UpdateAction");
importManager.addImport("org.eclipse.gef.ui.actions.WorkbenchPartAction");
importManager.addImport("org.eclipse.gef.ui.actions.ZoomInAction");
importManager.addImport("org.eclipse.gef.ui.actions.ZoomOutAction");
importManager.addImport("org.eclipse.gef.ui.parts.GraphicalViewerKeyHandler");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.gmf.runtime.notation.NotationFactory");
importManager.addImport("org.eclipse.gmf.runtime.notation.provider.NotationItemProviderAdapterFactory");
importManager.addImport("org.eclipse.jface.action.IAction");
importManager.addImport("org.eclipse.jface.action.IMenuManager");
importManager.addImport("org.eclipse.jface.action.MenuManager");
importManager.addImport("org.eclipse.jface.action.Separator");
importManager.addImport("org.eclipse.jface.dialogs.ErrorDialog");
importManager.addImport("org.eclipse.jface.viewers.ISelection");
importManager.addImport("org.eclipse.swt.SWT");
importManager.addImport("org.eclipse.swt.widgets.Composite");
importManager.addImport("org.eclipse.ui.IEditorPart");
importManager.addImport("org.eclipse.ui.IEditorInput");
importManager.addImport("org.eclipse.ui.IEditorSite");
importManager.addImport("org.eclipse.ui.ISelectionListener");
importManager.addImport("org.eclipse.ui.IWorkbenchPart");
importManager.addImport("org.eclipse.ui.PartInitException");
importManager.addImport("org.eclipse.ui.actions.ActionFactory");
importManager.addImport("org.eclipse.ui.views.contentoutline.IContentOutlinePage");
importManager.addImport("org.eclipse.ui.views.properties.IPropertySheetPage");
importManager.addImport("org.eclipse.ui.views.properties.PropertySheetPage");
importManager.addImport("org.eclipse.emf.common.notify.AdapterFactory");
importManager.addImport("org.eclipse.gef.ui.parts.GraphicalEditorWithFlyoutPalette");
importManager.addImport("org.eclipse.gef.DefaultEditDomain");
d22 1
a22 1
public class <%=genEditor.getClassName()%> extends GraphicalEditorWithFlyoutPalette {
a91 391
	/**
	 * @@generated
	 */
	private static class UpdatableActionGroup {
		/**
		 * @@generated
		 */
		public void addAction(UpdateAction action) {
			assert action != null;
			myActions.add(action);
		}

		/**
		 * @@generated
		 */
		public void removeAction(UpdateAction action) {
			myActions.remove(action);
		}

		/**
		 * @@generated
		 */
		public void update() {
			for (Iterator it = myActions.iterator(); it.hasNext();) {
				UpdateAction next = (UpdateAction) it.next();
				next.update();
			}
		}

		/**
		 * @@generated
		 */
		private ArrayList myActions = new ArrayList();
	}

	/**
	 * Copied from <code>org.eclipse.gef.ui.properties.UndoablePropertySheetEntry</code> to provide EMF compatibility.
	 * @@generated
	 */
	private static final class UndoablePropertySheetEntry extends <%=importManager.getImportedName("org.eclipse.ui.views.properties.PropertySheetEntry")%> {
		/**
		 * @@generated
		 */
		private static class SetValueCommand extends <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> {
			/**
			 * @@generated
			 */
			protected Object propertyValue;
			/**
			 * @@generated
			 */
			protected Object propertyName;
			/**
			 * @@generated
			 */
			protected Object undoValue;
			/**
			 * @@generated
			 */
			protected boolean resetOnUndo;
			/**
			 * @@generated
			 */
			protected <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%> target;
		
			/**
			 * @@generated
			 */
			public SetValueCommand() {
				super(""); //$NON-NLS-1$
			}
		
			/**
			 * @@generated
			 */
			public SetValueCommand(String propLabel) {
				super(<%=importManager.getImportedName("java.text.MessageFormat")%>.format("Set {0} property", new Object[]{propLabel}).trim());
			}
		
			/**
			 * @@generated
			 */
			public boolean canExecute() {
				return true;
			}
		
			/**
			 * @@generated
			 */
			public void execute() {
				/*
				 * Fix for Bug# 54250
				 * IPropertySource.isPropertySet(String) returns false both when there is no default 
				 * value, and when there is a default value and the property is set to that value.
				 * To correctly determine if a reset should be done during undo, we compare the
				 * return value of isPropertySet(String) before and after setPropertyValue(...) is
				 * invoked.  If they are different (it must have been false before and true after --
				 * it cannot be the other way around), then that means we need to reset.
				 */
				boolean wasPropertySet = getTarget().isPropertySet(propertyName);
				undoValue = getTarget().getPropertyValue(propertyName);
				if (undoValue instanceof <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%>) {
					undoValue = ((<%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%>)undoValue).getEditableValue();
				} else if (undoValue instanceof <%=importManager.getImportedName("org.eclipse.emf.edit.provider.IItemPropertySource")%>) {
					undoValue = ((<%=importManager.getImportedName("org.eclipse.emf.edit.provider.IItemPropertySource")%>)undoValue).getEditableValue(propertyName);
				}
				if (propertyValue instanceof <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%>)
					propertyValue = ((<%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%>)propertyValue).getEditableValue();
				getTarget().setPropertyValue(propertyName, propertyValue);
				if (getTarget() instanceof <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource2")%>)
					resetOnUndo = !wasPropertySet
							&& ((<%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource2")%>)getTarget()).isPropertyResettable(propertyName);
				else
					resetOnUndo = !wasPropertySet && getTarget().isPropertySet(propertyName);
				if (resetOnUndo)
					undoValue = null;
			}

			/**
			 * @@generated
			 */
			public <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%> getTarget() {
				return target;
			}
		
			/**
			 * @@generated
			 */
			public void setTarget(<%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%> aTarget) {
				target = aTarget;
			}
		
			/**
			 * @@generated
			 */
			public void redo() {
				execute();
			}
		
			/**
			 * @@generated
			 */
			public void setPropertyId(Object pName) {
				propertyName = pName;
			}
		
			/**
			 * @@generated
			 */
			public void setPropertyValue(Object val) {
				propertyValue = val;
			}
		
			/**
			 * @@generated
			 */
			public void undo() {
				if (resetOnUndo)
					getTarget().resetPropertyValue(propertyName);
				else
					getTarget().setPropertyValue(propertyName, undoValue);
			}
		}

		/**
		 * @@generated
		 */
		private static class ResetValueCommand extends <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> {
			/** 
			 * the property that has to be reset 
			 * @@generated
			 */
			protected Object propertyName;
			/** 
			 * the current non-default value of the property 
			 * @@generated
			 */
			protected Object undoValue;
			/**
			 * the property source whose property has to be reset 
			 * @@generated
			 */
			protected <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%> target;
		
			/**
			 * Default Constructor: Sets the label for the Command
			 * @@generated
			 */
			public ResetValueCommand() {
				super("Restore Default Value");
			}
		
			/**
			 * Returns <code>true</code> IFF:<br>
			 * 1) the target and property have been specified<br>
			 * 2) the property has a default value<br>
			 * 3) the value set for that property is not the default
			 * @@generated
			 */
			public boolean canExecute() {
				boolean answer = false;
				if (target != null && propertyName != null) {
					answer = target.isPropertySet(propertyName);
					if (target instanceof <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource2")%>)
						answer = answer 
								&& (((<%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource2")%>)target).isPropertyResettable(propertyName));
				}
				return answer;
			}
		
			/**
			 * Caches the undo value and invokes redo()
			 * @@generated
			 */
			public void execute() {
				undoValue = target.getPropertyValue(propertyName);
				if (undoValue instanceof <%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%>) {
					undoValue = ((<%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%>)undoValue).getEditableValue();
				} else if (undoValue instanceof <%=importManager.getImportedName("org.eclipse.emf.edit.provider.IItemPropertySource")%>) {
					undoValue = ((<%=importManager.getImportedName("org.eclipse.emf.edit.provider.IItemPropertySource")%>)undoValue).getEditableValue(propertyName);
				}
				redo();
			}
		
			/**
			 * Sets the IPropertySource.
			 * @@param propSource the IPropertySource whose property has to be reset
			 * @@generated
			 */
			public void setTarget(<%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%> propSource) {
				target = propSource;
			}
		
			/**
			 * Resets the specified property on the specified IPropertySource
			 * @@generated
			 */
			public void redo() {
				target.resetPropertyValue(propertyName);
			}
		
			/**
			 * Sets the property that is to be reset.
			 * @@param pName the property to be reset
			 * @@generated
			 */
			public void setPropertyId(Object pName) {
				propertyName = pName;
			}
		
			/**
			 * Restores the non-default value that was reset. 
			 * @@generated
			 */
			public void undo() {
				target.setPropertyValue(propertyName, undoValue);
			}
		}

		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gef.commands.CommandStackListener")%> commandStackListener;
	
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gef.commands.CommandStack")%> stack;
	
		/**
		 * @@generated
		 */
		private UndoablePropertySheetEntry() { }
	
		/**
		 * Constructs the root entry using the given command stack.
		 * @@param stack the command stack
		 * @@generated
		 */
		public UndoablePropertySheetEntry(<%=importManager.getImportedName("org.eclipse.gef.commands.CommandStack")%> stack) {
			setCommandStack(stack);
		}
	
		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.ui.views.properties.PropertySheetEntry")%> createChildEntry() {
			return new UndoablePropertySheetEntry();
		}
	
		/**
		 * @@generated
		 */
		public void dispose() {
			if (stack != null)
				stack.removeCommandStackListener(commandStackListener);
			super.dispose();
		}
	
		/**
		 * @@generated
		 */
		<%=importManager.getImportedName("org.eclipse.gef.commands.CommandStack")%> getCommandStack() {
			//only the root has, and is listening to the command stack
			if (getParent() != null)
				return ((UndoablePropertySheetEntry)getParent()).getCommandStack();
			return stack;
		}
	
		/**
		 * @@generated
		 */
		public void resetPropertyValue() {
			<%=importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand")%> cc = new <%=importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand")%>();
			ResetValueCommand restoreCmd;
	
			if (getParent() == null)
				// root does not have a default value
				return;
	
			//	Use our parent's values to reset our values.
			boolean change = false;
			Object[] objects = getParent().getValues();
			for (int i = 0; i < objects.length; i++) {
				<%=importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySource")%> source = getPropertySource(objects[i]);
				if (source.isPropertySet(getDescriptor().getId())) {
					//source.resetPropertyValue(getDescriptor()getId());
					restoreCmd = new ResetValueCommand();
					restoreCmd.setTarget(source);
					restoreCmd.setPropertyId(getDescriptor().getId());
					cc.add(restoreCmd);			
					change = true;
				}
			}
			if (change) {
				getCommandStack().execute(cc);
				refreshFromRoot();
			}
		}
	
		/**
		 * @@generated
		 */
		void setCommandStack(<%=importManager.getImportedName("org.eclipse.gef.commands.CommandStack")%> stack) {
			this.stack = stack;
			commandStackListener = new <%=importManager.getImportedName("org.eclipse.gef.commands.CommandStackListener")%>() {
				public void commandStackChanged(<%=importManager.getImportedName("java.util.EventObject")%> e) {
					refreshFromRoot();
				}
			};
			stack.addCommandStackListener(commandStackListener);
		}
	
		/**
		 * @@generated
		 */
		protected void valueChanged(<%=importManager.getImportedName("org.eclipse.ui.views.properties.PropertySheetEntry")%> child) {
			valueChanged((UndoablePropertySheetEntry)child,
					new <%=importManager.getImportedName("org.eclipse.gef.commands.ForwardUndoCompoundCommand")%>());
		}
	
		/**
		 * @@generated
		 */
		void valueChanged(UndoablePropertySheetEntry child, <%=importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand")%> command) {
			<%=importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand")%> cc = new <%=importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand")%>();
			command.add(cc);
	
			SetValueCommand setCommand;
			for (int i = 0; i < getValues().length; i++) {
				setCommand = new SetValueCommand(child.getDisplayName());
				setCommand.setTarget(getPropertySource(getValues()[i]));
				setCommand.setPropertyId(child.getDescriptor().getId());
				setCommand.setPropertyValue(child.getValues()[i]);
				cc.add(setCommand);
			}
	
			// inform our parent
			if (getParent() != null)
				((UndoablePropertySheetEntry)getParent()).valueChanged(this, command);
			else {
				//I am the root entry
				stack.execute(command);
			}
		}
	}

	/**
	 * @@generated
	 */
	private TransactionalEditingDomain editingDomain;
d106 1
a106 119
	private boolean isDirty = false;

	/**
	 * @@generated
	 */
	private PaletteRoot paletteRoot;

	/**
	 * @@generated
	 */
	private PropertySheetPage undoablePropertySheetPage;

	/**
	 * @@generated
	 */
	private UpdatableActionGroup stackActions = new UpdatableActionGroup();

	/**
	 * @@generated
	 */
	private CommandStackListener commandStackListener = new CommandStackListener() {

		public void commandStackChanged(EventObject event) {
			stackActions.update();
			setDirty(((CommandStack) event.getSource()).isDirty());
		}
	};

	/**
	 * @@generated
	 */
	private UpdatableActionGroup editPartActions = new UpdatableActionGroup();

	/**
	 * @@generated
	 */
	private ISelectionListener selectionListener = new ISelectionListener() {

		public void selectionChanged(IWorkbenchPart part, ISelection selection) {
			editPartActions.update();
		}
	};

	/**
	 * @@generated
	 */
	private UpdatableActionGroup editorActions = new UpdatableActionGroup();

	/**
	 * @@generated
	 */
	private ComposedAdapterFactory domainAdapterFactory;

	/**
	 * @@generated
	 */
	protected void firePropertyChange(int propertyId) {
		super.firePropertyChange(propertyId);
		editorActions.update();
	}

	/**
	 * Adds an action to this editor's <code>ActionRegistry</code>. (This is
	 * a helper method.)
	 * 
	 * @@generated
	 * @@param action
	 *            the action to add.
	 */
	protected void addAction(IAction action) {
		getActionRegistry().registerAction(action);
	}

	/**
	 * Adds an editor action to this editor.
	 * 
	 * <p>
	 * Editor actions are actions that depend and work on the editor.
	 * 
	 * @@generated
	 * @@param action
	 *            the editor action
	 */
	protected void addEditorAction(WorkbenchPartAction action) {
		getActionRegistry().registerAction(action);
		editorActions.addAction(action);
	}

	/**
	 * Adds an <code>EditPart</code> action to this editor.
	 * 
	 * <p>
	 * <code>EditPart</code> actions are actions that depend and work on the
	 * selected <code>EditPart</code>s.
	 * 
	 * @@generated
	 * @@param action
	 *            the <code>EditPart</code> action
	 */
	protected void addEditPartAction(SelectionAction action) {
		getActionRegistry().registerAction(action);
		editPartActions.addAction(action);
	}

	/**
	 * Adds an <code>CommandStack</code> action to this editor.
	 * 
	 * <p>
	 * <code>CommandStack</code> actions are actions that depend and work on
	 * the <code>CommandStack</code>.
	 * 
	 * @@generated
	 * @@param action
	 *            the <code>CommandStack</code> action
	 */
	protected void addStackAction(StackAction action) {
		getActionRegistry().registerAction(action);
		stackActions.addAction(action);
	}
d112 2
a113 2
		addStackAction(new UndoAction(this));
		addStackAction(new RedoAction(this));
d115 2
a116 2
		addEditPartAction(new DeleteAction((IWorkbenchPart) this));
		addEditPartAction(new DirectEditAction((IWorkbenchPart) this));
d118 6
a123 6
		addEditPartAction(new AlignmentAction((IWorkbenchPart) this, PositionConstants.LEFT));
		addEditPartAction(new AlignmentAction((IWorkbenchPart) this, PositionConstants.RIGHT));
		addEditPartAction(new AlignmentAction((IWorkbenchPart) this, PositionConstants.TOP));
		addEditPartAction(new AlignmentAction((IWorkbenchPart) this, PositionConstants.BOTTOM));
		addEditPartAction(new AlignmentAction((IWorkbenchPart) this, PositionConstants.CENTER));
		addEditPartAction(new AlignmentAction((IWorkbenchPart) this, PositionConstants.MIDDLE));
d125 2
a126 2
		addEditorAction(new SaveAction(this));
		addEditorAction(new PrintAction(this));
d128 2
a129 2
		IAction zoomIn = new ZoomInAction(getZoomManager());
		IAction zoomOut = new ZoomOutAction(getZoomManager());
a155 9
		// remove CommandStackListener
		getCommandStack().removeCommandStackListener(getStackActionsListener());

		// remove selection listener
		getSite().getWorkbenchWindow().getSelectionService().removeSelectionListener(getSelectionListener());

		// dispose the ActionRegistry (will dispose all actions)
		getActionRegistry().dispose();

d163 1
a163 1
	public void doSave(IProgressMonitor monitor) {
d167 2
a168 24
		} catch (CoreException e) {
			ErrorDialog.openError(getSite().getShell(), "Error During Save", "The current <%=genDiagram.getEditorGen().getDomainGenModel().getModelName()%> model could not be saved.", e.getStatus());
		}
	}

	/**
	 * @@generated
	 */
	private void save(IProgressMonitor progressMonitor) throws CoreException {
		if (progressMonitor == null) {
			progressMonitor = new NullProgressMonitor();
		}
		progressMonitor.beginTask("Saving", getEditingDomain().getResourceSet().getResources().size());
		try {
			for(Iterator it = getEditingDomain().getResourceSet().getResources().iterator(); it.hasNext(); ) {
				Resource next = (Resource)it.next();
				next.save(Collections.EMPTY_MAP);
				progressMonitor.worked(1);
			}
		} catch (IOException e) {
			IStatus status = new Status(IStatus.ERROR, <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.ID, 0, "Error writing file.", e);
			throw new CoreException(status);
		} finally {
			progressMonitor.done();
d175 1
a175 69
	public boolean isSaveAsAllowed() {
		// TODO: should be allowed.
		return false;
	}

	/**
	 * @@generated
	 */
	public void doSaveAs() {
		// TODO: Implement.
	}

	/**
	 * @@generated
	 */
	public Object getAdapter(Class type) {
		if (type == IPropertySheetPage.class) {
			return getPropertySheetPage();
		} else if (type == IContentOutlinePage.class) {
			return getOutlinePage();
		} else if (type == ZoomManager.class) {
			return getZoomManager();
		}
		return super.getAdapter(type);
	}

	/**
	 * @@generated
	 */
	protected ZoomManager getZoomManager() {
		return getZoomManager(getGraphicalViewer());
	}

	/**
	 * @@generated
	 */
	private ZoomManager getZoomManager(GraphicalViewer viewer) {
		// get zoom manager from root edit part
		RootEditPart rootEditPart = viewer.getRootEditPart();
		ZoomManager zoomManager = null;
		if (rootEditPart instanceof ScalableFreeformRootEditPart) {
			zoomManager = ((ScalableFreeformRootEditPart) rootEditPart).getZoomManager();
		} else if (rootEditPart instanceof ScalableRootEditPart) {
			zoomManager = ((ScalableRootEditPart) rootEditPart).getZoomManager();
		}
		return zoomManager;
	}

	/**
	 * @@generated
	 */
	private CommandStackListener getStackActionsListener() {
		return commandStackListener;
	}

	/**
	 * @@generated
	 */
	protected IContentOutlinePage getOutlinePage() {
		//TODO: outline page missing
		return null;
	}

	/**
	 * @@generated
	 */
	protected PaletteRoot getPaletteRoot() {
		if (paletteRoot == null) {
			paletteRoot = new PaletteRoot();
d181 1
a181 1
			new <%=importManager.getImportedName(palette.getFactoryQualifiedClassName())%>(getDomainAdapterFactory()).contributeToPalette(paletteRoot);
a185 23
		}
		return paletteRoot;
	}

	/**
	 * @@generated
	 */
	protected PropertySheetPage getPropertySheetPage() {
		if (undoablePropertySheetPage == null) {
			undoablePropertySheetPage = new PropertySheetPage();
			UndoablePropertySheetEntry rootEntry = new UndoablePropertySheetEntry(getCommandStack());
			rootEntry.setPropertySourceProvider(new <%=importManager.getImportedName(genDiagram.getPropertyProviderQualifiedClassName())%>(getDomainAdapterFactory()));
			undoablePropertySheetPage.setRootEntry(rootEntry);
		}

		return undoablePropertySheetPage;
	}

	/**
	 * @@generated
	 */
	private ISelectionListener getSelectionListener() {
		return selectionListener;
d198 1
a198 1
	public Diagram getDiagram() {
d205 2
a206 2
	public void init(IEditorSite site, IEditorInput input) throws PartInitException {
		URI file = getURIFromInput(input);
d208 1
a208 1
			throw new PartInitException("The specified input is not valid.");
d210 1
a210 4
		setSite(site);
		setInput(input);
		setEditDomain(new DefaultEditDomain(this));

d213 1
a213 1
			throw new PartInitException("The specified input is not valid.");
a214 6

		// add CommandStackListener
		getCommandStack().addCommandStackListener(getStackActionsListener());

		// add selection change listener
		getSite().getWorkbenchWindow().getSelectionService().addSelectionListener(getSelectionListener());
d220 1
a220 1
	protected void setInput(IEditorInput input)  {
d231 1
a231 1
		URI file = getURIFromInput(input);
d250 1
a250 1
	private URI getURIFromInput(IEditorInput input) {
d256 1
a256 1
			return URI.createFileURI(((IPathEditorInput)input).getPath().toOSString());
d260 1
a260 1
			return URI.createPlatformResourceURI(((IFileEditorInput)input).getFile().getFullPath().toString());
d269 1
a269 30
	public boolean isDirty() {
		return isDirty;
	}

	/**
	 * @@generated
	 */
	private void setDirty(boolean dirty) {
		if (isDirty != dirty) {
			isDirty = dirty;
			firePropertyChange(IEditorPart.PROP_DIRTY);
		}
	}

	/**
	 * @@generated
	 */
	protected TransactionalEditingDomain getEditingDomain() {
		if (editingDomain == null) {
			editingDomain = <%=importManager.getImportedName("org.eclipse.emf.workspace.WorkspaceEditingDomainFactory")%>.INSTANCE.createEditingDomain();
			//editingDomain.setAdapterFactory(getDomainAdapterFactory());
			editingDomain.getResourceSet().eAdapters().add(new AdapterFactoryEditingDomain.EditingDomainProvider(editingDomain));
		}
		return editingDomain;
	}

	/**
	 * @@generated
	 */
	private AdapterFactory getDomainAdapterFactory() {
d271 2
a272 2
			List factories = new ArrayList();
			factories.add(new ResourceItemProviderAdapterFactory());
d280 3
a282 3
			factories.add(new ReflectiveItemProviderAdapterFactory());
			factories.add(new NotationItemProviderAdapterFactory());
			domainAdapterFactory = new ComposedAdapterFactory(factories);
d290 1
a290 1
	private void load(URI diagramFile) {
d296 3
a298 3
		TransactionalEditingDomain editingDomain = getEditingDomain();
		ResourceSet resourceSet = editingDomain.getResourceSet();
		Resource diagramResource = resourceSet.getResource(diagramFile, true);
d302 1
a302 1
		diagram = (Diagram) findInResource(diagramResource, Diagram.class);
d304 1
a304 1
			diagram = NotationFactory.eINSTANCE.createDiagram();
d308 2
a309 2
				diagramResource.save(Collections.EMPTY_MAP);
			} catch (IOException e) {
d325 2
a326 2
			URI modelFile = <%=genDiagram.getDiagramEditorUtilClassName()%>.getModelFileURI(diagramFile);
			Resource modelResource = resourceSet.getResource(modelFile, true);
d342 2
a343 2
					<%=resourceToUse%>.save(Collections.EMPTY_MAP);
				} catch (IOException e) {
d361 2
a362 2
	private Object findInResource(Resource resource, Class expectedClass) {
		for(Iterator it = resource.getContents().iterator(); it.hasNext(); ) {
d374 1
a374 17
	public void setFocus() {
		getGraphicalViewer().getControl().setFocus();
	}

	/**
	 * @@generated
	 */
	public final void createPartControl(Composite parent) {
		super.createPartControl(parent);
		// initialize actions
		createActions();
	}

	/**
	 * @@generated
	 */
	protected void createGraphicalViewer(Composite parent) {
d377 1
a377 1
		ScalableFreeformRootEditPart root = new ScalableFreeformRootEditPart();
d393 1
a393 1
		GraphicalViewer viewer = getGraphicalViewer();
d395 1
a395 1
		ContextMenuProvider provider = new <%=genEditor.getClassName()%>ContextMenuProvider(viewer);
d399 3
a401 3
		KeyHandler keyHandler = new GraphicalViewerKeyHandler(viewer);
		keyHandler.put(KeyStroke.getPressed(SWT.DEL, 127, 0), getActionRegistry().getAction(ActionFactory.DELETE.getId()));
		keyHandler.put(KeyStroke.getPressed(SWT.F2, 0), getActionRegistry().getAction(GEFActionConstants.DIRECT_EDIT));
d404 1
a404 1
		viewer.setProperty(MouseWheelHandler.KeyGenerator.getKey(SWT.CTRL), MouseWheelZoomHandler.SINGLETON);
d410 1
a410 1
	private class <%=genEditor.getClassName()%>ContextMenuProvider extends ContextMenuProvider {
d414 1
a414 1
		public <%=genEditor.getClassName()%>ContextMenuProvider(EditPartViewer viewer) {
d421 9
a429 9
	    public void buildContextMenu(IMenuManager menuManager) {
	        GEFActionConstants.addStandardActionGroups(menuManager);
			appendActionToMenu(menuManager, ActionFactory.UNDO.getId(), GEFActionConstants.GROUP_UNDO);
			appendActionToMenu(menuManager, ActionFactory.REDO.getId(), GEFActionConstants.GROUP_UNDO);
	
			appendActionToMenu(menuManager, ActionFactory.COPY.getId(), GEFActionConstants.GROUP_EDIT);
			appendActionToMenu(menuManager, ActionFactory.PASTE.getId(), GEFActionConstants.GROUP_EDIT);
			appendActionToMenu(menuManager, ActionFactory.DELETE.getId(), GEFActionConstants.GROUP_EDIT);
			appendActionToMenu(menuManager, GEFActionConstants.DIRECT_EDIT, GEFActionConstants.GROUP_EDIT);
d431 1
a431 1
			appendActionToMenu(menuManager, ActionFactory.SAVE.getId(), GEFActionConstants.GROUP_SAVE);
d439 1
a439 1
		private void appendAlignmentSubmenu(IMenuManager menuManager) {
d441 2
a442 2
			MenuManager submenu = new MenuManager("Align");
			submenu.add(new Separator(GEFActionConstants.MB_ADDITIONS));
d444 6
a449 6
			appendActionToMenu(submenu, GEFActionConstants.ALIGN_LEFT, GEFActionConstants.MB_ADDITIONS);
			appendActionToMenu(submenu, GEFActionConstants.ALIGN_CENTER, GEFActionConstants.MB_ADDITIONS);
			appendActionToMenu(submenu, GEFActionConstants.ALIGN_RIGHT, GEFActionConstants.MB_ADDITIONS);
			appendActionToMenu(submenu, GEFActionConstants.ALIGN_TOP, GEFActionConstants.MB_ADDITIONS);
			appendActionToMenu(submenu, GEFActionConstants.ALIGN_MIDDLE, GEFActionConstants.MB_ADDITIONS);
			appendActionToMenu(submenu, GEFActionConstants.ALIGN_BOTTOM, GEFActionConstants.MB_ADDITIONS);
d452 1
a452 1
				menuManager.appendToGroup(GEFActionConstants.GROUP_REST, submenu);
d459 2
a460 2
		private void appendActionToMenu(IMenuManager menu, String actionId, String menuGroup) {
			IAction action = getActionRegistry().getAction(actionId);
@


1.6
log
@[bblajer] #143455 make LiteCompilationTest pass
@
text
@d1099 1
a1099 1
				diagram.setElement(diagramRoot);
@


1.5
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@d567 1
a567 1
	private <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> <%=genDiagram.getDomainDiagramElement().getSafeUncapName()%>;
d902 2
a903 2
	public <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%> get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>() {
		return <%=genDiagram.getDomainDiagramElement().getSafeUncapName()%>;
d926 1
a926 1
		if (get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>() == null) {
d1040 1
a1040 1
		<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%> = null;
d1060 1
a1060 1
				<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%> = null;
d1064 2
a1065 2
		<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%> = (<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>) diagram.getElement();
		if (<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%> == null) {
d1085 4
a1088 4
			<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%> = (<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>) findInResource(<%=resourceToUse%>, <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>.class);
			if (<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%> == null) {
				<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%> = <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryClassName())%>.eINSTANCE.create<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>();
				<%=resourceToUse%>.getContents().add(0, <%=genDiagram.getDomainDiagramElement().getSafeUncapName()%>);
d1094 1
a1094 1
					<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%> = null;
d1099 1
a1099 1
				diagram.setElement(<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%>);
@


1.4
log
@[bblajer] #141743 ClassCastException while executing undo after setting property/restoring default value in the property sheet
@
text
@a35 1
importManager.addImport("org.eclipse.emf.common.command.BasicCommandStack");
d40 1
a40 1
importManager.addImport("org.eclipse.emf.edit.domain.EditingDomain");
d562 1
a562 1
	private EditingDomain editingDomain;
d1006 1
a1006 1
	protected EditingDomain getEditingDomain() {
d1008 2
a1009 2
			BasicCommandStack commandStack = new BasicCommandStack();
			editingDomain = new AdapterFactoryEditingDomain(getDomainAdapterFactory(), commandStack, new HashMap());
d1045 1
a1045 1
		EditingDomain editingDomain = getEditingDomain();
@


1.3
log
@[bblajer] #138978 NPE while reopening a pure-GEF diagram which contains external labels
@
text
@d13 9
d209 352
d885 1
a885 1
			<%=importManager.getImportedName("org.eclipse.gef.ui.properties.UndoablePropertySheetEntry")%> rootEntry = new <%=importManager.getImportedName("org.eclipse.gef.ui.properties.UndoablePropertySheetEntry")%>(getCommandStack());
@


1.2
log
@[bblajer] #114200 Provide an option to generate RCP application - added RCP support for pure-GEF (lite) generator
@
text
@a784 1
		getGraphicalViewer().setContents(getDiagram());
d790 1
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d7 1
a27 1
importManager.addImport("org.eclipse.emf.common.ui.URIEditorInput");
a78 1
importManager.addImport("org.eclipse.ui.IPathEditorInput");
d95 69
d365 16
d581 10
a593 1
		setContentDescription(file.toFileString());
d595 10
d611 3
a613 2
		if (input instanceof URIEditorInput) {
			return ((URIEditorInput) input).getURI();
d615 1
a615 1
		if (input instanceof IPathEditorInput) {
d618 5
d704 2
d714 5
a718 5
		URI modelFile = <%=genDiagram.getDiagramEditorUtilClassName()%>.getModelFileURI(diagramFile);
		Resource modelResource = resourceSet.getResource(modelFile, true);
		if (modelResource == null) {
			modelResource = resourceSet.createResource(modelFile);
		}
d725 15
a739 11
		<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%> = (<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>) findInResource(<%=resourceToUse%>, <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName())%>.class);
		if (<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%> == null) {
			<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%> = <%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryClassName())%>.eINSTANCE.create<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>();
			<%=resourceToUse%>.getContents().add(0, <%=genDiagram.getDomainDiagramElement().getSafeUncapName()%>);
			//We don't want this auxiliary creation to be undoable.
			try {
				<%=resourceToUse%>.save(Collections.EMPTY_MAP);
			} catch (IOException e) {
				diagram = null;
				<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%> = null;
				return;
a741 3
		if (!diagram.isSetElement()) {
			diagram.setElement(<%=genDiagram.getDomainDiagramElement().getSafeUncapName()%>);
		}
@

