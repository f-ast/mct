head	1.4;
access;
symbols
	v20080910-1520:1.4
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070307-0700:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070103-0300:1.3
	M4_20:1.3
	v20061222-1800:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.06.20.10.16.10;	author bblajer;	state dead;
branches;
next	1.3;
commitid	37dd4678fe694567;

1.3
date	2006.12.25.12.00.12;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	430d458fbd4b4567;

1.2
date	2006.11.09.18.15.43;	author bblajer;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.21.10.12.03;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Rewrite /editor/* templates in XPand;
Use common template to generate code that creates an editing domain in various places;
OpenDiagramEditPolicy: package statement was missing.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.editor" class="InitDiagramFileActionGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final String pluginActivatorClass = importManager.getImportedName(editorGen.getPlugin().getActivatorQualifiedClassName());
final boolean isRichClientPlatform = genDiagram.getEditorGen().getApplication() != null;
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
%>

/**
 * @@generated
 */
public class <%=genDiagram.getInitDiagramFileActionClassName()%> <%if (isRichClientPlatform) {%> extends <%=importManager.getImportedName("org.eclipse.emf.common.ui.action.WorkbenchWindowActionDelegate")%><%} else {%>implements <%=importManager.getImportedName("org.eclipse.ui.IObjectActionDelegate")%><%}%> {
<%
if (isRichClientPlatform) {
%>
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> mySelectedModelFileURI;

    /**
     * @@generated
     */
	public void selectionChanged(<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> action, <%=importManager.getImportedName("org.eclipse.jface.viewers.ISelection")%> selection) {
		super.selectionChanged(action, selection);
		mySelectedModelFileURI = null;
		if (selection instanceof <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> == false || selection.isEmpty()) {
			return;
		}
		Object firstElement = ((<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) selection).getFirstElement();
		if (firstElement instanceof <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>) {
			mySelectedModelFileURI = (<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>) firstElement;
		} else if (firstElement instanceof <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) {
			mySelectedModelFileURI = (<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>) ((<%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) firstElement).getAdapter(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.class);
		}
		if (mySelectedModelFileURI != null) {
			mySelectedModelFileURI = mySelectedModelFileURI.trimFragment();
		}
		action.setEnabled(true);
	}
<%
} else {
%>
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%> myPart;

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> mySelectedModelFile;

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> mySelection;

    /**
     * @@generated
     */
	public void setActivePart(<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> action, <%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPart")%> targetPart) {
		myPart = targetPart;
	}

    /**
     * @@generated
     */
	public void selectionChanged(<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> action, <%=importManager.getImportedName("org.eclipse.jface.viewers.ISelection")%> selection) {
		mySelectedModelFile = null;
		mySelection = <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>.EMPTY;
		action.setEnabled(false);
		if (selection instanceof <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> == false || selection.isEmpty()) {
			return;
		}
		mySelection = (<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) selection;
		mySelectedModelFile = (<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%>) ((<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) selection).getFirstElement();
		action.setEnabled(true);
	}
<%	
}
%>
    /**
     * @@generated
     */
	public void run(<%=importManager.getImportedName("org.eclipse.jface.action.IAction")%> action) {
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> diagramRoot = null;
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.workspace.WorkspaceEditingDomainFactory")%>.INSTANCE.createEditingDomain();
<%
if (isRichClientPlatform) {
%>
		if (mySelectedModelFileURI != null) {
<%
}
%>
<%if (editorGen.isSameFileForDiagramAndModel()) {%>
		<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%> resourceSet = new <%=importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl")%>();
<%} else {%>
		<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%> resourceSet = editingDomain.getResourceSet();
<%}%>
		try {
<%
if (isRichClientPlatform) {
%>
			<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = resourceSet.getResource(mySelectedModelFileURI, true);
<%
} else {
%>
			<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = resourceSet.getResource(<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);
<%
}
%>
			diagramRoot = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) resource.getContents().get(0);
		} catch (<%=importManager.getImportedName("org.eclipse.emf.common.util.WrappedException")%> ex) {
<%
if (isRichClientPlatform) {
%>
			<%=pluginActivatorClass%>.getInstance().logError("Unable to load resource: " + mySelectedModelFileURI.toString(), ex); //$NON-NLS-1$
			<%=importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog")%>.openError(getWindow().getShell(), "Error", "Model file loading failed");
<%
} else {
%>
			<%=pluginActivatorClass%>.getInstance().logError("Unable to load resource: " + mySelectedModelFile.getFullPath().toString(), ex); //$NON-NLS-1$
			<%=importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog")%>.openError(myPart.getSite().getShell(), "Error", "Model file loading failed");
<%
}
%>
			return;
		}
<%
if (isRichClientPlatform) {
%>
		}
		<%=importManager.getImportedName("org.eclipse.jface.wizard.Wizard")%> wizard = new <%=importManager.getImportedName(genDiagram.getNewDiagramFileWizardQualifiedClassName())%>(mySelectedModelFileURI, diagramRoot, editingDomain);
<%
} else {
%>
		<%=importManager.getImportedName("org.eclipse.jface.wizard.Wizard")%> wizard = new <%=importManager.getImportedName(genDiagram.getNewDiagramFileWizardQualifiedClassName())%>(mySelectedModelFile, myPart.getSite().getPage(), mySelection, diagramRoot, editingDomain);
<%
}
%>
        <%=importManager.getImportedName("org.eclipse.jface.dialogs.IDialogSettings")%> pluginDialogSettings = <%=pluginActivatorClass%>.getInstance().getDialogSettings();
        <%=importManager.getImportedName("org.eclipse.jface.dialogs.IDialogSettings")%> initDiagramFileSettings = pluginDialogSettings.getSection("InisDiagramFile"); //$NON-NLS-1$
        if (initDiagramFileSettings == null) {
        	initDiagramFileSettings = pluginDialogSettings.addNewSection("InisDiagramFile"); //$NON-NLS-1$
        }
        wizard.setDialogSettings(initDiagramFileSettings);
<%
if (isRichClientPlatform) {
%>
		wizard.setForcePreviousAndNextButtons(mySelectedModelFileURI != null);
<%
} else {
%>
		wizard.setForcePreviousAndNextButtons(false);
<%
}
%>
		wizard.setWindowTitle("Initialize new " + <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID + " diagram file");

<%
if (isRichClientPlatform) {
%>
        <%=importManager.getImportedName("org.eclipse.jface.wizard.WizardDialog")%> dialog = new <%=importManager.getImportedName("org.eclipse.jface.wizard.WizardDialog")%>(getWindow().getShell(), wizard);
<%
} else {
%>
        <%=importManager.getImportedName("org.eclipse.jface.wizard.WizardDialog")%> dialog = new <%=importManager.getImportedName("org.eclipse.jface.wizard.WizardDialog")%>(myPart.getSite().getShell(), wizard);
<%
}
%>
        dialog.create();
        dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x), 500);
        dialog.open();
	}

}
<%importManager.emitSortedImports();%>
@


1.3
log
@[159567]: Use GenApplication element from gmfgen model to generate RCP code
Use as much of the runtime templates as possible (changes are isolated as aspects)
@
text
@@


1.2
log
@[162579] Support diagram partitioning
+
1. CustomBehaviours;
2. LayoutDiagramAction: execute the command through the command stack;
3. WrappingCommand: Workaround for a problem with StrictCompoundCommand.canExecute() in transactional editing domains
@
text
@d8 1
a8 1
final boolean isRichClientPlatform = genDiagram.getEditorGen().getDomainGenModel().isRichClientPlatform();
@


1.1
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d42 3
@

