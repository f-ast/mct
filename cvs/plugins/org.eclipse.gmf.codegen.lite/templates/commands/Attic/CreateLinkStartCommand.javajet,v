head	1.2;
access;
symbols
	v20080910-1520:1.2
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061214-0000:1.1;
locks; strict;
comment	@# @;


1.2
date	2007.02.14.13.42.30;	author bblajer;	state dead;
branches;
next	1.1;
commitid	75e045d311c54567;

1.1
date	2006.12.12.12.54.40;	author bblajer;	state Exp;
branches;
next	;
commitid	355b457ea6574567;


desc
@@


1.2
log
@Commands rewritten with xPand;
[173999]: Non-resizable figures (for the Lite version).
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.commands" class="CreateLinkStartCommandGenerator"
    imports="org.eclipse.emf.common.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.common.codegen.*"%>
<%
GenLink genLink = (GenLink) ((Object[]) argument)[0];
GenDiagram genDiagram = genLink.getDiagram();
GenLinkConstraints linkConstraints = genLink.getCreationConstraints();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%
importManager.emitPackageStatement(stringBuffer);
importManager.markImportLocation(stringBuffer);
%>
<%@@ include file="../common/featureGetAccessor.jetinc"%>

/**
 * @@generated
 */
public class <%=importManager.getCompilationUnitName()%> extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.VetoCommand")%> {
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> source;
	/**
	 * @@generated
	 */
	public <%=importManager.getCompilationUnitName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx")%> requestEx) {
		//Until the mouse button is pressed, the source of the connection is in request.getTargetEditPart(), not in request.getSourceEditPart().
		source = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>)requestEx.getTargetEditPart().getModel();
	}

	/**
	 * @@generated
	 */
	protected boolean shouldExecute() {
		if (source == null) {
			return false;
		}
<%
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
			if (containmentFeature == null) {
%>
		return false;
<%
			} else {
%>
		<%=importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName())%> container = (<%=importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName())%>)getRelationshipContainer(source.getElement(), <%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>());
		if (container == null) {
			return false;
		}
<%
				{
					GenFeature _feature = containmentFeature;
					String _ownerInstance = "container";
					String _exceedsUpperBound = "return false;";
					GenClass _ownerGenClass = containmentFeature.getGenClass();
%>
<%@@ include file="../common/featureMultiplicity.jetinc"%>
<%
				}
				GenFeature childFeature = modelFacet.getChildMetaFeature();
				if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
					{
						GenFeature _feature = childFeature;
						String _ownerInstance = "container";
						String _exceedsUpperBound = "return false;";
						GenClass _ownerGenClass = containmentFeature.getGenClass();
%>
<%@@ include file="../common/featureMultiplicity.jetinc"%>
<%
					}
				}
				//Need to check the eOpposite() of the source feature
				GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
				GenFeature sourceReverseFeature = sourceFeature == null ? null : sourceFeature.getReverse();
				if (sourceReverseFeature != null && !sourceReverseFeature.isDerived() && sourceReverseFeature != containmentFeature && sourceReverseFeature != childFeature) {
					GenFeature _feature = sourceReverseFeature;
					String _ownerInstance = "source.getElement()";
					String _exceedsUpperBound = "return false;";
					GenClass _ownerGenClass = null;
%>
<%@@ include file="../common/featureMultiplicity.jetinc"%>
<%
				}
{
	String _source = "source.getElement()";
	String _target = "null";
%>
<%@@ include file="../common/linkConstraints.jetinc"%>
<%
}	//local declarations for ../common/linkConstraints.jetinc
%>
		return true;
<%
			}
		} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		{
			GenFeature _feature = metaFeature;
			String _ownerInstance = "source.getElement()";
			String _exceedsUpperBound = "return false;";
			GenClass _ownerGenClass = null;
%>
<%@@ include file="../common/featureMultiplicity.jetinc"%>
<%
		}
{
	String _source = "source.getElement()";
	String _target = "null";
%>
<%@@ include file="../common/linkConstraints.jetinc"%>
<%
}	//local declarations for ../common/linkConstraints.jetinc
%>
		return true;
<%
		} else {
%>
		return false;
<%
		}
%>
	}
<%@@ include file="../common/getRelationshipContainer.jetinc"%>
}
<%importManager.emitSortedImports();%>
@


1.1
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@@

