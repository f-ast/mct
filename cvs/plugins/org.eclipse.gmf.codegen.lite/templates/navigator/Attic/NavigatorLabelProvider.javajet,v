head	1.5;
access;
symbols
	v20080910-1520:1.5
	v20070608-1300:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070520-1200:1.4
	v20070518-1300:1.4
	v20070504-1000:1.4
	v20070427-0600:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070405-1100:1.4
	v20070403-1500:1.4
	v20070330-1300:1.4
	v20060330-1300:1.4
	v20070322-1100:1.3
	v20060316-0600:1.2
	v20070307-0700:1.1
	v20070228-2000:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1;
locks; strict;
comment	@# @;


1.5
date	2007.06.12.10.58.03;	author bblajer;	state dead;
branches;
next	1.4;
commitid	4adc466e7c394567;

1.4
date	2007.03.26.15.39.37;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	13984607e9394567;

1.3
date	2007.03.22.12.38.44;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	1392460278d44567;

1.2
date	2007.03.15.16.43.30;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	617845f977b04567;

1.1
date	2006.12.19.19.11.42;	author bblajer;	state Exp;
branches;
next	;
commitid	733e4588396c4567;


desc
@@


1.5
log
@[191924]: Adopt lite generator to use newly created /navigator/NavigatorLabelProvider.xpt
[191954]: Adopt lite generator to use newly created /navigator/NavigatorActionProvider.xpt
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.navigator" class="NavigatorLabelProviderGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.ecore.*"%>
<%
GenNavigator genNavigator = (GenNavigator) ((Object[]) argument)[0];
GenDiagram genDiagram = genNavigator.getEditorGen().getDiagram();
Collection<GenCommonBase> commonBaseElements = new ArrayList<GenCommonBase>(genDiagram.getAllContainers());
commonBaseElements.addAll(genDiagram.getLinks());
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

final String commonKeyPrefix = "Navigator?";
final String invalidElementKey = commonKeyPrefix + "InvalidElement";
final String unknownElementKey = commonKeyPrefix + "UnknownElement";
final String notFoundElementKey = commonKeyPrefix + "ImageNotFound";
/* TODO: move this logic into genmodel */
final class RegistryKey {
	
	private GenCommonBase myCommonBase;
	private String myKey;
	
	public RegistryKey(GenCommonBase commonBase) {
		myCommonBase = commonBase;
	}
	
	public String getKey() {
		if (myKey == null) {
			if (myCommonBase instanceof GenDiagram) {
				myKey = getKey((GenDiagram) myCommonBase);
			} else if (myCommonBase instanceof GenNode) {
				myKey = getKey((GenNode) myCommonBase);
			} else if (myCommonBase instanceof GenLink) {
				myKey = getKey((GenLink) myCommonBase);
			} else if (myCommonBase instanceof GenCompartment) {
				myKey = getKey((GenCompartment) myCommonBase);
			} else if (myCommonBase instanceof GenLabel) {
				myKey = getKey((GenLabel) myCommonBase);
			} else {
				myKey = getInvalidElementKey();
			}
		}
		return myKey;
	}
	
	private String getKey(GenDiagram diagram) {
		return getCommonPrefix() + "Diagram?" + getKeyFragment(diagram.getDomainDiagramElement());
	}
	
	private String getKey(GenNode node) {
		return getCommonPrefix() + (node instanceof GenTopLevelNode ? "TopLevelNode?" : "Node?") + (node.getModelFacet() != null ? getKeyFragment(node.getModelFacet().getMetaClass()) : getKeyFragment(node.getViewmap()));
	}
	
	private String getKey(GenLink link) {
		LinkModelFacet modelFacet = link.getModelFacet();
		if (modelFacet instanceof TypeLinkModelFacet) {
			return getCommonPrefix() + "Link?" + getKeyFragment(((TypeLinkModelFacet) modelFacet).getMetaClass());
		} else if (modelFacet instanceof FeatureLinkModelFacet) {
			return getCommonPrefix() + "Link?" + getKeyFragment(((FeatureLinkModelFacet) modelFacet).getMetaFeature());
		}
		return getCommonPrefix() + "Link?" + getKeyFragment(link.getViewmap());
	}
	
	private String getKey(GenCompartment compartment) {
		return getKey(compartment.getNode()) + "?Compartment?" + compartment.getTitle();
	}
	
	private String getKey(GenLabel label) {
		if (label instanceof GenNodeLabel) {
			GenNodeLabel nodeLabel = (GenNodeLabel) label;
			return getKey(nodeLabel.getNode()) + "?Label?" + getKeyFragment(nodeLabel);
		} else if (label instanceof GenLinkLabel) {
			GenLinkLabel linkLabel = (GenLinkLabel) label;
			return getKey(linkLabel.getLink()) + "?Label?" + getKeyFragment(linkLabel);
		}
		return getInvalidElementKey();
	}
	
	private String getInvalidElementKey() {
		return invalidElementKey;
	}
	
	private String getCommonPrefix() {
		return commonKeyPrefix;
	}
	
	private String getKeyFragment(GenClass genClass) {
		if (genClass == null) {
			return "";
		}
		return genClass.getGenPackage().getNSURI() + "?" + genClass.getName();
	}
	
	private String getKeyFragment(GenFeature genFeature) {
		GenClass genClass = genFeature.getGenClass();
		return getKeyFragment(genClass) + "?" + genFeature.getName();
	}
	
	private String getKeyFragment(GenLabel genLabel) {
		LabelModelFacet modelFacet = genLabel.getModelFacet();
		if (modelFacet instanceof FeatureLabelModelFacet) {
			String result = "";
			for (GenFeature next : ((FeatureLabelModelFacet) genLabel).getMetaFeatures()) {
				result += getKeyFragment(next);
			}
			return result;
		} else if (modelFacet instanceof DesignLabelModelFacet) {
			return getKeyFragment(genLabel.getViewmap());
		}
		return getInvalidElementKey();
	}
	
	private String getKeyFragment(Viewmap viewmap) {
		if (viewmap instanceof FigureViewmap) {
			return ((FigureViewmap) viewmap).getFigureQualifiedClassName();
		} else if (viewmap instanceof InnerClassViewmap) {
			return ((InnerClassViewmap) viewmap).getClassName();
		} else if (viewmap instanceof ParentAssignedViewmap) {
			return ((ParentAssignedViewmap) viewmap).getFigureQualifiedClassName();
		}
		return "";
	}

}

%>
<%@@ include file="../copyright4java.jetinc"%>
<%@@ include file="../common/featureGetAccessor.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genNavigator.getLabelProviderClassName()%> extends <%=importManager.getImportedName("org.eclipse.jface.viewers.LabelProvider")%> implements <%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonLabelProvider")%>, <%=importManager.getImportedName("org.eclipse.jface.viewers.ITreePathLabelProvider")%> {

	/**
	 * @@generated
	 */
	static {
		<%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getImageRegistry().put("<%=invalidElementKey%>", <%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%>.getMissingImageDescriptor());
		<%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getImageRegistry().put("<%=unknownElementKey%>", <%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%>.getMissingImageDescriptor());
		<%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getImageRegistry().put("<%=notFoundElementKey%>", <%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%>.getMissingImageDescriptor());
	}
	
	/**
	 * @@generated
	 */
	public void updateLabel(<%=importManager.getImportedName("org.eclipse.jface.viewers.ViewerLabel")%> label, <%=importManager.getImportedName("org.eclipse.jface.viewers.TreePath")%> elementPath) {
		Object element = elementPath.getLastSegment();
		if (element instanceof <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> && !isOwnView(((<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) element).getView())) {
			return;
		}
		label.setText(getText(element));
		label.setImage(getImage(element));
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getImage(Object element) {
		if (element instanceof <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>) {
			<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> group = (<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>) element;
			return <%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getBundledImage(group.getIcon());
		}
		
		if (element instanceof <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) {
			<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> navigatorItem = (<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) element;
    		if (!isOwnView(navigatorItem.getView())) {
    			return super.getImage(element);
    		}
    		return getImage(navigatorItem.getView());
		}

<%
if (false && genDiagram.generateShortcutIcon()) {	//no shortcuts so far in lite
%>
		// Due to plugin.xml content will be called only for "own" views
		if (element instanceof <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) ((<%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) element).getAdapter(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>.class);
			if (view != null && isOwnView(view)) {
				return getImage(view);
			}
		}<%
}%>
		return super.getImage(element);
	}
		
	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getImage(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		switch (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view)) {
<%for (GenCommonBase nextCommonBase : commonBaseElements) {
	if (genNavigator.getChildReferencesTo(nextCommonBase).size() > 0) {
		RegistryKey registryKey = new RegistryKey(nextCommonBase);
%>
		case <%=importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName())%>.VISUAL_ID: {
<%
		String elementCode = "null";
		if (nextCommonBase instanceof GenLabel) {
			if (((GenLabel) nextCommonBase).isElementIcon()) {
				if (nextCommonBase instanceof GenLinkLabel) {
					GenLink parent = ((GenLinkLabel) nextCommonBase).getLink();
					if (parent.getModelFacet() instanceof TypeLinkModelFacet) {
						elementCode = "view.getElement()";
					} else if (parent.getModelFacet() instanceof FeatureLinkModelFacet) {
%>
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> target = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) view).getTarget();
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> underlyingElement = target == null ? null : target.getElement();
<%
						elementCode = "underlyingElement";
					}
				}
			} else {
				elementCode = "null";
			}
		} else if (nextCommonBase instanceof GenChildLabelNode) {
			if (((GenChildLabelNode) nextCommonBase).isLabelElementIcon()) {
				elementCode = "view.getElement()";
			} else {
				elementCode = "null";
			}
		} else if (nextCommonBase instanceof GenCompartment || nextCommonBase instanceof GenLink || nextCommonBase instanceof GenNode || nextCommonBase instanceof GenDiagram) {
			elementCode = "view.getElement()";
		}
%>
			return getImage("<%=registryKey.getKey()%>", <%=elementCode%>);
		}
<%	}
}%>
		default:
			return getImage("<%=unknownElementKey%>", null);
		}
	}
	
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getImage(String key, <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> object) {
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageRegistry")%> imageRegistry = <%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getImageRegistry();
		<%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> image = imageRegistry.get(key);
		if (image == null && object != null) {
			image = <%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemImage(object);
			imageRegistry.put(key, image);
		}
		if (image == null) {
			image = imageRegistry.get("<%=notFoundElementKey%>");
			imageRegistry.put(key, image);
		}
		return image;
	}
	
	/**
	 * @@generated
	 */
	public String getText(Object element) {
		if (element instanceof <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>) {
			<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> group = (<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>) element;
			return group.getGroupName();
		}
		
		if (element instanceof <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) {
			<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> navigatorItem = (<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) element;
    		if (!isOwnView(navigatorItem.getView())) {
    			return null;
    		}
    		return getText(navigatorItem.getView());
		}
	
<%
if (false && genDiagram.generateShortcutIcon()) {	//no shortcuts so far in lite
%>
		// Due to plugin.xml content will be called only for "own" views
		if (element instanceof <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) ((<%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) element).getAdapter(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>.class);
			if (view != null && isOwnView(view)) {
				return getText(view);
			}
		}<%
}%>
		return super.getText(element);
	}
		
	/**
	 * @@generated
	 */
	public String getText(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		if (view.getElement() != null && view.getElement().eIsProxy()) {
			return getUnresolvedDomainElementProxyText(view);
		}
		switch (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view)) {
<%for (GenCommonBase nextCommonBase : commonBaseElements) {
	if (genNavigator.getChildReferencesTo(nextCommonBase).size() > 0) {%>
		case <%=importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName())%>.VISUAL_ID:
			return get<%=nextCommonBase.getUniqueIdentifier()%>Text(view);
<%	}
}%>
		default:
			return getUnknownElementText(view);
		}
	}

<%for (GenCommonBase nextCommonBase : commonBaseElements) {
	if (genNavigator.getChildReferencesTo(nextCommonBase).size() > 0) {%>
	/**
	 * @@generated
	 */
	private String get<%=nextCommonBase.getUniqueIdentifier()%>Text(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
<%		LabelModelFacet labelModelFacet = null;
		GenCommonBase labelHolder = null;
		if (nextCommonBase instanceof GenChildLabelNode) {
			labelModelFacet = ((GenChildLabelNode) nextCommonBase).getLabelModelFacet();
			labelHolder = nextCommonBase;
		} else if (nextCommonBase instanceof GenNode) {
			Collection<GenNodeLabel> labels = ((GenNode) nextCommonBase).getLabels();
			for(GenLabel nextLabel : labels) {
				if (false == nextLabel.getModelFacet() instanceof FeatureLabelModelFacet) {
					continue;
				}
				labelModelFacet = nextLabel.getModelFacet();
				labelHolder = nextLabel;
				break;
			}
		} else if (nextCommonBase instanceof GenLink) {
			GenLink genLink = (GenLink) nextCommonBase;
			Collection<GenLinkLabel> labels = genLink.getLabels();
			for(GenLabel nextLabel : labels) {
				if (false == nextLabel.getModelFacet() instanceof FeatureLabelModelFacet) {
					continue;
				}
				labelModelFacet = nextLabel.getModelFacet();
				labelHolder = nextLabel;
				break;
			}
		} else if (nextCommonBase instanceof GenLabel) {
			labelModelFacet = ((GenLabel) nextCommonBase).getModelFacet();
			labelHolder = nextCommonBase;
		}
		
		if (labelHolder != null) {
/* 1. Label was detected. */
			if (labelModelFacet instanceof FeatureLabelModelFacet) {
%>
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> domainModelElement = view.getElement();
		if (domainModelElement == null) {
			return "";
		}
		String result = <%=importManager.getImportedName(labelHolder.getEditPartQualifiedClassName())%>.LABEL_DISPLAYER.getDisplayText(domainModelElement);
		if (result == null) {
			return "";
		}
		return result;
<%
			} else {
%>
		return "";
<%
			}
%>
<%		} else if (nextCommonBase instanceof GenCompartment) {
/* 2. Compartment was detected. */%>
		return "<%=((GenCompartment) nextCommonBase).getTitle()%>";
<%		} else {
			GenClass domainElement = null;
			if (nextCommonBase instanceof GenDiagram) {
				domainElement = ((GenDiagram) nextCommonBase).getDomainDiagramElement();
			} else if (nextCommonBase instanceof GenNode) {
				GenNode genNode = (GenNode) nextCommonBase;
				if (genNode.getModelFacet() != null) {
					domainElement = genNode.getModelFacet().getMetaClass();
				}
			} else if (nextCommonBase instanceof GenLink) {
				LinkModelFacet modelFacet = ((GenLink) nextCommonBase).getModelFacet();
				if (modelFacet instanceof TypeModelFacet) {
					domainElement = ((TypeModelFacet) modelFacet).getMetaClass();
				}
			}
			if (domainElement != null && domainElement.getLabelFeature() != null) {
/* 3. Underlying domain model element recognized. */
				GenFeature labelFeature = domainElement.getLabelFeature();
				boolean notString = EcorePackage.eINSTANCE.getEString() != labelFeature.getEcoreFeature().getEType();%>
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> domainModelElement = view.getElement();
		if (domainModelElement != null) {
			return <%if (notString) {%>String.valueOf(<%} else {%>(String) <%}%><%myFeatureGetAccessorHelper.appendFeatureValueGetter("domainModelElement", domainElement.getLabelFeature(), null, false);%><%if (notString) {%>)<%}%>;
		} else {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("No domain element for view with visualID = " + <%=String.valueOf(nextCommonBase.getVisualID())%>);
			return "";
		}
<%			} else {
/* 4. None of above. */%>
		return "";
<%			}
		}%>
	}
<%	}
}%>
	/**
	 * @@generated
	 */
	private String getUnknownElementText(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		return "<UnknownElement Visual_ID = " + view.getType() + ">";
	}
	
	/**
	 * @@generated
	 */
	private String getUnresolvedDomainElementProxyText(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		return "<Unresolved domain element Visual_ID = " + view.getType() + ">";
	}

	/**
	 * @@generated
	 */
	public void init(<%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite")%> aConfig) {
	}

	/**
	 * @@generated
	 */
	public void restoreState(<%=importManager.getImportedName("org.eclipse.ui.IMemento")%> aMemento) {
	}

	/**
	 * @@generated
	 */
	public void saveState(<%=importManager.getImportedName("org.eclipse.ui.IMemento")%> aMemento) {
	}
	
	/**
	 * @@generated
	 */
	public String getDescription(Object anElement) {
		return null;
	}
	
	/**
	 * @@generated
	 */
	private boolean isOwnView(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		return <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(view));
	}

}
<%importManager.emitSortedImports();%>
@


1.4
log
@Null pointer exception corrected.
@
text
@@


1.3
log
@Special label added for unresolved domain element proxies.
@
text
@d287 1
a287 1
		if (view.getElement().eIsProxy()) {
@


1.2
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@d287 3
d402 7
@


1.1
log
@Generate support for Navigator
@
text
@d6 1
a6 1
Collection commonBaseElements = new ArrayList(genDiagram.getAllContainers());
d100 2
a101 2
			for (Iterator it = ((FeatureLabelModelFacet) genLabel).getMetaFeatures().iterator(); it.hasNext();) {
				result += getKeyFragment((GenFeature) it.next());
d192 1
a192 2
<%for (Iterator it = commonBaseElements.iterator(); it.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) it.next();
d288 1
a288 2
<%for (Iterator it = commonBaseElements.iterator(); it.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) it.next();
d299 1
a299 2
<%for (Iterator it = commonBaseElements.iterator(); it.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) it.next();
a306 1
		GenClass underlyingMetaClass = null;
a309 1
			underlyingMetaClass = ((GenChildLabelNode) nextCommonBase).getDomainMetaClass();
d311 2
a312 3
			Collection labels = ((GenNode) nextCommonBase).getLabels();
			for(Iterator it2 = labels.iterator(); it2.hasNext(); ) {
				GenLabel nextLabel = (GenLabel) it2.next();
a317 1
				underlyingMetaClass = ((GenNode) nextCommonBase).getDomainMetaClass();
d322 2
a323 3
			Collection labels = genLink.getLabels();
			for(Iterator it2 = labels.iterator(); it2.hasNext(); ) {
				GenLabel nextLabel = (GenLabel) it2.next();
a326 9
				if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
					TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
					underlyingMetaClass = typeLinkModelFacet.getMetaClass();
				} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
					FeatureLinkModelFacet featureLinkModelFacet = (FeatureLinkModelFacet) genLink.getModelFacet();
					underlyingMetaClass = featureLinkModelFacet.getMetaFeature().getTypeGenClass();
				} else {
					continue;
				}
a333 16
			if (nextCommonBase instanceof GenNodeLabel) {
				underlyingMetaClass = ((GenNodeLabel) nextCommonBase).getNode().getDomainMetaClass();
			} else if (nextCommonBase instanceof GenLinkLabel) {
				GenLink genLink = ((GenLinkLabel) nextCommonBase).getLink();
				if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
					TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
					underlyingMetaClass = typeLinkModelFacet.getMetaClass();
				} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
					FeatureLinkModelFacet featureLinkModelFacet = (FeatureLinkModelFacet) genLink.getModelFacet();
					underlyingMetaClass = featureLinkModelFacet.getMetaFeature().getTypeGenClass();
				}
			} else {
				labelHolder = null;
				labelModelFacet = null;
				underlyingMetaClass = null;
			}
d344 1
a344 3
		String result = <%=importManager.getImportedName(labelHolder.getEditPartQualifiedClassName())%>.buildTextByPattern(
			(<%=importManager.getImportedName(underlyingMetaClass.getQualifiedInterfaceName())%>) domainModelElement, 
			<%=importManager.getImportedName(labelHolder.getEditPartQualifiedClassName())%>.VIEW_PATTERN);
@

