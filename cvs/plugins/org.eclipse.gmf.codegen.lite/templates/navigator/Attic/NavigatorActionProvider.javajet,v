head	1.3;
access;
symbols
	v20080910-1520:1.3
	v20070608-1300:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070520-1200:1.2
	v20070518-1300:1.2
	v20070504-1000:1.2
	v20070427-0600:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070228-2000:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1;
locks; strict;
comment	@# @;


1.3
date	2007.06.12.10.58.03;	author bblajer;	state dead;
branches;
next	1.2;
commitid	4adc466e7c394567;

1.2
date	2007.03.27.17.38.24;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	141d4609568f4567;

1.1
date	2006.12.19.19.11.42;	author bblajer;	state Exp;
branches;
next	;
commitid	733e4588396c4567;


desc
@@


1.3
log
@[191924]: Adopt lite generator to use newly created /navigator/NavigatorLabelProvider.xpt
[191954]: Adopt lite generator to use newly created /navigator/NavigatorActionProvider.xpt
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.navigator" class="NavigatorActionProviderGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
GenNavigator genNavigator = (GenNavigator) ((Object[]) argument)[0];
GenDiagram genDiagram = genNavigator.getEditorGen().getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
importManager.registerInnerClass("OpenFileAction");
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genNavigator.getActionProviderClassName()%> extends <%=importManager.getImportedName("org.eclipse.ui.navigator.CommonActionProvider")%> {

	/**
	 * @@generated
	 */
	private boolean myContribute;

	/**
	 * @@generated
	 */
	private OpenDiagramAction myOpenDiagramAction;

	/**
	 * @@generated
	 */
	public void init(<%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonActionExtensionSite")%> aSite) {
		super.init(aSite);
		if (aSite.getViewSite() instanceof <%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonViewerWorkbenchSite")%>) {
			myContribute = true;
			makeActions((<%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonViewerWorkbenchSite")%>) aSite.getViewSite());
		} else {
			myContribute = false;
		}
	}
	
	/**
	 * @@generated
	 */
	private void makeActions(<%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonViewerWorkbenchSite")%> viewerSite) {
		myOpenDiagramAction = new OpenDiagramAction(viewerSite);
	}

	/**
	 * @@generated
	 */
	public void fillActionBars(<%=importManager.getImportedName("org.eclipse.ui.IActionBars")%> actionBars) {
		if (!myContribute) {
			return;
		}
		<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> selection = (<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) getContext().getSelection();
		myOpenDiagramAction.selectionChanged(selection);
		if (myOpenDiagramAction.isEnabled()) {
			actionBars.setGlobalActionHandler(<%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonActionConstants")%>.OPEN, myOpenDiagramAction);
		}
	}

	/**
	 * @@generated
	 */
	public void fillContextMenu(<%=importManager.getImportedName("org.eclipse.jface.action.IMenuManager")%> menu) {
<%
/*
 * Put following code into the template to generate popup menu
 *
		if (!myContribute || getContext().getSelection().isEmpty()) {
			return;
		}

		< %=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")% > selection = (< %=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")% >) getContext().getSelection();

		myOpenDiagramAction.selectionChanged(selection);
		if (myOpenDiagramAction.isEnabled()) {
			menu.insertAfter(< %=importManager.getImportedName("org.eclipse.ui.navigator.ICommonMenuConstants")% >.GROUP_OPEN, myOpenDiagramAction);
		}*/%>		
	}
	
	/**
	 * @@generated
	 */
	private class OpenDiagramAction extends <%=importManager.getImportedName("org.eclipse.jface.action.Action")%> {
	
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> myDiagram;
		
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonViewerWorkbenchSite")%> myViewerSite;
	
		/**
		 * @@generated
		 */
		public OpenDiagramAction(<%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonViewerWorkbenchSite")%> viewerSite) {
			super("Open Diagram");
			myViewerSite = viewerSite;
		}

		/**
		 * @@generated
		 */
		public final void selectionChanged(<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> selection) {
			myDiagram = null;
			if (selection.size() == 1) {
				Object selectedElement = selection.getFirstElement();
				if (selectedElement instanceof <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) {
					selectedElement = ((<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) selectedElement).getView();
				} else if (selectedElement instanceof <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) {
					selectedElement = ((<%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) selectedElement).getAdapter(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>.class);
				}
				if (selectedElement instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) selectedElement;
					if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(diagram))) {
						myDiagram = diagram;
					}
				}
			}
			setEnabled(myDiagram != null);
		}

		/**
		 * @@generated
		 */
		public void run() {
			if (myDiagram == null) {
				return;
			}
			<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPage")%> page = myViewerSite.getPage();
<%
if (genDiagram.getEditorGen().getEditor().isEclipseEditor()) {
%>
			<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> editorInput = new <%=importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.util.EcoreUtil")%>.getURI(myDiagram));
		 	try {
				page.openEditor(editorInput, <%=importManager.getImportedName(genNavigator.getEditorGen().getEditor().getQualifiedClassName())%>.ID);
			} catch (<%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> e) {
				<%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Exception while opening diagram", e);
			}
<%
} else {
%>
			try {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart")%> diagramView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramViewPart")%>)page.showView(<%=importManager.getImportedName(genNavigator.getEditorGen().getEditor().getQualifiedClassName())%>.ID);
				diagramView.showDiagram(null, <%=importManager.getImportedName("org.eclipse.emf.ecore.util.EcoreUtil")%>.getURI(myDiagram));
			} catch (<%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> e) {
				throw new RuntimeException("Can't open diagram", e);
			}
<%
}
%>
		}
		
	}

}
<%importManager.emitSortedImports();%>
@


1.2
log
@Diagram opened from common navigator should not be read-only
@
text
@@


1.1
log
@Generate support for Navigator
@
text
@d139 1
a139 1
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramEditorInput")%> editorInput = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.parts.DiagramEditorInput")%>(myDiagram);
d143 1
a143 1
				<%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Exception while openning diagram", e);
@

