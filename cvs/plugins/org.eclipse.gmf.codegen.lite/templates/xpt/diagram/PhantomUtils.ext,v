head	1.2;
access;
symbols
	v20080910-1520:1.2
	v20080722-1827:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.2
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080507-1326:1.2
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080322-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1
	v20070915-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070614-1400:1.1
	v20070608-1300:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1;
locks; strict;
comment	@# @;


1.2
date	2008.05.07.13.55.39;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	388c4821b4d44567;

1.1
date	2007.05.21.16.38.31;	author bblajer;	state Exp;
branches;
next	;
commitid	4ab64651cb064567;


desc
@@


1.2
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/emf/2002/Ecore";
import "http://www.eclipse.org/emf/2002/GenModel";
import "http://www.eclipse.org/gmf/2008/GenModel";
extension xpt::GenModelUtils;

Collection[gmfgen::GenTopLevelNode] getPhantomNodes(gmfgen::GenDiagram diagram) :
	diagram.topLevelNodes.select(e| e.modelFacet.isPhantomElement())
;

Collection[genmodel::GenFeature] getPhantomFeatures(gmfgen::GenDiagram diagram) :
	diagram.getPhantomFeatures(diagram.getPhantomNodes())
;

Collection[genmodel::GenFeature] getPhantomFeatures(gmfgen::GenTopLevelNode phantom) :
	phantom.getDiagram().getPhantomFeatures({phantom})
;

private Collection[genmodel::GenFeature] getPhantomFeatures(gmfgen::GenDiagram diagram, Collection[gmfgen::GenTopLevelNode] phantomNodes) :
	diagram.links.select(e| e.modelFacet.isPhantomLink(phantomNodes)).collect(e| ((gmfgen::FeatureLinkModelFacet) e.modelFacet).metaFeature)
;

boolean isPhantomLink(gmfgen::LinkModelFacet facet, gmfgen::GenDiagram diagram) :
	facet.isPhantomLink(diagram.getPhantomNodes())
;

boolean isPhantomLink(gmfgen::LinkModelFacet facet, Collection[gmfgen::GenTopLevelNode] phantoms) :
	false
;

boolean isPhantomLink(gmfgen::FeatureLinkModelFacet facet, Collection[gmfgen::GenTopLevelNode] phantoms) :
	!facet.metaFeature.isContains() ? false :
		(let featureType = facet.metaFeature.getTypeGenClassX().ecoreClass : 
			phantoms.select(e| featureType.isSuperTypeOf(e.modelFacet.metaClass.ecoreClass)).size() > 0)
;
@


1.1
log
@Phantoms support
@
text
@d15 1
a15 1
import "http://www.eclipse.org/gmf/2006/GenModel";
@

