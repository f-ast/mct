head	1.6;
access;
symbols
	v20080910-1520:1.6
	v20080722-1827:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.2
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080507-1326:1.6
	v20080501-1739:1.5
	v20080425-1959:1.5
	v20080322-0000:1.5
	v20071108-0000:1.5
	v20071003-0000:1.5
	v20070921-0000:1.4.2.1
	v20070915-0000:1.4
	v20070903-0000:1.5
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070614-1400:1.4
	v20070608-1300:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070520-1200:1.4
	v20070518-1300:1.3
	v20070504-1000:1.2
	v20070427-0600:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1;
locks; strict;
comment	@# @;


1.6
date	2008.05.07.13.55.39;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	388c4821b4d44567;

1.5
date	2007.07.04.13.22.27;	author bblajer;	state Exp;
branches;
next	1.4;
commitid	405d468b9f0f4567;

1.4
date	2007.05.18.21.17.26;	author atikhomirov;	state Exp;
branches
	1.4.2.1;
next	1.3;
commitid	25e5464e17e24567;

1.3
date	2007.05.04.14.08.43;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	464d463b3e6a4567;

1.2
date	2007.04.04.11.05.02;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	18c54613864d4567;

1.1
date	2007.03.09.17.19.35;	author bblajer;	state Exp;
branches;
next	;
commitid	22ed45f197244567;

1.4.2.1
date	2007.09.17.16.02.13;	author bblajer;	state Exp;
branches;
next	;
commitid	7b9846eea5004567;


desc
@@


1.6
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::diagram::policies::ClassNames»
«EXTENSION xpt::diagram::Helper»
«EXTENSION xpt::diagram::LinkFinder»
«EXTENSION xpt::commands::CommandUtils»

«DEFINE GraphicalNodeEditPolicy FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen»
package «getDiagram().editPoliciesPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» «EXPAND supertypes» {
	«EXPAND getConnectionCreateCommand-»
	«EXPAND getConnectionCompleteCommand-»
	«EXPAND getReconnectSourceCommand-»
	«EXPAND getReconnectTargetCommand-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE className FOR gmfgen::GenCommonBase»«getGraphicalNodeEditPolicyClassName()»«ENDDEFINE»
«DEFINE qualifiedClassName FOR gmfgen::GenCommonBase»«getDiagram().editPoliciesPackageName».«EXPAND className»«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenCommonBase»extends org.eclipse.gef.editpolicies.GraphicalNodeEditPolicy«ENDDEFINE»

«DEFINE getConnectionCreateCommand FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getConnectionCreateCommand(org.eclipse.gef.requests.CreateConnectionRequest request) {
«IF getDiagram().palette != null && outgoingLinks().size() > 0-»
	if (request instanceof org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx) {
		org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx requestEx = (org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx) request;
		if (!«getDiagram().getEditPartQualifiedClassName()».MODEL_ID.equals(requestEx.getModelID())) {
			«EXPAND notApplicable-»
		}
		int[] visualIds = requestEx.getVisualIds();
		org.eclipse.emf.common.command.CompoundCommand result = new org.eclipse.emf.common.command.CompoundCommand();
		for (int i = 0; i < visualIds.length; i++) {
			int nextVisualId = visualIds[i];
			switch (nextVisualId) {
«EXPAND getConnectionCreateCommandContribution FOREACH outgoingLinks()-»
			}
		}
		if (!result.canExecute()) {
			«EXPAND notApplicable-»
		}
		org.eclipse.gef.commands.Command wrappedResult = new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(«EXPAND xpt::diagram::policies::Common::getDiagramElementCode»), result);
		request.setStartCommand(wrappedResult);
		return wrappedResult;
	}
«ENDIF-»
	«EXPAND notApplicable-»
}
«ENDDEFINE»

«DEFINE getConnectionCreateCommandContribution FOR gmfgen::GenLink-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
	result.appendIfCanExecute(new «getDiagram().editCommandsPackageName».«EXPAND xpt::commands::CreateLinkStartCommand::className»(requestEx));
	break;
«ENDDEFINE»

«DEFINE getConnectionCompleteCommand FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getConnectionCompleteCommand(org.eclipse.gef.requests.CreateConnectionRequest request) {
«IF getDiagram().palette != null && incomingLinks().size() > 0-»
	if (request instanceof org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx) {
		if (request.getStartCommand() == null || !request.getStartCommand().canExecute()) {
			return org.eclipse.gef.commands.UnexecutableCommand.INSTANCE;
		}
		org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx requestEx = (org.eclipse.gmf.runtime.lite.requests.CreateConnectionRequestEx) request;
		if (!«getDiagram().getEditPartQualifiedClassName()».MODEL_ID.equals(requestEx.getModelID())) {
			«EXPAND notApplicable-»
		}
		int[] visualIds = requestEx.getVisualIds();
		org.eclipse.emf.common.command.CompoundCommand result = new org.eclipse.emf.common.command.CompoundCommand();
		for (int i = 0; i < visualIds.length; i++) {
			int nextVisualId = visualIds[i];
			switch (nextVisualId) {
«EXPAND getConnectionCompleteCommandContribution FOREACH incomingLinks()-»
			}
		}
		if (result.getCommandList().size() != 1 || !result.canExecute()) {
			//Cannot create several connections at once.
			return org.eclipse.gef.commands.UnexecutableCommand.INSTANCE;
		}
		return request.getStartCommand().chain(new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(«EXPAND xpt::diagram::policies::Common::getDiagramElementCode»), result));
	}
«ENDIF-»
	«EXPAND notApplicable-»
}
«ENDDEFINE»

«DEFINE getConnectionCompleteCommandContribution FOR gmfgen::GenLink-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
	result.appendIfCanExecute(new «getDiagram().editCommandsPackageName».«EXPAND xpt::commands::CreateLinkCompleteCommand::className»(requestEx));
	break;
«ENDDEFINE»

«DEFINE getReconnectSourceCommand FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getReconnectSourceCommand(org.eclipse.gef.requests.ReconnectRequest request) {
«IF outgoingLinks().size() > 0-»
	org.eclipse.gef.ConnectionEditPart connection = request.getConnectionEditPart();
	if (connection.getModel() instanceof org.eclipse.gmf.runtime.notation.Edge == false) {
		«EXPAND notApplicable-»
	}
	org.eclipse.gmf.runtime.notation.Edge edge = (org.eclipse.gmf.runtime.notation.Edge)connection.getModel();
	String modelID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getModelID(edge);
	if (!«getDiagram().getEditPartQualifiedClassName()».MODEL_ID.equals(modelID)) {
		«EXPAND notApplicable-»
	}
	org.eclipse.emf.common.command.Command result = null;
	int visualID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(edge);
	switch (visualID) {
«EXPAND getReconnectSourceCommandContribution FOREACH outgoingLinks()-»
	}
	if (result == null || !result.canExecute()) {
		«EXPAND notApplicable-»
	}
	return new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(«EXPAND xpt::diagram::policies::Common::getDiagramElementCode»), result);
«ELSE-»
	«EXPAND notApplicable-»
«ENDIF-»
}
«ENDDEFINE»

«DEFINE getReconnectSourceCommandContribution FOR gmfgen::GenLink-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
	result = new «getDiagram().editCommandsPackageName».«EXPAND xpt::commands::ReconnectLinkSourceCommand::className»(request);
	break;
«ENDDEFINE»

«DEFINE getReconnectTargetCommand FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getReconnectTargetCommand(org.eclipse.gef.requests.ReconnectRequest request) {
«IF incomingLinks().size() > 0-»
	org.eclipse.gef.ConnectionEditPart connection = request.getConnectionEditPart();
	if (connection.getModel() instanceof org.eclipse.gmf.runtime.notation.Edge == false) {
		«EXPAND notApplicable-»
	}
	org.eclipse.gmf.runtime.notation.Edge edge = (org.eclipse.gmf.runtime.notation.Edge)connection.getModel();
	String modelID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getModelID(edge);
	if (!«getDiagram().getEditPartQualifiedClassName()».MODEL_ID.equals(modelID)) {
		«EXPAND notApplicable-»
	}
	org.eclipse.emf.common.command.Command result = null;
	int visualID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(edge);
	switch (visualID) {
«EXPAND getReconnectTargetCommandContribution FOREACH incomingLinks()-»
	}
	if (result == null || !result.canExecute()) {
		«EXPAND notApplicable-»
	}
	return new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(«EXPAND xpt::diagram::policies::Common::getDiagramElementCode»), result);
«ELSE-»
	«EXPAND notApplicable-»
«ENDIF-»
}
«ENDDEFINE»

«DEFINE getReconnectTargetCommandContribution FOR gmfgen::GenLink-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
	result = new «getDiagram().editCommandsPackageName».«EXPAND xpt::commands::ReconnectLinkTargetCommand::className»(request);
	break;
«ENDDEFINE»

/**
 * Command is not applicable for the given request. Should return either null or 
 * org.eclipse.gef.commands.UnexecutableCommand.INSTANCE, but the same value everywhere.
 */
«DEFINE notApplicable FOR gmfgen::GenCommonBase-»
return null;
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenCommonBase»«ENDDEFINE»
@


1.5
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.4
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d27 1
a27 1
public class «getGraphicalNodeEditPolicyClassName()» «EXPAND supertypes» {
d36 3
@


1.4.2.1
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator)
@
text
@d27 1
a27 1
public class «EXPAND className» «EXPAND supertypes» {
a35 3
«DEFINE className FOR gmfgen::GenCommonBase»«getGraphicalNodeEditPolicyClassName()»«ENDDEFINE»
«DEFINE qualifiedClassName FOR gmfgen::GenCommonBase»«getDiagram().editPoliciesPackageName».«EXPAND className»«ENDDEFINE»

@


1.3
log
@1. Links to links;
2. Exception from TreeEditPartViewer (in the outline) while closing the diagram editor (because unregister is not called, only deactivate) fixed;
3. instead of rerouting a link to an end that does not support it, remove the link
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.2
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@d22 1
a22 1
«DEFINE GraphicalNodeEditPolicy FOR gmfgen::GenNode-»
d27 1
a27 1
public class «graphicalNodeEditPolicyClassName» «EXPAND supertypes» {
d36 1
a36 1
«DEFINE supertypes FOR gmfgen::GenNode»extends org.eclipse.gef.editpolicies.GraphicalNodeEditPolicy«ENDDEFINE»
d38 1
a38 1
«DEFINE getConnectionCreateCommand FOR gmfgen::GenNode-»
d52 1
a52 1
«EXPAND getConnectionCreateCommandContribution(this) FOREACH outgoingLinks()-»
d67 1
a67 1
«DEFINE getConnectionCreateCommandContribution(gmfgen::GenNode node) FOR gmfgen::GenLink-»
d73 1
a73 1
«DEFINE getConnectionCompleteCommand FOR gmfgen::GenNode-»
d90 1
a90 1
«EXPAND getConnectionCompleteCommandContribution(this) FOREACH incomingLinks()-»
d104 1
a104 1
«DEFINE getConnectionCompleteCommandContribution(gmfgen::GenNode node) FOR gmfgen::GenLink-»
d110 1
a110 1
«DEFINE getReconnectSourceCommand FOR gmfgen::GenNode-»
d126 1
a126 1
«EXPAND getReconnectSourceCommandContribution(this) FOREACH outgoingLinks()-»
d138 1
a138 1
«DEFINE getReconnectSourceCommandContribution(gmfgen::GenNode node) FOR gmfgen::GenLink-»
d144 1
a144 1
«DEFINE getReconnectTargetCommand FOR gmfgen::GenNode-»
d160 1
a160 1
«EXPAND getReconnectTargetCommandContribution(this) FOREACH incomingLinks()-»
d172 1
a172 1
«DEFINE getReconnectTargetCommandContribution(gmfgen::GenNode node) FOR gmfgen::GenLink-»
d182 1
a182 1
«DEFINE notApplicable FOR gmfgen::GenNode-»
d186 1
a186 1
«DEFINE additions FOR gmfgen::GenNode»«ENDDEFINE»
@


1.1
log
@[164018]: Command generation separated from Parts for layout edit policy and graphical node edit policy;
NewDiagramFileWizard: layout is not persisted if the diagram is closed right after initialization
@
text
@d28 4
a31 6
«LET incomingLinks() AS incomingLinks-»
«LET outgoingLinks() AS outgoingLinks-»
	«EXPAND getConnectionCreateCommand(outgoingLinks)-»
	«EXPAND getConnectionCompleteCommand(incomingLinks)-»
	«EXPAND getReconnectSourceCommand(outgoingLinks)-»
	«EXPAND getReconnectTargetCommand(incomingLinks)-»
a32 2
«ENDLET-»
«ENDLET-»
d38 1
a38 1
«DEFINE getConnectionCreateCommand(Collection[gmfgen::GenLink] outgoingLinks) FOR gmfgen::GenNode-»
d41 1
a41 1
«IF getDiagram().palette != null && outgoingLinks.size() > 0-»
d52 1
a52 1
«EXPAND getConnectionCreateCommandContribution(this) FOREACH outgoingLinks-»
d73 1
a73 1
«DEFINE getConnectionCompleteCommand(Collection[gmfgen::GenLink] incomingLinks) FOR gmfgen::GenNode-»
d76 1
a76 1
«IF getDiagram().palette != null && incomingLinks.size() > 0-»
d90 1
a90 1
«EXPAND getConnectionCompleteCommandContribution(this) FOREACH incomingLinks-»
d110 1
a110 1
«DEFINE getReconnectSourceCommand(Collection[gmfgen::GenLink] outgoingLinks) FOR gmfgen::GenNode-»
d113 1
a113 1
«IF outgoingLinks.size() > 0-»
d126 1
a126 1
«EXPAND getReconnectSourceCommandContribution(this) FOREACH outgoingLinks-»
d144 1
a144 1
«DEFINE getReconnectTargetCommand(Collection[gmfgen::GenLink] incomingLinks) FOR gmfgen::GenNode-»
d147 1
a147 1
«IF incomingLinks.size() > 0-»
d160 1
a160 1
«EXPAND getReconnectTargetCommandContribution(this) FOREACH incomingLinks-»
@

