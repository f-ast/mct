head	1.3;
access;
symbols
	v20080910-1520:1.3
	v20080722-1827:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080507-1326:1.3
	v20080501-1739:1.2
	v20080425-1959:1.2
	v20080322-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070921-0000:1.2
	v20070915-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070614-1400:1.2
	v20070608-1300:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070520-1200:1.2
	v20070518-1300:1.1
	v20070504-1000:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1;
locks; strict;
comment	@# @;


1.3
date	2008.05.07.13.55.37;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	388c4821b4d44567;

1.2
date	2007.05.18.21.17.25;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	25e5464e17e24567;

1.1
date	2007.04.04.11.04.48;	author bblajer;	state Exp;
branches;
next	;
commitid	18c54613864d4567;


desc
@@


1.3
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::diagram::parts::Common»
«EXTENSION xpt::diagram::parts::LabelController»

«DEFINE performRequest FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
public void performRequest(org.eclipse.gef.Request req) {
	«EXPAND performOpen-»
	«EXPAND performDirectEdit-»
	super.performRequest(req);
}
«ENDDEFINE»

«DEFINE performOpen FOR gmfgen::GenCommonBase-»
if (org.eclipse.gef.RequestConstants.REQ_OPEN.equals(req.getType())) {
	org.eclipse.gef.commands.Command command = getCommand(req);
	if (command != null && command.canExecute()) {
		getViewer().getEditDomain().getCommandStack().execute(command);
	}
	return;
}
«ENDDEFINE»

«DEFINE performOpen FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE performDirectEdit FOR gmfgen::GenCommonBase»«ENDDEFINE»

«DEFINE performDirectEdit FOR gmfgen::GenLabel»
«IF !isReadOnly()-»
«EXPAND performLabelDirectEdit-»
«ENDIF-»
«ENDDEFINE»

«DEFINE performDirectEdit FOR gmfgen::GenChildLabelNode-»
«IF !isReadOnly()-»
«EXPAND performLabelDirectEdit-»
«ENDIF-»
«ENDDEFINE»

«DEFINE performLabelDirectEdit FOR gmfgen::GenCommonBase-»
if (org.eclipse.gef.RequestConstants.REQ_DIRECT_EDIT.equals(req.getType()) && understandsRequest(req)) {
	performDirectEdit();
	return;
}
«ENDDEFINE»

«DEFINE performDirectEdit FOR gmfgen::GenNode-»
«EXPAND performDelegatingDirectEdit-»
«ENDDEFINE»

«DEFINE performDirectEdit FOR gmfgen::GenLink-»
«EXPAND performDelegatingDirectEdit-»
«ENDDEFINE»

«DEFINE performDelegatingDirectEdit FOR gmfgen::GenCommonBase-»
«IF getPrimaryLabel() != null-»
if (org.eclipse.gef.RequestConstants.REQ_DIRECT_EDIT.equals(req.getType())) {
	org.eclipse.gef.EditPart labelToEdit;
	if (req instanceof org.eclipse.gef.requests.DirectEditRequest) {
		labelToEdit = getLabelEditPart((org.eclipse.gef.requests.DirectEditRequest) req);
	} else {
		labelToEdit = getPrimaryLabelEditPart();
	}
	if (labelToEdit != null) {
		labelToEdit.performRequest(req);
	}
}
«ENDIF-»
«ENDDEFINE»

«DEFINE getLabelEditPart FOR gmfgen::GenCommonBase-»
«IF getPrimaryLabel() != null-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gef.EditPart getLabelEditPart(org.eclipse.gef.requests.DirectEditRequest req) {
	org.eclipse.gef.EditPart result = getViewer().findObjectAt(req.getLocation());
	if (result != null) {
		if («EXPAND xpt::diagram::parts::Common::getViewCode».getChildren().contains(result.getModel())) {
			org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) result.getModel();
			int visualId = «getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(view);
			switch (visualId) {
			«EXPAND returnLabelEditPart FOREACH getAllLabels().select(e| !e.readOnly)-»
			}
		}
	}
	return getPrimaryLabelEditPart();
}
«ENDIF-»
«ENDDEFINE»

«DEFINE returnLabelEditPart FOR gmfgen::GenLabel-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
	return result;
«ENDDEFINE»

«DEFINE getPrimaryLabelEditPart FOR gmfgen::GenCommonBase-»
«IF getPrimaryLabel() != null-»
«EXPAND xpt::Common::generatedMemberComment("Returns the label which should be direct-edited by default.")»
private org.eclipse.gef.EditPart getPrimaryLabelEditPart() {
	for(java.util.Iterator it = «EXPAND xpt::diagram::parts::Common::getViewCode».getChildren().iterator(); it.hasNext(); ) {
		org.eclipse.gmf.runtime.notation.View nextChild = (org.eclipse.gmf.runtime.notation.View)it.next();
		if («getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(nextChild) == «getPrimaryLabel().getEditPartQualifiedClassName()».VISUAL_ID) {
			return (org.eclipse.gef.EditPart) getViewer().getEditPartRegistry().get(nextChild);
		}
	}
	return null;
}
«ENDIF-»
«ENDDEFINE»

@


1.2
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.1
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@

