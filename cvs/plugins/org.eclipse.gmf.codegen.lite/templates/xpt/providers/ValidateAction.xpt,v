head	1.3;
access;
symbols
	v20080910-1520:1.3
	v20080722-1827:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080507-1326:1.3
	v20080501-1739:1.2
	v20080425-1959:1.2
	v20080322-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1.2.2
	R2_0_maintenance:1.1.0.2
	v20070903-0000:1.1;
locks; strict;
comment	@# @;


1.3
date	2008.05.07.13.55.39;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	388c4821b4d44567;

1.2
date	2008.04.14.08.37.50;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	1b0b480317de4567;

1.1
date	2007.07.04.13.22.26;	author bblajer;	state Exp;
branches
	1.1.2.1;
next	;
commitid	405d468b9f0f4567;

1.1.2.1
date	2007.07.04.13.22.26;	author bblajer;	state dead;
branches;
next	1.1.2.2;
commitid	7b9846eea5004567;

1.1.2.2
date	2007.09.17.16.02.13;	author bblajer;	state Exp;
branches;
next	;
commitid	7b9846eea5004567;


desc
@@


1.3
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::providers::i18n»
«EXTENSION xpt::providers::ValidationUtils»

«DEFINE className FOR gmfgen::GenDiagram»ValidateAction«ENDDEFINE»

«DEFINE qualifiedClassName FOR gmfgen::GenDiagram»«providersPackageName».«EXPAND className»«ENDDEFINE»

«DEFINE actionKey FOR gmfgen::GenDiagram»«EXPAND qualifiedClassName».«EXPAND keyConstant»«ENDDEFINE»

«DEFINE ValidateAction FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» «EXPAND supertypes» {
	«EXPAND KEY-»

	«EXPAND part-»

	«EXPAND ctor-»

	«EXPAND run-»

	«EXPAND runValidation-»

	«EXPAND EMFValidation-»

	«EXPAND validate-»

	«EXPAND updateEMFStatus-»

	«EXPAND updateConstraintStatus-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenDiagram»extends org.eclipse.jface.action.Action«ENDDEFINE»

«DEFINE KEY FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static final String «EXPAND keyConstant» = "validateAction"; «EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE keyConstant FOR gmfgen::GenDiagram»VALIDATE_ACTION_KEY«ENDDEFINE»

«DEFINE part FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.ui.IWorkbenchPart myWorkbenchPart;
«ENDDEFINE»

«DEFINE ctor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public ValidateAction(org.eclipse.ui.IWorkbenchPart part) {
	setId(«EXPAND keyConstant»);
	setText(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForValidateActionActionName()) FOR editorGen»);
	myWorkbenchPart = part;
	setEnabled(myWorkbenchPart instanceof «editorGen.editor.getQualifiedClassName()»);
}
«ENDDEFINE»

«DEFINE run FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public void run() {
	if (!isEnabled()) {
		return;
	}
	final «editorGen.editor.getQualifiedClassName()» part = («editorGen.editor.getQualifiedClassName()») myWorkbenchPart;
	try {
		new org.eclipse.jface.operation.IRunnableWithProgress() {
			public void run(org.eclipse.core.runtime.IProgressMonitor monitor) throws InterruptedException, java.lang.reflect.InvocationTargetException {
				org.eclipse.gef.GraphicalViewer viewer = (org.eclipse.gef.GraphicalViewer) part.getAdapter(org.eclipse.gef.GraphicalViewer.class);
				org.eclipse.gmf.runtime.notation.Diagram diagram = part.getDiagram();
				org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService;
				if (viewer == null) {
					viewService = new org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.NaiveViewService(diagram);
				} else {
					viewService = new org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.EditPartRegistryBasedViewService(viewer);
				}
				runValidation(diagram, viewService);
			}
		}
		.run(new org.eclipse.core.runtime.NullProgressMonitor());
	} catch (Exception e) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Validation action failed", e); «EXPAND xpt::Common::nonNLS»
	}
}
«ENDDEFINE»

«DEFINE runValidation FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static void runValidation(org.eclipse.gmf.runtime.notation.View view, org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService service) {
	final org.eclipse.gmf.runtime.notation.View target = view;
	final org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService = service;
	org.eclipse.emf.transaction.TransactionalEditingDomain txDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(target);
	«getValidationProviderQualifiedClassName()».runWithConstraints(txDomain, new Runnable() {
		public void run() {
			validate(target, viewService);
		}
	});
}
«ENDDEFINE»

«DEFINE EMFValidation FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static org.eclipse.emf.common.util.Diagnostic runEMFValidator(org.eclipse.gmf.runtime.notation.View target) {
	if(target.isSetElement() && target.getElement() != null) {
		return new org.eclipse.emf.ecore.util.Diagnostician().validate(target.getElement());
	}
	return org.eclipse.emf.common.util.Diagnostic.OK_INSTANCE;
}
«ENDDEFINE»

«DEFINE validate FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static void validate(org.eclipse.gmf.runtime.notation.View target, org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService) {
	org.eclipse.emf.common.util.URI diagramUri = (target.getDiagram() != null) ? org.eclipse.emf.ecore.util.EcoreUtil.getURI(target.getDiagram()) : null;
	if (diagramUri != null) {
		org.eclipse.gmf.runtime.lite.validation.ValidationState validationState = «editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getValidationStateManager().getValidationState(diagramUri);
		org.eclipse.gmf.runtime.lite.validation.IValidationStateUpdater updater = validationState.startUpdate();
		try {
			org.eclipse.emf.common.util.Diagnostic diagnostic = runEMFValidator(target);
			update(updater, diagnostic, viewService);
			org.eclipse.emf.validation.service.IBatchValidator validator = (org.eclipse.emf.validation.service.IBatchValidator)org.eclipse.emf.validation.service.ModelValidationService.getInstance().newValidator(org.eclipse.emf.validation.model.EvaluationMode.BATCH);
			validator.setIncludeLiveConstraints(true);
			if (target.isSetElement() && target.getElement() != null) {
				org.eclipse.core.runtime.IStatus status = validator.validate(target.getElement());
				update(updater, status, viewService);
			}

«IF shouldRunValidateOnDiagram(editorGen.audits)-»
«IF hasDiagramElementTargetRule(editorGen.audits)-»
			validator.setTraversalStrategy(«getValidationProviderQualifiedClassName()».getNotationTraversalStrategy(validator));
«ENDIF-»
			org.eclipse.core.runtime.IStatus status = validator.validate(target);
			update(updater, status, viewService);
«ENDIF-»
			updater.commitChanges();
		} catch (Exception e) {
			updater.discardChanges();
		}
	}
}
«ENDDEFINE»

«DEFINE updateEMFStatus FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static void update(org.eclipse.gmf.runtime.lite.validation.IValidationStateUpdater updater, org.eclipse.emf.common.util.Diagnostic emfValidationStatus, org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService) {
	if (emfValidationStatus.getSeverity() == org.eclipse.emf.common.util.Diagnostic.OK) {
		return;
	}
	final org.eclipse.emf.common.util.Diagnostic rootStatus = emfValidationStatus;
	java.util.List allDiagnostics = new java.util.ArrayList();
	collectTargetElements(rootStatus, new java.util.HashSet(), allDiagnostics);
	for (java.util.Iterator it = emfValidationStatus.getChildren().iterator(); it.hasNext();) {
		org.eclipse.emf.common.util.Diagnostic nextDiagnostic = (org.eclipse.emf.common.util.Diagnostic) it.next();
		java.util.List data = nextDiagnostic.getData();
		if (data != null && !data.isEmpty() && data.get(0) instanceof org.eclipse.emf.ecore.EObject) {
			org.eclipse.emf.ecore.EObject element = (org.eclipse.emf.ecore.EObject) data.get(0);
			org.eclipse.gmf.runtime.notation.View view = viewService.findView(element);
			if (view != null) {
				org.eclipse.gmf.runtime.lite.validation.ViolationDescriptor next = org.eclipse.gmf.runtime.lite.validation.ViolationDescriptor.create(view, nextDiagnostic);
				if (next != null) {
					updater.addViolation(next);
				}
			}
		}
	}
}

«EXPAND xpt::Common::generatedMemberComment»
private static java.util.Set collectTargetElements(org.eclipse.emf.common.util.Diagnostic diagnostic, java.util.Set targetElementCollector, java.util.List allDiagnostics) {
	java.util.List data = diagnostic.getData();
	org.eclipse.emf.ecore.EObject target = null;
	if (data != null && !data.isEmpty() && data.get(0) instanceof org.eclipse.emf.ecore.EObject) {
		target = (org.eclipse.emf.ecore.EObject) data.get(0);
		targetElementCollector.add(target);
		allDiagnostics.add(diagnostic);
	}
	if (diagnostic.getChildren() != null && !diagnostic.getChildren().isEmpty()) {
		for (java.util.Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {
			collectTargetElements((org.eclipse.emf.common.util.Diagnostic) it.next(), targetElementCollector, allDiagnostics);
		}
	}
	return targetElementCollector;
}
«ENDDEFINE»

«DEFINE updateConstraintStatus FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static void update(org.eclipse.gmf.runtime.lite.validation.IValidationStateUpdater updater, org.eclipse.core.runtime.IStatus validationStatus, org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService) {
	if (validationStatus.isOK()) {
		return;
	}
	final org.eclipse.core.runtime.IStatus rootStatus = validationStatus;
	java.util.List allStatuses = new java.util.ArrayList();
	collectTargetElements(rootStatus, new java.util.HashSet(), allStatuses);
	for (java.util.Iterator it = allStatuses.iterator(); it.hasNext();) {
		org.eclipse.emf.validation.model.IConstraintStatus nextStatus = (org.eclipse.emf.validation.model.IConstraintStatus) it.next();
		org.eclipse.gmf.runtime.notation.View view = viewService.findView(nextStatus.getTarget());
		if (view != null) {
			org.eclipse.gmf.runtime.lite.validation.ViolationDescriptor next = org.eclipse.gmf.runtime.lite.validation.ViolationDescriptor.create(view, nextStatus);
			if (next != null) {
				updater.addViolation(next);
			}
		}
	}
}

«EXPAND xpt::Common::generatedMemberComment»
private static java.util.Set collectTargetElements(org.eclipse.core.runtime.IStatus status, java.util.Set targetElementCollector, java.util.List allConstraintStatuses) {
	if (status instanceof org.eclipse.emf.validation.model.IConstraintStatus) {
		targetElementCollector.add(((org.eclipse.emf.validation.model.IConstraintStatus) status).getTarget());
		allConstraintStatuses.add(status);
	}
	if (status.isMultiStatus()) {
		org.eclipse.core.runtime.IStatus[] children = status.getChildren();
		for (int i = 0; i < children.length; i++) {
			collectTargetElements(children[i], targetElementCollector, allConstraintStatuses);
		}
	}
	return targetElementCollector;
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
«IF validationNeeded()-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForValidateActionActionName())-»
«ENDIF-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«IF validationNeeded()-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForValidateActionActionName(), "&Validate")-»
«ENDIF-»
«ENDDEFINE»
@


1.2
log
@[226149] Refactor Validation/Constraints: explicit context groupings instead of ID matching, unused IClientSelectors implementations are no longer generated, less custom code in the model, odd approach with map (semanticCtxIdMap) replaced with in-place VisualID check.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.1
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d146 2
a147 1
«IF hasNotationModelAudit()-»
d149 1
@


1.1.2.1
log
@file ValidateAction.xpt was added on branch R2_0_maintenance on 2007-09-17 16:02:13 +0000
@
text
@d1 251
@


1.1.2.2
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator)
@
text
@a0 251
/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::providers::i18n»
«EXTENSION xpt::providers::ValidationUtils»

«DEFINE className FOR gmfgen::GenDiagram»ValidateAction«ENDDEFINE»

«DEFINE qualifiedClassName FOR gmfgen::GenDiagram»«providersPackageName».«EXPAND className»«ENDDEFINE»

«DEFINE actionKey FOR gmfgen::GenDiagram»«EXPAND qualifiedClassName».«EXPAND keyConstant»«ENDDEFINE»

«DEFINE ValidateAction FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» «EXPAND supertypes» {
	«EXPAND KEY-»

	«EXPAND part-»

	«EXPAND ctor-»

	«EXPAND run-»

	«EXPAND runValidation-»

	«EXPAND EMFValidation-»

	«EXPAND validate-»

	«EXPAND updateEMFStatus-»

	«EXPAND updateConstraintStatus-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenDiagram»extends org.eclipse.jface.action.Action«ENDDEFINE»

«DEFINE KEY FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static final String «EXPAND keyConstant» = "validateAction"; «EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE keyConstant FOR gmfgen::GenDiagram»VALIDATE_ACTION_KEY«ENDDEFINE»

«DEFINE part FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.ui.IWorkbenchPart myWorkbenchPart;
«ENDDEFINE»

«DEFINE ctor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public ValidateAction(org.eclipse.ui.IWorkbenchPart part) {
	setId(«EXPAND keyConstant»);
	setText(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForValidateActionActionName()) FOR editorGen»);
	myWorkbenchPart = part;
	setEnabled(myWorkbenchPart instanceof «editorGen.editor.getQualifiedClassName()»);
}
«ENDDEFINE»

«DEFINE run FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public void run() {
	if (!isEnabled()) {
		return;
	}
	final «editorGen.editor.getQualifiedClassName()» part = («editorGen.editor.getQualifiedClassName()») myWorkbenchPart;
	try {
		new org.eclipse.jface.operation.IRunnableWithProgress() {
			public void run(org.eclipse.core.runtime.IProgressMonitor monitor) throws InterruptedException, java.lang.reflect.InvocationTargetException {
				org.eclipse.gef.GraphicalViewer viewer = (org.eclipse.gef.GraphicalViewer) part.getAdapter(org.eclipse.gef.GraphicalViewer.class);
				org.eclipse.gmf.runtime.notation.Diagram diagram = part.getDiagram();
				org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService;
				if (viewer == null) {
					viewService = new org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.NaiveViewService(diagram);
				} else {
					viewService = new org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.EditPartRegistryBasedViewService(viewer);
				}
				runValidation(diagram, viewService);
			}
		}
		.run(new org.eclipse.core.runtime.NullProgressMonitor());
	} catch (Exception e) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Validation action failed", e); «EXPAND xpt::Common::nonNLS»
	}
}
«ENDDEFINE»

«DEFINE runValidation FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static void runValidation(org.eclipse.gmf.runtime.notation.View view, org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService service) {
	final org.eclipse.gmf.runtime.notation.View target = view;
	final org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService = service;
	org.eclipse.emf.transaction.TransactionalEditingDomain txDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(target);
	«getValidationProviderQualifiedClassName()».runWithConstraints(txDomain, new Runnable() {
		public void run() {
			validate(target, viewService);
		}
	});
}
«ENDDEFINE»

«DEFINE EMFValidation FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static org.eclipse.emf.common.util.Diagnostic runEMFValidator(org.eclipse.gmf.runtime.notation.View target) {
	if(target.isSetElement() && target.getElement() != null) {
		return new org.eclipse.emf.ecore.util.Diagnostician().validate(target.getElement());
	}
	return org.eclipse.emf.common.util.Diagnostic.OK_INSTANCE;
}
«ENDDEFINE»

«DEFINE validate FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static void validate(org.eclipse.gmf.runtime.notation.View target, org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService) {
	org.eclipse.emf.common.util.URI diagramUri = (target.getDiagram() != null) ? org.eclipse.emf.ecore.util.EcoreUtil.getURI(target.getDiagram()) : null;
	if (diagramUri != null) {
		org.eclipse.gmf.runtime.lite.validation.ValidationState validationState = «editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getValidationStateManager().getValidationState(diagramUri);
		org.eclipse.gmf.runtime.lite.validation.IValidationStateUpdater updater = validationState.startUpdate();
		try {
			org.eclipse.emf.common.util.Diagnostic diagnostic = runEMFValidator(target);
			update(updater, diagnostic, viewService);
			org.eclipse.emf.validation.service.IBatchValidator validator = (org.eclipse.emf.validation.service.IBatchValidator)org.eclipse.emf.validation.service.ModelValidationService.getInstance().newValidator(org.eclipse.emf.validation.model.EvaluationMode.BATCH);
			validator.setIncludeLiveConstraints(true);
			if (target.isSetElement() && target.getElement() != null) {
				org.eclipse.core.runtime.IStatus status = validator.validate(target.getElement());
				update(updater, status, viewService);
			}

«IF hasNotationModelAudit()-»
			validator.setTraversalStrategy(«getValidationProviderQualifiedClassName()».getNotationTraversalStrategy(validator));
			org.eclipse.core.runtime.IStatus status = validator.validate(target);
			update(updater, status, viewService);
«ENDIF-»
			updater.commitChanges();
		} catch (Exception e) {
			updater.discardChanges();
		}
	}
}
«ENDDEFINE»

«DEFINE updateEMFStatus FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static void update(org.eclipse.gmf.runtime.lite.validation.IValidationStateUpdater updater, org.eclipse.emf.common.util.Diagnostic emfValidationStatus, org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService) {
	if (emfValidationStatus.getSeverity() == org.eclipse.emf.common.util.Diagnostic.OK) {
		return;
	}
	final org.eclipse.emf.common.util.Diagnostic rootStatus = emfValidationStatus;
	java.util.List allDiagnostics = new java.util.ArrayList();
	collectTargetElements(rootStatus, new java.util.HashSet(), allDiagnostics);
	for (java.util.Iterator it = emfValidationStatus.getChildren().iterator(); it.hasNext();) {
		org.eclipse.emf.common.util.Diagnostic nextDiagnostic = (org.eclipse.emf.common.util.Diagnostic) it.next();
		java.util.List data = nextDiagnostic.getData();
		if (data != null && !data.isEmpty() && data.get(0) instanceof org.eclipse.emf.ecore.EObject) {
			org.eclipse.emf.ecore.EObject element = (org.eclipse.emf.ecore.EObject) data.get(0);
			org.eclipse.gmf.runtime.notation.View view = viewService.findView(element);
			if (view != null) {
				org.eclipse.gmf.runtime.lite.validation.ViolationDescriptor next = org.eclipse.gmf.runtime.lite.validation.ViolationDescriptor.create(view, nextDiagnostic);
				if (next != null) {
					updater.addViolation(next);
				}
			}
		}
	}
}

«EXPAND xpt::Common::generatedMemberComment»
private static java.util.Set collectTargetElements(org.eclipse.emf.common.util.Diagnostic diagnostic, java.util.Set targetElementCollector, java.util.List allDiagnostics) {
	java.util.List data = diagnostic.getData();
	org.eclipse.emf.ecore.EObject target = null;
	if (data != null && !data.isEmpty() && data.get(0) instanceof org.eclipse.emf.ecore.EObject) {
		target = (org.eclipse.emf.ecore.EObject) data.get(0);
		targetElementCollector.add(target);
		allDiagnostics.add(diagnostic);
	}
	if (diagnostic.getChildren() != null && !diagnostic.getChildren().isEmpty()) {
		for (java.util.Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {
			collectTargetElements((org.eclipse.emf.common.util.Diagnostic) it.next(), targetElementCollector, allDiagnostics);
		}
	}
	return targetElementCollector;
}
«ENDDEFINE»

«DEFINE updateConstraintStatus FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static void update(org.eclipse.gmf.runtime.lite.validation.IValidationStateUpdater updater, org.eclipse.core.runtime.IStatus validationStatus, org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService) {
	if (validationStatus.isOK()) {
		return;
	}
	final org.eclipse.core.runtime.IStatus rootStatus = validationStatus;
	java.util.List allStatuses = new java.util.ArrayList();
	collectTargetElements(rootStatus, new java.util.HashSet(), allStatuses);
	for (java.util.Iterator it = allStatuses.iterator(); it.hasNext();) {
		org.eclipse.emf.validation.model.IConstraintStatus nextStatus = (org.eclipse.emf.validation.model.IConstraintStatus) it.next();
		org.eclipse.gmf.runtime.notation.View view = viewService.findView(nextStatus.getTarget());
		if (view != null) {
			org.eclipse.gmf.runtime.lite.validation.ViolationDescriptor next = org.eclipse.gmf.runtime.lite.validation.ViolationDescriptor.create(view, nextStatus);
			if (next != null) {
				updater.addViolation(next);
			}
		}
	}
}

«EXPAND xpt::Common::generatedMemberComment»
private static java.util.Set collectTargetElements(org.eclipse.core.runtime.IStatus status, java.util.Set targetElementCollector, java.util.List allConstraintStatuses) {
	if (status instanceof org.eclipse.emf.validation.model.IConstraintStatus) {
		targetElementCollector.add(((org.eclipse.emf.validation.model.IConstraintStatus) status).getTarget());
		allConstraintStatuses.add(status);
	}
	if (status.isMultiStatus()) {
		org.eclipse.core.runtime.IStatus[] children = status.getChildren();
		for (int i = 0; i < children.length; i++) {
			collectTargetElements(children[i], targetElementCollector, allConstraintStatuses);
		}
	}
	return targetElementCollector;
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
«IF validationNeeded()-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForValidateActionActionName())-»
«ENDIF-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«IF validationNeeded()-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForValidateActionActionName(), "&Validate")-»
«ENDIF-»
«ENDDEFINE»
@


