head	1.6;
access;
symbols
	v20080910-1520:1.6
	v20080722-1827:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.2
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080507-1326:1.6
	v20080501-1739:1.4
	v20080425-1959:1.3
	v20080322-0000:1.3
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1.2.2
	R2_0_maintenance:1.1.0.2
	v20070903-0000:1.1;
locks; strict;
comment	@# @;


1.6
date	2008.05.07.13.55.39;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	388c4821b4d44567;

1.5
date	2008.05.05.15.38.49;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	2fc2481f2a084567;

1.4
date	2008.04.30.21.03.35;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	8c64818dea74567;

1.3
date	2008.02.29.21.19.54;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	45c147c876f94567;

1.2
date	2008.02.26.22.50.33;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	405e47c497b74567;

1.1
date	2007.07.04.13.22.26;	author bblajer;	state Exp;
branches
	1.1.2.1;
next	;
commitid	405d468b9f0f4567;

1.1.2.1
date	2007.07.04.13.22.26;	author bblajer;	state dead;
branches;
next	1.1.2.2;
commitid	7b9846eea5004567;

1.1.2.2
date	2007.09.17.16.02.13;	author bblajer;	state Exp;
branches;
next	;
commitid	7b9846eea5004567;


desc
@@


1.6
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 *    Artem Tikhomirov (Borland) - refactoring (https://bugs.eclipse.org/230014)
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::providers::ValidationUtils»
«EXTENSION xpt::providers::Metrics»
«EXTENSION xpt::providers::i18n»

«DEFINE MetricProvider FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «metricProviderClassName» {

«EXPAND calculateMetricsMethods-»

«EXPAND formatNotationElementNameMethod-»
«EXPAND formatSemanticElementNameMethod-»

«EXPAND metricsClasses»

«EXPAND keysAndToolTipsMethods FOR editorGen.metrics»

«EXPAND metricCalcField FOREACH editorGen.metrics.metrics.select(m | m.rule != null && m.target != null && m.target.getContext() != null)»
«EXPAND metricCalcMethod FOREACH editorGen.metrics.metrics.select(m | m.rule != null && m.target != null && m.target.getContext() != null)»

«EXPAND xpt::providers::MetricsResultView::Class»

«EXPAND additions-»
}
«ENDDEFINE»

// @@Override
«DEFINE getImageAccessor(String imageClassVar) FOR gmfgen::GenDiagram»«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemImage(«imageClassVar»)«ENDDEFINE»

// @@Override
«DEFINE formatSemanticElementNameMethod FOR GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static String formatElementName(org.eclipse.emf.ecore.EObject object) {
	if (object == null) {
		return String.valueOf((Object)null);
	}
	org.eclipse.emf.common.notify.AdapterFactory adapterFactory = «editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemProvidersAdapterFactory();
	org.eclipse.emf.edit.provider.IItemLabelProvider labelProvider = (org.eclipse.emf.edit.provider.IItemLabelProvider) adapterFactory.adapt(object, org.eclipse.emf.edit.provider.IItemLabelProvider.class);
	if (labelProvider != null) {
		return object.eClass().getName() + " " + labelProvider.getText(object);«EXPAND xpt::Common::nonNLS»
	}
	return object.toString();
}
«ENDDEFINE»


// @@Override
«DEFINE calculateMetricsMethods FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
static java.util.List calculateMetrics(«editorGen.editor.getQualifiedClassName()» diagramPart) {
	org.eclipse.gef.GraphicalViewer viewer = (org.eclipse.gef.GraphicalViewer) diagramPart.getAdapter(org.eclipse.gef.GraphicalViewer.class);
	final org.eclipse.gmf.runtime.notation.Diagram diagram = diagramPart.getDiagram();
	if (viewer == null || diagram == null) {
		return java.util.Collections.EMPTY_LIST;
	}
	final org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService = new org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.EditPartRegistryBasedViewService(viewer);
	try {
		return (java.util.List)diagramPart.getEditingDomain().runExclusive(
			new org.eclipse.emf.transaction.RunnableWithResult.Impl() {
				public void run() {
					java.util.ArrayList/*<ElementMetrics>*/ metrics = new java.util.ArrayList/*<ElementMetrics>*/(50);
«IF !getNotationMetrics(editorGen.metrics).isEmpty()-»
					calculateNotationElementMetrics(diagram, metrics);
«ENDIF-»
«IF !getDiagramMetrics(editorGen.metrics).isEmpty()-»
					calculateDiagramElementMetrics(diagram, metrics);
«ENDIF-»
«IF !getDomainMetrics(editorGen.metrics).isEmpty()-»
					calculateSemanticElementMetrics(viewService, diagram, metrics);
«ENDIF-»
					setResult(metrics);
				}
			});
	} catch(InterruptedException e) {
		return java.util.Collections.EMPTY_LIST;
	}
}

«IF !getNotationMetrics(editorGen.metrics).isEmpty()»«EXPAND calcNotationMetricsMethod FOR editorGen»«ENDIF»
«IF !getDiagramMetrics(editorGen.metrics).isEmpty()»«EXPAND calcDiagramMetricsMethod FOR editorGen»«ENDIF»
«IF !getDomainMetrics(editorGen.metrics).isEmpty()»«EXPAND calcDomainMetricsMethod FOR editorGen»«ENDIF»
«ENDDEFINE»

// @@Override
«DEFINE calcDomainMetricsMethod FOR GenEditorGenerator»
	«EXPAND xpt::Common::generatedMemberComment»
	static void calculateSemanticElementMetrics(org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService, org.eclipse.gmf.runtime.notation.Diagram diagram, java.util.List/*<ElementMetrics>*/ metricsList) {
		org.eclipse.emf.ecore.EObject next = diagram.getElement();
		java.util.Iterator/*<EObject>*/ it = next != null ? next.eAllContents() : java.util.Collections.EMPTY_LIST.iterator();
		java.util.HashMap/*<EObject, ElementMetrics>*/ target2row = new java.util.HashMap/*<EObject, ElementMetrics>*/();
		while (next != null) {
			java.util.ArrayList/*<Metric>*/ res = new java.util.ArrayList/*<Metric>*/(5);
«FOREACH metrics.metrics.target.typeSelect(GenDomainElementTarget).element.purgeDups().typeSelect(GenClass) AS e-»
			if («EXPAND MetaModel::MetaClass FOR e».isInstance(next)) {
«FOREACH metrics.metrics.select(m | m.target.getContext() == e) AS m-»
				res.add(«EXPAND metricResult("next", true) FOR m»);
«ENDFOREACH-»
			}
«ENDFOREACH-»
			if (!res.isEmpty()) {
				ElementMetrics row = new ElementMetrics(next, formatElementName(next), (Metric[]) res.toArray(new Metric[res.size()]));
				metricsList.add(row);
				target2row.put(next, row);
			}
			next = it.hasNext() ? (org.eclipse.emf.ecore.EObject) it.next() : null;
		}
		if (!target2row.isEmpty()) { // list was modified, need to process only semantic metrics
			// bind semantic elements to notation
			for (java.util.Iterator it2 = target2row.entrySet().iterator(); it2.hasNext();) {
				java.util.Map.Entry entry = (java.util.Map.Entry) it2.next();
				org.eclipse.emf.ecore.EObject semanticElement = (org.eclipse.emf.ecore.EObject) entry.getKey();
				org.eclipse.gmf.runtime.notation.View targetView = viewService.findView(semanticElement);
				if (targetView != null) {
					ElementMetrics elementMetrics = (ElementMetrics) entry.getValue();
					elementMetrics.diagramElementID = targetView.eResource().getURIFragment(targetView);
				}
			}
		}
	}
«ENDDEFINE»

/*
					F I X M E ! ! !
			move i18n accessors into base template
					F I X M E ! ! !
 */
«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
«IF editorGen.metrics != null-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForMetricProviderResultViewElementColumnName())-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForMetricProviderResultViewElementColumnTooltip())-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForMetricProviderMetricDefToolTipLow())-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForMetricProviderMetricDefToolTipHigh())-»
«EXPAND nameAccessorField FOREACH getMetricRules().select(e| e.name != null)-»
«EXPAND descriptionAccessorField FOREACH getMetricRules().select(e| e.description != null)-»
«ENDIF-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«IF editorGen.metrics != null-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForMetricProviderResultViewElementColumnName(), "Element")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForMetricProviderResultViewElementColumnTooltip(), "Measurement element")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForMetricProviderMetricDefToolTipLow(), " Low: ")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForMetricProviderMetricDefToolTipHigh(), " High: ")-»
«EXPAND nameAccessorValue FOREACH getMetricRules().select(e| e.name != null)-»
«EXPAND descriptionAccessorValue FOREACH getMetricRules().select(e| e.description != null)-»
«ENDIF-»
«ENDDEFINE»

«DEFINE nameAccessorField FOR gmfgen::GenMetricRule-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForMetric().nameKey())-»
«ENDDEFINE»

«DEFINE descriptionAccessorField FOR gmfgen::GenMetricRule-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForMetric().descriptionKey())-»
«ENDDEFINE»

«DEFINE nameAccessorValue FOR gmfgen::GenMetricRule-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForMetric().nameKey(), name)-»
«ENDDEFINE»

«DEFINE descriptionAccessorValue FOR gmfgen::GenMetricRule-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForMetric().descriptionKey(), description)-»
«ENDDEFINE»

@


1.5
log
@[230014] refactor MetricProvider.xpt
@
text
@d11 1
d14 1
a14 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.4
log
@[228913] item #5: clean getExpression, refactor its use
@
text
@d18 1
a20 4
«DEFINE resultViewQualifiedClassName FOR gmfgen::GenDiagram»«providersPackageName».«metricProviderClassName».«EXPAND resultViewClassName»«ENDDEFINE» 

«DEFINE resultViewID FOR gmfgen::GenDiagram»«EXPAND resultViewQualifiedClassName».«EXPAND viewIDConstant»«ENDDEFINE» 

a26 272
	«EXPAND attrs-»

	«EXPAND calculateForDiagram-»

	«EXPAND calculateForEObject-»
	
	«EXPAND ResultView-»

	«EXPAND ElementMetrics-»

	«EXPAND MetricClass-»

	«EXPAND MetricDef-»

	«EXPAND getMetricsForTarget-»

	«EXPAND getMetrics-»

	«EXPAND calculateMetrics-»

	«EXPAND initRegistry-»

	«EXPAND register-»

	«EXPAND javaRules-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE ResultView FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
public static class «EXPAND resultViewClassName» «EXPAND ResultView_supertypes» {
	«EXPAND ResultView_ID_attr-»

	«EXPAND ResultView_viewer-»

	«EXPAND ResultView_input-»

	«EXPAND ResultView_setInput-»

	«EXPAND ResultView_adjustLayout-»

	«EXPAND ResultView_createPartControl-»

	«EXPAND ResultView_handleOpen-»

	«EXPAND ResultView_calcMetricMaxValueStrLenMap-»

	«EXPAND ResultView_setFocus-»

	«EXPAND ResultView_LabelProvider-»

	«EXPAND ResultView_additions-»
}
«ENDDEFINE»

«DEFINE resultViewClassName FOR gmfgen::GenDiagram»ResultView«ENDDEFINE»

«DEFINE viewIDConstant FOR gmfgen::GenDiagram»VIEW_ID«ENDDEFINE»

«DEFINE ResultView_supertypes FOR gmfgen::GenDiagram»extends org.eclipse.ui.part.ViewPart«ENDDEFINE»

«DEFINE ResultView_additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE ResultView_ID_attr FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static final String «EXPAND viewIDConstant» = "«getMetricViewID()»"; «EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE ResultView_viewer FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.jface.viewers.TableViewer viewer;
«ENDDEFINE»

«DEFINE ResultView_input FOR gmfgen::GenDiagram-»
«IF editorGen.editor.eclipseEditor-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.ui.IEditorInput editorInput;
«ELSE-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.common.util.URI diagramURI;
«ENDIF-»
«ENDDEFINE»

«DEFINE ResultView_setInput FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
void setInput(«editorGen.editor.getQualifiedClassName()» diagramPart) {
	org.eclipse.emf.ecore.resource.Resource resource = diagramPart.getDiagram().eResource();
«IF editorGen.editor.eclipseEditor-»
	this.editorInput = diagramPart.getEditorInput();
«ELSE-»
	this.diagramURI = resource.getURI();
«ENDIF-»
	setTitleToolTip(resource.getURI().path());

	java.util.List metrics = calculateMetrics(diagramPart);
   	adjustLayout(metrics);
   	viewer.setInput(metrics);
}
«ENDDEFINE»

«DEFINE ResultView_adjustLayout FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private void adjustLayout(java.util.List metricResultList) {
	java.util.Map maxValStrMap = calcMetricMaxValueStrLenMap(metricResultList);
	org.eclipse.swt.widgets.Table table = viewer.getTable();
	org.eclipse.jface.viewers.TableLayout layout = new org.eclipse.jface.viewers.TableLayout();

	org.eclipse.swt.graphics.GC gc = new org.eclipse.swt.graphics.GC(table);
	gc.setFont(org.eclipse.jface.resource.JFaceResources.getDialogFont());
	int padding = gc.stringExtent("X").x * 2; «EXPAND xpt::Common::nonNLS»
	for (int i = 0; i < getMetrics().size(); i++) {
		MetricDef nextMetric = (MetricDef)getMetrics().get(i);
		String valueStr = (String)maxValStrMap.get(nextMetric.key);
		int minWidth = valueStr != null ? gc.stringExtent(valueStr).x + padding : 20;
		layout.addColumnData(new org.eclipse.jface.viewers.ColumnPixelData(minWidth, true));
	}
	gc.dispose();

	layout.addColumnData(new org.eclipse.jface.viewers.ColumnWeightData(1, 50, true));
	viewer.getTable().setLayout(layout);
	viewer.getTable().layout(true, true);
}
«ENDDEFINE»

«DEFINE ResultView_createPartControl FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public void createPartControl(org.eclipse.swt.widgets.Composite parent) {
	this.viewer = new org.eclipse.jface.viewers.TableViewer(parent, org.eclipse.swt.SWT.FULL_SELECTION);
	final org.eclipse.swt.widgets.Table table = viewer.getTable();
	table.setHeaderVisible(true);
	table.setLinesVisible(true);

	for (int i = 0; i < getMetrics().size(); i++) {
		MetricDef nextMetric = ((MetricDef)getMetrics().get(i));
		org.eclipse.swt.widgets.TableColumn column = new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE);
		column.setAlignment(org.eclipse.swt.SWT.RIGHT);
		column.setMoveable(true);
		column.setText(nextMetric.key);
		column.setToolTipText(nextMetric.getToolTipText());
	}

	org.eclipse.swt.widgets.TableColumn objectColumn = new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE);
	objectColumn.setText(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForMetricProviderResultViewElementColumnName()) FOR editorGen»);
	objectColumn.setToolTipText(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForMetricProviderResultViewElementColumnTooltip()) FOR editorGen»);

	viewer.setLabelProvider(new Labels());
	viewer.setContentProvider(new org.eclipse.jface.viewers.ArrayContentProvider());
	viewer.addOpenListener(new org.eclipse.jface.viewers.IOpenListener() {
		public void open(org.eclipse.jface.viewers.OpenEvent event) {
			handleOpen(event);
		}
	});

	org.eclipse.swt.events.SelectionListener headerSelListener = new org.eclipse.swt.events.SelectionListener() {
		public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {
			table.setSortColumn((org.eclipse.swt.widgets.TableColumn)e.getSource());
			table.setSortDirection((table.getSortDirection() != org.eclipse.swt.SWT.DOWN) ? org.eclipse.swt.SWT.DOWN : org.eclipse.swt.SWT.UP);
			viewer.refresh();
		}
		public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) {
		}
	};
	org.eclipse.swt.widgets.TableColumn[] columns = viewer.getTable().getColumns();
	for (int i = 0; i < columns.length; i++) {
		columns[i].addSelectionListener(headerSelListener);
	}

	viewer.setSorter(
		new org.eclipse.jface.viewers.ViewerSorter() {
			public int compare(org.eclipse.jface.viewers.Viewer viewer, Object e1, Object e2) {
				org.eclipse.swt.widgets.TableColumn c = table.getSortColumn();
				int result = 0;
				if(c != null) {
					Metric mc1 = ((ElementMetrics)e1).getMetricByKey(c.getText());
					Metric mc2 = ((ElementMetrics)e2).getMetricByKey(c.getText());
					result = (mc1 != null && mc2 != null) ?
						mc1.compareTo(mc2) : (mc1 == null ? -1 : 1);
				} else {
					result = ((ElementMetrics)e1).targetElementQName.compareTo(((ElementMetrics)e2).targetElementQName);
				}
				return table.getSortDirection() == org.eclipse.swt.SWT.DOWN ? result : -result;
			}
		}
	);
«IF editorGen.editor.eclipseEditor-»
    org.eclipse.ui.IEditorPart editor = getSite().getPage().getActiveEditor();
    if(editor instanceof «editorGen.editor.getQualifiedClassName()») {
		setInput((«editorGen.editor.getQualifiedClassName()») editor);
    }
«ENDIF-»
}
«ENDDEFINE»

«DEFINE ResultView_handleOpen FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private void handleOpen(org.eclipse.jface.viewers.OpenEvent event) {
«IF editorGen.editor.eclipseEditor-»
	«editorGen.editor.getQualifiedClassName()» diagramPart;
	try {
		if (editorInput == null) {
			return;
		}
		org.eclipse.ui.IEditorPart editorPart = getSite().getPage().openEditor(editorInput, «editorGen.editor.getQualifiedClassName()».ID);
		if(false == editorPart instanceof «editorGen.editor.getQualifiedClassName()») {
			return;
		}
		diagramPart = («editorGen.editor.getQualifiedClassName()») editorPart;
	} catch (org.eclipse.ui.PartInitException e) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Can't open diagram editor", e); «EXPAND xpt::Common::nonNLS»
		return;
	}
«ELSE-»
	if (diagramURI == null) {
		return;
	}
	org.eclipse.ui.IViewPart viewPart = «getDiagramEditorUtilQualifiedClassName()».showView(diagramURI);
	if(false == viewPart instanceof «editorGen.editor.getQualifiedClassName()») {
		return;
	}
	«editorGen.editor.getQualifiedClassName()» diagramPart = («editorGen.editor.getQualifiedClassName()») viewPart;
«ENDIF-»
	org.eclipse.gef.GraphicalViewer graphicalViewer = (org.eclipse.gef.GraphicalViewer) diagramPart.getAdapter(org.eclipse.gef.GraphicalViewer.class);
	ElementMetrics selection = (ElementMetrics)((org.eclipse.jface.viewers.IStructuredSelection)event.getSelection()).getFirstElement();
	String viewID = selection.diagramElementID;
	if(viewID != null) {
		org.eclipse.gmf.runtime.notation.View targetView = (org.eclipse.gmf.runtime.notation.View)diagramPart.getDiagram().eResource().getEObject(viewID);
		if(targetView != null) {
			org.eclipse.gef.EditPart targetEditPart = (org.eclipse.gef.EditPart)graphicalViewer.getEditPartRegistry().get(targetView);
			if(targetEditPart != null) {
				graphicalViewer.setSelection(new org.eclipse.jface.viewers.StructuredSelection(targetEditPart));
			}
		}
	}
}
«ENDDEFINE»

«DEFINE ResultView_calcMetricMaxValueStrLenMap FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static java.util.Map calcMetricMaxValueStrLenMap(java.util.List allMetrics) {
	java.util.Map metric2MaxStrLen = new java.util.HashMap();
	for (int i = 0; i < getMetrics().size(); i++) {
		String nextKey = ((MetricDef)getMetrics().get(i)).key;
		int trimPos = Math.min(nextKey.length(), MAX_VISIBLE_KEY_CHAR_COUNT);
		metric2MaxStrLen.put(nextKey, nextKey.substring(0, trimPos));
	}

	for (java.util.Iterator it = allMetrics.iterator(); it.hasNext();) {
		ElementMetrics elementMetrics = (ElementMetrics) it.next();
		for (int i = 0; i < elementMetrics.metrics.length; i++) {
			Metric metric = elementMetrics.metrics[i];
			String valueStr = (String)metric2MaxStrLen.get(metric.def.key);
			if(valueStr == null || metric.displayValue.length() > valueStr.length()) {
				metric2MaxStrLen.put(metric.def.key, metric.displayValue);
			}
		}
	}
	return metric2MaxStrLen;
}
«ENDDEFINE»

«DEFINE ResultView_setFocus FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public void setFocus() {
}		
«ENDDEFINE»

«DEFINE ResultView_LabelProvider FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private class Labels «EXPAND ResultView_LabelProvider_supertypes» {
	«EXPAND ResultView_LabelProvider_isElementColumn-»
d28 1
a28 1
	«EXPAND ResultView_LabelProvider_getColumnImage-»
d30 2
a31 1
	«EXPAND ResultView_LabelProvider_getColumnText-»
d33 1
a33 1
	«EXPAND ResultView_LabelProvider_getBackgroundColor-»
d35 1
a35 3
	«EXPAND ResultView_LabelProvider_getForegroundColor-»
}
«ENDDEFINE»
d37 2
a38 1
«DEFINE ResultView_LabelProvider_supertypes FOR gmfgen::GenDiagram»extends org.eclipse.jface.viewers.LabelProvider implements org.eclipse.jface.viewers.ITableLabelProvider, org.eclipse.jface.viewers.ITableColorProvider«ENDDEFINE»
d40 1
d42 1
a42 4
«DEFINE ResultView_LabelProvider_isElementColumn FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private boolean isElementColumn(int columnIndex) {
	return columnIndex >= getMetrics().size();
d46 2
a47 6
«DEFINE ResultView_LabelProvider_getColumnImage FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.swt.graphics.Image getColumnImage(Object element, int columnIndex) {
	return isElementColumn(columnIndex) ? ((ElementMetrics)element).elementImage : null;
}
«ENDDEFINE»
d49 2
a50 1
«DEFINE ResultView_LabelProvider_getColumnText FOR gmfgen::GenDiagram-»
d52 1
a52 190
public String getColumnText(Object element, int columnIndex) {
	ElementMetrics elementMetrics = (ElementMetrics)element;

	if(columnIndex == getMetrics().size()) {
		return elementMetrics.targetElementQName;
	}

	String key = ((MetricDef)getMetrics().get(columnIndex)).key;
	Metric metric = elementMetrics.getMetricByKey(key);
	return (metric != null) ? metric.displayValue : "-"; «EXPAND xpt::Common::nonNLS»
}
«ENDDEFINE»

«DEFINE ResultView_LabelProvider_getBackgroundColor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.swt.graphics.Color getBackground(Object element, int columnIndex) {
	return null;
}
«ENDDEFINE»

«DEFINE ResultView_LabelProvider_getForegroundColor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.swt.graphics.Color getForeground(Object element, int columnIndex) {
	if(isElementColumn(columnIndex)) return null;
	ElementMetrics columnElement = (ElementMetrics)element;
	String key = ((MetricDef)getMetrics().get(columnIndex)).key;
	Metric metric = columnElement.getMetricByKey(key);
	if(metric != null && metric.value != null) {
		if (metric.def.highLimit != null && metric.def.highLimit.longValue() < metric.value.longValue()) {
			return «EXPAND ResultView_LabelProvider_colorMore»;
		} else if (metric.def.lowLimit != null && metric.def.lowLimit.longValue() > metric.value.longValue()) {
			return «EXPAND ResultView_LabelProvider_colorLess»;
		}
	}
	return null;
}
«ENDDEFINE»

«DEFINE ResultView_LabelProvider_colorMore FOR gmfgen::GenDiagram»org.eclipse.draw2d.ColorConstants.red«ENDDEFINE»

«DEFINE ResultView_LabelProvider_colorLess FOR gmfgen::GenDiagram»org.eclipse.draw2d.ColorConstants.blue«ENDDEFINE»

«DEFINE MetricDef FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private static class MetricDef {
	«EXPAND MetricDef_attrs-»
	«EXPAND MetricDef_ctor-»
	«EXPAND MetricDef_calculate-»
	«EXPAND MetricDef_appliesTo-»
	«EXPAND MetricDef_getToolTip-»
	«EXPAND MetricDef_additions-»
}
«ENDDEFINE»

«DEFINE MetricDef_attrs FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
final Double lowLimit;
«EXPAND xpt::Common::generatedMemberComment»
final Double highLimit;
«EXPAND xpt::Common::generatedMemberComment»
final String key;
«EXPAND xpt::Common::generatedMemberComment»
final «editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()» expression;
«EXPAND xpt::Common::generatedMemberComment»
final int[] semanticIDs;
«EXPAND xpt::Common::generatedMemberComment»
final String name;
«EXPAND xpt::Common::generatedMemberComment»
final String description;
«ENDDEFINE»

«DEFINE MetricDef_ctor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
MetricDef(String key, «editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()» expression, int[] semanticIDs, Double low, Double high, String name, String description) {
	this.key = key;
	this.expression = expression;
	this.semanticIDs = semanticIDs;
	this.lowLimit = low;
	this.highLimit = high;
	this.name = name;
	this.description = description;
}
«ENDDEFINE»

«DEFINE MetricDef_calculate FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
Number calcMetric(Object contextInstance) {
	Object val = expression.evaluate(contextInstance);
	return (val instanceof Number) ? (Number)val : null;
}
«ENDDEFINE»

«DEFINE MetricDef_appliesTo FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
boolean appliesTo(org.eclipse.emf.ecore.EObject eObject) {
	if(eObject instanceof org.eclipse.gmf.runtime.notation.View && semanticIDs != null) {
		int eObjectID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»((org.eclipse.gmf.runtime.notation.View)eObject);
		for(int i = 0; i < semanticIDs.length; i++) {
			if(semanticIDs[i] == eObjectID) {
				return true;
			}
		}
		return false;
	}
	return eObject != null && (expression.context() instanceof org.eclipse.emf.ecore.EClass) && 
		((org.eclipse.emf.ecore.EClass)expression.context()).isSuperTypeOf(eObject.eClass());
}
«ENDDEFINE»

«DEFINE MetricDef_getToolTip FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
String getToolTipText() {
	StringBuffer buf = new StringBuffer();
	if(name != null) buf.append(name);
	if(description != null) buf.append('\n').append(description).append('\n');
	if(lowLimit != null) buf.append(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForMetricProviderMetricDefToolTipLow()) FOR editorGen»).append(lowLimit);
	if(highLimit != null) buf.append(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForMetricProviderMetricDefToolTipHigh()) FOR editorGen»).append(highLimit);
	return buf.toString();
}
«ENDDEFINE»

«DEFINE MetricDef_additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE ElementMetrics FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private static class ElementMetrics {
	«EXPAND ElementMetrics_attrs-»
	«EXPAND ElementMetrics_ctor-»

	«EXPAND ElementMetrics_formatView-»

	«EXPAND ElementMetrics_formatElement-»

	«EXPAND ElementMetrics_getMetricByKey-»

	«EXPAND ElementMetrics_additions-»
}
«ENDDEFINE»

«DEFINE ElementMetrics_attrs FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
final Metric[] metrics;
«EXPAND xpt::Common::generatedMemberComment»
final String targetElementQName;
«EXPAND xpt::Common::generatedMemberComment»
final org.eclipse.swt.graphics.Image elementImage;
«EXPAND xpt::Common::generatedMemberComment»
String diagramElementID;
«EXPAND xpt::Common::generatedMemberComment»
org.eclipse.emf.ecore.EObject target;
«ENDDEFINE»

«DEFINE ElementMetrics_ctor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
ElementMetrics(org.eclipse.emf.ecore.EObject target, Metric[] metrics) {
	this.metrics = metrics;
	assert metrics.length > 0;
	this.target = target;

	org.eclipse.emf.ecore.EClass imageTarget = target.eClass();
	if (target instanceof org.eclipse.gmf.runtime.notation.View) {
		org.eclipse.gmf.runtime.notation.View viewTarget = (org.eclipse.gmf.runtime.notation.View) target;
		if (viewTarget.getElement() != null) {
			imageTarget = viewTarget.getElement().eClass();
		}
		this.targetElementQName = formatView(viewTarget);
	} else {
		this.targetElementQName = formatElement(target);
	}
	this.elementImage = «editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemImage(imageTarget);
}
«ENDDEFINE»

«DEFINE ElementMetrics_formatView FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected String formatView(org.eclipse.gmf.runtime.notation.View viewTarget) {
	StringBuffer notationQNameBuf = new StringBuffer();
	notationQNameBuf.append(formatElement(viewTarget));
	if (viewTarget.getElement() != null) {
		notationQNameBuf.append("->").append(formatElement(viewTarget.getElement()));	«EXPAND xpt::Common::nonNLS»
	}
	int visualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(viewTarget);
	notationQNameBuf.append('[').append(visualID < 0 ? Integer.toString(System.identityHashCode(viewTarget)) : Integer.toString(visualID)).append(']');
	return notationQNameBuf.toString();
}
«ENDDEFINE»

«DEFINE ElementMetrics_formatElement FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected String formatElement(org.eclipse.emf.ecore.EObject object) {
d59 1
a59 1
		return object.eClass().getName() + " " + labelProvider.getText(object);	«EXPAND xpt::Common::nonNLS»
a64 13
«DEFINE ElementMetrics_getMetricByKey FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
Metric getMetricByKey(String key) {
	for (int i = 0; i < metrics.length; i++) {
		if(metrics[i].def.key.equals(key)) {
			return metrics[i]; 
		}
	}
	return null;
}
«ENDDEFINE»

«DEFINE ElementMetrics_additions FOR gmfgen::GenDiagram»«ENDDEFINE»
d66 2
a67 58
«DEFINE MetricClass FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private static class Metric «EXPAND MetricClass_supertypes» {
	«EXPAND MetricClass_attrs-»

	«EXPAND MetricClass_ctor-»

	«EXPAND MetricClass_compareTo-»

	«EXPAND MetricClass_additions-»
}
«ENDDEFINE»

«DEFINE MetricClass_supertypes FOR gmfgen::GenDiagram»implements Comparable«ENDDEFINE»

«DEFINE MetricClass_attrs FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
final MetricDef def;
«EXPAND xpt::Common::generatedMemberComment»
final Number value;
«EXPAND xpt::Common::generatedMemberComment»
final String displayValue;
«ENDDEFINE»

«DEFINE MetricClass_ctor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
Metric(MetricDef def, org.eclipse.emf.ecore.EObject target) {
	this.def = def;
	value = def.calcMetric(target);
	this.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : "null"; «EXPAND xpt::Common::nonNLS»
}
«ENDDEFINE»

«DEFINE MetricClass_compareTo FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public int compareTo(Object other) {
	Metric otherMetric = (Metric)other;
	if(value != null && otherMetric.value != null) {
		return (value.longValue() < otherMetric.value.longValue()) ? -1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);
	}
	return (value == null && otherMetric.value == null) ? 0 : (value == null) ? -1 : 1;
}
«ENDDEFINE»

«DEFINE MetricClass_additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE attrs FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static java.util.HashMap context2MetricsMap;
«EXPAND xpt::Common::generatedMemberComment»
private static java.util.List metricsRegistry;
«EXPAND xpt::Common::generatedMemberComment»
private static java.util.HashMap key2MetricMap;
«EXPAND xpt::Common::generatedMemberComment»
private static int MAX_VISIBLE_KEY_CHAR_COUNT = 8;
«ENDDEFINE»

«DEFINE calculateForDiagram FOR gmfgen::GenDiagram-»
d80 10
a89 18
					java.util.List metrics = calculateMetrics(diagram, new java.util.ArrayList(50));
					if(diagram.getElement() != null) {
						calculateMetrics(diagram.getElement(), metrics);
					}
					// detach from org.eclipse.emf.ecore.EObject and bind to viewID
					java.util.HashSet elements = new java.util.HashSet();
					for (java.util.Iterator it = metrics.iterator(); it.hasNext();) {
						ElementMetrics elementMetrics = (ElementMetrics) it.next();
						elements.add(elementMetrics.target);
					}
					for (java.util.Iterator it = metrics.iterator(); it.hasNext();) {
						ElementMetrics elementMetrics = (ElementMetrics) it.next();
						org.eclipse.gmf.runtime.notation.View targetView = elementMetrics.target instanceof org.eclipse.gmf.runtime.notation.View ? (org.eclipse.gmf.runtime.notation.View) elementMetrics.target : viewService.findView(elementMetrics.target);
						if (targetView != null) {
							elementMetrics.target = null; // detach org.eclipse.emf.ecore.EObject
							elementMetrics.diagramElementID = targetView.eResource().getURIFragment(targetView);
						}
					}
a96 1
«ENDDEFINE»
d98 37
a134 39
«DEFINE calculateForEObject FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
static java.util.List calculateMetrics(org.eclipse.emf.ecore.EObject target, java.util.List metricsList) {
	final org.eclipse.emf.ecore.EObject root = target;
	java.util.Iterator it = new java.util.Iterator() {
		java.util.Iterator contentsIt = root.eAllContents();
		boolean isInRoot = true;
		public boolean hasNext() {
			return isInRoot || contentsIt.hasNext();
		}
		public Object next() {
			if(isInRoot) {
				isInRoot = false;
				return root;
			}
			return contentsIt.next();
		}
		public void remove() {
			throw new UnsupportedOperationException();
		}
	};

	java.util.ArrayList metricsPerContext = new java.util.ArrayList();
	while(it.hasNext()) {
		Object nextElement = it.next();
		if(nextElement instanceof org.eclipse.emf.ecore.EObject) {
			org.eclipse.emf.ecore.EObject nextEObj = (org.eclipse.emf.ecore.EObject)nextElement;
			org.eclipse.emf.ecore.EClass nextTarget = nextEObj.eClass();
			java.util.Iterator superTypeIt = nextTarget.getEAllSuperTypes().iterator();
			while(nextTarget != null) {
				java.util.List metricList = getMetricsForTarget(nextTarget);
				if(metricList != null) {
					for (java.util.Iterator metricIt = metricList.iterator(); metricIt.hasNext(); ) {
						MetricDef nextMetric = (MetricDef) metricIt.next();
						if(nextMetric.appliesTo(nextEObj)) {
							Metric metric = new Metric(nextMetric, nextEObj);
							metricsPerContext.add(metric);
						}
					}
a135 6
				nextTarget = superTypeIt.hasNext() ? (org.eclipse.emf.ecore.EClass)superTypeIt.next() : null;
			}

			if(!metricsPerContext.isEmpty()) {
				metricsList.add(new ElementMetrics(nextEObj, (Metric[])metricsPerContext.toArray(new Metric[metricsPerContext.size()])));
				metricsPerContext.clear();
a138 78

	return metricsList;
}
«ENDDEFINE»

«DEFINE getMetricsForTarget FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static java.util.List/*MetricDef*/ getMetricsForTarget(org.eclipse.emf.ecore.EClass target) {
	if(context2MetricsMap == null) {
		initializeRegistry();
	}
	return (java.util.List) context2MetricsMap.get(target);
}
«ENDDEFINE»

«DEFINE getMetrics FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static java.util.List getMetrics() {
	if(metricsRegistry == null) {
		initializeRegistry();
	}
	return metricsRegistry;
}
«ENDDEFINE»

«DEFINE calculateMetrics FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static Number calculateMetric(String metricKey, Object contextInstance) {
	if (key2MetricMap == null) {
		initializeRegistry();
	}
	MetricDef metric = (MetricDef)key2MetricMap.get(metricKey);
	Number value = (metric != null) ? metric.calcMetric(contextInstance) : null;
	return (value != null && !(value instanceof Double)) ? new Double(value.doubleValue()) : value;
}
«ENDDEFINE»

«DEFINE initRegistry FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static void initializeRegistry() {
	if(context2MetricsMap != null) {
		return;
	}
	«EXPAND registerMetricDef FOREACH getMetricRules()-»
}
«ENDDEFINE»

«DEFINE registerMetricDef FOR gmfgen::GenMetricRule-»
register(new MetricDef(«toStringLiteral(key)», «EXPAND xpt::Common::nonNLS»
	«EXPAND getExpression(container.editorGen.diagram, rule, target.getContext()) FOR container.editorGen.expressionProviders.getProvider(rule)», 
	«EXPAND visualIDs»,
	«EXPAND limits(lowLimit)»,
	«EXPAND limits(highLimit)»,
	«IF name == null»null«ELSE»«EXPAND xpt::Externalizer::accessorCall(i18nKeyForMetric().nameKey()) FOR container.editorGen»«ENDIF»,
	«IF description == null»null«ELSE»«EXPAND xpt::Externalizer::accessorCall(i18nKeyForMetric().descriptionKey()) FOR container.editorGen»«ENDIF»));
«ENDDEFINE»

«DEFINE visualIDs FOR gmfgen::GenMetricRule-»
«IF target == null»null«ELSE»«EXPAND visualIDs FOR target»«ENDIF-»
«ENDDEFINE»

«DEFINE visualIDs FOR gmfgen::GenMeasurable»null«ENDDEFINE»

«DEFINE visualIDs FOR gmfgen::GenDiagramElementTarget»new int[] {«EXPAND xpt::editor::VisualIDRegistry::visualID FOREACH element SEPARATOR ', '»}«ENDDEFINE»

«DEFINE limits(EDouble limit) FOR gmfgen::GenMetricRule»«IF limit == null»null«ELSE»new Double(«limit»)«ENDIF»«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenExpressionProviderBase»null«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenExpressionInterpreter»«EXPAND xpt::expressions::getExpression::getExpression(valueSpec, genClassifier)»«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenJavaExpressionProvider-»
new «container.getAbstractExpressionQualifiedClassName()»(«EXPAND MetaModel::MetaClass FOR genClassifier») {
	protected Object doEvaluate(Object context, java.util.Map env) {
		«EXPAND MetaModel::DeclareAndAssign("self", "context", true) FOR genClassifier»
		return «EXPAND javaMetricsContainerClassName FOR diagram».«this.getOperationName(valueSpec)»(self);
	}
}«-»
d141 5
a145 44
«DEFINE javaRules FOR gmfgen::GenDiagram-»
«LET getJavaMetricRules() AS javaRules-»
«IF javaRules.size() > 0-»
«EXPAND xpt::Common::generatedClassComment»
static class «EXPAND javaMetricsContainerClassName» {
	«EXPAND defineJavaRuleOperation(editorGen.expressionProviders) FOREACH javaRules-»
}	//«EXPAND javaMetricsContainerClassName»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE defineJavaRuleOperation(gmfgen::GenExpressionProviderContainer expressionProviders) FOR gmfgen::GenMetricRule-» 
«EXPAND defineJavaConstraintOperation(this) FOR expressionProviders.getProvider(rule)-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenMetricRule rule) FOR gmfgen::GenExpressionProviderBase»«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenMetricRule rule) FOR gmfgen::GenJavaExpressionProvider-»
«EXPAND xpt::expressions::javaExpressionOperation::javaExpressionOperation(rule.rule, rule.target.getContext(), null)-»
«ENDDEFINE»

«DEFINE javaMetricsContainerClassName FOR gmfgen::GenDiagram»JavaRules«ENDDEFINE»

«DEFINE register FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static void register(MetricDef metric) {
	if (context2MetricsMap == null) {
		context2MetricsMap = new java.util.HashMap();
		metricsRegistry = new java.util.ArrayList();
		key2MetricMap = new java.util.HashMap();
	}
	java.util.List metrics = (java.util.List)context2MetricsMap.get(metric.expression.context());
	if(metrics == null) {
		metrics = new java.util.ArrayList();
		context2MetricsMap.put(metric.expression.context(), metrics);
	}
	metricsRegistry.add(metric);
	metrics.add(metric);
	key2MetricMap.put(metric.key, metric);
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

@


1.3
log
@[150177] phase IV, fix last use of qualified class names in ElementInitializers (via GMFGen genmodel java methods). Cleaned genmodel of methods no longer in use, few methods moved to ElementInitializer.ext (pending removal/refactoring)
@
text
@d763 1
a763 1
«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenExpressionInterpreter»«EXPAND xpt::expressions::getExpression::getExpression(valueSpec, genClassifier, false)»«ENDDEFINE»
@


1.2
log
@[150177] phase I, refactor existing code: completed - all metamodel access moved to MetaModel template, LiteRT version updated
@
text
@d768 1
a768 1
		«getQualifiedInstanceClassName(genClassifier)» self = («getQualifiedInstanceClassName(genClassifier)») context;
@


1.1
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d766 1
a766 1
new «container.getAbstractExpressionQualifiedClassName()»(«EXPAND xpt::Common::metaClassAccessor FOR genClassifier») {
@


1.1.2.1
log
@file MetricProvider.xpt was added on branch R2_0_maintenance on 2007-09-17 16:02:13 +0000
@
text
@d1 855
@


1.1.2.2
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator)
@
text
@a0 855
/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::providers::ValidationUtils»
«EXTENSION xpt::providers::i18n»

«DEFINE resultViewQualifiedClassName FOR gmfgen::GenDiagram»«providersPackageName».«metricProviderClassName».«EXPAND resultViewClassName»«ENDDEFINE» 

«DEFINE resultViewID FOR gmfgen::GenDiagram»«EXPAND resultViewQualifiedClassName».«EXPAND viewIDConstant»«ENDDEFINE» 

«DEFINE MetricProvider FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «metricProviderClassName» {
	«EXPAND attrs-»

	«EXPAND calculateForDiagram-»

	«EXPAND calculateForEObject-»
	
	«EXPAND ResultView-»

	«EXPAND ElementMetrics-»

	«EXPAND MetricClass-»

	«EXPAND MetricDef-»

	«EXPAND getMetricsForTarget-»

	«EXPAND getMetrics-»

	«EXPAND calculateMetrics-»

	«EXPAND initRegistry-»

	«EXPAND register-»

	«EXPAND javaRules-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE ResultView FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
public static class «EXPAND resultViewClassName» «EXPAND ResultView_supertypes» {
	«EXPAND ResultView_ID_attr-»

	«EXPAND ResultView_viewer-»

	«EXPAND ResultView_input-»

	«EXPAND ResultView_setInput-»

	«EXPAND ResultView_adjustLayout-»

	«EXPAND ResultView_createPartControl-»

	«EXPAND ResultView_handleOpen-»

	«EXPAND ResultView_calcMetricMaxValueStrLenMap-»

	«EXPAND ResultView_setFocus-»

	«EXPAND ResultView_LabelProvider-»

	«EXPAND ResultView_additions-»
}
«ENDDEFINE»

«DEFINE resultViewClassName FOR gmfgen::GenDiagram»ResultView«ENDDEFINE»

«DEFINE viewIDConstant FOR gmfgen::GenDiagram»VIEW_ID«ENDDEFINE»

«DEFINE ResultView_supertypes FOR gmfgen::GenDiagram»extends org.eclipse.ui.part.ViewPart«ENDDEFINE»

«DEFINE ResultView_additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE ResultView_ID_attr FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static final String «EXPAND viewIDConstant» = "«getMetricViewID()»"; «EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE ResultView_viewer FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.jface.viewers.TableViewer viewer;
«ENDDEFINE»

«DEFINE ResultView_input FOR gmfgen::GenDiagram-»
«IF editorGen.editor.eclipseEditor-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.ui.IEditorInput editorInput;
«ELSE-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.common.util.URI diagramURI;
«ENDIF-»
«ENDDEFINE»

«DEFINE ResultView_setInput FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
void setInput(«editorGen.editor.getQualifiedClassName()» diagramPart) {
	org.eclipse.emf.ecore.resource.Resource resource = diagramPart.getDiagram().eResource();
«IF editorGen.editor.eclipseEditor-»
	this.editorInput = diagramPart.getEditorInput();
«ELSE-»
	this.diagramURI = resource.getURI();
«ENDIF-»
	setTitleToolTip(resource.getURI().path());

	java.util.List metrics = calculateMetrics(diagramPart);
   	adjustLayout(metrics);
   	viewer.setInput(metrics);
}
«ENDDEFINE»

«DEFINE ResultView_adjustLayout FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private void adjustLayout(java.util.List metricResultList) {
	java.util.Map maxValStrMap = calcMetricMaxValueStrLenMap(metricResultList);
	org.eclipse.swt.widgets.Table table = viewer.getTable();
	org.eclipse.jface.viewers.TableLayout layout = new org.eclipse.jface.viewers.TableLayout();

	org.eclipse.swt.graphics.GC gc = new org.eclipse.swt.graphics.GC(table);
	gc.setFont(org.eclipse.jface.resource.JFaceResources.getDialogFont());
	int padding = gc.stringExtent("X").x * 2; «EXPAND xpt::Common::nonNLS»
	for (int i = 0; i < getMetrics().size(); i++) {
		MetricDef nextMetric = (MetricDef)getMetrics().get(i);
		String valueStr = (String)maxValStrMap.get(nextMetric.key);
		int minWidth = valueStr != null ? gc.stringExtent(valueStr).x + padding : 20;
		layout.addColumnData(new org.eclipse.jface.viewers.ColumnPixelData(minWidth, true));
	}
	gc.dispose();

	layout.addColumnData(new org.eclipse.jface.viewers.ColumnWeightData(1, 50, true));
	viewer.getTable().setLayout(layout);
	viewer.getTable().layout(true, true);
}
«ENDDEFINE»

«DEFINE ResultView_createPartControl FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public void createPartControl(org.eclipse.swt.widgets.Composite parent) {
	this.viewer = new org.eclipse.jface.viewers.TableViewer(parent, org.eclipse.swt.SWT.FULL_SELECTION);
	final org.eclipse.swt.widgets.Table table = viewer.getTable();
	table.setHeaderVisible(true);
	table.setLinesVisible(true);

	for (int i = 0; i < getMetrics().size(); i++) {
		MetricDef nextMetric = ((MetricDef)getMetrics().get(i));
		org.eclipse.swt.widgets.TableColumn column = new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE);
		column.setAlignment(org.eclipse.swt.SWT.RIGHT);
		column.setMoveable(true);
		column.setText(nextMetric.key);
		column.setToolTipText(nextMetric.getToolTipText());
	}

	org.eclipse.swt.widgets.TableColumn objectColumn = new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE);
	objectColumn.setText(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForMetricProviderResultViewElementColumnName()) FOR editorGen»);
	objectColumn.setToolTipText(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForMetricProviderResultViewElementColumnTooltip()) FOR editorGen»);

	viewer.setLabelProvider(new Labels());
	viewer.setContentProvider(new org.eclipse.jface.viewers.ArrayContentProvider());
	viewer.addOpenListener(new org.eclipse.jface.viewers.IOpenListener() {
		public void open(org.eclipse.jface.viewers.OpenEvent event) {
			handleOpen(event);
		}
	});

	org.eclipse.swt.events.SelectionListener headerSelListener = new org.eclipse.swt.events.SelectionListener() {
		public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {
			table.setSortColumn((org.eclipse.swt.widgets.TableColumn)e.getSource());
			table.setSortDirection((table.getSortDirection() != org.eclipse.swt.SWT.DOWN) ? org.eclipse.swt.SWT.DOWN : org.eclipse.swt.SWT.UP);
			viewer.refresh();
		}
		public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) {
		}
	};
	org.eclipse.swt.widgets.TableColumn[] columns = viewer.getTable().getColumns();
	for (int i = 0; i < columns.length; i++) {
		columns[i].addSelectionListener(headerSelListener);
	}

	viewer.setSorter(
		new org.eclipse.jface.viewers.ViewerSorter() {
			public int compare(org.eclipse.jface.viewers.Viewer viewer, Object e1, Object e2) {
				org.eclipse.swt.widgets.TableColumn c = table.getSortColumn();
				int result = 0;
				if(c != null) {
					Metric mc1 = ((ElementMetrics)e1).getMetricByKey(c.getText());
					Metric mc2 = ((ElementMetrics)e2).getMetricByKey(c.getText());
					result = (mc1 != null && mc2 != null) ?
						mc1.compareTo(mc2) : (mc1 == null ? -1 : 1);
				} else {
					result = ((ElementMetrics)e1).targetElementQName.compareTo(((ElementMetrics)e2).targetElementQName);
				}
				return table.getSortDirection() == org.eclipse.swt.SWT.DOWN ? result : -result;
			}
		}
	);
«IF editorGen.editor.eclipseEditor-»
    org.eclipse.ui.IEditorPart editor = getSite().getPage().getActiveEditor();
    if(editor instanceof «editorGen.editor.getQualifiedClassName()») {
		setInput((«editorGen.editor.getQualifiedClassName()») editor);
    }
«ENDIF-»
}
«ENDDEFINE»

«DEFINE ResultView_handleOpen FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private void handleOpen(org.eclipse.jface.viewers.OpenEvent event) {
«IF editorGen.editor.eclipseEditor-»
	«editorGen.editor.getQualifiedClassName()» diagramPart;
	try {
		if (editorInput == null) {
			return;
		}
		org.eclipse.ui.IEditorPart editorPart = getSite().getPage().openEditor(editorInput, «editorGen.editor.getQualifiedClassName()».ID);
		if(false == editorPart instanceof «editorGen.editor.getQualifiedClassName()») {
			return;
		}
		diagramPart = («editorGen.editor.getQualifiedClassName()») editorPart;
	} catch (org.eclipse.ui.PartInitException e) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Can't open diagram editor", e); «EXPAND xpt::Common::nonNLS»
		return;
	}
«ELSE-»
	if (diagramURI == null) {
		return;
	}
	org.eclipse.ui.IViewPart viewPart = «getDiagramEditorUtilQualifiedClassName()».showView(diagramURI);
	if(false == viewPart instanceof «editorGen.editor.getQualifiedClassName()») {
		return;
	}
	«editorGen.editor.getQualifiedClassName()» diagramPart = («editorGen.editor.getQualifiedClassName()») viewPart;
«ENDIF-»
	org.eclipse.gef.GraphicalViewer graphicalViewer = (org.eclipse.gef.GraphicalViewer) diagramPart.getAdapter(org.eclipse.gef.GraphicalViewer.class);
	ElementMetrics selection = (ElementMetrics)((org.eclipse.jface.viewers.IStructuredSelection)event.getSelection()).getFirstElement();
	String viewID = selection.diagramElementID;
	if(viewID != null) {
		org.eclipse.gmf.runtime.notation.View targetView = (org.eclipse.gmf.runtime.notation.View)diagramPart.getDiagram().eResource().getEObject(viewID);
		if(targetView != null) {
			org.eclipse.gef.EditPart targetEditPart = (org.eclipse.gef.EditPart)graphicalViewer.getEditPartRegistry().get(targetView);
			if(targetEditPart != null) {
				graphicalViewer.setSelection(new org.eclipse.jface.viewers.StructuredSelection(targetEditPart));
			}
		}
	}
}
«ENDDEFINE»

«DEFINE ResultView_calcMetricMaxValueStrLenMap FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static java.util.Map calcMetricMaxValueStrLenMap(java.util.List allMetrics) {
	java.util.Map metric2MaxStrLen = new java.util.HashMap();
	for (int i = 0; i < getMetrics().size(); i++) {
		String nextKey = ((MetricDef)getMetrics().get(i)).key;
		int trimPos = Math.min(nextKey.length(), MAX_VISIBLE_KEY_CHAR_COUNT);
		metric2MaxStrLen.put(nextKey, nextKey.substring(0, trimPos));
	}

	for (java.util.Iterator it = allMetrics.iterator(); it.hasNext();) {
		ElementMetrics elementMetrics = (ElementMetrics) it.next();
		for (int i = 0; i < elementMetrics.metrics.length; i++) {
			Metric metric = elementMetrics.metrics[i];
			String valueStr = (String)metric2MaxStrLen.get(metric.def.key);
			if(valueStr == null || metric.displayValue.length() > valueStr.length()) {
				metric2MaxStrLen.put(metric.def.key, metric.displayValue);
			}
		}
	}
	return metric2MaxStrLen;
}
«ENDDEFINE»

«DEFINE ResultView_setFocus FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public void setFocus() {
}		
«ENDDEFINE»

«DEFINE ResultView_LabelProvider FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private class Labels «EXPAND ResultView_LabelProvider_supertypes» {
	«EXPAND ResultView_LabelProvider_isElementColumn-»

	«EXPAND ResultView_LabelProvider_getColumnImage-»

	«EXPAND ResultView_LabelProvider_getColumnText-»

	«EXPAND ResultView_LabelProvider_getBackgroundColor-»

	«EXPAND ResultView_LabelProvider_getForegroundColor-»
}
«ENDDEFINE»

«DEFINE ResultView_LabelProvider_supertypes FOR gmfgen::GenDiagram»extends org.eclipse.jface.viewers.LabelProvider implements org.eclipse.jface.viewers.ITableLabelProvider, org.eclipse.jface.viewers.ITableColorProvider«ENDDEFINE»


«DEFINE ResultView_LabelProvider_isElementColumn FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private boolean isElementColumn(int columnIndex) {
	return columnIndex >= getMetrics().size();
}
«ENDDEFINE»

«DEFINE ResultView_LabelProvider_getColumnImage FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.swt.graphics.Image getColumnImage(Object element, int columnIndex) {
	return isElementColumn(columnIndex) ? ((ElementMetrics)element).elementImage : null;
}
«ENDDEFINE»

«DEFINE ResultView_LabelProvider_getColumnText FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public String getColumnText(Object element, int columnIndex) {
	ElementMetrics elementMetrics = (ElementMetrics)element;

	if(columnIndex == getMetrics().size()) {
		return elementMetrics.targetElementQName;
	}

	String key = ((MetricDef)getMetrics().get(columnIndex)).key;
	Metric metric = elementMetrics.getMetricByKey(key);
	return (metric != null) ? metric.displayValue : "-"; «EXPAND xpt::Common::nonNLS»
}
«ENDDEFINE»

«DEFINE ResultView_LabelProvider_getBackgroundColor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.swt.graphics.Color getBackground(Object element, int columnIndex) {
	return null;
}
«ENDDEFINE»

«DEFINE ResultView_LabelProvider_getForegroundColor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.swt.graphics.Color getForeground(Object element, int columnIndex) {
	if(isElementColumn(columnIndex)) return null;
	ElementMetrics columnElement = (ElementMetrics)element;
	String key = ((MetricDef)getMetrics().get(columnIndex)).key;
	Metric metric = columnElement.getMetricByKey(key);
	if(metric != null && metric.value != null) {
		if (metric.def.highLimit != null && metric.def.highLimit.longValue() < metric.value.longValue()) {
			return «EXPAND ResultView_LabelProvider_colorMore»;
		} else if (metric.def.lowLimit != null && metric.def.lowLimit.longValue() > metric.value.longValue()) {
			return «EXPAND ResultView_LabelProvider_colorLess»;
		}
	}
	return null;
}
«ENDDEFINE»

«DEFINE ResultView_LabelProvider_colorMore FOR gmfgen::GenDiagram»org.eclipse.draw2d.ColorConstants.red«ENDDEFINE»

«DEFINE ResultView_LabelProvider_colorLess FOR gmfgen::GenDiagram»org.eclipse.draw2d.ColorConstants.blue«ENDDEFINE»

«DEFINE MetricDef FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private static class MetricDef {
	«EXPAND MetricDef_attrs-»
	«EXPAND MetricDef_ctor-»
	«EXPAND MetricDef_calculate-»
	«EXPAND MetricDef_appliesTo-»
	«EXPAND MetricDef_getToolTip-»
	«EXPAND MetricDef_additions-»
}
«ENDDEFINE»

«DEFINE MetricDef_attrs FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
final Double lowLimit;
«EXPAND xpt::Common::generatedMemberComment»
final Double highLimit;
«EXPAND xpt::Common::generatedMemberComment»
final String key;
«EXPAND xpt::Common::generatedMemberComment»
final «editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()» expression;
«EXPAND xpt::Common::generatedMemberComment»
final int[] semanticIDs;
«EXPAND xpt::Common::generatedMemberComment»
final String name;
«EXPAND xpt::Common::generatedMemberComment»
final String description;
«ENDDEFINE»

«DEFINE MetricDef_ctor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
MetricDef(String key, «editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()» expression, int[] semanticIDs, Double low, Double high, String name, String description) {
	this.key = key;
	this.expression = expression;
	this.semanticIDs = semanticIDs;
	this.lowLimit = low;
	this.highLimit = high;
	this.name = name;
	this.description = description;
}
«ENDDEFINE»

«DEFINE MetricDef_calculate FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
Number calcMetric(Object contextInstance) {
	Object val = expression.evaluate(contextInstance);
	return (val instanceof Number) ? (Number)val : null;
}
«ENDDEFINE»

«DEFINE MetricDef_appliesTo FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
boolean appliesTo(org.eclipse.emf.ecore.EObject eObject) {
	if(eObject instanceof org.eclipse.gmf.runtime.notation.View && semanticIDs != null) {
		int eObjectID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»((org.eclipse.gmf.runtime.notation.View)eObject);
		for(int i = 0; i < semanticIDs.length; i++) {
			if(semanticIDs[i] == eObjectID) {
				return true;
			}
		}
		return false;
	}
	return eObject != null && (expression.context() instanceof org.eclipse.emf.ecore.EClass) && 
		((org.eclipse.emf.ecore.EClass)expression.context()).isSuperTypeOf(eObject.eClass());
}
«ENDDEFINE»

«DEFINE MetricDef_getToolTip FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
String getToolTipText() {
	StringBuffer buf = new StringBuffer();
	if(name != null) buf.append(name);
	if(description != null) buf.append('\n').append(description).append('\n');
	if(lowLimit != null) buf.append(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForMetricProviderMetricDefToolTipLow()) FOR editorGen»).append(lowLimit);
	if(highLimit != null) buf.append(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForMetricProviderMetricDefToolTipHigh()) FOR editorGen»).append(highLimit);
	return buf.toString();
}
«ENDDEFINE»

«DEFINE MetricDef_additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE ElementMetrics FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private static class ElementMetrics {
	«EXPAND ElementMetrics_attrs-»
	«EXPAND ElementMetrics_ctor-»

	«EXPAND ElementMetrics_formatView-»

	«EXPAND ElementMetrics_formatElement-»

	«EXPAND ElementMetrics_getMetricByKey-»

	«EXPAND ElementMetrics_additions-»
}
«ENDDEFINE»

«DEFINE ElementMetrics_attrs FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
final Metric[] metrics;
«EXPAND xpt::Common::generatedMemberComment»
final String targetElementQName;
«EXPAND xpt::Common::generatedMemberComment»
final org.eclipse.swt.graphics.Image elementImage;
«EXPAND xpt::Common::generatedMemberComment»
String diagramElementID;
«EXPAND xpt::Common::generatedMemberComment»
org.eclipse.emf.ecore.EObject target;
«ENDDEFINE»

«DEFINE ElementMetrics_ctor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
ElementMetrics(org.eclipse.emf.ecore.EObject target, Metric[] metrics) {
	this.metrics = metrics;
	assert metrics.length > 0;
	this.target = target;

	org.eclipse.emf.ecore.EClass imageTarget = target.eClass();
	if (target instanceof org.eclipse.gmf.runtime.notation.View) {
		org.eclipse.gmf.runtime.notation.View viewTarget = (org.eclipse.gmf.runtime.notation.View) target;
		if (viewTarget.getElement() != null) {
			imageTarget = viewTarget.getElement().eClass();
		}
		this.targetElementQName = formatView(viewTarget);
	} else {
		this.targetElementQName = formatElement(target);
	}
	this.elementImage = «editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemImage(imageTarget);
}
«ENDDEFINE»

«DEFINE ElementMetrics_formatView FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected String formatView(org.eclipse.gmf.runtime.notation.View viewTarget) {
	StringBuffer notationQNameBuf = new StringBuffer();
	notationQNameBuf.append(formatElement(viewTarget));
	if (viewTarget.getElement() != null) {
		notationQNameBuf.append("->").append(formatElement(viewTarget.getElement()));	«EXPAND xpt::Common::nonNLS»
	}
	int visualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(viewTarget);
	notationQNameBuf.append('[').append(visualID < 0 ? Integer.toString(System.identityHashCode(viewTarget)) : Integer.toString(visualID)).append(']');
	return notationQNameBuf.toString();
}
«ENDDEFINE»

«DEFINE ElementMetrics_formatElement FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected String formatElement(org.eclipse.emf.ecore.EObject object) {
	if (object == null) {
		return String.valueOf((Object)null);
	}
	org.eclipse.emf.common.notify.AdapterFactory adapterFactory = «editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemProvidersAdapterFactory();
	org.eclipse.emf.edit.provider.IItemLabelProvider labelProvider = (org.eclipse.emf.edit.provider.IItemLabelProvider) adapterFactory.adapt(object, org.eclipse.emf.edit.provider.IItemLabelProvider.class);
	if (labelProvider != null) {
		return object.eClass().getName() + " " + labelProvider.getText(object);	«EXPAND xpt::Common::nonNLS»
	}
	return object.toString();
}
«ENDDEFINE»

«DEFINE ElementMetrics_getMetricByKey FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
Metric getMetricByKey(String key) {
	for (int i = 0; i < metrics.length; i++) {
		if(metrics[i].def.key.equals(key)) {
			return metrics[i]; 
		}
	}
	return null;
}
«ENDDEFINE»

«DEFINE ElementMetrics_additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE MetricClass FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private static class Metric «EXPAND MetricClass_supertypes» {
	«EXPAND MetricClass_attrs-»

	«EXPAND MetricClass_ctor-»

	«EXPAND MetricClass_compareTo-»

	«EXPAND MetricClass_additions-»
}
«ENDDEFINE»

«DEFINE MetricClass_supertypes FOR gmfgen::GenDiagram»implements Comparable«ENDDEFINE»

«DEFINE MetricClass_attrs FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
final MetricDef def;
«EXPAND xpt::Common::generatedMemberComment»
final Number value;
«EXPAND xpt::Common::generatedMemberComment»
final String displayValue;
«ENDDEFINE»

«DEFINE MetricClass_ctor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
Metric(MetricDef def, org.eclipse.emf.ecore.EObject target) {
	this.def = def;
	value = def.calcMetric(target);
	this.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : "null"; «EXPAND xpt::Common::nonNLS»
}
«ENDDEFINE»

«DEFINE MetricClass_compareTo FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public int compareTo(Object other) {
	Metric otherMetric = (Metric)other;
	if(value != null && otherMetric.value != null) {
		return (value.longValue() < otherMetric.value.longValue()) ? -1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);
	}
	return (value == null && otherMetric.value == null) ? 0 : (value == null) ? -1 : 1;
}
«ENDDEFINE»

«DEFINE MetricClass_additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE attrs FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static java.util.HashMap context2MetricsMap;
«EXPAND xpt::Common::generatedMemberComment»
private static java.util.List metricsRegistry;
«EXPAND xpt::Common::generatedMemberComment»
private static java.util.HashMap key2MetricMap;
«EXPAND xpt::Common::generatedMemberComment»
private static int MAX_VISIBLE_KEY_CHAR_COUNT = 8;
«ENDDEFINE»

«DEFINE calculateForDiagram FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
static java.util.List calculateMetrics(«editorGen.editor.getQualifiedClassName()» diagramPart) {
	org.eclipse.gef.GraphicalViewer viewer = (org.eclipse.gef.GraphicalViewer) diagramPart.getAdapter(org.eclipse.gef.GraphicalViewer.class);
	final org.eclipse.gmf.runtime.notation.Diagram diagram = diagramPart.getDiagram();
	if (viewer == null || diagram == null) {
		return java.util.Collections.EMPTY_LIST;
	}
	final org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService viewService = new org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.EditPartRegistryBasedViewService(viewer);
	try {
		return (java.util.List)diagramPart.getEditingDomain().runExclusive(
			new org.eclipse.emf.transaction.RunnableWithResult.Impl() {
				public void run() {
					java.util.List metrics = calculateMetrics(diagram, new java.util.ArrayList(50));
					if(diagram.getElement() != null) {
						calculateMetrics(diagram.getElement(), metrics);
					}
					// detach from org.eclipse.emf.ecore.EObject and bind to viewID
					java.util.HashSet elements = new java.util.HashSet();
					for (java.util.Iterator it = metrics.iterator(); it.hasNext();) {
						ElementMetrics elementMetrics = (ElementMetrics) it.next();
						elements.add(elementMetrics.target);
					}
					for (java.util.Iterator it = metrics.iterator(); it.hasNext();) {
						ElementMetrics elementMetrics = (ElementMetrics) it.next();
						org.eclipse.gmf.runtime.notation.View targetView = elementMetrics.target instanceof org.eclipse.gmf.runtime.notation.View ? (org.eclipse.gmf.runtime.notation.View) elementMetrics.target : viewService.findView(elementMetrics.target);
						if (targetView != null) {
							elementMetrics.target = null; // detach org.eclipse.emf.ecore.EObject
							elementMetrics.diagramElementID = targetView.eResource().getURIFragment(targetView);
						}
					}
					setResult(metrics);
				}
			});
	} catch(InterruptedException e) {
		return java.util.Collections.EMPTY_LIST;
	}
}
«ENDDEFINE»

«DEFINE calculateForEObject FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
static java.util.List calculateMetrics(org.eclipse.emf.ecore.EObject target, java.util.List metricsList) {
	final org.eclipse.emf.ecore.EObject root = target;
	java.util.Iterator it = new java.util.Iterator() {
		java.util.Iterator contentsIt = root.eAllContents();
		boolean isInRoot = true;
		public boolean hasNext() {
			return isInRoot || contentsIt.hasNext();
		}
		public Object next() {
			if(isInRoot) {
				isInRoot = false;
				return root;
			}
			return contentsIt.next();
		}
		public void remove() {
			throw new UnsupportedOperationException();
		}
	};

	java.util.ArrayList metricsPerContext = new java.util.ArrayList();
	while(it.hasNext()) {
		Object nextElement = it.next();
		if(nextElement instanceof org.eclipse.emf.ecore.EObject) {
			org.eclipse.emf.ecore.EObject nextEObj = (org.eclipse.emf.ecore.EObject)nextElement;
			org.eclipse.emf.ecore.EClass nextTarget = nextEObj.eClass();
			java.util.Iterator superTypeIt = nextTarget.getEAllSuperTypes().iterator();
			while(nextTarget != null) {
				java.util.List metricList = getMetricsForTarget(nextTarget);
				if(metricList != null) {
					for (java.util.Iterator metricIt = metricList.iterator(); metricIt.hasNext(); ) {
						MetricDef nextMetric = (MetricDef) metricIt.next();
						if(nextMetric.appliesTo(nextEObj)) {
							Metric metric = new Metric(nextMetric, nextEObj);
							metricsPerContext.add(metric);
						}
					}
				}
				nextTarget = superTypeIt.hasNext() ? (org.eclipse.emf.ecore.EClass)superTypeIt.next() : null;
			}

			if(!metricsPerContext.isEmpty()) {
				metricsList.add(new ElementMetrics(nextEObj, (Metric[])metricsPerContext.toArray(new Metric[metricsPerContext.size()])));
				metricsPerContext.clear();
			}
		}
	}

	return metricsList;
}
«ENDDEFINE»

«DEFINE getMetricsForTarget FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static java.util.List/*MetricDef*/ getMetricsForTarget(org.eclipse.emf.ecore.EClass target) {
	if(context2MetricsMap == null) {
		initializeRegistry();
	}
	return (java.util.List) context2MetricsMap.get(target);
}
«ENDDEFINE»

«DEFINE getMetrics FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static java.util.List getMetrics() {
	if(metricsRegistry == null) {
		initializeRegistry();
	}
	return metricsRegistry;
}
«ENDDEFINE»

«DEFINE calculateMetrics FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static Number calculateMetric(String metricKey, Object contextInstance) {
	if (key2MetricMap == null) {
		initializeRegistry();
	}
	MetricDef metric = (MetricDef)key2MetricMap.get(metricKey);
	Number value = (metric != null) ? metric.calcMetric(contextInstance) : null;
	return (value != null && !(value instanceof Double)) ? new Double(value.doubleValue()) : value;
}
«ENDDEFINE»

«DEFINE initRegistry FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static void initializeRegistry() {
	if(context2MetricsMap != null) {
		return;
	}
	«EXPAND registerMetricDef FOREACH getMetricRules()-»
}
«ENDDEFINE»

«DEFINE registerMetricDef FOR gmfgen::GenMetricRule-»
register(new MetricDef(«toStringLiteral(key)», «EXPAND xpt::Common::nonNLS»
	«EXPAND getExpression(container.editorGen.diagram, rule, target.getContext()) FOR container.editorGen.expressionProviders.getProvider(rule)», 
	«EXPAND visualIDs»,
	«EXPAND limits(lowLimit)»,
	«EXPAND limits(highLimit)»,
	«IF name == null»null«ELSE»«EXPAND xpt::Externalizer::accessorCall(i18nKeyForMetric().nameKey()) FOR container.editorGen»«ENDIF»,
	«IF description == null»null«ELSE»«EXPAND xpt::Externalizer::accessorCall(i18nKeyForMetric().descriptionKey()) FOR container.editorGen»«ENDIF»));
«ENDDEFINE»

«DEFINE visualIDs FOR gmfgen::GenMetricRule-»
«IF target == null»null«ELSE»«EXPAND visualIDs FOR target»«ENDIF-»
«ENDDEFINE»

«DEFINE visualIDs FOR gmfgen::GenMeasurable»null«ENDDEFINE»

«DEFINE visualIDs FOR gmfgen::GenDiagramElementTarget»new int[] {«EXPAND xpt::editor::VisualIDRegistry::visualID FOREACH element SEPARATOR ', '»}«ENDDEFINE»

«DEFINE limits(EDouble limit) FOR gmfgen::GenMetricRule»«IF limit == null»null«ELSE»new Double(«limit»)«ENDIF»«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenExpressionProviderBase»null«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenExpressionInterpreter»«EXPAND xpt::expressions::getExpression::getExpression(valueSpec, genClassifier, false)»«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenJavaExpressionProvider-»
new «container.getAbstractExpressionQualifiedClassName()»(«EXPAND xpt::Common::metaClassAccessor FOR genClassifier») {
	protected Object doEvaluate(Object context, java.util.Map env) {
		«getQualifiedInstanceClassName(genClassifier)» self = («getQualifiedInstanceClassName(genClassifier)») context;
		return «EXPAND javaMetricsContainerClassName FOR diagram».«this.getOperationName(valueSpec)»(self);
	}
}«-»
«ENDDEFINE»

«DEFINE javaRules FOR gmfgen::GenDiagram-»
«LET getJavaMetricRules() AS javaRules-»
«IF javaRules.size() > 0-»
«EXPAND xpt::Common::generatedClassComment»
static class «EXPAND javaMetricsContainerClassName» {
	«EXPAND defineJavaRuleOperation(editorGen.expressionProviders) FOREACH javaRules-»
}	//«EXPAND javaMetricsContainerClassName»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE defineJavaRuleOperation(gmfgen::GenExpressionProviderContainer expressionProviders) FOR gmfgen::GenMetricRule-» 
«EXPAND defineJavaConstraintOperation(this) FOR expressionProviders.getProvider(rule)-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenMetricRule rule) FOR gmfgen::GenExpressionProviderBase»«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenMetricRule rule) FOR gmfgen::GenJavaExpressionProvider-»
«EXPAND xpt::expressions::javaExpressionOperation::javaExpressionOperation(rule.rule, rule.target.getContext(), null)-»
«ENDDEFINE»

«DEFINE javaMetricsContainerClassName FOR gmfgen::GenDiagram»JavaRules«ENDDEFINE»

«DEFINE register FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static void register(MetricDef metric) {
	if (context2MetricsMap == null) {
		context2MetricsMap = new java.util.HashMap();
		metricsRegistry = new java.util.ArrayList();
		key2MetricMap = new java.util.HashMap();
	}
	java.util.List metrics = (java.util.List)context2MetricsMap.get(metric.expression.context());
	if(metrics == null) {
		metrics = new java.util.ArrayList();
		context2MetricsMap.put(metric.expression.context(), metrics);
	}
	metricsRegistry.add(metric);
	metrics.add(metric);
	key2MetricMap.put(metric.key, metric);
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
«IF editorGen.metrics != null-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForMetricProviderResultViewElementColumnName())-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForMetricProviderResultViewElementColumnTooltip())-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForMetricProviderMetricDefToolTipLow())-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForMetricProviderMetricDefToolTipHigh())-»
«EXPAND nameAccessorField FOREACH getMetricRules().select(e| e.name != null)-»
«EXPAND descriptionAccessorField FOREACH getMetricRules().select(e| e.description != null)-»
«ENDIF-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«IF editorGen.metrics != null-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForMetricProviderResultViewElementColumnName(), "Element")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForMetricProviderResultViewElementColumnTooltip(), "Measurement element")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForMetricProviderMetricDefToolTipLow(), " Low: ")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForMetricProviderMetricDefToolTipHigh(), " High: ")-»
«EXPAND nameAccessorValue FOREACH getMetricRules().select(e| e.name != null)-»
«EXPAND descriptionAccessorValue FOREACH getMetricRules().select(e| e.description != null)-»
«ENDIF-»
«ENDDEFINE»

«DEFINE nameAccessorField FOR gmfgen::GenMetricRule-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForMetric().nameKey())-»
«ENDDEFINE»

«DEFINE descriptionAccessorField FOR gmfgen::GenMetricRule-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForMetric().descriptionKey())-»
«ENDDEFINE»

«DEFINE nameAccessorValue FOR gmfgen::GenMetricRule-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForMetric().nameKey(), name)-»
«ENDDEFINE»

«DEFINE descriptionAccessorValue FOR gmfgen::GenMetricRule-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForMetric().descriptionKey(), description)-»
«ENDDEFINE»

@


