head	1.6;
access;
symbols
	v20080910-1520:1.6
	v20080722-1827:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.2
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080507-1326:1.6
	v20080501-1739:1.5
	v20080425-1959:1.4
	v20080322-0000:1.3
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1.2.2
	R2_0_maintenance:1.1.0.2
	v20070903-0000:1.1;
locks; strict;
comment	@# @;


1.6
date	2008.05.07.13.55.39;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	388c4821b4d44567;

1.5
date	2008.04.30.21.06.40;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	ac84818df5f4567;

1.4
date	2008.04.14.08.37.50;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	1b0b480317de4567;

1.3
date	2008.02.29.21.19.55;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	45c147c876f94567;

1.2
date	2008.02.26.22.50.33;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	405e47c497b74567;

1.1
date	2007.07.04.13.22.26;	author bblajer;	state Exp;
branches
	1.1.2.1;
next	;
commitid	405d468b9f0f4567;

1.1.2.1
date	2007.07.04.13.22.26;	author bblajer;	state dead;
branches;
next	1.1.2.2;
commitid	7b9846eea5004567;

1.1.2.2
date	2007.09.17.16.02.13;	author bblajer;	state Exp;
branches;
next	;
commitid	7b9846eea5004567;


desc
@@


1.6
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 *    Artem Tikhomirov (Borland) - refactored to reuse code from FullRT version.
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::providers::ValidationUtils»
«EXTENSION xpt::GenModelUtils»

«DEFINE ValidationProvider FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «validationProviderClassName» «EXPAND supertypes» {
	«EXPAND constraintsActive-»

	«EXPAND shouldConstraintsBePrivate-»

	«EXPAND runWithActiveConstraints-»

	«EXPAND isInDefaultEditorContext-»

	«EXPAND selectors FOR editorGen.audits-»

	«EXPAND strategy_support»

	«EXPAND constraintAdapters(this) FOR editorGen.audits-»

	«EXPAND additions-»
} //«validationProviderClassName»
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenDiagram»«ENDDEFINE»

// override the one from FullRT
«DEFINE constraintAdapters_formatMethod FOR GenAuditRoot-»
	«EXPAND xpt::Common::generatedMemberComment»
	static String formatElement(org.eclipse.emf.ecore.EObject object) {
		if (object == null) {
			return String.valueOf(object);
		}
		org.eclipse.emf.common.notify.AdapterFactory adapterFactory = «editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemProvidersAdapterFactory();
		org.eclipse.emf.edit.provider.IItemLabelProvider labelProvider = (org.eclipse.emf.edit.provider.IItemLabelProvider) adapterFactory.adapt(object, org.eclipse.emf.edit.provider.IItemLabelProvider.class);
		if (labelProvider != null) {
			return object.eClass() + " " + labelProvider.getText(object);
		}
		return object.toString();
	}
«ENDDEFINE»


@


1.5
log
@[228913] item #4 and [226149] no need for explicit nested Java class with operations when validate() method itself is appropriate place.
Code different for full and lite version extracted into a separate template, lite version updated to override only those templates that needed, without extra effort duplication.
@
text
@d14 1
a14 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.4
log
@[226149] Refactor Validation/Constraints: explicit context groupings instead of ID matching, unused IClientSelectors implementations are no longer generated, less custom code in the model, odd approach with map (semanticCtxIdMap) replaced with in-place VisualID check.
@
text
@d11 1
d38 1
a38 3
	«EXPAND AuditClass FOREACH editorGen.audits.rules.select(e| e.requiresConstraintAdapter && e.rule != null && e.target != null && e.target.getContext() != null)-»

	«EXPAND javaConstraints-»
d46 2
a47 3
«DEFINE AuditClass FOR gmfgen::GenAuditRule-»
«EXPAND xpt::Common::generatedClassComment»
public static class «getConstraintAdapterLocalClassName()» extends org.eclipse.emf.validation.AbstractModelConstraint {
d49 8
a56 12
	private «root.editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()» expression;
	«EXPAND xpt::Common::generatedMemberComment»
	public «this.getConstraintAdapterLocalClassName()»() {
		expression = «EXPAND getExpression(root.editorGen.diagram, rule, target.getContext()) FOR root.editorGen.expressionProviders.getProvider(rule)»;
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.core.runtime.IStatus validate(org.eclipse.emf.validation.IValidationContext ctx) {
		Object evalCtx = ctx.getTarget();
		«EXPAND adjustEvalCtx(root.editorGen.diagram) FOR target-»
		Object result = expression.evaluate(evalCtx);
		if(result instanceof Boolean && ((Boolean)result).booleanValue()) {
			return org.eclipse.core.runtime.Status.OK_STATUS;
d58 1
a58 1
		return ctx.createFailureStatus(new Object[] { formatElement(ctx.getTarget()) }); 
a59 2
	«EXPAND AuditClass_formatElement-»
}
a61 64
«DEFINE adjustEvalCtx(gmfgen::GenDiagram diagram) FOR gmfgen::GenAuditable»«ENDDEFINE»

«DEFINE adjustEvalCtx(gmfgen::GenDiagram diagram) FOR gmfgen::GenDomainAttributeTarget-»
if(evalCtx instanceof org.eclipse.emf.ecore.EObject) {
	evalCtx = ((org.eclipse.emf.ecore.EObject) evalCtx).eGet(«EXPAND MetaModel::MetaFeature FOR attribute»);
}
«ENDDEFINE»

«DEFINE adjustEvalCtx(gmfgen::GenDiagram diagram) FOR gmfgen::GenAuditedMetricTarget-»
evalCtx = «diagram.getMetricProviderQualifiedClassName()».calculateMetric(«toStringLiteral(metric.key)», evalCtx);	«EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenExpressionProviderBase»null«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenExpressionInterpreter»«EXPAND xpt::expressions::getExpression::getExpression(valueSpec, genClassifier, false)»«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenJavaExpressionProvider-»
new «container.getAbstractExpressionQualifiedClassName()»(«EXPAND MetaModel::MetaClass FOR genClassifier») {
	protected Object doEvaluate(Object context, java.util.Map env) {
		«EXPAND MetaModel::DeclareAndAssign("self", "context", true) FOR genClassifier»
		return «EXPAND javaConstraintsClassName FOR diagram».«this.getOperationName(valueSpec)»(self);
	}
}«-»
«ENDDEFINE»

«DEFINE AuditClass_formatElement FOR gmfgen::GenAuditRule-»
«EXPAND xpt::Common::generatedMemberComment»
protected String formatElement(org.eclipse.emf.ecore.EObject object) {
	if (object == null) {
		return String.valueOf(object);
	}
	org.eclipse.emf.common.notify.AdapterFactory adapterFactory = «root.editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemProvidersAdapterFactory();
	org.eclipse.emf.edit.provider.IItemLabelProvider labelProvider = (org.eclipse.emf.edit.provider.IItemLabelProvider) adapterFactory.adapt(object, org.eclipse.emf.edit.provider.IItemLabelProvider.class);
	if (labelProvider != null) {
		return object.eClass() + " " + labelProvider.getText(object);
	}
	return object.toString();
}
«ENDDEFINE»

«DEFINE javaConstraints FOR gmfgen::GenDiagram-»
«LET getJavaAuditRules() AS javaAuditRules-»
«IF javaAuditRules.size() > 0-»
«EXPAND xpt::Common::generatedClassComment»
static class «EXPAND javaConstraintsClassName» {
	«EXPAND defineJavaConstraintOperation(editorGen.expressionProviders) FOREACH javaAuditRules-»
}	//«EXPAND javaConstraintsClassName»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenExpressionProviderContainer expressionProviders) FOR gmfgen::GenAuditRule-»
«EXPAND defineJavaConstraintOperation(this) FOR expressionProviders.getProvider(rule)-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenAuditRule rule) FOR gmfgen::GenExpressionProviderBase»«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenAuditRule rule) FOR gmfgen::GenJavaExpressionProvider-»
«EXPAND xpt::expressions::javaExpressionOperation::javaExpressionOperation(rule.rule, rule.target.getContext(), null)-»
«ENDDEFINE»

«DEFINE javaConstraintsClassName FOR gmfgen::GenDiagram»JavaAudits«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»
@


1.3
log
@[150177] phase IV, fix last use of qualified class names in ElementInitializers (via GMFGen genmodel java methods). Cleaned genmodel of methods no longer in use, few methods moved to ElementInitializer.ext (pending removal/refactoring)
@
text
@d25 2
a28 2
	«EXPAND constraintsActive-»

d33 1
a33 5
	«EXPAND Selectors FOR editorGen.audits-»

«IF hasNotationModelAudit()-»
	«EXPAND getNotationTraversalStrategy-»
«ENDIF-»
d35 1
a35 3
«IF editorGen.audits.usesNotationContextSwitch()-»
	«EXPAND CtxSwitchStrategy-»
«ENDIF-»
a46 186
«DEFINE shouldConstraintsBePrivate FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static boolean shouldConstraintsBePrivate() {
	return false;
}
«ENDDEFINE»

«DEFINE constraintsActive FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static boolean constraintsActive = false;	
«ENDDEFINE»

«DEFINE runWithActiveConstraints FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static void runWithConstraints(org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain, Runnable operation) {
	final Runnable op = operation;
	Runnable task = new Runnable() {
		public void run() {
			try {
				constraintsActive = true;
				op.run();
			} finally {
				constraintsActive = false;
			}
		}
	};
	if(editingDomain != null) {
		try {
			editingDomain.runExclusive(task);
		} catch (Exception e) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Validation failed", e); «EXPAND xpt::Common::nonNLS»
		}
	} else {
		task.run();
	}
}
«ENDDEFINE»

«DEFINE isInDefaultEditorContext FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
static boolean isInDefaultEditorContext(Object object) {
	if(shouldConstraintsBePrivate() && !constraintsActive) {
		return false;
	}
	if (object instanceof org.eclipse.gmf.runtime.notation.View) {
		return constraintsActive && «EXPAND xpt::editor::VisualIDRegistry::modelID».equals(«EXPAND xpt::editor::VisualIDRegistry::getModelIDMethodCall»((org.eclipse.gmf.runtime.notation.View) object));
	}
	return true;
}
«ENDDEFINE»

«DEFINE Selectors FOR gmfgen::GenAuditRoot-»
«EXPAND SelectorClass(this) FOREACH getClientContextIDs()-»
«ENDDEFINE»

«DEFINE SelectorClass(gmfgen::GenAuditRoot root) FOR String-»
«LET (gmfgen::GenAuditRule) root.getAuditsForClientContextID(this).first() AS auditForClientContext-»
«EXPAND xpt::Common::generatedClassComment»
public static class «auditForClientContext.contextSelectorLocalClassName» implements org.eclipse.emf.validation.model.IClientSelector {
	«EXPAND selects FOR auditForClientContext.target-»
}
«ENDLET-»
«ENDDEFINE»

«DEFINE selects FOR gmfgen::GenDiagramElementTarget-»
«EXPAND xpt::Common::generatedMemberComment»
public boolean selects(Object object) {
«IF !element.isEmpty()-»
	if(isInDefaultEditorContext(object) && object instanceof org.eclipse.gmf.runtime.notation.View) {
		int visualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR ((gmfgen::GenCommonBase)element.first()).getDiagram()»((org.eclipse.gmf.runtime.notation.View) object);
		switch (visualID) {
			«EXPAND caseVisualID FOREACH element-»
		}
	}
«ENDIF-»
	return false;
}
«ENDDEFINE»

«DEFINE caseVisualID FOR gmfgen::GenCommonBase-»
case «EXPAND xpt::editor::VisualIDRegistry::visualID»:
	return true;
«ENDDEFINE»

«DEFINE selects FOR gmfgen::GenAuditable-»
«EXPAND xpt::Common::generatedMemberComment»
public boolean selects(Object object) {
	return isInDefaultEditorContext(object);	
}	
«ENDDEFINE»

«DEFINE getNotationTraversalStrategy FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
static org.eclipse.emf.validation.service.ITraversalStrategy getNotationTraversalStrategy(org.eclipse.emf.validation.service.IBatchValidator validator) {
«IF editorGen.audits.usesNotationContextSwitch()-»	
	return new CtxSwitchStrategy(validator);
«ELSE-»
	return validator.getDefaultTraversalStrategy();
«ENDIF-»
}
«ENDDEFINE»

«DEFINE CtxSwitchStrategy FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private static class CtxSwitchStrategy implements org.eclipse.emf.validation.service.ITraversalStrategy {
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.emf.validation.service.ITraversalStrategy defaultStrategy;
	«EXPAND xpt::Common::generatedMemberComment»
	private String currentSemanticCtxId;
	«EXPAND xpt::Common::generatedMemberComment»
	private boolean ctxChanged = true;
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.emf.ecore.EObject currentTarget;
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.emf.ecore.EObject preFetchedNextTarget;
	«EXPAND xpt::Common::generatedMemberComment»
	CtxSwitchStrategy(org.eclipse.emf.validation.service.IBatchValidator validator) {
		this.defaultStrategy = validator.getDefaultTraversalStrategy();
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public void elementValidated(org.eclipse.emf.ecore.EObject element, org.eclipse.core.runtime.IStatus status) {
		defaultStrategy.elementValidated(element, status);
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public boolean hasNext() {
		return defaultStrategy.hasNext();
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public boolean isClientContextChanged() {
		if(preFetchedNextTarget == null) {
			preFetchedNextTarget = next();
			prepareNextClientContext(preFetchedNextTarget);
		}
		return ctxChanged;
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.emf.ecore.EObject next() {
		org.eclipse.emf.ecore.EObject nextTarget = preFetchedNextTarget;
		if(nextTarget == null) {
			nextTarget = defaultStrategy.next();
		}
		this.preFetchedNextTarget = null;
		return this.currentTarget = nextTarget;
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public void startTraversal(java.util.Collection traversalRoots, org.eclipse.core.runtime.IProgressMonitor monitor) {
		defaultStrategy.startTraversal(traversalRoots, monitor);
	}
	«EXPAND xpt::Common::generatedMemberComment»
	private void prepareNextClientContext(org.eclipse.emf.ecore.EObject nextTarget) {
		if (nextTarget != null && currentTarget != null) {
			if (nextTarget instanceof org.eclipse.gmf.runtime.notation.View) {
				org.eclipse.gmf.runtime.notation.View targetView = (org.eclipse.gmf.runtime.notation.View) nextTarget;
				int id = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(targetView);
				String nextSemanticId = null;
«LET editorGen.audits.getViewsThatNeedSelectorClass() AS viewsWithSelector-»
	«IF viewsWithSelector.size() > 1-»
				switch (id) {
				«FOREACH viewsWithSelector AS nextView-»
				case «EXPAND xpt::editor::VisualIDRegistry::visualID FOR nextView»:
				«ENDFOREACH-»
					nextSemanticId = targetView.getType();
				}
	«ELSEIF viewsWithSelector.size() == 1-»
				if (id == «EXPAND xpt::editor::VisualIDRegistry::visualID FOR (gmfgen::GenCommonBase) viewsWithSelector.first()») {
					nextSemanticId = targetView.getType();
				}
	«ENDIF-»
«ENDLET-»
				if ((currentSemanticCtxId != null && !currentSemanticCtxId.equals(nextSemanticId))
						|| (nextSemanticId != null && !nextSemanticId.equals(currentSemanticCtxId))) {
					this.ctxChanged = true;
				}
				currentSemanticCtxId = nextSemanticId;
			} else {
				// context of domain model
				this.ctxChanged = currentSemanticCtxId != null;
				currentSemanticCtxId = null;
			}
		} else {
			this.ctxChanged = false;
		}
	}
}// CtxSwitchStrategy
«ENDDEFINE»

@


1.2
log
@[150177] phase I, refactor existing code: completed - all metamodel access moved to MetaModel template, LiteRT version updated
@
text
@d281 1
a281 1
		«getQualifiedInstanceClassName(genClassifier)» self = («getQualifiedInstanceClassName(genClassifier)») context;
@


1.1
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d266 1
a266 1
	evalCtx = ((org.eclipse.emf.ecore.EObject) evalCtx).eGet(«EXPAND xpt::Common::metaFeatureAccessor FOR attribute»);
d279 1
a279 1
new «container.getAbstractExpressionQualifiedClassName()»(«EXPAND xpt::Common::metaClassAccessor FOR genClassifier») {
@


1.1.2.1
log
@file ValidationProvider.xpt was added on branch R2_0_maintenance on 2007-09-17 16:02:13 +0000
@
text
@d1 326
@


1.1.2.2
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator)
@
text
@a0 326
/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::providers::ValidationUtils»
«EXTENSION xpt::GenModelUtils»

«DEFINE ValidationProvider FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «validationProviderClassName» «EXPAND supertypes» {
	«EXPAND shouldConstraintsBePrivate-»

	«EXPAND constraintsActive-»

	«EXPAND runWithActiveConstraints-»

	«EXPAND isInDefaultEditorContext-»

	«EXPAND Selectors FOR editorGen.audits-»

«IF hasNotationModelAudit()-»
	«EXPAND getNotationTraversalStrategy-»
«ENDIF-»

«IF editorGen.audits.usesNotationContextSwitch()-»
	«EXPAND CtxSwitchStrategy-»
«ENDIF-»

	«EXPAND AuditClass FOREACH editorGen.audits.rules.select(e| e.requiresConstraintAdapter && e.rule != null && e.target != null && e.target.getContext() != null)-»

	«EXPAND javaConstraints-»

	«EXPAND additions-»
} //«validationProviderClassName»
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE shouldConstraintsBePrivate FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static boolean shouldConstraintsBePrivate() {
	return false;
}
«ENDDEFINE»

«DEFINE constraintsActive FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static boolean constraintsActive = false;	
«ENDDEFINE»

«DEFINE runWithActiveConstraints FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static void runWithConstraints(org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain, Runnable operation) {
	final Runnable op = operation;
	Runnable task = new Runnable() {
		public void run() {
			try {
				constraintsActive = true;
				op.run();
			} finally {
				constraintsActive = false;
			}
		}
	};
	if(editingDomain != null) {
		try {
			editingDomain.runExclusive(task);
		} catch (Exception e) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Validation failed", e); «EXPAND xpt::Common::nonNLS»
		}
	} else {
		task.run();
	}
}
«ENDDEFINE»

«DEFINE isInDefaultEditorContext FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
static boolean isInDefaultEditorContext(Object object) {
	if(shouldConstraintsBePrivate() && !constraintsActive) {
		return false;
	}
	if (object instanceof org.eclipse.gmf.runtime.notation.View) {
		return constraintsActive && «EXPAND xpt::editor::VisualIDRegistry::modelID».equals(«EXPAND xpt::editor::VisualIDRegistry::getModelIDMethodCall»((org.eclipse.gmf.runtime.notation.View) object));
	}
	return true;
}
«ENDDEFINE»

«DEFINE Selectors FOR gmfgen::GenAuditRoot-»
«EXPAND SelectorClass(this) FOREACH getClientContextIDs()-»
«ENDDEFINE»

«DEFINE SelectorClass(gmfgen::GenAuditRoot root) FOR String-»
«LET (gmfgen::GenAuditRule) root.getAuditsForClientContextID(this).first() AS auditForClientContext-»
«EXPAND xpt::Common::generatedClassComment»
public static class «auditForClientContext.contextSelectorLocalClassName» implements org.eclipse.emf.validation.model.IClientSelector {
	«EXPAND selects FOR auditForClientContext.target-»
}
«ENDLET-»
«ENDDEFINE»

«DEFINE selects FOR gmfgen::GenDiagramElementTarget-»
«EXPAND xpt::Common::generatedMemberComment»
public boolean selects(Object object) {
«IF !element.isEmpty()-»
	if(isInDefaultEditorContext(object) && object instanceof org.eclipse.gmf.runtime.notation.View) {
		int visualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR ((gmfgen::GenCommonBase)element.first()).getDiagram()»((org.eclipse.gmf.runtime.notation.View) object);
		switch (visualID) {
			«EXPAND caseVisualID FOREACH element-»
		}
	}
«ENDIF-»
	return false;
}
«ENDDEFINE»

«DEFINE caseVisualID FOR gmfgen::GenCommonBase-»
case «EXPAND xpt::editor::VisualIDRegistry::visualID»:
	return true;
«ENDDEFINE»

«DEFINE selects FOR gmfgen::GenAuditable-»
«EXPAND xpt::Common::generatedMemberComment»
public boolean selects(Object object) {
	return isInDefaultEditorContext(object);	
}	
«ENDDEFINE»

«DEFINE getNotationTraversalStrategy FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
static org.eclipse.emf.validation.service.ITraversalStrategy getNotationTraversalStrategy(org.eclipse.emf.validation.service.IBatchValidator validator) {
«IF editorGen.audits.usesNotationContextSwitch()-»	
	return new CtxSwitchStrategy(validator);
«ELSE-»
	return validator.getDefaultTraversalStrategy();
«ENDIF-»
}
«ENDDEFINE»

«DEFINE CtxSwitchStrategy FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private static class CtxSwitchStrategy implements org.eclipse.emf.validation.service.ITraversalStrategy {
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.emf.validation.service.ITraversalStrategy defaultStrategy;
	«EXPAND xpt::Common::generatedMemberComment»
	private String currentSemanticCtxId;
	«EXPAND xpt::Common::generatedMemberComment»
	private boolean ctxChanged = true;
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.emf.ecore.EObject currentTarget;
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.emf.ecore.EObject preFetchedNextTarget;
	«EXPAND xpt::Common::generatedMemberComment»
	CtxSwitchStrategy(org.eclipse.emf.validation.service.IBatchValidator validator) {
		this.defaultStrategy = validator.getDefaultTraversalStrategy();
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public void elementValidated(org.eclipse.emf.ecore.EObject element, org.eclipse.core.runtime.IStatus status) {
		defaultStrategy.elementValidated(element, status);
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public boolean hasNext() {
		return defaultStrategy.hasNext();
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public boolean isClientContextChanged() {
		if(preFetchedNextTarget == null) {
			preFetchedNextTarget = next();
			prepareNextClientContext(preFetchedNextTarget);
		}
		return ctxChanged;
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.emf.ecore.EObject next() {
		org.eclipse.emf.ecore.EObject nextTarget = preFetchedNextTarget;
		if(nextTarget == null) {
			nextTarget = defaultStrategy.next();
		}
		this.preFetchedNextTarget = null;
		return this.currentTarget = nextTarget;
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public void startTraversal(java.util.Collection traversalRoots, org.eclipse.core.runtime.IProgressMonitor monitor) {
		defaultStrategy.startTraversal(traversalRoots, monitor);
	}
	«EXPAND xpt::Common::generatedMemberComment»
	private void prepareNextClientContext(org.eclipse.emf.ecore.EObject nextTarget) {
		if (nextTarget != null && currentTarget != null) {
			if (nextTarget instanceof org.eclipse.gmf.runtime.notation.View) {
				org.eclipse.gmf.runtime.notation.View targetView = (org.eclipse.gmf.runtime.notation.View) nextTarget;
				int id = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(targetView);
				String nextSemanticId = null;
«LET editorGen.audits.getViewsThatNeedSelectorClass() AS viewsWithSelector-»
	«IF viewsWithSelector.size() > 1-»
				switch (id) {
				«FOREACH viewsWithSelector AS nextView-»
				case «EXPAND xpt::editor::VisualIDRegistry::visualID FOR nextView»:
				«ENDFOREACH-»
					nextSemanticId = targetView.getType();
				}
	«ELSEIF viewsWithSelector.size() == 1-»
				if (id == «EXPAND xpt::editor::VisualIDRegistry::visualID FOR (gmfgen::GenCommonBase) viewsWithSelector.first()») {
					nextSemanticId = targetView.getType();
				}
	«ENDIF-»
«ENDLET-»
				if ((currentSemanticCtxId != null && !currentSemanticCtxId.equals(nextSemanticId))
						|| (nextSemanticId != null && !nextSemanticId.equals(currentSemanticCtxId))) {
					this.ctxChanged = true;
				}
				currentSemanticCtxId = nextSemanticId;
			} else {
				// context of domain model
				this.ctxChanged = currentSemanticCtxId != null;
				currentSemanticCtxId = null;
			}
		} else {
			this.ctxChanged = false;
		}
	}
}// CtxSwitchStrategy
«ENDDEFINE»

«DEFINE AuditClass FOR gmfgen::GenAuditRule-»
«EXPAND xpt::Common::generatedClassComment»
public static class «getConstraintAdapterLocalClassName()» extends org.eclipse.emf.validation.AbstractModelConstraint {
	«EXPAND xpt::Common::generatedMemberComment»
	private «root.editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()» expression;
	«EXPAND xpt::Common::generatedMemberComment»
	public «this.getConstraintAdapterLocalClassName()»() {
		expression = «EXPAND getExpression(root.editorGen.diagram, rule, target.getContext()) FOR root.editorGen.expressionProviders.getProvider(rule)»;
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.core.runtime.IStatus validate(org.eclipse.emf.validation.IValidationContext ctx) {
		Object evalCtx = ctx.getTarget();
		«EXPAND adjustEvalCtx(root.editorGen.diagram) FOR target-»
		Object result = expression.evaluate(evalCtx);
		if(result instanceof Boolean && ((Boolean)result).booleanValue()) {
			return org.eclipse.core.runtime.Status.OK_STATUS;
		}
		return ctx.createFailureStatus(new Object[] { formatElement(ctx.getTarget()) }); 
	}
	«EXPAND AuditClass_formatElement-»
}
«ENDDEFINE»

«DEFINE adjustEvalCtx(gmfgen::GenDiagram diagram) FOR gmfgen::GenAuditable»«ENDDEFINE»

«DEFINE adjustEvalCtx(gmfgen::GenDiagram diagram) FOR gmfgen::GenDomainAttributeTarget-»
if(evalCtx instanceof org.eclipse.emf.ecore.EObject) {
	evalCtx = ((org.eclipse.emf.ecore.EObject) evalCtx).eGet(«EXPAND xpt::Common::metaFeatureAccessor FOR attribute»);
}
«ENDDEFINE»

«DEFINE adjustEvalCtx(gmfgen::GenDiagram diagram) FOR gmfgen::GenAuditedMetricTarget-»
evalCtx = «diagram.getMetricProviderQualifiedClassName()».calculateMetric(«toStringLiteral(metric.key)», evalCtx);	«EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenExpressionProviderBase»null«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenExpressionInterpreter»«EXPAND xpt::expressions::getExpression::getExpression(valueSpec, genClassifier, false)»«ENDDEFINE»

«DEFINE getExpression(gmfgen::GenDiagram diagram, gmfgen::ValueExpression valueSpec, genmodel::GenClassifier genClassifier) FOR gmfgen::GenJavaExpressionProvider-»
new «container.getAbstractExpressionQualifiedClassName()»(«EXPAND xpt::Common::metaClassAccessor FOR genClassifier») {
	protected Object doEvaluate(Object context, java.util.Map env) {
		«getQualifiedInstanceClassName(genClassifier)» self = («getQualifiedInstanceClassName(genClassifier)») context;
		return «EXPAND javaConstraintsClassName FOR diagram».«this.getOperationName(valueSpec)»(self);
	}
}«-»
«ENDDEFINE»

«DEFINE AuditClass_formatElement FOR gmfgen::GenAuditRule-»
«EXPAND xpt::Common::generatedMemberComment»
protected String formatElement(org.eclipse.emf.ecore.EObject object) {
	if (object == null) {
		return String.valueOf(object);
	}
	org.eclipse.emf.common.notify.AdapterFactory adapterFactory = «root.editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemProvidersAdapterFactory();
	org.eclipse.emf.edit.provider.IItemLabelProvider labelProvider = (org.eclipse.emf.edit.provider.IItemLabelProvider) adapterFactory.adapt(object, org.eclipse.emf.edit.provider.IItemLabelProvider.class);
	if (labelProvider != null) {
		return object.eClass() + " " + labelProvider.getText(object);
	}
	return object.toString();
}
«ENDDEFINE»

«DEFINE javaConstraints FOR gmfgen::GenDiagram-»
«LET getJavaAuditRules() AS javaAuditRules-»
«IF javaAuditRules.size() > 0-»
«EXPAND xpt::Common::generatedClassComment»
static class «EXPAND javaConstraintsClassName» {
	«EXPAND defineJavaConstraintOperation(editorGen.expressionProviders) FOREACH javaAuditRules-»
}	//«EXPAND javaConstraintsClassName»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenExpressionProviderContainer expressionProviders) FOR gmfgen::GenAuditRule-»
«EXPAND defineJavaConstraintOperation(this) FOR expressionProviders.getProvider(rule)-»
«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenAuditRule rule) FOR gmfgen::GenExpressionProviderBase»«ENDDEFINE»

«DEFINE defineJavaConstraintOperation(gmfgen::GenAuditRule rule) FOR gmfgen::GenJavaExpressionProvider-»
«EXPAND xpt::expressions::javaExpressionOperation::javaExpressionOperation(rule.rule, rule.target.getContext(), null)-»
«ENDDEFINE»

«DEFINE javaConstraintsClassName FOR gmfgen::GenDiagram»JavaAudits«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

@


