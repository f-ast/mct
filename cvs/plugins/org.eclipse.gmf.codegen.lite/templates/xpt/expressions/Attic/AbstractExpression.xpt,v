head	1.2;
access;
symbols
	v20080910-1520:1.2
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080322-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070921-0000:1.1.2.2
	R2_0_maintenance:1.1.0.2
	v20070903-0000:1.1;
locks; strict;
comment	@# @;


1.2
date	2008.05.05.11.22.38;	author atikhomirov;	state dead;
branches;
next	1.1;
commitid	2e57481eedfe4567;

1.1
date	2007.07.04.13.22.26;	author bblajer;	state Exp;
branches
	1.1.2.1;
next	;
commitid	405d468b9f0f4567;

1.1.2.1
date	2007.07.04.13.22.26;	author bblajer;	state dead;
branches;
next	1.1.2.2;
commitid	7b9846eea5004567;

1.1.2.2
date	2007.09.17.16.02.13;	author bblajer;	state Exp;
branches;
next	;
commitid	7b9846eea5004567;


desc
@@


1.2
log
@[226725] Refactor AbstractExpression to be used in Lite RT
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»

«DEFINE AbstractExpression FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «editorGen.expressionProviders.expressionsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public abstract class «editorGen.expressionProviders.abstractExpressionClassName» «EXPAND supertypes» {		
	«EXPAND debugOptions-»
	«EXPAND status-»

	«EXPAND body-»

	«EXPAND context-»

	«EXPAND ctors-»

	«EXPAND evaluate-»

	«EXPAND assignTo-»

	«EXPAND performCast-»

	«EXPAND nullExpression-»

	«EXPAND NoImplException-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE debugOptions FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static final boolean DISABLED_NO_IMPL_EXCEPTION_LOG = Boolean.valueOf(org.eclipse.core.runtime.Platform.getDebugOption(«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getBundle().getSymbolicName() + "/debug/disableNoExprImplExceptionLog")).booleanValue();	«EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE status FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.core.runtime.IStatus status = org.eclipse.core.runtime.Status.OK_STATUS;	

«EXPAND xpt::Common::generatedMemberComment»
protected void setStatus(int severity, String message, Throwable throwable) {		
	String pluginID = «editorGen.plugin.getActivatorQualifiedClassName()».ID;
	this.status = new org.eclipse.core.runtime.Status(severity, pluginID, -1, (message != null) ? message : "", throwable); «EXPAND xpt::Common::nonNLS»
	if(!this.status.isOK()) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Expression problem:" + message + "body:"+ body(), throwable); «EXPAND xpt::Common::nonNLS» «EXPAND xpt::Common::nonNLS(2)»
	}
}

«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.core.runtime.IStatus getStatus() {
	return status;
}
«ENDDEFINE»

«DEFINE body FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private final String myBody;

«EXPAND xpt::Common::generatedMemberComment»
public String body() {
	return myBody;
}
«ENDDEFINE»

«DEFINE context FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private final org.eclipse.emf.ecore.EClassifier myContext;

«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.emf.ecore.EClassifier context() {
	return myContext;
}
«ENDDEFINE»

«DEFINE ctors FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected «editorGen.expressionProviders.abstractExpressionClassName»(org.eclipse.emf.ecore.EClassifier context) {
	this(null, context);
}

«EXPAND xpt::Common::generatedMemberComment»
protected «editorGen.expressionProviders.abstractExpressionClassName»(String body, org.eclipse.emf.ecore.EClassifier context) {
	myBody = body;
	myContext = context;
}
«ENDDEFINE»

«DEFINE evaluate FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected abstract Object doEvaluate(Object context, java.util.Map env);

«EXPAND xpt::Common::generatedMemberComment»
public Object evaluate(Object context) {
	return evaluate(context, java.util.Collections.EMPTY_MAP);
}

«EXPAND xpt::Common::generatedMemberComment»
public Object evaluate(Object context, java.util.Map env) {
	if(context().isInstance(context)) {
		try {
			return doEvaluate(context, env);
		} catch(Exception e) {
			if(DISABLED_NO_IMPL_EXCEPTION_LOG && e instanceof NoImplException) {
				return null;
			}
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Expression evaluation failure: " + body(), e);	«EXPAND xpt::Common::nonNLS»
		}
	}
	return null;
}
«ENDDEFINE»

«DEFINE assignTo FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public void assignTo(org.eclipse.emf.ecore.EStructuralFeature feature, org.eclipse.emf.ecore.EObject target) {
	Object value = evaluate(target);
	value = (value != null) ? performCast(value, feature) : null;
	if (feature.isMany()) {
		java.util.Collection destCollection = (java.util.Collection) target.eGet(feature);
		destCollection.clear();
		if(value instanceof java.util.Collection) {
			java.util.Collection valueCollection = (java.util.Collection) value;
			for (java.util.Iterator it = valueCollection.iterator(); it.hasNext();) {
				destCollection.add(performCast(it.next(), feature));
			}
		} else {
			destCollection.add(value);
		}
		return;
	}
	target.eSet(feature, value);
}
«ENDDEFINE»

«DEFINE performCast FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected Object performCast(Object value, org.eclipse.emf.ecore.ETypedElement targetType) {
	if(targetType.getEType() == null || targetType.getEType().getInstanceClass() == null) {
		return value;
	}
	Class targetClass = targetType.getEType().getInstanceClass();
	if(value != null && value instanceof Number) {
		Number num = (Number)value;
		Class valClass = value.getClass();
		Class targetWrapperClass = targetClass;
		if(targetClass.isPrimitive()) {
			targetWrapperClass = org.eclipse.emf.ecore.util.EcoreUtil.wrapperClassFor(targetClass);
		}
		if(valClass.equals(targetWrapperClass)) {
			return value;
		}
		if(Number.class.isAssignableFrom(targetWrapperClass)) {
			if(targetWrapperClass.equals(Byte.class)) return new Byte(num.byteValue());
			if(targetWrapperClass.equals(Integer.class)) return new Integer(num.intValue());
			if(targetWrapperClass.equals(Short.class)) return new Short(num.shortValue());
			if(targetWrapperClass.equals(Long.class)) return new Long(num.longValue());					
			if(targetWrapperClass.equals(java.math.BigInteger.class)) return java.math.BigInteger.valueOf(num.longValue());
			if(targetWrapperClass.equals(Float.class)) return new Float(num.floatValue());
			if(targetWrapperClass.equals(Double.class)) return new Double(num.doubleValue());
			if(targetWrapperClass.equals(java.math.BigDecimal.class)) return new java.math.BigDecimal(num.doubleValue());
		}
	}
	return value;
}
«ENDDEFINE»

«DEFINE nullExpression FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static final «editorGen.expressionProviders.abstractExpressionClassName» createNullExpression(org.eclipse.emf.ecore.EClassifier context) {
	return new «editorGen.expressionProviders.abstractExpressionClassName»(context) {
		protected Object doEvaluate(Object context, java.util.Map env) {
			// TODO - log entry about not provider available for this expression
			return null;
		}
	};
}
«ENDDEFINE»

«DEFINE NoImplException FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
public static class NoImplException extends RuntimeException {
	«EXPAND xpt::Common::generatedMemberComment»
	public NoImplException(String message) {
		super(message);
	}
}	
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»
@


1.1
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@@


1.1.2.1
log
@file AbstractExpression.xpt was added on branch R2_0_maintenance on 2007-09-17 16:02:13 +0000
@
text
@d1 207
@


1.1.2.2
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator)
@
text
@a0 207
/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»

«DEFINE AbstractExpression FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «editorGen.expressionProviders.expressionsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public abstract class «editorGen.expressionProviders.abstractExpressionClassName» «EXPAND supertypes» {		
	«EXPAND debugOptions-»
	«EXPAND status-»

	«EXPAND body-»

	«EXPAND context-»

	«EXPAND ctors-»

	«EXPAND evaluate-»

	«EXPAND assignTo-»

	«EXPAND performCast-»

	«EXPAND nullExpression-»

	«EXPAND NoImplException-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE debugOptions FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private static final boolean DISABLED_NO_IMPL_EXCEPTION_LOG = Boolean.valueOf(org.eclipse.core.runtime.Platform.getDebugOption(«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getBundle().getSymbolicName() + "/debug/disableNoExprImplExceptionLog")).booleanValue();	«EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE status FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.core.runtime.IStatus status = org.eclipse.core.runtime.Status.OK_STATUS;	

«EXPAND xpt::Common::generatedMemberComment»
protected void setStatus(int severity, String message, Throwable throwable) {		
	String pluginID = «editorGen.plugin.getActivatorQualifiedClassName()».ID;
	this.status = new org.eclipse.core.runtime.Status(severity, pluginID, -1, (message != null) ? message : "", throwable); «EXPAND xpt::Common::nonNLS»
	if(!this.status.isOK()) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Expression problem:" + message + "body:"+ body(), throwable); «EXPAND xpt::Common::nonNLS» «EXPAND xpt::Common::nonNLS(2)»
	}
}

«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.core.runtime.IStatus getStatus() {
	return status;
}
«ENDDEFINE»

«DEFINE body FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private final String myBody;

«EXPAND xpt::Common::generatedMemberComment»
public String body() {
	return myBody;
}
«ENDDEFINE»

«DEFINE context FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private final org.eclipse.emf.ecore.EClassifier myContext;

«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.emf.ecore.EClassifier context() {
	return myContext;
}
«ENDDEFINE»

«DEFINE ctors FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected «editorGen.expressionProviders.abstractExpressionClassName»(org.eclipse.emf.ecore.EClassifier context) {
	this(null, context);
}

«EXPAND xpt::Common::generatedMemberComment»
protected «editorGen.expressionProviders.abstractExpressionClassName»(String body, org.eclipse.emf.ecore.EClassifier context) {
	myBody = body;
	myContext = context;
}
«ENDDEFINE»

«DEFINE evaluate FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected abstract Object doEvaluate(Object context, java.util.Map env);

«EXPAND xpt::Common::generatedMemberComment»
public Object evaluate(Object context) {
	return evaluate(context, java.util.Collections.EMPTY_MAP);
}

«EXPAND xpt::Common::generatedMemberComment»
public Object evaluate(Object context, java.util.Map env) {
	if(context().isInstance(context)) {
		try {
			return doEvaluate(context, env);
		} catch(Exception e) {
			if(DISABLED_NO_IMPL_EXCEPTION_LOG && e instanceof NoImplException) {
				return null;
			}
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Expression evaluation failure: " + body(), e);	«EXPAND xpt::Common::nonNLS»
		}
	}
	return null;
}
«ENDDEFINE»

«DEFINE assignTo FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public void assignTo(org.eclipse.emf.ecore.EStructuralFeature feature, org.eclipse.emf.ecore.EObject target) {
	Object value = evaluate(target);
	value = (value != null) ? performCast(value, feature) : null;
	if (feature.isMany()) {
		java.util.Collection destCollection = (java.util.Collection) target.eGet(feature);
		destCollection.clear();
		if(value instanceof java.util.Collection) {
			java.util.Collection valueCollection = (java.util.Collection) value;
			for (java.util.Iterator it = valueCollection.iterator(); it.hasNext();) {
				destCollection.add(performCast(it.next(), feature));
			}
		} else {
			destCollection.add(value);
		}
		return;
	}
	target.eSet(feature, value);
}
«ENDDEFINE»

«DEFINE performCast FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected Object performCast(Object value, org.eclipse.emf.ecore.ETypedElement targetType) {
	if(targetType.getEType() == null || targetType.getEType().getInstanceClass() == null) {
		return value;
	}
	Class targetClass = targetType.getEType().getInstanceClass();
	if(value != null && value instanceof Number) {
		Number num = (Number)value;
		Class valClass = value.getClass();
		Class targetWrapperClass = targetClass;
		if(targetClass.isPrimitive()) {
			targetWrapperClass = org.eclipse.emf.ecore.util.EcoreUtil.wrapperClassFor(targetClass);
		}
		if(valClass.equals(targetWrapperClass)) {
			return value;
		}
		if(Number.class.isAssignableFrom(targetWrapperClass)) {
			if(targetWrapperClass.equals(Byte.class)) return new Byte(num.byteValue());
			if(targetWrapperClass.equals(Integer.class)) return new Integer(num.intValue());
			if(targetWrapperClass.equals(Short.class)) return new Short(num.shortValue());
			if(targetWrapperClass.equals(Long.class)) return new Long(num.longValue());					
			if(targetWrapperClass.equals(java.math.BigInteger.class)) return java.math.BigInteger.valueOf(num.longValue());
			if(targetWrapperClass.equals(Float.class)) return new Float(num.floatValue());
			if(targetWrapperClass.equals(Double.class)) return new Double(num.doubleValue());
			if(targetWrapperClass.equals(java.math.BigDecimal.class)) return new java.math.BigDecimal(num.doubleValue());
		}
	}
	return value;
}
«ENDDEFINE»

«DEFINE nullExpression FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public static final «editorGen.expressionProviders.abstractExpressionClassName» createNullExpression(org.eclipse.emf.ecore.EClassifier context) {
	return new «editorGen.expressionProviders.abstractExpressionClassName»(context) {
		protected Object doEvaluate(Object context, java.util.Map env) {
			// TODO - log entry about not provider available for this expression
			return null;
		}
	};
}
«ENDDEFINE»

«DEFINE NoImplException FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
public static class NoImplException extends RuntimeException {
	«EXPAND xpt::Common::generatedMemberComment»
	public NoImplException(String message) {
		super(message);
	}
}	
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»
@


