head	1.7;
access;
symbols
	v20080910-1520:1.7
	v20080722-1827:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080507-1326:1.7
	v20080501-1739:1.6
	v20080425-1959:1.6
	v20080322-0000:1.6
	v20071108-0000:1.5
	v20071003-0000:1.5
	v20070921-0000:1.4
	v20070915-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070614-1400:1.4
	v20070608-1300:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070520-1200:1.4
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2;
locks; strict;
comment	@# @;


1.7
date	2008.05.07.13.55.38;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	388c4821b4d44567;

1.6
date	2008.02.26.22.50.33;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	405e47c497b74567;

1.5
date	2007.09.18.10.18.54;	author bblajer;	state Exp;
branches;
next	1.4;
commitid	6ac646efa60d4567;

1.4
date	2007.05.18.21.17.25;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	25e5464e17e24567;

1.3
date	2007.04.04.11.18.16;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	265a461389784567;

1.2
date	2007.02.05.15.57.37;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	31d945c753f04567;

1.1
date	2007.02.02.17.14.32;	author bblajer;	state Exp;
branches;
next	;
commitid	78d445c371764567;


desc
@@


1.7
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::providers::ValidationUtils»

«DEFINE Plugin FOR gmfgen::GenPlugin-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «editorGen.editor.packageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «activatorClassName» extends org.eclipse.ui.plugin.AbstractUIPlugin {

	«EXPAND xpt::Common::generatedMemberComment»
	public static final String ID = "«iD»"; «EXPAND xpt::Common::nonNLS»

	«EXPAND xpt::Common::generatedMemberComment»
	private static «activatorClassName» instance;

	«EXPAND xpt::Common::generatedMemberComment»
	public «activatorClassName»() {
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void start(org.osgi.framework.BundleContext context) throws Exception {
		super.start(context);
		instance = this;
«EXPAND initDebugOptions-»
«EXPAND hookServices-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void stop(org.osgi.framework.BundleContext context) throws Exception {
«EXPAND unhookServices-»
		instance = null;
		super.stop(context);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public static «activatorClassName» getInstance() {
		return instance;
	}

«EXPAND adapterFactory-»
«EXPAND validationStateManager-»
«EXPAND validationMarkerProvider-»
«EXPAND itemImages-»
«EXPAND bundledImages-»
«EXPAND bundleString-»
«EXPAND logging-»
«EXPAND debugOptions-»
«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE hookServices FOR gmfgen::GenPlugin-»
«EXPAND hookAdapterFactory-»
«EXPAND hookValidationStateManager-»
«EXPAND hookValidationMarkerProvider-»
«ENDDEFINE»

«DEFINE hookAdapterFactory FOR gmfgen::GenPlugin-»
		adapterFactory = createAdapterFactory();
«ENDDEFINE»

«DEFINE hookValidationStateManager FOR gmfgen::GenPlugin-»
«IF editorGen.diagram.validationNeeded()-»
		myValidationStateManager = new org.eclipse.gmf.runtime.lite.validation.ValidationStateManager();
«ENDIF-»
«ENDDEFINE»

«DEFINE hookValidationMarkerProvider FOR gmfgen::GenPlugin-»
«IF editorGen.diagram.validationNeeded() && null == editorGen.application-»
		myMarkerNavigationProvider = new «editorGen.diagram.getMarkerNavigationProviderQualifiedClassName()»();
		myValidationStateManager.addValidationStateListener(myMarkerNavigationProvider);
«ENDIF-»
«ENDDEFINE»

«DEFINE unhookServices FOR gmfgen::GenPlugin-»
«EXPAND unhookAdapterFactory-»
«EXPAND unhookValidationMarkerProvider-»
«EXPAND unhookValidationStateManager-»
«ENDDEFINE»

«DEFINE unhookAdapterFactory FOR gmfgen::GenPlugin-»
		adapterFactory.dispose();
		adapterFactory = null;
«ENDDEFINE»

«DEFINE unhookValidationMarkerProvider FOR gmfgen::GenPlugin-»
«IF editorGen.diagram.validationNeeded() && null == editorGen.application-»
		myValidationStateManager.removeValidationStateListener(myMarkerNavigationProvider);
		myMarkerNavigationProvider = null;
«ENDIF-»
«ENDDEFINE»

«DEFINE unhookValidationStateManager FOR gmfgen::GenPlugin-»
«IF editorGen.diagram.validationNeeded()-»
		myValidationStateManager = null;
«ENDIF-»
«ENDDEFINE»

«DEFINE adapterFactory FOR gmfgen::GenPlugin-»
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.emf.edit.provider.ComposedAdapterFactory adapterFactory;

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.edit.provider.ComposedAdapterFactory createAdapterFactory() {
		java.util.List factories = new java.util.ArrayList();
		fillItemProviderFactories(factories);
		return new org.eclipse.emf.edit.provider.ComposedAdapterFactory(factories);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void fillItemProviderFactories(java.util.List factories) {
«EXPAND MetaModel::PopulateItemProviderFactories("factories") FOR editorGen-»
		factories.add(new org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory());
		factories.add(new org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory());
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.emf.common.notify.AdapterFactory getItemProvidersAdapterFactory() {
		return adapterFactory;
	}
«ENDDEFINE»

«DEFINE validationStateManager FOR gmfgen::GenPlugin-»
«IF editorGen.diagram.validationNeeded()-»
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.lite.validation.ValidationStateManager myValidationStateManager;
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.lite.validation.ValidationStateManager getValidationStateManager() {
		return myValidationStateManager;
	}
«ENDIF-»
«ENDDEFINE»

«DEFINE validationMarkerProvider FOR gmfgen::GenPlugin-»
«IF editorGen.diagram.validationNeeded() && null == editorGen.application-»
	«EXPAND xpt::Common::generatedMemberComment»
	private «editorGen.diagram.getMarkerNavigationProviderQualifiedClassName()» myMarkerNavigationProvider;
«ENDIF-»
«ENDDEFINE»

«DEFINE itemImages FOR gmfgen::GenPlugin-»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.jface.resource.ImageDescriptor getItemImageDescriptor(Object item) {
		org.eclipse.emf.edit.provider.IItemLabelProvider labelProvider = (org.eclipse.emf.edit.provider.IItemLabelProvider) adapterFactory.adapt(item, org.eclipse.emf.edit.provider.IItemLabelProvider.class);
		if (labelProvider != null) {
«REM»
			// XXX dependency org.eclipse.emf.edit.ui is for ExtendedImageRegistry only. 
			// FIXME move image registry to plugin class code
«ENDREM-»
			return org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(item));
		}
		return null;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.swt.graphics.Image getItemImage(Object item) {
		org.eclipse.emf.edit.provider.IItemLabelProvider labelProvider = (org.eclipse.emf.edit.provider.IItemLabelProvider) adapterFactory.adapt(item, org.eclipse.emf.edit.provider.IItemLabelProvider.class);
		if (labelProvider != null) {
			return org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry.getInstance().getImage(labelProvider.getImage(item));
		}
		return null;
	}
«ENDDEFINE»

«DEFINE bundledImages FOR gmfgen::GenPlugin-»
	«EXPAND xpt::Common::generatedMemberComment("Returns an image descriptor for the image file at the given plug-in relative path.\n\n" +
	"@@param path the path\n" + 
	"@@return the image descriptor")»
	public static org.eclipse.jface.resource.ImageDescriptor getBundledImageDescriptor(String path) {
		return org.eclipse.ui.plugin.AbstractUIPlugin.imageDescriptorFromPlugin(ID, path);
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Respects images residing in any plug-in. If path is relative,\n" + 
	 "then this bundle is looked up for the image, otherwise, for absolute \n" + 
	 "path, first segment is taken as id of plug-in with image\n" + 
	 "\n" + 
	 "@@param path the path to image, either absolute (with plug-in id as first segment), or relative for bundled images\n" + 
	 "@@return the image descriptor")»
	public static org.eclipse.jface.resource.ImageDescriptor findImageDescriptor(String path) {
		final org.eclipse.core.runtime.IPath p = new org.eclipse.core.runtime.Path(path);
		if (p.isAbsolute() && p.segmentCount() > 1) {
			return org.eclipse.ui.plugin.AbstractUIPlugin.imageDescriptorFromPlugin(p.segment(0), p.removeFirstSegments(1).makeAbsolute().toString());
		} else {
			return getBundledImageDescriptor(p.makeAbsolute().toString());
		} 
	}
	
	«EXPAND xpt::Common::generatedMemberComment("Returns an image for the image file at the given plug-in relative path.\n" +
	"Client do not need to dispose this image. Images will be disposed automatically.\n\n" + 
	"@@param path the path\n" + 
	"@@return image instance")»
	public org.eclipse.swt.graphics.Image getBundledImage(String path) {
		org.eclipse.swt.graphics.Image image = getImageRegistry().get(path);
		if (image == null) {
			getImageRegistry().put(path, getBundledImageDescriptor(path));
			image = getImageRegistry().get(path);
		}
		return image;
	}
«ENDDEFINE»

«DEFINE bundleString FOR gmfgen::GenPlugin-»
	«EXPAND xpt::Common::generatedMemberComment»
	public String getBundleString(String key) {
		try {
			return org.eclipse.core.runtime.Platform.getResourceBundle(getBundle()).getString(key);
		} catch (java.util.MissingResourceException e) {
			return "!" + key + "!";	«EXPAND xpt::Common::nonNLS»	«EXPAND xpt::Common::nonNLS(2)»
		}
	}
«ENDDEFINE»

«DEFINE logging FOR gmfgen::GenPlugin-»
	«EXPAND xpt::Common::generatedMemberComment»
	public void logError(String error) {
		logError(error, null);
	}

	«EXPAND xpt::Common::generatedMemberComment("@@param throwable actual error or null could be passed")»
	public void logError(String error, Throwable throwable) {
		if (error == null && throwable != null) {
			error = throwable.getMessage();
		}
		getLog().log(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.ERROR, «activatorClassName».ID, org.eclipse.core.runtime.IStatus.OK, error, throwable));
		debug(error, throwable);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void logInfo(String message) {
		logInfo(message, null);
	}

	«EXPAND xpt::Common::generatedMemberComment("@@param throwable actual error or null could be passed")»
	public void logInfo(String message, Throwable throwable) {
		if (message == null && message != null) {
			message = throwable.getMessage();
		}
		getLog().log(new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.IStatus.INFO, «activatorClassName».ID, org.eclipse.core.runtime.IStatus.OK, message, throwable));
		debug(message, throwable);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private void debug(String message, Throwable throwable) {
		if (!isDebugging()) {
			return;
		}
		if (message != null) {
			System.err.println(message);
		}
		if (throwable != null) {
			throwable.printStackTrace();
		}
	}
«ENDDEFINE»

«DEFINE debugOptions FOR gmfgen::GenPlugin-»
«EXPAND strictFontOption-»
«ENDDEFINE»

«DEFINE strictFontOption FOR gmfgen::GenPlugin-»
«EXPAND xpt::Common::generatedMemberComment»
private static String STRICT_FONT_OPTION = ID + "/strictFont";	«EXPAND xpt::Common::nonNLS»

«EXPAND xpt::Common::generatedMemberComment»
private boolean myIsStrictFont;

«EXPAND xpt::Common::generatedMemberComment»
public boolean isStrictFont() {
	return myIsStrictFont;
}
«ENDDEFINE»

«DEFINE initDebugOptions FOR gmfgen::GenPlugin-»
«EXPAND initStrictFontOption-»
«ENDDEFINE»

«DEFINE initStrictFontOption FOR gmfgen::GenPlugin-»
myIsStrictFont = Boolean.valueOf(org.eclipse.core.runtime.Platform.getDebugOption(STRICT_FONT_OPTION)).booleanValue();
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenPlugin-»
«ENDDEFINE»
@


1.6
log
@[150177] phase I, refactor existing code: completed - all metamodel access moved to MetaModel template, LiteRT version updated
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.5
log
@1. Preferences for fonts and colors
2. ResourceManager employed to reuse fonts and colors used for styles
3. Option to check the availability of the font name that is specified in the style
4. Styles are initialized with defaults from preferences
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d128 1
a128 3
«FOREACH editorGen.getAllDomainGenPackages(true) AS genPackage-»
		factories.add(new «((GenPackage) genPackage).getQualifiedItemProviderAdapterFactoryClassName()»());
«ENDFOREACH-»
@


1.4
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d40 1
d63 1
d274 25
@


1.3
log
@User should be able to configure whether NON-NLS markers are shown or not
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.2
log
@added copyright to generated code
@
text
@d27 1
a27 1
	public static final String ID = "«iD»"; //$NON-NLS-1$
d224 1
a224 1
			return "!" + key + "!";	//$NON-NLS-1$	//$NON-NLS-2$
@


1.1
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@d20 1
d190 2
a191 2
	  "then this bundle is looked up for the image, otherwise, for absolute \n" + 
	  "path, first segment is taken as id of plug-in with image\n" + 
d193 2
a194 2
	  "@@param path the path to image, either absolute (with plug-in id as first segment), or relative for bundled images\n" + 
	  "@@return the image descriptor")»
@

