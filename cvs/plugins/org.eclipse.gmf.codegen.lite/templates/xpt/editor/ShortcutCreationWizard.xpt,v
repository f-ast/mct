head	1.2;
access;
symbols
	v20080910-1520:1.2
	v20080722-1827:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.2
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080507-1326:1.2
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080322-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070903-0000:1.1;
locks; strict;
comment	@# @;


1.2
date	2008.05.07.13.55.38;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	388c4821b4d44567;

1.1
date	2007.08.13.14.11.03;	author bblajer;	state Exp;
branches;
next	;
commitid	65c246c066754567;


desc
@@


1.2
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::editor::Wizard»
«EXTENSION xpt::editor::i18n»

«DEFINE className FOR gmfgen::GenDiagram»«defaultShortcutCreationWizardName()»«ENDDEFINE»

«DEFINE qualifiedClassName FOR gmfgen::GenDiagram»«editorGen.editor.packageName».«EXPAND className»«ENDDEFINE»

«DEFINE ShortcutCreationWizard FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «editorGen.editor.packageName»;

«EXPAND xpt::Common::generatedClassComment("Allows to add a shortcut to an element from a foreign model")»
public class «EXPAND className» «EXPAND supertypes» {
	«EXPAND editingDomain-»
	«EXPAND graphicalViewer-»
	«EXPAND parentView-»
	«EXPAND shortcutDomainModelURI-»
	«EXPAND shortcutDomainModelElement-»
	«EXPAND ctor-»
	«EXPAND addPages-»
	«EXPAND performFinish-»
	«EXPAND getCreateShortcutCommand-»
	«EXPAND SourceURISelectorPage-»
	«EXPAND ShortcutElementSelectorPage-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenDiagram»extends org.eclipse.jface.wizard.Wizard«ENDDEFINE»

«DEFINE editingDomain FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.transaction.TransactionalEditingDomain myEditingDomain;
«ENDDEFINE»

«DEFINE graphicalViewer FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gef.GraphicalViewer myGraphicalViewer;
«ENDDEFINE»

«DEFINE parentView FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.notation.View myParentView;
«ENDDEFINE»

«DEFINE shortcutDomainModelURI FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.common.util.URI myShortcutDomainModelURI;
«ENDDEFINE»

«DEFINE shortcutDomainModelElement FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.emf.ecore.EObject myShortcutDomainModelElement;
«ENDDEFINE»

«DEFINE ctor FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public «EXPAND className»(org.eclipse.gmf.runtime.notation.View parentView, org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain, org.eclipse.gef.GraphicalViewer graphicalViewer) {
	myParentView = parentView;
	myEditingDomain = editingDomain;
	myGraphicalViewer = graphicalViewer;
}
«ENDDEFINE»

«DEFINE addPages FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public void addPages() {
	addPage(new SourceURISelectorPage());
	addPage(new ShortcutElementSelectorPage());
}
«ENDDEFINE»

«DEFINE performFinish FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public boolean performFinish() {
	org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand createShortcutCommand = getCreateShortcutCommand();
	if (createShortcutCommand != null && createShortcutCommand.canExecute()) {
		if (myGraphicalViewer.getEditDomain() != null && myGraphicalViewer.getEditDomain().getCommandStack() != null) {
			myGraphicalViewer.getEditDomain().getCommandStack().execute(new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(myEditingDomain, createShortcutCommand));
		} else {
			new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(myEditingDomain, createShortcutCommand).execute();
		}
		return true;
	}
	return false;
}
«ENDDEFINE»

«DEFINE getCreateShortcutCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand getCreateShortcutCommand() {
	«FOREACH containsShortcutsTo AS nextModelID ITERATOR it-»
	«IF it.isFirstIteration()»org.eclipse.gmf.runtime.lite.shortcuts.IShortcutProvider «ENDIF»shortcutProvider = org.eclipse.gmf.runtime.lite.shortcuts.ShortcutProvidersRegistry.INSTANCE.getShortcutProvider(«IF nextModelID == editorGen.modelID»«getEditPartQualifiedClassName()».MODEL_ID«ELSE»"«nextModelID»"«ENDIF»);«IF nextModelID != editorGen.modelID»	«EXPAND xpt::Common::nonNLS»«ENDIF»
	if (shortcutProvider != null) {
		org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand result = shortcutProvider.getCreateShortcutCommand(myParentView, myShortcutDomainModelElement);
		if (result != null && result.canExecute()) {
			return result;
		}
	}
	«ENDFOREACH-»
	return null;
}
«ENDDEFINE»

«DEFINE SourceURISelectorPage FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private class SourceURISelectorPage extends «EXPAND xpt::editor::URISelectorPage::qualifiedClassName» {
	«EXPAND xpt::Common::generatedMemberComment»
	public SourceURISelectorPage() {
		super(«EXPAND xpt::Externalizer::accessorCall(i18nForNewShortcutWizardSourceURISelectorPageName()) FOR editorGen»);
		setTitle(«EXPAND xpt::Externalizer::accessorCall(i18nForNewShortcutWizardSourceURISelectorPageTitle()) FOR editorGen»);
		setDescription(«EXPAND xpt::Externalizer::accessorCall(i18nForNewShortcutWizardSourceURISelectorPageDescription()) FOR editorGen»);
	}
	«EXPAND xpt::Common::generatedMemberComment»
	protected String getFileExtension() {
		return null;
	}
	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean validatePage() {
		if (super.validatePage()) {
			myShortcutDomainModelURI = getFileURI();
			return true;
		}
		return false;
	}
	«EXPAND xpt::Common::generatedMemberComment»
	protected String validateFile(java.io.File file) {
		if (!file.exists()) {
			return «EXPAND xpt::Externalizer::accessorCall(i18nForNewShortcutWizardNoSourceFile()) FOR editorGen»;
		}
		return null;
	}
}
«ENDDEFINE»

«DEFINE ShortcutElementSelectorPage FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
private class ShortcutElementSelectorPage extends «EXPAND xpt::editor::ModelElementSelectionPage::qualifiedClassName» {
	«EXPAND xpt::Common::generatedMemberComment»
	protected ShortcutElementSelectorPage() {
		super(«EXPAND xpt::Externalizer::accessorCall(i18nForNewShortcutWizardShortcutElementSelectorPageName()) FOR editorGen»);
		setTitle(«EXPAND xpt::Externalizer::accessorCall(i18nForNewShortcutWizardShortcutElementSelectorPageTitle()) FOR editorGen»);
		setDescription(«EXPAND xpt::Externalizer::accessorCall(i18nForNewShortcutWizardShortcutElementSelectorPageDescription()) FOR editorGen»);
	}
	«EXPAND xpt::Common::generatedMemberComment»
	protected String getSelectionTitle() {
		return «EXPAND xpt::Externalizer::accessorCall(i18nForNewShortcutWizardShortcutElementSelectorPageLabelText()) FOR editorGen»;
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public void setVisible(boolean visible) {
		if (visible) {
			org.eclipse.emf.ecore.resource.Resource resource;
			try {
				resource = myEditingDomain.getResourceSet().getResource(myShortcutDomainModelURI, true);
			} catch (org.eclipse.emf.common.util.WrappedException e) {
				resource = null;
			}
			setModelResource(resource);
		}
		super.setVisible(visible);
	}
	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean validatePage() {
		myShortcutDomainModelElement = getModelElement();
		if (myShortcutDomainModelElement == null) {
			setErrorMessage(«EXPAND xpt::Externalizer::accessorCall(i18nForNewShortcutWizardShortcutElementSelectorPageNoElementSelected()) FOR editorGen»);
			return false;
		}
		if (myGraphicalViewer.getEditPartRegistry().get(myShortcutDomainModelElement) != null) {
			setErrorMessage(«EXPAND xpt::Externalizer::accessorCall(i18nForNewShortcutWizardShortcutElementSelectorPageDuplicateShortcut()) FOR editorGen»);
			myShortcutDomainModelElement = null;
			return false;
		}
		org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand createShortcutCommand = getCreateShortcutCommand();
		if (createShortcutCommand == null || !createShortcutCommand.canExecute()) {
			setErrorMessage(«EXPAND xpt::Externalizer::accessorCall(i18nForNewShortcutWizardShortcutElementSelectorPageCannotCreateShortcut()) FOR editorGen»);
			return false;
		} else {
			setErrorMessage(null);
			return true;
		}
	}
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
«IF isRichClientPlatform() && generateCreateShortcutAction()-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewShortcutWizardSourceURISelectorPageName())-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewShortcutWizardSourceURISelectorPageTitle())-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewShortcutWizardSourceURISelectorPageDescription())-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewShortcutWizardNoSourceFile())-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewShortcutWizardShortcutElementSelectorPageName())-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewShortcutWizardShortcutElementSelectorPageTitle())-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewShortcutWizardShortcutElementSelectorPageDescription())-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewShortcutWizardShortcutElementSelectorPageLabelText())-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewShortcutWizardShortcutElementSelectorPageNoElementSelected())-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewShortcutWizardShortcutElementSelectorPageDuplicateShortcut())-»
«EXPAND xpt::Externalizer::accessorField(i18nForNewShortcutWizardShortcutElementSelectorPageCannotCreateShortcut())-»
«ENDIF-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«IF isRichClientPlatform() && generateCreateShortcutAction()-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewShortcutWizardNoSourceFile(), "Source file does not exist")-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewShortcutWizardSourceURISelectorPageName(), "Select source file")-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewShortcutWizardSourceURISelectorPageTitle(), "Source file")-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewShortcutWizardSourceURISelectorPageDescription(), "Select file with semantic model element to be depicted as shortcut")-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewShortcutWizardShortcutElementSelectorPageName(), "Select shortcut element")-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewShortcutWizardShortcutElementSelectorPageTitle(), "Shortcut element")-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewShortcutWizardShortcutElementSelectorPageDescription(), "Select semantic model element to be depicted as shortcut")-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewShortcutWizardShortcutElementSelectorPageLabelText(), "&Select shortcut element")-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewShortcutWizardShortcutElementSelectorPageNoElementSelected(), "No shortcut element selected")-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewShortcutWizardShortcutElementSelectorPageDuplicateShortcut(), "Cannot create shortcut: the given semantic model element is already present on the diagram")-»
«EXPAND xpt::Externalizer::messageEntry(i18nForNewShortcutWizardShortcutElementSelectorPageCannotCreateShortcut(), "Cannot create shortcut with the given semantic model element")-»
«ENDIF-»
«ENDDEFINE»

@


1.1
log
@1. Don't cache templates if dynamic templates option is on;
2. [199747] Support shortcuts in the Lite diagrams (including notation model update for links between alien shortcuts);
3. Decorations should be visible;
4. TransactionalUpdateManager: more notifications to be dispatched to parents, make it possible to add more in subclasses;
5. On element creation, it should be given an opportunity to contribute its notational update commands;
6. [199749]: Delete from View supported (request, edit policy, command, UI action);
7. Add @@generated tags where they were missing;
8. ChildNotationModelRefresher: if the child feature is derived transient, notation model refresher should listen to containment feature.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@

