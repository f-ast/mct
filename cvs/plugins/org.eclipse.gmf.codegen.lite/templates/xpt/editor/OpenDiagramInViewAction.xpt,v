head	1.5;
access;
symbols
	v20080910-1520:1.5
	v20080722-1827:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080507-1326:1.5
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080322-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070921-0000:1.3.2.1
	v20070915-0000:1.3
	v20070903-0000:1.4
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.1
	v20070614-1400:1.1
	v20070608-1300:1.1
	v20070601-1400:1.1;
locks; strict;
comment	@# @;


1.5
date	2008.05.07.13.55.38;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	388c4821b4d44567;

1.4
date	2007.07.04.13.22.27;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	405d468b9f0f4567;

1.3
date	2007.06.20.10.16.10;	author bblajer;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	37dd4678fe694567;

1.2
date	2007.06.15.15.36.23;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	f534672b1f74567;

1.1
date	2007.05.29.14.55.32;	author bblajer;	state Exp;
branches;
next	;
commitid	2543465c3ee24567;

1.3.2.1
date	2007.09.17.16.02.12;	author bblajer;	state Exp;
branches;
next	;
commitid	7b9846eea5004567;


desc
@@


1.5
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::Util»
«EXTENSION xpt::editor::i18n»

«DEFINE OpenDiagramInViewAction FOR gmfgen::GenEditorView-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «editorGen.editor.packageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» «EXPAND supertypes» {
	«EXPAND attrs-»
	«EXPAND setActivePart-»
	«EXPAND selectionChanged-»
	«EXPAND run-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE qualifiedClassName FOR gmfgen::GenEditorView»«packageName».«EXPAND className»«ENDDEFINE»

«DEFINE className FOR gmfgen::GenEditorView»«validJavaIdentifier("OpenDiagramIn" + editorGen.modelID + "DiagramViewAction")»«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenEditorView»implements org.eclipse.ui.IObjectActionDelegate«ENDDEFINE»

«DEFINE attrs FOR gmfgen::GenEditorView-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.ui.IWorkbenchPart myPart;

«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.core.resources.IFile mySelectedModelFile;
«ENDDEFINE»

«DEFINE setActivePart FOR gmfgen::GenEditorView-»
«EXPAND xpt::Common::generatedMemberComment»
public void setActivePart(org.eclipse.jface.action.IAction action, org.eclipse.ui.IWorkbenchPart targetPart) {
	myPart = targetPart;
}
«ENDDEFINE»

«DEFINE selectionChanged FOR gmfgen::GenEditorView-»
«EXPAND xpt::Common::generatedMemberComment»
public void selectionChanged(org.eclipse.jface.action.IAction action, org.eclipse.jface.viewers.ISelection selection) {
	mySelectedModelFile = null;
	action.setEnabled(false);
	if (selection instanceof org.eclipse.jface.viewers.IStructuredSelection == false || selection.isEmpty()) {
		return;
	}
	mySelectedModelFile = (org.eclipse.core.resources.IFile) ((org.eclipse.jface.viewers.IStructuredSelection) selection).getFirstElement();
	action.setEnabled(mySelectedModelFile != null && mySelectedModelFile.exists());
}
«ENDDEFINE»

«DEFINE run FOR gmfgen::GenEditorView-»
«EXPAND xpt::Common::generatedMemberComment»
public void run(org.eclipse.jface.action.IAction action) {
	org.eclipse.gmf.runtime.notation.Diagram diagram = null;
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = «EXPAND createEditingDomain»;
	org.eclipse.emf.ecore.resource.ResourceSet resourceSet = editingDomain.getResourceSet();
	try {
		org.eclipse.emf.ecore.resource.Resource resource = resourceSet.getResource(org.eclipse.emf.common.util.URI.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);
		if (resource.getContents().isEmpty() || false == resource.getContents().get(0) instanceof org.eclipse.gmf.runtime.notation.Diagram) {
			org.eclipse.jface.dialogs.MessageDialog.openError(myPart.getSite().getShell(), «EXPAND xpt::Externalizer::accessorCall(i18nKeyForOpenDiagramInViewActionErrorTitle(editorGen)) FOR editorGen»,
					«EXPAND xpt::Externalizer::accessorCall(i18nKeyForOpenDiagramInViewActionCannotLoad(editorGen)) FOR editorGen»);
			return;
		}
		diagram = (org.eclipse.gmf.runtime.notation.Diagram) resource.getContents().get(0);
	} catch (org.eclipse.emf.common.util.WrappedException ex) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(
						"Unable to load resource: " + mySelectedModelFile.getFullPath().toString(), ex);	«EXPAND xpt::Common::nonNLS»
		org.eclipse.jface.dialogs.MessageDialog.openError(myPart.getSite().getShell(), «EXPAND xpt::Externalizer::accessorCall(i18nKeyForOpenDiagramInViewActionErrorTitle(editorGen)) FOR editorGen»,
				«EXPAND xpt::Externalizer::accessorCall(i18nKeyForOpenDiagramInViewActionExceptionLoading(editorGen)) FOR editorGen»);
		return;
	}
	try {
		org.eclipse.gmf.runtime.lite.parts.DiagramViewPart part = (org.eclipse.gmf.runtime.lite.parts.DiagramViewPart) myPart.getSite().getPage().showView(«getQualifiedClassName()».ID);
		part.showDiagram(editingDomain, org.eclipse.emf.ecore.util.EcoreUtil.getURI(diagram));
	} catch (org.eclipse.ui.PartInitException ex) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Unable to load resource: " + mySelectedModelFile.getFullPath().toString(), ex);
		org.eclipse.jface.dialogs.MessageDialog.openError(myPart.getSite().getShell(), «EXPAND xpt::Externalizer::accessorCall(i18nKeyForOpenDiagramInViewActionErrorTitle(editorGen)) FOR editorGen», 
			«EXPAND xpt::Externalizer::accessorCall(i18nKeyForOpenDiagramInViewActionPartInitException(editorGen)) FOR editorGen»);
	}
}
«ENDDEFINE»

«DEFINE createEditingDomain FOR gmfgen::GenEditorView»«EXPAND xpt::editor::Common::createEditingDomain FOR editorGen»«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenEditorView»«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenEditorView-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForOpenDiagramInViewActionErrorTitle(editorGen))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForOpenDiagramInViewActionCannotLoad(editorGen))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForOpenDiagramInViewActionExceptionLoading(editorGen))-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForOpenDiagramInViewActionPartInitException(editorGen))-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenEditorView-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForOpenDiagramInViewActionErrorTitle(editorGen), "Error")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForOpenDiagramInViewActionCannotLoad(editorGen), "Diagram file failed to load or is corrupted")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForOpenDiagramInViewActionExceptionLoading(editorGen), "Diagram file failed to load")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForOpenDiagramInViewActionPartInitException(editorGen), "Unable to open diagram")-»
«ENDDEFINE»
@


1.4
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator);
Link labels and external node labels are not selectable, but movable;
Inner elements are not selectable with marquee tool;
Fixed copyright statements throughout the lite RT.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.3
log
@Rewrite /editor/* templates in XPand;
Use common template to generate code that creates an editing domain in various places;
OpenDiagramEditPolicy: package statement was missing.
@
text
@d33 2
@


1.3.2.1
log
@Eliminated Jet templates in lite version;
i18n in lite RT;
For generated classes whose names are not directly modifiable via gmfgen file, consistent className/qualifiedClassName template is exposed (and used throughout the generation process, including the Generator)
@
text
@a32 2
«DEFINE qualifiedClassName FOR gmfgen::GenEditorView»«packageName».«EXPAND className»«ENDDEFINE»

@


1.2
log
@i18n for all Lite templates in Xpand
@
text
@d97 1
a97 1
«DEFINE createEditingDomain FOR gmfgen::GenEditorView»org.eclipse.emf.workspace.WorkspaceEditingDomainFactory.INSTANCE.createEditingDomain()«ENDDEFINE»
@


1.1
log
@Rewrite some templates with XPand;
Adopt VisualIDRegistry from full RT.
@
text
@d17 1
d74 2
a75 2
			org.eclipse.jface.dialogs.MessageDialog.openError(myPart.getSite().getShell(), "Error",
					"Diagram file failed to load or is corrupted");
d81 3
a83 3
						"Unable to load resource: " + mySelectedModelFile.getFullPath().toString(), ex);
		org.eclipse.jface.dialogs.MessageDialog.openError(myPart.getSite().getShell(), "Error",
				"Diagram file failed to load");
d91 2
a92 1
		org.eclipse.jface.dialogs.MessageDialog.openError(myPart.getSite().getShell(), "Error", "Unable to open diagram");
d100 14
@

