head	1.4;
access;
symbols
	v20080910-1520:1.4
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070307-0700:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070103-0300:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.3
	v20061005-1700:1.3
	M1_20:1.3
	v20060904-1500:1.3
	v20060824-1600:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060620-0400:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-1300:1.3
	v20060519-0800:1.3
	v20060512-1000:1.3
	I20060512-1000:1.3
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.06.01.09.49.13;	author bblajer;	state dead;
branches;
next	1.3;
commitid	7e07465feb984567;

1.3
date	2006.05.10.12.04.25;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.11.58.48;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@rewrite EditPartFactory in XPand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.lite.parts" class="EditPartFactoryGenerator" 
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gef.EditPartFactory");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getEditPartFactoryClassName()%> implements EditPartFactory {

	/**
	 * @@generated
	 */
	public static final String EXTERNAL_NODE_LABELS_LAYER = "External Node Labels";

	/**
	 * @@generated
	 */
	public EditPart createEditPart(EditPart context, Object model) {
		if (model instanceof View) {
			View view = (View) model;
			if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(view))) {
				return null;
			}
			
			int viewVisualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view);
			switch (viewVisualID) {
<%
for (Iterator containers = genDiagram.getAllContainers().iterator(); containers.hasNext();) {
	GenContainerBase container = (GenContainerBase) containers.next();
%>
			case <%=importManager.getImportedName(container.getEditPartQualifiedClassName())%>.VISUAL_ID:
				 return new <%=container.getEditPartClassName()%>(<%if(container instanceof GenDiagram) {%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>)<%}%>view);
<%
	if (container instanceof GenNode) {
		GenNode node = (GenNode) container;
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel label = (GenNodeLabel) labels.next();
%>
			case <%=importManager.getImportedName(label.getEditPartQualifiedClassName())%>.VISUAL_ID:
				return new <%=label.getEditPartClassName()%>(view);
<%
		}
	}
}
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext();) {
	GenLink link = (GenLink) links.next();
%>		
			case <%=importManager.getImportedName(link.getEditPartQualifiedClassName())%>.VISUAL_ID:
				return new <%=link.getEditPartClassName()%>(view);
<%
	for (Iterator linkLabels = link.getLabels().iterator(); linkLabels.hasNext();) {
		GenLinkLabel linkLabel = (GenLinkLabel) linkLabels.next();
%>
			case <%=importManager.getImportedName(linkLabel.getEditPartQualifiedClassName())%>.VISUAL_ID:
					return new <%=linkLabel.getEditPartClassName()%>(view);
<%
	}
}
%>
			}
		}
		return createUnrecognizedEditPart(context, model);
	}
	
	/**
	 * @@generated
	 */
	 private EditPart createUnrecognizedEditPart(EditPart context, Object model) {
	 	// Handle creation of unrecognized child node EditParts here
	 	return null;
	 }

}
<%importManager.emitSortedImports();%>
@


1.3
log
@sync with changes in gmfgen
@
text
@@


1.2
log
@[bblajer] #138415 Update Lite generator to use VISUAL_ID as view type scheme instead of annotations
@
text
@d45 1
a45 1
	if (container instanceof GenNode && !((GenNode) container).isListContainerEntry()) {
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@a4 1
final String modelID = genDiagram.getEditorGen().getModelID();
a25 4
<%@@ include file="../editor/getModelID.jetinc" %>

<%@@ include file="../editor/getVisualID.jetinc" %>

d32 1
a32 1
			if (!"<%=modelID%>".equals(getModelID(view))) {
d36 1
a36 1
			int viewVisualID = getVisualID(view);
d42 1
a42 1
			case <%=container.getVisualID()%>:
d50 1
a50 1
			case <%=label.getVisualID()%>:
d59 1
a59 1
			case <%=link.getVisualID()%>:
d65 1
a65 1
			case <%=linkLabel.getVisualID()%>:
@

