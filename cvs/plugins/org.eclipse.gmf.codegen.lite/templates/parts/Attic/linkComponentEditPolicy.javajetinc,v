head	1.6;
access;
symbols
	v20080910-1520:1.6
	v20070221-1500:1.5
	v20070208-1800:1.5
	v20070103-0300:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061214-0000:1.5
	v20061120-1300:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061013-1330:1.4
	v20061005-1700:1.2
	M1_20:1.4
	v20060904-1500:1.4
	v20060824-1600:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.02.23.16.19.36;	author bblajer;	state dead;
branches;
next	1.5;
commitid	496945df14164567;

1.5
date	2006.12.12.12.54.47;	author bblajer;	state Exp;
branches;
next	1.4;
commitid	355b457ea6574567;

1.4
date	2006.09.01.16.14.08;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.07.03.17.42.27;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.22.18.22.10;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.COMPONENT_ROLE, new <%=importManager.getImportedName("org.eclipse.gef.editpolicies.ComponentEditPolicy")%>() {
			protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> createDeleteCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.GroupRequest")%> deleteRequest) {
				final Edge edgeToRemove = getDiagramEdge();
				final View source = edgeToRemove.getSource();
				final View target = edgeToRemove.getTarget();
				<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(getDiagramEdge().getDiagram().getElement());
				<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> cc = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
				cc.append(createDomainModelRemoveCommand(editingDomain));
				cc.append(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.RemoveNotationalEdgeCommand")%>(source.getDiagram(), edgeToRemove));
				return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(editingDomain, cc);
			}
<%
{
	String _edge = "getDiagramEdge()";
%>
<%@@ include file="createDomainModelRemoveCommandForLink.jetinc"%>
<%
}	//local declarations
%>
		});
@


1.5
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@@


1.4
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@d9 1
a9 21
				cc.append(new <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%>() {
					public boolean canExecute() {
						return source != null && edgeToRemove != null;
					}
					public boolean canUndo() {
						return source != null && edgeToRemove != null;
					}
					public void undo() {
						source.getDiagram().insertEdge(edgeToRemove);
						edgeToRemove.setSource(source);
						edgeToRemove.setTarget(target);
					}
					public void redo() {
						execute();
					}
					public void execute() {
						source.getDiagram().removeEdge(edgeToRemove);
						edgeToRemove.setSource(null);
						edgeToRemove.setTarget(null);
					}
				});
@


1.3
log
@#149298 Lite Generator: Make it possible to reroute links
@
text
@d30 1
a30 1
				return new WrappingCommand(editingDomain, cc);
@


1.2
log
@[bblajer] #138430 Lite Generator: Generated code should make use of emf.transaction API
@
text
@a31 1
			private org.eclipse.emf.common.command.Command createDomainModelRemoveCommand(<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain) {
d33 2
a34 24
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature childFeature = modelFacet.getChildMetaFeature();
		GenFeature targetFeature = modelFacet.getTargetMetaFeature();
		//See creation of links in NodeEditPart

		boolean removeSource = sourceFeature != null;
		boolean removeTarget = targetFeature != null;
		boolean removeChild = childFeature != null && childFeature != containmentFeature && !childFeature.isDerived();
		if (containmentFeature != null) {
			if (sourceFeature != null && sourceFeature.getEcoreFeature() instanceof EReference == true) {
				EReference sourceEcoreFeature = (EReference)sourceFeature.getEcoreFeature();
				if (sourceEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					removeSource = false;
				}
			}
			if (targetFeature != null && targetFeature.getEcoreFeature() instanceof EReference == true) {
				EReference targetEcoreFeature = (EReference)targetFeature.getEcoreFeature();
				if (targetEcoreFeature.getEOpposite() == containmentFeature.getEcoreFeature()) {
					removeTarget = false;
				}
			}
d36 1
a36 1
				<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
d38 1
a38 1
			if (containmentFeature.getEcoreFeature().isMany()) {
a39 86
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
					editingDomain,
					getDiagramEdge().getElement().eContainer(), getDiagramEdge().getElement().eContainmentFeature(), getDiagramEdge().getElement()));
<%
			} else {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					getDiagramEdge().getElement().eContainer(), getDiagramEdge().getElement().eContainmentFeature(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
<%
			}
		} else {
%>
				return <%=importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand")%>.INSTANCE;
<%
		}
		if (removeChild) {
			if (childFeature.getEcoreFeature().isMany()) {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
					editingDomain,
					getDiagramEdge().getElement().eContainer(), <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(),
					getDiagramEdge().getElement()));
<%
			} else {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					getDiagramEdge().getElement().eContainer(), <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(),
					<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
<%
			}
		}
		if (removeSource) {
			if (sourceFeature.getEcoreFeature().isMany()) {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
					editingDomain,
					getDiagramEdge().getElement(), <%=importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=sourceFeature.getFeatureAccessorName()%>(), getDiagramEdge().getSource().getElement()));
<%
			} else {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					getDiagramEdge().getElement(), <%=importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=sourceFeature.getFeatureAccessorName()%>(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
<%
			}
		}
		if (removeTarget) {
			if (targetFeature.getEcoreFeature().isMany()) {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
					editingDomain,
					getDiagramEdge().getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(), getDiagramEdge().getTarget().getElement()));
<%
			} else {
%>
				result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					getDiagramEdge().getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
<%
			}
		}
%>
				return result;
<%
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
		if (metaFeature.getEcoreFeature().isMany()) {
%>
				return <%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
					editingDomain,
					getDiagramEdge().getSource().getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), getDiagramEdge().getTarget().getElement());
<%
		} else {
%>
				return <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
					editingDomain,
					getDiagramEdge().getSource().getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE);
<%
		}
%>
<%
	}
%>
			}
@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d3 30
a32 6
				return new <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%>() {
					private final Edge edgeToRemove = getDiagramEdge();
					private final View source = edgeToRemove.getSource();
					private final View target = edgeToRemove.getTarget();
					private final org.eclipse.emf.common.command.Command domainModelRemoveCommand = createDomainModelRemoveCommand();
					private org.eclipse.emf.common.command.Command createDomainModelRemoveCommand() {
d59 1
a59 1
						<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
d63 3
a65 3
						result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
							<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>.getEditingDomainFor(edgeToRemove.getDiagram().getElement()),
							edgeToRemove.getElement().eContainer(), edgeToRemove.getElement().eContainmentFeature(), edgeToRemove.getElement()));
d69 3
a71 3
						result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
							<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>.getEditingDomainFor(edgeToRemove.getDiagram().getElement()),
							edgeToRemove.getElement().eContainer(), edgeToRemove.getElement().eContainmentFeature(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
d76 1
a76 1
			return <%=importManager.getImportedName("org.eclipse.emf.common.command.UnexecutableCommand")%>.INSTANCE;
d82 4
a85 4
						result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
							<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>.getEditingDomainFor(edgeToRemove.getDiagram().getElement()),
							edgeToRemove.getElement().eContainer(), <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(),
							edgeToRemove.getElement()));
d89 4
a92 4
						result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
							<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>.getEditingDomainFor(edgeToRemove.getDiagram().getElement()),
							edgeToRemove.getElement().eContainer(), <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(),
							<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
d99 3
a101 3
						result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
							<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>.getEditingDomainFor(edgeToRemove.getDiagram().getElement()),
							edgeToRemove.getElement(), <%=importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=sourceFeature.getFeatureAccessorName()%>(), source.getElement()));
d105 3
a107 3
						result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
							<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>.getEditingDomainFor(edgeToRemove.getDiagram().getElement()),
							edgeToRemove.getElement(), <%=importManager.getImportedName(sourceFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=sourceFeature.getFeatureAccessorName()%>(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
d114 3
a116 3
						result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
							<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>.getEditingDomainFor(edgeToRemove.getDiagram().getElement()),
							edgeToRemove.getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(), target.getElement()));
d120 3
a122 3
						result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
							<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>.getEditingDomainFor(edgeToRemove.getDiagram().getElement()),
							edgeToRemove.getElement(), <%=importManager.getImportedName(targetFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
d127 1
a127 1
						return result;
d133 3
a135 3
						return <%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
							<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>.getEditingDomainFor(edgeToRemove.getDiagram().getElement()),
							source.getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), target.getElement());
d139 3
a141 3
						return <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
							<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>.getEditingDomainFor(edgeToRemove.getDiagram().getElement()),
							source.getElement(), <%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), <%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE);
a147 21
					}

					public boolean canExecute() {
						return domainModelRemoveCommand != null && domainModelRemoveCommand.canExecute();
					}
					public void execute() {
						domainModelRemoveCommand.execute();
						source.getDiagram().removeEdge(edgeToRemove);
						edgeToRemove.setSource(null);
						edgeToRemove.setTarget(null);
					}
					public boolean canUndo() {
						return domainModelRemoveCommand != null && domainModelRemoveCommand.canUndo();
					}
					public void undo() {
						domainModelRemoveCommand.undo();
						source.getDiagram().insertEdge(edgeToRemove);
						edgeToRemove.setSource(source);
						edgeToRemove.setTarget(target);
					}
				};
@

