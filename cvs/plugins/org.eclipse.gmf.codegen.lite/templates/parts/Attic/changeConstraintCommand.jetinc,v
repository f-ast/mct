head	1.3;
access;
symbols
	v20080910-1520:1.3
	v20070307-0700:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.03.09.17.19.35;	author bblajer;	state dead;
branches;
next	1.2;
commitid	22ed45f197244567;

1.2
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.06.20.09.23;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[164018]: Command generation separated from Parts for layout edit policy and graphical node edit policy;
NewDiagramFileWizard: layout is not persisted if the diagram is closed right after initialization
@
text
@				final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> node = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) child.getModel();
				<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> emfCommand = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ChangeBoundsCommand")%>(node, request, ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>)child).getFigure());
				return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(<%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(node.getDiagram().getElement()), emfCommand);
@


1.2
log
@[160205] bblajer - move and clone elements on diagram
@
text
@@


1.1
log
@[155955] bblajer -  Allow creation of child nodes directly in parent elements
@
text
@d2 1
a2 39
				<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> emfCommand = new <%=importManager.getImportedName("org.eclipse.emf.common.command.AbstractCommand")%>("Change node position/size") {
					private <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> moveDelta;
					private <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> resizeDelta;

					public boolean canUndo() {
						return canExecute();
					}
					protected boolean prepare() {
						if (node.getLayoutConstraint() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%> == false) {
							return false;
						}
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%> bounds = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%>) node.getLayoutConstraint();
						<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> original = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());
						<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> referenceFigure = ((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>)child).getFigure();
						referenceFigure.translateToAbsolute(original);
						<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> transformed = request.getTransformedRectangle(original);
						referenceFigure.translateToRelative(transformed);
						referenceFigure.translateToRelative(original);
						resizeDelta = transformed.getSize().expand(original.getSize().negate());
						moveDelta = transformed.getTopLeft().translate(original.getTopLeft().negate());
						return true;
					}
					public void undo() {
						execute(moveDelta.getNegated(), resizeDelta.getNegated());
					}
					public void execute() {
						execute(moveDelta, resizeDelta);
					}
					public void redo() {
						execute();
					}
					private void execute(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> move, <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> resize) {
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%> bounds = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Bounds")%>) node.getLayoutConstraint();
						bounds.setX(bounds.getX() + move.x);
						bounds.setY(bounds.getY() + move.y);
						bounds.setWidth(bounds.getWidth() + resize.width);
						bounds.setHeight(bounds.getHeight() + resize.height);
					}
				};
@

