head	1.6;
access;
symbols
	v20080910-1520:1.6
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070307-0700:1.5
	v20070228-2000:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	v20070103-0300:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.4
	M1_20:1.3
	v20060904-1500:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.04.04.11.04.48;	author bblajer;	state dead;
branches;
next	1.5;
commitid	18c54613864d4567;

1.5
date	2006.10.18.14.22.07;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.21.10.12.03;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.01.16.14.09;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.08.04.17.05.48;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.02.10.43.51;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@<%
if (myHelper.containsLinks() || _includeUncontainedLinks) {
%>
	/**
	 * @@generated
	 */
	private void installLinkNotationModelRefresher() {
		LinkNotationModelRefresher refresher = getLinkNotationModelRefresher();
		if (refresher.isInstalled()) {
			return;
		}
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(<%=_getDiagramCode%>.getElement());
		refresher.install(domainModelEditDomain);
		refreshLinkNotationModel();
	}

	/**
	 * @@generated
	 */
	private void uninstallLinkNotationModelRefresher() {
		getLinkNotationModelRefresher().uninstall();
	}

	/**
	 * @@generated
	 */
	private LinkNotationModelRefresher linkNotationModelRefresher;

	/**
	 * Service to find a notational element that corresponds to the given underlying domain element. 
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService")%> viewService;

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService")%> getViewService() {
		if (viewService == null) {
			viewService = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.EditPartRegistryBasedViewService")%>(getViewer());
		}
		return viewService;
	}

	/**
	 * @@generated
	 */
	private LinkNotationModelRefresher getLinkNotationModelRefresher() {
		if (linkNotationModelRefresher == null) {
			linkNotationModelRefresher = new LinkNotationModelRefresher(getViewService());
		}
		return linkNotationModelRefresher;
	}

	/**
	 * @@generated
	 */
	private class LinkNotationModelRefresher extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.OwnedLinksNotationModelRefresher")%> {
		/**
		 * @@generated
		 */
		public LinkNotationModelRefresher(<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.IViewService")%> viewService) {
			super(viewService);
		}
<%
	boolean hasConstraintsInContainedLinks = false;
	for (Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
		TypeModelFacet typeModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (typeModelFacet != null && typeModelFacet.getMetaClass() != null && typeModelFacet.getModelElementSelector() != null) {
			hasConstraintsInContainedLinks = true;
			break;
		}
	}
	if (hasConstraintsInContainedLinks) {
%>

		/**
		 * NB: Child links of this element are selected based on constraint declared in <%=genDiagram.getVisualIDRegistryQualifiedClassName()%>. 
		 * Since no assumptions may be made concerning the runtime behavior of the constraint, <b>any</b> non-touch notification may result in 
		 * notational model having to be updated.
		 * <p/>User is encouraged to change implementation of this method to provide an optimization if it is safe to assume that not all notifications
		 * result in such an update.
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> getConstrainedChildLinksFilter() {
			return <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.NOT_TOUCH;
		}
<%
	}
	if (_includeUncontainedLinks) {
%>
		/**
		 * Creates a notification filter which filters notifications that may possibly result in uncontained links. 
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> createUncontainedLinksFilter() {
			return <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.createEventTypeFilter(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%>.SET).or(
				<%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.createEventTypeFilter(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%>.UNSET).or(
				<%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.createEventTypeFilter(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%>.REMOVE).or(
				<%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.createEventTypeFilter(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%>.REMOVE_MANY)
			)));
		}
<%
	}
%>
		/**
		 * Creates a notification filter which filters notifications that may possibly affect the notational model
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> createFilter() {
<%
	{
		boolean hasDeclaredFilter = false;
		Set genAffectingFeatures = new LinkedHashSet();
		for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
			if (modelFacet == null) {
				continue;
			}
			GenFeature _feature = modelFacet.getChildMetaFeature();
%>
<%@@ include file="notificationFilter.jetinc" %>
<%
			_feature = modelFacet.getSourceMetaFeature();
%>
<%@@ include file="notificationFilter.jetinc" %>
<%
			_feature = modelFacet.getTargetMetaFeature();
%>
<%@@ include file="notificationFilter.jetinc" %>
<%
		}
		for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
			GenFeature _feature = ((FeatureLinkModelFacet) nextLink.getModelFacet()).getMetaFeature();
%>
<%@@ include file="notificationFilter.jetinc" %>
<%
		}
		if (hasConstraintsInContainedLinks) {
			if (hasDeclaredFilter) {
%>
			filter = getConstrainedChildLinksFilter().or(filter);
<%
			} else {
				hasDeclaredFilter = true;
%>
			<%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> filter = getConstrainedChildLinksFilter();
<%
			}
		}
		if (_includeUncontainedLinks) {
			if (hasDeclaredFilter) {
%>
			filter = filter.or(createUncontainedLinksFilter());
<%
			} else {
				hasDeclaredFilter = true;
%>
			<%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> filter = createUncontainedLinksFilter();
<%
			}
		}
		if (!hasDeclaredFilter) {
%>
			<%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> filter = <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.NOT_TOUCH;
<%
		}
	}	//local declaration of hasDeclaredFilter
%>
			return filter;
		}

		/**
	 	 * @@generated
	 	 */
		protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand")%> getCreateNotationalElementCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor")%> descriptor) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor")%> linkDescriptor = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.LinkDescriptor")%>) descriptor;
<%
{
	Iterator _containedTypeModelFacetLinks = myHelper.getContainedTypeModelFacetLinks();
	Iterator _containedFeatureModelFacetLinks = myHelper.getContainedFeatureModelFacetLinks();
	String _diagramCode = "getHost().getDiagram()";
%>
<%@@ include file="../common/createNotationalEdgeCommand.jetinc"%>
<%
}
%>
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("java.util.List")%> getSemanticChildLinks() {
<%
{
	Iterator _containedTypeModelFacetLinks = myHelper.getContainedTypeModelFacetLinks();
	Iterator _containedFeatureModelFacetLinks = myHelper.getContainedFeatureModelFacetLinks();
%>
<%@@include file="../common/semanticChildLinks.jetinc"%>
<%
}
%>
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("java.util.List")%> getNotationalChildLinks() {
			<%=importManager.getImportedName("java.util.List")%> result = new <%=importManager.getImportedName("java.util.LinkedList")%>();
			<%=importManager.getImportedName("java.util.List")%> allLinks = <%=_getDiagramCode%>.getEdges();
			for(<%=importManager.getImportedName("java.util.Iterator")%> it = allLinks.iterator(); it.hasNext(); ) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> next = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) it.next();
<%
	if (_includeUncontainedLinks) {
%>
				if (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {
					result.add(next);
					continue;
				}
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> source = next.getSource();
				if (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {
					result.add(next);
					continue;
				}
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> target = next.getTarget();
				if (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {
					result.add(next);
					continue;
				}
<%
	}
	if (myHelper.containsFeatureModelFacetLinks()) {
%>
				if (!next.isSetElement() || next.getElement() == null) {
					if (next.getSource() == <%=_getViewCode%>) {
						int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(next);
						switch (linkVID) {
<%
		for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
%>
						case <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
<%
		}
%>
							result.add(next);
							break;
						}
					}
<%
		if (myHelper.containsTypeModelFacetLinks()) {
%>
				} else {
<%
		} else {
%>
				}
<%
		}
	}
	if (myHelper.containsTypeModelFacetLinks()) {
		if (!myHelper.containsFeatureModelFacetLinks()) {
%>
				if (next.isSetElement() && next.getElement() != null) {
<%
		}
%>
					if (next.getElement().eContainer() == <%=_getViewCode%>.getElement()) {
						int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(next);
						switch (linkVID) {
<%
		for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
			GenLink nextLink = (GenLink) it.next();
%>
						case <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
<%
		}
%>
							result.add(next);
							break;
						}
					}
				}
<%
	}
%>
			}
			return result;
		}

		/**
		 * Returns whether a notational edge should be created for the given domain element. 
		 * The generated code always returns <%=genDiagram.isSynchronized()%>. 
		 * User can change implementation of this method to handle a more sophisticated logic.
		 * @@generated
		 */
		protected boolean shouldCreateView(<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.ElementDescriptor")%> descriptor) {
			return <%=genDiagram.isSynchronized()%>;
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> getHost() {
			return <%=_getViewCode%>;
		}
	}

	/**
	 * @@generated
	 */
	protected void refreshLinkNotationModel() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.edit.parts.update.canonical.AbstractNotationModelRefresher")%> linkRefresher = getLinkNotationModelRefresher();
		if (!linkRefresher.isInstalled()) {
			return;
		}
		<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> command = linkRefresher.buildRefreshNotationModelCommand();
		if (command == null) {
			return;
		}
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(<%=_getDiagramCode%>.getElement());
		getViewer().getEditDomain().getCommandStack().execute(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(domainModelEditDomain, command));
	}
<%
}
%>
@


1.5
log
@#161380 simplify feature model facets
@
text
@@


1.4
log
@[157859] bblajer - Diagram initialization from pre-existing domain models
@
text
@d137 1
a137 1
			GenFeature _feature = ((FeatureModelFacet) nextLink.getModelFacet()).getMetaFeature();
@


1.3
log
@[155040] bblajer - Common Lite runtime functionality moved to dedicated plugin
@
text
@a180 7
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> sourceView = getViewService().findView(linkDescriptor.getSource());
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> targetView = getViewService().findView(linkDescriptor.getDestination());
			if (sourceView == null || targetView == null) {
				return null;
			}
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> createdEdge = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createEdge();
			switch (linkDescriptor.getVisualID()) {
d182 4
a185 6
	for(Iterator it = myHelper.getContainedTypeModelFacetLinks(); it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		if (modelFacet == null) {
			continue;
		}
d187 1
a187 6
			case <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
				if (linkDescriptor.getElement() instanceof <%=importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName())%>) {
					createdEdge.setElement(linkDescriptor.getElement());
					<%=importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName())%>.decorateView(createdEdge);
				}
				break;
d189 1
a189 12
	}
	for(Iterator it = myHelper.getContainedFeatureModelFacetLinks(); it.hasNext(); ) {
		GenLink nextLink = (GenLink) it.next();
%>
			case <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
				if (linkDescriptor.getElement() == null) {
					createdEdge.setElement(null);
					<%=importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName())%>.decorateView(createdEdge);
				}
				break;
<%
	}
a190 5
			}
			if (createdEdge.getType() == null) {
				return null;
			}
			return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalEdgeCommand")%>(getHost().getDiagram(), createdEdge, sourceView, targetView);
d197 9
a205 1
<%@@include file="semanticChildLinks.jetinc"%>
@


1.2
log
@[bblajer] #152774 Compilable code when EClass has instance class attribute set
@
text
@d30 16
d50 1
a50 1
			linkNotationModelRefresher = new LinkNotationModelRefresher();
d58 1
a58 10
	private class LinkNotationModelRefresher extends <%=importManager.getImportedName("org.eclipse.emf.transaction.ResourceSetListenerImpl")%> {
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> filter;
		/**
		 * @@generated
		 */
		private <%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain;

d62 2
a63 2
		public LinkNotationModelRefresher() {
			createFilter();
d111 1
a111 1
		private void createFilter() {
d150 1
a150 1
			filter = getConstrainedChildLinksFilter();
d162 1
a162 1
			filter = createUncontainedLinksFilter();
d168 1
a168 1
			filter = <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%>.ANY.negated();
d173 1
a173 26
		}
		/**
		 * @@generated
		 */
		public void install(<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain) {
			if (this.editingDomain != null && !this.editingDomain.equals(editingDomain)) {
				throw new IllegalStateException("Already listening to another editing domain");
			}
			this.editingDomain = editingDomain;
			this.editingDomain.addResourceSetListener(this);
		}
		/**
		 * @@generated
		 */
		public boolean isInstalled() {
			return editingDomain != null;
		}

		/**
		 * @@generated
		 */
		public void uninstall() {
			if (isInstalled()) {
				editingDomain.removeResourceSetListener(this);
				editingDomain = null;
			}
d177 8
a184 171
		 * @@generated
		 */
		public boolean isPrecommitOnly() {
			return true;
		}
		/**
		 * @@generated
		 */
		public <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> transactionAboutToCommit(<%=importManager.getImportedName("org.eclipse.emf.transaction.ResourceSetChangeEvent")%> event) {
			return getRefreshLinkNotationModelCommand();
		}
		/**
		 * @@generated
		 */
		public <%=importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter")%> getFilter() {
			return filter;
		}
	}

	/**
	 * @@generated
	 */
	protected void refreshLinkNotationModel() {
		<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> command = getRefreshLinkNotationModelCommand();
		if (command == null) {
			return;
		}
		<%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> domainModelEditDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(<%=_getDiagramCode%>.getElement());
		getViewer().getEditDomain().getCommandStack().execute(new WrappingCommand(domainModelEditDomain, command));
	}

<%@@include file="linkDescriptor.jetinc"%>

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> getRefreshLinkNotationModelCommand() {
		<%=importManager.getImportedName("java.util.List")%>/*<LinkDescriptor>*/ semanticChildLinks = getSemanticChildLinks();
		<%=importManager.getImportedName("java.util.List")%>/*<Edge>*/ notationalChildLinks = getNotationalChildLinks();
		final <%=importManager.getImportedName("java.util.Map")%> semanticToNotationalTypeBasedLinks = new <%=importManager.getImportedName("java.util.HashMap")%>();
		final <%=importManager.getImportedName("java.util.Map")%>/*<EObject, List<Edge>>*/ semanticToNotationalFeatureBasedLinks = new <%=importManager.getImportedName("java.util.HashMap")%>();
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = notationalChildLinks.iterator(); it.hasNext(); ) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> next = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) it.next();
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> nextSemantic = next.getElement();
			if (nextSemantic != null) {
				semanticToNotationalTypeBasedLinks.put(nextSemantic, next);
			} else {
				<%=importManager.getImportedName("java.util.List")%> featureBasedLinksForSource = (<%=importManager.getImportedName("java.util.List")%>) semanticToNotationalFeatureBasedLinks.get(next.getSource().getElement());
				if (featureBasedLinksForSource == null) {
					featureBasedLinksForSource = new <%=importManager.getImportedName("java.util.LinkedList")%>();
					semanticToNotationalFeatureBasedLinks.put(next.getSource().getElement(), featureBasedLinksForSource);
				}
				featureBasedLinksForSource.add(next);
			}
		}
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parentView = <%=_getDiagramCode%>;
		<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> command = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = semanticChildLinks.iterator(); it.hasNext(); ) {
			LinkDescriptor next = (LinkDescriptor) it.next();
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> nextLinkElement = next.getLinkElement();
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> currentEdge;
			if (nextLinkElement != null) {
				currentEdge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) semanticToNotationalTypeBasedLinks.remove(nextLinkElement);
			} else {
				<%=importManager.getImportedName("java.util.List")%> featureBasedLinksForSource = (<%=importManager.getImportedName("java.util.List")%>) semanticToNotationalFeatureBasedLinks.get(next.getSource());
				if (featureBasedLinksForSource == null || featureBasedLinksForSource.isEmpty()) {
					currentEdge = null;
				} else {
					currentEdge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) featureBasedLinksForSource.remove(0);
				}
			}
			int linkVisualID = next.getVisualID();
			if (currentEdge == null) {
				if (nextLinkElement == null || shouldCreateEdge(nextLinkElement)) {
					command.appendIfCanExecute(getCreateNotationalEdgeCommand(parentView, next));
				}
			} else {
				boolean changedSource = currentEdge.getSource().getElement() != next.getSource();
				boolean changedTarget = currentEdge.getTarget().getElement() != next.getDestination();
				boolean changedVID = linkVisualID != <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(currentEdge);
				if (!changedSource && !changedTarget) {
					if (changedVID) {
						<%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalEdgeCommand")%> notationalCommand = getCreateNotationalEdgeCommand(parentView, next);
						if (notationalCommand != null) {
							command.appendIfCanExecute(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReplaceNotationalElementCommand")%>(parentView, notationalCommand, currentEdge));
						} else {
							command.appendIfCanExecute(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalEdgeCommand")%>(parentView, currentEdge));
						}
					}
				} else {
					if (changedVID) {
						command.appendIfCanExecute(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalEdgeCommand")%>(parentView, currentEdge));
						command.appendIfCanExecute(getCreateNotationalEdgeCommand(parentView, next));
					} else {
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> newSourceView = findView(next.getSource());
						if (changedSource && newSourceView != null) {
							command.appendIfCanExecute(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReconnectNotationalEdgeSourceCommand")%>(currentEdge, newSourceView));
						}
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> newTargetView = findView(next.getDestination());
						if (changedTarget && newTargetView != null) {
							command.appendIfCanExecute(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".ReconnectNotationalEdgeTargetCommand")%>(currentEdge, newTargetView));
						}
					}
				}
			}
		}
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = semanticToNotationalTypeBasedLinks.values().iterator(); it.hasNext(); ) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> obsoleteView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
			command.appendIfCanExecute(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalEdgeCommand")%>(parentView, obsoleteView));
		}
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = semanticToNotationalFeatureBasedLinks.values().iterator(); it.hasNext(); ) {
			<%=importManager.getImportedName("java.util.List")%> obsoleteViews = (<%=importManager.getImportedName("java.util.List")%>) it.next();
			for(<%=importManager.getImportedName("java.util.Iterator")%> obsoleteViewsIt = obsoleteViews.iterator(); obsoleteViewsIt.hasNext(); ) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> obsoleteView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) obsoleteViewsIt.next();
				command.appendIfCanExecute(new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".RemoveNotationalEdgeCommand")%>(parentView, obsoleteView));
			}
		}
		return command.getCommandList().isEmpty() ? null : command;
	}

	/**
	 * Finds a notational element that corresponds to the given underlying domain element. 
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> findView(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelElement) {
		if (modelElement == null) {
			return null;
		}
		<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> editPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) getViewer().getEditPartRegistry().get(modelElement);
		if (editPart != null && editPart.getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
			return (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) editPart.getModel();
		}
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parentView = findView(modelElement.eContainer());
		if (parentView != null) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> result = findNode(parentView, modelElement);
			if (result != null) {
				return result;
			}
		}
		return findEdge(modelElement);
	}
	
	/**
	 * Finds a notational node that corresponds to the given underlying domain element in a subtree starting from the given parent element. 
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> findNode(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parentView, <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelElement) {
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = parentView.getChildren().iterator(); it.hasNext(); ) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> next = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
			if (!next.isSetElement() || next.getElement() == parentView) {
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> result = findNode(next, modelElement);
				if (result != null) {
					return result;
				}
			}
			if (next.isSetElement() && next.getElement() == modelElement) {
				return next;
			}
		}
		return null;
	}

	/**
	 * Finds a notational edge that corresponds to the given underlying domain element. 
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> findEdge(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> modelElement) {
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = <%=_getDiagramCode%>.getEdges().iterator(); it.hasNext(); ) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> next = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) it.next();
			if (next.isSetElement() && next.getElement() == modelElement) {
				return next;
d186 2
a187 15
		}
		return null;
	}

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalEdgeCommand")%> getCreateNotationalEdgeCommand(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> parentView, LinkDescriptor linkDescriptor) {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> sourceView = findView(linkDescriptor.getSource());
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> targetView = findView(linkDescriptor.getDestination());
		if (sourceView == null || targetView == null) {
			return null;
		}
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> createdEdge = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createEdge();
		switch (linkDescriptor.getVisualID()) {
d196 6
a201 6
		case <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
			if (linkDescriptor.getLinkElement() instanceof <%=importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName())%>) {
				createdEdge.setElement(linkDescriptor.getLinkElement());
				<%=importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName())%>.decorateView(createdEdge);
			}
			break;
d207 6
a212 6
		case <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
			if (linkDescriptor.getLinkElement() == null) {
				createdEdge.setElement(null);
				<%=importManager.getImportedName(nextLink.getNotationViewFactoryQualifiedClassName())%>.decorateView(createdEdge);
			}
			break;
d216 5
a221 5
		if (createdEdge.getType() == null) {
			return null;
		}
		return new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".CreateNotationalEdgeCommand")%>(parentView, createdEdge, sourceView, targetView);
	}
d223 4
a226 4
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.List")%> getSemanticChildLinks() {
d228 1
a228 1
	}
d230 8
a237 8
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.List")%> getNotationalChildLinks() {
		<%=importManager.getImportedName("java.util.List")%> result = new <%=importManager.getImportedName("java.util.LinkedList")%>();
		<%=importManager.getImportedName("java.util.List")%> allLinks = <%=_getDiagramCode%>.getEdges();
		for(<%=importManager.getImportedName("java.util.Iterator")%> it = allLinks.iterator(); it.hasNext(); ) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> next = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) it.next();
d241 14
a254 14
			if (next.isSetElement() && next.getElement() != null && next.getElement().eResource() == null) {
				result.add(next);
				continue;
			}
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> source = next.getSource();
			if (source == null || (source.isSetElement() && source.getElement() != null && source.getElement().eResource() == null)) {
				result.add(next);
				continue;
			}
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> target = next.getTarget();
			if (target == null || (target.isSetElement() && target.getElement() != null && target.getElement().eResource() == null)) {
				result.add(next);
				continue;
			}
a256 2
%>
<%
d259 4
a262 4
			if (!next.isSetElement() || next.getElement() == null) {
				if (next.getSource() == <%=_getViewCode%>) {
					int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(next);
					switch (linkVID) {
d267 1
a267 1
					case <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
d271 3
a273 2
						result.add(next);
						break;
a274 1
				}
d278 1
a278 1
			} else {
d282 1
a282 1
			}
a285 3
	
%>
<%
d289 1
a289 1
			if (next.isSetElement() && next.getElement() != null) {
d293 3
a295 3
				if (next.getElement().eContainer() == <%=_getViewCode%>.getElement()) {
					int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(next);
					switch (linkVID) {
d300 1
a300 1
					case <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID:
d304 3
a306 2
						result.add(next);
						break;
a308 1
			}
d312 19
a331 1
		return result;
a334 3
	 * Returns whether a notational edge should be created for the given domain element. 
	 * The generated code always returns <%=genDiagram.isSynchronized()%>. 
	 * User can change implementation of this method to handle a more sophisticated logic.
d337 11
a347 2
	private boolean shouldCreateEdge(EObject domainElement) {
		return <%=genDiagram.isSynchronized()%>;
@


1.1
log
@[bblajer] #146009 Reflect changes in domain model links
@
text
@d492 1
a492 1
				if (next.getElement().eContainer() == <%=_getSemanticElementCode%>) {
@

