head	1.7;
access;
symbols
	v20080910-1520:1.7
	v20070307-0700:1.6
	v20070228-2000:1.5
	v20070221-1500:1.4
	v20070208-1800:1.4
	v20070103-0300:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061214-0000:1.3
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2007.03.09.17.19.35;	author bblajer;	state dead;
branches;
next	1.6;
commitid	22ed45f197244567;

1.6
date	2007.03.02.21.21.16;	author bblajer;	state Exp;
branches;
next	1.5;
commitid	2b1945e895484567;

1.5
date	2007.02.23.16.19.36;	author bblajer;	state Exp;
branches;
next	1.4;
commitid	496945df14164567;

1.4
date	2007.01.12.21.50.38;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	252345a802aa4567;

1.3
date	2006.12.12.12.54.48;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	355b457ea6574567;

1.2
date	2006.10.12.10.23.43;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[164018]: Command generation separated from Parts for layout edit policy and graphical node edit policy;
NewDiagramFileWizard: layout is not persisted if the diagram is closed right after initialization
@
text
@<%
if (!childNodes.isEmpty()) {
%>
protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> createAddCommand(final <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, final Object constraint) {
	if (child.getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) {
		final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> childNode = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) child.getModel();
		final <%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(childNode.getDiagram().getElement());
		String modelID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(childNode);
		if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(modelID)) {
			final int newVisualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(<%=_getViewCode%>, childNode.getElement());
			<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> command = null;
			switch (newVisualID) {
<%
	for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode next = (GenNode) it.next();
%>
			case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
				command = new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Add" + next.getModelFacet().getMetaClass().getName() + next.getVisualID() + "Command")%>(<%=_getViewCode%>, childNode, newVisualID, <%if (isListLayout) {%>null<%} else {%>(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>) constraint<%}%>);
				break;
<%
	}	//for
%>
			}
			if (command != null) {
				return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(editingDomain, command);
			}
		}
	}
	return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
}
<%
}	//if (!childNodes.isEmpty()) in createAddCommand
%>
@


1.6
log
@[164018]: Add<>Command and Clone<>Command moved to separate classes;
Common methods from edit policies moved to runtime superclasses
@
text
@@


1.5
log
@ComponentEditPolicy separated into a top-level class;
CreateRequest now knows about the MODEL_ID;
All "Command" class references fully-qualified in templates to prevent compilation problems;
[170078]: Remove link with class from the domain model on deleting link's destination
@
text
@a9 1
			final int visualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(childNode);
d18 1
a18 117
				{
					<%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> result = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
					<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = childNode.getElement();
<%
		{
			Collection<GenNode> relatedNodes = myRelatedNodesFinder.getRelatedGenNodes(next.getDomainMetaClass());
			if (relatedNodes.size() != 1) {
%>
					switch (visualID) {
<%
			}
			for(GenNode nextRelated : relatedNodes) {
				TypeModelFacet facet = nextRelated.getModelFacet();
				GenFeature childFeature = facet.getChildMetaFeature();
				GenFeature containmentFeature = facet.getContainmentMetaFeature();
				if (relatedNodes.size() != 1) {
%>
					case <%=importManager.getImportedName(nextRelated.getEditPartQualifiedClassName())%>.VISUAL_ID:
<%
				}
				if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
					if (childFeature.getEcoreFeature().isMany()) {
%>
					result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
						editingDomain, 
						element.eContainer(), <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(),
						element));
<%
					} else {
%>
					result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
						editingDomain, 
						element.eContainer(), <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(),
						<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
<%
					}
				}
				if (containmentFeature.getEcoreFeature().isMany()) {
%>
					result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(
						editingDomain, 
						element.eContainer(), <%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(),
						element));
<%
				} else {
%>
					result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.create(
						editingDomain, 
						element.eContainer(), <%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(),
						<%=importManager.getImportedName("org.eclipse.emf.edit.command.SetCommand")%>.UNSET_VALUE));
<%
				}
				if (relatedNodes.size() != 1) {
%>
					break;
<%
				}
			}	//for(GenNode nextRelated : relatedNodes)
			if (relatedNodes.size() != 1) {
%>
					}	<%/*switch(visualID)*/%>
<%
			}
			TypeModelFacet facet = next.getModelFacet();
			GenFeature childFeature = facet.getChildMetaFeature();
			GenFeature containmentFeature = facet.getContainmentMetaFeature();
			if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
				GenFeature _feature = childFeature;
				String _ownerInstance = _getViewCode + ".getElement()";
				String _exceedsUpperBound = "return " + importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand") + ".INSTANCE;";
				GenClass _ownerGenClass = null;
%>
<%@@ include file="../common/featureMultiplicity.jetinc"%>
					result.append(<%=importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(
						editingDomain,
						<%=_getViewCode%>.getElement(), <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(), element));
<%
			}
			{
				GenFeature _feature = containmentFeature;
				String _ownerInstance = _getViewCode + ".getElement()";
				String _exceedsUpperBound = "return " + importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand") + ".INSTANCE;";
				GenClass _ownerGenClass = null;
%>
<%@@ include file="../common/featureMultiplicity.jetinc"%>
<%
			}
%>
					result.append(<%=importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(
						editingDomain,
						<%=_getViewCode%>.getElement(), <%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), element));
<%
		}	//local declaration for related nodes.
%>
					result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.RemoveCommand")%>.create(editingDomain, childNode.eContainer(), childNode.eContainmentFeature(), childNode));
					if (newVisualID == visualID) {
						result.append(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.ExpandDrawerCommand")%>(<%=_getViewCode%>));
						result.append(<%=importManager.getImportedName("org.eclipse.emf.edit.command.AddCommand")%>.create(editingDomain, <%=_getViewCode%>, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getView_PersistedChildren(), childNode));
						result.append(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.SetBoundsCommand")%>(childNode, <%if (isListLayout) {%>null<%} else {%>(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>) constraint<%}%>));
					} else {
<%
		{
			int defaultWidth = 40;
			int defaultHeight = 40;
			DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
			if (defSizeAttrs != null) {
				defaultWidth = defSizeAttrs.getWidth();
				defaultHeight = defSizeAttrs.getHeight();
			}
%>
						result.append(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand")%>(<%=_getViewCode%>, element, <%if (isListLayout) {%>null<%} else {%>((<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>) constraint).getCopy().union(new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(<%=defaultWidth%>, <%=defaultHeight%>))<%}%>, <%=importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName())%>.INSTANCE));
<%
		}
%>
					}
					command = result;
				}
@


1.4
log
@[170340]: Expand collapsed compartments automatically when new elements are added to it;
[170341]: Expand/Collapse handles should not be available for empty compartments.
@
text
@d4 1
a4 1
protected Command createAddCommand(final <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, final Object constraint) {
@


1.3
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@d115 1
@


1.2
log
@[160225] bblajer - Respect EStructuralFeature cardinality in commands that create/move/clone elements
@
text
@d91 1
a91 1
<%@@ include file="featureMultiplicity.jetinc"%>
d103 1
a103 1
<%@@ include file="featureMultiplicity.jetinc"%>
@


1.1
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d86 4
d91 1
d97 9
@

