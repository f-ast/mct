head	1.5;
access;
symbols
	v20080910-1520:1.5
	v20070307-0700:1.4
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070103-0300:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061214-0000:1.3
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2007.03.09.17.19.35;	author bblajer;	state dead;
branches;
next	1.4;
commitid	22ed45f197244567;

1.4
date	2007.03.02.21.21.16;	author bblajer;	state Exp;
branches;
next	1.3;
commitid	2b1945e895484567;

1.3
date	2006.12.12.12.54.47;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	355b457ea6574567;

1.2
date	2006.10.12.10.23.44;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.09.17.03.14;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[164018]: Command generation separated from Parts for layout edit policy and graphical node edit policy;
NewDiagramFileWizard: layout is not persisted if the diagram is closed right after initialization
@
text
@<%
if (!childNodes.isEmpty()) {
%>
protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> createCloneCommand(final <%=importManager.getImportedName("org.eclipse.gef.EditPart")%> child, final Object constraint) {
	if (child.getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) {
		final <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> childNode = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) child.getModel();
		final <%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> editingDomain = <%=importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil")%>.getEditingDomain(childNode.getDiagram().getElement());
		String modelID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(childNode);
		if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(modelID)) {
			final int newVisualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(<%=_getViewCode%>, childNode.getElement());
			<%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> command = null;
			switch (newVisualID) {
<%
	for(Iterator it = childNodes.iterator(); it.hasNext(); ) {
		GenNode next = (GenNode) it.next();
%>
			case <%=importManager.getImportedName(next.getEditPartQualifiedClassName())%>.VISUAL_ID:
				command = new <%=importManager.getImportedName(genDiagram.getEditCommandsPackageName() + ".Clone" + next.getModelFacet().getMetaClass().getName() + next.getVisualID() + "Command")%>(<%=_getViewCode%>, childNode, <%if (isListLayout) {%>null<%} else {%>(<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>) constraint<%}%>);
				break;
<%
	}	//for
%>
			}
			if (command != null) {
				return new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.WrappingCommand")%>(editingDomain, command);
			}
		}
	}
	return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
}
<%
}	//if (!childNodes.isEmpty())
%>
@


1.4
log
@[164018]: Add<>Command and Clone<>Command moved to separate classes;
Common methods from edit policies moved to runtime superclasses
@
text
@@


1.3
log
@[164018]: Command generation separated from editparts for link commands (createStart, complete, reconnectSource, reconnectTarget) and nodes (create)
@
text
@a1 3
/* delegation from getCloneCommand to createCloneCommand is 100% analogous to delegation from getAddCommand() to createAddCommand() in ConstrainedLayoutEditPolicy. */
%>
<%
a3 24
protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getCloneCommand(<%=importManager.getImportedName("org.eclipse.gef.requests.ChangeBoundsRequest")%> request) {
	<%=importManager.getImportedName("java.util.List")%> editParts = request.getEditParts();
	<%=importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand")%> command = new <%=importManager.getImportedName("org.eclipse.gef.commands.CompoundCommand")%>();
	command.setDebugLabel("Clone in ConstrainedLayoutEditPolicy");//$NON-NLS-1$
	<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%> childPart;
	<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%> r;
	Object constraint;

	for (int i = 0; i < editParts.size(); i++) {
		childPart = (<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>)editParts.get(i);
		r = childPart.getFigure().getBounds().getCopy();
		//convert r to absolute from childpart figure
		childPart.getFigure().translateToAbsolute(r);
		r = request.getTransformedRectangle(r);
		//convert this figure to relative 
		getLayoutContainer().translateToRelative(r);
		getLayoutContainer().translateFromParent(r);
		r.translate(getLayoutOrigin().getNegated());
		constraint = getConstraintFor(r);
		command.add(createCloneCommand(childPart,
			translateToModelConstraint(constraint)));
	}
	return command.unwrap();
}
a15 3
		TypeModelFacet facet = next.getModelFacet();
		GenFeature childFeature = facet.getChildMetaFeature();
		GenFeature containmentFeature = facet.getContainmentMetaFeature();
d18 1
a18 78
				command = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CommandWrapper")%>() {
					private <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%> afterCopyCommand;
					protected <%=importManager.getImportedName("org.eclipse.emf.common.command.Command")%> createCommand() {
						<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element = childNode.getElement();
						//We are being optimistic here about whether further commands can be executed.
						//Otherwise, we would have to execute the CopyCommand on every mouse move, which could be much too expensive.  
						return <%=importManager.getImportedName("org.eclipse.emf.edit.command.CopyCommand")%>.create(editingDomain, element);
					}
					protected boolean prepare() {
						if (!super.prepare()) {
							return false;
						}
<%
		if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
			GenFeature _feature = childFeature;
			String _ownerInstance = _getViewCode + ".getElement()";
			String _exceedsUpperBound = "return false;";
			GenClass _ownerGenClass = null;
%>
<%@@ include file="../common/featureMultiplicity.jetinc"%>
<%
		}
		{
			GenFeature _feature = containmentFeature;
			String _ownerInstance = _getViewCode + ".getElement()";
			String _exceedsUpperBound = "return false;";
			GenClass _ownerGenClass = null;
%>
<%@@ include file="../common/featureMultiplicity.jetinc"%>
<%
		}
%>
						return true;
					}
					public void execute() {
						super.execute();
						final <%=importManager.getImportedName("java.util.Collection")%> results = super.getResult();
						assert results.size() == 1;
						<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> result = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) results.iterator().next();
						afterCopyCommand = new <%=importManager.getImportedName("org.eclipse.emf.common.command.CompoundCommand")%>();
<%
		if (childFeature != null && childFeature != containmentFeature && !childFeature.isDerived()) {
%>
						afterCopyCommand.append(<%=importManager.getImportedName(childFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(
							editingDomain,
							<%=_getViewCode%>.getElement(), <%=importManager.getImportedName(childFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childFeature.getFeatureAccessorName()%>(), result));
<%
		}
%>
						afterCopyCommand.append(<%=importManager.getImportedName(containmentFeature.getEcoreFeature().isMany() ? "org.eclipse.emf.edit.command.AddCommand" : "org.eclipse.emf.edit.command.SetCommand")%>.create(
							editingDomain,
							<%=_getViewCode%>.getElement(), <%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>(), result));
<%
		{
			int defaultWidth = 40;
			int defaultHeight = 40;
			DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) next.getViewmap().find(DefaultSizeAttributes.class);
			if (defSizeAttrs != null) {
				defaultWidth = defSizeAttrs.getWidth();
				defaultHeight = defSizeAttrs.getHeight();
			}
%>
						afterCopyCommand.append(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand")%>(<%=_getViewCode%>, result, <%if (isListLayout) {%>null<%} else {%>((<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>) constraint).getCopy().union(new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(<%=defaultWidth%>, <%=defaultHeight%>))<%}%>, <%=importManager.getImportedName(next.getNotationViewFactoryQualifiedClassName())%>.INSTANCE));
						if (afterCopyCommand.canExecute()) {
							afterCopyCommand.execute();
						} else {
							assert false;
						}
					}
					public void undo() {
						afterCopyCommand.undo();
						super.undo();
					}
					public void redo() {
						super.redo();
						afterCopyCommand.redo();
					}
				};
a20 1
		}
@


1.2
log
@[160225] bblajer - Respect EStructuralFeature cardinality in commands that create/move/clone elements
@
text
@d67 1
a67 1
<%@@ include file="featureMultiplicity.jetinc"%>
d76 1
a76 1
<%@@ include file="featureMultiplicity.jetinc"%>
@


1.1
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d56 26
@

