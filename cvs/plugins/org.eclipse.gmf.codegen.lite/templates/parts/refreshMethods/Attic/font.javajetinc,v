head	1.3;
access;
symbols
	v20080910-1520:1.3
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2
	v20061005-1700:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060824-1600:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.1
	v20060616-1400:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.04.04.11.05.01;	author bblajer;	state dead;
branches;
next	1.2;
commitid	18c54613864d4567;

1.2
date	2006.06.21.15.22.44;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.21.20.16;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[176696]: InitDiagramContents: do not create notational edges to and from child label nodes;
Rewrite editpart templates in xpt;
Unify what is refreshed for each edit part type;
Preparation for side-affixed elements.
@
text
@<%
boolean isFixedFontSetInFigure;
{
	StyleAttributes styleAttributes = (genElement.getViewmap() == null) ? null : (StyleAttributes)genElement.getViewmap().find(StyleAttributes.class);
	isFixedFontSetInFigure = styleAttributes != null && styleAttributes.isFixedFont();
}
%>

	/**
	 * @@generated
	 */
	protected void refreshFont() {
<%
if (!isFixedFontSetInFigure) {
%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%> style =
			(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle")%>) <%=primaryView%>.getStyle(
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFontStyle());
		<%=importManager.getImportedName("org.eclipse.swt.graphics.Font")%> toDispose = createdFont;
		if (style != null) {
			String fontName = style.getFontName();
			int fontHeight = style.getFontHeight();
			int fontStyle = <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.NORMAL;
			if (style.isBold()) {
				fontStyle |= <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.BOLD;
			}
			if (style.isItalic()) {
				fontStyle |= <%=importManager.getImportedName("org.eclipse.swt.SWT")%>.ITALIC;
			}
			<%=importManager.getImportedName("org.eclipse.swt.graphics.Font")%> currentFont = getFigure().getFont();
			if (currentFont != null) {
				<%=importManager.getImportedName("org.eclipse.swt.graphics.FontData")%> currentFontData = currentFont.getFontData()[0];
				if (currentFontData.getName().equals(fontName) && currentFontData.getHeight() == fontHeight && currentFontData.getStyle() == fontStyle) {
					return;
				}
			}
			createdFont = new <%=importManager.getImportedName("org.eclipse.swt.graphics.Font")%>(null, fontName, fontHeight, fontStyle);
			getFigure().setFont(createdFont);
		} else {
			//revert to the default font
			getFigure().setFont(getViewer().getControl().getFont());
			createdFont = null;
		}
		if (toDispose != null) {
			toDispose.dispose();
		}
<%
}
%>	
	}
<%
if (!isFixedFontSetInFigure) {
%>

	/**
	 * The font (created by {@@link #refreshFont()}) currently assigned to the label (unless the default font is assigned).
	 * Whenever another non-default font is assigned to it, it is safe to dispose the previous one.
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.swt.graphics.Font")%> createdFont;
<%
}
%>	
@


1.2
log
@[mgolubev] #147853 Fonts defined in the gmfgraph model should be used by the generated labels
@
text
@@


1.1
log
@[bblajer] #136702 Code generation targeting pure-GEF runtime
@
text
@d1 8
d13 3
d47 3
d51 3
d61 3
@

