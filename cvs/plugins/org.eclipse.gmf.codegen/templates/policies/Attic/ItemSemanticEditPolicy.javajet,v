head	1.35;
access;
symbols
	v20081022-1925:1.35
	v20081015-1925:1.35
	v20081008-1925:1.35
	v20081001-1925:1.35
	v20080924-1925:1.35
	v20080917-1925:1.35
	v20080911-1728:1.35
	v20080910-1520:1.35
	v20080903-1520:1.35
	v20080827-1520:1.35
	v20080813-1520:1.35
	v20080806-1520:1.35
	v20070202-0200:1.31
	v20070103-0300:1.34
	M4_20:1.34
	v20061222-1800:1.34
	v20061218-1200:1.34
	v20061214-0000:1.34
	v20061120-1300:1.31
	M3_20:1.31
	v20061117-0800:1.31
	v20061027-1200:1.31
	v20061020-1000:1.31
	v20061013-1330:1.31
	v20060919-0800:1.31
	v20060907-1100:1.31
	M1_20:1.31
	v20060904-1500:1.31
	v20060824-1600:1.31
	v20060817-1500:1.31
	v20060728-0500:1.31
	v20060713-1700:1.31
	R1_0_maintenance:1.31.0.2
	R1_0:1.31
	v20060627-1200:1.31
	v20060626-1420:1.30
	v20060620-0400:1.29
	v20060616-1400:1.29
	v20060616-1200:1.29
	v20060609-1400:1.28
	v20060531-1730:1.26
	v20060530-1930:1.25
	v20060526-1200:1.25
	v20060519-1300:1.23
	v20060519-0800:1.23
	v20060512-1000:1.20
	I20060512-1000:1.20
	I20060505-1400:1.20
	I20060428-1300:1.20
	I20060424-0500:1.20
	I20060424-0300:1.20
	M6_10:1.19
	I20060407-1200:1.19
	I20060331-1000:1.18
	I20060324-0300:1.18
	I20060317-1300:1.18
	I20060317-1200:1.18
	I20060316-1300:1.18
	I20060309-1300:1.18
	M5_10:1.17
	S20060303-1600:1.17
	I20060227-1730:1.16
	I20060216-1945:1.16
	I20060210-1715:1.12
	I20060209-1815:1.12
	I20060203-0830:1.8
	I20060202-1415:1.8
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.35
date	2007.01.25.16.57.54;	author ashatalin;	state dead;
branches;
next	1.34;
commitid	271945b8e1904567;

1.34
date	2006.12.06.17.21.00;	author ashatalin;	state Exp;
branches;
next	1.33;
commitid	5efc4576fbfb4567;

1.33
date	2006.11.30.18.19.30;	author ashatalin;	state Exp;
branches;
next	1.32;
commitid	5afc456f20b14567;

1.32
date	2006.11.29.21.08.12;	author ashatalin;	state Exp;
branches;
next	1.31;
commitid	29eb456df6ba4567;

1.31
date	2006.06.27.14.47.50;	author ashatalin;	state Exp;
branches;
next	1.30;

1.30
date	2006.06.22.13.55.20;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.06.14.18.40.16;	author ahunter;	state Exp;
branches;
next	1.28;

1.28
date	2006.06.02.11.53.10;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.05.31.14.15.57;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.05.25.14.22.35;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.05.25.09.33.25;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.16.11.58.29;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.16.10.02.45;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.04.20.10.37.28;	author radvorak;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.07.14.31.35;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.03.08.28.27;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.16.21.32.50;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.14.13.58.45;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.13.19.21.42;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.13.17.20.07;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.09.16.16.00;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.02.14.56.08;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.01.16.49.56;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.31.19.02.08;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.29.18.33.26;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.25.12.21.56;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.11.18.52.48;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.policies" class="ItemSemanticEditPolicyGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.*"
	skeleton="../common.skeleton" %>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
final String javaExprContainer = "JavaConstraints";
final String oppositeEndVarName = "oppositeEnd";
importManager.registerInnerClass(javaExprContainer);
importManager.registerInnerClass(genDiagram.getLinkCreationConstraintsClassName());
%>
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IEditHelperContext;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getBaseItemSemanticEditPolicyClassName()%> extends SemanticEditPolicy {

	/**
	 * @@generated
	 */
	protected Command getSemanticCommand(IEditCommandRequest request) {
		IEditCommandRequest completedRequest = completeRequest(request);
		Object editHelperContext = completedRequest.getEditHelperContext();
		if (editHelperContext instanceof View || (editHelperContext instanceof IEditHelperContext && ((IEditHelperContext) editHelperContext).getEObject() instanceof View)) {
			// no semantic commands are provided for pure design elements
			return null;
		}
		if (editHelperContext == null) {
			editHelperContext = ViewUtil.resolveSemanticElement((View) getHost().getModel());
		}
		IElementType elementType = ElementTypeRegistry.getInstance().getElementType(editHelperContext);
		if (elementType == ElementTypeRegistry.getInstance().getType("org.eclipse.gmf.runtime.emf.type.core.default")) { //$NON-NLS-1$ <% /*
			< % = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()) % >.getInstance().logInfo("Failed to get element type for " + editHelperContext); / / $NON-NLS-1$ */ %>
			elementType = null;
		}
		Command epCommand = getSemanticCommandSwitch(completedRequest);
		if (epCommand != null) {
			ICommand command = epCommand instanceof ICommandProxy ? ((ICommandProxy) epCommand).getICommand() : new CommandProxy(epCommand);
			completedRequest.setParameter(<%=importManager.getImportedName(genDiagram.getBaseEditHelperQualifiedClassName())%>.EDIT_POLICY_COMMAND, command);
		}
		Command ehCommand = null;
		if (elementType != null) {
			ICommand command = elementType.getEditCommand(completedRequest);
			if (command != null) {
				if (!(command instanceof CompositeTransactionalCommand)) {
					TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
					command = new CompositeTransactionalCommand(editingDomain, null).compose(command);
				}
				ehCommand = new ICommandProxy(command);
			}
		}
		boolean shouldProceed = true;
		if (completedRequest instanceof DestroyRequest) {
			shouldProceed = shouldProceed((DestroyRequest) completedRequest);
		}
		if (shouldProceed) {
			if (completedRequest instanceof DestroyRequest) {
				TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
				Command deleteViewCommand = new ICommandProxy(new DeleteCommand(editingDomain, (View) getHost().getModel()));
				ehCommand = ehCommand == null ? deleteViewCommand : ehCommand.chain(deleteViewCommand);
			}
			return ehCommand;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getSemanticCommandSwitch(IEditCommandRequest req) {
		if (req instanceof CreateRelationshipRequest) {
			return getCreateRelationshipCommand((CreateRelationshipRequest) req);
		} else if (req instanceof CreateElementRequest) {
			return getCreateCommand((CreateElementRequest) req);
		} else if (req instanceof ConfigureRequest) {
			return getConfigureCommand((ConfigureRequest) req);
		} else if (req instanceof DestroyElementRequest) {
			return getDestroyElementCommand((DestroyElementRequest) req);
		} else if (req instanceof DestroyReferenceRequest) {
			return getDestroyReferenceCommand((DestroyReferenceRequest) req);
		} else if (req instanceof DuplicateElementsRequest) {
			return getDuplicateCommand((DuplicateElementsRequest) req);
		} else if (req instanceof GetEditContextRequest) {
			return getEditContextCommand((GetEditContextRequest) req);
		} else if (req instanceof MoveRequest) {
			return getMoveCommand((MoveRequest) req);
		} else if (req instanceof ReorientReferenceRelationshipRequest) {
			return getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);
		} else if (req instanceof ReorientRelationshipRequest) {
			return getReorientRelationshipCommand((ReorientRelationshipRequest) req);
		} else if (req instanceof SetRequest) {
			return getSetCommand((SetRequest) req);
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getConfigureCommand(ConfigureRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getCreateCommand(CreateElementRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getSetCommand(SetRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getEditContextCommand(GetEditContextRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getDestroyElementCommand(DestroyElementRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getDuplicateCommand(DuplicateElementsRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getMoveCommand(MoveRequest req) {
		return null;
	}

	/**
	 * @@generated
	 */
	protected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {
		return UnexecutableCommand.INSTANCE;
	}

	/**
	 * @@generated
	 */
	protected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {
		return UnexecutableCommand.INSTANCE;
	}

	/**
	 * @@generated
	 */
	protected Command getMSLWrapper(ICommand cmd) {
		return new ICommandProxy(cmd);
	}

	/**
	 * @@generated
	 */
	protected EObject getSemanticElement() {
		return ViewUtil.resolveSemanticElement((View) getHost().getModel());
	}

	/**
	 * Finds container element for the new relationship of the specified type.
	 * Default implementation goes up by containment hierarchy starting from
	 * the specified element and returns the first element that is instance of
	 * the specified container class.
	 * 
	 * @@generated
	 */
	protected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {
		for (; element != null; element = element.eContainer()) {
			if (containerClass.isSuperTypeOf(element.eClass())) {
				return element;
			}
		}
		return null;
	}
	
	/**
	 * @@generated 
	 */
	protected static class <%=genDiagram.getLinkCreationConstraintsClassName()%> {
<%final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
boolean hasJavaConstraints = false;
boolean hasOCLConstraints = false;
if (expressionProviders != null) {%>

		/**
		 * @@generated 
		 */	
		private static final String OPPOSITE_END_VAR = "<%=oppositeEndVarName%>"; //$NON-NLS-1$
<%	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLink nextLink = (GenLink) it.next();
		GenLinkConstraints linkConstraints = nextLink.getCreationConstraints();
		if (linkConstraints == null || !linkConstraints.isValid()) {
			continue;
		}
		String importedAbstractExprCls = importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName());
		String __javaOperationContainer = javaExprContainer;
		String __outEnvVarName = "env";
		if (linkConstraints.getSourceEnd() != null) {
			if (expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenJavaExpressionProvider) {
				hasJavaConstraints = true;
			} else if (expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenExpressionInterpreter) {
				hasOCLConstraints = true;
				Map __exprEnvVariables = new java.util.HashMap();
				GenClassifier __genExprContext = linkConstraints.getSourceEndContextClass();
				ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
				__exprEnvVariables.put(oppositeEndVarName, linkConstraints.getTargetEndContextClass());%>
		
		/**
		 * @@generated 
		 */
		private static <%=importedAbstractExprCls%> <%=nextLink.getUniqueIdentifier()%>_SourceExpression;
		
		/**
		 * @@generated 
		 */
		static {<%@@ include file="../expressions/initEnv.jetinc"%>
			<%=nextLink.getUniqueIdentifier()%>_SourceExpression = <%@@ include file="../expressions/getExpression.jetinc"%>;
		}
<%			}
		}
		if (linkConstraints.getTargetEnd() != null) {
			if (expressionProviders.getProvider(linkConstraints.getTargetEnd()) instanceof GenJavaExpressionProvider) {
				hasJavaConstraints = true;
			} else if (expressionProviders.getProvider(linkConstraints.getTargetEnd()) instanceof GenExpressionInterpreter) {
				hasOCLConstraints = true;
				Map __exprEnvVariables = new java.util.HashMap();
				GenClassifier __genExprContext = linkConstraints.getTargetEndContextClass();
				ValueExpression __genValueExpression = linkConstraints.getTargetEnd();			
				__exprEnvVariables.put(oppositeEndVarName, linkConstraints.getSourceEndContextClass());%>
		
		/**
		 * @@generated 
		 */
		private static <%=importedAbstractExprCls%> <%=nextLink.getUniqueIdentifier()%>_TargetExpression;

		/**
		 * @@generated 
		 */
		static {<%@@ include file="../expressions/initEnv.jetinc"%>
			<%=nextLink.getUniqueIdentifier()%>_TargetExpression = <%@@ include file="../expressions/getExpression.jetinc"%>;
		}
<%			}
		}
	}
}
	
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	boolean separateContainer;
	GenClass outgoingClass;
	GenClass incomingClass;
	GenClass containerClass = null;
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
		separateContainer = sourceFeature != null;
		if (separateContainer) {
			outgoingClass = sourceFeature.getTypeGenClass();
			containerClass = containmentFeature.getGenClass();
		} else {
			outgoingClass = containmentFeature.getGenClass();
		}
		incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
	} else if (nextLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) nextLink.getModelFacet()).getMetaFeature();
		outgoingClass = metaFeature.getGenClass();
		incomingClass = metaFeature.getTypeGenClass();
		separateContainer = false;
	} else {
		continue;
	}%>
	
		/**
		 * @@generated 
		 */
		public static boolean canCreate<%=nextLink.getUniqueIdentifier()%>(<%if (separateContainer) {%><%=importManager.getImportedName(containerClass.getQualifiedInterfaceName())%> container, <%}%><%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%> source, <%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%> target) {
<%	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature childFeature = modelFacet.getChildMetaFeature();

		int upperContainmentBound = containmentFeature.getEcoreFeature().getUpperBound();
		int upperChildBound = childFeature.getEcoreFeature().getUpperBound();
		boolean checkChildFeatureUpperBound = !childFeature.equals(containmentFeature) && upperChildBound > 0;
		String containerVarName = separateContainer ? "container" : "source";
		if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {%>
			if (<%=containerVarName%> != null) {
<%/* check that containment feature is not set / has capacity for the new element */ 
			if (upperContainmentBound > 0) {
				if (upperContainmentBound == 1) {%>
				if (<%=getFeatureValueGetter(containerVarName, containmentFeature, false, importManager)%> != null) {
<%				} else {%>
				if (<%=getFeatureValueGetter(containerVarName, containmentFeature, false, importManager)%>.size() >= <%=upperContainmentBound%>) {
<%				}%>
					return false;
				}
<%			}
			if (checkChildFeatureUpperBound) {
				if (upperChildBound == 1) {%>
				if (<%=getFeatureValueGetter(containerVarName, childFeature, false, importManager)%> != null) {
<%				} else {%>
				if (<%=getFeatureValueGetter(containerVarName, childFeature, false, importManager)%>.size() >= <%=upperChildBound%>) {
<%				}%>
					return false;
				}
<%			}%>
			}
<%		}		
	} else { /* nextLink.getModelFacet() instanceof FeatureLinkModelFacet */
		GenFeature metaFeature = ((FeatureLinkModelFacet) nextLink.getModelFacet()).getMetaFeature();
		int upperBound = metaFeature.getEcoreFeature().getUpperBound();%>
			if (source != null) {
<% /* check that feature is not set / has capacity for the new value / is unique */
		if (upperBound > 0) {
			if (upperBound == 1) {%>
				if (<%=getFeatureValueGetter("source", metaFeature, false, importManager)%> != null) {
<%			} else {%>
				if (<%=getFeatureValueGetter("source", metaFeature, false, importManager)%>.size() >= <%=upperBound%> || <%=getFeatureValueGetter("source", metaFeature, false, importManager)%>.contains(target)) {
<%			}%>
					return false;
				}
<%		} else {%>
				if (<%=getFeatureValueGetter("source", metaFeature, false, importManager)%>.contains(target)) {
					return false;
				}
<%		}%>
			}
<%	}
	
	if (expressionProviders != null && nextLink.getCreationConstraints() != null && nextLink.getCreationConstraints().isValid()) {
		GenLinkConstraints constraints = nextLink.getCreationConstraints();
		if (constraints.getSourceEnd() != null) {
			ValueExpression sourceExpression = constraints.getSourceEnd();
			GenExpressionProviderBase expressionProvider = expressionProviders.getProvider(sourceExpression);
			if (expressionProvider instanceof GenJavaExpressionProvider) {%>
			if (!<%=javaExprContainer%>.<%=((GenJavaExpressionProvider) expressionProvider).getOperationName(sourceExpression)%>(source, target).booleanValue()) {
				return false;
			}
<%			} else if (expressionProvider instanceof GenExpressionInterpreter) {%>
			if (!evaluate(<%=nextLink.getUniqueIdentifier()%>_SourceExpression, source, target, false)) {
				return false;
			}
<%			}
		}
		if (constraints.getTargetEnd() != null) {
			ValueExpression targetExpression = constraints.getTargetEnd();
			GenExpressionProviderBase expressionProvider = expressionProviders.getProvider(targetExpression);
			if (expressionProvider instanceof GenJavaExpressionProvider) {%>
			if (!<%=javaExprContainer%>.<%=((GenJavaExpressionProvider) expressionProvider).getOperationName(targetExpression)%>(target, source).booleanValue()) {
				return false;
			}
<%			} else if (expressionProvider instanceof GenExpressionInterpreter) {%>
			if (!evaluate(<%=nextLink.getUniqueIdentifier()%>_TargetExpression, target, source, true)) {
				return false;
			}
<%			}
		}
	}%>
			return true;
		}
<%}
	
if (expressionProviders != null && hasOCLConstraints) {
	String importedAbstractExprCls = importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName());%>
	
		/**
		 * @@generated 
		 */
		private static boolean evaluate(<%=importedAbstractExprCls%> constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {
			if (sourceEnd == null) {
				return true;
			}
			<%=importManager.getImportedName("java.util.Map")%> evalEnv = <%=importManager.getImportedName("java.util.Collections")%>.singletonMap(OPPOSITE_END_VAR, oppositeEnd);			
			try {
				Object val = constraint.evaluate(sourceEnd, evalEnv);
				return (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;
			} catch(Exception e) {	
				<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Link constraint evaluation error", e); //$NON-NLS-1$
				return false;
			}
		}
<%}
	
if(expressionProviders != null && hasJavaConstraints) {
%>		
		/**
		 * @@generated
		 */
		private static class <%=javaExprContainer%> {
<%
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;
		GenClass srcContext = linkConstraints.getSourceEndContextClass();
		GenClass targetContext = linkConstraints.getTargetEndContextClass();
		if(srcContext == null || targetContext == null) continue;
		String __genExprResultType = "java.lang.Boolean";
		Map __exprEnvVariables = new java.util.HashMap();
		GenClassifier __genExprContext = srcContext;
		ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
		if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {				
			__exprEnvVariables.put(oppositeEndVarName, targetContext);
%>
<%@@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
		}
		__genValueExpression = linkConstraints.getTargetEnd();
		if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {		
			__genExprContext = targetContext;
			__exprEnvVariables.put(oppositeEndVarName, srcContext);
%>
<%@@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
		}
	} /*java constraints iteration*/
%>
		} // <%=javaExprContainer%>
<%
} /* end of hasJavaConstraints */
%>	
	}

}	
<%importManager.emitSortedImports();%>@


1.34
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@@


1.33
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d247 1
d264 1
a264 1
			if (!hasJavaConstraints && expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenJavaExpressionProvider) {
d266 6
a271 5
			}
			Map __exprEnvVariables = new java.util.HashMap();
			GenClassifier __genExprContext = linkConstraints.getSourceEndContextClass();
			ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
			__exprEnvVariables.put(oppositeEndVarName, linkConstraints.getTargetEndContextClass());%>
d284 2
a285 1
<%		}
d287 1
a287 1
			if (!hasJavaConstraints && expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenJavaExpressionProvider) {
d289 6
a294 5
			}
			Map __exprEnvVariables = new java.util.HashMap();
			GenClassifier __genExprContext = linkConstraints.getTargetEndContextClass();
			ValueExpression __genValueExpression = linkConstraints.getTargetEnd();			
			__exprEnvVariables.put(oppositeEndVarName, linkConstraints.getSourceEndContextClass());%>
d307 2
a308 1
<%		}
d398 8
a405 1
		if (constraints.getSourceEnd() != null) {%>
d409 10
a418 2
<%		}
		if (constraints.getTargetEnd() != null) {%>
d422 2
a423 1
<%		}
d429 1
a429 1
if (expressionProviders != null) {
@


1.32
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d308 25
a332 1
	GenLink nextLink = (GenLink) it.next();%>
d337 55
a391 4
		public static boolean canCreate<%=nextLink.getUniqueIdentifier()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest")%> req, boolean isBackDirected) {
			boolean canCreate = true;
<%	if (expressionProviders != null && nextLink.getCreationConstraints() != null && nextLink.getCreationConstraints().isValid()) {
		String importedAbstractExprCls = importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName());
d393 12
a404 14
		String sourceExpression = constraints.getSourceEnd() != null ? nextLink.getUniqueIdentifier() + "_SourceExpression" : "null";
		String targetExpression = constraints.getTargetEnd() != null ? nextLink.getUniqueIdentifier() + "_TargetExpression" : "null";%>
			EObject source = req.getSource();
			EObject target = req.getTarget();

			<%=importedAbstractExprCls%> sourceConstraint = isBackDirected ? <%=targetExpression%> : <%=sourceExpression%>;
			<%=importedAbstractExprCls%> targetConstraint = null;
			if(req.getTarget() != null) {
				targetConstraint = isBackDirected ? <%=sourceExpression%> : <%=targetExpression%>;
			}
			canCreate &= sourceConstraint == null || evaluate(sourceConstraint, source, target, false);
			canCreate &= targetConstraint == null || evaluate(targetConstraint, target, source, true);
<%	}%>
			return canCreate;
d415 3
@


1.31
log
@Removing unnecessary logging.
@
text
@d12 2
a13 1
String javaExprContainer = "JavaConstraints";
d240 1
a240 8

<%
final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
if (genDiagram.hasLinkCreationConstraints() && expressionProviders != null) {
	String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
	String importedAbstractExprCls = importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName());
	boolean hasJavaConstraints = false; 
%>
d245 3
a247 15
<%
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;						
		if(linkConstraints.getSourceEndContextClass() == null || linkConstraints.getTargetEndContextClass() == null) continue;
		hasJavaConstraints |= (linkConstraints.getSourceEnd() != null && expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenJavaExpressionProvider) ||
							(linkConstraints.getTargetEnd() != null && expressionProviders.getProvider(linkConstraints.getTargetEnd()) instanceof GenJavaExpressionProvider);
%>
		/**
		 * @@generated 
		 */
		public static final <%=genDiagram.getLinkCreationConstraintsClassName()%> <%=linkConstraints.getConstraintsInstanceFieldName()%> = create<%=linkConstraints.getConstraintsInstanceFieldName()%>();
<%
	} // end of link iteration
%>
a248 9
<%
	final String oppositeEndVarName = "oppositeEnd";
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;
		GenClass srcContext = linkConstraints.getSourceEndContextClass();
		GenClass targetContext = linkConstraints.getTargetEndContextClass();
		if(srcContext == null || targetContext == null) continue;
%>
d251 9
a259 3
		 */
		private static <%=genDiagram.getLinkCreationConstraintsClassName()%> create<%=linkConstraints.getConstraintsInstanceFieldName()%>() {
<%			
d261 10
a270 26
		Map __exprEnvVariables = new java.util.HashMap();
		String __outEnvVarName = "sourceEnv";
		GenClassifier __genExprContext = srcContext;
		ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
		__exprEnvVariables.put(oppositeEndVarName, targetContext); //$NON-NLS-1$

%><%@@ include file="../expressions/initEnv.jetinc"%>				
			<%=importedAbstractExprCls%> sourceExpression = <%
		if(linkConstraints.getSourceEnd() != null) {
%><%@@ include file="../expressions/getExpression.jetinc"%><%
		} else %>null<%;%>;
<%
		__outEnvVarName = "targetEnv";
		__genExprContext = targetContext;
		__genValueExpression = linkConstraints.getTargetEnd();			
		__exprEnvVariables.put(oppositeEndVarName, srcContext); //$NON-NLS-1$
%><%@@ include file="../expressions/initEnv.jetinc"%>
			<%=importedAbstractExprCls%> targetExpression = <%
		if(linkConstraints.getTargetEnd() != null) {
%><%@@ include file="../expressions/getExpression.jetinc"%><%
		} else %>null<%;%>;
			return new <%=genDiagram.getLinkCreationConstraintsClassName()%>(sourceExpression, targetExpression);
		}
<%
	} // end of link iteration
%>
d273 3
a275 2
		 */	
		private static final String OPPOSITE_END_VAR = "oppositeEnd"; //$NON-NLS-1$
d278 14
a291 2
		 */	
		private <%=importedAbstractExprCls%> srcEndInv;
d294 3
a296 2
		 */	
		private <%=importedAbstractExprCls%> targetEndInv;
d299 3
a301 4
		 */		
		public <%=genDiagram.getLinkCreationConstraintsClassName()%>(<%=importedAbstractExprCls%> sourceEnd, <%=importedAbstractExprCls%> targetEnd) {
			this.srcEndInv = sourceEnd;			
			this.targetEndInv = targetEnd;			
d303 7
a309 1
		
d312 10
a321 4
		 */	
		public boolean canCreateLink(<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest")%> req, boolean isBackDirected) {
			Object source = req.getSource();
			Object target = req.getTarget();
d323 1
a323 1
			<%=importedAbstractExprCls%> sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;
d326 1
a326 1
				targetConstraint = isBackDirected ? srcEndInv : targetEndInv;
d328 4
a331 5
			boolean isSourceAccepted = sourceConstraint != null ? evaluate(sourceConstraint, source, target, false) : true;
			if(isSourceAccepted && targetConstraint != null) {
				return evaluate(targetConstraint, target, source, true);
			}
			return isSourceAccepted;
d333 4
d347 1
a347 1
				<%=pluginActivatorClass%>.getInstance().logError("Link constraint evaluation error", e); //$NON-NLS-1$
d351 3
a353 2
<%
if(hasJavaConstraints) {
d355 4
a358 4
	/**
	 * @@generated
	 */
	private static class <%=javaExprContainer%> {
d386 1
a386 1
	} // <%=javaExprContainer%>
d389 1
a389 1
%>		
d391 3
a393 3
<%} /*end of hasLinkCreationConstraints()*/ %>	
}
<%importManager.emitSortedImports();%>
@


1.30
log
@#146889 do not allow to rerote links (temp solution)
@
text
@d67 2
a68 2
		if (elementType == ElementTypeRegistry.getInstance().getType("org.eclipse.gmf.runtime.emf.type.core.default")) { //$NON-NLS-1$
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logInfo("Failed to get element type for " + editHelperContext); //$NON-NLS-1$
@


1.29
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d20 1
d199 1
a199 1
		return null;
d206 1
a206 1
		return null;
@


1.28
log
@#142086 semantic commands are executed before "before" advice commands
@
text
@d24 1
a24 1
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
d72 1
a72 1
			ICommand command = epCommand instanceof EtoolsProxyCommand ? ((EtoolsProxyCommand) epCommand).getICommand() : new CommandProxy(epCommand);
d83 1
a83 1
				ehCommand = new EtoolsProxyCommand(command);
d93 1
a93 1
				Command deleteViewCommand = new EtoolsProxyCommand(new DeleteCommand(editingDomain, (View) getHost().getModel()));
d212 1
a212 1
		return new EtoolsProxyCommand(cmd);
@


1.27
log
@fix some nls markers
@
text
@d23 1
d62 3
d67 1
a67 1
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logInfo("Failed to get element type for " + editHelperContext);
d70 6
a75 1
		Command semanticHelperCommand = null;
d77 7
a83 3
			ICommand semanticCommand = elementType.getEditCommand(completedRequest);
			if (semanticCommand != null) {
				semanticHelperCommand = new EtoolsProxyCommand(semanticCommand);
a85 16
		Command semanticPolicyCommand = getSemanticCommandSwitch(completedRequest);

		// combine commands from edit policy and edit helper
		if (semanticPolicyCommand == null) {
			if (semanticHelperCommand == null) {
				return null;
			} else {
				semanticPolicyCommand = semanticHelperCommand;
			}
		} else {
			if (semanticHelperCommand != null) {
				semanticPolicyCommand = semanticPolicyCommand.chain(semanticHelperCommand);
			}
		}

		// append command to delete view if necessary
d92 3
a94 2
				Command deleteViewCommand = new EtoolsProxyCommand(new DeleteCommand(((IGraphicalEditPart) getHost()).getEditingDomain(), (View) getHost().getModel()));
				semanticPolicyCommand = semanticPolicyCommand.chain(deleteViewCommand);
d96 1
a96 1
			return semanticPolicyCommand;
d212 1
a212 4
		TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
		CompositeTransactionalCommand modelCmd = new CompositeTransactionalCommand(editingDomain, cmd.getLabel());
		modelCmd.compose(cmd);
		return new EtoolsProxyCommand(modelCmd);
@


1.26
log
@remove warns; fix edit helper context resolution
@
text
@d62 1
a62 1
		if (elementType == ElementTypeRegistry.getInstance().getType("org.eclipse.gmf.runtime.emf.type.core.default")) {
@


1.25
log
@enable edit helpers
@
text
@d28 1
d57 3
a59 2
		if (editHelperContext instanceof View) {
			editHelperContext = ((View) editHelperContext).getElement();
@


1.24
log
@temporarily disable edit helpers since they return wrong element type
@
text
@d55 9
a63 1
		IElementType elementType = ElementTypeRegistry.getInstance().getElementType(completedRequest.getEditHelperContext());
d68 1
a68 1
				//semanticHelperCommand = new EtoolsProxyCommand(semanticCommand);
@


1.23
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d60 1
a60 1
				semanticHelperCommand = new EtoolsProxyCommand(semanticCommand);
@


1.22
log
@#126202 use commands from edit helpers
@
text
@d5 2
a6 2
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());
d9 1
a9 1
package <%=genDiagram.getEditPoliciesPackageName()%>;
@


1.21
log
@#126202 enable semantic policy override from edit helpers
@
text
@d15 29
a43 30

importManager.addImport("org.eclipse.emf.ecore.EClass");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.transaction.TransactionalEditingDomain");
importManager.addImport("org.eclipse.gef.commands.Command");
importManager.addImport("org.eclipse.gef.commands.UnexecutableCommand");
importManager.addImport("org.eclipse.gmf.runtime.common.core.command.ICommand");
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand");
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy");
importManager.addImport("org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.IElementType");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");

importManager.markImportLocation(stringBuffer);%>
d54 8
a61 3
		Command elementTypeCommand = super.getSemanticCommand(request);
		if (elementTypeCommand != null) {
			return elementTypeCommand;
d63 13
a75 5
		
		IEditCommandRequest completedRequest = completeRequest(request);
		Command semanticCommand = getSemanticCommandSwitch(completedRequest);
		if (semanticCommand == null) {
			return UnexecutableCommand.INSTANCE;
d77 2
d85 2
a86 2
				ICommand deleteCommand = new DeleteCommand((View) getHost().getModel());
				semanticCommand = semanticCommand.chain(new EtoolsProxyCommand(deleteCommand));
d88 1
a88 1
			return semanticCommand;
d90 1
a90 1
		return UnexecutableCommand.INSTANCE;
@


1.20
log
@#136672 Adapt Element Initializers, Link Constraints templates
@
text
@d55 5
@


1.19
log
@#135156 Templates need small change for OCL API Changes

Patch commited.
@
text
@d11 34
a44 28
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>
d216 2
a217 1
if (genDiagram.hasLinkCreationConstraints()) {
d219 2
d228 5
a232 7
		GenLink nextLink = (GenLink) it.next();
		GenLinkConstraints linkConstraints = nextLink.getCreationConstraints();
		if(linkConstraints != null) {						
			String srcConstraint = linkConstraints.getSourceEnd() != null ? linkConstraints.getSourceEnd().getBody() : null;
			String targetConstraint = linkConstraints.getTargetEnd() != null ? linkConstraints.getTargetEnd().getBody(): null;
			GenClass srcContext = linkConstraints.getSourceEndContextClass();
			GenClass targetContext = linkConstraints.getTargetEndContextClass();
d237 1
a237 7
		public static final <%=genDiagram.getLinkCreationConstraintsClassName()%> <%=linkConstraints.getConstraintsInstanceFieldName()%> = new <%=genDiagram.getLinkCreationConstraintsClassName()%>(
			new LinkEndConstraint(
				<%=srcConstraint != null ? "\"" + srcConstraint + "\"" : null%>, //$NON-NLS-1$
				<%=(srcContext!=null) ? getMetaClassAccessor(srcContext, importManager) : null%>),
			new LinkEndConstraint(
				<%=targetConstraint != null ? "\"" + targetConstraint + "\"" : null%>, //$NON-NLS-1$
				<%=(targetContext!=null) ? getMetaClassAccessor(targetContext, importManager) : null%>));
a238 1
		} // end of LinkConstraints if
d241 10
d253 30
a282 2
		 */	
		private static final String OPPOSITE_END_VAR = "oppositeEnd"; //$NON-NLS-1$
d286 1
a286 5
		private <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.Variable")%> varOppositeEndToSource;
		/**
		 * @@generated 
		 */	
		private <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.Variable")%> varOppositeEndToTarget;
d290 1
a290 1
		private <%=importManager.getImportedName("org.eclipse.emf.ocl.query.Query")%> srcEndInv;
d294 1
a294 1
		private <%=importManager.getImportedName("org.eclipse.emf.ocl.query.Query")%> targetEndInv;
d298 3
a300 14
		public <%=genDiagram.getLinkCreationConstraintsClassName()%>(LinkEndConstraint sourceEnd, LinkEndConstraint targetEnd) {			
			if(sourceEnd != null && sourceEnd.context != null && sourceEnd.body != null) {				
				if(targetEnd != null && targetEnd.context != null) {
					this.varOppositeEndToTarget = createVar(OPPOSITE_END_VAR, targetEnd.context);			
				}
				this.srcEndInv = createQuery(sourceEnd, varOppositeEndToTarget);
			}
			
			if(targetEnd != null && targetEnd.context != null && targetEnd.body != null) {
				if(sourceEnd != null && sourceEnd.context != null) {
					this.varOppositeEndToSource = createVar(OPPOSITE_END_VAR, sourceEnd.context);				
				}
				this.targetEndInv = createQuery(targetEnd, varOppositeEndToSource);			
			}
d310 2
a311 2
			Query sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;
			Query targetConstraint = null;
a320 24
		
		/**
		 * @@generated 
		 */	
		private Query createQuery(LinkEndConstraint constraint, <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.Variable")%> oppositeEndDecl) {
			final <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.Variable")%> oppositeEndDeclLocal = oppositeEndDecl;
			try {			
				<%=importManager.getImportedName("org.eclipse.emf.ocl.helper.IOCLHelper")%> oclHelper = 
					<%=importManager.getImportedName("org.eclipse.emf.ocl.helper.HelperUtil")%>.createOCLHelper(new <%=importManager.getImportedName("org.eclipse.emf.ocl.parser.EcoreEnvironmentFactory")%>() {
					public <%=importManager.getImportedName("org.eclipse.emf.ocl.parser.Environment")%> createClassifierContext(Object context) {
						<%=importManager.getImportedName("org.eclipse.emf.ocl.parser.Environment")%> env = super.createClassifierContext(context);
						if(oppositeEndDeclLocal != null) {
							env.addElement(oppositeEndDeclLocal.getName(), oppositeEndDeclLocal, true);
						}
						return env;
					}
				});
				oclHelper.setContext(constraint.context);
				return <%=importManager.getImportedName("org.eclipse.emf.ocl.query.QueryFactory")%>.eINSTANCE.createQuery(oclHelper.createInvariant(constraint.body));
			} catch (Exception e) {
				<%=pluginActivatorClass%>.getInstance().logError("Link constraint expression error", e); //$NON-NLS-1$
				return null;
			}
		}
d324 3
a326 4
		 */		
		private static boolean evaluate(<%=importManager.getImportedName("org.eclipse.emf.ocl.query.Query")%> query, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {
			<%=importManager.getImportedName("org.eclipse.emf.ocl.parser.EvaluationEnvironment")%> evalEnv = query.getEvaluationEnvironment();
			evalEnv.replace(OPPOSITE_END_VAR, oppositeEnd);
d328 2
a329 2
				Object val = query.evaluate(sourceEnd);			
				return (val instanceof Boolean) ? ((Boolean)val).booleanValue() : false;
a331 1
				if(evalEnv != null) evalEnv.clear();			
a332 2
			} finally {
				if(clearEnv) evalEnv.clear();
d335 3
a337 11
	
		/**
		 * @@generated 
		 */		
		private static <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.Variable")%> createVar(String name, <%=importManager.getImportedName("org.eclipse.emf.ecore.EClassifier")%> type) {
			<%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.Variable")%> var = <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.ExpressionsFactory")%>.eINSTANCE.createVariable();
			var.setName(name);
			var.setType(<%=importManager.getImportedName("org.eclipse.emf.ocl.parser.EcoreEnvironment")%>.getOCLType(type));		
			return var;
		}	
	}
d339 27
a365 8
	 * @@generated 
	 */	
	static class LinkEndConstraint {
		final <%=importManager.getImportedName("org.eclipse.emf.ecore.EClassifier")%> context;
		final String body;
		LinkEndConstraint(String body, <%=importManager.getImportedName("org.eclipse.emf.ecore.EClassifier")%> context) {
			this.context = context;
			this.body = body;
d367 6
d374 1
a374 1
<%} //end of LinkConstraints %>	
@


1.18
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d248 1
a248 1
		private <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration")%> varOppositeEndToSource;
d252 1
a252 1
		private <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration")%> varOppositeEndToTarget;
d302 2
a303 2
		private Query createQuery(LinkEndConstraint constraint, <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration")%> oppositeEndDecl) {
			final <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration")%> oppositeEndDeclLocal = oppositeEndDecl;
d344 2
a345 2
		private static <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration")%> createVar(String name, <%=importManager.getImportedName("org.eclipse.emf.ecore.EClassifier")%> type) {
			<%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration")%> var = <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.ExpressionsFactory")%>.eINSTANCE.createVariableDeclaration();
@


1.17
log
@Ocl -> OCL to fix compilation errors
@
text
@d5 2
a6 2
GenDiagram diagram = (GenDiagram) ((Object[]) argument)[0];
ImportUtil importManager = new ImportUtil(diagram.getEditPoliciesPackageName());
d8 2
a9 1
package <%=diagram.getEditPoliciesPackageName()%>;
d43 1
a43 1
public class <%=diagram.getBaseItemSemanticEditPolicyClassName()%> extends SemanticEditPolicy {
d210 2
a211 2
if(diagram.hasLinkCreationConstraints()) {
	String pluginActivatorClass = importManager.getImportedName(diagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
d216 1
a216 1
	protected static class <%=diagram.getLinkCreationConstraintsClassName()%> {
d218 1
a218 1
	for (Iterator it = diagram.getLinks().iterator(); it.hasNext();) {
d230 1
a230 1
		public static final <%=diagram.getLinkCreationConstraintsClassName()%> <%=linkConstraints.getConstraintsInstanceFieldName()%> = new <%=diagram.getLinkCreationConstraintsClassName()%>(
d264 1
a264 1
		public <%=diagram.getLinkCreationConstraintsClassName()%>(LinkEndConstraint sourceEnd, LinkEndConstraint targetEnd) {			
@


1.16
log
@[rdvorak] #128087 - Migrate to EMFT OCL API changes - #125458, 125684
@
text
@d305 1
a305 1
					<%=importManager.getImportedName("org.eclipse.emf.ocl.helper.HelperUtil")%>.createOclHelper(new <%=importManager.getImportedName("org.eclipse.emf.ocl.parser.EcoreEnvironmentFactory")%>() {
d346 1
a346 1
			var.setType(<%=importManager.getImportedName("org.eclipse.emf.ocl.parser.EcoreEnvironment")%>.getOclType(type));		
@


1.15
log
@use new transactional emf api
@
text
@d304 1
a304 1
				<%=importManager.getImportedName("org.eclipse.emf.ocl.helper.IOclHelper")%> oclHelper = 
d317 1
a317 1
				<%=pluginActivatorClass%>.getInstance().logError(null, e);
d332 1
a332 1
				<%=pluginActivatorClass%>.getInstance().logError(null, e);	
@


1.14
log
@Rollback. Sources should be compatible with stable build of EMFT.
@
text
@d12 1
d19 1
d21 1
a21 1
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;
d178 2
a179 1
		CompositeModelCommand modelCmd = new CompositeModelCommand(cmd.getLabel());
@


1.13
log
@#127497 Creating diagram file by InitDiagramFileAction in arbitrary location
+ correcting the case of OCL-related classes
@
text
@a6 1
String pluginActivatorClass = importManager.getImportedName(diagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
d207 1
d301 1
a301 1
				<%=importManager.getImportedName("org.eclipse.emf.ocl.helper.IOCLHelper")%> oclHelper = 
@


1.12
log
@Updating with new transaction API.
@
text
@d301 1
a301 1
				<%=importManager.getImportedName("org.eclipse.emf.ocl.helper.IOclHelper")%> oclHelper = 
@


1.11
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d59 1
a59 1
				semanticCommand.chain(new EtoolsProxyCommand(deleteCommand));
@


1.10
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d5 1
a5 1
GenDiagram diagram = (GenDiagram) argument;
@


1.9
log
@ImportManager moved to oeg.common
@
text
@d4 5
a8 1
<%GenDiagram diagram = (GenDiagram) argument;%>
a10 1
<%ImportUtil importManager = new ImportUtil(diagram.getEditPoliciesPackageName());%>
d314 1
a314 1
				<%=importManager.getImportedName(diagram.getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError(null, e);
d329 1
a329 1
				<%=importManager.getImportedName(diagram.getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError(null, e);	
@


1.8
log
@Introducing local variable to work around of merger problem - it removes "final" from the parameter on next re-generation.
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.* org.eclipse.emf.codegen.ecore.genmodel.* java.util.*"
@


1.7
log
@[rdvorak] #125848 Adapt to emft ocl changes in API
@
text
@d295 2
a296 1
		private Query createQuery(LinkEndConstraint constraint, final <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration")%> oppositeEndDecl) {
d302 2
a303 2
						if(oppositeEndDecl != null) {
							env.addElement(oppositeEndDecl.getName(), oppositeEndDecl, true);
@


1.6
log
@#125893
Logging methods
@
text
@a218 1
			GenClass linkClass = linkConstraints.getLinkClass();
d229 1
a229 2
				<%=(targetContext!=null) ? getMetaClassAccessor(targetContext, importManager) : null%>),
				<%=(linkClass!=null) ? getMetaClassAccessor(linkClass, importManager) : null%>);
a240 4
		private static final String LINK_VAR = "link"; //$NON-NLS-1$	
		/**
		 * @@generated 
		 */	
a248 4
		private <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration")%> varLinkObject;
		/**
		 * @@generated 
		 */	
d257 1
a257 5
		public <%=diagram.getLinkCreationConstraintsClassName()%>(LinkEndConstraint sourceEnd, LinkEndConstraint targetEnd, <%=importManager.getImportedName("org.eclipse.emf.ecore.EClassifier")%> linkClass) {
			if(linkClass != null) {
				this.varLinkObject = createVar(LINK_VAR, linkClass);
			}
			
d279 1
a279 1
			Object link = req.getNewElement(); 
d285 1
a285 1
			boolean isSourceAccepted = sourceConstraint != null ? evaluate(sourceConstraint, source, target, link, false) : true;
d287 1
a287 1
				return evaluate(targetConstraint, target, source, link, true);
d295 14
a308 8
		private Query createQuery(LinkEndConstraint constraint, <%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration")%> oppositeEndDecl) {
			try {
				<%=importManager.getImportedName("org.eclipse.emf.ocl.parser.Environment")%> env = <%=importManager.getImportedName("org.eclipse.emf.ocl.parser.EcoreEnvironmentFactory")%>.ECORE_INSTANCE.createClassifierContext(constraint.context);
				if(oppositeEndDecl != null) env.addElement(oppositeEndDecl.getName(), oppositeEndDecl, true);
				if(varLinkObject != null) env.addElement(LINK_VAR, varLinkObject, true);			

				return <%=importManager.getImportedName("org.eclipse.emf.ocl.query.QueryFactory")%>.eINSTANCE.createQuery(
					<%=importManager.getImportedName("org.eclipse.emf.ocl.expressions.util.ExpressionsUtil")%>.createInvariant(env, constraint.body, true));
d318 1
a318 1
		private static boolean evaluate(<%=importManager.getImportedName("org.eclipse.emf.ocl.query.Query")%> query, Object sourceEnd, Object oppositeEnd, Object link, boolean clearEnv) {
a320 1
			evalEnv.replace(LINK_VAR, link);		
@


1.5
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d318 1
a318 1
				e.printStackTrace();
d333 2
a334 2
			} catch(Exception e) {		
				e.printStackTrace();			
@


1.4
log
@#115621 Support links with distinct source and containment features
@
text
@d2 2
a3 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
d202 162
@


1.3
log
@#116031 avoid hardcoded class names in templates
@
text
@d7 1
d17 1
d184 17
@


1.2
log
@#115812 for reference based links
@
text
@d35 1
a35 1
public class <%=importManager.getImportedName(diagram.getBaseItemSemanticEditPolicyQualifiedClassName())%> extends SemanticEditPolicy {
@


1.1
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d7 1
d12 1
d175 7
@

