head	1.11;
access;
symbols
	v20081022-1925:1.11
	v20081015-1925:1.11
	v20081008-1925:1.11
	v20081001-1925:1.11
	v20080924-1925:1.11
	v20080917-1925:1.11
	v20080911-1728:1.11
	v20080910-1520:1.11
	v20080903-1520:1.11
	v20080827-1520:1.11
	v20080813-1520:1.11
	v20080806-1520:1.11
	v20070202-0200:1.10
	v20061027-1200:1.10
	v20061020-1000:1.10
	v20060919-0800:1.10
	v20060907-1100:1.10
	M1_20:1.10
	v20060904-1500:1.10
	v20060824-1600:1.10
	v20060817-1500:1.10
	v20060728-0500:1.10
	v20060713-1700:1.10
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	v20060627-1200:1.10
	v20060626-1420:1.10
	v20060620-0400:1.10
	v20060616-1400:1.10
	v20060616-1200:1.10
	v20060609-1400:1.10
	v20060531-1730:1.10
	v20060530-1930:1.10
	v20060526-1200:1.10
	v20060519-1300:1.10
	v20060519-0800:1.10
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.3
	I20051124-2000:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2006.09.26.15.41.04;	author atikhomirov;	state dead;
branches;
next	1.10;

1.10
date	2006.05.18.14.03.44;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.03.13.22.36;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.05.18.48.06;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.25.12.21.56;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.24.11.09.27;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.21.09.35.37;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.11
log
@do not generate GraphicalNodeEditPolicy unless there's smth for it to do
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.policies" class="NodeGraphicalNodeEditPolicyGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenNode genNode = (GenNode) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genNode.getDiagram();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genNode.getGraphicalNodeEditPolicyClassName()%> extends <%=importManager.getImportedName(genDiagram.getBaseGraphicalNodeEditPolicyQualifiedClassName())%> {
<%
Set ids = new HashSet();
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext(); ) {
	GenLink genLink = (GenLink) links.next();
	if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
		continue;
	}
	GenClass incomingClass;
	GenClass outgoingClass;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		outgoingClass = modelFacet.getSourceMetaFeature() == null
			? modelFacet.getContainmentMetaFeature().getGenClass()
			: modelFacet.getSourceMetaFeature().getTypeGenClass();
		incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
		outgoingClass = metaFeature.getGenClass();
		incomingClass = metaFeature.getTypeGenClass();
	} else {
		continue;
	}
	if (genNode.getModelFacet() == null) {
		continue;
	}
	GenClass nodeMetaClass = genNode.getModelFacet().getMetaClass();
	boolean canBeSource = outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
	boolean canBeTarget = incomingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
/*
 * This logic is currently alligned with the logic in NodeItemSemanticEditPolicy.javajet i.e.:
 *
 * - we do not perform link rotation if this link could be drawn from instance of this EP 
 *   to the instance of this EP.
 *
 * - if link could be created in "opposite" direction (genLink.isIncomingCreationAllowed() == true)
 *   and this EP could be only a source of the link then we should reverse link at the end of link 
 *   creation
 *
 */
	if (canBeSource && canBeTarget) {
		continue;
	}
	if (genLink.isIncomingCreationAllowed() && canBeSource) {
		ids.add(genLink.getUniqueIdentifier());
	}
}
if (!ids.isEmpty()) {
%>

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getConnectionCompleteCommand(
			<%=importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest")%> request) {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%> elementType = getElementType(request);
<%	for (Iterator it = ids.iterator(); it.hasNext();) {%>
		if (<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=(String) it.next()%> == elementType) {
			return getConnectionWithReorientedViewCompleteCommand(request);
		}
<%	}%>
		return super.getConnectionCompleteCommand(request);
	}
<%}%>
}
<%importManager.emitSortedImports();%>
@


1.10
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@@


1.9
log
@use importAssistant to emit package statement instead of handcoding
@
text
@a17 1
GenClass nodeMetaClass = genNode.getModelFacet().getMetaClass();
d39 4
@


1.8
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d4 2
a5 1
GenNode genNode = (GenNode) ((Object[]) argument)[0];
d9 1
a9 1
package <%=genDiagram.getEditPoliciesPackageName()%>;
a10 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());%>
@


1.7
log
@#114175 for links
@
text
@d7 1
@


1.6
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d21 1
a21 5
/**
 * Do not perform any rotation of links in notation model if this property was not specified in 
 * .gmfgen model
 **/	
	if (!genLink.isViewDirectionAlignedWithModel()) {
a36 1
// Should not be here!
d41 1
a41 1
/**
d43 1
a43 1
 * 
d51 1
a51 1
 **/	
a54 1
	
@


1.5
log
@ImportManager moved to oeg.common
@
text
@d4 1
a4 1
GenNode genNode = (GenNode) argument;
@


1.4
log
@#119279
Reverting link in accordance with model link.
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.3
log
@#115621 Support links with distinct source and containment features
@
text
@d21 4
d28 2
d32 1
a32 1
		GenClass outgoingClass = modelFacet.getSourceMetaFeature() == null
d35 1
a35 3
		if (nodeMetaClass.equals(modelFacet.getTargetMetaFeature().getTypeGenClass()) && !nodeMetaClass.equals(outgoingClass)) {
			ids.add(genLink.getUniqueIdentifier());
		}
d38 25
a62 3
		if (nodeMetaClass.equals(metaFeature.getTypeGenClass()) && !nodeMetaClass.equals(metaFeature.getGenClass())) {
			ids.add(genLink.getUniqueIdentifier());
		}
d71 1
a71 1
	protected <%=importManager.getImportedName("org.eclipse.gef.commands.Command")%> getConnectionCreateCommand(
d76 1
a76 1
			return getConnectionWithReorientedViewCreateCommand(request);
d79 1
a79 1
		return super.getConnectionCreateCommand(request);
@


1.2
log
@#117716 Create link between two instances of the same metaclasses in correct direction
@
text
@d26 4
a29 1
		if (nodeMetaClass.equals(modelFacet.getTargetMetaFeature().getTypeGenClass()) && !nodeMetaClass.equals(modelFacet.getContainmentMetaFeature().getGenClass())) {
@


1.1
log
@#116797 provide option in gmfgen model for the links to align direction in view with direction in model
@
text
@d26 1
a26 1
		if (nodeMetaClass.equals(modelFacet.getTargetMetaFeature().getTypeGenClass())) {
d31 1
a31 1
		if (nodeMetaClass.equals(metaFeature.getTypeGenClass())) {
@

