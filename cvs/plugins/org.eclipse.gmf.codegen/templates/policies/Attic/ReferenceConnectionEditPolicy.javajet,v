head	1.10;
access;
symbols
	v20081022-1925:1.10
	v20081015-1925:1.10
	v20081008-1925:1.10
	v20081001-1925:1.10
	v20080924-1925:1.10
	v20080917-1925:1.10
	v20080911-1728:1.10
	v20080910-1520:1.10
	v20080903-1520:1.10
	v20080827-1520:1.10
	v20080813-1520:1.10
	v20080806-1520:1.10
	v20070202-0200:1.9
	v20061120-1300:1.9
	M3_20:1.9
	v20061117-0800:1.9
	v20061027-1200:1.9
	v20061020-1000:1.9
	v20061013-1330:1.9
	v20060919-0800:1.9
	v20060907-1100:1.9
	M1_20:1.9
	v20060904-1500:1.9
	v20060824-1600:1.9
	v20060817-1500:1.9
	v20060728-0500:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060626-1420:1.9
	v20060620-0400:1.9
	v20060616-1400:1.9
	v20060616-1200:1.9
	v20060609-1400:1.8
	v20060531-1730:1.8
	M6_10:1.6
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2006.11.22.10.21.51;	author ashatalin;	state dead;
branches;
next	1.9;
commitid	7860456424b04567;

1.9
date	2006.06.14.18.40.16;	author ahunter;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.31.19.53.02;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.18.12.19.27;	author dstadnik;	state dead;
branches;
next	1.6;

1.6
date	2006.04.14.10.48.27;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@[152717] - Do not generate *ReferenceConnectionEditPolicy
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.policies" class="ReferenceConnectionEditPolicyGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.gef.EditPart;
import org.eclipse.gef.Request;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CompoundCommand;
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gef.editparts.AbstractConnectionEditPart;
import org.eclipse.gef.editpolicies.ConnectionEditPolicy;
import org.eclipse.gef.requests.GroupRequest;
import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;
import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;
import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;
import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;
import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;
import org.eclipse.gmf.runtime.diagram.ui.requests.GroupRequestViaKeyboard;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.MessageDialogWithToggle;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.util.Assert;
import org.eclipse.swt.widgets.Display;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getReferenceConnectionEditPolicyClassName()%> extends ConnectionEditPolicy {

	/**
	 * @@generated
	 */
	private static final String DELETE_FROM_DIAGRAM_DLG_TITLE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Title;

	/**
	 * @@generated
	 */
	private static final String DELETE_FROM_DIAGRAM_DLG_MESSAGE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Message;

	/**
	 * @@generated
	 */
	private static final String DELETE_FROM_MODEL_DLG_TOGGLE_LABEL = DiagramUIMessages.MessageDialogWithToggle_DoNotPromptAgainToggle_label;

	/**
	 * @@generated
	 */
	protected final Command getDeleteCommand(GroupRequest deleteRequest) {
		boolean isDeleteFromKeyBoard = deleteRequest instanceof GroupRequestViaKeyboard;
		if (shouldDeleteSemantic()) {
			return createDeleteSemanticCommand(deleteRequest);
		} else {
			boolean proceedToDeleteView = true;
			if (isDeleteFromKeyBoard) {
				GroupRequestViaKeyboard groupRequestViaKeyboard = (GroupRequestViaKeyboard) deleteRequest;
				if (groupRequestViaKeyboard.isShowInformationDialog()) {
					proceedToDeleteView = showPrompt();
					groupRequestViaKeyboard.setShowInformationDialog(false);
					if (!(proceedToDeleteView))
						return UnexecutableCommand.INSTANCE;
				}
			}
			return createDeleteViewCommand(deleteRequest);
		}
	}

	/**
	 * @@generated
	 */
	protected boolean shouldDeleteSemantic() {
		Assert.isTrue(getHost() instanceof AbstractConnectionEditPart);
		AbstractConnectionEditPart cep = (AbstractConnectionEditPart) getHost();
		boolean isCanonical = false;
		if (cep.getSource() != null)
			isCanonical = IsCanonical(cep.getSource());
		if (cep.getTarget() != null)
			return isCanonical ? isCanonical : IsCanonical(cep.getTarget());
		return isCanonical;
	}

	/**
	 * @@generated
	 */
	private boolean IsCanonical(EditPart ep) {
		EditPart parent = ep.getParent();
		return parent instanceof GraphicalEditPart ? ((GraphicalEditPart) parent).isCanonical() : false;
	}

	/**
	 * @@generated
	 */
	protected Command createDeleteViewCommand(GroupRequest deleteRequest) {
		TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
		return new ICommandProxy(new DeleteCommand(editingDomain, (View) getHost().getModel()));
	}

	/**
	 * @@generated
	 */
	protected Command createDeleteSemanticCommand(GroupRequest deleteRequest) {
		TransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();
		EditCommandRequestWrapper semReq = new EditCommandRequestWrapper(new DestroyElementRequest(editingDomain, false), deleteRequest.getExtendedData());
		Command semanticCmd = getHost().getCommand(semReq);
		if (semanticCmd != null && semanticCmd.canExecute()) {
			CompoundCommand cc = new CompoundCommand();
			cc.add(semanticCmd);
			return cc;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	private boolean showPrompt() {
		boolean prompt = ((IPreferenceStore) ((IGraphicalEditPart) getHost()).getDiagramPreferencesHint().getPreferenceStore()).getBoolean(IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);
		if (prompt)
			if (showMessageDialog())
				return true;
			else
				return false;
		return true;
	}

	/**
	 * @@generated
	 */
	private boolean showMessageDialog() {
		MessageDialogWithToggle dialog = MessageDialogWithToggle.openYesNoQuestion(Display.getCurrent().getActiveShell(), DELETE_FROM_DIAGRAM_DLG_TITLE, DELETE_FROM_DIAGRAM_DLG_MESSAGE,
				DELETE_FROM_MODEL_DLG_TOGGLE_LABEL, false, (IPreferenceStore) ((IGraphicalEditPart) getHost()).getDiagramPreferencesHint().getPreferenceStore(),
				IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);
		if (dialog.getReturnCode() == IDialogConstants.YES_ID)
			return true;
		else
			return false;
	}

	/**
	 * @@generated
	 */
	public Command getCommand(Request request) {
		if (request instanceof GroupRequestViaKeyboard) {
			return getDeleteCommand((GroupRequest) request);
		}
		return super.getCommand(request);
	}
}
<%importManager.emitSortedImports();%>
@


1.9
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@@


1.8
log
@#144251 Example ecore diagram editor creates invalid ecore file

Should be possible to remove reference-only links.
@
text
@d20 1
a20 1
import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;
d105 1
a105 1
		return new EtoolsProxyCommand(new DeleteCommand(editingDomain, (View) getHost().getModel()));
@


1.7
log
@remove ref connection edit policy - not required anymore
@
text
@d3 4
a6 1
<%GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];%>
d8 1
a8 1
package <%=genDiagram.getEditPoliciesPackageName()%>;
a9 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());%>
d113 1
a113 1
		EditCommandRequestWrapper semReq = new EditCommandRequestWrapper(new DestroyElementRequest(editingDomain, false));
@


1.6
log
@do not use deprecated api
@
text
@@


1.5
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d8 3
d13 3
d17 15
a31 1
import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.ConnectionEditPolicy;
d42 37
d80 17
a96 2
		return false;
	};
d102 53
a154 4
		CompoundCommand cmd = new CompoundCommand();
		cmd.add(super.createDeleteViewCommand(deleteRequest));
		cmd.add(createDeleteSemanticCommand(deleteRequest));
		return cmd;
@


1.4
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d3 3
a5 2
<%GenDiagram diagram = (GenDiagram) ((Object[]) argument)[0];%>
package <%=diagram.getEditPoliciesPackageName()%>;
d7 1
a7 1
<%ImportUtil importManager = new ImportUtil(diagram.getEditPoliciesPackageName());%>
d17 1
a17 1
public class <%=diagram.getReferenceConnectionEditPolicyClassName()%> extends ConnectionEditPolicy {
@


1.3
log
@ImportManager moved to oeg.common
@
text
@d3 1
a3 1
<%GenDiagram diagram = (GenDiagram) argument;%>
@


1.2
log
@#116031 avoid hardcoded class names in templates
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.1
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d16 1
a16 1
public class <%=importManager.getImportedName(diagram.getReferenceConnectionEditPolicyQualifiedClassName())%> extends ConnectionEditPolicy {
@

