head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081015-1925:1.7
	v20081008-1925:1.7
	v20081001-1925:1.7
	v20080924-1925:1.7
	v20080917-1925:1.7
	v20080911-1728:1.7
	v20080910-1520:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	v20080806-1520:1.7
	v20070202-0200:1.6
	v20061214-0000:1.6
	v20061120-1300:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061027-1200:1.6
	v20061020-1000:1.6
	v20061013-1330:1.6
	v20060919-0800:1.6
	v20060907-1100:1.6
	M1_20:1.6
	v20060904-1500:1.6
	v20060824-1600:1.6
	v20060817-1500:1.6
	v20060728-0500:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060626-1420:1.6
	v20060620-0400:1.6
	v20060616-1400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-1300:1.6
	v20060519-0800:1.6
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2006.12.18.13.23.18;	author dstadnik;	state dead;
branches;
next	1.6;
commitid	113e4586960e4567;

1.6
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.14.16.05.47;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.14.19.19.44;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.14.15.31.58;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.14.13.51.32;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.14.13.14.55;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.7
log
@rewrite text feedback edit policies in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.policies" class="TextSelectionEditPolicyGenerator"
	imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"
	skeleton="../common.skeleton"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import org.eclipse.draw2d.ColorConstants;
import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gef.LayerConstants;
import org.eclipse.gef.editpolicies.SelectionEditPolicy;
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getTextSelectionEditPolicyClassName()%> extends SelectionEditPolicy {
<%@@ include file="textFeedback.jetinc"%>
}
<%importManager.emitSortedImports();%>
@


1.6
log
@use importAssistant to emit package statement instead of handcoding
@
text
@@


1.5
log
@provide native feedback for WrapLabels
@
text
@d5 2
a6 1
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d9 1
a9 1
package <%=genDiagram.getEditPoliciesPackageName()%>;
a10 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());%>
@


1.4
log
@provide feedback consistent with the runtime
@
text
@d20 1
@


1.3
log
@provide selection for the child nodes
@
text
@d11 2
d18 1
a19 2
import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;
import org.eclipse.swt.graphics.Color;
@


1.2
log
@account for scale
@
text
@d25 1
a25 132

	/**
	 * @@generated
	 */
	private IFigure selectionFeedbackFigure;

	/**
	 * @@generated
	 */
	private IFigure focusFeedbackFigure;

	/**
	 * @@generated
	 */
	protected void showSelection() {
		hideSelection();
		addFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());
		refreshSelectionFeedbackBounds();
	}

	/**
	 * @@generated
	 */
	protected void hideSelection() {
		if (selectionFeedbackFigure != null) {
			removeFeedback(selectionFeedbackFigure);
			selectionFeedbackFigure = null;
		}
	}

	/**
	 * @@generated
	 */
	protected void showFocus() {
		hideFocus();
		addFeedback(focusFeedbackFigure = createFocusFeedbackFigure());
		refreshFocusFeedbackBounds();
	}

	/**
	 * @@generated
	 */
	protected void hideFocus() {
		if (focusFeedbackFigure != null) {
			removeFeedback(focusFeedbackFigure);
			focusFeedbackFigure = null;
		}
	}

	/**
	 * @@generated
	 */
	protected Rectangle getFeedbackBounds() {
		Rectangle bounds;
		IFigure hostFigure = getHostFigure();
		if (hostFigure instanceof Label) {
			Label label = (Label) hostFigure;
			bounds = label.getTextBounds();
			bounds.union(label.getIconBounds());
			bounds.intersect(label.getBounds());
		} else if (hostFigure instanceof WrapLabel) {
			WrapLabel label = (WrapLabel) hostFigure;
			bounds = label.getTextBounds();
			bounds.union(label.getIconBounds());
			bounds.intersect(label.getBounds());
		} else {
			bounds = getHostFigure().getBounds().getCopy();
		}
		getHostFigure().getParent().translateToAbsolute(bounds);
		getFeedbackLayer().translateToRelative(bounds);
		return bounds;
	}

	/**
	 * @@generated
	 */
	protected void refreshSelectionFeedbackBounds() {
		if (selectionFeedbackFigure != null) {
			selectionFeedbackFigure.setBounds(getFeedbackBounds().expand(2, 2));
		}
	}

	/**
	 * @@generated
	 */
	protected void refreshFocusFeedbackBounds() {
		if (focusFeedbackFigure != null) {
			focusFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));
		}
	}

	/**
	 * @@generated
	 */
	protected Color getFeedbackColor() {
		return null;
	}

	/**
	 * @@generated
	 */
	protected IFigure createSelectionFeedbackFigure() {
		RectangleFigure feedbackFigure = new RectangleFigure();
		feedbackFigure.setFill(false);
		Color feedbackColor = getFeedbackColor();
		if (feedbackColor != null) {
			feedbackFigure.setForegroundColor(feedbackColor);
		}
		return feedbackFigure;
	}

	/**
	 * @@generated
	 */
	protected IFigure createFocusFeedbackFigure() {
		RectangleFigure feedbackFigure = new RectangleFigure();
		feedbackFigure.setFill(false);
		Color feedbackColor = getFeedbackColor();
		if (feedbackColor != null) {
			feedbackFigure.setForegroundColor(feedbackColor);
		}
		feedbackFigure.setLineStyle(Graphics.LINE_DOT);
		return feedbackFigure;
	}

	/**
	 * @@generated
	 */
	public void refreshFeedback() {
		refreshSelectionFeedbackBounds();
		refreshFocusFeedbackBounds();
	}
@


1.1
log
@provide custom text selection edit policy
@
text
@d93 2
@

