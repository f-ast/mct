head	1.15;
access;
symbols
	v20081022-1925:1.15
	v20081015-1925:1.15
	v20081008-1925:1.15
	v20081001-1925:1.15
	v20080924-1925:1.15
	v20080917-1925:1.15
	v20080911-1728:1.15
	v20080910-1520:1.15
	v20080903-1520:1.15
	v20080827-1520:1.15
	v20080813-1520:1.15
	v20080806-1520:1.15
	v20070608-1300:1.14
	v20070605-1400:1.14
	v20070601-1400:1.14
	v20070525-1500:1.14
	v20070520-1200:1.14
	v20070518-1300:1.14
	v20070504-1000:1.14
	v20070427-0600:1.14
	v20070420-1000:1.14
	v20070413-1300:1.14
	v20070405-1100:1.13
	v20070403-1500:1.13
	v20070330-1300:1.13
	v20060330-1300:1.13
	v20070322-1100:1.13
	v20060316-0600:1.13
	v20070307-0700:1.13
	v20070301-1200:1.13
	v20070228-2000:1.13
	v20070221-1500:1.13
	v20070208-1800:1.13
	v20070202-0200:1.10
	v20070103-0300:1.12
	M4_20:1.12
	v20061222-1800:1.12
	v20061218-1200:1.12
	v20061214-0000:1.12
	v20061120-1300:1.10
	M3_20:1.10
	v20061117-0800:1.10
	v20061027-1200:1.10
	v20061020-1000:1.10
	v20061013-1330:1.10
	v20060919-0800:1.10
	v20060907-1100:1.10
	M1_20:1.10
	v20060904-1500:1.10
	v20060824-1600:1.10
	v20060817-1500:1.10
	v20060728-0500:1.10
	v20060713-1700:1.10
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	v20060627-1200:1.10
	v20060626-1420:1.10
	v20060620-0400:1.10
	v20060616-1400:1.10
	v20060616-1200:1.10
	v20060609-1400:1.10
	v20060531-1730:1.10
	v20060530-1930:1.10
	v20060526-1200:1.10
	v20060519-1300:1.10
	v20060519-0800:1.10
	v20060512-1000:1.9
	I20060512-1000:1.9
	I20060505-1400:1.9
	I20060428-1300:1.9
	I20060424-0500:1.9
	I20060424-0300:1.9
	M6_10:1.9
	I20060407-1200:1.9
	I20060331-1000:1.9
	I20060324-0300:1.9
	I20060317-1300:1.9
	I20060317-1200:1.9
	I20060316-1300:1.9
	I20060309-1300:1.9
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.8
	I20060216-1945:1.8
	I20060210-1715:1.8
	I20060209-1815:1.8
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.6
	I20051201-1800:1.5
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.15
date	2007.06.13.16.02.39;	author ashatalin;	state dead;
branches;
next	1.14;
commitid	314d4670151f4567;

1.14
date	2007.04.10.18.52.28;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	58c0461bdcea4567;

1.13
date	2007.01.29.18.09.13;	author ashatalin;	state Exp;
branches;
next	1.12;
commitid	21cf45be38464567;

1.12
date	2006.12.11.18.42.43;	author ashatalin;	state Exp;
branches;
next	1.11;
commitid	34a457da6a14567;

1.11
date	2006.12.06.13.21.22;	author dstadnik;	state Exp;
branches;
next	1.10;
commitid	56bf4576c3d14567;

1.10
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.05.15.01.14;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.17.12.38.37;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.10.17.21.40;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.09.16.29.01;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.08.16.19.21;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.15
log
@[192464] - Convert /policies/CompartmentItemSemapticEditPolicy and DiagramItemSemanticEditPolicy .javajet template to xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.policies" class="CompartmentItemSemanticEditPolicyGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"
	skeleton="../common.skeleton"%>
<%
/*
	This template should be called only for compartments located in non-design nodes
	(genCompartment.getNode().getModelFacet() != null) because *ItemSemanticEditPolicy 
	responsible for dealing with semantic model elements and meaningless (should not 
	be generated) for compartments located inside pure design nodes.
*/

final GenCompartment genCompartment = (GenCompartment) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genCompartment.getDiagram();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genCompartment.getItemSemanticEditPolicyClassName()%> extends <%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())%> {
<%
// TODO: do not generate this edit policy for empty compartments.
if (genCompartment.getChildNodes().size() > 0) {
	Collection<GenChildNode> childNodes = genCompartment.getChildNodes();
%>

<%@@ include file="childContainerCreateCommand.jetinc"%>
<%}%>
}
<%importManager.emitSortedImports();%>
@


1.14
log
@[181771] Generator should tolerate absence of both containment and child meta features
@
text
@@


1.13
log
@[167466] - Do not generate ??ItemSemanticEditPolicy for pure-design elements
@
text
@d28 1
a28 1
	Collection childNodes = genCompartment.getChildNodes();
@


1.12
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d5 7
d26 2
a27 1
if (genCompartment.getChildNodes().size() > 0 && genCompartment.getNode().getModelFacet() != null) {
@


1.11
log
@[166950] Generation should not fail when compartment is defined in pure design gmf editor
@
text
@a20 1
	GenClass containerGenClass = genCompartment.getNode().getModelFacet().getMetaClass();
@


1.10
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d19 3
a21 2
Collection childNodes = genCompartment.getChildNodes();
GenClass containerGenClass = genCompartment.getNode().getModelFacet().getMetaClass();
d25 1
a25 1

@


1.9
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d5 2
a6 1
GenCompartment genCompartment = (GenCompartment) ((Object[]) argument)[0];
d10 1
a10 1
package <%=genDiagram.getEditPoliciesPackageName()%>;
d12 1
a12 4
<%
ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());
importManager.markImportLocation(stringBuffer);
%>
@


1.8
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d8 1
@


1.7
log
@ImportManager moved to oeg.common
@
text
@d5 1
a5 1
GenCompartment genCompartment = (GenCompartment) argument;
@


1.6
log
@#119243
Checking upper bound limit for diagram elements.
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"
@


1.5
log
@#116655

Generating correct access for all the features.
@
text
@d20 2
a21 2
GenChildContainer childContainer = genCompartment;
GenNode containerNode = genCompartment.getNode();
@


1.4
log
@#115861
ChildNode could be created not only in the compartment, but directly in it's parent.
@
text
@d2 2
a3 1
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.3
log
@Wrapping optional imports into importManager.getImportedName() calls
@
text
@d9 4
a12 4
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());%>
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
<%importManager.markImportLocation(stringBuffer);%>
d19 2
a20 11
GenPackage genPackage = genDiagram.getDomainMetaModel();
%>

	/**
	 * @@generated
	 */
	protected Command getCreateCommand(CreateElementRequest req) {
<%
for (Iterator nodes = genCompartment.getChildNodes().iterator(); nodes.hasNext(); ) {
	GenNode genNode = (GenNode) nodes.next();
	TypeModelFacet modelFacet = genNode.getModelFacet();
a21 33
		if (<%=importManager.getImportedName(genDiagram.getProvidersPackageName() + ".ElementTypes")%>.<%=genNode.getUniqueIdentifier()%> == req.getElementType()) {
			if (req.getContainmentFeature() == null) {
				req.setContainmentFeature(<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=modelFacet.getContainmentMetaFeature().getFeatureAccessorName()%>());
			}
			return getMSLWrapper(new Create<%=modelFacet.getMetaClass().getName()%>Command(req));
		}
<%}%>
		return super.getCreateCommand(req);
	}
<%
for (Iterator nodes = genCompartment.getChildNodes().iterator(); nodes.hasNext(); ) {
	GenNode genNode = (GenNode) nodes.next();
	TypeModelFacet modelFacet = genNode.getModelFacet();
%>

	/**
	 * @@generated
	 */
	private static class Create<%=modelFacet.getMetaClass().getName()%>Command extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.commands.core.commands.MSLCreateElementCommand")%> {

		/**
		 * @@generated
		 */
		public Create<%=modelFacet.getMetaClass().getName()%>Command(CreateElementRequest req) {
			super(req);
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> getEClassToEdit() {
			return <%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=genCompartment.getNode().getModelFacet().getMetaClass().getClassifierAccessorName()%>();
		};
d23 1
a23 11
		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> getElementToEdit() {
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container = ((CreateElementRequest) getRequest()).getContainer();
			if (container instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
				container = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) container).getElement();
			}
			return container;
		}
<%	if (modelFacet.getModelElementInitializer() != null) { %>
a24 14
		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> doDefaultElementCreation() {
<%		String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());%>
			<%=metaClassName%> newElement = (<%=metaClassName%>) super.doDefaultElementCreation();
			if (newElement != null) {
				<%=importManager.getImportedName(genDiagram.getProvidersPackageName() + ".ElementTypes")%>.Initializers.<%=genNode.getUniqueIdentifier()%>.init(newElement);
			}
			return newElement;
		}
<%	}%>
	}
<%}%>
@


1.2
log
@unused casts removed
@
text
@a9 3
import <%=genDiagram.getProvidersPackageName()%>.ElementTypes;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
a10 1
import org.eclipse.gmf.runtime.emf.commands.core.commands.MSLCreateElementCommand;
a11 1
import org.eclipse.gmf.runtime.notation.View;
a19 1
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
d31 1
a31 1
		if (ElementTypes.<%=genNode.getUniqueIdentifier()%> == req.getElementType()) {
d33 1
a33 1
				req.setContainmentFeature(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=modelFacet.getContainmentMetaFeature().getFeatureAccessorName()%>());
d49 1
a49 1
	private static class Create<%=modelFacet.getMetaClass().getName()%>Command extends MSLCreateElementCommand {
d61 2
a62 2
		protected EClass getEClassToEdit() {
			return <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=genCompartment.getNode().getModelFacet().getMetaClass().getClassifierAccessorName()%>();
d68 4
a71 4
		protected EObject getElementToEdit() {
			EObject container = ((CreateElementRequest) getRequest()).getContainer();
			if (container instanceof View) {
				container = ((View) container).getElement();
d80 1
a80 1
		protected EObject doDefaultElementCreation() {
d84 1
a84 1
				ElementTypes.Initializers.<%=genNode.getUniqueIdentifier()%>.init(newElement);
@


1.1
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d35 1
a35 1
	TypeModelFacet modelFacet = (TypeModelFacet) genNode.getModelFacet();
d49 1
a49 1
	TypeModelFacet modelFacet = (TypeModelFacet) genNode.getModelFacet();
@

