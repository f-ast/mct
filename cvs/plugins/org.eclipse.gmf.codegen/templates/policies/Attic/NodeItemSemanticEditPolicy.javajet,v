head	1.46;
access;
symbols
	v20081022-1925:1.46
	v20081015-1925:1.46
	v20081008-1925:1.46
	v20081001-1925:1.46
	v20080924-1925:1.46
	v20080917-1925:1.46
	v20080911-1728:1.46
	v20080910-1520:1.46
	v20080903-1520:1.46
	v20080827-1520:1.46
	v20080813-1520:1.46
	v20080806-1520:1.46
	v20070202-0200:1.37
	v20070103-0300:1.45
	M4_20:1.45
	v20061222-1800:1.45
	v20061218-1200:1.45
	v20061214-0000:1.45
	v20061120-1300:1.40
	M3_20:1.40
	v20061117-0800:1.40
	v20061027-1200:1.37
	v20061020-1000:1.37
	v20061013-1330:1.39
	v20060919-0800:1.37
	v20060907-1100:1.37
	M1_20:1.39
	v20060904-1500:1.39
	v20060824-1600:1.37
	v20060817-1500:1.37
	v20060728-0500:1.37
	v20060713-1700:1.37
	R1_0_maintenance:1.37.0.2
	R1_0:1.37
	v20060627-1200:1.37
	v20060626-1420:1.37
	v20060620-0400:1.37
	v20060616-1400:1.37
	v20060616-1200:1.37
	v20060609-1400:1.37
	v20060531-1730:1.36
	v20060530-1930:1.36
	v20060526-1200:1.36
	v20060519-1300:1.36
	v20060519-0800:1.36
	v20060512-1000:1.34
	I20060512-1000:1.34
	I20060505-1400:1.34
	I20060428-1300:1.34
	I20060424-0500:1.34
	I20060424-0300:1.34
	M6_10:1.34
	I20060407-1200:1.34
	I20060331-1000:1.34
	I20060324-0300:1.34
	I20060317-1300:1.34
	I20060317-1200:1.34
	I20060316-1300:1.34
	I20060309-1300:1.34
	M5_10:1.33
	S20060303-1600:1.33
	I20060227-1730:1.30
	I20060216-1945:1.29
	I20060210-1715:1.28
	I20060209-1815:1.28
	I20060203-0830:1.24
	I20060202-1415:1.24
	I20060129-1145:1.24
	I20060127-0900:1.24
	I20060120-1530:1.23
	I20060113-1700:1.23
	M4_10:1.23
	I20060107-1100:1.22
	I20060105-1630:1.22
	I20051230-1230:1.22
	I20051223-1100:1.22
	I20051217-0925:1.22
	I20051208-2000:1.22
	I20051201-1800:1.20
	I20051124-2000:1.13
	M3_10:1.11
	I20051118-1245:1.11
	I20051111-1800:1.6;
locks; strict;
comment	@# @;
expand	@k@;


1.46
date	2007.01.17.13.12.34;	author ashatalin;	state dead;
branches;
next	1.45;
commitid	3d0045ae20c04567;

1.45
date	2006.12.11.18.42.43;	author ashatalin;	state Exp;
branches;
next	1.44;
commitid	34a457da6a14567;

1.44
date	2006.11.30.18.19.30;	author ashatalin;	state Exp;
branches;
next	1.43;
commitid	5afc456f20b14567;

1.43
date	2006.11.29.21.08.12;	author ashatalin;	state Exp;
branches;
next	1.42;
commitid	29eb456df6ba4567;

1.42
date	2006.11.28.19.35.55;	author ashatalin;	state Exp;
branches;
next	1.41;
commitid	6eb7456c8f9a4567;

1.41
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.40;
commitid	5f734567714f4567;

1.40
date	2006.10.18.14.21.48;	author dstadnik;	state Exp;
branches;
next	1.39;

1.39
date	2006.08.29.17.03.35;	author ashatalin;	state Exp;
branches;
next	1.38;

1.38
date	2006.08.01.18.02.34;	author ashatalin;	state Exp;
branches;
next	1.37;

1.37
date	2006.06.09.09.02.46;	author dstadnik;	state Exp;
branches;
next	1.36;

1.36
date	2006.05.18.14.03.44;	author dstadnik;	state Exp;
branches;
next	1.35;

1.35
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.34;

1.34
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.03.03.15.34.18;	author ashatalin;	state Exp;
branches;
next	1.32;

1.32
date	2006.03.03.13.22.36;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.03.01.14.55.16;	author ashatalin;	state Exp;
branches;
next	1.30;

1.30
date	2006.02.17.12.02.06;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.02.14.13.58.45;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.27;

1.27
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.26;

1.26
date	2006.02.06.11.52.36;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.01.25.14.10.43;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.01.10.16.16.58;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2005.12.06.13.27.14;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2005.12.05.15.01.14;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2005.12.01.15.25.52;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2005.12.01.13.09.54;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.30.22.13.36;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.29.18.36.10;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2005.11.29.18.33.26;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.28.17.48.39;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.25.12.21.56;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2005.11.24.15.31.19;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.23.13.29.37;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.18.08.35.38;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.17.12.38.37;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.15.10.51.13;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.15.09.09.29;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.11.18.52.48;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.10.17.21.40;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.09.16.29.01;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.09.13.20.23;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.08.16.18.53;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.46
log
@NodeItemSemanticEditPolicy template reimplemented using xpand.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.policies" class="NodeItemSemanticEditPolicyGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"
	skeleton="../common.skeleton"%>
<%
final GenNode genNode = (GenNode) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genNode.getDiagram();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genNode.getItemSemanticEditPolicyClassName()%> extends <%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())%> {
<%
if (genNode.getChildNodes().size() > 0 && genNode.getModelFacet() != null) {
	Collection childNodes = genNode.getChildNodes();
%>

<%@@ include file="childContainerCreateCommand.jetinc"%>
<%}%>

	/**
	 * @@generated
	 */
	protected Command getDestroyElementCommand(DestroyElementRequest req) {
		return getMSLWrapper(new DestroyElementCommand(req) {
		
			protected EObject getElementToDestroy() {
				View view = (View) getHost().getModel();
				EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
				if (annotation != null) {
					return view;
				}
				return super.getElementToDestroy();
			}		

<%	if (genNode.getModelFacet() != null && genNode.getModelFacet().isPhantomElement()) {%>
			protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult")%> doExecuteWithResult(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> progressMonitor, <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%> info) throws <%=importManager.getImportedName("org.eclipse.core.commands.ExecutionException")%> {
				EObject eObject = getElementToDestroy();
				boolean removeFromResource = eObject.eContainer() == null;
				<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult")%> result = super.doExecuteWithResult(progressMonitor, info);
				<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = eObject.eResource();
				if (removeFromResource && resource != null) {
					resource.getContents().remove(eObject);
				}
				return result;
			}
<%	}%>
		});
	}
<%
final String OUTGOING_TOKEN = "Outgoing";
final String INCOMING_TOKEN = "Incoming";
%>

	/**
	 * @@generated
	 */
	protected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {
<%
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext(); ) {
	GenLink genLink = (GenLink) links.next();
	if (!genLink.isOutgoingCreationAllowed() && !genLink.isIncomingCreationAllowed() || genLink.getModelFacet() == null) {
		continue;
	}
	String namePartSuffix = null;
	GenClass outgoingClass;
	GenClass incomingClass;
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		outgoingClass = modelFacet.getSourceMetaFeature() == null
			? modelFacet.getContainmentMetaFeature().getGenClass()
			: modelFacet.getSourceMetaFeature().getTypeGenClass();
		incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
		namePartSuffix = modelFacet.getMetaClass().getName();
	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		outgoingClass = metaFeature.getGenClass();
		incomingClass = metaFeature.getTypeGenClass();
		namePartSuffix = metaFeature.getFeatureAccessorName();
	} else {
		continue;
	}
	if (genNode.getModelFacet() == null) {
		continue;
	}
	GenClass nodeMetaClass = genNode.getModelFacet().getMetaClass();
	boolean canBeSource = outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
	boolean canBeTarget = incomingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
	if (!canBeSource && !canBeTarget) {
		continue;
	}
	boolean selfLink = canBeSource & canBeTarget;
	namePartSuffix += genLink.getVisualID();
	String startCommandGetter = "null";
	if (canBeSource && genLink.isOutgoingCreationAllowed()) {
		startCommandGetter = "getCreateStart" + OUTGOING_TOKEN + namePartSuffix + "Command(req)";
	} else if (canBeTarget && genLink.isIncomingCreationAllowed() && !selfLink) {
		startCommandGetter = "getCreateStart" + INCOMING_TOKEN + namePartSuffix + "Command(req)";
	}
	String endCommandGetter = "null";
	if (canBeSource && genLink.isIncomingCreationAllowed() && !selfLink) {
		endCommandGetter = "getCreateComplete" + OUTGOING_TOKEN + namePartSuffix + "Command(req)";
	} else if (canBeTarget && genLink.isOutgoingCreationAllowed()) {
		endCommandGetter = "getCreateComplete" + INCOMING_TOKEN + namePartSuffix + "Command(req)";
	}
%>
		if (<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%> == req.getElementType()) {
			return req.getTarget() == null ? <%=startCommandGetter%> : <%=endCommandGetter%>;
		}
<%}%>
		return super.getCreateRelationshipCommand(req);
	}
<%
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext(); ) {
	GenLink genLink = (GenLink) links.next();

	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
//
//
//
////////////////////////
// Type Link Commands //
////////////////////////
//
//
//
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		GenClass outgoingClass = modelFacet.getSourceMetaFeature() == null
			? modelFacet.getContainmentMetaFeature().getGenClass()
			: modelFacet.getSourceMetaFeature().getTypeGenClass();
		GenClass incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
/**
 * Model element could be source of the link or target of the link. It can be both source and 
 * target only in case of selfLink.
 **/
		if (genNode.getModelFacet() == null) {
			continue;
		}
		GenClass nodeMetaClass = genNode.getModelFacet().getMetaClass();
		boolean canBeSource = outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
		boolean canBeTarget = incomingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());		
		boolean selfLink = canBeSource && canBeTarget;
		
/**
 * Start  		start of link creation. 
 *				User click to this editpart and start dragging with link tool.
 * Complete 	end of the command
 *				User points to this editpart as a link target and release mouse button.
 *
 * Outgoing 	the node is link source
 *				This element could be a source for this type of link.
 * Incoming		the node is link destination
 *				This element could be a target for this type of link.
 *
 **/
		boolean generateStartOutgoingCommand = canBeSource && genLink.isOutgoingCreationAllowed();
		boolean generateCompleteOutgoingCommand = canBeSource && genLink.isIncomingCreationAllowed() && !selfLink;
		boolean generateStartIncomingCommand = canBeTarget && genLink.isIncomingCreationAllowed() && !selfLink;
		boolean generateCompleteIncomingCommand = canBeTarget && genLink.isOutgoingCreationAllowed();
		
		String namePartSuffix = modelFacet.getMetaClass().getName() + genLink.getVisualID();
		
		
// 1. StartOutgoingCommand

		if (generateStartOutgoingCommand) {
			String namePart = OUTGOING_TOKEN + namePartSuffix;
%>

	/**
	 * @@generated
	 */
	protected Command getCreateStart<%=namePart%>Command(CreateRelationshipRequest req) {
<%			boolean reversedRequest = false;
			boolean nullTargetAllowed = true;%>
<%@@ include file="defineLinkSourceTarget.jetinc"%>
<%@@ include file="defineLinkContainer.jetinc"%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(<%if (modelFacet.getSourceMetaFeature() != null) {%>container, <%}%>source, target)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<% // create always executable command %>
		return new Command() {
		};
	}
<%
		}
		
		
// 2. CompleteOutgoingCommand

		if (generateCompleteOutgoingCommand) {
			String namePart = OUTGOING_TOKEN + namePartSuffix;
%>

	/**
	 * @@generated
	 */
	protected Command getCreateComplete<%=namePart%>Command(CreateRelationshipRequest req) {
<%			boolean reversedRequest = true;
			boolean nullTargetAllowed = false;%>
<%@@ include file="defineLinkSourceTarget.jetinc"%>
<%@@ include file="defineLinkContainer.jetinc"%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(<%if (modelFacet.getSourceMetaFeature() != null) {%>container, <%}%>source, target)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<% // create semantic command %>
		if (req.getContainmentFeature() == null) {
			req.setContainmentFeature(<%=importManager.getImportedName(containmentFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>());
		}
		return getMSLWrapper(new <%=importManager.getImportedName(modelFacet.getCreateCommandQualifiedClassName())%>(req, <%if (modelFacet.getSourceMetaFeature() != null) {%>container, <%}%>source, target));
	}
<%
		}
			
			
// 3. StartIncomingCommand
			
		if (generateStartIncomingCommand) {
			String namePart = INCOMING_TOKEN + namePartSuffix;
%>

	/**
	 * @@generated
	 */
	protected Command getCreateStart<%=namePart%>Command(CreateRelationshipRequest req) {
<%			boolean reversedRequest = true;
			boolean nullTargetAllowed = true;%>
<%@@ include file="defineLinkSourceTarget.jetinc"%>
<%@@ include file="defineLinkContainer.jetinc"%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(<%if (modelFacet.getSourceMetaFeature() != null) {%>container, <%}%>source, target)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<% // create always executable command %>
		return new Command() {
		};
	}
<%
		}
		
		
// 4. CompleteIncomingCommand
		
		if (generateCompleteIncomingCommand) {	
			String namePart = INCOMING_TOKEN + namePartSuffix;
%>

	/**
	 * @@generated
	 */
	protected Command getCreateComplete<%=namePart%>Command(CreateRelationshipRequest req) {
<%			boolean reversedRequest = false;
			boolean nullTargetAllowed = false;%>
<%@@ include file="defineLinkSourceTarget.jetinc"%>
<%@@ include file="defineLinkContainer.jetinc"%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(<%if (modelFacet.getSourceMetaFeature() != null) {%>container, <%}%>source, target)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<% // create semantic command %>
		if (req.getContainmentFeature() == null) {
			req.setContainmentFeature(<%=importManager.getImportedName(modelFacet.getContainmentMetaFeature().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=modelFacet.getContainmentMetaFeature().getFeatureAccessorName()%>());
		}
		return getMSLWrapper(new <%=importManager.getImportedName(modelFacet.getCreateCommandQualifiedClassName())%>(req, <%if (modelFacet.getSourceMetaFeature() != null) {%>container, <%}%> source, target));
	}
<%
		}

	} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
//
//
//
////////////////////////
// Feat Link Commands //
////////////////////////
//
//
//
		GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
		GenClass outgoingClass = metaFeature.getGenClass();
		GenClass incomingClass = metaFeature.getTypeGenClass();
		
/**
 * Model element could be source of the link or target of the link. It can be both source and 
 * target only in case of selfLink.
 **/
		if (genNode.getModelFacet() == null) {
			continue;
		}
		GenClass nodeMetaClass = genNode.getModelFacet().getMetaClass();
		boolean canBeSource = outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
		boolean canBeTarget = incomingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());		
		boolean selfLink = canBeSource && canBeTarget;
		
/**
 * Start  		start of link creation. 
 *				User click to this editpart and start dragging with link tool.
 * Complete 	end of the command
 *				User points to this editpart as a link target and release mouse button.
 *
 * Outgoing 	the node is link source
 *				This element could be a source for this type of link.
 * Incoming		the node is link destination
 *				This element could be a target for this type of link.
 *
 **/
		boolean generateStartOutgoingCommand = canBeSource && genLink.isOutgoingCreationAllowed();
		boolean generateCompleteOutgoingCommand = canBeSource && genLink.isIncomingCreationAllowed() && !selfLink;
		boolean generateStartIncomingCommand = canBeTarget && genLink.isIncomingCreationAllowed() && !selfLink;
		boolean generateCompleteIncomingCommand = canBeTarget && genLink.isOutgoingCreationAllowed();
		
		String namePartSuffix = metaFeature.getFeatureAccessorName() + genLink.getVisualID();
		
		
// 1. StartOutgoingCommand
		
		if (generateStartOutgoingCommand) {
			String namePart = OUTGOING_TOKEN + namePartSuffix;
%>

	/**
	 * @@generated
	 */
	protected Command getCreateStart<%=namePart%>Command(CreateRelationshipRequest req) {
<%			boolean reversedRequest = false;
			boolean nullTargetAllowed = true;%>
<%@@ include file="defineLinkSourceTarget.jetinc"%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(source, target)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<% // create always executable command %>
		return new Command() {
		};
	}
<%
		}
		
		
// 2. CompleteOutgoingCommand

		if (generateCompleteOutgoingCommand) {
			String namePart = OUTGOING_TOKEN + namePartSuffix;
%>

	/**
	 * @@generated
	 */
	protected Command getCreateComplete<%=namePart%>Command(CreateRelationshipRequest req) {
<%			boolean reversedRequest = true;
			boolean nullTargetAllowed = false;%>
<%@@ include file="defineLinkSourceTarget.jetinc"%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(source, target)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<% // create semantic command %>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest")%> setReq = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest")%>(req.getTarget(),
			<%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), req.getSource());
		return getMSLWrapper(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand")%>(setReq));
	}
<%
		}
		
		
// 3. StartIncomingCommand
		
		if (generateStartIncomingCommand) {
			String namePart = INCOMING_TOKEN + namePartSuffix;
%>

	/**
	 * @@generated
	 */
	protected Command getCreateStart<%=namePart%>Command(CreateRelationshipRequest req) {
<%			boolean reversedRequest = true;
			boolean nullTargetAllowed = true;%>
<%@@ include file="defineLinkSourceTarget.jetinc"%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(source, target)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<% // no feasible restrictions here %>
		return new Command() {
		};
	}
<%
		}
		
		
// 4. CompleteIncomingCommand

		if (generateCompleteIncomingCommand) {
			String namePart = INCOMING_TOKEN + namePartSuffix;
%>

	/**
	 * @@generated
	 */
	protected Command getCreateComplete<%=namePart%>Command(CreateRelationshipRequest req) {
<%			boolean reversedRequest = false;
			boolean nullTargetAllowed = false;%>
<%@@ include file="defineLinkSourceTarget.jetinc"%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(source, target)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
<% // create semantic command %>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest")%> setReq = new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest")%>(req.getSource(),
			<%=importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), req.getTarget());
		return getMSLWrapper(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand")%>(setReq));
	}
<%
		}
	}
}
%>
}
<%importManager.emitSortedImports();%>
@


1.45
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@@


1.44
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@a27 1
	GenClass containerGenClass = genNode.getModelFacet().getMetaClass();
@


1.43
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@a145 5
		GenFeature childFeature = modelFacet.getChildMetaFeature();
		int upperContainmentBound = containmentFeature.getEcoreFeature().getUpperBound();
		int upperChildBound = childFeature.getEcoreFeature().getUpperBound();
		boolean checkChildFeatureUpperBound = !childFeature.equals(containmentFeature) && upperChildBound > 0;

d188 5
a192 40
<% // check that containment feature is not set / has capacity for the new element %>
<%
			if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
				String containerClassName = importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName());
				if (modelFacet.getSourceMetaFeature() == null) {
%>
		<%=containerClassName%> element = (<%=containerClassName%>) getSemanticElement();
<%				} else {%>
		<%=containerClassName%> element = (<%=containerClassName%>) getRelationshipContainer(getSemanticElement(),
			<%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>(), req.getElementType());
		if (element == null) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
				}
				if (upperContainmentBound > 0) {
					if (upperContainmentBound == 1) {
%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%> != null) {
<%					} else {%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%>.size() >= <%=upperContainmentBound%>) {
<%					}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
				}
				if (checkChildFeatureUpperBound) {
					if (upperChildBound == 1) {
%>
		if (<%=getFeatureValueGetter("element", childFeature, false, importManager)%> != null) {
<%					} else {%>
		if (<%=getFeatureValueGetter("element", childFeature, false, importManager)%>.size() >= <%=upperChildBound%>) {
<%					}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
				}
			}
%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(req, false)) {
d213 6
a218 27
<% // check that source is valid %>
		if (!(req.getSource() instanceof <%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
			String containerClassName = importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName());
			if (modelFacet.getSourceMetaFeature() == null) {
%>
		final <%=containerClassName%> element = (<%=containerClassName%>) getSemanticElement();
<%			} else {%>
		final <%=containerClassName%> element = (<%=containerClassName%>) getRelationshipContainer(getSemanticElement(),
			<%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>(), req.getElementType());
		if (element == null) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%			}%>
<% // check that containment feature is not set / has capacity for the new element %>
<%
			if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
				if (upperContainmentBound > 0) {
					if (upperContainmentBound == 1) {
%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%> != null) {
<%					} else {%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%>.size() >= <%=upperContainmentBound%>) {
<%					}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
a219 15
<%
				}
				if (checkChildFeatureUpperBound) {
					if (upperChildBound == 1) {
%>
		if (<%=getFeatureValueGetter("element", childFeature, false, importManager)%> != null) {
<%					} else {%>
		if (<%=getFeatureValueGetter("element", childFeature, false, importManager)%>.size() >= <%=upperChildBound%>) {
<%					}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
				}
			}
%>
d224 1
a224 5
		
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(req, true)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;			
		}
		return getMSLWrapper(new <%=importManager.getImportedName(modelFacet.getCreateCommandQualifiedClassName())%>(req, element, (<%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%>) req.getTarget(), (<%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>) req.getSource()));
d240 5
a244 1
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(req, true)) {
d247 1
a247 1
<% // no feasible restrictions here %>
d265 5
a269 44
<% // check that source is valid %>
		if (!(req.getSource() instanceof <%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
			String containerClassName = importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName());
			if (modelFacet.getSourceMetaFeature() == null) {
%>
		final <%=containerClassName%> element = (<%=containerClassName%>) req.getSource();
<%				} else {%>
		final <%=containerClassName%> element = (<%=containerClassName%>) getRelationshipContainer(req.getSource(),
			<%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>(), req.getElementType());
		if (element == null) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%			}%>
<% // check that containment feature is not set / has capacity for the new element %>
<%
			if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
				if (upperContainmentBound > 0) {
					if (upperContainmentBound == 1) {
%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%> != null) {
<%					} else {%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%>.size() >= <%=upperContainmentBound%>) {
<%					}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
				}
				if (checkChildFeatureUpperBound) {
					if (upperChildBound == 1) {
%>
		if (<%=getFeatureValueGetter("element", childFeature, false, importManager)%> != null) {
<%					} else {%>
		if (<%=getFeatureValueGetter("element", childFeature, false, importManager)%>.size() >= <%=upperChildBound%>) {
<%					}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
				}
			}
%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(req, false)) {
d276 1
a276 1
		return getMSLWrapper(new <%=importManager.getImportedName(modelFacet.getCreateCommandQualifiedClassName())%>(req, element, (<%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%>) req.getSource(), (<%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>) req.getTarget()));
a291 1
		int upperBound = metaFeature.getEcoreFeature().getUpperBound();
d337 4
a340 15
<% // check that feature is not set / has capacity for the new value %>
<%
			if (upperBound > 0) { // consider UNBOUNDED_MULTIPLICITY and UNSPECIFIED_MULTIPLICITY
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
%>
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) getSemanticElement();
<%				if (upperBound == 1) {%>
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%> != null) {
<%				} else {%>
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.size() >= <%=upperBound%>) {
<%				}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%			}%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(req, false)) {
a342 1

d361 4
a364 27
<% // check that source is valid %>
		if (!(req.getSource() instanceof <%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<% // check that feature is not set / has capacity for the new value / is unique %>
<%
			if (upperBound > 0) { // consider UNBOUNDED_MULTIPLICITY and UNSPECIFIED_MULTIPLICITY
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
%>
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) getSemanticElement();
<%				if (upperBound == 1) {%>
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%> != null) {
<%				} else {%>
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.size() >= <%=upperBound%> || <%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.contains(req.getSource())) {
<%				}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
			} else if (metaFeature.getEcoreFeature().isUnique()) {
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
%>
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) getSemanticElement();
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.contains(req.getSource())) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%			}%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(req, true)) {
d386 4
a389 1
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(req, true)) {
d410 4
a413 27
<% // check that source is valid %>
		if (!(req.getSource() instanceof <%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%>)) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<% // check that feature is not set / has capacity for the new value / is unique %>
<%
			if (upperBound > 0) { // consider UNBOUNDED_MULTIPLICITY and UNSPECIFIED_MULTIPLICITY
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
%>
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) req.getSource();
<%				if (upperBound == 1) {%>
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%> != null) {
<%				} else {%>
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.size() >= <%=upperBound%> || <%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.contains(req.getTarget())) {
<%				}%>
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%
			} else if (metaFeature.getEcoreFeature().isUnique()) {
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
%>
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) req.getSource();
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.contains(req.getTarget())) {
			return <%=importManager.getImportedName("org.eclipse.gef.commands.UnexecutableCommand")%>.INSTANCE;
		}
<%			}%>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+".canCreate"+genLink.getUniqueIdentifier()%>(req, false)) {
@


1.42
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@a128 1
	GenLinkConstraints linkConstraints = genLink.getCreationConstraints();
d232 1
a232 2
<%			if(linkConstraints != null) { %>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName()%>.canCreateLink(req, false)) {
a234 1
<%			} // end of link constraints %>
d301 1
a301 2
<%			if(linkConstraints != null) { %>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName()%>.canCreateLink(req, true)) {
a303 1
<%			} // end of link constraints %>				
d320 1
a320 2
<%			if(linkConstraints != null) { %>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName()%>.canCreateLink(req, true)) {
a322 1
<%			} // end of link constraints %>	
d384 1
a384 2
<%			if(linkConstraints != null) { %>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName()%>.canCreateLink(req, false)) {
a386 1
<%			} // end of constraints %>		
d467 1
a467 2
<%			if(linkConstraints != null) { %>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName()%>.canCreateLink(req, false)) {
a469 1
<%			} // end of link constraints %>
d515 1
a515 2
<%			if(linkConstraints != null) { %>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName()%>.canCreateLink(req, true)) {
a517 1
<%			} // end of constraints %>		
d537 1
a537 2
<%			if(genLink.getCreationConstraints() != null) { %>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName()%>.canCreateLink(req, true)) {
a539 1
<%			} // end of link constraints %>
d584 1
a584 2
<%			if(linkConstraints != null) { %>
		if(!<%=importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName())+"."+genDiagram.getLinkCreationConstraintsClassName()+"."+linkConstraints.getConstraintsInstanceFieldName()%>.canCreateLink(req, false)) {
a586 1
<%			} // end of constraints %>
@


1.41
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d513 1
a513 3
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.size() >= <%=upperBound%>
<%					if (metaFeature.getEcoreFeature().isUnique()) {%>
			|| <%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.contains(req.getSource())
a514 2
				) {
<%			}%>
d586 1
a586 5
		if (<%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.size() >= <%=upperBound%>
<%					if (metaFeature.getEcoreFeature().isUnique()) {%>
			|| <%=getFeatureValueGetter("element", metaFeature, false, importManager)%>.contains(req.getTarget())
<%					}%>
				) {
@


1.40
log
@#161380 simplify feature model facets
@
text
@a149 1
		boolean processChildFeature = !childFeature.isDerived() && !childFeature.equals(containmentFeature);
d309 1
a309 66
		return getMSLWrapper(new Create<%=namePart%>Command(req) {

			protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> getElementToEdit() {
				return <%if (containmentFeature.getGenClass().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>element;
			}
		});
	}

	/**
	 * @@generated
	 */
	private static class Create<%=namePart%>Command extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.CreateRelationshipCommand")%> {

		/**
		 * @@generated
		 */
		public Create<%=namePart%>Command(CreateRelationshipRequest req) {
			super(req);
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> getEClassToEdit() {
			return <%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>();
		};

		/**
		 * @@generated
		 */
		protected void setElementToEdit(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element) {
			throw new UnsupportedOperationException();
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> doDefaultElementCreation() {
<%			String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());%>
			<%=metaClassName%> newElement = (<%=metaClassName%>) super.doDefaultElementCreation();
			if (newElement != null) {
				<%=getFeatureValueSetterPrefix("newElement", modelFacet.getTargetMetaFeature(), false, importManager)%>(<%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>) getSource());
<%			if (modelFacet.getSourceMetaFeature() != null) {%>
				<%=getFeatureValueSetterPrefix("newElement", modelFacet.getSourceMetaFeature(), false, importManager)%>(<%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%>) getTarget());
<%
			}
			if (processChildFeature) {
%>
				<%=containerClassName%> container = (<%=containerClassName%>) getElementToEdit();
				if (container != null) {
<%				if (childFeature.isListType()) {%>
					<%=importManager.getImportedName("java.util.Collection")%> featureValues = container.<%=childFeature.getGetAccessor()%>();
					featureValues.add(newElement);
<%				} else {%>
				 	<%=getFeatureValueSetterPrefix("container", childFeature, false, importManager)%>newElement);
<%				}%>
				}
<%
			}
			if (modelFacet.getModelElementInitializer() != null) { 
%>
				<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.Initializers.<%=genLink.getUniqueIdentifier()%>.init(newElement);
<%			}%>
			}
			return <%if (modelFacet.getMetaClass().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>newElement;
		}
d400 1
a400 66
		return getMSLWrapper(new Create<%=namePart%>Command(req) {

			protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> getElementToEdit() {
				return <%if (containmentFeature.getGenClass().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>element;
			}
		});
	}

	/**
	 * @@generated
	 */
	private static class Create<%=namePart%>Command extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.CreateRelationshipCommand")%> {

		/**
		 * @@generated
		 */
		public Create<%=namePart%>Command(CreateRelationshipRequest req) {
			super(req);
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> getEClassToEdit() {
			return <%=importManager.getImportedName(containmentFeature.getGenClass().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>();
		};

		/**
		 * @@generated
		 */
		protected void setElementToEdit(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> element) {
			throw new UnsupportedOperationException();
		}

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> doDefaultElementCreation() {
<%			String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());%>
			<%=metaClassName%> newElement = (<%=metaClassName%>) super.doDefaultElementCreation();
			if (newElement != null) {
				<%=getFeatureValueSetterPrefix("newElement", modelFacet.getTargetMetaFeature(), false, importManager)%>(<%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>) getTarget());
<%			if (modelFacet.getSourceMetaFeature() != null) {%>
				<%=getFeatureValueSetterPrefix("newElement", modelFacet.getSourceMetaFeature(), false, importManager)%>(<%=importManager.getImportedName(outgoingClass.getQualifiedInterfaceName())%>) getSource());
<%
			}
			if (processChildFeature) {
%>
				<%=containerClassName%> container = (<%=containerClassName%>) getElementToEdit();
				if (container != null) {
<%				if (childFeature.isListType()) {%>
					<%=importManager.getImportedName("java.util.Collection")%> featureValues = container.<%=childFeature.getGetAccessor()%>();
					featureValues.add(newElement);
<%				} else {%>
				 	<%=getFeatureValueSetterPrefix("container", childFeature, false, importManager)%>newElement);
<%				}%>
				}
<%
			}
				if (modelFacet.getModelElementInitializer() != null) { 
%>
				<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.Initializers.<%=genLink.getUniqueIdentifier()%>.init(newElement);
<%			}%>
			}
			return <%if (modelFacet.getMetaClass().isExternalInterface()) {%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%}%>newElement;
		}
@


1.39
log
@[155561] Correcting templates in accordance with unit-test.
@
text
@d88 2
a89 2
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
d536 1
a536 1
	} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
d546 1
a546 1
		GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
@


1.38
log
@#116861 [Tests] Create unit-tests checking code generated for the models with "instance class name" specified

- templates corrected
@
text
@a311 3
			/**
			 * @@generated
			 */
a467 3
			/**
			 * @@generated
			 */
@


1.37
log
@#146199 There should be no exceptions when child nodes are defined in pure design diagrams
@
text
@d316 1
a316 1
				return element;
d377 1
a377 1
			return newElement;
d475 1
a475 1
				return element;
d536 1
a536 1
			return newElement;
@


1.36
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d26 1
a26 1
if (genNode.getChildNodes().size() > 0) {
@


1.35
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d49 1
a49 1
<%	if (genNode.getModelFacet().isPhantomElement()) {%>
a63 1
GenClass nodeMetaClass = genNode.getModelFacet().getMetaClass();
d96 4
d157 4
d561 4
@


1.34
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d5 2
a6 1
GenNode genNode = (GenNode) ((Object[]) argument)[0];
d10 1
a10 1
package <%=genDiagram.getEditPoliciesPackageName()%>;
a11 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());%>
@


1.33
log
@#127696 Templates should use new transaction API
In case of phantom nodes.
@
text
@d8 1
@


1.32
log
@#114175 for links
@
text
@d51 5
a55 23
				if (eObject.eContainer() != null) {
					return super.doExecuteWithResult(progressMonitor, info);
				} else {
					<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.edit.MObjectState")%> elementState = <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectUtil")%>.getState(eObject);
					if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.edit.MObjectState")%>.DETACHED != elementState) {
						<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = eObject.eResource();
						if (resource == null) {
							return CommandResult.newErrorCommandResult("No resource for the object: " + eObject);
						}
						
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.internal.domain.MSLEditingDomain")%> domain = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.internal.domain.MSLEditingDomain")%>) <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain")%>.getEditingDomain(resource);
						if (domain == null) {
							domain = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.internal.domain.MSLEditingDomain")%>) <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain")%>.INSTANCE;
						}
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.services.metamodel.IMetamodelSupport")%> metaModel = <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.internal.util.MSLUtil")%>.getMetaModel(eObject);
						if ((metaModel != null) && (!metaModel.canDestroy(eObject))) {
							return CommandResult.newOKCommandResult();
						}
						eObject.eNotify(new <%=importManager.getImportedName("org.eclipse.emf.ecore.impl.ENotificationImpl")%>((<%=importManager.getImportedName("org.eclipse.emf.ecore.InternalEObject")%>) eObject, <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.EventTypes")%>.PRE_DESTROY, (<%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%>) null, eObject, eObject));
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.internal.util.MSLUtil")%>.teardownContainment(domain, eObject, 0);
						<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.internal.util.MSLUtil")%>.sendDestroyEvent(domain, eObject);
						resource.getContents().remove(eObject);
					}
d57 1
a57 1
				return CommandResult.newOKCommandResult();
@


1.31
log
@#127696 Templates should use new transaction API
@
text
@d93 1
a93 2
	
	if (!genLink.isOutgoingCreationAllowed() && !genLink.isIncomingCreationAllowed()) {
a95 1
	
a111 1
// Should not be here!
a115 1
	
a119 1
	
a126 1

d137 1
a137 3
<%
}
%>
a140 1

@


1.30
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d41 1
a41 1
				EAnnotation annotation = view.getEAnnotation("Shortcutted"); //$NON-NLS-1$
@


1.29
log
@use new transactional emf api
@
text
@d48 2
a49 4
<%
	if (genNode.getModelFacet().isPhantomElement()) {
%>
			protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult")%> doExecute(<%=importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor")%> progressMonitor) {
d52 1
a52 1
					return super.doExecute(progressMonitor);
d58 1
a58 1
							return newErrorCommandResult("No resource for the object: " + eObject);
d67 1
a67 1
							return newOKCommandResult();
d75 1
a75 1
				return newOKCommandResult();
d77 1
a77 4
			
<%
	}
%>
@


1.28
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d12 1
a12 1
import org.eclipse.gmf.runtime.emf.commands.core.commands.MSLDestroyElementCommand;
d37 1
a37 1
		return getMSLWrapper(new MSLDestroyElementCommand(req) {
d348 1
a348 1
	private static class Create<%=namePart%>Command extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.commands.core.commands.MSLCreateRelationshipCommand")%> {
d507 1
a507 1
	private static class Create<%=namePart%>Command extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.commands.core.commands.MSLCreateRelationshipCommand")%> {
@


1.27
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d5 1
a5 1
GenNode genNode = (GenNode) argument;
@


1.26
log
@#126537
Possibility to visualize child-parent relachipchip as a link implemented
@
text
@a85 1
GenPackage genPackage = genDiagram.getDomainMetaModel();
d228 1
a228 1
			<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>(), req.getElementType());
d292 1
a292 1
			<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>(), req.getElementType());
d326 1
a326 1
			req.setContainmentFeature(<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getFeatureAccessorName()%>());
d361 1
a361 1
			return <%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>();
d452 1
a452 1
			<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>(), req.getElementType());
d491 1
a491 1
			req.setContainmentFeature(<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=modelFacet.getContainmentMetaFeature().getFeatureAccessorName()%>());
d520 1
a520 1
			return <%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containmentFeature.getGenClass().getClassifierAccessorName()%>();
d694 1
a694 1
			<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), req.getSource());
d771 1
a771 1
			<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), req.getTarget());
@


1.25
log
@ImportManager moved to oeg.common
@
text
@d38 1
d46 32
d79 4
@


1.24
log
@#125055
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"
@


1.23
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@a61 2
	//GenLinkConstraints linkConstraints = genLink.getCreationConstraints();
	//String constraintsInstance = linkConstraints != null ? importManager.getImportedName(genDiagram.getLinkCreationConstraintsQualifiedClassName())+"."+linkConstraints.getConstraintsInstanceFieldName() : null;
a121 1
	String constraintsInstance = linkConstraints != null ? importManager.getImportedName(genDiagram.getLinkCreationConstraintsQualifiedClassName())+"."+linkConstraints.getConstraintsInstanceFieldName() : null;
d223 1
a223 1
		if(!<%=constraintsInstance%>.canCreateLink(req, false)) {
d294 1
a294 1
		if(!<%=constraintsInstance%>.canCreateLink(req, true)) {
d383 1
a383 1
		if(!<%=constraintsInstance%>.canCreateLink(req, true)) {
d449 1
a449 1
		if(!<%=constraintsInstance%>.canCreateLink(req, false)) {
d598 1
a598 1
		if(!<%=constraintsInstance%>.canCreateLink(req, false)) {
d652 1
a652 1
		if(!<%=constraintsInstance%>.canCreateLink(req, true)) {
d676 1
a676 1
		if(!<%=constraintsInstance%>.canCreateLink(req, true)) {
d729 1
a729 1
		if(!<%=constraintsInstance%>.canCreateLink(req, false)) {
@


1.22
log
@Correcting compilation problem if "incoming link creation" is off.
@
text
@d15 3
d37 10
a46 1
		return getMSLWrapper(new MSLDestroyElementCommand(req));
@


1.21
log
@#119243
Checking upper bound limit for diagram elements.
@
text
@d82 9
d92 6
a97 9
	namePartSuffix += genLink.getVisualID();
	
/**
 * In case this node can be both Source and Target of this link, this link is a link to self,
 * so for start request we should call "Outgoing" method, for complete = "Incomming" since
 * we should not invert link in this case.
 **/
	String startCommandGetter = genLink.isOutgoingCreationAllowed() ? "getCreateStart" + (canBeSource ? OUTGOING_TOKEN : INCOMING_TOKEN) + namePartSuffix + "Command(req)" : "null";
	String endCommandGetter = genLink.isIncomingCreationAllowed() ? "getCreateComplete" + (canBeTarget ? INCOMING_TOKEN : OUTGOING_TOKEN) + namePartSuffix + "Command(req)" : "null";
d140 3
a142 3
		boolean couldBeSource = outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
		boolean couldBeTarget = incomingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());		
		boolean selfLink = couldBeSource && couldBeTarget;
d156 4
a159 4
		boolean generateStartOutgoingCommand = couldBeSource && genLink.isOutgoingCreationAllowed();
		boolean generateCompleteOutgoingCommand = couldBeSource && genLink.isIncomingCreationAllowed() && !selfLink;
		boolean generateStartIncomingCommand = couldBeTarget && genLink.isIncomingCreationAllowed() && !selfLink;
		boolean generateCompleteIncomingCommand = couldBeTarget && genLink.isOutgoingCreationAllowed();
d540 3
a542 3
		boolean couldBeSource = outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
		boolean couldBeTarget = incomingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());		
		boolean selfLink = couldBeSource && couldBeTarget;
d556 4
a559 4
		boolean generateStartOutgoingCommand = couldBeSource && genLink.isOutgoingCreationAllowed();
		boolean generateCompleteOutgoingCommand = couldBeSource && genLink.isIncomingCreationAllowed() && !selfLink;
		boolean generateStartIncomingCommand = couldBeTarget && genLink.isIncomingCreationAllowed() && !selfLink;
		boolean generateCompleteIncomingCommand = couldBeTarget && genLink.isOutgoingCreationAllowed();
@


1.20
log
@Refactoring + calling correct constraint methods so to say, a part of #117716
@
text
@d23 2
a24 2
	GenChildContainer childContainer = genNode;
	GenNode containerNode = genNode;
@


1.19
log
@Removing extra spaces
@
text
@d58 2
a59 2
	boolean canBeSource = false;
	boolean canBeTarget = false;
d62 1
a62 1
		GenClass outgoingClass = modelFacet.getSourceMetaFeature() == null
d65 1
a65 1
		GenClass incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
a66 2
		canBeSource = outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
		canBeTarget = incomingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
d69 2
d72 3
a74 2
		canBeSource = metaFeature.getGenClass().getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
		canBeTarget = metaFeature.getTypeGenClass().getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
d76 2
d85 5
a117 1
		boolean outgoing = true;
a160 1
			outgoing = true;
d208 1
a208 1
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "false" : "true"%>)) {
a222 1
			outgoing = true;
d279 1
a279 1
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "true" : "false"%>)) {
a359 1
			outgoing = false;
d368 1
a368 1
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "false" : "true"%>)) {
a382 1
			outgoing = false;
d434 1
a434 1
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "true" : "false"%>)) {
a524 1
		boolean outgoing = true;
a560 1
			outgoing = true;
d583 1
a583 1
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "false" : "true"%>)) {
a598 1
			outgoing = true;
d637 1
a637 1
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "true" : "false"%>)) {
a652 1
			outgoing = false;
d661 1
a661 1
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "false" : "true"%>)) {
a675 1
			outgoing = false;
d714 1
a714 1
		if(!<%=constraintsInstance%>.canCreateLink(req, <%=outgoing ? "true" : "false"%>)) {
@


1.18
log
@#117716
Creating self links in a correct direction.
@
text
@a511 4
		
		
		
		
a678 1

@


1.17
log
@comment out unused variables
@
text
@d56 4
a59 2
	String namePart = null;
	boolean outgoing = true;
d65 4
a68 6
		if (outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
			namePart = OUTGOING_TOKEN + modelFacet.getMetaClass().getName();
		} else if (modelFacet.getTargetMetaFeature().getTypeGenClass().getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
			namePart = INCOMING_TOKEN + modelFacet.getMetaClass().getName();
			outgoing = false;
		}
d71 7
a77 6
		if (metaFeature.getGenClass().getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
			namePart = OUTGOING_TOKEN + metaFeature.getFeatureAccessorName();
		} else if (metaFeature.getTypeGenClass().getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
			namePart = INCOMING_TOKEN + metaFeature.getFeatureAccessorName();
			outgoing = false;
		}
d79 5
a83 2
	if (namePart != null) {
		namePart += genLink.getVisualID();
d86 1
a86 13
<%		if (genLink.isOutgoingCreationAllowed() && genLink.isIncomingCreationAllowed()) {%>
			return req.getTarget() == null ? getCreateStart<%=namePart%>Command(req) : getCreateComplete<%=namePart%>Command(req);
<%
		} else {
			if (outgoing ? genLink.isOutgoingCreationAllowed() : genLink.isIncomingCreationAllowed()) {
%>
			return req.getTarget() == null ? getCreateStart<%=namePart%>Command(req) : null;
<%			} else {%>
			return req.getTarget() == null ? null : getCreateComplete<%=namePart%>Command(req);
<%
			}
		}
%>
a88 1
	}
d94 1
a99 1
	String namePart = null;
d122 32
a153 1
		if (outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
d155 1
a155 2
			namePart = OUTGOING_TOKEN + modelFacet.getMetaClass().getName() + genLink.getVisualID();
			if (genLink.isOutgoingCreationAllowed()) {
d164 3
a166 3
				if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
					String containerClassName = importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName());
					if (modelFacet.getSourceMetaFeature() == null) {
d169 1
a169 1
<%					} else {%>
d176 3
a178 3
					}
					if (upperContainmentBound > 0) {
						if (upperContainmentBound == 1) {
d181 1
a181 1
<%						} else {%>
d183 1
a183 1
<%						}%>
d187 3
a189 3
					}
					if (checkChildFeatureUpperBound) {
						if (upperChildBound == 1) {
d192 1
a192 1
<%						} else {%>
d194 1
a194 1
<%						}%>
a197 1
					}
d199 1
d201 1
a201 1
<%				if(linkConstraints != null) { %>
d205 1
a205 1
<%				} // end of link constraints %>
d211 8
a218 2
			}
			if (genLink.isIncomingCreationAllowed()) {
d230 2
a231 2
				String containerClassName = importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName());
				if (modelFacet.getSourceMetaFeature() == null) {
d234 1
a234 1
<%				} else {%>
d240 1
a240 1
<%				}%>
d243 3
a245 3
				if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
					if (upperContainmentBound > 0) {
						if (upperContainmentBound == 1) {
d248 1
a248 1
<%						} else {%>
d250 1
a250 1
<%						}%>
d254 3
a256 3
					}
					if (checkChildFeatureUpperBound) {
						if (upperChildBound == 1) {
d259 1
a259 1
<%						} else {%>
d261 1
a261 1
<%						}%>
a264 1
					}
d266 1
d273 1
a273 1
<%				if(linkConstraints != null) { %>
d277 1
a277 1
<%				} // end of link constraints %>				
d319 1
a319 1
<%				String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());%>
d323 1
a323 1
<%				if (modelFacet.getSourceMetaFeature() != null) {%>
d326 2
a327 2
				}
				if (processChildFeature) {
d331 1
a331 1
<%					if (childFeature.isListType()) {%>
d334 1
a334 1
<%					} else {%>
d336 1
a336 1
<%					}%>
d339 2
a340 2
				}
				if (modelFacet.getModelElementInitializer() != null) { 
d343 1
a343 1
<%				}%>
d349 6
a354 2
			}
		} else if (incomingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
d356 1
a356 2
			namePart = INCOMING_TOKEN + modelFacet.getMetaClass().getName() + genLink.getVisualID();
			if (genLink.isIncomingCreationAllowed()) {
d373 8
a380 2
			}
			if (genLink.isOutgoingCreationAllowed()) {
d392 2
a393 2
				String containerClassName = importManager.getImportedName(containmentFeature.getGenClass().getQualifiedInterfaceName());
				if (modelFacet.getSourceMetaFeature() == null) {
d402 1
a402 1
<%				}%>
d405 3
a407 3
				if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
					if (upperContainmentBound > 0) {
						if (upperContainmentBound == 1) {
d410 1
a410 1
<%						} else {%>
d412 1
a412 1
<%						}%>
d416 3
a418 3
					}
					if (checkChildFeatureUpperBound) {
						if (upperChildBound == 1) {
d421 1
a421 1
<%						} else {%>
d423 1
a423 1
<%						}%>
a426 1
					}
d428 1
d430 1
a430 1
<%				if(linkConstraints != null) { %>
d434 1
a434 1
<%				} // end of constraints %>		
d480 1
a480 1
<%				String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());%>
d484 1
a484 1
<%				if (modelFacet.getSourceMetaFeature() != null) {%>
d487 2
a488 2
				}
				if (processChildFeature) {
d492 1
a492 1
<%					if (childFeature.isListType()) {%>
d495 1
a495 1
<%					} else {%>
d497 1
a497 1
<%					}%>
d500 1
a500 1
				}
d504 1
a504 1
<%				}%>
a509 1
			}
d511 5
d531 32
a562 1
		if (outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
d564 1
a564 2
			namePart = OUTGOING_TOKEN + metaFeature.getFeatureAccessorName() + genLink.getVisualID();
			if (genLink.isOutgoingCreationAllowed()) {
d596 8
a603 2
			}
			if (genLink.isIncomingCreationAllowed()) {
d626 1
a626 1
<%					}%>
d628 1
a628 1
<%				}%>
d651 6
a656 2
			}
		} else if (incomingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass())) {
d658 1
a658 2
			namePart = INCOMING_TOKEN + metaFeature.getFeatureAccessorName() + genLink.getVisualID();
			if (genLink.isIncomingCreationAllowed()) {
d675 9
a683 2
			}
			if (genLink.isOutgoingCreationAllowed()) {
a730 1
			}
@


1.16
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d50 2
a51 2
	GenLinkConstraints linkConstraints = genLink.getCreationConstraints();
	String constraintsInstance = linkConstraints != null ? importManager.getImportedName(genDiagram.getLinkCreationConstraintsQualifiedClassName())+"."+linkConstraints.getConstraintsInstanceFieldName() : null;
@


1.15
log
@#118256

Enabling links creation to/from sub-classes of corresponding metaclasses from model
@
text
@d50 3
d105 3
d119 1
d132 1
d180 5
d245 6
d324 1
d333 5
d394 5
d486 1
d492 1
d515 6
d564 5
d577 1
d586 5
d634 5
@


1.14
log
@#115621 Support links with distinct source and containment features
@
text
@d60 1
a60 1
		if (nodeMetaClass.equals(outgoingClass)) {
d62 1
a62 1
		} else if (nodeMetaClass.equals(modelFacet.getTargetMetaFeature().getTypeGenClass())) {
d68 1
a68 1
		if (nodeMetaClass.equals(metaFeature.getGenClass())) {
d70 1
a70 1
		} else if (nodeMetaClass.equals(metaFeature.getTypeGenClass())) {
d124 1
a124 1
		if (nodeMetaClass.equals(outgoingClass)) {
d304 1
a304 1
		} else if (nodeMetaClass.equals(incomingClass)) {
d460 1
a460 1
		if (nodeMetaClass.equals(outgoingClass)) {
d533 1
a533 1
		} else if (nodeMetaClass.equals(incomingClass)) {
@


1.13
log
@#117901 Check that new link target is unique when multiplicity is -1
@
text
@d57 4
a60 1
		if (nodeMetaClass.equals(modelFacet.getContainmentMetaFeature().getGenClass())) {
d88 2
a89 1
<%			}
d114 3
a116 1
		GenClass outgoingClass = modelFacet.getContainmentMetaFeature().getGenClass();
d119 1
a119 1
		GenFeature childFeature = modelFacet.getContainmentMetaFeature();
d135 3
a137 2
			if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
d139 7
a145 1
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) getSemanticElement();
d147 3
a149 2
				if (upperContainmentBound > 0) {
					if (upperContainmentBound == 1) {
d152 1
a152 1
<%					} else {%>
d154 1
a154 1
<%					}%>
d158 3
a160 3
				}
				if (checkChildFeatureUpperBound) {
					if (upperChildBound == 1) {
d163 1
a163 1
<%					} else {%>
d165 1
a165 1
<%					}%>
d169 1
a170 1
			}
a188 1
<% // check that containment feature is not set / has capacity for the new element %>
d190 2
a191 2
			if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
d193 9
a201 1
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) getSemanticElement();
d203 3
a205 2
				if (upperContainmentBound > 0) {
					if (upperContainmentBound == 1) {
d208 1
a208 1
<%					} else {%>
d210 1
a210 1
<%					}%>
d214 3
a216 3
				}
				if (checkChildFeatureUpperBound) {
					if (upperChildBound == 1) {
d219 1
a219 1
<%					} else {%>
d221 1
a221 1
<%					}%>
d225 1
a226 1
			}
d230 1
a230 1
			req.setContainmentFeature(<%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=modelFacet.getContainmentMetaFeature().getFeatureAccessorName()%>());
d232 9
a240 1
		return getMSLWrapper(new Create<%=namePart%>Command(req));
d259 1
a259 1
			return <%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=outgoingClass.getClassifierAccessorName()%>();
d265 2
a266 2
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> getElementToEdit() {
			return getTarget();
d273 1
a273 4
<%
			String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());
			String containerMetaClass = importManager.getImportedName(childFeature.getGenClass().getQualifiedInterfaceName());
%>
d277 7
a283 2
<%			if (processChildFeature) {%>
				<%=containerMetaClass%> container = (<%=containerMetaClass%>) getElementToEdit();
d285 1
a285 1
<%				if (childFeature.isListType()) {%>
d288 1
a288 1
<%				} else {%>
d290 1
a290 1
<%				}%>
d293 2
a294 2
			}
			if (modelFacet.getModelElementInitializer() != null) { 
d297 1
a297 1
<%			}%>
d330 12
a344 4
					String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
%>
		<%=outgoingClassName%> element = (<%=outgoingClassName%>) req.getSource();
<%
d373 9
a381 1
		return getMSLWrapper(new Create<%=namePart%>Command(req));
d400 1
a400 1
			return <%=importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=outgoingClass.getClassifierAccessorName()%>();
d406 2
a407 2
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> getElementToEdit() {
			return getSource();
d414 1
a414 4
<%
			String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());
			String containerMetaClass = importManager.getImportedName(childFeature.getGenClass().getQualifiedInterfaceName());
%>
d418 7
a424 2
<%			if (processChildFeature) {%>
				<%=containerMetaClass%> container = (<%=containerMetaClass%>) getElementToEdit();
d426 1
a426 1
<%				if (childFeature.isListType()) {%>
d429 1
a429 1
<%				} else {%>
d431 1
a431 1
<%				}%>
d434 2
a435 2
			}
			if (modelFacet.getModelElementInitializer() != null) { 
d438 1
a438 1
<%			}%>
@


1.12
log
@#116448
- Setting Child Meta Feature value if specified feature !isDerived()
- Checking Upper limit for Child Meta Feature
@
text
@d138 1
a138 3
<%
					} else {
%>
d140 1
a140 3
<%				
					}
%>
d149 1
a149 3
<%
					} else {
%>
d151 1
a151 3
<%
					}
%>
d186 1
a186 3
<%
					} else {
%>
d188 1
a188 3
<%				
					}
%>
d197 1
a197 3
<%
					} else {
%>
d199 1
a199 3
<%
					}
%>
d250 1
a250 3
<%
			if (processChildFeature) {
%>
d253 1
a253 3
<%
				if (childFeature.isListType()) {
%>
d256 1
a256 3
<%
				} else {
%>
d258 1
a258 3
<%
				}
%>
a261 1

d265 1
a265 3
<%
			}
%>
d300 2
a301 2
			if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
				String outgoingClassName = importManager.getImportedName(outgoingClass.getQualifiedInterfaceName());
d305 2
a306 2
				if (upperContainmentBound > 0) {
					if (upperContainmentBound == 1) {
d309 1
a309 3
<%
					} else {
%>
d311 1
a311 3
<%				
					}
%>
d315 3
a317 3
				}
				if (checkChildFeatureUpperBound) {
					if (upperChildBound == 1) {
d320 1
a320 3
<%
					} else {
%>
d322 1
a322 3
<%
					}
%>
d326 1
a327 1
			}
d373 1
a373 3
<%
			if (processChildFeature) {
%>
d376 1
a376 3
<%
				if (childFeature.isListType()) {
%>
d379 1
a379 3
<%
				} else {
%>
d381 1
a381 3
<%
				}
%>
a384 1

d388 1
a388 3
<%
			}
%>
d450 1
a450 1
<% // check that feature is not set / has capacity for the new value %>
d467 8
d509 1
a509 1
<% // check that feature is not set / has capacity for the new value %>
d526 8
@


1.11
log
@#115794 allow to specify directions in which link could be created on diagram
@
text
@d113 5
a117 1
		int upperBound = containmentFeature.getEcoreFeature().getUpperBound();
d129 1
a129 1
			if (upperBound > 0) { // consider UNBOUNDED_MULTIPLICITY and UNSPECIFIED_MULTIPLICITY
d133 4
a136 1
<%				if (upperBound == 1) {%>
d138 22
a159 3
<%				} else {%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%>.size() >= <%=upperBound%>) {
<%				}%>
d162 4
a165 1
<%			}%>
d185 1
a185 1
			if (upperBound > 0) { // consider UNBOUNDED_MULTIPLICITY and UNSPECIFIED_MULTIPLICITY
d189 4
a192 1
<%				if (upperBound == 1) {%>
d194 22
a215 3
<%				} else {%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%>.size() >= <%=upperBound%>) {
<%				}%>
d218 4
a221 1
<%			}%>
d259 4
a262 1
<%			String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());%>
d266 23
a288 1
<%			if (modelFacet.getModelElementInitializer() != null) { %>
d290 3
a292 1
<%}%>
d327 1
a327 1
			if (upperBound > 0) { // consider UNBOUNDED_MULTIPLICITY and UNSPECIFIED_MULTIPLICITY
d331 4
a334 1
<%				if (upperBound == 1) {%>
d336 22
a357 3
<%				} else {%>
		if (<%=getFeatureValueGetter("element", containmentFeature, false, importManager)%>.size() >= <%=upperBound%>) {
<%				}%>
d360 4
a363 1
<%			}%>
d401 4
a404 1
<%			String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());%>
d408 23
a430 1
<%			if (modelFacet.getModelElementInitializer() != null) { %>
d432 3
a434 1
<%}%>
@


1.10
log
@#116655

Generating correct access for all the features.
@
text
@d50 3
d54 1
d61 1
d69 1
d76 1
d78 10
d100 9
d116 1
d141 4
d217 1
d220 1
d231 4
d307 1
d310 9
d325 1
d350 4
d387 1
d390 1
d401 4
d438 1
@


1.9
log
@#116031 avoid hardcoded class names in templates
@
text
@d2 2
a3 1
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
d103 1
a103 1
		if (element.get<%=containmentFeature.getAccessorName()%>() != null) {
d105 1
a105 1
		if (element.get<%=containmentFeature.getAccessorName()%>().size() >= <%=upperBound%>) {
d130 1
a130 1
		if (element.get<%=containmentFeature.getAccessorName()%>() != null) {
d132 1
a132 1
		if (element.get<%=containmentFeature.getAccessorName()%>().size() >= <%=upperBound%>) {
d177 1
a177 1
				newElement.set<%=modelFacet.getTargetMetaFeature().getAccessorName()%>((<%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>) getSource());
d214 1
a214 1
		if (element.get<%=containmentFeature.getAccessorName()%>() != null) {
d216 1
a216 1
		if (element.get<%=containmentFeature.getAccessorName()%>().size() >= <%=upperBound%>) {
d261 1
a261 1
				newElement.set<%=modelFacet.getTargetMetaFeature().getAccessorName()%>((<%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>) getTarget());
d291 1
a291 1
		if (element.get<%=metaFeature.getAccessorName()%>() != null) {
d293 1
a293 1
		if (element.get<%=metaFeature.getAccessorName()%>().size() >= <%=upperBound%>) {
d318 1
a318 1
		if (element.get<%=metaFeature.getAccessorName()%>() != null) {
d320 1
a320 1
		if (element.get<%=metaFeature.getAccessorName()%>().size() >= <%=upperBound%>
d322 1
a322 1
			|| element.get<%=metaFeature.getAccessorName()%>().contains(req.getSource())
d363 1
a363 1
		if (element.get<%=metaFeature.getAccessorName()%>() != null) {
d365 1
a365 1
		if (element.get<%=metaFeature.getAccessorName()%>().size() >= <%=upperBound%>
d367 1
a367 1
			|| element.get<%=metaFeature.getAccessorName()%>().contains(req.getTarget())
@


1.8
log
@#115812 Do not allow to create links when max multiplicity is reeached
@
text
@d68 1
a68 1
		if (<%=importManager.getImportedName(genDiagram.getProvidersPackageName() + ".ElementTypes")%>.<%=genLink.getUniqueIdentifier()%> == req.getElementType()) {
d178 1
a178 1
				<%=importManager.getImportedName(genDiagram.getProvidersPackageName() + ".ElementTypes")%>.Initializers.<%=genLink.getUniqueIdentifier()%>.init(newElement);
d262 1
a262 1
				<%=importManager.getImportedName(genDiagram.getProvidersPackageName() + ".ElementTypes")%>.Initializers.<%=genLink.getUniqueIdentifier()%>.init(newElement);
@


1.7
log
@import outgoing class
@
text
@d85 2
d95 15
d118 1
d122 15
d193 1
d202 1
d206 15
d283 1
d297 1
d306 1
d310 1
d328 1
d342 1
d351 1
d355 1
d373 1
@


1.6
log
@#115812 for reference based links
@
text
@d233 5
a237 2
<%			if (upperBound > 0) { // consider UNBOUNDED_MULTIPLICITY and UNSPECIFIED_MULTIPLICITY%>
		<%=outgoingClass.getName()%> element = (<%=outgoingClass.getName()%>) getSemanticElement();
d257 5
a261 2
<%			if (upperBound > 0) { // consider UNBOUNDED_MULTIPLICITY and UNSPECIFIED_MULTIPLICITY%>
		<%=outgoingClass.getName()%> element = (<%=outgoingClass.getName()%>) getSemanticElement();
d298 5
a302 2
<%			if (upperBound > 0) { // consider UNBOUNDED_MULTIPLICITY and UNSPECIFIED_MULTIPLICITY%>
		<%=outgoingClass.getName()%> element = (<%=outgoingClass.getName()%>) req.getSource();
@


1.5
log
@#115861
ChildNode could be created not only in the compartment, but directly in it's parent.
@
text
@d27 1
a27 3
<%
}
%>
d222 1
d233 10
d254 14
d292 14
@


1.4
log
@Wrapping optional imports into importManager.getImportedName() calls
@
text
@d20 10
@


1.3
log
@[ashatalin] #115625 fixes compilation problems with initializers
@
text
@a9 2
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
a10 2
import org.eclipse.gef.commands.UnexecutableCommand;
import org.eclipse.gmf.runtime.emf.commands.core.commands.MSLCreateRelationshipCommand;
a11 1
import org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand;
a13 2
import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;
import <%=genDiagram.getProvidersPackageName()%>.ElementTypes;
a28 1
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
d60 1
a60 1
		if (ElementTypes.<%=genLink.getUniqueIdentifier()%> == req.getElementType()) {
d94 1
a94 1
			return UnexecutableCommand.INSTANCE;
d97 1
a97 1
			req.setContainmentFeature(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=modelFacet.getContainmentMetaFeature().getFeatureAccessorName()%>());
d105 1
a105 1
	private static class Create<%=namePart%>Command extends MSLCreateRelationshipCommand {
d117 2
a118 2
		protected EClass getEClassToEdit() {
			return <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=outgoingClass.getClassifierAccessorName()%>();
d124 1
a124 1
		protected EObject getElementToEdit() {
d131 1
a131 1
		protected EObject doDefaultElementCreation() {
d137 1
a137 1
				ElementTypes.Initializers.<%=genLink.getUniqueIdentifier()%>.init(newElement);
d161 1
a161 1
			return UnexecutableCommand.INSTANCE;
d164 1
a164 1
			req.setContainmentFeature(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=modelFacet.getContainmentMetaFeature().getFeatureAccessorName()%>());
d172 1
a172 1
	private static class Create<%=namePart%>Command extends MSLCreateRelationshipCommand {
d184 2
a185 2
		protected EClass getEClassToEdit() {
			return <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=outgoingClass.getClassifierAccessorName()%>();
d191 1
a191 1
		protected EObject getElementToEdit() {
d198 1
a198 1
		protected EObject doDefaultElementCreation() {
d204 1
a204 1
				ElementTypes.Initializers.<%=genLink.getUniqueIdentifier()%>.init(newElement);
d233 1
a233 1
			return UnexecutableCommand.INSTANCE;
d235 3
a237 3
		SetRequest setReq = new SetRequest(req.getTarget(),
			<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), req.getSource());
		return getMSLWrapper(new SetValueCommand(setReq));
d257 1
a257 1
			return UnexecutableCommand.INSTANCE;
d259 3
a261 3
		SetRequest setReq = new SetRequest(req.getSource(),
			<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>(), req.getTarget());
		return getMSLWrapper(new SetValueCommand(setReq));
@


1.2
log
@accessor method name is not always mirrors name of the target class
@
text
@d66 1
d86 1
a86 1
			namePart = OUTGOING_TOKEN + modelFacet.getMetaClass().getName();
d153 1
a153 1
			namePart = INCOMING_TOKEN + modelFacet.getMetaClass().getName();
d225 1
a225 1
			namePart = OUTGOING_TOKEN + metaFeature.getFeatureAccessorName();
d249 1
a249 1
			namePart = INCOMING_TOKEN + metaFeature.getFeatureAccessorName();
@


1.1
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d142 1
a142 1
				newElement.set<%=incomingClass.getClassifierAccessorName()%>((<%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>) getSource());
d209 1
a209 1
				newElement.set<%=incomingClass.getClassifierAccessorName()%>((<%=importManager.getImportedName(incomingClass.getQualifiedInterfaceName())%>) getTarget());
@

