head	1.12;
access;
symbols
	v20081022-1925:1.12
	v20081015-1925:1.12
	v20081008-1925:1.12
	v20081001-1925:1.12
	v20080924-1925:1.12
	v20080917-1925:1.12
	v20080911-1728:1.12
	v20080910-1520:1.12
	v20080903-1520:1.12
	v20080827-1520:1.12
	v20080813-1520:1.12
	v20080806-1520:1.12
	v20070413-1300:1.11
	v20070405-1100:1.11
	v20070403-1500:1.11
	v20070330-1300:1.11
	v20060330-1300:1.11
	v20070322-1100:1.11
	v20060316-0600:1.11
	v20070307-0700:1.11
	v20070301-1200:1.11
	v20070228-2000:1.11
	v20070221-1500:1.11
	v20070208-1800:1.11
	v20070202-0200:1.11
	v20070103-0300:1.11
	M4_20:1.11
	v20061222-1800:1.11
	v20061218-1200:1.11
	v20061214-0000:1.11
	v20061120-1300:1.11
	M3_20:1.11
	v20061117-0800:1.11
	v20061027-1200:1.11
	v20061020-1000:1.11
	v20061013-1330:1.11
	v20060919-0800:1.11
	v20060907-1100:1.11
	M1_20:1.11
	v20060904-1500:1.11
	v20060824-1600:1.11
	v20060817-1500:1.11
	v20060728-0500:1.11
	v20060713-1700:1.11
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	v20060627-1200:1.11
	v20060626-1420:1.11
	v20060620-0400:1.11
	v20060616-1400:1.10
	v20060616-1200:1.10
	v20060609-1400:1.10
	v20060531-1730:1.10
	v20060530-1930:1.10
	v20060526-1200:1.10
	v20060519-1300:1.10
	v20060519-0800:1.10
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.1
	I20060202-1415:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.12
date	2007.04.18.17.34.28;	author ashatalin;	state dead;
branches;
next	1.11;
commitid	2e44462656a24567;

1.11
date	2006.06.19.14.02.19;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.15.17.18.16;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.14.12.09.18;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.14.11.39.49;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.19.16.57.17;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.08.13.09.28;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.23.10.11.53;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Rewriting template to xpt

[170079] - Do not generate unnecessary CanonicalEditPolicies in case if phantoms are allowed for diagram
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.policies" class="ChildContainerCanonicalEditPolicyGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"
	skeleton="../common.skeleton"%>
<%
final GenChildContainer genContainer = (GenChildContainer) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genContainer.getDiagram();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genContainer.getCanonicalEditPolicyClassName()%> extends CanonicalEditPolicy {

<%List genNodes = genContainer.getChildNodes();%>
<%@@ include file="../semanticSync.jetinc/getSemanticChildrenList.jetinc"%>
	
<%if (genContainer instanceof GenNode) {%>
<%@@ include file="../semanticSync.jetinc/refreshSemanticNode.jetinc"%>
<%}%>

}
<%importManager.emitSortedImports();%>
@


1.11
log
@#145734 Generate "delete from view" popup menu action for not-synchronized diagrams
@
text
@@


1.10
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d21 1
a21 4
<%
if (genDiagram.isSynchronized()) {
	List genNodes = genContainer.getChildNodes();
%>
a22 7
<%} else {%>
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("java.util.List")%> getSemanticChildrenList() {
		return <%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST;
	}
d24 1
a24 9
	/**
	 * @@generated
	 */
	protected boolean shouldDeleteView(View view) {
		return <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.resolveSemanticElement(view) == null;
	}
<%}%>
	
<%if (genContainer instanceof GenNode && genDiagram.isSynchronized()) {%>
@


1.9
log
@#131543 Obsolete code should be eliminated
@
text
@d5 2
a6 1
GenChildContainer genContainer = (GenChildContainer) ((Object[]) argument)[0];
d10 1
a10 1
package <%=genDiagram.getEditPoliciesPackageName()%>;
a11 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());%>
@


1.8
log
@Obsolete import removed.
@
text
@a4 3
// TODO: move this attribute to the genmodel
final boolean isSynchronizedDiagram = true;

d22 1
a22 1
if (isSynchronizedDiagram) {
d42 1
a42 1
<%if (genContainer instanceof GenNode && isSynchronizedDiagram) {%>
@


1.7
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@a14 1
import org.eclipse.core.runtime.IAdaptable;
@


1.6
log
@#128024 Model references are not recognized as links
#131543 Obsolete code should be eliminated
@
text
@a44 7

	/**
	 * @@generated
	 */
	protected String getFactoryHint(IAdaptable elementAdapter) {
		return "";
	}
@


1.5
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d5 3
d24 1
d26 17
a42 9
{
	Collection genNodes = genContainer.getChildNodes();
	GenNode containerNode;
	if (genContainer instanceof GenCompartment) {
		containerNode = ((GenCompartment) genContainer).getNode();
	} else if (genContainer instanceof GenNode) {
		containerNode = (GenNode) genContainer;
	} else {
		throw new IllegalArgumentException(String.valueOf(genContainer));
a43 3
	GenClass modelElementInterface = containerNode.getModelFacet().getMetaClass();
%>
<%@@ include file="getSemanticChildrenList.jetinc"%>
d52 4
a55 9
<%
if (genContainer instanceof GenNode) {
	GenClass domainMetaclass = ((GenNode) genContainer).getModelFacet().getMetaClass();
	GenContainerBase genContainerBase = genContainer;
%>
<%@@ include file="refreshSemantic.jetinc"%>
<%
}
%>
@


1.4
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d8 1
@


1.3
log
@#126896
generating CanonicalEditPolicy for visualizing containment reference as diagram link.
@
text
@d5 1
a5 1
GenChildContainer genContainer = (GenChildContainer) argument;
@


1.2
log
@ImportManager moved to oeg.common
@
text
@d31 1
a31 1
	String modelElementInterfaceName = importManager.getImportedName(containerNode.getModelFacet().getMetaClass().getQualifiedInterfaceName());
d42 10
@


1.1
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"
@

