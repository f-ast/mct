head	1.13;
access;
symbols
	v20081022-1925:1.13
	v20081015-1925:1.13
	v20081008-1925:1.13
	v20081001-1925:1.13
	v20080924-1925:1.13
	v20080917-1925:1.13
	v20080911-1728:1.13
	v20080910-1520:1.13
	v20080903-1520:1.13
	v20080827-1520:1.13
	v20080813-1520:1.13
	v20080806-1520:1.13
	v20070504-1000:1.12
	v20070427-0600:1.12
	v20070420-1000:1.12
	v20070413-1300:1.12
	v20070405-1100:1.12
	v20070403-1500:1.12
	v20070330-1300:1.12
	v20060330-1300:1.12
	v20070322-1100:1.12
	v20060316-0600:1.12
	v20070307-0700:1.12
	v20070301-1200:1.12
	v20070228-2000:1.11
	v20070221-1500:1.11
	v20070208-1800:1.10
	v20070202-0200:1.7
	v20070103-0300:1.10
	M4_20:1.10
	v20061222-1800:1.10
	v20061218-1200:1.10
	v20061214-0000:1.10
	v20061120-1300:1.10
	M3_20:1.10
	v20061117-0800:1.10
	v20061027-1200:1.7
	v20061020-1000:1.7
	v20061013-1330:1.10
	v20060919-0800:1.7
	v20060907-1100:1.7
	M1_20:1.10
	v20060904-1500:1.10
	v20060824-1600:1.7
	v20060817-1500:1.7
	v20060728-0500:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.7
	v20060620-0400:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-1300:1.6
	v20060519-0800:1.6
	v20060512-1000:1.6
	I20060512-1000:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.3
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2007.05.11.13.50.53;	author ashatalin;	state dead;
branches;
next	1.12;
commitid	6340464474b24567;

1.12
date	2007.03.01.13.05.35;	author dstadnik;	state Exp;
branches;
next	1.11;
commitid	1a6045e6cf9e4567;

1.11
date	2007.02.21.12.36.01;	author ashatalin;	state Exp;
branches;
next	1.10;
commitid	500645dc3caf4567;

1.10
date	2006.08.21.12.31.00;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.08.01.18.02.34;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.21.11.46.26;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.24.11.47.59;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.27.12.52.07;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.21.17.11.59;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.13.22.22.24;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.19.16.57.17;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.13
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@/**
 *@@generated
 */
private void storeLinks(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram) {
	<%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> containerMetaclass = container.eClass();
	storeFeatureModelFacetLinks(container, containerMetaclass, diagram);
	storeTypeModelFacetLinks(container, containerMetaclass);
}
	
/**
 * @@generated
 */
private void storeTypeModelFacetLinks(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container, <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> containerMetaclass) {	
<%
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
%>
	storeTypeModelFacetLinks_<%=typeLinkModelFacet.getMetaClass().getInterfaceName()%>_<%=nextLink.getVisualID()%>(container, containerMetaclass);
<%
	}
}
%>
}

<%
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature childMetaFeature = typeLinkModelFacet.getChildMetaFeature();
		GenFeature sourceMetaFeature = typeLinkModelFacet.getSourceMetaFeature();
		GenFeature targetMetaFeature = typeLinkModelFacet.getTargetMetaFeature();
%>		
/**
 * @@generated
 */
private void storeTypeModelFacetLinks_<%=typeLinkModelFacet.getMetaClass().getInterfaceName()%>_<%=nextLink.getVisualID()%>(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container, <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> containerMetaclass) {
	if (<%=importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=childMetaFeature.getGenClass().getClassifierAccessorName()%>().isSuperTypeOf(containerMetaclass)) {
<%		if (childMetaFeature.isListType()) {%>		
		for (<%=importManager.getImportedName("java.util.Iterator")%> values = <%=getFeatureValueGetter("container", childMetaFeature, true, importManager)%>.iterator(); values.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> nextValue = ((<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) values.next());
<%		} else {%>
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> nextValue = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) <%=getFeatureValueGetter("container", childMetaFeature, true, importManager)%>;
<%		}%>
		int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getLinkWithClassVisualID(nextValue);
		if (<%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID == linkVID) {
			Object structuralFeatureResult = <%=getFeatureValueGetter("nextValue", targetMetaFeature, true, importManager)%>;
<% if (targetMetaFeature.isListType()){ %>
			<%=importManager.getImportedName("java.util.List")%> targets = (<%=importManager.getImportedName("java.util.List")%>) structuralFeatureResult;
			structuralFeatureResult = targets.size() == 1 ? targets.get(0) : null;
<% } %>				
			if (structuralFeatureResult instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) {
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> dst = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) structuralFeatureResult;
<% if (sourceMetaFeature != null) {%>
				structuralFeatureResult = <%=getFeatureValueGetter("nextValue", sourceMetaFeature, true, importManager)%>;
<% 		if (sourceMetaFeature.isListType()){ %>
				<%=importManager.getImportedName("java.util.List")%> sources = (<%=importManager.getImportedName("java.util.List")%>) structuralFeatureResult;
				structuralFeatureResult = sources.size() == 1 ? sources.get(0) : null;
<% 		}%>				
				if (structuralFeatureResult instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) {
					<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> src = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) structuralFeatureResult;
					myLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, <%=genDiagram.getElementTypesQualifiedClassName()%>.<%=nextLink.getUniqueIdentifier()%>, linkVID));
				}
<% } else { // sourceMetaFeature == null %>
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> src = container;
				myLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, <%=genDiagram.getElementTypesQualifiedClassName()%>.<%=nextLink.getUniqueIdentifier()%>, linkVID));
<% }%>
			}
		}
<%
		if (childMetaFeature.isListType()) {
%>
		}
<%
		}
%>
	}
}
<%
	}
}
%>

/**
 *@@generated
 */
private void storeFeatureModelFacetLinks(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container, <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> containerMetaclass, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram) {
<%
for (int linkIndex = 0; linkIndex < genLinks.size(); linkIndex++) {
	boolean phantomsOnly = true;
%>
<%@@ include file="collectFMFLinks_header.jetinc"%>
		myLinkDescriptors.add(new LinkDescriptor(container, nextDestination, <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=nextLink.getUniqueIdentifier()%>, <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID));
<%	if (createPhantoms) {%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = org.eclipse.gmf.runtime.diagram.core.services.ViewService.createNode(diagram, nextDestination, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(phantomNode.getEditPartQualifiedClassName())%>.VISUAL_ID), <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
		myEObject2NodeMap.put(nextDestination, nextNode);
		create<%=phantomNode.getUniqueIdentifier()%>Children(nextNode, nextDestination);
<%	}%>
<%@@ include file="collectFMFLinks_footer.jetinc"%>
<%
}

for (int linkIndex = 0; linkIndex < genLinks.size(); linkIndex++) {
	boolean phantomsOnly = false;
%>
<%@@ include file="collectFMFLinks_header.jetinc"%>
		myLinkDescriptors.add(new LinkDescriptor(container, nextDestination, <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=nextLink.getUniqueIdentifier()%>, <%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID));
<%@@ include file="collectFMFLinks_footer.jetinc"%>
<%}%>
}@


1.12
log
@rewrite NewDiagramFileWizard in xpand
@
text
@@


1.11
log
@[174946] - CanonicalEditPolicy generated for diagram should keep ElementType inside SemanticAdapter for TypeLinks on creation
@
text
@d97 1
a97 1
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextDestination, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(phantomNode.getEditPartQualifiedClassName())%>.VISUAL_ID), <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
@


1.10
log
@#154515 "Initialize diagram" action can not process links by class in case if source/target EReferences are isMany
@
text
@d64 1
a64 1
					myLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));
d68 1
a68 1
				myLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));
@


1.9
log
@#116861 [Tests] Create unit-tests checking code generated for the models with "instance class name" specified

- templates corrected
@
text
@d33 2
d49 5
a53 1
			Object structuralFeatureResult = <%=getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager)%>;
d56 6
a61 2
<%		if (typeLinkModelFacet.getSourceMetaFeature() != null) {%>
				structuralFeatureResult = <%=getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager)%>;
d66 1
a66 1
<%		} else {%>
d69 1
a69 1
<%		}%>
@


1.8
log
@Split storeTypeModelFacetLinks into set of fine-grained methods to ease overriding. mgolubev.
@
text
@a18 1
		GenFeature childMetaFeature = typeLinkModelFacet.getChildMetaFeature();
@


1.7
log
@#142211 Handle metamodel names that may have clashes with existing class names
@
text
@d20 14
d35 4
d55 2
a58 1
<%		}%>
a59 2
<%		if (typeLinkModelFacet.getSourceMetaFeature() != null) {%>
				}
d71 1
a75 1
}
@


1.6
log
@#138869 Unchecked cast in generated storeTypeModelFacetLinks
@
text
@d63 1
a63 1
private void storeFeatureModelFacetLinks(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container, <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> containerMetaclass, Diagram diagram) {
@


1.5
log
@#137999 Generate pure static VisualIDRegisrty classes
@
text
@d28 5
a32 3
		Object structuralFeatureResult = <%=getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager)%>;
		if (structuralFeatureResult instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) {
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> dst = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) structuralFeatureResult;
d34 3
a36 3
			structuralFeatureResult = <%=getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager)%>;
			if (structuralFeatureResult instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) {
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> src = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) structuralFeatureResult;
d38 1
a38 1
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> src = container;
a39 2
			int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getLinkWithClassVisualID(nextValue);
			if (<%=importManager.getImportedName(nextLink.getEditPartQualifiedClassName())%>.VISUAL_ID == linkVID) {
a40 1
			}
d42 2
a44 1
<%		}%>
@


1.4
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d38 1
a38 1
			int linkVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getLinkWithClassVisualID(nextValue);
@


1.3
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d39 1
a39 1
			if (<%=nextLink.getVisualID()%> == linkVID) {
d69 1
a69 1
		myLinkDescriptors.add(new LinkDescriptor(container, nextDestination, <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=nextLink.getUniqueIdentifier()%>, <%=nextLink.getVisualID()%>));
d71 1
a71 1
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextDestination, <%=importManager.getImportedName(phantomNode.getEditPartQualifiedClassName())%>.VISUAL_ID, <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d83 1
a83 1
		myLinkDescriptors.add(new LinkDescriptor(container, nextDestination, <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=nextLink.getUniqueIdentifier()%>, <%=nextLink.getVisualID()%>));
@


1.2
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d71 1
a71 1
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextDestination, <%=importManager.getImportedName(phantomNode.getEditPartQualifiedClassName())%>.VISUAL_ID, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
@


1.1
log
@#128024 Model references are not recognized as links
#131543 Obsolete code should be eliminated
@
text
@d71 1
a71 1
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%> nextNode = ViewService.createNode(diagram, nextDestination, null, <%=pluginActivatorClass%>.DIAGRAM_PREFERENCES_HINT);
@

