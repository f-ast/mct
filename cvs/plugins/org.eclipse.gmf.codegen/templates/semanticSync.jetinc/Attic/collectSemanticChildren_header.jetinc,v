head	1.9;
access;
symbols
	v20081022-1925:1.9
	v20081015-1925:1.9
	v20081008-1925:1.9
	v20081001-1925:1.9
	v20080924-1925:1.9
	v20080917-1925:1.9
	v20080911-1728:1.9
	v20080910-1520:1.9
	v20080903-1520:1.9
	v20080827-1520:1.9
	v20080813-1520:1.9
	v20080806-1520:1.9
	v20070504-1000:1.8
	v20070427-0600:1.8
	v20070420-1000:1.8
	v20070413-1300:1.8
	v20070405-1100:1.7
	v20070403-1500:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070307-0700:1.7
	v20070301-1200:1.7
	v20070228-2000:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.6
	v20070103-0300:1.6
	M4_20:1.6
	v20061222-1800:1.6
	v20061218-1200:1.6
	v20061214-0000:1.6
	v20061120-1300:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061027-1200:1.6
	v20061020-1000:1.6
	v20061013-1330:1.6
	v20060919-0800:1.6
	v20060907-1100:1.6
	M1_20:1.6
	v20060904-1500:1.6
	v20060824-1600:1.6
	v20060817-1500:1.6
	v20060728-0500:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060626-1420:1.6
	v20060620-0400:1.6
	v20060616-1400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-1300:1.6
	v20060519-0800:1.6
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.3
	I20060407-1200:1.2
	I20060331-1000:1.1
	I20060324-0300:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2007.05.11.13.50.53;	author ashatalin;	state dead;
branches;
next	1.8;
commitid	6340464474b24567;

1.8
date	2007.04.10.18.52.28;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	58c0461bdcea4567;

1.7
date	2007.01.29.19.30.15;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	7ac145be4b464567;

1.6
date	2006.05.18.14.03.44;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.21.17.11.59;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.04.14.12.04;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.19.16.57.17;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@<%
Map<GenFeature, List<GenNode>> genFeature2genNodeMap = new LinkedHashMap<GenFeature, List<GenNode>>();
for (int nodeIndex = 0; nodeIndex < genNodes.size(); nodeIndex++) {
	GenNode nextNode = (GenNode) genNodes.get(nodeIndex);
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet.isPhantomElement()) {
		// Skipping top-level phantoms
		continue;
	}
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	if (!genFeature2genNodeMap.containsKey(childMetaFeature)) {
		genFeature2genNodeMap.put(childMetaFeature, new LinkedList<GenNode>());
	}
	genFeature2genNodeMap.get(childMetaFeature).add(nextNode);
}

if (genFeature2genNodeMap.size() > 0) {
%>	<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> nextValue;
	int nodeVID;<%
}

for (Map.Entry<GenFeature, List<GenNode>> nextEntry : genFeature2genNodeMap.entrySet()) {
	GenFeature childMetaFeature = nextEntry.getKey();
	List<GenNode> genNodesCollection = nextEntry.getValue();
	if (childMetaFeature == null) {
%>		nextValue = /*FIXME no containment/child feature found in the genmodel, toolsmith need to specify correct one here manually*/
<%} else if (childMetaFeature.isListType()) {
%>	for (<%=importManager.getImportedName("java.util.Iterator")%> values = <%=getFeatureValueGetter("modelObject", childMetaFeature, true, importManager)%>.iterator(); values.hasNext();) {
		nextValue = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) values.next();
<%	} else {%>
	nextValue = <%=getFeatureValueGetter("modelObject", childMetaFeature, true, importManager)%>;
<%	}%>
	nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getNodeVisualID(viewObject, nextValue);
<%	final boolean generateSwitch = genNodesCollection.size() != 1;
	if (generateSwitch) {%>
	switch (nodeVID) {
<%	}
	for (GenNode nextNode : genNodesCollection) {
		if (generateSwitch) {%>
	case <%=importManager.getImportedName(nextNode.getEditPartQualifiedClassName())%>.VISUAL_ID: {
<%		} else {%>
	if (<%=importManager.getImportedName(nextNode.getEditPartQualifiedClassName())%>.VISUAL_ID == nodeVID) {
<%		}%>@


1.8
log
@[181771] Generator should tolerate absence of both containment and child meta features
@
text
@@


1.7
log
@[172032] - Do not generate ??CanonicalEditPolicy for pure-design elements
@
text
@d2 1
a2 1
Map genFeature2genNodeMap = new LinkedHashMap();
d12 1
a12 1
		genFeature2genNodeMap.put(childMetaFeature, new ArrayList());
d14 1
a14 1
	((Collection) genFeature2genNodeMap.get(childMetaFeature)).add(nextNode);
d17 1
a17 2
Set entrySet = genFeature2genNodeMap.entrySet();
if (entrySet.size() > 0) {
d22 6
a27 5
for (Iterator entries = entrySet.iterator(); entries.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) entries.next();
	GenFeature childMetaFeature = (GenFeature) nextEntry.getKey();
	Collection genNodesCollection = (Collection) nextEntry.getValue();
	if (childMetaFeature.isListType()) {
d34 1
a34 1
<%	boolean generateSwitch = genNodesCollection.size() != 1;
d38 1
a38 3
	
	for (Iterator genNodesIterator = genNodesCollection.iterator(); genNodesIterator.hasNext();) {
		GenNode nextNode = (GenNode) genNodesIterator.next();
@


1.6
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d6 1
a6 1
	if (typeModelFacet == null || typeModelFacet.isPhantomElement()) {
@


1.5
log
@#137999 Generate pure static VisualIDRegisrty classes
@
text
@d6 1
a6 1
	if (typeModelFacet.isPhantomElement()) {
@


1.4
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d33 1
a33 1
	nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(viewObject, nextValue);
@


1.3
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d42 1
a42 1
	case <%=nextNode.getVisualID()%>: {
d44 1
a44 1
	if (<%=nextNode.getVisualID()%> == nodeVID) {
@


1.2
log
@#134737 Create connections (links) to the inner elements in CanonicalEditPolicy/InitDiagramFileAction
#134751 Generated code should return semantic children in a correct sequence from CanonicalEditPolicy.getSemanticChildrenList()
@
text
@d33 1
a33 1
	nodeVID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.INSTANCE.getNodeVisualID(viewObject, nextValue, "");
@


1.1
log
@#128024 Model references are not recognized as links
#131543 Obsolete code should be eliminated
@
text
@d2 13
a14 5
GenNode nextNode = (GenNode) genNodes.get(nodeIndex);
TypeModelFacet typeModelFacet = nextNode.getModelFacet();
if (typeModelFacet.isPhantomElement()) {
// Skipping top-level phantoms
	continue;
d16 3
a18 3
GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	
if (nodeIndex == 0) {
d23 5
a27 1
if (childMetaFeature.isListType()) {
d30 1
a30 1
<%} else {%>
d32 1
a32 1
<%}%>
d34 12
a45 1
	if (<%=nextNode.getVisualID()%> == nodeVID) {@

