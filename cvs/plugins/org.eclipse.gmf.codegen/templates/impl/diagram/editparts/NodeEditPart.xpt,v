head	1.19;
access;
symbols
	v20081022-1925:1.18
	v20081015-1925:1.18
	v20081008-1925:1.16
	v20081001-1925:1.16
	v20080930-1130:1.16
	v20080926-1245:1.16
	v20080924-1925:1.16
	v20080917-1925:1.16
	v20080911-1728:1.16
	v20080910-1520:1.16
	v20080903-1520:1.15
	v20080827-1520:1.15
	v20080813-1520:1.8
	v20080806-1520:1.8
	v20080722-1827:1.7
	v20080718-1731:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080610-1132:1.7
	v20080603-1553:1.7
	v20080528-1052:1.7
	v20080521:1.7
	v20080516-1543:1.7
	v20080516-1143:1.7
	v20080512-1200:1.7
	v20080508-2000:1.7
	v20080507-1326:1.7
	v20080503-1740:1.6
	v20080501-1739:1.6
	v20080425-1959:1.6
	v20080417-1610:1.6
	v20080411-0411:1.6
	v20080404-1111:1.6
	v20080322-0000:1.6
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080207-0207:1.1.2.2
	v20071222-1111:1.5
	v20071214-1111:1.5
	v20071130-1111:1.5
	v20071124-0000:1.1.2.2
	v20071112-0000:1.5
	R2_0_maintenance:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.19
date	2008.10.23.12.56.42;	author bblajer;	state Exp;
branches;
next	1.18;
commitid	15f074900748a4567;

1.18
date	2008.10.14.18.48.57;	author atikhomirov;	state Exp;
branches;
next	1.17;
commitid	7f5648f4e9984567;

1.17
date	2008.10.14.18.29.18;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	6a1748f4e4fd4567;

1.16
date	2008.09.04.00.16.10;	author dstadnik;	state Exp;
branches;
next	1.15;
commitid	526448bf28c54567;

1.15
date	2008.08.27.12.27.19;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	e6d48b548264567;

1.14
date	2008.08.26.20.51.29;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	393b48b46cd04567;

1.13
date	2008.08.26.12.01.04;	author dstadnik;	state Exp;
branches;
next	1.12;
commitid	56248b3f07e4567;

1.12
date	2008.08.26.11.16.13;	author dstadnik;	state Exp;
branches;
next	1.11;
commitid	597148b3e5fc4567;

1.11
date	2008.08.25.10.35.51;	author dstadnik;	state Exp;
branches;
next	1.10;
commitid	57a448b28b004567;

1.10
date	2008.08.22.18.25.43;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	5d5b48af049e4567;

1.9
date	2008.08.21.12.11.33;	author dstadnik;	state Exp;
branches;
next	1.8;
commitid	469b48ad5b6c4567;

1.8
date	2008.08.01.11.09.39;	author dstadnik;	state Exp;
branches;
next	1.7;
commitid	7d624892eeef4567;

1.7
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	39124821b4de4567;

1.6
date	2008.02.22.13.08.04;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	4c9947bec9334567;

1.5
date	2007.11.09.19.24.20;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	a704734b3e34567;

1.4
date	2007.11.09.18.16.19;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	47b54734a3f24567;

1.3
date	2007.11.09.17.08.44;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	6af64734941b4567;

1.2
date	2007.11.09.16.28.34;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	42df47348ab14567;

1.1
date	2007.11.09.16.24.59;	author ashatalin;	state dead;
branches
	1.1.2.1;
next	;
commitid	3ae3473489da4567;

1.1.2.1
date	2007.11.09.16.24.59;	author ashatalin;	state Exp;
branches;
next	1.1.2.2;
commitid	3ae3473489da4567;

1.1.2.2
date	2007.11.09.17.28.52;	author ashatalin;	state Exp;
branches;
next	;
commitid	647473498d24567;


desc
@@


1.19
log
@[251552]: No visual feedback on selecting border items
@
text
@/*
 * Copyright (c) 2006, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»
«EXTENSION xpt::diagram::editparts::Utils»

«DEFINE extendsListContents FOR gmfgen::GenNode-»
«IF hasBorderItems()»org.eclipse.gmf.runtime.diagram.ui.editparts.AbstractBorderedShapeEditPart«ELSE»org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart«ENDIF-»
«ENDDEFINE»

«DEFINE extendsListContents FOR gmfgen::GenChildSideAffixedNode-»
«IF hasBorderItems()»org.eclipse.gmf.runtime.diagram.ui.editparts.BorderedBorderItemEditPart«ELSE»org.eclipse.gmf.runtime.diagram.ui.editparts.AbstractBorderItemEditPart«ENDIF-»
«ENDDEFINE»

«DEFINE constructor FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	public «editPartClassName»(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
«ENDDEFINE»

«DEFINE createDefaultEditPoliciesBody FOR gmfgen::GenNode-»
	«EXPAND installCreationRolePolicy-»
	super.createDefaultEditPolicies();
	«EXPAND installPrimaryDragEditPolicy-»
	«EXPAND xpt::diagram::editparts::Common::installSemanticEditPolicy-»
	«IF needsGraphicalNodeEditPolicy()-»
		installEditPolicy(org.eclipse.gef.EditPolicy.GRAPHICAL_NODE_ROLE, new «getGraphicalNodeEditPolicyQualifiedClassName()»());
	«ENDIF-»
	«IF !childNodes.isEmpty()-»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.DRAG_DROP_ROLE, new org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy());
	«ENDIF-»
	«EXPAND xpt::diagram::editparts::Common::installCanonicalEditPolicy-»
	installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
	«EXPAND xpt::diagram::editparts::Common::behaviour FOR this-»
	// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
	// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
«ENDDEFINE»

«DEFINE installCreationRolePolicy FOR gmfgen::GenNode-»
«IF hasChildren() || hasChildrenInListCompartments()-»
	installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CREATION_ROLE, «EXPAND _creationEditPolicyNewInstance»);
«ENDIF-»
«ENDDEFINE»

«DEFINE _creationEditPolicyNewInstance FOR gmfgen::GenNode»new org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy()«ENDDEFINE»

«DEFINE installPrimaryDragEditPolicy FOR gmfgen::GenNode»«ENDDEFINE»

«DEFINE installPrimaryDragEditPolicy FOR gmfgen::GenChildSideAffixedNode-»
		installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());
«ENDDEFINE»

«DEFINE createLayoutEditPolicy FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
		«EXPAND createLayoutEditPolicyBody-»
	}
«ENDDEFINE»

«DEFINE createLayoutEditPolicyBody FOR gmfgen::GenNode-»
	«IF gmfgen::ViewmapLayoutType::XY_LAYOUT.value == getLayoutType().value-»
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				«EXPAND borderItemSelectionEditPolicy-»
				org.eclipse.gef.EditPolicy result = super.createChildEditPolicy(child);
				if (result == null) {
					return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy();
				}
				return result;
			}
		};
		return lep;
	«ELSEIF gmfgen::ViewmapLayoutType::TOOLBAR_LAYOUT.value == getLayoutType().value»
		org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				«EXPAND borderItemSelectionEditPolicy-»
				if (child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE) == null) {
					if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart) {
						return new «getDiagram().getTextSelectionEditPolicyQualifiedClassName()»();
					}
				}
				return super.createChildEditPolicy(child);
			}
		};
		return lep;
	«ELSEIF gmfgen::ViewmapLayoutType::FLOW_LAYOUT.value == getLayoutType().value»
		org.eclipse.gef.editpolicies.FlowLayoutEditPolicy lep = new org.eclipse.gef.editpolicies.FlowLayoutEditPolicy() {

			«IF hasBorderItems()-»
			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				«EXPAND borderItemSelectionEditPolicy-»
				return super.createChildEditPolicy(child);
			}
			«ENDIF-»

			protected org.eclipse.gef.commands.Command createAddCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command createMoveChildCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
	«ELSE-»
		org.eclipse.gef.editpolicies.LayoutEditPolicy lep = new org.eclipse.gef.editpolicies.LayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				«EXPAND borderItemSelectionEditPolicy-»
				org.eclipse.gef.EditPolicy result = child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new org.eclipse.gef.editpolicies.NonResizableEditPolicy();
				}
				return result;
			}

			protected org.eclipse.gef.commands.Command getMoveChildrenCommand(org.eclipse.gef.Request request) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
	«ENDIF-»
«ENDDEFINE»

«DEFINE borderItemSelectionEditPolicy FOR gmfgen::GenNode-»
«IF hasBorderItems()-»
org.eclipse.gmf.runtime.notation.View childView = (org.eclipse.gmf.runtime.notation.View) child.getModel();
switch («EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR getDiagram()»(childView)) {
«IF getExternalLabels().size() > 0-»
«FOREACH getExternalLabels() AS nextLabel-»
«EXPAND xpt::Common::caseVisualID FOR nextLabel-»
«ENDFOREACH-»
	return «EXPAND borderItemSelectionEP»;
«ENDIF-»
«IF getSideAffixedChildren().size() > 0-»
«FOREACH getSideAffixedChildren() AS nextBorderItem-»
«EXPAND xpt::Common::caseVisualID FOR nextBorderItem-»
«ENDFOREACH-»
	return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
«ENDIF-»
}
«ENDIF-»
«ENDDEFINE»

«DEFINE borderItemSelectionEP FOR gmfgen::GenNode-»
new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy() {

	protected java.util.List createSelectionHandles() {
		org.eclipse.gef.handles.MoveHandle mh = new org.eclipse.gef.handles.MoveHandle((org.eclipse.gef.GraphicalEditPart) getHost());
		mh.setBorder(null);
		return java.util.Collections.singletonList(mh);
	}
}
«ENDDEFINE»

«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::Viewmap-»
	«ERROR "Unknown viewmap: " + this-»
«ENDDEFINE»

«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::FigureViewmap-»
	«LET figureQualifiedClassName == null ? "org.eclipse.draw2d.RectangleFigure" : figureQualifiedClassName AS fqn-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.draw2d.IFigure createNodeShape() {
			return primaryShape = new «fqn»()«IF node.getLayoutType().value == gmfgen::ViewmapLayoutType::XY_LAYOUT.value»{
				protected boolean useLocalCoordinates() {
					return true;
				}
			}«ENDIF»;
		}

		«EXPAND getPrimaryShapeMethod FOR fqn-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::SnippetViewmap-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return «body»;
	}
«ENDDEFINE»

«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::InnerClassViewmap-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		«className» figure = new «className»();
		«IF node.childNodes.size() > 0 && node.getLayoutType().value == gmfgen::ViewmapLayoutType::XY_LAYOUT.value-»
 		figure.setUseLocalCoordinates(true);
		«ENDIF-»
 		return primaryShape = figure;
	}

	«EXPAND getPrimaryShapeMethod FOR className-»
«ENDDEFINE»

«DEFINE getPrimaryShapeMethod FOR String-»
	«EXPAND xpt::Common::generatedMemberComment»
	public «this» getPrimaryShape() {
		return («this») primaryShape;
	}
«ENDDEFINE»

«DEFINE addFixedChild FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
«FOREACH getInnerFixedLabels() AS label»«LET (gmfgen::ParentAssignedViewmap) label.viewmap AS childViewmap-»
		if (childEditPart instanceof «label.getEditPartQualifiedClassName()») {
			((«label.getEditPartQualifiedClassName()») childEditPart).«EXPAND impl::diagram::editparts::TextAware::labelSetterName FOR childViewmap»(getPrimaryShape().«childViewmap.getterName»());
			return true;
		}
«ENDLET»«ENDFOREACH-»
«FOREACH getPinnedCompartments() AS compartment»«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
		if (childEditPart instanceof «compartment.getEditPartQualifiedClassName()») {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().«childViewmap.getterName»();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((«compartment.getEditPartQualifiedClassName()») childEditPart).getFigure());
			return true;
		}	
«ENDLET»«ENDFOREACH-»
«FOREACH getSideAffixedChildren() AS child-»
		if (childEditPart instanceof «child.getEditPartQualifiedClassName()») {
			org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator locator = new org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator(getMainFigure(), org.eclipse.draw2d.PositionConstants.«child.preferredSideName»);
			getBorderedFigure().getBorderItemContainer().add(((«child.getEditPartQualifiedClassName()») childEditPart).getFigure(), locator);
			return true;
		}
«ENDFOREACH-»
		return false;
	}
«ENDDEFINE»

«DEFINE removeFixedChild FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
«FOREACH getInnerFixedLabels() AS label»«LET (gmfgen::ParentAssignedViewmap) label.viewmap AS childViewmap-»
		if (childEditPart instanceof «label.getEditPartQualifiedClassName()») {
			return true;
		}
«ENDLET»«ENDFOREACH-»
«FOREACH getPinnedCompartments() AS compartment»«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
		if (childEditPart instanceof «compartment.getEditPartQualifiedClassName()») {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().«childViewmap.getterName»();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.remove(((«compartment.getEditPartQualifiedClassName()») childEditPart).getFigure());
			return true;
		}	
«ENDLET»«ENDFOREACH-»
«FOREACH getSideAffixedChildren() AS child-»
		if (childEditPart instanceof «child.getEditPartQualifiedClassName()») {
			getBorderedFigure().getBorderItemContainer().remove(((«child.getEditPartQualifiedClassName()») childEditPart).getFigure());
			return true;
		}
«ENDFOREACH-»
		return false;
	}
«ENDDEFINE»

«DEFINE addChildVisual FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}
«ENDDEFINE»

«DEFINE removeChildVisual FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
		if (removeFixedChild(childEditPart)){
			return;
		}
		super.removeChildVisual(childEditPart);
	}
«ENDDEFINE»

«DEFINE getContentPaneFor FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure getContentPaneFor(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart) {
		«REM»it is unclear what we should return for labels here«ENDREM-»
«FOREACH getPinnedCompartments() AS compartment»«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
		if (editPart instanceof «compartment.getEditPartQualifiedClassName()») {
			return getPrimaryShape().«childViewmap.getterName»();
		}	
«ENDLET»«ENDFOREACH-»
«IF hasBorderItems()-»
		if (editPart instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
			return getBorderedFigure().getBorderItemContainer();
		}
«ENDIF-»
		return getContentPane();
	}
«ENDDEFINE»

«DEFINE addBorderItem FOR gmfgen::GenNode-»
	«IF getExternalLabels().size() > 0-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected void addBorderItem(org.eclipse.draw2d.IFigure borderItemContainer, org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart borderItemEditPart) {
			if («FOREACH getExternalLabels() AS label SEPARATOR ' || '»borderItemEditPart instanceof «label.getEditPartQualifiedClassName()»«ENDFOREACH») {
				org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator locator = new org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator(getMainFigure(), org.eclipse.draw2d.PositionConstants.SOUTH);
				locator.setBorderItemOffset(new org.eclipse.draw2d.geometry.Dimension(-20, -20));
				borderItemContainer.add(borderItemEditPart.getFigure(), locator);
			} else {
				super.addBorderItem(borderItemContainer, borderItemEditPart);
			}
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE createNodePlate FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result =
			new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(getMapMode().DPtoLP(«defaultSizeWidth(viewmap, 40)»), getMapMode().DPtoLP(«defaultSizeHeight(viewmap, 40)»));
		«EXPAND setupNodePlate-»
		return result;
	}
«ENDDEFINE»

«DEFINE setupNodePlate FOR gmfgen::GenNode»«ENDDEFINE»

«DEFINE setupNodePlate FOR gmfgen::GenChildSideAffixedNode»
	//FIXME: workaround for #154536
	result.getBounds().setSize(result.getPreferredSize());
«ENDDEFINE»

«DEFINE getPrimaryDragEditPolicy FOR gmfgen::GenNode-»
	«LET getResizeConstraints(viewmap) AS rc-»
		«IF null != primaryDragEditPolicyQualifiedClassName || null != rc-»
			«EXPAND xpt::Common::generatedMemberComment»
			public org.eclipse.gef.EditPolicy getPrimaryDragEditPolicy() {
				«IF null != primaryDragEditPolicyQualifiedClassName-»
					return new «primaryDragEditPolicyQualifiedClassName»();
				«ELSE-»
					org.eclipse.gef.EditPolicy result = super.getPrimaryDragEditPolicy();
					if (result instanceof org.eclipse.gef.editpolicies.ResizableEditPolicy) {
						org.eclipse.gef.editpolicies.ResizableEditPolicy ep = (org.eclipse.gef.editpolicies.ResizableEditPolicy) result;
						ep.setResizeDirections(
							«IF rc.resizeHandleNames.size() > 0-»
								«FOREACH rc.resizeHandleNames AS name SEPARATOR ' | '»org.eclipse.draw2d.PositionConstants.«name»«ENDFOREACH-»
							«ELSE»org.eclipse.draw2d.PositionConstants.NONE«ENDIF»);
					}
					return result;
				«ENDIF-»
			}
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE createFigure FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment(
		"Creates figure for this edit part.\n" +
		"\n" +
		"Body of this method does not depend on settings in generation model\n" +
		"so you may safely remove <i>generated</i> tag and modify it.\n"
	)»
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure create«IF hasBorderItems()»Main«ELSE»Node«ENDIF»Figure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}
«ENDDEFINE»

«DEFINE setupContentPane FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment(
		"Default implementation treats passed figure as content pane.\n" +
		"Respects layout one may have set for generated figure.\n" +
		"@@param nodeShape instance of generated figure class"
	)»
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
		«IF !childNodes.isEmpty() || !compartments.isEmpty() || !labels.without(labels.typeSelect(GenExternalNodeLabel)).isEmpty()-»
			if (nodeShape.getLayoutManager() == null) {
				«IF getLayoutType().value == gmfgen::ViewmapLayoutType::XY_LAYOUT.value-»
					nodeShape.setLayoutManager(new org.eclipse.draw2d.FreeformLayout() {

						public Object getConstraint(org.eclipse.draw2d.IFigure figure) {
							Object result = constraints.get(figure);
							if (result == null) {
								result = new org.eclipse.draw2d.geometry.Rectangle(0, 0, -1, -1);
							}
							return result;
						}
					});
				«ELSE-»
					org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout layout =new org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout();
					layout.setSpacing(getMapMode().DPtoLP(5));
					nodeShape.setLayoutManager(layout);
				«ENDIF-»
			}
		«ENDIF-»
		return nodeShape; // use nodeShape itself as contentPane
	}
«ENDDEFINE»

«DEFINE getContentPane FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}
«ENDDEFINE»

«DEFINE setForegroundColor FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void setForegroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}
«ENDDEFINE»

«DEFINE setBackgroundColor FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void setBackgroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}
«ENDDEFINE»

«DEFINE setLineWidth FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void setLineWidth(int width) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineWidth(getMapMode().DPtoLP(width));
		}
	}
«ENDDEFINE»

«DEFINE setLineStyle FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void setLineType(int style) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineStyle(style);
		}
	}
«ENDDEFINE»

«DEFINE getPrimaryChildEditPart FOR gmfgen::GenNode-»
	«IF !labels.isEmpty()-»
		«EXPAND xpt::Common::generatedMemberComment»
		public org.eclipse.gef.EditPart getPrimaryChildEditPart() {
			return getChildBySemanticHint(«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall FOR (GenLabel) labels.first()»);
		}
	«ENDIF-»
«ENDDEFINE»

// pre: getAssistantOutgoingLinks(this).size() > 0
«DEFINE getMARelTypesOnSource FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	public java.util.List/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/ getMARelTypesOnSource() {
		java.util.List/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/ types = new java.util.ArrayList/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/();
		«FOREACH getAssistantOutgoingLinks(this) AS link-»
		types.add(«getDiagram().getElementTypesQualifiedClassName()».«link.getUniqueIdentifier()»);
		«ENDFOREACH-»
		return types;
	}
«ENDDEFINE»

// pre: getAssistantIncomingLinks(this).size() > 0
«DEFINE getMARelTypesOnTarget FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	public java.util.List/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/ getMARelTypesOnTarget() {
		java.util.List/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/ types = new java.util.ArrayList/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/();
		«FOREACH getAssistantIncomingLinks(this) AS link-»
		types.add(«getDiagram().getElementTypesQualifiedClassName()».«link.getUniqueIdentifier()»);
		«ENDFOREACH-»
		return types;
	}
«ENDDEFINE»

// pre: getAssistantOutgoingLinks(this).size() > 0
«DEFINE getMARelTypesOnSourceAndTarget FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	public java.util.List/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/ getMARelTypesOnSourceAndTarget(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart targetEditPart) {
		java.util.List/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/ types = new java.util.ArrayList/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/();
		«FOREACH getAssistantOutgoingLinks(this) AS link-»
			«FOREACH selectGenNodes(link.targets) AS target-»
		if (targetEditPart instanceof «target.getEditPartQualifiedClassName()») {
			types.add(«getDiagram().getElementTypesQualifiedClassName()».«link.getUniqueIdentifier()»);
		}
			«ENDFOREACH-»
		«ENDFOREACH-»
		return types;
	}
«ENDDEFINE»

// pre: getAssistantIncomingLinks(this).size() > 0
«DEFINE getMATypesForSource FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	public java.util.List/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/ getMATypesForSource(org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		java.util.List/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/ types = new java.util.ArrayList/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/();
		«FOREACH getAssistantIncomingLinks(this) AS link-»
			«FOREACH selectGenNodes(link.sources) AS source-»
		if (relationshipType == «getDiagram().getElementTypesQualifiedClassName()».«link.getUniqueIdentifier()») {
			types.add(«getDiagram().getElementTypesQualifiedClassName()».«source.getUniqueIdentifier()»);
		}
			«ENDFOREACH-»
		«ENDFOREACH-»
		return types;
	}
«ENDDEFINE»

// pre: getAssistantOutgoingLinks(this).size() > 0
«DEFINE getMATypesForTarget FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	public java.util.List/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/ getMATypesForTarget(org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		java.util.List/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/ types = new java.util.ArrayList/*<org.eclipse.gmf.runtime.emf.type.core.IElementType>*/();
		«FOREACH getAssistantOutgoingLinks(this) AS link-»
			«FOREACH link.targets.typeSelect(gmfgen::GenNode) AS target-»
		if (relationshipType == «getDiagram().getElementTypesQualifiedClassName()».«link.getUniqueIdentifier()») {
			types.add(«getDiagram().getElementTypesQualifiedClassName()».«target.getUniqueIdentifier()»);
		}
			«ENDFOREACH-»
		«ENDFOREACH-»
		return types;
	}
«ENDDEFINE»

«DEFINE handleNotificationEventBody FOR gmfgen::GenTopLevelNode-»
	if (event.getNotifier() == getModel() && org.eclipse.emf.ecore.EcorePackage.eINSTANCE.getEModelElement_EAnnotations().equals(event.getFeature())) {
		handleMajorSemanticChange();
	} else {
		super.handleNotificationEvent(event);
	}
«ENDDEFINE»

«DEFINE innerClassDeclaration FOR gmfgen::Viewmap»
«ENDDEFINE»

«DEFINE innerClassDeclaration FOR gmfgen::InnerClassViewmap»
	«classBody»
«ENDDEFINE»

«DEFINE getTargetEditPartMethod FOR gmfgen::GenNode»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gef.EditPart getTargetEditPart(org.eclipse.gef.Request request) {
		if (request instanceof org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest) {
			org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter adapter = ((org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest) request).getViewAndElementDescriptor().getCreateElementRequestAdapter();
			org.eclipse.gmf.runtime.emf.type.core.IElementType type = (org.eclipse.gmf.runtime.emf.type.core.IElementType) adapter.getAdapter(org.eclipse.gmf.runtime.emf.type.core.IElementType.class);
«FOREACH compartments AS compartment-»
	«IF listCompartmentHasChildren(compartment)-»
		«FOREACH compartment.childNodes AS childNode-»
			if (type == «getDiagram().getElementTypesQualifiedClassName()».«childNode.getUniqueIdentifier()») {
				return getChildBySemanticHint(«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall FOR compartment»);
			}
		«ENDFOREACH-»
	«ENDIF-»
«ENDFOREACH-»
		}
		return super.getTargetEditPart(request);
	}
«ENDDEFINE»
@


1.18
log
@refactoring - move conditions out of actuial implementation templates
@
text
@d78 1
a78 5
				«IF hasBorderItems()-»
					if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
						return «EXPAND borderItemSelectionEP»;
					}
				«ENDIF-»
d91 1
a91 5
				«IF hasBorderItems()-»
					if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
						return «EXPAND borderItemSelectionEP»;
					}
				«ENDIF-»
d105 4
a108 6
				protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
					if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
						return «EXPAND borderItemSelectionEP»;
					}
					return super.createChildEditPolicy(child);
				}
d128 1
a128 5
				«IF hasBorderItems()-»
					if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
						return «EXPAND borderItemSelectionEP»;
					}
				«ENDIF-»
d148 20
@


1.17
log
@[250271] mgolubev - Replace anonymous inner class for creation editpolicy by using GEF's standard getTargetEditPart() method
@
text
@a17 1
«EXTENSION xpt::diagram::Utils»
d220 21
a240 29
	«IF hasFixedChildren()-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
			«FOREACH getInnerFixedLabels() AS label-»
				«LET (gmfgen::ParentAssignedViewmap) label.viewmap AS childViewmap-»
					if (childEditPart instanceof «label.getEditPartQualifiedClassName()») {
						((«label.getEditPartQualifiedClassName()») childEditPart).«EXPAND impl::diagram::editparts::TextAware::labelSetterName FOR childViewmap»(getPrimaryShape().«childViewmap.getterName»());
						return true;
					}
				«ENDLET-»
			«ENDFOREACH-»
			«FOREACH getPinnedCompartments() AS compartment-»
				«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
					if (childEditPart instanceof «compartment.getEditPartQualifiedClassName()») {
						org.eclipse.draw2d.IFigure pane = getPrimaryShape().«childViewmap.getterName»();
						setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
						pane.add(((«compartment.getEditPartQualifiedClassName()») childEditPart).getFigure());
						return true;
					}	
				«ENDLET-»
			«ENDFOREACH-»
			«FOREACH getSideAffixedChildren() AS child-»
				if (childEditPart instanceof «child.getEditPartQualifiedClassName()») {
					org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator locator = new org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator(getMainFigure(), org.eclipse.draw2d.PositionConstants.«child.preferredSideName»);
					getBorderedFigure().getBorderItemContainer().add(((«child.getEditPartQualifiedClassName()») childEditPart).getFigure(), locator);
					return true;
				}
			«ENDFOREACH-»
			return false;
d242 3
a244 1
	«ENDIF-»
d248 19
a266 27
	«IF hasFixedChildren()-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
			«FOREACH getInnerFixedLabels() AS label-»
				«LET (gmfgen::ParentAssignedViewmap) label.viewmap AS childViewmap-»
					if (childEditPart instanceof «label.getEditPartQualifiedClassName()») {
						return true;
					}
				«ENDLET-»
			«ENDFOREACH-»
			«FOREACH getPinnedCompartments() AS compartment-»
				«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
					if (childEditPart instanceof «compartment.getEditPartQualifiedClassName()») {
						org.eclipse.draw2d.IFigure pane = getPrimaryShape().«childViewmap.getterName»();
						setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
						pane.remove(((«compartment.getEditPartQualifiedClassName()») childEditPart).getFigure());
						return true;
					}	
				«ENDLET-»
			«ENDFOREACH-»
			«FOREACH getSideAffixedChildren() AS child-»
				if (childEditPart instanceof «child.getEditPartQualifiedClassName()») {
					getBorderedFigure().getBorderItemContainer().remove(((«child.getEditPartQualifiedClassName()») childEditPart).getFigure());
					return true;
				}
			«ENDFOREACH-»
			return false;
d268 3
a270 1
	«ENDIF-»
d274 4
a277 7
	«IF hasFixedChildren()-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
			if (addFixedChild(childEditPart)) {
				return;
			}
			super.addChildVisual(childEditPart, -1);
d279 2
a280 1
	«ENDIF-»
d284 4
a287 7
	«IF hasFixedChildren()-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
			if (removeFixedChild(childEditPart)){
				return;
			}
			super.removeChildVisual(childEditPart);
d289 2
a290 1
	«ENDIF-»
d294 11
a304 17
	«IF hasFixedChildren()-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.draw2d.IFigure getContentPaneFor(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart) {
			«REM»it is unclear what we should return for labels here«ENDREM»
			«FOREACH getPinnedCompartments() AS compartment-»
				«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
					if (editPart instanceof «compartment.getEditPartQualifiedClassName()») {
						return getPrimaryShape().«childViewmap.getterName»();
					}	
				«ENDLET-»
			«ENDFOREACH-»
			«IF hasBorderItems()-»
			if (editPart instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
				return getBorderedFigure().getBorderItemContainer();
			}
			«ENDIF-»
			return getContentPane();
d306 3
a308 1
	«ENDIF-»
d469 1
a470 1
«IF getAssistantOutgoingLinks(this).size() > 0-»
a478 1
«ENDIF-»
d481 1
a482 1
«IF getAssistantIncomingLinks(this).size() > 0-»
a490 1
«ENDIF-»
d493 1
a494 1
«IF getAssistantOutgoingLinks(this).size() > 0-»
a506 1
«ENDIF-»
d509 1
a510 1
«IF getAssistantIncomingLinks(this).size() > 0-»
a522 1
«ENDIF-»
d525 1
a526 1
«IF getAssistantOutgoingLinks(this).size() > 0-»
a538 1
«ENDIF-»
@


1.16
log
@[246101] use border items container for border items
@
text
@d54 3
a56 31
	«IF hasChildren() || hasChildrenInListCompartments()-»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CREATION_ROLE,
				new org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy()«IF hasChildrenInListCompartments()» {
			public org.eclipse.gef.commands.Command getCommand(org.eclipse.gef.Request request) {
				if (understandsRequest(request)) {
					if (request instanceof org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest) {
						org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter adapter =
							((org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest) request).
								getViewAndElementDescriptor().getCreateElementRequestAdapter();
						org.eclipse.gmf.runtime.emf.type.core.IElementType type =
							(org.eclipse.gmf.runtime.emf.type.core.IElementType) adapter.getAdapter(
								org.eclipse.gmf.runtime.emf.type.core.IElementType.class);
						«FOREACH compartments AS compartment-»
							«IF listCompartmentHasChildren(compartment)-»
								«FOREACH compartment.childNodes AS childNode-»
						if (type == «getDiagram().getElementTypesQualifiedClassName()».«childNode.getUniqueIdentifier()») {
							org.eclipse.gef.EditPart compartmentEditPart =
								getChildBySemanticHint(«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall FOR compartment»);
							return compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);
						}
								«ENDFOREACH-»
							«ENDIF-»
						«ENDFOREACH-»
					}
					return super.getCommand(request);
				}
				return null;
			}
		}
		«ENDIF»);
	«ENDIF-»
d59 2
d580 21
a600 1
«ENDDEFINE»@


1.15
log
@[244970] - Don't generate supporting code (updater/editpolicies/model-assistant) for links to/from pure label based elements
@
text
@d348 5
a352 5
			«FOREACH getSideAffixedChildren() AS child-»
				if (editPart instanceof «child.getEditPartQualifiedClassName()») {
					return getBorderedFigure().getBorderItemContainer();
				}
			«ENDFOREACH-»
@


1.14
log
@fix copyright year
@
text
@d517 1
a517 1
«IF getOutgoingLinks(this).size() > 0-»
d519 3
a521 3
	public java.util.List getMARelTypesOnSource() {
		java.util.List types = new java.util.ArrayList();
		«FOREACH getOutgoingLinks(this) AS link-»
d530 1
a530 1
«IF getIncomingLinks(this).size() > 0-»
d532 3
a534 3
	public java.util.List getMARelTypesOnTarget() {
		java.util.List types = new java.util.ArrayList();
		«FOREACH getIncomingLinks(this) AS link-»
d543 1
a543 1
«IF getOutgoingLinks(this).size() > 0-»
d545 4
a548 4
	public java.util.List getMARelTypesOnSourceAndTarget(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart targetEditPart) {
		java.util.List types = new java.util.ArrayList();
		«FOREACH getOutgoingLinks(this) AS link-»
			«FOREACH link.getAssistantTargets() AS target-»
d560 1
a560 1
«IF getIncomingLinks(this).size() > 0-»
d562 4
a565 4
	public java.util.List getMATypesForSource(org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		java.util.List types = new java.util.ArrayList();
		«FOREACH getIncomingLinks(this) AS link-»
			«FOREACH link.getAssistantSources() AS source-»
d577 1
a577 1
«IF getOutgoingLinks(this).size() > 0-»
d579 4
a582 4
	public java.util.List getMATypesForTarget(org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		java.util.List types = new java.util.ArrayList();
		«FOREACH getOutgoingLinks(this) AS link-»
			«FOREACH link.getAssistantTargets() AS target-»
@


1.13
log
@[216880] add label to the correct figure
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2007 Borland Software Corporation
@


1.12
log
@[245158] show text feedback for labels
@
text
@d353 1
a353 1
			return super.getContentPaneFor(editPart);
@


1.11
log
@[223163] don't remove inner labels
@
text
@d107 1
a107 1
						return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
d124 1
a124 1
						return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
d142 1
a142 1
						return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
d167 1
a167 1
						return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
d189 11
@


1.10
log
@simplified visualId-to-viewType conversion helpers
@
text
@d273 7
a279 1
			«REM»ignore labels assuming that they never may be removed«ENDREM»
@


1.9
log
@[244725] distribute MA code over editparts
@
text
@d71 1
a71 2
								getChildBySemanticHint(«EXPAND xpt::editor::VisualIDRegistry::getTypeMethodCall FOR getDiagram()»(
									«EXPAND xpt::editor::VisualIDRegistry::visualID FOR compartment»));
d494 1
a494 1
			return getChildBySemanticHint(«EXPAND xpt::editor::VisualIDRegistry::getTypeMethodCall FOR getDiagram()»(«EXPAND xpt::editor::VisualIDRegistry::visualID FOR (GenLabel) labels.toList().first()»));
@


1.8
log
@[242851] set node visual props to the primary shape
@
text
@d18 1
d500 77
@


1.7
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d454 36
@


1.6
log
@Updating gmfgaph editor:
- Setting default size of all graphical elements to 0,0
- updating aspect templates to reflect latest changes
- regenerating code
@
text
@d14 1
a14 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.5
log
@[207784] - Add variation-points to xpt\diagram\editparts\*.xpt
@
text
@d96 3
a98 2
		«IF gmfgen::ViewmapLayoutType::XY_LAYOUT.value == getLayoutType().value-»
			org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy() {
d100 3
a102 16
				protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
					«IF hasBorderItems()-»
						if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
							return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
						}
					«ENDIF-»
					org.eclipse.gef.EditPolicy result = super.createChildEditPolicy(child);
					if (result == null) {
						return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy();
					}
					return result;
				}
			};
			return lep;
		«ELSEIF gmfgen::ViewmapLayoutType::TOOLBAR_LAYOUT.value == getLayoutType().value»
			org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy() {
d104 4
a107 10
				protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
					«IF hasBorderItems()-»
						if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
							return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
						}
					«ENDIF-»
					if (child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE) == null) {
						if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart) {
							return new «getDiagram().getTextSelectionEditPolicyQualifiedClassName()»();
						}
d109 4
a112 1
					return super.createChildEditPolicy(child);
d114 6
a119 4
			};
			return lep;
		«ELSEIF gmfgen::ViewmapLayoutType::FLOW_LAYOUT.value == getLayoutType().value»
			org.eclipse.gef.editpolicies.FlowLayoutEditPolicy lep = new org.eclipse.gef.editpolicies.FlowLayoutEditPolicy() {
d121 1
d123 2
a124 5
					protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
						if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
							return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
						}
						return super.createChildEditPolicy(child);
d127 11
d139 6
a144 2
				protected org.eclipse.gef.commands.Command createAddCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
					return null;
d146 5
d152 3
a154 3
				protected org.eclipse.gef.commands.Command createMoveChildCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
					return null;
				}
d156 7
a162 7
				protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
					return null;
				}
			};
			return lep;
		«ELSE-»
			org.eclipse.gef.editpolicies.LayoutEditPolicy lep = new org.eclipse.gef.editpolicies.LayoutEditPolicy() {
d164 4
a167 9
				protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
					«IF hasBorderItems()-»
						if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
							return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
						}
					«ENDIF-»
					org.eclipse.gef.EditPolicy result = child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
					if (result == null) {
						result = new org.eclipse.gef.editpolicies.NonResizableEditPolicy();
d169 4
a172 1
					return result;
d174 2
d177 3
a179 3
				protected org.eclipse.gef.commands.Command getMoveChildrenCommand(org.eclipse.gef.Request request) {
					return null;
				}
d181 6
a186 7
				protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
					return null;
				}
			};
			return lep;
		«ENDIF-»
	}
@


1.4
log
@[207784] - Add variation-points to xpt\diagram\editparts\*.xpt
@
text
@d238 1
a238 1
						((«label.getEditPartQualifiedClassName()») childEditPart).«EXPAND xpt::diagram::editparts::TextAware::labelSetterName FOR childViewmap»(getPrimaryShape().«childViewmap.getterName»());
@


1.3
log
@[207784] - Add variation-points to xpt\diagram\editparts\*.xpt
@
text
@d2 1
a2 1
 * Copyright (c) 2006-2007 Borland Software Corporation
@


1.2
log
@[207784] - Add variation-points to xpt\diagram\editparts\*.xpt
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.1
log
@file NodeEditPart.xpt was initially added on branch R2_0_maintenance.
@
text
@d1 472
@


1.1.2.1
log
@[207784] - Add variation-points to xpt\diagram\editparts\*.xpt
@
text
@a0 472
/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»
«EXTENSION xpt::diagram::editparts::Utils»

«DEFINE extendsListContents FOR gmfgen::GenNode-»
«IF hasBorderItems()»org.eclipse.gmf.runtime.diagram.ui.editparts.AbstractBorderedShapeEditPart«ELSE»org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart«ENDIF-»
«ENDDEFINE»

«DEFINE extendsListContents FOR gmfgen::GenChildSideAffixedNode-»
«IF hasBorderItems()»org.eclipse.gmf.runtime.diagram.ui.editparts.BorderedBorderItemEditPart«ELSE»org.eclipse.gmf.runtime.diagram.ui.editparts.AbstractBorderItemEditPart«ENDIF-»
«ENDDEFINE»

«DEFINE constructor FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	public «editPartClassName»(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
«ENDDEFINE»

«DEFINE createDefaultEditPoliciesBody FOR gmfgen::GenNode-»
	«EXPAND installCreationRolePolicy-»
	super.createDefaultEditPolicies();
	«EXPAND installPrimaryDragEditPolicy-»
	«EXPAND xpt::diagram::editparts::Common::installSemanticEditPolicy-»
	«IF needsGraphicalNodeEditPolicy()-»
		installEditPolicy(org.eclipse.gef.EditPolicy.GRAPHICAL_NODE_ROLE, new «getGraphicalNodeEditPolicyQualifiedClassName()»());
	«ENDIF-»
	«IF !childNodes.isEmpty()-»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.DRAG_DROP_ROLE, new org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy());
	«ENDIF-»
	«EXPAND xpt::diagram::editparts::Common::installCanonicalEditPolicy-»
	installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
	«EXPAND xpt::diagram::editparts::Common::behaviour FOR this-»
	// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
	// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
«ENDDEFINE»

«DEFINE installCreationRolePolicy FOR gmfgen::GenNode-»
	«IF hasChildren() || hasChildrenInListCompartments()-»
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CREATION_ROLE,
				new org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy()«IF hasChildrenInListCompartments()» {
			public org.eclipse.gef.commands.Command getCommand(org.eclipse.gef.Request request) {
				if (understandsRequest(request)) {
					if (request instanceof org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest) {
						org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter adapter =
							((org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest) request).
								getViewAndElementDescriptor().getCreateElementRequestAdapter();
						org.eclipse.gmf.runtime.emf.type.core.IElementType type =
							(org.eclipse.gmf.runtime.emf.type.core.IElementType) adapter.getAdapter(
								org.eclipse.gmf.runtime.emf.type.core.IElementType.class);
						«FOREACH compartments AS compartment-»
							«IF listCompartmentHasChildren(compartment)-»
								«FOREACH compartment.childNodes AS childNode-»
						if (type == «getDiagram().getElementTypesQualifiedClassName()».«childNode.getUniqueIdentifier()») {
							org.eclipse.gef.EditPart compartmentEditPart =
								getChildBySemanticHint(«EXPAND xpt::editor::VisualIDRegistry::getTypeMethodCall FOR getDiagram()»(
									«EXPAND xpt::editor::VisualIDRegistry::visualID FOR compartment»));
							return compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);
						}
								«ENDFOREACH-»
							«ENDIF-»
						«ENDFOREACH-»
					}
					return super.getCommand(request);
				}
				return null;
			}
		}
		«ENDIF»);
	«ENDIF-»
«ENDDEFINE»

«DEFINE installPrimaryDragEditPolicy FOR gmfgen::GenNode»«ENDDEFINE»

«DEFINE installPrimaryDragEditPolicy FOR gmfgen::GenChildSideAffixedNode-»
		installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());
«ENDDEFINE»

«DEFINE createLayoutEditPolicy FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
		«IF gmfgen::ViewmapLayoutType::XY_LAYOUT.value == getLayoutType().value-»
			org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy() {

				protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
					«IF hasBorderItems()-»
						if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
							return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
						}
					«ENDIF-»
					org.eclipse.gef.EditPolicy result = super.createChildEditPolicy(child);
					if (result == null) {
						return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy();
					}
					return result;
				}
			};
			return lep;
		«ELSEIF gmfgen::ViewmapLayoutType::TOOLBAR_LAYOUT.value == getLayoutType().value»
			org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy() {

				protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
					«IF hasBorderItems()-»
						if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
							return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
						}
					«ENDIF-»
					if (child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE) == null) {
						if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart) {
							return new «getDiagram().getTextSelectionEditPolicyQualifiedClassName()»();
						}
					}
					return super.createChildEditPolicy(child);
				}
			};
			return lep;
		«ELSEIF gmfgen::ViewmapLayoutType::FLOW_LAYOUT.value == getLayoutType().value»
			org.eclipse.gef.editpolicies.FlowLayoutEditPolicy lep = new org.eclipse.gef.editpolicies.FlowLayoutEditPolicy() {

				«IF hasBorderItems()-»
					protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
						if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
							return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
						}
						return super.createChildEditPolicy(child);
					}
				«ENDIF-»

				protected org.eclipse.gef.commands.Command createAddCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
					return null;
				}

				protected org.eclipse.gef.commands.Command createMoveChildCommand(org.eclipse.gef.EditPart child, org.eclipse.gef.EditPart after) {
					return null;
				}

				protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
					return null;
				}
			};
			return lep;
		«ELSE-»
			org.eclipse.gef.editpolicies.LayoutEditPolicy lep = new org.eclipse.gef.editpolicies.LayoutEditPolicy() {

				protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
					«IF hasBorderItems()-»
						if (child instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
							return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
						}
					«ENDIF-»
					org.eclipse.gef.EditPolicy result = child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
					if (result == null) {
						result = new org.eclipse.gef.editpolicies.NonResizableEditPolicy();
					}
					return result;
				}

				protected org.eclipse.gef.commands.Command getMoveChildrenCommand(org.eclipse.gef.Request request) {
					return null;
				}

				protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
					return null;
				}
			};
			return lep;
		«ENDIF-»
	}
«ENDDEFINE»

«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::Viewmap-»
	«ERROR "Unknown viewmap: " + this-»
«ENDDEFINE»

«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::FigureViewmap-»
	«LET figureQualifiedClassName == null ? "org.eclipse.draw2d.RectangleFigure" : figureQualifiedClassName AS fqn-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.draw2d.IFigure createNodeShape() {
			return primaryShape = new «fqn»()«IF node.getLayoutType().value == gmfgen::ViewmapLayoutType::XY_LAYOUT.value»{
				protected boolean useLocalCoordinates() {
					return true;
				}
			}«ENDIF»;
		}

		«EXPAND getPrimaryShapeMethod FOR fqn-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::SnippetViewmap-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return «body»;
	}
«ENDDEFINE»

«DEFINE createNodeShape(gmfgen::GenNode node) FOR gmfgen::InnerClassViewmap-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		«className» figure = new «className»();
		«IF node.childNodes.size() > 0 && node.getLayoutType().value == gmfgen::ViewmapLayoutType::XY_LAYOUT.value-»
 		figure.setUseLocalCoordinates(true);
		«ENDIF-»
 		return primaryShape = figure;
	}

	«EXPAND getPrimaryShapeMethod FOR className-»
«ENDDEFINE»

«DEFINE getPrimaryShapeMethod FOR String-»
	«EXPAND xpt::Common::generatedMemberComment»
	public «this» getPrimaryShape() {
		return («this») primaryShape;
	}
«ENDDEFINE»

«DEFINE addFixedChild FOR gmfgen::GenNode-»
	«IF hasFixedChildren()-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
			«FOREACH getInnerFixedLabels() AS label-»
				«LET (gmfgen::ParentAssignedViewmap) label.viewmap AS childViewmap-»
					if (childEditPart instanceof «label.getEditPartQualifiedClassName()») {
						((«label.getEditPartQualifiedClassName()») childEditPart).«EXPAND xpt::diagram::editparts::TextAware::labelSetterName FOR childViewmap»(getPrimaryShape().«childViewmap.getterName»());
						return true;
					}
				«ENDLET-»
			«ENDFOREACH-»
			«FOREACH getPinnedCompartments() AS compartment-»
				«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
					if (childEditPart instanceof «compartment.getEditPartQualifiedClassName()») {
						org.eclipse.draw2d.IFigure pane = getPrimaryShape().«childViewmap.getterName»();
						setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
						pane.add(((«compartment.getEditPartQualifiedClassName()») childEditPart).getFigure());
						return true;
					}	
				«ENDLET-»
			«ENDFOREACH-»
			«FOREACH getSideAffixedChildren() AS child-»
				if (childEditPart instanceof «child.getEditPartQualifiedClassName()») {
					org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator locator = new org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator(getMainFigure(), org.eclipse.draw2d.PositionConstants.«child.preferredSideName»);
					getBorderedFigure().getBorderItemContainer().add(((«child.getEditPartQualifiedClassName()») childEditPart).getFigure(), locator);
					return true;
				}
			«ENDFOREACH-»
			return false;
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE removeFixedChild FOR gmfgen::GenNode-»
	«IF hasFixedChildren()-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
			«REM»ignore labels assuming that they never may be removed«ENDREM»
			«FOREACH getPinnedCompartments() AS compartment-»
				«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
					if (childEditPart instanceof «compartment.getEditPartQualifiedClassName()») {
						org.eclipse.draw2d.IFigure pane = getPrimaryShape().«childViewmap.getterName»();
						setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
						pane.remove(((«compartment.getEditPartQualifiedClassName()») childEditPart).getFigure());
						return true;
					}	
				«ENDLET-»
			«ENDFOREACH-»
			«FOREACH getSideAffixedChildren() AS child-»
				if (childEditPart instanceof «child.getEditPartQualifiedClassName()») {
					getBorderedFigure().getBorderItemContainer().remove(((«child.getEditPartQualifiedClassName()») childEditPart).getFigure());
					return true;
				}
			«ENDFOREACH-»
			return false;
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE addChildVisual FOR gmfgen::GenNode-»
	«IF hasFixedChildren()-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
			if (addFixedChild(childEditPart)) {
				return;
			}
			super.addChildVisual(childEditPart, -1);
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE removeChildVisual FOR gmfgen::GenNode-»
	«IF hasFixedChildren()-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
			if (removeFixedChild(childEditPart)){
				return;
			}
			super.removeChildVisual(childEditPart);
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE getContentPaneFor FOR gmfgen::GenNode-»
	«IF hasFixedChildren()-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.draw2d.IFigure getContentPaneFor(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart) {
			«REM»it is unclear what we should return for labels here«ENDREM»
			«FOREACH getPinnedCompartments() AS compartment-»
				«LET (gmfgen::ParentAssignedViewmap) compartment.viewmap AS childViewmap-»
					if (editPart instanceof «compartment.getEditPartQualifiedClassName()») {
						return getPrimaryShape().«childViewmap.getterName»();
					}	
				«ENDLET-»
			«ENDFOREACH-»
			«FOREACH getSideAffixedChildren() AS child-»
				if (editPart instanceof «child.getEditPartQualifiedClassName()») {
					return getBorderedFigure().getBorderItemContainer();
				}
			«ENDFOREACH-»
			return super.getContentPaneFor(editPart);
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE addBorderItem FOR gmfgen::GenNode-»
	«IF getExternalLabels().size() > 0-»
		«EXPAND xpt::Common::generatedMemberComment»
		protected void addBorderItem(org.eclipse.draw2d.IFigure borderItemContainer, org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart borderItemEditPart) {
			if («FOREACH getExternalLabels() AS label SEPARATOR ' || '»borderItemEditPart instanceof «label.getEditPartQualifiedClassName()»«ENDFOREACH») {
				org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator locator = new org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator(getMainFigure(), org.eclipse.draw2d.PositionConstants.SOUTH);
				locator.setBorderItemOffset(new org.eclipse.draw2d.geometry.Dimension(-20, -20));
				borderItemContainer.add(borderItemEditPart.getFigure(), locator);
			} else {
				super.addBorderItem(borderItemContainer, borderItemEditPart);
			}
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE createNodePlate FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result =
			new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(getMapMode().DPtoLP(«defaultSizeWidth(viewmap, 40)»), getMapMode().DPtoLP(«defaultSizeHeight(viewmap, 40)»));
		«EXPAND setupNodePlate-»
		return result;
	}
«ENDDEFINE»

«DEFINE setupNodePlate FOR gmfgen::GenNode»«ENDDEFINE»

«DEFINE setupNodePlate FOR gmfgen::GenChildSideAffixedNode»
	//FIXME: workaround for #154536
	result.getBounds().setSize(result.getPreferredSize());
«ENDDEFINE»

«DEFINE getPrimaryDragEditPolicy FOR gmfgen::GenNode-»
	«LET getResizeConstraints(viewmap) AS rc-»
		«IF null != primaryDragEditPolicyQualifiedClassName || null != rc-»
			«EXPAND xpt::Common::generatedMemberComment»
			public org.eclipse.gef.EditPolicy getPrimaryDragEditPolicy() {
				«IF null != primaryDragEditPolicyQualifiedClassName-»
					return new «primaryDragEditPolicyQualifiedClassName»();
				«ELSE-»
					org.eclipse.gef.EditPolicy result = super.getPrimaryDragEditPolicy();
					if (result instanceof org.eclipse.gef.editpolicies.ResizableEditPolicy) {
						org.eclipse.gef.editpolicies.ResizableEditPolicy ep = (org.eclipse.gef.editpolicies.ResizableEditPolicy) result;
						ep.setResizeDirections(
							«IF rc.resizeHandleNames.size() > 0-»
								«FOREACH rc.resizeHandleNames AS name SEPARATOR ' | '»org.eclipse.draw2d.PositionConstants.«name»«ENDFOREACH-»
							«ELSE»org.eclipse.draw2d.PositionConstants.NONE«ENDIF»);
					}
					return result;
				«ENDIF-»
			}
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE createFigure FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment(
		"Creates figure for this edit part.\n" +
		"\n" +
		"Body of this method does not depend on settings in generation model\n" +
		"so you may safely remove <i>generated</i> tag and modify it.\n"
	)»
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure create«IF hasBorderItems()»Main«ELSE»Node«ENDIF»Figure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}
«ENDDEFINE»

«DEFINE setupContentPane FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment(
		"Default implementation treats passed figure as content pane.\n" +
		"Respects layout one may have set for generated figure.\n" +
		"@@param nodeShape instance of generated figure class"
	)»
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
		«IF !childNodes.isEmpty() || !compartments.isEmpty() || !labels.without(labels.typeSelect(GenExternalNodeLabel)).isEmpty()-»
			if (nodeShape.getLayoutManager() == null) {
				«IF getLayoutType().value == gmfgen::ViewmapLayoutType::XY_LAYOUT.value-»
					nodeShape.setLayoutManager(new org.eclipse.draw2d.FreeformLayout() {

						public Object getConstraint(org.eclipse.draw2d.IFigure figure) {
							Object result = constraints.get(figure);
							if (result == null) {
								result = new org.eclipse.draw2d.geometry.Rectangle(0, 0, -1, -1);
							}
							return result;
						}
					});
				«ELSE-»
					org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout layout =new org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout();
					layout.setSpacing(getMapMode().DPtoLP(5));
					nodeShape.setLayoutManager(layout);
				«ENDIF-»
			}
		«ENDIF-»
		return nodeShape; // use nodeShape itself as contentPane
	}
«ENDDEFINE»

«DEFINE getContentPane FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}
«ENDDEFINE»

«DEFINE getPrimaryChildEditPart FOR gmfgen::GenNode-»
	«IF !labels.isEmpty()-»
		«EXPAND xpt::Common::generatedMemberComment»
		public org.eclipse.gef.EditPart getPrimaryChildEditPart() {
			return getChildBySemanticHint(«EXPAND xpt::editor::VisualIDRegistry::getTypeMethodCall FOR getDiagram()»(«EXPAND xpt::editor::VisualIDRegistry::visualID FOR (GenLabel) labels.toList().first()»));
		}
	«ENDIF-»
«ENDDEFINE»

«DEFINE handleNotificationEventBody FOR gmfgen::GenTopLevelNode-»
	if (event.getNotifier() == getModel() && org.eclipse.emf.ecore.EcorePackage.eINSTANCE.getEModelElement_EAnnotations().equals(event.getFeature())) {
		handleMajorSemanticChange();
	} else {
		super.handleNotificationEvent(event);
	}
«ENDDEFINE»

«DEFINE innerClassDeclaration FOR gmfgen::Viewmap»
«ENDDEFINE»

«DEFINE innerClassDeclaration FOR gmfgen::InnerClassViewmap»
	«classBody»
«ENDDEFINE»@


1.1.2.2
log
@[207784] - Add variation-points to xpt\diagram\editparts\*.xpt
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2007 Borland Software Corporation
@


