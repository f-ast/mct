head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081015-1925:1.7
	v20081008-1925:1.6
	v20081001-1925:1.6
	v20080930-1130:1.6
	v20080926-1245:1.6
	v20080924-1925:1.6
	v20080917-1925:1.6
	v20080911-1728:1.6
	v20080910-1520:1.6
	v20080903-1520:1.6
	v20080827-1520:1.6
	v20080813-1520:1.3
	v20080806-1520:1.3
	v20080722-1827:1.3
	v20080718-1731:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080603-1553:1.3
	v20080528-1052:1.3
	v20080521:1.3
	v20080516-1543:1.3
	v20080516-1143:1.3
	v20080512-1200:1.3
	v20080508-2000:1.3
	v20080507-1326:1.3
	v20080503-1740:1.2
	v20080501-1739:1.2
	v20080425-1959:1.2
	v20080417-1610:1.2
	v20080411-0411:1.2
	v20080404-1111:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20080207-0207:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071112-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070928-0000:1.2
	v20070921-0000:1.2
	v20070915-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.1
	v20070614-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2008.10.14.18.48.57;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	7f5648f4e9984567;

1.6
date	2008.08.27.12.27.19;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	e6d48b548264567;

1.5
date	2008.08.21.15.13.59;	author dstadnik;	state Exp;
branches;
next	1.4;
commitid	6aad48ad86344567;

1.4
date	2008.08.21.12.11.32;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	469b48ad5b6c4567;

1.3
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	39124821b4de4567;

1.2
date	2007.06.19.09.01.10;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	1b846779b554567;

1.1
date	2007.06.12.23.41.58;	author dstadnik;	state Exp;
branches;
next	;
commitid	2e6e466f2f424567;


desc
@@


1.7
log
@refactoring - move conditions out of actuial implementation templates
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Michael Golubev (Borland) - #244970 (GenChildLabelNode can't be link's source/target)
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»

«EXTENSION xpt::diagram::editparts::Utils»
«EXTENSION xpt::diagram::Utils»
«EXTENSION xpt::providers::i18n»

«DEFINE ModelingAssistantProvider FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «modelingAssistantProviderClassName»
		extends org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider {

	«EXPAND getTypesForPopupBar-»

	«EXPAND getRelTypesOnSource-»

	«EXPAND getRelTypesOnTarget-»

	«EXPAND getRelTypesOnSourceAndTarget-»

	«EXPAND getTypesForSource-»

	«EXPAND getTypesForTarget-»

	«EXPAND selectExistingElementForSource-»

	«EXPAND selectExistingElementForTarget-»

	«EXPAND selectExistingElement-»

	«EXPAND isApplicableElement-»

	«EXPAND selectElement-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE getTypesForPopupBar FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public java.util.List getTypesForPopupBar(org.eclipse.core.runtime.IAdaptable host) {
		org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart =
				(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) host.getAdapter(
						org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart.class);
		«FOREACH getAllContainers() AS container-»
			«IF container.getAssistantNodes().size() > 0-»
		if (editPart instanceof «container.getEditPartQualifiedClassName()») {
			java.util.List types = new java.util.ArrayList();
				«FOREACH container.getAssistantNodes() AS node-»
			types.add(«getElementTypesQualifiedClassName()».«node.getUniqueIdentifier()»);
				«ENDFOREACH-»
			return types;
		}
			«ENDIF-»
		«ENDFOREACH-»
		return java.util.Collections.EMPTY_LIST;
	}
«ENDDEFINE»

«DEFINE getRelTypesOnSource FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public java.util.List getRelTypesOnSource(org.eclipse.core.runtime.IAdaptable source) {
		org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart sourceEditPart =
				(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) source.getAdapter(
						org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart.class);
		«FOREACH getNodes() AS source-»
			«IF getAssistantOutgoingLinks(source).size() > 0-»
		if (sourceEditPart instanceof «source.getEditPartQualifiedClassName()») {
			return ((«source.getEditPartQualifiedClassName()») sourceEditPart).getMARelTypesOnSource();
		}
			«ENDIF-»
		«ENDFOREACH-»
		return java.util.Collections.EMPTY_LIST;
	}
«ENDDEFINE»

«DEFINE getRelTypesOnTarget FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public java.util.List getRelTypesOnTarget(org.eclipse.core.runtime.IAdaptable target) {
		org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart targetEditPart =
				(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) target.getAdapter(
						org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart.class);
		«FOREACH getNodes() AS target-»
			«IF getAssistantIncomingLinks(target).size() > 0-»
		if (targetEditPart instanceof «target.getEditPartQualifiedClassName()») {
			return ((«target.getEditPartQualifiedClassName()») targetEditPart).getMARelTypesOnTarget();
		}
			«ENDIF-»
		«ENDFOREACH-»
		return java.util.Collections.EMPTY_LIST;
	}
«ENDDEFINE»

«DEFINE getRelTypesOnSourceAndTarget FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public java.util.List getRelTypesOnSourceAndTarget(
			org.eclipse.core.runtime.IAdaptable source, org.eclipse.core.runtime.IAdaptable target) {
		org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart sourceEditPart =
				(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) source.getAdapter(
						org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart.class);
		org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart targetEditPart =
				(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) target.getAdapter(
						org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart.class);
		«FOREACH getNodes() AS source-»
			«IF getAssistantOutgoingLinks(source).size() > 0-»
		if (sourceEditPart instanceof «source.getEditPartQualifiedClassName()») {
			return ((«source.getEditPartQualifiedClassName()») sourceEditPart).getMARelTypesOnSourceAndTarget(targetEditPart);
		}
			«ENDIF-»
		«ENDFOREACH-»
		return java.util.Collections.EMPTY_LIST;
	}
«ENDDEFINE»

«DEFINE getTypesForSource FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public java.util.List getTypesForSource(org.eclipse.core.runtime.IAdaptable target,
			org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart targetEditPart =
				(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) target.getAdapter(
						org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart.class);
		«FOREACH getNodes() AS target-»
			«IF getAssistantIncomingLinks(target).size() > 0-»
		if (targetEditPart instanceof «target.getEditPartQualifiedClassName()») {
			return ((«target.getEditPartQualifiedClassName()») targetEditPart).getMATypesForSource(relationshipType);
		}
			«ENDIF-»
		«ENDFOREACH-»
		return java.util.Collections.EMPTY_LIST;
	}
«ENDDEFINE»

«DEFINE getTypesForTarget FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public java.util.List getTypesForTarget(org.eclipse.core.runtime.IAdaptable source,
			org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart sourceEditPart =
				(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) source.getAdapter(
						org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart.class);
		«FOREACH getNodes() AS source-»
			«IF getAssistantOutgoingLinks(source).size() > 0-»
		if (sourceEditPart instanceof «source.getEditPartQualifiedClassName()») {
			return ((«source.getEditPartQualifiedClassName()») sourceEditPart).getMATypesForTarget(relationshipType);
		}
			«ENDIF-»
		«ENDFOREACH-»
		return java.util.Collections.EMPTY_LIST;
	}
«ENDDEFINE»

«DEFINE selectExistingElementForSource FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.emf.ecore.EObject selectExistingElementForSource(
			org.eclipse.core.runtime.IAdaptable target,
			org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		return selectExistingElement(target, getTypesForSource(target, relationshipType));
	}
«ENDDEFINE»

«DEFINE selectExistingElementForTarget FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.emf.ecore.EObject selectExistingElementForTarget(
			org.eclipse.core.runtime.IAdaptable source,
			org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		return selectExistingElement(source, getTypesForTarget(source, relationshipType));
	}
«ENDDEFINE»

«DEFINE selectExistingElement FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EObject selectExistingElement(
			org.eclipse.core.runtime.IAdaptable host, java.util.Collection types) {
		if (types.isEmpty()) {
			return null;
		}
		org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart =
				(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) host.getAdapter(
						org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart.class);
		if (editPart == null) {
			return null;
		}
		org.eclipse.gmf.runtime.notation.Diagram diagram =
				(org.eclipse.gmf.runtime.notation.Diagram) editPart.getRoot().getContents().getModel();
		java.util.Collection elements = new java.util.HashSet();
		for (java.util.Iterator it = diagram.getElement().eAllContents(); it.hasNext();) {
			org.eclipse.emf.ecore.EObject element = (org.eclipse.emf.ecore.EObject) it.next();
			if (isApplicableElement(element, types)) {
				elements.add(element);
			}
		}
		if (elements.isEmpty()) {
			return null;
		}
		return selectElement((org.eclipse.emf.ecore.EObject[]) elements.toArray(
				new org.eclipse.emf.ecore.EObject[elements.size()]));
	}
«ENDDEFINE»

«DEFINE isApplicableElement FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean isApplicableElement(org.eclipse.emf.ecore.EObject element, java.util.Collection types) {
		org.eclipse.gmf.runtime.emf.type.core.IElementType type =
				org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry.getInstance().getElementType(element);
		return types.contains(type);
	}
«ENDDEFINE»

«DEFINE selectElement FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EObject selectElement(org.eclipse.emf.ecore.EObject[] elements) {
		org.eclipse.swt.widgets.Shell shell = org.eclipse.swt.widgets.Display.getCurrent().getActiveShell();
		org.eclipse.jface.viewers.ILabelProvider labelProvider =
			new org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider(
				«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemProvidersAdapterFactory());
		org.eclipse.ui.dialogs.ElementListSelectionDialog dialog =
				new org.eclipse.ui.dialogs.ElementListSelectionDialog(shell, labelProvider);
		dialog.setMessage(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForModelingAssistantProvider().messageKey()) FOR editorGen»);
		dialog.setTitle(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForModelingAssistantProvider().titleKey()) FOR editorGen»);
		dialog.setMultipleSelection(false);
		dialog.setElements(elements);
		org.eclipse.emf.ecore.EObject selected = null;
		if (dialog.open() == org.eclipse.jface.window.Window.OK) {
			selected = (org.eclipse.emf.ecore.EObject) dialog.getFirstResult();
		}
		return selected;
	}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram-»«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForModelingAssistantProvider().titleKey(), "Select domain model element")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForModelingAssistantProvider().messageKey(), "Available domain model elements:")-»
«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForModelingAssistantProvider().titleKey())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForModelingAssistantProvider().messageKey())-»
«ENDDEFINE»
@


1.6
log
@[244970] - Don't generate supporting code (updater/editpolicies/model-assistant) for links to/from pure label based elements
@
text
@d16 1
@


1.5
log
@[241070] restructure MA provider
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d11 1
d80 1
a80 1
			«IF getOutgoingLinks(source).size() > 0-»
d97 1
a97 1
			«IF getIncomingLinks(target).size() > 0-»
d118 1
a118 1
			«IF getOutgoingLinks(source).size() > 0-»
d136 1
a136 1
			«IF getIncomingLinks(target).size() > 0-»
d154 1
a154 1
			«IF getOutgoingLinks(source).size() > 0-»
@


1.4
log
@[244725] distribute MA code over editparts
@
text
@d26 26
d70 1
d72 1
d87 1
d89 1
d104 1
d106 1
d125 1
d127 1
d143 1
d145 1
d161 1
d163 1
d170 1
d172 1
d179 1
d181 1
d209 1
d211 1
d218 1
d220 1
a238 2
	«EXPAND additions-»
}
@


1.3
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d53 1
a53 5
			java.util.List types = new java.util.ArrayList();
				«FOREACH getOutgoingLinks(source) AS link-»
			types.add(«getElementTypesQualifiedClassName()».«link.getUniqueIdentifier()»);
				«ENDFOREACH-»
			return types;
d68 1
a68 5
			java.util.List types = new java.util.ArrayList();
				«FOREACH getIncomingLinks(target) AS link-»
			types.add(«getElementTypesQualifiedClassName()».«link.getUniqueIdentifier()»);
				«ENDFOREACH-»
			return types;
d87 1
a87 9
			java.util.List types = new java.util.ArrayList();
				«FOREACH getOutgoingLinks(source) AS link-»
					«FOREACH link.getAssistantTargets() AS target-»
			if (targetEditPart instanceof «target.getEditPartQualifiedClassName()») {
				types.add(«getElementTypesQualifiedClassName()».«link.getUniqueIdentifier()»);
			}
					«ENDFOREACH-»
				«ENDFOREACH-»
			return types;
d103 1
a103 9
			java.util.List types = new java.util.ArrayList();
				«FOREACH getIncomingLinks(target) AS link-»
					«FOREACH link.getAssistantSources() AS source-»
			if (relationshipType == «getElementTypesQualifiedClassName()».«link.getUniqueIdentifier()») {
				types.add(«getElementTypesQualifiedClassName()».«source.getUniqueIdentifier()»);
			}
					«ENDFOREACH-»
				«ENDFOREACH-»
			return types;
d119 1
a119 9
			java.util.List types = new java.util.ArrayList();
				«FOREACH getOutgoingLinks(source) AS link-»
					«FOREACH link.getAssistantTargets() AS target-»
			if (relationshipType == «getElementTypesQualifiedClassName()».«link.getUniqueIdentifier()») {
				types.add(«getElementTypesQualifiedClassName()».«target.getUniqueIdentifier()»);
			}
					«ENDFOREACH-»
				«ENDFOREACH-»
			return types;
@


1.2
log
@[139733] akarjakina - i18n support
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.1
log
@[192029] Rewrite modeling assistant provider in xpand
@
text
@d14 1
d16 1
d215 2
a216 2
		dialog.setMessage("Available domain model elements:");
		dialog.setTitle("Select domain model element");
d230 10
@

