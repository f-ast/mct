head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080930-1130:1.5
	v20080926-1245:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.4
	v20080813-1520:1.3
	v20080806-1520:1.3
	v20080722-1827:1.3
	v20080718-1731:1.3
	v20080716-1600:1.2.2.1
	v20080716-1642:1.3
	R2_1_maintenance:1.2.0.2
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080603-1553:1.2
	v20080528-1052:1.2
	v20080521:1.2
	v20080516-1543:1.2
	v20080516-1143:1.2
	v20080512-1200:1.2
	v20080508-2000:1.2
	v20080507-1326:1.2
	v20080503-1740:1.1
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080417-1610:1.1
	v20080411-0411:1.1
	v20080404-1111:1.1
	v20080322-0000:1.1
	v20080222-1200:1.1
	v20080215-1500:1.1
	v20080207-0207:1.1
	v20071222-1111:1.1
	v20071214-1111:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20071112-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070928-0000:1.1
	v20070921-0000:1.1
	v20070915-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070614-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2008.08.29.16.48.17;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	626748b828504567;

1.4
date	2008.08.26.20.52.27;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	3a7648b46d064567;

1.3
date	2008.07.09.19.18.20;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	2aa048750efc4567;

1.2
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches
	1.2.2.1;
next	1.1;
commitid	39124821b4de4567;

1.1
date	2007.06.12.12.20.13;	author dstadnik;	state Exp;
branches;
next	;
commitid	5d34466e8f7c4567;

1.2.2.1
date	2008.07.09.19.30.24;	author atikhomirov;	state Exp;
branches;
next	;
commitid	340c487511cf4567;


desc
@@


1.5
log
@[235113] alternative parser access, handle cases with simplistic diagrams, with no labels
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::diagram::Utils»

«DEFINE extensions FOR gmfgen::GenDiagram-»

   <extension point="org.eclipse.gmf.runtime.diagram.core.viewProviders">
      «EXPAND xpt::Common::xmlGeneratedTag»
      <viewProvider class="«getNotationViewProviderQualifiedClassName()»">
         <Priority name="«notationViewProviderPriority»"/>
         <context viewClass="org.eclipse.gmf.runtime.notation.Diagram" semanticHints="«editorGen.modelID»"/>
         <context viewClass="org.eclipse.gmf.runtime.notation.Node" semanticHints=""/>
         <context viewClass="org.eclipse.gmf.runtime.notation.Edge" semanticHints=""/>
      </viewProvider>
   </extension>

   <extension point="org.eclipse.gmf.runtime.diagram.ui.editpartProviders">
      «EXPAND xpt::Common::xmlGeneratedTag»
      <editpartProvider class="«getEditPartProviderQualifiedClassName()»">
         <Priority name="«editPartProviderPriority»"/>
      </editpartProvider>
   </extension>

   <extension point="org.eclipse.gmf.runtime.emf.ui.modelingAssistantProviders">
      «EXPAND xpt::Common::xmlGeneratedTag»
      <modelingAssistantProvider class="«getModelingAssistantProviderQualifiedClassName()»">
         <Priority name="«modelingAssistantProviderPriority»"/>
      </modelingAssistantProvider>
   </extension>

   <extension point="org.eclipse.gmf.runtime.common.ui.services.iconProviders">
      «EXPAND xpt::Common::xmlGeneratedTag»
      <IconProvider class="«getIconProviderQualifiedClassName()»">
         <Priority name="«iconProviderPriority»"/>
      </IconProvider>
   </extension>
«IF editorGen.labelParsers != null && editorGen.labelParsers.extensibleViaService»
   <extension point="org.eclipse.gmf.runtime.common.ui.services.parserProviders">
      «EXPAND xpt::Common::xmlGeneratedTag»
      <ParserProvider class="«editorGen.labelParsers.getQualifiedClassName()»">
         <Priority name="«editorGen.labelParsers.providerPriority»"/>
      </ParserProvider>
   </extension>
«ENDIF-»
«IF generateShortcutIcon()-»

   <extension point="org.eclipse.gmf.runtime.diagram.ui.decoratorProviders">
      «EXPAND xpt::Common::xmlGeneratedTag»
      <decoratorProvider class="«getShortcutsDecoratorProviderQualifiedClassName()»">
         <Priority name="«shortcutsDecoratorProviderPriority»"/>
      </decoratorProvider>
   </extension>
«ENDIF-»

   <extension point="org.eclipse.gmf.runtime.emf.type.core.elementTypes">
      «EXPAND xpt::Common::xmlGeneratedTag»
«FOREACH getElements() AS e-»
«EXPAND elementTypeSafe FOR e.elementType-»
«ENDFOREACH-»
   </extension>

   <extension point="org.eclipse.gmf.runtime.emf.type.core.elementTypeBindings">
      «EXPAND xpt::Common::xmlGeneratedTag»
      <clientContext id="«editorGen.plugin.iD».TypeContext">
         <enablement>
            <test
               property="org.eclipse.gmf.runtime.emf.core.editingDomain"
               value="«editingDomainID»"/>
         </enablement>
      </clientContext> 
      <binding context="«editorGen.plugin.iD».TypeContext">
«FOREACH getElements() AS e-»
         <elementType ref="«e.elementType.uniqueIdentifier»"/>
«ENDFOREACH-»
         <advice ref="org.eclipse.gmf.runtime.diagram.core.advice.notationDepdendents"/>
      </binding>
   </extension>
«ENDDEFINE»

«DEFINE elementTypeSafe FOR gmfgen::ElementType-»
«IF !definedExternally-»
«EXPAND elementType-»
«ENDIF-»
«ENDDEFINE»

«DEFINE elementType FOR gmfgen::ElementType»
«ERROR "Unknown element type: " + this»
«ENDDEFINE»

«DEFINE elementType FOR gmfgen::MetamodelType-»
      <metamodel nsURI="«getMetaClass().genPackage.ecorePackage.nsURI»">
         <metamodelType
               id="«uniqueIdentifier»"
«IF null != displayName-»
               name="%metatype.name.«diagramElement.getUniqueIdentifier()»"
«ENDIF-»
               kind="org.eclipse.gmf.runtime.emf.type.core.IHintedType"
               eclass="«getMetaClass().ecoreClass.name»"
               edithelper="«getEditHelperQualifiedClassName()»">
            <param name="semanticHint" value="«diagramElement.visualID»"/>
         </metamodelType>
      </metamodel>
«ENDDEFINE»

«DEFINE elementType FOR gmfgen::SpecializationType-»
«IF null == getMetamodelClass()-»
«EXPAND specializationType-»
«ELSE-»
      <metamodel nsURI="«getMetamodelClass().genPackage.ecorePackage.nsURI»">
«EXPAND specializationType-»
      </metamodel>
«ENDIF-»
«ENDDEFINE»

«DEFINE specializationType FOR gmfgen::SpecializationType-»
         <specializationType
               id="«uniqueIdentifier»"
«IF null != displayName-»
               name="%metatype.name.«diagramElement.getUniqueIdentifier()»"
«ENDIF-»
               kind="org.eclipse.gmf.runtime.emf.type.core.IHintedType"«IF editHelperAdviceClassName != null»
               edithelperadvice="«getEditHelperAdviceQualifiedClassName()»"«ENDIF»>
            <specializes id="«null == metamodelType ? "org.eclipse.gmf.runtime.emf.type.core.null" : metamodelType.uniqueIdentifier»"/>
            <param name="semanticHint" value="«diagramElement.visualID»"/>
         </specializationType>
«ENDDEFINE»

«DEFINE elementType FOR gmfgen::NotationType-»
      <specializationType
            id="«uniqueIdentifier»"
«IF null != displayName-»
            name="%metatype.name.«diagramElement.getUniqueIdentifier()»"
«ENDIF-»
            kind="org.eclipse.gmf.runtime.diagram.ui.util.INotationType">
         <specializes id="org.eclipse.gmf.runtime.emf.type.core.null"/>
         <param name="semanticHint" value="«diagramElement.visualID»"/>
      </specializationType>
«ENDDEFINE»

«DEFINE i18n FOR gmfgen::GenDiagram-»

# Providers
«EXPAND internal_i18n FOREACH getElements().elementType»
«ENDDEFINE»

«DEFINE internal_i18n FOR gmfgen::ElementType-»
«IF null != displayName && !definedExternally»metatype.name.«diagramElement.getUniqueIdentifier()»=«displayName»«ENDIF»
«ENDDEFINE»
@


1.4
log
@[235113] alternative parser access, step 2: use dedicated GenParsers entry, along with exposing parts of template as API
@
text
@d50 1
a50 1
«IF editorGen.labelParsers.extensibleViaService»
@


1.3
log
@[240218] unique client context and parameters in the request only if there are chances for EditHelper to clean them eventually.
@
text
@d50 1
a50 1

d53 2
a54 2
      <ParserProvider class="«getParserProviderQualifiedClassName()»">
         <Priority name="«parserProviderPriority»"/>
d57 1
@


1.2
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d76 1
a76 1
      <clientContext id="«editorGen.modelID»ClientContext">
d83 1
a83 1
      <binding context="«editorGen.modelID»ClientContext">
@


1.2.2.1
log
@[240218] merge from HEAD: unique client context and parameters in the request only if there are chances for EditHelper to clean them eventually.
@
text
@d2 1
a2 1
 * Copyright (c) 2007, 2008 Borland Software Corporation
d76 1
a76 1
      <clientContext id="«editorGen.plugin.iD».TypeContext">
d83 1
a83 1
      <binding context="«editorGen.plugin.iD».TypeContext">
@


1.1
log
@move providers out of diagram folder
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@

