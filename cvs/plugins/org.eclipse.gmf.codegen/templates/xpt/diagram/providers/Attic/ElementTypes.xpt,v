head	1.11;
access;
symbols
	v20081022-1925:1.11
	v20081015-1925:1.11
	v20081008-1925:1.11
	v20081001-1925:1.11
	v20080924-1925:1.11
	v20080917-1925:1.11
	v20080911-1728:1.11
	v20080910-1520:1.11
	v20080903-1520:1.11
	v20080827-1520:1.11
	v20080813-1520:1.11
	v20080806-1520:1.11
	v20070608-1300:1.10
	v20070605-1400:1.10
	v20070601-1400:1.10
	v20070525-1500:1.10
	v20070520-1200:1.10
	v20070518-1300:1.9
	v20070504-1000:1.9
	v20070427-0600:1.9
	v20070420-1000:1.9
	v20070413-1300:1.9
	v20070405-1100:1.9
	v20070403-1500:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070307-0700:1.8
	v20070301-1200:1.8
	v20070228-2000:1.7
	v20070221-1500:1.5
	v20070208-1800:1.5
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2007.06.12.12.20.13;	author dstadnik;	state dead;
branches;
next	1.10;
commitid	5d34466e8f7c4567;

1.10
date	2007.05.18.21.17.19;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	2591464e17d14567;

1.9
date	2007.04.04.11.18.20;	author bblajer;	state Exp;
branches;
next	1.8;
commitid	2664461389794567;

1.8
date	2007.03.01.12.52.44;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	5fd445e6cc9c4567;

1.7
date	2007.02.28.18.21.05;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	150345e5c8114567;

1.6
date	2007.02.28.17.36.03;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	1b9d45e5bd834567;

1.5
date	2007.01.30.16.42.29;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	4e0e45bf75734567;

1.4
date	2007.01.26.18.54.45;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	641a45ba4e744567;

1.3
date	2007.01.25.16.57.54;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	271945b8e1904567;

1.2
date	2006.12.20.15.44.42;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	609545895a6a4567;

1.1
date	2006.12.20.02.16.53;	author dstadnik;	state Exp;
branches;
next	;
commitid	1ea745889d114567;


desc
@@


1.11
log
@move providers out of diagram folder
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::diagram::Utils»
«EXTENSION xpt::GenModelUtils»

«DEFINE ElementTypes FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «elementTypesClassName» extends ElementInitializers {

	«EXPAND constructor-»
	
	«EXPAND attributes-»
	
	«EXPAND elementTypeField FOREACH getElements()-»
	
	«EXPAND getImageRegistry-»

	«EXPAND getImageRegistryKey-»

	«EXPAND getProvidedImageDescriptor-»

	«EXPAND getNamedElementImageDescriptor-»

	«EXPAND getNamedElementImage-»

	«EXPAND getAdaptableImageDescriptor-»

	«EXPAND getAdaptableImage-»

	«EXPAND getElement-»

	«EXPAND getElementType-»

	«EXPAND isKnownElementType-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE constructor FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private «elementTypesClassName»() {
}
«ENDDEFINE»

«DEFINE attributes FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private static java.util.Map elements;

	«EXPAND xpt::Common::generatedMemberComment»
private static org.eclipse.jface.resource.ImageRegistry imageRegistry;

	«EXPAND xpt::Common::generatedMemberComment»
private static java.util.Set KNOWN_ELEMENT_TYPES;
«ENDDEFINE»


«DEFINE getImageRegistry FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private static org.eclipse.jface.resource.ImageRegistry getImageRegistry() {
	if (imageRegistry == null) {
		imageRegistry = new org.eclipse.jface.resource.ImageRegistry();
	}
	return imageRegistry;
}
«ENDDEFINE»

«DEFINE getImageRegistryKey FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private static String getImageRegistryKey(org.eclipse.emf.ecore.ENamedElement element) {
	return element.getName();
}
«ENDDEFINE»

«DEFINE getProvidedImageDescriptor FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private static org.eclipse.jface.resource.ImageDescriptor getProvidedImageDescriptor(org.eclipse.emf.ecore.ENamedElement element) {
	if (element instanceof org.eclipse.emf.ecore.EStructuralFeature) {
		org.eclipse.emf.ecore.EStructuralFeature feature = ((org.eclipse.emf.ecore.EStructuralFeature) element);
		org.eclipse.emf.ecore.EClass eContainingClass = feature.getEContainingClass();
		org.eclipse.emf.ecore.EClassifier eType = feature.getEType();
		if (eContainingClass != null && !eContainingClass.isAbstract()){
			element = eContainingClass;
		} else if (eType instanceof org.eclipse.emf.ecore.EClass && !((org.eclipse.emf.ecore.EClass)eType).isAbstract()){
			element = eType;
		}
	}
	if (element instanceof org.eclipse.emf.ecore.EClass) {
		org.eclipse.emf.ecore.EClass eClass = (org.eclipse.emf.ecore.EClass) element;
		if (!eClass.isAbstract()) {
			return «editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemImageDescriptor(
				eClass.getEPackage().getEFactoryInstance().create(eClass));
		}
	}
	// TODO : support structural features
	return null;
}
«ENDDEFINE»

«DEFINE getNamedElementImageDescriptor FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(org.eclipse.emf.ecore.ENamedElement element) {
	String key = getImageRegistryKey(element);
	org.eclipse.jface.resource.ImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);
	if (imageDescriptor == null) {
		«EXPAND loadProvidedImageDescriptor-»
	}
	return imageDescriptor;
}
«ENDDEFINE»

«DEFINE loadProvidedImageDescriptor FOR gmfgen::GenDiagram-»
imageDescriptor = getProvidedImageDescriptor(element);
if (imageDescriptor == null) {
	imageDescriptor = org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor();
}
getImageRegistry().put(key, imageDescriptor);
«ENDDEFINE»

«DEFINE getNamedElementImage FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static org.eclipse.swt.graphics.Image getImage(org.eclipse.emf.ecore.ENamedElement element) {
	String key = getImageRegistryKey(element);
	org.eclipse.swt.graphics.Image image = getImageRegistry().get(key);
	if (image == null) {
		org.eclipse.jface.resource.ImageDescriptor «EXPAND loadProvidedImageDescriptor-»
		image = getImageRegistry().get(key);
	}
	return image;
}
«ENDDEFINE»

«DEFINE getAdaptableImageDescriptor FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(org.eclipse.core.runtime.IAdaptable hint) {
	«EXPAND getNamedElement-»
	return getImageDescriptor(element);
}
«ENDDEFINE»

«DEFINE getNamedElement FOR gmfgen::GenDiagram-»
org.eclipse.emf.ecore.ENamedElement element = getElement(hint);
if (element == null) {
	return null;
}
«ENDDEFINE»

«DEFINE getAdaptableImage FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static org.eclipse.swt.graphics.Image getImage(org.eclipse.core.runtime.IAdaptable hint) {
	«EXPAND getNamedElement-»
	return getImage(element);
}
«ENDDEFINE»

«DEFINE getElement FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment("Returns \'type\' of the ecore object associated with the hint.\n")»
public static org.eclipse.emf.ecore.ENamedElement getElement(org.eclipse.core.runtime.IAdaptable hint) {
	Object type = hint.getAdapter(org.eclipse.gmf.runtime.emf.type.core.IElementType.class);
	if (elements == null) {
		elements = new java.util.IdentityHashMap();
		«EXPAND bindUniqueIdentifierToNamedElement(getUniqueIdentifier()) FOR domainDiagramElement-»
		«FOREACH getNodes() AS node-»
			«EXPAND bindUniqueIdentifierToNamedElement(node.getUniqueIdentifier()) FOR node.modelFacet-»
		«ENDFOREACH-»
		«FOREACH links AS link-»
			«EXPAND bindUniqueIdentifierToNamedElement(link.getUniqueIdentifier()) FOR link.modelFacet-»
		«ENDFOREACH-»
	}
	return (org.eclipse.emf.ecore.ENamedElement) elements.get(type);
}
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElement(String id) FOR genmodel::GenClass»
	elements.put(«id», «getQualifiedPackageInterfaceName(genPackage)».eINSTANCE.get«getClassifierAccessorName()»());
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElement(String id) FOR gmfgen::ModelFacet»
	«ERROR "Unsupported model facet: " + this-»
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElement(String id) FOR gmfgen::TypeModelFacet»
	«EXPAND bindUniqueIdentifierToNamedElement(id) FOR metaClass-»
«ENDDEFINE»

«DEFINE bindUniqueIdentifierToNamedElement(String id) FOR gmfgen::FeatureLinkModelFacet»
	elements.put(«id», «EXPAND xpt::Common::metaFeatureAccessor FOR metaFeature»);
«ENDDEFINE»

«DEFINE elementTypeField FOR gmfgen::GenCommonBase-»
	«IF null != elementType-»
		«EXPAND xpt::Common::generatedMemberComment»
public static final org.eclipse.gmf.runtime.emf.type.core.IElementType «getUniqueIdentifier()» = getElementType("«elementType.uniqueIdentifier»"); «EXPAND xpt::Common::nonNLS»
	«ENDIF-»
«ENDDEFINE»

«DEFINE getElementType FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private static org.eclipse.gmf.runtime.emf.type.core.IElementType getElementType(String id) {
	return org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry.getInstance().getType(id);
}
«ENDDEFINE»

«DEFINE isKnownElementType FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public static boolean isKnownElementType(org.eclipse.gmf.runtime.emf.type.core.IElementType elementType) {
	if (KNOWN_ELEMENT_TYPES == null) {
		KNOWN_ELEMENT_TYPES = new java.util.HashSet();
		«EXPAND addKnownElementType FOREACH getElements()-»
	}
	return KNOWN_ELEMENT_TYPES.contains(elementType);
}
«ENDDEFINE»

«DEFINE addKnownElementType FOR gmfgen::GenCommonBase-»
	«IF null != elementType-»
KNOWN_ELEMENT_TYPES.add(«getUniqueIdentifier()»);
	«ENDIF-»
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram-»
«ENDDEFINE»@


1.10
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@@


1.9
log
@User should be able to configure whether NON-NLS markers are shown or not
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.8
log
@Correcting template.
@
text
@d209 1
a209 1
public static final org.eclipse.gmf.runtime.emf.type.core.IElementType «getUniqueIdentifier()» = getElementType("«elementType.uniqueIdentifier»"); //$NON-NLS-1$
@


1.7
log
@Template refactored.
@
text
@d237 1
a237 1
«DEFINE additions FOR gmfgen::GenCommonBase-»
@


1.6
log
@Template refactored.
@
text
@d122 1
a122 5
		imageDescriptor = getProvidedImageDescriptor(element);
		if (imageDescriptor == null) {
			imageDescriptor = org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor();
		}
		getImageRegistry().put(key, imageDescriptor);
d128 8
d142 1
a142 5
		org.eclipse.jface.resource.ImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);
		if (imageDescriptor == null) {
			imageDescriptor = org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor();
		}
		getImageRegistry().put(key, imageDescriptor);
d152 1
a152 4
	org.eclipse.emf.ecore.ENamedElement element = getElement(hint);
	if (element == null) {
		return null;
	}
d157 7
d167 1
a167 4
	org.eclipse.emf.ecore.ENamedElement element = getElement(hint);
	if (element == null) {
		return null;
	}
@


1.5
log
@All the @@generated comments moved into a separate "define" statement.
@
text
@d26 37
d64 1
a64 1
	private «elementTypesClassName»() {}
d67 1
a67 1
	private static java.util.Map elements;
d70 3
a72 1
	private static org.eclipse.jface.resource.ImageRegistry imageRegistry;
d74 1
d76 3
a78 5
	private static org.eclipse.jface.resource.ImageRegistry getImageRegistry() {
		if (imageRegistry == null) {
			imageRegistry = new org.eclipse.jface.resource.ImageRegistry();
		}
		return imageRegistry;
d80 3
d84 1
d86 4
a89 3
	private static String getImageRegistryKey(org.eclipse.emf.ecore.ENamedElement element) {
		return element.getName();
	}
d91 1
d93 16
a108 17
	private static org.eclipse.jface.resource.ImageDescriptor getProvidedImageDescriptor(org.eclipse.emf.ecore.ENamedElement element) {
		if (element instanceof org.eclipse.emf.ecore.EStructuralFeature) {
			org.eclipse.emf.ecore.EStructuralFeature feature = ((org.eclipse.emf.ecore.EStructuralFeature) element);
			org.eclipse.emf.ecore.EClass eContainingClass = feature.getEContainingClass();
			org.eclipse.emf.ecore.EClassifier eType = feature.getEType();
			if (eContainingClass != null && !eContainingClass.isAbstract()){
				element = eContainingClass;
			} else if (eType instanceof org.eclipse.emf.ecore.EClass && !((org.eclipse.emf.ecore.EClass)eType).isAbstract()){
				element = eType;
			}
		}
		if (element instanceof org.eclipse.emf.ecore.EClass) {
			org.eclipse.emf.ecore.EClass eClass = (org.eclipse.emf.ecore.EClass) element;
			if (!eClass.isAbstract()) {
				return «editorGen.plugin.getActivatorQualifiedClassName()».getInstance().getItemImageDescriptor(
					eClass.getEPackage().getEFactoryInstance().create(eClass));
			}
a109 2
		// TODO : support structural features
		return null;
d111 4
d116 1
d118 5
a122 3
	public static org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(org.eclipse.emf.ecore.ENamedElement element) {
		String key = getImageRegistryKey(element);
		org.eclipse.jface.resource.ImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);
d124 1
a124 5
			imageDescriptor = getProvidedImageDescriptor(element);
			if (imageDescriptor == null) {
				imageDescriptor = org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor();
			}
			getImageRegistry().put(key, imageDescriptor);
d126 1
a126 1
		return imageDescriptor;
d128 3
d132 1
d134 7
a140 10
	public static org.eclipse.swt.graphics.Image getImage(org.eclipse.emf.ecore.ENamedElement element) {
		String key = getImageRegistryKey(element);
		org.eclipse.swt.graphics.Image image = getImageRegistry().get(key);
		if (image == null) {
			org.eclipse.jface.resource.ImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);
			if (imageDescriptor == null) {
				imageDescriptor = org.eclipse.jface.resource.ImageDescriptor.getMissingImageDescriptor();
			}
			getImageRegistry().put(key, imageDescriptor);
			image = getImageRegistry().get(key);
d142 2
a143 1
		return image;
d145 3
d149 1
d151 4
a154 6
	public static org.eclipse.jface.resource.ImageDescriptor getImageDescriptor(org.eclipse.core.runtime.IAdaptable hint) {
		org.eclipse.emf.ecore.ENamedElement element = getElement(hint);
		if (element == null) {
			return null;
		}
		return getImageDescriptor(element);
d156 3
d160 1
d162 4
a165 6
	public static org.eclipse.swt.graphics.Image getImage(org.eclipse.core.runtime.IAdaptable hint) {
		org.eclipse.emf.ecore.ENamedElement element = getElement(hint);
		if (element == null) {
			return null;
		}
		return getImage(element);
d167 3
d171 1
d173 11
a183 42
	public static org.eclipse.emf.ecore.ENamedElement getElement(org.eclipse.core.runtime.IAdaptable hint) {
		Object type = hint.getAdapter(org.eclipse.gmf.runtime.emf.type.core.IElementType.class);
		if (elements == null) {
			elements = new java.util.IdentityHashMap();
			«EXPAND bindUniqueIdentifierToNamedElement(getUniqueIdentifier()) FOR domainDiagramElement-»
			«FOREACH getNodes() AS node-»
				«EXPAND bindUniqueIdentifierToNamedElement(node.getUniqueIdentifier()) FOR node.modelFacet-»
			«ENDFOREACH-»
			«FOREACH links AS link-»
				«EXPAND bindUniqueIdentifierToNamedElement(link.getUniqueIdentifier()) FOR link.modelFacet-»
			«ENDFOREACH-»
		}
		return (org.eclipse.emf.ecore.ENamedElement) elements.get(type);
	}

	«FOREACH getElements() AS e-»
		«IF null != elementType-»
	«EXPAND xpt::Common::generatedMemberComment»
	public static final org.eclipse.gmf.runtime.emf.type.core.IElementType «e.getUniqueIdentifier()» =
			getElementType("«e.elementType.uniqueIdentifier»"); //$NON-NLS-1$
		«ENDIF-»
	«ENDFOREACH-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static org.eclipse.gmf.runtime.emf.type.core.IElementType getElementType(String id) {
		return org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry.getInstance().getType(id);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static java.util.Set KNOWN_ELEMENT_TYPES;

	«EXPAND xpt::Common::generatedMemberComment»
	public static boolean isKnownElementType(org.eclipse.gmf.runtime.emf.type.core.IElementType elementType) {
		if (KNOWN_ELEMENT_TYPES == null) {
			KNOWN_ELEMENT_TYPES = new java.util.HashSet();
			«FOREACH getElements() AS e-»
				«IF null != elementType-»
			KNOWN_ELEMENT_TYPES.add(«e.getUniqueIdentifier()»);
				«ENDIF-»
			«ENDFOREACH-»
		}
		return KNOWN_ELEMENT_TYPES.contains(elementType);
d185 1
d204 34
@


1.4
log
@[170083] mgolubev - Optionally use EReference#getEType() as a hint for default ImageDescriptor for EReference-based link element types.
@
text
@d23 1
a23 3
/**
 * @@generated
 */
d26 1
a26 3
	/**
	 * @@generated
	 */
d29 1
a29 3
	/**
	 * @@generated
	 */
d32 1
a32 3
	/**
	 * @@generated
	 */
d35 1
a35 3
	/**
	 * @@generated
	 */
d43 1
a43 3
	/**
	 * @@generated
	 */
d48 1
a48 3
	/**
	 * @@generated
	 */
d71 1
a71 3
	/**
	 * @@generated
	 */
d85 1
a85 3
	/**
	 * @@generated
	 */
d100 1
a100 3
	/**
	 * @@generated
	 */
d109 1
a109 3
	/**
	 * @@generated
	 */
d118 1
a118 5
	/**
	 * Returns 'type' of the ecore object associated with the hint.
	 * 
	 * @@generated
	 */
d136 1
a136 3
	/**
	 * @@generated
	 */
d142 1
a142 3
	/**
	 * @@generated
	 */
d147 1
a147 3
	/**
	 * @@generated
	 */
d150 1
a150 3
	/**
	 * @@generated
	 */
@


1.3
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@d65 8
a72 1
			element = ((org.eclipse.emf.ecore.EStructuralFeature) element).getEContainingClass();
@


1.2
log
@genmodel extensions rewritten with Extend to avoid static java methods. This is another way to workaround 167615
@
text
@d205 1
a205 1
	elements.put(«id», «getQualifiedPackageInterfaceName(metaFeature.genClass.genPackage)».eINSTANCE.get«getFeatureAccessorName(metaFeature)»());
@


1.1
log
@rewrite element types in xpand
@
text
@d193 1
a193 1
	elements.put(«id», «getQualifiedPackageInterfaceName(genPackage)».eINSTANCE.get«getClassifierAccessorName(this)»());
@

