head	1.13;
access;
symbols
	v20081022-1925:1.13
	v20081015-1925:1.13
	v20081008-1925:1.13
	v20081001-1925:1.13
	v20080930-1130:1.13
	v20080926-1245:1.13
	v20080924-1925:1.13
	v20080917-1925:1.13
	v20080911-1728:1.13
	v20080910-1520:1.13
	v20080903-1520:1.13
	v20080827-1520:1.12
	v20080813-1520:1.11
	v20080806-1520:1.11
	v20080722-1827:1.11
	v20080718-1731:1.11
	v20080716-1600:1.9
	v20080716-1642:1.11
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080528-1052:1.9
	v20080521:1.9
	v20080516-1543:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080508-2000:1.9
	v20080507-1326:1.9
	v20080503-1740:1.8
	v20080501-1739:1.8
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080411-0411:1.8
	v20080404-1111:1.8
	v20080322-0000:1.8
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080207-0207:1.3
	v20071222-1111:1.3
	v20071214-1111:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071112-0000:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070928-0000:1.3
	v20070921-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.2
	v20070504-1000:1.2
	v20070427-0600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2008.08.28.16.42.35;	author dstadnik;	state Exp;
branches;
next	1.12;
commitid	6af48b6d57a4567;

1.12
date	2008.08.20.13.30.37;	author dstadnik;	state Exp;
branches;
next	1.11;
commitid	26c448ac1c694567;

1.11
date	2008.07.01.18.48.54;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	4f11486a7c164567;

1.10
date	2008.06.30.19.46.29;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	763c486938144567;

1.9
date	2008.05.07.13.56.00;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	39124821b4de4567;

1.8
date	2008.02.28.17.53.04;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	5b2847c6f4ff4567;

1.7
date	2008.02.26.13.53.51;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	19d047c419ed4567;

1.6
date	2008.02.22.20.24.44;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	377d47bf2f8a4567;

1.5
date	2008.02.21.21.28.45;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	68147bded0c4567;

1.4
date	2008.02.21.18.35.58;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	6b4047bdc48d4567;

1.3
date	2007.05.18.21.17.18;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	2591464e17d14567;

1.2
date	2007.05.04.10.50.01;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	29e4463b0fd84567;

1.1
date	2007.04.24.08.17.31;	author dstadnik;	state Exp;
branches;
next	;
commitid	3da9462dbd1a4567;


desc
@@


1.13
log
@[199995] always generate checks
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»

«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::diagram::Utils»

«REM»
	Expands to all accessor methods for link and it's ends.
«ENDREM»
«DEFINE accessors FOR gmfgen::GenLink-»
	«EXPAND linkAccessor FOR modelFacet-»
	«EXPAND oldSourceAccessor FOR modelFacet-»
	«EXPAND newSourceAccessor FOR modelFacet-»
	«EXPAND oldTargetAccessor FOR modelFacet-»
	«EXPAND newTargetAccessor FOR modelFacet-»
«ENDDEFINE»

«DEFINE linkAccessor FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE linkAccessor FOR gmfgen::TypeLinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «EXPAND MetaModel::QualifiedClassName FOR metaClass» getLink() {
		return «EXPAND MetaModel::CastEObject("getElementToEdit()") FOR metaClass»;
	}
«ENDDEFINE»

«DEFINE oldSourceAccessor FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE oldSourceAccessor FOR gmfgen::TypeLinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «EXPAND MetaModel::QualifiedClassName FOR getSourceType()» getOldSource() {
		return «EXPAND MetaModel::CastEObject("oldEnd") FOR getSourceType()»;
	}
«ENDDEFINE»

«DEFINE oldSourceAccessor FOR gmfgen::FeatureLinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «EXPAND MetaModel::QualifiedClassName FOR getSourceType()» getOldSource() {
		return «EXPAND MetaModel::CastEObject("referenceOwner") FOR getSourceType()»;
	}
«ENDDEFINE»

«DEFINE newSourceAccessor FOR gmfgen::LinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «EXPAND MetaModel::QualifiedClassName FOR getSourceType()» getNewSource() {
		return «EXPAND MetaModel::CastEObject("newEnd") FOR getSourceType()»;
	}
«ENDDEFINE»

«DEFINE oldTargetAccessor FOR gmfgen::LinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «EXPAND MetaModel::QualifiedClassName FOR getTargetType()» getOldTarget() {
		return «EXPAND MetaModel::CastEObject("oldEnd") FOR getTargetType()»;
	}
«ENDDEFINE»

«DEFINE newTargetAccessor FOR gmfgen::LinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected «EXPAND MetaModel::QualifiedClassName FOR getTargetType()» getNewTarget() {
		return «EXPAND MetaModel::CastEObject("newEnd") FOR getTargetType()»;
	}
«ENDDEFINE»

«REM»
	Generates canExecute() method for the command that reorients link.
	Implementation should perform all static checks that command can be executed.
«ENDREM»
«DEFINE canReorient(gmfgen::GenLink link) FOR gmfgen::LinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	public boolean canExecute() {
		«EXPAND checkLinkValidity-»
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_SOURCE) {
			return canReorientSource();
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_TARGET) {
			return canReorientTarget();
		}
		return false;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean canReorientSource() {
		«EXPAND checkSourceRequestValidity(link)-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean canReorientTarget() {
		«EXPAND checkTargetRequestValidity(link)-»
	}
«ENDDEFINE»

«DEFINE checkLinkValidity FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE checkLinkValidity FOR gmfgen::TypeLinkModelFacet-»
	if («EXPAND MetaModel::NotInstance("getElementToEdit()") FOR metaClass») {
		return false;
	}
«ENDDEFINE»

«DEFINE checkLinkValidity FOR gmfgen::FeatureLinkModelFacet-»
	if («EXPAND MetaModel::NotInstance("referenceOwner") FOR getSourceType()») {
		return false;
	}
«ENDDEFINE»

«DEFINE checkSourceRequestValidity(gmfgen::GenLink link) FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE checkSourceRequestValidity(gmfgen::GenLink link) FOR gmfgen::TypeLinkModelFacet-»
	if (!(«EXPAND MetaModel::IsInstance("oldEnd") FOR getSourceType()» && «EXPAND MetaModel::IsInstance("newEnd") FOR getSourceType()»)) {
		return false;
	}
	«EXPAND extractFeatureWithCheck("getLink()", metaClass, "target", getTargetType()) FOR targetMetaFeature-»
	«EXPAND checkLinkConstraint(link, "getNewSource()", "target")-»
«ENDDEFINE»

«REM»
	When feature source is being reoriented oldEnd is the link target.
«ENDREM»
«DEFINE checkSourceRequestValidity(gmfgen::GenLink link) FOR gmfgen::FeatureLinkModelFacet-»
	if (!(«EXPAND MetaModel::IsInstance("oldEnd") FOR getTargetType()» && «EXPAND MetaModel::IsInstance("newEnd") FOR getSourceType()»)) {
		return false;
	}
	return «EXPAND checkLinkConstraintInvocation FOR link»(getNewSource(), getOldTarget());
«ENDDEFINE»

«DEFINE checkTargetRequestValidity(gmfgen::GenLink link) FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE checkTargetRequestValidity(gmfgen::GenLink link) FOR gmfgen::TypeLinkModelFacet-»
	if (!(«EXPAND MetaModel::IsInstance("oldEnd") FOR getTargetType()» && «EXPAND MetaModel::IsInstance("newEnd") FOR getTargetType()»)) {
		return false;
	}
	«IF sourceMetaFeature != null-»
		«EXPAND extractFeatureWithCheck("getLink()", metaClass, "source", getSourceType()) FOR sourceMetaFeature-»
	«ELSE-»
		if (!(«EXPAND MetaModel::IsContainerInstance("getLink()", metaClass) FOR getSourceType()»)) {
			return false;
		}
		«EXPAND MetaModel::DeclareAndAssignContainer("source", "getLink()", metaClass) FOR getSourceType()»
	«ENDIF-»
	«EXPAND checkLinkConstraint(link, "source", "getNewTarget()")-»
«ENDDEFINE»

«DEFINE checkTargetRequestValidity(gmfgen::GenLink link) FOR gmfgen::FeatureLinkModelFacet-»
	if (!(«EXPAND MetaModel::IsInstance("oldEnd") FOR getTargetType()» && «EXPAND MetaModel::IsInstance("newEnd") FOR getTargetType()»)) {
		return false;
	}
	return «EXPAND checkLinkConstraintInvocation FOR link»(getOldSource(), getNewTarget());
«ENDDEFINE»

«DEFINE extractFeatureWithCheck(String containerVar, GenClass containerMetaClass, String var, GenClass varMetaClass) FOR genmodel::GenFeature-»
	«IF ecoreFeature.many-»
		if («EXPAND MetaModel::getFeatureValue(containerVar, containerMetaClass)».size() != 1) {
			return false;
		}
		«EXPAND MetaModel::DeclareAndAssign2(var, containerVar, containerMetaClass, this, "get(0)", true) FOR varMetaClass»
	«ELSE-»
		«EXPAND MetaModel::DeclareAndAssign(var, containerVar, containerMetaClass, this) FOR varMetaClass»
	«ENDIF-»
«ENDDEFINE»

«DEFINE checkLinkConstraint(gmfgen::GenLink link, String sourceVar, String targetVar) FOR gmfgen::TypeLinkModelFacet-»
	«IF hasContainerOtherThanSource()-»
		if (!(«EXPAND MetaModel::IsContainerInstance("getLink()", metaClass) FOR containmentMetaFeature.genClass»)) {
			return false;
		}
		«EXPAND MetaModel::DeclareAndAssignContainer("container", "getLink()", metaClass) FOR containmentMetaFeature.genClass»
		return «EXPAND checkLinkConstraintInvocation FOR link»(container, «sourceVar», «targetVar»);
	«ELSE-»
		return «EXPAND checkLinkConstraintInvocation FOR link»(«sourceVar», «targetVar»);
	«ENDIF-»
«ENDDEFINE»

«DEFINE checkLinkConstraintInvocation FOR gmfgen::GenLink-»
	«diagram.getBaseItemSemanticEditPolicyQualifiedClassName()».«diagram.getLinkCreationConstraintsClassName()».canExist«getUniqueIdentifier()»
«ENDDEFINE»

«REM»
	Generates doExecuteWithResult() method for the command that reorients link.
	Implementation should throw ExecutionException if it can't execute the command.
«ENDREM»
«DEFINE reorient FOR gmfgen::LinkModelFacet-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(
			org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info)
			throws org.eclipse.core.commands.ExecutionException {
		if (!canExecute()) {
			throw new org.eclipse.core.commands.ExecutionException("Invalid arguments in reorient link command"); «EXPAND xpt::Common::nonNLS»
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_SOURCE) {
			return reorientSource();
		}
		if (reorientDirection == org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest.REORIENT_TARGET) {
			return reorientTarget();
		}
		throw new IllegalStateException();
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult reorientSource() throws org.eclipse.core.commands.ExecutionException {
		«EXPAND reorientSource-»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult reorientTarget() throws org.eclipse.core.commands.ExecutionException {
		«EXPAND reorientTarget-»
	}
«ENDDEFINE»

«DEFINE reorientSource FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«REM»
	Shouldn't we change link container here?
	[artem] especially when there's explicit childMetaFeature and 
	we changed source to another, but didn't change the container. Perhaps,
	makes sense to deduceContainer() using new source?
«ENDREM»
«DEFINE reorientSource FOR gmfgen::TypeLinkModelFacet-»
«IF sourceMetaFeature == null ? containmentMetaFeature.ecoreFeature.changeable : sourceMetaFeature.ecoreFeature.changeable-»
«IF sourceMetaFeature != null-»
	«EXPAND changeTarget("getLink()", metaClass, "getOldSource()", "getNewSource()") FOR sourceMetaFeature-»
«ELSE-»
	«EXPAND changeSource("getLink()", "getOldSource()", "getNewSource()", getSourceType()) FOR hasExplicitChildFeature() /*sic! - childMetaFeature may be derived, no need to change it then*/ ? childMetaFeature : containmentMetaFeature-»
«ENDIF-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(getLink());
«ELSE-»
	throw new UnsupportedOperationException();
«ENDIF-»
«ENDDEFINE»

«REM»
	When feature source is being reoriented oldEnd is the link target.
«ENDREM»
«DEFINE reorientSource FOR gmfgen::FeatureLinkModelFacet-»
«IF metaFeature.ecoreFeature.changeable-»
	«EXPAND changeSource("getOldTarget()", "getOldSource()", "getNewSource()", getSourceType()) FOR metaFeature-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(referenceOwner);
«ELSE-»
	throw new UnsupportedOperationException();
«ENDIF-»
«ENDDEFINE»

«DEFINE reorientTarget FOR gmfgen::LinkModelFacet-»
«ENDDEFINE»

«DEFINE reorientTarget FOR gmfgen::TypeLinkModelFacet-»
«IF targetMetaFeature.ecoreFeature.changeable-»
	«EXPAND changeTarget("getLink()", metaClass, "getOldTarget()", "getNewTarget()") FOR targetMetaFeature-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(getLink());
«ELSE-»
	throw new UnsupportedOperationException();
«ENDIF-»
«ENDDEFINE»

«DEFINE reorientTarget FOR gmfgen::FeatureLinkModelFacet-»
«IF metaFeature.ecoreFeature.changeable-»
	«EXPAND changeTarget("getOldSource()", getSourceType(), "getOldTarget()", "getNewTarget()") FOR metaFeature-»
	return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(referenceOwner);
«ELSE-»
	throw new UnsupportedOperationException();
«ENDIF-»
«ENDDEFINE»

«REM»
	Replace old target with the new one in the source.
«ENDREM»
«DEFINE changeTarget(String sourceVar, genmodel::GenClass sourceVarGenClass, String oldTargetVar, String newTargetVar) FOR genmodel::GenFeature-»
«EXPAND MetaModel::replaceFeatureValue(sourceVar, sourceVarGenClass, oldTargetVar, newTargetVar)»
«ENDDEFINE»

«REM»
	Move target from old source to the new one.
«ENDREM»
«DEFINE changeSource(String targetVar, String oldSourceVar, String newSourceVar, genmodel::GenClass sourceVarGenClass) FOR genmodel::GenFeature-»
«EXPAND MetaModel::moveFeatureValue(oldSourceVar, newSourceVar, sourceVarGenClass, targetVar)»
«ENDDEFINE»
@


1.12
log
@[199995] generate valid code for links with unchangeable features
@
text
@a132 1
«IF sourceMetaFeature == null ? containmentMetaFeature.ecoreFeature.changeable : sourceMetaFeature.ecoreFeature.changeable-»
a137 3
«ELSE-»
	return false;
«ENDIF-»
a143 1
«IF metaFeature.ecoreFeature.changeable-»
a147 3
«ELSE-»
	return false;
«ENDIF-»
a153 1
«IF targetMetaFeature.ecoreFeature.changeable-»
a165 3
«ELSE-»
	return false;
«ENDIF-»
a168 1
«IF metaFeature.ecoreFeature.changeable-»
a172 3
«ELSE-»
	return false;
«ENDIF-»
@


1.11
log
@refactored templates moving towards [188329] - Support Java 5.0 (would need to respect generic types when adding into collections) while trying to accomplish [227127]
@
text
@d133 1
d139 3
d148 1
d153 3
d162 1
d175 3
d181 1
d186 3
d261 1
d268 3
d277 1
d280 3
d289 1
d292 3
d298 1
d301 3
@


1.10
log
@[226882] Support links with childMetaFeature not from container
@
text
@d278 1
a278 6
	«IF isListType()-»
		«EXPAND MetaModel::getFeatureValue(sourceVar, sourceVarGenClass)».remove(«oldTargetVar»);
		«EXPAND MetaModel::getFeatureValue(sourceVar, sourceVarGenClass)».add(«newTargetVar»);
	«ELSE-»
		«EXPAND MetaModel::setFeatureValue(sourceVar, sourceVarGenClass, newTargetVar)»;
	«ENDIF-»
d285 1
a285 7
	«IF isListType()-»
		«EXPAND MetaModel::getFeatureValue(oldSourceVar, sourceVarGenClass)».remove(«targetVar»);
		«EXPAND MetaModel::getFeatureValue(newSourceVar, sourceVarGenClass)».add(«targetVar»);
	«ELSE-»
		«EXPAND MetaModel::setFeatureValue(oldSourceVar, sourceVarGenClass, "null")»;
		«EXPAND MetaModel::setFeatureValue(newSourceVar, sourceVarGenClass, targetVar)»;
	«ENDIF-»
@


1.9
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d187 1
a187 1
	«IF sourceMetaFeature != null-»
d240 3
d245 5
a249 5
	«IF sourceMetaFeature != null-»
		«EXPAND changeTarget("getLink()", metaClass, "getOldSource()", "getNewSource()") FOR sourceMetaFeature-»
	«ELSE-»
		«EXPAND changeSource("getLink()", "getOldSource()", "getNewSource()", getSourceType()) FOR containmentMetaFeature-»
	«ENDIF-»
@


1.8
log
@refactor false == isInstance to NotInstance
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.7
log
@[150177] phase I, refactor existing code: completed - all metamodel access moved to MetaModel template.
@
text
@d118 1
a118 1
	if (!(«EXPAND MetaModel::IsInstance("getElementToEdit()") FOR metaClass»)) {
d124 1
a124 1
	if (!(«EXPAND MetaModel::IsInstance("referenceOwner") FOR getSourceType()»)) {
@


1.6
log
@[150177] phase I, refactor existing code: extract metamodel/generated code access into single place
@
text
@d177 1
a177 1
		if («EXPAND xpt::Common::getFeatureValue(containerVar, containerMetaClass)».size() != 1) {
d276 2
a277 2
		«EXPAND xpt::Common::getFeatureValue(sourceVar, sourceVarGenClass)».remove(«oldTargetVar»);
		«EXPAND xpt::Common::getFeatureValue(sourceVar, sourceVarGenClass)».add(«newTargetVar»);
d279 1
a279 1
		«EXPAND xpt::Common::setFeatureValue(sourceVar, sourceVarGenClass, newTargetVar)»;
d288 2
a289 2
		«EXPAND xpt::Common::getFeatureValue(oldSourceVar, sourceVarGenClass)».remove(«targetVar»);
		«EXPAND xpt::Common::getFeatureValue(newSourceVar, sourceVarGenClass)».add(«targetVar»);
d291 2
a292 2
		«EXPAND xpt::Common::setFeatureValue(oldSourceVar, sourceVarGenClass, "null")»;
		«EXPAND xpt::Common::setFeatureValue(newSourceVar, sourceVarGenClass, targetVar)»;
@


1.5
log
@[150177] phase I, refactor existing code: special alternatives for EObject.eContainer access; started extracting casts/qualified names when there's solid reason
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d136 1
a136 1
	«EXPAND extractFeatureWithCheck("getLink()", metaClass, "target", getQualifiedInterfaceName(getTargetType())) FOR targetMetaFeature-»
d158 1
a158 1
		«EXPAND extractFeatureWithCheck("getLink()", metaClass, "source", getQualifiedInterfaceName(getSourceType())) FOR sourceMetaFeature-»
d175 1
a175 1
«DEFINE extractFeatureWithCheck(String containerVar, genmodel::GenClass containerGenClass, String featureVar, String featureTypeFQN) FOR genmodel::GenFeature-»
d177 1
a177 1
		if («EXPAND xpt::Common::getFeatureValue(containerVar, containerGenClass)».size() != 1) {
d180 1
a180 1
		«featureTypeFQN» «featureVar» = («featureTypeFQN») «EXPAND xpt::Common::getFeatureValue(containerVar, containerGenClass)».get(0);
d182 1
a182 1
		«featureTypeFQN» «featureVar» = «EXPAND xpt::Common::getFeatureValue(containerVar, containerGenClass)»;
@


1.4
log
@[150177] phase I, refactor existing code: extract metamodel/generated code access into single place
@
text
@d37 2
a38 2
	protected «getQualifiedInterfaceName(metaClass)» getLink() {
		return («getQualifiedInterfaceName(metaClass)») getElementToEdit();
d48 2
a49 2
	protected «getQualifiedInterfaceName(getSourceType())» getOldSource() {
		return («getQualifiedInterfaceName(getSourceType())») oldEnd;
d56 2
a57 2
	protected «getQualifiedInterfaceName(getSourceType())» getOldSource() {
		return («getQualifiedInterfaceName(getSourceType())») referenceOwner;
d64 2
a65 2
	protected «getQualifiedInterfaceName(getSourceType())» getNewSource() {
		return («getQualifiedInterfaceName(getSourceType())») newEnd;
d72 2
a73 2
	protected «getQualifiedInterfaceName(getTargetType())» getOldTarget() {
		return («getQualifiedInterfaceName(getTargetType())») oldEnd;
d80 2
a81 2
	protected «getQualifiedInterfaceName(getTargetType())» getNewTarget() {
		return («getQualifiedInterfaceName(getTargetType())») newEnd;
d160 1
a160 1
		if (!(«EXPAND extractContainer("getLink()") FOR metaClass» instanceof «getQualifiedInterfaceName(getSourceType())»)) {
d163 1
a163 1
		«getQualifiedInterfaceName(getSourceType())» source = («getQualifiedInterfaceName(getSourceType())») «EXPAND extractContainer("getLink()") FOR metaClass»;
d188 1
a188 1
		if (!(«EXPAND extractContainer("getLink()") FOR metaClass» instanceof «containmentMetaFeature.genClass.getQualifiedInterfaceName()»)) {
d191 1
a191 2
		«containmentMetaFeature.genClass.getQualifiedInterfaceName()» container =
				(«containmentMetaFeature.genClass.getQualifiedInterfaceName()») «EXPAND extractContainer("getLink()") FOR metaClass»;
a201 4
«DEFINE extractContainer(String var) FOR genmodel::GenClass-»
	«IF isExternalInterface()»((org.eclipse.emf.ecore.EObject) «ENDIF»«var»«IF isExternalInterface()»)«ENDIF».eContainer()
«ENDDEFINE»

@


1.3
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d118 1
a118 1
	if (!(getElementToEdit() instanceof «getQualifiedInterfaceName(metaClass)»)) {
d124 1
a124 1
	if (!(referenceOwner instanceof «getQualifiedInterfaceName(getSourceType())»)) {
d133 1
a133 1
	if (!(oldEnd instanceof «getQualifiedInterfaceName(getSourceType())» && newEnd instanceof «getQualifiedInterfaceName(getSourceType())»)) {
d144 1
a144 1
	if (!(oldEnd instanceof «getQualifiedInterfaceName(getTargetType())» && newEnd instanceof «getQualifiedInterfaceName(getSourceType())»)) {
d154 1
a154 1
	if (!(oldEnd instanceof «getQualifiedInterfaceName(getTargetType())» && newEnd instanceof «getQualifiedInterfaceName(getTargetType())»)) {
d169 1
a169 1
	if (!(oldEnd instanceof «getQualifiedInterfaceName(getTargetType())» && newEnd instanceof «getQualifiedInterfaceName(getTargetType())»)) {
@


1.2
log
@move getFeatureTargetType method to GenModelUtils
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.1
log
@rename ReorientUtils template
@
text
@a17 1
«EXTENSION xpt::Utils»
@

