head	1.14;
access;
symbols
	v20081022-1925:1.14
	v20081015-1925:1.14
	v20081008-1925:1.14
	v20081001-1925:1.14
	v20080930-1130:1.14
	v20080926-1245:1.14
	v20080924-1925:1.14
	v20080917-1925:1.14
	v20080911-1728:1.14
	v20080910-1520:1.14
	v20080903-1520:1.14
	v20080827-1520:1.14
	v20080813-1520:1.14
	v20080806-1520:1.14
	v20080722-1827:1.14
	v20080718-1731:1.14
	v20080716-1600:1.12
	v20080716-1642:1.14
	R2_1_maintenance:1.12.0.2
	Root_R2_1_maintenance:1.12
	R2_1_0:1.12
	v20080610-1132:1.12
	v20080603-1553:1.12
	v20080528-1052:1.12
	v20080521:1.12
	v20080516-1543:1.12
	v20080516-1143:1.12
	v20080512-1200:1.12
	v20080508-2000:1.12
	v20080507-1326:1.12
	v20080503-1740:1.10
	v20080501-1739:1.10
	v20080425-1959:1.10
	v20080417-1610:1.10
	v20080411-0411:1.10
	v20080404-1111:1.10
	v20080322-0000:1.10
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20080207-0207:1.1.2.1
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	v20071124-0000:1.1.2.1
	v20071112-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.1
	v20070928-0000:1.1
	v20070921-0000:1.1
	v20070915-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070614-1400:1.1
	v20070608-1300:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.14
date	2008.07.01.18.48.54;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	4f11486a7c164567;

1.13
date	2008.06.30.19.46.54;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	76514869382e4567;

1.12
date	2008.05.07.13.56.00;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	39124821b4de4567;

1.11
date	2008.05.05.11.19.50;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	2bc6481eed554567;

1.10
date	2008.03.05.16.41.10;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	4c0b47cecd244567;

1.9
date	2008.03.04.21.07.05;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	568f47cdb9f94567;

1.8
date	2008.03.04.20.27.07;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	2ac447cdb09b4567;

1.7
date	2008.02.28.12.00.52;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	692b47c6a2744567;

1.6
date	2008.02.26.13.53.51;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	19d047c419ed4567;

1.5
date	2008.02.22.20.45.07;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	45fc47bf34534567;

1.4
date	2008.02.21.20.18.09;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	468b47bddc804567;

1.3
date	2008.02.21.18.35.58;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	6b4047bdc48d4567;

1.2
date	2007.10.26.15.44.10;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	202147220b4a4567;

1.1
date	2007.06.07.17.32.55;	author dstadnik;	state Exp;
branches
	1.1.2.1;
next	;
commitid	5505466841464567;

1.1.2.1
date	2007.10.26.15.42.53;	author ashatalin;	state Exp;
branches;
next	;
commitid	1dc847220afd4567;


desc
@@


1.14
log
@refactored templates moving towards [188329] - Support Java 5.0 (would need to respect generic types when adding into collections) while trying to accomplish [227127]
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::diagram::Utils»

«DEFINE CreateNodeCommand FOR gmfgen::GenNode-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «getDiagram().editCommandsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «createCommandClassName» extends org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand {

	«EXPAND constructor-»
	«IF modelFacet.isPhantomElement() || modelFacet.containmentMetaFeature != null || modelFacet.childMetaFeature != null-»
	
		«EXPAND getElementToEdit-»
		«IF modelFacet.isPhantomElement()-»

			«EXPAND canExecute_Phantom-»
			
			«EXPAND getContainmentFeature-»
			
			«EXPAND doDefaultElementCreation_Phantom(this) FOR modelFacet-»
		«ELSE-»
			«EXPAND canExecute_Normal FOR modelFacet-»
			
			«EXPAND getEClassToEdit FOR modelFacet-»			
			«EXPAND doDefaultElementCreation_Normal(this) FOR modelFacet-»
		«ENDIF-»
	«ENDIF-»
}
«ENDDEFINE»

«DEFINE constructor FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
public «createCommandClassName»(org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest req) {
	super(req);
}
«ENDDEFINE»

«DEFINE getElementToEdit FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EObject getElementToEdit() {
	org.eclipse.emf.ecore.EObject container = ((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).getContainer();
	if (container instanceof org.eclipse.gmf.runtime.notation.View) {
		container = ((org.eclipse.gmf.runtime.notation.View) container).getElement();
	}
	return container;
}
«ENDDEFINE»

«REM»
	TODO: Shouldn't this method just return true?
«ENDREM»
«DEFINE canExecute_Phantom FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean canExecute() {
	if (getEClass() != null) {
		return getEClass().isSuperTypeOf(getEClassToEdit());
	}
	return true;
}
«ENDDEFINE»

«DEFINE canExecute_Normal FOR gmfgen::TypeModelFacet-»
	«IF containmentMetaFeature.ecoreFeature.upperBound > 0 || (childMetaFeature != containmentMetaFeature && childMetaFeature.ecoreFeature.upperBound > 0)-»

	«EXPAND xpt::Common::generatedMemberComment»
public boolean canExecute() {
	«EXPAND MetaModel::DeclareAndAssign("container", "getElementToEdit()") FOR containmentMetaFeature.genClass-»
		«IF containmentMetaFeature.ecoreFeature.upperBound > 0-»
			«IF containmentMetaFeature.ecoreFeature.upperBound == 1»
		if («EXPAND MetaModel::getFeatureValue("container", containmentMetaFeature.genClass) FOR containmentMetaFeature» != null) {
			«ELSE-»
		if («EXPAND MetaModel::getFeatureValue("container", containmentMetaFeature.genClass) FOR containmentMetaFeature».size() >= «containmentMetaFeature.ecoreFeature.upperBound») {
			«ENDIF-»
			return false;
		}
		«ENDIF-»
		«IF childMetaFeature != containmentMetaFeature && childMetaFeature.ecoreFeature.upperBound > 0-»
			«IF childMetaFeature.ecoreFeature.upperBound == 1-»
		if («EXPAND MetaModel::getFeatureValue("container", containmentMetaFeature.genClass) FOR childMetaFeature» != null) {
			«ELSE-»
		if («EXPAND MetaModel::getFeatureValue("container", containmentMetaFeature.genClass) FOR childMetaFeature».size() >= «childMetaFeature.ecoreFeature.upperBound») {
			«ENDIF-»
			return false;
		}
		«ENDIF-»
	return true;
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE getContainmentFeature FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EReference getContainmentFeature() {
	return null;
}
«ENDDEFINE»

«DEFINE getEClassToEdit FOR gmfgen::TypeModelFacet-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EClass getEClassToEdit() {
	return «EXPAND MetaModel::MetaClass FOR containmentMetaFeature.genClass»;
}
«ENDDEFINE»

«DEFINE doDefaultElementCreation_Phantom(gmfgen::GenNode node) FOR TypeModelFacet-»
	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EObject doDefaultElementCreation() {
	// Uncomment to put "phantom" objects into the diagram file.		
	// org.eclipse.emf.ecore.resource.Resource resource = 
	// 		((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).getContainer().eResource();
	// if (resource == null) {
	// 	return null;
	// }
	org.eclipse.emf.ecore.resource.Resource resource = getElementToEdit().eResource();
	«EXPAND MetaModel::NewInstance("newElement") FOR metaClass»
	resource.getContents().add(«EXPAND MetaModel::DowncastToEObject("newElement") FOR metaClass»);
	«EXPAND initialize(node, "newElement")-»
	return «EXPAND MetaModel::DowncastToEObject("newElement") FOR metaClass»;
}
«ENDDEFINE»

«DEFINE doDefaultElementCreation_Normal(gmfgen::GenNode node) FOR gmfgen::TypeModelFacet-»
	«IF modelElementInitializer != null || hasExplicitChildFeature(this)-»

	«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EObject doDefaultElementCreation() {
	«EXPAND MetaModel::NewInstance("newElement") FOR metaClass»
«IF containmentMetaFeature != null-»
	«EXPAND MetaModel::DeclareAndAssign("owner", "getElementToEdit()") FOR containmentMetaFeature.genClass»
	«EXPAND MetaModel::modifyFeature("owner", containmentMetaFeature.genClass, "newElement") FOR containmentMetaFeature-»
«ENDIF»
«IF hasExplicitChildFeature(this)-»
	«EXPAND MetaModel::DeclareAndAssign("childHolder", "getElementToEdit()") FOR childMetaFeature.genClass»
	«EXPAND MetaModel::modifyFeature("childHolder", childMetaFeature.genClass, "newElement") FOR childMetaFeature»
«ENDIF-»
	«EXPAND initialize(node, "newElement")-»
	return «EXPAND MetaModel::DowncastToEObject("newElement") FOR metaClass»;
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE initialize(gmfgen::GenNode node, String newElementVar) FOR gmfgen::TypeModelFacet»«IF modelElementInitializer != null-»
«node.getDiagram().getElementTypesQualifiedClassName()».init_«node.getUniqueIdentifier()»(«newElementVar»);
«ENDIF»«ENDDEFINE»@


1.13
log
@blank space cleaned
@
text
@d146 1
a146 1
	«EXPAND CreateLinkUtils::addValue("owner", containmentMetaFeature.genClass, "newElement") FOR containmentMetaFeature-»
d150 1
a150 1
	«EXPAND CreateLinkUtils::addValue("childHolder", childMetaFeature.genClass, "newElement") FOR childMetaFeature»
@


1.12
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@a43 1
	
@


1.11
log
@hard-coded variable name refacored out
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.10
log
@[221347] refactor/simplify ElementInitializers - shorten path to initializers
@
text
@d134 1
a134 1
	«EXPAND initialize(node)-»
d153 1
a153 1
	«EXPAND initialize(node)-»
d159 2
a160 2
«DEFINE initialize(gmfgen::GenNode node) FOR gmfgen::TypeModelFacet»«IF modelElementInitializer != null-»
«node.getDiagram().getElementTypesQualifiedClassName()».init_«node.getUniqueIdentifier()»(newElement);
@


1.9
log
@refactored node creation command not to delegate to superclass for primitive operations that can be easily accomplished directly
@
text
@d160 1
a160 1
«node.getDiagram().getElementTypesQualifiedClassName()».Initializers.init_«node.getUniqueIdentifier()»(newElement);
@


1.8
log
@[221347] refactor/simplify ElementInitializers. Step 1/2: make it simple and straightforward but do not touch existing facilities
@
text
@d36 1
a36 1
			«EXPAND doDefaultElementCreation_Phantom-»
d122 1
a122 1
«DEFINE doDefaultElementCreation_Phantom FOR gmfgen::GenNode-»
d132 4
a135 5
	org.eclipse.emf.ecore.EClass eClass = getElementType().getEClass();
	org.eclipse.emf.ecore.EObject newElement = eClass.getEPackage().getEFactoryInstance().create(eClass);
	resource.getContents().add(newElement);
	«EXPAND initialize(this) FOR modelFacet-»
	return newElement;
d144 10
a153 15
	// FIXME replace with «EXPAND MetaModel::NewInstance("newElement") FOR metaClass»
	«EXPAND MetaModel::DeclareAndAssign("newElement", "super.doDefaultElementCreation()") FOR metaClass»
	if (newElement != null) {
		«IF hasExplicitChildFeature(this)-»
		«EXPAND MetaModel::DeclareAndAssign("container", "getElementToEdit()") FOR childMetaFeature.genClass»
		if (container != null) {
			«IF isListType(childMetaFeature)-»
				«EXPAND MetaModel::getFeatureValue("container", childMetaFeature.genClass) FOR childMetaFeature».add(newElement);
			«ELSE-»
				«EXPAND MetaModel::setFeatureValue("container", childMetaFeature.genClass, "newElement") FOR childMetaFeature»;
			«ENDIF-»
		}
		«ENDIF-»
		«EXPAND initialize(node)»
	}
@


1.7
log
@missed semicolon
@
text
@d158 1
a158 1
		«EXPAND initialize(node)-»
d165 3
a167 5
«DEFINE initialize(gmfgen::GenNode node) FOR gmfgen::TypeModelFacet-»
	«IF modelElementInitializer != null-»
		«node.getDiagram().getElementTypesQualifiedClassName()».Initializers.«node.getUniqueIdentifier()».init(«EXPAND MetaModel::DowncastToEObject("newElement") FOR metaClass»);
	«ENDIF-»
«ENDDEFINE»@


1.6
log
@[150177] phase I, refactor existing code: completed - all metamodel access moved to MetaModel template.
@
text
@d154 1
a154 1
				«EXPAND MetaModel::setFeatureValue("container", childMetaFeature.genClass, "newElement") FOR childMetaFeature-»
@


1.5
log
@[150177] phase I, refactor existing code: use same template for metainfo access
@
text
@d87 1
a87 1
		if («EXPAND xpt::Common::getFeatureValue("container", containmentMetaFeature.genClass) FOR containmentMetaFeature» != null) {
d89 1
a89 1
		if («EXPAND xpt::Common::getFeatureValue("container", containmentMetaFeature.genClass) FOR containmentMetaFeature».size() >= «containmentMetaFeature.ecoreFeature.upperBound») {
d96 1
a96 1
		if («EXPAND xpt::Common::getFeatureValue("container", containmentMetaFeature.genClass) FOR childMetaFeature» != null) {
d98 1
a98 1
		if («EXPAND xpt::Common::getFeatureValue("container", containmentMetaFeature.genClass) FOR childMetaFeature».size() >= «childMetaFeature.ecoreFeature.upperBound») {
d118 1
a118 1
	return «EXPAND xpt::Common::metaClassAccessor FOR containmentMetaFeature.genClass»;
d145 1
a145 1
	// FIXME replace with «EXPAND xpt::Common::newInstance("newElement") FOR metaClass»
d152 1
a152 1
				«EXPAND xpt::Common::getFeatureValue("container", childMetaFeature.genClass) FOR childMetaFeature».add(newElement);
d154 1
a154 1
				«EXPAND xpt::Common::setFeatureValue("container", childMetaFeature.genClass, "newElement") FOR childMetaFeature-»
d160 1
a160 1
	return «EXPAND xpt::Common::castToEObject FOR metaClass»newElement;
d167 1
a167 1
		«node.getDiagram().getElementTypesQualifiedClassName()».Initializers.«node.getUniqueIdentifier()».init(«EXPAND xpt::Common::castToEObject FOR metaClass»newElement);
@


1.4
log
@[150177] phase I, refactor existing code: better name (DeclareAndAssign instead of CastAndAssign), alternative method that uses feature accessor to get initial value
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d87 1
a87 1
		if (container.«getGetAccessor(containmentMetaFeature)»() != null) {
d89 1
a89 1
		if (container.«getGetAccessor(containmentMetaFeature)»().size() >= «containmentMetaFeature.ecoreFeature.upperBound») {
d96 1
a96 1
		if (container.«getGetAccessor(childMetaFeature)»() != null) {
d98 1
a98 1
		if (container.«getGetAccessor(childMetaFeature)»().size() >= «childMetaFeature.ecoreFeature.upperBound») {
@


1.3
log
@[150177] phase I, refactor existing code: extract metamodel/generated code access into single place
@
text
@d84 1
a84 1
	«EXPAND MetaModel::CastAndAssign("container", "getElementToEdit()") FOR containmentMetaFeature.genClass-»
d146 1
a146 1
	«EXPAND MetaModel::CastAndAssign("newElement", "super.doDefaultElementCreation()") FOR metaClass»
d149 1
a149 1
		«EXPAND MetaModel::CastAndAssign("container", "getElementToEdit()") FOR childMetaFeature.genClass»
@


1.2
log
@[193469] - Should use feature initializer for phantom elements
@
text
@d84 1
a84 1
	«getQualifiedInterfaceName(containmentMetaFeature.genClass)» container = («getQualifiedInterfaceName(containmentMetaFeature.genClass)») getElementToEdit();
d86 1
a86 1
			«IF containmentMetaFeature.ecoreFeature.upperBound == 1-»
d145 2
a146 1
	«getQualifiedInterfaceName(metaClass)» newElement = («getQualifiedInterfaceName(metaClass)») super.doDefaultElementCreation();
d149 1
a149 1
		«getQualifiedInterfaceName(childMetaFeature.genClass)» container = («getQualifiedInterfaceName(childMetaFeature.genClass)») getElementToEdit();
@


1.1
log
@rewrite create node command in xpand
@
text
@d26 30
d57 4
a60 2
	public «createCommandClassName»(org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest req) {
		super(req);
d62 1
a62 1
	«EXPAND body(this) FOR modelFacet-»
d66 11
a76 1
«DEFINE body(gmfgen::GenNode node) FOR gmfgen::ModelFacet-»
d79 2
a80 2
«DEFINE body(gmfgen::GenNode node) FOR gmfgen::TypeModelFacet-»
	«IF isPhantomElement() || containmentMetaFeature != null || childMetaFeature != null-»
d83 18
a100 5
	protected org.eclipse.emf.ecore.EObject getElementToEdit() {
		org.eclipse.emf.ecore.EObject container =
				((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).getContainer();
		if (container instanceof org.eclipse.gmf.runtime.notation.View) {
			container = ((org.eclipse.gmf.runtime.notation.View) container).getElement();
a101 6
		return container;
	}
		«IF isPhantomElement()-»
			«EXPAND phantomBody-»
		«ELSE-»
			«EXPAND normalBody(node)-»
d103 2
d108 1
a108 2
«DEFINE phantomBody FOR gmfgen::TypeModelFacet-»

d110 4
a113 6
	public boolean canExecute() {
		if (getEClass() != null) {
			return getEClass().isSuperTypeOf(getEClassToEdit());
		}
		return true;
	}
d115 1
d117 4
a120 3
	protected org.eclipse.emf.ecore.EReference getContainmentFeature() {
		return null;
	}
d122 1
d124 14
a137 13
	protected org.eclipse.emf.ecore.EObject doDefaultElementCreation() {
		// Uncomment to put "phantom" objects into the diagram file.		
		// org.eclipse.emf.ecore.resource.Resource resource = 
		// 		((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).getContainer().eResource();
		// if (resource == null) {
		// 	return null;
		// }
		org.eclipse.emf.ecore.resource.Resource resource = getElementToEdit().eResource();
		org.eclipse.emf.ecore.EClass eClass = getElementType().getEClass();
		org.eclipse.emf.ecore.EObject eObject = eClass.getEPackage().getEFactoryInstance().create(eClass);
		resource.getContents().add(eObject);
		return eObject;
	}
d140 2
a141 1
«DEFINE normalBody(gmfgen::GenNode node) FOR gmfgen::TypeModelFacet-»
d144 6
a149 13
	protected org.eclipse.emf.ecore.EClass getEClassToEdit() {
		return «EXPAND xpt::Common::metaClassAccessor FOR containmentMetaFeature.genClass»;
	}
	«IF modelElementInitializer != null || hasExplicitChildFeature()-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EObject doDefaultElementCreation() {
		«getQualifiedInterfaceName(metaClass)» newElement = («getQualifiedInterfaceName(metaClass)») super.doDefaultElementCreation();
		if (newElement != null) {
		«IF hasExplicitChildFeature()-»
			«getQualifiedInterfaceName(childMetaFeature.genClass)» container =
					(«getQualifiedInterfaceName(childMetaFeature.genClass)») getElementToEdit();
			if (container != null) {
d151 1
a151 2
				java.util.Collection featureValues = container.«getGetAccessor(childMetaFeature)»();
				featureValues.add(newElement);
d155 1
a155 1
			}
d157 1
a157 5
		«IF modelElementInitializer != null-»
			«node.getDiagram().getElementTypesQualifiedClassName()».Initializers.«node.getUniqueIdentifier()».init(newElement);
		«ENDIF-»
		}
		return newElement;
d159 2
d162 1
a162 2
	«IF containmentMetaFeature.ecoreFeature.upperBound > 0 ||
			(childMetaFeature != containmentMetaFeature && childMetaFeature.ecoreFeature.upperBound > 0)-»
d164 3
a166 24
	«EXPAND xpt::Common::generatedMemberComment»
	public boolean canExecute() {
		«getQualifiedInterfaceName(containmentMetaFeature.genClass)» container =
				(«getQualifiedInterfaceName(containmentMetaFeature.genClass)») getElementToEdit();
		«IF containmentMetaFeature.ecoreFeature.upperBound > 0-»
			«IF containmentMetaFeature.ecoreFeature.upperBound == 1-»
			if (container.«getGetAccessor(containmentMetaFeature)»() != null) {
			«ELSE-»
			if (container.«getGetAccessor(containmentMetaFeature)»().size() >= «containmentMetaFeature.ecoreFeature.upperBound») {
			«ENDIF-»
				return false;
			}
		«ENDIF-»
		«IF childMetaFeature != containmentMetaFeature && childMetaFeature.ecoreFeature.upperBound > 0-»
			«IF childMetaFeature.ecoreFeature.upperBound == 1-»
			if (container.«getGetAccessor(childMetaFeature)»() != null) {
			«ELSE-»
			if (container.«getGetAccessor(childMetaFeature)»().size() >= «childMetaFeature.ecoreFeature.upperBound») {
			«ENDIF-»
				return false;
			}
		«ENDIF-»
		return true;
	}
d168 1
a168 1
«ENDDEFINE»
@


1.1.2.1
log
@[193469] - Should use feature initializer for phantom elements
@
text
@a25 30
	«EXPAND constructor-»
	«IF modelFacet.isPhantomElement() || modelFacet.containmentMetaFeature != null || modelFacet.childMetaFeature != null-»
	
		«EXPAND getElementToEdit-»
		«IF modelFacet.isPhantomElement()-»

			«EXPAND canExecute_Phantom-»
			
			«EXPAND getContainmentFeature-»
			
			«EXPAND doDefaultElementCreation_Phantom-»
		«ELSE-»
			«EXPAND canExecute_Normal FOR modelFacet-»
			
			«EXPAND getEClassToEdit FOR modelFacet-»			
			«EXPAND doDefaultElementCreation_Normal(this) FOR modelFacet-»
		«ENDIF-»
	«ENDIF-»
	
}
«ENDDEFINE»

«DEFINE constructor FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
public «createCommandClassName»(org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest req) {
	super(req);
}
«ENDDEFINE»

«DEFINE getElementToEdit FOR gmfgen::GenNode-»
d27 2
a28 4
protected org.eclipse.emf.ecore.EObject getElementToEdit() {
	org.eclipse.emf.ecore.EObject container = ((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).getContainer();
	if (container instanceof org.eclipse.gmf.runtime.notation.View) {
		container = ((org.eclipse.gmf.runtime.notation.View) container).getElement();
d30 1
a30 1
	return container;
d34 1
a34 11
«REM»
	TODO: Shouldn't this method just return true?
«ENDREM»
«DEFINE canExecute_Phantom FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
public boolean canExecute() {
	if (getEClass() != null) {
		return getEClass().isSuperTypeOf(getEClassToEdit());
	}
	return true;
}
d37 2
a38 2
«DEFINE canExecute_Normal FOR gmfgen::TypeModelFacet-»
	«IF containmentMetaFeature.ecoreFeature.upperBound > 0 || (childMetaFeature != containmentMetaFeature && childMetaFeature.ecoreFeature.upperBound > 0)-»
d41 5
a45 18
public boolean canExecute() {
	«getQualifiedInterfaceName(containmentMetaFeature.genClass)» container = («getQualifiedInterfaceName(containmentMetaFeature.genClass)») getElementToEdit();
		«IF containmentMetaFeature.ecoreFeature.upperBound > 0-»
			«IF containmentMetaFeature.ecoreFeature.upperBound == 1-»
		if (container.«getGetAccessor(containmentMetaFeature)»() != null) {
			«ELSE-»
		if (container.«getGetAccessor(containmentMetaFeature)»().size() >= «containmentMetaFeature.ecoreFeature.upperBound») {
			«ENDIF-»
			return false;
		}
		«ENDIF-»
		«IF childMetaFeature != containmentMetaFeature && childMetaFeature.ecoreFeature.upperBound > 0-»
			«IF childMetaFeature.ecoreFeature.upperBound == 1-»
		if (container.«getGetAccessor(childMetaFeature)»() != null) {
			«ELSE-»
		if (container.«getGetAccessor(childMetaFeature)»().size() >= «childMetaFeature.ecoreFeature.upperBound») {
			«ENDIF-»
			return false;
d47 6
a53 2
	return true;
}
d57 2
a58 1
«DEFINE getContainmentFeature FOR gmfgen::GenNode-»
d60 6
a65 4
protected org.eclipse.emf.ecore.EReference getContainmentFeature() {
	return null;
}
«ENDDEFINE»
a66 1
«DEFINE getEClassToEdit FOR gmfgen::TypeModelFacet-»
d68 3
a70 4
protected org.eclipse.emf.ecore.EClass getEClassToEdit() {
	return «EXPAND xpt::Common::metaClassAccessor FOR containmentMetaFeature.genClass»;
}
«ENDDEFINE»
a71 1
«DEFINE doDefaultElementCreation_Phantom FOR gmfgen::GenNode-»
d73 13
a85 14
protected org.eclipse.emf.ecore.EObject doDefaultElementCreation() {
	// Uncomment to put "phantom" objects into the diagram file.		
	// org.eclipse.emf.ecore.resource.Resource resource = 
	// 		((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).getContainer().eResource();
	// if (resource == null) {
	// 	return null;
	// }
	org.eclipse.emf.ecore.resource.Resource resource = getElementToEdit().eResource();
	org.eclipse.emf.ecore.EClass eClass = getElementType().getEClass();
	org.eclipse.emf.ecore.EObject newElement = eClass.getEPackage().getEFactoryInstance().create(eClass);
	resource.getContents().add(newElement);
	«EXPAND initialize(this) FOR modelFacet-»
	return newElement;
}
d88 1
a88 2
«DEFINE doDefaultElementCreation_Normal(gmfgen::GenNode node) FOR gmfgen::TypeModelFacet-»
	«IF modelElementInitializer != null || hasExplicitChildFeature(this)-»
d91 13
a103 6
protected org.eclipse.emf.ecore.EObject doDefaultElementCreation() {
	«getQualifiedInterfaceName(metaClass)» newElement = («getQualifiedInterfaceName(metaClass)») super.doDefaultElementCreation();
	if (newElement != null) {
		«IF hasExplicitChildFeature(this)-»
		«getQualifiedInterfaceName(childMetaFeature.genClass)» container = («getQualifiedInterfaceName(childMetaFeature.genClass)») getElementToEdit();
		if (container != null) {
d105 2
a106 1
				«EXPAND xpt::Common::getFeatureValue("container", childMetaFeature.genClass) FOR childMetaFeature».add(newElement);
d110 5
d116 27
d144 1
a144 1
		«EXPAND initialize(node)-»
a145 2
	return «EXPAND xpt::Common::castToEObject FOR metaClass»newElement;
}
a147 6

«DEFINE initialize(gmfgen::GenNode node) FOR gmfgen::TypeModelFacet-»
	«IF modelElementInitializer != null-»
		«node.getDiagram().getElementTypesQualifiedClassName()».Initializers.«node.getUniqueIdentifier()».init(«EXPAND xpt::Common::castToEObject FOR metaClass»newElement);
	«ENDIF-»
«ENDDEFINE»@

