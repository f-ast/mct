head	1.8;
access;
symbols
	v20081022-1925:1.8
	v20081015-1925:1.8
	v20081008-1925:1.8
	v20081001-1925:1.8
	v20080930-1130:1.8
	v20080926-1245:1.8
	v20080924-1925:1.8
	v20080917-1925:1.8
	v20080911-1728:1.8
	v20080910-1520:1.8
	v20080903-1520:1.8
	v20080827-1520:1.8
	v20080813-1520:1.8
	v20080806-1520:1.8
	v20080722-1827:1.8
	v20080718-1731:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080528-1052:1.8
	v20080521:1.8
	v20080516-1543:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080508-2000:1.8
	v20080507-1326:1.8
	v20080503-1740:1.7
	v20080501-1739:1.7
	v20080425-1959:1.7
	v20080417-1610:1.7
	v20080411-0411:1.7
	v20080404-1111:1.7
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20080215-1500:1.7
	v20080207-0207:1.7
	v20071222-1111:1.7
	v20071214-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.7
	v20071112-0000:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070928-0000:1.7
	v20070921-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070520-1200:1.7
	v20070518-1300:1.6
	v20070504-1000:1.5
	v20070427-0600:1.3
	v20070420-1000:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2008.05.07.13.55.59;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	39124821b4de4567;

1.7
date	2007.05.18.21.17.18;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	2591464e17d14567;

1.6
date	2007.05.08.12.14.58;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	3985464069c14567;

1.5
date	2007.05.03.20.42.14;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	7f0b463a49254567;

1.4
date	2007.05.01.13.28.03;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	143a463740554567;

1.3
date	2007.04.24.18.22.42;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	1456462e4af04567;

1.2
date	2007.04.18.19.20.52;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	bf246266f934567;

1.1
date	2007.04.18.17.34.28;	author ashatalin;	state Exp;
branches;
next	;
commitid	2e44462656a24567;


desc
@@


1.8
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»

«DEFINE ChildContainerCanonicalEditPolicy FOR gmfgen::GenChildContainer-»
	«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «getDiagram().editPoliciesPackageName»;

	«EXPAND xpt::Common::generatedClassComment»
public class «canonicalEditPolicyClassName» extends org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy {

	«EXPAND xpt::diagram::updater::containerBaseCanonicalMethods::containerBaseCanonicalMethods-»
	
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenChildContainer»«ENDDEFINE»@


1.7
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.6
log
@Updating copyrights.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.5
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.4
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@a23 1
	«EXPAND xpt::diagram::editpolicies::phantomsSupport::canonicalRefresh-»
@


1.3
log
@DiagramCanonicalEditpolicy template is in XPAND now.
[182556] - getSemanticChildrenList.jetinc generates empty switch statement causing generation to fail
@
text
@d22 1
a22 1
	«EXPAND xpt::diagram::editpolicies::commonBaseCanonicalMethods::commonBaseCanonicalMethods(childNodes)-»
@


1.2
log
@Removing unnecessary parameters + more correct external interface check added.
@
text
@a13 3
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::diagram::editpolicies::Utils»
«EXTENSION xpt::GenModelUtils»
d24 1
a24 1
	«EXPAND phantomsRefreshingMethods-»
a28 129
«REM»
	Not processing phantom children for the compartments - 
	NodeCanonicalEditPolicy is responsible for these nodes 
	creation
«ENDREM»
«DEFINE phantomsRefreshingMethods FOR gmfgen::GenChildContainer»«ENDDEFINE»

«DEFINE phantomsRefreshingMethods FOR gmfgen::GenNode-»
	«IF !getConnectedPhantomNodes(modelFacet, getDiagram()).isEmpty()-»
		«EXPAND refreshSemantic-»
	
		«EXPAND refreshPhantoms-»
	
		«EXPAND createPhantomNodes-»
	
		«EXPAND getDiagramEditPart-»
	
		«EXPAND getDiagram-»

	«ENDIF-»	
«ENDDEFINE»

«DEFINE refreshSemantic FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
protected void refreshSemantic() {
	java.util.List createdViews = new java.util.LinkedList();
	createdViews.addAll(refreshSemanticChildren());
	createdViews.addAll(refreshPhantoms());
	makeViewsImmutable(createdViews);
}
«ENDDEFINE»

«DEFINE refreshPhantoms FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection refreshPhantoms() {
	java.util.Collection phantomNodes = new java.util.LinkedList();
	«modelFacet.metaClass.getQualifiedInterfaceName()» container = («modelFacet.metaClass.getQualifiedInterfaceName()») ((org.eclipse.gmf.runtime.notation.View) getHost().getModel()).getElement();
	org.eclipse.gmf.runtime.notation.Diagram diagram = getDiagram();
	«EXPAND collectPotentialPhantoms(modelFacet.metaClass) FOREACH getOutgoingPhantomLinks(modelFacet, getDiagram())-»
	«EXPAND filterOutInvalidPrantoms-»
	«EXPAND filterOutExistingPrantoms-»
	return createPhantomNodes(phantomNodes);
}
«ENDDEFINE»

«REM»Applicable for GenLinks with FeatureLinkModelFacet only«ENDREM»
«DEFINE collectPotentialPhantoms(genmodel::GenClass containerGenClass) FOR gmfgen::GenLink-»
	«LET ((gmfgen::FeatureLinkModelFacet) modelFacet).metaFeature AS genFeature-»
		«IF isListType(genFeature)-»
phantomNodes.addAll(«EXPAND xpt::Common::getFeatureValue("container", containerGenClass) FOR genFeature»);
		«ELSE-»
phantomNodes.add(«EXPAND xpt::Common::getFeatureValue("container", containerGenClass) FOR genFeature»);
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE filterOutInvalidPrantoms FOR gmfgen::GenNode-»
for (java.util.Iterator it = phantomNodes.iterator(); it.hasNext();) {
	switch («getDiagram().getVisualIDRegistryQualifiedClassName()».getNodeVisualID(diagram, (org.eclipse.emf.ecore.EObject) it.next())) {
	«EXPAND xpt::diagram::editpolicies::commonBaseCanonicalMethods::caseNodeVID FOREACH getConnectedPhantomNodes(modelFacet, getDiagram())-»
		break;
	default:
		it.remove();
	}
}
«ENDDEFINE»

«DEFINE filterOutExistingPrantoms FOR gmfgen::GenNode-»
for (java.util.Iterator diagramNodes = diagram.getChildren().iterator(); diagramNodes.hasNext();) {
	org.eclipse.gmf.runtime.notation.View nextView = (org.eclipse.gmf.runtime.notation.View) diagramNodes.next();
	org.eclipse.emf.ecore.EObject nextViewElement = nextView.getElement();
	if (phantomNodes.contains(nextViewElement)) {
		phantomNodes.remove(nextViewElement);
	}	
}
«ENDDEFINE»

«DEFINE createPhantomNodes FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection createPhantomNodes(java.util.Collection nodes) {
	if (nodes.isEmpty()) {
		return java.util.Collections.EMPTY_LIST;
	}
	java.util.List descriptors = new java.util.ArrayList();
	for (java.util.Iterator elements = nodes.iterator(); elements.hasNext();) {
		org.eclipse.emf.ecore.EObject element = (org.eclipse.emf.ecore.EObject)elements.next();
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor descriptor = getViewDescriptor(element);
		descriptors.add(descriptor);
	}
	org.eclipse.gmf.runtime.notation.Diagram diagram = getDiagram();
	org.eclipse.gef.EditPart diagramEditPart = getDiagramEditPart();
	
	org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest request = getCreateViewRequest(descriptors);
	org.eclipse.gef.commands.Command cmd = diagramEditPart.getCommand(request);
	if (cmd == null) {
		org.eclipse.gmf.runtime.common.core.command.CompositeCommand cc = new org.eclipse.gmf.runtime.common.core.command.CompositeCommand(org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages.AddCommand_Label);
		for (java.util.Iterator descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {
			org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor descriptor = (org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor) descriptorsIterator.next();
			org.eclipse.gmf.runtime.common.core.command.ICommand createCommand = new org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand(((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getEditingDomain(), descriptor, diagram);
			cc.compose(createCommand);
		}
		cmd = new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(cc);
	}	
	
	java.util.List adapters = java.util.Collections.EMPTY_LIST;
	if (cmd != null && cmd.canExecute()) {
		org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand.makeMutable(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) diagramEditPart).getNotationView())).execute();
		executeCommand(cmd);
		adapters = (java.util.List) request.getNewObject();
	}
	diagramEditPart.refresh();
	return adapters;
}
«ENDDEFINE»

«DEFINE getDiagramEditPart FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gef.EditPart getDiagramEditPart() {
	return (org.eclipse.gef.EditPart) getHost().getViewer().getEditPartRegistry().get(getDiagram());
}
«ENDDEFINE»

«DEFINE getDiagram FOR gmfgen::GenNode-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.notation.Diagram getDiagram() {
	return ((org.eclipse.gmf.runtime.notation.View) getHost().getModel()).getDiagram();
}
«ENDDEFINE»

@


1.1
log
@Rewriting template to xpt

[170079] - Do not generate unnecessary CanonicalEditPolicies in case if phantoms are allowed for diagram
@
text
@d81 1
a81 1
phantomNodes.addAll(«EXPAND xpt::Common::getFeatureValue("container", containerGenClass, true) FOR genFeature»);
d83 1
a83 1
phantomNodes.add(«EXPAND xpt::Common::getFeatureValue("container", containerGenClass, true) FOR genFeature»);
@

