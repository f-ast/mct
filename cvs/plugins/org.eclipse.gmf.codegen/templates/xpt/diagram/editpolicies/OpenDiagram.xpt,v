head	1.17;
access;
symbols
	v20081022-1925:1.17
	v20081015-1925:1.17
	v20081008-1925:1.15
	v20081001-1925:1.15
	v20080930-1130:1.15
	v20080926-1245:1.15
	v20080924-1925:1.15
	v20080917-1925:1.15
	v20080911-1728:1.15
	v20080910-1520:1.15
	v20080903-1520:1.15
	v20080827-1520:1.15
	v20080813-1520:1.15
	v20080806-1520:1.15
	v20080722-1827:1.15
	v20080718-1731:1.15
	v20080716-1600:1.15
	v20080716-1642:1.15
	R2_1_maintenance:1.15.0.2
	Root_R2_1_maintenance:1.15
	R2_1_0:1.15
	v20080610-1132:1.15
	v20080603-1553:1.15
	v20080528-1052:1.14
	v20080521:1.14
	v20080516-1543:1.14
	v20080516-1143:1.14
	v20080512-1200:1.13
	v20080508-2000:1.13
	v20080507-1326:1.13
	v20080503-1740:1.12
	v20080501-1739:1.12
	v20080425-1959:1.12
	v20080417-1610:1.12
	v20080411-0411:1.12
	v20080404-1111:1.12
	v20080322-0000:1.12
	v20080222-1200:1.12
	v20080215-1500:1.12
	v20080207-0207:1.12
	v20071222-1111:1.12
	v20071214-1111:1.12
	v20071130-1111:1.12
	v20071124-0000:1.12
	v20071112-0000:1.12
	v20071108-0000:1.12
	v20071003-0000:1.12
	v20070928-0000:1.12
	v20070921-0000:1.12
	v20070915-0000:1.12
	v20070903-0000:1.12
	v20070809-0000:1.12
	R2_0_maintenance:1.12.0.2
	R2_0:1.12
	R4_20:1.12
	v20070621-0000:1.12
	RC3_20:1.12
	v20070614-1400:1.12
	v20070608-1300:1.10
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070520-1200:1.9
	v20070518-1300:1.8
	v20070504-1000:1.6
	v20070427-0600:1.6
	v20070420-1000:1.6
	v20070413-1300:1.5
	v20070405-1100:1.4
	v20070403-1500:1.4
	v20070330-1300:1.4
	v20060330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070307-0700:1.4
	v20070301-1200:1.4
	v20070228-2000:1.4
	v20070221-1500:1.4
	v20070208-1800:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.17
date	2008.10.15.18.01.18;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	b45d48f62fed4567;

1.16
date	2008.10.15.17.35.45;	author atikhomirov;	state Exp;
branches;
next	1.15;
commitid	966a48f629f04567;

1.15
date	2008.06.03.16.22.41;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	69b848456fd14567;

1.14
date	2008.05.15.10.35.51;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	7069482c12074567;

1.13
date	2008.05.07.13.55.59;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	39124821b4de4567;

1.12
date	2007.06.12.10.58.04;	author bblajer;	state Exp;
branches;
next	1.11;
commitid	4af9466e7c3c4567;

1.11
date	2007.06.11.13.36.23;	author ashatalin;	state Exp;
branches;
next	1.10;
commitid	4172466d4fd34567;

1.10
date	2007.06.06.12.00.09;	author ashatalin;	state Exp;
branches;
next	1.9;
commitid	d7e4666a1c84567;

1.9
date	2007.05.18.21.17.18;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	2591464e17d14567;

1.8
date	2007.05.18.10.36.21;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	a70464d81a44567;

1.7
date	2007.05.15.19.19.22;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	43d3464a07b84567;

1.6
date	2007.04.13.14.39.28;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	6bf3461f961f4567;

1.5
date	2007.04.05.15.03.04;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	7e8946150fa54567;

1.4
date	2007.02.08.20.05.06;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	49d745cb82724567;

1.3
date	2007.02.08.19.07.09;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	6ed845cb74dc4567;

1.2
date	2007.02.02.20.49.45;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	50c945c3a3e84567;

1.1
date	2007.02.01.11.26.40;	author dstadnik;	state Exp;
branches;
next	;
commitid	69af45c1ce6e4567;


desc
@@


1.17
log
@[249301] Wrap use of assert  into dedicated template
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«EXTENSION xpt::diagram::editpolicies::Utils»

«DEFINE OpenDiagram FOR gmfgen::OpenDiagramBehaviour»
«EXPAND xpt::Common::copyright FOR subject.getDiagram().editorGen-»
package «subject.getDiagram().editPoliciesPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «editPolicyClassName» extends «EXPAND extendsList» {

«EXPAND getOpenCommand-»

«EXPAND openCommandClass-»

«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE extendsList FOR OpenDiagramBehaviour»org.eclipse.gmf.runtime.diagram.ui.editpolicies.OpenEditPolicy«ENDDEFINE»

«DEFINE getOpenCommand FOR OpenDiagramBehaviour»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gef.commands.Command getOpenCommand(org.eclipse.gef.Request request) {
		org.eclipse.gef.EditPart targetEditPart = getTargetEditPart(request);
		if (false == targetEditPart.getModel() instanceof org.eclipse.gmf.runtime.notation.View) {
			return null;
		}
		org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) targetEditPart.getModel();
		org.eclipse.gmf.runtime.notation.Style link = view.getStyle(org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getHintedDiagramLinkStyle());
		if (false == link instanceof org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle) {
			return null;
		}
		return new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(new OpenDiagramCommand((org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle) link));
	}
«ENDDEFINE»

«DEFINE openCommandClass FOR OpenDiagramBehaviour»
	«EXPAND xpt::Common::generatedMemberComment»
	private static class OpenDiagramCommand extends org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand {

		«EXPAND xpt::Common::generatedMemberComment»
		private final org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle diagramFacet;

		«EXPAND xpt::Common::generatedMemberComment»
		OpenDiagramCommand(org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle linkStyle) {
			// editing domain is taken for original diagram, 
			// if we open diagram from another file, we should use another editing domain
			super(org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(linkStyle), «EXPAND xpt::Externalizer::accessorCall(i18nKeyForOpenCommandName()) FOR subject.getDiagram().editorGen», null);
			diagramFacet = linkStyle;
		}

		// FIXME canExecute if  !(readOnly && getDiagramToOpen == null), i.e. open works on ro diagrams only when there's associated diagram already

		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
			try {
				org.eclipse.gmf.runtime.notation.Diagram diagram = getDiagramToOpen();
				if (diagram == null) {
					diagram = intializeNewDiagram();
				}
				«EXPAND xpt::navigator::getEditorInput::defineURIEditorInput("diagram") FOR subject.getDiagram()-»
				org.eclipse.ui.IWorkbenchPage page = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
				page.openEditor(editorInput, getEditorID());
				return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult();
			} catch (Exception ex) {
				throw new org.eclipse.core.commands.ExecutionException("Can't open diagram", ex);
			}
		}

		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.gmf.runtime.notation.Diagram getDiagramToOpen() {
			return diagramFacet.getDiagramLink();
		}

		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.gmf.runtime.notation.Diagram intializeNewDiagram() throws org.eclipse.core.commands.ExecutionException {
			org.eclipse.gmf.runtime.notation.Diagram d = org.eclipse.gmf.runtime.diagram.core.services.ViewService.createDiagram(getDiagramDomainElement(), getDiagramKind(), getPreferencesHint());
			if (d == null) {
				throw new org.eclipse.core.commands.ExecutionException("Can't create diagram of '" + getDiagramKind() + "' kind");
			}
			diagramFacet.setDiagramLink(d);
			«EXPAND xpt::Common::assert("diagramFacet.eResource() != null")-»
			diagramFacet.eResource().getContents().add(d);
			org.eclipse.emf.ecore.EObject container = diagramFacet.eContainer();
			while (container instanceof org.eclipse.gmf.runtime.notation.View) {
				((org.eclipse.gmf.runtime.notation.View) container).persist();
				container = container.eContainer();
			}
			try {
			«IF null == subject.getDiagram().editorGen.application-»
				new org.eclipse.ui.actions.WorkspaceModifyOperation() {
					protected void execute(org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException, java.lang.reflect.InvocationTargetException, InterruptedException {
						try {
			«ENDIF-»
				for (java.util.Iterator it = diagramFacet.eResource().getResourceSet().getResources().iterator(); it.hasNext();) {
					org.eclipse.emf.ecore.resource.Resource nextResource = (org.eclipse.emf.ecore.resource.Resource) it.next();
					if (nextResource.isLoaded() && !getEditingDomain().isReadOnly(nextResource)) {
						nextResource.save(«EXPAND xpt::Common::getSaveOptions FOR subject.getDiagram()»);
					}
				}
			«IF null == subject.getDiagram().editorGen.application-»
						} catch (java.io.IOException ex) {
							throw new java.lang.reflect.InvocationTargetException(ex, "Save operation failed");
						}		
					}
				}.run(null);
			} catch (java.lang.reflect.InvocationTargetException e) {
				throw new org.eclipse.core.commands.ExecutionException("Can't create diagram of '" + getDiagramKind() + "' kind", e);
			} catch (InterruptedException e) {
				throw new org.eclipse.core.commands.ExecutionException("Can't create diagram of '" + getDiagramKind() + "' kind", e);
			}
			«ELSE-»
			} catch (java.io.IOException ex) {
				throw new org.eclipse.core.commands.ExecutionException("Can't create diagram of '" + getDiagramKind() + "' kind", ex);
			}
			«ENDIF-»
			return d;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.emf.ecore.EObject getDiagramDomainElement() {
			// use same element as associated with EP
			return ((org.eclipse.gmf.runtime.notation.View) diagramFacet.eContainer()).getElement();
		}

		«EXPAND xpt::Common::generatedMemberComment»
		protected org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint getPreferencesHint() {
			// XXX prefhint from target diagram's editor?
			return «EXPAND xpt::plugin::Activator::preferenceHintAccess FOR subject.getDiagram().editorGen»;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		protected String getDiagramKind() {
			return «IF diagramKind == null»«EXPAND xpt::editor::VisualIDRegistry::modelID FOR subject.getDiagram()»«ELSE»"«diagramKind»"«ENDIF»;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		protected String getEditorID() {
			return «IF editorID == null»«subject.getDiagram().editorGen.editor.getQualifiedClassName()».ID«ELSE»"«editorID»"«ENDIF»;
		}
	}
«ENDDEFINE»

«DEFINE additions FOR OpenDiagramBehaviour»«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
«EXPAND xpt::Externalizer::accessorField(i18nKeyForOpenCommandName())-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForOpenCommandName(), "Open Diagram")-»
«ENDDEFINE»

@


1.16
log
@[250767] refactored to access DIAGRAM_PREFERENCES_HINT uniformly
@
text
@d94 1
a94 1
			assert diagramFacet.eResource() != null;
@


1.15
log
@Fully-qualified class names used.
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d141 1
a141 1
			return «subject.getDiagram().editorGen.plugin.getActivatorQualifiedClassName()».DIAGRAM_PREFERENCES_HINT;
@


1.14
log
@[ 232229] - Issue of initializing a diagram file when diagram partitioning is applied
@
text
@d96 3
a98 3
			EObject container = diagramFacet.eContainer();
			while (container instanceof View) {
				((View) container).persist();
@


1.13
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d96 5
@


1.12
log
@[191924]: Adopt lite generator to use newly created /navigator/NavigatorLabelProvider.xpt
[191954]: Adopt lite generator to use newly created /navigator/NavigatorActionProvider.xpt
@
text
@d12 1
a12 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.11
log
@[191850] - Convert /navigator/NavigatorActionProvider.javajet template to xpand
@
text
@d73 1
a73 1
				«EXPAND defineURIEditorInput("diagram") FOR subject.getDiagram()-»
a150 6
«DEFINE defineURIEditorInput(String diagramVarName) FOR gmfgen::GenDiagram-»
org.eclipse.emf.common.util.URI uri = org.eclipse.emf.ecore.util.EcoreUtil.getURI(«diagramVarName»);
String editorName = uri.lastSegment() + "#" + «diagramVarName».eResource().getContents().indexOf(«diagramVarName»); «EXPAND xpt::Common::nonNLS»
org.eclipse.ui.IEditorInput editorInput = new org.eclipse.emf.common.ui.URIEditorInput(uri, editorName);
«ENDDEFINE»

@


1.10
log
@[184195] - Make use of new URIEditorInput(String) constructor in generated code
@
text
@d13 1
d73 1
a73 3
				org.eclipse.emf.common.util.URI uri = org.eclipse.emf.ecore.util.EcoreUtil.getURI(diagram);
				String editorName = uri.lastSegment() + "#" + diagram.eResource().getContents().indexOf(diagram); «EXPAND xpt::Common::nonNLS»
				org.eclipse.ui.IEditorInput editorInput = new org.eclipse.emf.common.ui.URIEditorInput(uri, editorName);
d151 6
@


1.9
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d72 3
a74 3
				org.eclipse.emf.common.util.URI uri = diagram.eResource().getURI();
				uri = uri.appendFragment(diagram.eResource().getURIFragment(diagram));
				org.eclipse.ui.IEditorInput editorInput = new org.eclipse.emf.common.ui.URIEditorInput(uri);
@


1.8
log
@Updated OpenDiagramEditPolicy generation to utilize newly introduced (bug #159479) appropriate diagram styles instead of annotations
@
text
@d12 1
a12 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.7
log
@Replacing static method calls with templates.
@
text
@a31 2
«DEFINE annotationSourceConstant FOR OpenDiagramBehaviour»"uri://eclipse.org/gmf/openDiagramPolicy"«ENDDEFINE»

d39 3
a41 2
		org.eclipse.emf.ecore.EAnnotation ann = ((org.eclipse.gmf.runtime.notation.View) targetEditPart.getModel()).getEAnnotation(«EXPAND annotationSourceConstant»);
		if (ann == null) {
d44 1
a44 1
		return new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(new OpenDiagramCommand(ann));
d53 1
a53 1
		private final org.eclipse.emf.ecore.EAnnotation diagramFacet;
d56 1
a56 1
		OpenDiagramCommand(org.eclipse.emf.ecore.EAnnotation annotation) {
d59 2
a60 2
			super(org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(annotation), «EXPAND xpt::Externalizer::accessorCall(i18nKeyForOpenCommandName()) FOR subject.getDiagram().editorGen», null);
			diagramFacet = annotation;
d85 1
a85 8
			// take first
			for (java.util.Iterator it = diagramFacet.getReferences().iterator(); it.hasNext();) {
				Object next = it.next();
				if (next instanceof org.eclipse.gmf.runtime.notation.Diagram) {
					return (org.eclipse.gmf.runtime.notation.Diagram) next;
				}
			}
			return null;
d94 1
a94 1
			diagramFacet.getReferences().add(d);
d131 1
a131 1
			return ((org.eclipse.gmf.runtime.notation.View) diagramFacet.getEModelElement()).getElement();
@


1.6
log
@Saving non-readonly resources.
@
text
@d150 1
a150 1
			return «IF diagramKind == null»«subject.getDiagram().getEditPartQualifiedClassName()».MODEL_ID«ELSE»"«diagramKind»"«ENDIF»;
@


1.5
log
@[179970] - Adopt code generater to make use of EMF "conditional resource saving"
@
text
@d113 1
a113 1
					if (nextResource.isLoaded()) {
@


1.4
log
@Refactoring DocumentProvider.
@
text
@d113 2
a114 2
					if (nextResource.isLoaded() && (!nextResource.isTrackingModification() || nextResource.isModified())) {
						nextResource.save(java.util.Collections.EMPTY_MAP);
@


1.3
log
@Refactoring DocumentProvider.
@
text
@d106 5
d117 12
d132 1
@


1.2
log
@[139733] akarjakina - lack of i18n support. More templates i18n-ed
@
text
@d107 4
a110 1
					((org.eclipse.emf.ecore.resource.Resource) it.next()).save(java.util.Collections.EMPTY_MAP);
@


1.1
log
@[172460] Allow to generate open diagram editpolicy
@
text
@d13 1
d60 1
a60 1
			super(org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(annotation), "Open diagram", null);
d140 9
@

