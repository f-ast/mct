head	1.23;
access;
symbols
	v20081022-1925:1.23
	v20081015-1925:1.23
	v20081008-1925:1.23
	v20081001-1925:1.23
	v20080930-1130:1.23
	v20080926-1245:1.23
	v20080924-1925:1.23
	v20080917-1925:1.23
	v20080911-1728:1.23
	v20080910-1520:1.23
	v20080903-1520:1.23
	v20080827-1520:1.22
	v20080813-1520:1.21
	v20080806-1520:1.21
	v20080722-1827:1.21
	v20080718-1731:1.21
	v20080716-1600:1.21
	v20080716-1642:1.21
	R2_1_maintenance:1.21.0.2
	Root_R2_1_maintenance:1.21
	R2_1_0:1.21
	v20080610-1132:1.21
	v20080603-1553:1.21
	v20080528-1052:1.21
	v20080521:1.21
	v20080516-1543:1.21
	v20080516-1143:1.21
	v20080512-1200:1.21
	v20080508-2000:1.21
	v20080507-1326:1.21
	v20080503-1740:1.19
	v20080501-1739:1.19
	v20080425-1959:1.19
	v20080417-1610:1.19
	v20080411-0411:1.19
	v20080404-1111:1.19
	v20080322-0000:1.19
	v20080222-1200:1.19
	v20080215-1500:1.19
	v20080207-0207:1.19
	v20071222-1111:1.19
	v20071214-1111:1.19
	v20071130-1111:1.19
	v20071124-0000:1.19
	v20071112-0000:1.19
	v20071108-0000:1.19
	v20071003-0000:1.19
	v20070928-0000:1.19
	v20070921-0000:1.19
	v20070915-0000:1.19
	v20070903-0000:1.19
	v20070809-0000:1.19
	R2_0_maintenance:1.19.0.2
	R2_0:1.19
	R4_20:1.19
	v20070621-0000:1.19
	RC3_20:1.19
	v20070614-1400:1.19
	v20070608-1300:1.19
	v20070605-1400:1.19
	v20070601-1400:1.19
	v20070525-1500:1.18
	v20070520-1200:1.18
	v20070518-1300:1.17
	v20070504-1000:1.13
	v20070427-0600:1.9
	v20070420-1000:1.7
	v20070413-1300:1.6
	v20070405-1100:1.5
	v20070403-1500:1.4
	v20070330-1300:1.4
	v20060330-1300:1.4
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070307-0700:1.2
	v20070301-1200:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.23
date	2008.08.29.11.42.44;	author dstadnik;	state Exp;
branches;
next	1.22;
commitid	693e48b7e0ae4567;

1.22
date	2008.08.22.15.20.15;	author atikhomirov;	state Exp;
branches;
next	1.21;
commitid	1abb48aed9234567;

1.21
date	2008.05.07.13.55.59;	author atikhomirov;	state Exp;
branches;
next	1.20;
commitid	39124821b4de4567;

1.20
date	2008.05.05.21.06.41;	author atikhomirov;	state Exp;
branches;
next	1.19;
commitid	4186481f76b14567;

1.19
date	2007.05.28.16.52.23;	author ashatalin;	state Exp;
branches;
next	1.18;
commitid	51cb465b08c54567;

1.18
date	2007.05.18.21.17.18;	author atikhomirov;	state Exp;
branches;
next	1.17;
commitid	2591464e17d14567;

1.17
date	2007.05.16.19.17.03;	author ashatalin;	state Exp;
branches;
next	1.16;
commitid	6987464b58af4567;

1.16
date	2007.05.16.18.44.42;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	4320464b51194567;

1.15
date	2007.05.08.12.14.58;	author ashatalin;	state Exp;
branches;
next	1.14;
commitid	3985464069c14567;

1.14
date	2007.05.04.15.27.49;	author ashatalin;	state Exp;
branches;
next	1.13;
commitid	6ef6463b50ec4567;

1.13
date	2007.05.04.09.57.48;	author ashatalin;	state Exp;
branches;
next	1.12;
commitid	53fc463b039b4567;

1.12
date	2007.05.03.20.42.14;	author ashatalin;	state Exp;
branches;
next	1.11;
commitid	7f0b463a49254567;

1.11
date	2007.05.01.13.28.03;	author ashatalin;	state Exp;
branches;
next	1.10;
commitid	143a463740554567;

1.10
date	2007.04.27.17.49.26;	author ashatalin;	state Exp;
branches;
next	1.9;
commitid	45d8463237a64567;

1.9
date	2007.04.24.18.22.42;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	1456462e4af04567;

1.8
date	2007.04.24.11.49.06;	author dstadnik;	state Exp;
branches;
next	1.7;
commitid	7f1d462deeb14567;

1.7
date	2007.04.18.17.34.28;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	2e44462656a24567;

1.6
date	2007.04.12.14.15.23;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	7d7a461e3efb4567;

1.5
date	2007.04.03.19.28.21;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	24744612aad14567;

1.4
date	2007.03.23.09.27.29;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	6f4346039d7f4567;

1.3
date	2007.03.15.16.11.54;	author dstadnik;	state Exp;
branches;
next	1.2;
commitid	620045f9703f4567;

1.2
date	2007.02.02.20.49.45;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	50c945c3a3e84567;

1.1
date	2007.02.01.11.51.44;	author dstadnik;	state Exp;
branches;
next	;
commitid	dd445c1d44e4567;


desc
@@


1.23
log
@[245681] allow to specify whether link is reroutable
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 *    Michael Golubev (Borland) - [243151] explicit source/target for links
 */
 
import "http://www.eclipse.org/gmf/2008/GenModel";
import "http://www.eclipse.org/emf/2002/Ecore";
extension xpt::diagram::editpolicies::LinkUtils;
extension xpt::GenModelUtils;

boolean hasChildrenOrCompartments(gmfgen::GenNode node) :
	!node.childNodes.isEmpty() || !node.compartments.isEmpty()
;

String getContainerVariable(gmfgen::TypeLinkModelFacet modelFacet) :
	null != modelFacet.sourceMetaFeature
		? "container"
		: "source"
;

List[gmfgen::GenLinkConstraints] getValidLinkConstraints(gmfgen::GenDiagram diagram) :
	diagram.links.select(l | null != l.creationConstraints && l.creationConstraints.isValid()).collect(l | l.creationConstraints)
;

List[gmfgen::GenLink] getAllPotentialLinks(gmfgen::GenLinkEnd linkEnd) :
	getAllRelatedLinks(linkEnd).select(link | isCreationAllowed(link))
;

List[gmfgen::GenLink] getReroutableTypeLinks(gmfgen::GenLinkEnd linkEnd) :
	getAllRelatedReroutableLinks(linkEnd).select(link | isTypeLink(link))
;

List[gmfgen::GenLink] getReroutableRefLinks(gmfgen::GenLinkEnd linkEnd) :
	getAllRelatedReroutableLinks(linkEnd).select(link | isRefLink(link))
;

//XXX[MG]: again, it would be better to use linkEnd.incomingLinks.union(linkEnd.outgoingLinks).toList() 
//but it will change the ordering and produce meaningless diff in the generated code
private cached List[gmfgen::GenLink] getAllRelatedLinks(gmfgen::GenLinkEnd linkEnd) :
	linkEnd.getDiagram().links.select(link | canBeSource(link, linkEnd) || canBeTarget(link, linkEnd))
;

private cached List[gmfgen::GenLink] getAllRelatedReroutableLinks(gmfgen::GenLinkEnd linkEnd) :
	linkEnd.getDiagram().links.select(link | (canBeSource(link, linkEnd) && link.sourceReorientingAllowed) || (canBeTarget(link, linkEnd) && link.targetReorientingAllowed))
;

private boolean isCreationAllowed(gmfgen::GenLink link) : 
	null != link.modelFacet && 
	(link.outgoingCreationAllowed || link.incomingCreationAllowed) 
;	 

boolean createStartLinkCommand(gmfgen::GenLink link, gmfgen::GenLinkEnd linkEnd) :
	createStartOutgoingLinkCommand(link, linkEnd) || createStartIncomingLinkCommand(link, linkEnd)
;

boolean createStartOutgoingLinkCommand(gmfgen::GenLink link, gmfgen::GenLinkEnd linkEnd) :
	isSelf(link, linkEnd) || (isOutgoing(link, linkEnd) && link.outgoingCreationAllowed)
;

boolean createStartIncomingLinkCommand(gmfgen::GenLink link, gmfgen::GenLinkEnd linkEnd) :
	isIncoming(link, linkEnd) && link.incomingCreationAllowed
;

boolean createCompleteLinkCommand(gmfgen::GenLink link, gmfgen::GenLinkEnd linkEnd) :
	createCompleteIncomingLinkCommand(link, linkEnd) || createCompleteOutgoingLinkCommand(link, linkEnd)
;

boolean createCompleteIncomingLinkCommand(gmfgen::GenLink link, gmfgen::GenLinkEnd linkEnd) :
	isSelf(link, linkEnd) || (isIncoming(link, linkEnd) && link.outgoingCreationAllowed)
;

boolean createCompleteOutgoingLinkCommand(gmfgen::GenLink link, gmfgen::GenLinkEnd linkEnd) :
	isOutgoing(link, linkEnd) && link.incomingCreationAllowed
;

boolean checkSource(boolean reversedRequest, boolean isCompleteCommand) :
	!reversedRequest || isCompleteCommand
;

boolean checkTarget(boolean reversedRequest, boolean isCompleteCommand) :
	reversedRequest || isCompleteCommand
;

private boolean isSelf(gmfgen::GenLink link, gmfgen::GenLinkEnd linkEnd) :
	canBeSource(link, linkEnd) && canBeTarget(link, linkEnd)
;

private boolean isOutgoing(gmfgen::GenLink link, gmfgen::GenLinkEnd linkEnd) :
	canBeSource(link, linkEnd) && !canBeTarget(link, linkEnd)
;

private boolean isIncoming(gmfgen::GenLink link, gmfgen::GenLinkEnd linkEnd) :
	canBeTarget(link, linkEnd) && !canBeSource(link, linkEnd)
;

String i18nKeyForOpenCommandName() :
"CommandName.OpenDiagram"
;
@


1.22
log
@[243151] mgolubev - explicit source/target for links
@
text
@d38 1
a38 1
	getAllRelatedLinks(linkEnd).select(link | isTypeLink(link))
d42 1
a42 1
	getAllRelatedLinks(linkEnd).select(link | isRefLink(link))
d48 5
a52 2
	linkEnd.getDiagram().links
		.select(link | canBeSource(link, linkEnd) || canBeTarget(link, linkEnd))
@


1.21
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d11 1
d33 2
a34 2
List[gmfgen::GenLink] getAllPotentialLinks(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	selectValidLinks(diagram.links).select(l | isSelf(l, typeModelFacet) || isOutgoing(l, typeModelFacet) || isIncoming(l, typeModelFacet))
d37 2
a38 2
List[gmfgen::GenLink] getReroutableTypeLinks(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | isTypeLink(link) && (canBeSource(link, typeModelFacet) || canBeTarget(link, typeModelFacet)))
d41 2
a42 2
List[gmfgen::GenLink] getReroutableRefLinks(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | isRefLink(link) && (canBeSource(link, typeModelFacet) || canBeTarget(link, typeModelFacet)))
d45 5
a49 3
private List[gmfgen::GenLink] selectValidLinks(List[gmfgen::GenLink] allLinks) :
	allLinks.select(l | null != l.modelFacet)
		.select(l | l.outgoingCreationAllowed || l.incomingCreationAllowed)
d52 7
a58 2
boolean createStartLinkCommand(gmfgen::GenLink link, gmfgen::TypeModelFacet typeModelFacet) :
	createStartOutgoingLinkCommand(link, typeModelFacet) || createStartIncomingLinkCommand(link, typeModelFacet)
d61 2
a62 2
boolean createStartOutgoingLinkCommand(gmfgen::GenLink link, gmfgen::TypeModelFacet typeModelFacet) :
	isSelf(link, typeModelFacet) || (isOutgoing(link, typeModelFacet) && link.outgoingCreationAllowed)
d65 2
a66 2
boolean createStartIncomingLinkCommand(gmfgen::GenLink link, gmfgen::TypeModelFacet typeModelFacet) :
	isIncoming(link, typeModelFacet) && link.incomingCreationAllowed
d69 2
a70 2
boolean createCompleteLinkCommand(gmfgen::GenLink link, gmfgen::TypeModelFacet typeModelFacet) :
	createCompleteIncomingLinkCommand(link, typeModelFacet) || createCompleteOutgoingLinkCommand(link, typeModelFacet)
d73 2
a74 2
boolean createCompleteIncomingLinkCommand(gmfgen::GenLink link, gmfgen::TypeModelFacet typeModelFacet) :
	isSelf(link, typeModelFacet) || (isIncoming(link, typeModelFacet) && link.outgoingCreationAllowed)
d77 2
a78 2
boolean createCompleteOutgoingLinkCommand(gmfgen::GenLink link, gmfgen::TypeModelFacet typeModelFacet) :
	isOutgoing(link, typeModelFacet) && link.incomingCreationAllowed
d89 2
a90 2
private boolean isSelf(gmfgen::GenLink link, gmfgen::TypeModelFacet typeModelFacet) :
	canBeSource(link, typeModelFacet) && canBeTarget(link, typeModelFacet)
d93 2
a94 2
private boolean isOutgoing(gmfgen::GenLink link, gmfgen::TypeModelFacet typeModelFacet) :
	canBeSource(link, typeModelFacet) && !isSelf(link, typeModelFacet)
d97 2
a98 2
private boolean isIncoming(gmfgen::GenLink link, gmfgen::TypeModelFacet typeModelFacet) :
	canBeTarget(link, typeModelFacet) && !isSelf(link, typeModelFacet)
@


1.20
log
@[228913] cleaned isCopy and java provider's getOperationName that are not in use any more; introduced fine-tuning options: use expressions body for java methods and whether to throw exception or fail silently (using reasonable/appropriate for the context default value), latter change obsoleted NoImplException and respective debug options
@
text
@d13 1
a13 1
import "http://www.eclipse.org/gmf/2006/GenModel";
@


1.19
log
@- ViewProvider is in xpand now.
- Separating semantic part of VisualIDRegistry from pure-notation.
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
a27 8
boolean hasJavaConstraints(gmfgen::GenDiagram diagram) :
	!diagram.editorGen.expressionProviders.providers.typeSelect(gmfgen::GenJavaExpressionProvider).isEmpty()
;

boolean hasInterpreterConstraints(gmfgen::GenDiagram diagram) :
	!diagram.editorGen.expressionProviders.providers.typeSelect(gmfgen::GenExpressionInterpreter).isEmpty()
;

@


1.18
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@a51 8
private boolean isTypeLink(gmfgen::GenLink link) :
	{link.modelFacet}.typeSelect(gmfgen::TypeLinkModelFacet).size() > 0
;

private boolean isRefLink(gmfgen::GenLink link) :
	{link.modelFacet}.typeSelect(gmfgen::FeatureLinkModelFacet).size() > 0
;

@


1.17
log
@Log messages are not licalized in GMF.
@
text
@d13 1
a13 1
import "http://www.eclipse.org/gmf/2005/GenModel/2.0";
@


1.16
log
@Refactoring templates to store ExpressionInterpreter-based definition in the same file.
@
text
@a108 4
String i18nKeyForLinkConstraintErrorLog() :
"EvaluateOCLLinkConstraintError"
;

@


1.15
log
@Updating copyrights.
@
text
@d29 1
a29 1
	!getAllExpressionProviders(getValidLinkConstraints(diagram), getExpressionProvider(diagram)).typeSelect(gmfgen::GenJavaExpressionProvider).isEmpty()
d32 2
a33 18
boolean hasOCLConstraints(gmfgen::GenDiagram diagram) :
	!getAllExpressionProviders(getValidLinkConstraints(diagram), getExpressionProvider(diagram)).typeSelect(gmfgen::GenExpressionInterpreter).isEmpty()
;

private gmfgen::GenExpressionProviderContainer getExpressionProvider(gmfgen::GenDiagram diagram) :
	diagram.editorGen.expressionProviders
;

private List[gmfgen::GenExpressionProviderBase] getAllExpressionProviders(List[gmfgen::GenLinkConstraints] constraints, gmfgen::GenExpressionProviderContainer providersContainer) :
	constraints.collect(c | c.sourceEnd).addAll(constraints.collect(c | c.targetEnd)).select(c | null != c).typeSelect(gmfgen::GenConstraint).collect(c | providersContainer.getProvider(c))
;

String getTargetExpressionVarName(gmfgen::GenLink link) :
	link.getUniqueIdentifier() + "_TargetExpression"
;

String getSourceExpressionVarName(gmfgen::GenLink link) :
	link.getUniqueIdentifier() + "_SourceExpression"
@


1.14
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.13
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@a13 1
import "http://www.eclipse.org/emf/2002/GenModel";
d15 1
a17 24
List[gmfgen::GenLink] getAllContainedLinks(gmfgen::GenDiagram diagram) :
	diagram.links.select(link | !getAllContainerModelFacets(diagram).select(modelFacet | canBeContainer(link, modelFacet)).isEmpty())
;

cached List[gmfgen::TypeModelFacet] getAllContainerModelFacets(gmfgen::GenDiagram diagram) :
	diagram.getAllNodes().collect(node | node.modelFacet).addAll(getTypeModelFacets(diagram.links))
;

private List[gmfgen::TypeLinkModelFacet] getTypeModelFacets(List[gmfgen::GenLink] links) :
	links.select(link | null != link.modelFacet && isTypeModelFacet(link.modelFacet)).collect(link | link.modelFacet)
;

private boolean isTypeModelFacet(gmfgen::LinkModelFacet modelFacet) :
	false
;

private boolean isTypeModelFacet(gmfgen::TypeLinkModelFacet modelFacet) :
	true
;

cached List[gmfgen::GenLink] getContainedLinks(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | canBeContainer(link, typeModelFacet))
;

a124 33
private boolean canBeSource(gmfgen::GenLink link, gmfgen::TypeModelFacet typeModelFacet) :
	null != link.modelFacet && canBeLinkEnd(link.modelFacet.getSourceType(), typeModelFacet)
;

private boolean canBeTarget(gmfgen::GenLink link, gmfgen::TypeModelFacet typeModelFacet) :
	null != link.modelFacet && canBeLinkEnd(link.modelFacet.getTargetType(), typeModelFacet)
;

boolean canBeContainer(gmfgen::GenLink link, gmfgen::TypeModelFacet typeModelFacet) :
	null != link.modelFacet && null != getContainerClass(link.modelFacet) && canBeLinkEnd(getContainerClass(link.modelFacet), typeModelFacet)
;

genmodel::GenClass getContainerClass(gmfgen::LinkModelFacet modelFacet) :
// Should not be called
	null
;

genmodel::GenClass getContainerClass(gmfgen::TypeLinkModelFacet modelFacet) :
	modelFacet.containmentMetaFeature.genClass
;

genmodel::GenClass getContainerClass(gmfgen::FeatureLinkModelFacet modelFacet) :
	modelFacet.metaFeature.genClass
;

private boolean canBeLinkEnd(genmodel::GenClass endType, gmfgen::TypeModelFacet typeModelFacet) :
	null != endType && endType.ecoreClass.isSuperTypeOf(getMetaclass(typeModelFacet))
;

private ecore::EClass getMetaclass(gmfgen::TypeModelFacet typeModelFacet) :
	typeModelFacet.metaClass.ecoreClass
;

@


1.12
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d18 2
a19 2
List[gmfgen::GenLink] getAllSemanticLinks(gmfgen::GenDiagram diagram) :
	diagram.links.select(link | containedInNode(link, diagram) || containedInLink(link, diagram))
d22 2
a23 2
private boolean containedInNode(gmfgen::GenLink link, gmfgen::GenDiagram diagram) :
	!diagram.getAllNodes().select(node | canBeContainer(link, node.modelFacet)).isEmpty()
d26 10
a35 2
private boolean containedInLink(gmfgen::GenLink link, gmfgen::GenDiagram diagram) :
	!diagram.links.select(diagramLink | !{diagramLink.modelFacet}.typeSelect(gmfgen::TypeLinkModelFacet).isEmpty() && canBeContainer(link, (gmfgen::TypeLinkModelFacet) diagramLink.modelFacet)).isEmpty()
@


1.11
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d18 2
a19 2
cached List[gmfgen::GenNode] getConnectedPhantomNodes(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	getPhantomNodes(diagram).select(node | canBePhantomLinkTarget(node, typeModelFacet, diagram))
d22 2
a23 2
cached List[gmfgen::GenNode] getPhantomNodes(gmfgen::GenDiagram diagram) :
	diagram.topLevelNodes.select(node | null != node.modelFacet && node.modelFacet.isPhantomElement())
d26 2
a27 6
private boolean canBePhantomLinkTarget(gmfgen::GenNode node, gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	!getOutgoingPhantomLinks(typeModelFacet, diagram).select(link | canBeTarget(link, node.modelFacet)).isEmpty()
;

cached List[gmfgen::GenLink] getOutgoingPhantomLinks(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
	diagram.links.select(link | canBeSource(link, typeModelFacet) && isPhantom(link.modelFacet))
a33 8
private boolean isPhantom(gmfgen::FeatureLinkModelFacet modelFacet) :
	modelFacet.metaFeature.isContains()
;

private boolean isPhantom(gmfgen::LinkModelFacet modelFacet) :
	false
;

@


1.10
log
@[174801] - Generated ???CanonicalEditpolicy should implement getFeaturesToSynchronize() method
@
text
@a17 16
genmodel::GenClass getModelElementType(gmfgen::GenCommonBase commonBase) :
	null
;

genmodel::GenClass getModelElementType(gmfgen::GenDiagram diagram) :
	diagram.domainDiagramElement
;

genmodel::GenClass getModelElementType(gmfgen::GenCompartment compartment) :
	getModelElementType(compartment.node)
;

genmodel::GenClass getModelElementType(gmfgen::GenNode node) :
	node.modelFacet.metaClass
;

a45 12
cached Set[genmodel::GenFeature] getChildFeatures(List[gmfgen::GenNode] nodes) :
	selectSemanticChildren(nodes).collect(node | node.modelFacet.childMetaFeature).toSet()
;

cached Set[genmodel::GenFeature] getContainmentFeatures(List[gmfgen::GenNode] nodes) :
	selectSemanticChildren(nodes).collect(node | node.modelFacet.containmentMetaFeature).toSet()
;

cached List[gmfgen::GenNode] selectSemanticChildren(List[gmfgen::GenNode] nodes) :
	nodes.select(node | null != node.modelFacet && !node.modelFacet.isPhantomElement())
;

@


1.9
log
@DiagramCanonicalEditpolicy template is in XPAND now.
[182556] - getSemanticChildrenList.jetinc generates empty switch statement causing generation to fail
@
text
@d66 4
a73 4
cached List[gmfgen::GenNode] selectNotationChildren(List[gmfgen::GenNode] nodes) :
	nodes.select(node | null == node.modelFacet || !node.modelFacet.isPhantomElement())
;

@


1.8
log
@[180702] Move logic from semantic edit policy into creation commands
@
text
@d35 5
a39 1
	diagram.topLevelNodes.select(node | null != node.modelFacet && node.modelFacet.isPhantomElement()).select(node | canBePhantomLinkTarget(node, typeModelFacet, diagram))
d47 5
a51 1
	diagram.links.select(link | isPhantom(link.modelFacet) && canBeSource(link, typeModelFacet))
d62 2
a63 2
cached Set[genmodel::GenFeature] getChildFeatures(List[gmfgen::GenNode] childNodes) :
	selectSemanticChildren(childNodes).collect(node | node.modelFacet.childMetaFeature).union({})
d66 2
a67 2
cached List[gmfgen::GenNode] selectSemanticChildren(List[gmfgen::GenNode] childNodes) :
	childNodes.select(node | null != node.modelFacet && !node.modelFacet.isPhantomElement())
d70 2
a71 2
cached List[gmfgen::GenNode] selectNotationChildren(List[gmfgen::GenNode] childNodes) :
	childNodes.select(node | null == node.modelFacet || !node.modelFacet.isPhantomElement())
d182 1
a182 1
	canBeLinkEnd(link.modelFacet.getSourceType(), typeModelFacet)
d186 18
a203 1
	canBeLinkEnd(link.modelFacet.getTargetType(), typeModelFacet)
@


1.7
log
@Rewriting template to xpt

[170079] - Do not generate unnecessary CanonicalEditPolicies in case if phantoms are allowed for diagram
@
text
@d108 1
a108 1
List[gmfgen::GenLink] getReroutableLinks(gmfgen::TypeModelFacet typeModelFacet, gmfgen::GenDiagram diagram) :
@


1.6
log
@[177795] deletion of diagram node may corrupt model
@
text
@d16 1
d18 49
a66 1
boolean hasChildren(gmfgen::GenNode node) :
@


1.5
log
@[177758] - Link from a node to a link is not possible
@
text
@d17 4
@


1.4
log
@[114348] add command to reorient ref based links
@
text
@d51 2
a52 2
List[gmfgen::GenLink] getAllPotentialLinks(gmfgen::GenNode node) :
	selectValidLinks(node.getDiagram().links).select(l | isSelf(l, node) || isOutgoing(l, node) || isIncoming(l, node))
d55 2
a56 2
List[gmfgen::GenLink] getReroutableLinks(gmfgen::GenNode node) :
	node.getDiagram().links.select(link | isTypeLink(link) && (canBeSource(link, node) || canBeTarget(link, node)))
d59 2
a60 2
List[gmfgen::GenLink] getReroutableRefLinks(gmfgen::GenNode node) :
	node.getDiagram().links.select(link | isRefLink(link) && (canBeSource(link, node) || canBeTarget(link, node)))
d76 2
a77 2
boolean createStartLinkCommand(gmfgen::GenLink link, gmfgen::GenNode node) :
	createStartOutgoingLinkCommand(link, node) || createStartIncomingLinkCommand(link, node)
d80 2
a81 2
boolean createStartOutgoingLinkCommand(gmfgen::GenLink link, gmfgen::GenNode node) :
	isSelf(link, node) || (isOutgoing(link, node) && link.outgoingCreationAllowed)
d84 2
a85 2
boolean createStartIncomingLinkCommand(gmfgen::GenLink link, gmfgen::GenNode node) :
	isIncoming(link, node) && link.incomingCreationAllowed
d88 2
a89 2
boolean createCompleteLinkCommand(gmfgen::GenLink link, gmfgen::GenNode node) :
	createCompleteIncomingLinkCommand(link, node) || createCompleteOutgoingLinkCommand(link, node)
d92 2
a93 2
boolean createCompleteIncomingLinkCommand(gmfgen::GenLink link, gmfgen::GenNode node) :
	isSelf(link, node) || (isIncoming(link, node) && link.outgoingCreationAllowed)
d96 2
a97 2
boolean createCompleteOutgoingLinkCommand(gmfgen::GenLink link, gmfgen::GenNode node) :
	isOutgoing(link, node) && link.incomingCreationAllowed
d100 2
a101 2
private boolean isSelf(gmfgen::GenLink link, gmfgen::GenNode node) :
	canBeSource(link, node) && canBeTarget(link, node)
d104 2
a105 2
private boolean isOutgoing(gmfgen::GenLink link, gmfgen::GenNode node) :
	canBeSource(link, node) && !isSelf(link, node)
d108 2
a109 2
private boolean isIncoming(gmfgen::GenLink link, gmfgen::GenNode node) :
	canBeTarget(link, node) && !isSelf(link, node)
d112 2
a113 2
private boolean canBeSource(gmfgen::GenLink link, gmfgen::GenNode node) :
	null != link.modelFacet.getSourceType() && link.modelFacet.getSourceType().ecoreClass.isSuperTypeOf(getMetaclass(node))
d116 2
a117 2
private boolean canBeTarget(gmfgen::GenLink link, gmfgen::GenNode node) :
	null != link.modelFacet.getTargetType() && link.modelFacet.getTargetType().ecoreClass.isSuperTypeOf(getMetaclass(node))
d120 14
a133 2
private ecore::EClass getMetaclass(gmfgen::GenNode node) :
	node.modelFacet.metaClass.ecoreClass
@


1.3
log
@[114348] Generate command to reorient link
@
text
@d59 4
d67 4
@


1.2
log
@[139733] akarjakina - lack of i18n support. More templates i18n-ed
@
text
@d55 8
@


1.1
log
@editpolicy templates should be located in one folder
@
text
@d106 9
a114 1
;@

