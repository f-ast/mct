head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081015-1925:1.6
	v20081008-1925:1.6
	v20081001-1925:1.6
	v20080930-1130:1.6
	v20080926-1245:1.6
	v20080924-1925:1.6
	v20080917-1925:1.6
	v20080911-1728:1.6
	v20080910-1520:1.6
	v20080903-1520:1.6
	v20080827-1520:1.6
	v20080813-1520:1.6
	v20080806-1520:1.6
	v20080722-1827:1.6
	v20080718-1731:1.6
	v20080716-1600:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.2
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080610-1132:1.6
	v20080603-1553:1.6
	v20080528-1052:1.6
	v20080521:1.6
	v20080516-1543:1.6
	v20080516-1143:1.6
	v20080512-1200:1.6
	v20080508-2000:1.6
	v20080507-1326:1.6
	v20080503-1740:1.5
	v20080501-1739:1.5
	v20080425-1959:1.5
	v20080417-1610:1.5
	v20080411-0411:1.5
	v20080404-1111:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080207-0207:1.4
	v20071222-1111:1.5
	v20071214-1111:1.5
	v20071130-1111:1.4
	v20071124-0000:1.4
	v20071112-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070928-0000:1.4
	v20070921-0000:1.4
	v20070915-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070614-1400:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070520-1200:1.4
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070307-0700:1.3
	v20070301-1200:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.1
	v20061218-1200:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2008.10.22.10.36.36;	author bblajer;	state Exp;
branches;
next	1.6;
commitid	198b48ff02344567;

1.6
date	2008.05.07.13.55.59;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	39124821b4de4567;

1.5
date	2007.12.14.14.37.48;	author dstadnik;	state Exp;
branches;
next	1.4;
commitid	13c4762953b4567;

1.4
date	2007.05.18.21.17.18;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	2591464e17d14567;

1.3
date	2007.01.30.16.42.29;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	4e0e45bf75734567;

1.2
date	2007.01.02.17.42.16;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	2728459a99784567;

1.1
date	2006.12.18.13.23.18;	author dstadnik;	state Exp;
branches;
next	;
commitid	113e4586960e4567;


desc
@@


1.7
log
@[251556]: Text selection: update feedback position on moving external node labels
@
text
@/*
 * Copyright (c) 2006, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«DEFINE TextSelectionEditPolicy FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «editPoliciesPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «textSelectionEditPolicyClassName» extends org.eclipse.gef.editpolicies.SelectionEditPolicy {

	«EXPAND textFeedback FOR this-»
}
«ENDDEFINE»

«DEFINE TextNonResizableEditPolicy FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «editPoliciesPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «textNonResizableEditPolicyClassName» extends org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx {

	«EXPAND textFeedback FOR this-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected java.util.List createSelectionHandles() {
		org.eclipse.gef.handles.MoveHandle moveHandle =
			new org.eclipse.gef.handles.MoveHandle((org.eclipse.gef.GraphicalEditPart) getHost());
		moveHandle.setBorder(null);
		moveHandle.setDragTracker(new org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx(getHost()));
		return java.util.Collections.singletonList(moveHandle);
	}
}
«ENDDEFINE»

«DEFINE textFeedback FOR gmfgen::GenDiagram»
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.draw2d.IFigure selectionFeedbackFigure;

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.draw2d.IFigure focusFeedbackFigure;

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.draw2d.FigureListener hostPositionListener;

	«EXPAND xpt::Common::generatedMemberComment»
	protected void showPrimarySelection() {
		if (getHostFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) getHostFigure()).setSelected(true);
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) getHostFigure()).setFocus(true);
		} else {
			showSelection();
			showFocus();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void showSelection() {
		if (getHostFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) getHostFigure()).setSelected(true);
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) getHostFigure()).setFocus(false);
		} else {
			hideSelection();
			addFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());
			getHostFigure().addFigureListener(getHostPositionListener());
			refreshSelectionFeedback();
			hideFocus();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void hideSelection() {
		if (getHostFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) getHostFigure()).setSelected(false);
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) getHostFigure()).setFocus(false);
		} else {
			if (selectionFeedbackFigure != null) {
				removeFeedback(selectionFeedbackFigure);
				getHostFigure().removeFigureListener(getHostPositionListener());
				selectionFeedbackFigure = null;
			}
			hideFocus();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void showFocus() {
		if (getHostFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) getHostFigure()).setFocus(true);
		} else {
			hideFocus();
			addFeedback(focusFeedbackFigure = createFocusFeedbackFigure());
			refreshFocusFeedback();
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void hideFocus() {
		if (getHostFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel) getHostFigure()).setFocus(false);
		} else {
			if (focusFeedbackFigure != null) {
				removeFeedback(focusFeedbackFigure);
				focusFeedbackFigure = null;
			}
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.geometry.Rectangle getFeedbackBounds() {
		org.eclipse.draw2d.geometry.Rectangle bounds;
		if (getHostFigure() instanceof org.eclipse.draw2d.Label) {
			bounds = ((org.eclipse.draw2d.Label) getHostFigure()).getTextBounds();
			bounds.intersect(getHostFigure().getBounds());
		} else {
			bounds = getHostFigure().getBounds().getCopy();
		}
		getHostFigure().getParent().translateToAbsolute(bounds);
		getFeedbackLayer().translateToRelative(bounds);
		return bounds;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure createSelectionFeedbackFigure() {
		if (getHostFigure() instanceof org.eclipse.draw2d.Label) {
			org.eclipse.draw2d.Label feedbackFigure = new org.eclipse.draw2d.Label();
			feedbackFigure.setOpaque(true);
			feedbackFigure.setBackgroundColor(org.eclipse.draw2d.ColorConstants.menuBackgroundSelected);
			feedbackFigure.setForegroundColor(org.eclipse.draw2d.ColorConstants.menuForegroundSelected);
			return feedbackFigure;
		} else {
			org.eclipse.draw2d.RectangleFigure feedbackFigure = new org.eclipse.draw2d.RectangleFigure();
			feedbackFigure.setFill(false);
			return feedbackFigure;
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.draw2d.IFigure createFocusFeedbackFigure() {
		return new org.eclipse.draw2d.Figure() {

			protected void paintFigure(org.eclipse.draw2d.Graphics graphics) {
				graphics.drawFocus(getBounds().getResized(-1, -1));
			}
		};
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void updateLabel(org.eclipse.draw2d.Label target) {
		org.eclipse.draw2d.Label source = (org.eclipse.draw2d.Label) getHostFigure();
		target.setText(source.getText());
		target.setTextAlignment(source.getTextAlignment());
		target.setFont(source.getFont());
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void refreshSelectionFeedback() {
		if (selectionFeedbackFigure != null) {
			if (selectionFeedbackFigure instanceof org.eclipse.draw2d.Label) {
				updateLabel((org.eclipse.draw2d.Label) selectionFeedbackFigure);
				selectionFeedbackFigure.setBounds(getFeedbackBounds());
			} else {
				selectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));
			}
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void refreshFocusFeedback() {
		if (focusFeedbackFigure != null) {
			focusFeedbackFigure.setBounds(getFeedbackBounds());
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void refreshFeedback() {
		refreshSelectionFeedback();
		refreshFocusFeedback();
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.draw2d.FigureListener getHostPositionListener() {
		if (hostPositionListener == null) {
			hostPositionListener = new org.eclipse.draw2d.FigureListener() {
				public void figureMoved(org.eclipse.draw2d.IFigure source) {
					refreshFeedback();
				}
			};
		}
		return hostPositionListener;
	}
«ENDDEFINE»
@


1.6
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
d55 3
d76 1
d90 1
d191 12
@


1.5
log
@WrapLabel -> WrappingLabel
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.4
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d56 3
a58 3
		if (getHostFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) getHostFigure()).setSelected(true);
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) getHostFigure()).setFocus(true);
d67 3
a69 3
		if (getHostFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) getHostFigure()).setSelected(true);
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) getHostFigure()).setFocus(false);
d80 3
a82 3
		if (getHostFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) getHostFigure()).setSelected(false);
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) getHostFigure()).setFocus(false);
d94 2
a95 2
		if (getHostFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) getHostFigure()).setFocus(true);
d105 2
a106 2
		if (getHostFigure() instanceof org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) {
			((org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel) getHostFigure()).setFocus(false);
@


1.3
log
@All the @@generated comments moved into a separate "define" statement.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.2
log
@prevent npe caused by scaled feedback layer absence
@
text
@d20 1
a20 3
/**
 * @@generated
 */
d31 1
a31 3
/**
 * @@generated
 */
d36 1
a36 3
	/**
	 * @@generated
	 */
d48 1
a48 3
	/**
	 * @@generated
	 */
d51 1
a51 3
	/**
	 * @@generated
	 */
d54 1
a54 3
	/**
	 * @@generated
	 */
d65 1
a65 3
	/**
	 * @@generated
	 */
d78 1
a78 3
	/**
	 * @@generated
	 */
d92 1
a92 3
	/**
	 * @@generated
	 */
d103 1
a103 3
	/**
	 * @@generated
	 */
d115 1
a115 3
	/**
	 * @@generated
	 */
d129 1
a129 3
	/**
	 * @@generated
	 */
d144 1
a144 3
	/**
	 * @@generated
	 */
d154 1
a154 3
	/**
	 * @@generated
	 */
d162 1
a162 3
	/**
	 * @@generated
	 */
d174 1
a174 3
	/**
	 * @@generated
	 */
d181 1
a181 3
	/**
	 * @@generated
	 */
@


1.1
log
@rewrite text feedback edit policies in xpand
@
text
@a137 7
	protected org.eclipse.draw2d.IFigure getFeedbackLayer() {
		return getLayer(org.eclipse.gef.LayerConstants.SCALED_FEEDBACK_LAYER);
	}

	/**
	 * @@generated
	 */
@

