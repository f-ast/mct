head	1.10;
access;
symbols
	v20081022-1925:1.10
	v20081015-1925:1.10
	v20081008-1925:1.10
	v20081001-1925:1.10
	v20080930-1130:1.10
	v20080926-1245:1.10
	v20080924-1925:1.10
	v20080917-1925:1.10
	v20080911-1728:1.10
	v20080910-1520:1.10
	v20080903-1520:1.10
	v20080827-1520:1.10
	v20080813-1520:1.10
	v20080806-1520:1.10
	v20080722-1827:1.10
	v20080718-1731:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080603-1553:1.10
	v20080528-1052:1.10
	v20080521:1.10
	v20080516-1543:1.10
	v20080516-1143:1.10
	v20080512-1200:1.10
	v20080508-2000:1.10
	v20080507-1326:1.10
	v20080503-1740:1.8
	v20080501-1739:1.8
	v20080425-1959:1.7
	v20080417-1610:1.7
	v20080411-0411:1.7
	v20080404-1111:1.7
	v20080322-0000:1.7
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20080207-0207:1.5.2.1
	v20071222-1111:1.6
	v20071214-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.5.2.1
	v20071112-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070928-0000:1.5.2.1
	v20070921-0000:1.5.2.1
	v20070915-0000:1.5.2.1
	v20070903-0000:1.6
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070614-1400:1.5
	v20070608-1300:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070520-1200:1.5
	v20070518-1300:1.4
	v20070504-1000:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	39124821b4de4567;

1.9
date	2008.05.05.15.47.41;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	3767481f2c1d4567;

1.8
date	2008.04.30.21.02.35;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	8194818de6a4567;

1.7
date	2008.02.26.13.53.51;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	19d047c419ed4567;

1.6
date	2007.07.04.13.22.06;	author bblajer;	state Exp;
branches;
next	1.5;
commitid	3eb4468b9efc4567;

1.5
date	2007.05.18.21.17.20;	author atikhomirov;	state Exp;
branches
	1.5.2.1;
next	1.4;
commitid	2591464e17d14567;

1.4
date	2007.05.16.18.44.42;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	4320464b51194567;

1.3
date	2007.05.15.18.34.13;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	25434649fd1f4567;

1.2
date	2007.05.08.12.14.58;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	3985464069c14567;

1.1
date	2007.01.25.16.57.54;	author ashatalin;	state Exp;
branches;
next	;
commitid	271945b8e1904567;

1.5.2.1
date	2007.09.12.12.20.49;	author dstadnik;	state Exp;
branches;
next	;
commitid	42c246e7d99f4567;


desc
@@


1.10
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */
 
«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«DEFINE getExpression(gmfgen::ValueExpression valueExpr, genmodel::GenClassifier context) FOR gmfgen::GenExpressionInterpreter-»
«getQualifiedClassName()».«getExpressionAccessor(valueExpr)»(«valueExpr.getBodyString()», «EXPAND MetaModel::MetaClass FOR context»)«-»
«ENDDEFINE»@


1.9
log
@[228913] java expressions are in-lined in most cases now
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.8
log
@[228913] item #5: clean getExpression, refactor its use
@
text
@a15 1
«EXTENSION xpt::GenModelUtils»
@


1.7
log
@[150177] phase I, refactor existing code: completed - all metamodel access moved to MetaModel template.
@
text
@d18 2
a19 79
«REM»
	These templates should be used to generate:
	
	- definition for a set of static final variables holding an instances 
	of AbstractExpressions inside representing element selector constraints 
	(for elements with TypeModelFacet) or link creation constraints 
	(for GenLinkConstraints)
	
	- corresponding defined constant calls from the generated code

	<Template definitions for outside usage>
«ENDREM»
«DEFINE defineInterptererExpressionConstant FOR gmfgen::GenNode-»
	«EXPAND defineInterptererExpressionConstant(this) FOR modelFacet-»
«ENDDEFINE»

«DEFINE defineInterptererExpressionConstant FOR gmfgen::GenLink-»
	«EXPAND defineInterptererExpressionConstant(modelFacet)-»
«ENDDEFINE»

«DEFINE defineInterptererExpressionConstants FOR gmfgen::GenLinkConstraints-»
	«LET link.getDiagram().editorGen.expressionProviders AS expressionProviders-»
		«IF null != sourceEnd-»

			«EXPAND defineLinkEndConstant(this, sourceEnd, getSourceEndContextClass(), getTargetEndContextClass()) FOR expressionProviders.getProvider(sourceEnd)-»
		«ENDIF-»
		«IF null != targetEnd-»

			«EXPAND defineLinkEndConstant(this, targetEnd, getTargetEndContextClass(), getSourceEndContextClass()) FOR expressionProviders.getProvider(targetEnd)-»
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE interptererExpressionConstantName FOR gmfgen::GenCommonBase»«getUniqueIdentifier()»_Constraint«ENDDEFINE»

«DEFINE interptererExpressionConstantName(boolean source) FOR gmfgen::GenLinkConstraints»«link.getUniqueIdentifier()»_«IF source»Source«ELSE»Target«ENDIF»Expression«ENDDEFINE»
«REM»
	</Template definitions for outside usage>
«ENDREM»

«DEFINE defineInterptererExpressionConstant(gmfgen::LinkModelFacet modelFacet) FOR gmfgen::GenLink»«ENDDEFINE»

«DEFINE defineInterptererExpressionConstant(gmfgen::TypeLinkModelFacet typeModelFacet) FOR gmfgen::GenLink-»
	«EXPAND defineInterptererExpressionConstant(this) FOR typeModelFacet-»
«ENDDEFINE»

«DEFINE defineInterptererExpressionConstant(gmfgen::GenCommonBase commonBase) FOR gmfgen::TypeModelFacet-»
	«IF null != modelElementSelector-»
		«EXPAND defineInterptererExpressionConstant(commonBase, modelElementSelector, metaClass) FOR commonBase.getDiagram().editorGen.expressionProviders.getProvider(modelElementSelector)-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE defineInterptererExpressionConstant(gmfgen::GenCommonBase commonBase, gmfgen::ValueExpression valueExpression, genmodel::GenClass metaclass) FOR gmfgen::GenExpressionProviderBase»«ENDDEFINE»

«DEFINE defineInterptererExpressionConstant(gmfgen::GenCommonBase commonBase, gmfgen::ValueExpression valueExpression, genmodel::GenClass metaclass) FOR gmfgen::GenExpressionInterpreter-»

	«EXPAND xpt::Common::generatedMemberComment»
«EXPAND interptererExpressionConstantSignature FOR commonBase» «EXPAND interptererExpressionConstantName FOR commonBase» = «EXPAND getExpression(valueExpression, metaclass, false)»;
«ENDDEFINE»

«DEFINE defineLinkEndConstant(gmfgen::GenLinkConstraints linkConstraints, gmfgen::ValueExpression valueExpression, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenExpressionProviderBase»«ENDDEFINE»

«DEFINE defineLinkEndConstant(gmfgen::GenLinkConstraints linkConstraints, gmfgen::ValueExpression valueExpression, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenExpressionInterpreter-»

	«EXPAND xpt::Common::generatedMemberComment»
«EXPAND interptererExpressionConstantSignature FOR linkConstraints.link» «EXPAND interptererExpressionConstantName(linkConstraints.sourceEnd == valueExpression) FOR linkConstraints»;

	«EXPAND xpt::Common::generatedMemberComment»
static {
	java.util.Map env = new java.util.HashMap(3);
	env.put(OPPOSITE_END_VAR, «EXPAND MetaModel::MetaClass FOR oppositeEndContext»);
	«EXPAND interptererExpressionConstantName(linkConstraints.sourceEnd == valueExpression) FOR linkConstraints» = «EXPAND getExpression(valueExpression, context, true)»; «EXPAND xpt::Common::nonNLS»
}
«ENDDEFINE»

«DEFINE interptererExpressionConstantSignature FOR gmfgen::GenCommonBase»private static final «getDiagram().editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()»«ENDDEFINE»

«DEFINE getExpression(gmfgen::ValueExpression valueExpr, genmodel::GenClassifier context, boolean includeEnvVariable) FOR gmfgen::GenExpressionInterpreter-»
«getQualifiedClassName()».«getExpressionAccessor(valueExpr)»(«valueExpr.getBodyString()», «EXPAND MetaModel::MetaClass FOR context»«IF includeEnvVariable», env«ENDIF»)«-»
@


1.6
log
@Some methods and templates should be applicable to GenClassifier, not GenClass;
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d88 1
a88 1
	env.put(OPPOSITE_END_VAR, «EXPAND xpt::Common::metaClassAccessor FOR oppositeEndContext»);
d96 1
a96 1
«getQualifiedClassName()».«getExpressionAccessor(valueExpr)»(«valueExpr.getBodyString()», «EXPAND xpt::Common::metaClassAccessor FOR context»«IF includeEnvVariable», env«ENDIF»)«-»
@


1.5
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d95 1
a95 1
«DEFINE getExpression(gmfgen::ValueExpression valueExpr, genmodel::GenClass context, boolean includeEnvVariable) FOR gmfgen::GenExpressionInterpreter-»
@


1.5.2.1
log
@rewrite metric provider in xpand
@
text
@d95 1
a95 1
«DEFINE getExpression(gmfgen::ValueExpression valueExpr, genmodel::GenClassifier context, boolean includeEnvVariable) FOR gmfgen::GenExpressionInterpreter-»
@


1.4
log
@Refactoring templates to store ExpressionInterpreter-based definition in the same file.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.3
log
@Generating VisualIDRegistry using XPAND.
@
text
@d18 44
a61 3
«REM»Can be moved to xpt::policies::ItemSemanticEditPolicy.xpt«ENDREM»
«DEFINE getExpressionWithEnv(gmfgen::ValueExpression valueExpr, genmodel::GenClass context) FOR gmfgen::GenExpressionInterpreter-»
«EXPAND getExpression(valueExpr, context, true)-»
d64 4
a67 2
«DEFINE getExpression(gmfgen::ValueExpression valueExpr, genmodel::GenClass context) FOR gmfgen::GenExpressionInterpreter-»
«EXPAND getExpression(valueExpr, context, false)-»
d70 6
a75 3
«REM»private«ENDREM»
«DEFINE getExpression(gmfgen::ValueExpression valueExpr, genmodel::GenClass context, boolean includeEnvVariable) FOR gmfgen::GenExpressionInterpreter-»
«EXPAND getExpressionFactoryMethod(valueExpr)»(«valueExpr.getBodyString()», «EXPAND xpt::Common::metaClassAccessor FOR context»«IF includeEnvVariable», env«ENDIF»)«-»
d78 13
a90 4
«REM»Can be moved to xpt::policies::ItemSemanticEditPolicy.xpt«ENDREM»
«DEFINE initOppositeEndEnv FOR genmodel::GenClass-»
java.util.Map env = new java.util.HashMap(3);
env.put(OPPOSITE_END_VAR, «EXPAND xpt::Common::metaClassAccessor»);
d93 4
a96 2
«DEFINE getExpressionFactoryMethod(gmfgen::ValueExpression valueExpr) FOR gmfgen::GenExpressionInterpreter-»
«getQualifiedClassName()».«getExpressionAccessor(valueExpr)-»
@


1.2
log
@Updating copyrights.
@
text
@d20 10
a29 1
«EXPAND getExpressionFactoryMethod(valueExpr)»(«valueExpr.getBodyString()», «EXPAND xpt::Common::metaClassAccessor FOR context», env)«-»
@


1.1
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@

