head	1.3;
access;
symbols
	v20081022-1925:1.3
	v20081015-1925:1.3
	v20081008-1925:1.3
	v20081001-1925:1.3
	v20080930-1130:1.3
	v20080926-1245:1.3
	v20080924-1925:1.3
	v20080917-1925:1.3
	v20080911-1728:1.3
	v20080910-1520:1.3
	v20080903-1520:1.3
	v20080827-1520:1.3
	v20080813-1520:1.3
	v20080806-1520:1.3
	v20080722-1827:1.3
	v20080718-1731:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080603-1553:1.3
	v20080528-1052:1.3
	v20080521:1.3
	v20080516-1543:1.3
	v20080516-1143:1.3
	v20080512-1200:1.3
	v20080508-2000:1.3
	v20080507-1326:1.3
	v20080503-1740:1.2
	v20080501-1739:1.2
	v20080425-1959:1.2
	v20080417-1610:1.2
	v20080411-0411:1.2
	v20080404-1111:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20080207-0207:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071112-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070928-0000:1.2
	v20070921-0000:1.2
	v20070915-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.1
	v20070614-1400:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2008.05.07.13.56.02;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	39124821b4de4567;

1.2
date	2007.06.19.09.01.10;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	1b846779b554567;

1.1
date	2007.06.05.17.01.07;	author dstadnik;	state Exp;
branches;
next	;
commitid	7adc466596d24567;


desc
@@


1.3
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«EXTENSION xpt::application::i18n»

«DEFINE WizardNewFileCreationPage FOR gmfgen::GenApplication-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «packageName»;

«EXPAND xpt::Common::generatedClassComment»
public class WizardNewFileCreationPage extends org.eclipse.jface.wizard.WizardPage {

	«EXPAND xpt::Common::generatedMemberComment»
	private final org.eclipse.jface.viewers.IStructuredSelection currentSelection;

	«EXPAND xpt::Common::generatedMemberComment»
	private String initialFileName;

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.core.runtime.IPath initialContainerFullPath;

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.swt.widgets.Text fileNameEditor;

	«EXPAND xpt::Common::generatedMemberComment»
	public WizardNewFileCreationPage(String name, org.eclipse.jface.viewers.IStructuredSelection currentSelection) {
		super(name);
		this.currentSelection = currentSelection;
		String home = System.getProperty("user.home"); //$NON-NLS-1$
		if (home != null) {
			initialContainerFullPath = new org.eclipse.core.runtime.Path(home);
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.jface.viewers.IStructuredSelection getSelection() {
		return currentSelection;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public String getFileName() {
		if (fileNameEditor == null) {
			return initialFileName;
		}
		org.eclipse.core.runtime.IPath path = getFilePath();
		if (path == null || path.isEmpty() || path.hasTrailingSeparator()) {
			return null;
		}
		return path.lastSegment();
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void setFileName(String fileName) {
		if (fileNameEditor == null) {
			initialFileName = fileName;
			return;
		}
		setFilePath(getContainerFullPath(), fileName);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.core.runtime.IPath getContainerFullPath() {
		if (fileNameEditor == null) {
			return initialContainerFullPath;
		}
		org.eclipse.core.runtime.IPath path = getFilePath();
		if (path == null || path.isEmpty()) {
			return null;
		}
		if (path.hasTrailingSeparator()) {
			return path;
		}
		path = path.removeLastSegments(1);
		if (path.isEmpty()) {
			return null;
		}
		return path.addTrailingSeparator();
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void setContainerFullPath(org.eclipse.core.runtime.IPath containerPath) {
		if (fileNameEditor == null) {
			initialContainerFullPath = containerPath;
			return;
		}
		setFilePath(containerPath, getFileName());
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.core.runtime.IPath getFilePath() {
		String fileName = fileNameEditor.getText().trim();
		if (fileName.length() == 0) {
			return null;
		}
		return new org.eclipse.core.runtime.Path(fileNameEditor.getText());
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void setFilePath(org.eclipse.core.runtime.IPath containerPath, String fileName) {
		if (fileName == null) {
			fileName = ""; //$NON-NLS-1$
		} else {
			fileName = fileName.trim();
		}
		if (containerPath == null) {
			fileNameEditor.setText(fileName);
		} else {
			if (!containerPath.hasTrailingSeparator()) {
				containerPath = containerPath.addTrailingSeparator();
			}
			org.eclipse.core.runtime.IPath path = fileName.length() == 0 ? containerPath : containerPath.append(fileName);
			fileNameEditor.setText(path.toOSString());
		}
		setPageComplete(validatePage());
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public void createControl(org.eclipse.swt.widgets.Composite parent) {
		org.eclipse.swt.widgets.Composite plate = new org.eclipse.swt.widgets.Composite(parent, org.eclipse.swt.SWT.NONE);
		plate.setLayout(new org.eclipse.swt.layout.GridLayout(2, false));
		org.eclipse.swt.widgets.Label label = new org.eclipse.swt.widgets.Label(plate, org.eclipse.swt.SWT.NONE);
		label.setText(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForNewFileWizardFileLabel()) FOR editorGen»);
		label.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.BEGINNING, org.eclipse.swt.SWT.CENTER, false, false, 2, 1));
		fileNameEditor = new org.eclipse.swt.widgets.Text(plate, org.eclipse.swt.SWT.SINGLE | org.eclipse.swt.SWT.BORDER);
		fileNameEditor.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.FILL, org.eclipse.swt.SWT.CENTER, true, false));
		org.eclipse.swt.widgets.Button button = new org.eclipse.swt.widgets.Button(plate, org.eclipse.swt.SWT.PUSH);
		button.setText(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForNewFileWizardBrowseButton()) FOR editorGen»);
		button.setLayoutData(new org.eclipse.swt.layout.GridData(org.eclipse.swt.SWT.BEGINNING, org.eclipse.swt.SWT.CENTER, false, false));

		// logic
		fileNameEditor.addModifyListener(new org.eclipse.swt.events.ModifyListener() {

			public void modifyText(org.eclipse.swt.events.ModifyEvent e) {
				setPageComplete(validatePage());
			}
		});
		button.addSelectionListener(new org.eclipse.swt.events.SelectionListener() {

			public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {
				org.eclipse.swt.widgets.FileDialog dialog = new org.eclipse.swt.widgets.FileDialog(getShell(), org.eclipse.swt.SWT.SAVE);
				dialog.setText(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForNewFileWizardSelectDialog()) FOR editorGen»);
				dialog.setFileName(getFileName());
				String fileName = dialog.open();
				if (fileName != null) {
					fileNameEditor.setText(fileName);
					setPageComplete(validatePage());
				}
			}

			public void widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent e) {
			}
		});

		// init
		setFilePath(initialContainerFullPath, initialFileName);
		setControl(plate);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean validatePage() {
		String fileName = fileNameEditor.getText().trim();
		if (fileName.length() == 0) {
			setErrorMessage(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForNewFileWizardEmpty()) FOR editorGen»);
			return false;
		}
		if (!new org.eclipse.core.runtime.Path("").isValidPath(fileName)) { //$NON-NLS-1$
			setErrorMessage(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForNewFileWizardInvalid()) FOR editorGen»);
			return false;
		}
		setErrorMessage(null);
		return true;
	}
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenApplication-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenApplication-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForNewFileWizardFileLabel(), "File:")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForNewFileWizardBrowseButton(), "Browse")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForNewFileWizardSelectDialog(), "Select new file")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForNewFileWizardEmpty(), "Specify file name")-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForNewFileWizardInvalid(), "Invalid file name")-»
«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenApplication-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForNewFileWizardFileLabel())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForNewFileWizardBrowseButton())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForNewFileWizardSelectDialog())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForNewFileWizardEmpty())-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForNewFileWizardInvalid())-»
«ENDDEFINE»
@


1.2
log
@[139733] akarjakina - i18n support
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.1
log
@rewrite new file wizard page in xpand
@
text
@d16 2
d134 1
a134 1
		label.setText("File:");
d139 1
a139 1
		button.setText("Browse");
d153 1
a153 1
				dialog.setText("Select new file");
d175 1
a175 1
			setErrorMessage("Specify file name");
d179 1
a179 1
			setErrorMessage("Invalid file name");
d191 16
@

