head	1.4;
access;
symbols
	v20081022-1925:1.4
	v20081015-1925:1.4
	v20081008-1925:1.4
	v20081001-1925:1.4
	v20080930-1130:1.4
	v20080926-1245:1.4
	v20080924-1925:1.4
	v20080917-1925:1.4
	v20080911-1728:1.4
	v20080910-1520:1.4
	v20080903-1520:1.4
	v20080827-1520:1.4
	v20080813-1520:1.4
	v20080806-1520:1.4
	v20080722-1827:1.4
	v20080718-1731:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080610-1132:1.4
	v20080603-1553:1.4
	v20080528-1052:1.4
	v20080521:1.4
	v20080516-1543:1.4
	v20080516-1143:1.4
	v20080512-1200:1.4
	v20080508-2000:1.4
	v20080507-1326:1.4
	v20080503-1740:1.3
	v20080501-1739:1.3
	v20080425-1959:1.3
	v20080417-1610:1.3
	v20080411-0411:1.3
	v20080404-1111:1.3
	v20080322-0000:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080207-0207:1.3
	v20071222-1111:1.3
	v20071214-1111:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071112-0000:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070928-0000:1.3
	v20070921-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070614-1400:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	39124821b4de4567;

1.3
date	2007.06.12.14.18.39;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	6fec466eab3f4567;

1.2
date	2007.06.12.10.58.05;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	4af9466e7c3c4567;

1.1
date	2007.06.11.13.36.23;	author ashatalin;	state Exp;
branches;
next	;
commitid	4172466d4fd34567;


desc
@@


1.4
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/*
 * Copyright (c) 2006,2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«EXTENSION xpt::navigator::Utils»

«DEFINE NavigatorActionProvider FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::copyright FOR editorGen-»
package «packageName»;

	«EXPAND xpt::Common::generatedClassComment»
public class «actionProviderClassName»  extends org.eclipse.ui.navigator.CommonActionProvider {

	«EXPAND attributes-»
	
	«EXPAND init-»
	
	«EXPAND makeActions-»
	
	«EXPAND fillActionBars-»
	
	«EXPAND fillContextMenu-»
	
	«EXPAND OpenDiagramAction-»

    «EXPAND additions-»
}
«ENDDEFINE»

«DEFINE attributes FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
private boolean myContribute;

	«EXPAND xpt::Common::generatedMemberComment»
private OpenDiagramAction myOpenDiagramAction;
«ENDDEFINE»

«DEFINE init FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
public void init(org.eclipse.ui.navigator.ICommonActionExtensionSite aSite) {
	super.init(aSite);
	if (aSite.getViewSite() instanceof org.eclipse.ui.navigator.ICommonViewerWorkbenchSite) {
		myContribute = true;
		makeActions((org.eclipse.ui.navigator.ICommonViewerWorkbenchSite) aSite.getViewSite());
	} else {
		myContribute = false;
	}
}
«ENDDEFINE»

«DEFINE makeActions FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
private void makeActions(org.eclipse.ui.navigator.ICommonViewerWorkbenchSite viewerSite) {
	myOpenDiagramAction = new OpenDiagramAction(viewerSite);
}
«ENDDEFINE»

«DEFINE fillActionBars FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
public void fillActionBars(org.eclipse.ui.IActionBars actionBars) {
	if (!myContribute) {
		return;
	}
	org.eclipse.jface.viewers.IStructuredSelection selection = (org.eclipse.jface.viewers.IStructuredSelection) getContext().getSelection();
	myOpenDiagramAction.selectionChanged(selection);
	if (myOpenDiagramAction.isEnabled()) {
		actionBars.setGlobalActionHandler(org.eclipse.ui.navigator.ICommonActionConstants.OPEN, myOpenDiagramAction);
	}
}
«ENDDEFINE»

«DEFINE fillContextMenu FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
public void fillContextMenu(org.eclipse.jface.action.IMenuManager menu) {
«REM»
/*
 * Put following code into the template to generate popup menu
 *
		if (!myContribute || getContext().getSelection().isEmpty()) {
			return;
		}

		org.eclipse.jface.viewers.IStructuredSelection selection = (org.eclipse.jface.viewers.IStructuredSelection) getContext().getSelection();

		myOpenDiagramAction.selectionChanged(selection);
		if (myOpenDiagramAction.isEnabled()) {
			menu.insertAfter(org.eclipse.ui.navigator.ICommonMenuConstants.GROUP_OPEN, myOpenDiagramAction);
		}*/
«ENDREM»«-»		
}
«ENDDEFINE»

«DEFINE OpenDiagramAction FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedClassComment»
private class OpenDiagramAction extends org.eclipse.jface.action.Action {

	«EXPAND ODA_attributes-»
	
	«EXPAND ODA_constructor-»
	
	«EXPAND ODA_selectionChanged-»
	
	«EXPAND ODA_run-»
	
	«EXPAND ODA_getEditorInput-»
	
	«EXPAND ODA_additions-»
}
«ENDDEFINE»

«DEFINE ODA_attributes FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.notation.Diagram myDiagram;
		
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.ui.navigator.ICommonViewerWorkbenchSite myViewerSite;
«ENDDEFINE»

«DEFINE ODA_constructor FOR gmfgen::GenNavigator-»	
	«EXPAND xpt::Common::generatedMemberComment»
public OpenDiagramAction(org.eclipse.ui.navigator.ICommonViewerWorkbenchSite viewerSite) {
	super(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForOpenDiagramActionName()) FOR editorGen»);
	myViewerSite = viewerSite;
}
«ENDDEFINE»

«DEFINE ODA_selectionChanged FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
public final void selectionChanged(org.eclipse.jface.viewers.IStructuredSelection selection) {
	myDiagram = null;
	if (selection.size() == 1) {
		Object selectedElement = selection.getFirstElement();
		if (selectedElement instanceof «getNavigatorItemQualifiedClassName()») {
			selectedElement = ((«getNavigatorItemQualifiedClassName()») selectedElement).getView();
		} else if (selectedElement instanceof org.eclipse.core.runtime.IAdaptable) {
			selectedElement = ((org.eclipse.core.runtime.IAdaptable) selectedElement).getAdapter(org.eclipse.gmf.runtime.notation.View.class);
		}
		if (selectedElement instanceof org.eclipse.gmf.runtime.notation.Diagram) {
			org.eclipse.gmf.runtime.notation.Diagram diagram = (org.eclipse.gmf.runtime.notation.Diagram) selectedElement;
			if («EXPAND xpt::editor::VisualIDRegistry::modelID FOR editorGen.diagram».equals(«EXPAND xpt::editor::VisualIDRegistry::getModelIDMethodCall FOR editorGen.diagram»(diagram))) {
				myDiagram = diagram;
			}
		}
	}
	setEnabled(myDiagram != null);
}
«ENDDEFINE»

«DEFINE ODA_run FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
public void run() {
	if (myDiagram == null || myDiagram.eResource() == null) {
		return;
	}
			
	org.eclipse.ui.IEditorInput editorInput = getEditorInput();
	org.eclipse.ui.IWorkbenchPage page = myViewerSite.getPage();
 	try {
		page.openEditor(editorInput, «editorGen.editor.getQualifiedClassName()».ID);
	} catch (org.eclipse.ui.PartInitException e) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Exception while openning diagram", e); «EXPAND xpt::Common::nonNLS»
	}
}
«ENDDEFINE»
		
«DEFINE ODA_getEditorInput FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.ui.IEditorInput getEditorInput() {
	«IF null == editorGen.application-»
	for (java.util.Iterator it = myDiagram.eResource().getContents().iterator(); it.hasNext();) {
		org.eclipse.emf.ecore.EObject nextEObject = (org.eclipse.emf.ecore.EObject) it.next();
		if (nextEObject == myDiagram) {
			return new org.eclipse.ui.part.FileEditorInput(org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(myDiagram.eResource()));
		}
		if (nextEObject instanceof org.eclipse.gmf.runtime.notation.Diagram) {
			break;
		}
	}
	«ENDIF-»
	«EXPAND xpt::navigator::getEditorInput::defineURIEditorInput("myDiagram") FOR editorGen.diagram-»
	return editorInput;
}
«ENDDEFINE»

«DEFINE ODA_additions FOR gmfgen::GenNavigator-»
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenNavigator-»
«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenNavigator-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForOpenDiagramActionName(), "Open Diagram")-»
«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenNavigator-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForOpenDiagramActionName())-»
«ENDDEFINE»@


1.3
log
@[191856] - Convert /editor/Editor.javajet template to xpand
[192134] - NPE while regenerating TaiPan diagram (in editor template)
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.2
log
@[191924]: Adopt lite generator to use newly created /navigator/NavigatorLabelProvider.xpt
[191954]: Adopt lite generator to use newly created /navigator/NavigatorActionProvider.xpt
@
text
@d201 1
a201 1
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForOpenDiagramActionName(), "Open Diagram")»
d205 1
a205 1
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForOpenDiagramActionName())»
@


1.1
log
@[191850] - Convert /navigator/NavigatorActionProvider.javajet template to xpand
@
text
@a84 1
<%
d92 1
a92 1
		< %=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")% > selection = (< %=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")% >) getContext().getSelection();
d96 2
a97 2
			menu.insertAfter(< %=importManager.getImportedName("org.eclipse.ui.navigator.ICommonMenuConstants")% >.GROUP_OPEN, myOpenDiagramAction);
		}*/%>
d189 1
a189 1
	«EXPAND xpt::diagram::editpolicies::OpenDiagram::defineURIEditorInput("myDiagram") FOR editorGen.diagram-»
@

