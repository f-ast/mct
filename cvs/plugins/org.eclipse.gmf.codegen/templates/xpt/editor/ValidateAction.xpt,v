head	1.10;
access;
symbols
	v20081022-1925:1.10
	v20081015-1925:1.10
	v20081008-1925:1.10
	v20081001-1925:1.10
	v20080930-1130:1.10
	v20080926-1245:1.10
	v20080924-1925:1.10
	v20080917-1925:1.10
	v20080911-1728:1.10
	v20080910-1520:1.10
	v20080903-1520:1.10
	v20080827-1520:1.10
	v20080813-1520:1.9
	v20080806-1520:1.9
	v20080722-1827:1.9
	v20080718-1731:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080528-1052:1.9
	v20080521:1.9
	v20080516-1543:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080508-2000:1.9
	v20080507-1326:1.9
	v20080503-1740:1.8
	v20080501-1739:1.8
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080411-0411:1.7
	v20080404-1111:1.7
	v20080322-0000:1.7
	v20080222-1200:1.7
	v20080215-1500:1.7
	v20080207-0207:1.7
	v20071222-1111:1.7
	v20071214-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.7
	v20071112-0000:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070928-0000:1.7
	v20070921-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070520-1200:1.5
	v20070518-1300:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2008.08.20.10.58.13;	author dstadnik;	state Exp;
branches;
next	1.9;
commitid	3d8f48abf8c24567;

1.9
date	2008.05.07.13.56.00;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	39124821b4de4567;

1.8
date	2008.04.14.08.38.03;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	1b0e480317df4567;

1.7
date	2007.06.19.09.01.10;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	1b846779b554567;

1.6
date	2007.06.12.11.56.29;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	7fc6466e89e84567;

1.5
date	2007.05.18.21.17.18;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	2591464e17d14567;

1.4
date	2007.05.15.18.17.38;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	16b14649f9424567;

1.3
date	2007.05.14.14.27.04;	author dstadnik;	state Exp;
branches;
next	1.2;
commitid	38ba464871b24567;

1.2
date	2007.05.10.15.07.54;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	6baa464335494567;

1.1
date	2007.05.10.13.12.15;	author dstadnik;	state Exp;
branches;
next	;
commitid	52b46431a2d4567;


desc
@@


1.10
log
@[193963] add variation points
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«EXTENSION xpt::editor::Utils»
«EXTENSION xpt::GenAuditRoot»

«DEFINE className FOR gmfgen::GenDiagram»«defaultValidateActionClassName()»«ENDDEFINE»

«DEFINE qualifiedClassName FOR gmfgen::GenDiagram»«editorGen.editor.packageName».«EXPAND className»«ENDDEFINE»

«DEFINE ValidateAction FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «editorGen.editor.packageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» extends org.eclipse.jface.action.Action {
	«EXPAND attributes-»
	«EXPAND constructor-»
	«EXPAND run-»
	«EXPAND runValidation-»
	«EXPAND runNonUIValidation-»
	«EXPAND runValidationWithEP-»
	«EXPAND runEMFValidator-»
	«EXPAND validate-»
	«EXPAND createMarkersForStatus-»
	«EXPAND createMarkersForDiagnostic-»
	«EXPAND addMarker-»
	«EXPAND diagnosticToStatusSeverity-»
	«EXPAND collectTargetElementsFromStatus-»
	«EXPAND collectTargetElementsFromDiagnostic-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE attributes FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	public static final String VALIDATE_ACTION_KEY = "validateAction"; «EXPAND xpt::Common::nonNLS»

	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor workbenchPartDescriptor;
«ENDDEFINE»

«DEFINE constructor FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND className»(org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor workbenchPartDescriptor) {
		setId(VALIDATE_ACTION_KEY);
		setText(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForValidateAction().messageKey()) FOR editorGen»);
		this.workbenchPartDescriptor = workbenchPartDescriptor;
	}
«ENDDEFINE»

«DEFINE run FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	public void run() {
		org.eclipse.ui.IWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();
		if (workbenchPart instanceof org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) {
			final org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart part =
					(org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) workbenchPart;
			try {
				«IF editorGen.application == null-»
				new org.eclipse.ui.actions.WorkspaceModifyDelegatingOperation(
				«ENDIF-»
					new org.eclipse.jface.operation.IRunnableWithProgress() {

						public void run(org.eclipse.core.runtime.IProgressMonitor monitor)
								throws InterruptedException, java.lang.reflect.InvocationTargetException {
							runValidation(part.getDiagramEditPart(), part.getDiagram());
						}
					}
				«IF editorGen.application == null-»
				)
				«ENDIF-»
				.run(new org.eclipse.core.runtime.NullProgressMonitor());			
			} catch (Exception e) {
				«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(
						"Validation action failed", e); «EXPAND xpt::Common::nonNLS»
			}
		}
	}
«ENDDEFINE»

«DEFINE runValidation FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	public static void runValidation(org.eclipse.gmf.runtime.notation.View view) {
		try {
			if («getDiagramEditorUtilQualifiedClassName()».openDiagram(view.eResource())) {
				org.eclipse.ui.IEditorPart editorPart = org.eclipse.ui.PlatformUI.getWorkbench()
						.getActiveWorkbenchWindow().getActivePage().getActiveEditor();
				if (editorPart instanceof org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) {
					runValidation(((org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart) editorPart).
							getDiagramEditPart(), view);
				} else {
					runNonUIValidation(view);
				}
			}
		} catch (Exception e) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(
					"Validation action failed", e); «EXPAND xpt::Common::nonNLS»
		}
	}
«ENDDEFINE»

«DEFINE runNonUIValidation FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	public static void runNonUIValidation(org.eclipse.gmf.runtime.notation.View view) {
		org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart =
				org.eclipse.gmf.runtime.diagram.ui.OffscreenEditPartFactory.getInstance().createDiagramEditPart(
						view.getDiagram());
		runValidation(diagramEditPart, view);
	}		
«ENDDEFINE»

«DEFINE runValidationWithEP FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	public static void runValidation(org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart, org.eclipse.gmf.runtime.notation.View view) {
		final org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart fpart = diagramEditPart;
		final org.eclipse.gmf.runtime.notation.View fview = view;
		org.eclipse.emf.transaction.TransactionalEditingDomain txDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(view);
		«getValidationProviderQualifiedClassName()».runWithConstraints(txDomain, new Runnable() {

			public void run() {
				validate(fpart, fview);
			}
		});
	}
«ENDDEFINE»

«DEFINE runEMFValidator FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static org.eclipse.emf.common.util.Diagnostic runEMFValidator(
			org.eclipse.gmf.runtime.notation.View target) {
		if (target.isSetElement() && target.getElement() != null) {
			return new org.eclipse.emf.ecore.util.Diagnostician() {

				public String getObjectLabel(org.eclipse.emf.ecore.EObject eObject) {
					return org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(eObject, true);
				}
			}.validate(target.getElement());
		}
		return org.eclipse.emf.common.util.Diagnostic.OK_INSTANCE;
	}
«ENDDEFINE»

«DEFINE validate FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static void validate(org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart,
			org.eclipse.gmf.runtime.notation.View view) {
		«IF editorGen.application == null-»
		org.eclipse.core.resources.IFile target = view.eResource() != null ?
				org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(view.eResource()) : null;
		if (target != null) {
			«getMarkerNavigationProviderQualifiedClassName()».deleteMarkers(target);
		}
		«ELSE-»
		org.eclipse.gmf.runtime.notation.View target = view;
		«EXPAND xpt::editor::ValidationMarker::qualifiedClassName».removeAllMarkers(diagramEditPart.getViewer());
		«ENDIF-»
		org.eclipse.emf.common.util.Diagnostic diagnostic = runEMFValidator(view);
		createMarkers(target, diagnostic, diagramEditPart);
		org.eclipse.emf.validation.service.IBatchValidator validator =
				(org.eclipse.emf.validation.service.IBatchValidator)
						org.eclipse.emf.validation.service.ModelValidationService.getInstance().newValidator(
								org.eclipse.emf.validation.model.EvaluationMode.BATCH);
		validator.setIncludeLiveConstraints(true);
		if (view.isSetElement() && view.getElement() != null) {
			org.eclipse.core.runtime.IStatus status = validator.validate(view.getElement());
			createMarkers(target, status, diagramEditPart);
		}
«IF shouldRunValidateOnDiagram(editorGen.audits)-»
«IF hasDiagramElementTargetRule(editorGen.audits)-»
		validator.setTraversalStrategy(«getValidationProviderQualifiedClassName()».getNotationTraversalStrategy(validator));
«ENDIF-»
		org.eclipse.core.runtime.IStatus status = validator.validate(view);
		createMarkers(target, status, diagramEditPart);
«ENDIF-»
		«IF editorGen.application != null && validationDecorators-»
		«getValidationDecoratorProviderQualifiedClassName()».refreshDecorators(view);
		for (java.util.Iterator it = view.eAllContents(); it.hasNext();) {
			org.eclipse.emf.ecore.EObject next = (org.eclipse.emf.ecore.EObject) it.next();
			if (next instanceof org.eclipse.gmf.runtime.notation.View) {
				«getValidationDecoratorProviderQualifiedClassName()».refreshDecorators(
						(org.eclipse.gmf.runtime.notation.View) next);
			}
		}
		«ENDIF-»
	}
«ENDDEFINE»

«DEFINE createMarkersForStatus FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static void createMarkers(
			«IF editorGen.application == null»org.eclipse.core.resources.IFile
			«ELSE»org.eclipse.gmf.runtime.notation.View«ENDIF» target,
			org.eclipse.core.runtime.IStatus validationStatus,
			org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart) {
		if (validationStatus.isOK()) {
			return;
		}
		final org.eclipse.core.runtime.IStatus rootStatus = validationStatus;
		java.util.List allStatuses = new java.util.ArrayList();
		«getDiagramEditorUtilQualifiedClassName()».LazyElement2ViewMap element2ViewMap =
				new «getDiagramEditorUtilQualifiedClassName()».LazyElement2ViewMap(
						diagramEditPart.getDiagramView(),
						collectTargetElements(rootStatus, new java.util.HashSet(), allStatuses));
		for (java.util.Iterator it = allStatuses.iterator(); it.hasNext();) {
			org.eclipse.emf.validation.model.IConstraintStatus nextStatus =
					(org.eclipse.emf.validation.model.IConstraintStatus) it.next();
			org.eclipse.gmf.runtime.notation.View view = «getDiagramEditorUtilQualifiedClassName()».findView(
					diagramEditPart, nextStatus.getTarget(), element2ViewMap);			
			addMarker(diagramEditPart.getViewer(), target, view.eResource().getURIFragment(view), 
					org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(nextStatus.getTarget(), true), 
					nextStatus.getMessage(), nextStatus.getSeverity());
		}
	}
«ENDDEFINE»

«DEFINE createMarkersForDiagnostic FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static void createMarkers(
			«IF editorGen.application == null»org.eclipse.core.resources.IFile
			«ELSE»org.eclipse.gmf.runtime.notation.View«ENDIF» target,
			org.eclipse.emf.common.util.Diagnostic emfValidationStatus,
			org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart) {
		if (emfValidationStatus.getSeverity() == org.eclipse.emf.common.util.Diagnostic.OK) {
			return;
		}
		final org.eclipse.emf.common.util.Diagnostic rootStatus = emfValidationStatus;
		java.util.List allDiagnostics = new java.util.ArrayList();
		«getDiagramEditorUtilQualifiedClassName()».LazyElement2ViewMap element2ViewMap =
				new «getDiagramEditorUtilQualifiedClassName()».LazyElement2ViewMap(
						diagramEditPart.getDiagramView(),
						collectTargetElements(rootStatus, new java.util.HashSet(), allDiagnostics));
		for (java.util.Iterator it = emfValidationStatus.getChildren().iterator(); it.hasNext();) {
			org.eclipse.emf.common.util.Diagnostic nextDiagnostic = (org.eclipse.emf.common.util.Diagnostic) it.next();
			java.util.List data = nextDiagnostic.getData();
			if (data != null && !data.isEmpty() && data.get(0) instanceof org.eclipse.emf.ecore.EObject) {
				org.eclipse.emf.ecore.EObject element = (org.eclipse.emf.ecore.EObject) data.get(0);
				org.eclipse.gmf.runtime.notation.View view = «getDiagramEditorUtilQualifiedClassName()».findView(
						diagramEditPart, element, element2ViewMap);
				addMarker(diagramEditPart.getViewer(), target, view.eResource().getURIFragment(view),
						org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getQualifiedName(element, true),
						nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));
			}
		}
	}
«ENDDEFINE»

«DEFINE addMarker FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static void addMarker(org.eclipse.gef.EditPartViewer viewer,
			«IF editorGen.application == null»org.eclipse.core.resources.IFile
			«ELSE»org.eclipse.gmf.runtime.notation.View«ENDIF» target,
			String elementId, String location, String message, int statusSeverity) {
		if (target == null) {
			return;
		}
		«IF editorGen.application == null-»
		«getMarkerNavigationProviderQualifiedClassName()».addMarker(
				target, elementId, location, message, statusSeverity);
		«ELSE-»
		new «EXPAND xpt::editor::ValidationMarker::qualifiedClassName»(
				location, message, statusSeverity).add(viewer, elementId);
		«ENDIF-»
	}
«ENDDEFINE»

«DEFINE diagnosticToStatusSeverity FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static int diagnosticToStatusSeverity(int diagnosticSeverity) {
		if (diagnosticSeverity == org.eclipse.emf.common.util.Diagnostic.OK) {
			return org.eclipse.core.runtime.IStatus.OK;
		} else if (diagnosticSeverity == org.eclipse.emf.common.util.Diagnostic.INFO) {
			return org.eclipse.core.runtime.IStatus.INFO;
		} else if (diagnosticSeverity == org.eclipse.emf.common.util.Diagnostic.WARNING) {
			return org.eclipse.core.runtime.IStatus.WARNING;
		} else if (diagnosticSeverity == org.eclipse.emf.common.util.Diagnostic.ERROR
				|| diagnosticSeverity == org.eclipse.emf.common.util.Diagnostic.CANCEL) {
			return org.eclipse.core.runtime.IStatus.ERROR;
		}
		return org.eclipse.core.runtime.IStatus.INFO;
	}
«ENDDEFINE»

«DEFINE collectTargetElementsFromStatus FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static java.util.Set collectTargetElements(org.eclipse.core.runtime.IStatus status,
			java.util.Set targetElementCollector, java.util.List allConstraintStatuses) {
		if (status instanceof org.eclipse.emf.validation.model.IConstraintStatus) {
			targetElementCollector.add(((org.eclipse.emf.validation.model.IConstraintStatus) status).getTarget());
			allConstraintStatuses.add(status);
		}
		if (status.isMultiStatus()) {
			org.eclipse.core.runtime.IStatus[] children = status.getChildren();
			for (int i = 0; i < children.length; i++) {
				collectTargetElements(children[i], targetElementCollector, allConstraintStatuses);				
			}
		}
		return targetElementCollector;
	}
«ENDDEFINE»

«DEFINE collectTargetElementsFromDiagnostic FOR gmfgen::GenDiagram-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static java.util.Set collectTargetElements(org.eclipse.emf.common.util.Diagnostic diagnostic,
			java.util.Set targetElementCollector, java.util.List allDiagnostics) {
		java.util.List data = diagnostic.getData();
		org.eclipse.emf.ecore.EObject target = null;
		if (data != null && !data.isEmpty() && data.get(0) instanceof org.eclipse.emf.ecore.EObject) {
			target = (org.eclipse.emf.ecore.EObject) data.get(0);
			targetElementCollector.add(target);	
			allDiagnostics.add(diagnostic);
		}
		if (diagnostic.getChildren() != null && !diagnostic.getChildren().isEmpty()) {
			for (java.util.Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {
				collectTargetElements((org.eclipse.emf.common.util.Diagnostic) it.next(),
						targetElementCollector, allDiagnostics);
			}
		}
		return targetElementCollector;
	}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

«DEFINE i18nValues FOR gmfgen::GenDiagram-»
«EXPAND xpt::Externalizer::messageEntry(i18nKeyForValidateAction().messageKey(), "Validate")-»
«ENDDEFINE»

«DEFINE i18nAccessors FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Externalizer::accessorField(i18nKeyForValidateAction().messageKey())-»
«ENDDEFINE»
@


1.9
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d30 19
d55 3
d65 3
d96 3
d118 3
d129 3
d145 3
d162 3
d208 3
d237 3
d269 3
d289 3
d307 3
d326 3
a347 2
	«EXPAND additions-»
}
@


1.8
log
@[226149] Refactor Validation/Constraints: explicit context groupings instead of ID matching, unused IClientSelectors implementations are no longer generated, less custom code in the model, odd approach with map (semanticCtxIdMap) replaced with in-place VisualID check.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.7
log
@[139733] akarjakina - i18n support
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d18 1
d100 1
a100 2
	public static void runValidation(org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart,
			org.eclipse.gmf.runtime.notation.View view) {
d103 2
a104 1
		«getValidationProviderQualifiedClassName()».runWithConstraints(view, new Runnable() {
d150 4
a153 3
		«IF editorGen.audits != null && hasDiagramElementRule(editorGen.audits)-»
		validator.setTraversalStrategy(
				«getValidationProviderQualifiedClassName()».getNotationTraversalStrategy(validator));
d156 1
a156 1
		«ENDIF-»
@


1.6
log
@fix provider qname accessor name
@
text
@d19 1
a19 1
«DEFINE className FOR gmfgen::GenDiagram»ValidateAction«ENDDEFINE»
d39 1
a39 1
		setText("Validate");
d293 8
@


1.5
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d156 1
a156 1
		«getValidationDecoratorProviderQualifedClassName()».refreshDecorators(view);
d160 1
a160 1
				«getValidationDecoratorProviderQualifedClassName()».refreshDecorators(
@


1.4
log
@Non-nls comment replaced by template call.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.3
log
@[178958] Provide validation decorations in RCP diagram editors
@
text
@d31 1
a31 1
	public static final String VALIDATE_ACTION_KEY = "validateAction"; //$NON-NLS-1$
d66 1
a66 1
						"Validation action failed", e); //$NON-NLS-1$
d86 1
a86 1
					"Validation action failed", e); //$NON-NLS-1$
@


1.2
log
@[178958] store validation results in viewer
@
text
@d136 1
a136 1
		getMarkers(diagramEditPart.getViewer()).clear();
d155 10
d234 2
a235 1
		getMarkers(viewer, target, true).add(new Marker(elementId, location, message, statusSeverity));
a287 83
«IF editorGen.application != null-»

	«EXPAND xpt::Common::generatedMemberComment»
	private static java.util.Map getMarkers(org.eclipse.gef.EditPartViewer viewer) {
		java.util.Map markers = (java.util.Map) viewer.getProperty(VALIDATE_ACTION_KEY);
		if (markers == null) {
			markers = new java.util.HashMap();
			viewer.setProperty(VALIDATE_ACTION_KEY, markers);
		}
		return markers;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static java.util.Set getMarkers(org.eclipse.gef.EditPartViewer viewer,
			org.eclipse.gmf.runtime.notation.View view, boolean create) {
		java.util.Set markers = (java.util.Set) getMarkers(viewer).get(view);
		if (markers == null) {
			if (!create) {
				return java.util.Collections.EMPTY_SET;
			}
			markers = new HashSet();
			getMarkers(viewer).put(view, markers);
		}
		return markers;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static Marker[] getMarkers(org.eclipse.gef.EditPartViewer viewer,
			org.eclipse.gmf.runtime.notation.View view) {
		java.util.Set markers = getMarkers(viewer, view, false);
		if (markers.isEmpty()) {
			return Marker.EMPTY_ARRAY;
		}
		return (Marker[]) markers.toArray(new Marker[markers.size()]);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public static class Marker {

		«EXPAND xpt::Common::generatedMemberComment»
		public static final Marker[] EMPTY_ARRAY = new Marker[0];

		«EXPAND xpt::Common::generatedMemberComment»
		private final String elementId;

		«EXPAND xpt::Common::generatedMemberComment»
		private final String location;

		«EXPAND xpt::Common::generatedMemberComment»
		private final String message;

		«EXPAND xpt::Common::generatedMemberComment»
		private final int statusSeverity;

		«EXPAND xpt::Common::generatedMemberComment»
		public Marker(String elementId, String location, String message, int statusSeverity) {
			this.elementId = elementId;
			this.location = location;
			this.message = message;
			this.statusSeverity = statusSeverity;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public String getElementId() {
			return elementId;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public String getLocation() {
			return location;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public String getMessage() {
			return message;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public int getStatusSeverity() {
			return statusSeverity;
		}
	}
«ENDIF-»
@


1.1
log
@extract validate action from provider
@
text
@d127 1
a127 1
			org.eclipse.gmf.runtime.notation.View target) {
d129 4
a132 4
		org.eclipse.core.resources.IFile diagramFile = target.eResource() != null ?
				org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(target.eResource()) : null;
		if (diagramFile != null) {
			«getMarkerNavigationProviderQualifiedClassName()».deleteMarkers(diagramFile);
a133 4
		«ENDIF-»
		org.eclipse.emf.common.util.Diagnostic diagnostic = runEMFValidator(target);
		«IF editorGen.application == null-»
		createMarkers(diagramFile, diagnostic, diagramEditPart);
d135 2
a136 6
		if (diagnostic.getSeverity() != org.eclipse.emf.common.util.Diagnostic.OK) {
			org.eclipse.jface.dialogs.ErrorDialog.openError(
				org.eclipse.swt.widgets.Display.getCurrent().getActiveShell(), "Validation", "Validation failed.",
				org.eclipse.emf.common.util.BasicDiagnostic.toIStatus(diagnostic));
			return;
		}
d138 2
d145 3
a147 12
		if (target.isSetElement() && target.getElement() != null) {
			org.eclipse.core.runtime.IStatus status = validator.validate(target.getElement());
		«IF editorGen.application == null-»
			createMarkers(diagramFile, status, diagramEditPart);
		«ELSE-»
			if (status.getSeverity() != org.eclipse.core.runtime.IStatus.OK) {
				org.eclipse.jface.dialogs.ErrorDialog.openError(
						org.eclipse.swt.widgets.Display.getCurrent().getActiveShell(),
						"Validation", "Validation failed.", status);
				return;
			}
		«ENDIF-»
d152 2
a153 18
		org.eclipse.core.runtime.IStatus status = validator.validate(target);
			«IF editorGen.application == null-»
		createMarkers(diagramFile, status, diagramEditPart);
			«ELSE-»
		if (status.getSeverity() != org.eclipse.core.runtime.IStatus.OK) {
			org.eclipse.jface.dialogs.ErrorDialog.openError(
					org.eclipse.swt.widgets.Display.getCurrent().getActiveShell(),
					"Validation", "Validation failed.", status);
			return;
		}
			«ENDIF-»
		«ENDIF-»
		«IF editorGen.application != null-»
		org.eclipse.swt.widgets.MessageBox mb = new org.eclipse.swt.widgets.MessageBox(
				org.eclipse.swt.widgets.Display.getCurrent().getActiveShell(), org.eclipse.swt.SWT.OK);
		mb.setText("Validation");
		mb.setMessage("Model is valid.");
		mb.open();
a155 1
	«IF editorGen.application == null-»
d158 3
a160 1
	private static void createMarkers(org.eclipse.core.resources.IFile diagramFile,
d177 1
a177 1
			addMarker(diagramFile, view.eResource().getURIFragment(view), 
d184 3
a186 1
	private static void createMarkers(org.eclipse.core.resources.IFile diagramFile,
d205 1
a205 1
				addMarker(diagramFile, view.eResource().getURIFragment(view),
d213 3
a215 1
	private static void addMarker(org.eclipse.core.resources.IFile file,
d217 1
a217 1
		if (file == null) {
d220 1
d222 4
a225 1
				file, elementId, location, message, statusSeverity);
d241 1
a241 1
	}	
d277 83
a359 1
	«ENDIF-»
@

