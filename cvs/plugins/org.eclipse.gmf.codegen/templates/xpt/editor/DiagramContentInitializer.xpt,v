head	1.12;
access;
symbols
	v20081022-1925:1.12
	v20081015-1925:1.12
	v20081008-1925:1.11
	v20081001-1925:1.11
	v20080930-1130:1.11
	v20080926-1245:1.11
	v20080924-1925:1.11
	v20080917-1925:1.11
	v20080911-1728:1.11
	v20080910-1520:1.11
	v20080903-1520:1.11
	v20080827-1520:1.11
	v20080813-1520:1.10
	v20080806-1520:1.10
	v20080722-1827:1.10
	v20080718-1731:1.10
	v20080716-1600:1.10
	v20080716-1642:1.10
	R2_1_maintenance:1.10.0.2
	Root_R2_1_maintenance:1.10
	R2_1_0:1.10
	v20080610-1132:1.10
	v20080603-1553:1.10
	v20080528-1052:1.10
	v20080521:1.10
	v20080516-1543:1.10
	v20080516-1143:1.10
	v20080512-1200:1.10
	v20080508-2000:1.10
	v20080507-1326:1.10
	v20080503-1740:1.9
	v20080501-1739:1.9
	v20080425-1959:1.9
	v20080417-1610:1.9
	v20080411-0411:1.9
	v20080404-1111:1.9
	v20080322-0000:1.9
	v20080222-1200:1.7
	v20080215-1500:1.7
	v20080207-0207:1.6.2.1
	v20071222-1111:1.7
	v20071214-1111:1.7
	v20071130-1111:1.7
	v20071124-0000:1.6.2.1
	v20071112-0000:1.7
	v20071108-0000:1.7
	v20071003-0000:1.6
	v20070928-0000:1.6
	v20070921-0000:1.6
	v20070915-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.5
	v20070518-1300:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.12
date	2008.10.15.17.35.45;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	966a48f629f04567;

1.11
date	2008.08.22.18.25.42;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	5d5b48af049e4567;

1.10
date	2008.05.07.13.56.00;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	39124821b4de4567;

1.9
date	2008.02.28.16.37.15;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	2cc347c6e33a4567;

1.8
date	2008.02.21.18.35.58;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	6b4047bdc48d4567;

1.7
date	2007.10.26.10.50.39;	author ashatalin;	state Exp;
branches;
next	1.6;
commitid	13464721c67f4567;

1.6
date	2007.05.24.10.53.39;	author ashatalin;	state Exp;
branches
	1.6.2.1;
next	1.5;
commitid	81e46556eb34567;

1.5
date	2007.05.18.21.17.18;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	2591464e17d14567;

1.4
date	2007.05.15.19.19.22;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	43d3464a07b84567;

1.3
date	2007.05.15.18.34.13;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	25434649fd1f4567;

1.2
date	2007.05.11.16.01.31;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	44f84644934f4567;

1.1
date	2007.05.11.13.50.54;	author ashatalin;	state Exp;
branches;
next	;
commitid	6340464474b24567;

1.6.2.1
date	2007.10.26.10.36.06;	author ashatalin;	state Exp;
branches;
next	;
commitid	12e4721c3164567;


desc
@@


1.12
log
@[250767] refactored to access DIAGRAM_PREFERENCES_HINT uniformly
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»

«EXTENSION xpt::diagram::updater::Utils»
«EXTENSION xpt::GenModelUtils»

«DEFINE DiagramContentInitializer FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::copyright FOR getDiagram().editorGen-»
package «editorGen.editor.packageName»;

	«EXPAND xpt::Common::generatedClassComment»
public class «diagramContentInitializerClassName» {

	«EXPAND attributes-»

	«EXPAND initDiagramContent-»
	
	«EXPAND createChildren FOREACH getAllContainers().select(container | !container.sansDomain)-»
	
	«EXPAND createNode-»
	
	«EXPAND createLinks-»
	«IF !getAllContainers().typeSelect(gmfgen::GenCompartment).isEmpty()-»
	
		«EXPAND getCompartment-»
	«ENDIF-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE attributes FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Map myDomain2NotationMap = new java.util.HashMap();

	«EXPAND xpt::Common::generatedMemberComment»
private java.util.Collection myLinkDescriptors = new java.util.LinkedList();
«ENDDEFINE»

«DEFINE initDiagramContent FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
public void initDiagramContent(org.eclipse.gmf.runtime.notation.Diagram diagram) {
	if (!«EXPAND xpt::editor::VisualIDRegistry::modelID».equals(diagram.getType())) {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Incorrect diagram passed as a parameter: " + diagram.getType());
		return;
	}
	if («EXPAND MetaModel::NotInstance("diagram.getElement()") FOR domainDiagramElement») {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Incorrect diagram element specified: " + diagram.getElement() + " instead of «domainDiagramElement.ecoreClass.name»");
		return;
	}
	«EXPAND createChildrenMethodName»(diagram);
	createLinks(diagram);
}
«ENDDEFINE»

«DEFINE createChildrenMethodName FOR gmfgen::GenContainerBase»create«getUniqueIdentifier()»Children«ENDDEFINE»

«DEFINE createChildren FOR gmfgen::GenContainerBase-»
	«EXPAND xpt::Common::generatedMemberComment»
private void «EXPAND createChildrenMethodName»(org.eclipse.gmf.runtime.notation.View view) {
	«EXPAND collectContainedLinks-»
	«IF hasSemanticChildren(this)-»
	java.util.Collection childNodeDescriptors = «EXPAND xpt::diagram::updater::DiagramUpdater::getSemanticChildrenMethodCall»(view);
	for (java.util.Iterator it = childNodeDescriptors.iterator(); it.hasNext();) {
		createNode(view, («getDiagram().editorGen.diagramUpdater.getNodeDescriptorQualifiedClassName()») it.next());
	}
	«ENDIF-»
	«EXPAND createCompartmentsChildren-»
}
«ENDDEFINE»

«DEFINE collectContainedLinks FOR gmfgen::GenContainerBase»«ENDDEFINE»

«DEFINE collectContainedLinks FOR gmfgen::GenNode-»
	myDomain2NotationMap.put(view.getElement(), view);
	myLinkDescriptors.addAll(«EXPAND xpt::diagram::updater::DiagramUpdater::getOutgoingLinksMethodCall»(view));
«ENDDEFINE»

«DEFINE createCompartmentsChildren FOR gmfgen::GenContainerBase»«ENDDEFINE»

«DEFINE createCompartmentsChildren FOR gmfgen::GenNode-»
	«EXPAND callCreateCompartmentChildren FOREACH compartments»
«ENDDEFINE»

«REM»
	Will be called for each compartment of GenNode for GenNode.isSansDomain() == false. 
	if !GenNode.isSansDomain() => !GenCompartment.isSansDomain() so should not check 
	!this.isSansDomain() here.
«ENDREM»
«DEFINE callCreateCompartmentChildren FOR gmfgen::GenCompartment-»
	«EXPAND createChildrenMethodName»(getCompartment(view, «EXPAND xpt::editor::VisualIDRegistry::visualID»));
«ENDDEFINE»

«DEFINE createNode FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private void createNode(org.eclipse.gmf.runtime.notation.View parentView, «editorGen.diagramUpdater.getNodeDescriptorQualifiedClassName()» nodeDescriptor) {
	final String nodeType = «EXPAND xpt::editor::VisualIDRegistry::typeMethodCall("nodeDescriptor.getVisualID()")»;
	org.eclipse.gmf.runtime.notation.Node node = org.eclipse.gmf.runtime.diagram.core.services.ViewService.createNode(parentView, nodeDescriptor.getModelElement(), nodeType, «EXPAND xpt::plugin::Activator::preferenceHintAccess FOR editorGen»);
	switch (nodeDescriptor.getVisualID()) {
	«EXPAND createNodeCase FOREACH getAllNodes().select(node | !node.sansDomain)-»
	}
}
«ENDDEFINE»

«DEFINE createNodeCase FOR gmfgen::GenContainerBase-»
«EXPAND xpt::Common::caseVisualID»
	«EXPAND createChildrenMethodName»(node);
	return;
«ENDDEFINE»

«REM»Adopt this code to work with links to links«ENDREM»
«DEFINE createLinks FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private void createLinks(org.eclipse.gmf.runtime.notation.Diagram diagram) {
	for (boolean continueLinkCreation = true; continueLinkCreation;) {
		continueLinkCreation = false;
		java.util.Collection additionalDescriptors = new java.util.LinkedList();
		for (java.util.Iterator it = myLinkDescriptors.iterator(); it.hasNext();) {
			«editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()» nextLinkDescriptor = («editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName()») it.next();
			if (!myDomain2NotationMap.containsKey(nextLinkDescriptor.getSource()) || !myDomain2NotationMap.containsKey(nextLinkDescriptor.getDestination())) {
				continue;
			}
			final String linkType = «EXPAND xpt::editor::VisualIDRegistry::typeMethodCall("nextLinkDescriptor.getVisualID()")»;
			org.eclipse.gmf.runtime.notation.Edge edge = org.eclipse.gmf.runtime.diagram.core.services.ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, linkType, org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.APPEND, true, «EXPAND xpt::plugin::Activator::preferenceHintAccess FOR editorGen»);
			if (edge != null) {
				edge.setSource((org.eclipse.gmf.runtime.notation.View) myDomain2NotationMap.get(nextLinkDescriptor.getSource()));
				edge.setTarget((org.eclipse.gmf.runtime.notation.View) myDomain2NotationMap.get(nextLinkDescriptor.getDestination()));
				it.remove();
				if (nextLinkDescriptor.getModelElement() != null) {
					myDomain2NotationMap.put(nextLinkDescriptor.getModelElement(), edge);
				}
				continueLinkCreation = true;
				switch (nextLinkDescriptor.getVisualID()) {
	«EXPAND createLinksCase FOREACH links.select(link | null != getMetaClass(link))-»
				}
			}
		}
		myLinkDescriptors.addAll(additionalDescriptors);
	}
}
«ENDDEFINE»

«DEFINE createLinksCase FOR gmfgen::GenLink-»
«EXPAND xpt::Common::caseVisualID»
	additionalDescriptors.addAll(«EXPAND xpt::diagram::updater::DiagramUpdater::getOutgoingLinksMethodCall»(edge));
	break;
«ENDDEFINE»

«DEFINE getCompartment FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.notation.Node getCompartment(org.eclipse.gmf.runtime.notation.View node, int visualID) {
	String type = «EXPAND xpt::editor::VisualIDRegistry::typeMethodCall("visualID")»;
	for (java.util.Iterator it = node.getChildren().iterator(); it.hasNext();) {
		org.eclipse.gmf.runtime.notation.View nextView = (org.eclipse.gmf.runtime.notation.View) it.next();
		if (nextView instanceof org.eclipse.gmf.runtime.notation.Node && type.equals(nextView.getType())) {
			return (org.eclipse.gmf.runtime.notation.Node) nextView;
		}
	}
	return null;
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»@


1.11
log
@simplified visualId-to-viewType conversion helpers
@
text
@d109 1
a109 1
	org.eclipse.gmf.runtime.notation.Node node = org.eclipse.gmf.runtime.diagram.core.services.ViewService.createNode(parentView, nodeDescriptor.getModelElement(), nodeType, «editorGen.plugin.getActivatorQualifiedClassName()».DIAGRAM_PREFERENCES_HINT);
d135 1
a135 1
			org.eclipse.gmf.runtime.notation.Edge edge = (org.eclipse.gmf.runtime.notation.Edge) org.eclipse.gmf.runtime.diagram.core.services.ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, linkType, org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.APPEND, «editorGen.plugin.getActivatorQualifiedClassName()».DIAGRAM_PREFERENCES_HINT);
@


1.10
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d108 2
a109 1
	org.eclipse.gmf.runtime.notation.Node node = org.eclipse.gmf.runtime.diagram.core.services.ViewService.createNode(parentView, nodeDescriptor.getModelElement(), nodeDescriptor.getType(), «editorGen.plugin.getActivatorQualifiedClassName()».DIAGRAM_PREFERENCES_HINT);
d134 2
a135 1
			org.eclipse.gmf.runtime.notation.Edge edge = (org.eclipse.gmf.runtime.notation.Edge) org.eclipse.gmf.runtime.diagram.core.services.ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, nextLinkDescriptor.getType(), org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.APPEND, «editorGen.plugin.getActivatorQualifiedClassName()».DIAGRAM_PREFERENCES_HINT);
d163 1
a163 1
	String type = «EXPAND xpt::editor::VisualIDRegistry::getTypeMethodCall FOR getDiagram()»(visualID);
@


1.9
log
@refactor false == isInstance to NotInstance
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.8
log
@[150177] phase I, refactor existing code: extract metamodel/generated code access into single place
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d58 1
a58 1
	if (false == «EXPAND MetaModel::IsInstance("diagram.getElement()") FOR domainDiagramElement») {
@


1.7
log
@[206443] - Compile errors in generated DiagramContentInitializer for non synchronized editor
@
text
@d58 2
a59 2
	if (false == diagram.getElement() instanceof «getQualifiedInterfaceName(domainDiagramElement)») {
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Incorrect diagram element specified: " + diagram.getElement() + " instead of «getQualifiedInterfaceName(domainDiagramElement)»");
@


1.6
log
@[188662] - Connection links are lost in new OpenDiagramEditPolicy editor
@
text
@d110 1
a110 1
	«EXPAND createNodeCase FOREACH getAllNodes()-»
@


1.6.2.1
log
@[206443] - Compile errors in generated DiagramContentInitializer for non synchronized editor
@
text
@d110 1
a110 1
	«EXPAND createNodeCase FOREACH getAllNodes().select(node | !node.sansDomain)-»
@


1.5
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d143 1
a143 1
	«EXPAND createLinksCase FOREACH links.select(link | null != getTypeModelFacet(link))-»
@


1.4
log
@Replacing static method calls with templates.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.3
log
@Generating VisualIDRegistry using XPAND.
@
text
@d54 1
a54 1
	if (!«getEditPartQualifiedClassName()».MODEL_ID.equals(diagram.getType())) {
d161 1
a161 1
	String type = «getDiagram().getVisualIDRegistryQualifiedClassName()».getType(visualID);
@


1.2
log
@GenDiagramUpdater created in .gmfgen model
@
text
@d102 1
a102 1
	«EXPAND createChildrenMethodName»(getCompartment(view, «getEditPartQualifiedClassName()».VISUAL_ID));
@


1.1
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d76 1
a76 1
		createNode(view, («getDiagram().getNodeDescriptorQualifiedClassName()») it.next());
d107 1
a107 1
private void createNode(org.eclipse.gmf.runtime.notation.View parentView, «getNodeDescriptorQualifiedClassName()» nodeDescriptor) {
d129 1
a129 1
			«getLinkDescriptorQualifiedClassName()» nextLinkDescriptor = («getLinkDescriptorQualifiedClassName()») it.next();
@

