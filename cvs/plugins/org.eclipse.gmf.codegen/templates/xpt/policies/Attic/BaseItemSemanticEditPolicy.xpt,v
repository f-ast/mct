head	1.4;
access;
symbols
	v20081022-1925:1.4
	v20081015-1925:1.4
	v20081008-1925:1.4
	v20081001-1925:1.4
	v20080924-1925:1.4
	v20080917-1925:1.4
	v20080911-1728:1.4
	v20080910-1520:1.4
	v20080903-1520:1.4
	v20080827-1520:1.4
	v20080813-1520:1.4
	v20080806-1520:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.02.01.11.51.44;	author dstadnik;	state dead;
branches;
next	1.3;
commitid	dd445c1d44e4567;

1.3
date	2007.01.30.17.58.04;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	3f5845bf872c4567;

1.2
date	2007.01.30.16.42.29;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	4e0e45bf75734567;

1.1
date	2007.01.25.16.57.54;	author ashatalin;	state Exp;
branches;
next	;
commitid	271945b8e1904567;


desc
@@


1.4
log
@editpolicy templates should be located in one folder
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::policies::Utils»
«EXTENSION xpt::GenModelUtils»

«DEFINE BaseItemSemanticEditPolicy FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::copyright FOR editorGen-»
package «getDiagram().editPoliciesPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «baseItemSemanticEditPolicyClassName» extends org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy {

	«EXPAND semanticPart-»
	
	«EXPAND linkConstraints-»

	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE semanticPart FOR gmfgen::GenDiagram-»
	«EXPAND getSemanticCommand-»
	
	«EXPAND getSemanticCommandSwitch-»
	
	«EXPAND getConfigureCommand-»

	«EXPAND getCreateRelationshipCommand-»

	«EXPAND getCreateCommand-»

	«EXPAND getSetCommand-»

	«EXPAND getEditContextCommand-»

	«EXPAND getDestroyElementCommand-»

	«EXPAND getDestroyReferenceCommand-»

	«EXPAND getDuplicateCommand-»

	«EXPAND getMoveCommand-»

	«EXPAND getReorientReferenceRelationshipCommand-»

	«EXPAND getReorientRelationshipCommand-»
	
	«EXPAND getMSLWrapper-»

	«EXPAND getSemanticElement-»

	«EXPAND getRelationshipContainer-»
«ENDDEFINE»

«DEFINE getSemanticCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getSemanticCommand(org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest request) {
	org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest completedRequest = completeRequest(request);
	Object editHelperContext = completedRequest.getEditHelperContext();
	if (editHelperContext instanceof org.eclipse.gmf.runtime.notation.View || (editHelperContext instanceof org.eclipse.gmf.runtime.emf.type.core.IEditHelperContext && ((org.eclipse.gmf.runtime.emf.type.core.IEditHelperContext) editHelperContext).getEObject() instanceof org.eclipse.gmf.runtime.notation.View)) {
		// no semantic commands are provided for pure design elements
		return null;
	}
	if (editHelperContext == null) {
		editHelperContext = org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.resolveSemanticElement((org.eclipse.gmf.runtime.notation.View) getHost().getModel());
	}
	org.eclipse.gmf.runtime.emf.type.core.IElementType elementType = org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry.getInstance().getElementType(editHelperContext);
	if (elementType == org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry.getInstance().getType("org.eclipse.gmf.runtime.emf.type.core.default")) { //$NON-NLS-1$ 
	«REM»< % = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()) % >.getInstance().logInfo("Failed to get element type for " + editHelperContext); / / $NON-NLS-1$«ENDREM»«-»
		elementType = null;
	}
	org.eclipse.gef.commands.Command epCommand = getSemanticCommandSwitch(completedRequest);
	if (epCommand != null) {
		org.eclipse.gmf.runtime.common.core.command.ICommand command = epCommand instanceof org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy ? ((org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy) epCommand).getICommand() : new org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy(epCommand);
		completedRequest.setParameter(«getBaseEditHelperQualifiedClassName()».EDIT_POLICY_COMMAND, command);
	}
	org.eclipse.gef.commands.Command ehCommand = null;
	if (elementType != null) {
		org.eclipse.gmf.runtime.common.core.command.ICommand command = elementType.getEditCommand(completedRequest);
		if (command != null) {
			if (!(command instanceof org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand)) {
				org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = ((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getEditingDomain();
				command = new org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand(editingDomain, null).compose(command);
			}
			ehCommand = new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(command);
		}
	}
	boolean shouldProceed = true;
	if (completedRequest instanceof org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest) {
		shouldProceed = shouldProceed((org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest) completedRequest);
	}
	if (shouldProceed) {
		if (completedRequest instanceof org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest) {
			org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = ((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getEditingDomain();
			org.eclipse.gef.commands.Command deleteViewCommand = new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(new org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand(editingDomain, (org.eclipse.gmf.runtime.notation.View) getHost().getModel()));
			ehCommand = ehCommand == null ? deleteViewCommand : ehCommand.chain(deleteViewCommand);
		}
		return ehCommand;
	}
	return null;
}
«ENDDEFINE»

«DEFINE getSemanticCommandSwitch FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getSemanticCommandSwitch(org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest req) {
	if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest) {
		return getCreateRelationshipCommand((org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) {
		return getCreateCommand((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest) {
		return getConfigureCommand((org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest) {
		return getDestroyElementCommand((org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest) {
		return getDestroyReferenceCommand((org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest) {
		return getDuplicateCommand((org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest) {
		return getEditContextCommand((org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest) {
		return getMoveCommand((org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest) {
		return getReorientReferenceRelationshipCommand((org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest) {
		return getReorientRelationshipCommand((org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest) req);
	} else if (req instanceof org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest) {
		return getSetCommand((org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest) req);
	}
	return null;
}
«ENDDEFINE»

«DEFINE getConfigureCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getConfigureCommand(org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getCreateRelationshipCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getCreateRelationshipCommand(org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getCreateCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getSetCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getSetCommand(org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getEditContextCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getEditContextCommand(org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getDestroyElementCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getDestroyElementCommand(org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getDestroyReferenceCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getDestroyReferenceCommand(org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getDuplicateCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getDuplicateCommand(org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getMoveCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getMoveCommand(org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest req) {
	return null;
}
«ENDDEFINE»

«DEFINE getReorientReferenceRelationshipCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getReorientReferenceRelationshipCommand(org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest req) {
	return org.eclipse.gef.commands.UnexecutableCommand.INSTANCE;
}
«ENDDEFINE»

«DEFINE getReorientRelationshipCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getReorientRelationshipCommand(org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest req) {
	return org.eclipse.gef.commands.UnexecutableCommand.INSTANCE;
}
«ENDDEFINE»

«DEFINE getMSLWrapper FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.gef.commands.Command getMSLWrapper(org.eclipse.gmf.runtime.common.core.command.ICommand cmd) {
		return new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(cmd);
	}
«ENDDEFINE»

«DEFINE getSemanticElement FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.emf.ecore.EObject getSemanticElement() {
	return org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.resolveSemanticElement((org.eclipse.gmf.runtime.notation.View) getHost().getModel());
}
«ENDDEFINE»

«DEFINE getRelationshipContainer FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment(
	"Finds container element for the new relationship of the specified type.\n" +
	"Default implementation goes up by containment hierarchy starting from\n" +
	"the specified element and returns the first element that is instance of\n" +
	"the specified container class.\n"
)»
protected org.eclipse.emf.ecore.EObject getRelationshipContainer(org.eclipse.emf.ecore.EObject element, org.eclipse.emf.ecore.EClass containerClass, org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
	for (; element != null; element = element.eContainer()) {
		if (containerClass.isSuperTypeOf(element.eClass())) {
			return element;
		}
	}
	return null;
}
«ENDDEFINE»

«DEFINE linkConstraints FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedClassComment»
protected static class «getLinkCreationConstraintsClassName()» {
	«IF null != editorGen.expressionProviders-»
	«EXPAND xpt::Common::generatedMemberComment»
	private static final String OPPOSITE_END_VAR = "oppositeEnd"; //$NON-NLS-1$
		«EXPAND defineConstraintExpressions FOREACH getValidLinkConstraints(this)-»
	«ENDIF-»
	«EXPAND canCreate FOREACH links-»
	«IF null != editorGen.expressionProviders-»
		«IF hasOCLConstraints()-»
			«EXPAND evaluateOCL FOR editorGen.expressionProviders-»
		«ENDIF-»
		«IF hasJavaConstraints()-»
			«EXPAND JavaConstraints-»
		«ENDIF-»	
	«ENDIF-»
	
}
«ENDDEFINE»

«DEFINE defineConstraintExpressions FOR gmfgen::GenLinkConstraints-»
	«LET link.getDiagram().editorGen.expressionProviders AS expressionProviders-»
		«IF null != sourceEnd-»
		
			«EXPAND defineOCLConstraint(getSourceExpressionVarName(link), sourceEnd, getSourceEndContextClass(), getTargetEndContextClass()) FOR expressionProviders.getProvider(sourceEnd)-»
		«ENDIF-»
		«IF null != targetEnd-»
		
			«EXPAND defineOCLConstraint(getTargetExpressionVarName(link), targetEnd, getTargetEndContextClass(), getSourceEndContextClass()) FOR expressionProviders.getProvider(targetEnd)-»
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE defineOCLConstraint(String varName, gmfgen::GenConstraint constraint, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenExpressionInterpreter-»
«EXPAND xpt::Common::generatedMemberComment»
private static «container.editorGen.expressionProviders.getAbstractExpressionQualifiedClassName()» «varName»;

«EXPAND xpt::Common::generatedMemberComment»
static {
	«EXPAND xpt::expressions::getExpression::initOppositeEndEnv FOR oppositeEndContext-»
	«varName» = «EXPAND xpt::expressions::getExpression::getExpressionWithEnv(constraint, context)»; //$NON-NLS-1$
}
«ENDDEFINE»

«DEFINE defineOCLConstraint(String varName, gmfgen::GenConstraint constraint, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenJavaExpressionProvider»«ENDDEFINE»

«DEFINE defineOCLConstraint(String varName, gmfgen::GenConstraint constraint, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenExpressionProviderBase-»
	«EXPAND incorrectExpressionProviderBase-»
«ENDDEFINE»

«DEFINE canCreate FOR gmfgen::GenLink»

«EXPAND xpt::Common::generatedMemberComment»
public static boolean canCreate«getUniqueIdentifier()»(«EXPAND canCreateParameters FOR modelFacet») {
	«EXPAND checkEMFConstraints FOR modelFacet-»
	«IF creationConstraints != null && creationConstraints.isValid()-»
		«IF null != creationConstraints.sourceEnd-»
			«EXPAND checkAdditionalConstraint(creationConstraints, true) FOR getDiagram().editorGen.expressionProviders.getProvider(creationConstraints.sourceEnd)-»
		«ENDIF-»
		«IF null != creationConstraints.targetEnd-»
			«EXPAND checkAdditionalConstraint(creationConstraints, false) FOR getDiagram().editorGen.expressionProviders.getProvider(creationConstraints.targetEnd)-»
		«ENDIF-»
	«ENDIF-»
	return true;
}
«ENDDEFINE»

«DEFINE canCreateParameters FOR gmfgen::TypeLinkModelFacet»«IF null != sourceMetaFeature»«containmentMetaFeature.genClass.getQualifiedInterfaceName()» container, «ENDIF»«EXPAND sourceTargetParameters»«ENDDEFINE»

«DEFINE canCreateParameters FOR gmfgen::FeatureLinkModelFacet»«EXPAND sourceTargetParameters»«ENDDEFINE»

«DEFINE sourceTargetParameters FOR gmfgen::LinkModelFacet»«getSourceType().getQualifiedInterfaceName()» source, «getTargetType().getQualifiedInterfaceName()» target«ENDDEFINE»

«DEFINE canCreateParameters FOR gmfgen::LinkModelFacet-»
	«EXPAND incorrectLinkModelFacet-»
«ENDDEFINE»

«DEFINE checkEMFConstraints FOR gmfgen::TypeLinkModelFacet-»
	«LET childMetaFeature != containmentMetaFeature && childMetaFeature.ecoreFeature.upperBound > 0 AS checkChildFeatureUpperBound-»
		«IF containmentMetaFeature.ecoreFeature.upperBound > 0 || checkChildFeatureUpperBound-»
if («getContainerVariable()» != null) {
			«EXPAND checkEMFConstraints(this) FOR containmentMetaFeature-»
			«IF checkChildFeatureUpperBound-»
				«EXPAND checkEMFConstraints(this) FOR childMetaFeature-»
			«ENDIF-»
}
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE checkEMFConstraints(gmfgen::TypeLinkModelFacet modelFacet) FOR genmodel::GenFeature-»
	«IF ecoreFeature.upperBound > 0-»
if («EXPAND featureBoundComparator(getContainerVariable(modelFacet))») {
	return false;
}
	«ENDIF-»
«ENDDEFINE»

«DEFINE featureBoundComparator(String featureVar) FOR genmodel::GenFeature»«EXPAND xpt::Common::getFeatureValue(featureVar, true)»«IF ecoreFeature.upperBound == 1» != null«ELSE».size() >= «ecoreFeature.upperBound»«ENDIF»«ENDDEFINE»

«DEFINE checkEMFConstraints FOR gmfgen::FeatureLinkModelFacet-»
	«LET "source" AS sourceVar-»
if («sourceVar» != null) {
	if (
		«REM»Checking uper bounds if was specified in MM«ENDREM»«-»
		«IF metaFeature.ecoreFeature.upperBound > 0»«EXPAND featureBoundComparator(sourceVar) FOR metaFeature»«ENDIF-»
		«REM»Checking uniqueness in addition if uper bounds > 1«ENDREM»«-»
		«IF metaFeature.ecoreFeature.upperBound > 1» || «ENDIF-»
		«REM»Checking uniqueness in if uper bounds > 1 or < 0«ENDREM»«-»
		«IF metaFeature.ecoreFeature.upperBound != 1»«EXPAND featureUniquenessComparator(sourceVar) FOR metaFeature»«ENDIF») {
		return false;
	}
}
	«ENDLET-»
«ENDDEFINE»

«DEFINE featureUniquenessComparator(String featureVar) FOR genmodel::GenFeature»«EXPAND xpt::Common::getFeatureValue(featureVar, true) FOR this».contains(target)«ENDDEFINE»

«DEFINE checkEMFConstraints FOR gmfgen::LinkModelFacet-»
	«EXPAND incorrectLinkModelFacet-»
«ENDDEFINE»

«DEFINE checkAdditionalConstraint(gmfgen::GenLinkConstraints constraints, boolean checkSource) FOR gmfgen::GenExpressionInterpreter-»
if (!evaluate(«IF checkSource»«getSourceExpressionVarName(constraints.link)», source, target«ELSE»«getTargetExpressionVarName(constraints.link)», target, source«ENDIF», «!checkSource»)) {
	return false;
}
«ENDDEFINE»

«DEFINE checkAdditionalConstraint(gmfgen::GenLinkConstraints constraints, boolean checkSource) FOR gmfgen::GenJavaExpressionProvider-»
if (!JavaConstraints.«getOperationName(checkSource ? constraints.sourceEnd : constraints.targetEnd)»(«IF checkSource»source, target«ELSE»target, source«ENDIF»).booleanValue()) {
	return false;
}
«ENDDEFINE»

«DEFINE evaluateOCL FOR gmfgen::GenExpressionProviderContainer-»

«EXPAND xpt::Common::generatedMemberComment»
private static boolean evaluate(«getAbstractExpressionQualifiedClassName()» constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {
	if (sourceEnd == null) {
		return true;
	}
	java.util.Map evalEnv = java.util.Collections.singletonMap(OPPOSITE_END_VAR, oppositeEnd);			
	try {
		Object val = constraint.evaluate(sourceEnd, evalEnv);
		return (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;
	} catch(Exception e) {	
		«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError("Link constraint evaluation error", e); //$NON-NLS-1$
		return false;
	}
}
«ENDDEFINE»

«DEFINE JavaConstraints FOR gmfgen::GenDiagram-»

«EXPAND xpt::Common::generatedClassComment»
private static class JavaConstraints {
	«EXPAND javaExpressionOperations FOREACH getValidLinkConstraints()-»
}
«ENDDEFINE»

«DEFINE javaExpressionOperations FOR gmfgen::GenLinkConstraints-»
	«LET link.getDiagram().editorGen.expressionProviders AS expressionProviders-»
		«IF null != sourceEnd-»
		
			«EXPAND defineJAVAConstraint(sourceEnd, getSourceEndContextClass(), getTargetEndContextClass()) FOR expressionProviders.getProvider(sourceEnd)-»
		«ENDIF-»
		«IF null != targetEnd-»
		
			«EXPAND defineJAVAConstraint(targetEnd, getTargetEndContextClass(), getSourceEndContextClass()) FOR expressionProviders.getProvider(targetEnd)-»
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE defineJAVAConstraint(gmfgen::GenConstraint constraint, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenJavaExpressionProvider»
	«EXPAND xpt::expressions::javaExpressionOperation::javaExpressionOperation(constraint, context, oppositeEndContext)-»
«ENDDEFINE»

«DEFINE defineJAVAConstraint(gmfgen::GenConstraint constraint, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenExpressionInterpreter»«ENDDEFINE»

«DEFINE defineJAVAConstraint(gmfgen::GenConstraint constraint, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenExpressionProviderBase»
	«EXPAND incorrectExpressionProviderBase-»
«ENDDEFINE»

«DEFINE checkAdditionalConstraint(gmfgen::GenLinkConstraints constraints, boolean checkSource) FOR gmfgen::GenExpressionProviderBase-»
	«EXPAND incorrectExpressionProviderBase-»
«ENDDEFINE»

«DEFINE incorrectExpressionProviderBase FOR gmfgen::GenExpressionProviderBase-»
	«ERROR "Unrecognized expression provider: " + this-»
«ENDDEFINE»

«DEFINE incorrectLinkModelFacet FOR gmfgen::LinkModelFacet-»
	«ERROR "Unrecognized link model facet: " + this-»
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»@


1.3
log
@Adding NON-NLS comment
@
text
@@


1.2
log
@All the @@generated comments moved into a separate "define" statement.
@
text
@d296 1
a296 1
	«varName» = «EXPAND xpt::expressions::getExpression::getExpressionWithEnv(constraint, context)»;
@


1.1
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@d23 1
a23 3
/**
 * @@generated
 */
d69 1
a69 3
/**
 * @@generated
 */
d118 1
a118 3
/**
 * @@generated
 */
d148 1
a148 3
/**
 * @@generated
 */
d155 1
a155 3
/**
 * @@generated
 */
d162 1
a162 3
/**
 * @@generated
 */
d169 1
a169 3
/**
 * @@generated
 */
d176 1
a176 3
/**
 * @@generated
 */
d183 1
a183 3
/**
 * @@generated
 */
d190 1
a190 3
/**
 * @@generated
 */
d197 1
a197 3
/**
 * @@generated
 */
d204 1
a204 3
/**
 * @@generated
 */
d211 1
a211 3
/**
 * @@generated
 */
d218 1
a218 3
/**
 * @@generated
 */
d225 1
a225 3
	/**
	 * @@generated
	 */
d232 1
a232 3
/**
 * @@generated
 */
d239 6
a244 8
/**
 * Finds container element for the new relationship of the specified type.
 * Default implementation goes up by containment hierarchy starting from
 * the specified element and returns the first element that is instance of
 * the specified container class.
 * 
 * @@generated
 */
d256 1
a256 3
/**
 * @@generated 
 */
d259 1
a259 3
	/**
	 * @@generated 
	 */	
d290 1
a290 3
/**
 * @@generated 
 */
d293 1
a293 3
/**
 * @@generated 
 */
d308 1
a308 3
/**
 * @@generated 
 */
d392 1
a392 3
/**
 * @@generated 
 */
d410 1
a410 3
/**
 * @@generated
 */
@

