head	1.8;
access;
symbols
	v20081022-1925:1.8
	v20081015-1925:1.8
	v20081008-1925:1.8
	v20081001-1925:1.8
	v20080924-1925:1.8
	v20080917-1925:1.8
	v20080911-1728:1.8
	v20080910-1520:1.8
	v20080903-1520:1.8
	v20080827-1520:1.7
	v20080813-1520:1.7
	v20080806-1520:1.6
	v20080722-1827:1.6
	v20080718-1731:1.6
	v20080716-1600:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.2
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080610-1132:1.6
	v20080603-1553:1.6
	v20080528-1052:1.6
	v20080521:1.6
	v20080516-1543:1.6
	v20080516-1143:1.6
	v20080512-1200:1.6
	v20080508-2000:1.6
	v20080507-1326:1.6
	v20080503-1740:1.5
	v20080501-1739:1.5
	v20080425-1959:1.5
	v20080417-1610:1.5
	v20080411-0411:1.5
	v20080404-1111:1.5
	v20080322-0000:1.5
	v20080222-1200:1.5
	v20080215-1500:1.5
	v20080207-0207:1.5
	v20071222-1111:1.5
	v20071214-1111:1.5
	v20071130-1111:1.5
	v20071124-0000:1.5
	v20071112-0000:1.5
	v20071108-0000:1.5
	v20071003-0000:1.5
	v20070928-0000:1.5
	v20070921-0000:1.5
	v20070915-0000:1.5
	v20070903-0000:1.5
	v20070809-0000:1.5
	R2_0_maintenance:1.5.0.2
	R2_0:1.5
	R4_20:1.5
	v20070621-0000:1.5
	RC3_20:1.5
	v20070614-1400:1.5
	v20070608-1300:1.5
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070520-1200:1.5
	v20070518-1300:1.4
	v20070504-1000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2008.08.28.21.22.12;	author atikhomirov;	state dead;
branches;
next	1.7;
commitid	3cb348b717024567;

1.7
date	2008.08.13.13.50.34;	author dstadnik;	state Exp;
branches;
next	1.6;
commitid	440348a2e6584567;

1.6
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	39124821b4de4567;

1.5
date	2007.05.18.21.17.19;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	2591464e17d14567;

1.4
date	2007.05.15.18.18.27;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	19164649f9734567;

1.3
date	2007.05.08.11.31.23;	author dstadnik;	state Exp;
branches;
next	1.2;
commitid	650846405f8b4567;

1.2
date	2007.05.04.15.05.21;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	2fa4463b4bb14567;

1.1
date	2007.05.03.11.03.11;	author dstadnik;	state Exp;
branches;
next	;
commitid	f824639c16d4567;


desc
@@


1.8
log
@Refactoring to address [235113] alternative parser access and [244419] Support for custom parser:
no separate Parser implementations, rather tailored to specific view and edit methods used.
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»

«DEFINE className FOR gmfgen::GenDiagram»NativeParser«ENDDEFINE»

«DEFINE qualifiedClassName FOR gmfgen::GenDiagram»«parsersPackageName».«EXPAND className»«ENDDEFINE»

«DEFINE NativeParser FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen-»
package «parsersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» extends «EXPAND xpt::parsers::AbstractParser::qualifiedClassName» {

	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND className»(org.eclipse.emf.ecore.EAttribute[] features) {
		super(features);
		if (features.length != 1) {
			throw new IllegalArgumentException(java.util.Arrays.toString(features));
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND className»(org.eclipse.emf.ecore.EAttribute[] features,
			org.eclipse.emf.ecore.EAttribute[] editableFeatures) {
		super(features, editableFeatures);
		if (features.length != 1) {
			throw new IllegalArgumentException(java.util.Arrays.toString(features));
		}
		if (editableFeatures.length != 1) {
			throw new IllegalArgumentException(java.util.Arrays.toString(editableFeatures));
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EAttribute getAttribute() {
		return features[0];
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EAttribute getEditableAttribute() {
		return editableFeatures[0];
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public String getPrintString(org.eclipse.core.runtime.IAdaptable adapter, int flags) {
		org.eclipse.emf.ecore.EObject element =
				(org.eclipse.emf.ecore.EObject) adapter.getAdapter(org.eclipse.emf.ecore.EObject.class);
		org.eclipse.emf.ecore.EAttribute feature = getAttribute();
		String s = org.eclipse.emf.ecore.util.EcoreUtil.convertToString(
				feature.getEAttributeType(), element.eGet(feature));
		return s != null ? s : ""; «EXPAND xpt::Common::nonNLS»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public String getEditString(org.eclipse.core.runtime.IAdaptable adapter, int flags) {
		org.eclipse.emf.ecore.EObject element =
				(org.eclipse.emf.ecore.EObject) adapter.getAdapter(org.eclipse.emf.ecore.EObject.class);
		org.eclipse.emf.ecore.EAttribute feature = getEditableAttribute();
		String s = org.eclipse.emf.ecore.util.EcoreUtil.convertToString(
				feature.getEAttributeType(), element.eGet(feature));
		return s != null ? s : ""; «EXPAND xpt::Common::nonNLS»
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus isValidEditString(
			org.eclipse.core.runtime.IAdaptable adapter, String editString) {
		return org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus.EDITABLE_STATUS;
	}

	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.common.core.command.ICommand getParseCommand(
			org.eclipse.core.runtime.IAdaptable adapter, String newString, int flags) {
		org.eclipse.emf.ecore.EAttribute feature = getEditableAttribute();
		Object value = org.eclipse.emf.ecore.util.EcoreUtil.createFromString(feature.getEAttributeType(), newString);
		return getParseCommand(adapter, new Object[] { value }, flags);
	}
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»
@


1.7
log
@[231322] allow to specify editable features
@
text
@@


1.6
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d37 12
d54 5
d70 6
a75 1
		return getPrintString(adapter, flags);
d87 1
a87 1
		org.eclipse.emf.ecore.EAttribute feature = getAttribute();
@


1.5
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2006/GenModel"»
@


1.4
log
@Non-nls comment replaced by template call.
@
text
@d13 1
a13 1
«IMPORT "http://www.eclipse.org/gmf/2005/GenModel/2.0"»
@


1.3
log
@do not return nulls
@
text
@d48 1
a48 1
		return s != null ? s : ""; //$NON-NLS-1$
@


1.2
log
@add features check
@
text
@d46 1
a46 1
		return org.eclipse.emf.ecore.util.EcoreUtil.convertToString(
d48 1
@


1.1
log
@[158420] Using factory methods for converting to/from Strings and EDataType values in label editor parser
@
text
@d31 3
@

