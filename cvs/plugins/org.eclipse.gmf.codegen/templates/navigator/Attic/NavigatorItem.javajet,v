head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081015-1925:1.7
	v20081008-1925:1.7
	v20081001-1925:1.7
	v20080924-1925:1.7
	v20080917-1925:1.7
	v20080911-1728:1.7
	v20080910-1520:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	v20080806-1520:1.7
	v20060316-0600:1.6
	v20070307-0700:1.6
	v20070301-1200:1.6
	v20070228-2000:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070103-0300:1.6
	M4_20:1.6
	v20061222-1800:1.6
	v20061218-1200:1.6
	v20061214-0000:1.6
	v20061120-1300:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2007.03.20.14.49.12;	author ashatalin;	state dead;
branches;
next	1.6;
commitid	761245fff4684567;

1.6
date	2006.11.14.18.17.26;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	1b80455a08354567;

1.5
date	2006.11.08.14.06.27;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.03.20.43.48;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.02.14.12.22;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.03.16.47.41;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.22.13.21.24;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Generating diagram file navigator updating code.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.navigator" class="NavigatorItemGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
GenNavigator genNavigator = (GenNavigator) ((Object[]) argument)[0];
GenDiagram genDiagram = genNavigator.getEditorGen().getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genNavigator.getNavigatorItemClassName()%> extends <%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%> {
	
	/**
	 * @@generated
	 */	
	static {
		final Class[] supportedTypes = new Class[] { <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>.class, <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>.class };
		<%=importManager.getImportedName("org.eclipse.core.runtime.Platform")%>.getAdapterManager().registerAdapters(new <%=importManager.getImportedName("org.eclipse.core.runtime.IAdapterFactory")%>() {
		
			public Object getAdapter(Object adaptableObject, Class adapterType) {
				if (adaptableObject instanceof <%=genNavigator.getNavigatorItemClassName()%> && (adapterType == <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>.class || adapterType == <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>.class)) {
					return ((<%=genNavigator.getNavigatorItemClassName()%>) adaptableObject).getView();
				}
				return null;
			}

			public Class[] getAdapterList() {
				return supportedTypes;
			}
		}, <%=genNavigator.getNavigatorItemClassName()%>.class);
	}

	/**
	 * @@generated
	 */	
	private <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> myView;
	
	/**
	 * @@generated
	 */	
	private boolean myLeaf = false;	

	/**
	 * @@generated
	 */	
	public <%=genNavigator.getNavigatorItemClassName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view, Object parent, boolean isLeaf) {
		super(parent);
		myView = view;
		myLeaf = isLeaf;
	}

	/**
	 * @@generated
	 */	
	public <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> getView() {
		return myView;
	}

	/**
	 * @@generated
	 */	
	public boolean isLeaf() {
		return myLeaf;
	}
	
	/**
	 * @@generated
	 */	
	public boolean equals(Object obj) {
		if (obj instanceof <%=genNavigator.getNavigatorItemClassName()%>) {
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> eObject = getView().getElement();
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> anotherEObject = ((<%=genNavigator.getNavigatorItemClassName()%>) obj).getView().getElement();
			if (eObject == null) {
				return anotherEObject == null;
			} else if (anotherEObject == null) {
				return false;
			}
			if (eObject.eResource() != null) {
				return eObject.eResource().getURIFragment(eObject).equals(anotherEObject.eResource().getURIFragment(anotherEObject));
			}
		}
		return super.equals(obj);
	}
	
}
<%importManager.emitSortedImports();%>
@


1.6
log
@Potential null-pointer corrected.
@
text
@@


1.5
log
@LinkHelper adopted to work correctly with shortcuts.
@
text
@d83 3
a85 1
			return eObject.eResource().getURIFragment(eObject).equals(anotherEObject.eResource().getURIFragment(anotherEObject));
@


1.4
log
@Refactoring navigator to support cross-diagram shortcuts.
@
text
@a66 15
	public String getModelID() {
		return <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(myView);
	}
	
	
	/**
	 * @@generated
	 */	
	public int getVisualID() {
		return <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(myView);
	}
	
	/**
	 * @@generated
	 */	
@


1.3
log
@Linked elements are leafs by default.
@
text
@d17 20
a88 10
	public Object getAdapter(Class adapter) {
		if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>.class.isAssignableFrom(adapter) || <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>.class.isAssignableFrom(adapter)) {
			return myView;
		}
		return super.getAdapter(adapter);
	}
	
	/**
	 * @@generated
	 */	
@


1.2
log
@Parent element correctly provided to navigator.
@
text
@d22 5
d31 1
a31 1
	public <%=genNavigator.getNavigatorItemClassName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view, Object parent) {
d34 1
d62 7
@


1.1
log
@Read-only properties provided into the navigator.
@
text
@d26 2
a27 1
	public <%=genNavigator.getNavigatorItemClassName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
d63 17
@

