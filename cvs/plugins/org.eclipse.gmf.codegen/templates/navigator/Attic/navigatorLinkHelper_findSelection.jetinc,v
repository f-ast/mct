head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081015-1925:1.2
	v20081008-1925:1.2
	v20081001-1925:1.2
	v20080924-1925:1.2
	v20080917-1925:1.2
	v20080911-1728:1.2
	v20080910-1520:1.2
	v20080903-1520:1.2
	v20080827-1520:1.2
	v20080813-1520:1.2
	v20080806-1520:1.2
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070520-1200:1.1
	v20070518-1300:1.1
	v20070504-1000:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061218-1200:1.1
	v20061214-0000:1.1
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.06.11.14.58.50;	author ashatalin;	state dead;
branches;
next	1.1;
commitid	317d466d63264567;

1.1
date	2006.10.06.11.47.59;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@[191851] - Convert /navigator/NavigatorSorter.javajet template to xpand
@
text
@	/**
	 * @@generated
	 */	
	public <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> findSelection(<%=importManager.getImportedName("org.eclipse.ui.IEditorInput")%> anInput) {
		<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchWindow")%> workbenchWindow = <%=importManager.getImportedName("org.eclipse.ui.PlatformUI")%>.getWorkbench().getActiveWorkbenchWindow();
		if (workbenchWindow != null && workbenchWindow.getActivePage() != null) {
			<%=importManager.getImportedName("org.eclipse.ui.IWorkbenchPage")%> workbenchPage = workbenchWindow.getActivePage();
			if (workbenchPage != null) {
				<%=importManager.getImportedName("org.eclipse.ui.IEditorReference")%>[] editorReferences = workbenchPage.getEditorReferences();
				for (int i = 0; i < editorReferences.length; i++) {
					if (!<%=importManager.getImportedName(genNavigator.getEditorGen().getEditor().getQualifiedClassName())%>.ID.equals(editorReferences[i].getId())) {
						continue;
					}
					try {
						if (editorReferences[i].getEditorInput() == anInput) {
							<%=importManager.getImportedName("org.eclipse.ui.IEditorPart")%> editor = editorReferences[i].getEditor(true);
							if (editor instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart")%>) {
								<%=importManager.getImportedName("org.eclipse.jface.viewers.ISelection")%> viewerSelection = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart")%>) editor).getDiagramGraphicalViewer().getSelection();
								return getNavigatorSelection(viewerSelection);
							}
						}
					} catch (<%=importManager.getImportedName("org.eclipse.ui.PartInitException")%> e) {
						<%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Error while selecting item in navigator", e);
					}
				}
			}
		}
		return <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>.EMPTY;
	}
	
	/**
	 * @@generated
	 */	
	private <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%> getNavigatorSelection(<%=importManager.getImportedName("org.eclipse.jface.viewers.ISelection")%> viewerSelection) {
		if (viewerSelection instanceof <%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) {
			<%=importManager.getImportedName("java.util.List")%> selection = new <%=importManager.getImportedName("java.util.ArrayList")%>();
			for (<%=importManager.getImportedName("java.util.Iterator")%> it = ((<%=importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection")%>) viewerSelection).iterator(); it.hasNext();) {
				Object nextSelected = it.next();
				if (nextSelected instanceof <%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) {
					<%=importManager.getImportedName("org.eclipse.gef.EditPart")%> editPart = (<%=importManager.getImportedName("org.eclipse.gef.EditPart")%>) nextSelected;
					if (editPart.getModel() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
						<%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%> nextNavigatorItem = createNavigatorItem((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) editPart.getModel());
						if (nextNavigatorItem != null) {
							selection.add(nextNavigatorItem);
						}
					}
				}
			}
			return new <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>(selection);
		}
		return <%=importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection")%>.EMPTY;
	}

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> createNavigatorItem(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(view))) {
			switch (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view)) {
<%Collection commonBaseElements = new ArrayList(genDiagram.getAllContainers());
commonBaseElements.addAll(genDiagram.getLinks());
for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection allReferences = genNavigator.getChildReferencesTo(nextCommonBase);
	if (allReferences.size() == 0) {
		continue;
	}
	
	GenNavigatorChildReference theReference = null;
	for (Iterator it = allReferences.iterator(); theReference == null && it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL &&nextReference.getParent() != null) {
			theReference = nextReference;
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
			if (nextCommonBase instanceof GenDiagram && nextReference.getParent() == null) {
				theReference = nextReference;
			} else if (nextCommonBase instanceof GenLink && nextReference.getParent() instanceof GenDiagram) {
				theReference = nextReference;
			}
		}
	}
	
	if (theReference == null) {
		/* No supported child references for back navigation found */
		continue;
	}%>
			case <%=importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName())%>.VISUAL_ID:
				return create<%=nextCommonBase.getUniqueIdentifier()%>Item(view);
<%}%>
			}
			return null;
		}

		// TODO: Process shortcuts here!
		return null;
	}
	
<%for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection allReferences = genNavigator.getChildReferencesTo(nextCommonBase);
	if (allReferences.size() == 0) {
		continue;
	}
	
	GenNavigatorChildReference theReference = null;
	Collection childReferences = new ArrayList();
	for (Iterator it = allReferences.iterator(); it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL && nextReference.getParent() != null) {
			childReferences.add(nextReference);
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL && theReference == null) {
			if (nextCommonBase instanceof GenDiagram && nextReference.getParent() == null) {
				theReference = nextReference;
			} else if (nextCommonBase instanceof GenLink && nextReference.getParent() instanceof GenDiagram) {
				theReference = nextReference;
			}
		}
	}
	
	if (childReferences.size() == 0 && theReference == null) {
		/* No supported child references for back navigation found */
		continue;
	}%>
	/**
	 * @@generated
	 */	
	public <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> create<%=nextCommonBase.getUniqueIdentifier()%>Item(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
<%	if (childReferences.size() > 0) {%>
		for (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container = view.eContainer(); container instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>; container = container.eContainer()) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> containerView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) container;
			if (stopGettingParents(view, containerView)) {
				break;
			}
			if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(containerView))) {
				switch (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(containerView)) {
<%		for (Iterator it = childReferences.iterator(); it.hasNext();) {
			GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();%>
				case <%=importManager.getImportedName(nextReference.getParent().getEditPartQualifiedClassName())%>.VISUAL_ID : {
					<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> parentItem = createNavigatorItem(containerView); 
					if (parentItem == null) {
						return null;
					}
<%			if (nextReference.isInsideGroup()) {%>
					<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> parentGroup = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=nextReference.getGroupName()%>", "<%=nextReference.getGroupIcon()%>", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, parentItem); 
<%			}%>
					<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> result = new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(view, parent<%if (nextReference.isInsideGroup()) {%>Group<%} else {%>Item<%}%>);
<%			if (nextReference.isInsideGroup()) {%>
					parentGroup.addChild(result) 
<%			}%>
					return result; 
				}
<%		}%>
				}
			}
		}
<%	}
	
	if (theReference != null) {
		String parentVariable;
		if (theReference.getParent() == null) {
			parentVariable = "parentFile";%>
		Object parentFile = <%=importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer")%>.getFile(view.eResource());
<%		} else {
			parentVariable = "parentItem";%>
		<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> parentItem = createNavigatorItem(view.getDiagram());
		if (parentItem == null) {
			return null;
		}
<%		}
		
		if (theReference.isInsideGroup()) {%>
		<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> parentGroup = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=theReference.getGroupName()%>", "<%=theReference.getGroupIcon()%>", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, <%=parentVariable%>);
<%			parentVariable = "parentGroup";
		}%>		
		<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> result = new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(view, <%=parentVariable%>); 
<%		if (theReference.isInsideGroup()) {%>
		parentGroup.addChild(result); 
<%		}%>
		return result;
<%	} else {%>
		return null;
<%	}%>
	}
	
<%}%>
	/**
	 * @@generated
	 */	
	public boolean stopGettingParents(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> containerView) {
		return false;
	}
@


1.1
log
@LinkHelper generated for Project Explorer view.
@
text
@@

