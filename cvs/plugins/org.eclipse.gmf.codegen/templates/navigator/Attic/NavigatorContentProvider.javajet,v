head	1.10;
access;
symbols
	v20081022-1925:1.10
	v20081015-1925:1.10
	v20081008-1925:1.10
	v20081001-1925:1.10
	v20080924-1925:1.10
	v20080917-1925:1.10
	v20080911-1728:1.10
	v20080910-1520:1.10
	v20080903-1520:1.10
	v20080827-1520:1.10
	v20080813-1520:1.10
	v20080806-1520:1.10
	M4_20:1.9
	v20061222-1800:1.9
	v20061218-1200:1.8
	v20061214-0000:1.8
	v20061120-1300:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061013-1330:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2006.12.28.19.45.51;	author ashatalin;	state dead;
branches;
next	1.9;
commitid	13f545941eec4567;

1.9
date	2006.12.19.14.40.47;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	46a04587f9ee4567;

1.8
date	2006.11.08.14.06.28;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.07.20.04.26;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.03.20.43.48;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.02.14.12.22;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.01.18.57.09;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.01.18.25.42;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.03.16.47.41;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.22.13.21.24;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.10
log
@NavigatorContentProvider template reimplemented on xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.navigator" class="NavigatorContentProviderGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* java.util.* org.eclipse.emf.codegen.util.* org.eclipse.gmf.codegen.util.*"%>
<%
GenNavigator genNavigator = (GenNavigator) ((Object[]) argument)[0];
GenDiagram genDiagram = genNavigator.getEditorGen().getDiagram();
Collection commonBaseElements = new ArrayList(genDiagram.getAllContainers());
commonBaseElements.addAll(genDiagram.getLinks());
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genNavigator.getContentProviderClassName()%> implements <%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentProvider")%> {

	/**
	 * @@generated
	 */
	private static final Object[] EMPTY_ARRAY = new Object[0];

	/**
	 * @@generated
	 */
    public void dispose() {
    }

	/**
	 * @@generated
	 */
    public void inputChanged(<%=importManager.getImportedName("org.eclipse.jface.viewers.Viewer")%> viewer, Object oldInput, Object newInput) {
    }
    
	/**
	 * @@generated
	 */
	public Object[] getElements(Object inputElement) {
		return getChildren(inputElement);
	}
	
	/**
	 * @@generated
	 */
    public Object[] getChildren(Object parentElement) {
		if (parentElement instanceof <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%>) {
	    	<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> file = (<%=importManager.getImportedName("org.eclipse.core.resources.IFile")%>) parentElement;
			<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%> editingDomain = (<%=importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain")%>) <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory")%>.INSTANCE.createEditingDomain();
			editingDomain.setResourceToReadOnlyMap(new <%=importManager.getImportedName("java.util.HashMap")%>() {
				public Object get(Object key) {
					if (!containsKey(key)) {
						put(key, Boolean.TRUE);
					}
					return super.get(key);
				}
			});
			<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet")%> resourceSet = editingDomain.getResourceSet();
			
			<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> fileURI = <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(file.getFullPath().toString(), true);
			<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = resourceSet.getResource(fileURI, true);
			
			<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%Map createdDiagramGroups = new TreeMap();
for (Iterator it = genNavigator.getChildReferencesFrom(null).iterator(); it.hasNext();) {
	GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
	if (nextReference.getReferenceType() != GenNavigatorReferenceType.CHILDREN_LITERAL) {
		continue;
	}
	String parentVariable;
	if (nextReference.isInsideGroup()) {
		parentVariable = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
		if (!createdDiagramGroups.containsKey(parentVariable)) {
			createdDiagramGroups.put(parentVariable, nextReference);%>
			<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> <%=parentVariable%> = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=nextReference.getGroupName()%>", "<%=nextReference.getGroupIcon()%>", file);
<%		}%>
			<%=parentVariable%>.addChildren(<%
	} else {
		parentVariable = "file";%>
			result.addAll(<%
	}%>createNavigatorItems(selectViewsByType(resource.getContents(), <%
	if (nextReference.getChild() instanceof GenDiagram) {
		%><%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.MODEL_ID<%
	} else {
		%><%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID)<%
	}%>), <%=parentVariable%>));
<%}

for (Iterator it = createdDiagramGroups.keySet().iterator(); it.hasNext();) {
	String groupNameKey = (String) it.next();
	GenNavigatorChildReference nextReference = (GenNavigatorChildReference) createdDiagramGroups.get(groupNameKey);
	if (nextReference.isHideIfEmpty()) {%>
			if (!<%=groupNameKey%>.isEmpty()) {
<%	}%>
			result.add(<%=groupNameKey%>);
<%	if (nextReference.isHideIfEmpty()) {%>
			}
<%	}
}
%>
			return result.toArray();
		}
		
		if (parentElement instanceof <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>) {
			<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> group = (<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>) parentElement;
			return group.getChildren();
		} 

		if (parentElement instanceof <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) {
			<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> navigatorItem = (<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) parentElement;
    		if (navigatorItem.isLeaf() || !isOwnView(navigatorItem.getView())) {
    			return EMPTY_ARRAY;
    		}
    		return getViewChildren(navigatorItem.getView(), parentElement);
		}
		
<%if (genDiagram.generateShortcutIcon()) {%>
		// Due to plugin.xml content will be called only for "own" views
		if (parentElement instanceof <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) ((<%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>) parentElement).getAdapter(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>.class);
			if (view != null) {
				return getViewChildren(view, parentElement);
			}
		}<%
}%>

		return EMPTY_ARRAY;
	}
	
	/**
	 * @@generated
	 */
    private Object[] getViewChildren(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view, Object parentElement) {
		switch (<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view)) {
<%boolean generateGetForeignShortcuts = false;
Map getter2ReferenceMap = new TreeMap();
for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection childReferences = genNavigator.getChildReferencesFrom(nextCommonBase);
	if (childReferences.size() == 0) {
		continue;
	}%>
		case <%=importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName())%>.VISUAL_ID: {
			<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%	if (nextCommonBase instanceof GenDiagram && ((GenDiagram) nextCommonBase).generateCreateShortcutAction()) {
		generateGetForeignShortcuts = true;%>
			result.addAll(getForeignShortcuts((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) view, parentElement));
<%	}
	Map createdGroups = new TreeMap();
	for (Iterator it = childReferences.iterator(); it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		String parentVariable;
		if (nextReference.isInsideGroup()) {
			parentVariable = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
			if (!createdGroups.containsKey(parentVariable)) {
				createdGroups.put(parentVariable, nextReference);%>
			<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> <%=parentVariable%> = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=nextReference.getGroupName()%>", "<%=nextReference.getGroupIcon()%>", parentElement);
<%			}%>
			<%=parentVariable%>.addChildren(<%
		} else {
			parentVariable = "parentElement";%>
			result.addAll(<%
		}
		
		String getterNameBase = nextCommonBase.getUniqueIdentifier() + "To" + nextReference.getChild().getUniqueIdentifier();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL) {
			getterNameBase = getterNameBase + "OutTarget";
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
			getterNameBase = getterNameBase + "InSource";
		} else { /*nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL*/
			getterNameBase = getterNameBase + "Children";
		}
		String getterName = getterNameBase;
		for (int i = 1; getter2ReferenceMap.containsKey(getterName); i++) {
			getterName = getterNameBase + "_" + i;
		}
		getter2ReferenceMap.put(getterName, nextReference);
		getterName = "get" + getterName;
		%><%=getterName%>(<%if (nextCommonBase instanceof GenLink) {%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) <%}%>view, <%=parentVariable%>));
<%	}
	
	for (Iterator it = createdGroups.keySet().iterator(); it.hasNext();) {
		String nextGroupKey = (String) it.next();
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) createdGroups.get(nextGroupKey);
		if (nextReference.isHideIfEmpty()) {%>
			if (!<%=nextGroupKey%>.isEmpty()) {
<%		}%>
			result.add(<%=nextGroupKey%>);
<%		if (nextReference.isHideIfEmpty()) {%>
			}
<%		}
	}%>
			return result.toArray();
		}
<%}%>
		}
		return EMPTY_ARRAY;
	}

	/**
	 * @@generated
	 */
    public Object getParent(Object element) {
    	if (element instanceof <%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%>) {
    		<%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%> abstractNavigatorItem = (<%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%>) element;
			return abstractNavigatorItem.getParent();
		}
		return null;
    }

	/**
	 * @@generated
	 */
    public boolean hasChildren(Object element) {
    	return element instanceof <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%> || getChildren(element).length > 0;
    }
    
	/**
	 * @@generated
	 */
	public void init(<%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite")%> aConfig) {
	}
	
	/**
	 * @@generated
	 */
	public void restoreState(<%=importManager.getImportedName("org.eclipse.ui.IMemento")%> aMemento) {
	}

	/**
	 * @@generated
	 */
	public void saveState(<%=importManager.getImportedName("org.eclipse.ui.IMemento")%> aMemento) {
	}

<%GenModelGraphAnalyzer graphAnalyzer = new GenModelGraphAnalyzer(genDiagram);
for (Iterator it = getter2ReferenceMap.entrySet().iterator(); it.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) it.next();
	GenNavigatorChildReference childReference = (GenNavigatorChildReference) nextEntry.getValue();
	String methodName = (String) nextEntry.getKey();
	String parameterClassFQName;
	String parameterName;
	if (childReference.getParent() instanceof GenLink) {
		parameterClassFQName = "org.eclipse.gmf.runtime.notation.Edge";
		parameterName = "edge";
	} else {
		parameterClassFQName = "org.eclipse.gmf.runtime.notation.View";
		parameterName = "view";
	}
	List<List<GenCommonBase>> paths = graphAnalyzer.getConnectionPaths(childReference);%>

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> <%="get" + methodName%>(<%=importManager.getImportedName(parameterClassFQName)%> <%=parameterName%>, Object parent) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%	boolean connectedViewsDeclared = false;
	for (List<GenCommonBase> nextPath : paths) {
		for (int i = 0; i < nextPath.size() - 1; i++) {
			GenCommonBase currentPathSegment = nextPath.get(i);
			GenCommonBase nextPathSegment = nextPath.get(i + 1);
			if (!connectedViewsDeclared) {
				connectedViewsDeclared = true;%>
		<%=importManager.getImportedName("java.util.Collection")%> connectedViews = <%
			}else {%>
		connectedViews = <%
			}
			if (currentPathSegment instanceof GenLink) {
				if (childReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL) {
					%>getLinksTargetByType<%
				} else { /*childReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL*/
					%>getLinksSourceByType<%
				}
			} else {
				if (childReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL) {
					%>getOutgoingLinksByType<%
				} else if (childReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
					%>getIncomingLinksByType<%
				} else { /*childReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL*/
					if (currentPathSegment instanceof GenDiagram && nextPathSegment instanceof GenLink) {
						/* References from diagram to links are represented by CHILDREN_LITERAL too */
						%>getDiagramLinksByType<%
					} else {
						%>getChildrenByType<%
					}
				}
			}%>(<%
			if (i == 0) {
				%><%=importManager.getImportedName("java.util.Collections")%>.singleton(<%=parameterName%>)<%
			} else {
				%>connectedViews<%
			}%>, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextPathSegment.getEditPartQualifiedClassName())%>.VISUAL_ID));
<%		}%>
		createNavigatorItems(connectedViews, parent, result, <%="is" + methodName + "Leaf"%>(<%=parameterName%>));
<%	}%>
		return result;
	}

	/**
	 * @@generated
	 */
	private boolean <%="is" + methodName + "Leaf"%>(<%=importManager.getImportedName(parameterClassFQName)%> <%=parameterName%>) {
		return <%=childReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL ? "false" : "true"%>;
	}
<%}%>
	
	/**
	 * @@generated
	 */
	 private <%=importManager.getImportedName("java.util.Collection")%> getLinksSourceByType(<%=importManager.getImportedName("java.util.Collection")%> edges, String type) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
	 	for (<%=importManager.getImportedName("java.util.Iterator")%> it = edges.iterator(); it.hasNext();) {
	 		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> nextEdge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) it.next();
	 		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextEdgeSource = nextEdge.getSource();
	 		if (type.equals(nextEdgeSource.getType()) && !isOwnView(nextEdgeSource)) {
	 			result.add(nextEdgeSource);
	 		}
	 	}
	 	return result;
	}
	
	/**
	 * @@generated
	 */
	 private <%=importManager.getImportedName("java.util.Collection")%> getLinksTargetByType(<%=importManager.getImportedName("java.util.Collection")%> edges, String type) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
	 	for (<%=importManager.getImportedName("java.util.Iterator")%> it = edges.iterator(); it.hasNext();) {
	 		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%> nextEdge = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) it.next();
	 		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextEdgeSource = nextEdge.getTarget();
	 		if (type.equals(nextEdgeSource.getType()) && !isOwnView(nextEdgeSource)) {
	 			result.add(nextEdgeSource);
	 		}
	 	}
	 	return result;
	}
	
	/**
	 * @@generated
	 */
	 private <%=importManager.getImportedName("java.util.Collection")%> getOutgoingLinksByType(<%=importManager.getImportedName("java.util.Collection")%> nodes, String type) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
	 	for (<%=importManager.getImportedName("java.util.Iterator")%> it = nodes.iterator(); it.hasNext();) {
	 		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextNode = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
			result.addAll(selectViewsByType(nextNode.getSourceEdges(), type));
	 	}
	 	return result;
	}
	
	/**
	 * @@generated
	 */
	 private <%=importManager.getImportedName("java.util.Collection")%> getIncomingLinksByType(<%=importManager.getImportedName("java.util.Collection")%> nodes, String type) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
	 	for (<%=importManager.getImportedName("java.util.Iterator")%> it = nodes.iterator(); it.hasNext();) {
	 		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextNode = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
			result.addAll(selectViewsByType(nextNode.getTargetEdges(), type));
	 	}
	 	return result;
	}
	
	/**
	 * @@generated
	 */
	 private <%=importManager.getImportedName("java.util.Collection")%> getChildrenByType(<%=importManager.getImportedName("java.util.Collection")%> nodes, String type) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
	 	for (<%=importManager.getImportedName("java.util.Iterator")%> it = nodes.iterator(); it.hasNext();) {
	 		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextNode = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
			result.addAll(selectViewsByType(nextNode.getChildren(), type));
	 	}
	 	return result;
	}
	
	/**
	 * @@generated
	 */
	 private <%=importManager.getImportedName("java.util.Collection")%> getDiagramLinksByType(<%=importManager.getImportedName("java.util.Collection")%> diagrams, String type) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
	 	for (<%=importManager.getImportedName("java.util.Iterator")%> it = diagrams.iterator(); it.hasNext();) {
	 		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> nextDiagram = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%>) it.next();
			result.addAll(selectViewsByType(nextDiagram.getEdges(), type));
	 	}
	 	return result;
	}
	
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> selectViewsByType(<%=importManager.getImportedName("java.util.Collection")%> views, String type) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = views.iterator(); it.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
			if (type.equals(nextView.getType()) && isOwnView(nextView)) {
				result.add(nextView);
			}
		}
		return result;
	}

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> createNavigatorItems(<%=importManager.getImportedName("java.util.Collection")%> views, Object parent) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		createNavigatorItems(views, parent, result, false);
		return result;
	}
	
	/**
	 * @@generated
	 */
	private void createNavigatorItems(<%=importManager.getImportedName("java.util.Collection")%> views, Object parent, <%=importManager.getImportedName("java.util.Collection")%> result, boolean isLeafs) {
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = views.iterator(); it.hasNext();) {
			result.add(new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next(), parent, isLeafs));
		}
	}
	
	/**
	 * @@generated
	 */
	private boolean isOwnView(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		return <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(view));
	}
	
<%if (generateGetForeignShortcuts) {%>	
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> getForeignShortcuts(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram")%> diagram, Object parent) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = diagram.getChildren().iterator(); it.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next();
			if (!isOwnView(nextView) && nextView.getEAnnotation("Shortcut") != null) { //$NON-NLS-1$
				result.add(nextView);
			}
		}
		return createNavigatorItems(result, parent);
	}
	
<%}%>
}
<%importManager.emitSortedImports();%>
@


1.9
log
@HashMap -> TreeMap
@
text
@@


1.8
log
@LinkHelper adopted to work correctly with shortcuts.
@
text
@d65 1
a65 1
<%Map createdDiagramGroups = new HashMap();
d137 1
a137 1
Map getter2ReferenceMap = new HashMap();
d150 1
a150 1
	Map createdGroups = new HashMap();
@


1.7
log
@Labels for Shortcutted elements provided.
@
text
@d76 1
a76 1
			<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> <%=parentVariable%> = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=nextReference.getGroupName()%>", "<%=nextReference.getGroupIcon()%>", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, file);
d158 1
a158 1
			<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> <%=parentVariable%> = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=nextReference.getGroupName()%>", "<%=nextReference.getGroupIcon()%>", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, parentElement);
@


1.6
log
@Refactoring navigator to support cross-diagram shortcuts.
@
text
@d433 1
a433 1
			if (!isOwnView(nextView) && nextView.getEAnnotation("Shortcut") != null) { //$NON-NLS-1$)
@


1.5
log
@Linked elements are leafs by default.
@
text
@d48 1
a48 74
    	if (parentElement instanceof <%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%>) {
    		<%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%> abstractNavigatorItem = (<%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%>) parentElement;
			if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(abstractNavigatorItem.getModelID())) {
				return EMPTY_ARRAY;
			}
			
			if (abstractNavigatorItem instanceof <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) {
    			<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> navigatorItem = (<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) abstractNavigatorItem;
    			if (navigatorItem.isLeaf()) {
    				return EMPTY_ARRAY;
    			}
				switch (navigatorItem.getVisualID()) {
<%Map getter2ReferenceMap = new HashMap();
for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection childReferences = genNavigator.getChildReferencesFrom(nextCommonBase);
	if (childReferences.size() == 0) {
		continue;
	}%>
				case <%=importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName())%>.VISUAL_ID: {
					<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%	Map createdGroups = new HashMap();
	for (Iterator it = childReferences.iterator(); it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		String parentVariable;
		if (nextReference.isInsideGroup()) {
			parentVariable = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
			if (!createdGroups.containsKey(parentVariable)) {
				createdGroups.put(parentVariable, nextReference);%>
					<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> <%=parentVariable%> = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=nextReference.getGroupName()%>", "<%=nextReference.getGroupIcon()%>", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, navigatorItem);
<%			}%>
					<%=parentVariable%>.addChildren(<%
		} else {
			parentVariable = "navigatorItem";%>
					result.addAll(<%
		}
		
		String getterNameBase = nextCommonBase.getUniqueIdentifier() + "To" + nextReference.getChild().getUniqueIdentifier();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL) {
			getterNameBase = getterNameBase + "OutTarget";
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
			getterNameBase = getterNameBase + "InSource";
		} else { /*nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL*/
			getterNameBase = getterNameBase + "Children";
		}
		String getterName = getterNameBase;
		for (int i = 1; getter2ReferenceMap.containsKey(getterName); i++) {
			getterName = getterNameBase + "_" + i;
		}
		getter2ReferenceMap.put(getterName, nextReference);
		getterName = "get" + getterName;
		%><%=getterName%>(<%if (nextCommonBase instanceof GenLink) {%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) <%}%>navigatorItem.getView(), <%=parentVariable%>));
<%	}
	
	for (Iterator it = createdGroups.keySet().iterator(); it.hasNext();) {
		String nextGroupKey = (String) it.next();
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) createdGroups.get(nextGroupKey);
		if (nextReference.isHideIfEmpty()) {%>
				if (!<%=nextGroupKey%>.isEmpty()) {
<%		}%>
				result.add(<%=nextGroupKey%>);
<%		if (nextReference.isHideIfEmpty()) {%>
				}
<%		}
	}%>
				return result.toArray();
				}
<%}%>
				}
			} else if (abstractNavigatorItem instanceof <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>) {
				<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> group = (<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>) parentElement;
				return group.getChildren();
			}
    	} else if (parentElement instanceof <%=importManager.getImportedName("org.eclipse.core.resources.IFile")%>) {
d104 94
d199 1
a199 1
    }
a206 3
			if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(abstractNavigatorItem.getModelID())) {
				return null;
			}
d256 1
a256 1
	private <%=importManager.getImportedName("java.util.Collection")%> <%="get" + methodName%>(<%=importManager.getImportedName(parameterClassFQName)%> <%=parameterName%>, <%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%> parent) {
d281 6
a286 1
					%>getChildrenByType<%
d316 1
a316 1
	 		if (type.equals(nextEdgeSource.getType())) {
d331 1
a331 1
	 		if (type.equals(nextEdgeSource.getType())) {
d377 12
d393 1
a393 1
			if (type.equals(nextView.getType())) {
d405 1
a405 3
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = views.iterator(); it.hasNext();) {
			result.add(new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next(), parent, false));
		}
d412 1
a412 1
	private void createNavigatorItems(<%=importManager.getImportedName("java.util.Collection")%> views, <%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%> parent, <%=importManager.getImportedName("java.util.Collection")%> result, boolean isLeafs) {
d418 23
@


1.4
log
@Using type access to Edges.
@
text
@d56 3
d85 15
a99 30
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
			if (nextReference.getChild() instanceof GenDiagram) {
			%>getViewByType(navigatorItem.getView().eResource().getContents(), <%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.MODEL_ID, <%=parentVariable%>)<%
			} else if (nextReference.getChild() instanceof GenTopLevelNode) {
			%>getViewByType(navigatorItem.getView().getDiagram().getChildren(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID), <%=parentVariable%>)<%
			} else if (nextReference.getChild() instanceof GenLink) {
			%>getViewByType(navigatorItem.getView().getDiagram().getEdges(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID), <%=parentVariable%>)<%
			} else {
			/* Any other "Default" child refrences are not supported */
			%><%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST<%
			}
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL || nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL || nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
			String getterNameBase = "get" + nextCommonBase.getUniqueIdentifier() + "To" + nextReference.getChild().getUniqueIdentifier();
			if (nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL) {
				getterNameBase = getterNameBase + "OutTarget";
			} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
				getterNameBase = getterNameBase + "InSource";
			} else { /*nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL*/
				getterNameBase = getterNameBase + "Children";
			}
			String getterName = getterNameBase;
			for (int i = 1; getter2ReferenceMap.containsKey(getterName); i++) {
				getterName = getterNameBase + "_" + i;
			}
			getter2ReferenceMap.put(getterName, nextReference);
			%><%=getterName%>(<%if (nextCommonBase instanceof GenLink) {%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) <%}%>navigatorItem.getView(), <%=parentVariable%>)<%
		} else {
			/* Put processing of other types of the references here. */
			%><%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST<%
		}%>);
d141 3
d155 3
a157 8
	}
	if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
		if (nextReference.getChild() instanceof GenDiagram) {
			%>getViewByType(resource.getContents(), <%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.MODEL_ID, <%=parentVariable%>)<%
		} else {
			/* Any other "Default" child refrences are not supported for resource */
			%><%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST<%
		}
d159 2
a160 3
		/* Any other ReferenceTypes are not supported for the resource */
		%><%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST<%
	}%>);
a218 18
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("java.util.Collection")%> getViewByType(<%=importManager.getImportedName("java.util.Collection")%> childViews, String type, Object parent) {
		<%=importManager.getImportedName("java.util.Collection")%> result = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = childViews.iterator(); it.hasNext();) {
			Object next = it.next();
			if (false == next instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
				continue;
			}
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) next;
			if (type.equals(nextView.getType())) {
				result.add(new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(nextView, parent));
			}
		}
		return result;
	}
	
d223 1
d238 1
a238 1
	private <%=importManager.getImportedName("java.util.Collection")%> <%=(String) nextEntry.getKey()%>(<%=importManager.getImportedName(parameterClassFQName)%> <%=parameterName%>, <%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%> parent) {
d272 1
a272 1
		createNavigatorItems(connectedViews, parent, result);
d276 7
d364 11
d379 1
a379 1
	private void createNavigatorItems(<%=importManager.getImportedName("java.util.Collection")%> views, <%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%> parent, <%=importManager.getImportedName("java.util.Collection")%> result) {
d381 1
a381 1
			result.add(new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) it.next(), parent));
@


1.3
log
@GenModelGraphAnalyzer added and used while generating navigator.
@
text
@d107 1
a107 1
			%><%=getterName%>(navigatorItem.getView(), <%=parentVariable%>)<%
d256 9
d270 1
a270 1
	private <%=importManager.getImportedName("java.util.Collection")%> <%=(String) nextEntry.getKey()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view, <%=importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName())%> parent) {
d299 1
a299 1
				%><%=importManager.getImportedName("java.util.Collections")%>.singleton(view)<%
@


1.2
log
@Parent element correctly provided to navigator.
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* java.util.* org.eclipse.emf.codegen.util.*"%>
d57 2
a58 1
<%for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
d82 1
a82 3
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL) {
			%>getChildByType(navigatorItem.getView().getChildren(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID), <%=parentVariable%>)<%
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
d93 12
a104 7
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL || nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
			boolean isOutTarget = nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL;
			if (nextCommonBase instanceof GenNode || nextCommonBase instanceof GenLink) {
			%>getConnectedViews(navigatorItem.getView(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID), <%=isOutTarget%>, <%=parentVariable%>)<%
			} else {
			/* Any other "OUT_TAGET_LITERAL || IN_SOURCE_LITERAL" child refrences are not supported */
			%><%=importManager.getImportedName("java.util.Collections")%>.EMPTY_LIST<%
d106 2
d146 1
a146 1
			<%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> fileURI = <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%>.createPlatformResourceURI(file.getFullPath().toString());
a171 2
	} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL) {
		%>getChildByType(resource.getContents(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID), <%=parentVariable%>)<%
d252 6
d261 1
a261 1
	private <%=importManager.getImportedName("java.util.Collection")%> getChildByType(<%=importManager.getImportedName("java.util.Collection")%> childViews, String type, Object parent) {
d263 34
a296 12
		<%=importManager.getImportedName("java.util.List")%> children = new <%=importManager.getImportedName("java.util.ArrayList")%>(childViews);
		for (int i = 0; i < children.size(); i++) {
			if (false == children.get(i) instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
				continue;
			}
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextChild = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) children.get(i);
			if (type.equals(nextChild.getType())) {
				result.add(new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(nextChild, parent));
			} else if (!stopGettingChildren(nextChild, type)) {
				children.addAll(nextChild.getChildren());
			}
		}
d299 17
a315 1

d319 10
a328 2
	private boolean stopGettingChildren(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> child, String type) {
		return false;
d330 1
a330 1

d334 1
a334 1
	private <%=importManager.getImportedName("java.util.Collection")%> getConnectedViews(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> rootView, String type, boolean isOutTarget, Object parent) {
d336 5
a340 27
		<%=importManager.getImportedName("java.util.List")%> connectedViews = new <%=importManager.getImportedName("java.util.ArrayList")%>();
		connectedViews.add(rootView);
		<%=importManager.getImportedName("java.util.Set")%> visitedViews = new <%=importManager.getImportedName("java.util.HashSet")%>();
		for (int i = 0; i < connectedViews.size(); i++) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) connectedViews.get(i);
			if (visitedViews.contains(nextView)) {
				continue;
			}
			visitedViews.add(nextView);
			if (type.equals(nextView.getType()) && nextView != rootView) {
				result.add(new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(nextView, parent));
			} else {
				if (isOutTarget && !stopGettingOutTarget(nextView, rootView, type)) {
					connectedViews.addAll(nextView.getSourceEdges());
					if (nextView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) {
						connectedViews.add(((Edge) nextView).getTarget());
					}
				} 
				if (!isOutTarget && !stopGettingInSource(nextView, rootView, type)) {
					connectedViews.addAll(nextView.getTargetEdges());
					if (nextView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) {
						connectedViews.add(((Edge) nextView).getSource());
					}
				}
			}
		}
		return result;
d346 7
a352 2
	private boolean stopGettingInSource(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> rootView, String type) {
		return !isOneHopConnection(nextView, rootView);
d354 1
a354 1

d358 7
a364 2
	private boolean stopGettingOutTarget(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> nextView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> rootView, String type) {
		return !isOneHopConnection(nextView, rootView);
d370 7
a376 3
	private boolean isOneHopConnection(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> targetView, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> sourceView) {
		if (sourceView == targetView) {
			return true;
d378 9
a386 4
		if (sourceView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>) {
			return targetView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>;
		} if (sourceView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge")%>) {
			return targetView instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node")%>;
a387 1
		return false;
d389 1
a389 1

@


1.1
log
@Read-only properties provided into the navigator.
@
text
@d68 1
d70 4
a73 4
			String groupNameKey = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
			if (!createdGroups.containsKey(groupNameKey)) {
				createdGroups.put(groupNameKey, nextReference);%>
					<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> <%=groupNameKey%> = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=nextReference.getGroupName()%>", "<%=nextReference.getGroupIcon()%>", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, navigatorItem.getView());
d75 3
a77 2
					<%=groupNameKey%>.addChildren(<%
		} else {%>
d82 1
a82 1
			%>getChildByType(navigatorItem.getView().getChildren(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID))<%
d85 1
a85 1
			%>getViewByType(navigatorItem.getView().eResource().getContents(), <%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.MODEL_ID)<%
d87 1
a87 1
			%>getViewByType(navigatorItem.getView().getDiagram().getChildren(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID))<%
d89 1
a89 1
			%>getViewByType(navigatorItem.getView().getDiagram().getEdges(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID))<%
d97 1
a97 1
			%>getConnectedViews(navigatorItem.getView(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID), <%=isOutTarget%>)<%
d147 1
d149 4
a152 4
		String groupNameKey = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
		if (!createdDiagramGroups.containsKey(groupNameKey)) {
			createdDiagramGroups.put(groupNameKey, nextReference);%>
			<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> <%=groupNameKey%> = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=nextReference.getGroupName()%>", "<%=nextReference.getGroupIcon()%>", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, file);
d154 3
a156 2
			<%=groupNameKey%>.addChildren(<%
	} else {%>
a158 1
	
d161 1
a161 1
			%>getViewByType(resource.getContents(), <%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.MODEL_ID)<%
d167 1
a167 1
		%>getChildByType(resource.getContents(), <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName())%>.VISUAL_ID))<%
d200 1
a200 61
			
			if (abstractNavigatorItem instanceof <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) {
    			<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%> navigatorItem = (<%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>) abstractNavigatorItem;
				switch (navigatorItem.getVisualID()) {
<%for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection childReferences = genNavigator.getChildReferencesTo(nextCommonBase);
	if (childReferences.size() == 0) {
		continue;
	}
	
	GenNavigatorChildReference theReference = null;
	for (Iterator it = childReferences.iterator(); theReference == null && it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL) {
			theReference = nextReference;
		}
	}
	
	for (Iterator it = childReferences.iterator(); theReference == null && it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
			if (nextCommonBase instanceof GenDiagram && nextReference.getParent() == null) {
				theReference = nextReference;
			}
		}
	}
	
	if (theReference == null) {
		/* No supported child references for back navigation found */
		continue;
	}%>
				case <%=importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName())%>.VISUAL_ID: { 
<%	if (theReference.isInsideGroup()) {%>
					<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> group = new <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>("<%=theReference.getGroupName()%>", "<%=theReference.getGroupIcon()%>", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID, <%
	} else {%>
					return <%
	}
	
	if (theReference.getParent() != null) {
		/* Child reference only */
		%>navigatorItem.getView().eContainer()<%
	} else {
		/* Child reference with parent == null or default reference for diagram */
		%><%=importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer")%>.getFile(navigatorItem.getView().eResource())<%
	}
	
	if (theReference.isInsideGroup()) {
		%>);
					group.addChild(navigatorItem.getView());
					return group;
<%	} else {
		%>;
<%	}%>			
				}
<%}%>
				}
			} else if (abstractNavigatorItem instanceof <%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>) {
				<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%> group = (<%=importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName())%>) abstractNavigatorItem;
				return group.getParent();
			}
d233 1
a233 1
	private <%=importManager.getImportedName("java.util.Collection")%> getViewByType(<%=importManager.getImportedName("java.util.Collection")%> childViews, String type) {
d242 1
a242 1
				result.add(new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(nextView));
d251 1
a251 1
	private <%=importManager.getImportedName("java.util.Collection")%> getChildByType(<%=importManager.getImportedName("java.util.Collection")%> childViews, String type) {
d260 1
a260 1
				result.add(new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(nextChild));
d278 1
a278 1
	private <%=importManager.getImportedName("java.util.Collection")%> getConnectedViews(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> rootView, String type, boolean isOutTarget) {
d290 1
a290 1
				result.add(new <%=importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName())%>(nextView));
@

