head	1.6;
access;
symbols
	v20081022-1925:1.6
	v20081015-1925:1.6
	v20081008-1925:1.6
	v20081001-1925:1.6
	v20080924-1925:1.6
	v20080917-1925:1.6
	v20080911-1728:1.6
	v20080910-1520:1.6
	v20080903-1520:1.6
	v20080827-1520:1.6
	v20080813-1520:1.6
	v20080806-1520:1.6
	v20070605-1400:1.5
	v20070601-1400:1.5
	v20070525-1500:1.5
	v20070520-1200:1.5
	v20070518-1300:1.5
	v20070504-1000:1.5
	v20070427-0600:1.5
	v20070420-1000:1.5
	v20070413-1300:1.4
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070307-0700:1.3
	v20070301-1200:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061218-1200:1.1
	v20061214-0000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.06.07.17.32.55;	author dstadnik;	state dead;
branches;
next	1.5;
commitid	5505466841464567;

1.5
date	2007.04.18.17.34.28;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	2e44462656a24567;

1.4
date	2007.04.10.18.52.28;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	58c0461bdcea4567;

1.3
date	2007.02.14.15.41.57;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	145545d32dc54567;

1.2
date	2006.12.20.19.01.27;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	2409458988864567;

1.1
date	2006.12.11.18.42.43;	author ashatalin;	state Exp;
branches;
next	;
commitid	34a457da6a14567;


desc
@@


1.6
log
@rewrite create node command in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.commands" class="CreateTypeNodeCommandGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.emf.codegen.ecore.genmodel.*"
	skeleton="../common.skeleton"%>
<%GenNode node = (GenNode) ((Object[]) argument)[0];
GenDiagram genDiagram = node.getDiagram(); 

final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

TypeModelFacet modelFacet = node.getModelFacet();
if (modelFacet == null) {
	throw new IllegalArgumentException("TypeModelFacet required");
}

%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=importManager.getCompilationUnitName()%> extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand")%> {

		/**
		 * @@generated
		 */
		public <%=importManager.getCompilationUnitName()%>(<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest")%> req) {
			super(req);
		}

<%if (!modelFacet.isPhantomElement() && modelFacet.getContainmentMetaFeature() == null && modelFacet.getChildMetaFeature() == null) {%>
		false
		/* 
		FIXME no containment feature found in the genmodel, toolsmith need to specify correct one here manually
		If you rely on superclass behaviour, simply delete this comment
		*/
}
<%
	importManager.emitSortedImports();
	return stringBuffer.toString(); // 	ATTENTION !!! CHANGE OF CONTROL FLOW - the template below is NOT processed when both features are null
	// I don't want to wrap rest of the template into huge else block, hence this hack, which I believe will fade away with xpand. 
} %>

<%if (!modelFacet.isPhantomElement()) {
	GenClass containerGenClass = modelFacet.getContainmentMetaFeature().getGenClass();%>
		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> getEClassToEdit() {
			return <%=importManager.getImportedName(containerGenClass.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=containerGenClass.getClassifierAccessorName()%>();
		}
<%}%>

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> getElementToEdit() {
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> container = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest")%>) getRequest()).getContainer();
			if (container instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
				container = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) container).getElement();
			}
			return container;
		}

<%if (!modelFacet.isPhantomElement()) {
	GenClass containerGenClass = modelFacet.getContainmentMetaFeature().getGenClass();
	boolean initChildMetafeature = !modelFacet.getChildMetaFeature().isDerived() && !modelFacet.getChildMetaFeature().equals(modelFacet.getContainmentMetaFeature());
	if (modelFacet.getModelElementInitializer() != null || initChildMetafeature) { 
		String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());%>

		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> doDefaultElementCreation() {
			<%=metaClassName%> newElement = (<%=metaClassName%>) super.doDefaultElementCreation();
			if (newElement != null) {
<%		if (initChildMetafeature) {
			String containerMetaClass = importManager.getImportedName(modelFacet.getChildMetaFeature().getGenClass().getQualifiedInterfaceName());%>
				 <%=containerMetaClass%> container = (<%=containerMetaClass%>) getElementToEdit();
				 if (container != null) {
<%			if (modelFacet.getChildMetaFeature().isListType()) {%>
					<%=importManager.getImportedName("java.util.Collection")%> featureValues = container.<%=modelFacet.getChildMetaFeature().getGetAccessor()%>();
					featureValues.add(newElement);
<%			} else {%>
				 	<%=getFeatureValueSetterPrefix("container", modelFacet.getChildMetaFeature(), false, importManager)%>newElement);
<%			}%>
				 }
<%		}
		if (modelFacet.getModelElementInitializer() != null) {%>		
				<%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.Initializers.<%=node.getUniqueIdentifier()%>.init(newElement);
<%		}%>
			}
			return newElement;
		}
<%	}
	
	GenFeature containmentMetaFeature = modelFacet.getContainmentMetaFeature();
	GenFeature childMetaFeature = modelFacet.getChildMetaFeature();
	int upperContainmentBound = containmentMetaFeature.getEcoreFeature().getUpperBound();
	int upperChildBound = childMetaFeature.getEcoreFeature().getUpperBound();
	boolean checkChildMetafeature = !childMetaFeature.equals(containmentMetaFeature) && upperChildBound > 0;
	if (upperContainmentBound > 0 || checkChildMetafeature) {
		String containerInterfaceName = importManager.getImportedName(containerGenClass.getQualifiedInterfaceName());%>
	
		/**
		 * @@generated
		 */
		public boolean canExecute() {
			<%=containerInterfaceName%> container = (<%=containerInterfaceName%>) getElementToEdit();
<%		if (upperContainmentBound > 0) {
			if (upperContainmentBound == 1) {%>
			if (<%=getFeatureValueGetter("container", containmentMetaFeature, false, importManager)%> != null) {
<%			} else {%>
			if (<%=getFeatureValueGetter("container", containmentMetaFeature, false, importManager)%>.size() >= <%=upperContainmentBound%>) {
<%			}%>
				return false;
			}
<%		}
		
		if (checkChildMetafeature) {
			if (upperChildBound == 1) {%>
			if (<%=getFeatureValueGetter("container", childMetaFeature, false, importManager)%> != null) {
<%			} else {%>
			if (<%=getFeatureValueGetter("container", childMetaFeature, false, importManager)%>.size() >= <%=upperChildBound%>) {
<%			}%>
				return false;
			}
<%		} %>
			return true;
		}
<%	}
} else {%>

		/**
		 * @@generated
		 */
		public boolean canExecute() {
			if (getEClass() != null) {
				return getEClass().isSuperTypeOf(getEClassToEdit());
			}
			return true;
		}
		
		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EReference")%> getContainmentFeature() {
			return null;
		}
		
		/**
		 * @@generated
		 */
		protected <%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> doDefaultElementCreation() {
			// Uncomment to put "phantom" objects into the diagram file.		
			//<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = ((<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest")%>) getRequest()).getContainer().eResource();
			//if (resource == null) {
			//	return null;
			//}
			<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = getElementToEdit().eResource();
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> eClass = getElementType().getEClass();
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> eObject = eClass.getEPackage().getEFactoryInstance().create(eClass);
			resource.getContents().add(eObject);
			return eObject;
		}
<%}%>

}
<%importManager.emitSortedImports();%>
@


1.5
log
@Rewriting template to xpt

[170079] - Do not generate unnecessary CanonicalEditPolicies in case if phantoms are allowed for diagram
@
text
@@


1.4
log
@[181771] Generator should tolerate absence of both containment and child meta features
@
text
@d32 1
a32 1
<%if (modelFacet.getContainmentMetaFeature() == null && modelFacet.getChildMetaFeature() == null) {%>
@


1.3
log
@[174171]: getting rid of superfluous semicolons
@
text
@d9 1
a9 1
TypeModelFacet modelFacet = (TypeModelFacet) node.getModelFacet();
a13 1
/*GenClass containerGenClass = modelFacet.getContainmentMetaFeature().getGenClass();*/
d32 13
@


1.2
log
@Updating templates to support phantom elements.
@
text
@d40 1
a40 1
		};
@


1.1
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d14 2
a15 1
GenClass containerGenClass = modelFacet.getContainmentMetaFeature().getGenClass();%>
d33 2
d41 1
d55 1
@

