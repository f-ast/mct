head	1.39;
access;
symbols
	v20081022-1925:1.39
	v20081015-1925:1.39
	v20081008-1925:1.39
	v20081001-1925:1.39
	v20080924-1925:1.39
	v20080917-1925:1.39
	v20080911-1728:1.39
	v20080910-1520:1.39
	v20080903-1520:1.39
	v20080827-1520:1.39
	v20080813-1520:1.39
	v20080806-1520:1.39
	v20070202-0200:1.35
	v20061120-1300:1.38
	M3_20:1.38
	v20061117-0800:1.38
	v20061027-1200:1.35
	v20061020-1000:1.35
	v20061013-1330:1.36
	v20060919-0800:1.35
	v20060907-1100:1.35
	M1_20:1.36
	v20060904-1500:1.36
	v20060824-1600:1.35
	v20060817-1500:1.35
	v20060728-0500:1.35
	v20060713-1700:1.35
	R1_0_maintenance:1.35.0.2
	R1_0:1.35
	v20060627-1200:1.35
	v20060626-1420:1.35
	v20060620-0400:1.35
	v20060616-1400:1.35
	v20060616-1200:1.35
	v20060609-1400:1.35
	v20060531-1730:1.34
	v20060530-1930:1.34
	v20060526-1200:1.34
	v20060519-1300:1.32
	v20060519-0800:1.32
	v20060512-1000:1.30
	I20060512-1000:1.30
	I20060505-1400:1.28
	I20060428-1300:1.28
	I20060424-0500:1.28
	I20060424-0300:1.28
	M6_10:1.28
	I20060407-1200:1.24
	I20060331-1000:1.24
	I20060324-0300:1.24
	I20060317-1300:1.24
	I20060317-1200:1.24
	I20060316-1300:1.24
	I20060309-1300:1.19
	M5_10:1.17
	S20060303-1600:1.17
	I20060227-1730:1.17
	I20060216-1945:1.17
	I20060210-1715:1.17
	I20060209-1815:1.17
	I20060203-0830:1.15
	I20060202-1415:1.15
	I20060129-1145:1.13
	I20060127-0900:1.13
	I20060120-1530:1.13
	I20060113-1700:1.12
	M4_10:1.12
	I20060107-1100:1.12
	I20060105-1630:1.12
	I20051230-1230:1.12
	I20051223-1100:1.12
	I20051217-0925:1.12
	I20051208-2000:1.12
	I20051201-1800:1.12
	I20051124-2000:1.12
	M3_10:1.11
	I20051118-1245:1.11
	I20051111-1800:1.9
	I20051106-0900:1.7
	v20051030:1.6;
locks; strict;
comment	@# @;
expand	@k@;


1.39
date	2006.12.11.17.01.34;	author dstadnik;	state dead;
branches;
next	1.38;
commitid	30fa457d8eeb4567;

1.38
date	2006.10.18.09.56.50;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.10.17.13.08.11;	author dstadnik;	state Exp;
branches;
next	1.36;

1.36
date	2006.07.07.11.58.56;	author dstadnik;	state Exp;
branches;
next	1.35;

1.35
date	2006.06.09.12.31.18;	author dstadnik;	state Exp;
branches;
next	1.34;

1.34
date	2006.05.24.18.05.30;	author atikhomirov;	state Exp;
branches;
next	1.33;

1.33
date	2006.05.24.11.47.59;	author atikhomirov;	state Exp;
branches;
next	1.32;

1.32
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.17.14.22.47;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.11.08.18.00;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2006.04.14.14.47.54;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.04.14.07.36.06;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.04.12.16.28.45;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.14.17.04.50;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2006.03.14.15.31.58;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.13.22.31.59;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2006.03.13.18.39.47;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.09.13.25.10;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.02.15.58.54;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.01.30.18.26.46;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.19.00.10.44;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.23.10.11.52;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.17.18.23.01;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.07.15.41.03;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.04.18.26.17;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.24.16.47.40;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.21.13.31.57;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.30.19.16.05;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.39
log
@rewrite child node label edit part template in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.parts" class="ChildNodeEditPartGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenChildLabelNode genChildNode = (GenChildLabelNode) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenCommonBase genHost = genChildNode;
GenDiagram genDiagram = genChildNode.getDiagram();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.util.Collections;
import org.eclipse.gef.DragTracker;
import org.eclipse.gef.EditPolicy;
import org.eclipse.gef.Request;
import org.eclipse.gef.requests.SelectionRequest;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.ListItemComponentEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genChildNode.getEditPartClassName()%> extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart")%> implements ITextAwareEditPart {
<%{	GenCommonBase genCommonBase = genChildNode;%>
<%@@ include file="visualID.jetinc"%>
<%}%>
<%@@ include file="textAwareFields.jetinc"%>

	/**
	 * @@generated
	 */
	public <%=genChildNode.getEditPartClassName()%>(View view) {
		super(view);
	}

	/**
	 * @@generated
	 */
	public DragTracker getDragTracker(Request request) {
		if (request instanceof SelectionRequest && ((SelectionRequest) request).getLastButtonPressed() == 3) {
			return null;
		}
		return new DragEditPartsTrackerEx(this);
	}

	/**
	 * @@generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE,
			new <%=importManager.getImportedName(genChildNode.getItemSemanticEditPolicyQualifiedClassName())%>());
		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE,
			new <%=importManager.getImportedName(genDiagram.getTextNonResizableEditPolicyQualifiedClassName())%>());
		installEditPolicy(EditPolicy.COMPONENT_ROLE, new ListItemComponentEditPolicy());
		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
<%{	GenCommonBase genCommonBase = genChildNode;%>
<%@@ include file="customBehaviour.jetinc"%>
<%}%>
	}

<%
final boolean needsRefreshBounds = false;
final boolean readOnly = genChildNode.isLabelReadOnly();
final boolean useElementIcon = genChildNode.isLabelElementIcon();
final boolean designLabel = genChildNode.getLabelModelFacet() instanceof DesignLabelModelFacet;
final GenCommonBase genLabel = genChildNode;
%>
<%@@ include file="textAware.jetinc"%>
<%@@ include file="notationalListeners.jetinc"%>

	/**
	 * @@generated
	 */
	protected void handleNotificationEvent(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%> event) {
		Object feature = event.getFeature();
<%@@ include file="handleText.jetinc"%>
		super.handleNotificationEvent(event);
	}
<%@@ include file="labelFigure.jetinc"%>
}
<%importManager.emitSortedImports();%>
@


1.38
log
@#161380 move readOnly back to GenLabel
@
text
@@


1.37
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@d69 1
a69 1
final boolean readOnly = genChildNode.getLabelModelFacet() != null && genChildNode.getLabelModelFacet().isReadOnly();
@


1.36
log
@add custom behaviour
@
text
@d69 1
a69 1
final boolean readOnly = genChildNode.isLabelReadOnly();
@


1.35
log
@#144683 It should be possible to modify label value on pure design diagram
@
text
@d29 1
a29 2
<%{
GenCommonBase genCommonBase = genChildNode;%>
d62 3
@


1.34
log
@Do not generate unnecessary code, e.g. label figure, when parent gonna assign one.
Explicitly handle (and distinguish) figures assigned by parent (thus placed in predefined location inside parent) and those added as ordinary child figures
InnerClassViewmapProducer updated to guess uses of parent's sub-figure inside children. It's not really a InnerClassViewmapProducer and should be renamed to smth like GeneratingViewmapProducer
Tests updated to cover logic added to the producer
@
text
@d69 1
@


1.33
log
@#142211 Handle metamodel names that may have clashes with existing class names
@
text
@d69 1
a81 1
<%GenCommonBase genLabel = genChildNode;%>
@


1.32
log
@use importAssistant to emit package statement instead of handcoding
@
text
@a16 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;
d28 1
a28 1
public class <%=genChildNode.getEditPartClassName()%> extends CompartmentEditPart implements ITextAwareEditPart {
@


1.31
log
@#139127 Provide an option for labels to display node icon
@
text
@d4 2
a5 1
GenChildLabelNode genChildNode = (GenChildLabelNode) ((Object[]) argument)[0];
d10 1
a10 1
package <%=genDiagram.getEditPartsPackageName()%>;
a11 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());%>
@


1.30
log
@use label defined in gmfgraph model
@
text
@d69 1
a70 1
<%@@ include file="textAwareNoIcon.jetinc"%>
@


1.29
log
@#133836 Creating a child node without a label causes error
@
text
@a65 10
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
		<%=importManager.getImportedName("org.eclipse.draw2d.Label")%> figure =
			new <%=importManager.getImportedName("org.eclipse.draw2d.Label")%>();
		defaultText = figure.getText();
		return figure;
	}

d82 2
@


1.28
log
@handle both Label and WrapLabel : continued further
@
text
@d4 2
a5 3
GenNode genChildNode = (GenNode) ((Object[]) argument)[0];
GenNodeLabel genLabel = (GenNodeLabel) genChildNode.getLabels().get(0);
GenCommonBase genHost = genLabel.getNode();
d76 4
a79 1
<%final boolean needsRefreshBounds = false;%>
@


1.27
log
@remove temporary label direct edit policy
@
text
@a77 1
<%@@ include file="textAwareLabel.jetinc"%>
@


1.26
log
@#135694 remove temporary code
@
text
@d21 1
a21 2
//import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;
import <%=genDiagram.getEditPoliciesPackageName()%>.LabelDirectEditPolicy;
@


1.25
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d19 1
a19 1
//import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
@


1.24
log
@use specified label figure in ext node labels
@
text
@d32 4
@


1.23
log
@provide selection for the child nodes
@
text
@d64 10
@


1.22
log
@duplicated refreshVisuals method when label's node has flow layout
@
text
@a15 1
import org.eclipse.gef.GraphicalEditPart;
a16 1
import org.eclipse.gef.handles.MoveHandle;
a20 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;
a23 1
//import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableTextEditPolicy;
d58 2
a59 9
		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicyEx() {

			protected List createSelectionHandles() {
				MoveHandle moveHandle = new MoveHandle((GraphicalEditPart) getHost());
				moveHandle.setBorder(null);
				moveHandle.setDragTracker(new DragEditPartsTrackerEx(getHost()));
				return Collections.singletonList(moveHandle);
			}
		});
@


1.21
log
@use Labels instead of WrapLabels
@
text
@d75 1
@


1.20
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d13 1
d16 1
d18 1
d23 1
a27 1
import <%=genDiagram.getEditPoliciesPackageName()%>.NonResizableTextEditPolicy;
d62 9
a70 1
		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableTextEditPolicy());
d75 1
a75 1
<%@@ include file="textAwareWrapLabel.jetinc"%>
@


1.19
log
@remove warnings
@
text
@d5 2
d13 6
a18 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.ListItemEditPart;
d20 6
d32 2
a33 1
public class <%=genChildNode.getEditPartClassName()%> extends ListItemEditPart {
d45 10
d57 5
a61 1
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new <%=importManager.getImportedName(genChildNode.getItemSemanticEditPolicyQualifiedClassName())%>());
d64 13
a76 5
<%
GenNodeLabel genLabel = (GenNodeLabel) genChildNode.getLabels().get(0);
GenCommonBase genHost = genLabel.getNode();
%>
<%@@ include file="labelSemantic.jetinc"%>
@


1.18
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d38 1
@


1.17
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d7 1
@


1.16
log
@ImportManager moved to oeg.common
@
text
@d4 1
a4 1
GenNode genChildNode = (GenNode) argument;
@


1.15
log
@#125828 Generated code is bypassing parser service...
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.14
log
@#125729 Support labels based on multiple structural features
@
text
@d2 1
a2 1
	imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
a36 1
String accessorName = genChildNode.getDomainMetaClass().getClassifierAccessorName();
@


1.13
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@a9 1
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
a25 16
<%
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getClassifierAccessorName();
GenNodeLabel label = (GenNodeLabel) genChildNode.getLabels().get(0);
%>

	/**
	 * @@generated
	 */
	public IParser getParser() {
		if (parser == null) {
			parser = new <%=importManager.getImportedName(genDiagram.getStructuralFeatureParserQualifiedClassName())%>(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticChildNodeInterfaceName%>().getEStructuralFeature("<%=label.getMetaFeature().getName()%>"));
		}
		return parser;
	}
d34 6
@


1.12
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d4 1
a4 1
GenChildNode genChildNode = (GenChildNode) argument;
@


1.11
log
@#116905
Using VisualIDRegistry to create CanonicalEditPolicies
@
text
@a9 3
import java.util.Collections;
import java.util.List;

a11 1
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;
d43 1
a43 1
	
a50 1
	
@


1.10
log
@#116031 avoid hardcoded class names in templates
@
text
@a53 15
		installEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new <%=genChildNode.getEditPartClassName()%>CanonicalEditPolicy());
	}
	
	/**
	 * @@generated
	 */
	private class <%=genChildNode.getEditPartClassName()%>CanonicalEditPolicy extends CanonicalEditPolicy {
	
		/**
		 * @@generated
		 */
		protected List getSemanticChildrenList() {
			return Collections.EMPTY_LIST;
		}
	
@


1.9
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@a17 1
import <%=genDiagram.getProvidersPackageName()%>.StructuralFeatureParser;
d43 1
a43 1
			parser = new StructuralFeatureParser(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticChildNodeInterfaceName%>().getEStructuralFeature("<%=label.getMetaFeature().getName()%>"));
@


1.8
log
@[ashatalin] #115311 use accessor name helper methods instead of constructing them
@
text
@d54 1
@


1.7
log
@[ashatalin] #115107 remove uses of deprecated runtime code in templates
@
text
@d35 1
a35 1
String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getName();
@


1.6
log
@[ashatalin] #113258 sync diagram and domain models using canonicalEditPolicy
@
text
@d14 1
a14 1
import org.eclipse.gmf.runtime.diagram.ui.editparts.ListItemCompartmentEditPart;
d24 1
a24 1
public class <%=genChildNode.getEditPartClassName()%> extends ListItemCompartmentEditPart {
@


1.5
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d10 3
d15 2
d48 23
@


1.4
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d31 1
d39 1
a39 1
			parser = new StructuralFeatureParser(<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticChildNodeInterfaceName%>().getEStructuralFeature("<%=genChildNode.getDomainNameFeature().getName()%>"));
@


1.3
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@d13 1
a13 1
import <%=genDiagram.getEditProvidersPackageName()%>.StructuralFeatureParser;
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d33 3
@


1.1
log
@[dstadnik] support for (a) connections (with associated domain class) and (b) compartments
@
text
@d28 1
a28 1
GenPackage genPackage = genDiagram.getEmfGenModel().findGenPackage(genDiagram.getDomainMetaModel());
@

