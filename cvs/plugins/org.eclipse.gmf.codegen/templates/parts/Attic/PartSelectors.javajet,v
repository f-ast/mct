head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081015-1925:1.2
	v20081008-1925:1.2
	v20081001-1925:1.2
	v20080924-1925:1.2
	v20080917-1925:1.2
	v20080911-1728:1.2
	v20080910-1520:1.2
	v20080903-1520:1.2
	v20080827-1520:1.2
	v20080813-1520:1.2
	v20080806-1520:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2005.10.25.18.28.41;	author atikhomirov;	state dead;
branches;
next	1.1;

1.1
date	2005.10.13.12.45.56;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@[rdvorak] #113647 refactoring selectors and initializers
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.parts" class="PartSelectorsGenerator"
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.* org.eclipse.emf.ecore.*"%>
<%
GenDiagram genDiagram = (GenDiagram)argument;
ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
%>
package <%=PartSelectorUtil.getPartSelectorsPackageName(genDiagram)%>;

<%if(PartSelectorUtil.hasPartSelectors(genDiagram)){%>
import org.eclipse.emf.query.ocl.conditions.OclConstraintCondition;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
<%}%>
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=PartSelectorUtil.getPartSelectorsClassName(genDiagram)%> {
<%
for(Iterator it = AccessUtil.getGenEntities(genDiagram); it.hasNext();) {
	EObject nextElement = (EObject)it.next();
	GenBaseElement  genElement = nextElement instanceof GenBaseElement ? (GenBaseElement) nextElement : null;
	if(genElement == null || !PartSelectorUtil.hasPartSelector(genElement)) continue;	
		
	ModelElementSelector selector = genElement.getModelElementSelector();			
	if(selector.getBody() == null) continue;
	%>
	/**
	* <pre><%=selector.getBody()%></pre>
	* @@generated
	*/
	private static final ConditionElement cond_<%=PartSelectorUtil.getPartSelectorMethodName(genElement)
		%> = new ConditionElement("<%=selector.getBody()%>");
<%}%>

	/**
	 * @@generated
	 */
	private PartSelectors() {
	}
	
	/**
	* @@generated	
	*
	* @@return allways returns <code>true</code>
	*/		
	public static boolean <%=PartSelectorUtil.ACCEPT_ALL_SELECTOR_NAME%>(Object element) {
		return true;
	}
		
<%
for(Iterator it = AccessUtil.getGenEntities(genDiagram); it.hasNext();) {
	EObject nextElement = (EObject)it.next();
	GenBaseElement  genElement = nextElement instanceof GenBaseElement ? (GenBaseElement) nextElement : null;
	if(genElement == null || !PartSelectorUtil.hasPartSelector(genElement)) continue;	
		
	ModelElementSelector selector = genElement.getModelElementSelector();			
	if(selector.getBody() == null) continue;
	%>
	/**	
	* <pre><%=selector.getBody()%></pre>
	* @@generated
	*/
	public static boolean <%=PartSelectorUtil.getPartSelectorMethodName(genElement)%>(EObject contextInstance) {
		return cond_<%=PartSelectorUtil.getPartSelectorMethodName(genElement)%>.isSatisfied(contextInstance);
	}
<%
}%>
	
<% if(PartSelectorUtil.hasPartSelectors(genDiagram)) {%>
	/**
	* @@generated	
	*/
	private static class ConditionElement {
		/**
		* @@generated	
		*/					
		private EClass evalContext;
		/**
		* @@generated	
		*/						
		private OclConstraintCondition condition;
		/**
		* @@generated	
		*/						
		private String body;		
				
		/**
		* @@generated	
		*/				
		public ConditionElement(String expressionBody) {			
			body = expressionBody;
		}
		/**
		* @@generated	
		*/						
		public boolean isSatisfied(EObject object) {		
			try {
				Boolean result = (object != null) ? evaluate(object) : Boolean.FALSE;
				return result.booleanValue();
			} catch(IllegalArgumentException e) {
				e.printStackTrace();
				return false;
			}
		}
		/**
		* @@generated	
		*/		
		public Boolean evaluate(EObject context) {
			this.evalContext = context.eClass();
			if(condition == null) {					
				condition = new OclConstraintCondition(body, evalContext);
			}
			if(condition != null) {
				return booleanCast(condition.evaluate(context));
			}
			return Boolean.FALSE;
		}
		/**
		* @@generated	
		*/					
		private static Boolean booleanCast(Object value) {
			if(value == null) {
				return null;
			} else if(value instanceof Boolean) {
				 return (Boolean)value;	
			}
			// illegal type 
			// TODO - add log here 
			return Boolean.FALSE;
		}
	}
<% } %>	
}
<%importManager.emitSortedImports();%>
@


1.1
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@@

