head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.01.05.17.30.30;	author atikhomirov;	state dead;
branches;
next	1.4;

1.4
date	2005.11.24.08.51.26;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.10.17.44.55;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.10.17.21.40;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.03.19.09.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@<%
// Body of a method that returns link decoration figure.
//
// Parameters:
//
// importManager - ImportUtil ref in code
// linkDecoration - LinkDecoration ref in code
//
{ // private namespace
	if (linkDecoration != null && linkDecoration.getFigureQualifiedClassName() != null && linkDecoration.getFigureQualifiedClassName().trim().length() > 0) {
		String decorationClassName = importManager.getImportedName(linkDecoration.getFigureQualifiedClassName());
		Set SCALABLE_DECORATIONS = new HashSet();
		SCALABLE_DECORATIONS.add("org.eclipse.draw2d.PolylineDecoration");
		SCALABLE_DECORATIONS.add("org.eclipse.draw2d.PolygonDecoration");
		SCALABLE_DECORATIONS.add("org.eclipse.gmf.draw2d.RhombDecoration");
		SCALABLE_DECORATIONS.add("org.eclipse.gmf.draw2d.FilledRhombDecoration");
		if (SCALABLE_DECORATIONS.contains(linkDecoration.getFigureQualifiedClassName())) {
			// XXX use smth like ScaleableAtttributes?
%>
	<%=decorationClassName%> decoration = new <%=decorationClassName%>();
	decoration.setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));
	return decoration;
<%		} else {%>
	return new <%=decorationClassName%>();
<%
		}
	} else {
%>
	return null;
<%
	}
} // private namespace
%>
@


1.4
log
@#112318 Do not overwrite paintFigure() method in node edit part when specific figure class is specified
@
text
@@


1.3
log
@Using MapMode from editpart
@
text
@d2 17
a18 1
if (linkDecoration == null) {
d20 5
a24 1
		return null;
d26 7
a32 4
} else if (linkDecoration.getFigureQualifiedClassName() != null && linkDecoration.getFigureQualifiedClassName().trim().length() > 0) {
	String decorationClassName = importManager.getImportedName(linkDecoration.getFigureQualifiedClassName());
	if (SCALABLE_DECORATIONS.contains(linkDecoration.getFigureQualifiedClassName())) {
		// XXX use smth like ScaleableAtttributes?
a33 9
		<%=decorationClassName%> decoration = new <%=decorationClassName%>();
		decoration.setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));
		return decoration;
<%	} else {%>
		return new <%=decorationClassName%>();
<%	}
} else {%>
		return null;
<%}%>
@


1.2
log
@#115861
ChildNode could be created not only in the compartment, but directly in it's parent.
@
text
@a7 1
	String mapModeClassName = importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil");
d12 1
a12 1
		decoration.setScale(<%=mapModeClassName%>.getMapMode().DPtoLP(7), <%=mapModeClassName%>.getMapMode().DPtoLP(3));
@


1.1
log
@figure class could be specified in .gmfgen along with dependent attributes. Notion of "Viewmap" captures that (visualization) information
@
text
@d8 1
a8 1
	String mapModeClassName = importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode");
d13 1
a13 1
		decoration.setScale(<%=mapModeClassName%>.DPtoLP(7), <%=mapModeClassName%>.DPtoLP(3));
@

