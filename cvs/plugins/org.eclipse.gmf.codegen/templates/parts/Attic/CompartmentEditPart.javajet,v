head	1.27;
access;
symbols
	v20081022-1925:1.27
	v20081015-1925:1.27
	v20081008-1925:1.27
	v20081001-1925:1.27
	v20080924-1925:1.27
	v20080917-1925:1.27
	v20080911-1728:1.27
	v20080910-1520:1.27
	v20080903-1520:1.27
	v20080827-1520:1.27
	v20080813-1520:1.27
	v20080806-1520:1.27
	v20070202-0200:1.24
	v20061214-0000:1.26
	v20061120-1300:1.26
	M3_20:1.26
	v20061117-0800:1.26
	v20061027-1200:1.24
	v20061020-1000:1.24
	v20061013-1330:1.26
	v20060919-0800:1.24
	v20060907-1100:1.24
	M1_20:1.25
	v20060904-1500:1.25
	v20060824-1600:1.24
	v20060817-1500:1.24
	v20060728-0500:1.24
	v20060713-1700:1.24
	R1_0_maintenance:1.24.0.2
	R1_0:1.24
	v20060627-1200:1.24
	v20060626-1420:1.24
	v20060620-0400:1.24
	v20060616-1400:1.23
	v20060616-1200:1.23
	v20060609-1400:1.22
	v20060531-1730:1.21
	v20060530-1930:1.21
	v20060526-1200:1.21
	v20060519-1300:1.20
	v20060519-0800:1.20
	v20060512-1000:1.18
	I20060512-1000:1.18
	I20060505-1400:1.18
	I20060428-1300:1.18
	I20060424-0500:1.18
	I20060424-0300:1.17
	M6_10:1.17
	I20060407-1200:1.16
	I20060331-1000:1.16
	I20060324-0300:1.16
	I20060317-1300:1.16
	I20060317-1200:1.16
	I20060316-1300:1.15
	I20060309-1300:1.15
	M5_10:1.14
	S20060303-1600:1.14
	I20060227-1730:1.14
	I20060216-1945:1.14
	I20060210-1715:1.14
	I20060209-1815:1.14
	I20060203-0830:1.12
	I20060202-1415:1.12
	I20060129-1145:1.12
	I20060127-0900:1.12
	I20060120-1530:1.11
	I20060113-1700:1.10
	M4_10:1.10
	I20060107-1100:1.10
	I20060105-1630:1.10
	I20051230-1230:1.10
	I20051223-1100:1.10
	I20051217-0925:1.10
	I20051208-2000:1.9
	I20051201-1800:1.9
	I20051124-2000:1.9
	M3_10:1.7
	I20051118-1245:1.7
	I20051111-1800:1.4
	I20051106-0900:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.27
date	2006.12.15.17.46.19;	author dstadnik;	state dead;
branches;
next	1.26;
commitid	3a134582df6a4567;

1.26
date	2006.10.06.12.15.31;	author atikhomirov;	state Exp;
branches;
next	1.25;

1.25
date	2006.07.07.11.58.56;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.06.19.14.02.19;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.06.12.15.32.53;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.06.06.17.48.31;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.25.15.04.51;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.17.12.39.16;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.24.13.54.54;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.17.13.20.58;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.24.10.23.26;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.19.00.10.44;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.10.14.59.33;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.23.10.11.52;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.23.07.50.50;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.18.13.55.34;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.17.18.23.01;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.17.12.38.37;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.10.17.21.40;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.04.18.26.17;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.17.53.03;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.27
log
@rewrite compartment edit part template in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.parts" class="CompartmentEditPartGenerator"
	imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.gmf.codegen.gmfgen.util.*"
	skeleton="../common.skeleton"%>
<%
final GenCompartment genCompartment = (GenCompartment) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genCompartment.getDiagram();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genCompartment.getEditPartClassName()%> extends <%=genCompartment.isListLayout() ? 
		importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart") : 
		importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart")%> {
<%{	GenCommonBase genCommonBase = genCompartment;%>
<%@@ include file="visualID.jetinc"%>
<%}%>

	/**
	 * @@generated
	 */
	public <%=genCompartment.getEditPartClassName()%>(View view) {
		super(view);
	}
<%if (genCompartment.isListLayout()) {%>

	/**
	 * @@generated
	 */
	protected boolean hasModelChildrenChanged(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%> evt) {
		return false;
	}
<%}%>

	/**
	 * @@generated
	 */
	public String getCompartmentName() {
		return "<%=genCompartment.getTitle()%>";
	}
<%if (!genCompartment.isNeedsTitle()) {
	//by default titles are shown even if there are no TitleStyle
	//we need to switch it off
%>

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure")%> result = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure")%>)super.createFigure();
		result.setTitleVisibility(false);
		return result;
	}
<%}%>

	/**
	 * @@generated
	 */
	protected void createDefaultEditPolicies() {
		super.createDefaultEditPolicies();
<%if (genCompartment.isCanCollapse()){ %>
		installEditPolicy(<%=importManager.getImportedName("org.eclipse.gef.EditPolicy")%>.PRIMARY_DRAG_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableCompartmentEditPolicy")%>());
<%}%>
		installEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new <%=importManager.getImportedName(genCompartment.getItemSemanticEditPolicyQualifiedClassName())%>());
<%if (!genCompartment.getChildNodes().isEmpty()) {%>
		installEditPolicy(EditPolicyRoles.CREATION_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy")%>());
		installEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy")%>());
<%	if (genCompartment.needsCanonicalEditPolicy()) {%>
		installEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new <%=importManager.getImportedName(genCompartment.getCanonicalEditPolicyQualifiedClassName())%>());
<%
	}
}
%>
<%{	GenCommonBase genCommonBase = genCompartment;%>
<%@@ include file="customBehaviour.jetinc"%>
<%}%>
	}
<%
if (ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genCompartment.getNode().getLayoutType())) {%>	

	/**
	 * @@generated
	 */
	protected void refreshVisuals() {
		super.refreshVisuals();
		refreshBounds();
	}
	
	/**
	 * @@generated
	 */
	protected void handleNotificationEvent(<%=importManager.getImportedName("org.eclipse.emf.common.notify.Notification")%> notification) {
		super.handleNotificationEvent(notification);
		Object feature = notification.getFeature();
		if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getSize_Width().equals(feature)
			|| <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getSize_Height().equals(feature)
			|| <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLocation_X().equals(feature)
			|| <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLocation_Y().equals(feature)) {
			refreshBounds();
		} 
	}
	
	/**
	 * @@generated
	 */
	protected void refreshBounds() {
		int width = ((Integer) getStructuralFeatureValue(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getSize_Width())).intValue();
		int height = ((Integer) getStructuralFeatureValue(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getSize_Height())).intValue();
		<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> size = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(width, height);
		int x = ((Integer) getStructuralFeatureValue(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLocation_X())).intValue();
		int y = ((Integer) getStructuralFeatureValue(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLocation_Y())).intValue();
		<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%> loc = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Point")%>(x, y);
		((<%=importManager.getImportedName("org.eclipse.gef.GraphicalEditPart")%>) getParent()).setLayoutConstraint(this, getFigure(), new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle")%>(loc, size));
	}
<%
} // helper.isStoring
%>

	/**
	 * @@generated
	 */
	protected void setRatio(Double ratio) {
<%
if (ViewmapLayoutType.UNKNOWN_LITERAL.equals(genCompartment.getNode().getLayoutType())) {
%>
		if (getFigure().getParent().getLayoutManager() instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout")%>) {
			super.setRatio(ratio);
		}
<%
} else {
%>
		// nothing to do -- parent layout does not accept Double constraints as ratio
		// super.setRatio(ratio); 
<%
}
%>
	}
}
<%importManager.emitSortedImports();%>
@


1.26
log
@refactor common attribute (canonical ep name) into shared superclass, get ready to avoid generation of useless canonicalep classes
@
text
@@


1.25
log
@add custom behaviour
@
text
@d75 1
a75 1
<%	if (genDiagram.isSynchronized()) {%>
@


1.24
log
@#145734 Generate "delete from view" popup menu action for not-synchronized diagrams
@
text
@d22 1
a22 2
<%{
GenCommonBase genCommonBase = genCompartment;%>
d77 7
a83 2
<%	}
}%>
a90 9
	//public <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
	//	<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> result = super.createFigure();
	//	result.setBorder(new <%=importManager.getImportedName("org.eclipse.draw2d.LineBorder")%>());
	//	return result;
	//}

	/**
	 * @@generated
	 */
@


1.23
log
@[mgolubev] #146531 Install ResizableCompartmentEditPolicy for child compartments in all the generated LayoutEditPolicies for NodeEditParts
@
text
@d76 1
d78 2
a79 1
<%}%>
@


1.22
log
@[mgolubev] #143934 Compartment title is not shown on diagram
@
text
@d69 3
@


1.21
log
@[mgolubev] #143666 CCE when compartment is added into the content pane with layout
@
text
@d46 1
a46 1
	protected String getTitleName() {
d49 14
@


1.20
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d19 3
a21 1
public class <%=genCompartment.getEditPartClassName()%> extends <%=genCompartment.isListLayout() ? importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart") : importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart")%> {
a76 6
	protected void refreshRatio() {
	}

	/**
	 * @@generated
	 */
d108 23
a130 1
<%}%>
@


1.19
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@d5 2
a6 1
GenCompartment genCompartment = (GenCompartment) ((Object[]) argument)[0];
d10 1
a10 1
package <%=genDiagram.getEditPartsPackageName()%>;
a11 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());%>
d14 1
a14 3
<%
importManager.markImportLocation(stringBuffer);
%>
@


1.18
log
@remove temp code
@
text
@d2 1
a2 1
	imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"
d62 2
a63 1
<%if (!genCompartment.getNode().isListLayout()) {%>
@


1.17
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@a113 30

	/**
	 * Temporary fix for the https://bugs.eclipse.org/bugs/show_bug.cgi?id=132219
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode")%> mm = getMapMode();
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure")%> rcf =
			(<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure")%>) super.createFigure();
		if (rcf instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ShapeCompartmentFigure")%>) {
			<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Insets")%> insets = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Insets")%>(mm.DPtoLP(1), mm.DPtoLP(2), mm.DPtoLP(1), mm.DPtoLP(0));
			<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> size = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(mm.DPtoLP(15), mm.DPtoLP(15));

			<%=importManager.getImportedName("org.eclipse.draw2d.ScrollPane")%> scrollpane = rcf.getScrollPane();
			scrollpane.setHorizontalScrollBar(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar")%>(<%=importManager.getImportedName("org.eclipse.draw2d.Orientable")%>.HORIZONTAL, insets, size, mm.DPtoLP(10), mm.DPtoLP(50)));
			scrollpane.setVerticalScrollBar(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar")%>(<%=importManager.getImportedName("org.eclipse.draw2d.Orientable")%>.VERTICAL, insets, size, mm.DPtoLP(10), mm.DPtoLP(50)));

			int MB = mm.DPtoLP(5);
			scrollpane.setBorder(new <%=importManager.getImportedName("org.eclipse.draw2d.MarginBorder")%>(MB, MB, MB, MB));
			int SZ = mm.DPtoLP(10);
			scrollpane.setMinimumSize(new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(SZ, SZ));
		} else {
			<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Insets")%> insets = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Insets")%>(mm.DPtoLP(1), mm.DPtoLP(2), mm.DPtoLP(1), mm.DPtoLP(0));
			<%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%> size = new <%=importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension")%>(mm.DPtoLP(15), mm.DPtoLP(15));

			<%=importManager.getImportedName("org.eclipse.draw2d.ScrollPane")%> scrollPane = rcf.getScrollPane();
			scrollPane.setVerticalScrollBar(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar")%>(<%=importManager.getImportedName("org.eclipse.draw2d.Orientable")%>.VERTICAL, insets, size, mm.DPtoLP(10), mm.DPtoLP(50)));
		}
		return rcf;
	}
@


1.16
log
@temp fix for #132219
@
text
@d22 4
@


1.15
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d63 5
a67 5
	public <%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> createFigure() {
		<%=importManager.getImportedName("org.eclipse.draw2d.IFigure")%> result = super.createFigure();
		result.setBorder(new <%=importManager.getImportedName("org.eclipse.draw2d.LineBorder")%>());
		return result;
	}
d110 30
@


1.14
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d8 1
@


1.13
log
@ImportManager moved to oeg.common
@
text
@d5 1
a5 1
GenCompartment genCompartment = (GenCompartment) argument;
@


1.12
log
@#124830 Add all children of the list compartment to the popup bar of the parent node
@
text
@d2 1
a2 1
	imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"
@


1.11
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@a6 1
boolean isParentFlowLayout = !genCompartment.getNode().isListLayout();
a54 5
<%
}
if (genCompartment.isListLayout()) {
%>
		installEditPolicy(EditPolicyRoles.POPUPBAR_ROLE, new <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.PopupBarEditPolicy")%>());
d57 1
a57 3
<%
if (isParentFlowLayout) {
%>
d108 1
a108 3
<%
}
%>
@


1.10
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@d7 1
a7 1
boolean isParentFlowLayout = genCompartment.getNode().getChildContainersPlacement() == CompartmentPlacementKind.FLOW_LITERAL;
a15 1
final boolean isListLayout = genCompartment.getLayoutKind() == CompartmentLayoutKind.TOOLBAR_LITERAL;
d21 1
a21 1
public class <%=genCompartment.getEditPartClassName()%> extends <%=isListLayout ? importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart") : importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart")%> {
d29 1
a29 1
<%if (isListLayout) {%>
d58 1
a58 1
if (isListLayout) {
@


1.9
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d7 1
d64 56
@


1.8
log
@#117299 add popup bar edit policy
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"
d10 3
a13 1
ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
d15 1
a15 7
importManager.addImport("org.eclipse.emf.common.notify.Notification");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");

boolean isListLayout = genCompartment.getLayoutKind() == CompartmentLayoutKind.TOOLBAR_LITERAL;
d29 1
a29 3
<%
if (isListLayout) {
%>
d34 1
a34 1
	protected boolean hasModelChildrenChanged(Notification evt) {
d37 2
a38 4
<%
}
%>
	
d45 1
a45 1
	
d52 4
a55 6
<%
if (genCompartment.getChildNodes().size() > 0) {
%>
		installEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());
		installEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());
		installEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new <%=genCompartment.getEditPartClassName()%>CanonicalEditPolicy());
a62 10
	
<%
if (genCompartment.getChildNodes().size() > 0) {
	GenChildContainer childContainer = genCompartment;
	GenNode containerNode = genCompartment.getNode();
%>
<%@@ include file="childContainerCanonicalEditPolicy.jetinc"%>
<%
}
%>
@


1.7
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d68 1
d70 2
@


1.6
log
@#116905
Using VisualIDRegistry to create CanonicalEditPolicies
@
text
@a13 1
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart");
d18 2
d25 1
a25 1
public class <%=genCompartment.getEditPartClassName()%> extends ListCompartmentEditPart {
d33 4
a36 1
	
d43 3
@


1.5
log
@#116655

Generating correct access for all the features.
@
text
@d53 3
d59 3
a61 1
		//installEditPolicy(EditPolicy.NODE_ROLE, null);
d65 1
a65 1
{
@


1.4
log
@#115861
ChildNode could be created not only in the compartment, but directly in it's parent.
@
text
@d2 2
a3 1
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.3
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d9 10
a18 13
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());%>
import java.util.LinkedList;
import java.util.List;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;
import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;
import org.eclipse.gmf.runtime.notation.View;

<%importManager.markImportLocation(stringBuffer);%>
a57 56
	/**
	 * @@generated
	 */
	private class <%=genCompartment.getEditPartClassName()%>CanonicalEditPolicy extends CanonicalEditPolicy {

		/**
		 * @@generated
		 */
		protected List getSemanticChildrenList() {	
<%
GenNode containerNode = genCompartment.getNode();
String modelElementInterfaceName = importManager.getImportedName(containerNode.getModelFacet().getMetaClass().getQualifiedInterfaceName());
%>		
			<%=modelElementInterfaceName%> modelElement = (<%=modelElementInterfaceName%>) ((View) getHost().getModel()).getElement();
			List result = new LinkedList();

<%
Map childFeature2NodesMap = new HashMap();
for (Iterator it = genCompartment.getChildNodes().iterator(); it.hasNext();) {
	GenChildNode nextChildNode = (GenChildNode) it.next();
	GenFeature genFeature = nextChildNode.getModelFacet().getChildMetaFeature();
	List genChildNodes; 
	if (!childFeature2NodesMap.containsKey(genFeature)) {
		genChildNodes = new ArrayList();
		childFeature2NodesMap.put(genFeature, genChildNodes);
	} else {
		genChildNodes = (List) childFeature2NodesMap.get(genFeature);
	}

	if (nextChildNode.getDomainMetaClass() == null) {
		genChildNodes.clear();
		genChildNodes.add(nextChildNode);
		continue;
	}
	if (genChildNodes.size() == 1 && ((GenChildNode) genChildNodes.get(0)).getDomainMetaClass() == null) {
		continue;
	}
	genChildNodes.add(nextChildNode);
}
		
for (Iterator it = childFeature2NodesMap.entrySet().iterator(); it.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) it.next();
	GenFeature nextFeature = (GenFeature) nextEntry.getKey();
	List childNodes = (List) nextEntry.getValue();
	if (childNodes.size() == 1 && ((GenChildNode) childNodes.get(0)).getDomainMetaClass() == null) {
%>
			result.<%=nextFeature.isListType() ? "addAll" : "add"%>(((<%=modelElementInterfaceName%>) modelElement).<%=nextFeature.getGetAccessor()%>());
<%
		continue;
	}
			
	if (nextFeature.isListType()) {
%>
			<%=importManager.getImportedName("java.util.Collection")%> featureValues = ((<%=modelElementInterfaceName%>) modelElement).<%=nextFeature.getGetAccessor()%>();
			for (<%=importManager.getImportedName("java.util.Iterator")%> it = featureValues.iterator(); it.hasNext();) {
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> nextValue = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) it.next();
d59 3
a61 1
	} else {
d63 1
a63 1
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> nextValue = (<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%>) ((<%=modelElementInterfaceName%>) modelElement).<%=nextFeature.getGetAccessor()%>();
a64 18
	}
%>
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> nextEClass = nextValue.eClass();
<%			
	for (Iterator childNodesIterator = childNodes.iterator(); childNodesIterator.hasNext();) {
		GenChildNode nextChildNode = (GenChildNode) childNodesIterator.next();
		GenClass domainMetaclass = nextChildNode.getDomainMetaClass();
%>
			if (<%=importManager.getImportedName(domainMetaclass.getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=domainMetaclass.getClassifierAccessorName()%>().equals(nextEClass)) {
				result.add(nextValue);
			} <%=childNodesIterator.hasNext() ? "else" : ""%>
<%
	}
	if (nextFeature.isListType()) {
%>
			}
<%
	}
a66 4
			return result;
		}
	}

@


1.2
log
@[ashatalin] #115107 remove uses of deprecated runtime code in templates
@
text
@d54 1
@


1.1
log
@[ashatalin] #114750 annotate diagram runtime model elements with visual id to tell one from another during EP decision making
@
text
@a9 2
import java.util.Collection;
import java.util.Iterator;
a20 2
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
d113 3
a115 3
			Collection featureValues = ((<%=modelElementInterfaceName%>) modelElement).<%=nextFeature.getGetAccessor()%>();
			for (Iterator it = featureValues.iterator(); it.hasNext();) {
				EObject nextValue = (EObject) it.next();
d119 1
a119 1
			EObject nextValue = (EObject) ((<%=modelElementInterfaceName%>) modelElement).<%=nextFeature.getGetAccessor()%>();
d123 1
a123 1
			EClass nextEClass = nextValue.eClass();
@

