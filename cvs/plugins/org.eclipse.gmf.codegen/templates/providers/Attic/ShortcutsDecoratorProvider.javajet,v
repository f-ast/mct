head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081015-1925:1.7
	v20081008-1925:1.7
	v20081001-1925:1.7
	v20080924-1925:1.7
	v20080917-1925:1.7
	v20080911-1728:1.7
	v20080910-1520:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	v20080806-1520:1.7
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.6
	v20070518-1300:1.6
	v20070504-1000:1.6
	v20070427-0600:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070405-1100:1.6
	v20070403-1500:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070307-0700:1.6
	v20070301-1200:1.6
	v20070228-2000:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070202-0200:1.5.2.1
	v20070103-0300:1.6
	M4_20:1.6
	v20061222-1800:1.6
	v20061218-1200:1.6
	v20061214-0000:1.6
	v20061120-1300:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061027-1200:1.5.2.1
	v20061020-1000:1.5.2.1
	v20061013-1330:1.6
	v20060919-0800:1.5.2.1
	v20060907-1100:1.5.2.1
	M1_20:1.6
	v20060904-1500:1.6
	v20060824-1600:1.5.2.1
	v20060817-1500:1.5.2.1
	v20060728-0500:1.5.2.1
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060620-0400:1.5
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-1300:1.3
	v20060519-0800:1.3
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2007.06.13.14.48.18;	author ashatalin;	state dead;
branches;
next	1.6;
commitid	3455467003af4567;

1.6
date	2006.07.24.14.38.16;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.01.09.40.47;	author dstadnik;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.15.17.11.53;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.07.21.22;	author dstadnik;	state Exp;
branches;
next	;

1.5.2.1
date	2006.07.24.14.42.12;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[191858] - Convert /providers/ShortcutsDecoratorProvider.javajet template to xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ShortcutsDecoratorProviderGenerator"
	imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.gef.EditPart;
import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;
import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeEditPart;
import org.eclipse.gmf.runtime.diagram.ui.services.decorator.AbstractDecorator;
import org.eclipse.gmf.runtime.diagram.ui.services.decorator.CreateDecoratorsOperation;
import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorProvider;
import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.swt.graphics.Image;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getShortcutsDecoratorProviderClassName()%> extends AbstractProvider implements IDecoratorProvider {

	/**
	 * @@generated
	 */
	public static final String SHORTCUTS_DECORATOR_ID = "shortcuts"; //$NON-NLS-1$

	/**
	 * @@generated
	 */
	public boolean provides(IOperation operation) {
		if (!(operation instanceof CreateDecoratorsOperation)) {
			return false;
		}
		IDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget();
		View view = (View) decoratorTarget.getAdapter(View.class);
		return view != null && <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(view));
	}

	/**
	 * @@generated
	 */
	public void createDecorators(IDecoratorTarget decoratorTarget) {
		View view = (View) decoratorTarget.getAdapter(View.class);
		if (view != null) {
			EAnnotation annotation = view.getEAnnotation("Shortcut"); //$NON-NLS-1$
			if (annotation != null) {
				decoratorTarget.installDecorator(SHORTCUTS_DECORATOR_ID, new ShortcutsDecorator(decoratorTarget));
			}
		}
	}

	/**
	 * @@generated
	 */
	protected class ShortcutsDecorator extends AbstractDecorator {

		/**
		 * @@generated
		 */
		public ShortcutsDecorator(IDecoratorTarget decoratorTarget) {
			super(decoratorTarget);
		}

		/**
		 * @@generated
		 */
		public void activate() {
			refresh();
		}

		/**
		 * @@generated
		 */
		public void refresh() {
			removeDecoration();
			EditPart editPart = (EditPart) getDecoratorTarget().getAdapter(EditPart.class);
			Image image = <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getBundledImage("icons/shortcut.gif"); //$NON-NLS-1$
			if (editPart instanceof ShapeEditPart) {
				setDecoration(getDecoratorTarget().addShapeDecoration(image, IDecoratorTarget.Direction.SOUTH_WEST, 0, false));
			} else if (editPart instanceof ConnectionEditPart) {
				setDecoration(getDecoratorTarget().addConnectionDecoration(image, 50, false));
			}
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.6
log
@[fisakov] #151522 Shortcut decorator provider removes decoration on refresh
@
text
@@


1.5
log
@fix some nls markers
@
text
@d76 7
a90 7

		/**
		 * @@generated
		 */
		public void refresh() {
			removeDecoration();
		}
@


1.5.2.1
log
@[fisakov] #151522 Shortcut decorator provider removes decoration on refresh
@
text
@d76 7
a89 7
			EditPart editPart = (EditPart) getDecoratorTarget().getAdapter(EditPart.class);
			Image image = <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getBundledImage("icons/shortcut.gif"); //$NON-NLS-1$
			if (editPart instanceof ShapeEditPart) {
				setDecoration(getDecoratorTarget().addShapeDecoration(image, IDecoratorTarget.Direction.SOUTH_WEST, 0, false));
			} else if (editPart instanceof ConnectionEditPart) {
				setDecoration(getDecoratorTarget().addConnectionDecoration(image, 50, false));
			}
@


1.4
log
@fix some nls markers
@
text
@d77 1
a77 1
			Image image = <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getBundledImage("icons/shortcut.gif");
@


1.3
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d32 1
a32 1
	public static final String SHORTCUTS_DECORATOR_ID = "shortcuts";
@


1.2
log
@#139843 Unable to parse view type as a visualID number
@
text
@d3 4
a6 1
<%GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];%>
d8 1
a8 1
package <%=genDiagram.getProvidersPackageName()%>;
a9 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
@


1.1
log
@#135693 Use decoration service to provide shortcut image
@
text
@d40 2
a41 1
		return decoratorTarget.getAdapter(View.class) != null;
@

