head	1.8;
access;
symbols
	v20081022-1925:1.8
	v20081015-1925:1.8
	v20081008-1925:1.8
	v20081001-1925:1.8
	v20080924-1925:1.8
	v20080917-1925:1.8
	v20080911-1728:1.8
	v20080910-1520:1.8
	v20080903-1520:1.8
	v20080827-1520:1.8
	v20080813-1520:1.8
	v20080806-1520:1.8
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070520-1200:1.7
	v20070518-1300:1.7
	v20070504-1000:1.7
	v20070427-0600:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070405-1100:1.7
	v20070403-1500:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070307-0700:1.7
	v20070301-1200:1.7
	v20070228-2000:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.7
	v20070103-0300:1.7
	M4_20:1.7
	v20061222-1800:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	v20061120-1300:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.7
	v20061020-1000:1.7
	v20061013-1330:1.7
	v20060919-0800:1.7
	v20060907-1100:1.7
	M1_20:1.7
	v20060904-1500:1.7
	v20060824-1600:1.7
	v20060817-1500:1.7
	v20060728-0500:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.7
	v20060620-0400:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-1300:1.7
	v20060519-0800:1.7
	v20060512-1000:1.5
	I20060512-1000:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2007.06.20.15.50.10;	author dstadnik;	state dead;
branches;
next	1.7;
commitid	3ba446794caf4567;

1.7
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.15.17.11.53;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.12.09.29.27;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.19.13.19.22;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[192848] Rewrite creation wizard and ui contributors in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.providers" class="EditPartProviderGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.lang.ref.WeakReference;

import org.eclipse.gef.EditPart;
import org.eclipse.gef.EditPartFactory;
import org.eclipse.gmf.runtime.common.core.service.IOperation;
import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
import org.eclipse.gmf.runtime.diagram.ui.services.editpart.AbstractEditPartProvider;
import org.eclipse.gmf.runtime.diagram.ui.services.editpart.CreateGraphicEditPartOperation;
import org.eclipse.gmf.runtime.diagram.ui.services.editpart.IEditPartOperation;
import org.eclipse.gmf.runtime.notation.View;
import <%=genDiagram.getEditPartsPackageName()%>.<%=genDiagram.getEditPartFactoryClassName()%>;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getEditPartProviderClassName()%> extends AbstractEditPartProvider {

	/**
	 * @@generated
	 */
	private EditPartFactory factory;

	/**
	 * @@generated
	 */
	private boolean allowCaching;

	/**
	 * @@generated
	 */
	private WeakReference cachedPart;

	/**
	 * @@generated
	 */
	private WeakReference cachedView;

	/**
	 * @@generated
	 */
	public <%=genDiagram.getEditPartProviderClassName()%>() {
		setFactory(new <%=genDiagram.getEditPartFactoryClassName()%>());
		setAllowCaching(true);
	}

	/**
	 * @@generated
	 */
	public final EditPartFactory getFactory() {
		return factory;
	}

	/**
	 * @@generated
	 */
	protected void setFactory(EditPartFactory factory) {
		this.factory = factory;
	}

	/**
	 * @@generated
	 */
	public final boolean isAllowCaching() {
		return allowCaching;
	}

	/**
	 * @@generated
	 */
	protected synchronized void setAllowCaching(boolean allowCaching) {
		this.allowCaching = allowCaching;
		if (!allowCaching) {
			cachedPart = null;
			cachedView = null;
		}
	}

	/**
	 * @@generated
	 */
	protected IGraphicalEditPart createEditPart(View view) {
		EditPart part = factory.createEditPart(null, view);
		if (part instanceof IGraphicalEditPart) {
			return (IGraphicalEditPart) part;
		}
		return null;
	}

	/**
	 * @@generated
	 */
	protected IGraphicalEditPart getCachedPart(View view) {
		if (cachedView != null && cachedView.get() == view) {
			return (IGraphicalEditPart) cachedPart.get();
		}
		return null;
	}

	/**
	 * @@generated
	 */
	public synchronized IGraphicalEditPart createGraphicEditPart(View view) {
		if (isAllowCaching()) {
			IGraphicalEditPart part = getCachedPart(view);
			cachedPart = null;
			cachedView = null;
			if (part != null) {
				return part;
			}
		}
		return createEditPart(view);
	}

	/**
	 * @@generated
	 */
	public synchronized boolean provides(IOperation operation) {
		if (operation instanceof CreateGraphicEditPartOperation) {
			View view = ((IEditPartOperation) operation).getView();
			if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(view))) {
				return false;
			}
			if (isAllowCaching() && getCachedPart(view) != null) {
				return true;
			}
			IGraphicalEditPart part = createEditPart(view);
			if (part != null) {
				if (isAllowCaching()) {
					cachedPart = new WeakReference(part);
					cachedView = new WeakReference(view);
				}
				return true;
			}
		}
		return false;
	}
}
<%importManager.emitSortedImports();%>@


1.7
log
@use importAssistant to emit package statement instead of handcoding
@
text
@@


1.6
log
@#139843 Unable to parse view type as a visualID number
@
text
@d4 2
a5 2
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
d8 1
a8 1
package <%=genDiagram.getProvidersPackageName()%>;
@


1.5
log
@#135653 do not use deprecated api
@
text
@d2 5
a6 2
    imports="org.eclipse.gmf.codegen.gmfgen.*"%>
<%GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];%>
d21 1
d130 3
d148 1
@


1.4
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d15 1
d125 1
a125 1
			View view = ((CreateGraphicEditPartOperation) operation).getView();
@


1.3
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d4 1
@


1.2
log
@[dstadnik] #112900 metamodel support
@
text
@d3 1
a3 1
<%GenDiagram genDiagram = (GenDiagram) argument;%>
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d20 1
a20 1
public class EditPartProvider extends AbstractEditPartProvider {
d45 1
a45 1
	public EditPartProvider() {
@

