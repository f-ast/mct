head	1.47;
access;
symbols
	v20081022-1925:1.47
	v20081015-1925:1.47
	v20081008-1925:1.47
	v20081001-1925:1.47
	v20080924-1925:1.47
	v20080917-1925:1.47
	v20080911-1728:1.47
	v20080910-1520:1.47
	v20080903-1520:1.47
	v20080827-1520:1.47
	v20080813-1520:1.47
	v20080806-1520:1.47
	v20070601-1400:1.44
	v20070525-1500:1.43
	v20070520-1200:1.43
	v20070518-1300:1.43
	v20070504-1000:1.41
	v20070427-0600:1.41
	v20070420-1000:1.40
	v20070413-1300:1.40
	v20070405-1100:1.40
	v20070403-1500:1.40
	v20070330-1300:1.40
	v20060330-1300:1.40
	v20070322-1100:1.40
	v20060316-0600:1.40
	v20070307-0700:1.40
	v20070301-1200:1.40
	v20070228-2000:1.40
	v20070221-1500:1.40
	v20070208-1800:1.40
	v20070202-0200:1.38
	v20070103-0300:1.40
	M4_20:1.40
	v20061222-1800:1.40
	v20061218-1200:1.40
	v20061214-0000:1.40
	v20061120-1300:1.40
	M3_20:1.40
	v20061117-0800:1.40
	v20061027-1200:1.38
	v20061020-1000:1.38
	v20061013-1330:1.39
	v20060919-0800:1.38
	v20060907-1100:1.38
	M1_20:1.38
	v20060904-1500:1.38
	v20060824-1600:1.38
	v20060817-1500:1.38
	v20060728-0500:1.38
	v20060713-1700:1.38
	R1_0_maintenance:1.38.0.2
	R1_0:1.38
	v20060627-1200:1.38
	v20060626-1420:1.38
	v20060620-0400:1.36
	v20060616-1400:1.35
	v20060616-1200:1.35
	v20060609-1400:1.35
	v20060531-1730:1.33
	v20060530-1930:1.33
	v20060526-1200:1.33
	v20060519-1300:1.33
	v20060519-0800:1.33
	v20060512-1000:1.31
	I20060512-1000:1.31
	I20060505-1400:1.30
	I20060428-1300:1.30
	I20060424-0500:1.29
	I20060424-0300:1.29
	M6_10:1.28
	I20060407-1200:1.26
	I20060331-1000:1.26
	I20060324-0300:1.26
	I20060317-1300:1.26
	I20060317-1200:1.26
	I20060316-1300:1.26
	I20060309-1300:1.24
	M5_10:1.23
	S20060303-1600:1.23
	I20060227-1730:1.21
	I20060216-1945:1.21
	I20060210-1715:1.20
	I20060209-1815:1.20
	I20060203-0830:1.18
	I20060202-1415:1.18
	I20060129-1145:1.18
	I20060127-0900:1.18
	I20060120-1530:1.18
	I20060113-1700:1.17
	M4_10:1.17
	I20060107-1100:1.16
	I20060105-1630:1.16
	I20051230-1230:1.16
	I20051223-1100:1.16
	I20051217-0925:1.15
	I20051208-2000:1.14
	I20051201-1800:1.14
	I20051124-2000:1.14
	M3_10:1.13
	I20051118-1245:1.13
	I20051111-1800:1.11
	I20051106-0900:1.10
	v20051030:1.8;
locks; strict;
comment	@# @;
expand	@k@;


1.47
date	2007.06.04.17.14.38;	author dstadnik;	state dead;
branches;
next	1.46;
commitid	54d4664487d4567;

1.46
date	2007.06.04.15.56.46;	author dstadnik;	state Exp;
branches;
next	1.45;
commitid	20bf4664363d4567;

1.45
date	2007.06.04.15.13.45;	author dstadnik;	state Exp;
branches;
next	1.44;
commitid	27ac46642c284567;

1.44
date	2007.05.28.16.52.23;	author ashatalin;	state Exp;
branches;
next	1.43;
commitid	51cb465b08c54567;

1.43
date	2007.05.18.14.56.13;	author dstadnik;	state Exp;
branches;
next	1.42;
commitid	36ed464dbe8c4567;

1.42
date	2007.05.18.10.36.21;	author atikhomirov;	state Exp;
branches;
next	1.41;
commitid	a70464d81a44567;

1.41
date	2007.04.26.13.20.22;	author atikhomirov;	state Exp;
branches;
next	1.40;
commitid	5a4f4630a7154567;

1.40
date	2006.10.24.14.49.08;	author ashatalin;	state Exp;
branches;
next	1.39;

1.39
date	2006.10.03.18.11.00;	author atikhomirov;	state Exp;
branches;
next	1.38;

1.38
date	2006.06.26.13.46.43;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.06.21.15.22.41;	author ashatalin;	state Exp;
branches;
next	1.36;

1.36
date	2006.06.19.12.42.03;	author ashatalin;	state Exp;
branches;
next	1.35;

1.35
date	2006.06.06.17.48.31;	author ashatalin;	state Exp;
branches;
next	1.34;

1.34
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.32;

1.32
date	2006.05.17.12.39.15;	author atikhomirov;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.04.25.12.35.22;	author ashatalin;	state Exp;
branches;
next	1.29;

1.29
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.28;

1.28
date	2006.04.13.22.22.22;	author ashatalin;	state Exp;
branches;
next	1.27;

1.27
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.26;

1.26
date	2006.03.13.11.02.29;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.03.10.14.58.45;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2006.03.03.13.22.36;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.01.19.58.25;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.02.14.18.22.55;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.12.10.41.33;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.20.18.00.00;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.10.14.59.33;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.24.12.16.33;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2005.11.18.13.55.33;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.17.09.14.15;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.11.13.47.42;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.04.18.26.17;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.02.17.53.03;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.26.18.43.48;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.24.14.58.45;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.18.11.09.13;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.14.12.17.18;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.13.12.45.56;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.47
log
@rewrite node view factory generator in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ViewFactoryGenerator"
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* org.eclipse.gmf.codegen.gmfgen.util.*"%>
<%
final GenCommonBase genElement = (GenCommonBase) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genElement.getDiagram();
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
importManager.addImport("org.eclipse.core.runtime.IAdaptable");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");

importManager.markImportLocation(stringBuffer);

final boolean isLabel = genElement instanceof GenChildLabelNode;
final boolean isShape = !isLabel;
final boolean isNode = true;

Viewmap viewmap = genElement.getViewmap();
StyleAttributes styleAttributes = (viewmap == null) ? null : (StyleAttributes)viewmap.find(StyleAttributes.class);
boolean fixedForeground = styleAttributes != null && styleAttributes.isFixedForeground();
boolean fixedFont = styleAttributes != null && styleAttributes.isFixedFont();
%>

/**
 * @@generated
 */
public class <%=genElement.getNotationViewFactoryClassName()%> extends 
<%if (isLabel) {%>
	<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory")%>
<%} else if (isShape) {%>
	<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractShapeViewFactory")%>
<%} else {
	throw new IllegalStateException("Unknown case for " + genElement);
}%>
{

	/**
	 * @@generated 
	 */
	protected List createStyles(View view) {
		<%=importManager.getImportedName("java.util.List")%> styles = new <%=importManager.getImportedName("java.util.ArrayList")%>();
<%
if (isShape) {
	if (!fixedFont) {%>
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createShapeStyle());
<%	} else { /*all but font style*/%>
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDescriptionStyle());
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createFillStyle());
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createLineStyle());
<%	}
}
%>
		return styles;
	}

	/**
	 * @@generated
	 */
	protected void decorateView(View containerView, View view, IAdaptable semanticAdapter,
			String semanticHint, int index, boolean persisted) {
		if (semanticHint == null) { <%/* [++] important for the create shortcut functionality*/%>
			semanticHint = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=genElement.getEditPartQualifiedClassName()%>.VISUAL_ID);
			view.setType(semanticHint);
		}<%/* [--] important for the create shortcut functionality*/%>
		super.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);
		if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(containerView))) {
<%@@ include file="../commands/createShortcutAnnotation.jetinc"%>
		}
<%
ColorAttributes colorAttrs = genElement.getViewmap() != null ? (ColorAttributes) genElement.getViewmap().find(ColorAttributes.class) : null;
if (colorAttrs != null && colorAttrs.getForegroundColor() != null && colorAttrs.getForegroundColor().trim().length() > 0) {%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.setStructuralFeatureValue(view, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getLineStyle_LineColor(),
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities")%>.colorToInteger(<%=importManager.getImportedName("org.eclipse.draw2d.ColorConstants")%>.<%=colorAttrs.getForegroundColor()%>));
<%
}
if (isNode) {
	GenNode genNode = (GenNode) genElement;
	if (genNode.getBehaviour(OpenDiagramBehaviour.class).size() == 1) /*XXX perhaps, add size() linkStyles with different hints and process them with single policy?*/ {%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle")%> diagramFacet = <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createHintedDiagramLinkStyle();
<%	if (genNode.getBehaviour(OpenDiagramBehaviour.class).get(0).getDiagramKind() != null) {%>
		diagramFacet.setHint("<%=genNode.getBehaviour(OpenDiagramBehaviour.class).get(0).getDiagramKind()%>"); // $NON-NLS-1$
<%	}%>
		view.getStyles().add(diagramFacet);
<%	}
	if (colorAttrs != null && colorAttrs.getBackgroundColor() != null && colorAttrs.getBackgroundColor().trim().length() > 0) {%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.setStructuralFeatureValue(view, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFillStyle_FillColor(),
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities")%>.colorToInteger(<%=importManager.getImportedName("org.eclipse.draw2d.ColorConstants")%>.<%=colorAttrs.getBackgroundColor()%>));
<%
	}
	List labels = genNode.getLabels();
	List genChildContainers = genNode.getCompartments();
	if (labels.size() > 0 || genChildContainers.size() > 0) {
		if (genNode.getModelFacet() != null) {
%>
	org.eclipse.emf.ecore.EObject eObject = (org.eclipse.emf.ecore.EObject) semanticAdapter.getAdapter(org.eclipse.emf.ecore.EObject.class);
	IAdaptable eObjectAdapter = eObject != null ? new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(eObject) : null;
<%
		} else {
%>
	IAdaptable eObjectAdapter = null;
<%
		}
	}	
	for (int j = 0; j < labels.size(); j++) {
		GenNodeLabel label = (GenNodeLabel) labels.get(j);
%>
		getViewService().createNode(eObjectAdapter, view, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(label.getEditPartQualifiedClassName())%>.VISUAL_ID),
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, true, getPreferencesHint());
<%
	}
	for (int j = 0; j < genChildContainers.size(); j++) {
		GenCompartment genChildContainer = (GenCompartment) genChildContainers.get(j);
%>
		getViewService().createNode(eObjectAdapter, view, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(genChildContainer.getEditPartQualifiedClassName())%>.VISUAL_ID),
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, true, getPreferencesHint());
<%
	}
}
%>
	}
}
<%importManager.emitSortedImports();%>
@


1.46
log
@rewrite link view factory generator in xpand
@
text
@@


1.45
log
@rewrite compartment view factory generator in xpand
@
text
@a16 1
final boolean isLink = genElement instanceof GenLink;
d18 2
a19 2
final boolean isShape = !isLink && !isLabel; // captures else
final boolean isNode = !isLink;
d31 1
a31 3
<%if (isLink) {%>
	<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.ConnectionViewFactory")%>
<%} else if (isLabel) {%>
a44 9
<%if (isLink) {%>
<%	if (!fixedForeground) {%>
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createConnectorStyle());
<%	} else { /*only routing, no line style*/ %>
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createRoutingStyle());
<%	} %>
<%	if (!fixedFont) {%>
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createFontStyle());
<%	}%>
a45 5
} /*isLink*/
if (isLabel) {
	//no styles for label
	//FIXME: throw new IllegalStateExcpetion("Labels to be processed in the LabelTextViewFactory/LabelViewFactory");
}
d47 1
a47 2
%>
<%	if (!fixedFont) {%>
d54 2
a55 1
} /*isShape*/ %>
a120 22
} else if (isLink) {
	GenLink genLink = (GenLink) genElement;
	List labels = genLink.getLabels();
	if (labels.size() > 0) {
		if (genLink.getModelFacet() != null) {
%>
	org.eclipse.emf.ecore.EObject eObject = (org.eclipse.emf.ecore.EObject) semanticAdapter.getAdapter(org.eclipse.emf.ecore.EObject.class);
	IAdaptable eObjectAdapter = eObject != null ? new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(eObject) : null;
<%
		} else {
%>
	IAdaptable eObjectAdapter = null;
<%
		}
	}	
	for (int j = 0; j < labels.size(); j++) {
		GenLinkLabel label = (GenLinkLabel) labels.get(j);
%>
		getViewService().createNode(eObjectAdapter, view, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(label.getEditPartQualifiedClassName())%>.VISUAL_ID),
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, true, getPreferencesHint());
<%
	}
@


1.44
log
@- ViewProvider is in xpand now.
- Separating semantic part of VisualIDRegistry from pure-notation.
@
text
@d19 2
a20 11
final boolean isDiagram = genElement instanceof GenDiagram;
final boolean isCompartment = genElement instanceof GenCompartment;
final boolean isShape = !isLink && !isLabel && !isDiagram && !isCompartment; // captures else
assert isLink || isLabel || isDiagram || isCompartment || isShape;

final boolean isNode = !isLink && !isDiagram && !isCompartment;
boolean isCompartmentWithOwnBounds = false;
if (isCompartment){
	GenCompartment genCompartment = (GenCompartment)genElement;
	isCompartmentWithOwnBounds = ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genCompartment.getNode());
}
a35 2
<%} else if (isCompartment) {%>
    <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.ListCompartmentViewFactory")%>
d63 1
a63 16
if (isCompartment) {
	GenCompartment genCompartment = (GenCompartment)genElement;
	if (genCompartment.isCanCollapse()) {
%>
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDrawerStyle());
<%
	}
	if (genCompartment.isNeedsTitle()) {
%>
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createTitleStyle());
<%	}%>	
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createSortingStyle());
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createFilteringStyle());
<%
}
if (isShape || isCompartmentWithOwnBounds) {
d72 1
a72 1
} /*isShape || isCompartmentWithOwnBounds*/ %>
a85 4
<%	if (isCompartment){%>
		setupCompartmentTitle(view);
		setupCompartmentCollapsed(view);
<%	}%>		
a162 47
<%if (isCompartmentWithOwnBounds) {%>

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.LayoutConstraint")%> createLayoutConstraint() {
		return <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createBounds();
	}
	
	/**
	 * @@generated
	 */
	protected void initializeFromPreferences(View view) {
		super.initializeFromPreferences(view);

		<%=importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore")%> store = (<%=importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore")%>) getPreferencesHint().getPreferenceStore();

		// fill color
		<%=importManager.getImportedName("org.eclipse.swt.graphics.RGB")%> fillRGB = <%=importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter")%>.getColor(store, <%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants")%>.PREF_FILL_COLOR);
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.setStructuralFeatureValue(view, <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage")%>.eINSTANCE.getFillStyle_FillColor(), <%=importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities")%>.RGBToInteger(fillRGB));
	}
<%}
if (isCompartment) {
	String titleStyleFQN = importManager.getImportedName("org.eclipse.gmf.runtime.notation.TitleStyle");
	String drawerStyleFQN = importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle");	
	String notationPackageFQN = importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage");
%>
	/**
	 * @@generated
	 */
	protected void setupCompartmentTitle(View view) {
		<%=titleStyleFQN%> titleStyle = (<%=titleStyleFQN%>)view.getStyle(<%=notationPackageFQN%>.eINSTANCE.getTitleStyle());
		if (titleStyle != null){
			titleStyle.setShowTitle(true);
		}
	}

	/**
	 * @@generated
	 */
	protected void setupCompartmentCollapsed(View view) {
		<%=drawerStyleFQN%> drawerStyle = (<%=drawerStyleFQN%>)view.getStyle(<%=notationPackageFQN%>.eINSTANCE.getDrawerStyle());
		if (drawerStyle != null){
			drawerStyle.setCollapsed(false);
		}
	}
<%}%>
@


1.43
log
@rewrite diagram view factory in xpand
@
text
@d139 14
a153 1
	List labels = genNode.getLabels();
d157 1
a157 1
		getViewService().createNode(semanticAdapter, view, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(label.getEditPartQualifiedClassName())%>.VISUAL_ID),
a160 1
	List genChildContainers = genNode.getCompartments();
d164 1
a164 1
		getViewService().createNode(semanticAdapter, view, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(genChildContainer.getEditPartQualifiedClassName())%>.VISUAL_ID),
d171 12
d186 1
a186 1
		getViewService().createNode(semanticAdapter, view, <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(label.getEditPartQualifiedClassName())%>.VISUAL_ID),
@


1.42
log
@Updated OpenDiagramEditPolicy generation to utilize newly introduced (bug #159479) appropriate diagram styles instead of annotations
@
text
@a46 2
<%} else if (isDiagram) {%>    
	<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.DiagramViewFactory")%>
a73 5
if (isDiagram) {
%>
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDiagramStyle());
<%
}
a104 8
<%
if (isDiagram) {
%>
	protected void decorateView(View view, IAdaptable semanticAdapter, String diagramKind){
		super.decorateView(view, semanticAdapter, diagramKind);
<%
} else {
%>
a119 2
}

d190 1
a190 10
<%}%>
<%if (isDiagram && genDiagram.getUnits() != null && genDiagram.getUnits().trim().length() > 0) {%>
	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.MeasurementUnit")%> getMeasurementUnit() {
		return <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.MeasurementUnit")%>.<%=genDiagram.getUnits().toUpperCase()%>_LITERAL;
	}
<%}%>
<%
a215 1

@


1.41
log
@[183795] Generated shapes consume too much memory
@
text
@d145 6
a150 4
	if (genNode.getBehaviour(OpenDiagramBehaviour.class).size() == 1) {%>
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation")%> diagramFacet = <%=importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory")%>.eINSTANCE.createEAnnotation();
		diagramFacet.setSource("<%=org.eclipse.gmf.codegen.gmfgen.impl.OpenDiagramBehaviourImpl.ANNOTATION_SOURCE%>");
		view.getEAnnotations().add(diagramFacet);
@


1.40
log
@D&D from diagram content navigator to Diagram surface.
@
text
@d62 3
d66 1
a69 3
<%	if (!fixedForeground) {%>
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createLineStyle());
<%	}%>
d71 1
a71 1
}
d78 1
a78 3
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createPageStyle());
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createGuideStyle());
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createDescriptionStyle());
d99 2
a100 2
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createFontStyle());
<%	}%>
d104 2
a105 1
<%}%>
@


1.39
log
@[119465] support for diagram partitioning
@
text
@d132 1
a132 4
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation")%> shortcutAnnotation = <%=importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory")%>.eINSTANCE.createEAnnotation();
			shortcutAnnotation.setSource("Shortcut"); //$NON-NLS-1$
			shortcutAnnotation.getDetails().put("modelID", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID); //$NON-NLS-1$
			view.getEAnnotations().add(shortcutAnnotation);
@


1.38
log
@#148636 Link labels and External node's labels should have the same default font size
@
text
@d148 5
@


1.37
log
@[mgolubev] #147853 Fonts defined in the gmfgraph model should be used by the generated labels
@
text
@d56 1
a56 1
	/*
d61 1
a61 3
<%
if (isLink) {
%>
d63 6
d70 1
a70 6
	if (!fixedForeground) { 
%>
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createLineStyle());
<%	
	} //fixedForeground
} 
d74 1
a74 1
} 
d84 1
a84 1
	if (genCompartment.isCanCollapse()){
d89 2
a90 2
	if (genCompartment.isNeedsTitle()){
%>	
d92 1
a92 3
<%
	}
%>	
d95 2
a96 2
<%	
} 
a97 1
	if (!fixedFont){
d99 1
d101 1
a101 3
<%
	}
%>
d105 1
a105 3
<%
}
%>
@


1.36
log
@[mgolubev] #145863 Colors defined in the gmfgraph model should be used by the generated polyline connections
@
text
@d30 5
a65 3
	Viewmap viewmap = genElement.getViewmap();
	StyleAttributes styleAttributes = (viewmap == null) ? null : (StyleAttributes)viewmap.find(StyleAttributes.class);
	boolean fixedForeground = styleAttributes != null && styleAttributes.isFixedForeground();
d74 1
d101 1
d104 3
@


1.35
log
@[mgolubev] #143934 Compartment title is not shown on diagram
@
text
@d17 6
d24 1
a24 4
boolean isLink = genElement instanceof GenLink;
boolean isDiagram = genElement instanceof GenDiagram;
boolean isCompartment = genElement instanceof GenCompartment;
boolean isNode = !isLink && !isDiagram && !isCompartment;
d38 1
a38 1
<%} else if (genElement instanceof GenChildLabelNode) {%>
d44 1
a44 1
<%} else {%>
d46 3
a48 1
<%}%>
d51 58
a186 9
	protected <%=importManager.getImportedName("java.util.List")%> createStyles(View view) {
		<%=importManager.getImportedName("java.util.List")%> styles = super.createStyles(view);
		styles.add(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory")%>.eINSTANCE.createShapeStyle());
		return styles;
	}
	
	/**
	 * @@generated
	 */
a216 1
	GenCompartment genCompartment = (GenCompartment)genElement;
a222 8
<%
if(genCompartment.isNeedsTitle()){
%>		
		if (titleStyle == null){
			titleStyle = (<%=titleStyleFQN%>) view.createStyle(<%=notationPackageFQN%>.eINSTANCE.getTitleStyle());
		}
		titleStyle.setShowTitle(true);
<%} else {%>
d224 1
a224 1
			view.getStyles().remove(titleStyle);
a225 1
<%}%>
a232 8
<%
if(genCompartment.isCanCollapse()){
%>		
		if (drawerStyle == null){
			drawerStyle = (<%=drawerStyleFQN%>) view.createStyle(<%=notationPackageFQN%>.eINSTANCE.getDrawerStyle());
		}
		drawerStyle.setCollapsed(false);
<%} else {%>
d234 1
a234 1
			view.getStyles().remove(drawerStyle);
d236 1
a237 1
	}
a238 1
<%}%>
@


1.34
log
@fix some nls markers
@
text
@d59 1
a59 1
		if (semanticHint == null) { <%/* [++] importmant for the create shortcut functionality*/%>
d62 1
a62 1
		}<%/* [--] importmant for the create shortcut functionality*/%>
d64 4
d158 46
@


1.33
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d67 1
a67 1
			shortcutAnnotation.getDetails().put("modelID", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID);
@


1.32
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@d3 5
a7 2
<%GenCommonBase genElement = (GenCommonBase) ((Object[]) argument)[0];%>
<%GenDiagram genDiagram = genElement.getDiagram();%>
d9 1
a9 3
package <%=genDiagram.getNotationViewFactoriesPackageName()%>;

<%ImportUtil importManager = new ImportUtil(genDiagram.getNotationViewFactoriesPackageName());
d11 1
@


1.31
log
@#133836 Creating a child node without a label causes error
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
d20 5
a24 1
boolean isFlowLayout = isCompartment && !((GenCompartment) genElement).getNode().isListLayout();
d113 1
a113 1
<%if (isFlowLayout) {%>
@


1.30
log
@#138341 Show all child elements in element shortcutted to the diagram of other domain
@
text
@a19 1
boolean isLeaf = genElement instanceof GenNode &&  ((GenNode) genElement).isListContainerEntry();
d29 1
a29 1
<%} else if (isLeaf) {%>
d80 3
a82 4
	if (!isLeaf) {
		List labels = genNode.getLabels();
		for (int j = 0; j < labels.size(); j++) {
			GenNodeLabel label = (GenNodeLabel) labels.get(j);
a86 1
		}
@


1.29
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d63 1
@


1.28
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d55 1
a55 1
			semanticHint = <%=genElement.getEditPartQualifiedClassName()%>.VISUAL_ID;
d85 1
a85 1
		getViewService().createNode(semanticAdapter, view, <%=importManager.getImportedName(label.getEditPartQualifiedClassName())%>.VISUAL_ID,
d94 1
a94 1
		getViewService().createNode(semanticAdapter, view, <%=importManager.getImportedName(genChildContainer.getEditPartQualifiedClassName())%>.VISUAL_ID,
d104 1
a104 1
		getViewService().createNode(semanticAdapter, view, <%=importManager.getImportedName(label.getEditPartQualifiedClassName())%>.VISUAL_ID,
@


1.27
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d8 8
a15 7
<%ImportUtil importManager = new ImportUtil(genDiagram.getNotationViewFactoriesPackageName());%>
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.gmf.runtime.notation.View;
<%importManager.markImportLocation(stringBuffer);%>
<%
d54 4
d59 5
d66 1
a66 3
%>
<%@@ include file="createVIDAnnotation.jetinc"%>
<%
@


1.26
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@a74 1
			String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
a75 1
			String labelViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();
d77 1
a77 1
		getViewService().createNode(semanticAdapter, view, <%=labelViewId%>,
a83 1
		String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
a84 1
		String compartmentViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Compartments." + genChildContainer.getSemanticHintFieldName();
d86 1
a86 1
		getViewService().createNode(semanticAdapter, view, <%=compartmentViewId%>,
a93 1
		String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
a94 1
		String labelViewId = semanticHintsClassName + '.' + genLink.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();
d96 1
a96 1
		getViewService().createNode(semanticAdapter, view, <%=labelViewId%>,
a99 5
	if (genLink.getModelFacet() instanceof FeatureModelFacet || genLink.getModelFacet() == null) {
%>
		view.setType(<%=importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName())%>.<%=genLink.getUniqueIdentifier()%>);
<%
	}
@


1.25
log
@respect measurement units during diagram ViewFactory code generation
@
text
@a19 1

d77 1
a77 6
			String labelViewId;
			if (label instanceof ExternalLabel) {
				labelViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Labels." + ((ExternalLabel) label).getSemanticHintLabelFieldName();
			} else {
				labelViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();
			}
d88 1
a88 1
		String compartmentId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Compartments." + genChildContainer.getSemanticHintFieldName();
d90 1
a90 1
		getViewService().createNode(semanticAdapter, view, <%=compartmentId%>,
d100 1
a100 1
		String labelViewId = semanticHintsClassName + '.' + genLink.getUniqueIdentifier() + "Labels." + label.getSemanticHintLabelFieldName();
@


1.24
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d151 8
@


1.23
log
@#114175 for links
@
text
@d5 1
@


1.22
log
@#130014 Diagram elements created by CanonicalEditPolicy should not disappear on diagram reopenning
@
text
@d109 3
a111 2
<%	}
	if (genLink.getModelFacet() instanceof FeatureModelFacet) {
d119 1
a119 3
<%	
if (isFlowLayout) {
%>
d149 1
a149 3
<%
}
%>
@


1.21
log
@Using import manager to avoid name clashes with other classes in the same package.
@
text
@d85 1
a85 1
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, persisted, getPreferencesHint());
d96 1
a96 1
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, persisted, getPreferencesHint());
d108 1
a108 1
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil")%>.APPEND, persisted, getPreferencesHint());
@


1.20
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@a10 1
import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;
d28 1
a28 1
	ConnectionViewFactory
d30 1
a30 1
	AbstractLabelViewFactory
d32 1
a32 1
    ListCompartmentViewFactory
d34 1
a34 1
	DiagramViewFactory
d36 1
a36 1
	AbstractShapeViewFactory
@


1.19
log
@ImportManager moved to oeg.common
@
text
@d3 1
a3 1
<%GenCommonBase genElement = (GenCommonBase) argument;%>
@


1.18
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.17
log
@#122054 support external node labels (partial fix)
@
text
@a17 1
boolean isLeaf = genElement instanceof GenChildNode &&  ((GenChildNode) genElement).isListContainerEntry();
d19 1
d21 1
a21 1
boolean isFlowLayout = isCompartment ? ((GenCompartment) genElement).getNode().getChildContainersPlacement() == CompartmentPlacementKind.FLOW_LITERAL : false;
@


1.16
log
@#121581
Fields for the compartments are named unique.
@
text
@d78 6
a83 1
			String labelTextViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();
d85 1
a85 1
		getViewService().createNode(semanticAdapter, view, <%=labelTextViewId%>,
@


1.15
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@d78 1
a78 1
			String labelTextViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Labels." + AccessUtil.getLabelTextId(label);
d89 1
a89 1
		String compartmentId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Compartments." + AccessUtil.getCompartmentId(genChildContainer);
d101 1
a101 1
		String labelViewId = semanticHintsClassName + '.' + genLink.getUniqueIdentifier() + "Labels." + AccessUtil.getLabelId(label);
@


1.14
log
@Removing source code audit violations
@
text
@d20 2
d114 35
@


1.13
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d70 1
a70 2
	}
	String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
d74 1
d85 1
a94 1
	String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
d97 1
@


1.12
log
@#116798 create distinct package for the view factories
@
text
@d14 7
d26 1
a26 1
<%if (genElement instanceof GenLink) {%>
d28 1
a28 1
<%} else if (genElement instanceof GenChildNode) {%>
d30 1
a30 1
<%} else if (genElement instanceof GenCompartment) {%>
d32 1
a32 1
<%} else if (genElement instanceof GenDiagram) {%>    
d43 1
a43 1
if (genElement instanceof GenDiagram) {
d64 1
a64 1
if (genElement instanceof GenNode) {
d72 1
a72 1
	if (!(genNode instanceof GenChildNode)) {
d92 1
a92 1
} else if (genElement instanceof GenLink) {
@


1.11
log
@#115972 generate single class with semantic hints
@
text
@d5 1
a5 1
package <%=genDiagram.getProvidersPackageName()%>;
d7 1
a7 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
@


1.10
log
@[ashatalin] #115107 remove uses of deprecated runtime code in templates
@
text
@d64 1
a64 2
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d69 1
a69 1
			String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelTextId(label);
d79 1
a79 1
		String compartmentId = semanticHintsClassName + ".Compartments." + AccessUtil.getCompartmentId(genChildContainer);
d87 1
a87 2
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genLink);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d91 1
a91 1
		String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelId(label);
d98 1
a98 1
		view.setType(<%=AccessUtil.getSemanticHintsClassName(genLink)%>.VIEW_TYPE);
@


1.9
log
@[ashatalin] #114750 annotate diagram runtime model elements with visual id to tell one from another during EP decision making
@
text
@a8 1
import org.eclipse.draw2d.ColorConstants;
a10 1
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
a11 2
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
import org.eclipse.gmf.runtime.notation.NotationPackage;
d20 1
a20 1
	ConnectorViewFactory
d53 2
a54 2
		ViewUtil.setStructuralFeatureValue(view, NotationPackage.eINSTANCE.getLineStyle_LineColor(),
			FigureUtilities.colorToInteger(ColorConstants.<%=colorAttrs.getForegroundColor()%>));
d60 2
a61 2
		ViewUtil.setStructuralFeatureValue(view, NotationPackage.eINSTANCE.getFillStyle_FillColor(),
			FigureUtilities.colorToInteger(ColorConstants.<%=colorAttrs.getBackgroundColor()%>));
d73 1
a73 1
			ViewUtil.APPEND, persisted, getPreferencesHint());
d83 1
a83 1
			ViewUtil.APPEND, persisted, getPreferencesHint());
d96 1
a96 1
			ViewUtil.APPEND, persisted, getPreferencesHint());
@


1.8
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d10 2
d27 4
d39 8
d48 1
a48 1
		String semanticHint, int index, boolean persisted) {
d51 4
@


1.7
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@d63 1
a63 1
	List genChildContainers = genNode.getChildContainers();
d65 1
a65 1
		GenChildContainer genChildContainer = (GenChildContainer) genChildContainers.get(j);
@


1.6
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d3 1
a3 1
<%GenBaseElement genElement = (GenBaseElement) argument;%>
@


1.5
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d84 1
a84 1
	if (genLink instanceof GenLinkReferenceOnly) {
@


1.4
log
@[dstadnik] #112174 and #112185 - constants for compartments and labels
@
text
@d50 2
d53 6
a58 3
		if (genElement.hasNameToEdit()) {%>
		getViewService().createNode(semanticAdapter, view,
			<%=AccessUtil.getSemanticHintsClassName(genElement)%>.<%=AccessUtil.getNameSemanticHint(genElement)%>,
d62 5
a66 6
		String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
		List genChildContainers = genNode.getChildContainers();
		for (int j = 0; j < genChildContainers.size(); j++) {
			GenChildContainer genChildContainer = (GenChildContainer) genChildContainers.get(j);
			String compartmentId = semanticHintsClassName + ".Compartments." + AccessUtil.getCompartmentId(genChildContainer);
a70 1
		}
d72 1
a72 2
}
if (genElement instanceof GenLink) {
d78 2
a79 2
		LinkLabel label = (LinkLabel) labels.get(j);
		String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLinkLabelId(label);
@


1.3
log
@[dstadnik] #112176 support references w/o domain class
@
text
@d57 2
d62 1
d64 1
a64 1
		getViewService().createNode(semanticAdapter, view, "<%=genChildContainer.getGroupID()%>",
d72 2
d77 1
d79 1
a79 1
		getViewService().createNode(semanticAdapter, view, "<%=AccessUtil.getLinkLabelViewName(label)%>",
@


1.2
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@d75 4
@


1.1
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d37 1
a37 1
ColorAttributes colorAttrs = (ColorAttributes) genElement.getViewmap().find(ColorAttributes.class);
@

