head	1.17;
access;
symbols
	v20081022-1925:1.17
	v20081015-1925:1.17
	v20081008-1925:1.17
	v20081001-1925:1.17
	v20080924-1925:1.17
	v20080917-1925:1.17
	v20080911-1728:1.17
	v20080910-1520:1.17
	v20080903-1520:1.17
	v20080827-1520:1.17
	v20080813-1520:1.17
	v20080806-1520:1.17
	v20070420-1000:1.16
	v20070413-1300:1.15
	v20070405-1100:1.15
	v20070403-1500:1.15
	v20070330-1300:1.15
	v20060330-1300:1.15
	v20070322-1100:1.15
	v20060316-0600:1.15
	v20070307-0700:1.15
	v20070301-1200:1.15
	v20070228-2000:1.15
	v20070221-1500:1.15
	v20070208-1800:1.15
	v20070202-0200:1.14
	v20070103-0300:1.15
	M4_20:1.15
	v20061222-1800:1.15
	v20061218-1200:1.15
	v20061214-0000:1.15
	v20061120-1300:1.15
	M3_20:1.15
	v20061117-0800:1.15
	v20061027-1200:1.14
	v20061020-1000:1.14
	v20061013-1330:1.15
	v20060919-0800:1.14
	v20060907-1100:1.14
	M1_20:1.15
	v20060904-1500:1.15
	v20060824-1600:1.14
	v20060817-1500:1.14
	v20060728-0500:1.14
	v20060713-1700:1.14
	R1_0_maintenance:1.14.0.2
	R1_0:1.14
	v20060627-1200:1.14
	v20060626-1420:1.14
	v20060620-0400:1.14
	v20060616-1400:1.14
	v20060616-1200:1.14
	v20060609-1400:1.14
	v20060531-1730:1.13
	v20060530-1930:1.13
	v20060526-1200:1.13
	v20060519-1300:1.13
	v20060519-0800:1.13
	v20060512-1000:1.12
	I20060512-1000:1.12
	I20060505-1400:1.12
	I20060428-1300:1.12
	I20060424-0500:1.12
	I20060424-0300:1.12
	M6_10:1.12
	I20060407-1200:1.12
	I20060331-1000:1.12
	I20060324-0300:1.12
	I20060317-1300:1.12
	I20060317-1200:1.12
	I20060316-1300:1.12
	I20060309-1300:1.12
	M5_10:1.11
	S20060303-1600:1.11
	I20060227-1730:1.11
	I20060216-1945:1.11
	I20060210-1715:1.9
	I20060209-1815:1.9
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.17
date	2007.04.27.08.53.39;	author dstadnik;	state dead;
branches;
next	1.16;
commitid	30cb4631ba124567;

1.16
date	2007.04.17.10.12.45;	author dstadnik;	state Exp;
branches;
next	1.15;
commitid	495e46249d9c4567;

1.15
date	2006.07.05.12.57.33;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.15.13.27.40;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.14.13.06.38;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.06.11.34.23;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.01.11.04.26;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.31.11.00.48;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.30.18.26.46;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.17
log
@rewrite StructuralFeatureParser in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.providers" class="StructuralFeatureParserGenerator"
  imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.text.FieldPosition;
import java.text.MessageFormat;
import java.util.Collections;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getStructuralFeatureParserClassName()%> extends <%=importManager.getImportedName(genDiagram.getAbstractParserQualifiedClassName())%> {

	/**
	 * @@generated
	 */
	public static final MessageFormat DEFAULT_PROCESSOR = new MessageFormat("{0}"); //$NON-NLS-1$

	/**
	 * @@generated
	 */
	private EStructuralFeature feature;

	/**
	 * @@generated
	 */
	public <%=genDiagram.getStructuralFeatureParserClassName()%>(EStructuralFeature feature) {
		this.feature = feature;
	}

	/**
	 * @@generated
	 */
	protected MessageFormat getViewProcessor() {
		MessageFormat processor = super.getViewProcessor();
		return processor == null ? DEFAULT_PROCESSOR : processor;
	}

	/**
	 * @@generated
	 */
	protected MessageFormat getEditProcessor() {
		MessageFormat processor = super.getEditProcessor();
		return processor == null ? DEFAULT_PROCESSOR : processor;
	}

	/**
	 * @@generated
	 */
	protected EObject getDomainElement(EObject element) {
		return element;
	}

	/**
	 * @@generated
	 */
	protected String getStringByPattern(IAdaptable adapter, int flags, String pattern, MessageFormat processor) {
		EObject element = (EObject) adapter.getAdapter(EObject.class);
		element = getDomainElement(element);
		return getStringByPattern(element, feature, processor);
	}

	/**
	 * @@generated
	 */
	protected String getStringByPattern(EObject element, EStructuralFeature feature, MessageFormat processor) {
		Object value = element == null ? null : element.eGet(feature);
		value = getValidValue(feature, value);
		return processor.format(new Object[] { value }, new StringBuffer(), new FieldPosition(0)).toString();
	}

	/**
	 * @@generated
	 */
	protected IParserEditStatus validateNewValues(Object[] values) {
		if (values.length > 1) {
			return ParserEditStatus.UNEDITABLE_STATUS;
		}
		Object value = values.length == 1 ? values[0] : null;
		value = getValidNewValue(feature, value);
		if (value instanceof InvalidValue) {
			return new ParserEditStatus(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.ID,
				IParserEditStatus.UNEDITABLE, value.toString());
		}
		return ParserEditStatus.EDITABLE_STATUS;
	}

	/**
	 * @@generated
	 */
	public ICommand getParseCommand(IAdaptable adapter, Object[] values) {
		EObject element = (EObject) adapter.getAdapter(EObject.class);
		element = getDomainElement(element);
		if (element == null) {
			return UnexecutableCommand.INSTANCE;
		}
		TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(element);
		if (editingDomain == null) {
			return UnexecutableCommand.INSTANCE;
		}
		Object value = values.length == 1 ? values[0] : null;
		ICommand command = getModificationCommand(element, feature, value);
		return new CompositeTransactionalCommand(editingDomain, command.getLabel(), Collections.singletonList(command));
	}

	/**
	 * @@generated
	 */
	public boolean isAffectingEvent(Object event, int flags) {
		if (event instanceof Notification) {
			return isAffectingFeature(((Notification) event).getFeature());
		}
		return false;
	}

	/**
	 * @@generated
	 */
	protected boolean isAffectingFeature(Object eventFeature) {
		return feature == eventFeature;
	}
}
<%importManager.emitSortedImports();%>
@


1.16
log
@override correct methods
@
text
@@


1.15
log
@refactor so clients may extend it easily
@
text
@d93 1
a93 1
	protected IParserEditStatus validateValues(Object[] values) {
@


1.14
log
@fix some nls markers
@
text
@d35 1
a35 1
	private static final MessageFormat DEFAULT_PROCESSOR = new MessageFormat("{0}"); //$NON-NLS-1$
d68 7
d77 9
a85 1
		Object value = element.eGet(feature);
d111 1
d129 1
a129 3
			if (feature == ((Notification) event).getFeature()) {
				return true;
			}
d133 7
@


1.13
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d35 1
a35 1
	private static final MessageFormat DEFAULT_PROCESSOR = new MessageFormat("{0}");
@


1.12
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d3 4
a6 1
<%GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];%>
d8 1
a8 1
package <%=genDiagram.getProvidersPackageName()%>;
a9 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
@


1.11
log
@get editing domain from eobject
@
text
@d4 1
@


1.10
log
@use new transactional emf api
@
text
@d15 2
d18 1
d93 7
d102 1
a102 1
		return new CompositeTransactionalCommand(getEditingDomain(), command.getLabel(), Collections.singletonList(command));
@


1.9
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d18 1
a18 1
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;
d92 1
a92 1
		return new CompositeModelCommand(command.getLabel(), Collections.singletonList(command));
@


1.8
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d3 1
a3 1
<%GenDiagram genDiagram = (GenDiagram) argument;%>
@


1.7
log
@do not show 'null' for strings when they are not set in model
@
text
@d79 1
a79 1
			return new ParserEditStatus(<%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.ID,
@


1.6
log
@ImportManager moved to oeg.common
@
text
@d65 1
@


1.5
log
@#121534 Support link labels based on attributes that are not strings
@
text
@d2 1
a2 1
  imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.4
log
@#125729 Support labels based on multiple structural features
@
text
@d71 11
a81 2
	protected IParserEditStatus validateNewValues(Object[] values) {
		return values.length == 1 ? ParserEditStatus.EDITABLE_STATUS : ParserEditStatus.UNEDITABLE_STATUS;
d87 1
a87 1
	public ICommand getParseCommand(IAdaptable adapter, Object[] newValues) {
d89 2
a90 1
		ICommand command = getModificationCommand(element, feature, newValues[0]);
@


1.3
log
@#125729 Support labels based on multiple structural features
@
text
@d7 1
d9 1
a15 1
import org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand;
d18 1
a18 2
import org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;
d29 5
d46 17
a62 1
	protected String getStringByPattern(IAdaptable adapter, int flags, String pattern) {
d65 1
a65 4
		if (pattern == null) {
			pattern = "{0}";
		}
		return MessageFormat.format(pattern, new Object[] { value });
d71 2
a72 2
	public IParserEditStatus isValidEditString(IAdaptable element, String editString) {
		return ParserEditStatus.EDITABLE_STATUS;
d78 1
a78 1
	public ICommand getParseCommand(IAdaptable adapter, String newString, int flags) {
d80 2
a81 10
		String pattern = getEditPattern();
		if (pattern == null) {
			pattern = "{0}";
		}
		Object[] values = getValuesFromEditString(newString, pattern);
		if (values.length != 1) {
			return UnexecutableCommand.INSTANCE;
		}
		SetRequest request = new SetRequest(element, feature, values[0]);
		return getModelCommand(new SetValueCommand(request));
@


1.2
log
@#116031 avoid hardcoded class names in templates
@
text
@d2 1
a2 1
  imports="org.eclipse.gmf.codegen.gmfgen.*"%>
d6 3
a9 1
import org.eclipse.core.runtime.IProgressMonitor;
a12 1
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
d14 1
a14 1
import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
a16 1
import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;
d19 1
a19 1
import org.eclipse.jface.text.contentassist.IContentAssistProcessor;
d24 1
a24 1
public class <%=genDiagram.getStructuralFeatureParserClassName()%> implements IParser {
d41 1
a41 18
	public ICommand getParseCommand(IAdaptable adapter, String newString, int flags) {
		EObject element = (EObject) adapter.getAdapter(EObject.class);
		SetRequest request = new SetRequest(element, feature, newString);
		final SetValueCommand actualCommand = new SetValueCommand(request);
		String label = feature.getName();
		return new AbstractModelCommand(label, actualCommand.getAffectedObjects()) {

			protected CommandResult doExecute(IProgressMonitor progressMonitor) {
				actualCommand.execute(progressMonitor);
				return actualCommand.getCommandResult();
			}
		};
	}

	/**
	 * @@generated
	 */
	public String getPrintString(IAdaptable adapter, int flags) {
d44 2
a45 5
		if (value != null) {
			String literalValue = value.toString();
			if (literalValue.length() > 0) {
				return literalValue;
			}
d47 1
a47 1
		return getDefaultValue();
d53 2
a54 6
	protected String getDefaultValue() {
		String defaultValue = feature.getDefaultValueLiteral();
		if (defaultValue == null) {
			defaultValue = ""; //$NON-NLS-1$
		}
		return defaultValue;
d60 12
a71 9
	public String getEditString(IAdaptable adapter, int flags) {
		return getPrintString(adapter, flags);
	}

	/**
	 * @@generated
	 */
	public IParserEditStatus isValidEditString(IAdaptable element, String editString) {
		return ParserEditStatus.EDITABLE_STATUS;
a84 7

	/**
	 * @@generated
	 */
	public IContentAssistProcessor getCompletionProcessor(IAdaptable element) {
		return null;
	}
d86 1
@


1.1
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d24 1
a24 1
public class StructuralFeatureParser implements IParser {
d34 1
a34 1
	public StructuralFeatureParser(EStructuralFeature feature) {
@

