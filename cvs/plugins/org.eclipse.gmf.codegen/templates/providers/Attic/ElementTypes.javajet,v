head	1.55;
access;
symbols
	v20081022-1925:1.55
	v20081015-1925:1.55
	v20081008-1925:1.55
	v20081001-1925:1.55
	v20080924-1925:1.55
	v20080917-1925:1.55
	v20080911-1728:1.55
	v20080910-1520:1.55
	v20080903-1520:1.55
	v20080827-1520:1.55
	v20080813-1520:1.55
	v20080806-1520:1.55
	v20070202-0200:1.48
	v20061218-1200:1.54
	v20061214-0000:1.54
	v20061120-1300:1.54
	M3_20:1.54
	v20061117-0800:1.54
	v20061027-1200:1.48
	v20061020-1000:1.48
	v20061013-1330:1.51
	v20060919-0800:1.48
	v20060907-1100:1.48
	M1_20:1.48
	v20060904-1500:1.48
	v20060824-1600:1.48
	v20060817-1500:1.48
	v20060728-0500:1.48
	v20060713-1700:1.48
	R1_0_maintenance:1.48.0.2
	R1_0:1.48
	v20060627-1200:1.48
	v20060626-1420:1.48
	v20060620-0400:1.48
	v20060616-1400:1.48
	v20060616-1200:1.48
	v20060609-1400:1.48
	v20060531-1730:1.46
	v20060530-1930:1.45
	v20060526-1200:1.42
	v20060519-1300:1.39
	v20060519-0800:1.39
	v20060512-1000:1.38
	I20060512-1000:1.38
	I20060505-1400:1.38
	I20060428-1300:1.38
	I20060424-0500:1.38
	I20060424-0300:1.38
	M6_10:1.36
	I20060407-1200:1.32
	I20060331-1000:1.30
	I20060324-0300:1.30
	I20060317-1300:1.30
	I20060317-1200:1.30
	I20060316-1300:1.30
	I20060309-1300:1.30
	M5_10:1.29
	S20060303-1600:1.29
	I20060227-1730:1.28
	I20060216-1945:1.27
	I20060210-1715:1.25
	I20060209-1815:1.25
	I20060203-0830:1.22
	I20060202-1415:1.22
	I20060129-1145:1.21
	I20060127-0900:1.21
	I20060120-1530:1.18
	I20060113-1700:1.18
	M4_10:1.18
	I20060107-1100:1.18
	I20060105-1630:1.18
	I20051230-1230:1.18
	I20051223-1100:1.18
	I20051217-0925:1.18
	I20051208-2000:1.18
	I20051201-1800:1.18
	I20051124-2000:1.18
	M3_10:1.18
	I20051118-1245:1.18
	I20051111-1800:1.16
	I20051106-0900:1.12
	v20051030:1.12;
locks; strict;
comment	@# @;
expand	@k@;


1.55
date	2006.12.20.02.16.53;	author dstadnik;	state dead;
branches;
next	1.54;
commitid	1ea745889d114567;

1.54
date	2006.11.09.13.03.02;	author radvorak;	state Exp;
branches;
next	1.53;

1.53
date	2006.10.18.14.21.46;	author dstadnik;	state Exp;
branches;
next	1.52;

1.52
date	2006.10.16.11.20.20;	author radvorak;	state Exp;
branches;
next	1.51;

1.51
date	2006.10.05.12.26.13;	author radvorak;	state Exp;
branches;
next	1.50;

1.50
date	2006.09.28.16.23.07;	author radvorak;	state Exp;
branches;
next	1.49;

1.49
date	2006.09.26.17.55.56;	author radvorak;	state Exp;
branches;
next	1.48;

1.48
date	2006.06.05.21.08.38;	author radvorak;	state Exp;
branches;
next	1.47;

1.47
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.46;

1.46
date	2006.05.31.14.15.57;	author dstadnik;	state Exp;
branches;
next	1.45;

1.45
date	2006.05.30.15.28.05;	author radvorak;	state Exp;
branches;
next	1.44;

1.44
date	2006.05.29.20.07.49;	author radvorak;	state Exp;
branches;
next	1.43;

1.43
date	2006.05.29.13.55.19;	author dstadnik;	state Exp;
branches;
next	1.42;

1.42
date	2006.05.25.10.40.09;	author atikhomirov;	state Exp;
branches;
next	1.41;

1.41
date	2006.05.25.09.35.12;	author dstadnik;	state Exp;
branches;
next	1.40;

1.40
date	2006.05.24.16.22.38;	author radvorak;	state Exp;
branches;
next	1.39;

1.39
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.38;

1.38
date	2006.04.21.14.07.11;	author radvorak;	state Exp;
branches;
next	1.37;

1.37
date	2006.04.20.10.37.28;	author radvorak;	state Exp;
branches;
next	1.36;

1.36
date	2006.04.13.13.43.20;	author dstadnik;	state Exp;
branches;
next	1.35;

1.35
date	2006.04.12.08.48.33;	author dstadnik;	state Exp;
branches;
next	1.34;

1.34
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.33;

1.33
date	2006.04.08.11.30.05;	author dstadnik;	state Exp;
branches;
next	1.32;

1.32
date	2006.04.04.11.00.59;	author ashatalin;	state Exp;
branches;
next	1.31;

1.31
date	2006.04.03.12.52.47;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.03.13.22.36;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2006.02.17.12.02.06;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.02.15.18.48.05;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.02.14.11.26.51;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.23;

1.23
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2006.01.31.19.02.07;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.01.26.17.36.59;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2006.01.26.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.01.26.12.24.07;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.15.12.02.37;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2005.11.10.18.32.55;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.09.13.20.23;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2005.11.07.15.41.03;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.26.18.43.48;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.25.18.28.41;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.24.16.47.40;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.24.14.58.45;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.20.16.33.30;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.20.16.04.34;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.19.13.51.49;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.14.12.17.18;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.06.16.03.15;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.55
log
@rewrite element types in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.providers" class="ElementTypesGenerator"
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%
importManager.registerInnerClass("Initializers");
importManager.registerInnerClass("IObjectInitializer");
importManager.registerInnerClass("ObjectInitializer");
importManager.registerInnerClass("IFeatureInitializer");
final String javaExprContainer = "Java";
importManager.registerInnerClass(javaExprContainer);
%>

import java.util.HashSet;
import java.util.IdentityHashMap;
import java.util.Map;
import java.util.Set;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.swt.graphics.Image;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getElementTypesClassName()%> {

	/**
	 * @@generated
	 */
	private <%=genDiagram.getElementTypesClassName()%>() {}

	/**
	 * @@generated
	 */
	private static Map elements;

	/**
	 * @@generated
	 */
	private static ImageRegistry imageRegistry;

	/**
	 * @@generated
	 */
	private static ImageRegistry getImageRegistry() {
		if (imageRegistry == null) {
			imageRegistry = new ImageRegistry();
		}
		return imageRegistry;
	}

	/**
	 * @@generated
	 */
	private static String getImageRegistryKey(ENamedElement element) {
		return element.getName();
	}

	/**
	 * @@generated
	 */
	private static ImageDescriptor getProvidedImageDescriptor(ENamedElement element) {
		if (element instanceof EStructuralFeature) {
			element = ((EStructuralFeature) element).getEContainingClass();
		}
		if (element instanceof EClass) {
<%String pluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());%>
			EClass eClass = (EClass) element;
			if (!eClass.isAbstract()) {
				return <%=pluginClassName%>.getInstance().getItemImageDescriptor(eClass.getEPackage().getEFactoryInstance().create(eClass));
			}
		}
		// TODO : support structural features
		return null;
	}

	/**
	 * @@generated
	 */
	public static ImageDescriptor getImageDescriptor(ENamedElement element) {
		String key = getImageRegistryKey(element);
		ImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);
		if (imageDescriptor == null) {
			imageDescriptor = getProvidedImageDescriptor(element);
			if (imageDescriptor == null) {
				imageDescriptor = ImageDescriptor.getMissingImageDescriptor();
			}
			getImageRegistry().put(key, imageDescriptor);
		}
		return imageDescriptor;
	}

	/**
	 * @@generated
	 */
	public static Image getImage(ENamedElement element) {
		String key = getImageRegistryKey(element);
		Image image = getImageRegistry().get(key);
		if (image == null) {
			ImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);
			if (imageDescriptor == null) {
				imageDescriptor = ImageDescriptor.getMissingImageDescriptor();
			}
			getImageRegistry().put(key, imageDescriptor);
			image = getImageRegistry().get(key);
		}
		return image;
	}

	/**
	 * @@generated
	 */
	public static ImageDescriptor getImageDescriptor(IAdaptable hint) {
		ENamedElement element = getElement(hint);
		if (element == null) {
			return null;
		}
		return getImageDescriptor(element);
	}

	/**
	 * @@generated
	 */
	public static Image getImage(IAdaptable hint) {
		ENamedElement element = getElement(hint);
		if (element == null) {
			return null;
		}
		return getImage(element);
	}

	/**
	 * Returns 'type' of the ecore object associated with the hint.
	 * 
	 * @@generated
	 */
	public static ENamedElement getElement(IAdaptable hint) {
		Object type = hint.getAdapter(IElementType.class);
		if (elements == null) {
			elements = new IdentityHashMap();
<%
GenClass diagramElement = genDiagram.getDomainDiagramElement();
if (diagramElement != null) {
	String semanticPackageInterfaceName = importManager.getImportedName(diagramElement.getGenPackage().getQualifiedPackageInterfaceName());
%>
			elements.put(<%=genDiagram.getUniqueIdentifier()%>, <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=diagramElement.getClassifierAccessorName()%>());
<%
}
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	String id = null;
	ModelFacet modelFacet = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		modelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink) {
		id = ((GenLink) next).getUniqueIdentifier();
		modelFacet = ((GenLink) next).getModelFacet();
	}
	if (modelFacet instanceof TypeModelFacet) {
		GenClass metaClass = ((TypeModelFacet) modelFacet).getMetaClass();
		String semanticPackageInterfaceName = importManager.getImportedName(metaClass.getGenPackage().getQualifiedPackageInterfaceName());
%>
			elements.put(<%=id%>, <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=metaClass.getClassifierAccessorName()%>());
<%
	} else if (modelFacet instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) modelFacet).getMetaFeature();
		String semanticPackageInterfaceName = importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName());
%>
			elements.put(<%=id%>, <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>());
<%
	}
}
%>
		}
		return (ENamedElement) elements.get(type);
	}

<%
int elementInitializerCount = 0;
List elements = new LinkedList();
if (genDiagram.getElementType() != null) {
	elements.add(genDiagram);
}
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	GenCommonBase genElement;
	TypeModelFacet typeModelFacet = null;
	if (next instanceof GenNode) {
		genElement = (GenCommonBase) next;
		typeModelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink) {
		genElement = (GenCommonBase) next;
		ModelFacet modelFacet = ((GenLink) next).getModelFacet();
		if (modelFacet instanceof TypeLinkModelFacet) {
			typeModelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
		}
	} else {
		continue;
	}
	if (typeModelFacet != null && typeModelFacet.getModelElementInitializer() != null) {
		elementInitializerCount++;
	}
	if (genElement.getElementType() != null) {
		elements.add(genElement);
	}
}
for (Iterator it = elements.iterator(); it.hasNext(); ) {
	GenCommonBase genElement = (GenCommonBase) it.next();
%>

	/**
	 * @@generated
	 */
	public static final IElementType <%=genElement.getUniqueIdentifier()%> = getElementType("<%=genElement.getElementType().getUniqueIdentifier()%>"); //$NON-NLS-1$
<%}%>

	/**
	 * @@generated
	 */
	private static IElementType getElementType(String id) {
		return ElementTypeRegistry.getInstance().getType(id);
	}

	/**
	 * @@generated
	 */
	private static Set KNOWN_ELEMENT_TYPES;

	/**
	 * @@generated
	 */
	public static boolean isKnownElementType(IElementType elementType) {
		if (KNOWN_ELEMENT_TYPES == null) {
			KNOWN_ELEMENT_TYPES = new HashSet();
<%
for (Iterator it = elements.iterator(); it.hasNext(); ) {
	GenCommonBase genElement = (GenCommonBase) it.next();
%>
			KNOWN_ELEMENT_TYPES.add(<%=genElement.getUniqueIdentifier()%>);
<%}%>
		}
		return KNOWN_ELEMENT_TYPES.contains(elementType);
	}
<%
if(elementInitializerCount > 0 && genDiagram.getEditorGen().getExpressionProviders() != null) {
	final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
	final LinkedHashSet<GenFeatureValueSpec> javaInitializers = new LinkedHashSet<GenFeatureValueSpec>();
	final String __javaOperationContainer = javaExprContainer; // place java expression methods here
	final Map __exprEnvVariables = Collections.EMPTY_MAP;
%>

	/**
	 * @@generated
	 */
	public static class Initializers {
<%
for (Map.Entry<TypeModelFacet, GenCommonBase> next : genDiagram.getTypeModelFacet2GenBaseMap().entrySet()) {
	TypeModelFacet modelFacet = next.getKey();
	if (modelFacet.getModelElementInitializer() instanceof GenFeatureSeqInitializer) {
		GenFeatureSeqInitializer rootFtSeqInitializer = (GenFeatureSeqInitializer)modelFacet.getModelElementInitializer();				
		javaInitializers.addAll(rootFtSeqInitializer.getJavaExpressionFeatureInitializers(expressionProviders));
		String id = next.getValue().getUniqueIdentifier();
		for(GenFeatureSeqInitializer nextFtSeqInitializer : rootFtSeqInitializer.getAllFeatureSeqInitializers()) {
			boolean isTopLevelObjInit = nextFtSeqInitializer == rootFtSeqInitializer;
%>		
<%			if(isTopLevelObjInit){%>
		/**
		 * @@generated
		 */
		public static final IObjectInitializer <%=nextFtSeqInitializer.getInitializerFieldName(id)%> = new ObjectInitializer(<%=nextFtSeqInitializer.getElementClassAccessor(importManager)%>) {
<%			} else {%>
		ObjectInitializer <%=nextFtSeqInitializer.getInitializerFieldName(id)%>() {
			return new ObjectInitializer(<%=nextFtSeqInitializer.getElementClassAccessor(importManager)%>) {
<%			} %>
		 	protected void init() {				
<%			for(GenFeatureInitializer nextFtInitializer : (List<GenFeatureInitializer>)nextFtSeqInitializer.getInitializers()) {
				String metaFeatureAccessor = nextFtSeqInitializer.getFeatureAccessor(nextFtInitializer, importManager);
				if(nextFtInitializer instanceof GenReferenceNewElementSpec) {
					GenReferenceNewElementSpec newElementSpec = (GenReferenceNewElementSpec)nextFtInitializer;
%>			
				add(createNewElementFeatureInitializer(<%=metaFeatureAccessor%>, new ObjectInitializer[] {
<%					for(GenFeatureSeqInitializer newElemInit : (List<GenFeatureSeqInitializer>)newElementSpec.getNewElementInitializers()) { %>
					<%=newElemInit.getInitializerFieldName(id)%>(), 
<%					} // end of newElementInitializers %>
				}));
<%				} // end of GenReferenceNewElementSpec
				else if(nextFtInitializer instanceof GenFeatureValueSpec) {
					String __outEnvVarName = ""; // no env to setup;
					GenClassifier __genExprContext = nextFtSeqInitializer.getElementClass();
					GenFeatureValueSpec __genValueExpression = (GenFeatureValueSpec)nextFtInitializer;
%>			
				add(createExpressionFeatureInitializer(<%=metaFeatureAccessor%>, <%@@ include file="../expressions/getExpression.jetinc"%>));
<%
				} // end of GenFeatureValueSpec
			} // end of GenFeatureInitializer iteration
%>			}
<%			if(!isTopLevelObjInit) { %>
				}; // <%=nextFtSeqInitializer.getInitializerFieldName(id)%> ObjectInitializer
			}
<%			} // GenFeatureInitializer iteration
		} // All GenFeatureSeqInitializer iteration
%>
		}; // <%=rootFtSeqInitializer.getInitializerFieldName(id)%> ObjectInitializer
<%
	} // (modelFacet.getModelElementInitializer() instanceof GenFeatureSeqInitializer)
}
%>
	
		/** 
		 * @@generated
		 */	
		private Initializers() {
		}
		
		/** 
		 * @@generated
		 */		
		public static interface IObjectInitializer {
			/** 
			 * @@generated
			 */		
			public void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> instance);
		}
		
		/** 
		 * @@generated
		 */	
		public static abstract class ObjectInitializer implements IObjectInitializer {
			/** 
			 * @@generated
			 */		
			final EClass element;		
			/** 
			 * @@generated
			 */		
			private <%=importManager.getImportedName("java.util.List")%> featureInitializers = new <%=importManager.getImportedName("java.util.ArrayList")%>();
			/** 
			 * @@generated
			 */
			ObjectInitializer(EClass element) {
				this.element = element;
				init();
			}
			/**
		 	 * @@generated
		 	 */
		 	protected abstract void init();							
			/** 
			 * @@generated
			 */
			protected final IFeatureInitializer add(IFeatureInitializer initializer) {
				featureInitializers.add(initializer);
				return initializer;
			}
			/** 
			 * @@generated
			 */		
			public void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> instance) {
				for (java.util.Iterator it = featureInitializers.iterator(); it.hasNext();) {
					IFeatureInitializer nextExpr = (IFeatureInitializer)it.next();
					try {
						nextExpr.init(instance);
					} catch(RuntimeException e) {
						<%=pluginClassName%>.getInstance().logError("Feature initialization failed", e); //$NON-NLS-1$						
					}
				}
			}
		} // end of ObjectInitializer
		
		/** 
		 * @@generated
		 */
		interface IFeatureInitializer {
			/**
			 * @@generated
			 */
			void init(EObject contextInstance);
		}
		
		/**
		 * @@generated
		 */		
		static IFeatureInitializer createNewElementFeatureInitializer(EStructuralFeature initFeature, ObjectInitializer[] newObjectInitializers) {
			final EStructuralFeature feature = initFeature;
			final ObjectInitializer[] initializers = newObjectInitializers;
			return new IFeatureInitializer() {
				public void init(EObject contextInstance) {
					for (int i = 0; i < initializers.length; i++) {
						EObject newInstance = initializers[i].element.getEPackage().getEFactoryInstance().create(initializers[i].element);
						if(feature.isMany()) {
							((<%=importManager.getImportedName("java.util.Collection")%>)contextInstance.eGet(feature)).add(newInstance);
						} else {
							contextInstance.eSet(feature, newInstance);
						}						
						initializers[i].init(newInstance);
					}
				}
			};
		}

		/**
		 * @@generated
		 */		
		static IFeatureInitializer createExpressionFeatureInitializer(EStructuralFeature initFeature, <%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> valueExpression) {
			final EStructuralFeature feature = initFeature;
			final <%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> expression = valueExpression;
			return new IFeatureInitializer() {				
				public void init(EObject contextInstance) {
					expression.assignTo(feature, contextInstance);
				}
			};			
		}		
<%
	if(!javaInitializers.isEmpty()) {
%>
		/** 
		 * @@generated
		 */
		static class <%=javaExprContainer%> {
<%
		for(GenFeatureValueSpec __genValueExpression : javaInitializers) {
			GenClassifier __genExprContext = __genValueExpression.getFeatureSeqInitializer().getElementClass();
			GenExpressionProviderBase provider = expressionProviders.getProvider(__genValueExpression);
			if(!(provider instanceof GenJavaExpressionProvider)) continue;
			String __genExprResultType = provider.getQualifiedInstanceClassName(__genValueExpression.getFeature());
%>
<%@@ include file="../expressions/javaExpressionOperation.jetinc"%>
<%
		}
%>
		} //<%=javaExprContainer%>
<%	} /* end of javaInitializers */ %>
	} // end of Initializers
<%}%>
}
<%importManager.emitSortedImports();%>
@


1.54
log
@Fixing compilation problem after re-generation->merge (http://dev.eclipse.org/newslists/news.eclipse.modeling.gmf/msg01735.html)
@
text
@@


1.53
log
@#161380 simplify feature model facets
@
text
@d14 1
a14 1
importManager.registerInnerClass("FeatureInitializer");
d364 1
a364 1
			protected final FeatureInitializer add(FeatureInitializer initializer) {
d373 1
a373 1
					FeatureInitializer nextExpr = (FeatureInitializer)it.next();
d386 1
a386 1
		interface FeatureInitializer {
d396 1
a396 1
		static FeatureInitializer createNewElementFeatureInitializer(EStructuralFeature initFeature, ObjectInitializer[] newObjectInitializers) {
d399 1
a399 1
			return new FeatureInitializer() {
d417 1
a417 1
		static FeatureInitializer createExpressionFeatureInitializer(EStructuralFeature initFeature, <%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> valueExpression) {
d420 1
a420 1
			return new FeatureInitializer() {				
@


1.52
log
@[161027] mgolubev - Increase extensibility of OCL-related generated code in the ExpressionFactory and ElementTypes.Initializers
@
text
@d178 2
a179 2
	} else if (modelFacet instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) modelFacet).getMetaFeature();
@


1.51
log
@#159256 Adapt ElementTypes.javajet with FeatureSeqInitializer complex structure support
@
text
@d12 1
d283 1
a283 1
		public static final ObjectInitializer <%=nextFtSeqInitializer.getInitializerFieldName(id)%> = new ObjectInitializer(<%=nextFtSeqInitializer.getElementClassAccessor(importManager)%>) {
d330 10
d341 1
a341 1
		public static abstract class ObjectInitializer {
@


1.50
log
@Execute feature initializers after the container EClass of the New Element is assigned to the containing feature
@
text
@d259 1
a259 1
	final LinkedHashSet<GenFeatureValueSpec> javaInitializers = new LinkedHashSet();
d278 1
a281 1
<%			if(isTopLevelObjInit){%>
@


1.49
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
- updating ElementTypes template
@
text
@a391 1
						initializers[i].init(newInstance);
d397 1
@


1.48
log
@#145337 Move element initializer's assignment of expressions to features into expression templates
@
text
@d256 7
a262 1
<%if(elementInitializerCount > 0) {%>
d269 9
a277 21
final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
final Map javaInitializers = new HashMap();
final Map __exprEnvVariables = Collections.EMPTY_MAP;
final String __outEnvVarName = ""; // no env to setup;
final String __javaOperationContainer = javaExprContainer; // place java expression methods here
for (Iterator it = genDiagram.eAllContents(); it.hasNext(); ) {
	Object next = it.next();
	String id = null;
	TypeModelFacet modelFacet = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		modelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink && ((GenLink) next).getModelFacet() instanceof TypeLinkModelFacet) {
		id = ((GenLink) next).getUniqueIdentifier();
		modelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
	}
	if (modelFacet != null && modelFacet.getModelElementInitializer() instanceof GenFeatureSeqInitializer) {				
		GenFeatureSeqInitializer ftInitializer = (GenFeatureSeqInitializer)modelFacet.getModelElementInitializer();		
		if(expressionProviders == null) continue;		
%>

d281 30
a310 13
		public static final ObjectInitializer <%=id%> = new ObjectInitializer(new FeatureInitializer[] {
<%
		GenClassifier __genExprContext = ftInitializer.getTypeModelFacet().getMetaClass();
		for(Iterator featInitIt = ftInitializer.getInitializers().iterator(); featInitIt.hasNext();) {		 
			GenFeatureValueSpec __genValueExpression = (GenFeatureValueSpec)featInitIt.next();
			String metaFeatureAccess = importManager.getImportedName(__genValueExpression.getFeatureQualifiedPackageInterfaceName())+".eINSTANCE.get"+__genValueExpression.getFeature().getFeatureAccessorName()+"()"; 
%>
			new FeatureInitializer(
				<%@@ include file="../expressions/getExpression.jetinc"%>,
				<%=metaFeatureAccess%>)<%=featInitIt.hasNext() ? "," : ""%>
<%
			if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider && !expressionProviders.isCopy(__genValueExpression)) {
				javaInitializers.put(__genValueExpression, __genExprContext);
d312 2
a313 1
		} // end of GenFeatureValueSpec iteration
d315 1
a315 1
		});
d317 2
a318 2
	} // end of GenFeatureSeqInitializer 
} // end of getGenEntities iteration
d330 1
a330 1
		public static class ObjectInitializer {
d334 1
a334 2
			private FeatureInitializer[] initExpressions;	
			
d338 18
a355 2
			ObjectInitializer(FeatureInitializer[] initExpressions) {
				this.initExpressions = initExpressions;
a356 1
			
d361 2
a362 2
				for (int i = 0; i < initExpressions.length; i++) {
					FeatureInitializer nextExpr = initExpressions[i];
d374 3
a376 4
		 */	
		static class FeatureInitializer {

			/** 
d379 23
a401 1
			private <%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> sFeature;
d403 12
a414 21
			/** 
			 * @@generated
			 */
			private <%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> expression;		

			/**
			 * @@generated
			 */		
			FeatureInitializer(<%=importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName())%> expression, 
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature")%> sFeature) {
				this.sFeature = sFeature;
				this.expression = expression;
			}

			/** 
			 * @@generated
			 */
			void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> contextInstance) {
				expression.assignTo(sFeature, contextInstance);
			}
		} // end of FeatureInitializer
d423 2
a424 3
		for(Iterator javaExprIt = javaInitializers.keySet().iterator(); javaExprIt.hasNext();) {
			GenFeatureValueSpec __genValueExpression = (GenFeatureValueSpec)javaExprIt.next();
			GenClassifier __genExprContext = (GenClassifier)javaInitializers.get(__genValueExpression);
a426 1
			//GenJavaExpressionProvider javaProvider = (GenJavaExpressionProvider)provider;
@


1.47
log
@fix some nls markers
@
text
@d374 1
a374 14
				Object value = expression.evaluate(contextInstance);
				if (sFeature.getEType() instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EEnum")%> && 
					value instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral")%>) {
					value = ((<%=importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral")%>)value).getInstance();
				} else if(sFeature.isMany() && value instanceof <%=importManager.getImportedName("java.util.Collection")%>) {
					<%=importManager.getImportedName("java.util.Collection")%> destCollection = (<%=importManager.getImportedName("java.util.Collection")%>) contextInstance.eGet(sFeature);
					destCollection.clear();
					<%=importManager.getImportedName("java.util.Collection")%> valueCollection = (<%=importManager.getImportedName("java.util.Collection")%>) value;
					for (<%=importManager.getImportedName("java.util.Iterator")%> it = valueCollection.iterator(); it.hasNext();) {
						destCollection.add(it.next());
					}  
					return;
				}
				contextInstance.eSet(sFeature, value);
@


1.46
log
@remove warns; fix edit helper context resolution
@
text
@d226 1
a226 1
	public static final IElementType <%=genElement.getUniqueIdentifier()%> = getElementType("<%=genElement.getElementType().getUniqueIdentifier()%>");
@


1.45
log
@#144305 VisualIDRegistry.javajet should check for java expression duplicates in case of reused NodeMapping
1) provide a cleaner detection of expression copies for use in templates
@
text
@d403 1
a403 1
			GenJavaExpressionProvider javaProvider = (GenJavaExpressionProvider)provider;
@


1.44
log
@#136701 [GMFGen] GenDiagramElementTarget should allow to target more then one element
@
text
@d298 1
a298 1
			if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {
a403 1
			if(!javaProvider.getExpressions().contains(__genValueExpression)) continue;
@


1.43
log
@avoid generating unused imports in pure pure design projects
@
text
@d402 3
a404 1
			if(provider == null) continue;
@


1.42
log
@typo? there's no Collections use, but Collection
@
text
@a17 1
import java.util.Collection;
a19 1
import java.util.Iterator;
d350 1
d353 1
a353 1
			 */		
d355 1
d360 1
d369 1
d375 1
a375 1
				if(sFeature.getEType() instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.EEnum")%> && 
d378 2
a379 2
				} else if(sFeature.isMany() && value instanceof Collection) {
					Collection destCollection = (Collection)contextInstance.eGet(sFeature);
d381 2
a382 2
					Collection valueCollection = (Collection)value;
					for(Iterator it = valueCollection.iterator(); it.hasNext();) {
a386 1
					
@


1.41
log
@#114175 enable links creation
@
text
@d18 1
a18 1
import java.util.Collections;
@


1.40
log
@#143278 FeatureSequenceInitializer should ensure fault isolation of individual feature value setting
@
text
@d16 1
d18 16
a33 14
importManager.addImport("java.util.IdentityHashMap");
importManager.addImport("java.util.Collection");
importManager.addImport("java.util.Iterator");
importManager.addImport("java.util.Map");
importManager.addImport("org.eclipse.core.runtime.IAdaptable");
importManager.addImport("org.eclipse.emf.ecore.EClass");
importManager.addImport("org.eclipse.emf.ecore.ENamedElement");
importManager.addImport("org.eclipse.emf.ecore.EStructuralFeature");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.IElementType");
importManager.addImport("org.eclipse.jface.resource.ImageDescriptor");
importManager.addImport("org.eclipse.jface.resource.ImageRegistry");
importManager.addImport("org.eclipse.swt.graphics.Image");
importManager.markImportLocation(stringBuffer);%>
d191 1
d194 4
a197 3
GenCommonBase genElement = genDiagram;%>
<%@@ include file="elementType.jetinc"%>
<%
d200 1
d217 6
d224 5
a228 1
<%@@ include file="elementType.jetinc"%>
d237 21
@


1.39
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d18 2
d302 5
a306 1
					nextExpr.init(instance);
d339 8
a346 2
				} else if(value != null && sFeature.isMany()) {
					value = new <%=importManager.getImportedName("org.eclipse.emf.common.util.BasicEList")%>((<%=importManager.getImportedName("java.util.Collection")%>)value);
d348 1
d363 3
a365 1
			GenClassifier __genExprResultType = __genValueExpression.getFeature().getTypeGenClassifier();
@


1.38
log
@Removing unused ElementInitializer field contextClass
@
text
@d3 4
a6 1
<%GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];%>
d8 1
a8 1
package <%=genDiagram.getProvidersPackageName()%>;
d10 1
a10 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
@


1.37
log
@#136672 Adapt Element Initializers, Link Constraints templates
@
text
@a308 4
			private <%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> contextClass;	
			/** 
			 * @@generated
			 */		
@


1.36
log
@remove stale code
@
text
@d8 6
d223 5
d240 2
a241 1
		GenFeatureSeqInitializer ftInitializer = (GenFeatureSeqInitializer)modelFacet.getModelElementInitializer();
d249 8
a256 7
		for(Iterator featInitIt = ftInitializer.getInitializers().iterator(); featInitIt.hasNext();) { 
			GenFeatureValueSpec featureValSpec = (GenFeatureValueSpec)featInitIt.next();%>
			new FeatureInitializer("<%=featureValSpec.getBody()%>", //$NON-NLS-1$
						<%=importManager.getImportedName(ftInitializer.getElementQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=ftInitializer.getElementClassAccessorName()%>(),
						<%=importManager.getImportedName(featureValSpec.getFeatureQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=featureValSpec.getFeature().getFeatureAccessorName()
						%>())<%=featInitIt.hasNext() ? "," : ""%>

d258 3
d317 1
a317 6
			private <%=importManager.getImportedName("java.lang.String")%> expressionBody;		
			/** 
			 * @@generated
			 */		
			private <%=importManager.getImportedName("org.eclipse.emf.ocl.query.Query")%> query;
	
d321 1
a321 2
			FeatureInitializer(<%=importManager.getImportedName("java.lang.String")%> expression, 
				<%=importManager.getImportedName("org.eclipse.emf.ecore.EClass")%> context, 
d324 1
a324 2
				this.expressionBody = expression;
				this.contextClass	= context;
d330 1
a330 4
				if(this.query == null) {
					this.query = <%=importManager.getImportedName("org.eclipse.emf.ocl.query.QueryFactory")%>.eINSTANCE.createQuery(expressionBody, contextClass);					
				}
				Object value = query.evaluate(contextInstance);
d340 19
a358 1
				
@


1.35
log
@#126200 register element types in xml
@
text
@a13 1
importManager.addImport("org.eclipse.gmf.runtime.common.core.command.ICommand");
a15 5
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.IMetamodelType");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.IHintedType");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.MetamodelType");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest");
d66 1
a66 3
<%
String pluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
%>
a178 149
if(false) { // register element types in code
%>

	/**
	 * @@generated
	 */
	public static final IMetamodelType <%=genDiagram.getUniqueIdentifier()%> = new MetamodelType(
		"<%=genDiagram.getUniqueIdentifier()%>", null, "<%=genDiagram.getClassNamePrefix()%>",
<%if (genDiagram.getDomainDiagramElement() != null) {%>
		<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>(),
<%} else {%>
		null,
<%}%>
		new NullEditHelper());
<%
List types = new ArrayList(); // element types that should be registered in code
List registeredTypes = new ArrayList(); // element types registered via plugin.xml
// TODO : create diagram specialization type otherwise and register it
if (genDiagram.getDomainDiagramElement() != null) {
	types.add(genDiagram.getUniqueIdentifier());
}
elementInitializerCount = 0;
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	String id;
	TypeModelFacet typeModelFacet = null;
	String semanticEntityInterfaceName = null;
	String semanticPackageInterfaceName = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		types.add(id);
		typeModelFacet = ((GenNode) next).getModelFacet();
		semanticEntityInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
		semanticPackageInterfaceName = importManager.getImportedName(typeModelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());
	} else if (next instanceof GenLink) {
		id = ((GenLink) next).getUniqueIdentifier();
		ModelFacet modelFacet = ((GenLink) next).getModelFacet();
		if (modelFacet == null) {
			registeredTypes.add(id);
		} else {
			types.add(id);
			if (modelFacet instanceof TypeLinkModelFacet) {
				typeModelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
				semanticEntityInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
				semanticPackageInterfaceName = importManager.getImportedName(typeModelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());
			}
		}
	} else {
		continue;
	}
	GenCommonBase nextCommonBase = (GenCommonBase) next;
	
	if (typeModelFacet != null && typeModelFacet.getModelElementInitializer() != null) {
		elementInitializerCount++;
	}
	if (registeredTypes.contains(id)) {
%>

	/**
	 * @@generated
	 */
	public static final IElementType <%=id%> = getElementType("<%=id%>");
<%	} else {%>

	/**
	 * @@generated
	 */
	public static final IMetamodelType <%=id%> = new HintedMetamodelType("<%=id%>", "<%=nextCommonBase.getClassNamePrefix()%>",
<%		if (semanticEntityInterfaceName != null) {%>
		<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticEntityInterfaceName%>(),
<%		}%>
		<%=importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName())%>.VISUAL_ID);
<%
	}
}
if (!registeredTypes.isEmpty()) {
%>

	/**
	 * @@generated
	 */
	private static IElementType getElementType(String id) {
		return ElementTypeRegistry.getInstance().getType(id);
	}
<%
}
if (!types.isEmpty()) {
%>

	/**
	 * @@generated
	 */
	public static void register() {
<%	for (int i = 0; i < types.size(); i++) {%>
		ElementTypeRegistry.getInstance().register(<%=types.get(i)%>);
<%	}%>
	}
<%}%>
	
	/** 
	 * @@generated
	 */
	private static class HintedMetamodelType extends MetamodelType implements IHintedType {

		/** 
		 * @@generated
		 */
		private String mySemanticHint;

		/** 
		 * @@generated
		 */
		public HintedMetamodelType(String id, String displayName, EClass eClass, String semanticHint) {
			super(id, null, displayName, eClass, new NullEditHelper());
			mySemanticHint = semanticHint;
		}
		
		/** 
		 * @@generated
		 */
		public HintedMetamodelType(String id, String displayName, String semanticHint) {
			this(id, displayName, null, semanticHint);
		}
		
		/** 
		 * @@generated
		 */
 		public String getSemanticHint() {
 			return mySemanticHint;
 		}
	}

	/**
	 * @@generated
	 */
	public static class NullEditHelper extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper")%> {

		/**
		 * @@generated
		 */
		public ICommand getEditCommand(IEditCommandRequest req) {
			if (!(req instanceof ConfigureRequest)) {
				<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("unserved request " + req);
			}
			return null;
		}
	}
<%} else { // register element types in xml

a209 1
<%}%>
@


1.34
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d187 1
a187 1
if(true) { // register element types in code
d285 33
d334 1
a334 1
<%} else { // register element types in xml %>
d336 2
a337 4
	/**
	 * @@generated
	 */
	public static final IElementType <%=genDiagram.getUniqueIdentifier()%> = getElementType("<%=genDiagram.getUniqueIdentifier()%>");
a340 1
	String id;
d343 1
a343 1
		id = ((GenNode) next).getUniqueIdentifier();
d346 1
a346 1
		id = ((GenLink) next).getUniqueIdentifier();
d358 1
a358 5

	/**
	 * @@generated
	 */
	public static final IElementType <%=id%> = getElementType("<%=id%>");
a494 33
	
	/** 
	 * @@generated
	 */
	private static class HintedMetamodelType extends MetamodelType implements IHintedType {

		/** 
		 * @@generated
		 */
		private String mySemanticHint;

		/** 
		 * @@generated
		 */
		public HintedMetamodelType(String id, String displayName, EClass eClass, String semanticHint) {
			super(id, null, displayName, eClass, new NullEditHelper());
			mySemanticHint = semanticHint;
		}
		
		/** 
		 * @@generated
		 */
		public HintedMetamodelType(String id, String displayName, String semanticHint) {
			this(id, displayName, null, semanticHint);
		}
		
		/** 
		 * @@generated
		 */
 		public String getSemanticHint() {
 			return mySemanticHint;
 		}
	}
@


1.33
log
@keep both versions in template now
@
text
@d7 19
a25 19
<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
import java.util.IdentityHashMap;
import java.util.Map;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;
import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;
import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.swt.graphics.Image;
<%importManager.markImportLocation(stringBuffer);%>
d237 2
d254 1
a254 1
	public static final IMetamodelType <%=id%> = new MetamodelType("<%=id%>", null, "<%=((GenCommonBase) next).getClassNamePrefix()%>",
a256 2
<%		} else { %>
		null,
d258 1
a258 1
		new NullEditHelper());
d469 33
@


1.32
log
@Rollback of the latest changes to make running unit-tests + all the rest of the generated diagrams containing several diagram elements with the same EClass.

Original changes was made for fixing #126200.
@
text
@d185 4
d208 1
a208 1
int elementInitializerCount = 0;
d301 41
@


1.31
log
@#126200 register element types in xml
@
text
@d15 1
d18 4
d189 8
a196 1
	public static final IElementType <%=genDiagram.getUniqueIdentifier()%> = getElementType("<%=genDiagram.getUniqueIdentifier()%>");
d198 6
d209 2
d213 1
d215 2
d220 9
a228 2
		if (modelFacet instanceof TypeLinkModelFacet) {
			typeModelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
d236 1
d243 17
a259 1
<%}%>
d267 30
@


1.30
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@a14 1
import org.eclipse.gmf.runtime.common.core.command.ICommand;
a16 4
import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;
import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;
import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
d184 1
a184 8
	public static final IMetamodelType <%=genDiagram.getUniqueIdentifier()%> = new MetamodelType(
		"<%=genDiagram.getUniqueIdentifier()%>", null, "<%=genDiagram.getClassNamePrefix()%>",
<%if (genDiagram.getDomainDiagramElement() != null) {%>
		<%=importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedPackageInterfaceName())%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>(),
<%} else {%>
		null,
<%}%>
		new NullEditHelper());
a185 6
List types = new ArrayList(); // element types that should be registered in code
List registeredTypes = new ArrayList(); // element types registered via plugin.xml
// TODO : create diagram specialization type otherwise and register it
if (genDiagram.getDomainDiagramElement() != null) {
	types.add(genDiagram.getUniqueIdentifier());
}
a190 2
	String semanticEntityInterfaceName = null;
	String semanticPackageInterfaceName = null;
a192 1
		types.add(id);
a193 2
		semanticEntityInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
		semanticPackageInterfaceName = importManager.getImportedName(typeModelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());
d197 2
a198 9
		if (modelFacet == null) {
			registeredTypes.add(id);
		} else {
			types.add(id);
			if (modelFacet instanceof TypeLinkModelFacet) {
				typeModelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
				semanticEntityInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
				semanticPackageInterfaceName = importManager.getImportedName(typeModelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());
			}
a205 1
	if (registeredTypes.contains(id)) {
d212 1
a212 17
<%	} else {%>

	/**
	 * @@generated
	 */
	public static final IMetamodelType <%=id%> = new MetamodelType("<%=id%>", null, "<%=((GenCommonBase) next).getClassNamePrefix()%>",
<%		if (semanticEntityInterfaceName != null) {%>
		<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticEntityInterfaceName%>(),
<%		} else { %>
		null,
<%		}%>
		new NullEditHelper());
<%
	}
}
if (!registeredTypes.isEmpty()) {
%>
a219 30
<%
}
if (!types.isEmpty()) {
%>

	/**
	 * @@generated
	 */
	public static void register() {
<%	for (int i = 0; i < types.size(); i++) {%>
		ElementTypeRegistry.getInstance().register(<%=types.get(i)%>);
<%	}%>
	}
<%}%>

	/**
	 * @@generated
	 */
	public static class NullEditHelper extends <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper")%> {

		/**
		 * @@generated
		 */
		public ICommand getEditCommand(IEditCommandRequest req) {
			if (!(req instanceof ConfigureRequest)) {
				<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("unserved request " + req);
			}
			return null;
		}
	}
@


1.29
log
@#114175 for links
@
text
@d4 1
@


1.28
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d197 2
a198 1
List types = new ArrayList();
d212 1
d218 10
a227 4
		if (((GenLink) next).getModelFacet() instanceof TypeLinkModelFacet) {
			typeModelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
			semanticEntityInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
			semanticPackageInterfaceName = importManager.getImportedName(typeModelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());
a231 1
	types.add(id);
d235 1
d241 6
d248 1
a248 1
<%	if (semanticEntityInterfaceName != null) {%>
d250 1
a250 1
<%	} else { %>
d252 1
a252 1
<%	}%>
d254 16
a269 1
<%}%>
d275 1
a275 1
<%for (int i = 0; i < types.size(); i++) {%>
d277 2
a279 1
	}
@


1.27
log
@#116412 Use map in ElementTypes class to get ENamedElement for the element type
@
text
@a146 1
			elements.put(<%=genDiagram.getUniqueIdentifier()%>, <%=genDiagram.getMetaPackageName(importManager)%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>());
d148 7
d190 1
d192 3
d198 4
a201 1
types.add(genDiagram.getUniqueIdentifier());
@


1.26
log
@Correcting java.lang.IllegalArgumentException on passing abstract class as a parameter.
@
text
@d7 3
d39 5
d145 3
a147 2
		if (<%=genDiagram.getUniqueIdentifier()%> == type) {
			return <%=genDiagram.getMetaPackageName(importManager)%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>();
d164 1
a164 2
		} else if (<%=id%> == type) {
			return <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=metaClass.getClassifierAccessorName()%>();
d170 1
a170 2
		} else if (<%=id%> == type) {
			return <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=metaFeature.getFeatureAccessorName()%>();
d176 1
a176 1
		return null;
@


1.25
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d67 3
a69 2
			return <%=pluginClassName%>.getInstance().getItemImageDescriptor(
				eClass.getEPackage().getEFactoryInstance().create(eClass));
@


1.24
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d3 1
a3 1
<%GenDiagram genDiagram = (GenDiagram) argument;%>
@


1.23
log
@ImportManager moved to oeg.common
@
text
@d64 1
a64 2
String pluginClassName = importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName());
String semanticFactoryClassName = importManager.getImportedName(genDiagram.getDomainMetaModel().getQualifiedFactoryInterfaceName());
d66 1
d68 1
a68 1
				<%=semanticFactoryClassName%>.eINSTANCE.create((EClass) element));
a127 4
<%
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
%>
d137 1
a137 1
			return <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>();
d152 1
d159 1
d176 1
a176 1
		<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=genDiagram.getDomainDiagramElement().getClassifierAccessorName()%>(),
d187 1
d192 1
d198 1
d240 1
a240 1
				<%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("unserved request " + req);
@


1.22
log
@#125893
Logging methods
@
text
@d2 1
a2 1
	imports="java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.21
log
@[rdvorak] #115521  Correct initialization code when Enumeration literal is used as an init value
@
text
@d239 1
a239 1
				System.err.println("unserved request " + req);
@


1.20
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d359 7
a365 1
				contextInstance.eSet(sFeature, value);		
@


1.19
log
@REadable names should present in popup bar
@
text
@d64 1
a64 1
String pluginClassName = importManager.getImportedName(genDiagram.getPluginQualifiedClassName());
@


1.18
log
@#116031 avoid hardcoded class names in templates
@
text
@d177 1
a177 1
		"<%=genDiagram.getUniqueIdentifier()%>", null, "<%=genDiagram.getUniqueIdentifier()%>",
d211 1
a211 1
	public static final IMetamodelType <%=id%> = new MetamodelType("<%=id%>", null, "<%=id%>",
@


1.17
log
@remove unused import
@
text
@d26 6
a31 1
public class ElementTypes {
@


1.16
log
@#115622 use genDiagram.eAllContents() to iterate over diagram contents instead of using custom iterator
@
text
@a9 1
import org.eclipse.emf.ecore.EObject;
@


1.15
log
@[ashatalin] #115625 fixes compilation problems with initializers
@
text
@a124 10
List types = new ArrayList();
List refLinks = new ArrayList();
Iterator entities = AccessUtil.getGenEntities(genDiagram);
while (entities.hasNext()) {
	GenCommonBase entity = (GenCommonBase) entities.next();
	if (entity instanceof GenLink && ((GenLink) entity).getModelFacet() instanceof FeatureModelFacet) {
		refLinks.add(entity);
		types.add(entity.getUniqueIdentifier());
	}
}
d169 7
d177 2
a178 1
entities = AccessUtil.getGenEntities(genDiagram);
d180 3
a182 2
while (entities.hasNext()) {
	GenCommonBase entity = (GenCommonBase) entities.next();
d184 11
a194 10
	String semanticNodeInterfaceName;
	if (entity instanceof GenDiagram) {
		semanticNodeInterfaceName = genDiagram.getDomainDiagramElement().getClassifierAccessorName();
	} else if (entity instanceof GenNode) {
		GenNode genNode = (GenNode) entity;
		typeModelFacet = genNode.getModelFacet();
		semanticNodeInterfaceName = genNode.getDomainMetaClass().getClassifierAccessorName();
	} else if (entity instanceof GenLink && ((GenLink) entity).getModelFacet() instanceof TypeLinkModelFacet) {
		typeModelFacet = (TypeLinkModelFacet) ((GenLink) entity).getModelFacet();
		semanticNodeInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
d198 1
a198 1
	types.add(entity.getUniqueIdentifier());
d207 7
a213 15
	public static final IMetamodelType <%=entity.getUniqueIdentifier()%> = new MetamodelType(
		"<%=entity.getUniqueIdentifier()%>", null, "<%=entity.getUniqueIdentifier()%>",
		<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticNodeInterfaceName%>(), new NullEditHelper());
<%
}
for (int i = 0; i < refLinks.size(); i++) {
	GenLink entity = (GenLink) refLinks.get(i);
%>

	/**
	 * @@generated
	 */
	public static final IMetamodelType <%=entity.getUniqueIdentifier()%> = new MetamodelType(
		"<%=entity.getUniqueIdentifier()%>", null, "<%=entity.getUniqueIdentifier()%>",
		null, new NullEditHelper());
d247 3
a249 2
for(Iterator it = AccessUtil.getGenEntities(genDiagram); it.hasNext();) {
	GenCommonBase nextElement = (GenCommonBase)it.next();
d251 8
a258 8
	if(nextElement instanceof GenNode) {
		modelFacet = ((GenNode)nextElement).getModelFacet();
	} else if(nextElement instanceof GenLink && 
		((GenLink)nextElement).getModelFacet() instanceof TypeLinkModelFacet) {
		modelFacet = (TypeLinkModelFacet)((GenLink)nextElement).getModelFacet();
	} 
	
	if(modelFacet != null && modelFacet.getModelElementInitializer() instanceof GenFeatureSeqInitializer) {				
d261 1
d263 3
a265 3
		* @@generated
		*/
		public static final ObjectInitializer <%=nextElement.getUniqueIdentifier()%> = new ObjectInitializer(new FeatureInitializer[] {
@


1.14
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@a7 1
import org.eclipse.core.runtime.IProgressMonitor;
a10 1
import org.eclipse.emf.ecore.EReference;
a11 1
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
a12 1
import org.eclipse.gmf.runtime.emf.commands.core.edithelpers.MSLEditHelper;
a13 2
import org.eclipse.gmf.runtime.emf.type.core.IContainerDescriptor;
import org.eclipse.gmf.runtime.emf.type.core.IElementMatcher;
a15 1
import org.eclipse.gmf.runtime.emf.type.core.ISpecializationType;
a16 7
import org.eclipse.gmf.runtime.emf.type.core.NullElementType;
import org.eclipse.gmf.runtime.emf.type.core.SpecializationType;
import org.eclipse.gmf.runtime.emf.type.core.commands.ConfigureElementCommand;
import org.eclipse.gmf.runtime.emf.type.core.commands.GetEditContextCommand;
import org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand;
import org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper;
import org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelperAdvice;
a17 3
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;
import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;
a18 2
import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;
import org.eclipse.gmf.runtime.notation.View;
d236 1
a236 1
	public static class NullEditHelper extends AbstractEditHelper {
d271 1
a271 1
		private static final ObjectInitializer <%=nextElement.getUniqueIdentifier()%> = new ObjectInitializer(new FeatureInitializer[] {
d298 1
a298 1
		static class ObjectInitializer {
d314 1
a314 1
			void init(<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> instance) {
@


1.13
log
@[ashatalin] #115311 use accessor name helper methods instead of constructing them
@
text
@d29 1
d165 19
a183 8
		if (type instanceof IMetamodelType) {
			EClass eClass = ((IMetamodelType) type).getEClass();
			if (eClass != null && eClass.getEPackage() == <%=semanticPackageInterfaceName%>.eINSTANCE) {
				return eClass;
			}
			return null;
<%if (!refLinks.isEmpty()) {%>
		} else if (type instanceof ISpecializationType) {
d185 2
a186 2
	for (int i = 0; i < refLinks.size(); i++) {
		GenLink refLink = (GenLink) refLinks.get(i);
d188 2
a189 3
			if (<%=refLink.getUniqueIdentifier()%> == type) {
				return <%=refLink.getUniqueIdentifier()%>.getEContainerDescriptor().getContainmentFeatures()[0];
			}
a217 18
%>

	/**
	 * @@generated
	 */
	public static class <%=entity.getUniqueIdentifier()%>_EditHelper extends BaseEditHelper {

		/**
		 * @@generated
		 */
		protected ICommand getConfigureCommand(ConfigureRequest req) {
			return new ConfigureElementCommand(req) {

				protected CommandResult doExecute(IProgressMonitor progressMonitor) {
					// To customize newly created domain objects remove @@renerated tag of 
					// getConfigureCommand(ConfigureRequest req) method and write your custom
					// code here. Use getElementToEdit() to get created element.
<%
d219 1
a219 4
		++elementInitializerCount;
%>
					Initializers.<%=entity.getUniqueIdentifier()%>.init(getElementToEdit());
<%
a220 14
	if (entity instanceof GenLink) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) ((GenLink) entity).getModelFacet();
		GenFeature linkFeature = modelFacet.getTargetMetaFeature();
        String featureAccessorName = linkFeature.isListType() ? linkFeature.getGetAccessor() + "().add" : "set" + linkFeature.getAccessorName();
%>
					((<%=importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName())%>) getElementToEdit()).<%=featureAccessorName%>((<%=importManager.getImportedName(linkFeature.getTypeGenClass().getQualifiedInterfaceName())%>) getRequest().getParameter(CreateRelationshipRequest.TARGET));
<%	}%>				
					return newOKCommandResult();
				}
			};
		}
<%
	if (entity instanceof GenNode) {
		GenNode node = (GenNode) entity;
a222 23
		/**
		 * @@generated
		 */
		protected ICommand getCreateRelationshipCommand(CreateRelationshipRequest reqest) {
<%
		for (int i = 0; i < refLinks.size(); i++) {
			GenLink refLink = (GenLink) refLinks.get(i);
			GenFeature targetFeature = ((FeatureModelFacet) refLink.getModelFacet()).getMetaFeature();
			if (node.getDomainMetaClass().equals(targetFeature.getGenClass())) {
%>
			if (<%=refLink.getUniqueIdentifier()%>.equals(reqest.getElementType())) {
				reqest.setContainmentFeature(<%=refLink.getUniqueIdentifier()%>.getEContainerDescriptor().getContainmentFeatures()[0]);
				return new SetValueCommand(new SetRequest(reqest.getSource(), reqest.getContainmentFeature(), reqest.getTarget()));
			}
<%
			}
		}
%>
			return super.getCreateRelationshipCommand(reqest);
		}
<%	}%>
	}

d228 1
a228 2
		<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticNodeInterfaceName%>(),
		new <%=entity.getUniqueIdentifier()%>_EditHelper());
a232 1
	GenFeature targetFeature = ((FeatureModelFacet) entity.getModelFacet()).getMetaFeature();
d238 1
a238 41
	public static class <%=entity.getUniqueIdentifier()%>_ContainerDescriptor implements IContainerDescriptor {

		/**
		 * @@generated
		 */
		private static final EReference[] containmentFeatures = new EReference[] {
			<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=targetFeature.getFeatureAccessorName()%>()
		};

		/**
		 * @@generated
		 */
		public EReference[] getContainmentFeatures() {
			return containmentFeatures;
		}

		/**
		 * @@generated
		 */
		public IElementMatcher getMatcher() {
			return new IElementMatcher() {

				/**
				 * @@generated
				 */
				public boolean matches(EObject eObject) {
					return <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=targetFeature.getGenClass().getClassifierAccessorName()%>().isInstance(eObject);
				}
			};
		}
	}

	/**
	 * @@generated
	 */
	public static class <%=entity.getUniqueIdentifier()%>_EditHelperAdvice extends BaseEditHelperAdvice {}

	/**
	 * @@generated
	 */
	public static final ISpecializationType <%=entity.getUniqueIdentifier()%> = new SpecializationType(
d240 1
a240 3
		new IElementType[] { NullElementType.getInstance() }, null,
		new <%=entity.getUniqueIdentifier()%>_ContainerDescriptor(),
		new <%=entity.getUniqueIdentifier()%>_EditHelperAdvice());
d255 1
a255 1
	public static class BaseEditHelperAdvice extends AbstractEditHelperAdvice {
d260 3
a262 9
		protected ICommand getBeforeEditContextCommand(GetEditContextRequest reqest) {
			GetEditContextCommand result = null;
			IEditCommandRequest editRequest = reqest.getEditCommandRequest();
			if (editRequest instanceof CreateElementRequest) {
				result = new GetEditContextCommand(reqest);
				EObject container = ((CreateElementRequest) editRequest).getContainer();
				if (container instanceof View) {
					result.setEditContext(((View) container).getElement());
				}
d264 1
a264 1
			return result;
d267 1
d272 1
a272 25
	public static class BaseEditHelper extends MSLEditHelper {

		/**
		 * @@generated
		 */
		protected ICommand getEditContextCommand(GetEditContextRequest req) {
			GetEditContextCommand result = null;
			IEditCommandRequest editRequest = req.getEditCommandRequest();
			if (editRequest instanceof CreateElementRequest) {
				result = new GetEditContextCommand(req);
				EObject container = ((CreateElementRequest) editRequest).getContainer();
				if (container instanceof View) {
					container = ((View) container).getElement();
				}
				result.setEditContext(container);
			}
			return result;
		}
	}
	
	<% if(elementInitializerCount > 0) {%>
	/**
	 * @@generated
	 */
	private static class Initializers {
d385 1
a385 1
<%	} %>
@


1.12
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@d195 1
a195 1
		semanticNodeInterfaceName = genDiagram.getDomainDiagramElement().getName();
d199 1
a199 1
		semanticNodeInterfaceName = genNode.getDomainMetaClass().getName();
d202 1
a202 1
		semanticNodeInterfaceName = typeModelFacet.getMetaClass().getName();
a281 2
	String semanticFeatureCapName = targetFeature.getCapName();
	String semanticNodeInterfaceName = targetFeature.getGenClass().getName();
d293 1
a293 1
			<%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticNodeInterfaceName + '_' + semanticFeatureCapName%>()
d313 1
a313 1
					return <%=semanticPackageInterfaceName%>.eINSTANCE.get<%=semanticNodeInterfaceName%>().isInstance(eObject);
@


1.11
log
@[rdvorak] #113647 refactoring selectors and initializers
@
text
@d192 1
d198 1
d201 2
a202 2
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) ((GenLink) entity).getModelFacet();
		semanticNodeInterfaceName = modelFacet.getMetaClass().getName();
d225 2
a226 4
	if (entity instanceof GenBaseElement) {
		GenElementInitializer initializer = ((GenBaseElement) entity).getModelElementInitializer();
		if (initializer != null) {
			++elementInitializerCount;
d228 1
a228 1
					Initializers.<%=initializer.getElement().getUniqueIdentifier()%>.init(getElementToEdit());
a229 1
		}
d395 14
a408 10
	<%
	for(Iterator it = AccessUtil.getGenEntities(genDiagram); it.hasNext();) {
		GenCommonBase nextElement = (GenCommonBase)it.next();
		GenBaseElement  genElement = nextElement instanceof GenBaseElement ? (GenBaseElement) nextElement : null;
		if(genElement == null || genElement.getModelElementInitializer() == null) continue;	
			
		GenElementInitializer initializer = genElement.getModelElementInitializer();
		if(initializer instanceof GenFeatureSeqInitializer) {
			GenFeatureSeqInitializer ftInitializer = (GenFeatureSeqInitializer)initializer;
		%>
d412 4
a415 3
		private static final ObjectInitializer <%=initializer.getElement().getUniqueIdentifier()%> = new ObjectInitializer(new FeatureInitializer[] {
			<% for(Iterator featInitIt = ftInitializer.getInitializers().iterator(); featInitIt.hasNext();) { 
					GenFeatureValueSpec featureValSpec = (GenFeatureValueSpec)featInitIt.next();%>
d420 4
a423 2
			<%	}
			} %>
d425 4
a428 2
	<%	} // end of FeatureSeqInitializer
	%>
@


1.10
log
@[ashatalin] #113258 sync diagram and domain models using canonicalEditPolicy
@
text
@d189 1
d226 1
d228 1
a228 1
					<%=importManager.getImportedName(initializer.getInitializersQualifiedClassName())%>.<%=initializer.getInitializerMethodName()%>(getElementToEdit());
d390 110
@


1.9
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d233 1
d235 1
a235 1
					((<%=importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName())%>) getElementToEdit()).set<%=linkFeature.getAccessorName()%>((<%=importManager.getImportedName(linkFeature.getTypeGenClass().getQualifiedInterfaceName())%>) getRequest().getParameter(CreateRelationshipRequest.TARGET));
@


1.8
log
@[ashatalin] #112995 Domain Link Target Feature set on link creation
@
text
@d148 1
a148 1
	if (entity instanceof GenLinkReferenceOnly) {
d174 1
a174 1
		GenLinkReferenceOnly refLink = (GenLinkReferenceOnly) refLinks.get(i);
d197 3
a199 3
	} else if (entity instanceof GenLinkWithClass) {
		GenLinkWithClass genLinkWithClass = (GenLinkWithClass) entity;
		semanticNodeInterfaceName = genLinkWithClass.getDomainMetaClass().getName();
d216 1
a220 6
					<%if(entity instanceof GenBaseElement) {
						GenElementInitializer initializer = ((GenBaseElement)entity).getModelElementInitializer();
						if(initializer != null) {%>
							<%=importManager.getImportedName(initializer.getInitializersQualifiedClassName())%>.<%=initializer.getInitializerMethodName()%>(getElementToEdit());
						<%}
					}%>
d222 3
a224 3
	if (entity instanceof GenLinkWithClass) {
		GenLinkWithClass linkWithClass = (GenLinkWithClass) entity;
		GenFeature linkFeature = linkWithClass.getDomainLinkTargetFeature();
d226 1
a226 1
					((<%=importManager.getImportedName(linkWithClass.getDomainMetaClass().getQualifiedInterfaceName())%>) getElementToEdit()).set<%=linkFeature.getAccessorName()%>((<%=importManager.getImportedName(linkFeature.getTypeGenClass().getQualifiedInterfaceName())%>) getRequest().getParameter(CreateRelationshipRequest.TARGET));
d228 1
d230 6
a235 1
%>				
d251 2
a252 2
			GenLinkReferenceOnly refLink = (GenLinkReferenceOnly) refLinks.get(i);
			GenFeature targetFeature = refLink.getDomainLinkTargetFeature();
d278 2
a279 2
	GenLinkReferenceOnly entity = (GenLinkReferenceOnly) refLinks.get(i);
	GenFeature targetFeature = entity.getDomainLinkTargetFeature();
d332 1
a332 3
<%
}
%>
@


1.7
log
@[rdvorak] #113224 Generate custom initialization code for domain model elements
@
text
@a215 4

				/**
				 * @@generated
				 */
d217 3
a219 2
					// Write new object initialization code here.
					// Use getElementToEdit() to get created element.
d226 9
@


1.6
log
@[dstadnik] #112901 modeling assistant provider
@
text
@d223 6
@


1.5
log
@[dstadnik] #112176 support references w/o domain class
@
text
@d7 1
d9 2
d13 1
d34 1
a35 1
import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;
d37 3
d47 95
d155 33
d259 1
a259 1
		"<%=entity.getUniqueIdentifier()%>", null, null,
d315 1
a315 1
		"<%=entity.getUniqueIdentifier()%>", null, null,
@


1.4
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@d9 1
d14 3
d18 1
d20 2
d24 2
d28 1
d30 1
d42 9
d53 1
a53 1
Iterator entities = AccessUtil.getGenEntities(genDiagram);
d81 4
d86 2
a87 1
//	Write new object initialization code here. Use getElementToEdit() to get created element.
d92 26
a117 1
		
d124 1
a124 1
		"<%=semanticNodeInterfaceName%>",	null, null,
d127 60
a186 1
<%}%>
d200 22
@


1.3
log
@[ashatalin]
#111773 Multiple views for single domain metaelement based on it's state
#111782 Support same metaelement both as top-level and inner diagram element
@
text
@d48 1
a48 2
	String semanticNodeInterfaceNameUnique = semanticNodeInterfaceName + "_" + entity.getVisualID();
	types.add(semanticNodeInterfaceNameUnique);
d54 1
a54 1
	public static class <%=semanticNodeInterfaceNameUnique%>_EditHelper extends BaseEditHelper {
d73 1
a73 1
	public static final IMetamodelType <%=semanticNodeInterfaceNameUnique%> = new MetamodelType(
d76 1
a76 1
		new <%=semanticNodeInterfaceNameUnique%>_EditHelper());
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d7 1
d9 1
d15 1
d17 1
d48 2
a49 1
	types.add(semanticNodeInterfaceName);
d55 14
a68 1
	public static class <%=semanticNodeInterfaceName%>EditHelper extends BaseEditHelper {
d74 1
a74 1
	public static final IMetamodelType <%=semanticNodeInterfaceName%> = new MetamodelType(
d77 1
a77 1
		new <%=semanticNodeInterfaceName%>EditHelper());
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d27 1
a27 1
GenPackage genPackage = genDiagram.getEmfGenModel().findGenPackage(genDiagram.getDomainMetaModel());
@

