head	1.14;
access;
symbols
	v20081022-1925:1.14
	v20081015-1925:1.14
	v20081008-1925:1.14
	v20081001-1925:1.14
	v20080924-1925:1.14
	v20080917-1925:1.14
	v20080911-1728:1.14
	v20080910-1520:1.14
	v20080903-1520:1.14
	v20080827-1520:1.14
	v20080813-1520:1.14
	v20080806-1520:1.14
	v20070420-1000:1.13
	v20070413-1300:1.12
	v20070405-1100:1.12
	v20070403-1500:1.12
	v20070330-1300:1.12
	v20060330-1300:1.12
	v20070322-1100:1.12
	v20060316-0600:1.12
	v20070307-0700:1.12
	v20070301-1200:1.12
	v20070228-2000:1.12
	v20070221-1500:1.12
	v20070208-1800:1.12
	v20070202-0200:1.12
	v20070103-0300:1.12
	M4_20:1.12
	v20061222-1800:1.12
	v20061218-1200:1.12
	v20061214-0000:1.12
	v20061120-1300:1.12
	M3_20:1.12
	v20061117-0800:1.12
	v20061027-1200:1.12
	v20061020-1000:1.12
	v20061013-1330:1.12
	v20060919-0800:1.12
	v20060907-1100:1.12
	M1_20:1.12
	v20060904-1500:1.12
	v20060824-1600:1.12
	v20060817-1500:1.12
	v20060728-0500:1.12
	v20060713-1700:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20060627-1200:1.12
	v20060626-1420:1.12
	v20060620-0400:1.12
	v20060616-1400:1.12
	v20060616-1200:1.12
	v20060609-1400:1.12
	v20060531-1730:1.11
	v20060530-1930:1.11
	v20060526-1200:1.11
	v20060519-1300:1.11
	v20060519-0800:1.11
	v20060512-1000:1.10
	I20060512-1000:1.10
	I20060505-1400:1.10
	I20060428-1300:1.10
	I20060424-0500:1.10
	I20060424-0300:1.10
	M6_10:1.10
	I20060407-1200:1.10
	I20060331-1000:1.10
	I20060324-0300:1.10
	I20060317-1300:1.10
	I20060317-1200:1.10
	I20060316-1300:1.10
	I20060309-1300:1.10
	M5_10:1.9
	S20060303-1600:1.9
	I20060227-1730:1.9
	I20060216-1945:1.9
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.3
	I20060202-1415:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.14
date	2007.04.27.09.26.27;	author dstadnik;	state dead;
branches;
next	1.13;
commitid	4a7d4631c1c24567;

1.13
date	2007.04.17.10.12.45;	author dstadnik;	state Exp;
branches;
next	1.12;
commitid	495e46249d9c4567;

1.12
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.15.13.27.40;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.14.13.06.38;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.06.11.34.23;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.01.11.04.26;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.31.11.00.48;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.30.18.26.46;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.14
log
@rewrite StructuralFeaturesParser in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.providers" class="StructuralFeaturesParserGenerator"
  imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.text.FieldPosition;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand;
import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;
import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getStructuralFeaturesParserClassName()%> extends <%=importManager.getImportedName(genDiagram.getAbstractParserQualifiedClassName())%> {

	/**
	 * @@generated
	 */
	private List features;

	/**
	 * @@generated
	 */
	public <%=genDiagram.getStructuralFeaturesParserClassName()%>(List features) {
		this.features = features;
	}

	/**
	 * @@generated
	 */
	protected String getStringByPattern(IAdaptable adapter, int flags, String pattern, MessageFormat processor) {
		EObject element = (EObject) adapter.getAdapter(EObject.class);
		List values = new ArrayList(features.size());
		for (Iterator it = features.iterator(); it.hasNext();) {
			EStructuralFeature feature = (EStructuralFeature) it.next();
			Object value = element.eGet(feature);
			value = getValidValue(feature, value);
			values.add(value);
		}
		return processor.format(values.toArray(new Object[values.size()]), new StringBuffer(), new FieldPosition(0)).toString();
	}

	/**
	 * @@generated
	 */
	protected IParserEditStatus validateNewValues(Object[] values) {
		if (values.length != features.size()) {
			return ParserEditStatus.UNEDITABLE_STATUS;
		}
		for (int i = 0; i < values.length; i++) {
			Object value = getValidNewValue((EStructuralFeature) features.get(i), values[i]);
			if (value instanceof InvalidValue) {
				return new ParserEditStatus(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.ID,
					IParserEditStatus.UNEDITABLE, value.toString());
			}
		}
		return ParserEditStatus.EDITABLE_STATUS;
	}

	/**
	 * @@generated
	 */
	public ICommand getParseCommand(IAdaptable adapter, Object[] values) {
		EObject element = (EObject) adapter.getAdapter(EObject.class);
		if (element == null) {
			return UnexecutableCommand.INSTANCE;
		}
		TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(element);
		if (editingDomain == null) {
			return UnexecutableCommand.INSTANCE;
		}
		CompositeTransactionalCommand command = new CompositeTransactionalCommand(editingDomain, "Set Values"); //$NON-NLS-1$
		for (int i = 0; i < values.length; i++) {
			EStructuralFeature feature = (EStructuralFeature) features.get(i);
			command.compose(getModificationCommand(element, feature, values[i]));
		}
		return command;
	}

	/**
	 * @@generated
	 */
	public boolean isAffectingEvent(Object event, int flags) {
		if (event instanceof Notification) {
			Object feature = ((Notification) event).getFeature();
			if (features.contains(feature)) {
				return true;
			}
		}
		return false;
	}
}
<%importManager.emitSortedImports();%>
@


1.13
log
@override correct methods
@
text
@@


1.12
log
@fix some nls markers
@
text
@d64 1
a64 1
	protected IParserEditStatus validateValues(Object[] values) {
@


1.11
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d90 1
a90 1
		CompositeTransactionalCommand command = new CompositeTransactionalCommand(editingDomain, "Set Values");
@


1.10
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d3 4
a6 1
<%GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];%>
d8 1
a8 1
package <%=genDiagram.getProvidersPackageName()%>;
a9 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());%>
@


1.9
log
@get editing domain from eobject
@
text
@d4 1
@


1.8
log
@use new transactional emf api
@
text
@d17 2
d20 1
d80 8
a87 1
		CompositeTransactionalCommand command = new CompositeTransactionalCommand(getEditingDomain(), "Set Values");
@


1.7
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d20 1
a20 1
import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;
d77 1
a77 1
		CompositeModelCommand command = new CompositeModelCommand("Set Values");
@


1.6
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d3 1
a3 1
<%GenDiagram genDiagram = (GenDiagram) argument;%>
@


1.5
log
@do not show 'null' for strings when they are not set in model
@
text
@d65 1
a65 1
				return new ParserEditStatus(<%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.ID,
@


1.4
log
@ImportManager moved to oeg.common
@
text
@d47 3
a49 1
			Object value = element.eGet((EStructuralFeature) it.next());
@


1.3
log
@#121534 Support link labels based on attributes that are not strings
@
text
@d2 1
a2 1
  imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.*"%>
@


1.2
log
@#125729 Support labels based on multiple structural features
@
text
@d56 12
a67 2
	protected IParserEditStatus validateNewValues(Object[] values) {
		return values.length == features.size() ? ParserEditStatus.EDITABLE_STATUS : ParserEditStatus.UNEDITABLE_STATUS;
d73 1
a73 1
	public ICommand getParseCommand(IAdaptable adapter, Object[] newValues) {
d76 1
a76 1
		for (int i = 0; i < newValues.length; i++) {
d78 1
a78 1
			command.compose(getModificationCommand(element, feature, newValues[i]));
@


1.1
log
@#125729 Support labels based on multiple structural features
@
text
@d7 1
a16 1
import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;
a17 1
import org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand;
d20 1
a20 2
import org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;
d43 1
a43 1
	protected String getStringByPattern(IAdaptable adapter, int flags, String pattern) {
d46 1
a46 1
		for (Iterator it = features.iterator(); it.hasNext(); ) {
d50 1
a50 1
		return MessageFormat.format(pattern, values.toArray(new Object[values.size()]));
d56 2
a57 2
	public IParserEditStatus isValidEditString(IAdaptable element, String editString) {
		return ParserEditStatus.EDITABLE_STATUS;
d63 1
a63 1
	public ICommand getParseCommand(IAdaptable adapter, String newString, int flags) {
d65 2
a66 6
		Object[] values = getValuesFromEditString(newString, getEditPattern());
		if (values.length != features.size()) {
			return UnexecutableCommand.INSTANCE;
		}
		CompositeCommand command = new CompositeCommand("Set Values");
		for (int i = 0; i < values.length; i++) {
d68 1
a68 2
			SetRequest request = new SetRequest(element, feature, values[i]);
			command.compose(new SetValueCommand(request));
d70 1
a70 1
		return getModelCommand(command);
@

