head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.09.22.13.21.24;	author ashatalin;	state dead;
branches;
next	1.4;

1.4
date	2006.09.19.11.35.10;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.15.21.45.21;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.14.18.08.54;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.11.18.21.36;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Read-only properties provided into the navigator.
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.editor" class="NavigatorLabelProviderGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* java.util.* org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.ecore.*"
    skeleton="../common.skeleton"%>
<%
GenNavigator genNavigator = (GenNavigator) ((Object[]) argument)[0];
GenDiagram genDiagram = genNavigator.getEditorGen().getDiagram();
Collection commonBaseElements = new ArrayList(genDiagram.getAllContainers());
commonBaseElements.addAll(genDiagram.getLinks());
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

final String commonKeyPrefix = "Navigator?";
final String invalidElementKey = commonKeyPrefix + "InvalidElement";
final String unknownElementKey = commonKeyPrefix + "UnknownElement";
final String notFoundElementKey = commonKeyPrefix + "ImageNotFound";
/* TODO: move this logic into genmodel */
final class RegistryKey {
	
	private GenCommonBase myCommonBase;
	private String myKey;
	
	public RegistryKey(GenCommonBase commonBase) {
		myCommonBase = commonBase;
	}
	
	public String getKey() {
		if (myKey == null) {
			if (myCommonBase instanceof GenDiagram) {
				myKey = getKey((GenDiagram) myCommonBase);
			} else if (myCommonBase instanceof GenNode) {
				myKey = getKey((GenNode) myCommonBase);
			} else if (myCommonBase instanceof GenLink) {
				myKey = getKey((GenLink) myCommonBase);
			} else if (myCommonBase instanceof GenCompartment) {
				myKey = getKey((GenCompartment) myCommonBase);
			} else if (myCommonBase instanceof GenLabel) {
				myKey = getKey((GenLabel) myCommonBase);
			} else {
				myKey = getInvalidElementKey();
			}
		}
		return myKey;
	}
	
	private String getKey(GenDiagram diagram) {
		return getCommonPrefix() + "Diagram?" + getKeyFragment(diagram.getDomainDiagramElement());
	}
	
	private String getKey(GenNode node) {
		return getCommonPrefix() + (node instanceof GenTopLevelNode ? "TopLevelNode?" : "Node?") + getKeyFragment(node.getModelFacet().getMetaClass());
	}
	
	private String getKey(GenLink link) {
		LinkModelFacet modelFacet = link.getModelFacet();
		if (modelFacet instanceof TypeLinkModelFacet) {
			return getCommonPrefix() + "Link?" + getKeyFragment(((TypeLinkModelFacet) modelFacet).getMetaClass());
		} else if (modelFacet instanceof FeatureLinkModelFacet) {
			return getCommonPrefix() + "Link?" + getKeyFragment(((FeatureLinkModelFacet) modelFacet).getMetaFeature());
		}
		return getInvalidElementKey();
	}
	
	private String getKey(GenCompartment compartment) {
		return getCommonPrefix() + "Compartment?" + getKeyFragment(compartment.getNode().getModelFacet().getMetaClass()) + "?" + compartment.getTitle();
	}
	
	private String getKey(GenLabel label) {
		if (label instanceof GenNodeLabel) {
			GenNodeLabel nodeLabel = (GenNodeLabel) label;
			return getKey(nodeLabel.getNode()) + "?Label?" + getKeyFragment(nodeLabel);
		} else if (label instanceof GenLinkLabel) {
			GenLinkLabel linkLabel = (GenLinkLabel) label;
			return getKey(linkLabel.getLink()) + "?Label?" + getKeyFragment(linkLabel);
		}
		return getInvalidElementKey();
	}
	
	private String getInvalidElementKey() {
		return invalidElementKey;
	}
	
	private String getCommonPrefix() {
		return commonKeyPrefix;
	}
	
	private String getKeyFragment(GenClass genClass) {
		return genClass.getGenPackage().getNSURI() + "?" + genClass.getName();
	}
	
	private String getKeyFragment(GenFeature genFeature) {
		GenClass genClass = genFeature.getGenClass();
		return getKeyFragment(genClass) + "?" + genFeature.getName();
	}
	
	private String getKeyFragment(GenLabel genLabel) {
		LabelModelFacet modelFacet = genLabel.getModelFacet();
		if (modelFacet instanceof CompositeFeatureLabelModelFacet) {
			String result = "";
			for (Iterator it = ((CompositeFeatureLabelModelFacet) genLabel).getMetaFeatures().iterator(); it.hasNext();) {
				result += getKeyFragment((GenFeature) it.next());
			}
			return result;
		} else if (modelFacet instanceof FeatureLabelModelFacet) {
			return getKeyFragment(((FeatureLabelModelFacet) modelFacet).getMetaFeature());
		} else if (modelFacet instanceof DesignLabelModelFacet) {
			return "DesignLabel";
		}
		return getInvalidElementKey();
	}

}

%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genNavigator.getLabelProviderClassName()%> extends <%=importManager.getImportedName("org.eclipse.jface.viewers.LabelProvider")%> implements <%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonLabelProvider")%> {

	/**
	 * @@generated
	 */
	static {
		<%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getImageRegistry().put("<%=invalidElementKey%>", <%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%>.getMissingImageDescriptor());
		<%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getImageRegistry().put("<%=unknownElementKey%>", <%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%>.getMissingImageDescriptor());
		<%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getImageRegistry().put("<%=notFoundElementKey%>", <%=importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor")%>.getMissingImageDescriptor());
	}

	/**
	 * @@generated
	 */
	public <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getImage(Object element) {
		if (element instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) element;
			if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(view))) {
				return super.getImage(element);
			}
			
			int visualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view);
			switch (visualID) {
<%for (Iterator it = commonBaseElements.iterator(); it.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) it.next();
	if (genNavigator.getChildReferencesTo(nextCommonBase).size() > 0) {
		RegistryKey registryKey = new RegistryKey(nextCommonBase);%>
			case <%=importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName())%>.VISUAL_ID:
				return getImage("<%=registryKey.getKey()%>", <%if (nextCommonBase.getElementType() != null) {%><%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=nextCommonBase.getUniqueIdentifier()%><%} else {%>null<%}%>);
<%	}
}%>
				default:
					return getImage("<%=unknownElementKey%>", null);
			}
		} else if (element instanceof <%=importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName())%>) {
			<%=importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName())%> group = (<%=importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName())%>) element;
			if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(group.getModelID())) {
				return <%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getBundledImage(group.getIcon());
			}
		}
		return super.getImage(element);
	}
	
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> getImage(String key, <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%> elementType) {
		<%=importManager.getImportedName("org.eclipse.jface.resource.ImageRegistry")%> imageRegistry = <%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getImageRegistry();
		<%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> image = imageRegistry.get(key);
		if (image == null && elementType != null && <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.isKnownElementType(elementType)) {
			image = <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.getImage(elementType);
			imageRegistry.put(key, image);
		}
			
		if (image == null) {
			image = imageRegistry.get("<%=notFoundElementKey%>");
			imageRegistry.put(key, image);
		}
		return image;
	}
	
	/**
	 * @@generated
	 */
	public String getText(Object element) {
		if (element instanceof <%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) {
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view = (<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%>) element;
			if (!<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(<%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getModelID(view))) {
				return super.getText(element);
			}
			
			int visualID = <%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getVisualID(view);
			switch (visualID) {
<%for (Iterator it = commonBaseElements.iterator(); it.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) it.next();
	if (genNavigator.getChildReferencesTo(nextCommonBase).size() > 0) {%>
			case <%=importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName())%>.VISUAL_ID:
				return get<%=nextCommonBase.getUniqueIdentifier()%>Text(view);
<%	}
}%>
			default:
				return getUnknownElementText(view);
			}
		} else if (element instanceof <%=importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName())%>) {
			<%=importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName())%> group = (<%=importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName())%>) element;
			if (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID.equals(group.getModelID())) {
				return ((<%=importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName())%>) element).getGroupName();
			}
		}
		return super.getText(element);
	}

<%for (Iterator it = commonBaseElements.iterator(); it.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) it.next();
	if (genNavigator.getChildReferencesTo(nextCommonBase).size() > 0) {%>
	/**
	 * @@generated
	 */
	private String get<%=nextCommonBase.getUniqueIdentifier()%>Text(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
<%		LabelModelFacet labelModelFacet = null;
		GenCommonBase hintHolder = null;
		GenCommonBase elementTypeHolder = null;
		if (nextCommonBase instanceof GenChildLabelNode) {
			labelModelFacet = ((GenChildLabelNode) nextCommonBase).getLabelModelFacet();
			hintHolder = nextCommonBase;
			elementTypeHolder = nextCommonBase;
		} else if (nextCommonBase instanceof GenNode) {
			Collection labels = ((GenNode) nextCommonBase).getLabels();
			if (labels.size() > 0) {
				GenLabel nextLabel = (GenLabel) labels.iterator().next();
				labelModelFacet = nextLabel.getModelFacet();
				hintHolder = nextLabel;
				elementTypeHolder = nextCommonBase;
			}
		} else if (nextCommonBase instanceof GenLink) {
			Collection labels = ((GenLink) nextCommonBase).getLabels();
			if (labels.size() > 0) {
				GenLabel nextLabel = (GenLabel) labels.iterator().next();
				labelModelFacet = nextLabel.getModelFacet();
				hintHolder = nextLabel;
				elementTypeHolder = nextCommonBase;
			}
		} else if (nextCommonBase instanceof GenLabel) {
			labelModelFacet = ((GenLabel) nextCommonBase).getModelFacet();
			hintHolder = nextCommonBase;
			elementTypeHolder = (GenCommonBase) nextCommonBase.eContainer();
		}
		
		if (elementTypeHolder != null) {
/* 1. Label was detected. */%>
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser")%> parser = <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService")%>.getInstance().getParser(new <%=importManager.getImportedName("org.eclipse.core.runtime.IAdaptable")%>() {
			public Object getAdapter(Class adapter) {
				if (String.class.equals(adapter)) {
					return <%
			if (labelModelFacet instanceof DesignLabelModelFacet) {
				%><%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint")%>.DESCRIPTION<%
			} else {
				%><%=importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName())%>.getType(<%=importManager.getImportedName(hintHolder.getEditPartQualifiedClassName())%>.VISUAL_ID)<%
			}%>;
				}
				if (<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%>.class.equals(adapter)) {
					return <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=elementTypeHolder.getUniqueIdentifier()%>;
				}
				return null;
			}
		});
		if (parser != null) {
			return parser.getPrintString(new <%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter")%>(view.getElement() != null ? view.getElement() : view), <%=importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions")%>.NONE.intValue());
		} else {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Parser was not found for label " + <%=String.valueOf(hintHolder.getVisualID())%>);
			return "";
		}
<%		} else if (nextCommonBase instanceof GenCompartment) {
/* 2. Compartment was detected. */%>
		return "<%=((GenCompartment) nextCommonBase).getTitle()%>";
<%		} else {
			GenClass domainElement = null;
			if (nextCommonBase instanceof GenDiagram) {
				domainElement = ((GenDiagram) nextCommonBase).getDomainDiagramElement();
			} else if (nextCommonBase instanceof GenNode) {
				domainElement = ((GenNode) nextCommonBase).getModelFacet().getMetaClass();
			} else if (nextCommonBase instanceof GenLink) {
				LinkModelFacet modelFacet = ((GenLink) nextCommonBase).getModelFacet();
				if (modelFacet instanceof TypeModelFacet) {
					domainElement = ((TypeModelFacet) modelFacet).getMetaClass();
				}
			}
			if (domainElement != null && domainElement.getLabelFeature() != null) {
/* 3. Underlying doman model element recognized. */
				GenFeature labelFeature = domainElement.getLabelFeature();
				boolean notString = EcorePackage.eINSTANCE.getEString() != labelFeature.getEcoreFeature().getEType();%>
		<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> domainModelElement = view.getElement();
		if (domainModelElement != null) {
			return <%if (notString) {%>String.valueOf(<%}%><%=getFeatureValueGetter("domainModelElement", domainElement.getLabelFeature(), true, importManager)%><%if (notString) {%>}<%}%>;
		} else {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("No domain element for view with visualID = " + <%=String.valueOf(nextCommonBase.getVisualID())%>);
			return "";
		}
<%			} else {
/* 4. None of above. */%>
		return "";
<%			}
		}%>
	}
<%	}
}%>
	/**
	 * @@generated
	 */
	private String getUnknownElementText(<%=importManager.getImportedName("org.eclipse.gmf.runtime.notation.View")%> view) {
		return "<UnknownElement Visual_ID = " + view.getType() + ">";
	}

	/**
	 * @@generated
	 */
	public void init(<%=importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite")%> aConfig) {
	}

	/**
	 * @@generated
	 */
	public void restoreState(<%=importManager.getImportedName("org.eclipse.ui.IMemento")%> aMemento) {
	}

	/**
	 * @@generated
	 */
	public void saveState(<%=importManager.getImportedName("org.eclipse.ui.IMemento")%> aMemento) {
	}
	
	/**
	 * @@generated
	 */
	public String getDescription(Object anElement) {
		return null;
	}

}
<%importManager.emitSortedImports();%>
@


1.4
log
@Label provider refactored.
@
text
@@


1.3
log
@NAvigator Labels are generated based on genmodel information.
@
text
@a142 2
			String key;
			<%=importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType")%> elementType = null;
d149 1
a149 5
				key = "<%=registryKey.getKey()%>";
<%		if (nextCommonBase.getElementType() != null) {%>
				elementType = <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.<%=nextCommonBase.getUniqueIdentifier()%>;
<%		}%>
				break;
d153 1
a153 1
					key = "<%=unknownElementKey%>";
a154 13

			<%=importManager.getImportedName("org.eclipse.jface.resource.ImageRegistry")%> imageRegistry = <%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getImageRegistry();
			<%=importManager.getImportedName("org.eclipse.swt.graphics.Image")%> image = imageRegistry.get(key);
			if (image == null && elementType != null && <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.isKnownElementType(elementType)) {
				image = <%=importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName())%>.getImage(elementType);
				imageRegistry.put(key, image);
			}
			
			if (image == null) {
				image = imageRegistry.get("<%=notFoundElementKey%>");
				imageRegistry.put(key, image);
			}
			return image;
d167 18
@


1.2
log
@Icons provided to Navigator
@
text
@d2 2
a3 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* java.util.* org.eclipse.emf.codegen.ecore.genmodel.*"%>
a134 6
	private <%=importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider")%> myAdapterFactoryLabelProvider = new <%=importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider")%>(<%=importManager.getImportedName(genNavigator.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());


	/**
	 * @@generated
	 */
a141 2
			
			
d192 13
a204 2
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> eObject = view.getElement();
			return myAdapterFactoryLabelProvider.getText(eObject);
d214 101
@


1.1
log
@Model navigator, initial version.
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
d6 2
d9 102
d125 9
d143 43
a185 2
			<%=importManager.getImportedName("org.eclipse.emf.ecore.EObject")%> eObject = view.getElement();
			return myAdapterFactoryLabelProvider.getImage(eObject);
a186 3
//		 else if (element instanceof <%=importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName())%>) {
//			return ((<%=importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName())%>) element).getIcon();
//		}
d196 3
d202 4
a205 1
			return ((<%=importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName())%>) element).getGroupName();
@

