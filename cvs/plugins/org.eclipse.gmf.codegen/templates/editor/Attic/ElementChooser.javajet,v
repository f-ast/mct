head	1.19;
access;
symbols
	v20081022-1925:1.19
	v20081015-1925:1.19
	v20081008-1925:1.19
	v20081001-1925:1.19
	v20080924-1925:1.19
	v20080917-1925:1.19
	v20080911-1728:1.19
	v20080910-1520:1.19
	v20080903-1520:1.19
	v20080827-1520:1.19
	v20080813-1520:1.19
	v20080806-1520:1.19
	v20070608-1300:1.18
	v20070605-1400:1.18
	v20070601-1400:1.18
	v20070525-1500:1.18
	v20070520-1200:1.18
	v20070518-1300:1.18
	v20070504-1000:1.18
	v20070427-0600:1.18
	v20070420-1000:1.18
	v20070413-1300:1.18
	v20070405-1100:1.18
	v20070403-1500:1.18
	v20070330-1300:1.17
	v20060330-1300:1.17
	v20070322-1100:1.17
	v20060316-0600:1.17
	v20070307-0700:1.17
	v20070301-1200:1.17
	v20070228-2000:1.17
	v20070221-1500:1.17
	v20070208-1800:1.17
	v20070202-0200:1.13.2.2
	v20070103-0300:1.17
	M4_20:1.17
	v20061222-1800:1.17
	v20061218-1200:1.17
	v20061214-0000:1.17
	v20061120-1300:1.17
	M3_20:1.17
	v20061117-0800:1.17
	v20061027-1200:1.13.2.2
	v20061020-1000:1.13.2.2
	v20061013-1330:1.16
	v20060919-0800:1.13.2.2
	v20060907-1100:1.13.2.2
	M1_20:1.15
	v20060904-1500:1.15
	v20060824-1600:1.13.2.1
	v20060817-1500:1.13.2.1
	v20060728-0500:1.13
	v20060713-1700:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060626-1420:1.13
	v20060620-0400:1.13
	v20060616-1400:1.13
	v20060616-1200:1.13
	v20060609-1400:1.13
	v20060531-1730:1.12
	v20060530-1930:1.12
	v20060526-1200:1.12
	v20060519-1300:1.12
	v20060519-0800:1.12
	v20060512-1000:1.12
	I20060512-1000:1.12
	I20060505-1400:1.12
	I20060428-1300:1.12
	I20060424-0500:1.12
	I20060424-0300:1.12
	M6_10:1.12
	I20060407-1200:1.12
	I20060331-1000:1.12
	I20060324-0300:1.12
	I20060317-1300:1.12
	I20060317-1200:1.12
	I20060316-1300:1.12
	I20060309-1300:1.12
	M5_10:1.11
	S20060303-1600:1.11
	I20060227-1730:1.10
	I20060216-1945:1.10
	I20060210-1715:1.10
	I20060209-1815:1.10
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.19
date	2007.06.13.12.49.09;	author ashatalin;	state dead;
branches;
next	1.18;
commitid	55a1466fe7bb4567;

1.18
date	2007.04.02.14.40.42;	author ashatalin;	state Exp;
branches;
next	1.17;
commitid	2da2461115e94567;

1.17
date	2006.11.01.18.25.42;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.09.29.18.11.19;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.09.01.12.39.05;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.08.16.15.20.11;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.05.16.33.13;	author ashatalin;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.01.14.55.16;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.00.17.45;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.31.19.02.07;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.26.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.12.23.10.49;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.12.17.19.23;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.10.17.20.28;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.10.16.16.58;	author ashatalin;	state Exp;
branches;
next	;

1.13.2.1
date	2006.08.16.15.23.48;	author ashatalin;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2006.09.01.12.42.40;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.19
log
@[191853] - Convert /editor/ElementChooser.javajet template to xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.editor" class="ElementChooserGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.* java.util.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.util.Collections;

import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.common.util.WrappedException;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.gmf.runtime.diagram.core.services.ViewService;
import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;
import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.jface.viewers.ILabelProviderListener;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.model.WorkbenchLabelProvider;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getElementChooserClassName()%> extends Dialog {

	/**
	 * @@generated
	 */
	private TreeViewer myTreeViewer;

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.emf.common.util.URI")%> mySelectedModelElementURI;

	/**
	 * @@generated
	 */
	private View myView;
	
	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain")%> myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();

	/**
	 * @@generated
	 */
	public <%=genDiagram.getElementChooserClassName()%>(Shell parentShell, View view) {
		super(parentShell);
		setShellStyle(getShellStyle() | SWT.RESIZE);
		myView = view;
	}
	
	/**
	 * @@generated
	 */
	protected Control createDialogArea(Composite parent) {
		Composite composite = (Composite) super.createDialogArea(parent);
		getShell().setText("Select model element");
		createModelBrowser(composite);
		return composite;
	}
	
	/**
	 * @@generated
	 */
	protected Control createButtonBar(Composite parent) {
		Control buttonBar = super.createButtonBar(parent);
		setOkButtonEnabled(false);
		return buttonBar;
	}

	/**
	 * @@generated
	 */
	private void createModelBrowser(Composite composite) {
		myTreeViewer = new TreeViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
		GridData layoutData = new GridData(GridData.FILL_BOTH);
		layoutData.heightHint = 300;
		layoutData.widthHint = 300;
		myTreeViewer.getTree().setLayoutData(layoutData);
		myTreeViewer.setContentProvider(new ModelElementsTreeContentProvider());
		myTreeViewer.setLabelProvider(new ModelElementsTreeLabelProvider());
		myTreeViewer.setInput(ResourcesPlugin.getWorkspace().getRoot());
		myTreeViewer.addFilter(new ModelFilesFilter());
		myTreeViewer.addSelectionChangedListener(new OkButtonEnabler());
	}
	
	/**
	 * @@generated
	 */
	private void setOkButtonEnabled(boolean enabled) {
		getButton(IDialogConstants.OK_ID).setEnabled(enabled);
	}
	
	/**
	 * @@generated
	 */
	private boolean isValidModelFile(IFile file) {
		String fileExtension = file.getFullPath().getFileExtension();
		return 
<%
for (Iterator it = genDiagram.getContainsShortcutsTo().iterator(); it.hasNext();) {
	String nextFileExtension = (String) it.next();
%>
			"<%=nextFileExtension%>".equals(fileExtension) <%=it.hasNext() ? "||" : ";"%>
<%
}
%>
	}
	
	/**
	 * @@generated
	 */
	public URI getSelectedModelElementURI() {
		return mySelectedModelElementURI;
	}
	
	/**
	 * @@generated
	 */
	public int open() {
		int result = super.open();
		for (<%=importManager.getImportedName("java.util.Iterator")%> it = myEditingDomain.getResourceSet().getResources().iterator(); it.hasNext();) {
			<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%> resource = (<%=importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource")%>) it.next();
			resource.unload();
		}
		myEditingDomain.dispose();
		return result;
	}
	
	/**
	 * @@generated
	 */
	private class ModelElementsTreeContentProvider implements ITreeContentProvider {
		
		/**
		 * @@generated
		 */	
		private ITreeContentProvider myWorkbenchContentProvider = new <%=importManager.getImportedName(genDiagram.getEditorGen().getApplication() == null ?
				"org.eclipse.ui.model.WorkbenchContentProvider" : "org.eclipse.ui.model.BaseWorkbenchContentProvider")%>();

		/**
		 * @@generated
		 */
		private AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(
				<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
		
		/**
		 * @@generated
		 */
		public Object[] getChildren(Object parentElement) {
			Object[] result = myWorkbenchContentProvider.getChildren(parentElement);
			if (result != null && result.length > 0) {
				return result;
			}
			if (parentElement instanceof IFile) {
				IFile modelFile = (IFile) parentElement;
				IPath resourcePath = modelFile.getFullPath();
				ResourceSet resourceSet = myEditingDomain.getResourceSet();
				try {
					Resource modelResource = resourceSet.getResource(URI.createPlatformResourceURI(resourcePath.toString(), true), true);
					return myAdapterFctoryContentProvier.getChildren(modelResource);
				} catch (WrappedException e) {
					<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError(
							"Unable to load resource: " + resourcePath.toString(), e); //$NON-NLS-1$
				}
				return Collections.EMPTY_LIST.toArray();
			}
			return myAdapterFctoryContentProvier.getChildren(parentElement);
		}

		/**
		 * @@generated
		 */
		public Object getParent(Object element) {
			Object parent = myWorkbenchContentProvider.getParent(element);
			if (parent != null) {
				return parent;
			}
			if (element instanceof EObject) {
				EObject eObject = (EObject) element;
				if (eObject.eContainer() == null && eObject.eResource().getURI().isFile()) {
					String path = eObject.eResource().getURI().path();
					return ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(path));
				}
				return myAdapterFctoryContentProvier.getParent(eObject);
			}
			return null;
		}

		/**
		 * @@generated
		 */
		public boolean hasChildren(Object element) {
			if (element instanceof IFile) {
				return isValidModelFile((IFile) element);
			}
			return myWorkbenchContentProvider.hasChildren(element) || myAdapterFctoryContentProvier.hasChildren(element);
		}

		/**
		 * @@generated
		 */
		public Object[] getElements(Object inputElement) {
			Object[] elements = myWorkbenchContentProvider.getElements(inputElement);
			return elements;
		}

		/**
		 * @@generated
		 */
		public void dispose() {
			myWorkbenchContentProvider.dispose();
			myAdapterFctoryContentProvier.dispose();
		}

		/**
		 * @@generated
		 */
		public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
			myWorkbenchContentProvider.inputChanged(viewer, oldInput, newInput);
			myAdapterFctoryContentProvier.inputChanged(viewer, oldInput, newInput);
		}
		
	}

	/**
	 * @@generated
	 */
	private class ModelElementsTreeLabelProvider implements ILabelProvider {
		
		/**
		 * @@generated
		 */
		private WorkbenchLabelProvider myWorkbenchLabelProvider = new WorkbenchLabelProvider();

		/**
		 * @@generated
		 */
		private AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(
				<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
		
		/**
		 * @@generated
		 */
		public Image getImage(Object element) {
			Image result = myWorkbenchLabelProvider.getImage(element);
			return result != null ? result : myAdapterFactoryLabelProvider.getImage(element);
		}

		/**
		 * @@generated
		 */
		public String getText(Object element) {
			String result = myWorkbenchLabelProvider.getText(element);
			return result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);
		}

		/**
		 * @@generated
		 */
		public void addListener(ILabelProviderListener listener) {
			myWorkbenchLabelProvider.addListener(listener);
			myAdapterFactoryLabelProvider.addListener(listener);
		}

		/**
		 * @@generated
		 */
		public void dispose() {
			myWorkbenchLabelProvider.dispose();
			myAdapterFactoryLabelProvider.dispose();
		}

		/**
		 * @@generated
		 */
		public boolean isLabelProperty(Object element, String property) {
			return myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);
		}

		/**
		 * @@generated
		 */
		public void removeListener(ILabelProviderListener listener) {
			myWorkbenchLabelProvider.removeListener(listener);
			myAdapterFactoryLabelProvider.removeListener(listener);
		}
		
	}
	
	/**
	 * @@generated
	 */
	private class ModelFilesFilter extends ViewerFilter {

		/**
		 * @@generated
		 */
		public boolean select(Viewer viewer, Object parentElement, Object element) {
			if (element instanceof IContainer) {
				return true;
			}
			if (element instanceof IFile) {
				IFile file = (IFile) element;
				return isValidModelFile(file);
			}
			return true;
		}
		
	}
	
	/**
	 * @@generated
	 */
	private class OkButtonEnabler implements ISelectionChangedListener {

		/**
		 * @@generated
		 */
		public void selectionChanged(SelectionChangedEvent event) {
			if (event.getSelection() instanceof IStructuredSelection) {
				IStructuredSelection selection = (IStructuredSelection) event.getSelection();
				if (selection.size() == 1) {
					Object selectedElement = selection.getFirstElement();
					if (selectedElement instanceof <%=importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider")%>) {
						selectedElement = ((<%=importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider")%>) selectedElement).getValue();
					}
					if (selectedElement instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap")%>.Entry) {
						selectedElement = ((<%=importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap")%>.Entry) selectedElement).getValue();
					}
					if (selectedElement instanceof EObject) {
						EObject selectedModelElement = (EObject) selectedElement;
						setOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(selectedModelElement), myView, null, ViewUtil.APPEND,
								true, <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT));
						mySelectedModelElementURI = org.eclipse.emf.ecore.util.EcoreUtil.getURI(selectedModelElement);
						return;
					}
				}
			}
			mySelectedModelElementURI = null;
			setOkButtonEnabled(false);
		}
		
	}

}
<%importManager.emitSortedImports();%>
@


1.18
log
@Unloading resources + disposing editing domain on closing view/dialog
@
text
@@


1.17
log
@GenModelGraphAnalyzer added and used while generating navigator.
@
text
@a21 1
import org.eclipse.emf.edit.domain.EditingDomain;
d63 1
a63 1
	private EObject mySelectedModelElement;
d73 1
a73 1
	private EditingDomain myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();
d146 14
a159 2
		Resource resource = mySelectedModelElement.eResource();
		return resource.getURI().appendFragment(resource.getURIFragment(mySelectedModelElement));
d364 2
a365 2
						mySelectedModelElement = (EObject) selectedElement;
						setOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND,
d367 1
d372 1
a372 1
			mySelectedModelElement = null;
@


1.16
log
@#114200 use 'base' workbench content provider for RCP
@
text
@d181 1
a181 1
					Resource modelResource = resourceSet.getResource(URI.createPlatformResourceURI(resourcePath.toString()), true);
@


1.15
log
@[155966] - No valid diagram root in "Initialize ... diagram file" wizard on XSD generated models
@
text
@a47 1
import org.eclipse.ui.model.WorkbenchContentProvider;
d158 3
a160 2
		 */
		private ITreeContentProvider myWorkbenchContentProvider = new WorkbenchContentProvider();
d165 2
a166 1
		private AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
d184 2
a185 1
					<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to load resource: " + resourcePath.toString(), e); //$NON-NLS-1$
d252 3
d256 6
a261 1
		private AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
d354 2
a355 1
						setOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT));
@


1.14
log
@#154055 Allow shortcut creation for model elements returned by DelegatingWrapperItemProvider
@
text
@d339 3
@


1.13
log
@- ElementChooserDialog title generated
- diagram file extension marked as non-nls
@
text
@d334 10
a343 4
				if (selection.size() == 1 && selection.getFirstElement() instanceof EObject) {
					mySelectedModelElement = (EObject) selection.getFirstElement();
					setOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT));
					return;
@


1.13.2.1
log
@#154055 Allow shortcut creation for model elements returned by DelegatingWrapperItemProvider
@
text
@d334 4
a337 10
				if (selection.size() == 1) {
					Object selectedElement = selection.getFirstElement();
					if (selectedElement instanceof <%=importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider")%>) {
						selectedElement = ((<%=importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider")%>) selectedElement).getValue();
					}
					if (selectedElement instanceof EObject) {
						mySelectedModelElement = (EObject) selectedElement;
						setOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT));
						return;
					}
@


1.13.2.2
log
@[155966] - No valid diagram root in "Initialize ... diagram file" wizard on XSD generated models
@
text
@a338 3
					if (selectedElement instanceof <%=importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap")%>.Entry) {
						selectedElement = ((<%=importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap")%>.Entry) selectedElement).getValue();
					}
@


1.12
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d91 1
@


1.11
log
@#127696 Templates should use new transaction API
@
text
@d6 3
a8 2

importManager.emitPackageStatement(stringBuffer);%>
@


1.10
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d9 2
d14 1
d16 2
d20 2
d26 1
a27 1
import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;
d70 5
d145 3
a147 2
	public EObject getSelectedModelElement() {
		return mySelectedModelElement;
d155 3
d159 4
d175 7
a181 12
				String resourcePath = modelFile.getLocation().toOSString();
				Resource modelResource = ResourceUtil.findResource(resourcePath);
				if (modelResource == null) {
					modelResource = ResourceUtil.create(resourcePath);
				}
				if (!modelResource.isLoaded()) {
					try {
						ResourceUtil.load(modelResource);
					} catch (Exception e) {
						<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Error while loading resource: " + resourcePath, e);
						return null;
					}
d183 1
a183 1
				return myAdapterFctoryContentProvier.getChildren(modelResource);
@


1.9
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d3 5
a7 2
<%GenDiagram genDiagram = (GenDiagram) argument;%>
package <%=genDiagram.getEditorGen().getEditor().getPackageName()%>;
a8 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditorGen().getEditor().getPackageName());%>
@


1.8
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d4 1
a4 1
package <%=genDiagram.getEditorPackageName()%>;
d6 1
a6 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());%>
@


1.7
log
@ImportManager moved to oeg.common
@
text
@d141 1
a141 1
		private AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(<%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
d162 1
a162 1
						<%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Error while loading resource: " + resourcePath, e);
d232 1
a232 1
		private AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(<%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
d317 1
a317 1
					setOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, <%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT));
@


1.6
log
@#125893
Logging methods
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.ImportUtil java.util.*"%>
@


1.5
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d162 1
a162 1
						e.printStackTrace();
@


1.4
log
@Fixed:
#114178
#114179
@
text
@d141 1
a141 1
		private AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(<%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
d232 1
a232 1
		private AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(<%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.getInstance().getItemProvidersAdapterFactory());
d317 1
a317 1
					setOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT));
@


1.3
log
@#114178
Create shortcut functionality added
@
text
@d15 3
d19 2
d47 3
d51 4
d60 6
a65 1
	public <%=genDiagram.getElementChooserClassName()%>(Shell parentShell) {
d68 1
d317 1
a317 1
					setOkButtonEnabled(true);
@


1.2
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.ImportUtil"%>
d98 10
a107 1
		return "<%=genDiagram.getDomainDiagramElement().getGenPackage().getPrefix().toLowerCase()%>".equals(file.getFullPath().getFileExtension());
@


1.1
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@d2 1
a2 1
    imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.ImportUtil"%>
a6 3
import java.util.ArrayList;
import java.util.List;

a10 1
import org.eclipse.emf.common.notify.AdapterFactory;
a12 3
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;
import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;
a41 1
	private AdapterFactory myModelAdapterFactory = null;
a103 14
	private AdapterFactory getModelAdapterFactory() {
		if (myModelAdapterFactory == null) {
			List factories = new ArrayList();
			factories.add(new ResourceItemProviderAdapterFactory());
			factories.add(new <%=importManager.getImportedName(genDiagram.getDomainMetaModel().getQualifiedItemProviderAdapterFactoryClassName())%>());
			factories.add(new ReflectiveItemProviderAdapterFactory());
			myModelAdapterFactory = new ComposedAdapterFactory(factories);
		}
		return myModelAdapterFactory;
	}
	
	/**
	 * @@generated
	 */
d114 1
a114 1
		private AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(getModelAdapterFactory());
d205 1
a205 1
		private AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(getModelAdapterFactory());
@

