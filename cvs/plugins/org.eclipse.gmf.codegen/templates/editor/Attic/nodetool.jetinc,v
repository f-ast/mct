head	1.4;
access;
symbols
	v20081022-1925:1.4
	v20081015-1925:1.4
	v20081008-1925:1.4
	v20081001-1925:1.4
	v20080924-1925:1.4
	v20080917-1925:1.4
	v20080911-1728:1.4
	v20080910-1520:1.4
	v20080903-1520:1.4
	v20080827-1520:1.4
	v20080813-1520:1.4
	v20080806-1520:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2005.09.29.09.49.41;	author atikhomirov;	state dead;
branches;
next	1.3;

1.3
date	2005.09.26.14.51.39;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.26.14.32.37;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.29;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[dstadnik] Use Notation Model as runtime model
@
text
@<%
GenNode genNode = nodeEntry.getGenNode(); 
GenClass genClass = genDiagram.findGenClass(genNode.getDomainMetaClass());
GenClass drtClass = genNode.getDiagramRunTimeClass();
final String domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create(" + importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + genClass.getName() + "())";
%>
	/**
	 * @@generated
	 */
	private void createNodeTool<%=nodeToolIndex%>(PaletteContainer paletteContainer) {

//		ImageDescriptor img = ImageDescriptor.createFromFile(<%=palette.getFactoryClassName()%>.class, "<%=nodeEntry.getSmallIconPath()%>");
		ImageDescriptor img = getImage(<%=domainElementInstanceCreationCode%>);
		CreationFactory creationFactory = new CreationNodeFactory<%=nodeToolIndex%>();
		paletteContainer.add(new CreationToolEntry("<%=nodeEntry.getTitleKey()%>", "<%=nodeEntry.getDescriptionKey()%>", creationFactory, img, img));
	}
	
	/**
	 * @@generated
	 */
	private class CreationNodeFactory<%=nodeToolIndex%> implements CreationFactory {
	
		/**
	     * @@generated
	     */
		public Object getNewObject() {
			<%=importManager.getImportedName(drtClass.getQualifiedInterfaceName())%> diagramNode = <%=importManager.getImportedName(drtClass.getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=drtClass.getName()%>();
			diagramNode.setDomainModelElement(<%=domainElementInstanceCreationCode%>);
			diagramNode.setVisualID(<%=importManager.getImportedName(genNode.getEditPartQualifiedClassName())%>.VISUAL_ID);
<%if (genNode instanceof GenChildNode) {%>
			diagramNode.setGroupID("<%=((GenChildNode) genNode).getGroupID()%>");
<%}%>
			initialize(diagramNode);
			return diagramNode;
		}
		
		/**
	     * @@generated
	     */
		public Object getObjectType() {
<%if (genNode instanceof GenChildNode) {%>
			return <%=importManager.getImportedName("org.eclipse.gmf.diagramrt.ChildNode")%>.class;
<%} else {%>
			return <%=importManager.getImportedName("org.eclipse.gmf.diagramrt.DiagramNode")%>.class;
<%}%>
		}
		
		/**
	     * @@generated
	     */
		private void initialize(<%=importManager.getImportedName(drtClass.getQualifiedInterfaceName())%> diagramNode) {
		// place initialization code for attributes specific to your Diagram RunTime model here
		}
	};
@


1.3
log
@[ashatalin] correctly create instances of the user domain model if "InstanceClassName" property was specified in .ecore file. (using "create(EClass)" method instead of typed "create????()" methods)
@
text
@@


1.2
log
@[ashatalin] Hand-wirtten code for additional initialization in CreationFactory should be subject to "@@generated NOT" protection (generating separate inner class for each palette tool's factory).
@
text
@d5 1
a5 1
final String domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
@


1.1
log
@*** empty log message ***
@
text
@d7 5
d14 16
a29 5
		CreationFactory creationFactory = new CreationFactory() {
			public Object getNewObject() {
				<%=importManager.getImportedName(drtClass.getQualifiedInterfaceName())%> diagramNode = <%=importManager.getImportedName(drtClass.getGenPackage().getQualifiedFactoryInterfaceName())%>.eINSTANCE.create<%=drtClass.getName()%>();
				diagramNode.setDomainModelElement(<%=domainElementInstanceCreationCode%>);
				diagramNode.setVisualID(<%=importManager.getImportedName(genNode.getEditPartQualifiedClassName())%>.VISUAL_ID);
d31 1
a31 1
				diagramNode.setGroupID("<%=((GenChildNode) genNode).getGroupID()%>");
d33 8
a40 4
				initialize(diagramNode);
				return diagramNode;
			}
			public Object getObjectType() {
d42 1
a42 1
				return <%=importManager.getImportedName("org.eclipse.gmf.diagramrt.ChildNode")%>.class;
d44 1
a44 1
				return <%=importManager.getImportedName("org.eclipse.gmf.diagramrt.DiagramNode")%>.class;
d46 9
a54 6
			}
			private void initialize(<%=importManager.getImportedName(drtClass.getQualifiedInterfaceName())%> diagramNode) {
				// place initialization code for attributes specific to your Diagram RunTime model here
			}
		};
		paletteContainer.add(new CreationToolEntry("<%=nodeEntry.getTitleKey()%>", "<%=nodeEntry.getDescriptionKey()%>", creationFactory, img, img));
@

