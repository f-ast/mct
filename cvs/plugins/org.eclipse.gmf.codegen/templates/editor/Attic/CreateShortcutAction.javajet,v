head	1.16;
access;
symbols
	v20081022-1925:1.16
	v20081015-1925:1.16
	v20081008-1925:1.16
	v20081001-1925:1.16
	v20080924-1925:1.16
	v20080917-1925:1.16
	v20080911-1728:1.16
	v20080910-1520:1.16
	v20080903-1520:1.16
	v20080827-1520:1.16
	v20080813-1520:1.16
	v20080806-1520:1.16
	v20070608-1300:1.15
	v20070605-1400:1.15
	v20070601-1400:1.15
	v20070525-1500:1.15
	v20070520-1200:1.15
	v20070518-1300:1.15
	v20070504-1000:1.15
	v20070427-0600:1.15
	v20070420-1000:1.15
	v20070413-1300:1.15
	v20070405-1100:1.15
	v20070403-1500:1.15
	v20070330-1300:1.15
	v20060330-1300:1.15
	v20070322-1100:1.14
	v20060316-0600:1.14
	v20070307-0700:1.14
	v20070301-1200:1.14
	v20070228-2000:1.14
	v20070221-1500:1.14
	v20070208-1800:1.14
	v20070202-0200:1.13
	v20070103-0300:1.14
	M4_20:1.14
	v20061222-1800:1.14
	v20061218-1200:1.14
	v20061214-0000:1.14
	v20061120-1300:1.14
	M3_20:1.14
	v20061117-0800:1.14
	v20061027-1200:1.13
	v20061020-1000:1.13
	v20061013-1330:1.13
	v20060919-0800:1.13
	v20060907-1100:1.13
	M1_20:1.13
	v20060904-1500:1.13
	v20060824-1600:1.13
	v20060817-1500:1.13
	v20060728-0500:1.13
	v20060713-1700:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060626-1420:1.13
	v20060620-0400:1.13
	v20060616-1400:1.13
	v20060616-1200:1.13
	v20060609-1400:1.13
	v20060531-1730:1.13
	v20060530-1930:1.13
	v20060526-1200:1.13
	v20060519-1300:1.13
	v20060519-0800:1.13
	v20060512-1000:1.13
	I20060512-1000:1.13
	I20060505-1400:1.13
	I20060428-1300:1.13
	I20060424-0500:1.13
	I20060424-0300:1.13
	M6_10:1.13
	I20060407-1200:1.12
	I20060331-1000:1.12
	I20060324-0300:1.12
	I20060317-1300:1.12
	I20060317-1200:1.12
	I20060316-1300:1.12
	I20060309-1300:1.12
	M5_10:1.11
	S20060303-1600:1.11
	I20060227-1730:1.9
	I20060216-1945:1.9
	I20060210-1715:1.8
	I20060209-1815:1.8
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.16
date	2007.06.13.14.02.28;	author ashatalin;	state dead;
branches;
next	1.15;
commitid	3d5e466ff8ed4567;

1.15
date	2007.03.28.08.49.38;	author dstadnik;	state Exp;
branches;
next	1.14;
commitid	2240460a2c174567;

1.14
date	2006.10.24.14.49.08;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.13.22.22.22;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.01.14.55.16;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.28.18.15.00;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.16.10.30.35;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.08.00.17.45;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.26.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.12.23.10.49;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.10.17.20.28;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.10.16.16.58;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.16
log
@[191855] - Convert /editor/CreateShortcutAction.javajet template to xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.editor" class="CreateShortcutActionGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);

importManager.getImportedName("org.eclipse.core.commands.ExecutionException");
importManager.getImportedName("org.eclipse.core.commands.operations.OperationHistoryFactory");
importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor");
importManager.getImportedName("org.eclipse.emf.common.util.URI");
importManager.getImportedName("org.eclipse.emf.common.util.WrappedException");
importManager.getImportedName("org.eclipse.emf.ecore.EObject");
importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand");
importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest");
importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter");
importManager.getImportedName("org.eclipse.gmf.runtime.notation.View");
importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node");
importManager.getImportedName("org.eclipse.jface.action.IAction");
importManager.getImportedName("org.eclipse.jface.viewers.ISelection");
importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection");
importManager.getImportedName("org.eclipse.jface.window.Window");
importManager.getImportedName("org.eclipse.swt.widgets.Shell");
importManager.getImportedName("org.eclipse.ui.IObjectActionDelegate");
importManager.getImportedName("org.eclipse.ui.IWorkbenchPart");

importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=genDiagram.getCreateShortcutActionClassName()%> implements IObjectActionDelegate {

	/**
	 * @@generated
	 */
	private <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%> mySelectedElement;
	
	/**
	 * @@generated
	 */
	private Shell myShell;

	/**
	 * @@generated
	 */
	public void setActivePart(IAction action, IWorkbenchPart targetPart) {
		myShell = targetPart.getSite().getShell();
	}

	/**
	 * @@generated
	 */
	public void selectionChanged(IAction action, ISelection selection) {
		mySelectedElement = null;
		if (selection instanceof IStructuredSelection) {
			IStructuredSelection structuredSelection = (IStructuredSelection) selection;
			if (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>) {
				mySelectedElement = (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>) structuredSelection.getFirstElement();
			}
		}
		action.setEnabled(isEnabled());
	}
	
	/**
	 * @@generated
	 */
	private boolean isEnabled() {
		return mySelectedElement != null;
	}

	/**
	 * @@generated
	 */
	public void run(IAction action) {
		final View view = (View) mySelectedElement.getModel();
<%if(genDiagram.getEditorGen().getApplication() == null) {%>
		<%=importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName())%> elementChooser = new <%=importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName())%>(myShell, view);
		int result = elementChooser.open();
		if (result != Window.OK) {
			return;
		}
		URI selectedModelElementURI = elementChooser.getSelectedModelElementURI();
		final EObject selectedElement;
		try {
			selectedElement = mySelectedElement.getEditingDomain().getResourceSet().getEObject(selectedModelElementURI, true);
		} catch (WrappedException e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Exception while loading object: " + selectedModelElementURI.toString(), e); //$NON-NLS-1$
			return;
		}

		if (selectedElement == null) {
			return;
		}
		CreateViewRequest.ViewDescriptor viewDescriptor = new CreateViewRequest.ViewDescriptor(new EObjectAdapter(selectedElement), Node.class, null, <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
		<%=importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand")%> command = new CreateCommand(mySelectedElement.getEditingDomain(), viewDescriptor, view);
		command = command.compose(new <%=importManager.getImportedName(genDiagram.getCreateShortcutDecorationsCommandQualifiedClassName())%>(mySelectedElement.getEditingDomain(), view, viewDescriptor));
		try {
			OperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);
		} catch (ExecutionException e) {
			<%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.getInstance().logError("Unable to create shortcut", e); //$NON-NLS-1$
		}
<%} else {%>
		org.eclipse.emf.ecore.resource.Resource resource =
				<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.openModel(
						myShell, "Select model to reference", mySelectedElement.getEditingDomain());
		if (resource == null || resource.getContents().isEmpty()) {
			return;
		}
		ShortcutCreationWizard wizard = new ShortcutCreationWizard((EObject) resource.getContents().get(0), view, mySelectedElement.getEditingDomain());
		wizard.setWindowTitle("Create shortcut");
		<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.runWizard(myShell, wizard, "CreateShortcut"); //$NON-NLS-1$
<%}%>
	}
}
<%importManager.emitSortedImports();%>
@


1.15
log
@[168660] Support shortcuts in RCP applications
@
text
@@


1.14
log
@D&D from diagram content navigator to Diagram surface.
@
text
@d56 21
d79 1
d105 6
a110 12
	}

	/**
	 * @@generated
	 */
	public void selectionChanged(IAction action, ISelection selection) {
		mySelectedElement = null;
		if (selection instanceof IStructuredSelection) {
			IStructuredSelection structuredSelection = (IStructuredSelection) selection;
			if (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>) {
				mySelectedElement = (<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>) structuredSelection.getFirstElement();
			}
d112 4
a115 8
		action.setEnabled(isEnabled());
	}
	
	/**
	 * @@generated
	 */
	private boolean isEnabled() {
		return mySelectedElement != null;
a116 1

@


1.13
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@a11 2
importManager.getImportedName("org.eclipse.core.runtime.IAdaptable");
importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor");
a14 1
importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation");
a15 2
importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory");
importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult");
d76 3
a78 16
		CreateCommand command = new CreateCommand(mySelectedElement.getEditingDomain(), viewDescriptor, view) {

			protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
				CommandResult result = super.doExecuteWithResult(monitor, info);
				View view = (View) ((IAdaptable) result.getReturnValue()).getAdapter(View.class);
				if (view != null && view.getEAnnotation("Shortcut") == null) { //$NON-NLS-1$
<%/* Shortcut was created on the diagram with the same modelID */%>
					EAnnotation shortcutAnnotation = EcoreFactory.eINSTANCE.createEAnnotation();
					shortcutAnnotation.setSource("Shortcut"); //$NON-NLS-1$
					shortcutAnnotation.getDetails().put("modelID", <%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID); //$NON-NLS-1$
					view.getEAnnotations().add(shortcutAnnotation);
				}
				return result;
			}
			
		};		try {
@


1.12
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d8 1
a8 1
<%importManager.emitPackageStatement(stringBuffer);%>
d10 25
a34 23
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.operations.OperationHistoryFactory;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.common.util.WrappedException;
import org.eclipse.emf.ecore.EAnnotation;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand;
import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;
import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
import org.eclipse.gmf.runtime.notation.View;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IObjectActionDelegate;
import org.eclipse.ui.IWorkbenchPart;
<%importManager.markImportLocation(stringBuffer);%>
d80 1
a80 1
		CreateViewRequest.ViewDescriptor viewDescriptor = new CreateViewRequest.ViewDescriptor(new EObjectAdapter(selectedElement), <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
d86 6
a91 4
				if (view != null) {
					EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();
					annotation.setSource("Shortcut"); //$NON-NLS-1$
					view.getEAnnotations().add(annotation);
d96 1
a96 2
		};
		try {
@


1.11
log
@#127696 Templates should use new transaction API
@
text
@d6 3
a8 2

importManager.emitPackageStatement(stringBuffer);%>
@


1.10
log
@#127696 Templates should use new transaction API
@
text
@d14 2
d65 9
a73 1
		final EObject selectedElement = elementChooser.getSelectedModelElement();
a76 1
		
d85 1
a85 1
					annotation.setSource("Shortcutted"); //$NON-NLS-1$
@


1.9
log
@#127696
Templates should use new transaction API
(not finished)
@
text
@d86 1
a86 1
			EcoreDiagramEditorPlugin.getInstance().logError("Unable to create shortcut", e); //$NON-NLS-1$
@


1.8
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d9 5
d17 4
a20 4
import org.eclipse.gmf.runtime.diagram.core.services.ViewService;
import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;
import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;
import org.eclipse.gmf.runtime.notation.Node;
d68 12
a79 7
		OperationUtil.runAsUnchecked(new MRunnable() {
			public Object run() {
				Node shortcutNode = ViewService.createNode(view, selectedElement, null, <%=importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
				EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();
				annotation.setSource("Shortcutted"); //$NON-NLS-1$
				shortcutNode.getEAnnotations().add(annotation);
				return null;
d81 7
a87 2
		});
		
@


1.7
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d3 5
a7 2
<%GenDiagram genDiagram = (GenDiagram) argument;%>
package <%=genDiagram.getEditorGen().getEditor().getPackageName()%>;
a8 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditorGen().getEditor().getPackageName());%>
@


1.6
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d4 1
a4 1
package <%=genDiagram.getEditorPackageName()%>;
d6 1
a6 1
<%ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());%>
@


1.5
log
@ImportManager moved to oeg.common
@
text
@d63 1
a63 1
				Node shortcutNode = ViewService.createNode(view, selectedElement, null, <%=importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
@


1.4
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.ImportUtil"%>
@


1.3
log
@Fixed:
#114178
#114179
@
text
@d63 1
a63 1
				Node shortcutNode = ViewService.createNode(view, selectedElement, null, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
@


1.2
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@a6 3
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
a10 2
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy;
d14 1
d29 8
a36 1
	private FileEditorInputProxy mySelectedElement;
a37 1
	private DiagramEditor myDiagramEditor;
a42 1
		myDiagramEditor = targetPart instanceof DiagramEditor ? (DiagramEditor) targetPart : null;
d50 2
a51 1
		<%=importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName())%> elementChooser = new <%=importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName())%>(myShell);
d63 4
a66 10
				Node shortcutNode = ViewService.createNode(myDiagramEditor.getDiagram(), selectedElement, null, <%=importManager.getImportedName(genDiagram.getPluginQualifiedClassName())%>.DIAGRAM_PREFERENCES_HINT);
				
				Collection allNodes = new ArrayList();
				getAllNodes(allNodes, shortcutNode);
				for (Iterator it = allNodes.iterator(); it.hasNext();) {
					Node nextNode = (Node) it.next();
					EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();
					annotation.setSource("Shortcutted"); //$NON-NLS-1$
					nextNode.getEAnnotations().add(annotation);
				}
a71 10
	
	/**
	 * @@generated
	 */
	private void getAllNodes(Collection initial, Node node) {
		initial.add(node);
		for (Iterator it = node.getChildren().iterator(); it.hasNext();) {
			getAllNodes(initial, (Node) it.next());
		}
	}
d80 2
a81 2
			if (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof FileEditorInputProxy) {
				mySelectedElement = (FileEditorInputProxy) structuredSelection.getFirstElement();
d91 1
a91 1
		return myDiagramEditor != null && mySelectedElement != null;
@


1.1
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@d2 1
a2 1
    imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.ImportUtil"%>
@

