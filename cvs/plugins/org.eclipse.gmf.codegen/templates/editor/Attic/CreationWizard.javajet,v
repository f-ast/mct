head	1.24;
access;
symbols
	v20081022-1925:1.24
	v20081015-1925:1.24
	v20081008-1925:1.24
	v20081001-1925:1.24
	v20080924-1925:1.24
	v20080917-1925:1.24
	v20080911-1728:1.24
	v20080910-1520:1.24
	v20080903-1520:1.24
	v20080827-1520:1.24
	v20080813-1520:1.24
	v20080806-1520:1.24
	RC3_20:1.23
	v20070614-1400:1.23
	v20070608-1300:1.23
	v20070605-1400:1.23
	v20070601-1400:1.23
	v20070525-1500:1.23
	v20070520-1200:1.23
	v20070518-1300:1.23
	v20070504-1000:1.23
	v20070427-0600:1.23
	v20070420-1000:1.23
	v20070413-1300:1.23
	v20070405-1100:1.23
	v20070403-1500:1.23
	v20070330-1300:1.23
	v20060330-1300:1.23
	v20070322-1100:1.23
	v20060316-0600:1.23
	v20070307-0700:1.23
	v20070301-1200:1.23
	v20070228-2000:1.23
	v20070221-1500:1.23
	v20070208-1800:1.23
	v20070202-0200:1.12
	v20070103-0300:1.23
	M4_20:1.23
	v20061222-1800:1.23
	v20061218-1200:1.22
	v20061214-0000:1.22
	v20061120-1300:1.20
	M3_20:1.19
	v20061117-0800:1.19
	v20061027-1200:1.12
	v20061020-1000:1.12
	v20061013-1330:1.15
	v20060919-0800:1.12
	v20060907-1100:1.12
	M1_20:1.12
	v20060904-1500:1.12
	v20060824-1600:1.12
	v20060817-1500:1.12
	v20060728-0500:1.12
	v20060713-1700:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20060627-1200:1.12
	v20060626-1420:1.12
	v20060620-0400:1.12
	v20060616-1400:1.12
	v20060616-1200:1.12
	v20060609-1400:1.12
	v20060531-1730:1.12
	v20060530-1930:1.12
	v20060526-1200:1.11
	v20060519-1300:1.10
	v20060519-0800:1.10
	v20060512-1000:1.10
	I20060512-1000:1.10
	I20060505-1400:1.10
	I20060428-1300:1.10
	I20060424-0500:1.10
	I20060424-0300:1.10
	M6_10:1.9
	I20060407-1200:1.9
	I20060331-1000:1.9
	I20060324-0300:1.9
	I20060317-1300:1.9
	I20060317-1200:1.9
	I20060316-1300:1.9
	I20060309-1300:1.9
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.8
	I20060216-1945:1.8
	I20060210-1715:1.8
	I20060209-1815:1.8
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.24
date	2007.06.19.19.26.17;	author dstadnik;	state dead;
branches;
next	1.23;
commitid	611446782dd84567;

1.23
date	2006.12.19.14.26.10;	author atikhomirov;	state Exp;
branches;
next	1.22;
commitid	43e54587f67b4567;

1.22
date	2006.11.22.14.59.29;	author dstadnik;	state Exp;
branches;
next	1.21;
commitid	2e20456465d04567;

1.21
date	2006.11.21.11.43.34;	author dstadnik;	state Exp;
branches;
next	1.20;
commitid	109b4562e6644567;

1.20
date	2006.11.17.10.46.09;	author dstadnik;	state Exp;
branches;
next	1.19;
commitid	5576455d92f04567;

1.19
date	2006.11.03.12.28.31;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.10.24.14.37.53;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.10.16.17.42.17;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.10.16.12.50.45;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.03.08.32.24;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.09.29.19.06.48;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.27.17.03.35;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.29.17.17.18;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.26.14.16.24;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.20.13.24.47;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.08.00.17.45;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.26.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.05.19.16.56;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.24
log
@[192848] Rewrite creation wizard and ui contributors in xpand
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.editor" class="CreationWizardGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final boolean standaloneDomainModel = !genDiagram.getEditorGen().isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.jface.dialogs.ErrorDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.PartInitException;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=importManager.getCompilationUnitName()%> extends Wizard implements INewWizard {

	/**
	 * @@generated
	 */
	private IWorkbench workbench;

	/**
	 * @@generated
	 */
    protected IStructuredSelection selection;

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%> diagramModelFilePage;
<%if (standaloneDomainModel) {%>

	/**
	 * @@generated
	 */
	protected <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%> domainModelFilePage;
<%}%>

	/**
	 * @@generated
	 */
	protected Resource diagram;

	/**
	 * @@generated
	 */
	private boolean openNewlyCreatedDiagramEditor = true;

	/**
	 * @@generated
	 */
    public IWorkbench getWorkbench() {
        return workbench;
    }

	/**
	 * @@generated
	 */
	public IStructuredSelection getSelection() {
        return selection;
    }

	/**
	 * @@generated
	 */
	public final Resource getDiagram() {
		return diagram;
	}

	/**
	 * @@generated
	 */
	public final boolean isOpenNewlyCreatedDiagramEditor() {
		return openNewlyCreatedDiagramEditor;
	}

	/**
	 * @@generated
	 */
	public void setOpenNewlyCreatedDiagramEditor(boolean openNewlyCreatedDiagramEditor) {
		this.openNewlyCreatedDiagramEditor = openNewlyCreatedDiagramEditor;
	}

	/**
	 * @@generated
	 */
	public void init(IWorkbench workbench, IStructuredSelection selection) {
        this.workbench = workbench;
        this.selection = selection;
		setWindowTitle("New <%=genDiagram.getEditorGen().getModelID()%> Diagram");
<%
final String iconNameStem;
// @@see Generator#generateWizardBanner
if (genDiagram.getDomainDiagramElement() != null) {
	iconNameStem = genDiagram.getDomainDiagramElement().getGenPackage().getPrefix();
} else {
	iconNameStem = ""; //$NON-NLS-1$
}
final String pluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
%>
		setDefaultPageImageDescriptor(<%=pluginClassName%>.getBundledImageDescriptor("icons/wizban/New<%=iconNameStem%>Wizard.gif")); //$NON-NLS-1$
		setNeedsProgressMonitor(true);
	}

	/**
	 * @@generated
	 */
	public void addPages() {
		diagramModelFilePage = new <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%>("DiagramModelFile", getSelection(), "<%=genDiagram.getEditorGen().getDiagramFileExtension()%>"); //$NON-NLS-1$ //$NON-NLS-2$
		diagramModelFilePage.setTitle("Create <%=genDiagram.getEditorGen().getModelID()%> Diagram");
<%if (standaloneDomainModel) {%>
		diagramModelFilePage.setDescription("Select file that will contain diagram model.");
<%} else {%>
		diagramModelFilePage.setDescription("Select file that will contain diagram and domain models.");
<%}%>
		addPage(diagramModelFilePage);
<%if (standaloneDomainModel) {%>

		domainModelFilePage = new <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%>("DomainModelFile", getSelection(), "<%=genDiagram.getEditorGen().getDomainFileExtension()%>"); //$NON-NLS-1$ //$NON-NLS-2$
		domainModelFilePage.setTitle("Create <%=genDiagram.getEditorGen().getModelID()%> Diagram");
		domainModelFilePage.setDescription("Select file that will contain domain model.");
		addPage(domainModelFilePage);
<%}%>
	}

	/**
	 * @@generated
	 */
	public boolean performFinish() {
		IRunnableWithProgress op =
<%if (genDiagram.getEditorGen().getApplication() == null) {%>
				new <%=importManager.getImportedName("org.eclipse.ui.actions.WorkspaceModifyOperation")%>(null) {

			protected void execute(IProgressMonitor monitor) throws CoreException, InterruptedException {
<%} else {%>
				new IRunnableWithProgress() {

			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
<%}%>
				diagram = <%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.createDiagram(diagramModelFilePage.getURI(),
<%if (standaloneDomainModel) {%>
						domainModelFilePage.getURI(),
<%}%>
						monitor);
				if (isOpenNewlyCreatedDiagramEditor() && diagram != null) {
					try {
						<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.openDiagram(diagram);
					} catch (PartInitException e) {
						ErrorDialog.openError(getContainer().getShell(), "Error opening diagram editor", null, e.getStatus());
					}
				}
			}
		};
		try {
			getContainer().run(false, true, op);
		} catch (InterruptedException e) {
			return false;
		} catch (InvocationTargetException e) {
			if (e.getTargetException() instanceof CoreException) {
				ErrorDialog.openError(getContainer().getShell(), "Creation Problems", null, ((CoreException) e.getTargetException()).getStatus());
			} else {
				<%=pluginClassName%>.getInstance().logError("Error creating diagram", e.getTargetException()); //$NON-NLS-1$
			}
			return false;
		}
		return diagram != null;
	}
}
<%importManager.emitSortedImports();%>
@


1.23
log
@no reason to have subclasses just to pass plain string value
@
text
@@


1.22
log
@[165303] Use one more page in generated wizard to ask for model file when standalone domain model option is set
@
text
@d122 1
a122 6
		diagramModelFilePage = new <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%>("DiagramModelFile", getSelection()) { //$NON-NLS-1$

			protected String getExtension() {
				return "<%=genDiagram.getEditorGen().getDiagramFileExtension()%>"; //$NON-NLS-1$
			}
		};
d132 1
a132 6
		domainModelFilePage = new <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%>("DomainModelFile", getSelection()) { //$NON-NLS-1$

			protected String getExtension() {
				return "<%=genDiagram.getEditorGen().getDomainFileExtension()%>"; //$NON-NLS-1$
			}
		};
@


1.21
log
@refactor: pass uris to diagram editor util
@
text
@d6 1
d43 8
a50 1
	protected <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%> page;
d122 25
a146 4
		page = new <%=importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName())%>("CreationWizardPage", getSelection()); //$NON-NLS-1$
		page.setTitle("Create <%=genDiagram.getEditorGen().getModelID()%> Diagram");
		page.setDescription("Create a new <%=genDiagram.getEditorGen().getModelID()%> diagram.");
		addPage(page);
d163 1
a163 2
<%final boolean standaloneDomainModel = !genDiagram.getEditorGen().isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;%>
				diagram = <%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.createDiagram(page.getDiagramURI(),
d165 1
a165 1
						page.getModelURI(),
@


1.20
log
@catch PartInitException in RCP
@
text
@d134 6
a139 1
				diagram = <%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.createDiagram(page.getContainerFullPath(), page.getFileName(), monitor);
@


1.19
log
@remove deps from core.resources
@
text
@d21 1
d136 5
a140 1
					<%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.openDiagram(diagram);
@


1.18
log
@remove unused parameters
@
text
@d14 1
a14 1
import org.eclipse.emf.common.util.URI;
d46 1
a46 1
	protected URI diagramURI;
d70 2
a71 2
	public final URI getDiagramURI() {
		return diagramURI;
d133 4
a136 7
				diagramURI = <%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.createAndOpenDiagram(
						page.getContainerFullPath(),
						page.getFileName(),
						getWorkbench().getActiveWorkbenchWindow(),
						monitor,
						isOpenNewlyCreatedDiagramEditor(),
						true);
d151 1
a151 1
		return diagramURI != null;
@


1.17
log
@#114200 no workspace operation in rcp
@
text
@a133 1
						page.getDiagramFileCreator(),
a135 2
						page.getInitialContents(),
						<%=importManager.getImportedName(genDiagram.getEditPartQualifiedClassName())%>.MODEL_ID,
@


1.16
log
@#114200 remove resource deps from wizard
@
text
@a20 1

d123 3
a125 7
<%
GenApplication application = genDiagram.getEditorGen().getApplication();
String wmofqn = application == null ?
		"org.eclipse.ui.actions.WorkspaceModifyOperation" :
		application.getApplicationQualifiedClassName() + ".WorkspaceModifyOperation";
%>
		IRunnableWithProgress op = new <%=importManager.getImportedName(wmofqn)%>(null) {
d128 5
@


1.15
log
@#114200 remove ide dependency
@
text
@a11 1
import org.eclipse.core.resources.IFile;
d14 1
d27 1
a27 1
public class <%=genDiagram.getCreationWizardClassName()%> extends Wizard implements INewWizard {
d47 1
a47 1
	protected IFile diagramFile;
d71 2
a72 2
	public final IFile getDiagramFile() {
		return diagramFile;
d133 1
a133 1
				diagramFile = <%=importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName())%>.createAndOpenDiagram(
d157 1
a157 1
		return diagramFile != null;
@


1.14
log
@#114200 do not use wizard from ide for RCP
@
text
@d16 1
a20 1
import org.eclipse.ui.actions.WorkspaceModifyOperation;
d124 7
a130 1
		WorkspaceModifyOperation op = new WorkspaceModifyOperation(null) {
d153 1
a153 1
				<%=pluginClassName%>.getInstance().logError("Error creating diagram", e.getTargetException());
@


1.13
log
@#114200 remove gmf runtime ide dependencies
@
text
@d17 2
a20 1
import org.eclipse.ui.wizards.newresource.BasicNewResourceWizard;
d27 11
a37 1
public class <%=genDiagram.getCreationWizardClassName()%> extends BasicNewResourceWizard {
d57 21
d93 2
a94 1
		super.init(workbench, selection);
a152 7

	/**
	 * @@generated
	 */
	public final IFile getDiagramFile() {
		return diagramFile;
	}
@


1.12
log
@#141865 Icon not displayed for the wizard banner
Wizard banner image and wizard/editor icon are generated now with EMF facility for coloured .gifs
Keyword added to iconPath values to allow reference icons from EMF editor
@
text
@d10 6
a15 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards.EditorCreationWizard;
d18 4
d26 6
a31 1
public class <%=genDiagram.getCreationWizardClassName()%> extends EditorCreationWizard {
d36 19
a54 6
	public void addPages() {
		super.addPages();
		if (page == null) {
			page = new <%=genDiagram.getCreationWizardPageClassName()%>(getWorkbench(), getSelection());
		}
		addPage(page);
d62 1
a62 1
		setWindowTitle("New <%=genDiagram.getEditorGen().getModelID()%> Diagram"); //$NON-NLS-1$
d69 1
a69 1
	iconNameStem = "";
d76 51
d128 1
@


1.11
log
@#114175 allow to create diagram editor without domain model
@
text
@d2 1
a2 1
    imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
a4 1
final GenModel genModel = genDiagram.getEditorGen().getDomainGenModel();
d36 11
a46 4
<%if (genModel != null) {%>
		setDefaultPageImageDescriptor(<%=genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()%>.getBundledImageDescriptor(
			"icons/full/wizban/New<%=genModel.getModelName()%>.gif")); //$NON-NLS-1$
<%}%>
@


1.10
log
@Using modelID in the UI instead of model name.
@
text
@d37 1
d40 1
@


1.9
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d36 1
a36 1
		setWindowTitle("New <%=genModel.getModelName()%> Diagram"); //$NON-NLS-1$
@


1.8
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d7 3
a9 2

importManager.emitPackageStatement(stringBuffer);%>
@


1.7
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d2 7
a8 4
    imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.*"%>
<%GenDiagram genDiagram = (GenDiagram) argument;%>
<%GenModel genModel = genDiagram.getEditorGen().getDomainGenModel();%>
package <%=genDiagram.getEditorGen().getEditor().getPackageName()%>;
@


1.6
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d5 1
a5 1
package <%=genDiagram.getEditorPackageName()%>;
@


1.5
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d4 1
a4 1
<%GenModel genModel = genDiagram.getEMFGenModel();%>
d33 1
a33 1
		setDefaultPageImageDescriptor(<%=genDiagram.getPlugin().getActivatorQualifiedClassName()%>.getBundledImageDescriptor(
@


1.4
log
@#117731 icons defined has no effect in the generated code
@
text
@d33 1
a33 1
		setDefaultPageImageDescriptor(<%=genDiagram.getPluginQualifiedClassName()%>.getBundledImageDescriptor(
@


1.3
log
@#116031 avoid hardcoded class names in templates
@
text
@d33 1
a33 1
		setDefaultPageImageDescriptor(<%=genDiagram.getPluginQualifiedClassName()%>.getImageDescriptor(
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d14 1
a14 1
public class CreationWizard extends EditorCreationWizard {
d22 1
a22 1
			page = new CreationWizardPage(getWorkbench(), getSelection());
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d4 1
a4 1
<%GenModel genModel = genDiagram.getEmfGenModel();%>
@

