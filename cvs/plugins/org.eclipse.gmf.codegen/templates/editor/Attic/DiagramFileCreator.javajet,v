head	1.17;
access;
symbols
	v20081022-1925:1.17
	v20081015-1925:1.17
	v20081008-1925:1.17
	v20081001-1925:1.17
	v20080924-1925:1.17
	v20080917-1925:1.17
	v20080911-1728:1.17
	v20080910-1520:1.17
	v20080903-1520:1.17
	v20080827-1520:1.17
	v20080813-1520:1.17
	v20080806-1520:1.17
	v20070202-0200:1.11
	v20061027-1200:1.11
	v20061020-1000:1.11
	v20061013-1330:1.12
	v20060919-0800:1.11
	v20060907-1100:1.11
	M1_20:1.11
	v20060904-1500:1.11
	v20060824-1600:1.11
	v20060817-1500:1.11
	v20060728-0500:1.11
	v20060713-1700:1.11
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	v20060627-1200:1.11
	v20060626-1420:1.11
	v20060620-0400:1.11
	v20060616-1400:1.11
	v20060616-1200:1.11
	v20060609-1400:1.11
	v20060531-1730:1.10
	v20060530-1930:1.10
	v20060526-1200:1.10
	v20060519-1300:1.10
	v20060519-0800:1.10
	v20060512-1000:1.10
	I20060512-1000:1.10
	I20060505-1400:1.10
	I20060428-1300:1.10
	I20060424-0500:1.10
	I20060424-0300:1.10
	M6_10:1.10
	I20060407-1200:1.10
	I20060331-1000:1.10
	I20060324-0300:1.10
	I20060317-1300:1.10
	I20060317-1200:1.10
	I20060316-1300:1.10
	I20060309-1300:1.10
	M5_10:1.9
	S20060303-1600:1.9
	I20060227-1730:1.9
	I20060216-1945:1.9
	I20060210-1715:1.9
	I20060209-1815:1.9
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.17
date	2006.10.24.17.25.11;	author dstadnik;	state dead;
branches;
next	1.16;

1.16
date	2006.10.24.15.55.35;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.24.14.37.53;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.10.24.14.03.29;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.10.16.12.50.45;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.27.17.03.35;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.08.13.05.28;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.26.18.36.27;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.15.00.13.01;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.17
log
@remove file creator template
@
text
@<%@@ jet package="org.eclipse.gmf.codegen.templates.editor" class="DiagramFileCreatorGenerator"
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.common.codegen.*"%>
<%
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
%>
<%@@ include file="../copyright4java.jetinc"%>
<%importManager.emitPackageStatement(stringBuffer);%>

import java.io.ByteArrayInputStream;

import org.eclipse.jface.dialogs.ErrorDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IResourceStatus;
import org.eclipse.core.resources.ResourcesPlugin;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.NullProgressMonitor;
<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=importManager.getCompilationUnitName()%> {

	/**
	 * @@generated
	 */
	public static IFile createNewFile(IPath containerPath, String fileName, Shell shell) {
		IPath newFilePath = containerPath.append(fileName);
		IFile newFileHandle = ResourcesPlugin.getWorkspace().getRoot().getFile(newFilePath);
		try {
			createFile(newFileHandle);
		} catch (CoreException e) {
			ErrorDialog.openError(shell, "Creation Problems", null, e.getStatus());
			return null;
		}
		return newFileHandle;
	}

	/**
	 * @@generated
	 */
	protected static void createFile(IFile fileHandle) throws CoreException {
		try {
			fileHandle.create(new ByteArrayInputStream(new byte[0]), false, new NullProgressMonitor());
		} catch (CoreException e) {
			// If the file already existed locally, just refresh to get contents
			if (e.getStatus().getCode() == IResourceStatus.PATH_OCCUPIED) {
				fileHandle.refreshLocal(IResource.DEPTH_ZERO, null);
			} else {
				throw e;
			}
		}
	}
}
<%importManager.emitSortedImports();%>
@


1.16
log
@simplify file names handling
@
text
@@


1.15
log
@remove unused parameters
@
text
@a4 1
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
a5 1
final GenApplication application = editorGen.getApplication();
d32 2
a33 78
	private static <%=importManager.getCompilationUnitName()%> INSTANCE = new <%=importManager.getCompilationUnitName()%>();

	/**
	 * @@generated
	 */
	public static <%=importManager.getCompilationUnitName()%> getInstance() {
		return INSTANCE;
	}

	/**
	 * @@generated
	 */
	public static boolean exists(IPath path) {
<%if (application == null) {%>
		return ResourcesPlugin.getWorkspace().getRoot().exists(path);
<%} else {%>
		return path.toFile().exists();
<%}%>
	}

	/**
	 * @@generated
	 */
	public String getExtension() {
		return ".<%=editorGen.getDiagramFileExtension()%>"; //$NON-NLS-1$
	}

	/**
	 * @@generated
	 */
	public String getUniqueFileName(IPath containerPath, String fileName) {
		int nFileNumber = 1;
		fileName = removeExtensionFromFileName(fileName);
		String newFileName = fileName;
		IPath diagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));
<%if (!editorGen.isSameFileForDiagramAndModel()) {%>
		IPath modelFilePath = containerPath.append(newFileName + ".<%=editorGen.getDomainFileExtension()%>"); //$NON-NLS-1$
<%}%>
		while (exists(diagramFilePath)
<%if (!editorGen.isSameFileForDiagramAndModel()) {%>
				|| exists(modelFilePath)
<%}%>
				) {
			nFileNumber++;
			newFileName = fileName + nFileNumber;
			diagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));
<%if (!editorGen.isSameFileForDiagramAndModel()) {%>
			modelFilePath = containerPath.append(newFileName + ".<%=editorGen.getDomainFileExtension()%>"); //$NON-NLS-1$
<%}%>
		}
		return newFileName;
	}

	/**
	 * @@generated
	 */
	public String appendExtensionToFileName(String fileName) {
		if (!fileName.endsWith(getExtension())) {
			return fileName + getExtension();
		}
		return fileName;
	}

	/**
	 * @@generated
	 */
	private String removeExtensionFromFileName(String fileName) {
		if (fileName.endsWith(getExtension())) {
			return fileName.substring(0, fileName.length() - getExtension().length());
		}
		return fileName;
	}

	/**
	 * @@generated
	 */
	public IFile createNewFile(IPath containerPath, String fileName, Shell shell) {
		IPath newFilePath = containerPath.append(appendExtensionToFileName(fileName));
d47 1
a47 1
	protected void createFile(IFile fileHandle) throws CoreException {
@


1.14
log
@[114200] avoid core.resource dep
@
text
@a12 1
import java.io.InputStream;
d110 1
a110 1
	public IFile createNewFile(IPath containerPath, String fileName, InputStream initialContents, Shell shell) {
d114 1
a114 1
			createFile(newFileHandle, initialContents);
d125 1
a125 1
	protected void createFile(IFile fileHandle, InputStream contents) throws CoreException {
d127 1
a127 4
			if (contents == null) {
				contents = new ByteArrayInputStream(new byte[0]);
			}
			fileHandle.create(contents, false, new NullProgressMonitor());
@


1.13
log
@#114200 remove resource deps from wizard
@
text
@d7 1
d48 1
d50 3
@


1.12
log
@#114200 remove gmf runtime ide dependencies
@
text
@d11 13
a23 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;
d29 1
a29 1
public class <%=genDiagram.getDiagramFileCreatorClassName()%> extends DiagramFileCreator {
d34 1
a34 1
	private static <%=genDiagram.getDiagramFileCreatorClassName()%> INSTANCE = new <%=genDiagram.getDiagramFileCreatorClassName()%>();
d39 1
a39 1
	public static DiagramFileCreator getInstance() {
d46 7
a55 1
<%if (!editorGen.isSameFileForDiagramAndModel()) {%>
d60 1
a60 1
	public String getUniqueFileName(<%=importManager.getImportedName("org.eclipse.core.runtime.IPath")%> containerPath, String fileName) {
d64 9
a72 6
		
		<%=importManager.getImportedName("org.eclipse.core.runtime.IPath")%> diagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));
		<%=importManager.getImportedName("org.eclipse.core.runtime.IPath")%> modelFilePath = containerPath.append(appendExtensionToModelFileName(newFileName));
		<%=importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot")%> workspaceRoot = <%=importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin")%>.getWorkspace().getRoot();
		
		while (workspaceRoot.exists(diagramFilePath) || workspaceRoot.exists(modelFilePath)) {
d76 3
a78 1
			modelFilePath = containerPath.append(appendExtensionToModelFileName(newFileName));
d82 11
a92 1
	
d102 1
a102 1
	
d106 29
a134 2
	private String appendExtensionToModelFileName(String fileName) {
		return fileName + ".<%=editorGen.getDomainFileExtension()%>"; //$NON-NLS-1$
a135 1
<%}%>
@


1.11
log
@fix some nls markers
@
text
@a10 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorFileCreator;
d12 1
a12 3
<%
importManager.markImportLocation(stringBuffer);
%>
d17 1
a17 1
public class <%=genDiagram.getDiagramFileCreatorClassName()%> extends IDEEditorFileCreator {
a36 1
	
d38 1
a75 1
	
d78 1
a78 1
<%importManager.emitSortedImports();%>@


1.10
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d77 1
a77 1
		return fileName + ".<%=editorGen.getDomainFileExtension()%>";
@


1.9
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d7 3
a9 2

importManager.emitPackageStatement(stringBuffer);%>
@


1.8
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d4 5
a8 3
GenDiagram genDiagram = (GenDiagram) argument;
GenEditorGenerator editorGen = genDiagram.getEditorGen();%>
package <%=editorGen.getEditor().getPackageName()%>;
a12 1
ImportUtil importManager = new ImportUtil(editorGen.getEditor().getPackageName());
@


1.7
log
@file extensions moved out from genDiagram. Distinct property captures extension of domain model file now
@
text
@d6 1
a6 1
package <%=genDiagram.getEditorPackageName()%>;
d11 1
a11 1
ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
@


1.6
log
@ImportManager moved to oeg.common
@
text
@d3 3
a5 1
<%GenDiagram genDiagram = (GenDiagram) argument;%>
d36 1
a36 1
		return ".<%=genDiagram.getDiagramFileExtension()%>"; //$NON-NLS-1$
d39 1
a39 1
<%if (!genDiagram.isSameFileForDiagramAndModel()) {%>
d75 1
a75 1
		return fileName + ".<%=genDiagram.getDomainDiagramElement().getGenPackage().getPrefix().toLowerCase()%>";
@


1.5
log
@#121427
Fixing problems with re-creation recently removed diagram.
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.* org.eclipse.gmf.codegen.util.ImportUtil"%>
@


1.4
log
@#116031 avoid hardcoded class names in templates
@
text
@d2 1
a2 1
    imports="org.eclipse.gmf.codegen.gmfgen.*"%>
d8 4
d36 41
d78 1
@


1.3
log
@catch up with recent API changes in the runtime
@
text
@d12 1
a12 1
public class DiagramFileCreatorBis extends IDEEditorFileCreator {
d17 1
a17 1
	private static DiagramFileCreatorBis INSTANCE = new DiagramFileCreatorBis();
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d7 1
a7 1
import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.EditorFileCreator;
d12 1
a12 1
public class DiagramFileCreator extends IDEEditorFileCreator {
d17 1
a17 1
	private static DiagramFileCreator INSTANCE = new DiagramFileCreator();
d22 1
a22 1
	public static EditorFileCreator getInstance() {
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d2 1
a2 1
    imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.gmf.codegen.gmfgen.*"%>
@

