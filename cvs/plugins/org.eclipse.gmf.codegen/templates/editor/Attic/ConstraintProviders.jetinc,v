head	1.18;
access;
symbols
	v20081022-1925:1.18
	v20081015-1925:1.18
	v20081008-1925:1.18
	v20081001-1925:1.18
	v20080924-1925:1.18
	v20080917-1925:1.18
	v20080911-1728:1.18
	v20080910-1520:1.18
	v20080903-1520:1.18
	v20080827-1520:1.18
	v20080813-1520:1.18
	v20080806-1520:1.18
	v20070202-0200:1.14
	v20070103-0300:1.17
	M4_20:1.17
	v20061222-1800:1.17
	v20061218-1200:1.17
	v20061214-0000:1.17
	v20061120-1300:1.15
	M3_20:1.15
	v20061117-0800:1.15
	v20061027-1200:1.14
	v20061020-1000:1.14
	v20061013-1330:1.14
	v20060919-0800:1.14
	v20060907-1100:1.14
	M1_20:1.14
	v20060904-1500:1.14
	v20060824-1600:1.14
	v20060817-1500:1.14
	v20060728-0500:1.14
	v20060713-1700:1.14
	R1_0_maintenance:1.14.0.2
	R1_0:1.14
	v20060627-1200:1.14
	v20060626-1420:1.14
	v20060620-0400:1.14
	v20060616-1400:1.14
	v20060616-1200:1.14
	v20060609-1400:1.11
	v20060531-1730:1.11
	v20060530-1930:1.11
	v20060526-1200:1.11
	v20060519-1300:1.11
	v20060519-0800:1.11
	v20060512-1000:1.11
	I20060512-1000:1.11
	I20060505-1400:1.11
	I20060428-1300:1.11
	I20060424-0500:1.10
	I20060424-0300:1.10
	M6_10:1.9
	I20060407-1200:1.9
	I20060331-1000:1.9
	I20060324-0300:1.9
	I20060317-1300:1.9
	I20060317-1200:1.9
	I20060316-1300:1.9
	I20060309-1300:1.9
	M5_10:1.9
	S20060303-1600:1.9
	I20060227-1730:1.6
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.18
date	2007.02.07.00.37.49;	author atikhomirov;	state dead;
branches;
next	1.17;
commitid	c5d45c91f504567;

1.17
date	2006.11.24.18.11.35;	author radvorak;	state Exp;
branches;
next	1.16;
commitid	3760456735c34567;

1.16
date	2006.11.23.11.26.35;	author radvorak;	state Exp;
branches;
next	1.15;
commitid	76844565856a4567;

1.15
date	2006.11.13.16.04.22;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	3621455897854567;

1.14
date	2006.06.15.15.39.00;	author radvorak;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.14.13.56.50;	author radvorak;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.09.19.39.00;	author radvorak;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.25.19.16.05;	author radvorak;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.20.19.36.28;	author radvorak;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.03.18.32.30;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.02.14.15.19;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.01.13.17.36;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.24.20.23.27;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.17.07.33.19;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.08.00.17.45;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.26.12.24.07;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.12.20.53.19;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.10.12.51.22;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.18
log
@complete migration of plugin.xml template to xpand version - constraint providers rewritten
@
text
@<%
GenAuditContainer rootContainer = genDiagram.getEditorGen().getAudits();
if (genDiagram.getEditorGen().hasAudits()) {
	java.util.List containers = rootContainer.getAllAuditContainers();
%>
<extension point="org.eclipse.emf.validation.constraintProviders">
	<?gmfgen generated="true"?>
<%
	java.util.HashMap<GenAuditContainer, String> idMap = new java.util.HashMap<GenAuditContainer, String>();
	for(int i = 0; i < containers.size(); i++) {
		GenAuditContainer container = (GenAuditContainer)containers.get(i);
		idMap.put(container, container.getId() != null ? container.getId() : "category" + Integer.toString(i + 1));
	}
	java.util.HashMap<GenAuditContainer, String> pathMap = new java.util.HashMap<GenAuditContainer, String>();
	for(int i = 0; i < containers.size(); i++) {
		GenAuditContainer category = (GenAuditContainer)containers.get(i);
		java.util.List path = category.getPath();
		StringBuffer id = new StringBuffer();
		for(int pathPos = 0; pathPos < path.size(); pathPos++) {
			if(pathPos > 0) id.append('/');
			id.append(idMap.get(path.get(pathPos)));
		}
		pathMap.put(category, id.toString());
%>
	<category
		id="<%=org.eclipse.gmf.internal.common.codegen.Conversions.escapeXML(id.toString())%>"
		mandatory="false"
		name="<%=org.eclipse.gmf.internal.common.codegen.Conversions.escapeXML(category.getName() != null ? category.getName() : id.toString())%>">
	<![CDATA[<%=category.getDescription() != null ? category.getDescription():""%>]]>
	</category>		
<%
	} // end of categories loop
%>
	<constraintProvider cache="true">
<%
	for(java.util.Iterator packageIt = rootContainer.getAllTargetedModelPackages().iterator(); packageIt.hasNext();) {
		GenPackage genPackage = (GenPackage)packageIt.next();
%>
		<package namespaceUri="<%=genPackage.getNSURI()%>"/>
<%
	} // end of used model packages iteration
	int rulePos = 0;
	for(java.util.Iterator catIt = containers.iterator(); catIt.hasNext();) {
		GenAuditContainer category = (GenAuditContainer)catIt.next();
%>
		<constraints categories="<%=org.eclipse.gmf.internal.common.codegen.Conversions.escapeXML(pathMap.get(category).toString())%>">		
<%
		for(java.util.Iterator it = category.getAudits().iterator(); it.hasNext(); rulePos++) {
			GenAuditRule audit = (GenAuditRule)it.next();
			if(audit.getTarget() == null || (audit.getTarget().getTargetClass() == null)) continue;
			String targetClassName = audit.getTarget().getTargetClassModelQualifiedName();
			String modeAttr = audit.isUseInLiveMode() ? "Live" : "Batch";
			String name = audit.getName() != null ? audit.getName() : audit.getId();
			String message = audit.getMessage() != null ? audit.getMessage() : name + " audit violated";
%>
			<constraint id="<%=org.eclipse.gmf.internal.common.codegen.Conversions.escapeXML(audit.getId())%>"
<%			if(audit.requiresConstraintAdapter()) {%>
				lang="Java" class="<%=audit.getConstraintAdapterQualifiedClassName()%>"
<%			} else { %>
				lang="OCL"
<%			} %>
				name="<%=org.eclipse.gmf.internal.common.codegen.Conversions.escapeXML(name)%>" mode="<%=modeAttr%>"
				severity="<%=audit.getSeverity().getName()%>" statusCode="<%=Integer.toString(200 + rulePos)%>">
<%			if(!audit.requiresConstraintAdapter()) {%>
				<![CDATA[<%=audit.getRule() != null ? audit.getRule().getBody() : ""%>]]>
<%			} %>			
	            <description><![CDATA[<%=audit.getDescription() != null ? audit.getDescription():""%>]]></description>
	            <message><![CDATA[<%=message%>]]></message>
				<target class="<%=targetClassName%>"/>
			</constraint>
<%
		} // end of audits in category
%>
		</constraints>
<%		
	} // end of category loop
%>
	</constraintProvider>
</extension>

<extension point="org.eclipse.emf.validation.constraintBindings">
	<?gmfgen generated="true"?>
<%
	String pluginID = genDiagram.getEditorGen().getPlugin().getID();
	for(java.util.Iterator it = rootContainer.getAllRulesToTargetContextMap().entrySet().iterator(); it.hasNext();) {
		java.util.Map.Entry ctx2Rules = (java.util.Map.Entry)it.next();
		java.util.List rules = (java.util.List)ctx2Rules.getValue();
		if(rules.isEmpty()) continue;
		String ctxID = (String)ctx2Rules.getKey();
		GenAuditRule ruleTarget = (GenAuditRule)rules.get(0);
%>
	<clientContext default="false" id="<%=pluginID%>.<%=ctxID%>">
		<selector class="<%=ruleTarget.getContextSelectorQualifiedClassName()%>"/>
	</clientContext>
	<binding context="<%=pluginID%>.<%=ctxID%>">
<%
		for(java.util.Iterator ruleIt = rules.iterator(); ruleIt.hasNext();) {
			GenAuditRule nextRule = (GenAuditRule)ruleIt.next();
%>	
		<constraint ref="<%=pluginID%>.<%=org.eclipse.gmf.internal.common.codegen.Conversions.escapeXML(nextRule.getId())%>"/>
<%
		} // end of rules in context
%>
	</binding>
<%
	} // end of contexts iteration
%>		
</extension>

<%
	if(genDiagram.isLiveValidationUIFeedback()) { // UIRegisteredClientContext
%>
<extension point="org.eclipse.emf.validation.ui.UIRegisteredClientContext">
	<?gmfgen generated="true"?>
<%
		for(java.util.Iterator it = rootContainer.getAllRulesToTargetContextMap().keySet().iterator(); it.hasNext();) {
			String qualifiedCtxID = pluginID + "." + (String)it.next();
%>
	<clientContext id="<%=qualifiedCtxID%>"/>
<%
		} // URI registered ctx iteration
%>
</extension>
<%
	} // UIRegisteredClientContext
%>
<%
}
%>@


1.17
log
@[165474] [Validation] LIVE mode audits violation should provide UI feedback
@
text
@@


1.16
log
@[165642] Generated editor's constraintProviders + constraintBindings extensions must be marked as 'gmfgen generated'
@
text
@d109 18
@


1.15
log
@Java 5 constructs
@
text
@d7 1
d82 1
@


1.14
log
@#147282  Diagram validation should include LIVE constraints in validation
@
text
@d8 1
a8 1
	java.util.HashMap idMap = new java.util.HashMap();
d13 1
a13 1
	java.util.HashMap pathMap = new java.util.HashMap();
@


1.13
log
@#140401 Escape all String literals in the generated code according to java rules, escape strings used  in plugins.xml
@
text
@d51 1
a51 1
			String modeAttr = audit.isUseInLiveMode() ? "" : "mode=\"Batch\"";
d61 1
a61 1
				name="<%=org.eclipse.gmf.internal.common.codegen.Conversions.escapeXML(name)%>" <%=modeAttr%>
@


1.12
log
@#144485 Do not generate "o.e.e.v.constraintBindings" extension in plugin.xml if !genDiagram.isValidationEnabled
@
text
@d25 1
a25 1
		id="<%=id.toString()%>"
d27 1
a27 1
		name="<%=category.getName() != null ? category.getName() : id.toString()%>">
d45 1
a45 1
		<constraints categories="<%=pathMap.get(category)%>">		
d55 1
a55 1
			<constraint id="<%=audit.getId()%>"
d61 1
a61 1
				name="<%=name%>" <%=modeAttr%>
d98 1
a98 1
		<constraint ref="<%=pluginID%>.<%=nextRule.getId()%>"/>
@


1.11
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@d3 2
a4 2
if (rootContainer != null && genDiagram.getDomainDiagramElement() != null) {
	java.util.List containers = rootContainer != null ? rootContainer.getAllAuditContainers() : java.util.Collections.EMPTY_LIST;
d44 3
d50 1
a50 2
			GenClass targetClass = audit.getTarget().getTargetClass();
			String targetClassName = (targetClass != null) ? targetClass.getGenPackage().getNSName() + "." + targetClass.getInterfaceName() : "null";
a54 1
		<constraints categories="<%=pathMap.get(category)%>">
a69 1
		</constraints>
d72 3
@


1.10
log
@#136672 use common expression accessor with audits
@
text
@d46 2
a47 2
			if(audit.getTarget() == null || !(audit.getTarget().getContext() instanceof GenClass)) continue;
			GenClass targetClass = (GenClass)audit.getTarget().getContext();
@


1.9
log
@[rdvorak] #114196 Allow for the definition of diagram validation rules
@
text
@d42 1
a42 1
	for(java.util.Iterator catIt = containers.iterator(); catIt.hasNext(); rulePos++) {
d44 1
a44 1
		for(java.util.Iterator it = category.getAudits().iterator(); it.hasNext();) {
d55 6
a60 2
				lang="OCL" <%=modeAttr%>
				name="<%=name%>"
d62 1
d64 1
@


1.8
log
@[rdvorak] #130109 Register validation client context IDs qualified with the declaring plugin ID
@
text
@d46 2
a47 2
			if(audit.getTarget() == null) continue;
			GenClass targetClass = audit.getTarget().getContext();
@


1.7
log
@removed unused variable
@
text
@d81 1
a81 1
	<clientContext default="false" id="<%=ctxID%>">
d84 1
a84 1
	<binding context="<%=ctxID%>">
@


1.6
log
@[rdvorak] #127446 Enable audit rules on diagram (notation model) elements in gmfgen model
@
text
@a31 1
	String rootCategoryId = (String)pathMap.get(rootContainer);
@


1.5
log
@make diagram editor and creation wizard icons configurable
@
text
@a4 2
	// XXX just treat the first genPackage as primary - genModel.getGenPackages().get(0)?
	GenPackage domainMetaModel = genDiagram.getDomainDiagramElement().getGenPackage();
a34 1
		<package namespaceUri="<%=domainMetaModel.getNSURI()%>"/>
d36 6
d47 2
a48 1
			GenClass targetClass = audit.getTarget();
d62 1
a62 1
				<target class="<%=targetClassName%>"/>				
d73 11
a83 2
	<clientContext default="true" id="<%=rootCategoryId%>.clientContext">
		<enablement/>
d85 13
a97 2
	<binding category="<%=rootCategoryId%>"
		context="<%=rootCategoryId%>.clientContext"/>
@


1.4
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d3 1
a3 1
if(rootContainer != null) {
d5 2
@


1.3
log
@REadable names should present in popup bar
@
text
@d2 1
a2 1
GenAuditContainer rootContainer = genDiagram.getAudits();
d35 1
a35 1
		<package namespaceUri="<%=genDiagram.getDomainMetaModel().getNSURI()%>"/>
@


1.2
log
@[rdvorak] #123656 Added message and description to audit rule
@
text
@d74 2
a75 2
	} 
%>
@


1.1
log
@[rdvorak] #123232 audits (ocl constraints) definition in genmodel
@
text
@d27 3
a29 1
		name="<%=category.getName()%>"/>
d45 2
d51 1
a51 1
				name="<%=audit.getName()%>"
d54 3
a56 4
				<description>
	            </description>
	            <message><![CDATA[<%=audit.getName()%> audit violated]]></message>
				<target class="<%=targetClassName%>"/>
@

