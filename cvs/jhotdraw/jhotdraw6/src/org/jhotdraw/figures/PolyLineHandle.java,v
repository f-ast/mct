head	1.7;
access;
symbols
	jhotdraw60b1-release:1.7
	package_rename:1.7
	directory_rename:1.6
	reorg_6x_split_initial:1.6
	MVC_PHASE1:1.5.0.10
	NEW_ATTRIBUTES:1.5.0.8
	DNOYEB1_ALPHA-2:1.5
	release_JHD54b1:1.5
	BUGFIX_670992:1.5.0.6
	DNOYEB1_ALPHA-1:1.5
	dnoyeb1:1.5.0.4
	repack:1.5.0.2
	Root_repack:1.5
	Before_FigureVisitor:1.5
	JHotDraw_5-3:1.4
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.09.21.18.46;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.04.22.43.22;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.7
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)PolyLineHandle.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.figures;

import org.jhotdraw.framework.*;
import org.jhotdraw.standard.LocatorHandle;
import org.jhotdraw.standard.SingleFigureEnumerator;
import org.jhotdraw.util.Undoable;
import org.jhotdraw.util.UndoableAdapter;
import java.awt.*;

/**
 * A handle for a node on the polyline.
 *
 * @@version <$CURRENT_VERSION$>
 */
public class PolyLineHandle extends LocatorHandle {

	private int fIndex;

   /**
	* Constructs a poly line handle.
	* @@param owner the owning polyline figure.
	* @@param l the locator
	* @@param index the index of the node associated with this handle.
	*/
	public PolyLineHandle(PolyLineFigure owner, Locator l, int index) {
		super(owner, l);
		fIndex = index;
	}

	public void invokeStart(int  x, int  y, DrawingView view) {
		setUndoActivity(createUndoActivity(view, fIndex));
		getUndoActivity().setAffectedFigures(new SingleFigureEnumerator(owner()));
		((PolyLineHandle.UndoActivity)getUndoActivity()).setOldPoint(new Point(x,y));
	}

	public void invokeStep(int x, int y, int anchorX, int anchorY, DrawingView view) {
		int currentIndex = ((PolyLineHandle.UndoActivity)getUndoActivity()).getPointIndex();
		myOwner().setPointAt(new Point(x, y), currentIndex);
	}

	public void invokeEnd(int x, int y, int anchorX, int anchorY, DrawingView view) {
		if ((x == anchorX) && (y == anchorY)) {
			setUndoActivity(null);
		}
	}
	
	private PolyLineFigure myOwner() {
		return (PolyLineFigure)owner();
	}

	/**
	 * Factory method for undo activity. To be overriden by subclasses.
	 */
	protected Undoable createUndoActivity(DrawingView newView, int newPointIndex) {
		return new PolyLineHandle.UndoActivity(newView, newPointIndex);
	}
	
	public static class UndoActivity extends UndoableAdapter {
		private Point myOldPoint;
		private int myPointIndex;

		public UndoActivity(DrawingView newView, int newPointIndex) {
			super(newView);
			setUndoable(true);
			setRedoable(true);
			setPointIndex(newPointIndex);
		}
		
		public boolean undo() {
			if (!super.undo()) {
				return false;
			}

			return movePointToOldLocation();
		}
	
		public boolean redo() {
			// do not call execute directly as the selection might has changed
			if (!isRedoable()) {
				return false;
			}

			return movePointToOldLocation();
		}

		protected boolean movePointToOldLocation() {
			FigureEnumeration fe = getAffectedFigures();
			if (!fe.hasNextFigure()) {
				return false;
			}

			PolyLineFigure figure = (PolyLineFigure)fe.nextFigure();
			Point backupPoint = figure.pointAt(getPointIndex());
			figure.setPointAt(getOldPoint(), getPointIndex());
			setOldPoint(backupPoint);
			return true;
		}

		public void setOldPoint(Point newOldPoint) {
			myOldPoint = newOldPoint;
		}
		
		public Point getOldPoint() {
			return myOldPoint;
		}

		public void setPointIndex(int newPointIndex) {
			myPointIndex = newPointIndex;
		}
		
		public int getPointIndex() {
			return myPointIndex;
		}
	}
}
@


1.6
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d12 1
a12 1
package CH.ifa.draw.figures;
d14 5
a18 5
import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.LocatorHandle;
import CH.ifa.draw.standard.SingleFigureEnumerator;
import CH.ifa.draw.util.Undoable;
import CH.ifa.draw.util.UndoableAdapter;
@


1.5
log
@after variou merges... (before 5.4 release)
@
text
@d48 2
a49 2
		int fIndex = ((PolyLineHandle.UndoActivity)getUndoActivity()).getPointIndex();
		myOwner().setPointAt(new Point(x, y), fIndex);
@


1.4
log
@merge dnd (before 5.3)
@
text
@d33 2
a34 2
	* @@l the locator
	* @@index the index of the node associated with this handle.
d99 1
a99 1
			if (!fe.hasMoreElements()) {
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d28 1
a28 1
    private int fIndex;
d31 15
a45 15
    * Constructs a poly line handle.
    * @@param owner the owning polyline figure.
    * @@l the locator
    * @@index the index of the node associated with this handle.
    */
    public PolyLineHandle(PolyLineFigure owner, Locator l, int index) {
        super(owner, l);
        fIndex = index;
    }

    public void invokeStart(int  x, int  y, DrawingView view) {
        setUndoActivity(createUndoActivity(fIndex));
        getUndoActivity().setAffectedFigures(new SingleFigureEnumerator(owner()));
        ((PolyLineHandle.UndoActivity)getUndoActivity()).setOldPoint(new Point(x,y));
    }
d47 1
a47 1
    public void invokeStep(int x, int y, int anchorX, int anchorY, DrawingView view) {
d49 2
a50 2
        myOwner().setPointAt(new Point(x, y), fIndex);
    }
d54 1
a54 1
 			setUndoActivity(null);
d58 3
a60 3
    private PolyLineFigure myOwner() {
        return (PolyLineFigure)owner();
    }
d65 2
a66 2
	protected Undoable createUndoActivity(int newPointIndex) {
		return new PolyLineHandle.UndoActivity(newPointIndex);
d73 2
a74 2
		public UndoActivity(int newPointIndex) {
			super(null);
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)PolyLineHandle.java 5.2
d4 6
a13 1
import java.awt.*;
d16 4
d23 2
a28 1
    private Point fAnchor;
d42 3
a44 1
        fAnchor = new Point(x, y);
d47 2
a48 1
    public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
d52 6
d61 65
a126 2


@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)PolyLineHandle.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
