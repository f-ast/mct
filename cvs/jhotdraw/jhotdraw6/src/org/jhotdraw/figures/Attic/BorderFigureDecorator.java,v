head	1.1;
access;
symbols
	jhotdraw60b1-release:1.1
	package_rename:1.1
	directory_rename:1.1
	reorg_6x_split_initial:1.1
	DNOYEB1_ALPHA-2:1.1.2.1
	DNOYEB1_ALPHA-1:1.1.2.1
	dnoyeb1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2003.01.16.06.03.52;	author dnoyeb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.01.16.06.03.52;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file BorderFigureDecorator.java was initially added on branch dnoyeb1.
@
text
@@


1.1.2.1
log
@New FigureDecorator using decorator pattern now installed.
A few other minor cleanups.
@
text
@a0 115
/*
 * @@(#)BorderFigureDecorator.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.figures;

import java.awt.*;

import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.*;
import java.io.*;
import CH.ifa.draw.util.*;
/**
 * BorderFigureDecorator decorates an arbitrary Figure with a border.
 * Only allowed 1 figure.
 * No transients so no needed implementation of Serialization methods.
 * A border is technically inside of the figure it borders.
 *
 * @@version <$CURRENT_VERSION$>
 */
public  class BorderFigureDecorator extends AbstractFigureDecorator {

	/*
	 * Serialization support.
	 */
//	private static final long serialVersionUID = 1205601808259084917L;
//	private int borderDecoratorSerializedDataVersion = 1;

	private Point myBorderOffset;
	private Color myBorderColor;
	private Color myShadowColor;
	
	public BorderFigureDecorator() {
		initialize();
	}

	/**
	 * Performs additional initialization code before the figure is decorated
	 * Subclasses may override this method.
	 */
	protected void initialize() {
		setBorderOffset(new Point(3,3));
	}

	protected void setBorderOffset(Point newBorderOffset) {
		myBorderOffset = newBorderOffset;
	}
		
	protected Point getBorderOffset() {
		if (myBorderOffset == null) {
			return new Point(0,0);
		}
		else {
			return myBorderOffset;
		}
	}
//	public void decorateFigure(Figure figure) {
//		super.decorateFigure(figure);
//		Rectangle r = growDisplayBox(figure.displayBox());
//		figure.displayBox( r );
//	}
	/**
	 * Draws a the figure and decorates it with a border.
	 */
	public void draw(Graphics g) {
		Rectangle r = displayBox();
		g.setColor(Color.white);
		g.drawLine(r.x, r.y, r.x, r.y + r.height);
		g.drawLine(r.x, r.y, r.x + r.width, r.y);
		g.setColor(Color.gray);
		g.drawLine(r.x + r.width, r.y, r.x + r.width, r.y + r.height);
		g.drawLine(r.x , r.y + r.height, r.x + r.width, r.y + r.height);
	}

	public Rectangle displayBox() {
		return getDecoratedFigure().displayBox();
	}
	
	/**
	 * Gets the displaybox including the border.
	 */
	protected Rectangle growDisplayBox(Rectangle r) {
		r.grow(getBorderOffset().x, getBorderOffset().y);
		return r;
	}
	
	/**
	 * Reads the object from the StorableInput.
	 */
	public void read(StorableInput dr) throws IOException {
		super.read(dr);
//		myBorderOffset = dr.read
//		Point myBorderOffset;
//		Color myBorderColor;
//		Color myShadowColor;
	}
	
	/** 
	 * Writes the object to the StorableOutput.
	 */
	public void write(StorableOutput dw) {
		super.write(dw);
//		myBorderOffset
//		Point myBorderOffset;
//		Color myBorderColor;
//		Color myShadowColor;
	}
}
@

