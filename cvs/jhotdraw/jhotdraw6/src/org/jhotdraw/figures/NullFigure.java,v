head	1.3;
access;
symbols
	jhotdraw60b1-release:1.3
	package_rename:1.3
	directory_rename:1.2
	reorg_6x_split_initial:1.2
	MVC_PHASE1:1.2.0.4
	NEW_ATTRIBUTES:1.2.0.2
	DNOYEB1_ALPHA-2:1.1.4.2
	release_JHD54b1:1.1
	BUGFIX_670992:1.1.0.6
	DNOYEB1_ALPHA-1:1.1
	dnoyeb1:1.1.0.4
	repack:1.1.0.2
	Root_repack:1.1
	Before_FigureVisitor:1.1;
locks; strict;
comment	@# @;


1.3
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.04.16.20.20;	author dnoyeb;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.04.22.47.18;	author mrfloppy;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.26.00.50.50;	author dnoyeb;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.01.26.20.25.05;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.3
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)LineConnection.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.figures;

import org.jhotdraw.framework.*;
import org.jhotdraw.standard.FigureEnumerator;
import org.jhotdraw.standard.SingleFigureEnumerator;
import org.jhotdraw.standard.AbstractFigure;
import org.jhotdraw.standard.HandleEnumerator;

import java.awt.*;

/**
 * @@author Wolfram Kaiser
 * @@version <$CURRENT_VERSION$>
 */
public class NullFigure extends AbstractFigure {

	private Rectangle myDisplayBox;

	/**
	 * Moves the figure. This is the
	 * method that subclassers override. Clients usually
	 * call displayBox.
	 * @@see #moveBy
	 */
	protected void basicMoveBy(int dx, int dy) {
		myDisplayBox.translate(dx, dy);
	}

	/**
	 * Changes the display box of a figure. This method is
	 * always implemented in figure subclasses.
	 * It only changes
	 * the displaybox and does not announce any changes. It
	 * is usually not called by the client. Clients typically call
	 * displayBox to change the display box.
	 * @@param origin the new origin
	 * @@param corner the new corner
	 * @@see #displayBox
	 */
	public void basicDisplayBox(Point origin, Point corner) {
		myDisplayBox = new Rectangle(origin);
		myDisplayBox.add(corner);
	}

	/**
	 * Gets the display box of a figure
	 * @@see #basicDisplayBox
	 */
	public Rectangle displayBox() {
		return new Rectangle(myDisplayBox);
	}

	/**
	 * Draws the figure.
	 * @@param g the Graphics to draw into
	 */
	public void draw(Graphics g) {
		// A NullFigure cannot be drawn: it has no graphical representation
	}

	/**
	 * Returns the handles used to manipulate
	 * the figure. Handles is a Factory Method for
	 * creating handle objects.
	 *
	 * @@return an type-safe iterator of handles
	 * @@see Handle
	 */
	public HandleEnumeration handles() {
		return HandleEnumerator.getEmptyEnumeration();
	}

	/**
	 * Checks if the Figure should be considered as empty.
	 */
	public boolean isEmpty() {
		return true;
	}

	/**
	 * Returns an Enumeration of the figures contained in this figure
	 */
	public FigureEnumeration figures() {
		return FigureEnumerator.getEmptyEnumeration();
	}

	/**
	 * Returns the figure that contains the given point.
	 */
	public Figure findFigureInside(int x, int y) {
		// A NullFigure does not contain other figures
		return null;
	}

	/**
	 * Returns a Clone of this figure
	 */
	public Object clone() {
		return super.clone();
	}

	/**
	 * Checks whether the given figure is contained in this figure.
	 */
	public boolean includes(Figure figure) {
		// A NullFigure does not contain another figure
		return false;
	}

	/**
	 * Decomposes a figure into its parts. A figure is considered
	 * as a part of itself.
	 */
	public FigureEnumeration decompose() {
		return new SingleFigureEnumerator(this);
	}

	/**
	 * Releases a figure's resources. Release is called when
	 * a figure is removed from a drawing. Informs the listeners that
	 * the figure is removed by calling figureRemoved.
	 */
	public void release() {
		// A NullFigure does not occupy any resources
	}

	/**
	 * Invalidates the figure. This method informs its listeners
	 * that its current display box is invalid and should be
	 * refreshed.
	 */
	public void invalidate() {
		// A NullFigure does not have a display box
	}

	/**
	 * Returns the named attribute or null if a
	 * a figure doesn't have an attribute.
	 * All figures support the attribute names
	 * FillColor and FrameColor
	 *
	 * @@deprecated use getAttribute(FigureAttributeConstant) instead
	 */
	public Object getAttribute(String name) {
		// A NullFigure does not have attributes: it cannot do anything with them
		return null;
	}

	/**
	 * Returns the named attribute or null if a
	 * a figure doesn't have an attribute.
	 * All figures support the attribute names
	 * FillColor and FrameColor
	 */
	public Object getAttribute(FigureAttributeConstant attributeConstant) {
		// A NullFigure does not have attributes: it cannot do anything with them
		return null;
	}

	/**
	 * Sets the named attribute to the new value
	 *
	 * @@deprecated use setAttribute(FigureAttributeConstant, Object) instead
	 */
	public void setAttribute(String name, Object value) {
		// A NullFigure does not have attributes: it cannot do anything with them
	}

	/**
	 * Sets the named attribute to the new value
	 */
	public void setAttribute(FigureAttributeConstant attributeConstant, Object value) {
		// A NullFigure does not have attributes: it cannot do anything with them
	}
}
@


1.2
log
@fix - [ 675067 ] NullFigure returning its own Rectangle
@
text
@d12 1
a12 1
package CH.ifa.draw.figures;
d14 5
a18 5
import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.FigureEnumerator;
import CH.ifa.draw.standard.SingleFigureEnumerator;
import CH.ifa.draw.standard.AbstractFigure;
import CH.ifa.draw.standard.HandleEnumerator;
@


1.1
log
@after variou merges... (before 5.4 release)
@
text
@d61 1
a61 1
		return myDisplayBox;
@


1.1.4.1
log
@CompositeFigure does not return figures from add, remove, orphan anymore
new method, restore added to bring back orphaned figures
compositeFigure keeps record of its orphans for the restore method
NullFigures inserted as placeholders into the figureList
dumps record and nullFigures when remove(figure) called. this safely restores
figures to their old places.
figureRequestRemove and figureRemove events eliminated.
Group and Ungroup commands redone to respect these new ideas.
have not done anything with delete, cut, copy, paste yet.
NullFigure added 0,0 for its display box, else throwing exceptions
@
text
@d29 1
a29 5
	public NullFigure() {
		 super();
		 java.awt.Point p = new Point(0,0);
		 displayBox(p,p);
	}
@


1.1.4.2
log
@fix [ 675067 ] NullFigure returning its own Rectangle
@
text
@d65 1
a65 1
		return new Rectangle(myDisplayBox);
@


