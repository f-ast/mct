head	1.6;
access;
symbols
	jhotdraw60b1-release:1.6
	package_rename:1.6
	directory_rename:1.5
	reorg_6x_split_initial:1.5
	MVC_PHASE1:1.5.0.10
	NEW_ATTRIBUTES:1.5.0.8
	DNOYEB1_ALPHA-2:1.5
	release_JHD54b1:1.5
	BUGFIX_670992:1.5.0.6
	DNOYEB1_ALPHA-1:1.5
	dnoyeb1:1.5.0.4
	repack:1.5.0.2
	Root_repack:1.5
	Before_FigureVisitor:1.5
	JHotDraw_5-3:1.4
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.04.22.43.22;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.6
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)FontSizeHandle.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.figures;

import org.jhotdraw.framework.*;
import org.jhotdraw.standard.*;
import org.jhotdraw.util.Undoable;
import org.jhotdraw.util.UndoableAdapter;
import java.awt.*;

/**
 * A Handle to change the font size by direct manipulation.
 *
 * @@version <$CURRENT_VERSION$>
 */
public class FontSizeHandle extends LocatorHandle {

	public FontSizeHandle(Figure owner, Locator l) {
		super(owner, l);
	}

	public void invokeStart(int  x, int  y, DrawingView view) {
		setUndoActivity(createUndoActivity(view));
		getUndoActivity().setAffectedFigures(new SingleFigureEnumerator(owner()));
	}

	public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
		TextFigure textOwner = (TextFigure) owner();

		FontSizeHandle.UndoActivity activity = (FontSizeHandle.UndoActivity)getUndoActivity();
		int newSize = activity.getFont().getSize() + y-anchorY;
		textOwner.setFont(new Font(activity.getFont().getName(), activity.getFont().getStyle(), newSize));
	}

	public void invokeEnd(int x, int y, int anchorX, int anchorY, DrawingView view) {
		TextFigure textOwner = (TextFigure) owner();
		FontSizeHandle.UndoActivity activity = (FontSizeHandle.UndoActivity)getUndoActivity();
		// there has been no change so there is nothing to undo
		if (textOwner.getFont().getSize() == activity.getOldFontSize()) {
			setUndoActivity(null);
		}
		else {
			activity.setFont(textOwner.getFont());
		}
	}

	public void draw(Graphics g) {
		Rectangle r = displayBox();

		g.setColor(Color.yellow);
		g.fillOval(r.x, r.y, r.width, r.height);

		g.setColor(Color.black);
		g.drawOval(r.x, r.y, r.width, r.height);
	}

	/**
	 * Factory method for undo activity
	 */
	protected Undoable createUndoActivity(DrawingView newView) {
		TextFigure textOwner = (TextFigure)owner();
		return new FontSizeHandle.UndoActivity(newView, textOwner.getFont());
	}

	public static class UndoActivity extends UndoableAdapter {
		private Font myFont;
		private int  myOldFontSize;
		
		public UndoActivity(DrawingView newView, Font newFont) {
			super(newView);
			setFont(newFont);
			setOldFontSize(getFont().getSize());
			setUndoable(true);
			setRedoable(true);
		}

		public boolean undo() {
			if (!super.undo()) {
				return false;
			}
			swapFont();
			return true;
		}

		public boolean redo() {
			// do not call execute directly as the selection might has changed
			if (!isRedoable()) {
				return false;
			}
			swapFont();
			return true;
		}

		protected void swapFont() {
			setOldFontSize(replaceFontSize());
			FigureEnumeration fe = getAffectedFigures();
			while (fe.hasNextFigure()) {
				((TextFigure)fe.nextFigure()).setFont(getFont());
			}
		}
		
		private int replaceFontSize() {
			int tempFontSize = getFont().getSize();
			setFont(new Font(getFont().getName(), getFont().getStyle(), getOldFontSize()));
			return tempFontSize;
		}		
		protected void setFont(Font newFont) {
			myFont = newFont;
		}
		
		public Font getFont() {
			return myFont;
		}
		
		protected void setOldFontSize(int newOldFontSize) {
			myOldFontSize = newOldFontSize;
		}
		
		public int getOldFontSize() {
			return myOldFontSize;
		}
	}
}
@


1.5
log
@after variou merges... (before 5.4 release)
@
text
@d12 1
a12 1
package CH.ifa.draw.figures;
d14 4
a17 4
import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.*;
import CH.ifa.draw.util.Undoable;
import CH.ifa.draw.util.UndoableAdapter;
@


1.4
log
@merge dnd (before 5.3)
@
text
@d106 1
a106 1
			while (fe.hasMoreElements()) {
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d32 1
a32 1
		setUndoActivity(createUndoActivity());
a40 1
//System.out.println("newSize: " + newSize + " .. y: " + y + " .. anchorY: " + anchorY);
d69 3
a71 3
	protected Undoable createUndoActivity() {
		TextFigure textOwner = (TextFigure) owner();
		return new FontSizeHandle.UndoActivity(textOwner.getFont());
d78 2
a79 2
		public UndoActivity(Font newFont) {
			super(null);
a90 1
System.out.println("FontSizeHandle.undo()");
a99 1
System.out.println("FontSizeHandle.redo()");
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)FontSizeHandle.java 5.2
d4 6
a13 1
import java.awt.*;
d16 3
d22 2
d27 108
a134 28
    private Font    fFont;
    private int     fSize;

    public FontSizeHandle(Figure owner, Locator l) {
        super(owner, l);
    }

    public void invokeStart(int  x, int  y, DrawingView view) {
        TextFigure textOwner = (TextFigure) owner();
        fFont = textOwner.getFont();
        fSize = fFont.getSize();
    }

    public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
        TextFigure textOwner = (TextFigure) owner();
        int newSize = fSize + y-anchorY;
        textOwner.setFont(new Font(fFont.getName(), fFont.getStyle(), newSize) );
    }

    public void draw(Graphics g) {
        Rectangle r = displayBox();

        g.setColor(Color.yellow);
        g.fillOval(r.x, r.y, r.width, r.height);

        g.setColor(Color.black);
        g.drawOval(r.x, r.y, r.width, r.height);
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)FontSizeHandle.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
