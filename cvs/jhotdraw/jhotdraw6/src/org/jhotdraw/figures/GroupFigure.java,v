head	1.10;
access;
symbols
	jhotdraw60b1-release:1.10
	package_rename:1.10
	directory_rename:1.9
	reorg_6x_split_initial:1.9
	MVC_PHASE1:1.9.0.2
	NEW_ATTRIBUTES:1.8.0.2
	DNOYEB1_ALPHA-2:1.6.4.2
	release_JHD54b1:1.6
	BUGFIX_670992:1.6.0.6
	DNOYEB1_ALPHA-1:1.6.4.1
	dnoyeb1:1.6.0.4
	repack:1.6.0.2
	Root_repack:1.6
	Before_FigureVisitor:1.6
	JHotDraw_5-3:1.4
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.22.23.58.42;	author mrfloppy;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.04.16.33.01;	author dnoyeb;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.04.05.21.24;	author ricardo_padilha;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.04.22.43.22;	author mrfloppy;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2002.04.30.20.40.06;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;

1.6.4.1
date	2003.01.14.18.21.41;	author dnoyeb;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2003.01.27.17.48.06;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.10
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)GroupFigure.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.figures;

import java.awt.*;
import java.util.List;

import org.jhotdraw.framework.*;
import org.jhotdraw.standard.*;
import org.jhotdraw.util.CollectionsFactory;

/**
 * A Figure that groups a collection of figures.
 *
 * @@version <$CURRENT_VERSION$>
 */
public  class GroupFigure extends CompositeFigure {

	/*
	 * Serialization support.
	 */
	private static final long serialVersionUID = 8311226373023297933L;
	private int groupFigureSerializedDataVersion = 1;

   /**
	* GroupFigures cannot be connected
	*/
	public boolean canConnect() {
		return false;
	}

   /**
	* Gets the display box. The display box is defined as the union
	* of the contained figures.
	*/
	public Rectangle displayBox() {
		FigureEnumeration fe = figures();
		Rectangle r = fe.nextFigure().displayBox();

		while (fe.hasNextFigure()) {
			r.add(fe.nextFigure().displayBox());
		}
		return r;
	}

	public void basicDisplayBox(Point origin, Point corner) {
		// do nothing
		// we could transform all components proportionally
	}

	public FigureEnumeration decompose() {
		return new FigureEnumerator(fFigures);
	}

   /**
	* Gets the handles for the GroupFigure.
	*/
	public HandleEnumeration handles() {
		List handles = CollectionsFactory.current().createList();
		handles.add(new GroupHandle(this, RelativeLocator.northWest()));
		handles.add(new GroupHandle(this, RelativeLocator.northEast()));
		handles.add(new GroupHandle(this, RelativeLocator.southWest()));
		handles.add(new GroupHandle(this, RelativeLocator.southEast()));
		return new HandleEnumerator(handles);
	}

   /**
	* Sets the attribute of all the contained figures.
	* @@deprecated see setAttribute(FigureAttributeConstant,Object)
	*/
	public void setAttribute(String name, Object value) {
		super.setAttribute(name, value);
		FigureEnumeration fe = figures();
		while (fe.hasNextFigure()) {
			fe.nextFigure().setAttribute(name, value);
		}
	}

	/**
	 * Sets the attribute of the GroupFigure as well as all contained Figures.
	 */
	public void setAttribute(FigureAttributeConstant fac, Object object){
		super.setAttribute(fac, object);
		FigureEnumeration fe = figures();
		while (fe.hasNextFigure()) {
			fe.nextFigure().setAttribute(fac, object);
		}		
	}
}
@


1.9
log
@no message
@
text
@d12 1
a12 1
package CH.ifa.draw.figures;
d17 3
a19 3
import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.*;
import CH.ifa.draw.util.CollectionsFactory;
@


1.8
log
@fix - [ 675576 ] GroupFigure needs to forward new AttributeConstant calls
@
text
@d87 1
@


1.7
log
@Removed unused imports.
@
text
@d78 1
d86 10
@


1.6
log
@after variou merges... (before 5.4 release)
@
text
@a14 1
import java.util.*;
@


1.6.4.1
log
@DecoratorFigure is 'changed'  I think it needs reworking.  not its only used durint draw(Graphics g) but I don't think
that was its real intention?

The Figure added or removed is nolonger changed during the add or remove process.  Thus add and remove do not return
values.
orphan is used internally to the drawing only.
remove calls figure.remove() which intern orphans the figure.
remove(Figure f) is still present and used but currently not needed.  call figure.remove() instead.
perhaps we can add a method on the figure enumerator to 'remove' all the figures within it.
Figure no longer exposes its listeners.  call methods on figure to send events.


Serialization in every form needs cleanup now.  Some due to earlier changes made by myself like making listeners of
inner classes, but not storing the listener when the figures are stored. (since the figures think the inner listener
is their container.)
@
text
@a60 3
	/**
	 * this cant be right !!!dnoyeb!!! perhaps then use figures()?
	 */
d62 1
a62 1
		return new FigureEnumerator(getFigures());
@


1.6.4.2
log
@fixm [ 675576 ] GroupFigure needs to forward new AttributeConstant calls
@
text
@a81 2
	* @@deprecated use {@@link #setAttribute(FigureAttributeConstant ac, Object value) 
	*             setAttribute(FigureAttributeConstant attributeConstant, Object value)}
a87 10
		}
	}
	/**
	 * Sets the named attribute of all contained figures to the new value. 
	 */
	public void setAttribute(FigureAttributeConstant attributeConstant, Object value) {
		super.setAttribute(attributeConstant, value);
		FigureEnumeration fe = figures();
		while (fe.hasNextFigure()) {
			fe.nextFigure().setAttribute(attributeConstant, value);
@


1.5
log
@no message
@
text
@d16 2
d20 1
d50 1
a50 1
		while (fe.hasMoreElements()) {
d68 7
a74 7
	public Vector handles() {
		Vector handles = new Vector();
		handles.addElement(new GroupHandle(this, RelativeLocator.northWest()));
		handles.addElement(new GroupHandle(this, RelativeLocator.northEast()));
		handles.addElement(new GroupHandle(this, RelativeLocator.southWest()));
		handles.addElement(new GroupHandle(this, RelativeLocator.southEast()));
		return handles;
d83 1
a83 1
		while (fe.hasMoreElements()) {
@


1.4
log
@merge dnd (before 5.3)
@
text
@d79 3
a81 3
		FigureEnumeration k = figures();
		while (k.hasMoreElements()) {
			k.nextFigure().setAttribute(name, value);
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d26 5
a30 5
    /*
     * Serialization support.
     */
    private static final long serialVersionUID = 8311226373023297933L;
    private int groupFigureSerializedDataVersion = 1;
d33 5
a37 5
    * GroupFigures cannot be connected
    */
    public boolean canConnect() {
        return false;
    }
d40 21
a60 21
    * Gets the display box. The display box is defined as the union
    * of the contained figures.
    */
    public Rectangle displayBox() {
        FigureEnumeration fe = figures();
        Rectangle r = fe.nextFigure().displayBox();

        while (fe.hasMoreElements()) {
            r.add(fe.nextFigure().displayBox());
        }
        return r;
    }

    public void basicDisplayBox(Point origin, Point corner) {
        // do nothing
        // we could transform all components proportionally
    }

    public FigureEnumeration decompose() {
        return new FigureEnumerator(fFigures);
    }
d63 10
a72 10
    * Gets the handles for the GroupFigure.
    */
    public Vector handles() {
        Vector handles = new Vector();
        handles.addElement(new GroupHandle(this, RelativeLocator.northWest()));
        handles.addElement(new GroupHandle(this, RelativeLocator.northEast()));
        handles.addElement(new GroupHandle(this, RelativeLocator.southWest()));
        handles.addElement(new GroupHandle(this, RelativeLocator.southEast()));
        return handles;
    }
d75 9
a83 9
    * Sets the attribute of all the contained figures.
    */
    public void setAttribute(String name, Object value) {
        super.setAttribute(name, value);
        FigureEnumeration k = figures();
        while (k.hasMoreElements()) {
            k.nextFigure().setAttribute(name, value);
        }
    }
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)GroupFigure.java 5.2
d4 6
d21 2
d44 2
a45 2
        FigureEnumeration k = figures();
        Rectangle r = k.nextFigure().displayBox();
d47 3
a49 2
        while (k.hasMoreElements())
            r.add(k.nextFigure().displayBox());
d80 1
a80 1
        while (k.hasMoreElements())
d82 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)GroupFigure.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
