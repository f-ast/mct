head	1.7;
access;
symbols
	jhotdraw60b1-release:1.7
	package_rename:1.7
	directory_rename:1.6
	reorg_6x_split_initial:1.6
	MVC_PHASE1:1.6.0.10
	NEW_ATTRIBUTES:1.6.0.8
	DNOYEB1_ALPHA-2:1.6
	release_JHD54b1:1.6
	BUGFIX_670992:1.6.0.6
	DNOYEB1_ALPHA-1:1.6
	dnoyeb1:1.6.0.4
	repack:1.6.0.2
	Root_repack:1.6
	Before_FigureVisitor:1.6
	JHotDraw_5-3:1.4
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.04.22.43.22;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.30.20.40.06;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.7
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)ShortestDistanceConnector.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.figures;

import org.jhotdraw.framework.*;
import org.jhotdraw.standard.*;
import org.jhotdraw.util.Geom;
import java.awt.*;

/**
 * A ShortestDistance locates connection points by
 * finding the shortest distance between the start and
 * end of the connection.
 * It doesn't connect to the areas defined by Figure.connectionInsets()
 *
 * @@see Figure#connectionInsets
 * @@see Connector
 *
 * @@version <$CURRENT_VERSION$>
 */
public class ShortestDistanceConnector extends AbstractConnector {

	/*
	 * Serialization support.
	 */
	private static final long serialVersionUID = -2273446020593433887L;

	public ShortestDistanceConnector() { // only used for Storable implementation
		super();
	}

	public ShortestDistanceConnector(Figure owner) {
		super(owner);
	}

	public Point findStart(ConnectionFigure connection) {
		return findPoint(connection, true);
	}

	public Point findEnd(ConnectionFigure connection) {
		return findPoint(connection, false);
	}

	protected Point findPoint(ConnectionFigure connection, boolean getStart) {
		Figure startFigure = connection.getStartConnector().owner();
		Figure endFigure = connection.getEndConnector().owner();

		Rectangle r1 = startFigure.displayBox();
		Rectangle r2 = endFigure.displayBox();

		Insets i1 = startFigure.connectionInsets();
		Insets i2 = endFigure.connectionInsets();

		Point p1, p2;
		Point start = null, end = null, s = null, e = null;
		long len2 = Long.MAX_VALUE, l2;
		int x1, x2, y1, y2; // connection points
		int xmin, xmax, ymin, ymax;

		// X-dimension
		// constrain width connection insets
		int r1x, r1width, r2x, r2width, r1y, r1height, r2y, r2height;
		r1x = r1.x + i1.left;
		r1width = r1.width - i1.left - i1.right-1;
		r2x = r2.x + i2.left;
		r2width = r2.width - i2.left - i2.right-1;

		// find x connection point
		if (r1x + r1width < r2x) {
			x1 = r1x + r1width;
			x2 = r2x;
		}
		else if (r1x > r2x + r2width) {
			x1 = r1x;
			x2 = r2x + r2width;
		}
		else {
			xmax = Math.max(r1x, r2x);
			xmin = Math.min(r1x+r1width, r2x+r2width);
			x1 = x2 = (xmax + xmin) /2;
		}

		// Y-Dimension
		// constrain with connection insets
		r1y = r1.y + i1.top;
		r1height = r1.height - i1.top - i1.bottom-1;
		r2y = r2.y + i2.top;
		r2height = r2.height - i2.top - i2.bottom-1;

		// y connection point
		if (r1y + r1height < r2y) {
			y1 = r1y + r1height;
			y2 = r2y;
		}
		else if (r1y > r2y + r2height) {
			y1 = r1y;
			y2 = r2y + r2height;
		}
		else {
			ymax = Math.max(r1y, r2y);
			ymin = Math.min(r1y+r1height, r2y+r2height);
			y1 = y2 = (ymax + ymin) /2;
		}
		// find shortest connection
		for (int i = 0; i < 4; i++) {
			switch(i) {
			case 0:
				// EAST-WEST
				p1 = Geom.east(r1);
				p2 = Geom.west(r2);
				s = new Point(p1.x, y1);
				e = new Point(p2.x, y2);
				break;
			case 1:
				// WEST-EAST
				p1 = Geom.west(r1);
				p2 = Geom.east(r2);
				s = new Point(p1.x, y1);
				e = new Point(p2.x, y2);
				break;
			case 2:
				// NORTH-SOUTH
				p1 = Geom.north(r1);
				p2 = Geom.south(r2);
				s = new Point(x1, p1.y);
				e = new Point(x2, p2.y);
				break;
			case 3:
				// SOUTH-NORTH
				p1 = Geom.south(r1);
				p2 = Geom.north(r2);
				s = new Point(x1, p1.y);
				e = new Point(x2, p2.y);
				break;
			}
			l2 = Geom.length2(s.x, s.y, e.x, e.y);
			if (l2 < len2) {
				start = s;
				end = e;
				len2 = l2;
			}
		}
		if (getStart) {
			return start;
		}
		return end;
	}
}

@


1.6
log
@after variou merges... (before 5.4 release)
@
text
@d12 1
a12 1
package CH.ifa.draw.figures;
d14 3
a16 3
import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.*;
import CH.ifa.draw.util.Geom;
@


1.5
log
@no message
@
text
@d81 2
a82 1
		} else if (r1x > r2x + r2width) {
d85 2
a86 1
		} else {
d103 2
a104 1
		} else if (r1y > r2y + r2height) {
d107 2
a108 1
		} else {
d152 1
a152 1
		if (getStart)
d154 1
a156 1

@


1.4
log
@merge dnd (before 5.3)
@
text
@a13 1
import java.awt.*;
d17 1
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d32 120
a151 120
    /*
     * Serialization support.
     */
    private static final long serialVersionUID = -2273446020593433887L;

    public ShortestDistanceConnector() { // only used for Storable implementation
        super();
    }

    public ShortestDistanceConnector(Figure owner) {
        super(owner);
    }

    public Point findStart(ConnectionFigure connection) {
        return findPoint(connection, true);
    }

    public Point findEnd(ConnectionFigure connection) {
        return findPoint(connection, false);
    }

    protected Point findPoint(ConnectionFigure connection, boolean getStart) {
        Figure startFigure = connection.getStartConnector().owner();
        Figure endFigure = connection.getEndConnector().owner();

        Rectangle r1 = startFigure.displayBox();
        Rectangle r2 = endFigure.displayBox();

        Insets i1 = startFigure.connectionInsets();
        Insets i2 = endFigure.connectionInsets();

        Point p1, p2;
        Point start = null, end = null, s = null, e = null;
        long len2 = Long.MAX_VALUE, l2;
        int x1, x2, y1, y2; // connection points
        int xmin, xmax, ymin, ymax;

        // X-dimension
        // constrain width connection insets
        int r1x, r1width, r2x, r2width, r1y, r1height, r2y, r2height;
        r1x = r1.x + i1.left;
        r1width = r1.width - i1.left - i1.right-1;
        r2x = r2.x + i2.left;
        r2width = r2.width - i2.left - i2.right-1;

        // find x connection point
        if (r1x + r1width < r2x) {
            x1 = r1x + r1width;
            x2 = r2x;
        } else if (r1x > r2x + r2width) {
            x1 = r1x;
            x2 = r2x + r2width;
        } else {
            xmax = Math.max(r1x, r2x);
            xmin = Math.min(r1x+r1width, r2x+r2width);
            x1 = x2 = (xmax + xmin) /2;
        }

        // Y-Dimension
        // constrain with connection insets
        r1y = r1.y + i1.top;
        r1height = r1.height - i1.top - i1.bottom-1;
        r2y = r2.y + i2.top;
        r2height = r2.height - i2.top - i2.bottom-1;

        // y connection point
        if (r1y + r1height < r2y) {
            y1 = r1y + r1height;
            y2 = r2y;
        } else if (r1y > r2y + r2height) {
            y1 = r1y;
            y2 = r2y + r2height;
        } else {
            ymax = Math.max(r1y, r2y);
            ymin = Math.min(r1y+r1height, r2y+r2height);
            y1 = y2 = (ymax + ymin) /2;
        }
        // find shortest connection
        for (int i = 0; i < 4; i++) {
            switch(i) {
            case 0:
                // EAST-WEST
                p1 = Geom.east(r1);
                p2 = Geom.west(r2);
                s = new Point(p1.x, y1);
                e = new Point(p2.x, y2);
                break;
            case 1:
                // WEST-EAST
                p1 = Geom.west(r1);
                p2 = Geom.east(r2);
                s = new Point(p1.x, y1);
                e = new Point(p2.x, y2);
                break;
            case 2:
                // NORTH-SOUTH
                p1 = Geom.north(r1);
                p2 = Geom.south(r2);
                s = new Point(x1, p1.y);
                e = new Point(x2, p2.y);
                break;
            case 3:
                // SOUTH-NORTH
                p1 = Geom.south(r1);
                p2 = Geom.north(r2);
                s = new Point(x1, p1.y);
                e = new Point(x2, p2.y);
                break;
            }
            l2 = Geom.length2(s.x, s.y, e.x, e.y);
            if (l2 < len2) {
                start = s;
                end = e;
                len2 = l2;
            }
        }
        if (getStart)
            return start;
        return end;
    }
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)ShortestDistanceConnector.java 5.2
d4 6
d23 2
a24 1
 * It doesn't connect to the ares defined by Figure.connectionInsets()
d27 2
d54 2
a55 2
        Figure startFigure = connection.start().owner();
        Figure endFigure = connection.end().owner();
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)ShortestDistanceConnector.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
