head	1.6;
access;
symbols
	jhotdraw60b1-release:1.5
	package_rename:1.5
	directory_rename:1.4
	reorg_6x_split_initial:1.4
	MVC_PHASE1:1.4.0.10
	NEW_ATTRIBUTES:1.4.0.8
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.2;
locks; strict;
comment	@# @;


1.6
date	2005.04.19.22.46.51;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.04.22.43.22;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.30.20.40.06;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.05.10.53.47;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ASCII-Synchronisation
@
text
@/*
 * @@(#)AbstractLineDecoration.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.figures;

import java.io.*;
import java.awt.*;

import org.jhotdraw.framework.*;
import org.jhotdraw.util.*;

/**
 * An standard implementation of a line decoration.
 *
 * @@see PolyLineFigure
 *
 * @@version <$CURRENT_VERSION$>
 */
public abstract class AbstractLineDecoration implements LineDecoration {

	static final long serialVersionUID = 1577970039258356627L;

	private Color   fFillColor;
	private Color   fBorderColor;
	private transient Rectangle myBounds;

	public AbstractLineDecoration() {
	}

   /**
	* Draws the arrow tip in the direction specified by the given two
	* points.. (template method)
	*/
	public void draw(Graphics g, int x1, int y1, int x2, int y2) {
		// TBD: reuse the Polygon object
		Polygon p = outline(x1, y1, x2, y2);
		myBounds = p.getBounds();
		if (getFillColor() == null) {
			g.fillPolygon(p.xpoints, p.ypoints, p.npoints);
		}
		else {
			Color drawColor = g.getColor();
			g.setColor(getFillColor());
			g.fillPolygon(p.xpoints, p.ypoints, p.npoints);
			g.setColor(drawColor);
		}

		if (getBorderColor() != getFillColor()) {
			Color drawColor = g.getColor();
			g.setColor(getBorderColor());
			g.drawPolygon(p.xpoints, p.ypoints, p.npoints);
			g.setColor(drawColor);
		}
	}

	/**
	 * The LineDecoration has only a displayBox after it has been drawn
	 * at least once. If it has not yet been drawn then a rectangle of size 0
	 * is returned.
	 * @@return the display box of a LineDecoration.
	 */
	public Rectangle displayBox() {
		if (myBounds != null) {
			return myBounds;
		}
		else {
			return new Rectangle(0, 0);
		}
	}

   /**
	* Hook method to calculates the outline of an arrow tip.
	*/
	public abstract Polygon outline(int x1, int y1, int x2, int y2);

	/**
	 * Stores the arrow tip to a StorableOutput.
	 */
	public void write(StorableOutput dw) {
		if (getFillColor() != null) {
			FigureAttributes.writeColor(dw, FigureAttributeConstant.FILL_COLOR.getName(), getFillColor());
		}
		else {
			dw.writeString("no" + FigureAttributeConstant.FILL_COLOR.getName());
		}

		if (getBorderColor() != null) {
			FigureAttributes.writeColor(dw, FigureAttributeConstant.FRAME_COLOR.getName(), getBorderColor());
		}
		else {
			dw.writeString("no" + FigureAttributeConstant.FRAME_COLOR.getName());
		}
	}

	/**
	 * Reads the arrow tip from a StorableInput.
	 */
	public void read(StorableInput dr) throws IOException {
		String fillColorId = dr.readString();
		// read color only if one has been written
		if (fillColorId.equals(FigureAttributeConstant.FILL_COLOR.getName())) {
			setFillColor(FigureAttributes.readColor(dr));
		}
		String borderColorId = dr.readString();
		// read color only if one has been written
		if (borderColorId.equals("BorderColor")
				||  borderColorId.equals(FigureAttributeConstant.FRAME_COLOR.getName())) {
			setBorderColor(FigureAttributes.readColor(dr));
		}
	}

	/**
	 * Sets color with which arrow is filled
	 */
	public void setFillColor(Color fillColor) {
		fFillColor = fillColor;
	}

	/**
	 * Returns color with which arrow is filled
	 */
	public Color getFillColor() {
		return fFillColor;
	}

	/**
	 * Sets color of arrow's border
	 */
	public void setBorderColor(Color borderColor) {
		fBorderColor = borderColor;
	}

	/**
	 * Returns color of arrow's border
	 */
	public Color getBorderColor() {
		return fBorderColor;
	}
}
@


1.5
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@d109 1
a109 1
		if (fillColorId.equals(FigureAttributeConstant.FRAME_COLOR.getName())) {
@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@d12 1
a12 1
package CH.ifa.draw.figures;
d17 2
a18 2
import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.*;
@


1.3
log
@no message
@
text
@a17 1
import CH.ifa.draw.standard.*;
@


1.2
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d31 1
a31 1
	
d34 1
d46 1
d56 1
a56 1
		
d65 15
d90 1
a90 1
			FigureAttributes.writeColor(dw, "FillColor", getFillColor());
d93 1
a93 1
			dw.writeString("noFillColor");
d95 1
a95 1
		
d97 1
a97 1
			FigureAttributes.writeColor(dw, "BorderColor", getBorderColor());
d100 1
a100 1
			dw.writeString("noBorderColor");
d110 1
a110 1
		if (fillColorId.equals("FillColor")) {
d115 2
a116 1
		if (borderColorId.equals("BorderColor")) {
d130 1
a130 1
	 */    
d144 1
a144 1
	 */    
@


1.1
log
@no message
@
text
@d2 1
a2 1
 * @@(#)AbstractLineDecoration.java 5.2
d4 6
d23 1
d25 2
d30 4
a33 4
    static final long serialVersionUID = 1577970039258356627L;
    
    private Color   fFillColor;
    private Color   fBorderColor;
d39 23
a61 23
    * Draws the arrow tip in the direction specified by the given two
    * points.. (template method)
    */
    public void draw(Graphics g, int x1, int y1, int x2, int y2) {
        // TBD: reuse the Polygon object
        Polygon p = outline(x1, y1, x2, y2);
        if (getFillColor() == null) {
            g.fillPolygon(p.xpoints, p.ypoints, p.npoints);
        }
        else {
            Color drawColor = g.getColor();
            g.setColor(getFillColor());
            g.fillPolygon(p.xpoints, p.ypoints, p.npoints);
            g.setColor(drawColor);
        }
        
        if (getBorderColor() != getFillColor()) {
            Color drawColor = g.getColor();
            g.setColor(getBorderColor());
            g.drawPolygon(p.xpoints, p.ypoints, p.npoints);
            g.setColor(drawColor);
        }
    }
d64 8
a71 8
    * Hook method to calculates the outline of an arrow tip.
    */
    public abstract Polygon outline(int x1, int y1, int x2, int y2);

    /**
     * Stores the arrow tip to a StorableOutput.
     */
    public void write(StorableOutput dw) {
d85 1
a85 1
    }
d87 5
a91 5
    /**
     * Reads the arrow tip from a StorableInput.
     */
    public void read(StorableInput dr) throws IOException {
        String fillColorId = dr.readString();
d93 4
a96 4
        if (fillColorId.equals("FillColor")) {
	        setFillColor(FigureAttributes.readColor(dr));
        }
        String borderColorId = dr.readString();
d98 4
a101 4
        if (borderColorId.equals("BorderColor")) {
	        setBorderColor(FigureAttributes.readColor(dr));
        }
    }
d106 3
a108 3
    public void setFillColor(Color fillColor) {
        fFillColor = fillColor;
    }
d113 3
a115 3
    public Color getFillColor() {
        return fFillColor;
    }
d120 3
a122 3
    public void setBorderColor(Color borderColor) {
        fBorderColor = borderColor;
    }
d127 3
a129 3
    public Color getBorderColor() {
        return fBorderColor;
    }
@

