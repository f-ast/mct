head	1.9;
access;
symbols
	jhotdraw60b1-release:1.8
	package_rename:1.8
	directory_rename:1.7
	reorg_6x_split_initial:1.7
	MVC_PHASE1:1.7.0.10
	NEW_ATTRIBUTES:1.7.0.8
	DNOYEB1_ALPHA-2:1.7
	release_JHD54b1:1.7
	BUGFIX_670992:1.7.0.6
	DNOYEB1_ALPHA-1:1.7
	dnoyeb1:1.7.0.4
	repack:1.7.0.2
	Root_repack:1.7
	Before_FigureVisitor:1.7
	JHotDraw_5-3:1.4
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2004.03.11.09.03.58;	author pmorch;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.06.09.30.22;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.04.22.43.22;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.30.20.40.06;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.9
log
@It seems that a FigureAttrbitueConstant.POPUP_MENU was introduced in
revision 1.4 (date: 2003/09/13 22:31:10)

In contrib/CustomSelectionTool.java revision 1.11 (date: 2003/11/09
21:18:45) this new FigureAttrbitueConstant.POPUP_MENU is used instead
of Figure.POPUP_MENU which is now deprecated and removed completely -
so we get compile time warnings instead of run-time failures for
people using POPUP_MENU functionality.

More info in the JHotDraw 'Open Discussion' forums
'new FigureAttrbitueConstant.POPUP_MENU....' thread from
2004-03-04 11:17

Since it has been broken since 2003/11/09 and nobody has complained, I
guess it isn't too used, and so lets just suggest that the deprecation
warning period was from 2003/11/09 to now....
@
text
@/*
 * @@(#)FigureAttributes.java
 *
 * Project:     JHotdraw - a GUI framework for technical drawings
 *              http://www.jhotdraw.org
 *              http://jhotdraw.sourceforge.net
 * Copyright:   © by the original author(s) and all contributors
 * License:     Lesser GNU Public License (LGPL)
 *              http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.figures;

import org.jhotdraw.util.*;
import org.jhotdraw.framework.*;

import java.awt.Color;
import java.io.IOException;
import java.io.Serializable;
import java.util.Map;
import java.util.Iterator;

/**
 * A container for a figure's attributes. The attributes are stored
 * as key/value pairs.
 *
 * @@see Figure
 *
 * @@version <$CURRENT_VERSION$>
 */
public  class   FigureAttributes
		extends Object
		implements Cloneable, Serializable {

	private Map fMap;

	/*
	 * Serialization support.
	 */
	private static final long serialVersionUID = -6886355144423666716L;
	private int figureAttributesSerializedDataVersion = 1;

	/**
	 * Constructs the FigureAttributes.
	 */
	public FigureAttributes() {
		fMap = CollectionsFactory.current().createMap();
	}

	/**
	 * Gets the attribute with the given name.
	 * @@return attribute or null if the key is not defined
	 */
	public Object get(FigureAttributeConstant attributeConstant) {
		return fMap.get(attributeConstant);
	}

	/**
	 * Sets the attribute with the given name and
	 * overwrites its previous value.
	 */
	public void set(FigureAttributeConstant attributeConstant, Object value) {
		if (value != null) {
			fMap.put(attributeConstant, value);
		}
		else {
			fMap.remove(attributeConstant);
		}
	}

	/**
	 * Tests if an attribute is defined.
	 */
	public boolean hasDefined(FigureAttributeConstant attributeConstant) {
		return fMap.containsKey(attributeConstant);
	}

	/**
	 * Clones the attributes.
	 */
   public Object clone() {
		try {
			FigureAttributes a = (FigureAttributes) super.clone();
			a.fMap = CollectionsFactory.current().createMap(fMap);
			return a;
		}
		catch (CloneNotSupportedException e) {
			throw new InternalError();
		}
	}

	/**
	 * Reads the attributes from a StorableInput.
	 * FigureAttributes store the following types directly:
	 * Color, Boolean, String, Int. Other attribute types
	 * have to implement the Storable interface or they
	 * have to be wrapped by an object that implements Storable.
	 * @@see Storable
	 * @@see #write
	 */
	public void read(StorableInput dr) throws IOException {
		String s = dr.readString();
		if (!s.toLowerCase().equals("attributes")) {
			throw new IOException("Attributes expected");
		}

		fMap = CollectionsFactory.current().createMap();
		int size = dr.readInt();
		for (int i=0; i<size; i++) {
			String key = dr.readString();
			String valtype = dr.readString();
			Object val = null;
			if (valtype.equals("Color")) {
				val = new Color(dr.readInt(), dr.readInt(), dr.readInt());
			}
			else if (valtype.equals("Boolean")) {
				val = new Boolean(dr.readString());
			}
			else if (valtype.equals("String")) {
				val = dr.readString();
			}
			else if (valtype.equals("Int")) {
				val = new Integer(dr.readInt());
			}
			else if (valtype.equals("Storable")) {
				val = dr.readStorable();
			}
			else if (valtype.equals(FigureAttributeConstant.POPUP_MENU_STR)) {
				// read String but don't store it
				continue;
			}
			else if (valtype.equals("UNKNOWN")) {
				continue;
			}
			// try to get defined constant
			FigureAttributeConstant attributeConstant = FigureAttributeConstant.getConstant(key);
			set(attributeConstant, val);
		}
	}

	/**
	 * Writes the attributes to a StorableInput.
	 * FigureAttributes store the following types directly:
	 * Color, Boolean, String, Int. Other attribute types
	 * have to implement the Storable interface or they
	 * have to be wrapped by an object that implements Storable.
	 * @@see Storable
	 * @@see #write
	 */
	public void write(StorableOutput dw) {
		dw.writeString("attributes");

		dw.writeInt(fMap.size());   // number of attributes
		Iterator iter = fMap.keySet().iterator();
		while (iter.hasNext()) {
			FigureAttributeConstant fac = (FigureAttributeConstant)iter.next();
			String attributeName = fac.getName();
			Object attributeValue = fMap.get(fac);

			dw.writeString(attributeName);

			if (attributeValue instanceof String) {
				dw.writeString("String");
				dw.writeString((String)attributeValue);
			}
			else if (attributeValue instanceof Color) {
				writeColor(dw, "Color", (Color)attributeValue);
			}
			else if (attributeValue instanceof Boolean) {
				dw.writeString("Boolean");
				if (((Boolean)attributeValue).booleanValue()) {
					dw.writeString("TRUE");
				}
				else {
					dw.writeString("FALSE");
				}
			}
			else if (attributeValue instanceof Integer) {
				dw.writeString("Int");
				dw.writeInt(((Integer)attributeValue).intValue());
			}
			else if (attributeValue instanceof Storable) {
				dw.writeString("Storable");
				dw.writeStorable((Storable)attributeValue);
			}
			else if (attributeValue instanceof javax.swing.JPopupMenu) {
				dw.writeString(FigureAttributeConstant.POPUP_MENU_STR);
			}
			else {
				System.err.println("Unknown attribute: " + attributeValue);
				dw.writeString("UNKNOWN");
			}
		}
	}

	public static void writeColor(StorableOutput dw, String colorName, Color color) {
	   if (color != null) {
			dw.writeString(colorName);
			dw.writeInt(color.getRed());
			dw.writeInt(color.getGreen());
			dw.writeInt(color.getBlue());
		}
	}

	public static Color readColor(StorableInput dr) throws IOException {
		return new Color(dr.readInt(), dr.readInt(), dr.readInt());
	}
}
@


1.8
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@d128 1
a128 1
			else if (valtype.equals(Figure.POPUP_MENU)) {
d187 1
a187 1
				dw.writeString(Figure.POPUP_MENU);
@


1.7
log
@after variou merges... (before 5.4 release)
@
text
@d12 1
a12 1
package CH.ifa.draw.figures;
d14 2
a15 2
import CH.ifa.draw.util.*;
import CH.ifa.draw.framework.*;
@


1.6
log
@after variou merges... (before 5.4 release)
@
text
@d156 3
a158 2
			String s = (String)iter.next();
			Object v = fMap.get(s);
d160 1
a160 1
			dw.writeString(s);
d162 1
a162 1
			if (v instanceof String) {
d164 1
a164 1
				dw.writeString((String) v);
d166 2
a167 2
			else if (v instanceof Color) {
				writeColor(dw, "Color", (Color)v);
d169 1
a169 1
			else if (v instanceof Boolean) {
d171 1
a171 1
				if (((Boolean)v).booleanValue()) {
d178 1
a178 1
			else if (v instanceof Integer) {
d180 1
a180 1
				dw.writeInt(((Integer)v).intValue());
d182 1
a182 1
			else if (v instanceof Storable) {
d184 1
a184 1
				dw.writeStorable((Storable)v);
d186 1
a186 1
			else if (v instanceof javax.swing.JPopupMenu) {
d190 1
a190 1
				System.err.println("Unknown attribute: " + v);
@


1.5
log
@no message
@
text
@d14 3
a16 1
import java.util.*;
d20 2
a21 3

import CH.ifa.draw.util.*;
import CH.ifa.draw.framework.*;
d35 1
a35 1
	private Hashtable fMap;
d47 1
a47 1
		fMap = new Hashtable();
d52 1
a52 1
	 * @@returns attribute or null if the key is not defined
d84 1
a84 1
			a.fMap = (Hashtable) fMap.clone();
d107 1
a107 1
		fMap = new Hashtable();
d154 3
a156 3
		Enumeration k = fMap.keys();
		while (k.hasMoreElements()) {
			String s = (String) k.nextElement();
@


1.4
log
@merge dnd (before 5.3)
@
text
@d53 2
a54 2
	public Object get(String name) {
		return fMap.get(name);
d61 1
a61 1
	public void set(String name, Object value) {
d63 1
a63 1
			fMap.put(name, value);
d66 1
a66 1
			fMap.remove(name);
d73 2
a74 2
	public boolean hasDefined(String name) {
		return fMap.containsKey(name);
d134 3
a136 1
			fMap.put(key,val);
d159 1
a159 1
			
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d186 1
a186 1
				System.out.println("Unknown attribute: " + v);
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)FigureAttributes.java 5.2
d4 6
d27 2
a29 1

d31 2
a32 2
        extends Object
        implements Cloneable, Serializable {
d34 1
a34 1
    private Hashtable fMap;
d36 44
a79 44
    /*
     * Serialization support.
     */
    private static final long serialVersionUID = -6886355144423666716L;
    private int figureAttributesSerializedDataVersion = 1;

    /**
     * Constructs the FigureAttributes.
     */
    public FigureAttributes() {
        fMap = new Hashtable();
    }

    /**
     * Gets the attribute with the given name.
     * @@returns attribute or null if the key is not defined
     */
    public Object get(String name) {
        return fMap.get(name);
    }

    /**
     * Sets the attribute with the given name and
     * overwrites its previous value.
     */
    public void set(String name, Object value) {
    	if (value != null) {
        	fMap.put(name, value);
        }
        else {
        	fMap.remove(name);
        }
    }

    /**
     * Tests if an attribute is defined.
     */
    public boolean hasDefined(String name) {
        return fMap.containsKey(name);
    }

    /**
     * Clones the attributes.
     */
d81 123
a203 107
        try {
            FigureAttributes a = (FigureAttributes) super.clone();
            a.fMap = (Hashtable) fMap.clone();
            return a;
        } catch (CloneNotSupportedException e) {
	        throw new InternalError();
        }
    }

    /**
     * Reads the attributes from a StorableInput.
     * FigureAttributes store the following types directly:
     * Color, Boolean, String, Int. Other attribute types
     * have to implement the Storable interface or they
     * have to be wrapped by an object that implements Storable.
     * @@see Storable
     * @@see #write
     */
    public void read(StorableInput dr) throws IOException {
        String s = dr.readString();
        if (!s.toLowerCase().equals("attributes"))
            throw new IOException("Attributes expected");

        fMap = new Hashtable();
        int size = dr.readInt();
        for (int i=0; i<size; i++) {
            String key = dr.readString();
            String valtype = dr.readString();
            Object val = null;
            if (valtype.equals("Color"))
                val = new Color(dr.readInt(), dr.readInt(), dr.readInt());
            else if (valtype.equals("Boolean"))
                val = new Boolean(dr.readString());
            else if (valtype.equals("String"))
                val = dr.readString();
            else if (valtype.equals("Int"))
                val = new Integer(dr.readInt());
            else if (valtype.equals("Storable"))
                val = dr.readStorable();
            else if (valtype.equals(Figure.POPUP_MENU)) {
                // read String but don't store it
            	continue;
            }
            else if (valtype.equals("UNKNOWN"))
                continue;
            fMap.put(key,val);
        }
    }

    /**
     * Writes the attributes to a StorableInput.
     * FigureAttributes store the following types directly:
     * Color, Boolean, String, Int. Other attribute types
     * have to implement the Storable interface or they
     * have to be wrapped by an object that implements Storable.
     * @@see Storable
     * @@see #write
     */
    public void write(StorableOutput dw) {
        dw.writeString("attributes");

        dw.writeInt(fMap.size());   // number of attributes
        Enumeration k = fMap.keys();
        while (k.hasMoreElements()) {
            String s = (String) k.nextElement();
            Object v = fMap.get(s);

            dw.writeString(s);
            
            if (v instanceof String) {
                dw.writeString("String");
                dw.writeString((String) v);
            } else if (v instanceof Color) {
                writeColor(dw, "Color", (Color)v);
            } else if (v instanceof Boolean) {
                dw.writeString("Boolean");
                if (((Boolean)v).booleanValue())
                    dw.writeString("TRUE");
                else
                    dw.writeString("FALSE");
            } else if (v instanceof Integer) {
                dw.writeString("Int");
                dw.writeInt(((Integer)v).intValue());
            } else if (v instanceof Storable) {
                dw.writeString("Storable");
                dw.writeStorable((Storable)v);
            } else if (v instanceof javax.swing.JPopupMenu) {
                dw.writeString(Figure.POPUP_MENU);
            } else {
                System.out.println("Unknown attribute: " + v);
                dw.writeString("UNKNOWN");
            }
        }
    }

    public static void writeColor(StorableOutput dw, String colorName, Color color) {
       if (color != null) {
            dw.writeString(colorName);
            dw.writeInt(color.getRed());
            dw.writeInt(color.getGreen());
            dw.writeInt(color.getBlue());
        }
    }

    public static Color readColor(StorableInput dr) throws IOException {
        return new Color(dr.readInt(), dr.readInt(), dr.readInt());
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)FigureAttributes.java 5.1
d55 6
a60 1
        fMap.put(name, value);
d113 4
a118 1

d139 2
d142 1
a142 1
            Object v = fMap.get(s);
d147 1
a147 4
                dw.writeString("Color");
                dw.writeInt(((Color)v).getRed());
                dw.writeInt(((Color)v).getGreen());
                dw.writeInt(((Color)v).getBlue());
d160 2
d163 1
a163 1
                System.out.println(v);
d168 13
a181 1

@


1.1.1.1
log
@
Initial revision.
@
text
@@
