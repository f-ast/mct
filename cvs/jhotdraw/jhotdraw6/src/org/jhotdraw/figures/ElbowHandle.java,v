head	1.6;
access;
symbols
	jhotdraw60b1-release:1.6
	package_rename:1.6
	directory_rename:1.5
	reorg_6x_split_initial:1.5
	MVC_PHASE1:1.5.0.10
	NEW_ATTRIBUTES:1.5.0.8
	DNOYEB1_ALPHA-2:1.5
	release_JHD54b1:1.5
	BUGFIX_670992:1.5.0.6
	DNOYEB1_ALPHA-1:1.5
	dnoyeb1:1.5.0.4
	repack:1.5.0.2
	Root_repack:1.5
	Before_FigureVisitor:1.5
	JHotDraw_5-3:1.4
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.30.20.40.06;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.6
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)ElbowHandle.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.figures;

import org.jhotdraw.framework.*;
import org.jhotdraw.standard.*;
import org.jhotdraw.util.Geom;
import java.awt.*;

/**
 * A Handle to move an ElbowConnection left/right or up/down.
 *
 * @@version <$CURRENT_VERSION$>
 */
public class ElbowHandle extends AbstractHandle {

	private int fSegment;
	private int fLastX, fLastY;      // previous mouse position

	public ElbowHandle(LineConnection owner, int segment) {
		super(owner);
		fSegment = segment;
	}

	public void invokeStart(int  x, int  y, DrawingView view) {
		fLastX = x;
		fLastY = y;
	}

	public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
		LineConnection line = ownerConnection();
		Point p1 = line.pointAt(fSegment);
		Point p2 = line.pointAt(fSegment+1);
		int ddx = x - fLastX;
		int ddy = y - fLastY;

		Point np1;
		Point np2;
		if (isVertical(p1, p2)) {
			int cx = constrainX(p1.x + ddx);
			np1 = new Point(cx, p1.y);
			np2 = new Point(cx, p2.y);
		}
		else {
			int cy = constrainY(p1.y + ddy);
			np1 = new Point(p1.x, cy);
			np2 = new Point(p2.x, cy);
		}
		line.setPointAt(np1, fSegment);
		line.setPointAt(np2, fSegment+1);
		fLastX = x;
		fLastY = y;
	}

	private boolean isVertical(Point p1, Point p2) {
		return p1.x == p2.x;
	}

	public Point locate() {
		LineConnection line = ownerConnection();
		int segment = Math.min(fSegment, line.pointCount()-2);
		Point p1 = line.pointAt(segment);
		Point p2 = line.pointAt(segment+1);
		return new Point((p1.x + p2.x)/2, (p1.y + p2.y)/2);
	}

	public void draw(Graphics g) {
		Rectangle r = displayBox();

		g.setColor(Color.yellow);
		g.fillOval(r.x, r.y, r.width, r.height);

		g.setColor(Color.black);
		g.drawOval(r.x, r.y, r.width, r.height);
	}

	private int constrainX(int x) {
		LineConnection line = ownerConnection();
		Figure startFigure = line.getStartConnector().owner();
		Figure endFigure = line.getEndConnector().owner();
		Rectangle start = startFigure.displayBox();
		Rectangle end = endFigure.displayBox();
		Insets i1 = startFigure.connectionInsets();
		Insets i2 = endFigure.connectionInsets();

		int r1x, r1width, r2x, r2width;
		r1x = start.x + i1.left;
		r1width = start.width - i1.left - i1.right-1;

		r2x = end.x + i2.left;
		r2width = end.width - i2.left - i2.right-1;

		if (fSegment == 0) {
			x = Geom.range(r1x, r1x + r1width, x);
		}
		if (fSegment == line.pointCount()-2) {
			x = Geom.range(r2x, r2x + r2width, x);
		}
		return x;
	}

	private int constrainY(int y) {
		LineConnection line = ownerConnection();
		Figure startFigure = line.getStartConnector().owner();
		Figure endFigure = line.getEndConnector().owner();
		Rectangle start = startFigure.displayBox();
		Rectangle end = endFigure.displayBox();
		Insets i1 = startFigure.connectionInsets();
		Insets i2 = endFigure.connectionInsets();

		int r1y, r1height, r2y, r2height;
		r1y = start.y + i1.top;
		r1height = start.height - i1.top - i1.bottom-1;
		r2y = end.y + i2.top;
		r2height = end.height - i2.top - i2.bottom-1;

		if (fSegment == 0) {
			y = Geom.range(r1y, r1y + r1height, y);
		}
		if (fSegment == line.pointCount()-2) {
			y = Geom.range(r2y, r2y + r2height, y);
		}
		return y;
	}

	private LineConnection ownerConnection() {
		return (LineConnection)owner();
	}
}
@


1.5
log
@no message
@
text
@d12 1
a12 1
package CH.ifa.draw.figures;
d14 3
a16 3
import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.*;
import CH.ifa.draw.util.Geom;
@


1.4
log
@merge dnd (before 5.3)
@
text
@a13 1
import java.awt.*;
d17 1
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d26 2
a27 2
    private int fSegment;
    private int fLastX, fLastY;      // previous mouse position
d29 109
a137 109
    public ElbowHandle(LineConnection owner, int segment) {
        super(owner);
        fSegment = segment;
    }

    public void invokeStart(int  x, int  y, DrawingView view) {
        fLastX = x;
        fLastY = y;
    }

    public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
        LineConnection line = ownerConnection();
        Point p1 = line.pointAt(fSegment);
        Point p2 = line.pointAt(fSegment+1);
        int ddx = x - fLastX;
        int ddy = y - fLastY;

        Point np1;
        Point np2;
        if (isVertical(p1, p2)) {
            int cx = constrainX(p1.x + ddx);
            np1 = new Point(cx, p1.y);
            np2 = new Point(cx, p2.y);
        }
        else {
            int cy = constrainY(p1.y + ddy);
            np1 = new Point(p1.x, cy);
            np2 = new Point(p2.x, cy);
        }
        line.setPointAt(np1, fSegment);
        line.setPointAt(np2, fSegment+1);
        fLastX = x;
        fLastY = y;
    }

    private boolean isVertical(Point p1, Point p2) {
        return p1.x == p2.x;
    }

    public Point locate() {
        LineConnection line = ownerConnection();
        int segment = Math.min(fSegment, line.pointCount()-2);
        Point p1 = line.pointAt(segment);
        Point p2 = line.pointAt(segment+1);
        return new Point((p1.x + p2.x)/2, (p1.y + p2.y)/2);
    }

    public void draw(Graphics g) {
        Rectangle r = displayBox();

        g.setColor(Color.yellow);
        g.fillOval(r.x, r.y, r.width, r.height);

        g.setColor(Color.black);
        g.drawOval(r.x, r.y, r.width, r.height);
    }

    private int constrainX(int x) {
        LineConnection line = ownerConnection();
        Figure startFigure = line.getStartConnector().owner();
        Figure endFigure = line.getEndConnector().owner();
        Rectangle start = startFigure.displayBox();
        Rectangle end = endFigure.displayBox();
        Insets i1 = startFigure.connectionInsets();
        Insets i2 = endFigure.connectionInsets();

        int r1x, r1width, r2x, r2width;
        r1x = start.x + i1.left;
        r1width = start.width - i1.left - i1.right-1;

        r2x = end.x + i2.left;
        r2width = end.width - i2.left - i2.right-1;

        if (fSegment == 0) {
            x = Geom.range(r1x, r1x + r1width, x);
        }
        if (fSegment == line.pointCount()-2) {
            x = Geom.range(r2x, r2x + r2width, x);
        }
        return x;
    }

    private int constrainY(int y) {
        LineConnection line = ownerConnection();
        Figure startFigure = line.getStartConnector().owner();
        Figure endFigure = line.getEndConnector().owner();
        Rectangle start = startFigure.displayBox();
        Rectangle end = endFigure.displayBox();
        Insets i1 = startFigure.connectionInsets();
        Insets i2 = endFigure.connectionInsets();

        int r1y, r1height, r2y, r2height;
        r1y = start.y + i1.top;
        r1height = start.height - i1.top - i1.bottom-1;
        r2y = end.y + i2.top;
        r2height = end.height - i2.top - i2.bottom-1;

        if (fSegment == 0) {
            y = Geom.range(r1y, r1y + r1height, y);
        }
        if (fSegment == line.pointCount()-2) {
            y = Geom.range(r2y, r2y + r2height, y);
        }
        return y;
    }

    private LineConnection ownerConnection() {
        return (LineConnection)owner();
    }
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)ElbowHandle.java 5.2
d4 6
d21 2
d52 2
a53 1
        } else {
d88 2
a89 2
        Figure startFigure = line.start().owner();
        Figure endFigure = line.end().owner();
d102 1
a102 1
        if (fSegment == 0)
d104 2
a105 1
        if (fSegment == line.pointCount()-2)
d107 1
d113 2
a114 2
        Figure startFigure = line.start().owner();
        Figure endFigure = line.end().owner();
d126 1
a126 1
        if (fSegment == 0)
d128 2
a129 1
        if (fSegment == line.pointCount()-2)
d131 1
a137 1

@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)ElbowHandle.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
