head	1.8;
access;
symbols
	jhotdraw60b1-release:1.7
	package_rename:1.7
	directory_rename:1.6
	reorg_6x_split_initial:1.6
	MVC_PHASE1:1.6.0.4
	NEW_ATTRIBUTES:1.6.0.2
	DNOYEB1_ALPHA-2:1.5
	release_JHD54b1:1.5
	BUGFIX_670992:1.5.0.6
	DNOYEB1_ALPHA-1:1.5
	dnoyeb1:1.5.0.4
	repack:1.5.0.2
	Root_repack:1.5
	Before_FigureVisitor:1.5
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2004.03.11.09.03.58;	author pmorch;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.04.05.08.43;	author ricardo_padilha;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2002.08.04.22.43.22;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.30.20.40.06;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;

1.6.2.1
date	2003.02.23.16.00.36;	author dnoyeb;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2003.03.12.14.43.34;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.8
log
@It seems that a FigureAttrbitueConstant.POPUP_MENU was introduced in
revision 1.4 (date: 2003/09/13 22:31:10)

In contrib/CustomSelectionTool.java revision 1.11 (date: 2003/11/09
21:18:45) this new FigureAttrbitueConstant.POPUP_MENU is used instead
of Figure.POPUP_MENU which is now deprecated and removed completely -
so we get compile time warnings instead of run-time failures for
people using POPUP_MENU functionality.

More info in the JHotDraw 'Open Discussion' forums
'new FigureAttrbitueConstant.POPUP_MENU....' thread from
2004-03-04 11:17

Since it has been broken since 2003/11/09 and nobody has complained, I
guess it isn't too used, and so lets just suggest that the deprecation
warning period was from 2003/11/09 to now....
@
text
@/*
 * @@(#)AttributeFigure.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.figures;

import org.jhotdraw.util.*;
import org.jhotdraw.framework.*;
import org.jhotdraw.standard.*;

import java.awt.*;
import java.io.*;

/**
 * A figure that can keep track of an open ended set of attributes.
 * The attributes are stored in a dictionary implemented by
 * FigureAttributes.
 *
 * @@see Figure
 * @@see Handle
 * @@see FigureAttributes
 *
 * @@version <$CURRENT_VERSION$>
 */
public abstract class AttributeFigure extends AbstractFigure {

	/**
	 * The attributes of a figure. Each figure can have
	 * an open ended set of attributes. Attributes are
	 * identified by name.
	 * @@see #getAttribute
	 * @@see #setAttribute
	 */
	private FigureAttributes        fAttributes;

	/**
	 * The default attributes associated with a figure.
	 * If a figure doesn't have an attribute set, a default
	 * value from this shared attribute set is returned.
	 * @@see #getAttribute
	 * @@see #setAttribute
	 */
	private static FigureAttributes fgDefaultAttributes = null;

	/*
	 * Serialization support.
	 */
	private static final long serialVersionUID = -10857585979273442L;
	private int attributeFigureSerializedDataVersion = 1;

	protected AttributeFigure() { }

	/**
	 * Draws the figure in the given graphics. Draw is a template
	 * method calling drawBackground followed by drawFrame.
	 */
	public void draw(Graphics g) {
		Color fill = getFillColor();
		if (!ColorMap.isTransparent(fill)) {
			g.setColor(fill);
			drawBackground(g);
		}
		Color frame = getFrameColor();
		if (!ColorMap.isTransparent(frame)) {
			g.setColor(frame);
			drawFrame(g);
		}
	}

	/**
	 * Draws the background of the figure.
	 * @@see #draw
	 */
	protected void drawBackground(Graphics g) {
	}

	/**
	 * Draws the frame of the figure.
	 * @@see #draw
	 */
	protected void drawFrame(Graphics g) {
	}

	/**
	 * Gets the fill color of a figure. This is a convenience
	 * method.
	 * @@see #getAttribute
	 */
	public Color getFillColor() {
		return (Color) getAttribute(FigureAttributeConstant.FILL_COLOR);
	}

	/**
	 * Gets the frame color of a figure. This is a convenience
	 * method.
	 * @@see #getAttribute
	 */
	public Color getFrameColor() {
		return (Color) getAttribute(FigureAttributeConstant.FRAME_COLOR);
	}

	//---- figure attributes ----------------------------------

	private static void initializeAttributes() {
		fgDefaultAttributes = new FigureAttributes();
		fgDefaultAttributes.set(FigureAttributeConstant.FRAME_COLOR, Color.black);
		fgDefaultAttributes.set(FigureAttributeConstant.FILL_COLOR,  new Color(0x70DB93));
		fgDefaultAttributes.set(FigureAttributeConstant.TEXT_COLOR,  Color.black);
		fgDefaultAttributes.set(FigureAttributeConstant.ARROW_MODE,  new Integer(0));
		fgDefaultAttributes.set(FigureAttributeConstant.FONT_NAME,  "Helvetica");
		fgDefaultAttributes.set(FigureAttributeConstant.FONT_SIZE,   new Integer(12));
		fgDefaultAttributes.set(FigureAttributeConstant.FONT_STYLE,  new Integer(Font.PLAIN));
	}

	/**
	 * Sets or adds a default value for a named attribute
	 * @@see #getAttribute
	 */
	public static Object setDefaultAttribute(String name, Object value) {
		// save current value to return it
		Object currentValue = getDefaultAttribute(name);

		fgDefaultAttributes.set(FigureAttributeConstant.getConstant(name), value);
		return currentValue;
	}

	/**
	 * Initializes a  default value for a named attribute
	 * The difference between this method and setDefaultAttribute is that
	 * if the attribute is already set then it will not be changed.<BR>
	 * The purpose is to allow more than one source requiring the attribute
	 * to initialize it, but only the first initialization will be used.
	 *
	 * @@see #getAttribute
	 * @@see #setDefaultAttribute
	 */
	public static Object initDefaultAttribute(String name, Object value) {
		// get current value
		Object currentValue = getDefaultAttribute(name);

		// if it's already there skip the setting
		if (currentValue != null) {
			return currentValue;
		}

		fgDefaultAttributes.set(FigureAttributeConstant.getConstant(name), value);
		return null;
	}

	/**
	 * Gets a the default value for a named attribute
	 * @@see #getAttribute
	 */
	public static Object getDefaultAttribute(String name) {
		if (fgDefaultAttributes == null) {
			initializeAttributes();
		}
		return fgDefaultAttributes.get(FigureAttributeConstant.getConstant(name));
	}

	public static Object getDefaultAttribute(FigureAttributeConstant attributeConstant) {
		if (fgDefaultAttributes == null) {
			initializeAttributes();
		}
		return fgDefaultAttributes.get(attributeConstant);
	}
	/**
	 * Returns the named attribute or null if a
	 * a figure doesn't have an attribute.
	 * All figures support the attribute names
	 * FillColor and FrameColor
	 * @@deprecated use getAttribute(FigureAttributeConstant) instead
	 */
	public Object getAttribute(String name) {
		return getAttribute(FigureAttributeConstant.getConstant(name));
	}

	public Object getAttribute(FigureAttributeConstant attributeConstant) {
		if (fAttributes != null) {
			if (fAttributes.hasDefined(attributeConstant)) {
				return fAttributes.get(attributeConstant);
			}
		}
		return getDefaultAttribute(attributeConstant);
	}

	/**
	 * Sets the named attribute to the new value
	 * @@deprecated use setAttribute(FigureAttributeConstant, Object) instead
	 */
	public void setAttribute(String name, Object value) {
		setAttribute(FigureAttributeConstant.getConstant(name), value);
	}

	public void setAttribute(FigureAttributeConstant attributeConstant, Object value) {
		if (fAttributes == null) {
			fAttributes = new FigureAttributes();
		}
		fAttributes.set(attributeConstant, value);
		changed();
	}

	/**
	 * Stores the Figure to a StorableOutput.
	 */
	public void write(StorableOutput dw) {
		super.write(dw);
		if (fAttributes == null) {
			dw.writeString("no_attributes");
		}
		else {
			dw.writeString("attributes");
			fAttributes.write(dw);
		}
	}

	/**
	 * Reads the Figure from a StorableInput.
	 */
	public void read(StorableInput dr) throws IOException {
		super.read(dr);
		String s = dr.readString();
		if (s.toLowerCase().equals("attributes")) {
			fAttributes = new FigureAttributes();
			fAttributes.read(dr);
		}
	}

	private void writeObject(ObjectOutputStream o) throws IOException {
		// Filter out Popup menu: cannot serialize any associated action-Listeners
		// Work-around for Java-Bug: 4240860
		Object associatedMenu = getAttribute(FigureAttributeConstant.POPUP_MENU);
		if (associatedMenu != null) {
			setAttribute(FigureAttributeConstant.POPUP_MENU, null);
		}

		o.defaultWriteObject();

		if (associatedMenu != null) {
			setAttribute(FigureAttributeConstant.POPUP_MENU, associatedMenu);
		}
	}
}
@


1.7
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@d239 1
a239 1
		Object associatedMenu = getAttribute(Figure.POPUP_MENU);
d241 1
a241 1
			setAttribute(Figure.POPUP_MENU, null);
d247 1
a247 1
			setAttribute(Figure.POPUP_MENU, associatedMenu);
@


1.6
log
@Fixed Javadocs to avoid compilation warnings about deprecated methods (getAttribute and setAttribute).
@
text
@d12 1
a12 1
package CH.ifa.draw.figures;
d14 3
a16 3
import CH.ifa.draw.util.*;
import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.*;
@


1.6.2.1
log
@Adding new attributes system.
@
text
@a181 2
		System.err.println("WARNING: getAttribute(String name) has been deprecated.");
		//Thread.dumpStack();
a198 2
		System.err.println("WARNING: setAttribute(String name, Object value) has been deprecated.");
		//Thread.dumpStack();
a202 3
		if(attributeConstant.getName() == null){
			int x=0;
		}
@


1.6.2.2
log
@*** empty log message ***
@
text
@d14 1
d16 2
a17 2
import CH.ifa.draw.standard.AbstractFigure;
import CH.ifa.draw.util.*;
d207 3
@


1.5
log
@after variou merges... (before 5.4 release)
@
text
@d179 1
d196 1
@


1.4
log
@no message
@
text
@a18 1
import java.util.*;
d142 1
a142 1
	 * @@see @@setDefaultAttribute
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d98 1
a98 1
		return (Color) getAttribute("FillColor");
d107 1
a107 1
		return (Color) getAttribute("FrameColor");
d114 42
a155 7
		fgDefaultAttributes.set("FrameColor", Color.black);
		fgDefaultAttributes.set("FillColor",  new Color(0x70DB93));
		fgDefaultAttributes.set("TextColor",  Color.black);
		fgDefaultAttributes.set("ArrowMode",  new Integer(0));
		fgDefaultAttributes.set("FontName",  "Helvetica");
		fgDefaultAttributes.set("FontSize",   new Integer(12));
		fgDefaultAttributes.set("FontStyle",  new Integer(Font.PLAIN));
d163 1
a163 1
		if (fgDefaultAttributes == null)
d165 2
a166 1
		return fgDefaultAttributes.get(name);
d169 6
d182 4
d187 3
a189 2
			if (fAttributes.hasDefined(name))
				return fAttributes.get(name);
d191 1
a191 1
		return getDefaultAttribute(name);
d198 5
a202 1
		if (fAttributes == null)
d204 2
a205 1
		fAttributes.set(name, value);
d214 1
a214 1
		if (fAttributes == null)
d216 1
d242 1
a242 1
		
d244 1
a244 1
		
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)AttributeFigure.java 5.2
d4 6
d30 2
d35 146
a180 146
    /**
     * The attributes of a figure. Each figure can have
     * an open ended set of attributes. Attributes are
     * identified by name.
     * @@see #getAttribute
     * @@see #setAttribute
     */
    private FigureAttributes        fAttributes;

    /**
     * The default attributes associated with a figure.
     * If a figure doesn't have an attribute set, a default
     * value from this shared attribute set is returned.
     * @@see #getAttribute
     * @@see #setAttribute
     */
    private static FigureAttributes fgDefaultAttributes = null;

    /*
     * Serialization support.
     */
    private static final long serialVersionUID = -10857585979273442L;
    private int attributeFigureSerializedDataVersion = 1;

    protected AttributeFigure() { }

    /**
     * Draws the figure in the given graphics. Draw is a template
     * method calling drawBackground followed by drawFrame.
     */
    public void draw(Graphics g) {
        Color fill = getFillColor();
        if (!ColorMap.isTransparent(fill)) {
            g.setColor(fill);
            drawBackground(g);
        }
        Color frame = getFrameColor();
        if (!ColorMap.isTransparent(frame)) {
            g.setColor(frame);
            drawFrame(g);
        }
    }

    /**
     * Draws the background of the figure.
     * @@see #draw
     */
    protected void drawBackground(Graphics g) {
    }

    /**
     * Draws the frame of the figure.
     * @@see #draw
     */
    protected void drawFrame(Graphics g) {
    }

    /**
     * Gets the fill color of a figure. This is a convenience
     * method.
     * @@see #getAttribute
     */
    public Color getFillColor() {
        return (Color) getAttribute("FillColor");
    }

    /**
     * Gets the frame color of a figure. This is a convenience
     * method.
     * @@see #getAttribute
     */
    public Color getFrameColor() {
        return (Color) getAttribute("FrameColor");
    }

    //---- figure attributes ----------------------------------

    private static void initializeAttributes() {
        fgDefaultAttributes = new FigureAttributes();
        fgDefaultAttributes.set("FrameColor", Color.black);
        fgDefaultAttributes.set("FillColor",  new Color(0x70DB93));
        fgDefaultAttributes.set("TextColor",  Color.black);
        fgDefaultAttributes.set("ArrowMode",  new Integer(0));
        fgDefaultAttributes.set("FontName",  "Helvetica");
        fgDefaultAttributes.set("FontSize",   new Integer(12));
        fgDefaultAttributes.set("FontStyle",  new Integer(Font.PLAIN));
    }

    /**
     * Gets a the default value for a named attribute
     * @@see #getAttribute
     */
    public static Object getDefaultAttribute(String name) {
        if (fgDefaultAttributes == null)
            initializeAttributes();
        return fgDefaultAttributes.get(name);
    }

    /**
     * Returns the named attribute or null if a
     * a figure doesn't have an attribute.
     * All figures support the attribute names
     * FillColor and FrameColor
     */
    public Object getAttribute(String name) {
        if (fAttributes != null) {
            if (fAttributes.hasDefined(name))
                return fAttributes.get(name);
        }
        return getDefaultAttribute(name);
    }

    /**
     * Sets the named attribute to the new value
     */
    public void setAttribute(String name, Object value) {
        if (fAttributes == null)
            fAttributes = new FigureAttributes();
        fAttributes.set(name, value);
        changed();
    }

    /**
     * Stores the Figure to a StorableOutput.
     */
    public void write(StorableOutput dw) {
        super.write(dw);
        if (fAttributes == null)
            dw.writeString("no_attributes");
        else {
            dw.writeString("attributes");
            fAttributes.write(dw);
        }
    }

    /**
     * Reads the Figure from a StorableInput.
     */
    public void read(StorableInput dr) throws IOException {
        super.read(dr);
        String s = dr.readString();
        if (s.toLowerCase().equals("attributes")) {
            fAttributes = new FigureAttributes();
            fAttributes.read(dr);
        }
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)AttributeFigure.java 5.1
d87 1
a87 1
     @@see getAttribute
d96 1
a96 1
     @@see getAttribute
d117 1
a117 1
     * @@see getAttribute
d173 15
@


1.1.1.1
log
@
Initial revision.
@
text
@@
