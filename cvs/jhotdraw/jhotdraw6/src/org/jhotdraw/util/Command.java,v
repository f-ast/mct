head	1.7;
access;
symbols
	jhotdraw60b1-release:1.7
	package_rename:1.7
	directory_rename:1.6
	reorg_6x_split_initial:1.6
	MVC_PHASE1:1.6.0.10
	NEW_ATTRIBUTES:1.6.0.8
	DNOYEB1_ALPHA-2:1.6
	release_JHD54b1:1.6
	BUGFIX_670992:1.6.0.6
	DNOYEB1_ALPHA-1:1.6
	dnoyeb1:1.6.0.4
	repack:1.6.0.2
	Root_repack:1.6
	Before_FigureVisitor:1.6
	JHotDraw_5-3:1.6
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.20.32.01;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.25.13;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.29.13.42.14;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.7
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Command.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.util;

import org.jhotdraw.framework.DrawingEditor;

/**
 * Commands encapsulate an action to be executed. Commands have
 * a name and can be used in conjunction with <i>Command enabled</i>
 * ui components.
 * <hr>
 * <b>Design Patterns</b><P>
 * <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
 * <b><a href=../pattlets/sld010.htm>Command</a></b><br>
 * Command is a simple instance of the command pattern without undo
 * support.
 * <hr>
 *
 * @@see CommandButton
 * @@see CommandMenu
 * @@see CommandChoice
 *
 * @@version <$CURRENT_VERSION$>
 */
public interface Command {

	/**
	 * Executes the command.
	 */
	public void execute();

	/**
	 * Tests if the command can be executed.
	 */
	public boolean isExecutable();

	/**
	 * Gets the command name.
	 */
	public String name();
	
	public DrawingEditor getDrawingEditor();

	public Undoable getUndoActivity();

	public void setUndoActivity(Undoable newUndoableActivity);
	
	public void addCommandListener(CommandListener newCommandListener);
	public void removeCommandListener(CommandListener oldCommandListener);
}
@


1.6
log
@merge dnd (before 5.3)
@
text
@d12 1
a12 1
package CH.ifa.draw.util;
d14 1
a14 1
import CH.ifa.draw.framework.DrawingEditor;
@


1.5
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d14 1
a14 1
import CH.ifa.draw.framework.DrawingView;
d36 16
a51 16
    /**
     * Executes the command.
     */
    public void execute();

    /**
     * Tests if the command can be executed.
     */
    public boolean isExecutable();

    /**
     * Gets the command name.
     */
    public String name();
    
    public DrawingView view();
d56 3
@


1.4
log
@before merge for version 5.3 (dnd, undo,...)
@
text
@d2 1
a2 1
 * @@(#)Command.java 5.2
d4 6
d14 2
d31 2
d34 1
a34 10
public abstract class Command {

    private String  fName;

    /**
     * Constructs a command with the given name.
     */
    public Command(String name) {
        fName = name;
    }
d39 1
a39 1
    public abstract void execute();
d44 1
a44 3
    public boolean isExecutable() {
        return true;
    }
d49 7
a55 3
    public String name() {
        return fName;
    }
@


1.3
log
@- SelectionFigure is now an interface. The default implementation CH.ifa.draw.standard.StandardSelectionFigure
- A FigureSelectionListener interface has been introduced in CH.ifa.draw.framework. An DrawingEditor
  is now a FigureSelectionListener and the signature for all selectionChanged() methods has been
  changed to figureSelectionChanged().
- CH.ifa.draw.util.Command is now an interface. A AbstractCommand can be found in CH.ifa.draw.standard.
- All commands used to have a fView field. This has been moved to CH.ifa.draw.standard.AbstactCommand
- A CH.ifa.draw.standard.StandardDrawingView has now a paintComponents() method instead of a paint()
  and update() method. This allows the CH.ifa.draw.util.FloatingTextField to be a javax.swing.JTextField
  instead of a java.awt.TextField.
- CH.ifa.draw.figures.AbstractLineDecorator has been missing
- DrawApplet, DrawApplication and derived classes are now programmed towards the DrawingView interface
  instead of using StandardDrawingView. That leads to occasional cast when some additional StandardDrawingView
  functionality is required in some specialized cases. Applications that were derived from DrawApplication
  and used to override the createContents() methods should now return a DrawingView as well
@
text
@a7 2
import CH.ifa.draw.framework.DrawingView;

d24 10
a33 1
public interface Command {
d38 1
a38 1
    public void execute();
d43 3
a45 1
    public boolean isExecutable();
d50 3
a52 3
    public String name();
    
    public DrawingView view();
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d8 2
d26 1
a26 10
public abstract class Command {

    private String  fName;

    /**
     * Constructs a command with the given name.
     */
    public Command(String name) {
        fName = name;
    }
d31 1
a31 1
    public abstract void execute();
d36 1
a36 3
    public boolean isExecutable() {
        return true;
    }
d41 3
a43 3
    public String name() {
        return fName;
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)Command.java 5.1
a6 3

import java.awt.*;
import java.util.*;
@


1.1.1.1
log
@
Initial revision.
@
text
@@
