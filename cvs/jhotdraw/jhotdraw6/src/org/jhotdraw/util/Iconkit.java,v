head	1.8;
access;
symbols
	jhotdraw60b1-release:1.6
	package_rename:1.6
	directory_rename:1.5
	reorg_6x_split_initial:1.5
	MVC_PHASE1:1.5.0.10
	NEW_ATTRIBUTES:1.5.0.8
	DNOYEB1_ALPHA-2:1.5
	release_JHD54b1:1.5
	BUGFIX_670992:1.5.0.6
	DNOYEB1_ALPHA-1:1.5
	dnoyeb1:1.5.0.4
	repack:1.5.0.2
	Root_repack:1.5
	Before_FigureVisitor:1.5
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2004.05.25.13.35.26;	author pmorch;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.11.08.02.26;	author pmorch;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.04.23.01.49;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.30.20.40.10;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.33;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Iconkit modified to deprecate duplicate and redundant methods as
described in:
https://sourceforge.net/forum/forum.php?thread_id=1034601&forum_id=39886
@
text
@/*
 * @@(#)Iconkit.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.util;

import javax.swing.*;
import java.awt.*;
import java.awt.image.ImageProducer;
import java.net.URL;
import java.util.Iterator;
import java.util.Set;
import java.util.Map;
import java.util.Hashtable;

/**
 * The Iconkit class supports the sharing of images. It maintains
 * a map of image names and their corresponding images.
 *
 * Iconkit also supports to load a collection of images in
 * synchronized way.
 * The resolution of a path name to an image is delegated to the DrawingEditor.
 * <hr>
 * <b>Design Patterns</b><P>
 * <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
 * <b><a href=../pattlets/sld031.htm>Singleton</a></b><br>
 * The Iconkit is a singleton.
 * <hr>
 *
 * @@version <$CURRENT_VERSION$>
 */
public class Iconkit {
	/* Holds URLs as keys, and Images as values */
	private Map                 fMap;
	/* Holds URLs */
	private Set                 fRegisteredImages;
	private Component           fComponent;
	private final static int    ID = 123;
	private static Iconkit      fgIconkit = null;

	/**
	 * Constructs an Iconkit that uses the given editor to
	 * resolve image path names.
	 */
	public Iconkit(Component component) {
		fMap = new Hashtable(53);
		fRegisteredImages = CollectionsFactory.current().createSet();
		fComponent = component;
		fgIconkit = this;
	}

	/**
	 * Gets the single instance
	 */
	public static Iconkit instance() {
		return fgIconkit;
	}

	/*********************************************************************
	 *
	 * Basic methods for image/icon retrieval.
	 * 
	 ********************************************************************/

	/**
	 * Just gets the image pointed to by the URL and doesn't store
	 * it in cache.
	 */
	public Image loadImageUncachedURL(URL url) {
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		try {
			return toolkit.createImage((ImageProducer) url.getContent());
		}
		catch (Exception ex) {
			return null;
		}
	}

	/**
	 * Just gets the file but doesn't store it in cache.
	 */
	public Image loadImageUncached(String fileName) {
		return loadImageUncachedURL(getResourceURL(fileName));
	}

	/**
 	 * Loads an image URL with the given name, caches it, and
 	 * optionally waits for it to finish loading.
	 */
	public Image loadImageURL(URL url, boolean waitForLoad) {
		if (fMap.containsKey(url)) {
			return (Image) fMap.get(url);
		}

		Image image = loadImageUncachedURL(url);

		if (image != null) {
			fMap.put(url, image);
			if (waitForLoad) {
				waitForLoadedImage(image);
			}
		}

		return image;
	}

	/**
 	 * Loads an image file with the given name, caches it, and
 	 * optionally waits for it to finish loading.
	 */
	public Image loadImage(String fileName, boolean waitForLoad) {
		return loadImageURL(getResourceURL(fileName), waitForLoad);
	}
	
	/**
	 * Loads an image URL with the given name and caches it
	 */
	public Image loadImageURL(URL url) {
		return loadImageURL(url, false);
	}

	/**
	 * Loads an image with the given fileName and caches it.
	 */
	public Image loadImage(String fileName) {
		return loadImageURL(getResourceURL(fileName), false);
	}

	/**
	 * Blocks while image loads and returns a completely loaded
	 * version of image.
	 */
	public Image waitForLoadedImage(Image image) {
		if (image!=null) {
			ImageIcon icon = new ImageIcon(image);
			// icon.getImage forces the wait to happen
			image = icon.getImage();
		}
		return image;
	}

	/**
	 * To translate between a resource and a URL
	 */
	private URL getResourceURL(String resourceName) {
		return getClass().getResource(resourceName);
	}

	/**
	 * Registers a URL that is then loaded together with
	 * the other registered images by loadRegisteredImages.
	 * @@see #loadRegisteredImages
	 */
	public void registerImageURL(URL url) {
		fRegisteredImages.add(url);
	}
	
	/**
	 * Registers the URL for the image resource
	 * @@see #registerImageURL
	 */
	public void registerImage(String fileName) {
		registerImageURL(getResourceURL(fileName));
	}

	/**
	 * Loads all registered images.
	 * If component is null, the component supplied in the
	 * constructor will be used.
	 * @@see #registerImage
	 * @@see #registerImageURL
	 */
	public void loadRegisteredImages(Component component) {
		if (fRegisteredImages.size() == 0)
			return;

		if (component == null) {
			component = fComponent;
		}

		MediaTracker tracker = new MediaTracker(component);
		// register images with MediaTracker
		Iterator iter = fRegisteredImages.iterator();
		while (iter.hasNext()) {
			URL url = (URL)iter.next();
			if (! fMap.containsKey(url)) {
				tracker.addImage(loadImageURL(url), ID);
			}
		}
		fRegisteredImages.clear();

		// block until all images are loaded
		try {
			tracker.waitForAll();
		}
		catch (Exception e) {
			// ignore: do nothing
		}
	}

	/*********************************************************************
	 *
	 * Deprecated methods
	 * 
	 ********************************************************************/

	/**
	 * Gets the image with the given fileName. If the image can't
	 * be found it tries it again after registering the image and
	 * loading all the registered images.
	 * 
	 * @@deprecated use loadImage instead
	 */
	public Image getImage(String fileName) {
		return loadImage(fileName, true);
	}

	/**
	 * Registers and loads an image.
	 * If component is null, the component supplied in the
	 * constructor will be used.
	 * 
	 * @@deprecated use loadImage instead
	 */
	public Image registerAndLoadImage(Component component, String fileName) {
		registerImage(fileName);
		loadRegisteredImages(component);
		return loadImage(fileName, true);
	}

	/**
	 * Loads an image but does not put in in the cache.
	 * 
	 * @@deprecated use loadImageUncached instead
	 */
	public Image loadImageResource(String fileName) {
		return loadImageUncached(fileName);
	}


}
@


1.7
log
@* Allow Iconkit to fetch Images from URLs as well as resources.
Many methods, such as getImage now have a getImageURL counterpart.
I kept the original method names for BW compatibility reasons.

* The list of images to retrieve (private List fRegisteredImages)
should be a Set, not a list. It made no sense to allow retrieval of
the same image twice.

* The constructor takes a Component instance. In all methods that
require a Component, use the one given in the constructor, if the
supplied Component instance is null.

* getImage should register an image if it wasn't registered before
loadRegisteredImages(), so that registering an image is automatic.
This is to avoid having to do this everywhere I use the Iconkit:
Image image = Iconkit.instance().getImage(file);
if (null == image) {
// register the image and try again
Iconkit.instance().registerImage(file);
image = Iconkit.instance().getImage(file);
}
Now I can just:
Image image = Iconkit.instance().getImage(file);
@
text
@d66 6
d73 2
a74 4
	 * Loads all registered images.
	 * If component is null, the component supplied in the
	 * constructor will be used.
	 * @@see #registerImage
d76 2
a77 20
	public void loadRegisteredImages(Component component) {
		if (fRegisteredImages.size() == 0)
			return;

		if (component == null) {
			component = fComponent;
		}

		MediaTracker tracker = new MediaTracker(component);
		// register images with MediaTracker
		Iterator iter = fRegisteredImages.iterator();
		while (iter.hasNext()) {
			URL url = (URL)iter.next();
			if (basicGetImageURL(url) == null) {
				tracker.addImage(loadImageURL(url), ID);
			}
		}
		fRegisteredImages.clear();

		// block until all images are loaded
d79 1
a79 1
			tracker.waitForAll();
d81 2
a82 2
		catch (Exception e) {
			// ignore: do nothing
d87 1
a87 11
	 * Registers a URL that is then loaded together with
	 * the other registered images by loadRegisteredImages.
	 * @@see #loadRegisteredImages
	 */
	public void registerImageURL(URL url) {
		fRegisteredImages.add(url);
	}
	
	/**
	 * Registers the URL for the image resource
	 * @@see #registerImageURL
d89 2
a90 2
	public void registerImage(String fileName) {
		registerImageURL(getResourceURL(fileName));
d94 2
a95 1
	 * Loads an image URL with the given name.
d97 1
a97 1
	public Image loadImageURL(URL url) {
d101 3
a103 1
		Image image = loadImageResourceURL(url);
d106 3
d110 1
d115 16
a130 1
	 * Loads an image with the given name.
d133 1
a133 1
		return loadImageURL(getResourceURL(fileName));
d136 9
a144 7
	public Image loadImageResourceURL(URL url) {
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		try {
			return toolkit.createImage((ImageProducer) url.getContent());
		}
		catch (Exception ex) {
			return null;
d146 1
d149 5
a153 2
	public Image loadImageResource(String fileName) {
		return loadImageResourceURL(getResourceURL(fileName));
d157 11
a167 3
	 * Registers and loads an image.
	 * If component is null, the component supplied in the
	 * constructor will be used.
d169 2
a170 4
	public Image registerAndLoadImageURL(Component component, URL url) {
		registerImageURL(url);
		loadRegisteredImages(component);
		return getImageURL(url);
d172 1
d174 1
a174 1
	 * Registers and loads an image.
d177 2
d180 7
a186 3
	public Image registerAndLoadImage(Component component, String fileName) {
		return registerAndLoadImageURL(component, getResourceURL(fileName));
	}
d188 8
a195 5
	public Image loadImageURL(URL url, boolean waitForLoad) {
		Image image = loadImageURL(url);
		if (image!=null && waitForLoad) {
			ImageIcon icon = new ImageIcon(image);
			image = icon.getImage(); //this forces the wait to happen
d197 1
a197 2
		return image;
	}
d199 6
a204 13
	public Image loadImage(String fileName, boolean waitForLoad) {
		return loadImageURL(getResourceURL(fileName), waitForLoad);
	}
	
	/**
	 * Gets the image with the given URL. If the image can't be
	 * found it tries it again after registering the image and
	 * loading all the registered images.
	 */
	public Image getImageURL(URL url) {
		Image image = basicGetImageURL(url);
		if (image != null) {
			return image;
a205 5
		registerImageURL(url);
		// load registered images and try again
		loadRegisteredImages(fComponent);
		// try again
		return basicGetImageURL(url);
d207 7
d218 2
d222 1
a222 1
		return getImageURL(getResourceURL(fileName));
d225 11
a235 2
	private URL getResourceURL(String resourceName) {
		return getClass().getResource(resourceName);
d238 7
a244 5
	private Image basicGetImageURL(URL url) {
		if (fMap.containsKey(url)) {
			return (Image) fMap.get(url);
		}
		return null;
d247 1
@


1.6
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@d19 1
a19 1
import java.util.List;
d40 1
d42 2
a43 1
	private List                fRegisteredImages;
a46 1
	private static boolean      fgDebug = false;
d54 1
a54 1
		fRegisteredImages = CollectionsFactory.current().createList(10);
d68 2
d76 4
a80 1

d84 3
a86 3
			String fileName = (String)iter.next();
			if (basicGetImage(fileName) == null) {
				tracker.addImage(loadImage(fileName), ID);
d101 1
a101 1
	 * Registers an image that is then loaded together with
d105 2
a106 2
	public void registerImage(String fileName) {
		fRegisteredImages.add(fileName);
d108 1
a108 1

d110 2
a111 1
	 * Registers and loads an image.
d113 2
a114 4
	public Image registerAndLoadImage(Component component, String fileName) {
		registerImage(fileName);
		loadRegisteredImages(component);
		return getImage(fileName);
d118 1
a118 1
	 * Loads an image with the given name.
d120 3
a122 3
	public Image loadImage(String filename) {
		if (fMap.containsKey(filename)) {
			return (Image) fMap.get(filename);
d124 1
a124 1
		Image image = loadImageResource(filename);
d126 1
a126 1
			fMap.put(filename, image);
d131 5
a135 7
	public Image loadImage(String filename, boolean waitForLoad) {
		Image image = loadImage(filename);
		if (image!=null && waitForLoad) {
			ImageIcon icon = new ImageIcon(image);
			image = icon.getImage(); //this forces the wait to happen
		}
		return image;
d138 1
a138 1
	public Image loadImageResource(String resourcename) {
a140 4
			URL url = getClass().getResource(resourcename);
			if (fgDebug) {
				System.out.println(resourcename);
			}
d148 36
d185 3
a187 3
	 * Gets the image with the given name. If the image
	 * can't be found it tries it again after loading
	 * all the registered images.
d189 2
a190 2
	public Image getImage(String filename) {
		Image image = basicGetImage(filename);
d194 1
d198 9
a206 1
		return basicGetImage(filename);
d209 7
a215 3
	private Image basicGetImage(String filename) {
		if (fMap.containsKey(filename)) {
			return (Image) fMap.get(filename);
d219 1
@


1.5
log
@after variou merges... (before 5.4 release)
@
text
@d12 1
a12 1
package CH.ifa.draw.util;
@


1.4
log
@no message
@
text
@d17 5
a21 1
import java.util.*;
d40 2
a41 2
	private Hashtable           fMap;
	private Vector              fRegisteredImages;
d53 1
a53 1
		fRegisteredImages = new Vector(10);
d76 3
a78 3
		Enumeration k = fRegisteredImages.elements();
		while (k.hasMoreElements()) {
			String fileName = (String) k.nextElement();
d83 1
a83 1
		fRegisteredImages.removeAllElements();
d89 3
a91 1
		catch(Exception e) {  }
d100 1
a100 1
		fRegisteredImages.addElement(fileName);
d126 1
a126 1
	public Image loadImage(String filename, boolean waitForLoad){
d128 1
a128 1
		if (image!=null && waitForLoad){
d138 1
a138 1
			java.net.URL url = getClass().getResource(resourcename);
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d14 1
d116 9
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)Iconkit.java 5.2
d4 6
d31 2
d35 120
a154 113
    private Hashtable           fMap;
    private Vector              fRegisteredImages;
    private Component           fComponent;
    private final static int    ID = 123;
    private static Iconkit      fgIconkit = null;
    private static boolean      fgDebug = false;

    /**
     * Constructs an Iconkit that uses the given editor to
     * resolve image path names.
     */
    public Iconkit(Component component) {
        fMap = new Hashtable(53);
        fRegisteredImages = new Vector(10);
        fComponent = component;
        fgIconkit = this;
    }

    /**
     * Gets the single instance
     */
    public static Iconkit instance() {
        return fgIconkit;
    }

    /**
     * Loads all registered images.
     * @@see #registerImage
     */
    public void loadRegisteredImages(Component component) {
        if (fRegisteredImages.size() == 0)
            return;

        MediaTracker tracker = new MediaTracker(component);

        // register images with MediaTracker
        Enumeration k = fRegisteredImages.elements();
        while (k.hasMoreElements()) {
            String fileName = (String) k.nextElement();
            if (basicGetImage(fileName) == null) {
                tracker.addImage(loadImage(fileName), ID);
            }
        }
        fRegisteredImages.removeAllElements();

        // block until all images are loaded
        try {
            tracker.waitForAll();
        } catch (Exception e) {  }
    }

    /**
     * Registers an image that is then loaded together with
     * the other registered images by loadRegisteredImages.
     * @@see #loadRegisteredImages
     */
    public void registerImage(String fileName) {
        fRegisteredImages.addElement(fileName);
    }

    /**
     * Registers and loads an image.
     */
    public Image registerAndLoadImage(Component component, String fileName) {
        registerImage(fileName);
        loadRegisteredImages(component);
        return getImage(fileName);
    }

    /**
     * Loads an image with the given name.
     */
    public Image loadImage(String filename) {
        if (fMap.containsKey(filename))
            return (Image) fMap.get(filename);
        Image image = loadImageResource(filename);
        if (image != null)
            fMap.put(filename, image);
        return image;
    }

    public Image loadImageResource(String resourcename) {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        try {
            java.net.URL url = getClass().getResource(resourcename);
            if (fgDebug)
                System.out.println(resourcename);
            return toolkit.createImage((ImageProducer) url.getContent());
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * Gets the image with the given name. If the image
     * can't be found it tries it again after loading
     * all the registered images.
     */
    public Image getImage(String filename) {
        Image image = basicGetImage(filename);
        if (image != null)
            return image;
        // load registered images and try again
        loadRegisteredImages(fComponent);
        // try again
        return basicGetImage(filename);
    }

    private Image basicGetImage(String filename) {
        if (fMap.containsKey(filename))
            return (Image) fMap.get(filename);
        return null;
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)Iconkit.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
