head	1.7;
access;
symbols
	jhotdraw60b1-release:1.7
	package_rename:1.7
	directory_rename:1.6
	reorg_6x_split_initial:1.6
	MVC_PHASE1:1.6.0.10
	NEW_ATTRIBUTES:1.6.0.8
	DNOYEB1_ALPHA-2:1.6
	release_JHD54b1:1.6
	BUGFIX_670992:1.6.0.6
	DNOYEB1_ALPHA-1:1.6
	dnoyeb1:1.6.0.4
	repack:1.6.0.2
	Root_repack:1.6
	Before_FigureVisitor:1.6
	JHotDraw_5-3:1.4
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.04.23.01.49;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.30.20.40.10;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.33;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.7
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)PaletteButton.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.util;

import javax.swing.*;
import java.awt.event.*;

/**
 * A palette button is a three state button. The states are normal
 * pressed and selected. It uses to the palette listener interface
 * to notify about state changes.
 *
 * @@see PaletteListener
 * @@see PaletteLayout
 *
 * @@version <$CURRENT_VERSION$>
*/
public abstract class PaletteButton
				extends JButton
				implements MouseListener, MouseMotionListener {

	protected static final int NORMAL = 1;
	protected static final int PRESSED = 2;
	protected static final int SELECTED = 3;

	private int             fState;
	private int             fOldState;

	private PaletteListener  fListener;

	/**
	 * Constructs a PaletteButton.
	 * @@param listener the listener to be notified.
	 */
	public PaletteButton(PaletteListener listener) {
		fListener = listener;
		fState = fOldState = NORMAL;
		addMouseListener(this);
		addMouseMotionListener(this);
	}

	public Object value() {
		return null;
	}

	public String name() {
		return "";
	}

	public void reset() {
		if (isEnabled()) {
			fState = NORMAL;
			setSelected(false);
			repaint();
		}
	}

	public void select() {
		if (isEnabled()) {
			fState = SELECTED;
			setSelected(true);
			repaint();
		}
	}

	public void mousePressed(MouseEvent e) {
		if (isEnabled()) {
			fOldState = fState;
			fState = PRESSED;
			repaint();
		}
	}

	public void mouseDragged(MouseEvent e) {
		if (isEnabled()) {
			if (contains(e.getX(),e.getY())) {
				fState = PRESSED;
			}
			else {
				fState = fOldState;
			}
			repaint();
		}
	}

	public void mouseReleased(MouseEvent e) {
		if (isEnabled()) {
			fState = fOldState;
			repaint();
			if (contains(e.getX(),e.getY())) {
				fListener.paletteUserSelected(this);
			}
		}
	}

	public void mouseMoved(MouseEvent e) {
		fListener.paletteUserOver(this, true);
	}

	public void mouseExited(MouseEvent e) {
		if (fState == PRESSED) {
			// JDK1.1 on MS-Windows sometimes looses mouse released
			mouseDragged(e);
		}
		fListener.paletteUserOver(this, false);
	}

	public void mouseClicked(MouseEvent e) {}
	public void mouseEntered(MouseEvent e) {}

//  Not necessary anymore in JFC due to the support of Icons in JButton
/*
	public abstract void paintBackground(Graphics g);
	public abstract void paintNormal(Graphics g);
	public abstract void paintPressed(Graphics g);
	public abstract void paintSelected(Graphics g);

	public void update(Graphics g) {
		paint(g);
	}
	
	public void paint(Graphics g) {
		paintBackground(g);

		switch (fState) {
		case PRESSED:
			paintPressed(g);
			break;
		case SELECTED:
			paintSelected(g);
			break;
		case NORMAL:
		default:
			paintNormal(g);
			break;
		}
	}
*/
}
@


1.6
log
@after variou merges... (before 5.4 release)
@
text
@d12 1
a12 1
package CH.ifa.draw.util;
@


1.5
log
@no message
@
text
@a14 1
import java.awt.*;
@


1.4
log
@merge dnd (before 5.3)
@
text
@d32 3
a34 3
	static final int NORMAL = 1;
	static final int PRESSED = 2;
	static final int SELECTED = 3;
a35 1
	private PaletteListener  fListener;
d39 1
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d61 5
a65 3
		fState = NORMAL;
		setSelected(false);
		repaint();
d69 5
a73 3
		fState = SELECTED;
		setSelected(true);
		repaint();
d77 5
a81 3
		fOldState = fState;
		fState = PRESSED;
		repaint();
d85 8
a92 5
		if (contains(e.getX(),e.getY())) {
			fState = PRESSED;
		}
		else {
			fState = fOldState;
a93 1
		repaint();
d97 6
a102 4
		fState = fOldState;
		repaint();
		if (contains(e.getX(),e.getY())) {
			fListener.paletteUserSelected(this);
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)PaletteButton.java 5.2
d4 6
d25 2
a27 1

d29 2
a30 2
                extends JButton
                implements MouseListener, MouseMotionListener {
d32 75
a106 70
    static final int NORMAL = 1;
    static final int PRESSED = 2;
    static final int SELECTED = 3;

    private PaletteListener  fListener;
    private int             fState;
    private int             fOldState;


    /**
     * Constructs a PaletteButton.
     * @@param listener the listener to be notified.
     */
    public PaletteButton(PaletteListener listener) {
        fListener = listener;
        fState = fOldState = NORMAL;
        addMouseListener(this);
        addMouseMotionListener(this);
    }

    public Object value() {
        return null;
    }

    public String name() {
        return "";
    }

    public void reset() {
        fState = NORMAL;
        setSelected(false);
        repaint();
    }

    public void select() {
        fState = SELECTED;
        setSelected(true);
        repaint();
    }

    public void mousePressed(MouseEvent e) {
        fOldState = fState;
        fState = PRESSED;
        repaint();
    }

    public void mouseDragged(MouseEvent e) {
        if (contains(e.getX(),e.getY()))
            fState = PRESSED;
        else
            fState = fOldState;
        repaint();
    }

    public void mouseReleased(MouseEvent e) {
        fState = fOldState;
        repaint();
        if (contains(e.getX(),e.getY()))
            fListener.paletteUserSelected(this);
    }

    public void mouseMoved(MouseEvent e) {
        fListener.paletteUserOver(this, true);
    }

    public void mouseExited(MouseEvent e) {
        if (fState == PRESSED) // JDK1.1 on MS-Windows sometimes looses mouse released
            mouseDragged(e);
        fListener.paletteUserOver(this, false);
    }
d108 2
a109 2
    public void mouseClicked(MouseEvent e) {}
    public void mouseEntered(MouseEvent e) {}
d113 25
a137 25
    public abstract void paintBackground(Graphics g);
    public abstract void paintNormal(Graphics g);
    public abstract void paintPressed(Graphics g);
    public abstract void paintSelected(Graphics g);

    public void update(Graphics g) {
        paint(g);
    }
    
    public void paint(Graphics g) {
        paintBackground(g);

        switch (fState) {
        case PRESSED:
            paintPressed(g);
            break;
        case SELECTED:
            paintSelected(g);
            break;
        case NORMAL:
        default:
            paintNormal(g);
            break;
        }
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)PaletteButton.java 5.1
d8 1
d22 1
a22 1
                extends Canvas
a44 5
    public abstract void paintBackground(Graphics g);
    public abstract void paintNormal(Graphics g);
    public abstract void paintPressed(Graphics g);
    public abstract void paintSelected(Graphics g);

d55 1
d61 1
d91 1
a91 1
        if (fState == PRESSED) // JDK1.1 on Windows sometimes looses mouse released
d99 7
d109 1
a109 1

d126 1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
