head	1.8;
access;
symbols
	jhotdraw60b1-release:1.8
	package_rename:1.8
	directory_rename:1.7
	reorg_6x_split_initial:1.7
	MVC_PHASE1:1.6.0.10
	NEW_ATTRIBUTES:1.6.0.8
	DNOYEB1_ALPHA-2:1.6
	release_JHD54b1:1.6
	BUGFIX_670992:1.6.0.6
	DNOYEB1_ALPHA-1:1.6
	dnoyeb1:1.6.0.4
	repack:1.6.0.2
	Root_repack:1.6
	Before_FigureVisitor:1.6
	JHotDraw_5-3:1.6
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.20.14.58.54;	author ricardo_padilha;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.20.32.01;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.25.13;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.29.13.42.14;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.8
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)FloatingTextField.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.util;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

/**
 * A text field overlay that is used to edit a TextFigure.
 * A FloatingTextField requires a two step initialization:
 * In a first step the overlay is created and in a
 * second step it can be positioned.
 *
 * @@see org.jhotdraw.figures.TextFigure
 *
 * @@version <$CURRENT_VERSION$>
 */
public  class FloatingTextField {

	private JTextField   fEditWidget;
	private Container   fContainer;

	public FloatingTextField() {
		fEditWidget = new JTextField(20);
	}

	/**
	 * Creates the overlay for the given Component.
	 */
	public void createOverlay(Container container) {
		createOverlay(container, null);
	}

	/**
	 * Creates the overlay for the given Container using a
	 * specific font.
	 */
	public void createOverlay(Container container, Font font) {
		container.add(fEditWidget, 0);
		if (font != null) {
			fEditWidget.setFont(font);
		}
		fContainer = container;
	}

	/**
	 * Adds an action listener
	 */
	public void addActionListener(ActionListener listener) {
		fEditWidget.addActionListener(listener);
	}

	/**
	 * Remove an action listener
	 */
	public void removeActionListener(ActionListener listener) {
		fEditWidget.removeActionListener(listener);
	}

	/**
	 * Positions the overlay.
	 */
	public void setBounds(Rectangle r, String text) {
		fEditWidget.setText(text);
		fEditWidget.setLocation(r.x, r.y);
		fEditWidget.setSize(r.width, r.height);
		fEditWidget.setVisible(true);
		fEditWidget.selectAll();
		fEditWidget.requestFocus();
	}

	/**
	 * Gets the text contents of the overlay.
	 */
	public String getText() {
		return fEditWidget.getText();
	}

	/**
	 * Gets the preferred size of the overlay.
	 */
	public Dimension getPreferredSize(int cols) {
		fEditWidget.setColumns(cols);
		return fEditWidget.getPreferredSize();
	}

	/**
	 * Removes the overlay.
	 */
	public void endOverlay() {
		fContainer.requestFocus();
		if (fEditWidget != null) {
			fEditWidget.setVisible(false);
			fContainer.remove(fEditWidget);

			Rectangle bounds = fEditWidget.getBounds();
			fContainer.repaint(bounds.x, bounds.y, bounds.width, bounds.height);
		}
	}
}

@


1.7
log
@Potential bug fix
@
text
@d12 1
a12 1
package CH.ifa.draw.util;
d24 1
a24 1
 * @@see CH.ifa.draw.figures.TextFigure
@


1.6
log
@merge dnd (before 5.3)
@
text
@d75 2
a76 1
		fEditWidget.setBounds(r.x, r.y, r.width, r.height);
@


1.5
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d30 2
a31 2
    private JTextField   fEditWidget;
    private Container   fContainer;
d33 26
a58 26
    public FloatingTextField() {
        fEditWidget = new JTextField(20);
    }

    /**
     * Creates the overlay for the given Component.
     */
    public void createOverlay(Container container) {
        createOverlay(container, null);
    }

    /**
     * Creates the overlay for the given Container using a
     * specific font.
     */
    public void createOverlay(Container container, Font font) {
        container.add(fEditWidget, 0);
        if (font != null) {
            fEditWidget.setFont(font);
        }
        fContainer = container;
    }

    /**
     * Adds an action listener
     */
d60 1
a60 1
	    fEditWidget.addActionListener(listener);
d63 3
a65 3
    /**
     * Remove an action listener
     */
d67 1
a67 1
	    fEditWidget.removeActionListener(listener);
d70 39
a108 39
    /**
     * Positions the overlay.
     */
    public void setBounds(Rectangle r, String text) {
	    fEditWidget.setText(text);
        fEditWidget.setBounds(r.x, r.y, r.width, r.height);
        fEditWidget.setVisible(true);
	    fEditWidget.selectAll();
	    fEditWidget.requestFocus();
    }

    /**
     * Gets the text contents of the overlay.
     */
    public String getText() {
        return fEditWidget.getText();
    }

    /**
     * Gets the preferred size of the overlay.
     */
    public Dimension getPreferredSize(int cols) {
        fEditWidget.setColumns(cols);
        return fEditWidget.getPreferredSize();
    }

    /**
     * Removes the overlay.
     */
    public void endOverlay() {
	    fContainer.requestFocus();
	    if (fEditWidget != null) {
		    fEditWidget.setVisible(false);
		    fContainer.remove(fEditWidget);

		    Rectangle bounds = fEditWidget.getBounds();
		    fContainer.repaint(bounds.x, bounds.y, bounds.width, bounds.height);
	    }
    }
@


1.4
log
@before merge for version 5.3 (dnd, undo,...)
@
text
@d2 1
a2 1
 * @@(#)FloatingTextField.java 5.2
d4 6
d25 2
d28 1
a28 1
public  class FloatingTextField extends Object {
d30 1
a30 1
    private TextField   fEditWidget;
d34 1
a34 1
        fEditWidget = new TextField(20);
d50 1
a50 1
        if (font != null)
d52 1
d92 1
d101 7
a107 7
	    if (fEditWidget == null)
	        return;
	    fEditWidget.setVisible(false);
	    fContainer.remove(fEditWidget);

	    Rectangle bounds = fEditWidget.getBounds();
	    fContainer.repaint(bounds.x, bounds.y, bounds.width, bounds.height);
@


1.3
log
@- SelectionFigure is now an interface. The default implementation CH.ifa.draw.standard.StandardSelectionFigure
- A FigureSelectionListener interface has been introduced in CH.ifa.draw.framework. An DrawingEditor
  is now a FigureSelectionListener and the signature for all selectionChanged() methods has been
  changed to figureSelectionChanged().
- CH.ifa.draw.util.Command is now an interface. A AbstractCommand can be found in CH.ifa.draw.standard.
- All commands used to have a fView field. This has been moved to CH.ifa.draw.standard.AbstactCommand
- A CH.ifa.draw.standard.StandardDrawingView has now a paintComponents() method instead of a paint()
  and update() method. This allows the CH.ifa.draw.util.FloatingTextField to be a javax.swing.JTextField
  instead of a java.awt.TextField.
- CH.ifa.draw.figures.AbstractLineDecorator has been missing
- DrawApplet, DrawApplication and derived classes are now programmed towards the DrawingView interface
  instead of using StandardDrawingView. That leads to occasional cast when some additional StandardDrawingView
  functionality is required in some specialized cases. Applications that were derived from DrawApplication
  and used to override the createContents() methods should now return a DrawingView as well
@
text
@d20 1
a20 1
public  class FloatingTextField {
d22 1
a22 1
    private JTextField   fEditWidget;
d26 1
a26 1
        fEditWidget = new JTextField(20);
a82 1
        fEditWidget.setColumns(cols);
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d20 1
a20 1
public  class FloatingTextField extends Object {
d22 1
a22 1
    private TextField   fEditWidget;
d26 1
a26 1
        fEditWidget = new TextField(20);
d83 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)FloatingTextField.java 5.1
d8 1
d18 1
a18 1
 * @@see TextFigure
a44 1

d83 1
a83 1
        return fEditWidget.getPreferredSize(cols);
@


1.1.1.1
log
@
Initial revision.
@
text
@@
