head	1.5;
access;
symbols
	jhotdraw60b1-release:1.5
	package_rename:1.5
	directory_rename:1.4
	reorg_6x_split_initial:1.4
	MVC_PHASE1:1.4.0.10
	NEW_ATTRIBUTES:1.4.0.8
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.2;
locks; strict;
comment	@# @;


1.5
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.21.08.06.00;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.04.23.01.49;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.24.20.37.15;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.5
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)UndoableCommand.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.util;

import org.jhotdraw.framework.*;
import org.jhotdraw.standard.AbstractCommand;
import java.util.EventObject;

/**
 * @@author  Wolfram Kaiser <mrfloppy@@sourceforge.net>
 * @@version <$CURRENT_VERSION$>
 */
public class UndoableCommand implements Command, FigureSelectionListener, CommandListener {

	private Command myWrappedCommand;
	private boolean hasSelectionChanged;
	private AbstractCommand.EventDispatcher myEventDispatcher;

	public UndoableCommand(Command newWrappedCommand) {
		setWrappedCommand(newWrappedCommand);
		getWrappedCommand().addCommandListener(this);
		setEventDispatcher(createEventDispatcher());
	}

	/**
	 * Executes the command.
	 */
	public void execute() {
		hasSelectionChanged = false;
		// listen for selection change events during executing the wrapped command
		view().addFigureSelectionListener(this);

		getWrappedCommand().execute();

		Undoable undoableCommand = getWrappedCommand().getUndoActivity();
		if ((undoableCommand != null) && (undoableCommand.isUndoable())) {
			getDrawingEditor().getUndoManager().pushUndo(undoableCommand);
			getDrawingEditor().getUndoManager().clearRedos();
		}

		// initiate manual update of undo/redo menu states if it has not
		// been done automatically during executing the wrapped command
		if (!hasSelectionChanged || (getDrawingEditor().getUndoManager().getUndoSize() == 1)) {
			getDrawingEditor().figureSelectionChanged(view());
		}

		// remove because not all commands are listeners that have to be notified
		// all the time (bug-id 595461)
		view().removeFigureSelectionListener(this);
	}

	/**
	 * Tests if the command can be executed.
	 */
	public boolean isExecutable() {
		return getWrappedCommand().isExecutable();
	}

	protected void setWrappedCommand(Command newWrappedCommand) {
		myWrappedCommand = newWrappedCommand;
	}

	protected Command getWrappedCommand() {
		return myWrappedCommand;
	}

	/**
	 * Gets the command name.
	 */
	public String name() {
		return getWrappedCommand().name();
	}

	public DrawingEditor getDrawingEditor() {
		return getWrappedCommand().getDrawingEditor();
	}

	public DrawingView view() {
		return getDrawingEditor().view();
	}

	public void figureSelectionChanged(DrawingView view) {
		hasSelectionChanged = true;
	}

	public Undoable getUndoActivity() {
		return new UndoableAdapter(view());
	}

	public void setUndoActivity(Undoable newUndoableActivity) {
		// do nothing: always return default UndoableAdapter
	}

	public void addCommandListener(CommandListener newCommandListener) {
		getEventDispatcher().addCommandListener(newCommandListener);
	}

	public void removeCommandListener(CommandListener oldCommandListener) {
		getEventDispatcher().removeCommandListener(oldCommandListener);
	}

	private void setEventDispatcher(AbstractCommand.EventDispatcher newEventDispatcher) {
		myEventDispatcher = newEventDispatcher;
	}

	protected AbstractCommand.EventDispatcher getEventDispatcher() {
		return myEventDispatcher;
	}

	public AbstractCommand.EventDispatcher createEventDispatcher() {
		return new AbstractCommand.EventDispatcher(this);
	}

	public void commandExecuted(EventObject commandEvent) {
		getEventDispatcher().fireCommandExecutedEvent();
	}

	public void commandExecutable(EventObject commandEvent) {
		getEventDispatcher().fireCommandExecutableEvent();
	}

	public void commandNotExecutable(EventObject commandEvent) {
		getEventDispatcher().fireCommandNotExecutableEvent();
	}
}
@


1.4
log
@extended functionality for enumerations (reset, and-enumeration) and a few bug fixes
@
text
@d12 1
a12 1
package CH.ifa.draw.util;
d14 2
a15 2
import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.AbstractCommand;
@


1.3
log
@after variou merges... (before 5.4 release)
@
text
@d33 1
a33 1
	
d49 1
a49 1
		
d56 3
a58 3
		// remove so not all commands are listeners that have to be notified
		// all the time
		view().addFigureSelectionListener(this);
d71 1
a71 1
	
d75 1
a75 1
	
d86 1
a86 1
	
d106 1
a106 1
	
d126 1
a126 1
	
d130 1
a130 1
	
@


1.2
log
@merge dnd (before 5.3)
@
text
@d19 1
a19 1
 * @@author Wolfram Kaiser
@


1.1
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d15 2
d22 1
a22 1
public class UndoableCommand implements Command, FigureSelectionListener {
d26 2
a27 1
	
d30 2
d34 33
a66 33
    /**
     * Executes the command.
     */
    public void execute() {
    	hasSelectionChanged = false;
    	// listen for selection change events during executing the wrapped command
    	view().addFigureSelectionListener(this);

    	getWrappedCommand().execute();

    	Undoable undoableCommand = getWrappedCommand().getUndoActivity();
    	if ((undoableCommand != null) && (undoableCommand.isUndoable())) {
		    view().getUndoManager().pushUndo(undoableCommand);
			view().getUndoManager().clearRedos();
    	}
    	
    	// initiate manual update of undo/redo menu states if it has not
    	// been done automatically during executing the wrapped command
    	if (!hasSelectionChanged || (view().getUndoManager().getUndoSize() == 1)) {
    		view().editor().figureSelectionChanged(view());
    	}

    	// remove so not all commands are listeners that have to be notified
    	// all the time
    	view().addFigureSelectionListener(this);
    }

    /**
     * Tests if the command can be executed.
     */
    public boolean isExecutable() {
    	return getWrappedCommand().isExecutable();
    }
d76 14
a89 10
    /**
     * Gets the command name.
     */
    public String name() {
    	return getWrappedCommand().name();
    }

    public DrawingView view() {
    	return getWrappedCommand().view();
    }
d101 32
@

