head	1.7;
access;
symbols
	jhotdraw60b1-release:1.7
	package_rename:1.7
	directory_rename:1.6
	reorg_6x_split_initial:1.6
	MVC_PHASE1:1.6.0.2
	NEW_ATTRIBUTES:1.5.0.2
	DNOYEB1_ALPHA-2:1.3
	release_JHD54b1:1.3
	BUGFIX_670992:1.3.0.6
	DNOYEB1_ALPHA-1:1.3
	dnoyeb1:1.3.0.4
	repack:1.3.0.2
	Root_repack:1.3
	Before_FigureVisitor:1.3
	JHotDraw_5-3:1.2
	JHotDraw_5-2_merged:1.1;
locks; strict;
comment	@# @;


1.7
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.22.23.58.43;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.07.17.49.13;	author ricardo_padilha;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.04.03.35.36;	author ricardo_padilha;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.04.23.01.49;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.24.20.44.33;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.7
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)StorageFormatManager.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
 
package org.jhotdraw.util;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

import java.io.File;
import java.util.List;
import java.util.Iterator;

/**
 * The StorageFormatManager is a contains StorageFormats.
 * It is not a Singleton because it could be necessary to deal with different
 * format managers, e.g. one for importing Drawings, one for exporting Drawings.
 * If one StorageFormat matches the file extension of the Drawing file, then this
 * StorageFormat can be used to store or restore the Drawing.
 *
 * @@see StorageFormat
 *
 * @@author  Wolfram Kaiser <mrfloppy@@sourceforge.net>
 * @@version <$CURRENT_VERSION$>
 */
public class StorageFormatManager {

	/**
	 * List containing all registered storage formats
	 */
	private List myStorageFormats;
	
	/**
	 * Default storage format that should be selected in a javax.swing.JFileChooser
	 */
	private StorageFormat myDefaultStorageFormat;
	
	/**
	 * Create a new StorageFormatManager.
	 */
	public StorageFormatManager() {
		myStorageFormats = CollectionsFactory.current().createList();
	}
	
	/**
	 * Add a StorageFormat that should be supported by this StorageFormatManager.
	 *
	 * @@param newStorageFormat new StorageFormat to be supported
	 */
	public void addStorageFormat(StorageFormat newStorageFormat) {
		myStorageFormats.add(newStorageFormat);
	}

	/**
	 * Remove a StorageFormat that should no longer be supported by this StorageFormatManager.
	 * The StorageFormat is excluded in when search for a StorageFormat.
	 *
	 * @@param oldStorageFormat old StorageFormat no longer to be supported
	 */
	public void removeStorageFormat(StorageFormat oldStorageFormat) {
		myStorageFormats.remove(oldStorageFormat);
	}
	
	/**
	 * Test, whether a StorageFormat is supported by this StorageFormat
	 */
	public boolean containsStorageFormat(StorageFormat checkStorageFormat){
		return myStorageFormats.contains(checkStorageFormat);
	}
	
	/**
	 * Set a StorageFormat as the default storage format which is selected in a
	 * javax.swing.JFileChooser. The default storage format must be already
	 * added with addStorageFormat. Setting the default storage format to null
	 * does not automatically remove the StorageFormat from the list of
	 * supported StorageFormats.
	 *
	 * @@param newDefaultStorageFormat StorageFormat that should be selected in a JFileChooser
	 */
	public void setDefaultStorageFormat(StorageFormat newDefaultStorageFormat) {
		myDefaultStorageFormat = newDefaultStorageFormat;
	}
	
	/**
	 * Return the StorageFormat which is used as selected file format in a javax.swing.JFileChooser
	 *
	 * @@return default storage format
	 */
	public StorageFormat getDefaultStorageFormat() {
		return myDefaultStorageFormat;
	}
	
	/**
	 * Register all FileFilters supported by StorageFormats
	 *
	 * @@param fileChooser javax.swing.JFileChooser to which FileFilters are added
	 */
	public void registerFileFilters(JFileChooser fileChooser) {
		if (fileChooser.getDialogType() == JFileChooser.OPEN_DIALOG) {
			// behavior for open dialogs
			StorageFormat sf;
			for (Iterator e = myStorageFormats.iterator(); e.hasNext();) {
				sf = (StorageFormat) e.next();
				if (sf.isRestoreFormat()) {
					fileChooser.addChoosableFileFilter(sf.getFileFilter());
				}
			}

		// set a current activated file filter if a default storage Format has been defined
			sf = getDefaultStorageFormat();
			if (sf != null && sf.isRestoreFormat()) {
				fileChooser.setFileFilter(sf.getFileFilter());
			}
		}
		else if (fileChooser.getDialogType() == JFileChooser.SAVE_DIALOG) {
			// behavior for save dialogs
			StorageFormat sf;
			for (Iterator e = myStorageFormats.iterator(); e.hasNext();) {
				sf = (StorageFormat) e.next();
				if (sf.isStoreFormat()) {
					fileChooser.addChoosableFileFilter(sf.getFileFilter());
				}
			}

			// set a current activated file filter if a default storage Format has been defined
			sf = getDefaultStorageFormat();
			if (sf != null && sf.isStoreFormat()) {
				fileChooser.setFileFilter(sf.getFileFilter());
			}
		}
		else {
			// old behavior
			StorageFormat sf;
			for (Iterator e = myStorageFormats.iterator(); e.hasNext();) {
				sf = (StorageFormat) e.next();
				fileChooser.addChoosableFileFilter(sf.getFileFilter());
			}

			// set a current activated file filter if a default storage Format has been defined
			sf = getDefaultStorageFormat();
			if (sf != null) {
				fileChooser.setFileFilter(sf.getFileFilter());
			}
		}
	}

	/**
	 * Find a StorageFormat that can be used according to a FileFilter to store a Drawing
	 * in a file or restore it from a file respectively.
	 *
	 * @@param findFileFilter FileFilter used to identify a StorageFormat
	 * @@return StorageFormat, if a matching file extension could be found, false otherwise
	 */
	public StorageFormat findStorageFormat(FileFilter findFileFilter) {
		Iterator formatsIterator = myStorageFormats.iterator();
		StorageFormat currentStorageFormat = null;
		while (formatsIterator.hasNext()) {
			currentStorageFormat = (StorageFormat)formatsIterator.next();
			if (currentStorageFormat.getFileFilter().equals(findFileFilter)) {
				return currentStorageFormat;
			}
		}
		
		return null;
	}

	/**
	 * Find a StorageFormat that can be used according to a file object to store a
	 * Drawing in a file or restore it from a file respectively.
	 *
	 * @@param file a File object to be matched
	 * @@return StorageFormat, if a matching file extension could be found, <code>null</code>
	 * otherwise
	 */
	public StorageFormat findStorageFormat(File file) {
		Iterator formatsIterator = myStorageFormats.iterator();
		StorageFormat currentStorageFormat;
		while (formatsIterator.hasNext()) {
			currentStorageFormat = (StorageFormat) formatsIterator.next();
			if (currentStorageFormat.getFileFilter().accept(file)) {
				return currentStorageFormat;
			}
		}
		return null;
	}
}@


1.6
log
@no message
@
text
@d12 1
a12 1
package CH.ifa.draw.util;
@


1.5
log
@Updated StorageFormat interface. Now formats are added based on their ability to load/save.
@
text
@d116 1
a116 1
			// set a current activated file filter if a default storage Format has been defined
d121 2
a122 1
		} else if (fileChooser.getDialogType() == JFileChooser.SAVE_DIALOG) {
d137 2
a138 1
		} else {
@


1.4
log
@Added a new method that allows the search of a storage format based on the selected file.
This should allow a more user-friendly interaction, since the user can now use the "All files" filter as well.
@
text
@d106 9
a114 4
		Iterator formatsIterator = myStorageFormats.iterator();
		while (formatsIterator.hasNext()) {
			fileChooser.addChoosableFileFilter(((StorageFormat)formatsIterator.next()).getFileFilter());
		}
d116 33
a148 3
		// set a current activated file filter if a default storage Format has been defined
		if (getDefaultStorageFormat() != null) {
			fileChooser.setFileFilter(getDefaultStorageFormat().getFileFilter());
@


1.3
log
@after variou merges... (before 5.4 release)
@
text
@d16 2
d134 20
@


1.2
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@a13 1
import java.util.*;
d16 2
a17 2
import java.io.*;
import CH.ifa.draw.framework.Drawing;
d28 1
a28 1
 * @@author Wolfram Kaiser
d34 1
a34 1
	 * Vector containing all registered storage formats
d36 1
a36 1
	private Vector myStorageFormats;
d47 1
a47 1
		myStorageFormats = new Vector();
@


1.1
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)StorageFormatManager.java 5.2
d4 6
d28 1
d30 1
@

