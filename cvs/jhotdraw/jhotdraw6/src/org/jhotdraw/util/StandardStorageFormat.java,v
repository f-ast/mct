head	1.7;
access;
symbols
	jhotdraw60b1-release:1.7
	package_rename:1.7
	directory_rename:1.6
	reorg_6x_split_initial:1.6
	MVC_PHASE1:1.6.0.2
	NEW_ATTRIBUTES:1.5.0.2
	DNOYEB1_ALPHA-2:1.3
	release_JHD54b1:1.4
	BUGFIX_670992:1.3.0.6
	DNOYEB1_ALPHA-1:1.3
	dnoyeb1:1.3.0.4
	repack:1.3.0.2
	Root_repack:1.3
	Before_FigureVisitor:1.3
	JHotDraw_5-3:1.2
	JHotDraw_5-2_merged:1.1;
locks; strict;
comment	@# @;


1.7
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.22.23.58.43;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.07.17.49.12;	author ricardo_padilha;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.30.00.27.34;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.04.23.01.49;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.24.20.32.01;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.7
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)StandardStorageFormat.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.util;

import javax.swing.filechooser.FileFilter;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.File;
import org.jhotdraw.framework.Drawing;

/**
 * A StandardStorageFormat is an internal file format to store and restore
 * Drawings. It uses its own descriptive syntax ands write classes and attributes
 * as plain text in a text file. The StandardStorageFormat has the file extension
 * "draw" (e.g. my_picasso.draw).
 *
 * @@author Wolfram Kaiser <mrfloppy@@users.sourceforge.net>
 * @@version <$CURRENT_VERSION$>
 */
public class StandardStorageFormat implements StorageFormat {

	/**
	 * FileFilter for a javax.swing.JFileChooser which recognizes files with the
	 * extension "draw"
	 */
	private FileFilter myFileFilter;

	/**
	 * File extension
	 */
	private String myFileExtension;

	/**
	 * Description of the file type when displaying the FileFilter
	 */
	private String myFileDescription;

	/**
	 * Create a StandardStorageFormat for storing and restoring Drawings.
	 */
	public StandardStorageFormat() {
		setFileExtension(createFileExtension());
		setFileDescription(createFileDescription());
		setFileFilter(createFileFilter());
	}

	/**
	 * Factory method to create the file extension recognized by the FileFilter for this
	 * StandardStorageFormat. The StandardStorageFormat has the file extension "draw"
	 * (e.g. my_picasso.draw).
	 *
	 * @@return new file extension
	 */
	protected String createFileExtension() {
		return myFileExtension = "draw";
	}

	/**
	 * Set the file extension for the storage format
	 *
	 * @@param newFileExtension extension
	 */
	public void setFileExtension(String newFileExtension) {
		myFileExtension = newFileExtension;
	}

	/**
	 * Return the file extension for the storage format
	 *
	 * @@return file extension
	 */
	public String getFileExtension() {
		return myFileExtension;
	}

	/**
	 * Factory method to create a file description for the file type when displaying the
	 * associated FileFilter.
	 *
	 * @@return new file description
	 */
	public String createFileDescription() {
		return "Internal Format (" + getFileExtension() + ")";
	}

	/**
	 * Set the file description for the file type of the storage format
	 *
	 * @@param newFileDescription description of the file type
	 */
	public void setFileDescription(String newFileDescription) {
		myFileDescription = newFileDescription;
	}

	/**
	 * Return the file description for the file type of the storage format
	 *
	 * @@return description of the file type
	 */
	public String getFileDescription() {
		return myFileDescription;
	}

	/**
	 * Factory method to create a FileFilter that accepts file with the appropriate
	 * file exention used by a javax.swing.JFileChooser. Subclasses can override this
	 * method to provide their own file filters.
	 *
	 * @@return FileFilter for this StorageFormat
	 */
	protected FileFilter createFileFilter() {
		return new FileFilter() {
			public boolean accept(File checkFile) {
				// still display directories for navigation
				if (checkFile.isDirectory()) {
					return true;
				}
				else {
					return checkFile.getName().endsWith("." + getFileExtension());
				}
			}

			public String getDescription() {
				return getFileDescription();
			}
		};
	}

	/**
	 * Set the FileFilter used to identify Drawing files with the correct file
	 * extension for this StorageFormat.
	 *
	 * @@param newFileFilter FileFilter for this StorageFormat
	 */
	public void setFileFilter(FileFilter newFileFilter) {
		myFileFilter = newFileFilter;
	}

	/**
	 * Return the FileFilter used to identify Drawing files with the correct file
	 * extension for this StorageFormat.
	 *
	 * @@return FileFilter for this StorageFormat
	 */
	public FileFilter getFileFilter() {
		return myFileFilter;
	}

	/**
	 * @@see org.jhotdraw.util.StorageFormat#isRestoreFormat()
	 */
	public boolean isRestoreFormat() {
		return true;
	}

	/**
	 * @@see org.jhotdraw.util.StorageFormat#isStoreFormat()
	 */
	public boolean isStoreFormat() {
		return true;
	}

	/**
	 * Store a Drawing under a given name. If the file name does not have the correct
	 * file extension, then the file extension is added.
	 *
	 * @@param fileName file name of the Drawing under which it should be stored
	 * @@param saveDrawing drawing to be saved
	 * @@return file name with correct file extension
	 */
	public String store(String fileName, Drawing saveDrawing) throws IOException {
		FileOutputStream stream = new FileOutputStream(adjustFileName(fileName));
		StorableOutput output = new StorableOutput(stream);
		output.writeStorable(saveDrawing);
		output.close();
		return adjustFileName(fileName);
	}

	/**
	 * Restore a Drawing from a file with a given name.
	 *
	 * @@param fileName of the file in which the Drawing has been saved
	 * @@return restored Drawing
	 */
	public Drawing restore(String fileName) throws IOException {
		if (!hasCorrectFileExtension(fileName)) {
			return null;
		}
		else {
			FileInputStream stream = new FileInputStream(fileName);
			StorableInput input = new StorableInput(stream);
			return (Drawing)input.readStorable();
		}
	}

	/**
	 * Test, whether two StorageFormats are the same. They are the same if they both support the
	 * same file extension.
	 *
	 * @@return true, if both StorageFormats have the same file extension, false otherwise
	 */
	public boolean equals(Object compareObject) {
		if (compareObject instanceof StandardStorageFormat) {
			return getFileExtension().equals(((StandardStorageFormat)compareObject).getFileExtension());
		}
		else {
			return false;
		}
	}

	/**
	 * Adjust a file name to have the correct file extension.
	 *
	 * @@param testFileName file name to be tested for a correct file extension
	 * @@return testFileName + file extension if necessary
	 */
	protected String adjustFileName(String testFileName) {
		if (!hasCorrectFileExtension(testFileName)) {
			return testFileName + "." + getFileExtension();
		}
		else {
			return testFileName;
		}
	}

	/**
	 * Test whether the file name has the correct file extension
	 *
	 * @@return true, if the file has the correct extension, false otherwise
	 */
	protected boolean hasCorrectFileExtension(String testFileName) {
		return testFileName.endsWith("." + getFileExtension());
	}
}@


1.6
log
@no message
@
text
@d12 1
a12 1
package CH.ifa.draw.util;
d19 1
a19 1
import CH.ifa.draw.framework.Drawing;
d160 1
a160 1
	 * @@see CH.ifa.draw.util.StorageFormat#isRestoreFormat()
d167 1
a167 1
	 * @@see CH.ifa.draw.util.StorageFormat#isStoreFormat()
@


1.5
log
@Updated StorageFormat interface. Now formats are added based on their ability to load/save.
@
text
@d37 1
a37 1
	
d47 1
a47 1
	
d67 1
a67 1
	
d76 1
a76 1
	
d100 1
a100 1
	 */	
d104 1
a104 1
	
d109 1
a109 1
	 */	
d113 1
a113 1
	
d129 1
a129 1
					return checkFile.getName().endsWith("." + getFileDescription());
d138 1
a138 1
	
d148 1
a148 1
	
d205 1
a205 1
	
d226 1
a226 1
	 */	
d235 1
a235 1
	
@


1.4
log
@prepare for 5.4 release: various bug fixes
@
text
@d129 1
a129 1
					return checkFile.getName().endsWith("." + myFileExtension);
d157 14
@


1.3
log
@after variou merges... (before 5.4 release)
@
text
@d27 1
a27 1
 * @@author Wolfram Kaiser
@


1.2
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d71 1
a71 1
	 * @@param file extension
d178 1
a178 1
	 * @@param name of the file in which the Drawing has been saved
@


1.1
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)StandardStorageFormat.java 5.2
d4 6
d28 1
@

