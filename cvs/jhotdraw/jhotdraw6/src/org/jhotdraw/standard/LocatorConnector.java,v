head	1.7;
access;
symbols
	jhotdraw60b1-release:1.5
	package_rename:1.5
	directory_rename:1.4
	reorg_6x_split_initial:1.4
	MVC_PHASE1:1.4.0.10
	NEW_ATTRIBUTES:1.4.0.8
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2004.03.06.14.36.53;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.23.05.06.57;	author cfm1;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.07.12.30.15;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.33;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.7
log
@adjusted formatting
@
text
@/*
 * @@(#)LocatorConnector.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.standard;

import java.awt.*;
import java.io.IOException;
import org.jhotdraw.framework.*;
import org.jhotdraw.util.*;

/**
 * A LocatorConnector locates connection points with
 * the help of a Locator. It supports the definition
 * of connection points to semantic locations.
 *
 * @@see Locator
 * @@see Connector
 *
 * @@version <$CURRENT_VERSION$>
 */
public class LocatorConnector extends AbstractConnector {

	/**
	 * The standard size of the connector. The display box
	 * is centered around the located point.
	 */
	public static final int SIZE = 8;

	protected Locator  myLocator;

	/*
	 * Serialization support.
	 */
	private static final long serialVersionUID = 5062833203337604181L;
	private int locatorConnectorSerializedDataVersion = 1;

	public LocatorConnector() { // only used for Storable
		setLocator(null);
	}

	public LocatorConnector(Figure owner, Locator l) {
		super(owner);
		setLocator(l);
	}

	/**
	 * Tests if a point is contained in the connector.
	 */
	public boolean containsPoint(int x, int y) {
		return displayBox().contains(x, y);
	}

	/**
	 * Gets the display box of the connector.
	 */
	public Rectangle displayBox() {
		Point p = getLocator().locate(owner());
		return new Rectangle(
				p.x - SIZE / 2,
				p.y - SIZE / 2,
				SIZE,
				SIZE);
	}

	/**
	 * Draws this connector.
	 */
	public void draw(Graphics g) {
		Rectangle r = displayBox();

		g.setColor(Color.blue);
		g.fillOval(r.x, r.y, r.width, r.height);
		g.setColor(Color.black);
		g.drawOval(r.x, r.y, r.width, r.height);
	}

	/**
	 * Stores the arrow tip to a StorableOutput.
	 */
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeStorable(getLocator());
	}

	/**
	 * Reads the arrow tip from a StorableInput.
	 */
	public void read(StorableInput dr) throws IOException {
		super.read(dr);
		setLocator((Locator)dr.readStorable());
	}

	protected void setLocator(Locator newLocator) {
		myLocator = newLocator;
	}

	public Locator getLocator() {
		return myLocator;
	}
}
@


1.6
log
@OffsetConnectors added
@
text
@a36 1
//  cfm1 *******************************************************************
a37 1
//  cfm1 *******************************************************************
@


1.5
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@d37 3
a39 1
	private Locator  myLocator;
@


1.4
log
@feature request 597659
@
text
@d12 1
a12 1
package CH.ifa.draw.standard;
d16 2
a17 2
import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.*;
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d37 1
a37 1
	private Locator  fLocator;
d46 1
a46 1
		fLocator = null;
d51 1
a51 5
		fLocator = l;
	}

	protected Point locate(ConnectionFigure connection) {
		return fLocator.locate(owner());
d65 1
a65 1
		Point p = fLocator.locate(owner());
d90 1
a90 1
		dw.writeStorable(fLocator);
d98 9
a106 1
		fLocator = (Locator)dr.readStorable();
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)LocatorConnector.java 5.2
d4 6
d23 1
d26 2
d31 73
a103 74
    /**
     * The standard size of the connector. The display box
     * is centered around the located point.
     */
    public static final int SIZE = 8;

    private Locator  fLocator;

    /*
     * Serialization support.
     */
    private static final long serialVersionUID = 5062833203337604181L;
    private int locatorConnectorSerializedDataVersion = 1;

    public LocatorConnector() { // only used for Storable
        fLocator = null;
    }

    public LocatorConnector(Figure owner, Locator l) {
        super(owner);
        fLocator = l;
    }

    protected Point locate(ConnectionFigure connection) {
        return fLocator.locate(owner());
    }

    /**
     * Tests if a point is contained in the connector.
     */
    public boolean containsPoint(int x, int y) {
        return displayBox().contains(x, y);
    }

    /**
     * Gets the display box of the connector.
     */
    public Rectangle displayBox() {
        Point p = fLocator.locate(owner());
        return new Rectangle(
                p.x - SIZE / 2,
                p.y - SIZE / 2,
                SIZE,
                SIZE);
    }

    /**
     * Draws this connector.
     */
    public void draw(Graphics g) {
        Rectangle r = displayBox();

        g.setColor(Color.blue);
        g.fillOval(r.x, r.y, r.width, r.height);
        g.setColor(Color.black);
        g.drawOval(r.x, r.y, r.width, r.height);
    }

    /**
     * Stores the arrow tip to a StorableOutput.
     */
    public void write(StorableOutput dw) {
        super.write(dw);
        dw.writeStorable(fLocator);
    }

    /**
     * Reads the arrow tip from a StorableInput.
     */
    public void read(StorableInput dr) throws IOException {
        super.read(dr);
        fLocator = (Locator)dr.readStorable();
    }

a104 1

@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)LocatorConnector.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
