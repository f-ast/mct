head	1.5;
access;
symbols
	jhotdraw60b1-release:1.5
	package_rename:1.5
	directory_rename:1.4
	reorg_6x_split_initial:1.4
	MVC_PHASE1:1.4.0.10
	NEW_ATTRIBUTES:1.4.0.8
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1;
locks; strict;
comment	@# @;


1.5
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.04.22.56.18;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.33;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.15.51.59;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.5
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)FastBufferedUpdateStrategy.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.standard;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import org.jhotdraw.framework.Drawing;
import org.jhotdraw.framework.DrawingView;
import org.jhotdraw.framework.FigureEnumeration;
import org.jhotdraw.framework.Painter;

/**
 * @@author WMG (INIT Copyright (C) 2000 All rights reserved)
 * @@version <$CURRENT_VERSION$>
 */
public class FastBufferedUpdateStrategy implements Painter {

	//_________________________________________________________VARIABLES

	private BufferedImage  _doubleBufferedImage;
	private BufferedImage  _scratchPadBufferedImage;
	private int            _nImageWidth = 0;
	private int            _nImageHeight = 0;
	private boolean        _bRedrawAll = true;

	//______________________________________________________CONSTRUCTORS

	public FastBufferedUpdateStrategy() {
	}

	//____________________________________________________PUBLIC METHODS

	public void draw(Graphics g, DrawingView view) {
		_checkCaches(view);
		if (_bRedrawAll == true) {
			Graphics imageGraphics = _doubleBufferedImage.getGraphics();
			view.drawAll(imageGraphics);
		}
		else {
			Rectangle viewClipRectangle = g.getClipBounds();
			int nX1 = viewClipRectangle.x;
			int nY1 = viewClipRectangle.y;
			int nX2 = viewClipRectangle.x + viewClipRectangle.width;
			int nY2 = viewClipRectangle.y + viewClipRectangle.height;

			if (nX1 < 0) {
				nX1 = 0;
			}
			if (nY1 < 0) {
				nY1 = 0;
			}
			if (nX2 < 0) {
				nX2 = 0;
			}
			if (nY2 < 0) {
				nY2 = 0;
			}

			Rectangle viewClipRectangle2 = new Rectangle(nX1, nY1, nX2-nX1, nY2-nY1);

			Drawing theDrawing = view.drawing();
			FigureEnumeration fe = theDrawing.figures(viewClipRectangle2);

			Graphics imageGraphics = _scratchPadBufferedImage.getGraphics();
			imageGraphics.setColor(view.getBackground());
			imageGraphics.fillRect(nX1, nY1, nX2-nX1, nY2-nY1);
			view.draw(imageGraphics, fe);

			Graphics dbGraphics = _doubleBufferedImage.getGraphics();
			dbGraphics.drawImage(_scratchPadBufferedImage, nX1, nY1,
				nX2, nY2, nX1, nY1, nX2, nY2, view);

		}

		g.drawImage(_doubleBufferedImage, 0, 0, view);
		_bRedrawAll = false;
	}


	//___________________________________________________PRIVATE METHODS


	private void _checkCaches(DrawingView view) {
		Dimension d = view.getSize();

		if ((_doubleBufferedImage == null)
				|| (_nImageWidth != d.width)
				|| (_nImageHeight != d.height)) {
			_doubleBufferedImage = new BufferedImage(d.width,
			d.height, BufferedImage.TYPE_INT_RGB);
			_bRedrawAll = true;
		}

		if ((_scratchPadBufferedImage == null)
				|| (_nImageWidth != d.width)
				|| (_nImageHeight != d.height)) {
			_scratchPadBufferedImage = new BufferedImage(d.width,
				d.height, BufferedImage.TYPE_INT_RGB);
			Graphics imageGraphics = _scratchPadBufferedImage.getGraphics();
			view.drawBackground(imageGraphics);
			_bRedrawAll = true;
		}

		_nImageWidth = d.width;
		_nImageHeight = d.height;
	}

	//_______________________________________________________________END

} //end of class FastBufferedUpdateStrategy
@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@d12 1
a12 1
package CH.ifa.draw.standard;
d18 4
a21 4
import CH.ifa.draw.framework.Drawing;
import CH.ifa.draw.framework.DrawingView;
import CH.ifa.draw.framework.FigureEnumeration;
import CH.ifa.draw.framework.Painter;
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d24 1
a24 1
 * @@author: WMG (INIT Copyright (C) 2000 All rights reserved)
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)FastBufferedUpdateStrategy.java 5.2
d4 6
a9 6
 * INIT Copyright (C) 2000 All rights reserved
 *
 * File:            FastBufferedUpdateStrategy.java
 * Description:     X
 * @@author:         WMG
 * Created:         2000.03.27
d23 4
d29 1
d31 87
d119 1
a119 117
  //_________________________________________________________VARIABLES



  private BufferedImage  _doubleBufferedImage;
  private BufferedImage  _scratchPadBufferedImage;
  private int            _nImageWidth = 0;
  private int            _nImageHeight = 0;
  private boolean        _bRedrawAll = true;



  //______________________________________________________CONSTRUCTORS



  public FastBufferedUpdateStrategy() {

  }



  //____________________________________________________PUBLIC METHODS



  public void draw(Graphics g, DrawingView view) {

    _checkCaches(view);

    if (_bRedrawAll == true) {

      Graphics imageGraphics = _doubleBufferedImage.getGraphics();
      view.drawAll(imageGraphics);

    }
    else {

      Rectangle viewClipRectangle = g.getClipBounds();

      int nX1 = viewClipRectangle.x;
      int nY1 = viewClipRectangle.y;
      int nX2 = viewClipRectangle.x + viewClipRectangle.width;
      int nY2 = viewClipRectangle.y + viewClipRectangle.height;

      if (nX1 < 0) {
        nX1 = 0;
      }
      if (nY1 < 0) {
        nY1 = 0;
      }
      if (nX2 < 0) {
        nX2 = 0;
      }
      if (nY2 < 0) {
        nY2 = 0;
      }

      Rectangle viewClipRectangle2 = new Rectangle(nX1, nY1, nX2-nX1,
       nY2-nY1);

      Drawing theDrawing = view.drawing();
      FigureEnumeration fe = theDrawing.figures(viewClipRectangle2);

      Graphics imageGraphics = _scratchPadBufferedImage.getGraphics();
      imageGraphics.setColor(view.getBackground());
      imageGraphics.fillRect(nX1, nY1, nX2-nX1, nY2-nY1);
      view.draw(imageGraphics, fe);

      Graphics dbGraphics = _doubleBufferedImage.getGraphics();

      dbGraphics.drawImage(_scratchPadBufferedImage, nX1, nY1,
       nX2, nY2, nX1, nY1, nX2, nY2, view);

    }

    g.drawImage(_doubleBufferedImage, 0, 0, view);
    _bRedrawAll = false;

  }



  //___________________________________________________PRIVATE METHODS



  private void _checkCaches(DrawingView view) {

    Dimension d = view.getSize();

    if ((_doubleBufferedImage == null)
     || (_nImageWidth != d.width)
     || (_nImageHeight != d.height)) {
      _doubleBufferedImage = new BufferedImage(d.width,
       d.height, BufferedImage.TYPE_INT_RGB);
      _bRedrawAll = true;
    }

    if ((_scratchPadBufferedImage == null)
     || (_nImageWidth != d.width)
     || (_nImageHeight != d.height)) {
      _scratchPadBufferedImage = new BufferedImage(d.width,
       d.height, BufferedImage.TYPE_INT_RGB);
      Graphics imageGraphics = _scratchPadBufferedImage.getGraphics();
      view.drawBackground(imageGraphics);
      _bRedrawAll = true;
    }

    _nImageWidth = d.width;
    _nImageHeight = d.height;

  }



  //_______________________________________________________________END
@


1.1
log
@a painter that uses caching
@
text
@d1 10
a10 11
/*____________________________________________________________________
  INIT Copyright (C) 2000 All rights reserved
        
    File:            FastBufferedUpdateStrategy.java
    Description:     X
    Author:          WMG
    Created:         2000.03.27
  ____________________________________________________________________
*/


a21 1

@

