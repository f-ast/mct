head	1.5;
access;
symbols
	jhotdraw60b1-release:1.5
	package_rename:1.5
	directory_rename:1.4
	reorg_6x_split_initial:1.4
	MVC_PHASE1:1.4.0.10
	NEW_ATTRIBUTES:1.4.0.8
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.4
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.01;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.5
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)ChopBoxConnector.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.standard;

import java.awt.*;
import org.jhotdraw.framework.*;
import org.jhotdraw.util.Geom;

/**
 * A ChopBoxConnector locates connection points by
 * choping the connection between the centers of the
 * two figures at the display box.
 *
 * @@see Connector
 *
 * @@version <$CURRENT_VERSION$>
 */
public class ChopBoxConnector extends AbstractConnector {

	/*
	 * Serialization support.
	 */
	private static final long serialVersionUID = -1461450322712345462L;

	public ChopBoxConnector() { // only used for Storable implementation
	}

	public ChopBoxConnector(Figure owner) {
		super(owner);
	}

	public Point findStart(ConnectionFigure connection) {
		Figure startFigure = connection.getStartConnector().owner();
		Rectangle r2 = connection.getEndConnector().displayBox();
		Point r2c = null;

		if (connection.pointCount() == 2) {
			r2c = new Point(r2.x + r2.width/2, r2.y + r2.height/2);
		 }
		 else {
			r2c = connection.pointAt(1);
		}

		return chop(startFigure, r2c);
	}

	public Point findEnd(ConnectionFigure connection) {
		Figure endFigure = connection.getEndConnector().owner();
		Rectangle r1 = connection.getStartConnector().displayBox();
		Point r1c = null;

		if (connection.pointCount() == 2) {
			r1c = new Point(r1.x + r1.width/2, r1.y + r1.height/2);
		}
		else {
			r1c = connection.pointAt(connection.pointCount()-2);
		}

		return chop(endFigure, r1c);
	}

	protected Point chop(Figure target, Point from) {
		Rectangle r = target.displayBox();
		return Geom.angleToPoint(r, (Geom.pointToAngle(r, from)));
	}
}

@


1.4
log
@merge dnd (before 5.3)
@
text
@d12 1
a12 1
package CH.ifa.draw.standard;
d15 2
a16 2
import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.Geom;
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d29 46
a74 46
    /*
     * Serialization support.
     */
    private static final long serialVersionUID = -1461450322712345462L;

    public ChopBoxConnector() { // only used for Storable implementation
    }

    public ChopBoxConnector(Figure owner) {
        super(owner);
    }

    public Point findStart(ConnectionFigure connection) {
        Figure startFigure = connection.getStartConnector().owner();
        Rectangle r2 = connection.getEndConnector().displayBox();
        Point r2c = null;

        if (connection.pointCount() == 2) {
            r2c = new Point(r2.x + r2.width/2, r2.y + r2.height/2);
         }
         else {
            r2c = connection.pointAt(1);
        }

        return chop(startFigure, r2c);
    }

    public Point findEnd(ConnectionFigure connection) {
        Figure endFigure = connection.getEndConnector().owner();
        Rectangle r1 = connection.getStartConnector().displayBox();
        Point r1c = null;

        if (connection.pointCount() == 2) {
            r1c = new Point(r1.x + r1.width/2, r1.y + r1.height/2);
        }
        else {
            r1c = connection.pointAt(connection.pointCount()-2);
        }

        return chop(endFigure, r1c);
    }

    protected Point chop(Figure target, Point from) {
        Rectangle r = target.displayBox();
        return Geom.angleToPoint(r, (Geom.pointToAngle(r, from)));
    }
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)ChopBoxConnector.java 5.2
d4 6
d22 1
d24 2
d42 2
a43 2
        Figure startFigure = connection.start().owner();
        Rectangle r2 = connection.end().displayBox();
d46 1
a46 1
        if (connection.pointCount() == 2)
d48 2
a49 1
         else
d51 1
d57 2
a58 2
        Figure endFigure = connection.end().owner();
        Rectangle r1 = connection.start().displayBox();
d61 1
a61 1
        if (connection.pointCount() == 2)
d63 2
a64 1
         else
d66 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)ChopBoxConnector.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
