head	1.1;
access;
symbols
	jhotdraw60b1-release:1.1
	package_rename:1.1
	directory_rename:1.1
	reorg_6x_split_initial:1.1
	DNOYEB1_ALPHA-2:1.1.2.1
	DNOYEB1_ALPHA-1:1.1.2.1
	dnoyeb1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2003.01.16.06.03.53;	author dnoyeb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.01.16.06.03.53;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file AbstractFigureDecorator.java was initially added on branch dnoyeb1.
@
text
@@


1.1.2.1
log
@New FigureDecorator using decorator pattern now installed.
A few other minor cleanups.
@
text
@a0 83
/*
 * @@(#)AbstractFigureDecorator.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.standard;
import java.io.*;
import CH.ifa.draw.util.*;
import CH.ifa.draw.framework.*;
/**
 *
 * @@author CL Gilbert<dnoyeb@@users.sourceforge.net>
 * @@version <$CURRENT_VERSION$>
 */
public abstract class AbstractFigureDecorator implements CH.ifa.draw.framework.FigureDecorator {
	
	private Figure fFigure;
	
	
	protected Figure getDecoratedFigure() {
		return fFigure;
	}	
	
	public void decorateFigure(Figure figure) {
		fFigure = figure;
	}
	public void undecorateFigure(Figure figure) {
		fFigure = null;
	}
	
	
	/**
	 * Reads the object from the StorableInput.
	 */
	public void read(StorableInput dr) throws IOException {
		fFigure = (Figure)dr.readStorable();
	}
	
	/** 
	 * Writes the object to the StorableOutput.
	 */
	public void write(StorableOutput dw) {
		dw.writeStorable(fFigure);
	}
	/**
	 * Clones a figure. Creates a clone by using the storable
	 * mechanism to flatten the Figure to stream followed by
	 * resurrecting it from the same stream.
	 *
	 * @@see Figure#clone
	 */
	public Object clone() {
		Object clone = null;
		ByteArrayOutputStream output = new ByteArrayOutputStream(200);
		try {
			ObjectOutput writer = new ObjectOutputStream(output);
			writer.writeObject(this);
			writer.close();
		}
		catch (IOException e) {
			System.err.println("Class not found: " + e);
		}

		InputStream input = new ByteArrayInputStream(output.toByteArray());
		try {
			ObjectInput reader = new ObjectInputStream(input);
			clone = reader.readObject();
		}
		catch (IOException e) {
			System.err.println(e.toString());
		}
		catch (ClassNotFoundException e) {
			System.err.println("Class not found: " + e);
		}
		return clone;
	}
}
@

