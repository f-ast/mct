head	1.9;
access;
symbols
	jhotdraw60b1-release:1.9
	package_rename:1.9
	directory_rename:1.8
	reorg_6x_split_initial:1.8
	MVC_PHASE1:1.8.0.10
	NEW_ATTRIBUTES:1.8.0.8
	DNOYEB1_ALPHA-2:1.8.4.2
	release_JHD54b1:1.8
	BUGFIX_670992:1.8.0.6
	DNOYEB1_ALPHA-1:1.8.4.1
	dnoyeb1:1.8.0.4
	repack:1.8.0.2
	Root_repack:1.8
	Before_FigureVisitor:1.8
	JHotDraw_5-3:1.5
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.04.22.56.18;	author mrfloppy;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2002.05.20.19.57.59;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.30.20.40.10;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.19.18.31.32;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.33;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;

1.8.4.1
date	2003.01.10.04.54.45;	author dnoyeb;	state Exp;
branches;
next	1.8.4.2;

1.8.4.2
date	2003.01.26.00.51.17;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.9
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)SelectAreaTracker.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.standard;

import java.awt.*;
import java.awt.event.MouseEvent;
import org.jhotdraw.framework.*;

/**
 * SelectAreaTracker implements a rubberband selection of an area.
 *
 * @@version <$CURRENT_VERSION$>
 */
public class SelectAreaTracker extends AbstractTool {
    /** Selected rectangle in physical coordinates space */
	private Rectangle fSelectGroup;
    private Color fRubberBandColor;

	public SelectAreaTracker(DrawingEditor newDrawingEditor) {
        this(newDrawingEditor, Color.black);
    }

    public SelectAreaTracker(DrawingEditor newDrawingEditor, Color rubberBandColor) {
		super(newDrawingEditor);
        fRubberBandColor = rubberBandColor;
	}

	public void mouseDown(MouseEvent e, int x, int y) {
		// use event coordinates to supress any kind of
		// transformations like constraining points to a grid
		super.mouseDown(e, e.getX(), e.getY());
		rubberBand(getAnchorX(), getAnchorY(), getAnchorX(), getAnchorY());
	}

	public void mouseDrag(MouseEvent e, int x, int y) {
		super.mouseDrag(e, x, y);
		eraseRubberBand();
		rubberBand(getAnchorX(), getAnchorY(), x, y);
	}

	public void mouseUp(MouseEvent e, int x, int y) {
		eraseRubberBand();
		selectGroup(e.isShiftDown());
		super.mouseUp(e, x, y);
	}

	private void rubberBand(int x1, int y1, int x2, int y2) {
		fSelectGroup = new Rectangle(new Point(x1, y1));
		fSelectGroup.add(new Point(x2, y2));
		drawXORRect(fSelectGroup);
	}

	private void eraseRubberBand() {
		drawXORRect(fSelectGroup);
	}

	private void drawXORRect(Rectangle r) {
		Graphics g = view().getGraphics();
		if ( g != null ) {
			try {
                if (g instanceof Graphics2D) {
                    // Do dotted-line in Java2
                    Stroke dashedStroke = new BasicStroke(1.0f,
                        BasicStroke.CAP_SQUARE, BasicStroke.JOIN_MITER,
                        10.0f, new float[] {5f, 5f, 5f, 5f}, 5.0f);
                    ((Graphics2D) g).setStroke(dashedStroke);
                }

				g.setXORMode(view().getBackground());
                g.setColor(fRubberBandColor);
				g.drawRect(r.x, r.y, r.width, r.height);
			}
			finally {
				g.dispose(); // SF bugtracker id: #490663
			}
		}
	}

	private void selectGroup(boolean toggle) {
		FigureEnumeration fe = drawing().figuresReverse();
		while (fe.hasNextFigure()) {
			Figure figure = fe.nextFigure();
			Rectangle r2 = figure.displayBox();
			if (fSelectGroup.contains(r2.x, r2.y) && fSelectGroup.contains(r2.x+r2.width, r2.y+r2.height)) {
				if (toggle) {
					view().toggleSelection(figure);
				}
				else {
					view().addToSelection(figure);
				}
			}
		}
	}
}
@


1.8
log
@after variou merges... (before 5.4 release)
@
text
@d12 1
a12 1
package CH.ifa.draw.standard;
d16 1
a16 1
import CH.ifa.draw.framework.*;
@


1.8.4.1
log
@1.  Tool now accepts DrawingViewMouseEvent as opposed to java.awt.MouseEvent and x,y ints.
2. compositeFigure now uses constrained mouse values throughout.
3. nested CreationTOol was calling drawing() before it was setting the view.  should lead to NPE.  this tool still seems broken
   i dont think its needed anymore?
4. bug in splitConnectionTool mouse down. setEndConnector(findConnector(ex, ex, c)); needs to be ex and ey
5. made some of StandardDrawingViews inner class listners protected.
@
text
@d15 1
a15 1

d37 1
a37 2
	public void mouseDown(DrawingViewMouseEvent dvme) {
		super.mouseDown(dvme);
d40 1
a40 4
		//I disagree, selection may be unconstrained, but drag should be. I did not change however.
		//also notice the the drag function is using constrained values
		setAnchorX( dvme.getMouseEvent().getX() );
		setAnchorY( dvme.getMouseEvent().getY() );
d44 2
a45 2
	public void mouseDrag(DrawingViewMouseEvent dvme) {
		super.mouseDrag(dvme);
d47 1
a47 1
		rubberBand(getAnchorX(), getAnchorY(), dvme.getMouseEvent().getX(), dvme.getMouseEvent().getY());
d50 1
a50 1
	public void mouseUp(DrawingViewMouseEvent dvme) {
d52 2
a53 2
		selectGroup(dvme.getMouseEvent().isShiftDown());
		super.mouseUp(dvme);
@


1.8.4.2
log
@CompositeFigure does not return figures from add, remove, orphan anymore
new method, restore added to bring back orphaned figures
compositeFigure keeps record of its orphans for the restore method
NullFigures inserted as placeholders into the figureList
dumps record and nullFigures when remove(figure) called. this safely restores
figures to their old places.
figureRequestRemove and figureRemove events eliminated.
Group and Ungroup commands redone to respect these new ideas.
have not done anything with delete, cut, copy, paste yet.
NullFigure added 0,0 for its display box, else throwing exceptions
@
text
@d93 1
a93 1
		FigureEnumeration fe = figures();
a105 3
	}
	protected FigureEnumeration figures(){
		return drawing().figuresReverse();
@


1.7
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@a15 1
import java.util.*;
a50 1
		super.mouseUp(e, x, y);
d53 1
d70 1
a70 1
                if(g instanceof Graphics2D) {
d89 3
a91 3
		FigureEnumeration k = drawing().figuresReverse();
		while (k.hasMoreElements()) {
			Figure figure = k.nextFigure();
@


1.6
log
@no message
@
text
@d25 1
a25 1

d27 1
d30 4
d35 1
d71 8
d80 1
a80 1
				g.setColor(Color.black);
@


1.5
log
@no message
@
text
@d36 1
a36 1
		rubberBand(fAnchorX, fAnchorY, fAnchorX, fAnchorY);
d42 1
a42 1
		rubberBand(fAnchorX, fAnchorY, x, y);
@


1.4
log
@merge dnd (before 5.3)
@
text
@d63 10
a72 3
		g.setXORMode(view().getBackground());
		g.setColor(Color.black);
		g.drawRect(r.x, r.y, r.width, r.height);
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d28 2
a29 2
	public SelectAreaTracker(DrawingView view) {
		super(view);
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)SelectAreaTracker.java 5.2
d4 6
d21 2
d26 1
a26 1
    private Rectangle fSelectGroup;
d28 55
a82 57
    public SelectAreaTracker(DrawingView view) {
        super(view);
    }

    public void mouseDown(MouseEvent e, int x, int y) {
        // use event coordinates to supress any kind of
        // transformations like constraining points to a grid
        super.mouseDown(e, e.getX(), e.getY());
        rubberBand(fAnchorX, fAnchorY, fAnchorX, fAnchorY);
    }

    public void mouseDrag(MouseEvent e, int x, int y) {
        super.mouseDrag(e, x, y);
        eraseRubberBand();
        rubberBand(fAnchorX, fAnchorY, x, y);
    }

    public void mouseUp(MouseEvent e, int x, int y) {
        super.mouseUp(e, x, y);
        eraseRubberBand();
        selectGroup(e.isShiftDown());
    }

    private void rubberBand(int x1, int y1, int x2, int y2)
    {
        fSelectGroup = new Rectangle(new Point(x1, y1));
        fSelectGroup.add(new Point(x2, y2));
        drawXORRect(fSelectGroup);
    }

    private void eraseRubberBand()
    {
        drawXORRect(fSelectGroup);
    }

    private void drawXORRect(Rectangle r)
    {
        Graphics g = view().getGraphics();
        g.setXORMode(view().getBackground());
        g.setColor(Color.black);
        g.drawRect(r.x, r.y, r.width, r.height);
    }

    private void selectGroup(boolean toggle)
    {
        FigureEnumeration k = drawing().figuresReverse();
        while (k.hasMoreElements()) {
            Figure figure = k.nextFigure();
            Rectangle r2 = figure.displayBox();
            if (fSelectGroup.contains(r2.x, r2.y) && fSelectGroup.contains(r2.x+r2.width, r2.y+r2.height)) {
                if (toggle)
                    view().toggleSelection(figure);
                else
                    view().addToSelection(figure);
            }
        }
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)SelectAreaTracker.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
