head	1.8;
access;
symbols
	jhotdraw60b1-release:1.8
	package_rename:1.8
	directory_rename:1.7
	reorg_6x_split_initial:1.7
	MVC_PHASE1:1.7.0.10
	NEW_ATTRIBUTES:1.7.0.8
	DNOYEB1_ALPHA-2:1.7.4.1
	release_JHD54b1:1.7
	BUGFIX_670992:1.7.0.6
	DNOYEB1_ALPHA-1:1.7.4.1
	dnoyeb1:1.7.0.4
	repack:1.7.0.2
	Root_repack:1.7
	Before_FigureVisitor:1.7
	JHotDraw_5-3:1.5
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.04.22.56.18;	author mrfloppy;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2002.04.30.20.40.10;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.19.18.31.32;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.01;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;

1.7.4.1
date	2003.01.10.04.54.45;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.8
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)HandleTracker.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.standard;

import java.awt.event.MouseEvent;
import org.jhotdraw.framework.*;

/**
 * HandleTracker implements interactions with the handles of a Figure.
 *
 * @@see SelectionTool
 *
 * @@version <$CURRENT_VERSION$>
 */
public class HandleTracker extends AbstractTool {

	private Handle  fAnchorHandle;

	public HandleTracker(DrawingEditor newDrawingEditor, Handle anchorHandle) {
		super(newDrawingEditor);
		fAnchorHandle = anchorHandle;
	}

	public void mouseDown(MouseEvent e, int x, int y) {
		super.mouseDown(e, x, y);
		fAnchorHandle.invokeStart(x, y, view());
	}

	public void mouseDrag(MouseEvent e, int x, int y) {
		super.mouseDrag(e, x, y);
		fAnchorHandle.invokeStep(x, y, getAnchorX(), getAnchorY(), view());
	}

	public void mouseUp(MouseEvent e, int x, int y) {
		super.mouseUp(e, x, y);
		fAnchorHandle.invokeEnd(x, y, getAnchorX(), getAnchorY(), view());
	}

	public void activate() {
		// suppress clearSelection() and tool-activation-notification
		// in superclass by providing an empty implementation
	}
}
@


1.7
log
@after variou merges... (before 5.4 release)
@
text
@d12 1
a12 1
package CH.ifa.draw.standard;
d15 1
a15 1
import CH.ifa.draw.framework.*;
@


1.7.4.1
log
@1.  Tool now accepts DrawingViewMouseEvent as opposed to java.awt.MouseEvent and x,y ints.
2. compositeFigure now uses constrained mouse values throughout.
3. nested CreationTOol was calling drawing() before it was setting the view.  should lead to NPE.  this tool still seems broken
   i dont think its needed anymore?
4. bug in splitConnectionTool mouse down. setEndConnector(findConnector(ex, ex, c)); needs to be ex and ey
5. made some of StandardDrawingViews inner class listners protected.
@
text
@d14 1
a14 1

d33 3
a35 7
	public void mouseDown(DrawingViewMouseEvent dvme) {
		super.mouseDown(dvme);
		// use event coordinates to supress any kind of
		// transformations like constraining points to a grid, why?
		setAnchorX( dvme.getMouseEvent().getX() );
		setAnchorY( dvme.getMouseEvent().getY() );
		fAnchorHandle.invokeStart(getAnchorX(), getAnchorY(), view());
d38 3
a40 3
	public void mouseDrag(DrawingViewMouseEvent dvme) {
		super.mouseDrag( dvme );
		fAnchorHandle.invokeStep(dvme.getMouseEvent().getX(), dvme.getMouseEvent().getY(), getAnchorX(), getAnchorY(), view());
d43 3
a45 3
	public void mouseUp(DrawingViewMouseEvent dvme) {
		fAnchorHandle.invokeEnd(dvme.getMouseEvent().getX(), dvme.getMouseEvent().getY(), getAnchorX(), getAnchorY(), view());
		super.mouseUp(dvme);		
@


1.6
log
@no message
@
text
@a13 1
import java.awt.*;
@


1.5
log
@no message
@
text
@d41 1
a41 1
		fAnchorHandle.invokeStep(x, y, fAnchorX, fAnchorY, view());
d46 1
a46 1
		fAnchorHandle.invokeEnd(x, y, fAnchorX, fAnchorY, view());
d50 2
a51 1
		// suppress clearSelection() in superclas by providing an empty implementation
@


1.4
log
@merge dnd (before 5.3)
@
text
@d45 1
a45 1
		super.mouseDrag(e, x, y);
d48 1
a48 1
	
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d29 2
a30 2
	public HandleTracker(DrawingView view, Handle anchorHandle) {
		super(view);
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)HandleTracker.java 5.2
d4 6
d19 1
a19 2
 * HandleTracker implements interactions with the handles
 * of a Figure.
d22 2
d27 1
a27 1
    private Handle  fAnchorHandle;
d29 23
a51 19
    public HandleTracker(DrawingView view, Handle anchorHandle) {
        super(view);
        fAnchorHandle = anchorHandle;
    }

    public void mouseDown(MouseEvent e, int x, int y) {
        super.mouseDown(e, x, y);
        fAnchorHandle.invokeStart(x, y, view());
    }

    public void mouseDrag(MouseEvent e, int x, int y) {
        super.mouseDrag(e, x, y);
        fAnchorHandle.invokeStep(x, y, fAnchorX, fAnchorY, view());
    }

    public void mouseUp(MouseEvent e, int x, int y) {
        super.mouseDrag(e, x, y);
        fAnchorHandle.invokeEnd(x, y, fAnchorX, fAnchorY, view());
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)HandleTracker.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
