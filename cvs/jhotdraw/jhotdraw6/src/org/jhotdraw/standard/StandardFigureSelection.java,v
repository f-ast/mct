head	1.5;
access;
symbols
	jhotdraw60b1-release:1.5
	package_rename:1.5
	directory_rename:1.4
	reorg_6x_split_initial:1.4
	MVC_PHASE1:1.4.0.10
	NEW_ATTRIBUTES:1.4.0.8
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3;
locks; strict;
comment	@# @;


1.5
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.04.22.56.18;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.24.20.32.01;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.02.08.06.15;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.5
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)FigureSelection.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.standard;

import org.jhotdraw.framework.*;
import org.jhotdraw.util.*;

import java.util.*;
import java.io.*;

/**
 * FigureSelection enables to transfer the selected figures
 * to a clipboard.<p>
 * Will soon be converted to the JDK 1.1 Transferable interface.
 *
 * @@see Clipboard
 *
 * @@version <$CURRENT_VERSION$>
 */

public class StandardFigureSelection implements FigureSelection, Serializable {

	private byte[] fData; // flattend figures, ready to be resurrected

	/**
	 * The type identifier of the selection.
	 */
	public final static String TYPE = "org.jhotdraw.Figures";

	/**
	 * Constructes the Figure selection for the FigureEnumeration.
	 */
	public StandardFigureSelection(FigureEnumeration fe, int figureCount) {
		// a FigureSelection is represented as a flattened ByteStream
		// of figures.
		ByteArrayOutputStream output = new ByteArrayOutputStream(200);
		StorableOutput writer = new StorableOutput(output);
		writer.writeInt(figureCount);
		while (fe.hasNextFigure()) {
			writer.writeStorable(fe.nextFigure());
		}
		writer.close();
		fData = output.toByteArray();
	}

	/**
	 * Gets the type of the selection.
	 */
	public String getType() {
		return TYPE;
	}

	/**
	 * Gets the data of the selection. The result is returned
	 * as a FigureEnumeration of Figures.
	 *
	 * @@return a copy of the figure selection.
	 */
	public Object getData(String type) {
		if (type.equals(TYPE)) {
			InputStream input = new ByteArrayInputStream(fData);
			List result = CollectionsFactory.current().createList(10);
			StorableInput reader = new StorableInput(input);
			int numRead = 0;
			try {
				int count = reader.readInt();
				while (numRead < count) {
					Figure newFigure = (Figure) reader.readStorable();
					result.add(newFigure);
					numRead++;
				}
			}
			catch (IOException e) {
				System.err.println(e.toString());
			}
			return new FigureEnumerator(result);
		}
		return null;
	}

	public static FigureEnumeration duplicateFigures(FigureEnumeration toBeCloned, int figureCount) {
		StandardFigureSelection duplicater = new StandardFigureSelection(toBeCloned, figureCount);
		return (FigureEnumeration)duplicater.getData(duplicater.getType());
	}
}

@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@d12 1
a12 1
package CH.ifa.draw.standard;
d14 2
a15 2
import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.*;
d37 1
a37 1
	public final static String TYPE = "CH.ifa.draw.Figures";
@


1.3
log
@merge dnd (before 5.3)
@
text
@d33 1
a33 1
	
d40 1
a40 1
	 * Constructes the Figure selection for the vector of figures.
d42 1
a42 1
	public StandardFigureSelection(FigureEnumeration figures, int figureCount) {
d48 2
a49 2
		while (figures.hasMoreElements()) {
			writer.writeStorable(figures.nextFigure());
d64 1
a64 1
	 * as a Vector of Figures.
d71 1
a71 1
			Vector result = new Vector(10);
d78 1
a78 1
					result.addElement(newFigure);
d89 1
a89 1
	
@


1.2
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d32 6
a37 6
    private byte[] fData; // flattend figures, ready to be resurrected
    
    /**
     * The type identifier of the selection.
     */
    public final static String TYPE = "CH.ifa.draw.Figures";
d39 15
a53 15
    /**
     * Constructes the Figure selection for the vector of figures.
     */
    public StandardFigureSelection(FigureEnumeration figures, int figureCount) {
        // a FigureSelection is represented as a flattened ByteStream
        // of figures.
        ByteArrayOutputStream output = new ByteArrayOutputStream(200);
        StorableOutput writer = new StorableOutput(output);
        writer.writeInt(figureCount);
        while (figures.hasMoreElements()) {
            writer.writeStorable(figures.nextFigure());
        }
        writer.close();
        fData = output.toByteArray();
    }
d55 6
a60 6
    /**
     * Gets the type of the selection.
     */
    public String getType() {
        return TYPE;
    }
d62 32
a93 31
    /**
     * Gets the data of the selection. The result is returned
     * as a Vector of Figures.
     *
     * @@return a copy of the figure selection.
     */
    public Object getData(String type) {
        if (type.equals(TYPE)) {
            InputStream input = new ByteArrayInputStream(fData);
            Vector result = new Vector(10);
            StorableInput reader = new StorableInput(input);
            int numRead = 0;
            try {
                int count = reader.readInt();
                while (numRead < count) {
                    Figure newFigure = (Figure) reader.readStorable();
                    result.addElement(newFigure);
                    numRead++;
                }
            } catch (IOException e) {
                System.out.println(e.toString());
            }
            return new FigureEnumerator(result);
        }
        return null;
    }
    
    public static FigureEnumeration duplicateFigures(FigureEnumeration toBeCloned, int figureCount) {
    	StandardFigureSelection duplicater = new StandardFigureSelection(toBeCloned, figureCount);
    	return (FigureEnumeration)duplicater.getData(duplicater.getType());
    }
@


1.1
log
@added missing files (CH.ifa.draw.standard.StandardFigureSelection)
@
text
@d2 1
a2 1
 * @@(#)FigureSelection.java 5.2
d4 6
d14 1
a14 2
import CH.ifa.draw.framework.FigureSelection;
import CH.ifa.draw.framework.Figure;
d16 1
d26 2
d42 1
a42 1
    public StandardFigureSelection(Vector figures) {
d47 3
a49 5
        writer.writeInt(figures.size());
        Enumeration selected = figures.elements();
        while (selected.hasMoreElements()) {
            Figure figure = (Figure) selected.nextElement();
            writer.writeStorable(figure);
d84 1
a84 1
            return result;
d87 5
@

