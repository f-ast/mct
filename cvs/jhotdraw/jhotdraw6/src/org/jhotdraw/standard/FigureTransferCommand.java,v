head	1.10;
access;
symbols
	jhotdraw60b1-release:1.10
	package_rename:1.10
	directory_rename:1.9
	reorg_6x_split_initial:1.9
	MVC_PHASE1:1.9.0.4
	NEW_ATTRIBUTES:1.9.0.2
	DNOYEB1_ALPHA-2:1.8.4.4
	release_JHD54b1:1.9
	BUGFIX_670992:1.8.0.6
	DNOYEB1_ALPHA-1:1.8.4.3
	dnoyeb1:1.8.0.4
	repack:1.8.0.2
	Root_repack:1.8
	Before_FigureVisitor:1.7
	JHotDraw_5-3:1.6
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.24.15.17.22;	author dnoyeb;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.22.08.58.22;	author mrfloppy;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2002.08.04.22.56.18;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.20.32.01;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.25.13;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.29.13.42.14;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;

1.8.4.1
date	2003.01.10.20.10.49;	author dnoyeb;	state Exp;
branches;
next	1.8.4.2;

1.8.4.2
date	2003.01.14.18.25.33;	author dnoyeb;	state Exp;
branches;
next	1.8.4.3;

1.8.4.3
date	2003.01.16.22.38.46;	author dnoyeb;	state Exp;
branches;
next	1.8.4.4;

1.8.4.4
date	2003.01.24.16.01.39;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.10
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)FigureTransferCommand.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.standard;

import org.jhotdraw.util.*;
import org.jhotdraw.framework.*;

/**
 * Common base clase for commands that transfer figures
 * between a drawing and the clipboard.
 *
 * @@version <$CURRENT_VERSION$>
 */
public abstract class FigureTransferCommand extends AbstractCommand {

	/**
	 * Constructs a drawing command.
	 * @@param name the command name
	 * @@param newDrawingEditor the DrawingEditor which manages the views
	 */
	protected FigureTransferCommand(String name, DrawingEditor newDrawingEditor) {
		super(name, newDrawingEditor);
	}

   /**
	* Deletes the selection from the drawing.
	*/
	protected void deleteFigures(FigureEnumeration fe) {
	   DeleteFromDrawingVisitor deleteVisitor = new DeleteFromDrawingVisitor(view().drawing());
		while (fe.hasNextFigure()) {
			fe.nextFigure().visit(deleteVisitor);
		}

		view().clearSelection();
	}

   /**
	* Copies the FigureEnumeration to the clipboard.
	*/
	protected void copyFigures(FigureEnumeration fe, int figureCount) {
		Clipboard.getClipboard().setContents(new StandardFigureSelection(fe, figureCount));
	}

   /**
	* Inserts an enumeration of figures and translates them by the
	* given offset.
	* @@todo mrfloppy to investigate making this protected.  Looks like it would
	*       be no problem to me.  It was package scope.  I thought it safer to
	*       make it less restrictive just incase their was a reason for the
	*       package scope I didn't know about. dnoyeb.
	*       Bug - [ 673096 ] FigureTransferCommand has a wrong method
	*/
	public FigureEnumeration insertFigures(FigureEnumeration fe, int dx, int dy) {
		return view().insertFigures(fe, dx, dy, false);
	}
}


@


1.9
log
@Bug - [ 673096 ] FigureTransferCommand has a wrong method, addressed
@
text
@d12 1
a12 1
package CH.ifa.draw.standard;
d14 2
a15 2
import CH.ifa.draw.util.*;
import CH.ifa.draw.framework.*;
@


1.8
log
@introduce FigureVisitor for paste/delete commands
@
text
@d56 5
d62 1
a62 1
	FigureEnumeration insertFigures(FigureEnumeration fe, int dx, int dy) {
@


1.8.4.1
log
@DND now 'almost' implements Undo/Redo.
It works but its 2 seperate actions, so it takes 2 actions to undo
and 2 actions to redo.  havent found out how to remedy this yet.
Since the Drag gesture may be different on different platforms one must
either implement a JHD drag gesture recognizer, which is not the correct approach.
Or one must make the tool sufficietly generic to handle and undo drags from all platforms.

shooting for the latter.  DND needs some work.  But its still working.
@
text
@a35 4
	* all these implementation details need to move to the DrawingView as with 
	* insertFigures. !!!
	* in the long run I think we need full document-view seperation.  nobody shoul
	* know about the document, nor touch it except the view, file in, file out.
@


1.8.4.2
log
@DecoratorFigure is 'changed'  I think it needs reworking.  not its only used durint draw(Graphics g) but I don't think
that was its real intention?

The Figure added or removed is nolonger changed during the add or remove process.  Thus add and remove do not return
values.
orphan is used internally to the drawing only.
remove calls figure.remove() which intern orphans the figure.
remove(Figure f) is still present and used but currently not needed.  call figure.remove() instead.
perhaps we can add a method on the figure enumerator to 'remove' all the figures within it.
Figure no longer exposes its listeners.  call methods on figure to send events.


Serialization in every form needs cleanup now.  Some due to earlier changes made by myself like making listeners of
inner classes, but not storing the listener when the figures are stored. (since the figures think the inner listener
is their container.)
@
text
@d36 4
@


1.8.4.3
log
@Various comments.
Fixed undo bug which always restored dependent figures, even if they were deleted in a
seperate operation.
@
text
@d37 1
a37 1
	protected FigureEnumeration deleteFigures(FigureEnumeration fe) {
a43 1
		return deleteVisitor.getDeletedFigures();
@


1.8.4.4
log
@[ 673096 ] FigureTransferCommand has a wrong method
other enhancements for extendability.  No other signatures changed.
@
text
@d58 1
a58 1
	protected FigureEnumeration insertFigures(FigureEnumeration fe, int dx, int dy) {
@


1.7
log
@after variou merges... (before 5.4 release)
@
text
@d38 1
d40 1
a40 1
			view().drawing().orphan(fe.nextFigure());
@


1.6
log
@merge dnd (before 5.3)
@
text
@a13 1
import java.util.*;
d38 1
a38 1
		while (fe.hasMoreElements()) {
d53 1
a53 1
	* Inserts a vector of figures and translates them by the
@


1.5
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d26 8
a33 8
   /**
    * Constructs a drawing command.
    * @@param name the command name
    * @@param view the target view
    */
    protected FigureTransferCommand(String name, DrawingView view) {
        super(name, view);
    }
d36 6
a41 6
    * Deletes the selection from the drawing.
    */
    protected void deleteFigures(FigureEnumeration fe) {
        while (fe.hasMoreElements()) {
            view().drawing().orphan(fe.nextFigure());
        }
d43 2
a44 2
        view().clearSelection();
    }
d47 5
a51 5
    * Copies the FigureEnumeration to the clipboard.
    */
    protected void copyFigures(FigureEnumeration fe, int figureCount) {
        Clipboard.getClipboard().setContents(new StandardFigureSelection(fe, figureCount));
    }
d54 6
a59 6
    * Inserts a vector of figures and translates them by the
    * given offset.
    */
    FigureEnumeration insertFigures(FigureEnumeration fe, int dx, int dy) {
        return view().insertFigures(fe, dx, dy, false);
    }
@


1.4
log
@before merge for version 5.3 (dnd, undo,...)
@
text
@d2 1
a2 1
 * @@(#)FigureTransferCommand.java 5.2
d4 6
d21 2
d24 1
a24 3
abstract class FigureTransferCommand extends Command {

    protected DrawingView fView;
d32 1
a32 2
        super(name);
        fView = view;
d38 6
a43 3
    protected void deleteSelection() {
       fView.drawing().removeAll(fView.selection());
       fView.clearSelection();
d47 1
a47 1
    * Copies the selection to the clipboard.
d49 2
a50 3
    protected void copySelection() {
        FigureSelection selection = fView.getFigureSelection();
        Clipboard.getClipboard().setContents(selection);
d57 2
a58 8
    protected void insertFigures(Vector figures, int dx, int dy) {
        FigureEnumeration e = new FigureEnumerator(figures);
        while (e.hasMoreElements()) {
            Figure figure = e.nextFigure();
            figure.moveBy(dx, dy);
            figure = fView.add(figure);
            fView.addToSelection(figure);
        }
a59 1

@


1.3
log
@- SelectionFigure is now an interface. The default implementation CH.ifa.draw.standard.StandardSelectionFigure
- A FigureSelectionListener interface has been introduced in CH.ifa.draw.framework. An DrawingEditor
  is now a FigureSelectionListener and the signature for all selectionChanged() methods has been
  changed to figureSelectionChanged().
- CH.ifa.draw.util.Command is now an interface. A AbstractCommand can be found in CH.ifa.draw.standard.
- All commands used to have a fView field. This has been moved to CH.ifa.draw.standard.AbstactCommand
- A CH.ifa.draw.standard.StandardDrawingView has now a paintComponents() method instead of a paint()
  and update() method. This allows the CH.ifa.draw.util.FloatingTextField to be a javax.swing.JTextField
  instead of a java.awt.TextField.
- CH.ifa.draw.figures.AbstractLineDecorator has been missing
- DrawApplet, DrawApplication and derived classes are now programmed towards the DrawingView interface
  instead of using StandardDrawingView. That leads to occasional cast when some additional StandardDrawingView
  functionality is required in some specialized cases. Applications that were derived from DrawApplication
  and used to override the createContents() methods should now return a DrawingView as well
@
text
@d16 3
a18 1
public abstract class FigureTransferCommand extends AbstractCommand {
d26 2
a27 1
        super(name, view);
d34 2
a35 2
       view().drawing().removeAll(view().selection());
       view().clearSelection();
d42 1
a42 1
        FigureSelection selection = view().getFigureSelection();
d55 2
a56 2
            figure = view().add(figure);
            view().addToSelection(figure);
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d16 1
a16 3
abstract class FigureTransferCommand extends Command {

    protected DrawingView fView;
d24 1
a24 2
        super(name);
        fView = view;
d31 2
a32 2
       fView.drawing().removeAll(fView.selection());
       fView.clearSelection();
d39 1
a39 1
        FigureSelection selection = fView.getFigureSelection();
d52 2
a53 2
            figure = fView.add(figure);
            fView.addToSelection(figure);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)FigureTransferCommand.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
