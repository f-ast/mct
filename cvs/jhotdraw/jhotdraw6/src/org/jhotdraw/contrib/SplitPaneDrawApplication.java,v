head	1.9;
access;
symbols
	jhotdraw60b1-release:1.9
	package_rename:1.9
	directory_rename:1.8
	reorg_6x_split_initial:1.8
	MVC_PHASE1:1.8.0.10
	NEW_ATTRIBUTES:1.8.0.8
	DNOYEB1_ALPHA-2:1.8
	release_JHD54b1:1.8
	BUGFIX_670992:1.8.0.6
	DNOYEB1_ALPHA-1:1.8
	dnoyeb1:1.8.0.4
	repack:1.8.0.2
	Root_repack:1.8
	Before_FigureVisitor:1.8
	JHotDraw_5-3:1.6
	JHotDraw_5-2_merged:1.1;
locks; strict;
comment	@# @;


1.9
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.04.22.39.17;	author mrfloppy;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.20.19.57.58;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.25.12;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.29.13.42.13;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.9
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)SplitPaneDrawApplication.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.contrib;

import org.jhotdraw.application.*;

/**
 * A specialised DrawApplication, which offers basic support for a simple
 * splitted pane content.
 *
 * @@author  Wolfram Kaiser <mrfloppy@@sourceforge.net>
 * @@version <$CURRENT_VERSION$>
 */
public  class SplitPaneDrawApplication extends DrawApplication {

	/**
	 * Constructs a drawing window with a default title.
	 */
	public SplitPaneDrawApplication() {
		this("JHotDraw");
	}

	/**
	 * Constructs a drawing window with the given title.
	 */
	public SplitPaneDrawApplication(String title) {
		super(title);
	}

	protected Desktop createDesktop() {
		return new SplitPaneDesktop();
	}
}
@


1.8
log
@after variou merges... (before 5.4 release)
@
text
@d12 1
a12 1
package CH.ifa.draw.contrib;
d14 1
a14 1
import CH.ifa.draw.application.*;
@


1.7
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@a13 15
import javax.swing.JSplitPane;
import javax.swing.JScrollPane;
import javax.swing.JList;
import javax.swing.JComponent;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.*;
import CH.ifa.draw.figures.*;
import CH.ifa.draw.util.*;
d20 1
a20 1
 * @@author  Wolfram Kaiser
a24 4
	private JComponent leftComponent;
	private JComponent rightComponent;
	private PropertyChangeListener myPropertyChangeListener;

a36 6
		myPropertyChangeListener = new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {
				getRightComponent().repaint();
				getLeftComponent().repaint();
			}
		};
d39 2
a40 91
	/**
	 * Opens the window and initializes its contents.
	 * Clients usually only call but don't override it.
	 */
	protected JComponent createContents(DrawingView view) {
		createRightComponent(view);
		createLeftComponent(view);

		if ((getLeftComponent() == null) && (getRightComponent() == null)) {
			return super.createContents(view);
		}
		else if (getLeftComponent() == null) {
			return getRightComponent();
		}
		else if (getRightComponent() == null) {
			return getLeftComponent();
		}
		else {
			return createSplitPane(view);
		}
	}

	/**
	 * Method which creates the basic split pane. Subclasses may override
	 * this method.
	 *
	 * @@param   view    DrawingView for which the JSplitPane should be created
	 * @@return          the created JSplitPane
	 */
	protected JSplitPane createSplitPane(DrawingView view) {
		JSplitPane dividedContents = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,
			getLeftComponent(), getRightComponent());
		dividedContents.setAlignmentX(JSplitPane.LEFT_ALIGNMENT);
		dividedContents.setOneTouchExpandable(true);
		dividedContents.addPropertyChangeListener(myPropertyChangeListener);
		dividedContents.setDividerLocation(150);
		return dividedContents;
	}

	/**
	 * Method which creates the left component for the JSplitPane.
	 * Subclasses may override this method but should call setLeftComponent()
	 * to associate the created component with the JSplitPane.
	 */
	protected void createLeftComponent(DrawingView view) {
		setLeftComponent(new JScrollPane(new JList()));
	}

	/**
	 * Set the left component of the JSplitPane.
	 *
	 * @@param	newLeftComponent	left component
	 */
	protected final void setLeftComponent(JComponent newLeftComponent) {
		leftComponent = newLeftComponent;
	}

	/**
	 * Get the left component of the JSplitPane.
	 *
	 * @@return	left component
	 */
	public JComponent getLeftComponent() {
		return leftComponent;
	}

	/**
	 * Method which creates the right component for the JSplitPane.
	 * Subclasses may override this method but should call setLeftComponent()
	 * to associate the created component with the JSplitPane.
	 */
	protected void createRightComponent(DrawingView view) {
		setRightComponent(super.createContents(view));
	}

	/**
	 * Set the right component of the JSplitPane.
	 *
	 * @@param	newRightComponent	right component
	 */
	protected final void setRightComponent(JComponent newRightComponent) {
		rightComponent = newRightComponent;
	}

	/**
	 * Get the right component of the JSplitPane.
	 *
	 * @@return	right component
	 */
	public JComponent getRightComponent() {
		return rightComponent;
@


1.6
log
@merge dnd (before 5.3)
@
text
@d22 3
d42 1
d48 1
a48 1
		super("JHotDraw");
d56 6
d69 1
a70 1
		createRightComponent(view);
d85 1
a85 1
 
d94 1
a94 1
		JSplitPane dividedContents = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, 
d98 2
d120 1
a120 1
	
@


1.5
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d40 19
a58 19
    /**
     * Constructs a drawing window with a default title.
     */
    public SplitPaneDrawApplication() {
        super("JHotDraw");
    }

    /**
     * Constructs a drawing window with the given title.
     */
    public SplitPaneDrawApplication(String title) {
        super(title);
    }

    /**
     * Opens the window and initializes its contents.
     * Clients usually only call but don't override it.
     */
    protected JComponent createContents(DrawingView view) {
d74 1
a74 1
    }
d76 23
a98 23
    /**
     * Method which creates the basic split pane. Subclasses may override
     * this method.
     *
     * @@param   view    DrawingView for which the JSplitPane should be created
     * @@return          the created JSplitPane
     */
 	protected JSplitPane createSplitPane(DrawingView view) {
        JSplitPane dividedContents = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, 
        	getLeftComponent(), getRightComponent());
        dividedContents.setAlignmentX(JSplitPane.LEFT_ALIGNMENT);
        dividedContents.setOneTouchExpandable(true);
        return dividedContents;
 	}

    /**
     * Method which creates the left component for the JSplitPane.
     * Subclasses may override this method but should call setLeftComponent()
     * to associate the created component with the JSplitPane.
     */
    protected void createLeftComponent(DrawingView view) {
    	setLeftComponent(new JScrollPane(new JList()));
    }
d105 4
a108 4
    protected final void setLeftComponent(JComponent newLeftComponent) {
    	leftComponent = newLeftComponent;
    }
    
d114 12
a125 12
    public JComponent getLeftComponent() {
    	return leftComponent;
    }

    /**
     * Method which creates the right component for the JSplitPane.
     * Subclasses may override this method but should call setLeftComponent()
     * to associate the created component with the JSplitPane.
     */
    protected void createRightComponent(DrawingView view) {
        setRightComponent(super.createContents(view));
    }
d132 3
a134 3
    protected final void setRightComponent(JComponent newRightComponent) {
    	rightComponent = newRightComponent;
    }
d141 3
a143 3
    public JComponent getRightComponent() {
    	return rightComponent;
    }
@


1.4
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d2 1
a2 1
 * @@(#)SplitPaneDrawApplication.java 5.2
@


1.3
log
@before merge for version 5.3 (dnd, undo,...)
@
text
@d4 6
d14 4
a17 1
import javax.swing.*;
d33 1
a33 1
 * @@version JHotDraw 5.2    31.08.1999
d58 1
a58 1
    protected JComponent createContents(StandardDrawingView view) {
d80 1
a80 1
     * @@param   view    StandardDrawingView for which the JSplitPane should be created
d83 4
a86 3
 	protected JSplitPane createSplitPane(StandardDrawingView view) {
        JSplitPane dividedContents = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, getLeftComponent(), getRightComponent());
        dividedContents.setAlignmentX(LEFT_ALIGNMENT);
d96 1
a96 1
    protected void createLeftComponent(StandardDrawingView view) {
d112 1
a112 1
	 * @@return	newLeftComponent	left component
d123 1
a123 1
    protected void createRightComponent(StandardDrawingView view) {
d130 1
a130 1
	 * @@param	newLeftComponent	right component
d139 1
a139 1
	 * @@return	newLeftComponent	right component
@


1.2
log
@- SelectionFigure is now an interface. The default implementation CH.ifa.draw.standard.StandardSelectionFigure
- A FigureSelectionListener interface has been introduced in CH.ifa.draw.framework. An DrawingEditor
  is now a FigureSelectionListener and the signature for all selectionChanged() methods has been
  changed to figureSelectionChanged().
- CH.ifa.draw.util.Command is now an interface. A AbstractCommand can be found in CH.ifa.draw.standard.
- All commands used to have a fView field. This has been moved to CH.ifa.draw.standard.AbstactCommand
- A CH.ifa.draw.standard.StandardDrawingView has now a paintComponents() method instead of a paint()
  and update() method. This allows the CH.ifa.draw.util.FloatingTextField to be a javax.swing.JTextField
  instead of a java.awt.TextField.
- CH.ifa.draw.figures.AbstractLineDecorator has been missing
- DrawApplet, DrawApplication and derived classes are now programmed towards the DrawingView interface
  instead of using StandardDrawingView. That leads to occasional cast when some additional StandardDrawingView
  functionality is required in some specialized cases. Applications that were derived from DrawApplication
  and used to override the createContents() methods should now return a DrawingView as well
@
text
@d8 1
a8 4
import javax.swing.JSplitPane;
import javax.swing.JScrollPane;
import javax.swing.JList;
import javax.swing.JComponent;
d49 1
a49 1
    protected JComponent createContents(DrawingView view) {
d71 1
a71 1
     * @@param   view    DrawingView for which the JSplitPane should be created
d74 1
a74 1
 	protected JSplitPane createSplitPane(DrawingView view) {
d76 1
a76 1
        dividedContents.setAlignmentX(JSplitPane.LEFT_ALIGNMENT);
d86 1
a86 1
    protected void createLeftComponent(DrawingView view) {
d113 1
a113 1
    protected void createRightComponent(DrawingView view) {
@


1.1
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d8 4
a11 1
import javax.swing.*;
d52 1
a52 1
    protected JComponent createContents(StandardDrawingView view) {
d74 1
a74 1
     * @@param   view    StandardDrawingView for which the JSplitPane should be created
d77 1
a77 1
 	protected JSplitPane createSplitPane(StandardDrawingView view) {
d79 1
a79 1
        dividedContents.setAlignmentX(LEFT_ALIGNMENT);
d89 1
a89 1
    protected void createLeftComponent(StandardDrawingView view) {
d116 1
a116 1
    protected void createRightComponent(StandardDrawingView view) {
@

