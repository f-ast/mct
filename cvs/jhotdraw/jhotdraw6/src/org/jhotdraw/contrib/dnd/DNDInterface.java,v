head	1.6;
access;
symbols
	jhotdraw60b1-release:1.6
	package_rename:1.6
	directory_rename:1.5
	reorg_6x_split_initial:1.5
	MVC_PHASE1:1.4.0.2
	NEW_ATTRIBUTES:1.3.0.2
	DNOYEB1_ALPHA-2:1.1.4.1
	release_JHD54b1:1.1
	BUGFIX_670992:1.1.0.6
	DNOYEB1_ALPHA-1:1.1
	dnoyeb1:1.1.0.4
	repack:1.1.0.2
	Root_repack:1.1
	Before_FigureVisitor:1.1;
locks; strict;
comment	@# @;


1.6
date	2004.01.09.22.53.43;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2003.05.08.15.41.25;	author ricardo_padilha;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.22.23.58.42;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.11.21.10.27;	author dnoyeb;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.04.05.20.27;	author ricardo_padilha;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.04.22.48.51;	author mrfloppy;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.29.04.19.52;	author dnoyeb;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.02.02.16.51.24;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.6
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)DNDInterface.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.contrib.dnd;

import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSourceListener;

/**
 * Interface for Components which wish to participate in drag and drop.
 *
 * A Component which wishes to participate in drag and drop should implement
 * this interface.  Once done the DragBDropTool will be able to transfer data
 * to and from the Component.  The Component will also be activated to receive
 * drops from extra-JVM sources according to the conditions the Component
 * specifies.
 *
 * @@author  CL.Gilbert <dnoyeb@@users.sourceforge.net>
 * @@version <$CURRENT_VERSION$>
 */
public interface DNDInterface {
	public void DNDInitialize(DragGestureListener dgl);
	public void DNDDeinitialize();

	/**
	 * When the DNDTool starts a drag action, it queries the interface for the
	 * dragSourceListener of the source view.  It uses this listener to create
	 * the dragGestureEvent.
	 */
	public DragSourceListener getDragSourceListener();
}@


1.5
log
@Refactoring of Cursor:
- java.awt.Cursor (class) has been sistematically replaced with CH.ifa.draw.contrib.framework.Cursor (interface)
- a new default implementation of Cursor (interface) has been added: CH.ifa.draw.contrib.standard.AWTCursor
@
text
@d12 1
a12 1
package CH.ifa.draw.contrib.dnd;
@


1.4
log
@no message
@
text
@d14 3
a16 2
import java.awt.datatransfer.*;
import java.awt.dnd.*;
@


1.3
log
@DND Update.  Hopefully this allows easier DND manipulation with the added
function seperation.
@
text
@a28 1
//	public void setDragSourceState(boolean state);
d31 1
@


1.2
log
@Removed unused import.
@
text
@d14 2
d25 1
a25 1
 * @@author  C.L.Gilbert <dnoyeb@@sourceforge.net>
d29 3
a31 4

	public boolean setDragSourceActive(boolean state);
	public boolean setDropTargetActive(boolean state);

d33 3
a35 3
	 * This method returns the set of DND actions which are accepted by this
	 * Component.
	 * @@see java.awt.dnd.DnDConstants
d37 1
a37 36
//	public int getDefaultDNDActions();

	/**
	 * This method returns the set of gestures which can be initiated by this
	 * Component;
	 *
	 * @@see java.awt.dnd.DnDConstants
	 */
//	public int getDragGestures();

	/**
	 * This method returns the set of DataFlavors accepted by this component.
	 * These DataFlavors must be chosen from those implemented by the class
	 * DragNDropTool getDataFlavors()
	 *
	 * @@see DragNDropTool#getDataFlavors
	 * @@see java.awt.datatransfer.DataFlavor
	 */
//	public DataFlavor[] getTransferDataFlavors();

	/**
	 * This method returns true if the parameter flavor is a supported
	 * DataFlavor.  A DataFlavor is a different form of the same Data.  Two
	 * seperate components could receive the same Data but in different
	 * DataFlavors depending on what they implement that the formats the
	 * Transferable can provide from its contained data.
	 */
//	public boolean isDataFlavorSupported(DataFlavor flavor);
	/**
	 * When data is received which implements one of the acceptable DataFlavors
	 * for this component and is an acceptable drop action, the Transferable
	 * which contains the data of the drop will be passed into this function.
	 * If successfully processed, the user should return true.  return false
	 * otherwise.
	 */
//	public boolean acceptDrop(Transferable trans);
@


1.1
log
@after variou merges... (before 5.4 release)
@
text
@a13 3
import java.awt.dnd.DnDConstants;
import java.awt.datatransfer.*;

@


1.1.4.1
log
@DND Improvements in OO and Efficiency
@
text
@d16 1
a16 1
import java.awt.dnd.*;
d26 1
a26 1
 * @@author  C.L.Gilbert <dnoyeb@@users.sourceforge.net>
d30 3
a32 10
//	public void setDragSourceState(boolean state);
	public void DNDInitialize(DragGestureListener dgl);
	public void DNDDeinitialize();
	/**
	 * When the DNDTool starts a drag action, it queries the interface for the
	 * dragSourceListener of the source view.  It uses this listener to create
	 * the dragGestureEvent.
	 */
	public DragSourceListener getDragSourceListener();
	
@


1.1.4.2
log
@OO improvements and a few bug fixes.
@
text
@d14 1
d26 1
a26 1
 * @@author  CL.Gilbert <dnoyeb@@users.sourceforge.net>
d39 43
@


