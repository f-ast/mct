head	1.13;
access;
symbols
	jhotdraw60b1-release:1.12
	package_rename:1.12
	directory_rename:1.11
	reorg_6x_split_initial:1.11
	MVC_PHASE1:1.8.0.4
	NEW_ATTRIBUTES:1.8.0.2
	DNOYEB1_ALPHA-2:1.7.4.1
	release_JHD54b1:1.8
	BUGFIX_670992:1.7.0.6
	DNOYEB1_ALPHA-1:1.7.4.1
	dnoyeb1:1.7.0.4
	repack:1.7.0.2
	Root_repack:1.7
	Before_FigureVisitor:1.7
	JHotDraw_5-3:1.6
	JHotDraw_5-2_merged:1.1;
locks; strict;
comment	@# @;


1.13
date	2004.03.11.09.03.58;	author pmorch;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.09.21.18.45;	author mrfloppy;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.14.18.59.00;	author pmorch;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.14.18.49.04;	author pmorch;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.30.00.27.33;	author mrfloppy;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.04.22.39.17;	author mrfloppy;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.25.12;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.29.13.42.13;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	;

1.7.4.1
date	2003.01.10.04.54.31;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.13
log
@It seems that a FigureAttrbitueConstant.POPUP_MENU was introduced in
revision 1.4 (date: 2003/09/13 22:31:10)

In contrib/CustomSelectionTool.java revision 1.11 (date: 2003/11/09
21:18:45) this new FigureAttrbitueConstant.POPUP_MENU is used instead
of Figure.POPUP_MENU which is now deprecated and removed completely -
so we get compile time warnings instead of run-time failures for
people using POPUP_MENU functionality.

More info in the JHotDraw 'Open Discussion' forums
'new FigureAttrbitueConstant.POPUP_MENU....' thread from
2004-03-04 11:17

Since it has been broken since 2003/11/09 and nobody has complained, I
guess it isn't too used, and so lets just suggest that the deprecation
warning period was from 2003/11/09 to now....
@
text
@/*
 * @@(#)CustomSelectionTool.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.contrib;

import org.jhotdraw.framework.*;
import org.jhotdraw.contrib.zoom.ZoomDrawingView;
import org.jhotdraw.standard.*;
import javax.swing.JPopupMenu;
import java.awt.*;
import java.awt.event.*;

/**
 * A SelectionTool, which recognizes double clicks and popup menu triggers.
 * If a double click or popup trigger is encountered a hook method is called,
 * which handles the event. This methods can be overriden in subclasse to 
 * provide customized behaviour. 
 * Popup menus must be registered with a Figure using the
 * setAttribute() method.  The key which associates a popup menu as an
 * attribute is FigureAttributeConstant.POPUP_MENU.
 *
 * @@author  Wolfram Kaiser <mrfloppy@@users.sourceforge.net>
 * @@version <$CURRENT_VERSION$>
 */
public class CustomSelectionTool extends SelectionTool {

	/**
	 * Create an instance of this SelectionTool for the given view
	 *
	 * @@param   editor    DrawingEditor for which the SelectionTool gets the active view
	 */
	public CustomSelectionTool(DrawingEditor editor) {
		super( editor );
	}
	
	/**
	 * MouseListener method for mouseDown events. If the popup trigger has been
	 * activated, then the appropriate hook method is called.
	 *
	 * @@param   e   MouseEvent which should be interpreted
	 * @@param   x   x coordinate of the MouseEvent
	 * @@param   y   y coordinate of the MouseEvent
	 */
	public void mouseDown(MouseEvent e, int x, int y) {
		setView((DrawingView)e.getSource());
		// isPopupTrigger() at mouseDown() is only notified at UNIX systems
		if (e.isPopupTrigger()) {
			handlePopupMenu(e, x, y);
		}
		else {
			super.mouseDown(e, x, y);
			handleMouseDown(e, x, y);
		}
	}
	
	/**
	 * MouseListener method for mouseDrag events. Usually, mouse drags are
	 * ignored for popup menus or double clicks.
	 *
	 * @@param   e   MouseEvent which should be interpreted
	 * @@param   x   x coordinate of the MouseEvent
	 * @@param   y   y coordinate of the MouseEvent
	 */
	public void mouseDrag(MouseEvent e, int x, int y) {
		if (!e.isPopupTrigger()) {
			super.mouseDrag(e, x, y);
		}
	}

	/** 
	 * MouseListener method for mouseUp events. Depending on the kind of event
	 * the appropriate hook method is called (popupMenuUp for popup trigger,
	 * doubleMouseClick for a double click, and mouseUp() and mouseClick() for
	 * normal mouse clicks).
	 *
	 * @@param   e   MouseEvent which should be interpreted
	 * @@param   x   x coordinate of the MouseEvent
	 * @@param   y   y coordinate of the MouseEvent
	 */
	public void mouseUp(MouseEvent e, int x, int y) {
		if (e.isPopupTrigger()) {
			handlePopupMenu(e, x, y);
			super.mouseUp(e, x, y);
		}
		else if (e.getClickCount() == 2) {
			super.mouseUp(e, x, y);
			handleMouseDoubleClick(e, x, y);
		}
		else {
			super.mouseUp(e, x, y);
			handleMouseUp(e, x, y);
			handleMouseClick(e, x, y);
		}
	}
	
	/**
	 * Hook method which can be overriden by subclasses to provide
	 * specialised behaviour in the event of a mouse down.
	 */
	protected void handleMouseDown(MouseEvent e, int x, int y) {
	}

		/**
	 * Hook method which can be overriden by subclasses to provide
	 * specialised behaviour in the event of a mouse up.
	 */
	protected void handleMouseUp(MouseEvent e, int x, int y) {
	}

	/**
	 * Hook method which can be overriden by subclasses to provide
	 * specialised behaviour in the event of a mouse click.
	 */
	protected void handleMouseClick(MouseEvent e, int x, int y) {
	}

	/**
	 * Hook method which can be overriden by subclasses to provide
	 * specialised behaviour in the event of a mouse double click.
	 */
	protected void handleMouseDoubleClick(MouseEvent e, int x, int y) {
	}

	/**
	 * Hook method which can be overriden by subclasses to provide
	 * specialised behaviour in the event of a popup trigger.
	 */
	protected void handlePopupMenu(MouseEvent e, int x, int y) {
		Figure figure = drawing().findFigure(e.getX(), e.getY());
		if (figure != null) {
			Object attribute = figure.getAttribute(FigureAttributeConstant.POPUP_MENU);
			if (attribute == null) {
				figure = drawing().findFigureInside(e.getX(), e.getY());
			}
			if (figure != null) {
				showPopupMenu(figure, e.getX(), e.getY(), e.getComponent());
			}
		}
	}

	/**
	 * This method displays a popup menu, if there is one
	 * registered with the Figure (the Figure's attributes are
	 * queried for FigureAttributeConstant.POPUP_MENU which is
	 * used to indicate an association of a popup menu with the
	 * Figure).
	 *
	 * @@param   figure      Figure for which a popup menu should be displayed
	 * @@param   x           x coordinate where the popup menu should be displayed
	 * @@param   y           y coordinate where the popup menu should be displayed
	 * @@param   comp        Component which invoked the popup menu
	 */
	protected void showPopupMenu(Figure figure, int x, int y, Component comp) {
		Object attribute = figure.getAttribute(FigureAttributeConstant.POPUP_MENU);
		if ((attribute != null) && (attribute instanceof JPopupMenu)) {
			JPopupMenu popup = (JPopupMenu)attribute;
			if (popup instanceof PopupMenuFigureSelection) {
				((PopupMenuFigureSelection)popup).setSelectedFigure(figure);
			}
			// Calculate position on physical screen based
			// on x,y coordinates
			Point newLocation;
			try {
				newLocation = comp.getLocationOnScreen();
			} catch (IllegalComponentStateException e) {
				// For some reason, the component
				// apparently isn't showing on the
				// screen (huh?). Never mind - don't
				// show the popup..
				return;
			}
			// If this is a ZoomDrawingView, we'll need to
			// compensate here too:
			if (comp instanceof ZoomDrawingView) {
				double scale = ((ZoomDrawingView) comp).getScale(); 
				x *= scale;
				y *= scale;
			}
			newLocation.translate(x,y);
			popup.setLocation(newLocation);
			popup.setInvoker(comp);
			popup.setVisible(true);
		}
	}
	
}
@


1.12
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@d26 3
a28 2
 * Popup menus must be registered with a Figure using the setAttribute() method.
 * The key which associates a popup menu as an attribute is Figure.POPUP_MENU.
d150 5
a154 3
	 * This method displays a popup menu, if there is one registered with the
	 * Figure (the Figure's attributes are queried for Figure.POPUP_MENU which
	 * is used to indicate an association of a popup menu with the Figure).
@


1.11
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d12 1
a12 1
package CH.ifa.draw.contrib;
d14 3
a16 3
import CH.ifa.draw.framework.*;
import CH.ifa.draw.contrib.zoom.ZoomDrawingView;
import CH.ifa.draw.standard.*;
@


1.10
log
@Fix for PopupMenu apprearing in wrong place
Also,
Compensate for ZoomDrawingView too when calculating proper PopupMenu position
as pr.
https://sourceforge.net/forum/forum.php?thread_id=843644&forum_id=39886
and bug [ 559381 ] Popup-Menu appears at bad location
@
text
@a32 1
	protected FigureAttributeConstant popupMenuAttribute;
a40 2
		popupMenuAttribute =
		    FigureAttributeConstant.getConstant(Figure.POPUP_MENU);
d138 1
a138 1
			Object attribute = figure.getAttribute(popupMenuAttribute);
d159 1
a159 1
		Object attribute = figure.getAttribute(popupMenuAttribute);
@


1.9
log
@Get rid of deprecated API calls to getAttribute() as pr.
https://sourceforge.net/forum/forum.php?thread_id=841454&forum_id=39886
@
text
@d15 1
d168 20
a187 3
			// calculate offsets for internal MDI frames
			Point newLocation = new Point(x, y);
			adjustOffsets(comp.getParent(), newLocation);
a193 13
	/**
	 * Internal MDI frames have offsets where a popup menu should be
	 * shown (in JDK 1.2).
	 * This method sums up iteratively all x and y offsets of all
	 * parent compontents until the top parent component is reached.
	 */
	private void adjustOffsets(Component comp, Point offsetPoint) {
		if (comp != null) {
			Point compLocation = comp.getLocation();
			offsetPoint.translate(compLocation.x, compLocation.y);
			adjustOffsets(comp.getParent(), offsetPoint);
		}
	}
@


1.8
log
@prepare for 5.4 release: various bug fixes
@
text
@d32 1
d41 2
d140 1
a140 1
			Object attribute = figure.getAttribute(Figure.POPUP_MENU);
d161 1
a161 1
		Object attribute = figure.getAttribute(Figure.POPUP_MENU);
d189 1
a189 1
}@


1.7
log
@after variou merges... (before 5.4 release)
@
text
@d28 1
a28 1
 * @@author  Wolfram Kaiser <mrfloppy@@sourceforge.net>
d89 1
d92 1
@


1.7.4.1
log
@1.  Tool now accepts DrawingViewMouseEvent as opposed to java.awt.MouseEvent and x,y ints.
2. compositeFigure now uses constrained mouse values throughout.
3. nested CreationTOol was calling drawing() before it was setting the view.  should lead to NPE.  this tool still seems broken
   i dont think its needed anymore?
4. bug in splitConnectionTool mouse down. setEndConnector(findConnector(ex, ex, c)); needs to be ex and ey
5. made some of StandardDrawingViews inner class listners protected.
@
text
@d18 1
a18 1

d50 2
a51 3
	public void mouseDown(DrawingViewMouseEvent dvme) {
		setView( dvme.getDrawingView() );

d53 2
a54 2
		if (dvme.getMouseEvent().isPopupTrigger()) {
			handlePopupMenu( dvme );
d57 2
a58 2
			super.mouseDown(dvme);
			handleMouseDown(dvme);
d70 3
a72 3
	public void mouseDrag(DrawingViewMouseEvent dvme) {
		if (!dvme.getMouseEvent().isPopupTrigger()) {
			super.mouseDrag(dvme);
d86 3
a88 3
	public void mouseUp(DrawingViewMouseEvent dvme) {
		if (dvme.getMouseEvent().isPopupTrigger()) {
			handlePopupMenu(dvme);
d90 2
a91 2
		else if (dvme.getMouseEvent().getClickCount() == 2) {
			handleMouseDoubleClick(dvme);
d94 3
a96 3
			handleMouseUp(dvme);
			handleMouseClick(dvme);
			super.mouseUp(dvme);			
d104 1
a104 1
	protected void handleMouseDown(DrawingViewMouseEvent dvme) {
d111 1
a111 1
	protected void handleMouseUp(DrawingViewMouseEvent dvme) {
d118 1
a118 1
	protected void handleMouseClick(DrawingViewMouseEvent dvme) {
d125 1
a125 1
	protected void handleMouseDoubleClick(DrawingViewMouseEvent dvme) {
d132 2
a133 2
	protected void handlePopupMenu(DrawingViewMouseEvent dvme) {
		Figure figure = drawing().findFigure(dvme.getMouseEvent().getX(), dvme.getMouseEvent().getY());
d137 1
a137 1
				figure = drawing().findFigureInside(dvme.getMouseEvent().getX(), dvme.getMouseEvent().getY());
d140 1
a140 1
				showPopupMenu(figure, dvme.getMouseEvent().getX(), dvme.getMouseEvent().getY(), dvme.getMouseEvent().getComponent());
@


1.6
log
@merge dnd (before 5.3)
@
text
@a15 2
import CH.ifa.draw.figures.*;
import CH.ifa.draw.util.*;
d28 1
a28 1
 * @@author  Wolfram Kaiser
d51 1
d153 1
a153 1
	 * @@param   component   Component which invoked the popup menu
@


1.5
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d38 1
a38 1
	 * @@param   view    DrawingView for which the SelectionTool operates
d40 2
a41 2
	public CustomSelectionTool(DrawingView view) {
		super(view);
@


1.4
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d2 1
a2 1
 * @@(#)CustomSelectionTool.java 5.2
d4 6
a13 3
import javax.swing.JPopupMenu;
import java.awt.*;
import java.awt.event.*;
d18 3
d31 1
a31 1
 * @@version JHotDraw 5.2    31.08.1999
d35 5
a39 5
    /**
     * Create an instance of this SelectionTool for the given view
     *
     * @@param   view    DrawingView for which the SelectionTool operates
     */
d55 1
a55 1
		    handlePopupMenu(e, x, y);
d77 1
a77 1
    /** 
d86 1
a86 1
     */
d89 1
a89 1
		    handlePopupMenu(e, x, y);
d135 8
a142 8
        if (figure != null) {
            Object attribute = figure.getAttribute(Figure.POPUP_MENU);
            if (attribute == null) {
                figure = drawing().findFigureInside(e.getX(), e.getY());
            }
        	if (figure != null) {
            	showPopupMenu(figure, e.getX(), e.getY(), e.getComponent());
            }
d157 12
a168 12
        Object attribute = figure.getAttribute(Figure.POPUP_MENU);
        if ((attribute != null) && (attribute instanceof JPopupMenu)) {
    	    JPopupMenu popup = (JPopupMenu)attribute;
    	    if (popup instanceof PopupMenuFigureSelection) {
    	        ((PopupMenuFigureSelection)popup).setSelectedFigure(figure);
    	    }
    	    // calculate offsets for internal MDI frames
    	    Point newLocation = new Point(x, y);
    	    adjustOffsets(comp.getParent(), newLocation);
    		popup.setLocation(newLocation);
    		popup.setInvoker(comp);
    		popup.setVisible(true);
@


1.3
log
@before merge for version 5.3 (dnd, undo,...)
@
text
@d8 1
a8 1
import javax.swing.*;
@


1.2
log
@- SelectionFigure is now an interface. The default implementation CH.ifa.draw.standard.StandardSelectionFigure
- A FigureSelectionListener interface has been introduced in CH.ifa.draw.framework. An DrawingEditor
  is now a FigureSelectionListener and the signature for all selectionChanged() methods has been
  changed to figureSelectionChanged().
- CH.ifa.draw.util.Command is now an interface. A AbstractCommand can be found in CH.ifa.draw.standard.
- All commands used to have a fView field. This has been moved to CH.ifa.draw.standard.AbstactCommand
- A CH.ifa.draw.standard.StandardDrawingView has now a paintComponents() method instead of a paint()
  and update() method. This allows the CH.ifa.draw.util.FloatingTextField to be a javax.swing.JTextField
  instead of a java.awt.TextField.
- CH.ifa.draw.figures.AbstractLineDecorator has been missing
- DrawApplet, DrawApplication and derived classes are now programmed towards the DrawingView interface
  instead of using StandardDrawingView. That leads to occasional cast when some additional StandardDrawingView
  functionality is required in some specialized cases. Applications that were derived from DrawApplication
  and used to override the createContents() methods should now return a DrawingView as well
@
text
@d8 1
a8 1
import javax.swing.JPopupMenu;
@


1.1
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d8 1
a8 1
import javax.swing.*;
@

