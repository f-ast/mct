head	1.3;
access;
symbols
	jhotdraw60b1-release:1.3
	package_rename:1.3
	directory_rename:1.2
	reorg_6x_split_initial:1.2
	MVC_PHASE1:1.2.0.10
	NEW_ATTRIBUTES:1.2.0.8
	DNOYEB1_ALPHA-2:1.2
	release_JHD54b1:1.2
	BUGFIX_670992:1.2.0.6
	DNOYEB1_ALPHA-1:1.2
	dnoyeb1:1.2.0.4
	repack:1.2.0.2
	Root_repack:1.2
	Before_FigureVisitor:1.2;
locks; strict;
comment	@# @;


1.3
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.04.22.39.17;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.20.19.57.58;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 *  @@(#)CommandMenu.java
 *
 *  Project:		JHotdraw - a GUI framework for technical drawings
 *  http://www.jhotdraw.org
 *  http://jhotdraw.sourceforge.net
 *  Copyright:	© by the original author(s) and all contributors
 *  License:		Lesser GNU Public License (LGPL)
 *  http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.contrib;

import javax.swing.JCheckBoxMenuItem;
import org.jhotdraw.util.Command;
import javax.swing.Icon;

/**
 * CommandCheckBoxMenuItem implements a command that can be added to a menu
 * as a checkbox menu item
 *
 * @@author Eduardo Francos - InContext
 * @@version <$CURRENT_VERSION$>
 */

public class CommandCheckBoxMenuItem extends JCheckBoxMenuItem
	   implements CommandHolder
{
	Command fCommand;

	/**
	 * Creates an initially unselected check box menu item
	 * with the specified command
	 */
	public CommandCheckBoxMenuItem(Command command) {
		super(command.name());
		setCommand(command);
	}

	/**
	 * Creates an initially unselected check box menu item with an icon and
	 * the specified command.
	 *
	 * @@param icon the icon of the CheckBoxMenuItem.
	 */
	public CommandCheckBoxMenuItem(Command command, Icon icon) {
		super(command.name(), icon);
		setCommand(command);
	}

	/**
	 * Creates a check box menu item with the specified command and selection state.
	 *
	 * @@param command the command to be executed upon menu selection
	 * @@param b the selected state of the check box menu item
	 */
	public CommandCheckBoxMenuItem(Command command, boolean b) {
		super(command.name(), b);
		setCommand(command);
	}

	/**
	 * Creates a check box menu item with the specified text, icon, and selection state.
	 *
	 * @@param command the command to be executed upon menu selection
	 * @@param icon the icon of the check box menu item
	 * @@param b the selected state of the check box menu item
	 */
	public CommandCheckBoxMenuItem(Command command, Icon icon, boolean b) {
		super(command.name(), icon, b);
		setCommand(command);
	}


	/**
	 * Gets the command attribute of the CommandMenuItem object
	 *
	 * @@return   The command value
	 */
	public Command getCommand() {
		return fCommand;
	}


	/**
	 * Sets the command attribute of the CommandMenuItem object
	 *
	 * @@param newCommand  The new command value
	 */
	public void setCommand(Command newCommand) {
		fCommand = newCommand;
	}

}@


1.2
log
@after variou merges... (before 5.4 release)
@
text
@d11 1
a11 1
package CH.ifa.draw.contrib;
d14 1
a14 1
import CH.ifa.draw.util.Command;
@


1.1
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@d22 1
a22 1
 * @@version 1.0
d53 1
a53 1
	 * @@param text the text of the check box menu item.
d64 1
a64 1
	 * @@param text the text of the check box menu item
@

