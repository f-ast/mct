head	1.5;
access;
symbols
	jhotdraw60b1-release:1.5
	package_rename:1.5
	directory_rename:1.4
	reorg_6x_split_initial:1.4
	MVC_PHASE1:1.4.0.10
	NEW_ATTRIBUTES:1.4.0.8
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.1.1.1
	JHotDraw_5-1_initial:1.1.1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.04.22.39.17;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.5
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)DiamondFigure.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.contrib;

import org.jhotdraw.framework.*;
import org.jhotdraw.figures.*;
import java.awt.*;

/**
 * A diamond with vertices at the midpoints of its enclosing rectangle
 *
 * @@author Doug Lea  (dl at gee, Tue Feb 25 17:39:44 1997)
 * @@version <$CURRENT_VERSION$>
 */
public  class DiamondFigure extends RectangleFigure {

	public DiamondFigure() {
		super(new Point(0,0), new Point(0,0));
	}

	public DiamondFigure(Point origin, Point corner) {
		super(origin,corner);
	}

	/**
	 * @@return the polygon describing the diamond
	 **/
	protected Polygon getPolygon() {
		Rectangle r = displayBox();
		Polygon p = new Polygon();
		p.addPoint(r.x, r.y+r.height/2);
		p.addPoint(r.x+r.width/2, r.y);
		p.addPoint(r.x+r.width, r.y+r.height/2);
		p.addPoint(r.x+r.width/2, r.y+r.height);
		return p;
	}

	public void draw(Graphics g) {
		Polygon p = getPolygon();
		g.setColor(getFillColor());
		g.fillPolygon(p);
		g.setColor(getFrameColor());
		g.drawPolygon(p);
	}

	public Insets connectionInsets() {
		Rectangle r = displayBox();
		return new Insets(r.height/2, r.width/2, r.height/2, r.width/2);
	}

	public boolean containsPoint(int x, int y) {
		return getPolygon().contains(x, y);
	}

	public Point chop(Point p) {
		return PolygonFigure.chop(getPolygon(), p);
	}

	public Connector connectorAt(int x, int y) {
		return new ChopDiamondConnector(this);
	}  
}
@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@d12 1
a12 1
package CH.ifa.draw.contrib;
d14 2
a15 2
import CH.ifa.draw.framework.*;
import CH.ifa.draw.figures.*;
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@a14 2
import CH.ifa.draw.util.*;
import CH.ifa.draw.standard.*;
a16 2
import java.util.*;
import java.io.IOException;
@


1.2
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d2 1
a2 2
 * Hacked together by Doug lea
 * Tue Feb 25 17:39:44 1997  Doug Lea  (dl at gee)
d4 6
a13 3
import java.awt.*;
import java.util.*;
import java.io.IOException;
d18 3
d24 3
d30 45
a74 43
  public DiamondFigure() {
    super(new Point(0,0), new Point(0,0));
  }

  public DiamondFigure(Point origin, Point corner) {
    super(origin,corner);
  }

  /** Return the polygon describing the diamond **/
  protected Polygon polygon() {
    Rectangle r = displayBox();
    Polygon p = new Polygon();
    p.addPoint(r.x, r.y+r.height/2);
    p.addPoint(r.x+r.width/2, r.y);
    p.addPoint(r.x+r.width, r.y+r.height/2);
    p.addPoint(r.x+r.width/2, r.y+r.height);
    return p;
  }

  public void draw(Graphics g) {
    Polygon p = polygon();
    g.setColor(getFillColor());
    g.fillPolygon(p);
    g.setColor(getFrameColor());
    g.drawPolygon(p);
  }

  public Insets connectionInsets() {
    Rectangle r = displayBox();
    return new Insets(r.height/2, r.width/2, r.height/2, r.width/2);
  }

  public boolean containsPoint(int x, int y) {
    return polygon().contains(x, y);
  }

  public Point chop(Point p) {
    return PolygonFigure.chop(polygon(), p);
  }

  public Connector connectorAt(int x, int y) {
    return new ChopDiamondConnector(this);
  }  
@


1.1
log
@Initial revision
@
text
@d58 1
a58 1
  /*public Point chop(Point p) {
d60 1
a60 1
  }*/
d62 3
@


1.1.1.1
log
@
Initial revision.
@
text
@@
