head	1.1;
access;
symbols
	jhotdraw60b1-release:1.1
	package_rename:1.1
	directory_rename:1.1
	reorg_6x_split_initial:1.1
	DNOYEB1_ALPHA-2:1.1.2.1
	DNOYEB1_ALPHA-1:1.1.2.1
	dnoyeb1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2003.01.16.06.03.53;	author dnoyeb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.01.16.06.03.53;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file DecoratorTool.java was initially added on branch dnoyeb1.
@
text
@@


1.1.2.1
log
@New FigureDecorator using decorator pattern now installed.
A few other minor cleanups.
@
text
@a0 197
/*
 * DecoratorTool.java
 *
 * Created on January 15, 2003, 6:52 PM
 */

package CH.ifa.draw.contrib;
import CH.ifa.draw.framework.*;
import java.awt.event.*;
import java.util.List;
import CH.ifa.draw.util.*;
import CH.ifa.draw.standard.*;
import CH.ifa.draw.figures.*;


import java.awt.event.InputEvent;

/**
 *
 * @@author  Administrator
 */
public class DecoratorTool extends CH.ifa.draw.standard.ActionTool {
	
	/**
	 * the prototypical decoration that is used to create new figures.
	 */
	private FigureDecorator  fPrototype;
	
	
	/** Creates a new instance of DecoratorTool */
	public DecoratorTool(DrawingEditor newDrawingEditor) {
		this(newDrawingEditor,new BorderFigureDecorator());
	}
	
	public DecoratorTool(DrawingEditor newDrawingEditor,FigureDecorator decorator) {
		super(newDrawingEditor);
		fPrototype = decorator;
	}	
	/**
	 * Add the touched figure to the selection of an invoke action.
	 * Overrides ActionTool's mouseDown to allow for peeling the border
	 * if there is one already.
	 * This is done by CTRLing the click
	 * @@see #action
	 */
	public void mouseDown(DrawingViewMouseEvent dvme) {
		// use event coordinates to supress any kind of
		// transformations like constraining points to a grid
		setAnchorX( dvme.getX() );
		setAnchorY( dvme.getY() );		
		setView( dvme.getDrawingView() );
		// if not CTRLed then proceed normally
		if ((dvme.getMouseEvent().getModifiers() & InputEvent.CTRL_MASK) == 0) {
			super.mouseDown(dvme);
		}
		else {
			Figure target = drawing().findFigure( getAnchorX(), getAnchorY());
			if (target != null) {
				view().addToSelection(target);
				reverseAction(target);
			}
		}
	}
	public FigureDecorator createDecoration(){
		return (FigureDecorator)fPrototype.clone();
	}
	/**
	* Decorates the clicked figure with a border.
	*/
	public void action(Figure figure) {
		setUndoActivity(createUndoActivity());
		
		List l = CollectionsFactory.current().createList();
		l.add(figure);
		getUndoActivity().setAffectedFigures(new FigureEnumerator(l));
		((DecoratorTool.UndoActivity)getUndoActivity()).setFigureDecorator( createDecoration() );
		((DecoratorTool.UndoActivity)getUndoActivity()).redo();
	}

	/**
	* Peels off the border from the clicked figure.
	*/
	public void reverseAction(Figure figure) {
		setUndoActivity(new ReverseUndoActivity(view()));
		
		List l = CollectionsFactory.current().createList();
		l.add(figure);
		getUndoActivity().setAffectedFigures(new FigureEnumerator(l));
		
		java.util.Iterator it = figure.figureDecorators();
		FigureDecorator fd;
		//get topmost iterator (last added)
		while(it.hasNext()){
			fd = (FigureDecorator)it.next();
			if(it.hasNext() == false) {
				((ReverseUndoActivity)getUndoActivity()).setFigureDecorator( fd );
				((ReverseUndoActivity)getUndoActivity()).redo();			
				return;
			}
		}
		setUndoActivity(null);
	}	
	
	/**
	 * Factory method for undo activity
	 */
	protected Undoable createUndoActivity() {
		return new DecoratorTool.UndoActivity(view());
	}

	public static class UndoActivity extends UndoableAdapter {
		private FigureDecorator fd;
		public UndoActivity(DrawingView newDrawingView) {
			super(newDrawingView);
			setUndoable(true);
			setRedoable(true);
			this.fd = fd;
		}
		public void setFigureDecorator(FigureDecorator fd){
			this.fd = fd;
		}
		public FigureDecorator getFigureDecorator(){
			return fd;
		}

		public boolean undo() {
			if (!super.undo()) {
				return false;
			}
			getDrawingView().clearSelection();
			FigureEnumeration fe = getAffectedFigures();
			if(!fe.hasNextFigure())
				return false;
			Figure f = fe.nextFigure();
			f.removeFigureDecorator( getFigureDecorator() );
			getDrawingView().drawing().update();//where is proper place for this???dnoyeb???
			return true;
		}

		public boolean redo() {
			if (!isRedoable()) {
				return false;
			}
			getDrawingView().clearSelection();
			FigureEnumeration fe = getAffectedFigures();
			if(!fe.hasNextFigure())
				return false;
			Figure f = fe.nextFigure();
			f.addFigureDecorator( getFigureDecorator() );
			getDrawingView().drawing().update();//where is proper place for this???dnoyeb???
			return true;
		}
	}	
	public static class ReverseUndoActivity extends UndoableAdapter {
		private FigureDecorator fd;
		public ReverseUndoActivity(DrawingView newDrawingView) {
			super(newDrawingView);
			setUndoable(true);
			setRedoable(true);
			this.fd = fd;
		}
		public void setFigureDecorator(FigureDecorator fd){
			this.fd = fd;
		}
		public FigureDecorator getFigureDecorator(){
			return fd;
		}

		public boolean undo() {
			if (!super.undo()) {
				return false;
			}
			getDrawingView().clearSelection();
			FigureEnumeration fe = getAffectedFigures();
			if(!fe.hasNextFigure())
				return false;
			Figure f = fe.nextFigure();
			f.addFigureDecorator( getFigureDecorator() );
			getDrawingView().drawing().update();//where is proper place for this???dnoyeb???			
			return true;
		}

		public boolean redo() {
			if (!isRedoable()) {
				return false;
			}
			getDrawingView().clearSelection();
			FigureEnumeration fe = getAffectedFigures();
			if(!fe.hasNextFigure())
				return false;
			Figure f = fe.nextFigure();
			f.removeFigureDecorator( getFigureDecorator() );
			getDrawingView().drawing().update();//where is proper place for this???dnoyeb???			
			return true;
		}
	}	
}
@

