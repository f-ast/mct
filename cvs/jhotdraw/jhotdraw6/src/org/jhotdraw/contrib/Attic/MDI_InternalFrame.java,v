head	1.10;
access;
symbols
	jhotdraw60b1-release:1.10
	package_rename:1.10
	directory_rename:1.10
	reorg_6x_split_initial:1.10
	Before_FigureVisitor:1.7
	JHotDraw_5-3:1.6
	JHotDraw_5-2_merged:1.1;
locks; strict;
comment	@# @;


1.10
date	2003.11.09.21.18.45;	author mrfloppy;	state dead;
branches;
next	1.9;

1.9
date	2003.09.23.06.38.57;	author mtnygard;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.27.01.14.00;	author mrfloppy;	state dead;
branches;
next	1.7;

1.7
date	2002.08.04.22.39.17;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.25.12;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.29.13.42.13;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.10
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@/*
 * @@(#)MDI_InternalFrame.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.contrib;

import CH.ifa.draw.framework.*;
import java.awt.*;
import javax.swing.JInternalFrame;

/**
 * This class provides support for JHotDraw applications with multiple
 * document interfaces.
 *
 * @@author  Wolfram Kaiser <mrfloppy@@sourceforge.net>
 * @@version <$CURRENT_VERSION$>
 */
public class MDI_InternalFrame extends JInternalFrame {
	private DrawingView internalDrawingView;
	
	/**
	 * Create a new internal frame
	 */
	public MDI_InternalFrame() {
		super();
	}

	/**
	 * Create a new internal frame with a given name
	 *
	 * @@param   title       name of the internal frame
	 */
	public MDI_InternalFrame(String title) {
		super(title);
	}

	/**
	 * Create a new internal frame with a given name
	 *
	 * @@param   title       name of the internal frame
	 * @@param   resizable   true, if the frame is resizable
	 */
	public MDI_InternalFrame(String title, boolean resizable) {
		super(title, resizable);
	}

	/**
	 * Create a new internal frame with a given name
	 *
	 * @@param   title       name of the internal frame
	 * @@param   resizable   true, if the frame is resizable
	 * @@param   closable    true, if the frame is closable
	 */
	public MDI_InternalFrame(String title, boolean resizable, boolean closable) {
		super(title, resizable, closable);
	}

	/**
	 * Create a new internal frame with a given name
	 *
	 * @@param   title       name of the internal frame
	 * @@param   resizable   true, if the frame is resizable
	 * @@param   closable    true, if the frame is closable
	 * @@param   maximizable true, if the frame is maximizable
	 */
	public MDI_InternalFrame(String title, boolean resizable, boolean closable, boolean maximizable) {
		super(title, resizable, closable, maximizable);
	}

	/**
	 * Create a new internal frame with a given name
	 *
	 * @@param   title       name of the internal frame
	 * @@param   resizable   true, if the frame is resizable
	 * @@param   closable    true, if the frame is closable
	 * @@param   maximizable true, if the frame is maximizable
	 * @@param   iconifiable ture, if the frame is iconifiable
	 */
	public MDI_InternalFrame(String title, boolean resizable, boolean closable, boolean maximizable, boolean iconifiable) {
		super(title, resizable, closable, maximizable, iconifiable);
	}

	/**
	 * Set the drawing view which represents the internal frame
	 *
	 * @@param   newInternalDrawingView  drawing view for this internal frame
	 */
	public void setDrawingView(DrawingView newInternalDrawingView) {
		internalDrawingView = newInternalDrawingView;
	}

	/**
	 * Get the drawing view which represents the internal frame
	 *
	 * @@return  drawing view for this internal frame
	 */
	public DrawingView getDrawingView() {
		return internalDrawingView;
	}

	/**
	 * Set the drawing which is represented in the internal frame
	 *
	 * @@param	newInternalDrawing	drawing for the internal frame
	 */
	public void setDrawing(Drawing newInternalDrawing) {
		getDrawingView().setDrawing(newInternalDrawing);
	}

	/**
	 * Get the drawing which is represented in the internal frame
	 *
	 * @@return	drawing for the internal frame
	 */
	public Drawing getDrawing() {
		return getDrawingView().drawing();
	}

	/**
	 * Searches the DrawingView in the children's component hierarchy.
	 *
	 * @@param	newDrawingView	DrawingView to be searched
	 * @@param	container		Container which is searched
	 */
	protected DrawingView findDrawingView(DrawingView newDrawingView, Container container) {
		DrawingView oldDrawingView = null;
		Component[] components = container.getComponents();
		for (int i = 0; i < components.length; i++) {
			if (components[i] instanceof DrawingView) {
				return (DrawingView)components[i];
			}
			else if (components[i] instanceof Container) {
				oldDrawingView = findDrawingView(newDrawingView, (Container)components[i]);
				if (oldDrawingView != null) {
					return oldDrawingView;
				}
			}
		}
		return oldDrawingView;
	}
}@


1.9
log
@All test cases now pass!
@
text
@@


1.8
log
@no message
@
text
@@


1.7
log
@after variou merges... (before 5.4 release)
@
text
@@


1.6
log
@merge dnd (before 5.3)
@
text
@a14 1
import CH.ifa.draw.standard.*;
d22 1
a22 1
 * @@author  Wolfram Kaiser
d102 1
a102 1
	 * @@param   newInternalDrawingView  drawing view for this internal frame
@


1.5
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@a127 23
	 * Replace an existing drawing view with a new one. A JHotDraw application can
	 * have only one DrawingView active at a time. Therefore, the currently active
	 * internal frame gets the active DrawingView after its Drawing view has
	 * been backed up for later restorage.
	 *
	 * @@parame	newDrawingView	DrawingView which should replace the current one
	 */
	public DrawingView replaceDrawingView(DrawingView newDrawingView) {
		DrawingView oldDrawingView = findDrawingView(newDrawingView, getContentPane());
		if (oldDrawingView != null) {
			Container parent = ((Container)oldDrawingView).getParent();
			parent.remove((Component)oldDrawingView);
			parent.add((Component)newDrawingView);
			setDrawingView(newDrawingView);
			return oldDrawingView;
		}
		else {
			//DrawingView not found
			return null;
		}
	}

	/**
@


1.4
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d2 1
a2 1
 * @@(#)MDI_InternalFrame.java 5.2
d4 6
d24 1
a24 1
 * @@version JHotDraw 5.2    31.7.1999
d28 1
a28 1
    
d127 8
a134 8
    /**
     * Replace an existing drawing view with a new one. A JHotDraw application can
     * have only one DrawingView active at a time. Therefore, the currently active
     * internal frame gets the active DrawingView after its Drawing view has
     * been backed up for later restorage.
     *
     * @@parame	newDrawingView	DrawingView which should replace the current one
     */
d150 6
a155 6
    /**
     * Searches the DrawingView in the children's component hierarchy.
     *
     * @@param	newDrawingView	DrawingView to be searched
     * @@param	container		Container which is searched
     */
@


1.3
log
@before merge for version 5.3 (dnd, undo,...)
@
text
@a7 2
import java.awt.*;
import javax.swing.*;
d10 2
d129 2
a130 2
	public StandardDrawingView replaceDrawingView(StandardDrawingView newDrawingView) {
		StandardDrawingView oldDrawingView = findDrawingView(newDrawingView, getContentPane());
d132 3
a134 3
			Container parent = ((StandardDrawingView)oldDrawingView).getParent();
			parent.remove(oldDrawingView);
			parent.add(newDrawingView);
d150 2
a151 2
	protected StandardDrawingView findDrawingView(StandardDrawingView newDrawingView, Container container) {
		StandardDrawingView oldDrawingView = null;
d155 1
a155 1
				return (StandardDrawingView)components[i];
@


1.2
log
@- SelectionFigure is now an interface. The default implementation CH.ifa.draw.standard.StandardSelectionFigure
- A FigureSelectionListener interface has been introduced in CH.ifa.draw.framework. An DrawingEditor
  is now a FigureSelectionListener and the signature for all selectionChanged() methods has been
  changed to figureSelectionChanged().
- CH.ifa.draw.util.Command is now an interface. A AbstractCommand can be found in CH.ifa.draw.standard.
- All commands used to have a fView field. This has been moved to CH.ifa.draw.standard.AbstactCommand
- A CH.ifa.draw.standard.StandardDrawingView has now a paintComponents() method instead of a paint()
  and update() method. This allows the CH.ifa.draw.util.FloatingTextField to be a javax.swing.JTextField
  instead of a java.awt.TextField.
- CH.ifa.draw.figures.AbstractLineDecorator has been missing
- DrawApplet, DrawApplication and derived classes are now programmed towards the DrawingView interface
  instead of using StandardDrawingView. That leads to occasional cast when some additional StandardDrawingView
  functionality is required in some specialized cases. Applications that were derived from DrawApplication
  and used to override the createContents() methods should now return a DrawingView as well
@
text
@d8 2
a11 2
import java.awt.*;
import javax.swing.JInternalFrame;
d129 2
a130 2
	public DrawingView replaceDrawingView(DrawingView newDrawingView) {
		DrawingView oldDrawingView = findDrawingView(newDrawingView, getContentPane());
d132 3
a134 3
			Container parent = ((Container)oldDrawingView).getParent();
			parent.remove((Component)oldDrawingView);
			parent.add((Component)newDrawingView);
d150 2
a151 2
	protected DrawingView findDrawingView(DrawingView newDrawingView, Container container) {
		DrawingView oldDrawingView = null;
d155 1
a155 1
				return (DrawingView)components[i];
@


1.1
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@a7 2
import java.awt.*;
import javax.swing.*;
d10 2
d129 2
a130 2
	public StandardDrawingView replaceDrawingView(StandardDrawingView newDrawingView) {
		StandardDrawingView oldDrawingView = findDrawingView(newDrawingView, getContentPane());
d132 3
a134 3
			Container parent = ((StandardDrawingView)oldDrawingView).getParent();
			parent.remove(oldDrawingView);
			parent.add(newDrawingView);
d150 2
a151 2
	protected StandardDrawingView findDrawingView(StandardDrawingView newDrawingView, Container container) {
		StandardDrawingView oldDrawingView = null;
d155 1
a155 1
				return (StandardDrawingView)components[i];
@

