head	1.5;
access;
symbols
	jhotdraw60b1-release:1.5
	package_rename:1.5
	directory_rename:1.4
	reorg_6x_split_initial:1.4
	MVC_PHASE1:1.3.0.2
	NEW_ATTRIBUTES:1.2.0.2
	DNOYEB1_ALPHA-2:1.1
	release_JHD54b1:1.1
	BUGFIX_670992:1.1.0.6
	DNOYEB1_ALPHA-1:1.1
	dnoyeb1:1.1.0.4
	repack:1.1.0.2
	Root_repack:1.1
	Before_FigureVisitor:1.1;
locks; strict;
comment	@# @;


1.5
date	2004.01.09.22.53.42;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.08.15.41.22;	author ricardo_padilha;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.22.23.58.33;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.04.05.30.12;	author ricardo_padilha;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.20.19.57.58;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.5
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)TextHolderContentProducer.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.contrib.html;

import java.io.IOException;

import java.io.Serializable;
import org.jhotdraw.util.StorableInput;
import org.jhotdraw.util.StorableOutput;
import org.jhotdraw.standard.TextHolder;

/**
 * TextAreaFigureContentProducer produces text contents from an existing
 * TextHolder figure<br>
 * It can either be specific if set for a specific figure, or generic, encoding
 * any color passed to the getContents method.<br>
 * The main usage of this producer is to embed a "master" or "shared" drawing
 * figure into other figures so that updating the master figure automatically
 * changes all dependent figures as well. Kind of a hot text snippet if you like<br>
 *
 * @@author  Eduardo Francos - InContext
 * @@created 30 avril 2002
 * @@version <$CURRENT_VERSION$>
 */
public class TextHolderContentProducer extends AbstractContentProducer
		 implements Serializable {

	private TextHolder myTextHolder;

	/**
	 * Constructor for the TextAreaFigureContentProducer object
	 */
	public TextHolderContentProducer() { }

	/**
	 *Constructor for the TextAreaFigureContentProducer object
	 *
	 * @@param figure  Description of the Parameter
	 */
	public TextHolderContentProducer(TextHolder figure) {
		setTextHolder(figure);
	}

	/**
	 * Gets the text from the text figure
	 *
	 * @@param context       Description of the Parameter
	 * @@param ctxAttrName   Description of the Parameter
	 * @@param ctxAttrValue  Description of the Parameter
	 * @@return              The content value
	 */
	public Object getContent(ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
		// if we have our own figure then use it
		// otherwise use the one supplied
		TextHolder figure = (getTextHolder() != null) ? getTextHolder() : (TextHolder)ctxAttrValue;
		// return the areas text
		return figure.getText();
	}

	/**
	 * Writes the storable
	 *
	 * @@param dw  the storable output
	 */
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeStorable(getTextHolder().getRepresentingFigure());
	}

	/**
	 * Writes the storable
	 *
	 * @@param dr               the storable input
	 * @@exception IOException  thrown by called methods
	 */
	public void read(StorableInput dr) throws IOException {
		super.read(dr);
		setTextHolder((TextHolder)dr.readStorable());
	}

	protected TextHolder getTextHolder() {
		return myTextHolder;
	}

	public void setTextHolder(TextHolder newFigure) {
		myTextHolder = newFigure;
	}
}
@


1.4
log
@Refactoring of Cursor:
- java.awt.Cursor (class) has been sistematically replaced with CH.ifa.draw.contrib.framework.Cursor (interface)
- a new default implementation of Cursor (interface) has been added: CH.ifa.draw.contrib.standard.AWTCursor
@
text
@d11 1
a11 1
package CH.ifa.draw.contrib.html;
d16 3
a18 3
import CH.ifa.draw.util.StorableInput;
import CH.ifa.draw.util.StorableOutput;
import CH.ifa.draw.standard.TextHolder;
@


1.3
log
@no message
@
text
@a18 1
import CH.ifa.draw.framework.Figure;
@


1.2
log
@Removed unused imports and local variables.
@
text
@d2 1
a2 1
 *  @@(#)TextAreaFigure.java
d4 6
a9 6
 *  Project:		JHotdraw - a GUI framework for technical drawings
 *  http://www.jhotdraw.org
 *  http://jhotdraw.sourceforge.net
 *  Copyright:	© by the original author(s) and all contributors
 *  License:		Lesser GNU Public License (LGPL)
 *  http://www.opensource.org/licenses/lgpl-license.html
d30 3
a32 3
 * @@author    Eduardo Francos - InContext
 * @@created   30 avril 2002
 * @@version   1.0
a33 1

a35 1
	TextHolder fFigure;
d37 1
d39 3
a41 1
	/**Constructor for the TextAreaFigureContentProducer object */
a43 1

d50 1
a50 1
		fFigure = figure;
a52 1

d64 1
a64 1
		TextHolder figure = (fFigure != null) ? fFigure : (TextHolder)ctxAttrValue;
a68 1

d76 1
a76 1
		dw.writeStorable((Figure)fFigure);
a78 1

d85 1
a85 2
	public void read(StorableInput dr)
		throws IOException {
d87 9
a95 1
		fFigure = (TextHolder)dr.readStorable();
@


1.1
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@a15 2
import CH.ifa.draw.contrib.TextAreaFigure;
import CH.ifa.draw.util.Storable;
@

