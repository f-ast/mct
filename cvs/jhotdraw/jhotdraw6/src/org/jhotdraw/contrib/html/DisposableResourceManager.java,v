head	1.3;
access;
symbols
	jhotdraw60b1-release:1.3
	package_rename:1.3
	directory_rename:1.2
	reorg_6x_split_initial:1.2
	MVC_PHASE1:1.2.0.2
	NEW_ATTRIBUTES:1.1.0.8
	DNOYEB1_ALPHA-2:1.1
	release_JHD54b1:1.1
	BUGFIX_670992:1.1.0.6
	DNOYEB1_ALPHA-1:1.1
	dnoyeb1:1.1.0.4
	repack:1.1.0.2
	Root_repack:1.1
	Before_FigureVisitor:1.1;
locks; strict;
comment	@# @;


1.3
date	2004.01.09.22.53.42;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.22.23.58.33;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.20.19.57.58;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)DisposableResourceManager.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.contrib.html;

import java.util.Iterator;

/**
 * DisposableResourceManager defines the interface for managers of disposable
 * resources.<br>
 * A DisposableResourceManager implements a strategy for efficient disposal
 * of seldom used resources.
 *
 * @@author  Eduardo Francos - InContext
 * @@created 2 mai 2002
 * @@version <$CURRENT_VERSION$>
 */
public interface DisposableResourceManager {

	/**
	 * Registers a resource with the manager so as to be disposed
	 *
	 * @@param resource  the resource
	 */
	public void registerResource(DisposableResourceHolder resource);

	/**
	 * Unregisters a resource so it is not automatically GCed.<br>
	 *
	 * @@param resource  the resource
	 */
	public void unregisterResource(DisposableResourceHolder resource);

	/**
	 * Returns an iterator on the managed resources
	 *
	 * @@return   The resources iterator
	 */
	public Iterator getResources();

	/**
	 * True if the resource is registered with this manager
	 *
	 * @@param resource  The resource
	 * @@return          True if the resource is registered with this manager
	 */
	public boolean managesResource(DisposableResourceHolder resource);

	/**
	 * Activates the strategy which starts disposing of resources as fitted
	 *
	 * @@exception ResourceManagerNotSetException  Description of the Exception
	 */
	public void startDisposing() throws ResourceManagerNotSetException;

	/**
	 * Deactivates the strategy that stops automatic disposal of resource.<br>
	 * The millis parameters specifies in milliseconds the time to wait for
	 * the disposal to stop. After this time the method returns whether the
	 * disposal was stopped or not, but the desactivation request remains active.
	 *
	 * @@param millis  time to wait for disposal to stop
	 */
	public void stopDisposing(long millis);
}
@


1.2
log
@no message
@
text
@d11 1
a11 1
package CH.ifa.draw.contrib.html;
@


1.1
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@d2 1
a2 1
 *  @@(#)TextAreaFigure.java
d4 6
a9 6
 *  Project:		JHotdraw - a GUI framework for technical drawings
 *  http://www.jhotdraw.org
 *  http://jhotdraw.sourceforge.net
 *  Copyright:	© by the original author(s) and all contributors
 *  License:		Lesser GNU Public License (LGPL)
 *  http://www.opensource.org/licenses/lgpl-license.html
d21 3
a23 3
 * @@author    Eduardo Francos - InContext
 * @@created   2 mai 2002
 * @@version   1.0
d25 1
a26 1
public interface DisposableResourceManager {
a33 1

a40 1

a47 1

a55 1

d61 1
a61 3
	public void startDisposing()
		throws ResourceManagerNotSetException;

@

