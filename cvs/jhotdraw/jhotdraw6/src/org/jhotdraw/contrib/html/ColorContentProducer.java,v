head	1.4;
access;
symbols
	jhotdraw60b1-release:1.4
	package_rename:1.4
	directory_rename:1.3
	reorg_6x_split_initial:1.3
	MVC_PHASE1:1.3.0.2
	NEW_ATTRIBUTES:1.2.0.2
	DNOYEB1_ALPHA-2:1.1
	release_JHD54b1:1.1
	BUGFIX_670992:1.1.0.6
	DNOYEB1_ALPHA-1:1.1
	dnoyeb1:1.1.0.4
	repack:1.1.0.2
	Root_repack:1.1
	Before_FigureVisitor:1.1;
locks; strict;
comment	@# @;


1.4
date	2004.01.09.22.53.42;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.22.23.58.33;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.04.05.16.14;	author ricardo_padilha;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.20.19.57.58;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)ColorContentProducer.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.contrib.html;

import java.awt.Color;
import java.io.IOException;
import java.io.Serializable;
import org.jhotdraw.util.StorableInput;
import org.jhotdraw.util.StorableOutput;

/**
 * ColorContentProducer produces RGB color encoded hexadecimal strings.<br>
 * Ex:
 * <code>Color.blue ==> 0x0000FF</code><br>
 * <code>Color.red  ==> 0xFF00FF</code><br>
 * It can either be specific if set for a specific color, or generic, encoding
 * any color passed to the getContents method.
 *
 * @@author  Eduardo Francos - InContext
 * @@created 30 avril 2002
 * @@version <$CURRENT_VERSION$>
 */
public class ColorContentProducer extends FigureDataContentProducer
		 implements Serializable {

	private Color fColor = null;

	/**Constructor for the ColorContentProducer object */
	public ColorContentProducer() { }

	/**
	 * Constructor for the ColorContentProducer object
	 *
	 * @@param color  the specific color to use
	 */
	public ColorContentProducer(Color color) {
		setColor(color);
	}

	/**
	 * Produces the contents for the color
	 *
	 * @@param context       the calling client context
	 * @@param ctxAttrName   the color attribute name (FrameColor, TextColor, etc)
	 * @@param ctxAttrValue  the color
	 * @@return              The string RBG value for the color
	 */
	public Object getContent(ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
		// if we have our own color then use it
		// otherwise use the one supplied
		Color color = (getColor() != null) ? getColor() : (Color)ctxAttrValue;
		String colorCode = Integer.toHexString(color.getRGB());
		return "0x" + colorCode.substring(colorCode.length() - 6);
	}

	/**
	 * Sets the color attribute of the ColorContentProducer object
	 *
	 * @@param color  The new color value
	 */
	public void setColor(Color color) {
		fColor = color;
	}

	/**
	 * Gets the color attribute of the ColorContentProducer object
	 *
	 * @@return   The color value
	 */
	public Color getColor() {
		return fColor;
	}

	/**
	 * Writes the storable
	 *
	 * @@param dw  the storable output
	 */
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeBoolean((getColor() != null));
		if (getColor() != null) {
			dw.writeInt(getColor().getRGB());
		}
	}

	/**
	 * Reads the storable
	 *
	 * @@param dr               the storable input
	 * @@exception IOException  thrown by called methods
	 */
	public void read(StorableInput dr) throws IOException {
		super.read(dr);
		boolean hasColor = dr.readBoolean();
		if (hasColor) {
			setColor(new Color(dr.readInt()));
		}
		else{
			setColor(null);
		}
	}
}
@


1.3
log
@no message
@
text
@d11 1
a11 1
package CH.ifa.draw.contrib.html;
d16 2
a17 2
import CH.ifa.draw.util.StorableInput;
import CH.ifa.draw.util.StorableOutput;
@


1.2
log
@Removed unused import.
@
text
@d2 1
a2 1
 *  @@(#)TextAreaFigure.java
d4 6
a9 6
 *  Project:		JHotdraw - a GUI framework for technical drawings
 *  http://www.jhotdraw.org
 *  http://jhotdraw.sourceforge.net
 *  Copyright:	© by the original author(s) and all contributors
 *  License:		Lesser GNU Public License (LGPL)
 *  http://www.opensource.org/licenses/lgpl-license.html
d27 3
a29 3
 * @@author    Eduardo Francos - InContext
 * @@created   30 avril 2002
 * @@version   1.0
a30 1

a32 1
	Color fColor = null;
d34 1
a38 1

d40 1
a40 1
	 *Constructor for the ColorContentProducer object
d45 1
a45 1
		fColor = color;
a47 1

d59 1
a59 1
		Color color = (fColor != null) ? fColor : (Color)ctxAttrValue;
a63 1

a72 1

a81 1

a87 1

d89 3
a91 3
		dw.writeBoolean((fColor != null));
		if (fColor != null) {
			dw.writeInt(fColor.getRGB());
a94 1

d101 1
a101 3
	public void read(StorableInput dr)
		throws IOException {

d105 1
a105 1
			fColor = new Color(dr.readInt());
d108 1
a108 1
			fColor = null;
@


1.1
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@a15 1
import CH.ifa.draw.util.Storable;
@

