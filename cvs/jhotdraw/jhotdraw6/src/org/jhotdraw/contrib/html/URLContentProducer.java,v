head	1.4;
access;
symbols
	jhotdraw60b1-release:1.4
	package_rename:1.4
	directory_rename:1.3
	reorg_6x_split_initial:1.3
	MVC_PHASE1:1.3.0.2
	NEW_ATTRIBUTES:1.2.0.2
	DNOYEB1_ALPHA-2:1.1
	release_JHD54b1:1.1
	BUGFIX_670992:1.1.0.6
	DNOYEB1_ALPHA-1:1.1
	dnoyeb1:1.1.0.4
	repack:1.1.0.2
	Root_repack:1.1
	Before_FigureVisitor:1.1;
locks; strict;
comment	@# @;


1.4
date	2004.01.09.22.53.42;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.22.23.58.33;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.04.05.30.12;	author ricardo_padilha;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.20.19.57.58;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)URLContentProducer.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.contrib.html;

import java.io.IOException;

import java.io.InputStream;
import java.io.Serializable;
import java.net.URL;
import org.jhotdraw.util.StorableInput;
import org.jhotdraw.util.StorableOutput;

/**
 * URLContentProducer produces string contents from URLs.<br>
 * Anything the <code>URL.openStream()</code> method can get can be retrieved
 * by this producer, that includes resources, local files, web documents,
 * web queries, FTP files, and you name it.<br>
 * It can either be specific if set for a specific URL, or generic, retrieving
 * any URL passed to the getContents method.
 *
 * @@author  Eduardo Francos - InContext
 * @@created 4 mai 2002
 * @@version <$CURRENT_VERSION$>
 * @@todo    should we cache the contents for specific URLs? this can
 * accelerate things a lot for static documents, but for dynamic ones it
 * will complicate things. If cached then if must be in a DisposableResourceHolder
 */
public class URLContentProducer extends FigureDataContentProducer
		 implements Serializable {

	/** the specific URL */
	private URL fURL;

	/**
	 * Constructor for the URLContentProducer object
	 */
	public URLContentProducer() { }

	/**
	 *Constructor for the URLContentProducer object
	 *
	 * @@param url  the specific URL
	 */
	public URLContentProducer(URL url) {
		setURL(url);
	}

	/**
	 * Retrieves the contents of the URL pointed object
	 *
	 * @@param context       the calling client context
	 * @@param ctxAttrName   the attribute name that led to this being called
	 * @@param ctxAttrValue  the value of the URL attribute
	 * @@return              the contents of the URL pointed object as a string
	 */
	public Object getContent(ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
		try {
			// if we have our own URL then use it
			// otherwise use the one supplied
			URL url = (getURL() != null) ? new URL(getURL().toExternalForm()) : new URL(((URL)ctxAttrValue).toExternalForm());

			InputStream reader = url.openStream();
			int available = reader.available();
			byte contents[] = new byte[available];
			reader.read(contents, 0, available);
			reader.close();
			return new String(contents);
		}
		catch (Exception ex) {
			ex.printStackTrace();
			return ex.toString();
		}
	}

	/**
	 * Writes the storable
	 *
	 * @@param dw  the storable output
	 */
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeBoolean((getURL() != null));
		if (getURL() != null) {
			dw.writeString(getURL().toExternalForm());
		}
	}

	/**
	 * Writes the storable
	 *
	 * @@param dr               the storable input
	 * @@exception IOException  thrown by called methods
	 */
	public void read(StorableInput dr) throws IOException {
		super.read(dr);
		boolean hasURL = dr.readBoolean();
		if (hasURL) {
			setURL(new URL(dr.readString()));
		}
	}

	public URL getURL() {
		return fURL;
	}

	protected void setURL(URL newURL) {
		fURL = newURL;
	}
}
@


1.3
log
@no message
@
text
@d11 1
a11 1
package CH.ifa.draw.contrib.html;
d18 2
a19 2
import CH.ifa.draw.util.StorableInput;
import CH.ifa.draw.util.StorableOutput;
@


1.2
log
@Removed unused imports and local variables.
@
text
@d2 1
a2 1
 *  @@(#)TextAreaFigure.java
d4 6
a9 6
 *  Project:		JHotdraw - a GUI framework for technical drawings
 *  http://www.jhotdraw.org
 *  http://jhotdraw.sourceforge.net
 *  Copyright:	© by the original author(s) and all contributors
 *  License:		Lesser GNU Public License (LGPL)
 *  http://www.opensource.org/licenses/lgpl-license.html
d29 4
a32 4
 * @@author    Eduardo Francos - InContext
 * @@created   4 mai 2002
 * @@version   1.0
 * @@todo      should we cache the contents for specific URLs? this can
a35 1

d38 1
d40 1
a40 1
	protected URL fURL = null;
d42 3
a44 2

	/**Constructor for the URLContentProducer object */
a46 1

d53 1
a53 1
		fURL = url;
a55 1

d68 1
a68 1
			URL url = (fURL != null) ? new URL(fURL.toExternalForm()) : new URL(((URL)ctxAttrValue).toExternalForm());
a82 1

d90 3
a92 3
		dw.writeBoolean((fURL != null));
		if (fURL != null) {
			dw.writeString(fURL.toExternalForm());
a95 1

d102 1
a102 2
	public void read(StorableInput dr)
		throws IOException {
d106 1
a106 1
			fURL = new URL(dr.readString());
d108 8
@


1.1
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@a17 1
import CH.ifa.draw.util.Storable;
@

