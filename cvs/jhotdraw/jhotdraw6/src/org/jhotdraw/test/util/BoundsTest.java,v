head	1.5;
access;
symbols
	jhotdraw60b1-release:1.5
	package_rename:1.5
	directory_rename:1.4
	reorg_6x_split_initial:1.4
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.5
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.09.21.18.45;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.23.06.38.57;	author mtnygard;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.5
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.util;

import java.awt.Dimension;
import java.awt.geom.Point2D;

import org.jhotdraw.util.Bounds;

import junit.framework.TestCase;
// JUnitDoclet begin import
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase BoundsTest is generated by
 * JUnitDoclet to hold the tests for Bounds.
 * @@see org.jhotdraw.util.Bounds
 */
// JUnitDoclet end javadoc_class
public class BoundsTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private Bounds bounds;
	// JUnitDoclet end class

	/**
	 * Constructor BoundsTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public BoundsTest(String name) {
		// JUnitDoclet begin method BoundsTest
		super(name);
		// JUnitDoclet end method BoundsTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public Bounds createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new Bounds(new Dimension(100, 100));
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		bounds = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		bounds = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method getLesserX()
	/**
	 * Method testGetLesserX is testing getLesserX
	 * @@see org.jhotdraw.util.Bounds#getLesserX()
	 */
	// JUnitDoclet end javadoc_method getLesserX()
	public void testGetLesserX() throws Exception {
		// JUnitDoclet begin method getLesserX
		// JUnitDoclet end method getLesserX
	}

	// JUnitDoclet begin javadoc_method getGreaterX()
	/**
	 * Method testGetGreaterX is testing getGreaterX
	 * @@see org.jhotdraw.util.Bounds#getGreaterX()
	 */
	// JUnitDoclet end javadoc_method getGreaterX()
	public void testGetGreaterX() throws Exception {
		// JUnitDoclet begin method getGreaterX
		// JUnitDoclet end method getGreaterX
	}

	// JUnitDoclet begin javadoc_method getLesserY()
	/**
	 * Method testGetLesserY is testing getLesserY
	 * @@see org.jhotdraw.util.Bounds#getLesserY()
	 */
	// JUnitDoclet end javadoc_method getLesserY()
	public void testGetLesserY() throws Exception {
		// JUnitDoclet begin method getLesserY
		// JUnitDoclet end method getLesserY
	}

	// JUnitDoclet begin javadoc_method getGreaterY()
	/**
	 * Method testGetGreaterY is testing getGreaterY
	 * @@see org.jhotdraw.util.Bounds#getGreaterY()
	 */
	// JUnitDoclet end javadoc_method getGreaterY()
	public void testGetGreaterY() throws Exception {
		// JUnitDoclet begin method getGreaterY
		// JUnitDoclet end method getGreaterY
	}

	// JUnitDoclet begin javadoc_method getWest()
	/**
	 * Method testGetWest is testing getWest
	 * @@see org.jhotdraw.util.Bounds#getWest()
	 */
	// JUnitDoclet end javadoc_method getWest()
	public void testGetWest() throws Exception {
		// JUnitDoclet begin method getWest
		// JUnitDoclet end method getWest
	}

	// JUnitDoclet begin javadoc_method getEast()
	/**
	 * Method testGetEast is testing getEast
	 * @@see org.jhotdraw.util.Bounds#getEast()
	 */
	// JUnitDoclet end javadoc_method getEast()
	public void testGetEast() throws Exception {
		// JUnitDoclet begin method getEast
		// JUnitDoclet end method getEast
	}

	// JUnitDoclet begin javadoc_method getSouth()
	/**
	 * Method testGetSouth is testing getSouth
	 * @@see org.jhotdraw.util.Bounds#getSouth()
	 */
	// JUnitDoclet end javadoc_method getSouth()
	public void testGetSouth() throws Exception {
		// JUnitDoclet begin method getSouth
		// JUnitDoclet end method getSouth
	}

	// JUnitDoclet begin javadoc_method getNorth()
	/**
	 * Method testGetNorth is testing getNorth
	 * @@see org.jhotdraw.util.Bounds#getNorth()
	 */
	// JUnitDoclet end javadoc_method getNorth()
	public void testGetNorth() throws Exception {
		// JUnitDoclet begin method getNorth
		// JUnitDoclet end method getNorth
	}

	// JUnitDoclet begin javadoc_method getWidth()
	/**
	 * Method testGetWidth is testing getWidth
	 * @@see org.jhotdraw.util.Bounds#getWidth()
	 */
	// JUnitDoclet end javadoc_method getWidth()
	public void testGetWidth() throws Exception {
		// JUnitDoclet begin method getWidth
		// JUnitDoclet end method getWidth
	}

	// JUnitDoclet begin javadoc_method getHeight()
	/**
	 * Method testGetHeight is testing getHeight
	 * @@see org.jhotdraw.util.Bounds#getHeight()
	 */
	// JUnitDoclet end javadoc_method getHeight()
	public void testGetHeight() throws Exception {
		// JUnitDoclet begin method getHeight
		// JUnitDoclet end method getHeight
	}

	// JUnitDoclet begin javadoc_method asRectangle2D()
	/**
	 * Method testAsRectangle2D is testing asRectangle2D
	 * @@see org.jhotdraw.util.Bounds#asRectangle2D()
	 */
	// JUnitDoclet end javadoc_method asRectangle2D()
	public void testAsRectangle2D() throws Exception {
		// JUnitDoclet begin method asRectangle2D
		// JUnitDoclet end method asRectangle2D
	}

	// JUnitDoclet begin javadoc_method setCenter()
	/**
	 * Method testSetGetCenter is testing setCenter
	 * and getCenter together by setting some value
	 * and verifying it by reading.
	 * @@see org.jhotdraw.util.Bounds#setCenter(java.awt.geom.Point2D)
	 * @@see org.jhotdraw.util.Bounds#getCenter()
	 */
	// JUnitDoclet end javadoc_method setCenter()
	public void testSetGetCenter() throws Exception {
		// JUnitDoclet begin method setCenter getCenter
		Point2D[] tests = { new Point2D.Double(2.0, 3.0)};

		for (int i = 0; i < tests.length; i++) {
			bounds.setCenter(tests[i]);
			assertEquals(tests[i], bounds.getCenter());
		}
		// JUnitDoclet end method setCenter getCenter
	}

	// JUnitDoclet begin method setNullCenter()
	/**
	  * Test a null argument to setCenter.  Expect an IllegalArgumentException
	  * 
	  * @@see org.jhotdraw.util.Bounds#setCenter(java.awt.geom.Point2D)
	  */
	public void testSetNullCenter() throws Exception {
		Point2D original = bounds.getCenter();

		try {
			bounds.setCenter(null);
			fail("IllegalArgumentException expected");
		}
		catch (IllegalArgumentException ok) {
			assertEquals("setCenter(null) altered property value", original, bounds.getCenter());
		}
	}
	// JUnitDoclet end method

	// JUnitDoclet begin javadoc_method zoomBy()
	/**
	 * Method testZoomBy is testing zoomBy
	 * @@see org.jhotdraw.util.Bounds#zoomBy(double)
	 */
	// JUnitDoclet end javadoc_method zoomBy()
	public void testZoomBy() throws Exception {
		// JUnitDoclet begin method zoomBy
		// JUnitDoclet end method zoomBy
	}

	// JUnitDoclet begin javadoc_method shiftBy()
	/**
	 * Method testShiftBy is testing shiftBy
	 * @@see org.jhotdraw.util.Bounds#shiftBy(int, int)
	 */
	// JUnitDoclet end javadoc_method shiftBy()
	public void testShiftBy() throws Exception {
		// JUnitDoclet begin method shiftBy
		// JUnitDoclet end method shiftBy
	}

	// JUnitDoclet begin javadoc_method offset()
	/**
	 * Method testOffset is testing offset
	 * @@see org.jhotdraw.util.Bounds#offset(double, double)
	 */
	// JUnitDoclet end javadoc_method offset()
	public void testOffset() throws Exception {
		// JUnitDoclet begin method offset
		// JUnitDoclet end method offset
	}

	// JUnitDoclet begin javadoc_method expandToRatio()
	/**
	 * Method testExpandToRatio is testing expandToRatio
	 * @@see org.jhotdraw.util.Bounds#expandToRatio(double)
	 */
	// JUnitDoclet end javadoc_method expandToRatio()
	public void testExpandToRatio() throws Exception {
		// JUnitDoclet begin method expandToRatio
		// JUnitDoclet end method expandToRatio
	}

	// JUnitDoclet begin javadoc_method includeXCoordinate()
	/**
	 * Method testIncludeXCoordinate is testing includeXCoordinate
	 * @@see org.jhotdraw.util.Bounds#includeXCoordinate(double)
	 */
	// JUnitDoclet end javadoc_method includeXCoordinate()
	public void testIncludeXCoordinate() throws Exception {
		// JUnitDoclet begin method includeXCoordinate
		// JUnitDoclet end method includeXCoordinate
	}

	// JUnitDoclet begin javadoc_method includeYCoordinate()
	/**
	 * Method testIncludeYCoordinate is testing includeYCoordinate
	 * @@see org.jhotdraw.util.Bounds#includeYCoordinate(double)
	 */
	// JUnitDoclet end javadoc_method includeYCoordinate()
	public void testIncludeYCoordinate() throws Exception {
		// JUnitDoclet begin method includeYCoordinate
		// JUnitDoclet end method includeYCoordinate
	}

	// JUnitDoclet begin javadoc_method includePoint()
	/**
	 * Method testIncludePoint is testing includePoint
	 * @@see org.jhotdraw.util.Bounds#includePoint(double, double)
	 */
	// JUnitDoclet end javadoc_method includePoint()
	public void testIncludePoint() throws Exception {
		// JUnitDoclet begin method includePoint
		// JUnitDoclet end method includePoint
	}

	// JUnitDoclet begin javadoc_method includeLine()
	/**
	 * Method testIncludeLine is testing includeLine
	 * @@see org.jhotdraw.util.Bounds#includeLine(double, double, double, double)
	 */
	// JUnitDoclet end javadoc_method includeLine()
	public void testIncludeLine() throws Exception {
		// JUnitDoclet begin method includeLine
		// JUnitDoclet end method includeLine
	}

	// JUnitDoclet begin javadoc_method includeBounds()
	/**
	 * Method testIncludeBounds is testing includeBounds
	 * @@see org.jhotdraw.util.Bounds#includeBounds(org.jhotdraw.util.Bounds)
	 */
	// JUnitDoclet end javadoc_method includeBounds()
	public void testIncludeBounds() throws Exception {
		// JUnitDoclet begin method includeBounds
		// JUnitDoclet end method includeBounds
	}

	// JUnitDoclet begin javadoc_method includeRectangle2D()
	/**
	 * Method testIncludeRectangle2D is testing includeRectangle2D
	 * @@see org.jhotdraw.util.Bounds#includeRectangle2D(java.awt.geom.Rectangle2D)
	 */
	// JUnitDoclet end javadoc_method includeRectangle2D()
	public void testIncludeRectangle2D() throws Exception {
		// JUnitDoclet begin method includeRectangle2D
		// JUnitDoclet end method includeRectangle2D
	}

	// JUnitDoclet begin javadoc_method intersect()
	/**
	 * Method testIntersect is testing intersect
	 * @@see org.jhotdraw.util.Bounds#intersect(org.jhotdraw.util.Bounds)
	 */
	// JUnitDoclet end javadoc_method intersect()
	public void testIntersect() throws Exception {
		// JUnitDoclet begin method intersect
		// JUnitDoclet end method intersect
	}

	// JUnitDoclet begin javadoc_method intersectsPoint()
	/**
	 * Method testIntersectsPoint is testing intersectsPoint
	 * @@see org.jhotdraw.util.Bounds#intersectsPoint(double, double)
	 */
	// JUnitDoclet end javadoc_method intersectsPoint()
	public void testIntersectsPoint() throws Exception {
		// JUnitDoclet begin method intersectsPoint
		// JUnitDoclet end method intersectsPoint
	}

	// JUnitDoclet begin javadoc_method intersectsLine()
	/**
	 * Method testIntersectsLine is testing intersectsLine
	 * @@see org.jhotdraw.util.Bounds#intersectsLine(double, double, double, double)
	 */
	// JUnitDoclet end javadoc_method intersectsLine()
	public void testIntersectsLine() throws Exception {
		// JUnitDoclet begin method intersectsLine
		// JUnitDoclet end method intersectsLine
	}

	// JUnitDoclet begin javadoc_method intersectsBounds()
	/**
	 * Method testIntersectsBounds is testing intersectsBounds
	 * @@see org.jhotdraw.util.Bounds#intersectsBounds(org.jhotdraw.util.Bounds)
	 */
	// JUnitDoclet end javadoc_method intersectsBounds()
	public void testIntersectsBounds() throws Exception {
		// JUnitDoclet begin method intersectsBounds
		// JUnitDoclet end method intersectsBounds
	}

	// JUnitDoclet begin javadoc_method completelyContainsLine()
	/**
	 * Method testCompletelyContainsLine is testing completelyContainsLine
	 * @@see org.jhotdraw.util.Bounds#completelyContainsLine(double, double, double, double)
	 */
	// JUnitDoclet end javadoc_method completelyContainsLine()
	public void testCompletelyContainsLine() throws Exception {
		// JUnitDoclet begin method completelyContainsLine
		// JUnitDoclet end method completelyContainsLine
	}

	// JUnitDoclet begin javadoc_method isCompletelyInside()
	/**
	 * Method testIsCompletelyInside is testing isCompletelyInside
	 * @@see org.jhotdraw.util.Bounds#isCompletelyInside(org.jhotdraw.util.Bounds)
	 */
	// JUnitDoclet end javadoc_method isCompletelyInside()
	public void testIsCompletelyInside() throws Exception {
		// JUnitDoclet begin method isCompletelyInside
		// JUnitDoclet end method isCompletelyInside
	}

	// JUnitDoclet begin javadoc_method cropLine()
	/**
	 * Method testCropLine is testing cropLine
	 * @@see org.jhotdraw.util.Bounds#cropLine(double, double, double, double)
	 */
	// JUnitDoclet end javadoc_method cropLine()
	public void testCropLine() throws Exception {
		// JUnitDoclet begin method cropLine
		// JUnitDoclet end method cropLine
	}

	// JUnitDoclet begin javadoc_method equals()
	/**
	 * Method testEquals is testing equals
	 * @@see org.jhotdraw.util.Bounds#equals(java.lang.Object)
	 */
	// JUnitDoclet end javadoc_method equals()
	public void testEquals() throws Exception {
		// JUnitDoclet begin method equals
		// JUnitDoclet end method equals
	}

	// JUnitDoclet begin javadoc_method hashCode()
	/**
	 * Method testHashCode is testing hashCode
	 * @@see org.jhotdraw.util.Bounds#hashCode()
	 */
	// JUnitDoclet end javadoc_method hashCode()
	public void testHashCode() throws Exception {
		// JUnitDoclet begin method hashCode
		// JUnitDoclet end method hashCode
	}

	// JUnitDoclet begin javadoc_method toString()
	/**
	 * Method testToString is testing toString
	 * @@see org.jhotdraw.util.Bounds#toString()
	 */
	// JUnitDoclet end javadoc_method toString()
	public void testToString() throws Exception {
		// JUnitDoclet begin method toString
		// JUnitDoclet end method toString
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
@


1.4
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d11 1
a11 1
package CH.ifa.draw.test.util;
d16 1
a16 1
import CH.ifa.draw.util.Bounds;
d34 1
a34 1
 * @@see CH.ifa.draw.util.Bounds
d61 1
a61 1
	public CH.ifa.draw.util.Bounds createInstance() throws Exception {
d63 1
a63 1
		return new CH.ifa.draw.util.Bounds(new Dimension(100, 100));
d94 1
a94 1
	 * @@see CH.ifa.draw.util.Bounds#getLesserX()
d105 1
a105 1
	 * @@see CH.ifa.draw.util.Bounds#getGreaterX()
d116 1
a116 1
	 * @@see CH.ifa.draw.util.Bounds#getLesserY()
d127 1
a127 1
	 * @@see CH.ifa.draw.util.Bounds#getGreaterY()
d138 1
a138 1
	 * @@see CH.ifa.draw.util.Bounds#getWest()
d149 1
a149 1
	 * @@see CH.ifa.draw.util.Bounds#getEast()
d160 1
a160 1
	 * @@see CH.ifa.draw.util.Bounds#getSouth()
d171 1
a171 1
	 * @@see CH.ifa.draw.util.Bounds#getNorth()
d182 1
a182 1
	 * @@see CH.ifa.draw.util.Bounds#getWidth()
d193 1
a193 1
	 * @@see CH.ifa.draw.util.Bounds#getHeight()
d204 1
a204 1
	 * @@see CH.ifa.draw.util.Bounds#asRectangle2D()
d217 2
a218 2
	 * @@see CH.ifa.draw.util.Bounds#setCenter(java.awt.geom.Point2D)
	 * @@see CH.ifa.draw.util.Bounds#getCenter()
d236 1
a236 1
	  * @@see CH.ifa.draw.util.Bounds#setCenter(java.awt.geom.Point2D)
d254 1
a254 1
	 * @@see CH.ifa.draw.util.Bounds#zoomBy(double)
d265 1
a265 1
	 * @@see CH.ifa.draw.util.Bounds#shiftBy(int, int)
d276 1
a276 1
	 * @@see CH.ifa.draw.util.Bounds#offset(double, double)
d287 1
a287 1
	 * @@see CH.ifa.draw.util.Bounds#expandToRatio(double)
d298 1
a298 1
	 * @@see CH.ifa.draw.util.Bounds#includeXCoordinate(double)
d309 1
a309 1
	 * @@see CH.ifa.draw.util.Bounds#includeYCoordinate(double)
d320 1
a320 1
	 * @@see CH.ifa.draw.util.Bounds#includePoint(double, double)
d331 1
a331 1
	 * @@see CH.ifa.draw.util.Bounds#includeLine(double, double, double, double)
d342 1
a342 1
	 * @@see CH.ifa.draw.util.Bounds#includeBounds(CH.ifa.draw.util.Bounds)
d353 1
a353 1
	 * @@see CH.ifa.draw.util.Bounds#includeRectangle2D(java.awt.geom.Rectangle2D)
d364 1
a364 1
	 * @@see CH.ifa.draw.util.Bounds#intersect(CH.ifa.draw.util.Bounds)
d375 1
a375 1
	 * @@see CH.ifa.draw.util.Bounds#intersectsPoint(double, double)
d386 1
a386 1
	 * @@see CH.ifa.draw.util.Bounds#intersectsLine(double, double, double, double)
d397 1
a397 1
	 * @@see CH.ifa.draw.util.Bounds#intersectsBounds(CH.ifa.draw.util.Bounds)
d408 1
a408 1
	 * @@see CH.ifa.draw.util.Bounds#completelyContainsLine(double, double, double, double)
d419 1
a419 1
	 * @@see CH.ifa.draw.util.Bounds#isCompletelyInside(CH.ifa.draw.util.Bounds)
d430 1
a430 1
	 * @@see CH.ifa.draw.util.Bounds#cropLine(double, double, double, double)
d441 1
a441 1
	 * @@see CH.ifa.draw.util.Bounds#equals(java.lang.Object)
d452 1
a452 1
	 * @@see CH.ifa.draw.util.Bounds#hashCode()
d463 1
a463 1
	 * @@see CH.ifa.draw.util.Bounds#toString()
@


1.3
log
@All test cases now pass!
@
text
@d1 10
d16 2
d23 6
a28 7
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

d32 4
a35 4
* TestCase BoundsTest is generated by
* JUnitDoclet to hold the tests for Bounds.
* @@see CH.ifa.draw.util.Bounds
*/
d42 442
a483 452
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.util.Bounds bounds = null;
  // JUnitDoclet end class
  
  /**
  * Constructor BoundsTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public BoundsTest(String name) {
    // JUnitDoclet begin method BoundsTest
    super(name);
    // JUnitDoclet end method BoundsTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.util.Bounds createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new CH.ifa.draw.util.Bounds(new Dimension(100, 100));
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    bounds = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    bounds = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method getLesserX()
  /**
  * Method testGetLesserX is testing getLesserX
  * @@see CH.ifa.draw.util.Bounds#getLesserX()
  */
  // JUnitDoclet end javadoc_method getLesserX()
  public void testGetLesserX() throws Exception {
    // JUnitDoclet begin method getLesserX
    // JUnitDoclet end method getLesserX
  }
  
  // JUnitDoclet begin javadoc_method getGreaterX()
  /**
  * Method testGetGreaterX is testing getGreaterX
  * @@see CH.ifa.draw.util.Bounds#getGreaterX()
  */
  // JUnitDoclet end javadoc_method getGreaterX()
  public void testGetGreaterX() throws Exception {
    // JUnitDoclet begin method getGreaterX
    // JUnitDoclet end method getGreaterX
  }
  
  // JUnitDoclet begin javadoc_method getLesserY()
  /**
  * Method testGetLesserY is testing getLesserY
  * @@see CH.ifa.draw.util.Bounds#getLesserY()
  */
  // JUnitDoclet end javadoc_method getLesserY()
  public void testGetLesserY() throws Exception {
    // JUnitDoclet begin method getLesserY
    // JUnitDoclet end method getLesserY
  }
  
  // JUnitDoclet begin javadoc_method getGreaterY()
  /**
  * Method testGetGreaterY is testing getGreaterY
  * @@see CH.ifa.draw.util.Bounds#getGreaterY()
  */
  // JUnitDoclet end javadoc_method getGreaterY()
  public void testGetGreaterY() throws Exception {
    // JUnitDoclet begin method getGreaterY
    // JUnitDoclet end method getGreaterY
  }
  
  // JUnitDoclet begin javadoc_method getWest()
  /**
  * Method testGetWest is testing getWest
  * @@see CH.ifa.draw.util.Bounds#getWest()
  */
  // JUnitDoclet end javadoc_method getWest()
  public void testGetWest() throws Exception {
    // JUnitDoclet begin method getWest
    // JUnitDoclet end method getWest
  }
  
  // JUnitDoclet begin javadoc_method getEast()
  /**
  * Method testGetEast is testing getEast
  * @@see CH.ifa.draw.util.Bounds#getEast()
  */
  // JUnitDoclet end javadoc_method getEast()
  public void testGetEast() throws Exception {
    // JUnitDoclet begin method getEast
    // JUnitDoclet end method getEast
  }
  
  // JUnitDoclet begin javadoc_method getSouth()
  /**
  * Method testGetSouth is testing getSouth
  * @@see CH.ifa.draw.util.Bounds#getSouth()
  */
  // JUnitDoclet end javadoc_method getSouth()
  public void testGetSouth() throws Exception {
    // JUnitDoclet begin method getSouth
    // JUnitDoclet end method getSouth
  }
  
  // JUnitDoclet begin javadoc_method getNorth()
  /**
  * Method testGetNorth is testing getNorth
  * @@see CH.ifa.draw.util.Bounds#getNorth()
  */
  // JUnitDoclet end javadoc_method getNorth()
  public void testGetNorth() throws Exception {
    // JUnitDoclet begin method getNorth
    // JUnitDoclet end method getNorth
  }
  
  // JUnitDoclet begin javadoc_method getWidth()
  /**
  * Method testGetWidth is testing getWidth
  * @@see CH.ifa.draw.util.Bounds#getWidth()
  */
  // JUnitDoclet end javadoc_method getWidth()
  public void testGetWidth() throws Exception {
    // JUnitDoclet begin method getWidth
    // JUnitDoclet end method getWidth
  }
  
  // JUnitDoclet begin javadoc_method getHeight()
  /**
  * Method testGetHeight is testing getHeight
  * @@see CH.ifa.draw.util.Bounds#getHeight()
  */
  // JUnitDoclet end javadoc_method getHeight()
  public void testGetHeight() throws Exception {
    // JUnitDoclet begin method getHeight
    // JUnitDoclet end method getHeight
  }
  
  // JUnitDoclet begin javadoc_method asRectangle2D()
  /**
  * Method testAsRectangle2D is testing asRectangle2D
  * @@see CH.ifa.draw.util.Bounds#asRectangle2D()
  */
  // JUnitDoclet end javadoc_method asRectangle2D()
  public void testAsRectangle2D() throws Exception {
    // JUnitDoclet begin method asRectangle2D
    // JUnitDoclet end method asRectangle2D
  }
  
  // JUnitDoclet begin javadoc_method setCenter()
  /**
  * Method testSetGetCenter is testing setCenter
  * and getCenter together by setting some value
  * and verifying it by reading.
  * @@see CH.ifa.draw.util.Bounds#setCenter(java.awt.geom.Point2D)
  * @@see CH.ifa.draw.util.Bounds#getCenter()
  */
  // JUnitDoclet end javadoc_method setCenter()
  public void testSetGetCenter() throws Exception {
    // JUnitDoclet begin method setCenter getCenter
    Point2D[] tests = {new Point2D.Double(2.0, 3.0)};
    
    for (int i = 0; i < tests.length; i++) {
      bounds.setCenter(tests[i]);
      assertEquals(tests[i], bounds.getCenter());
    }
    // JUnitDoclet end method setCenter getCenter
  }
  
  // JUnitDoclet begin method setNullCenter()
  /**
   * Test a null argument to setCenter.  Expect an IllegalArgumentException
   * 
   * @@see CH.ifa.draw.util.Bounds#setCenter(java.awt.geom.Point2D)
   */
  public void testSetNullCenter() throws Exception {
  	Point2D original = bounds.getCenter();
  	
  	try {
  		bounds.setCenter(null);
  		fail("IllegalArgumentException expected");
  	} catch(IllegalArgumentException ok) {
  		assertEquals("setCenter(null) altered property value", original, bounds.getCenter());
  	}
  }
  // JUnitDoclet end method
  
  // JUnitDoclet begin javadoc_method zoomBy()
  /**
  * Method testZoomBy is testing zoomBy
  * @@see CH.ifa.draw.util.Bounds#zoomBy(double)
  */
  // JUnitDoclet end javadoc_method zoomBy()
  public void testZoomBy() throws Exception {
    // JUnitDoclet begin method zoomBy
    // JUnitDoclet end method zoomBy
  }
  
  // JUnitDoclet begin javadoc_method shiftBy()
  /**
  * Method testShiftBy is testing shiftBy
  * @@see CH.ifa.draw.util.Bounds#shiftBy(int, int)
  */
  // JUnitDoclet end javadoc_method shiftBy()
  public void testShiftBy() throws Exception {
    // JUnitDoclet begin method shiftBy
    // JUnitDoclet end method shiftBy
  }
  
  // JUnitDoclet begin javadoc_method offset()
  /**
  * Method testOffset is testing offset
  * @@see CH.ifa.draw.util.Bounds#offset(double, double)
  */
  // JUnitDoclet end javadoc_method offset()
  public void testOffset() throws Exception {
    // JUnitDoclet begin method offset
    // JUnitDoclet end method offset
  }
  
  // JUnitDoclet begin javadoc_method expandToRatio()
  /**
  * Method testExpandToRatio is testing expandToRatio
  * @@see CH.ifa.draw.util.Bounds#expandToRatio(double)
  */
  // JUnitDoclet end javadoc_method expandToRatio()
  public void testExpandToRatio() throws Exception {
    // JUnitDoclet begin method expandToRatio
    // JUnitDoclet end method expandToRatio
  }
  
  // JUnitDoclet begin javadoc_method includeXCoordinate()
  /**
  * Method testIncludeXCoordinate is testing includeXCoordinate
  * @@see CH.ifa.draw.util.Bounds#includeXCoordinate(double)
  */
  // JUnitDoclet end javadoc_method includeXCoordinate()
  public void testIncludeXCoordinate() throws Exception {
    // JUnitDoclet begin method includeXCoordinate
    // JUnitDoclet end method includeXCoordinate
  }
  
  // JUnitDoclet begin javadoc_method includeYCoordinate()
  /**
  * Method testIncludeYCoordinate is testing includeYCoordinate
  * @@see CH.ifa.draw.util.Bounds#includeYCoordinate(double)
  */
  // JUnitDoclet end javadoc_method includeYCoordinate()
  public void testIncludeYCoordinate() throws Exception {
    // JUnitDoclet begin method includeYCoordinate
    // JUnitDoclet end method includeYCoordinate
  }
  
  // JUnitDoclet begin javadoc_method includePoint()
  /**
  * Method testIncludePoint is testing includePoint
  * @@see CH.ifa.draw.util.Bounds#includePoint(double, double)
  */
  // JUnitDoclet end javadoc_method includePoint()
  public void testIncludePoint() throws Exception {
    // JUnitDoclet begin method includePoint
    // JUnitDoclet end method includePoint
  }
  
  // JUnitDoclet begin javadoc_method includeLine()
  /**
  * Method testIncludeLine is testing includeLine
  * @@see CH.ifa.draw.util.Bounds#includeLine(double, double, double, double)
  */
  // JUnitDoclet end javadoc_method includeLine()
  public void testIncludeLine() throws Exception {
    // JUnitDoclet begin method includeLine
    // JUnitDoclet end method includeLine
  }
  
  // JUnitDoclet begin javadoc_method includeBounds()
  /**
  * Method testIncludeBounds is testing includeBounds
  * @@see CH.ifa.draw.util.Bounds#includeBounds(CH.ifa.draw.util.Bounds)
  */
  // JUnitDoclet end javadoc_method includeBounds()
  public void testIncludeBounds() throws Exception {
    // JUnitDoclet begin method includeBounds
    // JUnitDoclet end method includeBounds
  }
  
  // JUnitDoclet begin javadoc_method includeRectangle2D()
  /**
  * Method testIncludeRectangle2D is testing includeRectangle2D
  * @@see CH.ifa.draw.util.Bounds#includeRectangle2D(java.awt.geom.Rectangle2D)
  */
  // JUnitDoclet end javadoc_method includeRectangle2D()
  public void testIncludeRectangle2D() throws Exception {
    // JUnitDoclet begin method includeRectangle2D
    // JUnitDoclet end method includeRectangle2D
  }
  
  // JUnitDoclet begin javadoc_method intersect()
  /**
  * Method testIntersect is testing intersect
  * @@see CH.ifa.draw.util.Bounds#intersect(CH.ifa.draw.util.Bounds)
  */
  // JUnitDoclet end javadoc_method intersect()
  public void testIntersect() throws Exception {
    // JUnitDoclet begin method intersect
    // JUnitDoclet end method intersect
  }
  
  // JUnitDoclet begin javadoc_method intersectsPoint()
  /**
  * Method testIntersectsPoint is testing intersectsPoint
  * @@see CH.ifa.draw.util.Bounds#intersectsPoint(double, double)
  */
  // JUnitDoclet end javadoc_method intersectsPoint()
  public void testIntersectsPoint() throws Exception {
    // JUnitDoclet begin method intersectsPoint
    // JUnitDoclet end method intersectsPoint
  }
  
  // JUnitDoclet begin javadoc_method intersectsLine()
  /**
  * Method testIntersectsLine is testing intersectsLine
  * @@see CH.ifa.draw.util.Bounds#intersectsLine(double, double, double, double)
  */
  // JUnitDoclet end javadoc_method intersectsLine()
  public void testIntersectsLine() throws Exception {
    // JUnitDoclet begin method intersectsLine
    // JUnitDoclet end method intersectsLine
  }
  
  // JUnitDoclet begin javadoc_method intersectsBounds()
  /**
  * Method testIntersectsBounds is testing intersectsBounds
  * @@see CH.ifa.draw.util.Bounds#intersectsBounds(CH.ifa.draw.util.Bounds)
  */
  // JUnitDoclet end javadoc_method intersectsBounds()
  public void testIntersectsBounds() throws Exception {
    // JUnitDoclet begin method intersectsBounds
    // JUnitDoclet end method intersectsBounds
  }
  
  // JUnitDoclet begin javadoc_method completelyContainsLine()
  /**
  * Method testCompletelyContainsLine is testing completelyContainsLine
  * @@see CH.ifa.draw.util.Bounds#completelyContainsLine(double, double, double, double)
  */
  // JUnitDoclet end javadoc_method completelyContainsLine()
  public void testCompletelyContainsLine() throws Exception {
    // JUnitDoclet begin method completelyContainsLine
    // JUnitDoclet end method completelyContainsLine
  }
  
  // JUnitDoclet begin javadoc_method isCompletelyInside()
  /**
  * Method testIsCompletelyInside is testing isCompletelyInside
  * @@see CH.ifa.draw.util.Bounds#isCompletelyInside(CH.ifa.draw.util.Bounds)
  */
  // JUnitDoclet end javadoc_method isCompletelyInside()
  public void testIsCompletelyInside() throws Exception {
    // JUnitDoclet begin method isCompletelyInside
    // JUnitDoclet end method isCompletelyInside
  }
  
  // JUnitDoclet begin javadoc_method cropLine()
  /**
  * Method testCropLine is testing cropLine
  * @@see CH.ifa.draw.util.Bounds#cropLine(double, double, double, double)
  */
  // JUnitDoclet end javadoc_method cropLine()
  public void testCropLine() throws Exception {
    // JUnitDoclet begin method cropLine
    // JUnitDoclet end method cropLine
  }
  
  // JUnitDoclet begin javadoc_method equals()
  /**
  * Method testEquals is testing equals
  * @@see CH.ifa.draw.util.Bounds#equals(java.lang.Object)
  */
  // JUnitDoclet end javadoc_method equals()
  public void testEquals() throws Exception {
    // JUnitDoclet begin method equals
    // JUnitDoclet end method equals
  }
  
  // JUnitDoclet begin javadoc_method hashCode()
  /**
  * Method testHashCode is testing hashCode
  * @@see CH.ifa.draw.util.Bounds#hashCode()
  */
  // JUnitDoclet end javadoc_method hashCode()
  public void testHashCode() throws Exception {
    // JUnitDoclet begin method hashCode
    // JUnitDoclet end method hashCode
  }
  
  // JUnitDoclet begin javadoc_method toString()
  /**
  * Method testToString is testing toString
  * @@see CH.ifa.draw.util.Bounds#toString()
  */
  // JUnitDoclet end javadoc_method toString()
  public void testToString() throws Exception {
    // JUnitDoclet begin method toString
    // JUnitDoclet end method toString
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(BoundsTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d4 1
d212 1
a212 1
    java.awt.geom.Point2D[] tests = {new java.awt.geom.Point2D.Double(2.0, 3.0), null};
d220 18
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@d3 2
a6 3
import CH.ifa.draw.util.Bounds;

import java.awt.*;
@

