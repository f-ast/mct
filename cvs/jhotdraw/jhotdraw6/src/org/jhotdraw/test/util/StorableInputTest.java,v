head	1.5;
access;
symbols
	jhotdraw60b1-release:1.5
	package_rename:1.5
	directory_rename:1.4
	reorg_6x_split_initial:1.4
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.5
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.09.21.18.45;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.23.06.38.57;	author mtnygard;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.5
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.util;

import java.io.File;
import java.io.FileInputStream;

import org.jhotdraw.util.StorableInput;

// JUnitDoclet begin import
import junit.framework.TestCase;
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase StorableInputTest is generated by
 * JUnitDoclet to hold the tests for StorableInput.
 * @@see org.jhotdraw.util.StorableInput
 */
// JUnitDoclet end javadoc_class
public class StorableInputTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private StorableInput storableinput;
	// JUnitDoclet end class

	/**
	 * Constructor StorableInputTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public StorableInputTest(String name) {
		// JUnitDoclet begin method StorableInputTest
		super(name);
		// JUnitDoclet end method StorableInputTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public StorableInput createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		File tempFile = File.createTempFile("StorableInputTest", "dat");
		FileInputStream stream = new FileInputStream(tempFile);
		tempFile.deleteOnExit();
		return new StorableInput(stream);
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		storableinput = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		storableinput = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method readStorable()
	/**
	 * Method testReadStorable is testing readStorable
	 * @@see org.jhotdraw.util.StorableInput#readStorable()
	 */
	// JUnitDoclet end javadoc_method readStorable()
	public void testReadStorable() throws Exception {
		// JUnitDoclet begin method readStorable
		// JUnitDoclet end method readStorable
	}

	// JUnitDoclet begin javadoc_method readString()
	/**
	 * Method testReadString is testing readString
	 * @@see org.jhotdraw.util.StorableInput#readString()
	 */
	// JUnitDoclet end javadoc_method readString()
	public void testReadString() throws Exception {
		// JUnitDoclet begin method readString
		// JUnitDoclet end method readString
	}

	// JUnitDoclet begin javadoc_method readInt()
	/**
	 * Method testReadInt is testing readInt
	 * @@see org.jhotdraw.util.StorableInput#readInt()
	 */
	// JUnitDoclet end javadoc_method readInt()
	public void testReadInt() throws Exception {
		// JUnitDoclet begin method readInt
		// JUnitDoclet end method readInt
	}

	// JUnitDoclet begin javadoc_method readLong()
	/**
	 * Method testReadLong is testing readLong
	 * @@see org.jhotdraw.util.StorableInput#readLong()
	 */
	// JUnitDoclet end javadoc_method readLong()
	public void testReadLong() throws Exception {
		// JUnitDoclet begin method readLong
		// JUnitDoclet end method readLong
	}

	// JUnitDoclet begin javadoc_method readColor()
	/**
	 * Method testReadColor is testing readColor
	 * @@see org.jhotdraw.util.StorableInput#readColor()
	 */
	// JUnitDoclet end javadoc_method readColor()
	public void testReadColor() throws Exception {
		// JUnitDoclet begin method readColor
		// JUnitDoclet end method readColor
	}

	// JUnitDoclet begin javadoc_method readDouble()
	/**
	 * Method testReadDouble is testing readDouble
	 * @@see org.jhotdraw.util.StorableInput#readDouble()
	 */
	// JUnitDoclet end javadoc_method readDouble()
	public void testReadDouble() throws Exception {
		// JUnitDoclet begin method readDouble
		// JUnitDoclet end method readDouble
	}

	// JUnitDoclet begin javadoc_method readBoolean()
	/**
	 * Method testReadBoolean is testing readBoolean
	 * @@see org.jhotdraw.util.StorableInput#readBoolean()
	 */
	// JUnitDoclet end javadoc_method readBoolean()
	public void testReadBoolean() throws Exception {
		// JUnitDoclet begin method readBoolean
		// JUnitDoclet end method readBoolean
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
@


1.4
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d11 1
a11 1
package CH.ifa.draw.test.util;
d16 1
a16 1
import CH.ifa.draw.util.StorableInput;
d34 1
a34 1
 * @@see CH.ifa.draw.util.StorableInput
d61 1
a61 1
	public CH.ifa.draw.util.StorableInput createInstance() throws Exception {
d66 1
a66 1
		return new CH.ifa.draw.util.StorableInput(stream);
d97 1
a97 1
	 * @@see CH.ifa.draw.util.StorableInput#readStorable()
d108 1
a108 1
	 * @@see CH.ifa.draw.util.StorableInput#readString()
d119 1
a119 1
	 * @@see CH.ifa.draw.util.StorableInput#readInt()
d130 1
a130 1
	 * @@see CH.ifa.draw.util.StorableInput#readLong()
d141 1
a141 1
	 * @@see CH.ifa.draw.util.StorableInput#readColor()
d152 1
a152 1
	 * @@see CH.ifa.draw.util.StorableInput#readDouble()
d163 1
a163 1
	 * @@see CH.ifa.draw.util.StorableInput#readBoolean()
@


1.3
log
@All test cases now pass!
@
text
@d1 10
d16 2
d23 6
a28 7
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

d32 4
a35 4
* TestCase StorableInputTest is generated by
* JUnitDoclet to hold the tests for StorableInput.
* @@see CH.ifa.draw.util.StorableInput
*/
d42 142
a183 153
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.util.StorableInput storableinput = null;
  // JUnitDoclet end class
  
  /**
  * Constructor StorableInputTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public StorableInputTest(String name) {
    // JUnitDoclet begin method StorableInputTest
    super(name);
    // JUnitDoclet end method StorableInputTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.util.StorableInput createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
	File tempFile = File.createTempFile("StorableInputTest", "dat");
	FileInputStream stream = new FileInputStream(tempFile);
	tempFile.deleteOnExit();
    return new CH.ifa.draw.util.StorableInput(stream);
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    storableinput = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    storableinput = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method readStorable()
  /**
  * Method testReadStorable is testing readStorable
  * @@see CH.ifa.draw.util.StorableInput#readStorable()
  */
  // JUnitDoclet end javadoc_method readStorable()
  public void testReadStorable() throws Exception {
    // JUnitDoclet begin method readStorable
    // JUnitDoclet end method readStorable
  }
  
  // JUnitDoclet begin javadoc_method readString()
  /**
  * Method testReadString is testing readString
  * @@see CH.ifa.draw.util.StorableInput#readString()
  */
  // JUnitDoclet end javadoc_method readString()
  public void testReadString() throws Exception {
    // JUnitDoclet begin method readString
    // JUnitDoclet end method readString
  }
  
  // JUnitDoclet begin javadoc_method readInt()
  /**
  * Method testReadInt is testing readInt
  * @@see CH.ifa.draw.util.StorableInput#readInt()
  */
  // JUnitDoclet end javadoc_method readInt()
  public void testReadInt() throws Exception {
    // JUnitDoclet begin method readInt
    // JUnitDoclet end method readInt
  }
  
  // JUnitDoclet begin javadoc_method readLong()
  /**
  * Method testReadLong is testing readLong
  * @@see CH.ifa.draw.util.StorableInput#readLong()
  */
  // JUnitDoclet end javadoc_method readLong()
  public void testReadLong() throws Exception {
    // JUnitDoclet begin method readLong
    // JUnitDoclet end method readLong
  }
  
  // JUnitDoclet begin javadoc_method readColor()
  /**
  * Method testReadColor is testing readColor
  * @@see CH.ifa.draw.util.StorableInput#readColor()
  */
  // JUnitDoclet end javadoc_method readColor()
  public void testReadColor() throws Exception {
    // JUnitDoclet begin method readColor
    // JUnitDoclet end method readColor
  }
  
  // JUnitDoclet begin javadoc_method readDouble()
  /**
  * Method testReadDouble is testing readDouble
  * @@see CH.ifa.draw.util.StorableInput#readDouble()
  */
  // JUnitDoclet end javadoc_method readDouble()
  public void testReadDouble() throws Exception {
    // JUnitDoclet begin method readDouble
    // JUnitDoclet end method readDouble
  }
  
  // JUnitDoclet begin javadoc_method readBoolean()
  /**
  * Method testReadBoolean is testing readBoolean
  * @@see CH.ifa.draw.util.StorableInput#readBoolean()
  */
  // JUnitDoclet end javadoc_method readBoolean()
  public void testReadBoolean() throws Exception {
    // JUnitDoclet begin method readBoolean
    // JUnitDoclet end method readBoolean
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(StorableInputTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d3 1
d52 3
a54 3
	// todo
	String fileName = "";
	FileInputStream stream = new FileInputStream(fileName);
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@d3 3
a6 3
// JUnitDoclet begin import
import CH.ifa.draw.util.StorableInput;
import java.io.FileInputStream;
@

