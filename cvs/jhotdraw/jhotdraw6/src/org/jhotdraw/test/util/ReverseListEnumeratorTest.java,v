head	1.4;
access;
symbols
	jhotdraw60b1-release:1.4
	package_rename:1.4
	directory_rename:1.3
	reorg_6x_split_initial:1.3
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.4
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.09.21.18.45;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.util;

import java.util.List;

import junit.framework.TestCase;

// JUnitDoclet begin import
import org.jhotdraw.util.CollectionsFactory;
import org.jhotdraw.util.ReverseListEnumerator;
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase ReverseListEnumeratorTest is generated by
 * JUnitDoclet to hold the tests for ReverseListEnumerator.
 * @@see org.jhotdraw.util.ReverseListEnumerator
 */
// JUnitDoclet end javadoc_class
public class ReverseListEnumeratorTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private ReverseListEnumerator reverselistenumerator;
	// JUnitDoclet end class

	/**
	 * Constructor ReverseListEnumeratorTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public ReverseListEnumeratorTest(String name) {
		// JUnitDoclet begin method ReverseListEnumeratorTest
		super(name);
		// JUnitDoclet end method ReverseListEnumeratorTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public ReverseListEnumerator createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		List l = CollectionsFactory.current().createList();
		l.add("TestString1");
		l.add("TestString2");
		return new ReverseListEnumerator(l);
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		reverselistenumerator = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		reverselistenumerator = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method hasNext()
	/**
	 * Method testHasNext is testing hasNext
	 * @@see org.jhotdraw.util.ReverseListEnumerator#hasNext()
	 */
	// JUnitDoclet end javadoc_method hasNext()
	public void testHasNext() throws Exception {
		// JUnitDoclet begin method hasNext
		// JUnitDoclet end method hasNext
	}

	// JUnitDoclet begin javadoc_method next()
	/**
	 * Method testNext is testing next
	 * @@see org.jhotdraw.util.ReverseListEnumerator#next()
	 */
	// JUnitDoclet end javadoc_method next()
	public void testNext() throws Exception {
		// JUnitDoclet begin method next
		// JUnitDoclet end method next
	}

	// JUnitDoclet begin javadoc_method remove()
	/**
	 * Method testRemove is testing remove
	 * @@see org.jhotdraw.util.ReverseListEnumerator#remove()
	 */
	// JUnitDoclet end javadoc_method remove()
	public void testRemove() throws Exception {
		// JUnitDoclet begin method remove
		// JUnitDoclet end method remove
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
@


1.3
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d11 1
a11 1
package CH.ifa.draw.test.util;
d18 2
a19 2
import CH.ifa.draw.util.CollectionsFactory;
import CH.ifa.draw.util.ReverseListEnumerator;
d34 1
a34 1
 * @@see CH.ifa.draw.util.ReverseListEnumerator
d61 1
a61 1
	public CH.ifa.draw.util.ReverseListEnumerator createInstance() throws Exception {
d66 1
a66 1
		return new CH.ifa.draw.util.ReverseListEnumerator(l);
d97 1
a97 1
	 * @@see CH.ifa.draw.util.ReverseListEnumerator#hasNext()
d108 1
a108 1
	 * @@see CH.ifa.draw.util.ReverseListEnumerator#next()
d119 1
a119 1
	 * @@see CH.ifa.draw.util.ReverseListEnumerator#remove()
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d1 10
d19 1
d23 6
a28 7
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

d32 4
a35 4
* TestCase ReverseListEnumeratorTest is generated by
* JUnitDoclet to hold the tests for ReverseListEnumerator.
* @@see CH.ifa.draw.util.ReverseListEnumerator
*/
d42 98
a139 109
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.util.ReverseListEnumerator reverselistenumerator = null;
  // JUnitDoclet end class
  
  /**
  * Constructor ReverseListEnumeratorTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public ReverseListEnumeratorTest(String name) {
    // JUnitDoclet begin method ReverseListEnumeratorTest
    super(name);
    // JUnitDoclet end method ReverseListEnumeratorTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.util.ReverseListEnumerator createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
	List l = CollectionsFactory.current().createList();
	l.add("TestString1");
	l.add("TestString2");
    return new CH.ifa.draw.util.ReverseListEnumerator(l);
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    reverselistenumerator = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    reverselistenumerator = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method hasNext()
  /**
  * Method testHasNext is testing hasNext
  * @@see CH.ifa.draw.util.ReverseListEnumerator#hasNext()
  */
  // JUnitDoclet end javadoc_method hasNext()
  public void testHasNext() throws Exception {
    // JUnitDoclet begin method hasNext
    // JUnitDoclet end method hasNext
  }
  
  // JUnitDoclet begin javadoc_method next()
  /**
  * Method testNext is testing next
  * @@see CH.ifa.draw.util.ReverseListEnumerator#next()
  */
  // JUnitDoclet end javadoc_method next()
  public void testNext() throws Exception {
    // JUnitDoclet begin method next
    // JUnitDoclet end method next
  }
  
  // JUnitDoclet begin javadoc_method remove()
  /**
  * Method testRemove is testing remove
  * @@see CH.ifa.draw.util.ReverseListEnumerator#remove()
  */
  // JUnitDoclet end javadoc_method remove()
  public void testRemove() throws Exception {
    // JUnitDoclet begin method remove
    // JUnitDoclet end method remove
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(ReverseListEnumeratorTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@d3 2
d6 1
a7 1
import CH.ifa.draw.util.ReverseListEnumerator;
a8 2

import java.util.List;
@

