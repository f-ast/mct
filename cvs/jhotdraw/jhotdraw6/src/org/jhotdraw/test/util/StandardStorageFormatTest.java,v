head	1.4;
access;
symbols
	jhotdraw60b1-release:1.4
	package_rename:1.4
	directory_rename:1.3
	reorg_6x_split_initial:1.3
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.4
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.09.21.18.45;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.util;

// JUnitDoclet begin import
import org.jhotdraw.util.StandardStorageFormat;
import junit.framework.TestCase;
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase StandardStorageFormatTest is generated by
 * JUnitDoclet to hold the tests for StandardStorageFormat.
 * @@see org.jhotdraw.util.StandardStorageFormat
 */
// JUnitDoclet end javadoc_class
public class StandardStorageFormatTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private StandardStorageFormat standardstorageformat;
	// JUnitDoclet end class

	/**
	 * Constructor StandardStorageFormatTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public StandardStorageFormatTest(String name) {
		// JUnitDoclet begin method StandardStorageFormatTest
		super(name);
		// JUnitDoclet end method StandardStorageFormatTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public StandardStorageFormat createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new StandardStorageFormat();
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		standardstorageformat = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		standardstorageformat = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method setFileExtension()
	/**
	 * Method testSetGetFileExtension is testing setFileExtension
	 * and getFileExtension together by setting some value
	 * and verifying it by reading.
	 * @@see org.jhotdraw.util.StandardStorageFormat#setFileExtension(java.lang.String)
	 * @@see org.jhotdraw.util.StandardStorageFormat#getFileExtension()
	 */
	// JUnitDoclet end javadoc_method setFileExtension()
	public void testSetGetFileExtension() throws Exception {
		// JUnitDoclet begin method setFileExtension getFileExtension
		java.lang.String[] tests = { "", " ", "a", "A", "ä", "ß", "0123456789", "012345678901234567890", "\n", null };

		for (int i = 0; i < tests.length; i++) {
			standardstorageformat.setFileExtension(tests[i]);
			assertEquals(tests[i], standardstorageformat.getFileExtension());
		}
		// JUnitDoclet end method setFileExtension getFileExtension
	}

	// JUnitDoclet begin javadoc_method createFileDescription()
	/**
	 * Method testCreateFileDescription is testing createFileDescription
	 * @@see org.jhotdraw.util.StandardStorageFormat#createFileDescription()
	 */
	// JUnitDoclet end javadoc_method createFileDescription()
	public void testCreateFileDescription() throws Exception {
		// JUnitDoclet begin method createFileDescription
		// JUnitDoclet end method createFileDescription
	}

	// JUnitDoclet begin javadoc_method setFileDescription()
	/**
	 * Method testSetGetFileDescription is testing setFileDescription
	 * and getFileDescription together by setting some value
	 * and verifying it by reading.
	 * @@see org.jhotdraw.util.StandardStorageFormat#setFileDescription(java.lang.String)
	 * @@see org.jhotdraw.util.StandardStorageFormat#getFileDescription()
	 */
	// JUnitDoclet end javadoc_method setFileDescription()
	public void testSetGetFileDescription() throws Exception {
		// JUnitDoclet begin method setFileDescription getFileDescription
		java.lang.String[] tests = { "", " ", "a", "A", "ä", "ß", "0123456789", "012345678901234567890", "\n", null };

		for (int i = 0; i < tests.length; i++) {
			standardstorageformat.setFileDescription(tests[i]);
			assertEquals(tests[i], standardstorageformat.getFileDescription());
		}
		// JUnitDoclet end method setFileDescription getFileDescription
	}

	// JUnitDoclet begin javadoc_method setFileFilter()
	/**
	 * Method testSetGetFileFilter is testing setFileFilter
	 * and getFileFilter together by setting some value
	 * and verifying it by reading.
	 * @@see org.jhotdraw.util.StandardStorageFormat#setFileFilter(javax.swing.filechooser.FileFilter)
	 * @@see org.jhotdraw.util.StandardStorageFormat#getFileFilter()
	 */
	// JUnitDoclet end javadoc_method setFileFilter()
	public void testSetGetFileFilter() throws Exception {
		// JUnitDoclet begin method setFileFilter getFileFilter
		javax.swing.filechooser.FileFilter[] tests = { null, null };

		for (int i = 0; i < tests.length; i++) {
			standardstorageformat.setFileFilter(tests[i]);
			assertEquals(tests[i], standardstorageformat.getFileFilter());
		}
		// JUnitDoclet end method setFileFilter getFileFilter
	}

	// JUnitDoclet begin javadoc_method store()
	/**
	 * Method testStore is testing store
	 * @@see org.jhotdraw.util.StandardStorageFormat#store(java.lang.String, org.jhotdraw.framework.Drawing)
	 */
	// JUnitDoclet end javadoc_method store()
	public void testStore() throws Exception {
		// JUnitDoclet begin method store
		// JUnitDoclet end method store
	}

	// JUnitDoclet begin javadoc_method restore()
	/**
	 * Method testRestore is testing restore
	 * @@see org.jhotdraw.util.StandardStorageFormat#restore(java.lang.String)
	 */
	// JUnitDoclet end javadoc_method restore()
	public void testRestore() throws Exception {
		// JUnitDoclet begin method restore
		// JUnitDoclet end method restore
	}

	// JUnitDoclet begin javadoc_method equals()
	/**
	 * Method testEquals is testing equals
	 * @@see org.jhotdraw.util.StandardStorageFormat#equals(java.lang.Object)
	 */
	// JUnitDoclet end javadoc_method equals()
	public void testEquals() throws Exception {
		// JUnitDoclet begin method equals
		// JUnitDoclet end method equals
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
@


1.3
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d11 1
a11 1
package CH.ifa.draw.test.util;
d14 1
a14 1
import CH.ifa.draw.util.StandardStorageFormat;
d30 1
a30 1
 * @@see CH.ifa.draw.util.StandardStorageFormat
d57 1
a57 1
	public CH.ifa.draw.util.StandardStorageFormat createInstance() throws Exception {
d59 1
a59 1
		return new CH.ifa.draw.util.StandardStorageFormat();
d92 2
a93 2
	 * @@see CH.ifa.draw.util.StandardStorageFormat#setFileExtension(java.lang.String)
	 * @@see CH.ifa.draw.util.StandardStorageFormat#getFileExtension()
d110 1
a110 1
	 * @@see CH.ifa.draw.util.StandardStorageFormat#createFileDescription()
d123 2
a124 2
	 * @@see CH.ifa.draw.util.StandardStorageFormat#setFileDescription(java.lang.String)
	 * @@see CH.ifa.draw.util.StandardStorageFormat#getFileDescription()
d143 2
a144 2
	 * @@see CH.ifa.draw.util.StandardStorageFormat#setFileFilter(javax.swing.filechooser.FileFilter)
	 * @@see CH.ifa.draw.util.StandardStorageFormat#getFileFilter()
d161 1
a161 1
	 * @@see CH.ifa.draw.util.StandardStorageFormat#store(java.lang.String, CH.ifa.draw.framework.Drawing)
d172 1
a172 1
	 * @@see CH.ifa.draw.util.StandardStorageFormat#restore(java.lang.String)
d183 1
a183 1
	 * @@see CH.ifa.draw.util.StandardStorageFormat#equals(java.lang.Object)
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d1 10
d14 1
d19 6
a24 7
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

d28 4
a31 4
* TestCase StandardStorageFormatTest is generated by
* JUnitDoclet to hold the tests for StandardStorageFormat.
* @@see CH.ifa.draw.util.StandardStorageFormat
*/
d38 166
a203 177
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.util.StandardStorageFormat standardstorageformat = null;
  // JUnitDoclet end class
  
  /**
  * Constructor StandardStorageFormatTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public StandardStorageFormatTest(String name) {
    // JUnitDoclet begin method StandardStorageFormatTest
    super(name);
    // JUnitDoclet end method StandardStorageFormatTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.util.StandardStorageFormat createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new CH.ifa.draw.util.StandardStorageFormat();
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    standardstorageformat = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    standardstorageformat = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method setFileExtension()
  /**
  * Method testSetGetFileExtension is testing setFileExtension
  * and getFileExtension together by setting some value
  * and verifying it by reading.
  * @@see CH.ifa.draw.util.StandardStorageFormat#setFileExtension(java.lang.String)
  * @@see CH.ifa.draw.util.StandardStorageFormat#getFileExtension()
  */
  // JUnitDoclet end javadoc_method setFileExtension()
  public void testSetGetFileExtension() throws Exception {
    // JUnitDoclet begin method setFileExtension getFileExtension
    java.lang.String[] tests = {"", " ", "a", "A", "ä", "ß", "0123456789", "012345678901234567890", "\n", null};
    
    for (int i = 0; i < tests.length; i++) {
      standardstorageformat.setFileExtension(tests[i]);
      assertEquals(tests[i], standardstorageformat.getFileExtension());
    }
    // JUnitDoclet end method setFileExtension getFileExtension
  }
  
  // JUnitDoclet begin javadoc_method createFileDescription()
  /**
  * Method testCreateFileDescription is testing createFileDescription
  * @@see CH.ifa.draw.util.StandardStorageFormat#createFileDescription()
  */
  // JUnitDoclet end javadoc_method createFileDescription()
  public void testCreateFileDescription() throws Exception {
    // JUnitDoclet begin method createFileDescription
    // JUnitDoclet end method createFileDescription
  }
  
  // JUnitDoclet begin javadoc_method setFileDescription()
  /**
  * Method testSetGetFileDescription is testing setFileDescription
  * and getFileDescription together by setting some value
  * and verifying it by reading.
  * @@see CH.ifa.draw.util.StandardStorageFormat#setFileDescription(java.lang.String)
  * @@see CH.ifa.draw.util.StandardStorageFormat#getFileDescription()
  */
  // JUnitDoclet end javadoc_method setFileDescription()
  public void testSetGetFileDescription() throws Exception {
    // JUnitDoclet begin method setFileDescription getFileDescription
    java.lang.String[] tests = {"", " ", "a", "A", "ä", "ß", "0123456789", "012345678901234567890", "\n", null};
    
    for (int i = 0; i < tests.length; i++) {
      standardstorageformat.setFileDescription(tests[i]);
      assertEquals(tests[i], standardstorageformat.getFileDescription());
    }
    // JUnitDoclet end method setFileDescription getFileDescription
  }
  
  // JUnitDoclet begin javadoc_method setFileFilter()
  /**
  * Method testSetGetFileFilter is testing setFileFilter
  * and getFileFilter together by setting some value
  * and verifying it by reading.
  * @@see CH.ifa.draw.util.StandardStorageFormat#setFileFilter(javax.swing.filechooser.FileFilter)
  * @@see CH.ifa.draw.util.StandardStorageFormat#getFileFilter()
  */
  // JUnitDoclet end javadoc_method setFileFilter()
  public void testSetGetFileFilter() throws Exception {
    // JUnitDoclet begin method setFileFilter getFileFilter
    javax.swing.filechooser.FileFilter[] tests = {null, null};
    
    for (int i = 0; i < tests.length; i++) {
      standardstorageformat.setFileFilter(tests[i]);
      assertEquals(tests[i], standardstorageformat.getFileFilter());
    }
    // JUnitDoclet end method setFileFilter getFileFilter
  }
  
  // JUnitDoclet begin javadoc_method store()
  /**
  * Method testStore is testing store
  * @@see CH.ifa.draw.util.StandardStorageFormat#store(java.lang.String, CH.ifa.draw.framework.Drawing)
  */
  // JUnitDoclet end javadoc_method store()
  public void testStore() throws Exception {
    // JUnitDoclet begin method store
    // JUnitDoclet end method store
  }
  
  // JUnitDoclet begin javadoc_method restore()
  /**
  * Method testRestore is testing restore
  * @@see CH.ifa.draw.util.StandardStorageFormat#restore(java.lang.String)
  */
  // JUnitDoclet end javadoc_method restore()
  public void testRestore() throws Exception {
    // JUnitDoclet begin method restore
    // JUnitDoclet end method restore
  }
  
  // JUnitDoclet begin javadoc_method equals()
  /**
  * Method testEquals is testing equals
  * @@see CH.ifa.draw.util.StandardStorageFormat#equals(java.lang.Object)
  */
  // JUnitDoclet end javadoc_method equals()
  public void testEquals() throws Exception {
    // JUnitDoclet begin method equals
    // JUnitDoclet end method equals
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(StandardStorageFormatTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@d3 1
a4 2
// JUnitDoclet begin import
import CH.ifa.draw.util.StandardStorageFormat;
@

