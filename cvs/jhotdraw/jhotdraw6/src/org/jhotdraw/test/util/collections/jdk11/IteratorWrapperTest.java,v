head	1.3;
access;
symbols
	jhotdraw60b1-release:1.3
	package_rename:1.3
	directory_rename:1.2
	reorg_6x_split_initial:1.2
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.3
date	2004.01.09.22.53.42;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.09.21.18.45;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.util.collections.jdk11;

import junit.framework.TestCase;
// JUnitDoclet begin import
import org.jhotdraw.figures.RectangleFigure;
import org.jhotdraw.figures.PolyLineFigure;
import org.jhotdraw.util.collections.jdk11.IteratorWrapper;

import java.util.Vector;
import java.awt.*;
// JUnitDoclet end import

/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

// JUnitDoclet begin javadoc_class
/**
* TestCase IteratorWrapperTest is generated by
* JUnitDoclet to hold the tests for IteratorWrapper.
* @@see org.jhotdraw.util.collections.jdk11.IteratorWrapper
*/
// JUnitDoclet end javadoc_class
public class IteratorWrapperTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private IteratorWrapper iteratorwrapper;
	// JUnitDoclet end class

	/**
	* Constructor IteratorWrapperTest is
	* basically calling the inherited constructor to
	* initiate the TestCase for use by the Framework.
	*/
	public IteratorWrapperTest(String name) {
		// JUnitDoclet begin method IteratorWrapperTest
		super(name);
		// JUnitDoclet end method IteratorWrapperTest
	}

	/**
	* Factory method for instances of the class to be tested.
	*/
	public IteratorWrapper createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		Vector v = new Vector();
		v.add(new RectangleFigure(new Point(10, 10), new Point(100, 100)));
		v.add(new PolyLineFigure(20, 20));
		v.add(new RectangleFigure(new Point(100, 10), new Point(150, 100)));
		return new IteratorWrapper(v.elements());
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	* Method setUp is overwriting the framework method to
	* prepare an instance of this TestCase for a single test.
	* It's called from the JUnit framework only.
	*/
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		iteratorwrapper = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	* Method tearDown is overwriting the framework method to
	* clean up after each single test of this TestCase.
	* It's called from the JUnit framework only.
	*/
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		iteratorwrapper = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method hasNext()
	/**
	* Method testHasNext is testing hasNext
	* @@see org.jhotdraw.util.collections.jdk11.IteratorWrapper#hasNext()
	*/
	// JUnitDoclet end javadoc_method hasNext()
	public void testHasNext() throws Exception {
		// JUnitDoclet begin method hasNext
		// JUnitDoclet end method hasNext
	}

	// JUnitDoclet begin javadoc_method next()
	/**
	* Method testNext is testing next
	* @@see org.jhotdraw.util.collections.jdk11.IteratorWrapper#next()
	*/
	// JUnitDoclet end javadoc_method next()
	public void testNext() throws Exception {
		// JUnitDoclet begin method next
		// JUnitDoclet end method next
	}

	// JUnitDoclet begin javadoc_method remove()
	/**
	* Method testRemove is testing remove
	* @@see org.jhotdraw.util.collections.jdk11.IteratorWrapper#remove()
	*/
	// JUnitDoclet end javadoc_method remove()
	public void testRemove() throws Exception {
		// JUnitDoclet begin method remove
		// JUnitDoclet end method remove
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	* JUnitDoclet moves marker to this method, if there is not match
	* for them in the regenerated code and if the marker is not empty.
	* This way, no test gets lost when regenerating after renaming.
	* <b>Method testVault is supposed to be empty.</b>
	*/
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}
}
@


1.2
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d11 1
a11 1
package CH.ifa.draw.test.util.collections.jdk11;
d15 3
a17 3
import CH.ifa.draw.figures.RectangleFigure;
import CH.ifa.draw.figures.PolyLineFigure;
import CH.ifa.draw.util.collections.jdk11.IteratorWrapper;
d35 1
a35 1
* @@see CH.ifa.draw.util.collections.jdk11.IteratorWrapper
d62 1
a62 1
	public CH.ifa.draw.util.collections.jdk11.IteratorWrapper createInstance() throws Exception {
d68 1
a68 1
		return new CH.ifa.draw.util.collections.jdk11.IteratorWrapper(v.elements());
d99 1
a99 1
	* @@see CH.ifa.draw.util.collections.jdk11.IteratorWrapper#hasNext()
d110 1
a110 1
	* @@see CH.ifa.draw.util.collections.jdk11.IteratorWrapper#next()
d121 1
a121 1
	* @@see CH.ifa.draw.util.collections.jdk11.IteratorWrapper#remove()
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@d1 10
d17 2
a30 1

d43 98
a140 110
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.util.collections.jdk11.IteratorWrapper iteratorwrapper = null;
  // JUnitDoclet end class
  
  /**
  * Constructor IteratorWrapperTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public IteratorWrapperTest(String name) {
    // JUnitDoclet begin method IteratorWrapperTest
    super(name);
    // JUnitDoclet end method IteratorWrapperTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.util.collections.jdk11.IteratorWrapper createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
	Vector v = new Vector();
	v.add(new RectangleFigure(new Point(10,10), new Point(100,100)));
	v.add(new PolyLineFigure(20, 20));
	v.add(new RectangleFigure(new Point(100,10), new Point(150,100)));
    return new CH.ifa.draw.util.collections.jdk11.IteratorWrapper(v.elements());
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    iteratorwrapper = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    iteratorwrapper = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method hasNext()
  /**
  * Method testHasNext is testing hasNext
  * @@see CH.ifa.draw.util.collections.jdk11.IteratorWrapper#hasNext()
  */
  // JUnitDoclet end javadoc_method hasNext()
  public void testHasNext() throws Exception {
    // JUnitDoclet begin method hasNext
    // JUnitDoclet end method hasNext
  }
  
  // JUnitDoclet begin javadoc_method next()
  /**
  * Method testNext is testing next
  * @@see CH.ifa.draw.util.collections.jdk11.IteratorWrapper#next()
  */
  // JUnitDoclet end javadoc_method next()
  public void testNext() throws Exception {
    // JUnitDoclet begin method next
    // JUnitDoclet end method next
  }
  
  // JUnitDoclet begin javadoc_method remove()
  /**
  * Method testRemove is testing remove
  * @@see CH.ifa.draw.util.collections.jdk11.IteratorWrapper#remove()
  */
  // JUnitDoclet end javadoc_method remove()
  public void testRemove() throws Exception {
    // JUnitDoclet begin method remove
    // JUnitDoclet end method remove
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(IteratorWrapperTest.class);
    // JUnitDoclet end method testcase.main
  }
@

