head	1.4;
access;
symbols
	jhotdraw60b1-release:1.4
	package_rename:1.4
	directory_rename:1.3
	reorg_6x_split_initial:1.3
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.4
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.09.21.18.45;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.figures;

import org.jhotdraw.figures.NullFigure;
import junit.framework.TestCase;
// JUnitDoclet begin import
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase NullFigureTest is generated by
 * JUnitDoclet to hold the tests for NullFigure.
 * @@see org.jhotdraw.figures.NullFigure
 */
// JUnitDoclet end javadoc_class
public class NullFigureTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private NullFigure nullfigure;
	// JUnitDoclet end class

	/**
	 * Constructor NullFigureTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public NullFigureTest(String name) {
		// JUnitDoclet begin method NullFigureTest
		super(name);
		// JUnitDoclet end method NullFigureTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public NullFigure createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new NullFigure();
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		nullfigure = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		nullfigure = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method basicDisplayBox()
	/**
	 * Method testBasicDisplayBox is testing basicDisplayBox
	 * @@see org.jhotdraw.figures.NullFigure#basicDisplayBox(java.awt.Point, java.awt.Point)
	 */
	// JUnitDoclet end javadoc_method basicDisplayBox()
	public void testBasicDisplayBox() throws Exception {
		// JUnitDoclet begin method basicDisplayBox
		// JUnitDoclet end method basicDisplayBox
	}

	// JUnitDoclet begin javadoc_method displayBox()
	/**
	 * Method testDisplayBox is testing displayBox
	 * @@see org.jhotdraw.figures.NullFigure#displayBox()
	 */
	// JUnitDoclet end javadoc_method displayBox()
	public void testDisplayBox() throws Exception {
		// JUnitDoclet begin method displayBox
		// JUnitDoclet end method displayBox
	}

	// JUnitDoclet begin javadoc_method draw()
	/**
	 * Method testDraw is testing draw
	 * @@see org.jhotdraw.figures.NullFigure#draw(java.awt.Graphics)
	 */
	// JUnitDoclet end javadoc_method draw()
	public void testDraw() throws Exception {
		// JUnitDoclet begin method draw
		// JUnitDoclet end method draw
	}

	// JUnitDoclet begin javadoc_method handles()
	/**
	 * Method testHandles is testing handles
	 * @@see org.jhotdraw.figures.NullFigure#handles()
	 */
	// JUnitDoclet end javadoc_method handles()
	public void testHandles() throws Exception {
		// JUnitDoclet begin method handles
		// JUnitDoclet end method handles
	}

	// JUnitDoclet begin javadoc_method isEmpty()
	/**
	 * Method testIsEmpty is testing isEmpty
	 * @@see org.jhotdraw.figures.NullFigure#isEmpty()
	 */
	// JUnitDoclet end javadoc_method isEmpty()
	public void testIsEmpty() throws Exception {
		// JUnitDoclet begin method isEmpty
		// JUnitDoclet end method isEmpty
	}

	// JUnitDoclet begin javadoc_method figures()
	/**
	 * Method testFigures is testing figures
	 * @@see org.jhotdraw.figures.NullFigure#figures()
	 */
	// JUnitDoclet end javadoc_method figures()
	public void testFigures() throws Exception {
		// JUnitDoclet begin method figures
		// JUnitDoclet end method figures
	}

	// JUnitDoclet begin javadoc_method findFigureInside()
	/**
	 * Method testFindFigureInside is testing findFigureInside
	 * @@see org.jhotdraw.figures.NullFigure#findFigureInside(int, int)
	 */
	// JUnitDoclet end javadoc_method findFigureInside()
	public void testFindFigureInside() throws Exception {
		// JUnitDoclet begin method findFigureInside
		// JUnitDoclet end method findFigureInside
	}

	// JUnitDoclet begin javadoc_method clone()
	/**
	 * Method testClone is testing clone
	 * @@see org.jhotdraw.figures.NullFigure#clone()
	 */
	// JUnitDoclet end javadoc_method clone()
	public void testClone() throws Exception {
		// JUnitDoclet begin method clone
		// JUnitDoclet end method clone
	}

	// JUnitDoclet begin javadoc_method includes()
	/**
	 * Method testIncludes is testing includes
	 * @@see org.jhotdraw.figures.NullFigure#includes(org.jhotdraw.framework.Figure)
	 */
	// JUnitDoclet end javadoc_method includes()
	public void testIncludes() throws Exception {
		// JUnitDoclet begin method includes
		// JUnitDoclet end method includes
	}

	// JUnitDoclet begin javadoc_method decompose()
	/**
	 * Method testDecompose is testing decompose
	 * @@see org.jhotdraw.figures.NullFigure#decompose()
	 */
	// JUnitDoclet end javadoc_method decompose()
	public void testDecompose() throws Exception {
		// JUnitDoclet begin method decompose
		// JUnitDoclet end method decompose
	}

	// JUnitDoclet begin javadoc_method release()
	/**
	 * Method testRelease is testing release
	 * @@see org.jhotdraw.figures.NullFigure#release()
	 */
	// JUnitDoclet end javadoc_method release()
	public void testRelease() throws Exception {
		// JUnitDoclet begin method release
		// JUnitDoclet end method release
	}

	// JUnitDoclet begin javadoc_method invalidate()
	/**
	 * Method testInvalidate is testing invalidate
	 * @@see org.jhotdraw.figures.NullFigure#invalidate()
	 */
	// JUnitDoclet end javadoc_method invalidate()
	public void testInvalidate() throws Exception {
		// JUnitDoclet begin method invalidate
		// JUnitDoclet end method invalidate
	}

	// JUnitDoclet begin javadoc_method getAttribute()
	/**
	 * Method testGetAttribute is testing getAttribute
	 * @@see org.jhotdraw.figures.NullFigure#getAttribute(java.lang.String)
	 */
	// JUnitDoclet end javadoc_method getAttribute()
	public void testGetAttribute() throws Exception {
		// JUnitDoclet begin method getAttribute
		// JUnitDoclet end method getAttribute
	}

	// JUnitDoclet begin javadoc_method setAttribute()
	/**
	 * Method testSetAttribute is testing setAttribute
	 * @@see org.jhotdraw.figures.NullFigure#setAttribute(java.lang.String, java.lang.Object)
	 */
	// JUnitDoclet end javadoc_method setAttribute()
	public void testSetAttribute() throws Exception {
		// JUnitDoclet begin method setAttribute
		// JUnitDoclet end method setAttribute
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
@


1.3
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d11 1
a11 1
package CH.ifa.draw.test.figures;
d13 1
a13 1
import CH.ifa.draw.figures.NullFigure;
d30 1
a30 1
 * @@see CH.ifa.draw.figures.NullFigure
d57 1
a57 1
	public CH.ifa.draw.figures.NullFigure createInstance() throws Exception {
d59 1
a59 1
		return new CH.ifa.draw.figures.NullFigure();
d90 1
a90 1
	 * @@see CH.ifa.draw.figures.NullFigure#basicDisplayBox(java.awt.Point, java.awt.Point)
d101 1
a101 1
	 * @@see CH.ifa.draw.figures.NullFigure#displayBox()
d112 1
a112 1
	 * @@see CH.ifa.draw.figures.NullFigure#draw(java.awt.Graphics)
d123 1
a123 1
	 * @@see CH.ifa.draw.figures.NullFigure#handles()
d134 1
a134 1
	 * @@see CH.ifa.draw.figures.NullFigure#isEmpty()
d145 1
a145 1
	 * @@see CH.ifa.draw.figures.NullFigure#figures()
d156 1
a156 1
	 * @@see CH.ifa.draw.figures.NullFigure#findFigureInside(int, int)
d167 1
a167 1
	 * @@see CH.ifa.draw.figures.NullFigure#clone()
d178 1
a178 1
	 * @@see CH.ifa.draw.figures.NullFigure#includes(CH.ifa.draw.framework.Figure)
d189 1
a189 1
	 * @@see CH.ifa.draw.figures.NullFigure#decompose()
d200 1
a200 1
	 * @@see CH.ifa.draw.figures.NullFigure#release()
d211 1
a211 1
	 * @@see CH.ifa.draw.figures.NullFigure#invalidate()
d222 1
a222 1
	 * @@see CH.ifa.draw.figures.NullFigure#getAttribute(java.lang.String)
d233 1
a233 1
	 * @@see CH.ifa.draw.figures.NullFigure#setAttribute(java.lang.String, java.lang.Object)
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d1 10
d13 1
d19 6
a24 7
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

d28 4
a31 4
* TestCase NullFigureTest is generated by
* JUnitDoclet to hold the tests for NullFigure.
* @@see CH.ifa.draw.figures.NullFigure
*/
d38 216
a253 227
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.figures.NullFigure nullfigure = null;
  // JUnitDoclet end class
  
  /**
  * Constructor NullFigureTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public NullFigureTest(String name) {
    // JUnitDoclet begin method NullFigureTest
    super(name);
    // JUnitDoclet end method NullFigureTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.figures.NullFigure createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new CH.ifa.draw.figures.NullFigure();
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    nullfigure = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    nullfigure = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method basicDisplayBox()
  /**
  * Method testBasicDisplayBox is testing basicDisplayBox
  * @@see CH.ifa.draw.figures.NullFigure#basicDisplayBox(java.awt.Point, java.awt.Point)
  */
  // JUnitDoclet end javadoc_method basicDisplayBox()
  public void testBasicDisplayBox() throws Exception {
    // JUnitDoclet begin method basicDisplayBox
    // JUnitDoclet end method basicDisplayBox
  }
  
  // JUnitDoclet begin javadoc_method displayBox()
  /**
  * Method testDisplayBox is testing displayBox
  * @@see CH.ifa.draw.figures.NullFigure#displayBox()
  */
  // JUnitDoclet end javadoc_method displayBox()
  public void testDisplayBox() throws Exception {
    // JUnitDoclet begin method displayBox
    // JUnitDoclet end method displayBox
  }
  
  // JUnitDoclet begin javadoc_method draw()
  /**
  * Method testDraw is testing draw
  * @@see CH.ifa.draw.figures.NullFigure#draw(java.awt.Graphics)
  */
  // JUnitDoclet end javadoc_method draw()
  public void testDraw() throws Exception {
    // JUnitDoclet begin method draw
    // JUnitDoclet end method draw
  }
  
  // JUnitDoclet begin javadoc_method handles()
  /**
  * Method testHandles is testing handles
  * @@see CH.ifa.draw.figures.NullFigure#handles()
  */
  // JUnitDoclet end javadoc_method handles()
  public void testHandles() throws Exception {
    // JUnitDoclet begin method handles
    // JUnitDoclet end method handles
  }
  
  // JUnitDoclet begin javadoc_method isEmpty()
  /**
  * Method testIsEmpty is testing isEmpty
  * @@see CH.ifa.draw.figures.NullFigure#isEmpty()
  */
  // JUnitDoclet end javadoc_method isEmpty()
  public void testIsEmpty() throws Exception {
    // JUnitDoclet begin method isEmpty
    // JUnitDoclet end method isEmpty
  }
  
  // JUnitDoclet begin javadoc_method figures()
  /**
  * Method testFigures is testing figures
  * @@see CH.ifa.draw.figures.NullFigure#figures()
  */
  // JUnitDoclet end javadoc_method figures()
  public void testFigures() throws Exception {
    // JUnitDoclet begin method figures
    // JUnitDoclet end method figures
  }
  
  // JUnitDoclet begin javadoc_method findFigureInside()
  /**
  * Method testFindFigureInside is testing findFigureInside
  * @@see CH.ifa.draw.figures.NullFigure#findFigureInside(int, int)
  */
  // JUnitDoclet end javadoc_method findFigureInside()
  public void testFindFigureInside() throws Exception {
    // JUnitDoclet begin method findFigureInside
    // JUnitDoclet end method findFigureInside
  }
  
  // JUnitDoclet begin javadoc_method clone()
  /**
  * Method testClone is testing clone
  * @@see CH.ifa.draw.figures.NullFigure#clone()
  */
  // JUnitDoclet end javadoc_method clone()
  public void testClone() throws Exception {
    // JUnitDoclet begin method clone
    // JUnitDoclet end method clone
  }
  
  // JUnitDoclet begin javadoc_method includes()
  /**
  * Method testIncludes is testing includes
  * @@see CH.ifa.draw.figures.NullFigure#includes(CH.ifa.draw.framework.Figure)
  */
  // JUnitDoclet end javadoc_method includes()
  public void testIncludes() throws Exception {
    // JUnitDoclet begin method includes
    // JUnitDoclet end method includes
  }
  
  // JUnitDoclet begin javadoc_method decompose()
  /**
  * Method testDecompose is testing decompose
  * @@see CH.ifa.draw.figures.NullFigure#decompose()
  */
  // JUnitDoclet end javadoc_method decompose()
  public void testDecompose() throws Exception {
    // JUnitDoclet begin method decompose
    // JUnitDoclet end method decompose
  }
  
  // JUnitDoclet begin javadoc_method release()
  /**
  * Method testRelease is testing release
  * @@see CH.ifa.draw.figures.NullFigure#release()
  */
  // JUnitDoclet end javadoc_method release()
  public void testRelease() throws Exception {
    // JUnitDoclet begin method release
    // JUnitDoclet end method release
  }
  
  // JUnitDoclet begin javadoc_method invalidate()
  /**
  * Method testInvalidate is testing invalidate
  * @@see CH.ifa.draw.figures.NullFigure#invalidate()
  */
  // JUnitDoclet end javadoc_method invalidate()
  public void testInvalidate() throws Exception {
    // JUnitDoclet begin method invalidate
    // JUnitDoclet end method invalidate
  }
  
  // JUnitDoclet begin javadoc_method getAttribute()
  /**
  * Method testGetAttribute is testing getAttribute
  * @@see CH.ifa.draw.figures.NullFigure#getAttribute(java.lang.String)
  */
  // JUnitDoclet end javadoc_method getAttribute()
  public void testGetAttribute() throws Exception {
    // JUnitDoclet begin method getAttribute
    // JUnitDoclet end method getAttribute
  }
  
  // JUnitDoclet begin javadoc_method setAttribute()
  /**
  * Method testSetAttribute is testing setAttribute
  * @@see CH.ifa.draw.figures.NullFigure#setAttribute(java.lang.String, java.lang.Object)
  */
  // JUnitDoclet end javadoc_method setAttribute()
  public void testSetAttribute() throws Exception {
    // JUnitDoclet begin method setAttribute
    // JUnitDoclet end method setAttribute
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(NullFigureTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@a4 1
import CH.ifa.draw.figures.NullFigure;
@

