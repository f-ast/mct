head	1.4;
access;
symbols
	jhotdraw60b1-release:1.4
	package_rename:1.4
	directory_rename:1.3
	reorg_6x_split_initial:1.3
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.4
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.09.21.18.45;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.figures;

import java.awt.Point;

// JUnitDoclet begin import
import org.jhotdraw.figures.RectangleFigure;
import org.jhotdraw.figures.TextTool;
import org.jhotdraw.test.JHDTestCase;
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */


// JUnitDoclet begin javadoc_class
/**
 * TestCase TextToolTest is generated by
 * JUnitDoclet to hold the tests for TextTool.
 * @@see org.jhotdraw.figures.TextTool
 */
// JUnitDoclet end javadoc_class
public class TextToolTest
// JUnitDoclet begin extends_implements
extends JHDTestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  private TextTool texttool;
  // JUnitDoclet end class
  
  /**
   * Constructor TextToolTest is
   * basically calling the inherited constructor to
   * initiate the TestCase for use by the Framework.
   */
  public TextToolTest(String name) {
    // JUnitDoclet begin method TextToolTest
    super(name);
    // JUnitDoclet end method TextToolTest
  }
  
  /**
   * Factory method for instances of the class to be tested.
   */
  public TextTool createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new TextTool(getDrawingEditor(), new RectangleFigure(new Point(10,10), new Point(100,100)));
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
   * Method setUp is overwriting the framework method to
   * prepare an instance of this TestCase for a single test.
   * It's called from the JUnit framework only.
   */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    texttool = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
   * Method tearDown is overwriting the framework method to
   * clean up after each single test of this TestCase.
   * It's called from the JUnit framework only.
   */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    texttool = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method mouseDown()
  /**
   * Method testMouseDown is testing mouseDown
   * @@see org.jhotdraw.figures.TextTool#mouseDown(java.awt.event.MouseEvent, int, int)
   */
  // JUnitDoclet end javadoc_method mouseDown()
  public void testMouseDown() throws Exception {
    // JUnitDoclet begin method mouseDown
    // JUnitDoclet end method mouseDown
  }
  
  // JUnitDoclet begin javadoc_method mouseDrag()
  /**
   * Method testMouseDrag is testing mouseDrag
   * @@see org.jhotdraw.figures.TextTool#mouseDrag(java.awt.event.MouseEvent, int, int)
   */
  // JUnitDoclet end javadoc_method mouseDrag()
  public void testMouseDrag() throws Exception {
    // JUnitDoclet begin method mouseDrag
    // JUnitDoclet end method mouseDrag
  }
  
  // JUnitDoclet begin javadoc_method mouseUp()
  /**
   * Method testMouseUp is testing mouseUp
   * @@see org.jhotdraw.figures.TextTool#mouseUp(java.awt.event.MouseEvent, int, int)
   */
  // JUnitDoclet end javadoc_method mouseUp()
  public void testMouseUp() throws Exception {
    // JUnitDoclet begin method mouseUp
    // JUnitDoclet end method mouseUp
  }
  
  // JUnitDoclet begin javadoc_method deactivate()
  /**
   * Method testDeactivate is testing deactivate
   * @@see org.jhotdraw.figures.TextTool#deactivate()
   */
  // JUnitDoclet end javadoc_method deactivate()
  public void testDeactivate() throws Exception {
    // JUnitDoclet begin method deactivate
    // JUnitDoclet end method deactivate
  }
  
  // JUnitDoclet begin javadoc_method activate()
  /**
   * Method testActivate is testing activate
   * @@see org.jhotdraw.figures.TextTool#activate()
   */
  // JUnitDoclet end javadoc_method activate()
  public void testActivate() throws Exception {
    // JUnitDoclet begin method activate
    // JUnitDoclet end method activate
  }
  
  // JUnitDoclet begin javadoc_method isActive()
  /**
   * Method testIsActive is testing isActive
   * @@see org.jhotdraw.figures.TextTool#isActive()
   */
  // JUnitDoclet end javadoc_method isActive()
  public void testIsActive() throws Exception {
    // JUnitDoclet begin method isActive
    // JUnitDoclet end method isActive
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
   * JUnitDoclet moves marker to this method, if there is not match
   * for them in the regenerated code and if the marker is not empty.
   * This way, no test gets lost when regenerating after renaming.
   * <b>Method testVault is supposed to be empty.</b>
   */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  

}
@


1.3
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d11 1
a11 1
package CH.ifa.draw.test.figures;
d16 3
a18 3
import CH.ifa.draw.figures.RectangleFigure;
import CH.ifa.draw.figures.TextTool;
import CH.ifa.draw.test.JHDTestCase;
d34 1
a34 1
 * @@see CH.ifa.draw.figures.TextTool
d61 1
a61 1
  public CH.ifa.draw.figures.TextTool createInstance() throws Exception {
d63 1
a63 1
    return new CH.ifa.draw.figures.TextTool(getDrawingEditor(), new RectangleFigure(new Point(10,10), new Point(100,100)));
d94 1
a94 1
   * @@see CH.ifa.draw.figures.TextTool#mouseDown(java.awt.event.MouseEvent, int, int)
d105 1
a105 1
   * @@see CH.ifa.draw.figures.TextTool#mouseDrag(java.awt.event.MouseEvent, int, int)
d116 1
a116 1
   * @@see CH.ifa.draw.figures.TextTool#mouseUp(java.awt.event.MouseEvent, int, int)
d127 1
a127 1
   * @@see CH.ifa.draw.figures.TextTool#deactivate()
d138 1
a138 1
   * @@see CH.ifa.draw.figures.TextTool#activate()
d149 1
a149 1
   * @@see CH.ifa.draw.figures.TextTool#isActive()
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d1 10
d17 1
d22 6
a27 6
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/
d32 4
a35 4
* TestCase TextToolTest is generated by
* JUnitDoclet to hold the tests for TextTool.
* @@see CH.ifa.draw.figures.TextTool
*/
d44 1
a44 1
  CH.ifa.draw.figures.TextTool texttool = null;
d48 4
a51 4
  * Constructor TextToolTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
d59 2
a60 2
  * Factory method for instances of the class to be tested.
  */
d68 4
a71 4
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
d80 4
a83 4
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
d93 3
a95 3
  * Method testMouseDown is testing mouseDown
  * @@see CH.ifa.draw.figures.TextTool#mouseDown(java.awt.event.MouseEvent, int, int)
  */
d104 3
a106 3
  * Method testMouseDrag is testing mouseDrag
  * @@see CH.ifa.draw.figures.TextTool#mouseDrag(java.awt.event.MouseEvent, int, int)
  */
d115 3
a117 3
  * Method testMouseUp is testing mouseUp
  * @@see CH.ifa.draw.figures.TextTool#mouseUp(java.awt.event.MouseEvent, int, int)
  */
d126 3
a128 3
  * Method testDeactivate is testing deactivate
  * @@see CH.ifa.draw.figures.TextTool#deactivate()
  */
d137 3
a139 3
  * Method testActivate is testing activate
  * @@see CH.ifa.draw.figures.TextTool#activate()
  */
d148 3
a150 3
  * Method testIsActive is testing isActive
  * @@see CH.ifa.draw.figures.TextTool#isActive()
  */
d161 5
a165 5
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
d172 1
a172 9
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(TextToolTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@d3 2
a4 1
import junit.framework.TestCase;
d6 1
a6 1
import CH.ifa.draw.figures.TextTool;
a7 2
import CH.ifa.draw.figures.RectangleFigure;
import java.awt.Point;
@

