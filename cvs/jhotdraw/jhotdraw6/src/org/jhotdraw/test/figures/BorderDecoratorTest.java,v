head	1.5;
access;
symbols
	jhotdraw60b1-release:1.5
	package_rename:1.5
	directory_rename:1.4
	reorg_6x_split_initial:1.4
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.5
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.09.21.18.45;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.23.06.38.57;	author mtnygard;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.5
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.figures;

import java.awt.Point;

import org.jhotdraw.figures.BorderDecorator;

import junit.framework.TestCase;
// JUnitDoclet begin import
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase BorderDecoratorTest is generated by
 * JUnitDoclet to hold the tests for BorderDecorator.
 * @@see org.jhotdraw.figures.BorderDecorator
 */
// JUnitDoclet end javadoc_class
public class BorderDecoratorTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private BorderDecorator borderdecorator;
	// JUnitDoclet end class

	/**
	 * Constructor BorderDecoratorTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public BorderDecoratorTest(String name) {
		// JUnitDoclet begin method BorderDecoratorTest
		super(name);
		// JUnitDoclet end method BorderDecoratorTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public BorderDecorator createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new BorderDecorator();
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		borderdecorator = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		borderdecorator = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method setBorderOffset()
	/**
	 * Method testSetGetBorderOffset is testing setBorderOffset
	 * and getBorderOffset together by setting some value
	 * and verifying it by reading.
	 * @@see org.jhotdraw.figures.BorderDecorator#setBorderOffset(java.awt.Point)
	 * @@see org.jhotdraw.figures.BorderDecorator#getBorderOffset()
	 */
	// JUnitDoclet end javadoc_method setBorderOffset()
	public void testSetGetBorderOffset() throws Exception {
		// JUnitDoclet begin method setBorderOffset getBorderOffset
		Point[] tests = { new java.awt.Point()};

		for (int i = 0; i < tests.length; i++) {
			borderdecorator.setBorderOffset(tests[i]);
			assertEquals(tests[i], borderdecorator.getBorderOffset());
		}
		// JUnitDoclet end method setBorderOffset getBorderOffset
	}

	// JUnitDoclet begin method setNullBorderOffset()
	/**
	  * Test a null argument to setBorderOffset.  Expect an Point(0, 0) to come back
	  * 
	  * @@see org.jhotdraw.figures.BorderDecorator#setBorderOffset(java.awt.Point)
	  */
	public void setNullBorderOffset() throws Exception {
		Point original = borderdecorator.getBorderOffset();

		borderdecorator.setBorderOffset(null);
		assertEquals(new Point(0, 0), borderdecorator.getBorderOffset());
	}
	// JUnitDoclet end method

	// JUnitDoclet begin javadoc_method draw()
	/**
	 * Method testDraw is testing draw
	 * @@see org.jhotdraw.figures.BorderDecorator#draw(java.awt.Graphics)
	 */
	// JUnitDoclet end javadoc_method draw()
	public void testDraw() throws Exception {
		// JUnitDoclet begin method draw
		// JUnitDoclet end method draw
	}

	// JUnitDoclet begin javadoc_method displayBox()
	/**
	 * Method testDisplayBox is testing displayBox
	 * @@see org.jhotdraw.figures.BorderDecorator#displayBox()
	 */
	// JUnitDoclet end javadoc_method displayBox()
	public void testDisplayBox() throws Exception {
		// JUnitDoclet begin method displayBox
		// JUnitDoclet end method displayBox
	}

	// JUnitDoclet begin javadoc_method figureInvalidated()
	/**
	 * Method testFigureInvalidated is testing figureInvalidated
	 * @@see org.jhotdraw.figures.BorderDecorator#figureInvalidated(org.jhotdraw.framework.FigureChangeEvent)
	 */
	// JUnitDoclet end javadoc_method figureInvalidated()
	public void testFigureInvalidated() throws Exception {
		// JUnitDoclet begin method figureInvalidated
		// JUnitDoclet end method figureInvalidated
	}

	// JUnitDoclet begin javadoc_method connectionInsets()
	/**
	 * Method testConnectionInsets is testing connectionInsets
	 * @@see org.jhotdraw.figures.BorderDecorator#connectionInsets()
	 */
	// JUnitDoclet end javadoc_method connectionInsets()
	public void testConnectionInsets() throws Exception {
		// JUnitDoclet begin method connectionInsets
		// JUnitDoclet end method connectionInsets
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
@


1.4
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d11 1
a11 1
package CH.ifa.draw.test.figures;
d15 1
a15 1
import CH.ifa.draw.figures.BorderDecorator;
d33 1
a33 1
 * @@see CH.ifa.draw.figures.BorderDecorator
d60 1
a60 1
	public CH.ifa.draw.figures.BorderDecorator createInstance() throws Exception {
d62 1
a62 1
		return new CH.ifa.draw.figures.BorderDecorator();
d95 2
a96 2
	 * @@see CH.ifa.draw.figures.BorderDecorator#setBorderOffset(java.awt.Point)
	 * @@see CH.ifa.draw.figures.BorderDecorator#getBorderOffset()
d114 1
a114 1
	  * @@see CH.ifa.draw.figures.BorderDecorator#setBorderOffset(java.awt.Point)
d127 1
a127 1
	 * @@see CH.ifa.draw.figures.BorderDecorator#draw(java.awt.Graphics)
d138 1
a138 1
	 * @@see CH.ifa.draw.figures.BorderDecorator#displayBox()
d149 1
a149 1
	 * @@see CH.ifa.draw.figures.BorderDecorator#figureInvalidated(CH.ifa.draw.framework.FigureChangeEvent)
d160 1
a160 1
	 * @@see CH.ifa.draw.figures.BorderDecorator#connectionInsets()
@


1.3
log
@All test cases now pass!
@
text
@d1 10
d15 2
d22 6
a27 7
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

d31 4
a34 4
* TestCase BorderDecoratorTest is generated by
* JUnitDoclet to hold the tests for BorderDecorator.
* @@see CH.ifa.draw.figures.BorderDecorator
*/
d41 78
a118 78
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.figures.BorderDecorator borderdecorator = null;
  // JUnitDoclet end class
  
  /**
  * Constructor BorderDecoratorTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public BorderDecoratorTest(String name) {
    // JUnitDoclet begin method BorderDecoratorTest
    super(name);
    // JUnitDoclet end method BorderDecoratorTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.figures.BorderDecorator createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new CH.ifa.draw.figures.BorderDecorator();
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    borderdecorator = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    borderdecorator = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method setBorderOffset()
  /**
  * Method testSetGetBorderOffset is testing setBorderOffset
  * and getBorderOffset together by setting some value
  * and verifying it by reading.
  * @@see CH.ifa.draw.figures.BorderDecorator#setBorderOffset(java.awt.Point)
  * @@see CH.ifa.draw.figures.BorderDecorator#getBorderOffset()
  */
  // JUnitDoclet end javadoc_method setBorderOffset()
  public void testSetGetBorderOffset() throws Exception {
    // JUnitDoclet begin method setBorderOffset getBorderOffset
    Point[] tests = {new java.awt.Point()};
    
    for (int i = 0; i < tests.length; i++) {
      borderdecorator.setBorderOffset(tests[i]);
      assertEquals(tests[i], borderdecorator.getBorderOffset());
    }
    // JUnitDoclet end method setBorderOffset getBorderOffset
  }
  
  // JUnitDoclet begin method setNullBorderOffset()
  /**
   * Test a null argument to setBorderOffset.  Expect an Point(0, 0) to come back
   * 
   * @@see CH.ifa.draw.figures.BorderDecorator#setBorderOffset(java.awt.Point)
   */
  public void setNullBorderOffset() throws Exception {
	Point original = borderdecorator.getBorderOffset();
  	
d120 61
a180 72
		assertEquals(new Point(0,0), borderdecorator.getBorderOffset());
  }
  // JUnitDoclet end method
  
    // JUnitDoclet begin javadoc_method draw()
  /**
  * Method testDraw is testing draw
  * @@see CH.ifa.draw.figures.BorderDecorator#draw(java.awt.Graphics)
  */
  // JUnitDoclet end javadoc_method draw()
  public void testDraw() throws Exception {
    // JUnitDoclet begin method draw
    // JUnitDoclet end method draw
  }
  
  // JUnitDoclet begin javadoc_method displayBox()
  /**
  * Method testDisplayBox is testing displayBox
  * @@see CH.ifa.draw.figures.BorderDecorator#displayBox()
  */
  // JUnitDoclet end javadoc_method displayBox()
  public void testDisplayBox() throws Exception {
    // JUnitDoclet begin method displayBox
    // JUnitDoclet end method displayBox
  }
  
  // JUnitDoclet begin javadoc_method figureInvalidated()
  /**
  * Method testFigureInvalidated is testing figureInvalidated
  * @@see CH.ifa.draw.figures.BorderDecorator#figureInvalidated(CH.ifa.draw.framework.FigureChangeEvent)
  */
  // JUnitDoclet end javadoc_method figureInvalidated()
  public void testFigureInvalidated() throws Exception {
    // JUnitDoclet begin method figureInvalidated
    // JUnitDoclet end method figureInvalidated
  }
  
  // JUnitDoclet begin javadoc_method connectionInsets()
  /**
  * Method testConnectionInsets is testing connectionInsets
  * @@see CH.ifa.draw.figures.BorderDecorator#connectionInsets()
  */
  // JUnitDoclet end javadoc_method connectionInsets()
  public void testConnectionInsets() throws Exception {
    // JUnitDoclet begin method connectionInsets
    // JUnitDoclet end method connectionInsets
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(BorderDecoratorTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d3 2
d90 1
a90 1
    java.awt.Point[] tests = {new java.awt.Point(), null};
d99 15
a113 1
  // JUnitDoclet begin javadoc_method draw()
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@a4 1
import CH.ifa.draw.figures.BorderDecorator;
@

