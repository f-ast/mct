head	1.4;
access;
symbols
	jhotdraw60b1-release:1.4
	package_rename:1.4
	directory_rename:1.3
	reorg_6x_split_initial:1.3
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.4
date	2004.01.09.22.53.40;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.09.21.18.44;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.31.58;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.standard;

import org.jhotdraw.standard.RelativeLocator;
import junit.framework.TestCase;
// JUnitDoclet begin import
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase RelativeLocatorTest is generated by
 * JUnitDoclet to hold the tests for RelativeLocator.
 * @@see org.jhotdraw.standard.RelativeLocator
 */
// JUnitDoclet end javadoc_class
public class RelativeLocatorTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private RelativeLocator relativelocator;
	// JUnitDoclet end class

	/**
	 * Constructor RelativeLocatorTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public RelativeLocatorTest(String name) {
		// JUnitDoclet begin method RelativeLocatorTest
		super(name);
		// JUnitDoclet end method RelativeLocatorTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public RelativeLocator createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new RelativeLocator();
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		relativelocator = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		relativelocator = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method equals()
	/**
	 * Method testEquals is testing equals
	 * @@see org.jhotdraw.standard.RelativeLocator#equals(java.lang.Object)
	 */
	// JUnitDoclet end javadoc_method equals()
	public void testEquals() throws Exception {
		// JUnitDoclet begin method equals
		// JUnitDoclet end method equals
	}

	// JUnitDoclet begin javadoc_method locate()
	/**
	 * Method testLocate is testing locate
	 * @@see org.jhotdraw.standard.RelativeLocator#locate(org.jhotdraw.framework.Figure)
	 */
	// JUnitDoclet end javadoc_method locate()
	public void testLocate() throws Exception {
		// JUnitDoclet begin method locate
		// JUnitDoclet end method locate
	}

	// JUnitDoclet begin javadoc_method write()
	/**
	 * Method testWrite is testing write
	 * @@see org.jhotdraw.standard.RelativeLocator#write(org.jhotdraw.util.StorableOutput)
	 */
	// JUnitDoclet end javadoc_method write()
	public void testWrite() throws Exception {
		// JUnitDoclet begin method write
		// JUnitDoclet end method write
	}

	// JUnitDoclet begin javadoc_method read()
	/**
	 * Method testRead is testing read
	 * @@see org.jhotdraw.standard.RelativeLocator#read(org.jhotdraw.util.StorableInput)
	 */
	// JUnitDoclet end javadoc_method read()
	public void testRead() throws Exception {
		// JUnitDoclet begin method read
		// JUnitDoclet end method read
	}

	// JUnitDoclet begin javadoc_method east()
	/**
	 * Method testEast is testing east
	 * @@see org.jhotdraw.standard.RelativeLocator#east()
	 */
	// JUnitDoclet end javadoc_method east()
	public void testEast() throws Exception {
		// JUnitDoclet begin method east
		// JUnitDoclet end method east
	}

	// JUnitDoclet begin javadoc_method north()
	/**
	 * Method testNorth is testing north
	 * @@see org.jhotdraw.standard.RelativeLocator#north()
	 */
	// JUnitDoclet end javadoc_method north()
	public void testNorth() throws Exception {
		// JUnitDoclet begin method north
		// JUnitDoclet end method north
	}

	// JUnitDoclet begin javadoc_method west()
	/**
	 * Method testWest is testing west
	 * @@see org.jhotdraw.standard.RelativeLocator#west()
	 */
	// JUnitDoclet end javadoc_method west()
	public void testWest() throws Exception {
		// JUnitDoclet begin method west
		// JUnitDoclet end method west
	}

	// JUnitDoclet begin javadoc_method northEast()
	/**
	 * Method testNorthEast is testing northEast
	 * @@see org.jhotdraw.standard.RelativeLocator#northEast()
	 */
	// JUnitDoclet end javadoc_method northEast()
	public void testNorthEast() throws Exception {
		// JUnitDoclet begin method northEast
		// JUnitDoclet end method northEast
	}

	// JUnitDoclet begin javadoc_method northWest()
	/**
	 * Method testNorthWest is testing northWest
	 * @@see org.jhotdraw.standard.RelativeLocator#northWest()
	 */
	// JUnitDoclet end javadoc_method northWest()
	public void testNorthWest() throws Exception {
		// JUnitDoclet begin method northWest
		// JUnitDoclet end method northWest
	}

	// JUnitDoclet begin javadoc_method south()
	/**
	 * Method testSouth is testing south
	 * @@see org.jhotdraw.standard.RelativeLocator#south()
	 */
	// JUnitDoclet end javadoc_method south()
	public void testSouth() throws Exception {
		// JUnitDoclet begin method south
		// JUnitDoclet end method south
	}

	// JUnitDoclet begin javadoc_method southEast()
	/**
	 * Method testSouthEast is testing southEast
	 * @@see org.jhotdraw.standard.RelativeLocator#southEast()
	 */
	// JUnitDoclet end javadoc_method southEast()
	public void testSouthEast() throws Exception {
		// JUnitDoclet begin method southEast
		// JUnitDoclet end method southEast
	}

	// JUnitDoclet begin javadoc_method southWest()
	/**
	 * Method testSouthWest is testing southWest
	 * @@see org.jhotdraw.standard.RelativeLocator#southWest()
	 */
	// JUnitDoclet end javadoc_method southWest()
	public void testSouthWest() throws Exception {
		// JUnitDoclet begin method southWest
		// JUnitDoclet end method southWest
	}

	// JUnitDoclet begin javadoc_method center()
	/**
	 * Method testCenter is testing center
	 * @@see org.jhotdraw.standard.RelativeLocator#center()
	 */
	// JUnitDoclet end javadoc_method center()
	public void testCenter() throws Exception {
		// JUnitDoclet begin method center
		// JUnitDoclet end method center
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
@


1.3
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d11 1
a11 1
package CH.ifa.draw.test.standard;
d13 1
a13 1
import CH.ifa.draw.standard.RelativeLocator;
d30 1
a30 1
 * @@see CH.ifa.draw.standard.RelativeLocator
d57 1
a57 1
	public CH.ifa.draw.standard.RelativeLocator createInstance() throws Exception {
d59 1
a59 1
		return new CH.ifa.draw.standard.RelativeLocator();
d90 1
a90 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#equals(java.lang.Object)
d101 1
a101 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#locate(CH.ifa.draw.framework.Figure)
d112 1
a112 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#write(CH.ifa.draw.util.StorableOutput)
d123 1
a123 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#read(CH.ifa.draw.util.StorableInput)
d134 1
a134 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#east()
d145 1
a145 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#north()
d156 1
a156 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#west()
d167 1
a167 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#northEast()
d178 1
a178 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#northWest()
d189 1
a189 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#south()
d200 1
a200 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#southEast()
d211 1
a211 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#southWest()
d222 1
a222 1
	 * @@see CH.ifa.draw.standard.RelativeLocator#center()
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d1 10
d13 1
d19 6
a24 7
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

d28 4
a31 4
* TestCase RelativeLocatorTest is generated by
* JUnitDoclet to hold the tests for RelativeLocator.
* @@see CH.ifa.draw.standard.RelativeLocator
*/
d38 205
a242 216
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.standard.RelativeLocator relativelocator = null;
  // JUnitDoclet end class
  
  /**
  * Constructor RelativeLocatorTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public RelativeLocatorTest(String name) {
    // JUnitDoclet begin method RelativeLocatorTest
    super(name);
    // JUnitDoclet end method RelativeLocatorTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.standard.RelativeLocator createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new CH.ifa.draw.standard.RelativeLocator();
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    relativelocator = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    relativelocator = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method equals()
  /**
  * Method testEquals is testing equals
  * @@see CH.ifa.draw.standard.RelativeLocator#equals(java.lang.Object)
  */
  // JUnitDoclet end javadoc_method equals()
  public void testEquals() throws Exception {
    // JUnitDoclet begin method equals
    // JUnitDoclet end method equals
  }
  
  // JUnitDoclet begin javadoc_method locate()
  /**
  * Method testLocate is testing locate
  * @@see CH.ifa.draw.standard.RelativeLocator#locate(CH.ifa.draw.framework.Figure)
  */
  // JUnitDoclet end javadoc_method locate()
  public void testLocate() throws Exception {
    // JUnitDoclet begin method locate
    // JUnitDoclet end method locate
  }
  
  // JUnitDoclet begin javadoc_method write()
  /**
  * Method testWrite is testing write
  * @@see CH.ifa.draw.standard.RelativeLocator#write(CH.ifa.draw.util.StorableOutput)
  */
  // JUnitDoclet end javadoc_method write()
  public void testWrite() throws Exception {
    // JUnitDoclet begin method write
    // JUnitDoclet end method write
  }
  
  // JUnitDoclet begin javadoc_method read()
  /**
  * Method testRead is testing read
  * @@see CH.ifa.draw.standard.RelativeLocator#read(CH.ifa.draw.util.StorableInput)
  */
  // JUnitDoclet end javadoc_method read()
  public void testRead() throws Exception {
    // JUnitDoclet begin method read
    // JUnitDoclet end method read
  }
  
  // JUnitDoclet begin javadoc_method east()
  /**
  * Method testEast is testing east
  * @@see CH.ifa.draw.standard.RelativeLocator#east()
  */
  // JUnitDoclet end javadoc_method east()
  public void testEast() throws Exception {
    // JUnitDoclet begin method east
    // JUnitDoclet end method east
  }
  
  // JUnitDoclet begin javadoc_method north()
  /**
  * Method testNorth is testing north
  * @@see CH.ifa.draw.standard.RelativeLocator#north()
  */
  // JUnitDoclet end javadoc_method north()
  public void testNorth() throws Exception {
    // JUnitDoclet begin method north
    // JUnitDoclet end method north
  }
  
  // JUnitDoclet begin javadoc_method west()
  /**
  * Method testWest is testing west
  * @@see CH.ifa.draw.standard.RelativeLocator#west()
  */
  // JUnitDoclet end javadoc_method west()
  public void testWest() throws Exception {
    // JUnitDoclet begin method west
    // JUnitDoclet end method west
  }
  
  // JUnitDoclet begin javadoc_method northEast()
  /**
  * Method testNorthEast is testing northEast
  * @@see CH.ifa.draw.standard.RelativeLocator#northEast()
  */
  // JUnitDoclet end javadoc_method northEast()
  public void testNorthEast() throws Exception {
    // JUnitDoclet begin method northEast
    // JUnitDoclet end method northEast
  }
  
  // JUnitDoclet begin javadoc_method northWest()
  /**
  * Method testNorthWest is testing northWest
  * @@see CH.ifa.draw.standard.RelativeLocator#northWest()
  */
  // JUnitDoclet end javadoc_method northWest()
  public void testNorthWest() throws Exception {
    // JUnitDoclet begin method northWest
    // JUnitDoclet end method northWest
  }
  
  // JUnitDoclet begin javadoc_method south()
  /**
  * Method testSouth is testing south
  * @@see CH.ifa.draw.standard.RelativeLocator#south()
  */
  // JUnitDoclet end javadoc_method south()
  public void testSouth() throws Exception {
    // JUnitDoclet begin method south
    // JUnitDoclet end method south
  }
  
  // JUnitDoclet begin javadoc_method southEast()
  /**
  * Method testSouthEast is testing southEast
  * @@see CH.ifa.draw.standard.RelativeLocator#southEast()
  */
  // JUnitDoclet end javadoc_method southEast()
  public void testSouthEast() throws Exception {
    // JUnitDoclet begin method southEast
    // JUnitDoclet end method southEast
  }
  
  // JUnitDoclet begin javadoc_method southWest()
  /**
  * Method testSouthWest is testing southWest
  * @@see CH.ifa.draw.standard.RelativeLocator#southWest()
  */
  // JUnitDoclet end javadoc_method southWest()
  public void testSouthWest() throws Exception {
    // JUnitDoclet begin method southWest
    // JUnitDoclet end method southWest
  }
  
  // JUnitDoclet begin javadoc_method center()
  /**
  * Method testCenter is testing center
  * @@see CH.ifa.draw.standard.RelativeLocator#center()
  */
  // JUnitDoclet end javadoc_method center()
  public void testCenter() throws Exception {
    // JUnitDoclet begin method center
    // JUnitDoclet end method center
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(RelativeLocatorTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@a4 1
import CH.ifa.draw.standard.RelativeLocator;
@

