head	1.4;
access;
symbols
	jhotdraw60b1-release:1.4
	package_rename:1.4
	directory_rename:1.3
	reorg_6x_split_initial:1.3
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.4
date	2004.01.09.22.53.39;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.09.21.18.44;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.31.58;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.standard;

import java.awt.Point;
import java.util.List;

import junit.framework.TestCase;

// JUnitDoclet begin import
import org.jhotdraw.figures.RectangleFigure;
import org.jhotdraw.standard.HandleAndEnumerator;
import org.jhotdraw.standard.HandleEnumerator;
import org.jhotdraw.standard.NullHandle;
import org.jhotdraw.standard.RelativeLocator;
import org.jhotdraw.util.CollectionsFactory;
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase HandleAndEnumeratorTest is generated by
 * JUnitDoclet to hold the tests for HandleAndEnumerator.
 * @@see org.jhotdraw.standard.HandleAndEnumerator
 */
// JUnitDoclet end javadoc_class
public class HandleAndEnumeratorTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private HandleAndEnumerator handleandenumerator;
	// JUnitDoclet end class

	/**
	 * Constructor HandleAndEnumeratorTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public HandleAndEnumeratorTest(String name) {
		// JUnitDoclet begin method HandleAndEnumeratorTest
		super(name);
		// JUnitDoclet end method HandleAndEnumeratorTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public HandleAndEnumerator createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		RectangleFigure figure1 = new RectangleFigure(new Point(15, 15), new Point(20, 20));
		List l1 = CollectionsFactory.current().createList();
		l1.add(new NullHandle(figure1, RelativeLocator.north()));
		l1.add(new NullHandle(figure1, RelativeLocator.north()));
		HandleEnumerator handleEnum1 = new HandleEnumerator(l1);

		RectangleFigure figure2 = new RectangleFigure(new Point(55, 55), new Point(70, 70));
		List l2 = CollectionsFactory.current().createList();
		l2.add(new NullHandle(figure2, RelativeLocator.north()));
		l2.add(new NullHandle(figure2, RelativeLocator.north()));
		HandleEnumerator handleEnum2 = new HandleEnumerator(l2);
		return new HandleAndEnumerator(handleEnum1, handleEnum2);
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		handleandenumerator = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		handleandenumerator = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method nextHandle()
	/**
	 * Method testNextHandle is testing nextHandle
	 * @@see org.jhotdraw.standard.HandleAndEnumerator#nextHandle()
	 */
	// JUnitDoclet end javadoc_method nextHandle()
	public void testNextHandle() throws Exception {
		// JUnitDoclet begin method nextHandle
		// JUnitDoclet end method nextHandle
	}

	// JUnitDoclet begin javadoc_method hasNextHandle()
	/**
	 * Method testHasNextHandle is testing hasNextHandle
	 * @@see org.jhotdraw.standard.HandleAndEnumerator#hasNextHandle()
	 */
	// JUnitDoclet end javadoc_method hasNextHandle()
	public void testHasNextHandle() throws Exception {
		// JUnitDoclet begin method hasNextHandle
		// JUnitDoclet end method hasNextHandle
	}

	// JUnitDoclet begin javadoc_method toList()
	/**
	 * Method testToList is testing toList
	 * @@see org.jhotdraw.standard.HandleAndEnumerator#toList()
	 */
	// JUnitDoclet end javadoc_method toList()
	public void testToList() throws Exception {
		// JUnitDoclet begin method toList
		// JUnitDoclet end method toList
	}

	// JUnitDoclet begin javadoc_method reset()
	/**
	 * Method testReset is testing reset
	 * @@see org.jhotdraw.standard.HandleAndEnumerator#reset()
	 */
	// JUnitDoclet end javadoc_method reset()
	public void testReset() throws Exception {
		// JUnitDoclet begin method reset
		// JUnitDoclet end method reset
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
@


1.3
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d11 1
a11 1
package CH.ifa.draw.test.standard;
d19 6
a24 6
import CH.ifa.draw.figures.RectangleFigure;
import CH.ifa.draw.standard.HandleAndEnumerator;
import CH.ifa.draw.standard.HandleEnumerator;
import CH.ifa.draw.standard.NullHandle;
import CH.ifa.draw.standard.RelativeLocator;
import CH.ifa.draw.util.CollectionsFactory;
d39 1
a39 1
 * @@see CH.ifa.draw.standard.HandleAndEnumerator
d66 1
a66 1
	public CH.ifa.draw.standard.HandleAndEnumerator createInstance() throws Exception {
d79 1
a79 1
		return new CH.ifa.draw.standard.HandleAndEnumerator(handleEnum1, handleEnum2);
d110 1
a110 1
	 * @@see CH.ifa.draw.standard.HandleAndEnumerator#nextHandle()
d121 1
a121 1
	 * @@see CH.ifa.draw.standard.HandleAndEnumerator#hasNextHandle()
d132 1
a132 1
	 * @@see CH.ifa.draw.standard.HandleAndEnumerator#toList()
d143 1
a143 1
	 * @@see CH.ifa.draw.standard.HandleAndEnumerator#reset()
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d1 10
d20 1
d28 6
a33 7
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

d37 4
a40 4
* TestCase HandleAndEnumeratorTest is generated by
* JUnitDoclet to hold the tests for HandleAndEnumerator.
* @@see CH.ifa.draw.standard.HandleAndEnumerator
*/
d47 117
a163 128
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.standard.HandleAndEnumerator handleandenumerator = null;
  // JUnitDoclet end class
  
  /**
  * Constructor HandleAndEnumeratorTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public HandleAndEnumeratorTest(String name) {
    // JUnitDoclet begin method HandleAndEnumeratorTest
    super(name);
    // JUnitDoclet end method HandleAndEnumeratorTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.standard.HandleAndEnumerator createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
	RectangleFigure figure1 = new RectangleFigure(new Point(15, 15), new Point(20, 20));
	List l1 = CollectionsFactory.current().createList();
	l1.add(new NullHandle(figure1, RelativeLocator.north()));
	l1.add(new NullHandle(figure1, RelativeLocator.north()));
	HandleEnumerator handleEnum1 = new HandleEnumerator(l1);

	RectangleFigure figure2 = new RectangleFigure(new Point(55, 55), new Point(70, 70));
	List l2 = CollectionsFactory.current().createList();
	l2.add(new NullHandle(figure2, RelativeLocator.north()));
	l2.add(new NullHandle(figure2, RelativeLocator.north()));
	HandleEnumerator handleEnum2 = new HandleEnumerator(l2);
    return new CH.ifa.draw.standard.HandleAndEnumerator(handleEnum1, handleEnum2);
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    handleandenumerator = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    handleandenumerator = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method nextHandle()
  /**
  * Method testNextHandle is testing nextHandle
  * @@see CH.ifa.draw.standard.HandleAndEnumerator#nextHandle()
  */
  // JUnitDoclet end javadoc_method nextHandle()
  public void testNextHandle() throws Exception {
    // JUnitDoclet begin method nextHandle
    // JUnitDoclet end method nextHandle
  }
  
  // JUnitDoclet begin javadoc_method hasNextHandle()
  /**
  * Method testHasNextHandle is testing hasNextHandle
  * @@see CH.ifa.draw.standard.HandleAndEnumerator#hasNextHandle()
  */
  // JUnitDoclet end javadoc_method hasNextHandle()
  public void testHasNextHandle() throws Exception {
    // JUnitDoclet begin method hasNextHandle
    // JUnitDoclet end method hasNextHandle
  }
  
  // JUnitDoclet begin javadoc_method toList()
  /**
  * Method testToList is testing toList
  * @@see CH.ifa.draw.standard.HandleAndEnumerator#toList()
  */
  // JUnitDoclet end javadoc_method toList()
  public void testToList() throws Exception {
    // JUnitDoclet begin method toList
    // JUnitDoclet end method toList
  }
  
  // JUnitDoclet begin javadoc_method reset()
  /**
  * Method testReset is testing reset
  * @@see CH.ifa.draw.standard.HandleAndEnumerator#reset()
  */
  // JUnitDoclet end javadoc_method reset()
  public void testReset() throws Exception {
    // JUnitDoclet begin method reset
    // JUnitDoclet end method reset
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(HandleAndEnumeratorTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@d3 3
d7 1
d9 3
a11 1
import CH.ifa.draw.standard.HandleAndEnumerator;
a12 2
import CH.ifa.draw.standard.NullHandle;
import CH.ifa.draw.standard.HandleEnumerator;
a13 4
import CH.ifa.draw.figures.RectangleFigure;

import java.util.List;
import java.awt.*;
@

