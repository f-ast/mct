head	1.4;
access;
symbols
	jhotdraw60b1-release:1.4
	package_rename:1.4
	directory_rename:1.3
	reorg_6x_split_initial:1.3
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.4
date	2004.01.09.22.53.42;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.09.21.18.44;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.contrib;

import org.jhotdraw.contrib.FloatingTextArea;
import junit.framework.TestCase;
// JUnitDoclet begin import
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase FloatingTextAreaTest is generated by
 * JUnitDoclet to hold the tests for FloatingTextArea.
 * @@see org.jhotdraw.contrib.FloatingTextArea
 */
// JUnitDoclet end javadoc_class
public class FloatingTextAreaTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private FloatingTextArea floatingtextarea;
	// JUnitDoclet end class

	/**
	 * Constructor FloatingTextAreaTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public FloatingTextAreaTest(String name) {
		// JUnitDoclet begin method FloatingTextAreaTest
		super(name);
		// JUnitDoclet end method FloatingTextAreaTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public FloatingTextArea createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new FloatingTextArea();
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		floatingtextarea = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		floatingtextarea = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method createOverlay()
	/**
	 * Method testCreateOverlay is testing createOverlay
	 * @@see org.jhotdraw.contrib.FloatingTextArea#createOverlay(java.awt.Container)
	 */
	// JUnitDoclet end javadoc_method createOverlay()
	public void testCreateOverlay() throws Exception {
		// JUnitDoclet begin method createOverlay
		// JUnitDoclet end method createOverlay
	}

	// JUnitDoclet begin javadoc_method setBounds()
	/**
	 * Method testSetBounds is testing setBounds
	 * @@see org.jhotdraw.contrib.FloatingTextArea#setBounds(java.awt.Rectangle, java.lang.String)
	 */
	// JUnitDoclet end javadoc_method setBounds()
	public void testSetBounds() throws Exception {
		// JUnitDoclet begin method setBounds
		// JUnitDoclet end method setBounds
	}

	// JUnitDoclet begin javadoc_method getText()
	/**
	 * Method testGetText is testing getText
	 * @@see org.jhotdraw.contrib.FloatingTextArea#getText()
	 */
	// JUnitDoclet end javadoc_method getText()
	public void testGetText() throws Exception {
		// JUnitDoclet begin method getText
		// JUnitDoclet end method getText
	}

	// JUnitDoclet begin javadoc_method getPreferredSize()
	/**
	 * Method testGetPreferredSize is testing getPreferredSize
	 * @@see org.jhotdraw.contrib.FloatingTextArea#getPreferredSize(int)
	 */
	// JUnitDoclet end javadoc_method getPreferredSize()
	public void testGetPreferredSize() throws Exception {
		// JUnitDoclet begin method getPreferredSize
		// JUnitDoclet end method getPreferredSize
	}

	// JUnitDoclet begin javadoc_method endOverlay()
	/**
	 * Method testEndOverlay is testing endOverlay
	 * @@see org.jhotdraw.contrib.FloatingTextArea#endOverlay()
	 */
	// JUnitDoclet end javadoc_method endOverlay()
	public void testEndOverlay() throws Exception {
		// JUnitDoclet begin method endOverlay
		// JUnitDoclet end method endOverlay
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}
}
@


1.3
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d11 1
a11 1
package CH.ifa.draw.test.contrib;
d13 1
a13 1
import CH.ifa.draw.contrib.FloatingTextArea;
d30 1
a30 1
 * @@see CH.ifa.draw.contrib.FloatingTextArea
d57 1
a57 1
	public CH.ifa.draw.contrib.FloatingTextArea createInstance() throws Exception {
d59 1
a59 1
		return new CH.ifa.draw.contrib.FloatingTextArea();
d90 1
a90 1
	 * @@see CH.ifa.draw.contrib.FloatingTextArea#createOverlay(java.awt.Container)
d101 1
a101 1
	 * @@see CH.ifa.draw.contrib.FloatingTextArea#setBounds(java.awt.Rectangle, java.lang.String)
d112 1
a112 1
	 * @@see CH.ifa.draw.contrib.FloatingTextArea#getText()
d123 1
a123 1
	 * @@see CH.ifa.draw.contrib.FloatingTextArea#getPreferredSize(int)
d134 1
a134 1
	 * @@see CH.ifa.draw.contrib.FloatingTextArea#endOverlay()
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d1 10
d13 1
d19 6
a24 7
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

d28 4
a31 4
* TestCase FloatingTextAreaTest is generated by
* JUnitDoclet to hold the tests for FloatingTextArea.
* @@see CH.ifa.draw.contrib.FloatingTextArea
*/
d38 116
a153 128
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.contrib.FloatingTextArea floatingtextarea = null;
  // JUnitDoclet end class
  
  /**
  * Constructor FloatingTextAreaTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public FloatingTextAreaTest(String name) {
    // JUnitDoclet begin method FloatingTextAreaTest
    super(name);
    // JUnitDoclet end method FloatingTextAreaTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.contrib.FloatingTextArea createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new CH.ifa.draw.contrib.FloatingTextArea();
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    floatingtextarea = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    floatingtextarea = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method createOverlay()
  /**
  * Method testCreateOverlay is testing createOverlay
  * @@see CH.ifa.draw.contrib.FloatingTextArea#createOverlay(java.awt.Container)
  */
  // JUnitDoclet end javadoc_method createOverlay()
  public void testCreateOverlay() throws Exception {
    // JUnitDoclet begin method createOverlay
    // JUnitDoclet end method createOverlay
  }
  
  // JUnitDoclet begin javadoc_method setBounds()
  /**
  * Method testSetBounds is testing setBounds
  * @@see CH.ifa.draw.contrib.FloatingTextArea#setBounds(java.awt.Rectangle, java.lang.String)
  */
  // JUnitDoclet end javadoc_method setBounds()
  public void testSetBounds() throws Exception {
    // JUnitDoclet begin method setBounds
    // JUnitDoclet end method setBounds
  }
  
  // JUnitDoclet begin javadoc_method getText()
  /**
  * Method testGetText is testing getText
  * @@see CH.ifa.draw.contrib.FloatingTextArea#getText()
  */
  // JUnitDoclet end javadoc_method getText()
  public void testGetText() throws Exception {
    // JUnitDoclet begin method getText
    // JUnitDoclet end method getText
  }
  
  // JUnitDoclet begin javadoc_method getPreferredSize()
  /**
  * Method testGetPreferredSize is testing getPreferredSize
  * @@see CH.ifa.draw.contrib.FloatingTextArea#getPreferredSize(int)
  */
  // JUnitDoclet end javadoc_method getPreferredSize()
  public void testGetPreferredSize() throws Exception {
    // JUnitDoclet begin method getPreferredSize
    // JUnitDoclet end method getPreferredSize
  }
  
  // JUnitDoclet begin javadoc_method endOverlay()
  /**
  * Method testEndOverlay is testing endOverlay
  * @@see CH.ifa.draw.contrib.FloatingTextArea#endOverlay()
  */
  // JUnitDoclet end javadoc_method endOverlay()
  public void testEndOverlay() throws Exception {
    // JUnitDoclet begin method endOverlay
    // JUnitDoclet end method endOverlay
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(FloatingTextAreaTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@a4 1
import CH.ifa.draw.contrib.FloatingTextArea;
@

