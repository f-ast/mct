head	1.4;
access;
symbols
	jhotdraw60b1-release:1.4
	package_rename:1.4
	directory_rename:1.3
	reorg_6x_split_initial:1.3
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.4
date	2004.01.09.22.53.42;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.09.21.18.45;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.contrib;

import org.jhotdraw.contrib.PolygonFigure;
import junit.framework.TestCase;
// JUnitDoclet begin import
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase PolygonFigureTest is generated by
 * JUnitDoclet to hold the tests for PolygonFigure.
 * @@see org.jhotdraw.contrib.PolygonFigure
 */
// JUnitDoclet end javadoc_class
public class PolygonFigureTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private PolygonFigure polygonfigure;
	// JUnitDoclet end class

	/**
	 * Constructor PolygonFigureTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public PolygonFigureTest(String name) {
		// JUnitDoclet begin method PolygonFigureTest
		super(name);
		// JUnitDoclet end method PolygonFigureTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public PolygonFigure createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new PolygonFigure();
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		polygonfigure = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		polygonfigure = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method displayBox()
	/**
	 * Method testDisplayBox is testing displayBox
	 * @@see org.jhotdraw.contrib.PolygonFigure#displayBox()
	 */
	// JUnitDoclet end javadoc_method displayBox()
	public void testDisplayBox() throws Exception {
		// JUnitDoclet begin method displayBox
		// JUnitDoclet end method displayBox
	}

	// JUnitDoclet begin javadoc_method isEmpty()
	/**
	 * Method testIsEmpty is testing isEmpty
	 * @@see org.jhotdraw.contrib.PolygonFigure#isEmpty()
	 */
	// JUnitDoclet end javadoc_method isEmpty()
	public void testIsEmpty() throws Exception {
		// JUnitDoclet begin method isEmpty
		// JUnitDoclet end method isEmpty
	}

	// JUnitDoclet begin javadoc_method handles()
	/**
	 * Method testHandles is testing handles
	 * @@see org.jhotdraw.contrib.PolygonFigure#handles()
	 */
	// JUnitDoclet end javadoc_method handles()
	public void testHandles() throws Exception {
		// JUnitDoclet begin method handles
		// JUnitDoclet end method handles
	}

	// JUnitDoclet begin javadoc_method basicDisplayBox()
	/**
	 * Method testBasicDisplayBox is testing basicDisplayBox
	 * @@see org.jhotdraw.contrib.PolygonFigure#basicDisplayBox(java.awt.Point, java.awt.Point)
	 */
	// JUnitDoclet end javadoc_method basicDisplayBox()
	public void testBasicDisplayBox() throws Exception {
		// JUnitDoclet begin method basicDisplayBox
		// JUnitDoclet end method basicDisplayBox
	}

	// JUnitDoclet begin javadoc_method getPolygon()
	/**
	 * Method testGetPolygon is testing getPolygon
	 * @@see org.jhotdraw.contrib.PolygonFigure#getPolygon()
	 */
	// JUnitDoclet end javadoc_method getPolygon()
	public void testGetPolygon() throws Exception {
		// JUnitDoclet begin method getPolygon
		// JUnitDoclet end method getPolygon
	}

	// JUnitDoclet begin javadoc_method getInternalPolygon()
	/**
	 * Method testGetInternalPolygon is testing getInternalPolygon
	 * @@see org.jhotdraw.contrib.PolygonFigure#getInternalPolygon()
	 */
	// JUnitDoclet end javadoc_method getInternalPolygon()
	public void testGetInternalPolygon() throws Exception {
		// JUnitDoclet begin method getInternalPolygon
		// JUnitDoclet end method getInternalPolygon
	}

	// JUnitDoclet begin javadoc_method center()
	/**
	 * Method testCenter is testing center
	 * @@see org.jhotdraw.contrib.PolygonFigure#center()
	 */
	// JUnitDoclet end javadoc_method center()
	public void testCenter() throws Exception {
		// JUnitDoclet begin method center
		// JUnitDoclet end method center
	}

	// JUnitDoclet begin javadoc_method points()
	/**
	 * Method testPoints is testing points
	 * @@see org.jhotdraw.contrib.PolygonFigure#points()
	 */
	// JUnitDoclet end javadoc_method points()
	public void testPoints() throws Exception {
		// JUnitDoclet begin method points
		// JUnitDoclet end method points
	}

	// JUnitDoclet begin javadoc_method pointCount()
	/**
	 * Method testPointCount is testing pointCount
	 * @@see org.jhotdraw.contrib.PolygonFigure#pointCount()
	 */
	// JUnitDoclet end javadoc_method pointCount()
	public void testPointCount() throws Exception {
		// JUnitDoclet begin method pointCount
		// JUnitDoclet end method pointCount
	}

	// JUnitDoclet begin javadoc_method basicMoveBy()
	/**
	 * Method testBasicMoveBy is testing basicMoveBy
	 * @@see org.jhotdraw.contrib.PolygonFigure#basicMoveBy(int, int)
	 */
	// JUnitDoclet end javadoc_method basicMoveBy()
	public void testBasicMoveBy() throws Exception {
		// JUnitDoclet begin method basicMoveBy
		// JUnitDoclet end method basicMoveBy
	}

	// JUnitDoclet begin javadoc_method drawBackground()
	/**
	 * Method testDrawBackground is testing drawBackground
	 * @@see org.jhotdraw.contrib.PolygonFigure#drawBackground(java.awt.Graphics)
	 */
	// JUnitDoclet end javadoc_method drawBackground()
	public void testDrawBackground() throws Exception {
		// JUnitDoclet begin method drawBackground
		// JUnitDoclet end method drawBackground
	}

	// JUnitDoclet begin javadoc_method drawFrame()
	/**
	 * Method testDrawFrame is testing drawFrame
	 * @@see org.jhotdraw.contrib.PolygonFigure#drawFrame(java.awt.Graphics)
	 */
	// JUnitDoclet end javadoc_method drawFrame()
	public void testDrawFrame() throws Exception {
		// JUnitDoclet begin method drawFrame
		// JUnitDoclet end method drawFrame
	}

	// JUnitDoclet begin javadoc_method containsPoint()
	/**
	 * Method testContainsPoint is testing containsPoint
	 * @@see org.jhotdraw.contrib.PolygonFigure#containsPoint(int, int)
	 */
	// JUnitDoclet end javadoc_method containsPoint()
	public void testContainsPoint() throws Exception {
		// JUnitDoclet begin method containsPoint
		// JUnitDoclet end method containsPoint
	}

	// JUnitDoclet begin javadoc_method connectorAt()
	/**
	 * Method testConnectorAt is testing connectorAt
	 * @@see org.jhotdraw.contrib.PolygonFigure#connectorAt(int, int)
	 */
	// JUnitDoclet end javadoc_method connectorAt()
	public void testConnectorAt() throws Exception {
		// JUnitDoclet begin method connectorAt
		// JUnitDoclet end method connectorAt
	}

	// JUnitDoclet begin javadoc_method addPoint()
	/**
	 * Method testAddPoint is testing addPoint
	 * @@see org.jhotdraw.contrib.PolygonFigure#addPoint(int, int)
	 */
	// JUnitDoclet end javadoc_method addPoint()
	public void testAddPoint() throws Exception {
		// JUnitDoclet begin method addPoint
		// JUnitDoclet end method addPoint
	}

	// JUnitDoclet begin javadoc_method setPointAt()
	/**
	 * Method testSetPointAt is testing setPointAt
	 * @@see org.jhotdraw.contrib.PolygonFigure#setPointAt(java.awt.Point, int)
	 */
	// JUnitDoclet end javadoc_method setPointAt()
	public void testSetPointAt() throws Exception {
		// JUnitDoclet begin method setPointAt
		// JUnitDoclet end method setPointAt
	}

	// JUnitDoclet begin javadoc_method insertPointAt()
	/**
	 * Method testInsertPointAt is testing insertPointAt
	 * @@see org.jhotdraw.contrib.PolygonFigure#insertPointAt(java.awt.Point, int)
	 */
	// JUnitDoclet end javadoc_method insertPointAt()
	public void testInsertPointAt() throws Exception {
		// JUnitDoclet begin method insertPointAt
		// JUnitDoclet end method insertPointAt
	}

	// JUnitDoclet begin javadoc_method removePointAt()
	/**
	 * Method testRemovePointAt is testing removePointAt
	 * @@see org.jhotdraw.contrib.PolygonFigure#removePointAt(int)
	 */
	// JUnitDoclet end javadoc_method removePointAt()
	public void testRemovePointAt() throws Exception {
		// JUnitDoclet begin method removePointAt
		// JUnitDoclet end method removePointAt
	}

	// JUnitDoclet begin javadoc_method scaleRotate()
	/**
	 * Method testScaleRotate is testing scaleRotate
	 * @@see org.jhotdraw.contrib.PolygonFigure#scaleRotate(java.awt.Point, java.awt.Polygon, java.awt.Point)
	 */
	// JUnitDoclet end javadoc_method scaleRotate()
	public void testScaleRotate() throws Exception {
		// JUnitDoclet begin method scaleRotate
		// JUnitDoclet end method scaleRotate
	}

	// JUnitDoclet begin javadoc_method smoothPoints()
	/**
	 * Method testSmoothPoints is testing smoothPoints
	 * @@see org.jhotdraw.contrib.PolygonFigure#smoothPoints()
	 */
	// JUnitDoclet end javadoc_method smoothPoints()
	public void testSmoothPoints() throws Exception {
		// JUnitDoclet begin method smoothPoints
		// JUnitDoclet end method smoothPoints
	}

	// JUnitDoclet begin javadoc_method splitSegment()
	/**
	 * Method testSplitSegment is testing splitSegment
	 * @@see org.jhotdraw.contrib.PolygonFigure#splitSegment(int, int)
	 */
	// JUnitDoclet end javadoc_method splitSegment()
	public void testSplitSegment() throws Exception {
		// JUnitDoclet begin method splitSegment
		// JUnitDoclet end method splitSegment
	}

	// JUnitDoclet begin javadoc_method pointAt()
	/**
	 * Method testPointAt is testing pointAt
	 * @@see org.jhotdraw.contrib.PolygonFigure#pointAt(int)
	 */
	// JUnitDoclet end javadoc_method pointAt()
	public void testPointAt() throws Exception {
		// JUnitDoclet begin method pointAt
		// JUnitDoclet end method pointAt
	}

	// JUnitDoclet begin javadoc_method outermostPoint()
	/**
	 * Method testOutermostPoint is testing outermostPoint
	 * @@see org.jhotdraw.contrib.PolygonFigure#outermostPoint()
	 */
	// JUnitDoclet end javadoc_method outermostPoint()
	public void testOutermostPoint() throws Exception {
		// JUnitDoclet begin method outermostPoint
		// JUnitDoclet end method outermostPoint
	}

	// JUnitDoclet begin javadoc_method findSegment()
	/**
	 * Method testFindSegment is testing findSegment
	 * @@see org.jhotdraw.contrib.PolygonFigure#findSegment(int, int)
	 */
	// JUnitDoclet end javadoc_method findSegment()
	public void testFindSegment() throws Exception {
		// JUnitDoclet begin method findSegment
		// JUnitDoclet end method findSegment
	}

	// JUnitDoclet begin javadoc_method chop()
	/**
	 * Method testChop is testing chop
	 * @@see org.jhotdraw.contrib.PolygonFigure#chop(java.awt.Point)
	 */
	// JUnitDoclet end javadoc_method chop()
	public void testChop() throws Exception {
		// JUnitDoclet begin method chop
		// JUnitDoclet end method chop
	}

	// JUnitDoclet begin javadoc_method write()
	/**
	 * Method testWrite is testing write
	 * @@see org.jhotdraw.contrib.PolygonFigure#write(org.jhotdraw.util.StorableOutput)
	 */
	// JUnitDoclet end javadoc_method write()
	public void testWrite() throws Exception {
		// JUnitDoclet begin method write
		// JUnitDoclet end method write
	}

	// JUnitDoclet begin javadoc_method read()
	/**
	 * Method testRead is testing read
	 * @@see org.jhotdraw.contrib.PolygonFigure#read(org.jhotdraw.util.StorableInput)
	 */
	// JUnitDoclet end javadoc_method read()
	public void testRead() throws Exception {
		// JUnitDoclet begin method read
		// JUnitDoclet end method read
	}

	// JUnitDoclet begin javadoc_method locator()
	/**
	 * Method testLocator is testing locator
	 * @@see org.jhotdraw.contrib.PolygonFigure#locator(int)
	 */
	// JUnitDoclet end javadoc_method locator()
	public void testLocator() throws Exception {
		// JUnitDoclet begin method locator
		// JUnitDoclet end method locator
	}

	// JUnitDoclet begin javadoc_method bounds()
	/**
	 * Method testBounds is testing bounds
	 * @@see org.jhotdraw.contrib.PolygonFigure#bounds(java.awt.Polygon)
	 */
	// JUnitDoclet end javadoc_method bounds()
	public void testBounds() throws Exception {
		// JUnitDoclet begin method bounds
		// JUnitDoclet end method bounds
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
@


1.3
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@d11 1
a11 1
package CH.ifa.draw.test.contrib;
d13 1
a13 1
import CH.ifa.draw.contrib.PolygonFigure;
d30 1
a30 1
 * @@see CH.ifa.draw.contrib.PolygonFigure
d57 1
a57 1
	public CH.ifa.draw.contrib.PolygonFigure createInstance() throws Exception {
d59 1
a59 1
		return new CH.ifa.draw.contrib.PolygonFigure();
d90 1
a90 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#displayBox()
d101 1
a101 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#isEmpty()
d112 1
a112 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#handles()
d123 1
a123 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#basicDisplayBox(java.awt.Point, java.awt.Point)
d134 1
a134 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#getPolygon()
d145 1
a145 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#getInternalPolygon()
d156 1
a156 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#center()
d167 1
a167 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#points()
d178 1
a178 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#pointCount()
d189 1
a189 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#basicMoveBy(int, int)
d200 1
a200 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#drawBackground(java.awt.Graphics)
d211 1
a211 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#drawFrame(java.awt.Graphics)
d222 1
a222 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#containsPoint(int, int)
d233 1
a233 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#connectorAt(int, int)
d244 1
a244 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#addPoint(int, int)
d255 1
a255 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#setPointAt(java.awt.Point, int)
d266 1
a266 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#insertPointAt(java.awt.Point, int)
d277 1
a277 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#removePointAt(int)
d288 1
a288 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#scaleRotate(java.awt.Point, java.awt.Polygon, java.awt.Point)
d299 1
a299 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#smoothPoints()
d310 1
a310 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#splitSegment(int, int)
d321 1
a321 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#pointAt(int)
d332 1
a332 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#outermostPoint()
d343 1
a343 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#findSegment(int, int)
d354 1
a354 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#chop(java.awt.Point)
d365 1
a365 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#write(CH.ifa.draw.util.StorableOutput)
d376 1
a376 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#read(CH.ifa.draw.util.StorableInput)
d387 1
a387 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#locator(int)
d398 1
a398 1
	 * @@see CH.ifa.draw.contrib.PolygonFigure#bounds(java.awt.Polygon)
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d1 10
d13 1
d19 6
a24 7
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

d28 4
a31 4
* TestCase PolygonFigureTest is generated by
* JUnitDoclet to hold the tests for PolygonFigure.
* @@see CH.ifa.draw.contrib.PolygonFigure
*/
d38 381
a418 392
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.contrib.PolygonFigure polygonfigure = null;
  // JUnitDoclet end class
  
  /**
  * Constructor PolygonFigureTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public PolygonFigureTest(String name) {
    // JUnitDoclet begin method PolygonFigureTest
    super(name);
    // JUnitDoclet end method PolygonFigureTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.contrib.PolygonFigure createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new CH.ifa.draw.contrib.PolygonFigure();
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    polygonfigure = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    polygonfigure = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method displayBox()
  /**
  * Method testDisplayBox is testing displayBox
  * @@see CH.ifa.draw.contrib.PolygonFigure#displayBox()
  */
  // JUnitDoclet end javadoc_method displayBox()
  public void testDisplayBox() throws Exception {
    // JUnitDoclet begin method displayBox
    // JUnitDoclet end method displayBox
  }
  
  // JUnitDoclet begin javadoc_method isEmpty()
  /**
  * Method testIsEmpty is testing isEmpty
  * @@see CH.ifa.draw.contrib.PolygonFigure#isEmpty()
  */
  // JUnitDoclet end javadoc_method isEmpty()
  public void testIsEmpty() throws Exception {
    // JUnitDoclet begin method isEmpty
    // JUnitDoclet end method isEmpty
  }
  
  // JUnitDoclet begin javadoc_method handles()
  /**
  * Method testHandles is testing handles
  * @@see CH.ifa.draw.contrib.PolygonFigure#handles()
  */
  // JUnitDoclet end javadoc_method handles()
  public void testHandles() throws Exception {
    // JUnitDoclet begin method handles
    // JUnitDoclet end method handles
  }
  
  // JUnitDoclet begin javadoc_method basicDisplayBox()
  /**
  * Method testBasicDisplayBox is testing basicDisplayBox
  * @@see CH.ifa.draw.contrib.PolygonFigure#basicDisplayBox(java.awt.Point, java.awt.Point)
  */
  // JUnitDoclet end javadoc_method basicDisplayBox()
  public void testBasicDisplayBox() throws Exception {
    // JUnitDoclet begin method basicDisplayBox
    // JUnitDoclet end method basicDisplayBox
  }
  
  // JUnitDoclet begin javadoc_method getPolygon()
  /**
  * Method testGetPolygon is testing getPolygon
  * @@see CH.ifa.draw.contrib.PolygonFigure#getPolygon()
  */
  // JUnitDoclet end javadoc_method getPolygon()
  public void testGetPolygon() throws Exception {
    // JUnitDoclet begin method getPolygon
    // JUnitDoclet end method getPolygon
  }
  
  // JUnitDoclet begin javadoc_method getInternalPolygon()
  /**
  * Method testGetInternalPolygon is testing getInternalPolygon
  * @@see CH.ifa.draw.contrib.PolygonFigure#getInternalPolygon()
  */
  // JUnitDoclet end javadoc_method getInternalPolygon()
  public void testGetInternalPolygon() throws Exception {
    // JUnitDoclet begin method getInternalPolygon
    // JUnitDoclet end method getInternalPolygon
  }
  
  // JUnitDoclet begin javadoc_method center()
  /**
  * Method testCenter is testing center
  * @@see CH.ifa.draw.contrib.PolygonFigure#center()
  */
  // JUnitDoclet end javadoc_method center()
  public void testCenter() throws Exception {
    // JUnitDoclet begin method center
    // JUnitDoclet end method center
  }
  
  // JUnitDoclet begin javadoc_method points()
  /**
  * Method testPoints is testing points
  * @@see CH.ifa.draw.contrib.PolygonFigure#points()
  */
  // JUnitDoclet end javadoc_method points()
  public void testPoints() throws Exception {
    // JUnitDoclet begin method points
    // JUnitDoclet end method points
  }
  
  // JUnitDoclet begin javadoc_method pointCount()
  /**
  * Method testPointCount is testing pointCount
  * @@see CH.ifa.draw.contrib.PolygonFigure#pointCount()
  */
  // JUnitDoclet end javadoc_method pointCount()
  public void testPointCount() throws Exception {
    // JUnitDoclet begin method pointCount
    // JUnitDoclet end method pointCount
  }
  
  // JUnitDoclet begin javadoc_method basicMoveBy()
  /**
  * Method testBasicMoveBy is testing basicMoveBy
  * @@see CH.ifa.draw.contrib.PolygonFigure#basicMoveBy(int, int)
  */
  // JUnitDoclet end javadoc_method basicMoveBy()
  public void testBasicMoveBy() throws Exception {
    // JUnitDoclet begin method basicMoveBy
    // JUnitDoclet end method basicMoveBy
  }
  
  // JUnitDoclet begin javadoc_method drawBackground()
  /**
  * Method testDrawBackground is testing drawBackground
  * @@see CH.ifa.draw.contrib.PolygonFigure#drawBackground(java.awt.Graphics)
  */
  // JUnitDoclet end javadoc_method drawBackground()
  public void testDrawBackground() throws Exception {
    // JUnitDoclet begin method drawBackground
    // JUnitDoclet end method drawBackground
  }
  
  // JUnitDoclet begin javadoc_method drawFrame()
  /**
  * Method testDrawFrame is testing drawFrame
  * @@see CH.ifa.draw.contrib.PolygonFigure#drawFrame(java.awt.Graphics)
  */
  // JUnitDoclet end javadoc_method drawFrame()
  public void testDrawFrame() throws Exception {
    // JUnitDoclet begin method drawFrame
    // JUnitDoclet end method drawFrame
  }
  
  // JUnitDoclet begin javadoc_method containsPoint()
  /**
  * Method testContainsPoint is testing containsPoint
  * @@see CH.ifa.draw.contrib.PolygonFigure#containsPoint(int, int)
  */
  // JUnitDoclet end javadoc_method containsPoint()
  public void testContainsPoint() throws Exception {
    // JUnitDoclet begin method containsPoint
    // JUnitDoclet end method containsPoint
  }
  
  // JUnitDoclet begin javadoc_method connectorAt()
  /**
  * Method testConnectorAt is testing connectorAt
  * @@see CH.ifa.draw.contrib.PolygonFigure#connectorAt(int, int)
  */
  // JUnitDoclet end javadoc_method connectorAt()
  public void testConnectorAt() throws Exception {
    // JUnitDoclet begin method connectorAt
    // JUnitDoclet end method connectorAt
  }
  
  // JUnitDoclet begin javadoc_method addPoint()
  /**
  * Method testAddPoint is testing addPoint
  * @@see CH.ifa.draw.contrib.PolygonFigure#addPoint(int, int)
  */
  // JUnitDoclet end javadoc_method addPoint()
  public void testAddPoint() throws Exception {
    // JUnitDoclet begin method addPoint
    // JUnitDoclet end method addPoint
  }
  
  // JUnitDoclet begin javadoc_method setPointAt()
  /**
  * Method testSetPointAt is testing setPointAt
  * @@see CH.ifa.draw.contrib.PolygonFigure#setPointAt(java.awt.Point, int)
  */
  // JUnitDoclet end javadoc_method setPointAt()
  public void testSetPointAt() throws Exception {
    // JUnitDoclet begin method setPointAt
    // JUnitDoclet end method setPointAt
  }
  
  // JUnitDoclet begin javadoc_method insertPointAt()
  /**
  * Method testInsertPointAt is testing insertPointAt
  * @@see CH.ifa.draw.contrib.PolygonFigure#insertPointAt(java.awt.Point, int)
  */
  // JUnitDoclet end javadoc_method insertPointAt()
  public void testInsertPointAt() throws Exception {
    // JUnitDoclet begin method insertPointAt
    // JUnitDoclet end method insertPointAt
  }
  
  // JUnitDoclet begin javadoc_method removePointAt()
  /**
  * Method testRemovePointAt is testing removePointAt
  * @@see CH.ifa.draw.contrib.PolygonFigure#removePointAt(int)
  */
  // JUnitDoclet end javadoc_method removePointAt()
  public void testRemovePointAt() throws Exception {
    // JUnitDoclet begin method removePointAt
    // JUnitDoclet end method removePointAt
  }
  
  // JUnitDoclet begin javadoc_method scaleRotate()
  /**
  * Method testScaleRotate is testing scaleRotate
  * @@see CH.ifa.draw.contrib.PolygonFigure#scaleRotate(java.awt.Point, java.awt.Polygon, java.awt.Point)
  */
  // JUnitDoclet end javadoc_method scaleRotate()
  public void testScaleRotate() throws Exception {
    // JUnitDoclet begin method scaleRotate
    // JUnitDoclet end method scaleRotate
  }
  
  // JUnitDoclet begin javadoc_method smoothPoints()
  /**
  * Method testSmoothPoints is testing smoothPoints
  * @@see CH.ifa.draw.contrib.PolygonFigure#smoothPoints()
  */
  // JUnitDoclet end javadoc_method smoothPoints()
  public void testSmoothPoints() throws Exception {
    // JUnitDoclet begin method smoothPoints
    // JUnitDoclet end method smoothPoints
  }
  
  // JUnitDoclet begin javadoc_method splitSegment()
  /**
  * Method testSplitSegment is testing splitSegment
  * @@see CH.ifa.draw.contrib.PolygonFigure#splitSegment(int, int)
  */
  // JUnitDoclet end javadoc_method splitSegment()
  public void testSplitSegment() throws Exception {
    // JUnitDoclet begin method splitSegment
    // JUnitDoclet end method splitSegment
  }
  
  // JUnitDoclet begin javadoc_method pointAt()
  /**
  * Method testPointAt is testing pointAt
  * @@see CH.ifa.draw.contrib.PolygonFigure#pointAt(int)
  */
  // JUnitDoclet end javadoc_method pointAt()
  public void testPointAt() throws Exception {
    // JUnitDoclet begin method pointAt
    // JUnitDoclet end method pointAt
  }
  
  // JUnitDoclet begin javadoc_method outermostPoint()
  /**
  * Method testOutermostPoint is testing outermostPoint
  * @@see CH.ifa.draw.contrib.PolygonFigure#outermostPoint()
  */
  // JUnitDoclet end javadoc_method outermostPoint()
  public void testOutermostPoint() throws Exception {
    // JUnitDoclet begin method outermostPoint
    // JUnitDoclet end method outermostPoint
  }
  
  // JUnitDoclet begin javadoc_method findSegment()
  /**
  * Method testFindSegment is testing findSegment
  * @@see CH.ifa.draw.contrib.PolygonFigure#findSegment(int, int)
  */
  // JUnitDoclet end javadoc_method findSegment()
  public void testFindSegment() throws Exception {
    // JUnitDoclet begin method findSegment
    // JUnitDoclet end method findSegment
  }
  
  // JUnitDoclet begin javadoc_method chop()
  /**
  * Method testChop is testing chop
  * @@see CH.ifa.draw.contrib.PolygonFigure#chop(java.awt.Point)
  */
  // JUnitDoclet end javadoc_method chop()
  public void testChop() throws Exception {
    // JUnitDoclet begin method chop
    // JUnitDoclet end method chop
  }
  
  // JUnitDoclet begin javadoc_method write()
  /**
  * Method testWrite is testing write
  * @@see CH.ifa.draw.contrib.PolygonFigure#write(CH.ifa.draw.util.StorableOutput)
  */
  // JUnitDoclet end javadoc_method write()
  public void testWrite() throws Exception {
    // JUnitDoclet begin method write
    // JUnitDoclet end method write
  }
  
  // JUnitDoclet begin javadoc_method read()
  /**
  * Method testRead is testing read
  * @@see CH.ifa.draw.contrib.PolygonFigure#read(CH.ifa.draw.util.StorableInput)
  */
  // JUnitDoclet end javadoc_method read()
  public void testRead() throws Exception {
    // JUnitDoclet begin method read
    // JUnitDoclet end method read
  }
  
  // JUnitDoclet begin javadoc_method locator()
  /**
  * Method testLocator is testing locator
  * @@see CH.ifa.draw.contrib.PolygonFigure#locator(int)
  */
  // JUnitDoclet end javadoc_method locator()
  public void testLocator() throws Exception {
    // JUnitDoclet begin method locator
    // JUnitDoclet end method locator
  }
  
  // JUnitDoclet begin javadoc_method bounds()
  /**
  * Method testBounds is testing bounds
  * @@see CH.ifa.draw.contrib.PolygonFigure#bounds(java.awt.Polygon)
  */
  // JUnitDoclet end javadoc_method bounds()
  public void testBounds() throws Exception {
    // JUnitDoclet begin method bounds
    // JUnitDoclet end method bounds
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(PolygonFigureTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@a4 1
import CH.ifa.draw.contrib.PolygonFigure;
@

