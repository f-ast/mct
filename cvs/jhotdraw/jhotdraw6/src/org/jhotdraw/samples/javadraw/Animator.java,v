head	1.6;
access;
symbols
	jhotdraw60b1-release:1.6
	package_rename:1.6
	directory_rename:1.5
	reorg_6x_split_initial:1.5
	MVC_PHASE1:1.5.0.4
	NEW_ATTRIBUTES:1.5.0.2
	DNOYEB1_ALPHA-2:1.4.4.2
	release_JHD54b1:1.5
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4.4.1
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.24.01.25.50;	author dnoyeb;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.04.22.51.22;	author mrfloppy;	state Exp;
branches
	1.4.4.1
	1.4.6.1;
next	1.3;

1.3
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches;
next	;

1.4.4.1
date	2003.01.16.15.58.50;	author dnoyeb;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2003.01.22.02.49.32;	author dnoyeb;	state Exp;
branches;
next	;

1.4.6.1
date	2003.01.22.04.26.04;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.6
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Animator.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.samples.javadraw;

import org.jhotdraw.framework.*;
import org.jhotdraw.util.Animatable;

/**
 * @@version <$CURRENT_VERSION$>
 */
public  class Animator extends Thread {

	private DrawingView     fView;
	private Animatable      fAnimatable;

	private volatile boolean             fIsRunning;
	private static final int    DELAY = 1000 / 16;

	public Animator(Animatable animatable, DrawingView view) {
		super("Animator");
		fView = view;
		fAnimatable = animatable;
	}

	public void start() {
		super.start();
		fIsRunning = true;
	}

	public void end() {
		fIsRunning = false;
	}

	public void run() {
		while (fIsRunning) {
			long tm = System.currentTimeMillis();
			fView.freezeView();
			fAnimatable.animationStep();
			fView.checkDamage();
			fView.unfreezeView();

			// Delay for a while
			try {
				tm += DELAY;
				Thread.sleep(Math.max(0, tm - System.currentTimeMillis()));
			}
			catch (InterruptedException e) {
				break;
			}
		}
	}
}

@


1.5
log
@Merge with BUGFIX_670992
Animator is just a multithreaded fix modification.
@
text
@d12 1
a12 1
package CH.ifa.draw.samples.javadraw;
d14 2
a15 2
import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.Animatable;
@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@d25 1
a25 1
	private boolean             fIsRunning;
@


1.4.6.1
log
@Proposed Fix - Bug [ 670992 ] AWT deadlock
@
text
@d25 1
a25 1
	private volatile boolean             fIsRunning;
@


1.4.4.1
log
@drawing.update() is called as opposed to view.checkDamage().  This causes all affected views
to be updated as opposed to just the one.
figure.Remove() now returns the container it was removed from.  This may assist undo/redo.
@
text
@d48 1
a48 3
			fView.drawing().update();//we made a change to the drawing, so update it.
			//note that this too is in need of drawing - view seperation.  Why freeze the view
			//when you are making drawing level changes? need to freeze the drawing. !!!dnoyeb!!!
@


1.4.4.2
log
@Fix [ 670992 ] AWT deadlock
Improvement to Animator
@
text
@d25 1
a25 1
	private volatile boolean	fIsRunning;
d42 1
a42 4
	
	/**
	 *
	 */
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@a13 2
import java.awt.*;
import java.util.*;
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)Animator.java 5.2
d4 6
d19 3
a21 1

d24 2
a25 2
    private DrawingView     fView;
    private Animatable      fAnimatable;
d27 2
a28 2
    private boolean             fIsRunning;
    private static final int    DELAY = 1000 / 16;
d30 33
a62 32
    public Animator(Animatable animatable, DrawingView view) {
        super("Animator");
        fView = view;
        fAnimatable = animatable;
    }

    public void start() {
        super.start();
        fIsRunning = true;
    }

    public void end() {
        fIsRunning = false;
    }

    public void run() {
        while (fIsRunning) {
            long tm = System.currentTimeMillis();
            fView.freezeView();
            fAnimatable.animationStep();
            fView.checkDamage();
            fView.unfreezeView();

            // Delay for a while
            try {
                tm += DELAY;
                Thread.sleep(Math.max(0, tm - System.currentTimeMillis()));
            } catch (InterruptedException e) {
                break;
            }
        }
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)Animator.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
