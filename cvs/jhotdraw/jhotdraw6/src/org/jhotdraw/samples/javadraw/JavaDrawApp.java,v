head	1.19;
access;
symbols
	jhotdraw60b1-release:1.19
	package_rename:1.18
	directory_rename:1.17
	reorg_6x_split_initial:1.17
	MVC_PHASE1:1.17.0.2
	NEW_ATTRIBUTES:1.16.0.2
	DNOYEB1_ALPHA-2:1.10.4.6
	release_JHD54b1:1.15
	BUGFIX_670992:1.13.0.2
	DNOYEB1_ALPHA-1:1.10.4.4
	dnoyeb1:1.10.0.4
	repack:1.10.0.2
	Root_repack:1.10
	Before_FigureVisitor:1.8
	JHotDraw_5-3:1.4
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.19
date	2004.02.01.18.01.08;	author mrfloppy;	state Exp;
branches;
next	1.18;

1.18
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.22.23.58.43;	author mrfloppy;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.30.20.27.18;	author dnoyeb;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.30.00.27.34;	author mrfloppy;	state Exp;
branches;
next	1.14;

1.14
date	2003.01.26.01.35.53;	author dnoyeb;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.12.20.21.16;	author dnoyeb;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.02.19.05.45;	author dnoyeb;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.02.17.39.19;	author dnoyeb;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.08.17.06.33;	author mtnygard;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2002.09.23.07.47.26;	author mrfloppy;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.07.15.55.39;	author mrfloppy;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.04.22.51.22;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.20.19.57.59;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.30.20.40.07;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches;
next	;

1.10.4.1
date	2003.01.03.15.57.42;	author dnoyeb;	state Exp;
branches;
next	1.10.4.2;

1.10.4.2
date	2003.01.16.06.03.53;	author dnoyeb;	state Exp;
branches;
next	1.10.4.3;

1.10.4.3
date	2003.01.18.04.49.04;	author dnoyeb;	state Exp;
branches;
next	1.10.4.4;

1.10.4.4
date	2003.01.21.00.04.34;	author dnoyeb;	state Exp;
branches;
next	1.10.4.5;

1.10.4.5
date	2003.01.22.02.49.32;	author dnoyeb;	state Exp;
branches;
next	1.10.4.6;

1.10.4.6
date	2003.01.26.00.51.05;	author dnoyeb;	state Exp;
branches;
next	1.10.4.7;

1.10.4.7
date	2003.02.02.16.54.09;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.19
log
@no message
@
text
@/*
 * @@(#)JavaDrawApp.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.samples.javadraw;

import org.jhotdraw.framework.*;
import org.jhotdraw.standard.*;
import org.jhotdraw.figures.*;
import org.jhotdraw.util.*;
import org.jhotdraw.application.*;
import org.jhotdraw.contrib.*;
import org.jhotdraw.contrib.html.HTMLTextAreaFigure;
import org.jhotdraw.contrib.html.HTMLTextAreaTool;
import org.jhotdraw.contrib.zoom.ZoomDrawingView;
import org.jhotdraw.contrib.zoom.ZoomTool;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.net.URL;

/**
 * @@version <$CURRENT_VERSION$>
 */
public  class JavaDrawApp extends MDI_DrawApplication {

	private Animator            fAnimator;
	private static String       fgSampleImagesPath = "/org/jhotdraw/samples/javadraw/sampleimages";
	private static String       fgSampleImagesResourcePath = fgSampleImagesPath + "/";

	JavaDrawApp() {
		super("JHotDraw");
	}

	/**
	 * Expose constructor for benefit of subclasses.
	 *
	 * @@param title The window title for this application's frame.
	 */
	public JavaDrawApp(String title) {
		super(title);
	}

	/**
	 * Factory method which create a new instance of this
	 * application.
	 *
	 * @@return	newly created application
	 */
	protected DrawApplication createApplication() {
		return new JavaDrawApp();
	}

	protected DrawingView createDrawingView(Drawing newDrawing) {
		Dimension d = getDrawingViewSize();
		DrawingView newDrawingView = new ZoomDrawingView(this, d.width, d.height);
		newDrawingView.setDrawing(newDrawing);
		// notify listeners about created view when the view is added to the desktop
		//fireViewCreatedEvent(newDrawingView);
		return newDrawingView;
	}

	//-- application life cycle --------------------------------------------

	public void destroy() {
		super.destroy();
		endAnimation();
	}

	//-- DrawApplication overrides -----------------------------------------

	protected void createTools(JToolBar palette) {
		super.createTools(palette);

		Tool tool = new ZoomTool(this);
		palette.add(createToolButton(IMAGES + "ZOOM", "Zoom Tool", tool));

		tool = new UndoableTool(new TextTool(this, new TextFigure()));
		palette.add(createToolButton(IMAGES + "TEXT", "Text Tool", tool));

		tool = new UndoableTool(new ConnectedTextTool(this, new TextFigure()));
		palette.add(createToolButton(IMAGES + "ATEXT", "Connected Text Tool", tool));

		tool = new URLTool(this);
		palette.add(createToolButton(IMAGES + "URL", "URL Tool", tool));

		tool = new UndoableTool(new CreationTool(this, new RectangleFigure()));
		palette.add(createToolButton(IMAGES + "RECT", "Rectangle Tool", tool));

		tool = new UndoableTool(new CreationTool(this, new RoundRectangleFigure()));
		palette.add(createToolButton(IMAGES + "RRECT", "Round Rectangle Tool", tool));

		tool = new UndoableTool(new CreationTool(this, new EllipseFigure()));
		palette.add(createToolButton(IMAGES + "ELLIPSE", "Ellipse Tool", tool));

		tool = new UndoableTool(new PolygonTool(this));
		palette.add(createToolButton(IMAGES + "POLYGON", "Polygon Tool", tool));

		tool = new UndoableTool(new CreationTool(this, new TriangleFigure()));
		palette.add(createToolButton(IMAGES + "TRIANGLE", "Triangle Tool", tool));

		tool = new UndoableTool(new CreationTool(this, new DiamondFigure()));
		palette.add(createToolButton(IMAGES + "DIAMOND", "Diamond Tool", tool));

		tool = new UndoableTool(new CreationTool(this, new LineFigure()));
		palette.add(createToolButton(IMAGES + "LINE", "Line Tool", tool));

		tool = new UndoableTool(new ConnectionTool(this, new LineConnection()));
		palette.add(createToolButton(IMAGES + "CONN", "Connection Tool", tool));

		tool = new UndoableTool(new ConnectionTool(this, new ElbowConnection()));
		palette.add(createToolButton(IMAGES + "OCONN", "Elbow Connection Tool", tool));

		tool = new UndoableTool(new ScribbleTool(this));
		palette.add(createToolButton(IMAGES + "SCRIBBL", "Scribble Tool", tool));

		tool = new UndoableTool(new BorderTool(this));
		palette.add(createToolButton(IMAGES + "BORDDEC", "Border Tool", tool));

		Component button = new JButton("Hello World");
		tool = new CreationTool(this, new ComponentFigure(button));
		palette.add(createToolButton(IMAGES + "RECT", "Component Tool", tool));

		tool = new TextAreaTool(this, new TextAreaFigure());
		palette.add(createToolButton(IMAGES + "TEXTAREA", "TextArea Tool", tool));

		GraphicalCompositeFigure fig = new GraphicalCompositeFigure();
		fig.setLayouter(new SimpleLayouter(fig));
		tool = new CreationTool(this, fig);
		palette.add(createToolButton(IMAGES + "RECT", "Container Figure Tool", tool));

		tool = new CompositeFigureCreationTool(this, new RectangleFigure());
		palette.add(createToolButton(IMAGES + "RECT", "Nested Figure Tool", tool));

		tool = new HTMLTextAreaTool(this, new HTMLTextAreaFigure());
		palette.add(createToolButton(IMAGES + "TEXTAREA", "HTML TextArea Tool", tool));

		LineConnection lineConnection = new LineConnection();
		lineConnection.setStartDecoration(null);
		tool = new UndoableTool(new SplitConnectionTool(this, lineConnection));
		palette.add(createToolButton(IMAGES + "OCONN", "Split Connection Tool", tool));
	}

	protected Tool createSelectionTool() {
		return new MySelectionTool(this);
	}

	protected void createMenus(JMenuBar mb) {
		super.createMenus(mb);
		addMenuIfPossible(mb, createAnimationMenu());
		addMenuIfPossible(mb, createImagesMenu());
		addMenuIfPossible(mb, createWindowMenu());
	}

	protected JMenu createAnimationMenu() {
		CommandMenu menu = new CommandMenu("Animation");
		Command cmd = new AbstractCommand("Start Animation", this) {
			public void execute() {
				startAnimation();
			}
		};
		menu.add(cmd);

		cmd = new AbstractCommand("Stop Animation", this) {
			public void execute() {
				endAnimation();
			}
		};
		menu.add(cmd);
		return menu;
	}

	protected JMenu createWindowMenu() {
		CommandMenu menu = new CommandMenu("Window");
		Command cmd = new AbstractCommand("New View", this) {
			public void execute() {
				newView();
			}
		};
		menu.add(cmd);

		cmd = new AbstractCommand("New Window", this, false) {
			public void execute() {
				newWindow(createDrawing());
			}
		};
		menu.add(cmd);

		menu.addSeparator();
		menu.add(new WindowMenu("Window List", (MDIDesktopPane)getDesktop(), this));
		return menu;
	}

	protected JMenu createImagesMenu() {
		CommandMenu menu = new CommandMenu("Images");
		URL url = getClass().getResource(fgSampleImagesPath);
		if (url == null) {
			throw new JHotDrawRuntimeException("Could not locate images: " + fgSampleImagesPath);
		}
		File imagesDirectory = new File(url.getFile());

		try {
			String[] list = imagesDirectory.list();
			for (int i = 0; i < list.length; i++) {
				String name = list[i];
				String path = fgSampleImagesResourcePath+name;
				menu.add(new UndoableCommand(
					new InsertImageCommand(name, path, this)));
			}
		}
		catch (Exception e) {
			// do nothing
		}
		return menu;
	}

	protected Drawing createDrawing() {
		Drawing dwg = new BouncingDrawing();
        dwg.setTitle(getDefaultDrawingTitle());
		return dwg;
		//return new StandardDrawing();
	}

	//---- animation support --------------------------------------------

	public void startAnimation() {
		if (view().drawing() instanceof Animatable && fAnimator == null) {
			fAnimator = new Animator((Animatable)view().drawing(), view());
			fAnimator.start();
		}
	}

	public void endAnimation() {
		if (fAnimator != null) {
			fAnimator.end();
			fAnimator = null;
		}
	}

	protected JMenu createDebugMenu() {
		CommandMenu menu = (CommandMenu)super.createDebugMenu();

		Command cmd = new AbstractCommand("Clipping Update", this) {
			public void execute() {
				this.view().setDisplayUpdate(new ClippingUpdateStrategy());
			}
		};
		menu.add(cmd);

		return menu;
	}

	//-- main -----------------------------------------------------------

	public static void main(String[] args) {
		JavaDrawApp window = new JavaDrawApp();
		window.open();
	}
}
@


1.18
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@d36 1
a36 1
	private static String       fgSampleImagesPath = "/CH/ifa/draw/samples/javadraw/sampleimages";
d205 3
@


1.17
log
@no message
@
text
@d12 1
a12 1
package CH.ifa.draw.samples.javadraw;
d14 10
a23 10
import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.*;
import CH.ifa.draw.figures.*;
import CH.ifa.draw.util.*;
import CH.ifa.draw.application.*;
import CH.ifa.draw.contrib.*;
import CH.ifa.draw.contrib.html.HTMLTextAreaFigure;
import CH.ifa.draw.contrib.html.HTMLTextAreaTool;
import CH.ifa.draw.contrib.zoom.ZoomDrawingView;
import CH.ifa.draw.contrib.zoom.ZoomTool;
@


1.16
log
@Redaction:  Need to maintain the behavior of exit() so I added a new method
to handle this new behavior.  Plus JavaDrawApp has an example yes-no close
dialog added.  Requires Swing of course..
@
text
@d45 1
a45 1
	 * 
d62 7
a68 2
	protected DrawingView createDrawingView() {
		return new ZoomDrawingView(this);
d257 1
a257 8
	protected boolean closeQuery(){
		int reply = JOptionPane.showConfirmDialog(this,
													  "Do you really want to exit?",
													  "JHotDraw - Exit" ,
													  JOptionPane.YES_NO_OPTION,
													  JOptionPane.QUESTION_MESSAGE);
		return (reply == JOptionPane.YES_OPTION);
	}
a263 1
	
@


1.15
log
@prepare for 5.4 release: various bug fixes
@
text
@d252 8
a259 1

d266 1
@


1.14
log
@[ 674786 ] ZoomDrawingView needs dragin (drawing)
fix
@
text
@d34 1
d39 12
a50 8
  /**
   * Expose constructor for benefit of subclasses.
   * 
   * @@param title The window title for this application's frame.
   */
  protected JavaDrawApp(String title) {
  	super(title);
  }
d59 1
a59 1
		return new JavaDrawApp("JHotDraw");
d63 1
a63 5
		Drawing d = createDrawing();
		d.setTitle(getDefaultDrawingTitle());
		DrawingView dv = new ZoomDrawingView(this);
		dv.setDrawing(d);
		return  dv;
d218 3
a220 1
		return new BouncingDrawing();
d240 13
d256 1
a256 1
		JavaDrawApp window = new JavaDrawApp("JHotDraw");
@


1.13
log
@Clean up head to be what it was before i mistakenly committed my changes to it.
My changes should have been committed to a branch, and let mrfloppy merge to the trunk.
This will happen from now on.
@
text
@d58 5
a62 1
		return new ZoomDrawingView(this);
@


1.12
log
@bug 541524, 546628,547188
Improved Desktop functionality

This is an extra commit because NetBeans left off my comments
@
text
@d57 2
a58 4
	protected DrawingView createDrawingView(Drawing newDrawing) {
		Dimension d = getDrawingViewSize();
		DrawingView newDrawingView = new ZoomDrawingView( newDrawing ,this,d.width, d.height);
		return newDrawingView;
d60 1
d213 1
a213 3
		Drawing dwg = new BouncingDrawing();
        dwg.setTitle( getDefaultDrawingTitle() );
		return dwg;
d237 1
a237 2
        window.open();
        window.newWindow( );
@


1.11
log
@
Changes for better Desktop handling.
@
text
@@


1.10
log
@Add support for export to SVG.  See CH.ifa.draw.contrib.SVGStorageFormat.
Cannot presently re-import from SVG, as much semantic value is lost when
flattening output.

SVG support requires Apache Batik 1.5.
@
text
@d57 4
a60 2
	protected DrawingView createDrawingView() {
		return new ZoomDrawingView(this);
a61 1

d214 3
a216 1
		return new BouncingDrawing();
d240 2
a241 1
		window.open();
@


1.10.4.1
log
@Changes for better Desktop handling.
DrawingView Always has a Drawing.
bug 541524, 546628,547188
@
text
@d57 2
a58 4
	protected DrawingView createDrawingView(Drawing newDrawing) {
		Dimension d = getDrawingViewSize();
		DrawingView newDrawingView = new ZoomDrawingView( newDrawing ,this,d.width, d.height);
		return newDrawingView;
d60 1
d213 1
a213 3
		Drawing dwg = new BouncingDrawing();
        dwg.setTitle( getDefaultDrawingTitle() );
		return dwg;
d237 1
a237 2
        window.open();
        window.newWindow( );
@


1.10.4.2
log
@New FigureDecorator using decorator pattern now installed.
A few other minor cleanups.
@
text
@d33 1
a33 1
public class JavaDrawApp extends MDI_DrawApplication {
d116 1
a116 1
		tool = new UndoableTool(new DecoratorTool(this, new BorderFigureDecorator()));
a224 1
			//store start and end positions of animatable figures for undo?
@


1.10.4.3
log
@Decorator Figure returns...To apease the brave hearted :-)
Its not very well integrated with the current state of affairs.  It works as well as it always
has though.
@
text
@a118 3
		tool = new UndoableTool(new BorderTool(this));
		palette.add(createToolButton(IMAGES + "BORDDEC", "Border Tool", tool));

@


1.10.4.4
log
@Restored the ContainerFigure.  Its very problematic for tools, but I have a better understanding of the undo system now.
As a result I have restored most of what was their again with explanations on how it works for the next traveler...
Also fixed a few issues with grouping and ungrouping. since figures can no longer be in 2 containers at once the container
hopping that was being done by the group command would fail.  I believe border tool did similar hopping by having a figure
as part of the drawing and part of the borderFigure temporarily.  Cant do that anymore.
@
text
@a217 1
		//Drawing dwg = new StandardDrawing();
@


1.10.4.5
log
@Fix [ 670992 ] AWT deadlock
Improvement to Animator
@
text
@d242 1
a242 11
    /** 
	 * The method newWindow is manipulating the GUI outside of the GUI thread
	 * after the GUI has been setVisible(true), it has the  potential to cause
	 * deadlock.  It should do its updating in the AWT event
	 * thread.
	 *
	 * @@see java.awt.EventQueue#invokeAndWait
	 * @@see javax.swing.SwingUtilities#invokeAndWait
	 * @@todo devise a performance efficient way of animating this without creating
	 *       lots of threads.
	 */
d244 1
a244 1
		final JavaDrawApp window = new JavaDrawApp("JHotDraw");
d246 1
a246 16
		Runnable r = new Runnable() {
			public void run() {
				window.newWindow();
			}
		};
		try {
			java.awt.EventQueue.invokeAndWait( r );
		}
		catch(java.lang.InterruptedException ie){
			System.err.println(ie.getMessage());
			window.exit();
		}
		catch(java.lang.reflect.InvocationTargetException ite){
			System.err.println(ite.getMessage());
			window.exit();
		}	
@


1.10.4.6
log
@CompositeFigure does not return figures from add, remove, orphan anymore
new method, restore added to bring back orphaned figures
compositeFigure keeps record of its orphans for the restore method
NullFigures inserted as placeholders into the figureList
dumps record and nullFigures when remove(figure) called. this safely restores
figures to their old places.
figureRequestRemove and figureRemove events eliminated.
Group and Ungroup commands redone to respect these new ideas.
have not done anything with delete, cut, copy, paste yet.
NullFigure added 0,0 for its display box, else throwing exceptions
@
text
@d217 2
a218 2
		///Drawing dwg = new BouncingDrawing();
		Drawing dwg = new StandardDrawing();
@


1.10.4.7
log
@figure.release() cleanup.  trying to make release work properly.
@
text
@d269 1
a269 1
			System.err.println(ite);
@


1.9
log
@Fixed problem with TextArea figures + cascading FigureChangeEvent
@
text
@a33 1

d38 8
a45 3
	JavaDrawApp() {
		super("JHotDraw");
	}
d54 1
a54 1
		return new JavaDrawApp();
d236 1
a236 1
		JavaDrawApp window = new JavaDrawApp();
@


1.8
log
@bug fix 597631
@
text
@d135 1
a135 1
		palette.add(createToolButton(IMAGES + "OCONN", "Elbow Connection Tool", tool));
@


1.7
log
@after variou merges... (before 5.4 release)
@
text
@d115 1
a115 1
		tool = new CreationTool(this, new ComponentFigure(button, this));
@


1.6
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@a13 5
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
d25 5
d36 2
a37 2
	private static String       fgSampleImagesPath = "CH/ifa/draw/samples/javadraw/sampleimages/";
	private static String       fgSampleImagesResourcePath = "/"+fgSampleImagesPath;
d131 5
a184 1

d190 3
a192 1
		File imagesDirectory = new File(fgSampleImagesPath);
d201 4
a204 1
		} catch (Exception e) {}
@


1.5
log
@no message
@
text
@d25 2
d95 1
a95 1
		
d98 1
a98 1
			
d119 12
a130 1
		palette.add(createToolButton(IMAGES + "COOLTEXTAREA", "Component Tool", tool));
d178 3
a180 3
//		menu.addSeparator();
//		menu.add(new WindowMenu("Window List", (MDIDesktopPane)getDesktop(), this));
				
@


1.4
log
@merge dnd (before 5.3)
@
text
@d25 2
d50 5
a54 1
	
d67 4
a70 1
		Tool tool = new UndoableTool(new TextTool(this, new TextFigure()));
d111 7
d165 2
a166 2
		menu.addSeparator();
		menu.add(new WindowMenu("Window List", (MDIDesktopPane)getDesktop(), this));
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@a48 4
	public void open() {
		super.open();
	}

d61 1
a61 1
		Tool tool = new UndoableTool(new TextTool(view(), new TextFigure()));
d64 1
a64 2
		tool = new UndoableTool(new ConnectedTextTool(view(), new TextFigure()));
//        tool = new ConnectedTextTool(view(), new TextFigure());
d67 1
a67 1
		tool = new URLTool(view());
d70 1
a70 1
		tool = new UndoableTool(new CreationTool(view(), new RectangleFigure()));
d73 1
a73 1
		tool = new UndoableTool(new CreationTool(view(), new RoundRectangleFigure()));
d76 1
a76 1
		tool = new UndoableTool(new CreationTool(view(), new EllipseFigure()));
d79 1
a79 1
		tool = new UndoableTool(new PolygonTool(view()));
d82 1
a82 1
		tool = new UndoableTool(new CreationTool(view(), new TriangleFigure()));
d85 1
a85 1
		tool = new UndoableTool(new CreationTool(view(), new DiamondFigure()));
d88 1
a88 1
		tool = new UndoableTool(new CreationTool(view(), new LineFigure()));
d91 1
a91 1
		tool = new UndoableTool(new ConnectionTool(view(), new LineConnection()));
d94 1
a94 1
		tool = new UndoableTool(new ConnectionTool(view(), new ElbowConnection()));
d97 1
a97 1
		tool = new UndoableTool(new ScribbleTool(view()));
d100 1
a100 1
		tool = new UndoableTool(new BorderTool(view()));
d105 1
a105 1
		return new MySelectionTool(view());
d116 4
a119 7
		JMenu menu = new JMenu("Animation");
		JMenuItem mi = new JMenuItem("Start Animation");
		mi.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					startAnimation();
				}
d121 2
a122 2
		);
		menu.add(mi);
d124 3
a126 6
		mi = new JMenuItem("Stop Animation");
		mi.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					endAnimation();
				}
d128 2
a129 2
		);
		menu.add(mi);
d134 4
a137 7
		JMenu menu = new JMenu("Window");
		JMenuItem mi = new JMenuItem("New View");
		mi.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					newView();
				}
d139 6
a144 8
		);
		menu.add(mi);
		mi = new JMenuItem("New Window");
		mi.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					newWindow();
				}
d146 2
a147 2
		);
		menu.add(mi);
d150 1
a150 1
		menu.add(new WindowMenu("Window List", (MDIDesktopPane)getDesktop()));
d164 1
a164 1
					new InsertImageCommand(name, path, view())));
d178 2
a179 2
		if (drawing() instanceof Animatable && fAnimator == null) {
			fAnimator = new Animator((Animatable)drawing(), view());
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)JavaDrawApp.java 5.2
d4 6
d26 3
d31 14
a44 14
    private Animator            fAnimator;
    private static String       fgSampleImagesPath = "CH/ifa/draw/samples/javadraw/sampleimages/";
    private static String       fgSampleImagesResourcePath = "/"+fgSampleImagesPath;

    JavaDrawApp() {
        super("JHotDraw");
    }

    /**
     * Factory method which create a new instance of this
     * application.
     *
     * @@return	newly created application
     */
d49 3
a51 3
    public void open() {
        super.open();
    }
d53 1
a53 1
    //-- application life cycle --------------------------------------------
d55 4
a58 4
    public void destroy() {
        super.destroy();
        endAnimation();
    }
d60 1
a60 1
    //-- DrawApplication overrides -----------------------------------------
d62 2
a63 2
    protected void createTools(JToolBar palette) {
        super.createTools(palette);
d65 2
a66 2
        Tool tool = new TextTool(view(), new TextFigure());
        palette.add(createToolButton(IMAGES+"TEXT", "Text Tool", tool));
d68 3
a70 2
        tool = new ConnectedTextTool(view(), new TextFigure());
        palette.add(createToolButton(IMAGES+"ATEXT", "Connected Text Tool", tool));
d72 2
a73 2
        tool = new URLTool(view());
        palette.add(createToolButton(IMAGES+"URL", "URL Tool", tool));
d75 2
a76 2
        tool = new CreationTool(view(), new RectangleFigure());
        palette.add(createToolButton(IMAGES+"RECT", "Rectangle Tool", tool));
d78 2
a79 2
        tool = new CreationTool(view(), new RoundRectangleFigure());
        palette.add(createToolButton(IMAGES+"RRECT", "Round Rectangle Tool", tool));
d81 2
a82 2
        tool = new CreationTool(view(), new EllipseFigure());
        palette.add(createToolButton(IMAGES+"ELLIPSE", "Ellipse Tool", tool));
d84 2
a85 2
        tool = new CreationTool(view(), new LineFigure());
        palette.add(createToolButton(IMAGES+"LINE", "Line Tool", tool));
d87 8
a94 2
        tool = new ConnectionTool(view(), new LineConnection());
        palette.add(createToolButton(IMAGES+"CONN", "Connection Tool", tool));
d96 2
a97 2
        tool = new ConnectionTool(view(), new ElbowConnection());
        palette.add(createToolButton(IMAGES+"OCONN", "Elbow Connection Tool", tool));
d99 2
a100 2
        tool = new ScribbleTool(view());
        palette.add(createToolButton(IMAGES+"SCRIBBL", "Scribble Tool", tool));
d102 2
a103 2
        tool = new PolygonTool(view());
        palette.add(createToolButton(IMAGES+"POLYGON", "Polygon Tool", tool));
d105 3
a107 3
        tool = new BorderTool(view());
        palette.add(createToolButton(IMAGES+"BORDDEC", "Border Tool", tool));
    }
d109 3
a111 3
    protected Tool createSelectionTool() {
        return new MySelectionTool(view());
    }
d113 1
a113 1
    protected void createMenus(JMenuBar mb) {
d115 4
a118 4
		mb.add(createAnimationMenu());
		mb.add(createImagesMenu());
		mb.add(createWindowMenu());
    }
d120 1
a120 1
    protected JMenu createAnimationMenu() {
d124 5
a128 5
		    new ActionListener() {
		        public void actionPerformed(ActionEvent event) {
		            startAnimation();
		        }
		    }
d134 5
a138 5
		    new ActionListener() {
		        public void actionPerformed(ActionEvent event) {
		            endAnimation();
		        }
		    }
d144 1
a144 1
    protected JMenu createWindowMenu() {
d148 5
a152 5
		    new ActionListener() {
		        public void actionPerformed(ActionEvent event) {
		            newView();
		        }
		    }
d157 5
a161 5
		    new ActionListener() {
		        public void actionPerformed(ActionEvent event) {
		            newWindow();
		        }
		    }
d164 4
d171 1
a171 1
    protected JMenu createImagesMenu() {
d175 7
a181 6
		    String[] list = imagesDirectory.list();
		    for (int i = 0; i < list.length; i++) {
		        String name = list[i];
		        String path = fgSampleImagesResourcePath+name;
		        menu.add(new InsertImageCommand(name, path, view()));
		    }
d186 20
a205 20
    protected Drawing createDrawing() {
        return new BouncingDrawing();
        //return new StandardDrawing();
    }

    //---- animation support --------------------------------------------

    public void startAnimation() {
        if (drawing() instanceof Animatable && fAnimator == null) {
            fAnimator = new Animator((Animatable)drawing(), view());
            fAnimator.start();
        }
    }

    public void endAnimation() {
        if (fAnimator != null) {
            fAnimator.end();
            fAnimator = null;
        }
    }
d207 1
a207 1
    //-- main -----------------------------------------------------------
d212 1
a212 1
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)JavaDrawApp.java 5.1
d8 1
d20 1
a20 1
public  class JavaDrawApp extends DrawApplication {
d30 10
d53 1
a53 1
    protected void createTools(Panel palette) {
d97 1
a97 1
    protected void createMenus(MenuBar mb) {
d104 3
a106 3
    protected Menu createAnimationMenu() {
		Menu menu = new Menu("Animation");
		MenuItem mi = new MenuItem("Start Animation");
d116 1
a116 1
		mi = new MenuItem("Stop Animation");
d128 3
a130 3
    protected Menu createWindowMenu() {
		Menu menu = new Menu("Window");
		MenuItem mi = new MenuItem("New Window");
d134 10
a143 1
		            openView();
d151 1
a151 1
    protected Menu createImagesMenu() {
a183 8
    }

    public void openView() {
		JavaDrawApp window = new JavaDrawApp();
		window.open();
		window.setDrawing(drawing());
		window.setTitle("JHotDraw (View)");

@


1.1.1.1
log
@
Initial revision.
@
text
@@
