head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2005.01.30.12.04.11;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.06.14.36.53;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.23.05.06.25;	author cfm1;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Package reorganisation (clean-up)
@
text
@/*
 * @@(#)NodeFigure.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.samples.offsetConnectors;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.Iterator;
import java.util.List;

import org.jhotdraw.figures.LineConnection;
import org.jhotdraw.figures.TextFigure;
import org.jhotdraw.framework.ConnectionFigure;
import org.jhotdraw.framework.Connector;
import org.jhotdraw.framework.HandleEnumeration;
import org.jhotdraw.standard.ConnectionHandle;
import org.jhotdraw.standard.HandleEnumerator;
import org.jhotdraw.standard.LocatorConnector;
import org.jhotdraw.standard.NullHandle;
import org.jhotdraw.standard.RelativeLocator;
import org.jhotdraw.util.CollectionsFactory;
import org.jhotdraw.util.Geom;

public class NodeFigure extends TextFigure {

	private static final int BORDER = 6;
	private List fConnectors;
	private boolean fConnectorsVisible;

	public NodeFigure() {
		initialize();
		fConnectors = null;
	}

	public Rectangle displayBox() {
		Rectangle box = super.displayBox();
		int d = BORDER;
		box.grow(d, d);
		return box;
	}

	public boolean containsPoint(int x, int y) {
		// add slop for connectors
		if (fConnectorsVisible) {
			Rectangle r = displayBox();
			int d = LocatorConnector.SIZE / 2;
			r.grow(d, d);
			return r.contains(x, y);
		}
		return super.containsPoint(x, y);
	}

	private void drawBorder(Graphics g) {
		Rectangle r = displayBox();
		g.setColor(getFrameColor());
		g.drawRect(r.x, r.y, r.width - 1, r.height - 1);
	}

	public void draw(Graphics g) {
		super.draw(g);
		drawBorder(g);
		drawConnectors(g);
	}

	public HandleEnumeration handles() {
		ConnectionFigure prototype = new LineConnection();
		List handles = CollectionsFactory.current().createList();
		handles.add(new ConnectionHandle(this, RelativeLocator.east(),
				prototype));
		handles.add(new ConnectionHandle(this, RelativeLocator.west(),
				prototype));
		handles.add(new ConnectionHandle(this, RelativeLocator.south(),
				prototype));
		handles.add(new ConnectionHandle(this, RelativeLocator.north(),
				prototype));

		handles.add(new NullHandle(this, RelativeLocator.southEast()));
		handles.add(new NullHandle(this, RelativeLocator.southWest()));
		handles.add(new NullHandle(this, RelativeLocator.northEast()));
		handles.add(new NullHandle(this, RelativeLocator.northWest()));
		return new HandleEnumerator(handles);
	}

	private void drawConnectors(Graphics g) {
		if (fConnectorsVisible) {
			Iterator connectorsIterator = getConnectors().iterator();
			while (connectorsIterator.hasNext())
				((Connector) connectorsIterator.next()).draw(g);
		}
	}

	/**
	 */
	public void connectorVisibility(boolean isVisible) {
		fConnectorsVisible = isVisible;
		invalidate();
	}

	/**
	 */
	public Connector connectorAt(int x, int y) {
		return findConnector(x, y);
	}

	/**
	 */
	private List getConnectors() {
		if (fConnectors == null) {
			createConnectors();
		}
		return fConnectors;
	}

	private void createConnectors() {
		fConnectors = CollectionsFactory.current().createList(4);
		fConnectors.add(new LocatorConnector(this, RelativeLocator.north()));
		fConnectors.add(new LocatorConnector(this, RelativeLocator.south()));
		fConnectors.add(new LocatorConnector(this, RelativeLocator.west()));
		fConnectors.add(new LocatorConnector(this, RelativeLocator.east()));
	}

	private Connector findConnector(int x, int y) {
		// return closest connector
		long min = Long.MAX_VALUE;
		Connector closest = null;
		Iterator connectorsIterator = getConnectors().iterator();
		while (connectorsIterator.hasNext()) {
			Connector c = (Connector) connectorsIterator.next();
			Point p2 = Geom.center(c.displayBox());
			long d = Geom.length2(x, y, p2.x, p2.y);
			if (d < min) {
				min = d;
				closest = c;
			}
		}
		return closest;
	}

	private void initialize() {
		setText("node");
		Font fb = new Font("Helvetica", Font.BOLD, 12);
		setFont(fb);
		createConnectors();
	}
}
@


1.2
log
@adjusted formatting
@
text
@d14 5
a18 2
import java.awt.*;
import java.util.*;
d21 12
a32 4
import org.jhotdraw.framework.*;
import org.jhotdraw.standard.*;
import org.jhotdraw.figures.*;
import org.jhotdraw.util.*;
d37 1
a37 1
	private Vector fConnectors;
d96 3
a98 3
			Enumeration e = connectors().elements();
			while (e.hasMoreElements())
				((Connector) e.nextElement()).draw(g);
d117 4
a120 2
	private Vector connectors() {
		if (fConnectors == null) createConnectors();
d125 5
a129 9
		fConnectors = new Vector(4);
		fConnectors.addElement(new LocatorConnector(this, RelativeLocator
				.north()));
		fConnectors.addElement(new LocatorConnector(this, RelativeLocator
				.south()));
		fConnectors.addElement(new LocatorConnector(this, RelativeLocator
				.west()));
		fConnectors.addElement(new LocatorConnector(this, RelativeLocator
				.east()));
d136 3
a138 3
		Enumeration e = connectors().elements();
		while (e.hasMoreElements()) {
			Connector c = (Connector) e.nextElement();
@


1.1
log
@OffsetConnectors added
@
text
@d1 11
a11 5
/*
 * @@(#)NodeFigure.java 5.2
 *
 */

d13 134
a146 130

import java.awt.*;
import java.util.*;
import java.util.List;

import java.io.IOException;
import org.jhotdraw.framework.*;
import org.jhotdraw.standard.*;
import org.jhotdraw.figures.*;
import org.jhotdraw.util.*;


public class NodeFigure extends TextFigure {
    private static final int BORDER = 6;
    private Vector      fConnectors;
    private boolean    fConnectorsVisible;
    public NodeFigure() {
        initialize();
        fConnectors = null;
    }

    public Rectangle displayBox() {
        Rectangle box = super.displayBox();
        int d = BORDER;
        box.grow(d, d);
        return box;
    }

 


    public boolean containsPoint(int x, int y) {
        // add slop for connectors
        if (fConnectorsVisible) {
            Rectangle r = displayBox();
            int d = LocatorConnector.SIZE/2;
            r.grow(d, d);
            return r.contains(x, y);
        }
        return super.containsPoint(x, y);
    }

    private void drawBorder(Graphics g) {
        Rectangle r = displayBox();
        g.setColor(getFrameColor());
        g.drawRect(r.x, r.y, r.width-1, r.height-1);
    }

    public void draw(Graphics g) {
        super.draw(g);
        drawBorder(g);
        drawConnectors(g);
    }

    public HandleEnumeration handles() {
         ConnectionFigure prototype = new LineConnection();
         List handles = CollectionsFactory.current().createList();
         handles.add(new ConnectionHandle(this, RelativeLocator.east(), prototype));
         handles.add(new ConnectionHandle(this, RelativeLocator.west(), prototype));
         handles.add(new ConnectionHandle(this, RelativeLocator.south(), prototype));
         handles.add(new ConnectionHandle(this, RelativeLocator.north(), prototype));

         handles.add(new NullHandle(this, RelativeLocator.southEast()));
         handles.add(new NullHandle(this, RelativeLocator.southWest()));
         handles.add(new NullHandle(this, RelativeLocator.northEast()));
         handles.add(new NullHandle(this, RelativeLocator.northWest()));
         return new HandleEnumerator(handles);
     }

    private void drawConnectors(Graphics g) {
        if (fConnectorsVisible) {
            Enumeration e = connectors().elements();
            while (e.hasMoreElements())
                ((Connector) e.nextElement()).draw(g);
        }
    }

    /**
     */
    public void connectorVisibility(boolean isVisible) {
        fConnectorsVisible = isVisible;
        invalidate();
    }

    /**
     */
    public Connector connectorAt(int x, int y) {
        return findConnector(x, y);
    }

    /**
     */
    private Vector connectors() {
        if (fConnectors == null)
            createConnectors();
        return fConnectors;
    }

    private void createConnectors() {
        fConnectors = new Vector(4);
        fConnectors.addElement(new LocatorConnector(this, RelativeLocator.north()));
        fConnectors.addElement(new LocatorConnector(this, RelativeLocator.south()));
        fConnectors.addElement(new LocatorConnector(this, RelativeLocator.west()));
        fConnectors.addElement(new LocatorConnector(this, RelativeLocator.east()));
    }

    private Connector findConnector(int x, int y) {
        // return closest connector
        long min = Long.MAX_VALUE;
        Connector closest = null;
        Enumeration e = connectors().elements();
        while (e.hasMoreElements()) {
            Connector c = (Connector)e.nextElement();
            Point p2 = Geom.center(c.displayBox());
            long d = Geom.length2(x, y, p2.x, p2.y);
            if (d < min) {
                min = d;
                closest = c;
            }
        }
        return closest;
    }

    private void initialize() {
        setText("node");
        Font fb = new Font("Helvetica", Font.BOLD, 12);
        setFont(fb);
        createConnectors();
    }
}
@

