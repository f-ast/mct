head	1.10;
access;
symbols
	jhotdraw60b1-release:1.10
	package_rename:1.10
	directory_rename:1.9
	reorg_6x_split_initial:1.9
	MVC_PHASE1:1.8.0.10
	NEW_ATTRIBUTES:1.8.0.8
	DNOYEB1_ALPHA-2:1.8.4.3
	release_JHD54b1:1.8
	BUGFIX_670992:1.8.0.6
	DNOYEB1_ALPHA-1:1.8.4.2
	dnoyeb1:1.8.0.4
	repack:1.8.0.2
	Root_repack:1.8
	Before_FigureVisitor:1.8
	JHotDraw_5-3:1.7
	JHotDraw_5-2_merged:1.3
	JHotDraw_5-1_initial:1.2
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2004.01.09.22.53.42;	author mrfloppy;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.08.15.41.25;	author ricardo_padilha;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.04.22.45.17;	author mrfloppy;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.20.25.12;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.29.13.42.13;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.12.16.01.28;	author jeckel;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;

1.8.4.1
date	2003.01.14.18.23.01;	author dnoyeb;	state Exp;
branches;
next	1.8.4.2;

1.8.4.2
date	2003.01.21.00.04.10;	author dnoyeb;	state Exp;
branches;
next	1.8.4.3;

1.8.4.3
date	2003.01.26.00.50.51;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.10
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)DrawingView.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.framework;

import java.awt.*;
import java.awt.image.ImageObserver;
import java.util.Collection;

/**
 * DrawingView renders a Drawing and listens to its changes.
 * It receives user input and delegates it to the current tool.
 * <hr>
 * <b>Design Patterns</b><P>
 * <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
 * <b><a href=../pattlets/sld026.htm>Observer</a></b><br>
 * DrawingView observes drawing for changes via the DrawingListener interface.<br>
 * <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
 * <b><a href=../pattlets/sld032.htm>State</a></b><br>
 * DrawingView plays the role of the StateContext in
 * the State pattern. Tool is the State.<br>
 * <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
 * <b><a href=../pattlets/sld034.htm>Strategy</a></b><br>
 * DrawingView is the StrategyContext in the Strategy pattern
 * with regard to the UpdateStrategy. <br>
 * DrawingView is the StrategyContext for the PointConstrainer.
 *
 * @@see Drawing
 * @@see Painter
 * @@see Tool
 *
 * @@version <$CURRENT_VERSION$>
 */
public interface DrawingView extends ImageObserver, DrawingChangeListener {

	/**
	 * Sets the view's editor.
	 */
	public void setEditor(DrawingEditor editor);

	/**
	 * Gets the current tool.
	 */
	public Tool tool();

	/**
	 * Gets the drawing.
	 */
	public Drawing drawing();

	/**
	 * Sets and installs another drawing in the view.
	 */
	public void setDrawing(Drawing d);

	/**
	 * Gets the editor.
	 */
	public DrawingEditor editor();

	/**
	 * Adds a figure to the drawing.
	 * @@return the added figure.
	 */
	public Figure add(Figure figure);

	/**
	 * Removes a figure from the drawing.
	 * @@return the removed figure
	 */
	public Figure remove(Figure figure);

	/**
	 * Adds a collections of figures to the drawing.
	 */
	public void addAll(Collection figures);

	/**
	 * Gets the size of the drawing.
	 */
	public Dimension getSize();

	/**
	 * Gets the minimum dimension of the drawing.
	 */
	public Dimension getMinimumSize();

	/**
	 * Gets the preferred dimension of the drawing..
	 */
	public Dimension getPreferredSize();

	/**
	 * Sets the current display update strategy.
	 * @@see Painter
	 */
	public void setDisplayUpdate(Painter updateStrategy);

	/**
	 * Gets the current display update strategy.
	 * @@see Painter
	 */
	public Painter getDisplayUpdate();

	/**
	 * Gets an enumeration over the currently selected figures.
	 * The selection is a snapshot of the current selection
	 * which does not get changed anymore
	 *
	 * @@return an enumeration with the currently selected figures.
	 */
	public FigureEnumeration selection();

	/**
	 * Gets the currently seleced figures in Z order.
	 * The selection is a snapshot of the current selection
	 * which does not get changed anymore
	 *
	 * @@see #selection
	 * @@return an enumeration with the currently selected figures.
	 */
	public FigureEnumeration selectionZOrdered();

	/**
	 * Gets the number of selected figures.
	 */
	public int selectionCount();

	/**
	 * Test whether a given figure is selected.
	 */
	public boolean isFigureSelected(Figure checkFigure);

	/**
	 * Adds a figure to the current selection.
	 */
	public void addToSelection(Figure figure);

	/**
	 * Adds a collections of figures to the current selection.
	 */
	public void addToSelectionAll(Collection figures);

	/**
	 * Adds a FigureEnumeration to the current selection.
	 */
	public void addToSelectionAll(FigureEnumeration fe);

	/**
	 * Removes a figure from the selection.
	 */
	public void removeFromSelection(Figure figure);

	/**
	 * If a figure isn't selected it is added to the selection.
	 * Otherwise it is removed from the selection.
	 */
	public void toggleSelection(Figure figure);

	/**
	 * Clears the current selection.
	 */
	public void clearSelection();

	/**
	 * Gets the current selection as a FigureSelection. A FigureSelection
	 * can be cut, copied, pasted.
	 */
	public FigureSelection getFigureSelection();

	/**
	 * Finds a handle at the given coordinates.
	 * @@return the hit handle, null if no handle is found.
	 */
	public Handle findHandle(int x, int y);

	/**
	 * Gets the position of the last click inside the view.
	 */
	public Point lastClick();

	/**
	 * Sets the current point constrainer.
	 */
	public void setConstrainer(PointConstrainer p);

	/**
	 * Gets the current grid setting.
	 */
	public PointConstrainer getConstrainer();

	/**
	 * Checks whether the drawing has some accumulated damage
	 */
	public void checkDamage();

	/**
	 * Repair the damaged area
	 */
	public void repairDamage();

	/**
	 * Paints the drawing view. The actual drawing is delegated to
	 * the current update strategy.
	 * @@see Painter
	 */
	public void paint(Graphics g);

	/**
	 * Creates an image with the given dimensions
	 */
	public Image createImage(int width, int height);

	/**
	 * Gets a graphic to draw into
	 */
	public Graphics getGraphics();

	/**
	 * Gets the background color of the DrawingView
	 */
	public Color getBackground();

	/**
	 * Sets the background color of the DrawingView
	 */
	public void setBackground(Color c);

	/**
	 * Draws the contents of the drawing view.
	 * The view has three layers: background, drawing, handles.
	 * The layers are drawn in back to front order.
	 */
	public void drawAll(Graphics g);

	/**
	 * Draws the given figures.
	 * The view has three layers: background, drawing, handles.
	 * The layers are drawn in back to front order.
	 */
	public void draw(Graphics g, FigureEnumeration fe);

	/**
	 * Draws the currently active handles.
	 */
	public void drawHandles(Graphics g);

	/**
	 * Draws the drawing.
	 */
	public void drawDrawing(Graphics g);

	/**
	 * Draws the background. If a background pattern is set it
	 * is used to fill the background. Otherwise the background
	 * is filled in the background color.
	 */
	public void drawBackground(Graphics g);

	/**
	 * Sets the cursor of the DrawingView
	 */
	public void setCursor(Cursor c);

	/**
	 * Freezes the view by acquiring the drawing lock.
	 * @@see Drawing#lock
	 */
	public void freezeView();

	/**
	 * Unfreezes the view by releasing the drawing lock.
	 * @@see Drawing#unlock
	 */
	public void unfreezeView();

	/**
	 * Add a listener for selection changes in this DrawingView.
	 * @@param fsl jhotdraw.framework.FigureSelectionListener
	 */
	public void addFigureSelectionListener(FigureSelectionListener fsl);

	/**
	 * Remove a listener for selection changes in this DrawingView.
	 * @@param fsl jhotdraw.framework.FigureSelectionListener
	 */
	public void removeFigureSelectionListener(FigureSelectionListener fsl);

	/**
	 * Returns a FigureEnumeration of connection figures
	 */
	public FigureEnumeration getConnectionFigures(Figure inFigure);

	/**
	 * Inserts figures in a drawing at given offset. Optional check for connection figures
	 *
	 *  @@return enumeration which has been added to the drawing. The figures in the enumeration
	 *          can have changed during adding them (e.g. they could have been decorated).
	 */
	public FigureEnumeration insertFigures(FigureEnumeration inFigures, int dx, int dy, boolean bCheck);

	/**
	 * Check whether the DrawingView is interactive, i.e. whether it accepts user input
	 * and whether it can display a drawing.
	 */
	public boolean isInteractive();
}
@


1.9
log
@Refactoring of Cursor:
- java.awt.Cursor (class) has been sistematically replaced with CH.ifa.draw.contrib.framework.Cursor (interface)
- a new default implementation of Cursor (interface) has been added: CH.ifa.draw.contrib.standard.AWTCursor
@
text
@d12 1
a12 1
package CH.ifa.draw.framework;
@


1.8
log
@after variou merges... (before 5.4 release)
@
text
@d14 1
d16 1
a16 2
import java.awt.*;
import java.util.*;
@


1.8.4.1
log
@DecoratorFigure is 'changed'  I think it needs reworking.  not its only used durint draw(Graphics g) but I don't think
that was its real intention?

The Figure added or removed is nolonger changed during the add or remove process.  Thus add and remove do not return
values.
orphan is used internally to the drawing only.
remove calls figure.remove() which intern orphans the figure.
remove(Figure f) is still present and used but currently not needed.  call figure.remove() instead.
perhaps we can add a method on the figure enumerator to 'remove' all the figures within it.
Figure no longer exposes its listeners.  call methods on figure to send events.


Serialization in every form needs cleanup now.  Some due to earlier changes made by myself like making listeners of
inner classes, but not storing the listener when the figures are stored. (since the figures think the inner listener
is their container.)
@
text
@d73 1
a73 1
	public void add(Figure figure);
d79 1
a79 1
	public void remove(Figure figure);
@


1.8.4.2
log
@Restored the ContainerFigure.  Its very problematic for tools, but I have a better understanding of the undo system now.
As a result I have restored most of what was their again with explanations on how it works for the next traveler...
Also fixed a few issues with grouping and ungrouping. since figures can no longer be in 2 containers at once the container
hopping that was being done by the group command would fail.  I believe border tool did similar hopping by having a figure
as part of the drawing and part of the borderFigure temporarily.  Cant do that anymore.
@
text
@d73 1
a73 1
	public Figure add(Figure figure);
d79 1
a79 1
	public Figure remove(Figure figure);
d84 1
a84 1
	public FigureEnumeration addAll(Collection figures);
@


1.8.4.3
log
@CompositeFigure does not return figures from add, remove, orphan anymore
new method, restore added to bring back orphaned figures
compositeFigure keeps record of its orphans for the restore method
NullFigures inserted as placeholders into the figureList
dumps record and nullFigures when remove(figure) called. this safely restores
figures to their old places.
figureRequestRemove and figureRemove events eliminated.
Group and Ungroup commands redone to respect these new ideas.
have not done anything with delete, cut, copy, paste yet.
NullFigure added 0,0 for its display box, else throwing exceptions
@
text
@d73 1
a73 1
	public void add(Figure figure);
d79 1
a79 1
	public void remove(Figure figure);
d84 1
a84 1
	public void addAll(Collection figures);
@


1.7
log
@merge dnd (before 5.3)
@
text
@a15 1
import java.io.*;
d82 1
a82 1
	 * Adds a vector of figures to the drawing.
d84 1
a84 1
	public void addAll(Vector figures);
a113 7
	 * Gets the currently selected figures.
	 * @@return a vector with the selected figures. The vector
	 * is a copy of the current selection.
	 */
	public Vector selection();

	/**
d115 4
d120 1
a120 1
	public FigureEnumeration selectionElements();
d124 3
d128 1
a128 2
	 * @@return a vector with the selected figures. The vector
	 * is a copy of the current selection.
d130 1
a130 1
	public Vector selectionZOrdered();
d141 1
a141 1
	
d148 1
a148 1
	 * Adds a vector of figures to the current selection.
d150 1
a150 1
	public void addToSelectionAll(Vector figures);
d250 1
a250 1
	
d290 1
a290 1
	
d298 1
a298 1
	 * Returns the vector of connection figures
d300 1
a300 1
	public Vector getConnectionFigures(Figure inFigure);
d308 1
a308 1
	public FigureEnumeration insertFigures(FigureEnumeration inFigures, int dx, int dy, boolean bCheck);    
d313 1
a313 1
	 */    
@


1.6
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@a13 1
import CH.ifa.draw.util.UndoManager;
d45 30
a74 93
    /**
     * Sets the view's editor.
     */
    public void setEditor(DrawingEditor editor);

    /**
     * Gets the current tool.
     */
    public Tool tool();

    /**
     * Gets the drawing.
     */
    public Drawing drawing();

    /**
     * Sets and installs another drawing in the view.
     */
    public void setDrawing(Drawing d);

    /**
     * Gets the editor.
     */
    public DrawingEditor editor();

    /**
     * Adds a figure to the drawing.
     * @@return the added figure.
     */
    public Figure add(Figure figure);

    /**
     * Removes a figure from the drawing.
     * @@return the removed figure
     */
    public Figure remove(Figure figure);

    /**
     * Adds a vector of figures to the drawing.
     */
    public void addAll(Vector figures);

    /**
     * Gets the size of the drawing.
     */
    public Dimension getSize();

    /**
     * Gets the minimum dimension of the drawing.
     */
    public Dimension getMinimumSize();

    /**
     * Gets the preferred dimension of the drawing..
     */
    public Dimension getPreferredSize();

    /**
     * Sets the current display update strategy.
     * @@see Painter
     */
    public void setDisplayUpdate(Painter updateStrategy);

    /**
     * Gets the current display update strategy.
     * @@see Painter
     */
    public Painter getDisplayUpdate();

    /**
     * Gets the currently selected figures.
     * @@return a vector with the selected figures. The vector
     * is a copy of the current selection.
     */
    public Vector selection();

    /**
     * Gets an enumeration over the currently selected figures.
     */
    public FigureEnumeration selectionElements();

    /**
     * Gets the currently seleced figures in Z order.
     * @@see #selection
     * @@return a vector with the selected figures. The vector
     * is a copy of the current selection.
     */
    public Vector selectionZOrdered();

    /**
     * Gets the number of selected figures.
     */
    public int selectionCount();
d76 64
a139 1
    /**
d144 142
a285 142
    /**
     * Adds a figure to the current selection.
     */
    public void addToSelection(Figure figure);

    /**
     * Adds a vector of figures to the current selection.
     */
    public void addToSelectionAll(Vector figures);

    /**
     * Adds a FigureEnumeration to the current selection.
     */
    public void addToSelectionAll(FigureEnumeration fe);

    /**
     * Removes a figure from the selection.
     */
    public void removeFromSelection(Figure figure);

    /**
     * If a figure isn't selected it is added to the selection.
     * Otherwise it is removed from the selection.
     */
    public void toggleSelection(Figure figure);

    /**
     * Clears the current selection.
     */
    public void clearSelection();

    /**
     * Gets the current selection as a FigureSelection. A FigureSelection
     * can be cut, copied, pasted.
     */
    public FigureSelection getFigureSelection();

    /**
     * Finds a handle at the given coordinates.
     * @@return the hit handle, null if no handle is found.
     */
    public Handle findHandle(int x, int y);

    /**
     * Gets the position of the last click inside the view.
     */
    public Point lastClick();

    /**
     * Sets the current point constrainer.
     */
    public void setConstrainer(PointConstrainer p);

    /**
     * Gets the current grid setting.
     */
    public PointConstrainer getConstrainer();

    /**
     * Checks whether the drawing has some accumulated damage
     */
    public void checkDamage();

    /**
     * Repair the damaged area
     */
    public void repairDamage();

    /**
     * Paints the drawing view. The actual drawing is delegated to
     * the current update strategy.
     * @@see Painter
     */
    public void paint(Graphics g);

    /**
     * Creates an image with the given dimensions
     */
    public Image createImage(int width, int height);

    /**
     * Gets a graphic to draw into
     */
    public Graphics getGraphics();

    /**
     * Gets the background color of the DrawingView
     */
    public Color getBackground();

    /**
     * Sets the background color of the DrawingView
     */
    public void setBackground(Color c);

    /**
     * Draws the contents of the drawing view.
     * The view has three layers: background, drawing, handles.
     * The layers are drawn in back to front order.
     */
    public void drawAll(Graphics g);

    /**
     * Draws the given figures.
     * The view has three layers: background, drawing, handles.
     * The layers are drawn in back to front order.
     */
    public void draw(Graphics g, FigureEnumeration fe);
    
    /**
     * Draws the currently active handles.
     */
    public void drawHandles(Graphics g);

    /**
     * Draws the drawing.
     */
    public void drawDrawing(Graphics g);

    /**
     * Draws the background. If a background pattern is set it
     * is used to fill the background. Otherwise the background
     * is filled in the background color.
     */
    public void drawBackground(Graphics g);

    /**
     * Sets the cursor of the DrawingView
     */
    public void setCursor(Cursor c);

    /**
     * Freezes the view by acquiring the drawing lock.
     * @@see Drawing#lock
     */
    public void freezeView();

    /**
     * Unfreezes the view by releasing the drawing lock.
     * @@see Drawing#unlock
     */
    public void unfreezeView();
d299 12
a310 12
    /**
     * Returns the vector of connection figures
     */
    public Vector getConnectionFigures(Figure inFigure);

    /**
     * Inserts figures in a drawing at given offset. Optional check for connection figures
     *
     *  @@return enumeration which has been added to the drawing. The figures in the enumeration
     *          can have changed during adding them (e.g. they could have been decorated).
     */
    public FigureEnumeration insertFigures(FigureEnumeration inFigures, int dx, int dy, boolean bCheck);    
d312 5
a316 1
	public UndoManager getUndoManager();
@


1.5
log
@before merge for version 5.3 (dnd, undo,...)
@
text
@d2 1
a2 1
 * @@(#)DrawingView.java 5.2
d4 6
d14 1
d17 1
a18 2
import java.io.*;
import CH.ifa.draw.util.*;
d41 2
a43 2


d110 6
d128 1
a128 1
     * Gets the currently selected figures in Z order.
d141 5
d156 5
d236 1
a236 1
     * Gets the background color of the DrawingView
d287 27
@


1.4
log
@- SelectionFigure is now an interface. The default implementation CH.ifa.draw.standard.StandardSelectionFigure
- A FigureSelectionListener interface has been introduced in CH.ifa.draw.framework. An DrawingEditor
  is now a FigureSelectionListener and the signature for all selectionChanged() methods has been
  changed to figureSelectionChanged().
- CH.ifa.draw.util.Command is now an interface. A AbstractCommand can be found in CH.ifa.draw.standard.
- All commands used to have a fView field. This has been moved to CH.ifa.draw.standard.AbstactCommand
- A CH.ifa.draw.standard.StandardDrawingView has now a paintComponents() method instead of a paint()
  and update() method. This allows the CH.ifa.draw.util.FloatingTextField to be a javax.swing.JTextField
  instead of a java.awt.TextField.
- CH.ifa.draw.figures.AbstractLineDecorator has been missing
- DrawApplet, DrawApplication and derived classes are now programmed towards the DrawingView interface
  instead of using StandardDrawingView. That leads to occasional cast when some additional StandardDrawingView
  functionality is required in some specialized cases. Applications that were derived from DrawApplication
  and used to override the createContents() methods should now return a DrawingView as well
@
text
@d10 1
d12 1
a12 1
import java.util.*;
a103 6
     * Gets the current display update strategy.
     * @@see Painter
     */
    public Painter getDisplayUpdate();

    /**
d214 1
a214 1
     * Sets the background color of the DrawingView
a264 12

	/**
	 * Add a listener for selection changes in this DrawingView.
	 * @@param fsl jhotdraw.framework.FigureSelectionListener
	 */
	public void addFigureSelectionListener(FigureSelectionListener fsl);
	
	/**
	 * Remove a listener for selection changes in this DrawingView.
	 * @@param fsl jhotdraw.framework.FigureSelectionListener
	 */
	public void removeFigureSelectionListener(FigureSelectionListener fsl);
@


1.3
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d10 1
a11 2
import java.io.*;
import CH.ifa.draw.util.*;
d103 6
d219 1
a219 1
     * Gets the background color of the DrawingView
d270 12
@


1.2
log
@additional method: draw a FigureEnumeration
@
text
@d2 1
a2 1
 * @@(#)DrawingView.java 5.1
d99 1
a99 1
     * @@see UpdateStrategy
d231 1
a231 1

@


1.1
log
@Initial revision
@
text
@d226 7
@


1.1.1.1
log
@
Initial revision.
@
text
@@
