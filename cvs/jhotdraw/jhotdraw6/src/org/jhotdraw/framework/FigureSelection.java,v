head	1.8;
access;
symbols
	jhotdraw60b1-release:1.8
	package_rename:1.8
	directory_rename:1.7
	reorg_6x_split_initial:1.7
	MVC_PHASE1:1.7.0.10
	NEW_ATTRIBUTES:1.7.0.8
	DNOYEB1_ALPHA-2:1.7
	release_JHD54b1:1.7
	BUGFIX_670992:1.7.0.6
	DNOYEB1_ALPHA-1:1.7
	dnoyeb1:1.7.0.4
	repack:1.7.0.2
	Root_repack:1.7
	Before_FigureVisitor:1.7
	JHotDraw_5-3:1.6
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2004.01.09.22.53.42;	author mrfloppy;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.30.20.40.06;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.25.12;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.29.13.42.13;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.8
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)FigureSelection.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.framework;

/**
 * FigureSelection enables to transfer the selected figures
 * to a clipboard.<p>
 * Will soon be converted to the JDK 1.1 Transferable interface.
 *
 * @@see org.jhotdraw.util.Clipboard
 *
 * @@version <$CURRENT_VERSION$>
 */

public interface FigureSelection {

	/**
	 * Gets the type of the selection.
	 */
	public String getType();

	/**
	 * Gets the data of the selection. The result is returned
     * as a FigureEnumeration of Figures.
	 *
	 * @@return a copy of the figure selection.
	 */
	public Object getData(String type);
}

@


1.7
log
@no message
@
text
@d12 1
a12 1
package CH.ifa.draw.framework;
d19 1
a19 1
 * @@see CH.ifa.draw.util.Clipboard
@


1.6
log
@merge dnd (before 5.3)
@
text
@d33 1
a33 1
	 * as a Vector of Figures.
@


1.5
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d26 4
a29 4
    /**
     * Gets the type of the selection.
     */
    public String getType();
d31 7
a37 7
    /**
     * Gets the data of the selection. The result is returned
     * as a Vector of Figures.
     *
     * @@return a copy of the figure selection.
     */
    public Object getData(String type);
@


1.4
log
@before merge for version 5.3 (dnd, undo,...)
@
text
@d2 1
a2 1
 * @@(#)FigureSelection.java 5.2
d4 6
a13 4
import CH.ifa.draw.util.*;
import java.util.*;
import java.io.*;

d19 3
a21 1
 * @@see Clipboard
d24 1
a24 25
public class FigureSelection extends Object {

    private byte[] fData; // flattend figures, ready to be resurrected
    /**
     * The type identifier of the selection.
     */
    public final static String TYPE = "CH.ifa.draw.Figures";

    /**
     * Constructes the Figure selection for the vector of figures.
     */
    public FigureSelection(Vector figures) {
        // a FigureSelection is represented as a flattened ByteStream
        // of figures.
        ByteArrayOutputStream output = new ByteArrayOutputStream(200);
        StorableOutput writer = new StorableOutput(output);
        writer.writeInt(figures.size());
        Enumeration selected = figures.elements();
        while (selected.hasMoreElements()) {
            Figure figure = (Figure) selected.nextElement();
            writer.writeStorable(figure);
        }
        writer.close();
        fData = output.toByteArray();
    }
d29 1
a29 3
    public String getType() {
        return TYPE;
    }
d37 1
a37 20
    public Object getData(String type) {
        if (type.equals(TYPE)) {
            InputStream input = new ByteArrayInputStream(fData);
            Vector result = new Vector(10);
            StorableInput reader = new StorableInput(input);
            int numRead = 0;
            try {
                int count = reader.readInt();
                while (numRead < count) {
                    Figure newFigure = (Figure) reader.readStorable();
                    result.addElement(newFigure);
                    numRead++;
                }
            } catch (IOException e) {
                System.out.println(e.toString());
            }
            return result;
        }
        return null;
    }
@


1.3
log
@- SelectionFigure is now an interface. The default implementation CH.ifa.draw.standard.StandardSelectionFigure
- A FigureSelectionListener interface has been introduced in CH.ifa.draw.framework. An DrawingEditor
  is now a FigureSelectionListener and the signature for all selectionChanged() methods has been
  changed to figureSelectionChanged().
- CH.ifa.draw.util.Command is now an interface. A AbstractCommand can be found in CH.ifa.draw.standard.
- All commands used to have a fView field. This has been moved to CH.ifa.draw.standard.AbstactCommand
- A CH.ifa.draw.standard.StandardDrawingView has now a paintComponents() method instead of a paint()
  and update() method. This allows the CH.ifa.draw.util.FloatingTextField to be a javax.swing.JTextField
  instead of a java.awt.TextField.
- CH.ifa.draw.figures.AbstractLineDecorator has been missing
- DrawApplet, DrawApplication and derived classes are now programmed towards the DrawingView interface
  instead of using StandardDrawingView. That leads to occasional cast when some additional StandardDrawingView
  functionality is required in some specialized cases. Applications that were derived from DrawApplication
  and used to override the createContents() methods should now return a DrawingView as well
@
text
@d8 4
d20 25
a44 1
public interface FigureSelection {
d49 3
a51 1
    public String getType();
d59 20
a78 1
    public Object getData(String type);
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@a7 4
import CH.ifa.draw.util.*;
import java.util.*;
import java.io.*;

d16 1
a16 25
public class FigureSelection extends Object {

    private byte[] fData; // flattend figures, ready to be resurrected
    /**
     * The type identifier of the selection.
     */
    public final static String TYPE = "CH.ifa.draw.Figures";

    /**
     * Constructes the Figure selection for the vector of figures.
     */
    public FigureSelection(Vector figures) {
        // a FigureSelection is represented as a flattened ByteStream
        // of figures.
        ByteArrayOutputStream output = new ByteArrayOutputStream(200);
        StorableOutput writer = new StorableOutput(output);
        writer.writeInt(figures.size());
        Enumeration selected = figures.elements();
        while (selected.hasMoreElements()) {
            Figure figure = (Figure) selected.nextElement();
            writer.writeStorable(figure);
        }
        writer.close();
        fData = output.toByteArray();
    }
d21 1
a21 3
    public String getType() {
        return TYPE;
    }
d29 1
a29 20
    public Object getData(String type) {
        if (type.equals(TYPE)) {
            InputStream input = new ByteArrayInputStream(fData);
            Vector result = new Vector(10);
            StorableInput reader = new StorableInput(input);
            int numRead = 0;
            try {
                int count = reader.readInt();
                while (numRead < count) {
                    Figure newFigure = (Figure) reader.readStorable();
                    result.addElement(newFigure);
                    numRead++;
                }
            } catch (IOException e) {
                System.out.println(e.toString());
            }
            return result;
        }
        return null;
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)FigureSelection.java 5.1
d29 1
a29 1
     * Constructes the Figure selection for the vecotor of figures.
@


1.1.1.1
log
@
Initial revision.
@
text
@@
