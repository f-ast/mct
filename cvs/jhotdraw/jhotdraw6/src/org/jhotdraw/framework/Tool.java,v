head	1.7;
access;
symbols
	jhotdraw60b1-release:1.7
	package_rename:1.7
	directory_rename:1.6
	reorg_6x_split_initial:1.6
	MVC_PHASE1:1.6.0.10
	NEW_ATTRIBUTES:1.6.0.8
	DNOYEB1_ALPHA-2:1.6.4.2
	release_JHD54b1:1.6
	BUGFIX_670992:1.6.0.6
	DNOYEB1_ALPHA-1:1.6.4.2
	dnoyeb1:1.6.0.4
	repack:1.6.0.2
	Root_repack:1.6
	Before_FigureVisitor:1.6
	JHotDraw_5-3:1.5
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2004.01.09.22.53.42;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.20.19.57.59;	author mrfloppy;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2002.01.19.18.31.31;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches;
next	;

1.6.4.1
date	2003.01.04.15.20.51;	author dnoyeb;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2003.01.10.04.54.44;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.7
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@/*
 * @@(#)Tool.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.framework;

import org.jhotdraw.util.Undoable;
import java.awt.event.MouseEvent;
import java.awt.event.KeyEvent;

/**
 * A tool defines a mode of the drawing view. All input events
 * targeted to the drawing view are forwarded to its current tool.<p>
 * Tools inform their editor when they are done with an interaction
 * by calling the editor's toolDone() method.
 * The Tools are created once and reused. They
 * are initialized/deinitialized with activate()/deactivate().
 * <hr>
 * <b>Design Patterns</b><P>
 * <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
 * <b><a href=../pattlets/sld032.htm>State</a></b><br>
 * Tool plays the role of the State. In encapsulates all state
 * specific behavior. DrawingView plays the role of the StateContext.
 *
 * A tool can be in the following states: <br>
 * disabled<->enabled[unusable<->usable[active<->inactive]]
 * <->always_usable[active<->inactive]<->disabled
 * <br> where each square bracket indicates a state nesting level
 * and arrows possible state transitions.
 * Unusable tools are always inactive as well and disabled tools
 * are always unusable as well.
 * State changes are propagated to registered ToolListeners.
 *
 * @@see DrawingView
 * 
 * @@version <$CURRENT_VERSION$>
 */
public interface Tool {

	/**
	 * An active tool is the currently selected tool in the
	 * DrawingView. A tool can be activated/deactivated
	 * by calling the activate()/deactivate() method.
	 *
	 * @@return true if the tool is the selected tool in the DrawingView, false otherwise
	 * @@see #isEnabled
	 * @@see #isUsable
	 */
	public boolean isActive();

	/**
	 * Activates the tool for the given view. This method is called
	 * whenever the user switches to this tool. Use this method to
	 * reinitialize a tool.
	 * Note, a valid view must be present in order for the tool to accept activation
	 */
	public void activate();

	/**
	 * Deactivates the tool. This method is called whenever the user
	 * switches to another tool. Use this method to do some clean-up
	 * when the tool is switched. Subclassers should always call
	 * super.deactivate.
	 */
	public void deactivate();

	/**
	 * Handles mouse down events in the drawing view.
	 */
	public void mouseDown(MouseEvent e, int x, int y);

	/**
	 * Handles mouse drag events in the drawing view.
	 */
	public void mouseDrag(MouseEvent e, int x, int y);

	/**
	 * Handles mouse up in the drawing view.
	 */
	public void mouseUp(MouseEvent e, int x, int y);

	/**
	 * Handles mouse moves (if the mouse button is up).
	 */
	public void mouseMove(MouseEvent evt, int x, int y);

	/**
	 * Handles key down events in the drawing view.
	 */
	public void keyDown(KeyEvent evt, int key);

	/**
	 * A tool must be enabled in order to use it and to activate/deactivate it.
	 * Typically, the program enables or disables a tool.
	 *
	 * @@see #isUsable
	 * @@see #isActive
	 */
	public boolean isEnabled();
	public void setEnabled(boolean enableUsableCheck);

	/**
	 * A usable tool is a enabled and either active or inactive.
	 * Typically, the tool should be able to determine itself whether it is
	 * usable or not.
	 *
	 * @@see #isEnabled
	 * @@see #isUsable
	 */
	public boolean isUsable();
	public void setUsable(boolean newIsUsable);
	
	public DrawingEditor editor();
	
	public Undoable getUndoActivity();

	public void setUndoActivity(Undoable newUndoableActivity);
	
	public void addToolListener(ToolListener newToolListener);
	public void removeToolListener(ToolListener oldToolListener);
}
@


1.6
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@d12 1
a12 1
package CH.ifa.draw.framework;
d14 1
a14 1
import CH.ifa.draw.util.Undoable;
@


1.6.4.1
log
@improved functionality of CompositeFigureCreationTool
added comments to some files.(probably overdid it)
@
text
@d110 3
a112 9
	 * A usable tool is enabled and either active or inactive. Typically, the 
	 * <B>Tool</b> should be able to determine itself whether it is usable or 
	 * not.
	 *
	 * Refers to the <b>Tool</b>'s general useablity.  For instance, that their 
	 * is an active {@@link DrawingView DrawingView}, and maybe that a required 
	 * {@@link Figure Figure} is selected.  It does not however, check that the
	 * <b>Tool</b> can be 'executed.'  This level of feedback is left to the
	 * {@@link java.awt.Cursor Cursor}.
@


1.6.4.2
log
@1.  Tool now accepts DrawingViewMouseEvent as opposed to java.awt.MouseEvent and x,y ints.
2. compositeFigure now uses constrained mouse values throughout.
3. nested CreationTOol was calling drawing() before it was setting the view.  should lead to NPE.  this tool still seems broken
   i dont think its needed anymore?
4. bug in splitConnectionTool mouse down. setEndConnector(findConnector(ex, ex, c)); needs to be ex and ey
5. made some of StandardDrawingViews inner class listners protected.
@
text
@d15 1
a15 1

d77 1
a77 1
	public void mouseDown(DrawingViewMouseEvent dvme);
d82 1
a82 1
	public void mouseDrag(DrawingViewMouseEvent dvme);
d87 1
a87 1
	public void mouseUp(DrawingViewMouseEvent dvme);
d90 1
a90 1
	 * Handles mouse moves (when the mouse button is up).
d92 1
a92 1
	public void mouseMove(DrawingViewMouseEvent dvme);
@


1.5
log
@no message
@
text
@d42 1
a42 1
 *
d119 1
a119 1

d121 1
a121 1

d125 1
a125 1

@


1.4
log
@merge dnd (before 5.3)
@
text
@d32 9
d42 1
a42 1
 * 
d48 11
d99 18
d118 1
d121 1
a121 1
	
d125 1
a125 1
	
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@a35 1

d42 1
d79 3
a81 1
	public DrawingView view();
d86 3
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)Tool.java 5.2
d4 6
d14 1
a14 1
import java.awt.*;
d31 1
d33 2
d39 45
a83 39
    /**
     * Activates the tool for the given view. This method is called
     * whenever the user switches to this tool. Use this method to
     * reinitialize a tool.
     */
    public void activate();

    /**
     * Deactivates the tool. This method is called whenever the user
     * switches to another tool. Use this method to do some clean-up
     * when the tool is switched. Subclassers should always call
     * super.deactivate.
     */
    public void deactivate();

    /**
     * Handles mouse down events in the drawing view.
     */
    public void mouseDown(MouseEvent e, int x, int y);

    /**
     * Handles mouse drag events in the drawing view.
     */
    public void mouseDrag(MouseEvent e, int x, int y);

    /**
     * Handles mouse up in the drawing view.
     */
    public void mouseUp(MouseEvent e, int x, int y);

    /**
     * Handles mouse moves (if the mouse button is up).
     */
    public void mouseMove(MouseEvent evt, int x, int y);

    /**
     * Handles key down events in the drawing view.
     */
    public void keyDown(KeyEvent evt, int key);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)Tool.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
