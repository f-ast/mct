head	1.10;
access;
symbols
	jhotdraw60b1-release:1.9
	package_rename:1.9
	directory_rename:1.8
	reorg_6x_split_initial:1.8
	MVC_PHASE1:1.8.0.4
	NEW_ATTRIBUTES:1.8.0.2
	DNOYEB1_ALPHA-2:1.7.4.5
	release_JHD54b1:1.8
	BUGFIX_670992:1.7.0.6
	DNOYEB1_ALPHA-1:1.7.4.4
	dnoyeb1:1.7.0.4
	repack:1.7.0.2
	Root_repack:1.7
	Before_FigureVisitor:1.6
	JHotDraw_5-3:1.4
	JHotDraw_5-2_merged:1.3
	JHotDraw_5-1_initial:1.2
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2004.03.11.09.03.59;	author pmorch;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.09.22.53.41;	author mrfloppy;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.30.00.27.34;	author mrfloppy;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.22.08.58.23;	author mrfloppy;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2002.08.04.22.45.17;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.30.20.40.06;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.12.16.04.10;	author jeckel;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches;
next	;

1.7.4.1
date	2003.01.14.18.23.52;	author dnoyeb;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2003.01.15.21.04.11;	author dnoyeb;	state Exp;
branches;
next	1.7.4.3;

1.7.4.3
date	2003.01.16.06.03.53;	author dnoyeb;	state Exp;
branches;
next	1.7.4.4;

1.7.4.4
date	2003.01.16.15.58.50;	author dnoyeb;	state Exp;
branches;
next	1.7.4.5;

1.7.4.5
date	2003.01.26.00.50.51;	author dnoyeb;	state Exp;
branches;
next	1.7.4.6;

1.7.4.6
date	2003.02.02.16.54.08;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.10
log
@It seems that a FigureAttrbitueConstant.POPUP_MENU was introduced in
revision 1.4 (date: 2003/09/13 22:31:10)

In contrib/CustomSelectionTool.java revision 1.11 (date: 2003/11/09
21:18:45) this new FigureAttrbitueConstant.POPUP_MENU is used instead
of Figure.POPUP_MENU which is now deprecated and removed completely -
so we get compile time warnings instead of run-time failures for
people using POPUP_MENU functionality.

More info in the JHotDraw 'Open Discussion' forums
'new FigureAttrbitueConstant.POPUP_MENU....' thread from
2004-03-04 11:17

Since it has been broken since 2003/11/09 and nobody has complained, I
guess it isn't too used, and so lets just suggest that the deprecation
warning period was from 2003/11/09 to now....
@
text
@/*
 * @@(#)Figure.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package org.jhotdraw.framework;

import org.jhotdraw.util.*;
import org.jhotdraw.standard.TextHolder;

import java.awt.*;
import java.io.Serializable;

/**
 * The interface of a graphical figure. A figure knows
 * its display box and can draw itself. A figure can be
 * composed of several figures. To interact and manipulate
 * with a figure it can provide Handles and Connectors.<p>
 * A figure has a set of handles to manipulate its shape or attributes.
 * A figure has one or more connectors that define how
 * to locate a connection point.<p>
 * Figures can have an open ended set of attributes.
 * An attribute is identified by a string.<p>
 * Default implementations for the Figure interface are provided
 * by AbstractFigure.<p>
 *
 * Figures can have <a name="dependent_figure">dependent figure</a>s. The existence od dependent
 * figures depend on another figure. This is the case for figures
 * such as ConnectedTextFigures and LineDecoration. Thus, they are
 * "externally" dependent on a figure in contrast to (internally)
 * contained figures. This means, "normal" figures (figures that
 * are not containers) can still have dependent figures. Dependent
 * figures are especially important if the figure which the depend
 * on is deleted because they should be removed as well (cascading delete).
 *
 * @@see Handle
 * @@see Connector
 * @@see org.jhotdraw.standard.AbstractFigure
 *
 * @@version <$CURRENT_VERSION$>
 */
public interface Figure
				extends Storable, Cloneable, Serializable {

	/**
	 * Moves the Figure to a new location.
	 * @@param dx the x delta
	 * @@param dy the y delta
	 */
	public void moveBy(int dx, int dy);

	/**
	 * Changes the display box of a figure. This method is
	 * always implemented in figure subclasses. It only changes
	 * the displaybox and does not announce any changes. It
	 * is usually not called by the client. Clients typically call
	 * displayBox to change the display box.
	 * @@param origin the new origin
	 * @@param corner the new corner
	 * @@see #displayBox
	 */
	public void basicDisplayBox(Point origin, Point corner);

	/**
	 * Changes the display box of a figure. Clients usually
	 * invoke this method. It changes the display box
	 * and announces the corresponding changes.
	 * @@param origin the new origin
	 * @@param corner the new corner
	 * @@see #displayBox
	 */
	public void displayBox(Point origin, Point corner);

	/**
	 * Gets the display box of a figure
	 * @@see #basicDisplayBox
	 */
	public Rectangle displayBox();

	/**
	 * Draws the figure.
	 * @@param g the Graphics to draw into
	 */
	public void draw(Graphics g);

	/**
	 * Returns the handles used to manipulate
	 * the figure. Handles is a Factory Method for
	 * creating handle objects.
	 *
	 * @@return an type-safe iterator of handles
	 * @@see Handle
	 */
	public HandleEnumeration handles();

	/**
	 * Gets the size of the figure
	 */
	public Dimension size();

	/**
	 * Gets the figure's center
	 */
	public Point center();

	/**
	 * Checks if the Figure should be considered as empty.
	 */
	public boolean isEmpty();

	/**
	 * Returns an Enumeration of the figures contained in this figure
	 */
	public FigureEnumeration figures();

	/**
	 * Returns the figure that contains the given point.
	 */
	public Figure findFigureInside(int x, int y);

	/**
	 * Checks if a point is inside the figure.
	 */
	public boolean containsPoint(int x, int y);

	/**
	 * Returns a Clone of this figure
	 */
	public Object clone();

	/**
	 * Changes the display box of a figure. This is a
	 * convenience method. Implementors should only
	 * have to override basicDisplayBox
	 * @@see #displayBox
	 */
	public void displayBox(Rectangle r);

	/**
	 * Checks whether the given figure is contained in this figure.
	 */
	public boolean includes(Figure figure);

	/**
	 * Decomposes a figure into its parts. A figure is considered
	 * as a part of itself.
	 */
	public FigureEnumeration decompose();

	/**
	 * Sets the Figure's container and registers the container
	 * as a figure change listener. A figure's container can be
	 * any kind of FigureChangeListener. A figure is not restricted
	 * to have a single container.
	 */
	public void addToContainer(FigureChangeListener c);

	/**
	 * Removes a figure from the given container and unregisters
	 * it as a change listener.
	 */
	public void removeFromContainer(FigureChangeListener c);

	/**
	 * Add a <a href="#dependent_figure">dependent figure</a>.
	 */
	public void addDependendFigure(Figure newDependendFigure);

	/**
	 * Remove a <a href="#dependent_figure">dependent figure</a>.
	 */
	public void removeDependendFigure(Figure oldDependendFigure);

	/**
	 * Get an enumeration of all <a href="#dependent_figure">dependent figures</a>.
	 */
	public FigureEnumeration getDependendFigures();

	/**
	 * Gets the Figure's listeners.
	 */
	public FigureChangeListener listener();

	/**
	 * Adds a listener for this figure.
	 */
	public void addFigureChangeListener(FigureChangeListener l);

	/**
	 * Removes a listener for this figure.
	 */
	public void removeFigureChangeListener(FigureChangeListener l);

	/**
	 * Releases a figure's resources. Release is called when
	 * a figure is removed from a drawing. Informs the listeners that
	 * the figure is removed by calling figureRemoved.
	 */
	public void release();

	/**
	 * Invalidates the figure. This method informs its listeners
	 * that its current display box is invalid and should be
	 * refreshed.
	 */
	public void invalidate();

	/**
	 * Informes that a figure is about to change such that its
	 * display box is affected.
	 * Here is an example of how it is used together with changed()
	 * <pre>
	 * public void move(int x, int y) {
	 *      willChange();
	 *      // change the figure's location
	 *      changed();
	 *  }
	 * </pre>
	 * @@see #invalidate
	 * @@see #changed
	 */
	public void willChange();

	/**
	 * Informes that a figure has changed its display box.
	 * This method also triggers an update call for its
	 * registered observers.
	 * @@see #invalidate
	 * @@see #willChange
	 *
	 */
	public void changed();

	/**
	 * Checks if this figure can be connected
	 */
	public boolean canConnect();

	/**
	 * Gets a connector for this figure at the given location.
	 * A figure can have different connectors at different locations.
	 */
	public Connector connectorAt(int x, int y);

	/**
	 * Sets whether the connectors should be visible.
	 * Connectors can be optionally visible. Implement
	 * this method and react on isVisible to turn the
	 * connectors on or off.
	 */
	public void connectorVisibility(boolean isVisible, ConnectionFigure connection);

	/**
	 * Returns the connection inset. This is only a hint that
	 * connectors can use to determine the connection location.
	 * The inset defines the area where the display box of a
	 * figure should not be connected.
	 *
	 */
	public Insets connectionInsets();

	/**
	 * Returns the locator used to located connected text.
	 */
	public Locator connectedTextLocator(Figure text);

	/**
	 * Returns the named attribute or null if a
	 * a figure doesn't have an attribute.
	 * All figures support the attribute names
	 * FillColor and FrameColor
	 *
	 * @@deprecated use getAttribute(FigureAttributeConstant) instead
	 */
	public Object getAttribute(String name);

	/**
	 * Returns the named attribute or null if a
	 * a figure doesn't have an attribute.
	 * All figures support the attribute names
	 * FillColor and FrameColor
	 */
	public Object getAttribute(FigureAttributeConstant attributeConstant);

	/**
	 * Sets the named attribute to the new value
	 *
	 * @@deprecated use setAttribute(FigureAttributeConstant, Object) instead
	 */
	public void setAttribute(String name, Object value);

	/**
	 * Sets the named attribute to the new value
	 */
	public void setAttribute(FigureAttributeConstant attributeConstant, Object value);

	/**
	 * Gets the z value (back-to-front ordering) of this figure.
	 * Z values are not guaranteed to not skip numbers.
	 */
	public int getZValue();

	/**
	 * Sets the z value (back-to-front ordering) of this figure.
	 * Z values are not guaranteed to not skip numbers.
	 */
	public void setZValue(int z);

	public void visit(FigureVisitor visitor);

	/**
	 * Some figures have the ability to hold text. This method returns
	 * the adjunctant TextHolder.
	 * @@return
	 */
	public TextHolder getTextHolder();

	/**
	 * Get the underlying figure in case the figure has been decorated.
	 * If the figure has not been decorated the figure itself is returned.
	 * The DecoratorFigure does not release the the decorated figure but
	 * just returns it (in contrast to {@@link org.jhotdraw.standard.DecoratorFigure.peelDecoration}).
	 *
	 * @@return underlying, "real" without DecoratorFigure
	 * @@see org.jhotdraw.standard.DecoratorFigure
	 */
	public Figure getDecoratedFigure();
}
@


1.9
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@a51 6
	 * Constant that allows to identify a popup menu assigned
	 * as an attribute.
	 */
	public static String POPUP_MENU = "POPUP_MENU";

	/**
@


1.8
log
@prepare for 5.4 release: various bug fixes
@
text
@d12 1
a12 1
package CH.ifa.draw.framework;
d14 2
a15 2
import CH.ifa.draw.util.*;
import CH.ifa.draw.standard.TextHolder;
d44 1
a44 1
 * @@see CH.ifa.draw.standard.AbstractFigure
d334 1
a334 1
	 * just returns it (in contrast to {@@link CH.ifa.draw.standard.DecoratorFigure.peelDecoration}).
d337 1
a337 1
	 * @@see CH.ifa.draw.standard.DecoratorFigure
@


1.7
log
@introduce FigureVisitor for paste/delete commands
@
text
@d31 10
a40 1
 * by AbstractFigure.
d176 3
d180 4
d185 4
d323 5
d329 11
@


1.7.4.1
log
@DecoratorFigure is 'changed'  I think it needs reworking.  not its only used durint draw(Graphics g) but I don't think
that was its real intention?

The Figure added or removed is nolonger changed during the add or remove process.  Thus add and remove do not return
values.
orphan is used internally to the drawing only.
remove calls figure.remove() which intern orphans the figure.
remove(Figure f) is still present and used but currently not needed.  call figure.remove() instead.
perhaps we can add a method on the figure enumerator to 'remove' all the figures within it.
Figure no longer exposes its listeners.  call methods on figure to send events.


Serialization in every form needs cleanup now.  Some due to earlier changes made by myself like making listeners of
inner classes, but not storing the listener when the figures are stored. (since the figures think the inner listener
is their container.)
@
text
@a110 4
	 * For instance, when the figure is being added to the drawing, the <code>
	 * CreationTool</code> will check this to see wether to add the figure or
	 * not.  If the figure is too small to be seen, it will return true for isEmpty
	 * under the above condition.
d156 2
a157 4
	 * any kind of FigureChangeListener.  A figure may only have a single 
	 * container attempts to add to 2nd container will throw exception.
	 * This is a runtime exception now while its debated wether it should be
	 * a checked exception or ont.
d162 2
a163 3
	 * Removes a figure from its container.
	 * This is caled by the container in response to receiving a {@@link
	 * FigureChangeListener#figureRequestRemove figureRequestRemove} event.
a166 1
	
d174 1
a174 1
	//public FigureChangeListener listener();
d188 2
a189 4
	 * a figure is being permanently deleted from the undo/redo stack.
	 * or if it should be deleted without ever being added to the stack.
	 *
	 * @@see FigureChangeListener#figureRemoved
d192 1
a192 16
	
	/**
	 * Notifies all listeners that this figure wishes to be removed from its
	 * container.  sends a figureRequestRemove event.
	 *
	 * @@see FigureChangeListener#figureRequestRemove
	 */
	public void remove();
	
	
	/**
	 * This informs all listeners that the figure is requesting to be redrawn.
	 *
	 * @@see FigureChangeListener#figureRequestUpdate
	 */
	public void update();
a196 3
	 * This will fire a figureInvalidated event to all its listeners.
	 *
	 * @@see FigureChangeListener#figureInvalidated
a210 4
	 *
	 * Causes the figures current display box to be marked as dirty and in need
	 * of redraw.  The redraw does not occur as a result of this method call.
	 *
a212 1
	 * @@see FigureChangeListener#figureInvalidated
d217 3
a219 8
	 * Call this after the figures display box has changed.  It will nottify all
	 * listeners that the figures bounding box has changed and is in need of
	 * redraw.
	 *
	 * Causes the figures current display box to be marked as dirty and in need
	 * of redraw.  The redraw does not occur as a direct result of this method 
	 * call.
	 *
d222 1
a222 3
	 * @@see FigureChangeListener#figureInvalidated
	 * @@see FigureChangeListener#figureChanged
	 * @@see FigureChangeEvent
@


1.7.4.2
log
@
Lets have a moment of silence for DecoratorFigure.....It was a good figure ;{

Anything which happens inside the drawing after figure add must be undone before figure orphan.  It must also not
be exposed to anyobject outside the drawing.
Decorator figure retired in favor of a figureManipulator and the other functions being implemented by a composite
figure(BorderDecorator).
AdnimationDecorator retired in favor of AnimationManipulator.
A figure can have only 1 container. This is making the border tool have a hard time.

Lots of comments added

next phase:
orphan will disappear.  only add and remove remain.  All figure related resources belong to the figures and no other
object should care about figure.release.
split the figureListener into a figureContainer listener and a figureChangeListener.
Fix BorderDecorator.
Fix ConnectedText.
view.checkDamage to call drawing.update()
@
text
@a343 8
	/**
	 * Add a <code>FigureManipulator</code> to the <code>Figure</code>.
	 */
	public void addFigureManipulator(FigureManipulator fm);
	/**
	 * Remove a <code>FigureManipulator</code> to the <code>Figure</code>.
	 */
	public void removeFigureManipulator(FigureManipulator fm);
@


1.7.4.3
log
@New FigureDecorator using decorator pattern now installed.
A few other minor cleanups.
@
text
@a87 11
	
	/**
	 * This method will call draw first then drawDecorators
	 */
	public void drawAll(Graphics g);

	/**
	 * This method draws the FigureDecorators
	 * @@see FigureDecorator#draw
	 */
	public void drawDecorators(Graphics g);
a351 6
	public void addFigureDecorator(FigureDecorator fd);
	public void removeFigureDecorator(FigureDecorator fd);
	/**
	 * Need to create an enumerator/enumeration for this.
	 */
	public java.util.Iterator figureDecorators();
@


1.7.4.4
log
@drawing.update() is called as opposed to view.checkDamage().  This causes all affected views
to be updated as opposed to just the one.
figure.Remove() now returns the container it was removed from.  This may assist undo/redo.
@
text
@a218 1
	 * @@return FigureChangeListener The container this figure was removed from
d220 1
a220 1
	public FigureChangeListener remove();
@


1.7.4.5
log
@CompositeFigure does not return figures from add, remove, orphan anymore
new method, restore added to bring back orphaned figures
compositeFigure keeps record of its orphans for the restore method
NullFigures inserted as placeholders into the figureList
dumps record and nullFigures when remove(figure) called. this safely restores
figures to their old places.
figureRequestRemove and figureRemove events eliminated.
Group and Ungroup commands redone to respect these new ideas.
have not done anything with delete, cut, copy, paste yet.
NullFigure added 0,0 for its display box, else throwing exceptions
@
text
@d180 2
d206 3
a208 4
	 * Notifies all listeners that this figure has been released.
	 * Figures should first release all their resources such as other figures.
	 * THIS METHOD IS CALLED BY THE CONTAINER THAT IS RELEASING THE FIGURE
	 * need to change event names to released
d210 1
a210 1
	 * @@see CompositeFigure#remove(Figure f)
d213 10
@


1.7.4.6
log
@figure.release() cleanup.  trying to make release work properly.
@
text
@d206 2
a207 5
	 * This method is called by the tool that currently owns the removed figure,
	 * when it is finished with the figure and does not intend to use it any
	 * further.  A figure can not be released if it is holding orphans.  They
	 * must first be removed.  Else the tool that orphaned the figures may not 
	 * realize they can not be restored.
d209 1
a209 1
	 * @@see CH.ifa.draw.standard.CompositeFigure#remove(Figure f)
@


1.6
log
@after variou merges... (before 5.4 release)
@
text
@d15 2
a17 1
import java.util.*;
d167 4
d300 4
@


1.5
log
@no message
@
text
@d49 2
a50 2
	 * @@param x the x delta
	 * @@param y the y delta
d56 1
a56 2
	 * always implemented in figure subclasses.
	 * It only changes
d93 1
a93 1
	 * @@return a Vector of handles
d96 1
a96 1
	public Vector handles();
d238 1
a238 1
	public void connectorVisibility(boolean isVisible);
@


1.4
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d42 1
a42 1
	 * Constant that allows to identify a popup menu assigned 
d46 1
a46 1
	
d260 2
d266 8
d275 2
d279 5
@


1.3
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)Figure.java 5.2
d4 6
d35 2
a37 1

d39 1
a39 1
                extends Storable, Cloneable, Serializable {
d41 238
a278 238
    /**
     * Constant that allows to identify a popup menu assigned 
     * as an attribute.
     */
    public static String POPUP_MENU = "POPUP_MENU";
    
    /**
     * Moves the Figure to a new location.
     * @@param x the x delta
     * @@param y the y delta
     */
    public void moveBy(int dx, int dy);

    /**
     * Changes the display box of a figure. This method is
     * always implemented in figure subclasses.
     * It only changes
     * the displaybox and does not announce any changes. It
     * is usually not called by the client. Clients typically call
     * displayBox to change the display box.
     * @@param origin the new origin
     * @@param corner the new corner
     * @@see #displayBox
     */
    public void basicDisplayBox(Point origin, Point corner);

    /**
     * Changes the display box of a figure. Clients usually
     * invoke this method. It changes the display box
     * and announces the corresponding changes.
     * @@param origin the new origin
     * @@param corner the new corner
     * @@see #displayBox
     */
    public void displayBox(Point origin, Point corner);

    /**
     * Gets the display box of a figure
     * @@see #basicDisplayBox
     */
    public Rectangle displayBox();

    /**
     * Draws the figure.
     * @@param g the Graphics to draw into
     */
    public void draw(Graphics g);

    /**
     * Returns the handles used to manipulate
     * the figure. Handles is a Factory Method for
     * creating handle objects.
     *
     * @@return a Vector of handles
     * @@see Handle
     */
    public Vector handles();

    /**
     * Gets the size of the figure
     */
    public Dimension size();

    /**
     * Gets the figure's center
     */
    public Point center();

    /**
     * Checks if the Figure should be considered as empty.
     */
    public boolean isEmpty();

    /**
     * Returns an Enumeration of the figures contained in this figure
     */
    public FigureEnumeration figures();

    /**
     * Returns the figure that contains the given point.
     */
    public Figure findFigureInside(int x, int y);

    /**
     * Checks if a point is inside the figure.
     */
    public boolean containsPoint(int x, int y);

    /**
     * Returns a Clone of this figure
     */
    public Object clone();

    /**
     * Changes the display box of a figure. This is a
     * convenience method. Implementors should only
     * have to override basicDisplayBox
     * @@see #displayBox
     */
    public void displayBox(Rectangle r);

    /**
     * Checks whether the given figure is contained in this figure.
     */
    public boolean includes(Figure figure);

    /**
     * Decomposes a figure into its parts. A figure is considered
     * as a part of itself.
     */
    public FigureEnumeration decompose();

    /**
     * Sets the Figure's container and registers the container
     * as a figure change listener. A figure's container can be
     * any kind of FigureChangeListener. A figure is not restricted
     * to have a single container.
     */
    public void addToContainer(FigureChangeListener c);

    /**
     * Removes a figure from the given container and unregisters
     * it as a change listener.
     */
    public void removeFromContainer(FigureChangeListener c);

    /**
     * Gets the Figure's listeners.
     */
    public FigureChangeListener listener();

    /**
     * Adds a listener for this figure.
     */
    public void addFigureChangeListener(FigureChangeListener l);

    /**
     * Removes a listener for this figure.
     */
    public void removeFigureChangeListener(FigureChangeListener l);

    /**
     * Releases a figure's resources. Release is called when
     * a figure is removed from a drawing. Informs the listeners that
     * the figure is removed by calling figureRemoved.
     */
    public void release();

    /**
     * Invalidates the figure. This method informs its listeners
     * that its current display box is invalid and should be
     * refreshed.
     */
    public void invalidate();

    /**
     * Informes that a figure is about to change such that its
     * display box is affected.
     * Here is an example of how it is used together with changed()
     * <pre>
     * public void move(int x, int y) {
     *      willChange();
     *      // change the figure's location
     *      changed();
     *  }
     * </pre>
     * @@see #invalidate
     * @@see #changed
     */
    public void willChange();

    /**
     * Informes that a figure has changed its display box.
     * This method also triggers an update call for its
     * registered observers.
     * @@see #invalidate
     * @@see #willChange
     *
     */
    public void changed();

    /**
     * Checks if this figure can be connected
     */
    public boolean canConnect();

    /**
     * Gets a connector for this figure at the given location.
     * A figure can have different connectors at different locations.
     */
    public Connector connectorAt(int x, int y);

    /**
     * Sets whether the connectors should be visible.
     * Connectors can be optionally visible. Implement
     * this method and react on isVisible to turn the
     * connectors on or off.
     */
    public void connectorVisibility(boolean isVisible);

    /**
     * Returns the connection inset. This is only a hint that
     * connectors can use to determine the connection location.
     * The inset defines the area where the display box of a
     * figure should not be connected.
     *
     */
    public Insets connectionInsets();

    /**
     * Returns the locator used to located connected text.
     */
    public Locator connectedTextLocator(Figure text);

    /**
     * Returns the named attribute or null if a
     * a figure doesn't have an attribute.
     * All figures support the attribute names
     * FillColor and FrameColor
     */
    public Object getAttribute(String name);

    /**
     * Sets the named attribute to the new value
     */
    public void setAttribute(String name, Object value);

    /**
     * Gets the z value (back-to-front ordering) of this figure.
     * Z values are not guaranteed to not skip numbers.
     */
    public int getZValue();

    /**
     * Sets the z value (back-to-front ordering) of this figure.
     * Z values are not guaranteed to not skip numbers.
     */
    public void setZValue(int z);
@


1.2
log
@additional methods: get and set z value
@
text
@d2 1
a2 1
 * @@(#)Figure.java 5.1
d28 1
a28 1
 * @@see AbstractFigure
d35 6
a260 1

a271 1

@


1.1
log
@Initial revision
@
text
@d254 14
@


1.1.1.1
log
@
Initial revision.
@
text
@@
