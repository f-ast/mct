head	1.22;
access;
symbols
	jhotdraw60b1-release:1.21
	package_rename:1.19
	directory_rename:1.18
	reorg_6x_split_initial:1.18
	release_JHD54b1:1.13
	dnoyeb1:1.12.0.2
	Before_FigureVisitor:1.10
	JHotDraw_5-3:1.8
	initial:1.1.1.1
	mrfloppy:1.1.1;
locks; strict;
comment	@# @;


1.22
date	2005.04.19.22.46.51;	author mrfloppy;	state dead;
branches;
next	1.21;

1.21
date	2004.02.01.17.41.11;	author mrfloppy;	state Exp;
branches;
next	1.20;

1.20
date	2004.02.01.14.30.55;	author mrfloppy;	state Exp;
branches;
next	1.19;

1.19
date	2004.01.09.22.53.43;	author mrfloppy;	state Exp;
branches;
next	1.18;

1.18
date	2003.09.23.05.07.18;	author mtnygard;	state Exp;
branches;
next	1.17;

1.17
date	2003.07.14.12.56.53;	author pmorch;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.17.16.13.41;	author dnoyeb;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.11.20.13.35;	author dnoyeb;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.05.22.22.23;	author mrfloppy;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.30.00.27.32;	author mrfloppy;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.27.01.06.18;	author mrfloppy;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2002.11.08.17.06.33;	author mtnygard;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.07.20.48.16;	author mrfloppy;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.04.22.32.02;	author mrfloppy;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.19.18.17.43;	author mrfloppy;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.20.31.59;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.25.12;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.13.10.12.16;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.29.13.38.38;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.09.19.23.04;	author mrfloppy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.09.19.23.04;	author mrfloppy;	state Exp;
branches;
next	;

1.12.2.1
date	2003.01.14.14.52.16;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.22
log
@ASCII-Synchronisation
@
text
@<?xml version="1.0"?>

<project name="JHotDraw" default="main" basedir=".">

  <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it -->
  <property file="${user.home}/.ant.properties"/>
  <property file="build.properties"/>
  <!-- user-dependent properties can include (for copy and paste into mybuild.properties):
    junit.class.path=
    junitdoclet.class.path=
    versiondoclet.class.path=
    checkstyle.class.path=
    namingstrategy.class.path=
    jdo.class.path = 
    batik.class.path = <batik-dom.jar;batik-svggen.jar;batik-awt-util.jar>
    Note: be sure to use forward slashes as path separators even on Windows systems
  -->
  <property file="mybuild.properties"/>
  
  <property name="build.classes" value="${dest.dir}"/>
  <property name="build.jar.name" value="jhotdraw.jar"/>
  <property name="build.jar" value="${dest.dir}/${build.jar.name}"/>
  <property name="deploy.dir" value="${dest.dir}/deploy"/>
  <property name="zip.file" value="${deploy.dir}/jhotdraw6.zip"/>

  <property name="src.dir" value="${dest.dir}/src"/>
  <property name="images.dir" value="org/jhotdraw/images"/>
  <property name="javadraw.images.dir" value="org/jhotdraw/samples/javadraw/sampleimages"/>
  <property name="pert.images.dir" value="org/jhotdraw/samples/pert/images"/>

  <property name="javadoc.dir" value="${dest.dir}/javadoc"/>
  <property name="mk.dir" value="${dest.dir}/build"/>
  <property name="testsuite.package.name" value="org.jhotdraw.test"/>
  <property name="testsuite" value="${testsuite.package.name}.AllTests"/>
  
  <property name="javac.deprecation" value="off"/>
  <property name="javac.includes" value="**/*.java"/>

  <property name="manifest.name" value="jhotdraw.mf"/>

  <!-- Dependencies on optional packages                                   -->  
  <!--<property name="needs.batik.src" value="org/jhotdraw/contrib/SVG*.java"/>
  <property name="needs.jdo.src" value="org/jhotdraw/util/JDOStorageFormat.java"/>
  -->
  <property name="needs.batik.src" value="**/SVG*.java"/>
  <property name="needs.jdo.src" value="**/JDOStorageFormat.java"/>
  <property name="needs.junit.src" value="org/jhotdraw/test/**"/>

  <property name="needs.batik.class" value="org.jhotdraw.contrib.SVG*"/>
  <property name="needs.jdo.class" value="org.jhotdraw.util.JDOStorageFormat"/>
  <property name="needs.junit.class" value="org.jhotdraw.test.*"/>
  
  <property name="test.packages" value="org.jhotdraw.test.*"/>

  <property environment="env"/>

  <!-- =================================================================== -->
  <!-- Set timestamp and check for optional packages                       -->
  <!-- =================================================================== -->
  <target name="init">
  	<tstamp/>
  </target>

  <target name="check_for_optional_packages">
	<available property="batik.available" file="${batik.class.path}"/>
	<available property="jdo.available" file="{jdo.class.path}"/>
	<available property="versiondoclet.available" file="${versiondoclet.class.path}"/>
	<available property="junit.available" file="${junit.class.path}"/>
	<available property="junitdoclet.available" file="${junitdoclet.class.path}"/>
	<available property="namingstrategy.available" file="${namingstrategy.class.path}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Builds a complete package with all files from scratch               -->
  <!-- =================================================================== -->
  <target name="all" depends="clean, main, javadoc, junit_test, deploy">
  </target>

  <!-- =================================================================== -->
  <!-- Builds a package with all essential files                           -->
  <!-- ================================================================== -->
  <target name="main" depends="init, compile, copy_resources, jar">
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source code                                            -->
  <!-- =================================================================== -->
  <target name="compile" 
          depends="check_for_optional_packages, delete_dependants" 
          description="Compiles the source code">
     <javac srcdir="${src.dir}"
           destdir="${build.classes}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           optimize="${javac.optimize}"
           fork="${javac.fork}">
      <include name="org/jhotdraw/framework/**"/>
    </javac>
    <javac srcdir="${src.dir}"
           destdir="${build.classes}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           optimize="${javac.optimize}"
           fork="${javac.fork}">
      <include name="${javac.includes}"/>
      <exclude name="org/jhotdraw/framework/**"/>
      <exclude name="${needs.batik.src}" unless="batik.available"/>
      <exclude name="${needs.jdo.src}" unless="jdo.available"/>
      <exclude name="${needs.junit.src}"/>
      <classpath>
        <pathelement path="${java.class.path}"/>
        <pathelement path="${jdo.class.path}"/>
        <pathelement path="${batik.class.path}"/>
      </classpath>
    </javac>
  </target>

  <target name="delete_dependants" unless="javac.nodepend">
    <depend srcdir="${src.dir}" destdir="${build.classes}"
            cache="depcache" closure="yes">
      <include name="${javac.includes}"/>
      <exclude name="${needs.batik.src}" unless="batik.available"/>
      <exclude name="${needs.jdo.src}"  unless="jdo.available"/>
      <exclude name="${needs.junit.src}"/>
    </depend>
  </target>
  
  <!-- =================================================================== -->
  <!-- Generates JavaDoc                                                   -->
  <!-- =================================================================== -->
  <target name="javadoc" depends="check_for_optional_packages">
    <antcall target="standard_javadoc"/>
    <antcall target="versiondoclet_javadoc"/>
  </target>

  <target name="standard_javadoc" unless="versiondoclet.available">
    <echo>using standard doclet...</echo>
    <mkdir dir="${javadoc.dir}"/>
    <javadoc
      destdir      = "${javadoc.dir}"
      classpath    = "${dest.dir}"
      author       = "false"
      version      = "true">
      <fileset dir="${src.dir}" >
        <include name="${javac.includes}"/>
        <exclude name="${needs.junit.src}"/>
      </fileset>
    </javadoc>
  </target>

  <target name="versiondoclet_javadoc" if="versiondoclet.available">
    <echo>using version doclet...</echo>
    <mkdir dir="${javadoc.dir}"/>
    <javadoc
      destdir      = "${javadoc.dir}"
      classpath    = "${dest.dir}"
      author       = "false"
      version      = "true">
      <doclet name="org.jhotdraw.tools.versiondoclet.VersionDoclet">
        <param name="-versionfile" value="${mk.dir}/${manifest.name}"/>
        <param name="-version" value=""/>
        <path>
          <pathelement path="${versiondoclet.class.path}"/>
        </path>
      </doclet>
      <fileset dir="${src.dir}" >
        <include name="${javac.includes}"/>
        <exclude name="${needs.junit.src}"/>
      </fileset>
    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Generates JUnit tests using JUnitDoclet                             -->
  <!-- =================================================================== -->
  <path id="tools_path">
    <pathelement path="${java.home}/lib/tools.jar"/>
  </path>

  <path id="junit_test_path">
    <pathelement path = "${dest.dir}"/>
    <pathelement path = "${junit.class.path}"/>
    <pathelement path = "${junitdoclet.class.path}"/>
    <pathelement path = "${namingstrategy.class.path}"/>
    <pathelement path = "${jdo.class.path}"/>
    <pathelement path = "${batik.class.path}"/>
    <pathelement path = "${java.class.path}"/>
  </path>
  
  <target name="junit_doclet" depends="jar">
    <javadoc
      classpath           = "${dest.dir}"
      sourcepath          = "${src.dir}"
      defaultexcludes     = "yes">
      <package name="org.jhotdraw.util.*"/>
      <excludepackage name="${needs.batik.class}"/>
      <excludepackage name="${needs.jdo.class}"/>
      <excludepackage name="${test.packages}"/>
      <doclet name="com.objectfab.tools.junitdoclet.JUnitDoclet">
        <param name="-d" value="${src.dir}"/>
        <param name="-properties" value="jhotdraw_junitdoclet.properties"/>
        <!-- <param name="-buildall"/> -->
        <param name="-testintest"/>
        <param name="-naming" value="org.jhotdraw.tools.testnaming.JHDTestNamingStrategy"/>
        <path>
          <pathelement path = "${junitdoclet.class.path}"/>
          <pathelement path = "${namingstrategy.class.path}"/>
          <pathelement path = "${jdo.class.path}"/>
          <pathelement path = "${batik.class.path}"/>
        </path>
      </doclet>
    </javadoc>
  </target>

  <target name="junit_compile" depends="compile, junit_doclet">
 	<javac srcdir="${src.dir}"
           destdir="${dest.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           optimize="${javac.optimize}">
      <!-- <include name="${needs.junit.src}"/> -->
      <include name="${javac.includes}"/>
      <exclude name="${needs.batik.src}" unless="batik.available"/>
      <exclude name="${needs.jdo.src}" unless="jdo.available"/>
      <classpath>
        <path refid="junit_test_path"/>
      </classpath>
    </javac>
  </target>

  <target name="junit_test" depends="junit_compile">
    <junit fork="yes" haltonfailure="no">
      <formatter type="plain" usefile="no"/>
      <classpath>
        <path refid="junit_test_path"/>
      </classpath>
      <test name="${testsuite}"/>
    </junit>
  </target>

  <!-- =================================================================== -->
  <!-- Style check                                                         -->
  <!-- =================================================================== -->
<!--
  <taskdef name="checkstyle" classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"/>
  <target name="stylecheck">
      <checkstyle allowtabs="yes"
              allownoauthor="yes"
              maxlinelen="100"
              headerfile="headerfile.txt"
              headerignoreline="2"
              relaxjavadoc="yes"
              parampattern="."
              constpattern="."
              staticpattern="."
              memberpattern=".">
          <fileset dir="${src.dir}" includes="**/*.java"/>
      </checkstyle>
  </target>
-->
  <!-- =================================================================== -->
  <!-- Copies the resources into the build target directory                -->
  <!-- Resources are non-code that needs to be packed into some jar file   -->
  <!-- in their package structure, such as .gif, .properties, .html, etc.  -->
  <!-- =================================================================== -->
  <target name="copy_resources">
    <copy toDir="${dest.dir}">
      <fileset dir="${src.dir}">
         <include name ="**/*.gif" />
         <include name ="**/*.html" />
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans up generated stuff                                           -->
  <!-- =================================================================== -->
  <target name="clean" description="Cleans up generated stuff.">
    <delete dir="${dest.dir}/org"/>
    <delete dir="${javadoc.dir}"/>
    <delete file="${build.jar}"/>
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- The next section defines the Jar file layout.                       -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile, copy_resources">
    <jar jarfile="${build.jar}"
         manifest="${mk.dir}/${manifest.name}"
        >
      <fileset dir="${build.classes}">
        <include name="org/jhotdraw/**"/>
        <exclude name="org/jhotdraw/test/**"/>
      </fileset>
	</jar>
  </target>

  <!-- =================================================================== -->
  <!-- Create a zip file with all deployable content                       -->
  <!-- =================================================================== -->
  <target name="deploy">
    <delete dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}"/>
    <zip zipfile="${zip.file}">
      <fileset dir="${dest.dir}">
        <include name="*/**"/>
        <exclude name="**/CVS/**"/>
        <exclude name="${deploy.dir}/**"/>
        <exclude name=".project"/>
        <exclude name=".classpath"/>
        <exclude name="**/.cvsignore"/>
        <exclude name="*/bin/**"/>
        <exclude name="**/depcache/**"/>
      </fileset>
	</zip>
  </target>
  
  <!-- =================================================================== -->
  <!-- Run examples (and compile if necessary).                            -->
  <!-- =================================================================== -->
  <path id="example_path">
    <pathelement path="${java.class.path}/"/>
    <pathelement path="${build.jar}/"/>
  </path>
  
  <target name="javadraw" depends="main">
     <java classname="org.jhotdraw.samples.javadraw.JavaDrawApp" fork="yes">
       <classpath>
         <path refid="example_path"/>
       </classpath>
     </java>
  </target>

  <target name="pert" depends="main">
     <java classname="org.jhotdraw.samples.pert.PertApplication" fork="yes">
       <classpath>
         <path refid="example_path"/>
       </classpath>
     </java>
  </target>

  <target name="net" depends="main">
     <java classname="org.jhotdraw.samples.net.NetApp" fork="yes">
       <classpath>
         <path refid="example_path"/>
       </classpath>
     </java>
  </target>

  <target name="nothing" depends="main">
     <java classname="org.jhotdraw.samples.nothing.NothingApp" fork="yes">
       <classpath>
         <path refid="example_path"/>
       </classpath>
     </java>
  </target>

  <target name="svgdraw" depends="main" if="batik.available">
     <java classname="org.jhotdraw.contrib.SVGDrawApp" fork="yes">
       <classpath>
         <path refid="example_path"/>
         <pathelement path="${env.CLASSPATH}"/>
       </classpath>
     </java>
  </target>
</project>
@


1.21
log
@build.xml fix for org.jhotdraw-package
@
text
@@


1.20
log
@build.xml fix for org.jhotdraw-package
@
text
@d24 2
d77 1
a77 1
  <target name="all" depends="clean, main, javadoc, junit_test">
a140 2
      packagenames = "org.*"
      sourcepath   = "${src.dir}"
d145 4
a155 2
      packagenames = "org.*"
      sourcepath   = "${src.dir}"
d167 4
d283 1
d301 20
@


1.19
log
@After renaming the CH.ifa.draw to org.jhotdraw
@
text
@d26 3
a28 3
  <property name="images.dir" value="CH/ifa/draw/images"/>
  <property name="javadraw.images.dir" value="CH/ifa/draw/samples/javadraw/sampleimages"/>
  <property name="pert.images.dir" value="CH/ifa/draw/samples/pert/images"/>
d41 2
a42 2
  <!--<property name="needs.batik.src" value="CH/ifa/draw/contrib/SVG*.java"/>
  <property name="needs.jdo.src" value="CH/ifa/draw/util/JDOStorageFormat.java"/>
d46 1
a46 1
  <property name="needs.junit.src" value="CH/ifa/draw/test/**"/>
d66 2
a67 2
    <available property="versiondoclet.available" file="${versiondoclet.class.path}"/>
    <available property="junit.available" file="${junit.class.path}"/>
d69 1
a69 1
    <available property="namingstrategy.available" file="${namingstrategy.class.path}"/>
d80 1
a80 1
  <!-- =================================================================== -->
d96 1
a96 1
      <include name="CH/ifa/draw/framework/**"/>
d105 1
a105 1
      <exclude name="CH/ifa/draw/framework/**"/>
d139 1
a139 1
      packagenames = "CH.*"
d152 1
a152 1
      packagenames = "CH.*"
d210 1
a210 1
  <target name="junit_compile" depends="junit_doclet">
d217 1
a217 1
      <include name="CH/ifa/draw/test/**/*.java"/>
d274 1
a274 1
    <delete dir="${dest.dir}/CH"/>
d287 2
a288 2
        <include name="CH/**"/>
        <exclude name="CH/ifa/draw/test/**"/>
@


1.18
log
@All test cases now pass!
@
text
@d32 1
a32 1
  <property name="testsuite.package.name" value="CH.ifa.draw.test"/>
d48 3
a50 3
  <property name="needs.batik.class" value="CH.ifa.draw.contrib.SVG*"/>
  <property name="needs.jdo.class" value="CH.ifa.draw.util.JDOStorageFormat"/>
  <property name="needs.junit.class" value="CH.ifa.draw.test.*"/>
d52 1
a52 1
  <property name="test.packages" value="CH.ifa.draw.test.*"/>
d190 1
a190 1
      <package name="CH.ifa.draw.util.*"/>
d302 1
a302 1
     <java classname="CH.ifa.draw.samples.javadraw.JavaDrawApp" fork="yes">
d310 1
a310 1
     <java classname="CH.ifa.draw.samples.pert.PertApplication" fork="yes">
d318 1
a318 1
     <java classname="CH.ifa.draw.samples.net.NetApp" fork="yes">
d326 1
a326 1
     <java classname="CH.ifa.draw.samples.nothing.NothingApp" fork="yes">
d334 1
a334 1
     <java classname="CH.ifa.draw.contrib.SVGDrawApp" fork="yes">
@


1.17
log
@On UNIX file names are case sensitive, so jhotdraw.mf file is spelled with correct case (all lower case) to work on UNIX.
@
text
@d33 1
a33 1
  <property name="testsuite" value="${testsuite.package.name}.JHDTestCase"/>
d181 1
@


1.16
log
@simplification of incremental compilation.
@
text
@d38 1
a38 1
  <property name="manifest.name" value="JHotdraw.mf"/>
d340 1
a340 1
</project>@


1.15
log
@Allows deprecations to be seen by compiling framework package first.
@
text
@d88 1
a88 1
          depends="check_for_optional_packages, delete_dependants,compileFramework" 
d90 8
a113 14
    </javac>
  </target>
  <!-- =================================================================== -->
  <!-- Compiles the interfaces code                                        -->
  <!-- =================================================================== -->
  <target name="compileFramework" 
          description="Compiles the interfaces code">
     <javac srcdir="${src.dir}"
           destdir="${build.classes}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           optimize="${javac.optimize}"
           fork="${javac.fork}">
      <include name="CH/ifa/draw/framework/**"/>
@


1.14
log
@bug-fix for Sourceforge bug id 681288
@
text
@d87 3
a89 1
  <target name="compile" depends="check_for_optional_packages, delete_dependants">
d94 2
a95 1
           optimize="${javac.optimize}">
d97 1
d108 14
d278 1
a278 1
  <target name="clean">
@


1.13
log
@prepare for 5.4 release: various bug fixes
@
text
@d94 1
a94 1
      <!-- <exclude name="${needs.batik.src}" unless="batik.available"/> -->
@


1.12
log
@no message
@
text
@d9 12
a20 1

d22 2
a23 1
  <property name="build.jar" value="jhotdraw.jar"/>
d32 3
a34 1

d37 1
a37 1
  
d41 12
a52 2
  <property name="needs.batik" value="CH/ifa/draw/contrib/SVG*.java"/>
  <property name="needs.poet" value="CH/ifa/draw/util/JDOStorageFormat.java"/>
d55 4
a58 1
    
d62 8
a69 7
  
  <!-- =================================================================== -->
  <!-- Set timestamp and check for optional packages                       -->
  <!-- =================================================================== -->
  <target name="check-for-optional-packages">
	<available property="batik.present" classname="org.apache.batik.svggen.SVGGraphics2D"/>
	<available property="poet.present" classname="com.poet.jdo.PersistenceManagerFactories"/>
d75 1
a75 1
  <target name="all" depends="clean, main, javadocs">
d81 1
a81 1
  <target name="main" depends="compile, copyResources, jar">
d87 1
a87 1
  <target name="compile">
d92 1
a92 1
           optimize="${javac.optimize}" >
d94 8
a101 2
      <exclude name="${needs.batik}" unless="batik.present"/>
      <exclude name="${needs.poet}" unless="poet.present"/> 
d105 10
d118 3
a120 4
  <target name="javadocs">
    <available property="use.versiondoclet" classname="org.jhotdraw.tools.versiondoclet.VersionDoclet"/>
    <antcall target="standard_javadocs"/>
    <antcall target="versiondoclet_javadocs"/>
d123 2
a124 1
  <target name="standard_javadocs" unless="use.versiondoclet">
d126 7
a132 6
    <javadoc sourcepath="${src.dir}"
      destdir="${javadoc.dir}"
      classpath="${dest.dir}"
      author="false"
      version="true"
      packagenames="CH.*">
d136 2
a137 1
  <target name="versiondoclet_javadocs" if="use.versiondoclet">
d139 7
a145 6
    <javadoc sourcepath="${src.dir}"
      destdir="${javadoc.dir}"
      classpath="${dest.dir}"
      author="false"
      version="true"
      packagenames="CH.*">
d149 3
d157 67
d248 1
a248 1
  <target name="copyResources">
d263 1
a263 1
    <delete file="${dest.dir}/${build.jar}"/>
d269 2
a270 4
  <target name="jar" depends="compile, copyResources">
    <jar jarfile="${dest.dir}/${build.jar}"
         basedir="${build.classes}"
         includes="CH/**"
d273 4
d283 5
d289 4
a292 1
     <java classname="CH.ifa.draw.samples.javadraw.JavaDrawApp" fork="yes" classpath="${classpath};../jhotdraw.jar">
d297 4
a300 1
     <java classname="CH.ifa.draw.samples.pert.PertApplication" fork="yes" classpath="${classpath};../jhotdraw.jar">
d305 4
a308 1
     <java classname="CH.ifa.draw.samples.net.NetApp" fork="yes" classpath="${classpath};../jhotdraw.jar">
d313 4
a316 1
     <java classname="CH.ifa.draw.samples.nothing.NothingApp" fork="yes" classpath="${classpath};../jhotdraw.jar">
d320 7
a326 2
  <target name="svgdraw" depends="main" if="batik.present">
     <java classname="CH.ifa.draw.contrib.SVGDrawApp" fork="yes" classpath="${classpath};../jhotdraw.jar;${env.CLASSPATH}"/>
@


1.12.2.1
log
@javac does not inform of deprecated usage of classes that are being compiled within the same task.
made the interfaces compile in a seperate task.
Made source directory not depend on output directory.
NetBeans switched around the order of whats inside of some tasks for some reason.  same values though
@
text
@d1 1
a1 1
<?xml version="1.0" encoding="UTF-8"?>
d3 1
a3 1
<project basedir="." default="main" name="JHotDraw">
d13 1
a13 1
  <property name="src.dir" value="../src"/>
d19 1
a19 1
  <property name="mk.dir" value="../build"/>
a22 2
  <!-- On windows you should fork during compile since Ant does not release the files otherwise -->
  <property name="javac.fork" value="no"/>
d32 1
a32 1
  <target name="init" description="Set timestamp and create necessary directories.">
a33 2
        <mkdir dir="${dest.dir}"/>
        <mkdir dir="${javadoc.dir}"/>        
d40 2
a41 2
	<available classname="org.apache.batik.svggen.SVGGraphics2D" property="batik.present"/>
	<available classname="com.poet.jdo.PersistenceManagerFactories" property="poet.present"/>
d47 1
a47 1
  <target depends="clean, main, javadocs" name="all" description="Builds a complete package with all files from scratch.">
d53 1
a53 17
  <target depends="compile, copyResources, jar" name="main" description="Builds a package with all essential files.">
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the interfaces code                                        -->
  <!-- =================================================================== -->
  <target name="compileFramework" description="Compiles the framework package.">
    <javac debug="${javac.debug}" 
           deprecation="${javac.deprecation}" 
           destdir="${build.classes}" 
           optimize="${javac.optimize}" 
           srcdir="${src.dir}"
           fork="${javac.fork}">
      <include name="CH/ifa/draw/framework/**"/>
      <exclude name="${needs.batik}" unless="batik.present"/>
      <exclude name="${needs.poet}" unless="poet.present"/> 
    </javac>
d59 6
a64 7
  <target name="compile" depends="compileFramework">
    <javac debug="${javac.debug}" 
           deprecation="${javac.deprecation}" 
           destdir="${build.classes}" 
           optimize="${javac.optimize}" 
           srcdir="${src.dir}"
           fork="${javac.fork}">
a65 1
      <exclude name="CH/ifa/draw/framework/**"/>
d75 1
a75 1
    <available classname="org.jhotdraw.tools.versiondoclet.VersionDoclet" property="use.versiondoclet"/>
d82 6
a87 6
    <javadoc author="false" 
             classpath="${dest.dir}" 
             destdir="${javadoc.dir}" 
             packagenames="CH.*" 
             sourcepath="${src.dir}" 
             version="true">
d91 1
a91 1
  <target if="use.versiondoclet" name="versiondoclet_javadocs">
d93 6
a98 6
    <javadoc author="false" 
             classpath="${dest.dir}" 
             destdir="${javadoc.dir}" 
             packagenames="CH.*" 
             sourcepath="${src.dir}" 
             version="true">
d131 1
a131 1
  <target name="copyResources" description="Copies the resources into the build target directory.  Resources are non-code that needs to be packed into some jar file in their package structure, such as .gif, .properties, .html, etc.">
d134 2
a135 2
         <include name="**/*.gif"/>
         <include name="**/*.html"/>
d148 1
a148 5
  <!-- =================================================================== -->
  <!-- Cleans up generated stuff, then compiles                            -->
  <!-- =================================================================== -->
  <target depends="clean,compile" description="Cleans up generated stuff, then compiles" name="clean-compile">
  </target>
d152 6
a157 5
  <target depends="compile, copyResources" name="jar">
    <jar basedir="${build.classes}" 
         includes="CH/**" 
         jarfile="${dest.dir}/${build.jar}" 
         manifest="${mk.dir}/${manifest.name}">
d164 2
a165 4
  <target depends="main" name="javadraw" description="Execute the Javadraw example.">
     <java classname="CH.ifa.draw.samples.javadraw.JavaDrawApp" 
           classpath="${classpath};${dest.dir}/jhotdraw.jar" 
           fork="yes">
d169 2
a170 4
  <target depends="main" name="pert" description="Execute the Pert example.">
     <java classname="CH.ifa.draw.samples.pert.PertApplication" 
           classpath="${classpath};${dest.dir}/jhotdraw.jar" 
           fork="yes">
d174 2
a175 4
  <target depends="main" name="net" description="Execute the Net example.">
     <java classname="CH.ifa.draw.samples.net.NetApp" 
           classpath="${classpath};${dest.dir}/jhotdraw.jar" 
           fork="yes">
d179 2
a180 4
  <target depends="main" name="nothing" description="Execute NothingApp.">
     <java classname="CH.ifa.draw.samples.nothing.NothingApp" 
           classpath="${classpath};${dest.dir}/jhotdraw.jar" 
           fork="yes">
d184 2
a185 4
  <target depends="main" if="batik.present" name="svgdraw">
     <java classname="CH.ifa.draw.contrib.SVGDrawApp" 
           classpath="${classpath};${dest.dir}/jhotdraw.jar;${env.CLASSPATH}" 
           fork="yes"/>
d187 1
a187 1
</project>
@


1.11
log
@Add support for export to SVG.  See CH.ifa.draw.contrib.SVGStorageFormat.
Cannot presently re-import from SVG, as much semantic value is lost when
flattening output.

SVG support requires Apache Batik 1.5.
@
text
@d53 1
a53 1
  <target name="main" depends="init, compile, copyResources, jar">
d59 1
a59 1
  <target name="compile" depends="check-for-optional-packages">
@


1.10
log
@bug report 601054
@
text
@d23 2
a24 1
  <property name="javac.excludes" value="CH/ifa/draw/util/JDOStorageFormat.java"/>
d26 17
a42 1
  <property name="manifest.name" value="JHotdraw.mf"/>
d53 1
a53 1
  <target name="main" depends="compile, copyResources, jar">
d59 1
a59 1
  <target name="compile">
a63 2
		   includes="${javac.includes}"
		   excludes="${javac.excludes}"
d65 3
d182 4
@


1.9
log
@after variou merges... (before 5.4 release)
@
text
@d5 5
a26 4
  <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it -->
  <property file="${user.home}/.ant.properties" />

d152 1
a152 1
     <java classname="CH.ifa.draw.samples.pert.PertApp" fork="yes" classpath="${classpath}};../jhotdraw.jar">
d157 1
a157 1
     <java classname="CH.ifa.draw.samples.net.NetApp" fork="yes" classpath="${classpath}};../jhotdraw.jar">
d162 1
a162 1
     <java classname="CH.ifa.draw.samples.nothing.NothingApp" fork="yes" classpath="${classpath}};../jhotdraw.jar">
@


1.8
log
@no message
@
text
@d18 1
d47 1
@


1.7
log
@merge dnd (before 5.3)
@
text
@d12 1
a12 1
 
d15 1
a15 1
  
d20 2
a21 2
  
  <!-- Give user a chance to override without editing this file 
d30 1
a30 1
  
d36 1
a36 1
  
@


1.6
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d14 2
a15 1

d19 2
d79 1
a79 1
        <param name="-versionfile" value="JHotdraw.mf"/>
d135 1
a135 1
         manifest="jhotdraw.mf"
@


1.5
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d89 1
@


1.4
log
@before merge for version 5.3 (dnd, undo,...)
@
text
@d51 6
d63 2
a64 1
      packagenames="CH.*"/>
d67 34
d130 2
a131 3
         includes="
           CH/**
           "
d136 22
@


1.3
log
@no message
@
text
@d89 3
a91 2
         includes="CH/**"
         manifest="jhotdraw.mf"
a93 23
  </target>

  <!-- =================================================================== -->
  <!-- Run examples (and compile if necessary).                            -->
  <!-- =================================================================== -->
  <target name="javadraw" depends="main">
     <java classname="CH.ifa.draw.samples.javadraw.JavaDrawApp" fork="yes" classpath="${classpath};../jhotdraw.jar">
     </java>
  </target>

  <target name="pert" depends="main">
     <java classname="CH.ifa.draw.samples.pert.PertApp" fork="yes" classpath="${classpath}};../jhotdraw.jar">
     </java>
  </target>

  <target name="net" depends="main">
     <java classname="CH.ifa.draw.samples.net.NetApp" fork="yes" classpath="${classpath}};../jhotdraw.jar">
     </java>
  </target>

  <target name="nothing" depends="main">
     <java classname="CH.ifa.draw.samples.nothing.NothingApp" fork="yes" classpath="${classpath}};../jhotdraw.jar">
     </java>
@


1.2
log
@no message
@
text
@d89 2
a90 3
         includes="
           CH/**
           "
@


1.1
log
@Initial revision
@
text
@d96 23
@


1.1.1.1
log
@no message
@
text
@@
