head	1.6;
access;
symbols
	jhotdraw54b2-release:1.6
	reorg_6x_split:1.6
	MVC_PHASE1:1.6.0.10
	NEW_ATTRIBUTES:1.6.0.8
	DNOYEB1_ALPHA-2:1.6
	release_JHD54b1:1.6
	BUGFIX_670992:1.6.0.6
	DNOYEB1_ALPHA-1:1.6
	dnoyeb1:1.6.0.4
	repack:1.6.0.2
	Root_repack:1.6
	Before_FigureVisitor:1.6
	JHotDraw_5-3:1.6
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2001.10.24.20.44.33;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.20.32.01;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.25.13;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.29.13.42.14;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.6
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@/*
 * @@(#)Filler.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.util;

import javax.swing.JPanel;
import java.awt.*;

/**
 * A component that can be used to reserve white space in a layout.
 *
 * @@version <$CURRENT_VERSION$>
 */
public  class Filler
		extends JPanel {

	private int     fWidth;
	private int     fHeight;
	private Color   fBackground;


	public Filler(int width, int height) {
		this(width, height, null);
	}

	public Filler(int width, int height, Color background) {
		fWidth = width;
		fHeight = height;
		fBackground = background;
	}

	public Dimension getMinimumSize() {
		return new Dimension(fWidth, fHeight);
	}

	public Dimension getPreferredSize() {
		return getMinimumSize();
	}

	public Color getBackground() {
		if (fBackground != null) {
			return fBackground;
		}
		return super.getBackground();
	}
}

@


1.5
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d2 1
a2 1
 * @@(#)Filler.java 5.2
d4 6
d19 2
a21 2


d23 1
a23 1
        extends JPanel {
d25 29
a53 28
    private int     fWidth;
    private int     fHeight;
    private Color   fBackground;


    public Filler(int width, int height) {
        this(width, height, null);
    }

    public Filler(int width, int height, Color background) {
        fWidth = width;
        fHeight = height;
        fBackground = background;
    }

    public Dimension getMinimumSize() {
        return new Dimension(fWidth, fHeight);
    }

    public Dimension getPreferredSize() {
        return getMinimumSize();
    }

    public Color getBackground() {
        if (fBackground != null)
            return fBackground;
        return super.getBackground();
    }
@


1.4
log
@before merge for version 5.3 (dnd, undo,...)
@
text
@d8 1
a8 1
import javax.swing.*;
@


1.3
log
@- SelectionFigure is now an interface. The default implementation CH.ifa.draw.standard.StandardSelectionFigure
- A FigureSelectionListener interface has been introduced in CH.ifa.draw.framework. An DrawingEditor
  is now a FigureSelectionListener and the signature for all selectionChanged() methods has been
  changed to figureSelectionChanged().
- CH.ifa.draw.util.Command is now an interface. A AbstractCommand can be found in CH.ifa.draw.standard.
- All commands used to have a fView field. This has been moved to CH.ifa.draw.standard.AbstactCommand
- A CH.ifa.draw.standard.StandardDrawingView has now a paintComponents() method instead of a paint()
  and update() method. This allows the CH.ifa.draw.util.FloatingTextField to be a javax.swing.JTextField
  instead of a java.awt.TextField.
- CH.ifa.draw.figures.AbstractLineDecorator has been missing
- DrawApplet, DrawApplication and derived classes are now programmed towards the DrawingView interface
  instead of using StandardDrawingView. That leads to occasional cast when some additional StandardDrawingView
  functionality is required in some specialized cases. Applications that were derived from DrawApplication
  and used to override the createContents() methods should now return a DrawingView as well
@
text
@d8 1
a8 1
import javax.swing.JPanel;
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d8 1
a8 1
import javax.swing.*;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)Filler.java 5.1
d8 1
d17 1
a17 1
        extends Canvas {
@


1.1.1.1
log
@
Initial revision.
@
text
@@
