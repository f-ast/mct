head	1.5;
access;
symbols
	jhotdraw54b2-release:1.5
	reorg_6x_split:1.5
	MVC_PHASE1:1.5.0.10
	NEW_ATTRIBUTES:1.5.0.8
	DNOYEB1_ALPHA-2:1.5
	release_JHD54b1:1.5
	BUGFIX_670992:1.5.0.6
	DNOYEB1_ALPHA-1:1.5
	dnoyeb1:1.5.0.4
	repack:1.5.0.2
	Root_repack:1.5
	Before_FigureVisitor:1.5
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2002.08.04.23.01.49;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.30.20.40.10;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.33;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.5
log
@after variou merges... (before 5.4 release)
@
text
@/*
 * @@(#)Iconkit.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.util;

import javax.swing.*;
import java.awt.*;
import java.awt.image.ImageProducer;
import java.net.URL;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Hashtable;

/**
 * The Iconkit class supports the sharing of images. It maintains
 * a map of image names and their corresponding images.
 *
 * Iconkit also supports to load a collection of images in
 * synchronized way.
 * The resolution of a path name to an image is delegated to the DrawingEditor.
 * <hr>
 * <b>Design Patterns</b><P>
 * <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
 * <b><a href=../pattlets/sld031.htm>Singleton</a></b><br>
 * The Iconkit is a singleton.
 * <hr>
 *
 * @@version <$CURRENT_VERSION$>
 */
public class Iconkit {
	private Map                 fMap;
	private List                fRegisteredImages;
	private Component           fComponent;
	private final static int    ID = 123;
	private static Iconkit      fgIconkit = null;
	private static boolean      fgDebug = false;

	/**
	 * Constructs an Iconkit that uses the given editor to
	 * resolve image path names.
	 */
	public Iconkit(Component component) {
		fMap = new Hashtable(53);
		fRegisteredImages = CollectionsFactory.current().createList(10);
		fComponent = component;
		fgIconkit = this;
	}

	/**
	 * Gets the single instance
	 */
	public static Iconkit instance() {
		return fgIconkit;
	}

	/**
	 * Loads all registered images.
	 * @@see #registerImage
	 */
	public void loadRegisteredImages(Component component) {
		if (fRegisteredImages.size() == 0)
			return;

		MediaTracker tracker = new MediaTracker(component);

		// register images with MediaTracker
		Iterator iter = fRegisteredImages.iterator();
		while (iter.hasNext()) {
			String fileName = (String)iter.next();
			if (basicGetImage(fileName) == null) {
				tracker.addImage(loadImage(fileName), ID);
			}
		}
		fRegisteredImages.clear();

		// block until all images are loaded
		try {
			tracker.waitForAll();
		}
		catch (Exception e) {
			// ignore: do nothing
		}
	}

	/**
	 * Registers an image that is then loaded together with
	 * the other registered images by loadRegisteredImages.
	 * @@see #loadRegisteredImages
	 */
	public void registerImage(String fileName) {
		fRegisteredImages.add(fileName);
	}

	/**
	 * Registers and loads an image.
	 */
	public Image registerAndLoadImage(Component component, String fileName) {
		registerImage(fileName);
		loadRegisteredImages(component);
		return getImage(fileName);
	}

	/**
	 * Loads an image with the given name.
	 */
	public Image loadImage(String filename) {
		if (fMap.containsKey(filename)) {
			return (Image) fMap.get(filename);
		}
		Image image = loadImageResource(filename);
		if (image != null) {
			fMap.put(filename, image);
		}
		return image;
	}

	public Image loadImage(String filename, boolean waitForLoad) {
		Image image = loadImage(filename);
		if (image!=null && waitForLoad) {
			ImageIcon icon = new ImageIcon(image);
			image = icon.getImage(); //this forces the wait to happen
		}
		return image;
	}

	public Image loadImageResource(String resourcename) {
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		try {
			URL url = getClass().getResource(resourcename);
			if (fgDebug) {
				System.out.println(resourcename);
			}
			return toolkit.createImage((ImageProducer) url.getContent());
		}
		catch (Exception ex) {
			return null;
		}
	}

	/**
	 * Gets the image with the given name. If the image
	 * can't be found it tries it again after loading
	 * all the registered images.
	 */
	public Image getImage(String filename) {
		Image image = basicGetImage(filename);
		if (image != null) {
			return image;
		}
		// load registered images and try again
		loadRegisteredImages(fComponent);
		// try again
		return basicGetImage(filename);
	}

	private Image basicGetImage(String filename) {
		if (fMap.containsKey(filename)) {
			return (Image) fMap.get(filename);
		}
		return null;
	}
}
@


1.4
log
@no message
@
text
@d17 5
a21 1
import java.util.*;
d40 2
a41 2
	private Hashtable           fMap;
	private Vector              fRegisteredImages;
d53 1
a53 1
		fRegisteredImages = new Vector(10);
d76 3
a78 3
		Enumeration k = fRegisteredImages.elements();
		while (k.hasMoreElements()) {
			String fileName = (String) k.nextElement();
d83 1
a83 1
		fRegisteredImages.removeAllElements();
d89 3
a91 1
		catch(Exception e) {  }
d100 1
a100 1
		fRegisteredImages.addElement(fileName);
d126 1
a126 1
	public Image loadImage(String filename, boolean waitForLoad){
d128 1
a128 1
		if (image!=null && waitForLoad){
d138 1
a138 1
			java.net.URL url = getClass().getResource(resourcename);
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d14 1
d116 9
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)Iconkit.java 5.2
d4 6
d31 2
d35 120
a154 113
    private Hashtable           fMap;
    private Vector              fRegisteredImages;
    private Component           fComponent;
    private final static int    ID = 123;
    private static Iconkit      fgIconkit = null;
    private static boolean      fgDebug = false;

    /**
     * Constructs an Iconkit that uses the given editor to
     * resolve image path names.
     */
    public Iconkit(Component component) {
        fMap = new Hashtable(53);
        fRegisteredImages = new Vector(10);
        fComponent = component;
        fgIconkit = this;
    }

    /**
     * Gets the single instance
     */
    public static Iconkit instance() {
        return fgIconkit;
    }

    /**
     * Loads all registered images.
     * @@see #registerImage
     */
    public void loadRegisteredImages(Component component) {
        if (fRegisteredImages.size() == 0)
            return;

        MediaTracker tracker = new MediaTracker(component);

        // register images with MediaTracker
        Enumeration k = fRegisteredImages.elements();
        while (k.hasMoreElements()) {
            String fileName = (String) k.nextElement();
            if (basicGetImage(fileName) == null) {
                tracker.addImage(loadImage(fileName), ID);
            }
        }
        fRegisteredImages.removeAllElements();

        // block until all images are loaded
        try {
            tracker.waitForAll();
        } catch (Exception e) {  }
    }

    /**
     * Registers an image that is then loaded together with
     * the other registered images by loadRegisteredImages.
     * @@see #loadRegisteredImages
     */
    public void registerImage(String fileName) {
        fRegisteredImages.addElement(fileName);
    }

    /**
     * Registers and loads an image.
     */
    public Image registerAndLoadImage(Component component, String fileName) {
        registerImage(fileName);
        loadRegisteredImages(component);
        return getImage(fileName);
    }

    /**
     * Loads an image with the given name.
     */
    public Image loadImage(String filename) {
        if (fMap.containsKey(filename))
            return (Image) fMap.get(filename);
        Image image = loadImageResource(filename);
        if (image != null)
            fMap.put(filename, image);
        return image;
    }

    public Image loadImageResource(String resourcename) {
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        try {
            java.net.URL url = getClass().getResource(resourcename);
            if (fgDebug)
                System.out.println(resourcename);
            return toolkit.createImage((ImageProducer) url.getContent());
        } catch (Exception ex) {
            return null;
        }
    }

    /**
     * Gets the image with the given name. If the image
     * can't be found it tries it again after loading
     * all the registered images.
     */
    public Image getImage(String filename) {
        Image image = basicGetImage(filename);
        if (image != null)
            return image;
        // load registered images and try again
        loadRegisteredImages(fComponent);
        // try again
        return basicGetImage(filename);
    }

    private Image basicGetImage(String filename) {
        if (fMap.containsKey(filename))
            return (Image) fMap.get(filename);
        return null;
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)Iconkit.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
