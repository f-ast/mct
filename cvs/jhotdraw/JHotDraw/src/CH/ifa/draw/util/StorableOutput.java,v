head	1.6;
access;
symbols
	jhotdraw54b2-release:1.6
	reorg_6x_split:1.6
	MVC_PHASE1:1.6.0.4
	NEW_ATTRIBUTES:1.6.0.2
	DNOYEB1_ALPHA-2:1.5
	release_JHD54b1:1.6
	BUGFIX_670992:1.5.0.4
	DNOYEB1_ALPHA-1:1.5
	dnoyeb1:1.5.0.2
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2003.01.30.00.27.34;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.31.21.24.06;	author dnoyeb;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.04.23.01.49;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.33;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.6
log
@prepare for 5.4 release: various bug fixes
@
text
@/*
 * @@(#)StorableOutput.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.util;

import java.io.*;
import java.awt.Color;
import java.util.List;

/**
 * An output stream that can be used to flatten Storable objects.
 * StorableOutput preserves the object identity of the stored objects.
 *
 * @@see Storable
 * @@see StorableInput
 *
 * @@version <$CURRENT_VERSION$>
 */
public  class StorableOutput extends Object {

	private PrintWriter     fStream;
	private List            fMap;
	private int             fIndent;

	/**
	 * Initializes the StorableOutput with the given output stream.
	 */
	public StorableOutput(OutputStream stream) {
		fStream = new PrintWriter(stream);
		fMap = CollectionsFactory.current().createList();
		fIndent = 0;
	}

	/**
	 * Writes a storable object to the output stream.
	 */
	public void writeStorable(Storable storable) {
		if (storable == null) {
			fStream.print("NULL");
			space();
			return;
		}

		if (mapped(storable)) {
			writeRef(storable);
			return;
		}

		incrementIndent();
		startNewLine();
		map(storable);
		fStream.print(storable.getClass().getName());
		space();
		storable.write(this);
		space();
		decrementIndent();
	}

	/**
	 * Writes an int to the output stream.
	 */
	public void writeInt(int i) {
		fStream.print(i);
		space();
	}

	/**
	 * Writes a long to the output stream.
	 */
	public void writeLong(long l) {
		fStream.print(l);
		space();
	}

	public void writeColor(Color c) {
		writeInt(c.getRed());
		writeInt(c.getGreen());
		writeInt(c.getBlue());
	}

	/**
	 * Writes an int to the output stream.
	 */
	public void writeDouble(double d) {
		fStream.print(d);
		space();
	}

	/**
	 * Writes an int to the output stream.
	 */
	public void writeBoolean(boolean b) {
		if (b) {
			fStream.print(1);
		}
		else {
			fStream.print(0);
		}
		space();
	}

	/**
	 * Writes a string to the output stream. Special characters
	 * are quoted.
	 */
	public void writeString(String s) {
		fStream.print('"');
		for(int i = 0; i < s.length(); i++) {
			char c = s.charAt(i);
			switch(c) {
				case '\n': fStream.print('\\'); fStream.print('n'); break;
				case '"' : fStream.print('\\'); fStream.print('"'); break;
				case '\\': fStream.print('\\'); fStream.print('\\'); break;
				case '\t': fStream.print('\\'); fStream.print('\t'); break;
				default: fStream.print(c);
			}

		}
		fStream.print('"');
		space();
	}

	/**
	 * Closes a storable output stream.
	 */
	public void close() {
		fStream.close();
	}

	private boolean mapped(Storable storable) {
		return fMap.contains(storable);
	}

	private void map(Storable storable) {
		if (!fMap.contains(storable)) {
			fMap.add(storable);
		}
	}

	private void writeRef(Storable storable) {
		int ref = fMap.indexOf(storable);

		fStream.print("REF");
		space();
		fStream.print(ref);
		space();
	}

	private void incrementIndent() {
		fIndent += 4;
	}

	private void decrementIndent() {
		fIndent -= 4;
		if (fIndent < 0) fIndent = 0;
	}

	private void startNewLine() {
		fStream.println();
		for (int i=0; i<fIndent; i++) {
			space();
		}
	}

	private void space() {
		fStream.print(' ');
	}
}
@


1.5
log
@Add ability to read and write 'int.'
@
text
@d74 1
@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@d74 7
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@a13 1
import java.util.*;
d16 1
d30 1
a30 1
	private Vector          fMap;
d38 1
a38 1
		fMap = new Vector();
d136 1
a136 1
			fMap.addElement(storable);
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)StorableOutput.java 5.2
d4 6
d24 2
a26 2


d29 139
a167 136
    private PrintWriter     fStream;
    private Vector          fMap;
    private int             fIndent;

    /**
     * Initializes the StorableOutput with the given output stream.
     */
    public StorableOutput(OutputStream stream) {
        fStream = new PrintWriter(stream);
        fMap = new Vector();
        fIndent = 0;
    }

    /**
     * Writes a storable object to the output stream.
     */
    public void writeStorable(Storable storable) {
        if (storable == null) {
            fStream.print("NULL");
            space();
            return;
        }

        if (mapped(storable)) {
            writeRef(storable);
            return;
        }

        incrementIndent();
        startNewLine();
        map(storable);
        fStream.print(storable.getClass().getName());
        space();
        storable.write(this);
        space();
        decrementIndent();
    }

    /**
     * Writes an int to the output stream.
     */
    public void writeInt(int i) {
        fStream.print(i);
        space();
    }

    public void writeColor(Color c) {
        writeInt(c.getRed());
        writeInt(c.getGreen());
        writeInt(c.getBlue());
    }

    /**
     * Writes an int to the output stream.
     */
    public void writeDouble(double d) {
        fStream.print(d);
        space();
    }

    /**
     * Writes an int to the output stream.
     */
    public void writeBoolean(boolean b) {
        if (b)
            fStream.print(1);
        else
            fStream.print(0);
        space();
    }

    /**
     * Writes a string to the output stream. Special characters
     * are quoted.
     */
    public void writeString(String s) {
        fStream.print('"');
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch(c) {
                case '\n': fStream.print('\\'); fStream.print('n'); break;
                case '"' : fStream.print('\\'); fStream.print('"'); break;
                case '\\': fStream.print('\\'); fStream.print('\\'); break;
                case '\t': fStream.print('\\'); fStream.print('\t'); break;
                default: fStream.print(c);
            }

        }
        fStream.print('"');
        space();
    }

    /**
     * Closes a storable output stream.
     */
    public void close() {
        fStream.close();
    }

    private boolean mapped(Storable storable) {
        return fMap.contains(storable);
    }

    private void map(Storable storable) {
        if (!fMap.contains(storable))
            fMap.addElement(storable);
    }

    private void writeRef(Storable storable) {
        int ref = fMap.indexOf(storable);

        fStream.print("REF");
        space();
        fStream.print(ref);
        space();
    }

    private void incrementIndent() {
        fIndent += 4;
    }

    private void decrementIndent() {
        fIndent -= 4;
        if (fIndent < 0) fIndent = 0;
    }

    private void startNewLine() {
        fStream.println();
        for (int i=0; i<fIndent; i++)
            space();
    }

    private void space() {
        fStream.print(' ');
    }

@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)StorableOutput.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
