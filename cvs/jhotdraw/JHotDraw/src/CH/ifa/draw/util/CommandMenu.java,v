head	1.7;
access;
symbols
	jhotdraw54b2-release:1.7
	reorg_6x_split:1.7
	MVC_PHASE1:1.6.0.10
	NEW_ATTRIBUTES:1.6.0.8
	DNOYEB1_ALPHA-2:1.6.4.3
	release_JHD54b1:1.6
	BUGFIX_670992:1.6.0.6
	DNOYEB1_ALPHA-1:1.6.4.1
	dnoyeb1:1.6.0.4
	repack:1.6.0.2
	Root_repack:1.6
	Before_FigureVisitor:1.6
	JHotDraw_5-3:1.5
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2003.05.08.15.41.11;	author ricardo_padilha;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.04.23.01.49;	author mrfloppy;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2002.01.19.18.31.32;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.01;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;

1.6.4.1
date	2003.01.17.06.28.28;	author dnoyeb;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2003.01.26.15.58.49;	author dnoyeb;	state Exp;
branches;
next	1.6.4.3;

1.6.4.3
date	2003.01.29.04.41.13;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Refactoring of Cursor:
- java.awt.Cursor (class) has been sistematically replaced with CH.ifa.draw.contrib.framework.Cursor (interface)
- a new default implementation of Cursor (interface) has been added: CH.ifa.draw.contrib.standard.AWTCursor
@
text
@/*
 * @@(#)CommandMenu.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.util;

import CH.ifa.draw.framework.JHotDrawRuntimeException;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.*;

/**
 * A Command enabled menu. Selecting a menu item
 * executes the corresponding command.
 *
 * @@see Command
 *
 * @@version <$CURRENT_VERSION$>
 */
public  class CommandMenu extends JMenu implements ActionListener, CommandListener {

	private HashMap  hm;

	public CommandMenu(String name) {
		super(name);
		hm = new HashMap();
	}

	/**
	 * Adds a command to the menu. The item's label is
	 * the command's name.
	 */
	public synchronized void add(Command command) {
		addMenuItem(command, new JMenuItem(command.name()));
	}

	/**
	 * Adds a command with the given short cut to the menu. The item's label is
	 * the command's name.
	 */
	public synchronized void add(Command command, MenuShortcut shortcut) {
		addMenuItem(command, new JMenuItem(command.name(), shortcut.getKey()));
	}

	/**
	 * Adds a command with the given short cut to the menu. The item's label is
	 * the command's name.
	 */
	public synchronized void addCheckItem(Command command) {
		addMenuItem(command, new JCheckBoxMenuItem(command.name()));
	}

	protected void addMenuItem(Command command, JMenuItem m) {
		m.setName(command.name());
		m.addActionListener(this);
		add(m);
		command.addCommandListener(this);
		hm.put(m, command);
//		checkEnabled();
	}
	
	public synchronized void remove(Command command) {
		throw new JHotDrawRuntimeException("not implemented");
	}

	public synchronized void remove(MenuItem item) {
		throw new JHotDrawRuntimeException("not implemented");
	}

	/**
	 * Changes the enabling/disabling state of a named menu item.
	 */
	public synchronized void enable(String name, boolean state) {
		for (int i = 0; i < getItemCount(); i++) {
			JMenuItem item = getItem(i);
			if (name.equals(item.getText())) {
				item.setEnabled(state);
				return;
			}
		}
	}

	public synchronized void checkEnabled() {
		// ignore separators (a separator has a hyphen as its label)
		for (int i = 0; i < getMenuComponentCount(); i++) {
			Component c = getMenuComponent(i);
			Command cmd = (Command) hm.get(c);
			if (cmd != null) {
				c.setEnabled(cmd.isExecutable());
			}
		}
	}

	/**
	 * Executes the command.
	 */
	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();
		for (int i = 0; i < getItemCount(); i++) {
			JMenuItem item = getItem(i);
			// ignore separators (a separator has a hyphen as its label)
			if (source == item) {
				Command cmd = (Command) hm.get(item);
				if (cmd != null) {
				    cmd.execute();
				}
				break;
			}
		}
	}

	public void commandExecuted(EventObject commandEvent) {
//		checkEnabled();
	}
	
	public void commandExecutable(EventObject commandEvent) {
//		checkEnabled();
	}
	
	public void commandNotExecutable(EventObject commandEvent) {
//		checkEnabled();
	}
}


@


1.6
log
@after variou merges... (before 5.4 release)
@
text
@d85 1
a85 1
			if (name.equals(item.getLabel())) {
@


1.6.4.1
log
@removed deprecated getLabel
added getText
@
text
@d85 1
a85 1
			if (name.equals(item.getText())) {
@


1.6.4.2
log
@hack for [ 674973 ] Context Sensitive menu updates
add used instead of restore since its easier for the CompositeFigure to decide wether to add or
to restore.
@
text
@d96 3
a98 8
			if(c instanceof CommandMenu){
				((CommandMenu)c).checkEnabled();
			}
			else {
				Command cmd = (Command) hm.get(c);
				if (cmd != null) {
					c.setEnabled(cmd.isExecutable());
				}
@


1.6.4.3
log
@Using List over ArrayList and Map over HashMap/WeakMap etc.
@
text
@d31 1
a31 1
	private Map  hm;
d35 1
a35 1
		hm = CH.ifa.draw.util.CollectionsFactory.current().createMap();
@


1.5
log
@no message
@
text
@d31 1
a31 1
	private Vector   fCommands;
d35 1
a35 1
		fCommands = new Vector(10);
a65 1
		fCommands.addElement(command);
d67 1
d93 1
a93 1
		int j = 0;
d95 4
a98 4
			// ignore separators
			// a separator has a hyphen as its label
			if (getMenuComponent(i) instanceof JSeparator) {
				continue;
a99 3
			Command cmd = (Command)fCommands.elementAt(j);
			getMenuComponent(i).setEnabled(cmd.isExecutable());
			j++;
a106 1
		int j = 0;
d110 1
a110 5
			// ignore separators
			// a separator has a hyphen as its label
			if (getMenuComponent(i) instanceof JSeparator) {
				continue;
			}
d112 4
a115 2
				Command cmd = (Command)fCommands.elementAt(j);
				cmd.execute();
a117 1
			j++;
@


1.4
log
@merge dnd (before 5.3)
@
text
@d68 1
a68 1
		checkEnabled();
d94 1
a94 3
		// note: this does currently only work, if menu items that do not correspond
		// to a command are added at the end of the menu
		for (int i = 0; (i < getMenuComponentCount()) && (i < fCommands.size()); i++) {
d129 1
a129 1
		checkEnabled();
d133 1
a133 1
		checkEnabled();
d137 1
a137 1
		checkEnabled();
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d14 1
d17 2
d29 1
d31 1
a31 7
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public  class CommandMenu
        extends JMenu implements ActionListener {

    private Vector   fCommands;
d33 108
a140 96
    public CommandMenu(String name) {
        super(name);
        fCommands = new Vector(10);
    }

    /**
     * Adds a command to the menu. The item's label is
     * the command's name.
     */
    public synchronized void add(Command command) {
        JMenuItem m = new JMenuItem(command.name());
        m.addActionListener(this);
        add(m);
        fCommands.addElement(command);
    }

    /**
     * Adds a command with the given short cut to the menu. The item's label is
     * the command's name.
     */
    public synchronized void add(Command command, MenuShortcut shortcut) {
        JMenuItem m = new JMenuItem(command.name(), shortcut.getKey());
        m.setName(command.name());
        m.addActionListener(this);
        add(m);
        fCommands.addElement(command);
    }

    /**
     * Adds a command with the given short cut to the menu. The item's label is
     * the command's name.
     */
    public synchronized void addCheckItem(Command command) {
        JCheckBoxMenuItem m = new JCheckBoxMenuItem(command.name());
        m.setName(command.name());
        m.addActionListener(this);
        add(m);
        fCommands.addElement(command);
    }

    public synchronized void remove(Command command) {
        System.out.println("not implemented");
    }

    public synchronized void remove(MenuItem item) {
        System.out.println("not implemented");
    }

    /**
     * Changes the enabling/disabling state of a named menu item.
     */
    public synchronized void enable(String name, boolean state) {
        for (int i = 0; i < getItemCount(); i++) {
            JMenuItem item = getItem(i);
            if (name.equals(item.getLabel())) {
                item.setEnabled(state);
                return;
            }
        }
    }

    public synchronized void checkEnabled() {
        int j = 0;
        for (int i = 0; i < getMenuComponentCount(); i++) {
            // ignore separators
            // a separator has a hyphen as its label
            if (getMenuComponent(i) instanceof JSeparator) {
                continue;
            }
            Command cmd = (Command)fCommands.elementAt(j);
            getMenuComponent(i).setEnabled(cmd.isExecutable());
            j++;
        }
    }

    /**
     * Executes the command.
     */
    public void actionPerformed(ActionEvent e) {
        int j = 0;
        Object source = e.getSource();
        for (int i = 0; i < getItemCount(); i++) {
            JMenuItem item = getItem(i);
            // ignore separators
            // a separator has a hyphen as its label
            if (getMenuComponent(i) instanceof JSeparator) {
                continue;
            }
            if (source == item) {
                Command cmd = (Command)fCommands.elementAt(j);
                cmd.execute();
                break;
            }
            j++;
        }
    }
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)CommandMenu.java 5.2
d4 6
d23 2
d63 12
d101 1
a101 1
            if (getMenuComponent(i) instanceof JSeparator)
d103 1
d120 1
a120 1
            if (getMenuComponent(i) instanceof JSeparator)
d122 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)CommandMenu.java 5.1
d8 1
d23 1
a23 1
        extends Menu implements ActionListener {
d37 1
a37 1
        MenuItem m = new MenuItem(command.name());
d48 1
a48 1
        MenuItem m = new MenuItem(command.name(), shortcut);
d68 1
a68 1
            MenuItem item = getItem(i);
d78 1
a78 2
        for (int i = 0; i < getItemCount(); i++) {
            MenuItem item = getItem(i);
d81 1
a81 1
            if (item.getLabel().equals("-"))
d84 1
a84 1
            item.setEnabled(cmd.isExecutable());
d96 1
a96 1
            MenuItem item = getItem(i);
d99 1
a99 1
            if (item.getLabel().equals("-"))
@


1.1.1.1
log
@
Initial revision.
@
text
@@
