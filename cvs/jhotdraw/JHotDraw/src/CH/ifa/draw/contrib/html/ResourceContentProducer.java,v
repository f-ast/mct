head	1.3;
access;
symbols
	jhotdraw54b2-release:1.3
	reorg_6x_split:1.3
	MVC_PHASE1:1.3.0.2
	NEW_ATTRIBUTES:1.2.0.2
	DNOYEB1_ALPHA-2:1.1
	release_JHD54b1:1.1
	BUGFIX_670992:1.1.0.6
	DNOYEB1_ALPHA-1:1.1
	dnoyeb1:1.1.0.4
	repack:1.1.0.2
	Root_repack:1.1
	Before_FigureVisitor:1.1;
locks; strict;
comment	@# @;


1.3
date	2003.02.22.23.58.33;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.04.05.30.12;	author ricardo_padilha;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.20.19.57.58;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@no message
@
text
@/*
 * @@(#)ResourceContentProducer.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package CH.ifa.draw.contrib.html;

import java.io.IOException;

import java.io.InputStream;
import java.io.Serializable;
import CH.ifa.draw.util.StorableInput;
import CH.ifa.draw.util.StorableOutput;

/**
 * ResourceContentProducer produces contents from resource in the application's
 * CLASSPATH.<br>
 * It takes a resource name and loads the resource as a String.
 *
 * It can either be specific if set for a specific resource, or generic, retrieving
 * any resource passed to the getContents method.
 *
 * @@author  Eduardo Francos - InContext
 * @@created 1 mai 2002
 * @@version <$CURRENT_VERSION$>
 */
public class ResourceContentProducer extends AbstractContentProducer
		 implements Serializable {

	/** Description of the Field */
	private String fResourceName;

	/**
	 * Constructor for the ResourceContentProducer object
	 */
	public ResourceContentProducer() { }

	/**
	 * Constructor for the ResourceContentProducer object
	 *
	 * @@param resourceName  Description of the Parameter
	 */
	public ResourceContentProducer(String resourceName) {
		setResourceName(resourceName);
	}

	/**
	 * Gets the content attribute of the ResourceContentProducer object
	 *
	 * @@param context       Description of the Parameter
	 * @@param ctxAttrName   Description of the Parameter
	 * @@param ctxAttrValue  Description of the Parameter
	 * @@return              The content value
	 */
	public Object getContent(ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
		try {
			// if we have our own resource then use it
			// otherwise use the one supplied
			String resourceName = (getResourceName() != null) ? getResourceName() : (String)ctxAttrValue;

			InputStream reader = this.getClass().getResourceAsStream(resourceName);
			int available = reader.available();
			byte contents[] = new byte[available];
			reader.read(contents, 0, available);
			reader.close();
			return new String(contents);
		}
		catch (Exception ex) {
			ex.printStackTrace();
			return ex.toString();
		}
	}

	/**
	 * Writes the storable
	 *
	 * @@param dw  the storable output
	 */
	public void write(StorableOutput dw) {
		super.write(dw);
		dw.writeString(getResourceName());
	}

	/**
	 * Writes the storable
	 *
	 * @@param dr               the storable input
	 * @@exception IOException  thrown by called methods
	 */
	public void read(StorableInput dr) throws IOException {
		super.read(dr);
		setResourceName (dr.readString());
	}

	public String getResourceName() {
		return fResourceName;
	}

	protected void setResourceName(String newResourceName) {
		fResourceName = newResourceName;
	}
}
@


1.2
log
@Removed unused imports and local variables.
@
text
@d2 1
a2 1
 *  @@(#)TextAreaFigure.java
d4 6
a9 6
 *  Project:		JHotdraw - a GUI framework for technical drawings
 *  http://www.jhotdraw.org
 *  http://jhotdraw.sourceforge.net
 *  Copyright:	© by the original author(s) and all contributors
 *  License:		Lesser GNU Public License (LGPL)
 *  http://www.opensource.org/licenses/lgpl-license.html
d28 3
a30 3
 * @@author    Eduardo Francos - InContext
 * @@created   1 mai 2002
 * @@version   1.0
a31 1

d34 1
d36 1
a36 1
	protected String fResourceName = null;
d38 3
a40 2

	/**Constructor for the ResourceContentProducer object */
a42 1

d44 1
a44 1
	 *Constructor for the ResourceContentProducer object
d49 1
a49 1
		fResourceName = resourceName;
a51 1

d64 1
a64 1
			String resourceName = (fResourceName != null) ? fResourceName : (String)ctxAttrValue;
a78 1

d86 1
a86 1
		dw.writeString(fResourceName);
a88 1

d95 11
a105 4
	public void read(StorableInput dr)
		throws IOException {
			super.read(dr);
		fResourceName = (String)dr.readString();
@


1.1
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@a16 1
import CH.ifa.draw.util.Storable;
@

