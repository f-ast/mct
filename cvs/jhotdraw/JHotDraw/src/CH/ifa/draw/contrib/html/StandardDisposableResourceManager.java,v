head	1.5;
access;
symbols
	jhotdraw54b2-release:1.5
	reorg_6x_split:1.5
	MVC_PHASE1:1.4.0.2
	NEW_ATTRIBUTES:1.3.0.2
	DNOYEB1_ALPHA-2:1.2.4.1
	release_JHD54b1:1.2
	BUGFIX_670992:1.2.0.6
	DNOYEB1_ALPHA-1:1.2
	dnoyeb1:1.2.0.4
	repack:1.2.0.2
	Root_repack:1.2
	Before_FigureVisitor:1.2;
locks; strict;
comment	@# @;


1.5
date	2003.11.09.21.18.47;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.22.23.58.33;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.04.05.30.12;	author ricardo_padilha;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.04.22.41.25;	author mrfloppy;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2002.05.20.19.57.58;	author mrfloppy;	state Exp;
branches;
next	;

1.2.4.1
date	2003.01.29.04.41.09;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.5
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@/*
 * @@(#)StandardDisposableResourceManager.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package CH.ifa.draw.contrib.html;

import java.util.Iterator;

import java.util.WeakHashMap;

/**
 * StandardDisposableResourceManager implements disposable resource management
 * using a client supplied strategy.<br>
 *
 * @@author  Eduardo Francos - InContext
 * @@created 2 mai 2002
 * @@version <$CURRENT_VERSION$>
 */
public class StandardDisposableResourceManager implements DisposableResourceManager {

	/** The registered resources */
	private WeakHashMap resources;

	/** The disposing strategy */
	private ResourceDisposabilityStrategy strategy;

	/**
	 *Constructor for the StandardDisposableResourceManager object
	 *
	 * @@param strategy  Description of the Parameter
	 */
	public StandardDisposableResourceManager(ResourceDisposabilityStrategy newStrategy) {
		resources = new WeakHashMap();
		setStrategy(newStrategy);
		getStrategy().setManager(this);
	}

	/**
	 * Registers a resource to be automatically disposed of
	 *
	 * @@param resource  the resource
	 */
	public synchronized void registerResource(DisposableResourceHolder resource) {
		resources.put(resource, resource);
	}

	/**
	 * Unregisters a resource so it is not automatically GCed.<br>
	 * If does nothing if the resource was not registered with this manager
	 *
	 * @@param resource  the resource
	 */
	public synchronized void unregisterResource(DisposableResourceHolder resource) {
		resources.remove(resource);
	}

	/**
	 * Gets an iterator on the managed resources
	 *
	 * @@return   The iterator
	 */
	public Iterator getResources() {
		return resources.values().iterator();
	}

	/**
	 * Description of the Method
	 *
	 * @@param resource  the resource
	 * @@return          True if the resource is registered with this manager
	 */
	public synchronized boolean managesResource(DisposableResourceHolder resource) {
		return resources.containsValue(resource);
	}

	/**
	 * Gets the strategy attribute of the StandardDisposableResourceManager object
	 *
	 * @@return   The strategy value
	 */
	public ResourceDisposabilityStrategy getStrategy() {
		return strategy;
	}

	/**
	 * Sets the strategy attribute of the StandardDisposableResourceManager object
	 *
	 * @@param newStrategy  The new strategy value
	 */
	public void setStrategy(ResourceDisposabilityStrategy newStrategy) {
		strategy = newStrategy;
	}

	/**
	 * Activates the strategy which starts disposing of resources as fitted
	 *
	 * @@exception ResourceManagerNotSetException  Description of the Exception
	 */
	public void startDisposing() throws ResourceManagerNotSetException {
		getStrategy().startDisposing();
	}

	/**
	 * Deactivates the strategy that stops automatic disposal of resource.<br>
	 * The millis parameters specifies in milliseconds the time to wait for
	 * the disposal to stop. After this time the method returns, but the
	 * deactivation request remain active.
	 *
	 * @@param millis  time to wait for disposal to stop
	 */
	public void stopDisposing(long millis) {
		getStrategy().stopDisposing(millis);
	}
}
@


1.4
log
@no message
@
text
@d38 1
a38 1
	public StandardDisposableResourceManager(ResourceDisposabilityStrategy strategy) {
d40 1
a40 1
		setStrategy(strategy);
@


1.3
log
@Removed unused imports and local variables.
@
text
@d2 1
a2 1
 *  @@(#)TextAreaFigure.java
d4 6
a9 6
 *  Project:		JHotdraw - a GUI framework for technical drawings
 *  http://www.jhotdraw.org
 *  http://jhotdraw.sourceforge.net
 *  Copyright:	© by the original author(s) and all contributors
 *  License:		Lesser GNU Public License (LGPL)
 *  http://www.opensource.org/licenses/lgpl-license.html
d21 3
a23 3
 * @@author    Eduardo Francos - InContext
 * @@created   2 mai 2002
 * @@version   1.0
d25 1
a26 1
public class StandardDisposableResourceManager implements DisposableResourceManager {
d28 1
a28 1
	protected WeakHashMap resources;
d31 1
a31 2
	protected ResourceDisposabilityStrategy strategy;

d40 2
a41 2
		this.strategy = strategy;
		strategy.setManager(this);
a43 1

a52 1

a62 1

a71 1

a81 1

a90 1

a99 1

d105 2
a106 3
	public void startDisposing()
		throws ResourceManagerNotSetException {
		strategy.startDisposing();
a108 1

d118 1
a118 1
		strategy.stopDisposing(millis);
@


1.2
log
@after variou merges... (before 5.4 release)
@
text
@a12 1
import java.lang.ref.WeakReference;
@


1.2.4.1
log
@Using List over ArrayList and Map over HashMap/WeakMap etc.
@
text
@d17 1
a17 1
import java.util.Map;
d29 1
a29 1
	protected Map resources;
@


1.1
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@a15 1
import java.util.Vector;
@

