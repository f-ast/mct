head	1.4;
access;
symbols
	jhotdraw54b2-release:1.4
	reorg_6x_split:1.4
	MVC_PHASE1:1.4.0.10
	NEW_ATTRIBUTES:1.4.0.8
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.1.1.1
	JHotDraw_5-1_initial:1.1.1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.08.04.22.39.17;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@/*
 * @@(#)PolygonHandle.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.contrib;

import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.*;
import CH.ifa.draw.figures.PolyLineHandle;
import CH.ifa.draw.util.Undoable;
import java.awt.Point;

/**
 * A handle for a node on the polygon.
 * Based on PolyLineHandle
 *
 * @@author Doug Lea  (dl at gee, Fri Feb 28 07:47:13 1997)
 * @@version <$CURRENT_VERSION$>
 */
public class PolygonHandle extends AbstractHandle {
	
	private Locator fLocator;
	private int fIndex;
	
	/**
	* Constructs a polygon handle.
	* @@param owner the owning polygon figure.
	* @@param l the locator
	* @@param index the index of the node associated with this handle.
	*/
	public PolygonHandle(PolygonFigure owner, Locator l, int index) {
		super(owner);
		fLocator = l;
		fIndex = index;
	}

	public void invokeStart(int  x, int  y, DrawingView view) {
		setUndoActivity(createUndoActivity(view, fIndex));
		getUndoActivity().setAffectedFigures(new SingleFigureEnumerator(owner()));
		((PolygonHandle.UndoActivity)getUndoActivity()).setOldPoint(new Point(x, y));
	}

	public void invokeStep(int x, int y, int anchorX, int anchorY, DrawingView view) {
		int index = ((PolyLineHandle.UndoActivity)getUndoActivity()).getPointIndex();
		myOwner().setPointAt(new Point(x, y), index);
	}
	
	public void invokeEnd(int x, int y, int anchorX, int anchorY, DrawingView view) {
		myOwner().smoothPoints();
		if ((x == anchorX) && (y == anchorY)) {
 			setUndoActivity(null);
		}
	}
	
	public Point locate() {
		return fLocator.locate(owner());
	}
	
	private PolygonFigure myOwner() {
		return (PolygonFigure)owner();
	}

	/**
	 * Factory method for undo activity. To be overriden by subclasses.
	 */
	protected Undoable createUndoActivity(DrawingView newView, int newPointIndex) {
		return new PolygonHandle.UndoActivity(newView, newPointIndex);
	}
	
	public static class UndoActivity extends PolyLineHandle.UndoActivity {
		
		public UndoActivity(DrawingView newView, int newPointIndex) {
			super(newView, newPointIndex);
		}
		
		protected boolean movePointToOldLocation() {
			FigureEnumeration fe = getAffectedFigures();
			if (!fe.hasNextFigure()) {
				return false;
			}

			PolygonFigure figure = (PolygonFigure)fe.nextFigure();
			Point backupPoint = figure.pointAt(getPointIndex());
			figure.setPointAt(getOldPoint(), getPointIndex());
			figure.smoothPoints();
			setOldPoint(backupPoint);

			return true;
		}
	}
}
@


1.3
log
@merge dnd (before 5.3)
@
text
@a16 1
import CH.ifa.draw.util.Geom;
a17 1
import CH.ifa.draw.util.UndoableAdapter;
d35 2
a36 2
	* @@l the locator
	* @@index the index of the node associated with this handle.
d85 1
a85 1
			if (!fe.hasMoreElements()) {
@


1.2
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d46 2
a47 2
    public void invokeStart(int  x, int  y, DrawingView view) {
		setUndoActivity(createUndoActivity(fIndex));
d53 2
a54 2
		int fIndex = ((PolyLineHandle.UndoActivity)getUndoActivity()).getPointIndex();
		myOwner().setPointAt(new Point(x, y), fIndex);
a58 4
//Point old = ((PolyLineHandle.UndoActivity)getUndoActivity()).getOldPoint();
//int pointIndex = ((PolyLineHandle.UndoActivity)getUndoActivity()).getPointIndex();
//		Point currentPoint = myOwner().pointAt(pointIndex);
//System.out.println("invokeEnd: " + x + " .. " + y + " =? " + anchorX + " .. " + anchorY + " =? " + old.x + " .. " + old.y + " =? " + currentPoint.x + " .. " + currentPoint.y);
d75 2
a76 2
	protected Undoable createUndoActivity(int newPointIndex) {
		return new PolygonHandle.UndoActivity(newPointIndex);
d81 2
a82 2
		public UndoActivity(int newPointIndex) {
			super(newPointIndex);
@


1.1
log
@Initial revision
@
text
@d2 8
a9 2
 * Fri Feb 28 07:47:13 1997  Doug Lea  (dl at gee)
 * Based on PolyLineHandle
a13 3
import java.awt.*;
import java.util.*;
import java.io.IOException;
a14 1
import CH.ifa.draw.util.*;
d16 5
a20 1

d24 4
d30 74
a103 31

  private int fIndex;
  private Locator fLocator;

  /**
   * Constructs a polygon handle.
   * @@param owner the owning polygon figure.
   * @@l the locator
   * @@index the index of the node associated with this handle.
   */
  public PolygonHandle(PolygonFigure owner, Locator l, int index) {
    super(owner);
    fLocator = l;
    fIndex = index;
  }

  public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    myOwner().setPointAt(new Point(x, y), fIndex);
  }

  public void invokeEnd  (int x, int y, int anchorX, int anchorY, DrawingView view) {
    myOwner().smoothPoints();
  }

  public Point locate() {
    return fLocator.locate(owner());
  }

  private PolygonFigure myOwner() {
    return (PolygonFigure)owner();
  }
a104 2


@


1.1.1.1
log
@
Initial revision.
@
text
@@
