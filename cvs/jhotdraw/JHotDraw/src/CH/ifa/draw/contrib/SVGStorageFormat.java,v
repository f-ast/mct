head	1.4;
access;
symbols
	jhotdraw54b2-release:1.4
	reorg_6x_split:1.4
	MVC_PHASE1:1.4.0.4
	NEW_ATTRIBUTES:1.4.0.2
	DNOYEB1_ALPHA-2:1.2
	release_JHD54b1:1.3
	BUGFIX_670992:1.2.0.6
	DNOYEB1_ALPHA-1:1.2
	dnoyeb1:1.2.0.4
	repack:1.2.0.2
	Root_repack:1.2;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2003.02.07.17.49.18;	author ricardo_padilha;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.30.00.27.33;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.08.19.12.16;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.08.17.06.29;	author mtnygard;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Updated StorageFormat interface. Now formats are added based on their ability to load/save.
@
text
@/*
 * @@(#)SVGStorageFormat.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.contrib;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.SVGGraphics2D;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;

import CH.ifa.draw.framework.Drawing;
import CH.ifa.draw.util.StandardStorageFormat;


/**
 * The SVGStorageFormat can save drawings in SVG 1.0.  At this time, it cannot load
 * SVG drawings.
 *
 * TODO: Refactor this and the other storage formats.  There is too much duplication.
 * 
 * @@version <$CURRENT_VERSION$>
 * @@author mtnygard
 */
public class SVGStorageFormat extends StandardStorageFormat {
	
	/**
	 * Return the file extension recognized by the FileFilter for this
	 * StandardStorageFormat. 
	 *
	 * @@return the file extension
	 */
	protected String createFileExtension() {
		return "svg";
	}

	/**
	 * Factory method to create a file description for the file type when displaying the
	 * associated FileFilter.
	 *
	 * @@return the file description
	 */
	public String createFileDescription() {
		return "Scalable Vector Graphics (svg)";
	}


	/**
	 * @@see CH.ifa.draw.util.StorageFormat#isRestoreFormat()
	 */
	public boolean isRestoreFormat() {
		return false;
	}

	/**
	 * @@see CH.ifa.draw.util.StorageFormat#isStoreFormat()
	 */
	public boolean isStoreFormat() {
		return true;
	}

  /**
	 * Store a Drawing as SVG under a given name.
	 *
	 * @@param fileName file name of the Drawing under which it should be stored
	 * @@param saveDrawing drawing to be saved
	 * @@return file name with correct file extension
   * @@see CH.ifa.draw.util.StorageFormat#store(java.lang.String, CH.ifa.draw.framework.Drawing)
   */
  public String store(String fileName, Drawing saveDrawing) throws IOException {
		// Get a DOMImplementation
		DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();

		// Create an instance of org.w3c.dom.Document
		Document document = domImpl.createDocument(null, "svg", null);
	
		// Create an instance of the SVG Generator
		SVGGraphics2D svgGenerator = new SVGGraphics2D(document);
	
		// Ask the test to render into the SVG Graphics2D implementation
		saveDrawing.draw(svgGenerator);
	
		// Finally, stream out SVG to the standard output using UTF-8
		// character to byte encoding
		fileName = adjustFileName(fileName);
		FileOutputStream fos = new FileOutputStream(fileName);
		Writer out = new OutputStreamWriter(fos, "UTF-8");
		
		
		svgGenerator.stream(out, true);
		return fileName;
  }

  /**
   * @@see CH.ifa.draw.util.StorageFormat#restore(java.lang.String)
   */
  public Drawing restore(String fileName) throws IOException {
    throw new IOException("Not implemented");
  }
}
@


1.3
log
@prepare for 5.4 release: various bug fixes
@
text
@d60 14
@


1.2
log
@Refactor to use StandardStorageFormat as a superclass.
@
text
@d1 11
@


1.1
log
@Add support for export to SVG.  See CH.ifa.draw.contrib.SVGStorageFormat.
Cannot presently re-import from SVG, as much semantic value is lost when
flattening output.

SVG support requires Apache Batik 1.5.
@
text
@a2 1
import java.io.File;
a7 2
import javax.swing.filechooser.FileFilter;

d14 1
a14 1
import CH.ifa.draw.util.StorageFormat;
d26 1
a26 6
public class SVGStorageFormat implements StorageFormat {
	/**
	 * FileFilter for a javax.swing.JFileChooser which recognizes files with the
	 * extension "svg"
	 */
	private FileFilter filter;
d29 4
a32 1
	 * File extension
d34 3
a36 1
	private String extension = "svg";
d39 4
a42 1
	 * Description of the file type when displaying the FileFilter
d44 3
a46 2
	private static String description = "SVG Drawing (SVG)";
	
a47 26
  /**
   * Return the filter that JFileChooser will use to identify SVG files.
   * 
   * @@return the filter that JFileChooser will use to identify SVG files
   * @@see CH.ifa.draw.util.StorageFormat#getFileFilter()
   * 
   * TODO: Refactor together with similar code from StandardStorageFormat
   */
  public FileFilter getFileFilter() {
  	if(filter == null) {
  		filter = createFileFilter();
  	}
    return filter;
  }

	protected FileFilter createFileFilter() {
		return new FileFilter() {
      public boolean accept(File f) {
        return f.getName().endsWith(extension);
      }
      public String getDescription() {
        return description;
      }
			
		};
	}
a86 36


	/**
	 * Adjust a file name to have the correct file extension.
	 *
	 * @@param testFileName file name to be tested for a correct file extension
	 * @@return testFileName + file extension if necessary
	 * 
	 * TODO: Refactor this with the same code from StandardStorageFormat.
	 */	
	protected String adjustFileName(String testFileName) {
		if (!hasCorrectFileExtension(testFileName)) {
			return testFileName + "." + getExtension();
		}
		else {
			return testFileName;
		}
	}

	/**
	 * Test whether the file name has the correct file extension
	 *
	 * @@return true, if the file has the correct extension, false otherwise
	 */
	protected boolean hasCorrectFileExtension(String testFileName) {
		return testFileName.endsWith("." + getExtension());
	}
	
  /**
   * Returns the extension.
   * @@return String
   */
  public String getExtension() {
    return extension;
  }

@

