head	1.4;
access;
symbols
	jhotdraw54b2-release:1.4
	reorg_6x_split:1.4
	MVC_PHASE1:1.4.0.10
	NEW_ATTRIBUTES:1.4.0.8
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.1.1.1
	JHotDraw_5-1_initial:1.1.1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.08.04.22.39.17;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@/*
 * @@(#)TriangleRotationHandle.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.contrib;

import java.awt.*;
import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.*;
import CH.ifa.draw.standard.*;


/**
 * A Handle to rotate a TriangleFigure
 * Based on RadiusHandle
 *
 * @@author Doug Lea  (dl at gee, Sun Mar 2 19:15:28 1997)
 * @@version <$CURRENT_VERSION$>
 */
class TriangleRotationHandle extends AbstractHandle {

	private Point fOrigin;

	public TriangleRotationHandle(TriangleFigure owner) {
		super(owner);
	}

	/**
	 * @@param x the x position where the interaction started
	 * @@param y the y position where the interaction started
	 * @@param view the handles container
	 */
	public void invokeStart(int x, int  y, DrawingView view) {
		fOrigin = getOrigin();
		TriangleRotationHandle.UndoActivity activity =
			(TriangleRotationHandle.UndoActivity)createUndoActivity(view);
		setUndoActivity(activity);
		activity.setAffectedFigures(new SingleFigureEnumerator(owner()));
		double rotation = ((TriangleFigure)(owner())).getRotationAngle();
		activity.setRotationAngle(rotation);
	}

	/**
	 * Tracks a step of the interaction.
	 * @@param x the current x position
	 * @@param y the current y position
	 * @@param anchorX the x position where the interaction started
	 * @@param anchorY the y position where the interaction started
	 */
	public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
		Point fCenter = owner().center();
		double angle = Math.atan2(fOrigin.y + y - anchorY - fCenter.y,
  								  fOrigin.x + x - anchorX - fCenter.x);
		((TriangleFigure)(owner())).rotate(angle);
	}

	/**
	 * Tracks the end of the interaction.
	 * @@param x the current x position
	 * @@param y the current y position
	 * @@param anchorX the x position where the interaction started
	 * @@param anchorY the y position where the interaction started
	 */
	public void invokeEnd(int x, int y, int anchorX, int anchorY, DrawingView view) {
		fOrigin = null;
	}

	public Point locate() {
		return getOrigin();
	}

	Point getOrigin() {
		// find a nice place to put handle
		// almost same code as PolygonScaleHandle
		Polygon p = ((TriangleFigure)(owner())).getPolygon();
		Point first = new Point(p.xpoints[0], p.ypoints[0]);
		Point ctr = owner().center();
		double len = Geom.length(first.x, first.y, ctr.x, ctr.y);
		if (len == 0) { // best we can do?
			return new Point(first.x - HANDLESIZE/2, first.y + HANDLESIZE/2);
		}

		double u = HANDLESIZE / len;
		if (u > 1.0) { // best we can do?
			return new Point((first.x * 3 + ctr.x)/4, (first.y * 3 + ctr.y)/4);
		}
		else {
			return new Point((int)(first.x * (1.0 - u) + ctr.x * u),
							(int)(first.y * (1.0 - u) + ctr.y * u));
		}
	}

	public void draw(Graphics g) {
		Rectangle r = displayBox();

		g.setColor(Color.yellow);
		g.fillOval(r.x, r.y, r.width, r.height);

		g.setColor(Color.black);
		g.drawOval(r.x, r.y, r.width, r.height);
	}

	/**
	 * Factory method for undo activity. To be overriden by subclasses.
	 */
	protected Undoable createUndoActivity(DrawingView newView) {
		return new TriangleRotationHandle.UndoActivity(newView);
	}

	public static class UndoActivity extends UndoableAdapter {
		private double myRotationAngle;

		public UndoActivity(DrawingView newView) {
			super(newView);
			setUndoable(true);
			setRedoable(true);
		}

		public boolean undo() {
			if (!super.undo()) {
				return false;
			}

			return resetRotationAngle();
		}

		public boolean redo() {
			// do not call execute directly as the selection might has changed
			if (!isRedoable()) {
				return false;
			}

			return resetRotationAngle();
		}

		protected boolean resetRotationAngle() {
			FigureEnumeration fe = getAffectedFigures();
			if (!fe.hasNextFigure()) {
				return false;
			}
			TriangleFigure figure = (TriangleFigure)fe.nextFigure();
			double backupAngle = figure.getRotationAngle();
			figure.willChange();
			figure.rotate(getRotationAngle());
			figure.changed();
			setRotationAngle(backupAngle);
			return true;
		}

		protected void setRotationAngle(double newRotationAngle) {
			myRotationAngle = newRotationAngle;
		}

		public double getRotationAngle() {
			return myRotationAngle;
		}
	}
}
@


1.3
log
@merge dnd (before 5.3)
@
text
@a14 2
import java.util.*;
import java.io.IOException;
d42 1
a42 1
		TriangleRotationHandle.UndoActivity activity = 
d116 1
a116 1
	
d119 1
a119 1
		
d125 1
a125 1
		
d133 1
a133 1
	
d145 1
a145 1
			if (!fe.hasMoreElements()) {
d156 1
a156 1
		
d160 1
a160 1
		
@


1.2
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d45 1
a45 1
			(TriangleRotationHandle.UndoActivity)createUndoActivity();
d115 2
a116 2
	protected Undoable createUndoActivity() {
		return new TriangleRotationHandle.UndoActivity();
d122 2
a123 2
		public UndoActivity() {
			super(null);
@


1.1
log
@Initial revision
@
text
@d2 8
a9 2
 * Sun Mar  2 19:15:28 1997  Doug Lea  (dl at gee)
 * Based on RadiusHandle
d24 4
d31 1
a31 2
  private Point fOrigin = null;
  private Point fCenter = null;
d33 134
a166 50
  public TriangleRotationHandle(TriangleFigure owner) {
    super(owner);
 }

  public void invokeStart(int  x, int  y, Drawing drawing) {
    fCenter = owner().center();
    fOrigin = getOrigin();
  }

  public void invokeStep (int dx, int dy, Drawing drawing) {
    double angle = Math.atan2(fOrigin.y + dy - fCenter.y,
                              fOrigin.x + dx - fCenter.x);
    ((TriangleFigure)(owner())).rotate(angle);
  }

  public void invokeEnd  (int dx, int dy, Drawing drawing) {
    fOrigin = null;
    fCenter = null;
  }

  public Point locate() {
    return getOrigin();
  }

  Point getOrigin() { // find a nice place to put handle
    // almost same code as PolygonScaleHandle
    Polygon p = ((TriangleFigure)(owner())).polygon();
    Point first = new Point(p.xpoints[0], p.ypoints[0]);
    Point ctr = owner().center();
    double len = Geom.length(first.x, first.y, ctr.x, ctr.y);
    if (len == 0) // best we can do?
      return new Point(first.x - HANDLESIZE/2, first.y + HANDLESIZE/2);

    double u = HANDLESIZE / len;
    if (u > 1.0) // best we can do?
      return new Point((first.x * 3 + ctr.x)/4, (first.y * 3 + ctr.y)/4);
    else
      return new Point((int)(first.x * (1.0 - u) + ctr.x * u),
                       (int)(first.y * (1.0 - u) + ctr.y * u));
  }

  public void draw(Graphics g) {
    Rectangle r = displayBox();

    g.setColor(Color.yellow);
    g.fillOval(r.x, r.y, r.width, r.height);

    g.setColor(Color.black);
    g.drawOval(r.x, r.y, r.width, r.height);
  }
a167 1

@


1.1.1.1
log
@
Initial revision.
@
text
@@
