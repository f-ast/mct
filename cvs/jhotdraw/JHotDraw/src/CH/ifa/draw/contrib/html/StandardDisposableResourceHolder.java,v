head	1.3;
access;
symbols
	jhotdraw54b2-release:1.3
	reorg_6x_split:1.3
	MVC_PHASE1:1.2.0.2
	NEW_ATTRIBUTES:1.1.0.8
	DNOYEB1_ALPHA-2:1.1
	release_JHD54b1:1.1
	BUGFIX_670992:1.1.0.6
	DNOYEB1_ALPHA-1:1.1
	dnoyeb1:1.1.0.4
	repack:1.1.0.2
	Root_repack:1.1
	Before_FigureVisitor:1.1;
locks; strict;
comment	@# @;


1.3
date	2003.11.09.21.18.47;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.02.22.23.58.33;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.20.19.57.58;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@/*
 * @@(#)StandardDisposableResourceHolder.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package CH.ifa.draw.contrib.html;

import java.io.Serializable;

/**
 * StandardDisposableResourceHolder is a standard implementation of the
 * DisposableResourceHolder interface
 *
 * @@author  Eduardo Francos - InContext
 * @@created 2 mai 2002
 * @@version <$CURRENT_VERSION$>
 */
public class StandardDisposableResourceHolder implements DisposableResourceHolder, Serializable {

	/** The holded resource object */
	private Object resource = null;

	/** The dispose delay, default to 60 seconds */
	private long disposeDelay = 60000;

	/**
	 * The last time the resource was accessed as returned by
	 * <code>System.currentTimeMillis()</code>
	 */
	private long lastTimeAccessed = 0;

	/** True if the resource is locked */
	private boolean isLocked = false;

	/**
	 * Constructor for the StandardDisposableResourceHolder object
	 */
	public StandardDisposableResourceHolder() { }

	/**
	 * Constructor for the StandardDisposableResourceHolder object
	 *
	 * @@param resource  Description of the Parameter
	 */
	public StandardDisposableResourceHolder(Object newResource) {
		resource = newResource;
		resetDelay();
	}

	/**
	 * Makes a clone of this
	 *
	 * @@return   the clone
	 */
	public Object clone() {
		StandardDisposableResourceHolder clone = new StandardDisposableResourceHolder();
		clone.setDisposableDelay(this.getDisposableDelay());
		return clone;
	}

	/**
	 * Gets the resource attribute of the StandardDisposableResourceHolder object
	 *
	 * @@return                          The resource value
	 * @@exception NullPointerException  Description of the Exception
	 */
	public Object getResource() throws NullPointerException {
		if (resource != null) {
			resetDelay();
			return resource;
		}
		throw new NullPointerException();
	}

	/**
	 * Sets the resource attribute of the StandardDisposableResourceHolder object
	 *
	 * @@param resource  The new resource value
	 */
	public void setResource(Object newResource) {
		resource = newResource;
		resetDelay();
	}

	/**
	 * Sets the disposableDelay attribute of the StandardDisposableResourceHolder object
	 *
	 * @@param millis  The new disposableDelay value
	 */
	public void setDisposableDelay(long millis) {
		disposeDelay = millis;
	}

	/**
	 * Gets the disposableDelay attribute of the StandardDisposableResourceHolder object
	 *
	 * @@return   The disposableDelay value
	 */
	public long getDisposableDelay() {
		return disposeDelay;
	}

	/** Disposes of the resource */
	public void dispose() {
		resource = null;
	}

	/**
	 * Gets the available attribute of the StandardDisposableResourceHolder object
	 *
	 * @@return   The available value
	 */
	public boolean isAvailable() {
		return (resource != null);
	}

	/**
	 * Locks the resource so it cannot be automatically disposed of until unlock
	 * is called.<br>
	 * Explicit disposing by calling dispose() is still possible though.
	 */
	public void lock() {
		isLocked = true;
	}

	/**
	 * Unlocks the resource so it can be automatically disposed of again.<br>
	 * Explicit disposing by calling dispose() is still possible though.
	 */
	public void unlock() {
		resetDelay();
		isLocked = false;
	}

	/**
	 * True if the resource is locked
	 *
	 * @@return   The locked status
	 */
	public boolean isLocked() {
		return isLocked;
	}

	/**
	 * Gets the lastTimeAccessed attribute of the DisposableResourceHolder object
	 *
	 * @@return   The lastTimeAccessed value
	 */
	public long getLastTimeAccessed() {
		return lastTimeAccessed;
	}

	/** Resets the disposing delay so as to restart the time counter */
	public void resetDelay() {
		lastTimeAccessed = System.currentTimeMillis();
	}
}
@


1.2
log
@no message
@
text
@d50 2
a51 2
	public StandardDisposableResourceHolder(Object resource) {
		this.resource = resource;
d85 2
a86 2
	public void setResource(Object resource) {
		this.resource = resource;
@


1.1
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@d2 1
a2 1
 *  @@(#)TextAreaFigure.java
d4 6
a9 6
 *  Project:		JHotdraw - a GUI framework for technical drawings
 *  http://www.jhotdraw.org
 *  http://jhotdraw.sourceforge.net
 *  Copyright:	© by the original author(s) and all contributors
 *  License:		Lesser GNU Public License (LGPL)
 *  http://www.opensource.org/licenses/lgpl-license.html
d19 3
a21 3
 * @@author    Eduardo Francos - InContext
 * @@created   2 mai 2002
 * @@version   1.0
a22 1

d26 1
a26 1
	protected Object resource = null;
d29 1
a29 1
	protected long disposeDelay = 60000;
d35 1
a35 1
	protected long lastTimeAccessed = 0;
d38 1
a38 1
	protected boolean isLocked = false;
d40 3
a42 2

	/**Constructor for the StandardDisposableResourceHolder object */
a44 1

a54 1

a65 1

d72 1
a72 2
	public Object getResource()
		throws NullPointerException {
a79 1

a89 1

a98 1

a107 1

a112 1

a121 1

a130 1

a139 1

a148 1

a156 1

@

