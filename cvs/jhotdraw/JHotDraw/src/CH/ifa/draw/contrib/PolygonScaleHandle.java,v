head	1.4;
access;
symbols
	jhotdraw54b2-release:1.4
	reorg_6x_split:1.4
	MVC_PHASE1:1.4.0.10
	NEW_ATTRIBUTES:1.4.0.8
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.1.1.1
	JHotDraw_5-1_initial:1.1.1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.08.04.22.39.17;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.21.15.18;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@/*
 * @@(#)PolygonScaleHandle.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.contrib;

import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.*;
import CH.ifa.draw.util.Geom;
import CH.ifa.draw.util.Undoable;
import CH.ifa.draw.util.UndoableAdapter;
import java.awt.*;

/**
 * A Handle to scale and rotate a PolygonFigure
 * Based on RadiusHandle
 *
 * @@author Doug Lea  (dl at gee, Sat Mar 1 09:06:09 1997)
 * @@version <$CURRENT_VERSION$>
 */
class PolygonScaleHandle extends AbstractHandle {
	
	private Point fCurrent;
	
	public PolygonScaleHandle(PolygonFigure owner) {
		super(owner);
	}
	
	/**
	 * @@param x the x position where the interaction started
	 * @@param y the y position where the interaction started
	 * @@param view the handles container
	 */
	public void invokeStart(int x, int  y, DrawingView view) {
		fCurrent = new Point(x, y);
		PolygonScaleHandle.UndoActivity activity = (PolygonScaleHandle.UndoActivity)createUndoActivity(view);
		setUndoActivity(activity);
		activity.setAffectedFigures(new SingleFigureEnumerator(owner()));
		activity.setPolygon(((PolygonFigure)(owner())).getPolygon());
	}

	/**
	 * Tracks a step of the interaction.
	 * @@param x the current x position
	 * @@param y the current y position
	 * @@param anchorX the x position where the interaction started
	 * @@param anchorY the y position where the interaction started
	 */
	public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
		fCurrent = new Point(x, y);
		Polygon polygon = ((PolygonScaleHandle.UndoActivity)getUndoActivity()).getPolygon();
		((PolygonFigure)(owner())).scaleRotate(new Point(anchorX, anchorY), polygon, fCurrent);
	}

	/**
	 * Tracks the end of the interaction.
	 * @@param x the current x position
	 * @@param y the current y position
	 * @@param anchorX the x position where the interaction started
	 * @@param anchorY the y position where the interaction started
	 */
	public void invokeEnd(int x, int y, int anchorX, int anchorY, DrawingView view) {
		((PolygonFigure)(owner())).smoothPoints();
		if ((fCurrent.x == anchorX) && (fCurrent.y == anchorY)) {
			// there is nothing to undo
			setUndoActivity(null);
		}
		fCurrent = null;
	}
	
	public Point locate() {
		if (fCurrent == null) {
			return getOrigin();
		}
		else {
			return fCurrent;
		}
	}
	
	Point getOrigin() {
		// find a nice place to put handle
		// Need to pick a place that will not overlap with point handle
		// and is internal to polygon
	
		// Try for one HANDLESIZE step away from outermost toward center
	
		Point outer = ((PolygonFigure)(owner())).outermostPoint();
		Point ctr = ((PolygonFigure)(owner())).center();
		double len = Geom.length(outer.x, outer.y, ctr.x, ctr.y);
		if (len == 0) { // best we can do?
			return new Point(outer.x - HANDLESIZE/2, outer.y + HANDLESIZE/2);
		}
	
		double u = HANDLESIZE / len;
		if (u > 1.0) { // best we can do?
			return new Point((outer.x * 3 + ctr.x)/4, (outer.y * 3 + ctr.y)/4);
		}
		else {
			return new Point((int)(outer.x * (1.0 - u) + ctr.x * u),
			(int)(outer.y * (1.0 - u) + ctr.y * u));
		}
	}
	
	public void draw(Graphics g) {
		Rectangle r = displayBox();
	
		g.setColor(Color.yellow);
		g.fillOval(r.x, r.y, r.width, r.height);
	
		g.setColor(Color.black);
		g.drawOval(r.x, r.y, r.width, r.height);
	
		/* for debugging ...
		Point ctr = ((PolygonFigure)(owner())).center();
		g.setColor(Color.blue);
		g.fillOval(ctr.x, ctr.y, r.width, r.height);
		
		g.setColor(Color.black);
		g.drawOval(ctr.x, ctr.y, r.width, r.height);
		
		*/
	}

	/**
	 * Factory method for undo activity. To be overriden by subclasses.
	 */
	protected Undoable createUndoActivity(DrawingView newView) {
		return new PolygonScaleHandle.UndoActivity(newView);
	}
	
	public static class UndoActivity extends UndoableAdapter {
		private Polygon myPolygon;
		
		public UndoActivity(DrawingView newView) {
			super(newView);
			setUndoable(true);
			setRedoable(true);
		}
		
		public boolean undo() {
			if (!super.undo()) {
				return false;
			}

			return resetPolygon();
		}
	
		public boolean redo() {
			// do not call execute directly as the selection might has changed
			if (!isRedoable()) {
				return false;
			}

			return resetPolygon();
		}

		protected boolean resetPolygon() {
			FigureEnumeration fe = getAffectedFigures();
			if (!fe.hasNextFigure()) {
				return false;
			}
			PolygonFigure figure = (PolygonFigure)fe.nextFigure();
			Polygon backupPolygon = figure.getPolygon();
			figure.willChange();
			figure.setInternalPolygon(getPolygon());
			figure.changed();
			setPolygon(backupPolygon);
			return true;
		}
		
		protected void setPolygon(Polygon newPolygon) {
			myPolygon = newPolygon;
		}
		
		public Polygon getPolygon() {
			return myPolygon;
		}
	}
}
@


1.3
log
@merge dnd (before 5.3)
@
text
@d166 1
a166 1
			if (!fe.hasMoreElements()) {
@


1.2
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d43 1
a43 1
		PolygonScaleHandle.UndoActivity activity = (PolygonScaleHandle.UndoActivity)createUndoActivity();
d134 2
a135 2
	protected Undoable createUndoActivity() {
		return new PolygonScaleHandle.UndoActivity();
d141 2
a142 2
		public UndoActivity() {
			super(null);
@


1.1
log
@Initial revision
@
text
@d2 8
a9 2
 * Sat Mar  1 09:06:09 1997  Doug Lea  (dl at gee)
 * Based on RadiusHandle
a13 3
import java.awt.*;
import java.util.*;
import java.io.IOException;
a14 1
import CH.ifa.draw.util.*;
d16 4
a19 1

d23 4
d29 157
a185 73

  private Point fOrigin = null;
  private Point fCurrent = null;
  private Polygon fOrigPoly = null;

  public PolygonScaleHandle(PolygonFigure owner) {
    super(owner);
 }

  public void invokeStart(int  x, int  y, Drawing drawing) {
    fOrigPoly = ((PolygonFigure)(owner())).getPolygon();
    fOrigin = getOrigin();
    fCurrent = new Point(fOrigin.x, fOrigin.y);
  }

  public void invokeStep (int dx, int dy, Drawing drawing) {
    fCurrent = new Point(fOrigin.x + dx, fOrigin.y + dy);
    ((PolygonFigure)(owner())).scaleRotate(fOrigin, fOrigPoly, fCurrent);
  }

  public void invokeEnd  (int dx, int dy, Drawing drawing) {
    fOrigPoly = null;
    fOrigin = null;
    fCurrent = null;
  }

  public Point locate() {
    if (fCurrent != null)
      return fCurrent;
    else
      return getOrigin();
  }

  Point getOrigin() { // find a nice place to put handle
    // Need to pick a place that will not overlap with point handle
    // and is internal to polygon

    // Try for one HANDLESIZE step away from outermost toward center

    Point outer = ((PolygonFigure)(owner())).outermostPoint();
    Point ctr = ((PolygonFigure)(owner())).center();
    double len = Geom.length(outer.x, outer.y, ctr.x, ctr.y);
    if (len == 0) // best we can do?
      return new Point(outer.x - HANDLESIZE/2, outer.y + HANDLESIZE/2);

    double u = HANDLESIZE / len;
    if (u > 1.0) // best we can do?
      return new Point((outer.x * 3 + ctr.x)/4, (outer.y * 3 + ctr.y)/4);
    else
      return new Point((int)(outer.x * (1.0 - u) + ctr.x * u),
                       (int)(outer.y * (1.0 - u) + ctr.y * u));
  }

  public void draw(Graphics g) {
    Rectangle r = displayBox();

    g.setColor(Color.yellow);
    g.fillOval(r.x, r.y, r.width, r.height);

    g.setColor(Color.black);
    g.drawOval(r.x, r.y, r.width, r.height);

    /*
     * for debugging ...
    Point ctr = ((PolygonFigure)(owner())).center();
    g.setColor(Color.blue);
    g.fillOval(ctr.x, ctr.y, r.width, r.height);

    g.setColor(Color.black);
    g.drawOval(ctr.x, ctr.y, r.width, r.height);

    */
  }
a186 1

@


1.1.1.1
log
@
Initial revision.
@
text
@@
