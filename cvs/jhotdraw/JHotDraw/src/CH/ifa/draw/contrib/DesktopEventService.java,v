head	1.7;
access;
symbols
	jhotdraw54b2-release:1.7
	reorg_6x_split:1.7
	MVC_PHASE1:1.7.0.2
	NEW_ATTRIBUTES:1.6.0.2
	DNOYEB1_ALPHA-2:1.1.4.2
	release_JHD54b1:1.5
	BUGFIX_670992:1.4.0.2
	DNOYEB1_ALPHA-1:1.1.4.1
	dnoyeb1:1.1.0.4
	repack:1.1.0.2
	Root_repack:1.1
	Before_FigureVisitor:1.1;
locks; strict;
comment	@# @;


1.7
date	2003.02.22.23.58.41;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.12.00.33.39;	author dnoyeb;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.30.00.27.33;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.12.20.21.15;	author dnoyeb;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.02.19.05.47;	author dnoyeb;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.02.17.38.23;	author dnoyeb;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.04.22.39.17;	author mrfloppy;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.03.15.57.41;	author dnoyeb;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.01.29.04.41.13;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.7
log
@no message
@
text
@/*
 * @@(#)DesktopEventService.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.contrib;

import CH.ifa.draw.framework.DrawingView;
import CH.ifa.draw.standard.NullDrawingView;
import CH.ifa.draw.util.CollectionsFactory;

import java.util.List;
import java.util.ListIterator;
import java.awt.event.ContainerAdapter;
import java.awt.event.ContainerListener;
import java.awt.event.ContainerEvent;
import java.awt.*;

/**
 * @@author  Wolfram Kaiser <mrfloppy@@users.sourceforge.net>
 * @@version <$CURRENT_VERSION$>
 */
public class DesktopEventService {

	/**
	 * Current usage of this List is not thread safe, nor should it need to be.
	 * If it ever does we can synchronize on the List itself to provide safety.
	 */
	private java.util.List listeners;
	private DrawingView mySelectedView;
	private Container myContainer;
	private Desktop myDesktop;

	public DesktopEventService(Desktop newDesktop, Container newContainer) {
		listeners = CollectionsFactory.current().createList();
		setDesktop(newDesktop);
		setContainer(newContainer);
		getContainer().addContainerListener(createComponentListener());
	}

	private void setDesktop(Desktop newDesktop) {
		myDesktop = newDesktop;
	}

	protected Desktop getDesktop() {
		return myDesktop;
	}

	private void setContainer(Container newContainer) {
		myContainer = newContainer;
	}

	protected Container getContainer() {
		return myContainer;
	}

	public void addComponent(Component newComponent) {
		getContainer().add(newComponent);
	}

	public void removeComponent(DrawingView dv) {
		Component[] comps = getContainer().getComponents();
		for (int x = 0; x < comps.length; x++) {
			if (dv == Helper.getDrawingView(comps[x])) {
				getContainer().remove(comps[x]);
			    break;
			}
		}
	}

	public void removeAllComponents() {
		getContainer().removeAll();
	}

	public void addDesktopListener(DesktopListener dpl) {
		listeners.add(dpl);
	}

	public void removeDesktopListener(DesktopListener dpl) {
		listeners.remove(dpl);
	}

	protected void fireDrawingViewAddedEvent(final DrawingView dv) {
		ListIterator li= listeners.listIterator(listeners.size());
		DesktopEvent dpe = createDesktopEvent(getActiveDrawingView(), dv);
		while (li.hasPrevious()) {
			DesktopListener dpl = (DesktopListener)li.previous();
			dpl.drawingViewAdded(dpe);
		}
	}

	protected void fireDrawingViewRemovedEvent(final DrawingView dv) {
		ListIterator li= listeners.listIterator(listeners.size());
		DesktopEvent dpe = createDesktopEvent(getActiveDrawingView(), dv);
		while (li.hasPrevious()) {
			DesktopListener dpl = (DesktopListener)li.previous();
			dpl.drawingViewRemoved(dpe);
		}
	}

	/**
	 * This method is only called if the selected drawingView has actually changed
	 */
	protected void fireDrawingViewSelectedEvent(final DrawingView oldView, final DrawingView newView) {
		ListIterator li= listeners.listIterator(listeners.size());
		DesktopEvent dpe = createDesktopEvent(oldView, newView);
		while (li.hasPrevious()) {
			DesktopListener dpl = (DesktopListener)li.previous();
			dpl.drawingViewSelected(dpe);
		}
	}

	/**
	 * @@param oldView previous active drawing view (may be null because not all events require this information)
	 */
	protected DesktopEvent createDesktopEvent(DrawingView oldView, DrawingView newView) {
		return new DesktopEvent(getDesktop(), newView, oldView);
	}

	public DrawingView[] getDrawingViews(Component[] comps) {
		List al = CollectionsFactory.current().createList();
		for (int x = 0; x < comps.length; x++) {
			DrawingView dv = Helper.getDrawingView(comps[x]);
			if (dv != null) {
				al.add(dv);
			}
		}
		DrawingView[] dvs = new DrawingView[al.size()];
		al.toArray(dvs);
		return dvs;
	}

	public DrawingView getActiveDrawingView() {
		return mySelectedView;
	}

	protected void setActiveDrawingView(DrawingView newActiveDrawingView) {
		mySelectedView = newActiveDrawingView;
	}
	
	protected ContainerListener createComponentListener() {
		return new ContainerAdapter() {
			/**
			 * If the dv is null assert
			 * @@todo does adding a component always make it the selected view?
			 *  Yes so far because this is only being used on single view Desktops.
			 *  If it is to work on multipleView desktops, the we need to think further.
			 */
            public void componentAdded(ContainerEvent e) {
				DrawingView dv = Helper.getDrawingView((java.awt.Container)e.getChild());
				DrawingView oldView = getActiveDrawingView();
				if (dv != null) {
					fireDrawingViewAddedEvent(dv);
					setActiveDrawingView(dv);
					fireDrawingViewSelectedEvent(oldView, getActiveDrawingView());
				}
            }

		    /**
			 * If dv is null assert
             * dv will only be null if something thats not a drawingView was
			 * added to the desktop.  it would be simpler if we forbade that.
			 */
            public void componentRemoved(ContainerEvent e) {
				DrawingView dv = Helper.getDrawingView((java.awt.Container)e.getChild());
				if (dv != null) {
					DrawingView oldView = getActiveDrawingView();
					setActiveDrawingView(NullDrawingView.getManagedDrawingView(oldView.editor()));
					fireDrawingViewSelectedEvent(oldView, getActiveDrawingView());
					fireDrawingViewRemovedEvent(dv);
				}
            }
        };
	}
}
@


1.6
log
@Remove EventListenerList in favor of simple List where possible.
EventListenerList duplicates the whole list for each additional add and is
quite heavy for instances where its not required since these lists are not
modified from events they fire.
@
text
@d19 1
d69 1
a69 1
		for (int x=0; x < comps.length; x++) {
d90 3
a92 6
		java.util.ListIterator li= listeners.listIterator(listeners.size());
		DesktopEvent dpe = null;
		while(li.hasPrevious()){
			if (dpe == null) {
				dpe = createDesktopEvent(getActiveDrawingView(), dv);
			}
d99 3
a101 6
		java.util.ListIterator li= listeners.listIterator(listeners.size());
		DesktopEvent dpe = null;
		while(li.hasPrevious()){
			if (dpe == null) {
				dpe = createDesktopEvent(getActiveDrawingView(), dv);
			}
d111 3
a113 6
		java.util.ListIterator li= listeners.listIterator(listeners.size());
		DesktopEvent dpe = null;
		while(li.hasPrevious()){
			if (dpe == null) {
				dpe = createDesktopEvent(oldView, newView);
			}
@


1.5
log
@prepare for 5.4 release: various bug fixes
@
text
@a17 1
import javax.swing.event.EventListenerList;
d30 5
a34 1
	private final EventListenerList listenerList = new EventListenerList();
d40 1
d81 1
a81 1
		listenerList.add(DesktopListener.class, dpl);
d85 1
a85 1
	    listenerList.remove(DesktopListener.class, dpl);
d89 5
a93 7
		final Object[] listeners = listenerList.getListenerList();
		DesktopListener dpl;
		DesktopEvent dpe = createDesktopEvent(getActiveDrawingView(), dv);
		for (int i = listeners.length-2; i>=0 ; i-=2)	{
			if (listeners[i] == DesktopListener.class) {
				dpl = (DesktopListener)listeners[i+1];
				dpl.drawingViewAdded(dpe);
d95 2
d101 5
a105 7
		final Object[] listeners = listenerList.getListenerList();
		DesktopListener dpl;
		DesktopEvent dpe = createDesktopEvent(getActiveDrawingView(), dv);
		for (int i = listeners.length-2; i>=0 ; i-=2)	{
			if (listeners[i] == DesktopListener.class) {
				dpl = (DesktopListener)listeners[i+1];
				dpl.drawingViewRemoved(dpe);
d107 2
d116 5
a120 7
		final Object[] listeners = listenerList.getListenerList();
		DesktopListener dpl;
		DesktopEvent dpe = createDesktopEvent(oldView, newView);
		for (int i = listeners.length-2; i>=0 ; i-=2)	{
			if (listeners[i] == DesktopListener.class) {
				dpl = (DesktopListener)listeners[i+1];
				dpl.drawingViewSelected(dpe);
d122 2
d160 2
a161 1
			 *
d175 2
a176 3
			 * if dv is not != getActiveDrawingView() assert
             * @@todo  why should we assert? dont see a problem with removing a view thats not a selected view
             * This definitely needs fixing!!! dnoyeb 1/1/2003
@


1.4
log
@Clean up head to be what it was before i mistakenly committed my changes to it.
My changes should have been committed to a branch, and let mrfloppy merge to the trunk.
This will happen from now on.
@
text
@d15 2
d19 1
a19 2
import java.util.ArrayList;
import java.awt.*;
d23 1
d26 1
a26 1
 * @@author  Wolfram Kaiser <mrfloppy@@sourceforge.net>
d32 1
a32 1
	private DrawingView selectedView;
d87 1
a87 1
		DesktopEvent dpe = null;
a89 3
				if (dpe == null ) {
					dpe = createDesktopEvent(dv);
				}
d99 1
a99 1
		DesktopEvent dpe = null;
a101 3
				if (dpe == null ) {
					dpe = createDesktopEvent(dv);
				}
d111 1
a111 1
	protected void fireDrawingViewSelectedEvent(final DrawingView dv) {
d114 1
a114 1
		DesktopEvent dpe = null;
a116 3
				if (dpe == null ) {
					dpe = createDesktopEvent(dv);
				}
d123 5
a127 2
	protected DesktopEvent createDesktopEvent(DrawingView dv) {
		return new DesktopEvent(getDesktop(), dv);
d131 1
a131 1
		ArrayList al = new ArrayList();
d144 1
a144 1
		return selectedView;
d147 4
d155 2
d160 1
d163 2
a164 2
					selectedView = dv;
					fireDrawingViewSelectedEvent(selectedView);
d170 3
a172 1
			 * if dv is not != selectedView assert
d177 3
a179 2
					selectedView = null;
					fireDrawingViewSelectedEvent(selectedView);
@


1.3
log
@bug 541524, 546628,547188
Improved Desktop functionality

This is an extra commit because NetBeans left off my comments
@
text
@d115 1
a115 1
	protected void fireDrawingViewSelectedEvent(final DrawingView oldView, final DrawingView newView) {
d122 1
a122 1
					dpe = createDesktopEvent(newView);
d125 1
a125 1
				dpl.drawingViewSelected(oldView,dpe);
a150 4
        /**
         *  I think this is the correct listener for drawingView add/remove events
         *  but I think it is the wrong listener for Selected/deselected events.
         */
a154 2
                         * does adding a component always make it the selected view?
                         *
a157 1
                                DrawingView oldView = getActiveDrawingView();
d161 1
a161 1
					fireDrawingViewSelectedEvent(oldView, getActiveDrawingView());
d165 4
a168 6
            /**
             * If dv is null assert
             * if dv is not != selectedView assert
             * why should we assert? dont see a problem with removing a view thats not a selected view
             * This definitely needs fixing!!! dnoyeb 1/1/2003
             */
d172 4
a175 5
                                    DrawingView oldView = getActiveDrawingView();
                                    selectedView = null; //mrfloppy investigate NullDrawingView here
                                    fireDrawingViewSelectedEvent(oldView, getActiveDrawingView());
                                    fireDrawingViewRemovedEvent(dv);
                                }
@


1.2
log
@
Changes for better Desktop handling.
@
text
@@


1.1
log
@after variou merges... (before 5.4 release)
@
text
@d115 1
a115 1
	protected void fireDrawingViewSelectedEvent(final DrawingView dv) {
d122 1
a122 1
					dpe = createDesktopEvent(dv);
d125 1
a125 1
				dpl.drawingViewSelected(dpe);
d151 4
d159 2
d164 1
d168 1
a168 1
					fireDrawingViewSelectedEvent(selectedView);
d172 6
a177 4
		    /**
			 * If dv is null assert
			 * if dv is not != selectedView assert
			 */
d181 5
a185 4
					selectedView = null;
					fireDrawingViewSelectedEvent(selectedView);
					fireDrawingViewRemovedEvent(dv);
				}
@


1.1.4.1
log
@Changes for better Desktop handling.
DrawingView Always has a Drawing.
bug 541524, 546628,547188
@
text
@d115 1
a115 1
	protected void fireDrawingViewSelectedEvent(final DrawingView oldView, final DrawingView newView) {
d122 1
a122 1
					dpe = createDesktopEvent(newView);
d125 1
a125 1
				dpl.drawingViewSelected(oldView,dpe);
a150 4
        /**
         *  I think this is the correct listener for drawingView add/remove events
         *  but I think it is the wrong listener for Selected/deselected events.
         */
a154 2
                         * does adding a component always make it the selected view?
                         *
a157 1
                                DrawingView oldView = getActiveDrawingView();
d161 1
a161 1
					fireDrawingViewSelectedEvent(oldView, getActiveDrawingView());
d165 4
a168 6
            /**
             * If dv is null assert
             * if dv is not != selectedView assert
             * why should we assert? dont see a problem with removing a view thats not a selected view
             * This definitely needs fixing!!! dnoyeb 1/1/2003
             */
d172 4
a175 5
                                    DrawingView oldView = getActiveDrawingView();
                                    selectedView = null; //mrfloppy investigate NullDrawingView here
                                    fireDrawingViewSelectedEvent(oldView, getActiveDrawingView());
                                    fireDrawingViewRemovedEvent(dv);
                                }
@


1.1.4.2
log
@Using List over ArrayList and Map over HashMap/WeakMap etc.
@
text
@d17 1
d135 1
a135 1
		java.util.List al = CH.ifa.draw.util.CollectionsFactory.current().createList(comps.length);
@


