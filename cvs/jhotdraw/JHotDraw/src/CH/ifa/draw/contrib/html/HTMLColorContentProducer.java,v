head	1.4;
access;
symbols
	jhotdraw54b2-release:1.4
	reorg_6x_split:1.4
	MVC_PHASE1:1.4.0.2
	NEW_ATTRIBUTES:1.3.0.2
	DNOYEB1_ALPHA-2:1.2
	release_JHD54b1:1.2
	BUGFIX_670992:1.2.0.6
	DNOYEB1_ALPHA-1:1.2
	dnoyeb1:1.2.0.4
	repack:1.2.0.2
	Root_repack:1.2
	Before_FigureVisitor:1.2;
locks; strict;
comment	@# @;


1.4
date	2003.02.22.23.58.33;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.04.05.21.24;	author ricardo_padilha;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.07.12.27.28;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.20.19.57.58;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@no message
@
text
@/*
 * @@(#)HTMLColorContentProducer.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package CH.ifa.draw.contrib.html;

import java.awt.Color;
import java.io.Serializable;

/**
 * HTMLColorContentProducer produces RGB color HTML encoded strings.<br>
 * Ex:
 * <code>Color.blue ==> #0000FF</code><br>
 * <code>Color.red  ==> #FF00FF</code><br>
 * It can either be specific if set for a specific color, or generic, encoding
 * any color passed to the getContents method.
 *
 * @@author  Eduardo Francos - InContext
 * @@created 4 mai 2002
 * @@version <$CURRENT_VERSION$>
 */
public class HTMLColorContentProducer extends ColorContentProducer implements Serializable {

	/**
	 * Constructor for the HTMLColorContentProducer object
	 */
	public HTMLColorContentProducer() { }

	/**
	 * Produces the contents for the color
	 *
	 * @@param context       the calling client context
	 * @@param ctxAttrName   the color attribute name (FrameColor, TextColor, etc)
	 * @@param ctxAttrValue  the color
	 * @@return              The HTML encoded RBG value for the color
	 */
	public Object getContent(ContentProducerContext context, String ctxAttrName, Object ctxAttrValue) {
		// if we have our own color then use it
		// otherwise use the one supplied
		Color color = (getColor() != null) ? getColor() : (Color)ctxAttrValue;
		return getHTMLColorCode(color);
	}

	public static String getHTMLColorCode(Color color) {
		String colorCode = Integer.toHexString(color.getRGB());
		return "#" + colorCode.substring(colorCode.length() - 6);
	}
}
@


1.3
log
@Removed unused imports.
@
text
@d2 1
a2 1
 *  @@(#)TextAreaFigure.java
d4 6
a9 6
 *  Project:		JHotdraw - a GUI framework for technical drawings
 *  http://www.jhotdraw.org
 *  http://jhotdraw.sourceforge.net
 *  Copyright:	© by the original author(s) and all contributors
 *  License:		Lesser GNU Public License (LGPL)
 *  http://www.opensource.org/licenses/lgpl-license.html
d24 3
a26 3
 * @@author    Eduardo Francos - InContext
 * @@created   4 mai 2002
 * @@version   1.0
d28 1
d30 3
a32 4
public class HTMLColorContentProducer extends ColorContentProducer
		 implements Serializable {

	/**Constructor for the HTMLColorContentProducer object */
a33 1

@


1.2
log
@removed remains of FigureAttributeConstant.getName() and some code-clean up
@
text
@a14 1
import CH.ifa.draw.util.Storable;
@


1.1
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@d52 1
a52 1
	public static String getHTMLColorCode(Color color){
@

