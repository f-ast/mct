head	1.3;
access;
symbols
	jhotdraw54b2-release:1.3
	reorg_6x_split:1.3
	MVC_PHASE1:1.2.0.10
	NEW_ATTRIBUTES:1.2.0.8
	DNOYEB1_ALPHA-2:1.2.4.1
	release_JHD54b1:1.2
	BUGFIX_670992:1.2.0.6
	DNOYEB1_ALPHA-1:1.2.4.1
	dnoyeb1:1.2.0.4
	repack:1.2.0.2
	Root_repack:1.2
	Before_FigureVisitor:1.2;
locks; strict;
comment	@# @;


1.3
date	2003.05.08.15.41.25;	author ricardo_padilha;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.04.22.39.17;	author mrfloppy;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2002.05.20.19.57.58;	author mrfloppy;	state Exp;
branches;
next	;

1.2.4.1
date	2003.01.17.06.26.44;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Refactoring of Cursor:
- java.awt.Cursor (class) has been sistematically replaced with CH.ifa.draw.contrib.framework.Cursor (interface)
- a new default implementation of Cursor (interface) has been added: CH.ifa.draw.contrib.standard.AWTCursor
@
text
@/*
 *  @@(#)CommandMenu.java
 *
 *  Project:		JHotdraw - a GUI framework for technical drawings
 *  http://www.jhotdraw.org
 *  http://jhotdraw.sourceforge.net
 *  Copyright:	© by the original author(s) and all contributors
 *  License:		Lesser GNU Public License (LGPL)
 *  http://www.opensource.org/licenses/lgpl-license.html
 */
package CH.ifa.draw.contrib;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import javax.swing.*;

import CH.ifa.draw.framework.JHotDrawRuntimeException;
import CH.ifa.draw.util.Command;
import CH.ifa.draw.util.CommandListener;
import CH.ifa.draw.util.CommandMenu;

/**
 * A Command enabled menu. Selecting a menu item
 * executes the corresponding command.
 *
 * @@author    Eduardo Francos  (adapted from initial implementation by Wolfram Kaiser)
 * @@created   2 mai 2002
 * @@see       Command
 * @@version   <$CURRENT_VERSION$>
 */
public class CTXCommandMenu extends JMenu implements ActionListener, CommandListener {

	public CTXCommandMenu(String name) {
		super(name);
	}

	/**
	 * Adds a command to the menu. The item's label is
	 * the command's name.
	 */
	public synchronized void add(Command command) {
		addMenuItem(new CommandMenuItem(command));
	}

	/**
	 * Adds a command with the given short cut to the menu. The item's label is
	 * the command's name.
	 */
	public synchronized void add(Command command, MenuShortcut shortcut) {
		addMenuItem(new CommandMenuItem(command, shortcut.getKey()));
	}

	/**
	 * Adds a command with the given short cut to the menu. The item's label is
	 * the command's name.
	 */
	public synchronized void addCheckItem(Command command) {
		addMenuItem(new CommandCheckBoxMenuItem(command));
	}

	/**
	 * Adds a command menu item
	 *
	 * @@param item  the command menu item
	 */
	public synchronized void add(CommandMenuItem item) {
		addMenuItem(item);
	}

	/**
	 * Adds a command checkbox menu item
	 *
	 * @@param checkItem  the checkbox item
	 */
	public synchronized void add(CommandCheckBoxMenuItem checkItem) {
		addMenuItem(checkItem);
	}

	/**
	 * Adds a normal menu item to the menu
	 *
	 * @@param m  The menu item
	 */
	protected void addMenuItem(JMenuItem m) {
		m.addActionListener(this);
		add(m);
		((CommandHolder)m).getCommand().addCommandListener(this);
	}

	/**
	 * Removes a command item from the menu
	 *
	 * @@param command  the command tor emove
	 */
	public synchronized void remove(Command command) {
		throw new JHotDrawRuntimeException("not implemented");
	}

	/**
	 * Removes an item from the menu
	 *
	 * @@param item  the item to remove
	 */
	public synchronized void remove(MenuItem item) {
		throw new JHotDrawRuntimeException("not implemented");
	}

	/**
	 * Changes the enabling/disabling state of a named menu item.
	 *
	 * @@param name   Description of the Parameter
	 * @@param state  Description of the Parameter
	 */
	public synchronized void enable(String name, boolean state) {
		for (int i = 0; i < getItemCount(); i++) {
			JMenuItem item = getItem(i);
			if (name.equals(item.getText())) {
				item.setEnabled(state);
				return;
			}
		}
	}

	/** Description of the Method */
	public synchronized void checkEnabled() {
		int j = 0;
		for (int i = 0; i < getMenuComponentCount(); i++) {
			JMenuItem currentItem = getItem(i);
			if (currentItem instanceof CommandMenu) {
				((CommandMenu)currentItem).checkEnabled();
			}
			else if (currentItem instanceof CTXCommandMenu) {
				((CTXCommandMenu)currentItem).checkEnabled();
			}
			else if (currentItem instanceof CommandHolder) {
				currentItem.setEnabled(((CommandHolder)currentItem).getCommand().isExecutable());
			}
			else if (currentItem instanceof Command) {
				currentItem.setEnabled(((Command)currentItem).isExecutable());
			}
			j++;
		}
	}

	/**
	 * Executes the command.
	 *
	 * @@param e  Description of the Parameter
	 */
	public void actionPerformed(ActionEvent e) {
		int j = 0;
		Object source = e.getSource();
		for (int i = 0; i < getItemCount(); i++) {
			// ignore separators
			// a separator has a hyphen as its label
			if (getMenuComponent(i) instanceof JSeparator) {
				continue;
			}
			JMenuItem item = getItem(i);
			if (source == item) {
				Command cmd = ((CommandHolder)item).getCommand();
				cmd.execute();
				break;
			}
			j++;
		}
	}

	/**
	 * Description of the Method
	 *
	 * @@param commandEvent  Description of the Parameter
	 */
	public void commandExecuted(EventObject commandEvent) {
//		checkEnabled();
	}

	/**
	 * Description of the Method
	 *
	 * @@param commandEvent  Description of the Parameter
	 */
	public void commandExecutable(EventObject commandEvent) {
//		checkEnabled();
	}

	/**
	 * Description of the Method
	 *
	 * @@param commandEvent  Description of the Parameter
	 */
	public void commandNotExecutable(EventObject commandEvent) {
//		checkEnabled();
	}
}

@


1.2
log
@after variou merges... (before 5.4 release)
@
text
@d119 1
a119 1
			if (name.equals(item.getLabel())) {
@


1.2.4.1
log
@removed deprecated getLabel.
replaced getText
@
text
@d119 1
a119 1
			if (name.equals(item.getText())) {
@


1.1
log
@various merges (TextArea, HTMLTextArea, CreationTool, MiniMap, bug fixes)
@
text
@a38 1

a46 1

a54 1

a62 1

a71 1

a80 1

a91 1

a100 1

a109 1

a125 1

a146 1

a170 1

a179 1

a187 1

@

