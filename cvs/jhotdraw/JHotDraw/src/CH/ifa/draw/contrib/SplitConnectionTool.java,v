head	1.1;
access;
symbols
	jhotdraw54b2-release:1.1
	reorg_6x_split:1.1
	MVC_PHASE1:1.1.0.10
	NEW_ATTRIBUTES:1.1.0.8
	DNOYEB1_ALPHA-2:1.1.4.4
	release_JHD54b1:1.1
	BUGFIX_670992:1.1.0.6
	DNOYEB1_ALPHA-1:1.1.4.3
	dnoyeb1:1.1.0.4
	repack:1.1.0.2
	Root_repack:1.1
	Before_FigureVisitor:1.1;
locks; strict;
comment	@# @;


1.1
date	2002.08.04.22.39.17;	author mrfloppy;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.01.10.04.54.38;	author dnoyeb;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.01.14.18.20.56;	author dnoyeb;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.01.21.00.04.07;	author dnoyeb;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2003.01.26.00.50.48;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.1
log
@after variou merges... (before 5.4 release)
@
text
@/*
 * @@(#)ConnectionTool.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.contrib;

import CH.ifa.draw.standard.ConnectionTool;
import CH.ifa.draw.standard.SingleFigureEnumerator;
import CH.ifa.draw.framework.*;
import CH.ifa.draw.figures.*;

import java.awt.event.MouseEvent;
import java.awt.*;

/**
 * @@author  Wolfram Kaiser <mrfloppy@@sourceforge.net>
 * @@version <$CURRENT_VERSION$>
 */
public class SplitConnectionTool extends ConnectionTool {
	public SplitConnectionTool(DrawingEditor newDrawingEditor, ConnectionFigure newPrototype) {
		super(newDrawingEditor, newPrototype);
	}

	public void mouseDown(MouseEvent e, int x, int y) {
		setView((DrawingView)e.getSource());
		int ex = e.getX();
		int ey = e.getY();
		if (getTargetFigure() == null) {
			setTargetFigure(findConnectableFigure(ex, ey, drawing()));
		}
		else {
			if (getAddedFigure() == null) {
				setConnection(createConnection());
				setStartConnector(findConnector(ex, ey, getTargetFigure()));
				getConnection().connectStart(getStartConnector());
				getConnection().startPoint(ex, ey);
				setAddedFigure(view().add(getConnection()));
			}
			Figure c = findTarget(ex, ey, drawing());
			if (c != null) {
				// end connection figure found
				setEndConnector(findConnector(ex, ex, c));
				getConnection().connectEnd(getEndConnector());
				getConnection().endPoint(ex, ey);
				setUndoActivity(createUndoActivity());
				getUndoActivity().setAffectedFigures(
					new SingleFigureEnumerator(getAddedFigure()));
				getConnection().updateConnection();
				init();
				editor().toolDone();
			}
			else {
				// split connection where the mouse click took place
				if (getEndConnector() == null) {
					Figure tempEndFigure = new NullFigure();
					tempEndFigure.basicDisplayBox(new Point(ex, ey), new Point(ex, ey));
					setEndConnector(new NullConnector(tempEndFigure));
					getConnection().connectEnd(getEndConnector());
					getConnection().endPoint(ex, ey);
					getConnection().updateConnection();
				}
				else {
					((PolyLineFigure)getConnection()).addPoint(ex, ey);
				}
			}
		}
	}

	public void mouseUp(MouseEvent e, int x, int y) {
		// usually do nothing: tool is still active
		if (e.getClickCount() == 2) {
			init();
			editor().toolDone();
		}
	}

	public void mouseMove(MouseEvent e, int x, int y) {
		// avoid tracking connectors
	}

	public void mouseDrag(MouseEvent e, int x, int y) {
		// avoid tracking connectors
	}

	public void deactivate() {
		if (getConnection() != null) {
			view().remove(getConnection());
		}
		super.deactivate();
		init();
	}

	protected void init() {
		setConnection(null);
		setStartConnector(null);
		setEndConnector(null);
		setAddedFigure(null);
		setTargetFigure(null);
	}
}
@


1.1.4.1
log
@1.  Tool now accepts DrawingViewMouseEvent as opposed to java.awt.MouseEvent and x,y ints.
2. compositeFigure now uses constrained mouse values throughout.
3. nested CreationTOol was calling drawing() before it was setting the view.  should lead to NPE.  this tool still seems broken
   i dont think its needed anymore?
4. bug in splitConnectionTool mouse down. setEndConnector(findConnector(ex, ex, c)); needs to be ex and ey
5. made some of StandardDrawingViews inner class listners protected.
@
text
@d19 1
a19 1

d31 4
a34 4
	public void mouseDown(DrawingViewMouseEvent dvme) {
		setView( dvme.getDrawingView() );
		setAnchorX( dvme.getMouseEvent().getX() );
		setAnchorY( dvme.getMouseEvent().getY() );
d36 1
a36 1
			setTargetFigure(findConnectableFigure(getAnchorX(), getAnchorY(), drawing()));
d41 1
a41 1
				setStartConnector(findConnector(getAnchorX(), getAnchorY(), getTargetFigure()));
d43 1
a43 1
				getConnection().startPoint(getAnchorX(), getAnchorY());
d46 1
a46 1
			Figure c = findTarget(getAnchorX(), getAnchorY(), drawing());
d49 1
a49 1
				setEndConnector(findConnector(getAnchorX(), getAnchorY(), c));
d51 1
a51 1
				getConnection().endPoint(getAnchorX(), getAnchorY());
d63 1
a63 1
					tempEndFigure.basicDisplayBox(new Point(getAnchorX(), getAnchorY()), new Point(getAnchorX(), getAnchorY()));
d66 1
a66 1
					getConnection().endPoint(getAnchorX(), getAnchorY());
d70 1
a70 1
					((PolyLineFigure)getConnection()).addPoint(getAnchorX(), getAnchorY());
d76 1
a76 1
	public void mouseUp(DrawingViewMouseEvent dvme) {
d78 1
a78 1
		if (dvme.getMouseEvent().getClickCount() == 2) {
d84 1
a84 1
	public void mouseMove(DrawingViewMouseEvent dvme) {
d88 1
a88 1
	public void mouseDrag(DrawingViewMouseEvent dvme) {
@


1.1.4.2
log
@DecoratorFigure is 'changed'  I think it needs reworking.  not its only used durint draw(Graphics g) but I don't think
that was its real intention?

The Figure added or removed is nolonger changed during the add or remove process.  Thus add and remove do not return
values.
orphan is used internally to the drawing only.
remove calls figure.remove() which intern orphans the figure.
remove(Figure f) is still present and used but currently not needed.  call figure.remove() instead.
perhaps we can add a method on the figure enumerator to 'remove' all the figures within it.
Figure no longer exposes its listeners.  call methods on figure to send events.


Serialization in every form needs cleanup now.  Some due to earlier changes made by myself like making listeners of
inner classes, but not storing the listener when the figures are stored. (since the figures think the inner listener
is their container.)
@
text
@d44 1
a44 2
				view().add(getConnection());
				setAddedFigure(getConnection());
@


1.1.4.3
log
@Restored the ContainerFigure.  Its very problematic for tools, but I have a better understanding of the undo system now.
As a result I have restored most of what was their again with explanations on how it works for the next traveler...
Also fixed a few issues with grouping and ungrouping. since figures can no longer be in 2 containers at once the container
hopping that was being done by the group command would fail.  I believe border tool did similar hopping by having a figure
as part of the drawing and part of the borderFigure temporarily.  Cant do that anymore.
@
text
@d44 2
a45 1
				setAddedFigure(view().add(getConnection()));
@


1.1.4.4
log
@CompositeFigure does not return figures from add, remove, orphan anymore
new method, restore added to bring back orphaned figures
compositeFigure keeps record of its orphans for the restore method
NullFigures inserted as placeholders into the figureList
dumps record and nullFigures when remove(figure) called. this safely restores
figures to their old places.
figureRequestRemove and figureRemove events eliminated.
Group and Ungroup commands redone to respect these new ideas.
have not done anything with delete, cut, copy, paste yet.
NullFigure added 0,0 for its display box, else throwing exceptions
@
text
@d44 1
a44 2
				view().add(getConnection());
				setAddedFigure(getConnection());
@


