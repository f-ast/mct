head	1.4;
access;
symbols
	jhotdraw54b2-release:1.4
	reorg_6x_split:1.4
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.4
date	2003.11.09.21.18.44;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.23.06.38.57;	author mtnygard;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package CH.ifa.draw.test.contrib;
import java.awt.Component;

import javax.swing.JScrollPane;

// JUnitDoclet begin import
import CH.ifa.draw.contrib.MiniMapView;
import CH.ifa.draw.test.JHDTestCase;
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase MiniMapViewTest is generated by
 * JUnitDoclet to hold the tests for MiniMapView.
 * @@see CH.ifa.draw.contrib.MiniMapView
 */
// JUnitDoclet end javadoc_class
public class MiniMapViewTest
// JUnitDoclet begin extends_implements
extends JHDTestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private MiniMapView minimapview;
	// JUnitDoclet end class

	/**
	 * Constructor MiniMapViewTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public MiniMapViewTest(String name) {
		// JUnitDoclet begin method MiniMapViewTest
		super(name);
		// JUnitDoclet end method MiniMapViewTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public CH.ifa.draw.contrib.MiniMapView createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		JScrollPane sp = new JScrollPane((Component)getDrawingEditor().view());
		sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		sp.setAlignmentX(Component.LEFT_ALIGNMENT);
		return new CH.ifa.draw.contrib.MiniMapView(getDrawingEditor().view(), sp);
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		getDrawingEditor().open();
		minimapview = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		minimapview = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method getMappedDrawingView()
	/**
	 * Method testGetMappedDrawingView is testing getMappedDrawingView
	 * @@see CH.ifa.draw.contrib.MiniMapView#getMappedDrawingView()
	 */
	// JUnitDoclet end javadoc_method getMappedDrawingView()
	public void testGetMappedDrawingView() throws Exception {
		// JUnitDoclet begin method getMappedDrawingView
		// JUnitDoclet end method getMappedDrawingView
	}

	// JUnitDoclet begin javadoc_method getSubject()
	/**
	 * Method testGetSubject is testing getSubject
	 * @@see CH.ifa.draw.contrib.MiniMapView#getSubject()
	 */
	// JUnitDoclet end javadoc_method getSubject()
	public void testGetSubject() throws Exception {
		// JUnitDoclet begin method getSubject
		// JUnitDoclet end method getSubject
	}

	// JUnitDoclet begin javadoc_method getViewBowColor()
	/**
	 * Method testGetViewBowColor is testing getViewBowColor
	 * @@see CH.ifa.draw.contrib.MiniMapView#getViewBowColor()
	 */
	// JUnitDoclet end javadoc_method getViewBowColor()
	public void testGetViewBowColor() throws Exception {
		// JUnitDoclet begin method getViewBowColor
		// JUnitDoclet end method getViewBowColor
	}

	// JUnitDoclet begin javadoc_method setViewBoxColor()
	/**
	 * Method testSetViewBoxColor is testing setViewBoxColor
	 * @@see CH.ifa.draw.contrib.MiniMapView#setViewBoxColor(java.awt.Color)
	 */
	// JUnitDoclet end javadoc_method setViewBoxColor()
	public void testSetViewBoxColor() throws Exception {
		// JUnitDoclet begin method setViewBoxColor
		// JUnitDoclet end method setViewBoxColor
	}

	// JUnitDoclet begin javadoc_method paint()
	/**
	 * Method testPaint is testing paint
	 * @@see CH.ifa.draw.contrib.MiniMapView#paint(java.awt.Graphics)
	 */
	// JUnitDoclet end javadoc_method paint()
	public void testPaint() throws Exception {
		// JUnitDoclet begin method paint
		// JUnitDoclet end method paint
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
@


1.3
log
@All test cases now pass!
@
text
@d1 10
a11 1

d17 1
d22 6
a27 7
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

d31 4
a34 4
* TestCase MiniMapViewTest is generated by
* JUnitDoclet to hold the tests for MiniMapView.
* @@see CH.ifa.draw.contrib.MiniMapView
*/
d41 122
a162 133
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.contrib.MiniMapView minimapview = null;
  // JUnitDoclet end class
  
  /**
  * Constructor MiniMapViewTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public MiniMapViewTest(String name) {
    // JUnitDoclet begin method MiniMapViewTest
    super(name);
    // JUnitDoclet end method MiniMapViewTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.contrib.MiniMapView createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
	JScrollPane sp = new JScrollPane((Component)getDrawingEditor().view());
	sp.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
	sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
	sp.setAlignmentX(Component.LEFT_ALIGNMENT);
    return new CH.ifa.draw.contrib.MiniMapView(getDrawingEditor().view(), sp);
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
	getDrawingEditor().open();
    minimapview = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    minimapview = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method getMappedDrawingView()
  /**
  * Method testGetMappedDrawingView is testing getMappedDrawingView
  * @@see CH.ifa.draw.contrib.MiniMapView#getMappedDrawingView()
  */
  // JUnitDoclet end javadoc_method getMappedDrawingView()
  public void testGetMappedDrawingView() throws Exception {
    // JUnitDoclet begin method getMappedDrawingView
    // JUnitDoclet end method getMappedDrawingView
  }
  
  // JUnitDoclet begin javadoc_method getSubject()
  /**
  * Method testGetSubject is testing getSubject
  * @@see CH.ifa.draw.contrib.MiniMapView#getSubject()
  */
  // JUnitDoclet end javadoc_method getSubject()
  public void testGetSubject() throws Exception {
    // JUnitDoclet begin method getSubject
    // JUnitDoclet end method getSubject
  }
  
  // JUnitDoclet begin javadoc_method getViewBowColor()
  /**
  * Method testGetViewBowColor is testing getViewBowColor
  * @@see CH.ifa.draw.contrib.MiniMapView#getViewBowColor()
  */
  // JUnitDoclet end javadoc_method getViewBowColor()
  public void testGetViewBowColor() throws Exception {
    // JUnitDoclet begin method getViewBowColor
    // JUnitDoclet end method getViewBowColor
  }
  
  // JUnitDoclet begin javadoc_method setViewBoxColor()
  /**
  * Method testSetViewBoxColor is testing setViewBoxColor
  * @@see CH.ifa.draw.contrib.MiniMapView#setViewBoxColor(java.awt.Color)
  */
  // JUnitDoclet end javadoc_method setViewBoxColor()
  public void testSetViewBoxColor() throws Exception {
    // JUnitDoclet begin method setViewBoxColor
    // JUnitDoclet end method setViewBoxColor
  }
  
  // JUnitDoclet begin javadoc_method paint()
  /**
  * Method testPaint is testing paint
  * @@see CH.ifa.draw.contrib.MiniMapView#paint(java.awt.Graphics)
  */
  // JUnitDoclet end javadoc_method paint()
  public void testPaint() throws Exception {
    // JUnitDoclet begin method paint
    // JUnitDoclet end method paint
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(MiniMapViewTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d69 1
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@d3 4
a6 1
import junit.framework.TestCase;
a7 1
import CH.ifa.draw.contrib.MiniMapView;
a8 3

import javax.swing.*;
import java.awt.*;
@

