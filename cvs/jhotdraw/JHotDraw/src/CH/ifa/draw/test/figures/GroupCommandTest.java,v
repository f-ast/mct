head	1.3;
access;
symbols
	jhotdraw54b2-release:1.3
	reorg_6x_split:1.3
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.3
date	2003.11.09.21.18.45;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package CH.ifa.draw.test.figures;

// JUnitDoclet begin import
import CH.ifa.draw.figures.GroupCommand;
import CH.ifa.draw.test.JHDTestCase;
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */


// JUnitDoclet begin javadoc_class
/**
 * TestCase GroupCommandTest is generated by
 * JUnitDoclet to hold the tests for GroupCommand.
 * @@see CH.ifa.draw.figures.GroupCommand
 */
// JUnitDoclet end javadoc_class
public class GroupCommandTest
// JUnitDoclet begin extends_implements
extends JHDTestCase
// JUnitDoclet end extends_implements
{
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  private GroupCommand groupcommand;
  // JUnitDoclet end class
  
  /**
   * Constructor GroupCommandTest is
   * basically calling the inherited constructor to
   * initiate the TestCase for use by the Framework.
   */
  public GroupCommandTest(String name) {
    // JUnitDoclet begin method GroupCommandTest
    super(name);
    // JUnitDoclet end method GroupCommandTest
  }
  
  /**
   * Factory method for instances of the class to be tested.
   */
  public CH.ifa.draw.figures.GroupCommand createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new CH.ifa.draw.figures.GroupCommand("TestGroup", getDrawingEditor());
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
   * Method setUp is overwriting the framework method to
   * prepare an instance of this TestCase for a single test.
   * It's called from the JUnit framework only.
   */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    groupcommand = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
   * Method tearDown is overwriting the framework method to
   * clean up after each single test of this TestCase.
   * It's called from the JUnit framework only.
   */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    groupcommand = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method execute()
  /**
   * Method testExecute is testing execute
   * @@see CH.ifa.draw.figures.GroupCommand#execute()
   */
  // JUnitDoclet end javadoc_method execute()
  public void testExecute() throws Exception {
    // JUnitDoclet begin method execute
    // JUnitDoclet end method execute
  }
  
  // JUnitDoclet begin javadoc_method isExecutableWithView()
  /**
   * Method testIsExecutableWithView is testing isExecutableWithView
   * @@see CH.ifa.draw.figures.GroupCommand#isExecutableWithView()
   */
  // JUnitDoclet end javadoc_method isExecutableWithView()
  public void testIsExecutableWithView() throws Exception {
    // JUnitDoclet begin method isExecutableWithView
    // JUnitDoclet end method isExecutableWithView
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
   * JUnitDoclet moves marker to this method, if there is not match
   * for them in the regenerated code and if the marker is not empty.
   * This way, no test gets lost when regenerating after renaming.
   * <b>Method testVault is supposed to be empty.</b>
   */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  

}
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d1 10
d14 1
d19 6
a24 6
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/
d29 4
a32 4
* TestCase GroupCommandTest is generated by
* JUnitDoclet to hold the tests for GroupCommand.
* @@see CH.ifa.draw.figures.GroupCommand
*/
d41 1
a41 1
  CH.ifa.draw.figures.GroupCommand groupcommand = null;
d45 4
a48 4
  * Constructor GroupCommandTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
d56 2
a57 2
  * Factory method for instances of the class to be tested.
  */
d65 4
a68 4
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
d77 4
a80 4
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
d90 3
a92 3
  * Method testExecute is testing execute
  * @@see CH.ifa.draw.figures.GroupCommand#execute()
  */
d101 3
a103 3
  * Method testIsExecutableWithView is testing isExecutableWithView
  * @@see CH.ifa.draw.figures.GroupCommand#isExecutableWithView()
  */
d114 5
a118 5
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
d125 1
a125 9
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(GroupCommandTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@a2 1
import junit.framework.TestCase;
a3 1
import CH.ifa.draw.figures.GroupCommand;
@

