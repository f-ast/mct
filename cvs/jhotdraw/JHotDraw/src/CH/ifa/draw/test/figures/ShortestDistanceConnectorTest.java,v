head	1.3;
access;
symbols
	jhotdraw54b2-release:1.3
	reorg_6x_split:1.3
	NEW_ATTRIBUTES:1.1.0.2
	release_JHD54b1:1.1;
locks; strict;
comment	@# @;


1.3
date	2003.11.09.21.18.45;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.13.22.31.10;	author mtnygard;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.30.01.32.00;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@/*
 * @@(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package CH.ifa.draw.test.figures;

import CH.ifa.draw.figures.ShortestDistanceConnector;
import junit.framework.TestCase;
// JUnitDoclet begin import
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase ShortestDistanceConnectorTest is generated by
 * JUnitDoclet to hold the tests for ShortestDistanceConnector.
 * @@see CH.ifa.draw.figures.ShortestDistanceConnector
 */
// JUnitDoclet end javadoc_class
public class ShortestDistanceConnectorTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private ShortestDistanceConnector shortestdistanceconnector;
	// JUnitDoclet end class

	/**
	 * Constructor ShortestDistanceConnectorTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public ShortestDistanceConnectorTest(String name) {
		// JUnitDoclet begin method ShortestDistanceConnectorTest
		super(name);
		// JUnitDoclet end method ShortestDistanceConnectorTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public CH.ifa.draw.figures.ShortestDistanceConnector createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new CH.ifa.draw.figures.ShortestDistanceConnector();
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		shortestdistanceconnector = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		shortestdistanceconnector = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method findStart()
	/**
	 * Method testFindStart is testing findStart
	 * @@see CH.ifa.draw.figures.ShortestDistanceConnector#findStart(CH.ifa.draw.framework.ConnectionFigure)
	 */
	// JUnitDoclet end javadoc_method findStart()
	public void testFindStart() throws Exception {
		// JUnitDoclet begin method findStart
		// JUnitDoclet end method findStart
	}

	// JUnitDoclet begin javadoc_method findEnd()
	/**
	 * Method testFindEnd is testing findEnd
	 * @@see CH.ifa.draw.figures.ShortestDistanceConnector#findEnd(CH.ifa.draw.framework.ConnectionFigure)
	 */
	// JUnitDoclet end javadoc_method findEnd()
	public void testFindEnd() throws Exception {
		// JUnitDoclet begin method findEnd
		// JUnitDoclet end method findEnd
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
@


1.2
log
@Eliminate some deprecated method warnings.
Organize imports to remove Eclipse warnings about unused imports.
@
text
@d1 10
d13 1
d19 6
a24 7
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

d28 4
a31 4
* TestCase ShortestDistanceConnectorTest is generated by
* JUnitDoclet to hold the tests for ShortestDistanceConnector.
* @@see CH.ifa.draw.figures.ShortestDistanceConnector
*/
d38 84
a121 95
  // JUnitDoclet begin class
  // instance variables, helper methods, ... put them in this marker
  CH.ifa.draw.figures.ShortestDistanceConnector shortestdistanceconnector = null;
  // JUnitDoclet end class
  
  /**
  * Constructor ShortestDistanceConnectorTest is
  * basically calling the inherited constructor to
  * initiate the TestCase for use by the Framework.
  */
  public ShortestDistanceConnectorTest(String name) {
    // JUnitDoclet begin method ShortestDistanceConnectorTest
    super(name);
    // JUnitDoclet end method ShortestDistanceConnectorTest
  }
  
  /**
  * Factory method for instances of the class to be tested.
  */
  public CH.ifa.draw.figures.ShortestDistanceConnector createInstance() throws Exception {
    // JUnitDoclet begin method testcase.createInstance
    return new CH.ifa.draw.figures.ShortestDistanceConnector();
    // JUnitDoclet end method testcase.createInstance
  }
  
  /**
  * Method setUp is overwriting the framework method to
  * prepare an instance of this TestCase for a single test.
  * It's called from the JUnit framework only.
  */
  protected void setUp() throws Exception {
    // JUnitDoclet begin method testcase.setUp
    super.setUp();
    shortestdistanceconnector = createInstance();
    // JUnitDoclet end method testcase.setUp
  }
  
  /**
  * Method tearDown is overwriting the framework method to
  * clean up after each single test of this TestCase.
  * It's called from the JUnit framework only.
  */
  protected void tearDown() throws Exception {
    // JUnitDoclet begin method testcase.tearDown
    shortestdistanceconnector = null;
    super.tearDown();
    // JUnitDoclet end method testcase.tearDown
  }
  
  // JUnitDoclet begin javadoc_method findStart()
  /**
  * Method testFindStart is testing findStart
  * @@see CH.ifa.draw.figures.ShortestDistanceConnector#findStart(CH.ifa.draw.framework.ConnectionFigure)
  */
  // JUnitDoclet end javadoc_method findStart()
  public void testFindStart() throws Exception {
    // JUnitDoclet begin method findStart
    // JUnitDoclet end method findStart
  }
  
  // JUnitDoclet begin javadoc_method findEnd()
  /**
  * Method testFindEnd is testing findEnd
  * @@see CH.ifa.draw.figures.ShortestDistanceConnector#findEnd(CH.ifa.draw.framework.ConnectionFigure)
  */
  // JUnitDoclet end javadoc_method findEnd()
  public void testFindEnd() throws Exception {
    // JUnitDoclet begin method findEnd
    // JUnitDoclet end method findEnd
  }
  
  
  
  // JUnitDoclet begin javadoc_method testVault
  /**
  * JUnitDoclet moves marker to this method, if there is not match
  * for them in the regenerated code and if the marker is not empty.
  * This way, no test gets lost when regenerating after renaming.
  * <b>Method testVault is supposed to be empty.</b>
  */
  // JUnitDoclet end javadoc_method testVault
  public void testVault() throws Exception {
    // JUnitDoclet begin method testcase.testVault
    // JUnitDoclet end method testcase.testVault
  }
  
  /**
  * Method to execute the TestCase from command line
  * using JUnit's textui.TestRunner .
  */
  public static void main(String[] args) {
    // JUnitDoclet begin method testcase.main
    junit.textui.TestRunner.run(ShortestDistanceConnectorTest.class);
    // JUnitDoclet end method testcase.main
  }
@


1.1
log
@prepare for 5.4 release: adding test suite
@
text
@a4 1
import CH.ifa.draw.figures.ShortestDistanceConnector;
@

