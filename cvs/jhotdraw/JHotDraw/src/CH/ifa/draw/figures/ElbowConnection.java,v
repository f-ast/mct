head	1.5;
access;
symbols
	jhotdraw54b2-release:1.5
	reorg_6x_split:1.5
	MVC_PHASE1:1.5.0.4
	NEW_ATTRIBUTES:1.5.0.2
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2003.02.04.05.21.23;	author ricardo_padilha;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.04.22.43.22;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Removed unused imports.
@
text
@/*
 * @@(#)ElbowConnection.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.figures;

import java.awt.*;
import java.util.List;

import CH.ifa.draw.framework.*;
import CH.ifa.draw.standard.*;
import CH.ifa.draw.util.*;

/**
 * A LineConnection that constrains a connection to
 * orthogonal lines.
 *
 * @@version <$CURRENT_VERSION$>
 */
public  class ElbowConnection extends LineConnection {

	/*
	 * Serialization support.
	 */
	private static final long serialVersionUID = 2193968743082078559L;
	private int elbowConnectionSerializedDataVersion = 1;

	public ElbowConnection() {
		super();
	}

	public void updateConnection() {
		super.updateConnection();
		updatePoints();
	}

	public void layoutConnection() {
	}

	/**
	 * Gets the handles of the figure.
	 */
	public HandleEnumeration handles() {
		List handles = CollectionsFactory.current().createList(fPoints.size()*2);
		handles.add(new ChangeConnectionStartHandle(this));
		for (int i = 1; i < fPoints.size()-1; i++) {
			handles.add(new NullHandle(this, locator(i)));
		}
		handles.add(new ChangeConnectionEndHandle(this));
		for (int i = 0; i < fPoints.size()-1; i++) {
			handles.add(new ElbowHandle(this, i));
		}
		return new HandleEnumerator(handles);
	}

	public Locator connectedTextLocator(Figure f) {
		return new ElbowTextLocator();
	}

	protected void updatePoints() {
		willChange();
		Point start = startPoint();
		Point end = endPoint();
		fPoints.clear();
		fPoints.add(start);

		if (start.x == end.x || start.y == end.y) {
			fPoints.add(end);
		}
		else {

			Rectangle r1 = getStartConnector().owner().displayBox();
			Rectangle r2 = getEndConnector().owner().displayBox();

			int dir = Geom.direction(r1.x + r1.width/2, r1.y + r1.height/2,
						r2.x + r2.width/2, r2.y + r2.height/2);
			if (dir == Geom.NORTH || dir == Geom.SOUTH) {
				fPoints.add(new Point(start.x, (start.y + end.y)/2));
				fPoints.add(new Point(end.x, (start.y + end.y)/2));
			}
			else {
				fPoints.add(new Point((start.x + end.x)/2, start.y));
				fPoints.add(new Point((start.x + end.x)/2, end.y));
			}
			fPoints.add(end);
		}
		changed();
	}
}

class ElbowTextLocator extends AbstractLocator {
	public Point locate(Figure owner) {
		Point p = owner.center();
		return new Point(p.x, p.y-10); // hack
	}
}

@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@a14 1
import java.util.*;
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d16 2
a17 1
import java.io.IOException;
d51 3
a53 3
	public Vector handles() {
		Vector handles = new Vector(fPoints.size()*2);
		handles.addElement(new ChangeConnectionStartHandle(this));
d55 1
a55 1
			handles.addElement(new NullHandle(this, locator(i)));
d57 1
a57 1
		handles.addElement(new ChangeConnectionEndHandle(this));
d59 1
a59 1
			handles.addElement(new ElbowHandle(this, i));
d61 1
a61 1
		return handles;
d72 2
a73 2
		fPoints.removeAllElements();
		fPoints.addElement(start);
d76 1
a76 1
			fPoints.addElement(end);
d79 1
a79 1
			
a82 1
			int x1, y1, x2, y2;
d86 2
a87 2
				fPoints.addElement(new Point(start.x, (start.y + end.y)/2));
				fPoints.addElement(new Point(end.x, (start.y + end.y)/2));
d90 2
a91 2
				fPoints.addElement(new Point((start.x + end.x)/2, start.y));
				fPoints.addElement(new Point((start.x + end.x)/2, end.y));
d93 1
a93 1
			fPoints.addElement(end);
a101 1
		Rectangle r = owner.displayBox();
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)ElbowConnection.java 5.2
d4 6
d24 2
d29 68
a96 65
    /*
     * Serialization support.
     */
    private static final long serialVersionUID = 2193968743082078559L;
    private int elbowConnectionSerializedDataVersion = 1;

    public ElbowConnection() {
        super();
    }

    public void updateConnection() {
        super.updateConnection();
        updatePoints();
    }

    public void layoutConnection() {
    }

    /**
     * Gets the handles of the figure.
     */
    public Vector handles() {
        Vector handles = new Vector(fPoints.size()*2);
        handles.addElement(new ChangeConnectionStartHandle(this));
        for (int i = 1; i < fPoints.size()-1; i++)
            handles.addElement(new NullHandle(this, locator(i)));
        handles.addElement(new ChangeConnectionEndHandle(this));
        for (int i = 0; i < fPoints.size()-1; i++)
            handles.addElement(new ElbowHandle(this, i));
        return handles;
    }

    public Locator connectedTextLocator(Figure f) {
        return new ElbowTextLocator();
    }

    protected void updatePoints() {
        willChange();
        Point start = startPoint();
        Point end = endPoint();
        fPoints.removeAllElements();
        fPoints.addElement(start);

        if (start.x == end.x || start.y == end.y) {
            fPoints.addElement(end);
        }
        else {
            Rectangle r1 = start().owner().displayBox();
            Rectangle r2 = end().owner().displayBox();

            int x1, y1, x2, y2;
            int dir = Geom.direction(r1.x + r1.width/2, r1.y + r1.height/2,
                        r2.x + r2.width/2, r2.y + r2.height/2);
            if (dir == Geom.NORTH || dir == Geom.SOUTH) {
                fPoints.addElement(new Point(start.x, (start.y + end.y)/2));
                fPoints.addElement(new Point(end.x, (start.y + end.y)/2));
            }
            else {
                fPoints.addElement(new Point((start.x + end.x)/2, start.y));
                fPoints.addElement(new Point((start.x + end.x)/2, end.y));
            }
            fPoints.addElement(end);
        }
        changed();
    }
d100 5
a104 5
    public Point locate(Figure owner) {
        Point p = owner.center();
        Rectangle r = owner.displayBox();
        return new Point(p.x, p.y-10); // hack
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)ElbowConnection.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
