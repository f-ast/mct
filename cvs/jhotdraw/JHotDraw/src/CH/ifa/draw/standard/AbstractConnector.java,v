head	1.4;
access;
symbols
	jhotdraw54b2-release:1.4
	reorg_6x_split:1.4
	MVC_PHASE1:1.4.0.10
	NEW_ATTRIBUTES:1.4.0.8
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.08.04.22.56.18;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@/*
 * @@(#)AbstractConnector.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.standard;

import java.awt.*;
import java.io.IOException;
import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.*;

/**
 * AbstractConnector provides default implementation for
 * the Connector interface.
 *
 * @@see Connector
 *
 * @@version <$CURRENT_VERSION$>
 */
public abstract class AbstractConnector implements Connector {
	/**
	 * the owner of the connector
	 */
	private Figure      fOwner;

	/*
	 * Serialization support.
	 */
	private static final long serialVersionUID = -5170007865562687545L;
	private int abstractConnectorSerializedDataVersion = 1;

	/**
	 * Constructs a connector that has no owner. It is only
	 * used internally to resurrect a connectors from a
	 * StorableOutput. It should never be called directly.
	 */
	public AbstractConnector() {
		fOwner = null;
	}

	/**
	 * Constructs a connector with the given owner figure.
	 */
	public AbstractConnector(Figure owner) {
		fOwner = owner;
	}

	/**
	 * Gets the connector's owner.
	 * Which is the figure this is attached too and NOT the connection it may be
	 * attached too.
	 *
	 */
	public Figure owner() {
		return fOwner;
	}

	public Point findStart(ConnectionFigure connection) {
		return findPoint(connection);
	}

	public Point findEnd(ConnectionFigure connection) {
		return findPoint(connection);
	}

	/**
	 * Gets the connection point. Override when the connector
	 * does not need to distinguish between the start and end
	 * point of a connection.
	 */
	protected Point findPoint(ConnectionFigure connection) {
		return Geom.center(displayBox());
	}

	/**
	 * Gets the display box of the connector.
	 */
	public Rectangle displayBox() {
		return owner().displayBox();
	}

	/**
	 * Tests if a point is contained in the connector.
	 */
	public boolean containsPoint(int x, int y) {
		return owner().containsPoint(x, y);
	}

	/**
	 * Draws this connector. By default connectors are invisible.
	 */
	public void draw(Graphics g) {
		// invisible by default
	}

	/**
	 * Stores the connector and its owner to a StorableOutput.
	 */
	public void write(StorableOutput dw) {
		dw.writeStorable(owner());
	}

	/**
	 * Reads the connector and its owner from a StorableInput.
	 */
	public void read(StorableInput dr) throws IOException {
		fOwner = (Figure)dr.readStorable();
	}

	/**
	 * Requests that the connector should show itself or hide itself.  The
	 * ConnectionFigure which desires to connect to this Connector is passed in.
	 * It a connector should show itself it should do so when draw is called, if
	 * so desired.
	 */
	public void connectorVisibility(boolean isVisible, ConnectionFigure courtingConnection) {
		//invisible by default
	}
}
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d57 3
d107 1
a107 1
		dw.writeStorable(fOwner);
d115 10
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)AbstractConnector.java 5.2
d4 6
d22 1
d24 2
d28 85
a112 86
    /**
     * the owner of the connector
     */
    private Figure      fOwner;

    /*
     * Serialization support.
     */
    private static final long serialVersionUID = -5170007865562687545L;
    private int abstractConnectorSerializedDataVersion = 1;

    /**
     * Constructs a connector that has no owner. It is only
     * used internally to resurrect a connectors from a
     * StorableOutput. It should never be called directly.
     */
    public AbstractConnector() {
        fOwner = null;
    }

    /**
     * Constructs a connector with the given owner figure.
     */
    public AbstractConnector(Figure owner) {
        fOwner = owner;
    }

    /**
     * Gets the connector's owner.
     */
    public Figure owner() {
        return fOwner;
    }

    public Point findStart(ConnectionFigure connection) {
        return findPoint(connection);
    }

    public Point findEnd(ConnectionFigure connection) {
        return findPoint(connection);
    }

    /**
     * Gets the connection point. Override when the connector
     * does not need to distinguish between the start and end
     * point of a connection.
     */
    protected Point findPoint(ConnectionFigure connection) {
        return Geom.center(displayBox());
    }

    /**
     * Gets the display box of the connector.
     */
    public Rectangle displayBox() {
        return owner().displayBox();
    }

    /**
     * Tests if a point is contained in the connector.
     */
    public boolean containsPoint(int x, int y) {
        return owner().containsPoint(x, y);
    }

    /**
     * Draws this connector. By default connectors are invisible.
     */
    public void draw(Graphics g) {
        // invisible by default
    }

    /**
     * Stores the connector and its owner to a StorableOutput.
     */
    public void write(StorableOutput dw) {
        dw.writeStorable(fOwner);
    }

    /**
     * Reads the connector and its owner from a StorableInput.
     */
    public void read(StorableInput dr) throws IOException {
        fOwner = (Figure)dr.readStorable();
    }

a113 1

@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)AbstractConnector.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
