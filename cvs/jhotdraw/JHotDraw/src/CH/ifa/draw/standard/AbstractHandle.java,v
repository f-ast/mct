head	1.7;
access;
symbols
	jhotdraw54b2-release:1.7
	reorg_6x_split:1.7
	MVC_PHASE1:1.6.0.2
	NEW_ATTRIBUTES:1.5.0.2
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2003.05.08.15.41.23;	author ricardo_padilha;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.22.23.58.41;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.04.05.03.17;	author ricardo_padilha;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.07.22.25.08;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Refactoring of Cursor:
- java.awt.Cursor (class) has been sistematically replaced with CH.ifa.draw.contrib.framework.Cursor (interface)
- a new default implementation of Cursor (interface) has been added: CH.ifa.draw.contrib.standard.AWTCursor
@
text
@/*
 * @@(#)AbstractHandle.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.standard;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;

import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.Undoable;

/**
 * AbstractHandle provides defaulf implementation for the Handle interface.
 *
 * @@see CH.ifa.draw.framework.Figure
 * @@see CH.ifa.draw.framework.Handle
 * @@version <$CURRENT_VERSION$>
 */
public abstract class AbstractHandle implements Handle {

	/**
	 * The standard size of a handle.
	 */
	public static final int HANDLESIZE = 8;

	private Figure fOwner;
	private Undoable myUndoableActivity;
	
	/**
	 * Constructor for <code>AbstractHandle</code>.
	 * Initializes the owner of the figure.
	 * @@param owner
	 */
	public AbstractHandle(Figure owner) {
		fOwner = owner;
	}

	/**
	 * @@param x the x position where the interaction started
	 * @@param y the y position where the interaction started
	 * @@param view the handles container
	 * @@see CH.ifa.draw.framework.Handle#invokeStart(int, int, CH.ifa.draw.framework.DrawingView)
	 */
	public void invokeStart(int x, int  y, DrawingView view) {
		invokeStart(x, y, view.drawing());
	}


	/**
	 * Tracks the start of the interaction. The default implementation
	 * does nothing.
	 * @@param x the x position where the interaction started
	 * @@param y the y position where the interaction started
	 * @@see CH.ifa.draw.framework.Handle#invokeStart(int, int, CH.ifa.draw.framework.Drawing)
	 * @@deprecated As of version 4.1,
	 * use invokeStart(x, y, drawingView)
	 */
	public void invokeStart(int  x, int  y, Drawing drawing) { }

	/**
	 * Tracks a step of the interaction.
	 * @@param x the current x position
	 * @@param y the current y position
	 * @@param anchorX the x position where the interaction started
	 * @@param anchorY the y position where the interaction started
	 * @@see CH.ifa.draw.framework.Handle#invokeStep(int, int, int, int, CH.ifa.draw.framework.DrawingView)
	 */
	public void invokeStep(int x, int y, int anchorX, int anchorY, DrawingView view) {
		invokeStep(x-anchorX, y-anchorY, view.drawing());
	}

	/**
	 * Tracks a step of the interaction.
	 * @@param dx x delta of this step
	 * @@param dy y delta of this step
	 * @@see CH.ifa.draw.framework.Handle#invokeStep(int, int, CH.ifa.draw.framework.Drawing)
	 * @@deprecated As of version 4.1,
	 * use invokeStep(x, y, anchorX, anchorY, drawingView)
	 */
	public void invokeStep(int dx, int dy, Drawing drawing) { }

	/**
	 * Tracks the end of the interaction.
	 * @@param x the current x position
	 * @@param y the current y position
	 * @@param anchorX the x position where the interaction started
	 * @@param anchorY the y position where the interaction started
	 * @@see CH.ifa.draw.framework.Handle#invokeEnd(int, int, int, int, CH.ifa.draw.framework.DrawingView)
	 */
	public void invokeEnd(int x, int y, int anchorX, int anchorY, DrawingView view) {
		invokeEnd(x-anchorX, y-anchorY, view.drawing());
	}

	/**
	 * Tracks the end of the interaction.
	 * @@see CH.ifa.draw.framework.Handle#invokeEnd(int, int, CH.ifa.draw.framework.Drawing)
	 * @@deprecated As of version 4.1,
	 * use invokeEnd(x, y, anchorX, anchorY, drawingView).
	 */
	public void invokeEnd(int dx, int dy, Drawing drawing) { }

	/**
	 * Gets the handle's owner.
	 * @@see CH.ifa.draw.framework.Handle#owner()
	 */
	public Figure owner() {
		return fOwner;
	}

	/**
	 * Gets the display box of the handle.
	 * @@see CH.ifa.draw.framework.Handle#displayBox()
	 */
	public Rectangle displayBox() {
		Point p = locate();
		return new Rectangle(
				p.x - HANDLESIZE / 2,
				p.y - HANDLESIZE / 2,
				HANDLESIZE,
				HANDLESIZE);
	}

	/**
	 * Tests if a point is contained in the handle.
	 * @@see CH.ifa.draw.framework.Handle#containsPoint(int, int)
	 */
	public boolean containsPoint(int x, int y) {
		return displayBox().contains(x, y);
	}

	/**
	 * Draws this handle.
	 * @@see CH.ifa.draw.framework.Handle#draw(java.awt.Graphics)
	 */
	public void draw(Graphics g) {
		Rectangle r = displayBox();

		g.setColor(Color.white);
		g.fillRect(r.x, r.y, r.width, r.height);

		g.setColor(Color.black);
		g.drawRect(r.x, r.y, r.width, r.height);
	}

	/**
	 * @@see CH.ifa.draw.framework.Handle#getUndoActivity()
	 */
	public Undoable getUndoActivity() {
		return myUndoableActivity;
	}

	/**
	 * @@see CH.ifa.draw.framework.Handle#setUndoActivity(CH.ifa.draw.util.Undoable)
	 */
	public void setUndoActivity(Undoable newUndoableActivity) {
		myUndoableActivity = newUndoableActivity;
	}

	/**
	 * @@see CH.ifa.draw.framework.Handle#getCursor()
	 */
	public Cursor getCursor() {
		return new AWTCursor(AWTCursor.DEFAULT_CURSOR);
	}

}
@


1.6
log
@no message
@
text
@d14 5
a20 1
import java.awt.*;
d25 2
a26 3
 * @@see Figure
 * @@see Handle
 *
d35 1
d40 1
d42 1
a48 10
	 * Tracks the start of the interaction. The default implementation
	 * does nothing.
	 * @@ deprecated As of version 4.1,
	 * use invokeStart(x, y, drawingView)
	 * @@param x the x position where the interaction started
	 * @@param y the y position where the interaction started
	 */
	public void invokeStart(int  x, int  y, Drawing drawing) { }

	/**
d52 1
d58 1
d60 7
a66 6
	 * @@ deprecated As of version 4.1,
	 * use invokeStep(x, y, anchorX, anchorY, drawingView)
	 *
	 * Tracks a step of the interaction.
	 * @@param dx x delta of this step
	 * @@param dy y delta of this step
d68 1
a68 1
	public void invokeStep(int dx, int dy, Drawing drawing) { }
d76 1
d83 10
d98 1
d105 2
a108 2
	 *
	 * Tracks the end of the interaction.
d114 1
d122 1
d135 1
d143 1
d155 3
d162 3
d168 8
@


1.5
log
@Fixed Javadocs to avoid compilation warnings.
@
text
@d43 4
a46 2
	 * @@deprecated As of version 4.1, use invokeStart(x, y, drawingView) Tracks
	 * the start of the interaction. The default implementation does nothing.
d62 2
a63 2
	 * @@deprecated As of version 4.1, use invokeStep(x, y, anchorX, anchorY,
	 * drawingView)
d94 2
a95 2
	 * @@deprecated As of version 4.1, use invokeEnd(x, y, anchorX, anchorY,
	 * drawingView).
@


1.4
log
@no message
@
text
@d43 2
a44 4
	 * @@ deprecated As of version 4.1,
	 * use invokeStart(x, y, drawingView)
	 * Tracks the start of the interaction. The default implementation
	 * does nothing.
d60 2
a61 2
	 * @@ deprecated As of version 4.1,
	 * use invokeStep(x, y, anchorX, anchorY, drawingView)
d92 2
a93 2
	 * @@deprecated As of version 4.1,
	 * use invokeEnd(x, y, anchorX, anchorY, drawingView).
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@a42 6
	 * Locates the handle on the figure. The handle is drawn
	 * centered around the returned point.
	 */
	public abstract Point locate();

	/**
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)AbstractHandle.java 5.2
d4 6
d15 1
d19 1
a19 2
 * AbstractHandle provides defaulf implementation for the
 * Handle interface.
d23 2
d28 125
a152 120
    /**
     * The standard size of a handle.
     */
    public static final int HANDLESIZE = 8;
    private Figure fOwner;

    /**
     * Initializes the owner of the figure.
     */
    public AbstractHandle(Figure owner) {
        fOwner = owner;
    }

    /**
     * Locates the handle on the figure. The handle is drawn
     * centered around the returned point.
     */
    public abstract Point locate();

    /**
     * @@ deprecated As of version 4.1,
     * use invokeStart(x, y, drawingView)
     * Tracks the start of the interaction. The default implementation
     * does nothing.
     * @@param x the x position where the interaction started
     * @@param y the y position where the interaction started
     */
    public void invokeStart(int  x, int  y, Drawing drawing) { }

    /**
     * @@ deprecated As of version 4.1,
     * use invokeStart(x, y, drawingView)
     * Tracks the start of the interaction. The default implementation
     * does nothing.
     * @@param x the x position where the interaction started
     * @@param y the y position where the interaction started
     * @@param view the handles container
     */
    public void invokeStart(int  x, int  y, DrawingView view) {
        invokeStart(x, y, view.drawing());
    }

    /**
     * @@ deprecated As of version 4.1,
     * use invokeStep(x, y, anchorX, anchorY, drawingView)
     *
     * Tracks a step of the interaction.
     * @@param dx x delta of this step
     * @@param dy y delta of this step
     */
    public void invokeStep (int dx, int dy, Drawing drawing) { }

    /**
     * Tracks a step of the interaction.
     * @@param x the current x position
     * @@param y the current y position
     * @@param anchorX the x position where the interaction started
     * @@param anchorY the y position where the interaction started
     */
    public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
        invokeStep(x-anchorX, y-anchorY, view.drawing());
    }

    /**
     * Tracks the end of the interaction.
     * @@param x the current x position
     * @@param y the current y position
     * @@param anchorX the x position where the interaction started
     * @@param anchorY the y position where the interaction started
     */
    public void invokeEnd(int x, int y, int anchorX, int anchorY, DrawingView view) {
        invokeEnd(x-anchorX, y-anchorY, view.drawing());
    }

    /**
     * @@deprecated As of version 4.1,
     * use invokeEnd(x, y, anchorX, anchorY, drawingView).
     *
     * Tracks the end of the interaction.
     */
    public void invokeEnd  (int dx, int dy, Drawing drawing) { }

    /**
     * Gets the handle's owner.
     */
    public Figure owner() {
        return fOwner;
    }

    /**
     * Gets the display box of the handle.
     */
    public Rectangle displayBox() {
        Point p = locate();
        return new Rectangle(
                p.x - HANDLESIZE / 2,
                p.y - HANDLESIZE / 2,
                HANDLESIZE,
                HANDLESIZE);
    }

    /**
     * Tests if a point is contained in the handle.
     */
    public boolean containsPoint(int x, int y) {
        return displayBox().contains(x, y);
    }

    /**
     * Draws this handle.
     */
    public void draw(Graphics g) {
        Rectangle r = displayBox();

        g.setColor(Color.white);
        g.fillRect(r.x, r.y, r.width, r.height);

        g.setColor(Color.black);
        g.drawRect(r.x, r.y, r.width, r.height);
    }
a153 2


@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)AbstractHandle.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
