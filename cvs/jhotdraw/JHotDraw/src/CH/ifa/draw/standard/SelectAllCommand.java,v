head	1.3;
access;
symbols
	jhotdraw54b2-release:1.3
	reorg_6x_split:1.3
	MVC_PHASE1:1.3.0.10
	NEW_ATTRIBUTES:1.3.0.8
	DNOYEB1_ALPHA-2:1.3
	release_JHD54b1:1.3
	BUGFIX_670992:1.3.0.6
	DNOYEB1_ALPHA-1:1.3
	dnoyeb1:1.3.0.4
	repack:1.3.0.2
	Root_repack:1.3
	Before_FigureVisitor:1.3
	JHotDraw_5-3:1.2;
locks; strict;
comment	@# @;


1.3
date	2002.08.04.22.56.18;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.24.20.37.15;	author mrfloppy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@after variou merges... (before 5.4 release)
@
text
@/*
 * @@(#)SelectAllCommand.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.standard;

import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.UndoableAdapter;
import CH.ifa.draw.util.Undoable;

/**
 * Command to select all figures in a view.
 *
 * @@version <$CURRENT_VERSION$>
 */
public class SelectAllCommand extends AbstractCommand {

	/**
	 * Constructs a select all command.
	 * @@param name the command name
	 * @@param newDrawingEditor the DrawingEditor which manages the views
	 */
	public SelectAllCommand(String name, DrawingEditor newDrawingEditor) {
		super(name, newDrawingEditor);
	}

	public void execute() {
		super.execute();
		setUndoActivity(createUndoActivity());
    	getUndoActivity().setAffectedFigures(view().selection());
		view().addToSelectionAll(view().drawing().figures());
		view().checkDamage();
	}

	/**
	 * Used in enabling the properties menu item.
	 * SelectAll menu item will be enabled only when there ia atleast one figure
	 * in the selected drawing view.
	 */
	public boolean isExecutableWithView() {
		FigureEnumeration fe = view().drawing().figures();
		if (fe.hasNextFigure() && (fe.nextFigure() != null)) {
			return true;
		}

		return false;
	}

	/**
	 * Factory method for undo activity
	 */
	protected Undoable createUndoActivity() {
		return new SelectAllCommand.UndoActivity(view());
	}

	public static class UndoActivity extends UndoableAdapter {
		public UndoActivity(DrawingView newDrawingView) {
			super(newDrawingView);
			setUndoable(true);
			setRedoable(true);
		}

		public boolean undo() {
			if (!super.undo()) {
	        	return false;
			}

			getDrawingView().clearSelection();
			getDrawingView().addToSelectionAll(getAffectedFigures());

		    return true;
		}

		public boolean redo() {
			// do not call execute directly as the selection might has changed
			if (isRedoable()) {
				getDrawingView().addToSelectionAll(getDrawingView().drawing().figures());
				return true;
			}

			return false;
		}
	}
}
@


1.2
log
@merge dnd (before 5.3)
@
text
@d22 1
a22 1
 */ 
d24 1
a24 1
 
d33 1
a33 1
	
d37 1
a37 1
    	getUndoActivity().setAffectedFigures(view().selectionElements());
d41 1
a41 1
	
d48 2
a49 3
		FigureEnumeration e = view().drawing().figures();
	
		if(e.hasMoreElements() && e.nextFigure() != null) {
d52 1
a52 1
	
d69 1
a69 1
		
d74 1
a74 1
	
d77 1
a77 1
			
d80 1
a80 1
		
d87 1
a87 1
			
@


1.1
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d28 1
a28 1
	 * @@param view the target view
d30 2
a31 2
	public SelectAllCommand(String name, DrawingView inView) {
		super(name, inView);
d35 1
d47 1
a47 1
	public boolean isExecutable() {
@

