head	1.10;
access;
symbols
	jhotdraw54b2-release:1.10
	reorg_6x_split:1.10
	MVC_PHASE1:1.10.0.10
	NEW_ATTRIBUTES:1.10.0.8
	DNOYEB1_ALPHA-2:1.10.4.2
	release_JHD54b1:1.10
	BUGFIX_670992:1.10.0.6
	DNOYEB1_ALPHA-1:1.10.4.1
	dnoyeb1:1.10.0.4
	repack:1.10.0.2
	Root_repack:1.10
	Before_FigureVisitor:1.10
	JHotDraw_5-3:1.7
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2002.09.07.12.27.27;	author mrfloppy;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2002.08.04.22.56.18;	author mrfloppy;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.30.20.40.09;	author mrfloppy;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.19.18.31.32;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.20.32.01;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.25.13;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.29.13.42.14;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches;
next	;

1.10.4.1
date	2003.01.16.15.59.18;	author dnoyeb;	state Exp;
branches;
next	1.10.4.2;

1.10.4.2
date	2003.01.29.04.41.13;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.10
log
@removed remains of FigureAttributeConstant.getName() and some code-clean up
@
text
@/*
 * @@(#)ChangeAttributeCommand.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.standard;

import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.UndoableAdapter;
import CH.ifa.draw.util.Undoable;
import java.util.Hashtable;

/**
 * Command to change a named figure attribute.
 *
 * @@version <$CURRENT_VERSION$>
 */
public  class ChangeAttributeCommand extends AbstractCommand {

	private FigureAttributeConstant fAttribute;
	private Object      fValue;

	/**
	 * Constructs a change attribute command.
	 * @@param name the command name
	 * @@param attribute the attribute to be changed
	 * @@param value the new attribute value
	 * @@param newDrawingEditor the DrawingEditor which manages the views
	 */
	public ChangeAttributeCommand(String name, FigureAttributeConstant attribute,
						   Object value, DrawingEditor newDrawingEditor) {
		super(name, newDrawingEditor);
		fAttribute = attribute;
		fValue = value;
	}

	public void execute() {
		super.execute();
		setUndoActivity(createUndoActivity());
		getUndoActivity().setAffectedFigures(view().selection());
		FigureEnumeration fe = getUndoActivity().getAffectedFigures();
		while (fe.hasNextFigure()) {
			fe.nextFigure().setAttribute(fAttribute, fValue);
		}
		view().checkDamage();
	}

	public boolean isExecutableWithView() {
		return view().selectionCount() > 0;
	}

	/**
	 * Factory method for undo activity
	 */
	protected Undoable createUndoActivity() {
		return new ChangeAttributeCommand.UndoActivity(view(), fAttribute, fValue);
	}

	public static class UndoActivity extends UndoableAdapter {
		private FigureAttributeConstant myUndoAttribute;
		private Hashtable	            myOriginalValues;
		private Object                  myUndoValue;

		public UndoActivity(DrawingView newDrawingView, FigureAttributeConstant newUndoAttribute, Object newUndoValue) {
			super(newDrawingView);
			myOriginalValues = new Hashtable();
			setAttribute(newUndoAttribute);
			setBackupValue(newUndoValue);
			setUndoable(true);
			setRedoable(true);
		}

		public boolean undo() {
			if (!super.undo()) {
				return false;
			}

			FigureEnumeration fe = getAffectedFigures();
			while (fe.hasNextFigure()) {
				Figure f = fe.nextFigure();
				if (getOriginalValue(f) != null) {
					f.setAttribute(getAttribute(), getOriginalValue(f));
				}
			}

			return true;
		}

		public boolean redo() {
			if (!isRedoable()) {
				return false;
			}

			FigureEnumeration fe = getAffectedFigures();
			while (fe.hasNextFigure()) {
				Figure f = fe.nextFigure();
				if (getBackupValue() != null) {
					f.setAttribute(getAttribute(), getBackupValue());
				}
			}

			return true;
		}

		protected void addOriginalValue(Figure affectedFigure, Object newOriginalValue) {
			myOriginalValues.put(affectedFigure, newOriginalValue);
		}

		protected Object getOriginalValue(Figure lookupAffectedFigure) {
			return myOriginalValues.get(lookupAffectedFigure);
		}

		protected void setAttribute(FigureAttributeConstant newUndoAttribute) {
			myUndoAttribute = newUndoAttribute;
		}

		public FigureAttributeConstant getAttribute() {
			return myUndoAttribute;
		}

		protected void setBackupValue(Object newUndoValue) {
			myUndoValue = newUndoValue;
		}

		public Object getBackupValue() {
			return myUndoValue;
		}

		public void release() {
			super.release();
			myOriginalValues = null;
		}

		public void setAffectedFigures(FigureEnumeration fe) {
			// first make copy of FigureEnumeration in superclass
			super.setAffectedFigures(fe);
			// then get new FigureEnumeration of copy to save attributes
			FigureEnumeration copyFe = getAffectedFigures();
			while (copyFe.hasNextFigure()) {
				Figure f = copyFe.nextFigure();
				Object attributeValue = f.getAttribute(getAttribute());
				if (attributeValue != null) {
					addOriginalValue(f, attributeValue);
				}
			}
		}
	}
}
@


1.10.4.1
log
@drawing.update() is called as opposed to view.checkDamage().  This causes all affected views
to be updated as opposed to just the one.
figure.Remove() now returns the container it was removed from.  This may assist undo/redo.
@
text
@d51 1
a51 1
		view().drawing().update();
@


1.10.4.2
log
@Using List over ArrayList and Map over HashMap/WeakMap etc.
@
text
@d67 1
a67 1
		private java.util.Map	            myOriginalValues;
@


1.9
log
@after variou merges... (before 5.4 release)
@
text
@d26 1
a26 1
	private String      fAttribute;
d32 1
a32 1
	 * @@param attributeName the name of the attribute to be changed
d36 1
a36 1
	public ChangeAttributeCommand(String name, String attributeName,
d39 1
a39 1
		fAttribute = attributeName;
d66 3
a68 3
		private Hashtable	myOriginalValues;
		private String      myUndoAttribute;
		private Object      myUndoValue;
d70 1
a70 1
		public UndoActivity(DrawingView newDrawingView, String newUndoAttribute, Object newUndoValue) {
d73 1
a73 1
			setAttributeName(newUndoAttribute);
d88 1
a88 1
					f.setAttribute(getAttributeName(), getOriginalValue(f));
d104 1
a104 1
					f.setAttribute(getAttributeName(), getBackupValue());
d119 1
a119 1
		protected void setAttributeName(String newUndoAttribute) {
d123 1
a123 1
		public String getAttributeName() {
d147 1
a147 1
				Object attributeValue = f.getAttribute(getAttributeName());
@


1.8
log
@no message
@
text
@d46 1
a46 1
		getUndoActivity().setAffectedFigures(view().selectionElements());
d48 1
a48 1
		while (fe.hasMoreElements()) {
d84 3
a86 3
			FigureEnumeration k = getAffectedFigures();
			while (k.hasMoreElements()) {
				Figure f = k.nextFigure();
d100 3
a102 3
			FigureEnumeration k = getAffectedFigures();
			while (k.hasMoreElements()) {
				Figure f = k.nextFigure();
d145 1
a145 1
			while (copyFe.hasMoreElements()) {
@


1.7
log
@no message
@
text
@a16 1
import java.awt.Color;
@


1.6
log
@merge dnd (before 5.3)
@
text
@d70 1
a70 1
	
d79 1
a79 1
		
d84 1
a84 1
	
d88 3
a90 1
				f.setAttribute(getAttributeName(), getOriginalValue(f));
d92 1
a92 1
			
d95 1
a95 1
		
d100 1
a100 1
	
d104 5
a108 3
				f.setAttribute(getAttributeName(), getBackupValue());
			}			
			
d111 1
a111 1
		
d115 1
a115 1
		
d119 1
a119 1
		
d123 1
a123 1
		
d131 1
a131 1
		
d135 1
a135 1
		
d140 1
a140 1
		
d148 4
a151 1
				addOriginalValue(f, f.getAttribute(getAttributeName()));
@


1.5
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d27 2
a28 2
    private String      fAttribute;
    private Object      fValue;
d30 28
a57 27
   /**
    * Constructs a change attribute command.
    * @@param name the command name
    * @@param attributeName the name of the attribute to be changed
    * @@param value the new attribute value
    * @@param view the target view
    */
    public ChangeAttributeCommand(String name, String attributeName,
                           Object value, DrawingView view) {
        super(name, view);
        fAttribute = attributeName;
        fValue = value;
    }

    public void execute() {
    	setUndoActivity(createUndoActivity());
    	getUndoActivity().setAffectedFigures(view().selectionElements());
        FigureEnumeration fe = getUndoActivity().getAffectedFigures();
        while (fe.hasMoreElements()) {
	        fe.nextFigure().setAttribute(fAttribute, fValue);
        }
        view().checkDamage();
    }

    public boolean isExecutable() {
        return view().selectionCount() > 0;
    }
d68 2
a69 2
	    private String      myUndoAttribute;
	    private Object      myUndoValue;
d85 7
a91 7
	        FigureEnumeration k = getAffectedFigures();
	        while (k.hasMoreElements()) {
	            Figure f = k.nextFigure();
	            f.setAttribute(getAttributeName(), getOriginalValue(f));
	        }
	        
	        return true;
d99 5
a103 5
	        FigureEnumeration k = getAffectedFigures();
	        while (k.hasMoreElements()) {
	            Figure f = k.nextFigure();
	            f.setAttribute(getAttributeName(), getBackupValue());
	        }			
d141 5
a145 5
	        FigureEnumeration copyFe = getAffectedFigures();
	        while (copyFe.hasMoreElements()) {
	            Figure f = copyFe.nextFigure();
            	addOriginalValue(f, f.getAttribute(getAttributeName()));
	        }
@


1.4
log
@before merge for version 5.3 (dnd, undo,...)
@
text
@d2 1
a2 1
 * @@(#)ChangeAttributeCommand.java 5.2
d4 6
d14 3
d18 1
a18 2
import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.*;
d22 2
d25 1
a25 2
public  class ChangeAttributeCommand
        extends Command {
a26 1
    private DrawingView fView;
d39 1
a39 1
        super(name);
a41 1
        fView = view;
d45 5
a49 4
        FigureEnumeration k = fView.selectionElements();
        while (k.hasMoreElements()) {
            Figure f = k.nextFigure();
            f.setAttribute(fAttribute, fValue);
d51 1
a51 1
        fView.checkDamage();
d55 1
a55 1
        return fView.selectionCount() > 0;
d58 89
a147 2


@


1.3
log
@- SelectionFigure is now an interface. The default implementation CH.ifa.draw.standard.StandardSelectionFigure
- A FigureSelectionListener interface has been introduced in CH.ifa.draw.framework. An DrawingEditor
  is now a FigureSelectionListener and the signature for all selectionChanged() methods has been
  changed to figureSelectionChanged().
- CH.ifa.draw.util.Command is now an interface. A AbstractCommand can be found in CH.ifa.draw.standard.
- All commands used to have a fView field. This has been moved to CH.ifa.draw.standard.AbstactCommand
- A CH.ifa.draw.standard.StandardDrawingView has now a paintComponents() method instead of a paint()
  and update() method. This allows the CH.ifa.draw.util.FloatingTextField to be a javax.swing.JTextField
  instead of a java.awt.TextField.
- CH.ifa.draw.figures.AbstractLineDecorator has been missing
- DrawApplet, DrawApplication and derived classes are now programmed towards the DrawingView interface
  instead of using StandardDrawingView. That leads to occasional cast when some additional StandardDrawingView
  functionality is required in some specialized cases. Applications that were derived from DrawApplication
  and used to override the createContents() methods should now return a DrawingView as well
@
text
@d10 1
d15 2
a16 1
public  class ChangeAttributeCommand extends AbstractCommand {
d18 1
d31 1
a31 1
        super(name, view);
d34 1
d38 1
a38 1
        FigureEnumeration k = view().selectionElements();
d43 1
a43 1
        view().checkDamage();
d47 1
a47 1
        return view().selectionCount() > 0;
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@a9 1
import CH.ifa.draw.util.*;
d14 1
a14 2
public  class ChangeAttributeCommand
        extends Command {
a15 1
    private DrawingView fView;
d28 1
a28 1
        super(name);
a30 1
        fView = view;
d34 1
a34 1
        FigureEnumeration k = fView.selectionElements();
d39 1
a39 1
        fView.checkDamage();
d43 1
a43 1
        return fView.selectionCount() > 0;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)ChangeAttributeCommand.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
