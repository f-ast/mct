head	1.9;
access;
symbols
	jhotdraw54b2-release:1.9
	reorg_6x_split:1.9
	MVC_PHASE1:1.8.0.4
	NEW_ATTRIBUTES:1.8.0.2
	DNOYEB1_ALPHA-2:1.7
	release_JHD54b1:1.8
	BUGFIX_670992:1.7.0.6
	DNOYEB1_ALPHA-1:1.7
	dnoyeb1:1.7.0.4
	repack:1.7.0.2
	Root_repack:1.7
	Before_FigureVisitor:1.7
	JHotDraw_5-3:1.6
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2003.11.09.21.18.46;	author mrfloppy;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.30.00.27.27;	author mrfloppy;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.30.20.40.10;	author mrfloppy;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.19.18.31.32;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.44.33;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.01;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.9
log
@TestSuite: adjusting auto-generated sourcecode (JunitDoclet) to coding style
@
text
@/*
 * @@(#)ToolButton.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.standard;

import CH.ifa.draw.util.*;
import CH.ifa.draw.framework.*;
import javax.swing.*;
import java.awt.*;
import java.util.EventObject;

/**
 * A PaletteButton that is associated with a tool.
 *
 * @@see Tool
 *
 * @@version <$CURRENT_VERSION$>
 */
public class ToolButton extends PaletteButton implements ToolListener {

	private Tool            myTool;
	private PaletteIcon     myIcon;

	public ToolButton(PaletteListener listener, String iconName, String name, Tool tool) {
		super(listener);
		tool.addToolListener(this);
		setEnabled(tool.isUsable());

		// use a Mediatracker to ensure that all the images are initially loaded
		Iconkit kit = Iconkit.instance();
		if (kit == null) {
			throw new JHotDrawRuntimeException("Iconkit instance isn't set");
		}

		Image im[] = new Image[3];
		im[0] = kit.loadImageResource(iconName+"1.gif");
		im[1] = kit.loadImageResource(iconName+"2.gif");
		im[2] = kit.loadImageResource(iconName+"3.gif");

		MediaTracker tracker = new MediaTracker(this);
		for (int i = 0; i < 3; i++) {
			tracker.addImage(im[i], i);
		}
		try {
			tracker.waitForAll();
		}
		catch (Exception e) {
			// ignore exception
		}

		setPaletteIcon(new PaletteIcon(new Dimension(24,24), im[0], im[1], im[2]));
		setTool(tool);
		setName(name);

		// avoid null pointer exception if image could not be loaded
		if (im[0] != null) {
			setIcon(new ImageIcon(im[0]));
		}
		if (im[1] != null) {
			setPressedIcon(new ImageIcon(im[1]));
		}
		if (im[2] != null) {
			setSelectedIcon(new ImageIcon(im[2]));
		}
		setToolTipText(name);
	}

	public Tool tool() {
		return myTool;
	}

	public String name() {
		return getName();
	}

	public Object attributeValue() {
		return tool();
	}

	public Dimension getMinimumSize() {
		return new Dimension(getPaletteIcon().getWidth(), getPaletteIcon().getHeight());
	}

	public Dimension getPreferredSize() {
		return new Dimension(getPaletteIcon().getWidth(), getPaletteIcon().getHeight());
	}

	public Dimension getMaximumSize() {
		return new Dimension(getPaletteIcon().getWidth(), getPaletteIcon().getHeight());
	}

//  Not necessary anymore in JFC due to the support of Icons in JButton
/*
	public void paintBackground(Graphics g) { }

	public void paintNormal(Graphics g) {
		if (fIcon.normal() != null)
			g.drawImage(fIcon.normal(), 0, 0, this);
	}

	public void paintPressed(Graphics g) {
		if (fIcon.pressed() != null)
			g.drawImage(fIcon.pressed(), 0, 0, this);
	}
*/
	public void paintSelected(Graphics g) {
		if (getPaletteIcon().selected() != null) {
			g.drawImage(getPaletteIcon().selected(), 0, 0, this);
		}
	}

	public void paint(Graphics g) {
		// selecting does not work as expected with JFC1.1
		// see JavaBug: 4228035, 4233965
		if (isSelected()) {
			paintSelected(g);
		}
		else {
			super.paint(g);
		}
	}

	public void toolUsable(EventObject toolEvent) {
		setEnabled(true);
	}

	public void toolUnusable(EventObject toolEvent) {
		setEnabled(false);
		setSelected(false);
	}

	public void toolActivated(EventObject toolEvent) {
	}

	public void toolDeactivated(EventObject toolEvent) {
	}

	public void toolEnabled(EventObject toolEvent) {
		setEnabled(true);
	}

	public void toolDisabled(EventObject toolEvent) {
		setEnabled(false);
	}

	protected PaletteIcon getPaletteIcon() {
		return myIcon;
	}

	private void setPaletteIcon(PaletteIcon newIcon) {
		myIcon = newIcon;
	}

	private void setTool(Tool newTool) {
		myTool = newTool;
	}
}
@


1.8
log
@prepare for 5.4 release: various bug fixes
@
text
@d158 2
a159 2
	private void setPaletteIcon(PaletteIcon myIcon) {
		this.myIcon = myIcon;
d162 2
a163 2
	private void setTool(Tool myTool) {
		this.myTool = myTool;
@


1.7
log
@no message
@
text
@d29 2
a30 3
	private String          fName;
	private Tool            fTool;
	private PaletteIcon     fIcon;
d59 3
a61 3
		fIcon = new PaletteIcon(new Dimension(24,24), im[0], im[1], im[2]);
		fTool = tool;
		fName = name;
d77 1
a77 1
		return fTool;
d81 1
a81 1
		return fName;
d89 1
a89 1
		return new Dimension(fIcon.getWidth(), fIcon.getHeight());
d93 1
a93 1
		return new Dimension(fIcon.getWidth(), fIcon.getHeight());
d97 1
a97 1
		return new Dimension(fIcon.getWidth(), fIcon.getHeight());
d115 2
a116 2
		if (fIcon.selected() != null) {
			g.drawImage(fIcon.selected(), 0, 0, this);
d152 12
@


1.6
log
@no message
@
text
@d64 10
a73 3
		setIcon(new ImageIcon(im[0]));
		setPressedIcon(new ImageIcon(im[1]));
		setSelectedIcon(new ImageIcon(im[2]));
@


1.5
log
@merge dnd (before 5.3)
@
text
@d37 1
a37 1
		
d89 1
a89 1
	
d128 1
a128 1
	
d133 1
a133 1
	
d136 1
a136 1
	
d138 8
@


1.4
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d14 2
d18 1
a18 2
import CH.ifa.draw.util.*;
import CH.ifa.draw.framework.*;
d27 1
a27 1
public class ToolButton extends PaletteButton {
d35 3
d124 15
a139 1

@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d2 1
a2 1
 * @@(#)ToolButton.java 5.2
d4 6
d21 1
d23 2
d28 61
a88 57
    private String          fName;
    private Tool            fTool;
    private PaletteIcon     fIcon;

    public ToolButton(PaletteListener listener, String iconName, String name, Tool tool) {
        super(listener);
        // use a Mediatracker to ensure that all the images are initially loaded
        Iconkit kit = Iconkit.instance();
        if (kit == null)
            throw new JHotDrawRuntimeException("Iconkit instance isn't set");

        Image im[] = new Image[3];
        im[0] = kit.loadImageResource(iconName+"1.gif");
        im[1] = kit.loadImageResource(iconName+"2.gif");
        im[2] = kit.loadImageResource(iconName+"3.gif");

        MediaTracker tracker = new MediaTracker(this);
        for (int i = 0; i < 3; i++) {
            tracker.addImage(im[i], i);
        }
        try {
            tracker.waitForAll();
        } catch (Exception e) {  }

        fIcon = new PaletteIcon(new Dimension(24,24), im[0], im[1], im[2]);
        fTool = tool;
        fName = name;

        setIcon(new ImageIcon(im[0]));
        setPressedIcon(new ImageIcon(im[1]));
        setSelectedIcon(new ImageIcon(im[2]));
        setToolTipText(name);
    }

    public Tool tool() {
        return fTool;
    }

    public String name() {
        return fName;
    }

    public Object attributeValue() {
        return tool();
    }

    public Dimension getMinimumSize() {
        return new Dimension(fIcon.getWidth(), fIcon.getHeight());
    }

    public Dimension getPreferredSize() {
        return new Dimension(fIcon.getWidth(), fIcon.getHeight());
    }
    
    public Dimension getMaximumSize() {
        return new Dimension(fIcon.getWidth(), fIcon.getHeight());
    }
d92 1
a92 1
    public void paintBackground(Graphics g) { }
d94 9
a102 9
    public void paintNormal(Graphics g) {
        if (fIcon.normal() != null)
            g.drawImage(fIcon.normal(), 0, 0, this);
    }

    public void paintPressed(Graphics g) {
        if (fIcon.pressed() != null)
            g.drawImage(fIcon.pressed(), 0, 0, this);
    }
d104 16
a119 15
    public void paintSelected(Graphics g) {
        if (fIcon.selected() != null)
            g.drawImage(fIcon.selected(), 0, 0, this);
    }

    public void paint(Graphics g) {
    	// selecting does not work as expected with JFC1.1
    	// see JavaBug: 4228035, 4233965
    	if (isSelected()) {
        	paintSelected(g);
    	}
    	else {
	    	super.paint(g);
    	}
    }
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d28 1
a28 1
            throw new HJDError("Iconkit instance isn't set");
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)ToolButton.java 5.1
d8 1
d46 5
d72 4
d77 2
d90 1
a90 1

d96 10
@


1.1.1.1
log
@
Initial revision.
@
text
@@
