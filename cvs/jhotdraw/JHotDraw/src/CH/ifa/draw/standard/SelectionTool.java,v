head	1.10;
access;
symbols
	jhotdraw54b2-release:1.10
	reorg_6x_split:1.10
	MVC_PHASE1:1.9.0.2
	NEW_ATTRIBUTES:1.8.0.2
	DNOYEB1_ALPHA-2:1.6.4.3
	release_JHD54b1:1.8
	BUGFIX_670992:1.6.0.6
	DNOYEB1_ALPHA-1:1.6.4.2
	dnoyeb1:1.6.0.4
	repack:1.6.0.2
	Root_repack:1.6
	Before_FigureVisitor:1.6
	JHotDraw_5-3:1.5
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2003.05.03.16.03.43;	author ricardo_padilha;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.22.23.58.41;	author mrfloppy;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.30.00.27.27;	author mrfloppy;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.24.14.53.34;	author dnoyeb;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.04.22.56.18;	author mrfloppy;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2002.01.19.18.31.32;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.21.15.19;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.32.01;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.47;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.10;	author jeckel;	state Exp;
branches;
next	;

1.6.4.1
date	2003.01.07.21.23.21;	author dnoyeb;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2003.01.10.04.54.45;	author dnoyeb;	state Exp;
branches;
next	1.6.4.3;

1.6.4.3
date	2003.01.24.16.01.40;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Small bug fix in mouseUp
@
text
@/*
 * @@(#)SelectionTool.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.standard;

import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.UndoableTool;
import CH.ifa.draw.util.UndoableHandle;
import CH.ifa.draw.contrib.dnd.DragNDropTool;
import java.awt.event.MouseEvent;

/**
 * Tool to select and manipulate figures.
 * A selection tool is in one of three states, e.g., background
 * selection, figure selection, handle manipulation. The different
 * states are handled by different child tools.
 * <hr>
 * <b>Design Patterns</b><P>
 * <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
 * <b><a href=../pattlets/sld032.htm>State</a></b><br>
 * SelectionTool is the StateContext and child is the State.
 * The SelectionTool delegates state specific
 * behavior to its current child tool.
 * <hr>
 *
 * @@version <$CURRENT_VERSION$>
 */

public class SelectionTool extends AbstractTool {

	private Tool myDelegationTool = null;

	public SelectionTool(DrawingEditor newDrawingEditor) {
		super(newDrawingEditor);
	}

	/**
	 * Handles mouse down events and starts the corresponding tracker.
	 */
	public void mouseDown(MouseEvent e, int x, int y) {
		super.mouseDown(e, x, y);
		// on MS-Windows NT: AWT generates additional mouse down events
		// when the left button is down && right button is clicked.
		// To avoid dead locks we ignore such events
		if (getDelegateTool() != null) {
			return;
		}

		view().freezeView();

		Handle handle = view().findHandle(e.getX(), e.getY());
		if (handle != null) {
			setDelegateTool(createHandleTracker(view(), handle));
		}
		else {
			Figure figure = drawing().findFigure(e.getX(), e.getY());
			if (figure != null) {
				setDelegateTool(createDragTracker(figure));
			}
			else {
				if (!e.isShiftDown()) {
					view().clearSelection();
				}
				setDelegateTool(createAreaTracker());
			}
		}
		getDelegateTool().activate();
		getDelegateTool().mouseDown(e, x, y);
	}

	/**
	 * Handles mouse moves (if the mouse button is up).
	 * Switches the cursors depending on whats under them.
	 */
	public void mouseMove(MouseEvent evt, int x, int y) {
		if (evt.getSource() == getActiveView() ) {
			DragNDropTool.setCursor(evt.getX(), evt.getY(), getActiveView());
		}
	}

	/**
	 * Handles mouse drag events. The events are forwarded to the
	 * current tracker.
	 */
	public void mouseDrag(MouseEvent e, int x, int y) {
		if (getDelegateTool() != null) { // JDK1.1 doesn't guarantee mouseDown, mouseDrag, mouseUp
			getDelegateTool().mouseDrag(e, x, y);
		}
	}

	/**
	 * Handles mouse up events. The events are forwarded to the
	 * current tracker.
	 */
	public void mouseUp(MouseEvent e, int x, int y) {
		if (getDelegateTool() != null) { // JDK1.1 doesn't guarantee mouseDown, mouseDrag, mouseUp
			getDelegateTool().mouseUp(e, x, y);
			getDelegateTool().deactivate();
			setDelegateTool(null);
		}
		if (view() != null) {
			view().unfreezeView();
			editor().figureSelectionChanged(view());
		}
	}

	/**
	 * Factory method to create a Handle tracker. It is used to track a handle.
	 */
	protected Tool createHandleTracker(DrawingView view, Handle handle) {
		return new HandleTracker(editor(), new UndoableHandle(handle));
	}

	/**
	 * Factory method to create a Drag tracker. It is used to drag a figure.
	 */
	protected Tool createDragTracker(Figure f) {
		return new UndoableTool(new DragTracker(editor(), f));
	}

	/**
	 * Factory method to create an area tracker. It is used to select an
	 * area.
	 */
	protected Tool createAreaTracker() {
		return new SelectAreaTracker(editor());
	}

	protected Tool getDelegateTool() {
		return myDelegationTool;
	}

	protected final void setDelegateTool(Tool newDelegateTool) {
		myDelegationTool = newDelegateTool;
	}
}
@


1.9
log
@no message
@
text
@d111 1
d119 1
a119 1
		return new HandleTracker(editor(), new UndoableHandle(handle, view));
@


1.8
log
@prepare for 5.4 release: various bug fixes
@
text
@d39 1
a39 1
	private Tool fChild = null;
d137 1
a137 1
		return fChild;
d140 2
a141 2
	private void setDelegateTool(Tool newDelegateTool) {
		fChild = newDelegateTool;
@


1.7
log
@Added methods
getChild,setChild,findFigure,findHandle
to assist in making extending the functionality of the Tool easier
No interfaces or functionality has changed.
@
text
@d53 1
a53 1
		if (getChild() != null) {
d59 1
a59 1
		Handle handle = findHandle(e.getX(), e.getY());
d61 1
a61 1
			setChild(createHandleTracker(view(), handle));
d64 1
a64 1
			Figure figure = findFigure(e.getX(), e.getY());
d66 1
a66 1
				setChild(createDragTracker(figure));
d72 1
a72 1
				setChild(createAreaTracker());
d75 2
a76 2
		getChild().activate();
		getChild().mouseDown(e, x, y);
d94 2
a95 2
		if (getChild() != null) { // JDK1.1 doesn't guarantee mouseDown, mouseDrag, mouseUp
			getChild().mouseDrag(e, x, y);
d104 4
a107 4
		if (getChild() != null) { // JDK1.1 doesn't guarantee mouseDown, mouseDrag, mouseUp
			getChild().mouseUp(e, x, y);
			getChild().deactivate();
			setChild(null);
d135 3
a137 11
	
	protected Handle findHandle(int x, int y){
		return view().findHandle(x,y);
	}
	
	protected Figure findFigure(int x, int y){
		return drawing().findFigure(x, y);
	}
	
	protected void setChild(Tool tool){
		fChild = tool;
d139 3
a141 3
	
	protected Tool getChild(){
		return fChild;
@


1.6
log
@after variou merges... (before 5.4 release)
@
text
@d53 1
a53 1
		if (fChild != null) {
d59 1
a59 1
		Handle handle = view().findHandle(e.getX(), e.getY());
d61 1
a61 1
			fChild = createHandleTracker(view(), handle);
d64 1
a64 1
			Figure figure = drawing().findFigure(e.getX(), e.getY());
d66 1
a66 1
				fChild = createDragTracker(figure);
d72 1
a72 1
				fChild = createAreaTracker();
d75 2
a76 2
		fChild.activate();
		fChild.mouseDown(e, x, y);
d94 2
a95 2
		if (fChild != null) { // JDK1.1 doesn't guarantee mouseDown, mouseDrag, mouseUp
			fChild.mouseDrag(e, x, y);
d104 4
a107 4
		if (fChild != null) { // JDK1.1 doesn't guarantee mouseDown, mouseDrag, mouseUp
			fChild.mouseUp(e, x, y);
			fChild.deactivate();
			fChild = null;
d134 16
@


1.6.4.1
log
@1. Added getDesktop to the DrawingEditor.  added null returns to all Classes that dont fully support
   the Desktop architecture yet, like the applets.

2. Added a figureSelection listener to the DrawingEditor so one can register with the DrawingEditor to
   hear figure selection events.  You can still register with the individual DrawingViews if you wish.
   The DrawingEditor will guarantee that it only fires this event on the active view, so it saves a listener
   from having to register and unregister with views to hear this event each time the activeView changes.
   All Commands were doing this register/unregister dance.

3. AbstractCommand now registers for figureSelectionEvents with the drawingEditor as opposed to the
   DrawingView.

4. Went back to viewCreated and viewDestroying naming.  flip flopping.  Its actually more accurate.  the
   real issue is that 2 events are missing, viewDestroyed and viewCreating.  dont need them yet, but
   they may materialize in the future.

5. Went back to Tool CompositeTool being enabled even when no figure is selected.

6. FigureSelectionListener now extends java.util.EventListener now because I am too lazy to write
   an event handler just yet.

7. implemented new findFigureInside() fix.  needs testing.

8. standardDrawingView selectionZordered now returns figures in the proper order(not reversed).
@
text
@a64 1
			
@


1.6.4.2
log
@1.  Tool now accepts DrawingViewMouseEvent as opposed to java.awt.MouseEvent and x,y ints.
2. compositeFigure now uses constrained mouse values throughout.
3. nested CreationTOol was calling drawing() before it was setting the view.  should lead to NPE.  this tool still seems broken
   i dont think its needed anymore?
4. bug in splitConnectionTool mouse down. setEndConnector(findConnector(ex, ex, c)); needs to be ex and ey
5. made some of StandardDrawingViews inner class listners protected.
@
text
@d18 1
a18 1

d48 2
a49 6
	public void mouseDown(DrawingViewMouseEvent dvme) {
		super.mouseDown(dvme);
		// use event coordinates to supress any kind of
		// transformations like constraining points to a grid
		setAnchorX( dvme.getMouseEvent().getX() );
		setAnchorY( dvme.getMouseEvent().getY() );
d59 1
a59 1
		Handle handle = view().findHandle(getAnchorX(), getAnchorY());
d64 1
a64 1
			Figure figure = drawing().findFigure(getAnchorX(), getAnchorY());
d70 1
a70 1
				if (!dvme.getMouseEvent().isShiftDown()) {
d77 1
a77 1
		fChild.mouseDown(dvme);
d84 3
a86 3
	public void mouseMove(DrawingViewMouseEvent dvme) {
		if (dvme.getDrawingView() == getActiveView() ) {
			DragNDropTool.setCursor(dvme.getMouseEvent().getX(), dvme.getMouseEvent().getY(), getActiveView());
d94 1
a94 1
	public void mouseDrag(DrawingViewMouseEvent dvme) {
d96 1
a96 1
			fChild.mouseDrag(dvme);
d104 1
a104 1
	public void mouseUp(DrawingViewMouseEvent dvme) {
d106 1
a106 1
			fChild.mouseUp(dvme);
@


1.6.4.3
log
@[ 673096 ] FigureTransferCommand has a wrong method
other enhancements for extendability.  No other signatures changed.
@
text
@d57 1
a57 1
		if (getChildTool() != null) {
d63 1
a63 1
		Handle handle = findHandle(getAnchorX(), getAnchorY());
d65 1
a65 1
			setChildTool(createHandleTracker(view(), handle));
d68 1
a68 1
			Figure figure = findFigure(getAnchorX(), getAnchorY());
d71 1
a71 1
				setChildTool(createDragTracker(figure));
d77 1
a77 1
				setChildTool(createAreaTracker());
d80 2
a81 2
		getChildTool().activate();
		getChildTool().mouseDown(dvme);
a83 7
	protected Figure findFigure(int x, int y){
		 return drawing().findFigure(x, y);
	}
	
	protected Handle findHandle(int x, int y){
		return view().findHandle(x,y);
	}
d99 2
a100 2
		if (getChildTool() != null) { // JDK1.1 doesn't guarantee mouseDown, mouseDrag, mouseUp
			getChildTool().mouseDrag(dvme);
d109 4
a112 4
		if (getChildTool() != null) { // JDK1.1 doesn't guarantee mouseDown, mouseDrag, mouseUp
			getChildTool().mouseUp(dvme);
			getChildTool().deactivate();
			setChildTool(null);
a138 6
	}
	protected Tool getChildTool(){
		return fChild;
	}
	protected void setChildTool(Tool tool){
		fChild = tool;
@


1.5
log
@no message
@
text
@d17 1
a17 2
import CH.ifa.draw.contrib.DragNDropTool;
import java.awt.*;
d49 1
d75 1
a76 1
		fChild.activate();
d84 3
a86 1
		DragNDropTool.setCursor(evt.getX(), evt.getY(), view());
a103 1
		view().unfreezeView();
d108 3
@


1.4
log
@merge dnd (before 5.3)
@
text
@a78 8
	public void activate() {
		super.activate();
	}

	public void deactivate() {
		super.deactivate();
	}

@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d17 1
d42 2
a43 2
	public SelectionTool(DrawingView view) {
		super(view);
d66 1
a66 1
				fChild = createDragTracker(view(), figure);
d72 1
a72 1
				fChild = createAreaTracker(view());
d79 16
d122 1
a122 1
		return new HandleTracker(view, new UndoableHandle(handle, view));
d128 2
a129 2
	protected Tool createDragTracker(DrawingView view, Figure f) {
		return new UndoableTool(new DragTracker(view, f));
d136 2
a137 2
	protected Tool createAreaTracker(DrawingView view) {
		return new SelectAreaTracker(view);
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)SelectionTool.java 5.2
d4 6
d14 3
a18 2
import java.util.Vector;
import CH.ifa.draw.framework.*;
d33 2
d39 1
a39 1
    private Tool fChild = null;
d41 81
a121 77
    public SelectionTool(DrawingView view) {
        super(view);
    }

    /**
     * Handles mouse down events and starts the corresponding tracker.
     */
    public void mouseDown(MouseEvent e, int x, int y)
    {
        // on MS-Windows NT: AWT generates additional mouse down events
        // when the left button is down && right button is clicked.
        // To avoid dead locks we ignore such events
        if (fChild != null)
            return;

        view().freezeView();

        Handle handle = view().findHandle(e.getX(), e.getY());
        if (handle != null) {
            fChild = createHandleTracker(view(), handle);
        }
        else {
            Figure figure = drawing().findFigure(e.getX(), e.getY());
            if (figure != null) {
                fChild = createDragTracker(view(), figure);
            }
            else {
                if (!e.isShiftDown()) {
                    view().clearSelection();
                }
                fChild = createAreaTracker(view());
            }
        }
        fChild.mouseDown(e, x, y);
    }

    /**
     * Handles mouse drag events. The events are forwarded to the
     * current tracker.
     */
    public void mouseDrag(MouseEvent e, int x, int y) {
        if (fChild != null) // JDK1.1 doesn't guarantee mouseDown, mouseDrag, mouseUp
            fChild.mouseDrag(e, x, y);
    }

    /**
     * Handles mouse up events. The events are forwarded to the
     * current tracker.
     */
    public void mouseUp(MouseEvent e, int x, int y) {
        view().unfreezeView();
        if (fChild != null) // JDK1.1 doesn't guarantee mouseDown, mouseDrag, mouseUp
            fChild.mouseUp(e, x, y);
        fChild = null;
    }

    /**
     * Factory method to create a Handle tracker. It is used to track a handle.
     */
    protected Tool createHandleTracker(DrawingView view, Handle handle) {
        return new HandleTracker(view, handle);
    }

    /**
     * Factory method to create a Drag tracker. It is used to drag a figure.
     */
    protected Tool createDragTracker(DrawingView view, Figure f) {
        return new DragTracker(view, f);
    }

    /**
     * Factory method to create an area tracker. It is used to select an
     * area.
     */
    protected Tool createAreaTracker(DrawingView view) {
        return new SelectAreaTracker(view);
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)SelectionTool.java 5.1
d41 1
a41 1
        // on Windows NT: AWT generates additional mouse down events
@


1.1.1.1
log
@
Initial revision.
@
text
@@
