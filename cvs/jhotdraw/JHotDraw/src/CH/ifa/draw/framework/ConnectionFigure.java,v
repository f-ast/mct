head	1.6;
access;
symbols
	jhotdraw54b2-release:1.6
	reorg_6x_split:1.6
	MVC_PHASE1:1.6.0.10
	NEW_ATTRIBUTES:1.6.0.8
	DNOYEB1_ALPHA-2:1.6
	release_JHD54b1:1.6
	BUGFIX_670992:1.6.0.6
	DNOYEB1_ALPHA-1:1.6
	dnoyeb1:1.6.0.4
	repack:1.6.0.2
	Root_repack:1.6
	Before_FigureVisitor:1.6
	JHotDraw_5-3:1.5
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2002.08.04.22.45.17;	author mrfloppy;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.24.20.32.00;	author mrfloppy;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.24.20.25.12;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.29.13.42.13;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.6
log
@after variou merges... (before 5.4 release)
@
text
@/*
 * @@(#)ConnectionFigure.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.framework;

import java.awt.Point;

/**
 * Figures to connect Connectors provided by Figures.
 * A ConnectionFigure knows its start and end Connector.
 * It uses the Connectors to locate its connection points.<p>
 * A ConnectionFigure can have multiple segments. It provides
 * operations to split and join segments.
 *
 * <hr>
 * <b>Design Patterns</b><P>
 * <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
 * <b><a href=../pattlets/sld034.htm>Strategy</a></b><br>
 * Strategy is used encapsulate the algorithm to locate the connection point.
 * ConnectionFigure is the Strategy context and Connector is the Strategy.<br>
 * <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
 * <b><a href=../pattlets/sld026.htm>Observer</a></b><br>
 * Observer is used to track changes of the connected figures. A connection
 * figure registers itself as listeners or observers of the source and
 * target connector.
 * <hr>
 *
 * @@see Connector
 *
 * @@version <$CURRENT_VERSION$>
 */

public interface ConnectionFigure extends Figure, FigureChangeListener {

	/**
	 * Sets the start Connector of the connection.
	 * @@param start the start connector of the connection
	 */
	public void connectStart(Connector start);

	/**
	 * Sets the end Connector of the connection.
	 * @@param end the end connector of the connection
	 */
	public void connectEnd(Connector end);

	/**
	 * Updates the connection
	 */
	public void updateConnection();

	/**
	 * Disconnects the start figure from the dependent figure
	 */
	public void disconnectStart();

	/**
	 * Disconnects the end figure from the dependent figure
	 */
	public void disconnectEnd();

	/**
	 * Gets the start Connector
	 */
	public Connector getStartConnector();

	/**
	 * Gets the end Connector.
	 */
	public Connector getEndConnector();

	/**
	 * Checks if two figures can be connected. Implement this method
	 * to constrain the allowed connections between figures.
	 */
	public boolean canConnect(Figure start, Figure end);

	/**
	 * Checks if the ConnectionFigure connects the same figures.
	 */
	public boolean connectsSame(ConnectionFigure other);

	/**
	 * Sets the start point.
	 */
	public void startPoint(int x, int y);

	/**
	 * Sets the end point.
	 */
	public void endPoint(int x, int y);

	/**
	 * Gets the start point.
	 */
	public Point startPoint();

	/**
	 * Gets the end point.
	 */
	public Point endPoint();

	/**
	 * Sets the position of the point at the given position
	 */
	public void setPointAt(Point p, int index);

	/**
	 * Gets the Point at the given position
	 */
	public Point pointAt(int index);

	/**
	 * Gets the number of points or nodes of the connection
	 */
	public int pointCount();

	/**
	 * Splits the hit segment.
	 * @@param x the x position where the figure should be split
	 * @@param y the y position where the figure should be split
	 * @@return the index of the splitting point
	 */
	public int splitSegment(int x, int y);


	/**
	 * Joins the hit segments.
	 * @@param x the position where the figure should be joined.
	 * @@param y the position where the figure should be joined.
	 * @@return whether the segment was joined
	 */
	public boolean joinSegments(int x, int y);
	
	/**
	 * Gets the start figure of the connection.
	 */
	public Figure startFigure();
  
	/**
	 * Gets the end figure of the connection.
	 */
	public Figure endFigure();    
}
@


1.5
log
@before merge for version 5.3 (dnd, undo,...) - 2
@
text
@d45 1
a45 1
	 * @@param figure the start figure of the connection
d51 1
a51 1
	 * @@param figure the end figure of the connection
d128 2
a129 1
	 * @@param x, y the position where the figure should be split
d137 2
a138 1
	 * @@param x, y the position where the figure should be joined.
@


1.4
log
@before merge for version 5.3 (dnd, undo,...)
@
text
@d2 1
a2 1
 * @@(#)ConnectionFigure.java 5.2
d4 6
a14 3
import java.io.Serializable;
import CH.ifa.draw.util.*;
import CH.ifa.draw.framework.*;
d37 2
d43 107
a149 97
    /**
     * Sets the start Connector of the connection.
     * @@param figure the start figure of the connection
     */
    public void connectStart(Connector start);

    /**
     * Sets the end Connector of the connection.
     * @@param figure the end figure of the connection
     */
    public void connectEnd(Connector end);

    /**
     * Updates the connection
     */
    public void updateConnection();

    /**
     * Disconnects the start figure from the dependent figure
     */
    public void disconnectStart();

    /**
     * Disconnects the end figure from the dependent figure
     */
    public void disconnectEnd();

    /**
     * Gets the start Connector
     */
    public Connector start();

    /**
     * Gets the end Connector.
     */
    public Connector end();

    /**
     * Checks if two figures can be connected. Implement this method
     * to constrain the allowed connections between figures.
     */
    public boolean canConnect(Figure start, Figure end);

    /**
     * Checks if the ConnectionFigure connects the same figures.
     */
    public boolean connectsSame(ConnectionFigure other);

    /**
     * Sets the start point.
     */
    public void startPoint(int x, int y);

    /**
     * Sets the end point.
     */
    public void endPoint(int x, int y);

    /**
     * Gets the start point.
     */
    public Point startPoint();

    /**
     * Gets the end point.
     */
    public Point endPoint();

    /**
     * Sets the position of the point at the given position
     */
    public void setPointAt(Point p, int index);

    /**
     * Gets the Point at the given position
     */
    public Point pointAt(int index);

    /**
     * Gets the number of points or nodes of the connection
     */
    public int pointCount();

    /**
     * Splits the hit segment.
     * @@param x, y the position where the figure should be split
     * @@return the index of the splitting point
     */
    public int splitSegment(int x, int y);


    /**
     * Joins the hit segments.
     * @@param x, y the position where the figure should be joined.
     * @@return whether the segment was joined
     */
    public boolean joinSegments(int x, int y);
@


1.3
log
@- SelectionFigure is now an interface. The default implementation CH.ifa.draw.standard.StandardSelectionFigure
- A FigureSelectionListener interface has been introduced in CH.ifa.draw.framework. An DrawingEditor
  is now a FigureSelectionListener and the signature for all selectionChanged() methods has been
  changed to figureSelectionChanged().
- CH.ifa.draw.util.Command is now an interface. A AbstractCommand can be found in CH.ifa.draw.standard.
- All commands used to have a fView field. This has been moved to CH.ifa.draw.standard.AbstactCommand
- A CH.ifa.draw.standard.StandardDrawingView has now a paintComponents() method instead of a paint()
  and update() method. This allows the CH.ifa.draw.util.FloatingTextField to be a javax.swing.JTextField
  instead of a java.awt.TextField.
- CH.ifa.draw.figures.AbstractLineDecorator has been missing
- DrawApplet, DrawApplication and derived classes are now programmed towards the DrawingView interface
  instead of using StandardDrawingView. That leads to occasional cast when some additional StandardDrawingView
  functionality is required in some specialized cases. Applications that were derived from DrawApplication
  and used to override the createContents() methods should now return a DrawingView as well
@
text
@d9 3
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@a8 3
import java.io.Serializable;
import CH.ifa.draw.util.*;
import CH.ifa.draw.framework.*;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)ConnectionFigure.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
