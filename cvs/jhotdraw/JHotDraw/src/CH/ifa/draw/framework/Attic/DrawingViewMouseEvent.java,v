head	1.1;
access;
symbols
	jhotdraw54b2-release:1.1
	DNOYEB1_ALPHA-2:1.1.2.3
	DNOYEB1_ALPHA-1:1.1.2.3
	dnoyeb1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2003.01.10.14.40.50;	author dnoyeb;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.01.10.14.40.51;	author dnoyeb;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.01.10.20.10.48;	author dnoyeb;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.01.13.03.14.03;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file DrawingViewMouseEvent.java was initially added on branch dnoyeb1.
@
text
@@


1.1.2.1
log
@Neglected to add this class to last nights committ.  Go figure... its the main change.

1.  Tool now accepts DrawingViewMouseEvent as opposed to java.awt.MouseEvent and x,y ints.
2. compositeFigure now uses constrained mouse values throughout.
3. nested CreationTOol was calling drawing() before it was setting the view.  should lead to NPE.  this tool still seems broken
   i dont think its needed anymore?
4. bug in splitConnectionTool mouse down. setEndConnector(findConnector(ex, ex, c)); needs to be ex and ey
5. made some of StandardDrawingViews inner class listners protected.
@
text
@a0 54
/*
 * DrawingViewEvent.java
 *
 * Created on January 9, 2003, 2:07 PM
 */

package CH.ifa.draw.framework;
import java.awt.event.*;

/**
 * we need to make this not to extend EventObject sooner or later? or is
 * EventObject in a standard java library?
 * @@author  CL Gilbert <dnoyeb@@users.sourceforge.net>
 */
public class DrawingViewMouseEvent extends java.util.EventObject {
	private int x;
	private int y;
	private MouseEvent me;
	
    /**
     * Constructs a DrawingViewMouseEvent object with the specified source
	 * DrawingView, modifiers, coordinates, and click count.
     *
     * @@param source       the DrawingView that originated the event
	 * @@param constrained_x the horizontal x coordinate for the mouse location,
	 *		                constrained by the DrawingViews constrainer.
	 * @@param constrained_y the vertical y coordinate for the mouse location,
	 *		                constrained by the DrawingViews constrainer.
	 *
	 * @@see	PointConstrainer
     */
	public DrawingViewMouseEvent(DrawingView source,MouseEvent e,int constrained_x, int constrained_y) {
		super(source);
		me = e;
		this.x = constrained_x;
		this.y = constrained_y;
	}

	public DrawingView getDrawingView(){
		return (DrawingView) getSource();
	}
	public MouseEvent getMouseEvent(){
		return me;
	}
	/**
	 * Value constrained by the DrawingViews Constrainer.
	 */
	public int getX(){
		return x;
	}
	public int getY(){
		return y;
	}
}
@


1.1.2.2
log
@DND now 'almost' implements Undo/Redo.
It works but its 2 seperate actions, so it takes 2 actions to undo
and 2 actions to redo.  havent found out how to remedy this yet.
Since the Drag gesture may be different on different platforms one must
either implement a JHD drag gesture recognizer, which is not the correct approach.
Or one must make the tool sufficietly generic to handle and undo drags from all platforms.

shooting for the latter.  DND needs some work.  But its still working.
@
text
@d2 1
a2 1
 * @@(#)DrawingViewMouseEvent.java
d4 1
a4 6
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
d6 1
d12 2
a13 4
 * {@@link java.util.EventObject EventObject} in a standard java library?
 *
 * @@author  CL Gilbert<dnoyeb@@users.sourceforge.net>
 * @@version <$CURRENT_VERSION$>
d46 1
a46 3
	 * X value constrained by the {@@link DrawingView DrawingViews} Constrainer.
	 * @@return int The constrained x value of the event.
	 * @@see {@@link PointConstrainer PointConstrainer}
a50 5
	/**
	 * Y value constrained by the {@@link DrawingView DrawingViews} Constrainer.
	 * @@return int The constrained y value of the event.
	 * @@see {@@link PointConstrainer PointConstrainer}
	 */
@


1.1.2.3
log
@1. javadoc comments and corrections and clarifications
2. Drawing no longer exposes its drawing change listener, but has a method for those who want the drawing to request all views of it to be updated.
3. all removeAll() methods in CompositeFigure now have single consistent implementation.
4. standardDrawing unlock calls notify instead of notifyAll since only 1 can grab the lock anyway.
@
text
@d54 1
a54 1
	 * @@see PointConstrainer
d62 1
a62 1
	 * @@see PointConstrainer
@


