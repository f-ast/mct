head	1.5;
access;
symbols
	jhotdraw54b2-release:1.5
	reorg_6x_split:1.5
	MVC_PHASE1:1.5.0.10
	NEW_ATTRIBUTES:1.5.0.8
	DNOYEB1_ALPHA-2:1.5.4.4
	release_JHD54b1:1.5
	BUGFIX_670992:1.5.0.6
	DNOYEB1_ALPHA-1:1.5.4.3
	dnoyeb1:1.5.0.4
	repack:1.5.0.2
	Root_repack:1.5
	Before_FigureVisitor:1.5
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2002.09.07.12.27.28;	author mrfloppy;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2002.08.04.22.45.17;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.09;	author jeckel;	state Exp;
branches;
next	;

1.5.4.1
date	2003.01.13.03.14.03;	author dnoyeb;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2003.01.14.18.24.07;	author dnoyeb;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2003.01.15.21.04.11;	author dnoyeb;	state Exp;
branches;
next	1.5.4.4;

1.5.4.4
date	2003.01.26.00.51.04;	author dnoyeb;	state Exp;
branches;
next	;


desc
@@


1.5
log
@removed remains of FigureAttributeConstant.getName() and some code-clean up
@
text
@/*
 * @@(#)FigureChangeListener.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.framework;

import java.util.EventListener;

/**
 * Listener interested in Figure changes.
 *
 * @@version <$CURRENT_VERSION$>
 */
public interface FigureChangeListener extends EventListener {

	/**
	 * Sent when an area is invalid
	 */
	public void figureInvalidated(FigureChangeEvent e);

	/**
	 * Sent when a figure changed
	 */
	public void figureChanged(FigureChangeEvent e);

	/**
	 * Sent when a figure was removed
	 */
	public void figureRemoved(FigureChangeEvent e);

	/**
	 * Sent when requesting to remove a figure.
	 */
	public void figureRequestRemove(FigureChangeEvent e);

	/**
	 * Sent when an update should happen.
	 *
	 */
	public void figureRequestUpdate(FigureChangeEvent e);
}
@


1.5.4.1
log
@1. javadoc comments and corrections and clarifications
2. Drawing no longer exposes its drawing change listener, but has a method for those who want the drawing to request all views of it to be updated.
3. all removeAll() methods in CompositeFigure now have single consistent implementation.
4. standardDrawing unlock calls notify instead of notifyAll since only 1 can grab the lock anyway.
@
text
@d24 1
a24 1
	 * Sent when the whole figure is invalid (dirty and in need of redraw).
a29 1
	 * give an example of a use please???
d44 1
a44 13
	 * Sent when the figure requests to be redrawn immediately.
	 * This is of primary use to figures that change themselves without outside
	 * intervention.  An example of that would be an animated figure where the
	 * engine for change is within the figure.  In this case when the figure's 
	 * displayed image changes those that contain it need to know so they can
	 * redraw it immediately.  Typically the drawing will listen for this event
	 * and upon receiving it, notify all of its DrawingViews of the area in need
	 * of redraw.  The area to be redrawn is within a <code>figureIntalidated
	 * <code> event.
	 * This is not the case for {@@link CH.ifa.draw.samples.javadraw.AnimationDecorator
	 * AnimationDecorator} since it is manipulated by an external {@@link 
	 * CH.ifa.draw.samples.javadraw.Animator Animator} that calls {@@link
	 * CH.ifa.draw.framework.DrawingView#checkDamage checkDamage()} for it.
a45 2
	 * @@see #figureInvalidated
	 * @@see DrawingChangeListener#drawingRequestUpdate
@


1.5.4.2
log
@DecoratorFigure is 'changed'  I think it needs reworking.  not its only used durint draw(Graphics g) but I don't think
that was its real intention?

The Figure added or removed is nolonger changed during the add or remove process.  Thus add and remove do not return
values.
orphan is used internally to the drawing only.
remove calls figure.remove() which intern orphans the figure.
remove(Figure f) is still present and used but currently not needed.  call figure.remove() instead.
perhaps we can add a method on the figure enumerator to 'remove' all the figures within it.
Figure no longer exposes its listeners.  call methods on figure to send events.


Serialization in every form needs cleanup now.  Some due to earlier changes made by myself like making listeners of
inner classes, but not storing the listener when the figures are stored. (since the figures think the inner listener
is their container.)
@
text
@d24 1
a24 2
	 * Sent when the whole figure, or a portion of it is not invalid.  This is
	 * an indication that the figure needs to be redrawn.
a30 1
	 * seems like invalidate is enough !!!dnoyeb!!!
d35 1
a35 5
	 * Sent when a figure has been released from the undo/redo stack, or when
	 * the figure is being destryoed without ever entering the undo/redo stack.
	 * Figure will not be valid after receipt of this event.
	 * 
	 * @@see Figure#release
d40 1
a40 4
	 * This is sent by a figure when it is requesting to be removed from the
	 * container.  The container should remove the figure in response to this event.
	 *
	 * @@see Figure#remove
d53 1
a53 1
	 * </code> event.
@


1.5.4.3
log
@
Lets have a moment of silence for DecoratorFigure.....It was a good figure ;{

Anything which happens inside the drawing after figure add must be undone before figure orphan.  It must also not
be exposed to anyobject outside the drawing.
Decorator figure retired in favor of a figureManipulator and the other functions being implemented by a composite
figure(BorderDecorator).
AdnimationDecorator retired in favor of AnimationManipulator.
A figure can have only 1 container. This is making the border tool have a hard time.

Lots of comments added

next phase:
orphan will disappear.  only add and remove remain.  All figure related resources belong to the figures and no other
object should care about figure.release.
split the figureListener into a figureContainer listener and a figureChangeListener.
Fix BorderDecorator.
Fix ConnectedText.
view.checkDamage to call drawing.update()
@
text
@d31 2
a32 4
	 * Should be fired when shape / layout has changed
	 * This is different from JFC/Swing terminology in which this would be called invalidate.
	 * Here invalidate means a portion is in need of repaint.
	 * A composite figure would fire this after it has removed one of its containees
d37 3
a39 11
	 * Sent when a figure has been removed from the drawing.  this event is 
	 * meaningless and nobody should be using it.  This is NOT sent when the
	 * figure is removed from the drawing.  it is sent when the figures resources
	 * have been released.  It needs to be renamed.
	 * No object should care about the figure release message.  No objects but
	 * containers should care about figureRequestRemove.  any actions taken on
	 * behalf of figureRequestRemove that are not by the container are subject 
	 * to create difficulties for the undo/redo architecture since they will not
	 * be recorded.
	 * If you do not contain this figure, you have no business responding to this event. 
	 * Going to break this out into a seperate listener soon.
a47 2
	 * If you do not contain this figure, you have no business responding to this event. 
	 * Going to break this out into a seperate listener soon.
@


1.5.4.4
log
@CompositeFigure does not return figures from add, remove, orphan anymore
new method, restore added to bring back orphaned figures
compositeFigure keeps record of its orphans for the restore method
NullFigures inserted as placeholders into the figureList
dumps record and nullFigures when remove(figure) called. this safely restores
figures to their old places.
figureRequestRemove and figureRemove events eliminated.
Group and Ungroup commands redone to respect these new ideas.
have not done anything with delete, cut, copy, paste yet.
NullFigure added 0,0 for its display box, else throwing exceptions
@
text
@d39 27
@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@d24 1
a24 1
	 *  Sent when an area is invalid
a47 1

@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@a13 1
import java.awt.Rectangle;
@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)FigureChangeListener.java 5.2
d4 6
d20 1
d24 25
a48 25
    /**
     *  Sent when an area is invalid
     */
    public void figureInvalidated(FigureChangeEvent e);

    /**
     * Sent when a figure changed
     */
    public void figureChanged(FigureChangeEvent e);

    /**
     * Sent when a figure was removed
     */
    public void figureRemoved(FigureChangeEvent e);

    /**
     * Sent when requesting to remove a figure.
     */
    public void figureRequestRemove(FigureChangeEvent e);

    /**
     * Sent when an update should happen.
     *
     */
    public void figureRequestUpdate(FigureChangeEvent e);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)FigureChangeListener.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
