head	1.4;
access;
symbols
	jhotdraw54b2-release:1.4
	reorg_6x_split:1.4
	MVC_PHASE1:1.4.0.10
	NEW_ATTRIBUTES:1.4.0.8
	DNOYEB1_ALPHA-2:1.4
	release_JHD54b1:1.4
	BUGFIX_670992:1.4.0.6
	DNOYEB1_ALPHA-1:1.4
	dnoyeb1:1.4.0.4
	repack:1.4.0.2
	Root_repack:1.4
	Before_FigureVisitor:1.4
	JHotDraw_5-3:1.3
	JHotDraw_5-2_merged:1.2
	JHotDraw_5-1_initial:1.1
	start:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.08.04.22.45.17;	author mrfloppy;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.24.20.44.32;	author mrfloppy;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.09.15.31.46;	author mrfloppy;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.12.14.57.08;	author jeckel;	state Exp;
branches;
next	;


desc
@@


1.4
log
@after variou merges... (before 5.4 release)
@
text
@/*
 * @@(#)Connector.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */

package CH.ifa.draw.framework;

import java.awt.*;
import java.io.Serializable;

import CH.ifa.draw.util.*;

/**
 * Connectors know how to locate a connection point on a figure.
 * A Connector knows its owning figure and can determine either
 * the start or the endpoint of a given connection figure. A connector
 * has a display box that describes the area of a figure it is
 * responsible for. A connector can be visible but it doesn't have
 * to be.<br>
 * <hr>
 * <b>Design Patterns</b><P>
 * <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
 * <b><a href=../pattlets/sld004.htm>Strategy</a></b><br>
 * Connector implements the strategy to determine the connections points.<br>
 * <img src="images/red-ball-small.gif" width=6 height=6 alt=" o ">
 * <b><a href=../pattlets/sld016.htm>Factory Method</a></b><br>
 * Connectors are created by the Figure's factory method connectorAt.
 * <hr>
 *
 * @@see Figure#connectorAt
 * @@see ConnectionFigure
 *
 * @@version <$CURRENT_VERSION$>
 */
public interface Connector extends Serializable, Storable {

	/**
	 * Finds the start point for the connection.
	 */
	public abstract Point findStart(ConnectionFigure connection);

	/**
	 * Finds the end point for the connection.
	 */
	public abstract Point findEnd(ConnectionFigure connection);

	/**
	 * Gets the connector's owner.
	 */
	public abstract Figure owner();

	/**
	 * Gets the display box of the connector.
	 */
	public abstract Rectangle displayBox();

	/**
	 * Tests if a point is contained in the connector.
	 */
	public abstract boolean containsPoint(int x, int y);

	/**
	 * Draws this connector. Connectors don't have to be visible
	 * and it is OK leave this method empty.
	 */
	public abstract void draw(Graphics g);

	/**
	 * Requests that the connector should show itself or hide itself.  The
	 * ConnectionFigure which desires to connect to this Connector is passed in.
	 * If a connector should show itself it should do so when draw is called, if
	 * so desired.
	 */
	public void connectorVisibility(boolean isVisible, ConnectionFigure courtingConnection);
}
@


1.3
log
@before merge for version 5.3 (dnd, undo,...) - 3
@
text
@d74 7
a81 1

@


1.2
log
@Merge to JHotDraw 5.2 (using JFC/Swing GUI components)
@
text
@d2 1
a2 1
 * @@(#)Connector.java 5.2
d4 6
d38 2
d43 30
a72 30
    /**
     * Finds the start point for the connection.
     */
    public abstract Point findStart(ConnectionFigure connection);

    /**
     * Finds the end point for the connection.
     */
    public abstract Point findEnd(ConnectionFigure connection);

    /**
     * Gets the connector's owner.
     */
    public abstract Figure owner();

    /**
     * Gets the display box of the connector.
     */
    public abstract Rectangle displayBox();

    /**
     * Tests if a point is contained in the connector.
     */
    public abstract boolean containsPoint(int x, int y);

    /**
     * Draws this connector. Connectors don't have to be visible
     * and it is OK leave this method empty.
     */
    public abstract void draw(Graphics g);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * @@(#)Connector.java 5.1
@


1.1.1.1
log
@
Initial revision.
@
text
@@
