<<<
abstract public class DNDHelper implements DragGestureListener, DragSourceListener, DropTargetListener {

    abstract protected DrawingView view (); protected Boolean autoscrollState;
    protected DragGestureRecognizer dgr;
    protected DropTarget dt;

    protected boolean createDragGestureRecognizer ();
    protected boolean createDropTarget ();
    protected boolean supportDropTargetDragEvent (DropTargetDragEvent dtde);
    protected static Object ProcessReceivedData (DataFlavor flavor, Transferable transferable); <<<

    protected void destroyDropTarget ();
    public boolean setDragSourceActive (boolean state);
    public boolean setDropTargetActive (boolean state); <<<

    public void dragDropEnd (DragSourceDropEvent dsde);
    public void dragEnter (DragSourceDragEvent dsde);
    public void dragEnter (DropTargetDragEvent dtde);
    public void dragExit (DragSourceEvent dse);
    public void dragExit (DropTargetEvent dte);
    public void dragGestureRecognized (DragGestureEvent dge);
    public void dragOver (DragSourceDragEvent dsde);
    public void dragOver (DropTargetDragEvent dtde);
    public void drop (DropTargetDropEvent dtde);
    public void dropActionChanged (DragSourceDragEvent dsde);
    public void dropActionChanged (DropTargetDragEvent dtde);
}

>>>
abstract public class DNDHelper {

    protected DragGestureListener getDragGestureListener ();
    protected DragGestureRecognizer createDragGestureRecognizer (DragGestureListener dgl);
    protected DragGestureRecognizer getDragGestureRecognizer ();
    protected DragSourceListener createDragSourceListener ();
    protected DropTarget createDropTarget ();
    protected DropTargetListener createDropTargetListener ();
    protected DropTargetListener getDropTargetListener ();
    abstract protected CH.ifa.draw.framework.DrawingEditor editor ();
    abstract protected CH.ifa.draw.framework.DrawingView view ();
    protected int getDragSourceActions ();
    protected int getDropTargetActions ();
    protected static Object ProcessReceivedData (DataFlavor flavor, java.awt.datatransfer.Transferable transferable); >>>

    protected void setDragGestureListener (DragGestureListener dragGestureListener);
    protected void setDragGestureRecognizer (DragGestureRecognizer dragGestureRecognizer);
    protected void setDragSourceListener (DragSourceListener dragSourceListener);
    protected void setDropTarget (DropTarget dropTarget);
    protected void setDropTargetListener (DropTargetListener dropTargetListener);
    public DNDHelper (boolean isDragSource, boolean isDropTarget) {
    }

    public DragSourceListener getDragSourceListener (); >>>

    public void deinitialize ();
    public void initialize (DragGestureListener dgl);
}

