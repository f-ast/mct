/*
 * Copyright (c) 2007 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/emf/2002/Ecore";
import "http://www.eclipse.org/emf/2002/GenModel";
import "http://www.eclipse.org/gmf/2008/GenModel";

extension xpt::diagram::parts::NotationModelRefresher;
extension xpt::diagram::parts::LinkNotationModelRefresher;

boolean isSelectable(gmfgen::GenCommonBase gcb) :
	true
;

boolean isSelectable(gmfgen::GenNodeLabel label) :
	false
;

boolean isSelectable(gmfgen::GenExternalNodeLabel label) :
	true
;

boolean isSelectable(gmfgen::GenCompartment compartment) :
	false
;

boolean needsTransactionalUpdateManager(gmfgen::GenCommonBase gcb) :
	gcb.needsDomainModelRefresher() || gcb.needsLinkNotationModelRefresher()
;

boolean needsTransactionalUpdateManager(gmfgen::GenDiagram diagram) :
	true	//Force for the diagram, used by activate/deactivate 
;

boolean needsTransactionalUpdateManager(gmfgen::GenContainerBase gcb) :
	gcb.needsDomainModelRefresher() || gcb.needsNotationModelRefresher() || gcb.needsLinkNotationModelRefresher()
;

boolean needsDomainModelRefresher(gmfgen::GenCommonBase gcb) :
	false
;

boolean needsDomainModelRefresher(gmfgen::GenLink link) :
	needsDomainModelRefresher(link.modelFacet)
;

boolean needsDomainModelRefresher(gmfgen::LinkModelFacet facet) :
	false
;

boolean needsDomainModelRefresher(gmfgen::TypeLinkModelFacet facet) :
	facet.metaClass != null
;

boolean needsDomainModelRefresher(gmfgen::GenDiagram diagram) :
	!diagram.sansDomain
;

boolean needsDomainModelRefresher(gmfgen::GenNode node) :
	!node.sansDomain
;

gmfgen::GenLabel getPrimaryLabel(gmfgen::GenCommonBase gcb) :
	null
;

gmfgen::GenLabel getPrimaryLabel(gmfgen::GenNode node) :
	node.labels.select(e| !e.readOnly).first()
;

gmfgen::GenLabel getPrimaryLabel(gmfgen::GenLink link) :
	link.labels.select(e| !e.readOnly).first()
;

gmfgen::GenLabel getPrimaryLabel(gmfgen::GenChildLabelNode node) :
	null
;

Collection[gmfgen::GenLabel] getAllLabels(gmfgen::GenCommonBase gcb) :
	{}
;

Collection[gmfgen::GenLabel] getAllLabels(gmfgen::GenNode node) :
	node.labels
;

Collection[gmfgen::GenLabel] getAllLabels(gmfgen::GenLink link) :
	link.labels
;

