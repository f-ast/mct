/*
 * Copyright (c) 2008 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
import "http://www.eclipse.org/gmf/2008/Context";
import "http://www.eclipse.org/emf/2002/Ecore";


List[FeatureContext] filterEReference(List[FeatureContext] x) :
	x.select(c | c.selector.eClass().name == "EReference")
;

List[FeatureContext] withoutChildren(List[FeatureContext] x) :
	x.select(fc | fc.children.isEmpty())
;

List[FeatureContext] withChildren(List[FeatureContext] x) :
	x.select(fc | !fc.children.isEmpty())
;

// recursive.
boolean needsNullCheck(Context c) : false ;
boolean needsNullCheck(FeatureContext x) : 
	mayBeNull(x) || (x.chain != null && needsNullCheck(x.chain))
	// alternatively, wholeChain(x).exists(c | mayBeNull(c))
;

// non-recursive
boolean mayBeNull(Context c) : false;
boolean mayBeNull(FeatureContext x) :
	// assume getInput() is never null, and only [0..1] references may be null
	//
	// [AS] Removing && !x.selector.required because it is still possible to create
	// model element without required features set, so we'll get null pointers in the
	// generated code. 
	// In addition "mayBeNull" operation called from Forms.ext.needsCreation()query,
	// so initialization code will not be generated for required features as a result
	// NullPointerExceptions will be thrown from generated code.
	x.selector.eClass().name == "EReference" && !x.selector.many //&& !x.selector.required
;

List[Context] wholeChain(Context x) :
	x.chain == null ? { x } : wholeChain(x.chain).add(x)
;