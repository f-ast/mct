/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::diagram::parts::Common»
«EXTENSION xpt::diagram::Helper»

«DEFINE visualIDConstant FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment»
	public static final int VISUAL_ID = «visualID»;
«ENDDEFINE»

«DEFINE modelIDConstant FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
	public static String MODEL_ID = "«editorGen.modelID»";	«EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE registerModel FOR gmfgen::GenCommonBase-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void registerModel() {
		super.registerModel();
		org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) getModel();
		if (view != null && view.isSetElement() && view.getElement() != null) {
			getViewer().getEditPartRegistry().put(view.getElement(), this);	
		}
	}

	«EXPAND xpt::Common::generatedMemberComment»
	protected void unregisterModel() {
		super.unregisterModel();
		org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) getModel();
		if (view != null && view.isSetElement() && view.getElement() != null && getViewer().getEditPartRegistry().get(view.getElement()) == this) {
			getViewer().getEditPartRegistry().remove(view.getElement());
		}
	}
«ENDDEFINE»

«DEFINE getAdapter FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
public Object getAdapter(Class key) {
	«EXPAND snapToAdapter-»
	«EXPAND xpt::diagram::parts::TreeEditPart::getAdapterClause-»
	«EXPAND externalChildPositionTrackerAdapter-»
	«EXPAND getAdapterAdditions-»
	return super.getAdapter(key);
}
«ENDDEFINE»

«DEFINE getAdapterAdditions FOR gmfgen::GenCommonBase»«ENDDEFINE»

«DEFINE snapToAdapter FOR gmfgen::GenCommonBase»«ENDDEFINE»

«DEFINE snapToAdapter FOR gmfgen::GenContainerBase-»
«IF needsXYLayout()-»
if (org.eclipse.gef.SnapToHelper.class == key) {
	return new org.eclipse.gef.SnapToGrid(this);
}
«ENDIF-»
«ENDDEFINE»

«DEFINE externalChildPositionTrackerAdapter FOR gmfgen::GenCommonBase-»
«ENDDEFINE»

«DEFINE externalChildPositionTrackerAdapter FOR gmfgen::GenChildSideAffixedNode-»
if (org.eclipse.gmf.runtime.lite.figures.ExternalChildPositionTracker.class == key) {
	return getPositionTracker();
}
«ENDDEFINE»

«DEFINE externalChildPositionTracker FOR gmfgen::GenCommonBase-»
«ENDDEFINE»

«DEFINE externalChildPositionTracker FOR gmfgen::GenChildSideAffixedNode-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.lite.figures.ExternalChildPositionTracker myPositionTracker;

«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.gmf.runtime.lite.figures.ExternalChildPositionTracker getPositionTracker() {
	if (myPositionTracker == null) {
		myPositionTracker = new org.eclipse.gmf.runtime.lite.figures.ExternalChildPositionTracker(this);
	}
	return myPositionTracker;
}
«ENDDEFINE»

«DEFINE behaviour FOR gmfgen::GenCommonBase»«EXPAND behaviour FOREACH behaviour»«ENDDEFINE»

«DEFINE behaviour FOR gmfgen::Behaviour»«ENDDEFINE»

«DEFINE behaviour FOR gmfgen::SharedBehaviour»«EXPAND behaviour FOR delegate»«ENDDEFINE»

«DEFINE behaviour FOR gmfgen::CustomBehaviour»
installEditPolicy(«key», new «getEditPolicyQualifiedClassName()»()); «IF key.startsWith('\"') && key.endsWith('\"')»«EXPAND xpt::Common::nonNLS»«ENDIF»
«ENDDEFINE»

«DEFINE behaviour FOR gmfgen::OpenDiagramBehaviour-»
	installEditPolicy(org.eclipse.gmf.runtime.lite.edit.policies.EditPolicyRoles.OPEN_ROLE,
		new «getEditPolicyQualifiedClassName()»());
«ENDDEFINE»

«DEFINE viewmap FOR gmfgen::Viewmap»«ENDDEFINE»

«DEFINE viewmap FOR gmfgen::InnerClassViewmap-»
«classBody-»
«EXPAND mapModeWorkaround-»
«ENDDEFINE»

«DEFINE mapModeWorkaround FOR gmfgen::InnerClassViewmap-»
«IF classBody.matches(".*[DL]Pto[LD]P.*")-»
«EXPAND xpt::Common::generatedClassComment»
private static class MapModeWorkaround {
	«EXPAND xpt::Common::generatedMemberComment»
	public int DPtoLP(int dp) {
		return dp;
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public int LPtoDP(int lp) {
		return lp;
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public static MapModeWorkaround INSTANCE = new MapModeWorkaround();
}

«EXPAND xpt::Common::generatedMemberComment»
private MapModeWorkaround getMapMode() {
	return MapModeWorkaround.INSTANCE;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE declareViewCode FOR gmfgen::GenCommonBase»«EXPAND declareViewCode("org.eclipse.gmf.runtime.notation.Node")»«ENDDEFINE»
«DEFINE declareViewCode FOR gmfgen::GenDiagram»«EXPAND declareViewCode("org.eclipse.gmf.runtime.notation.Diagram")»«ENDDEFINE»
«DEFINE declareViewCode FOR gmfgen::GenLink»«EXPAND declareViewCode("org.eclipse.gmf.runtime.notation.Edge")»«ENDDEFINE»

«DEFINE declareViewCode(String expectedModelType) FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
public «expectedModelType» «EXPAND getViewCode» {
	return («expectedModelType») getModel();
}
«ENDDEFINE»

«DEFINE contentPane FOR gmfgen::GenChildContainer-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.draw2d.IFigure contentPane;

«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.draw2d.IFigure getContentPane() {
	if (contentPane == null) {
		return super.getContentPane();
	}
	return contentPane;
}
«ENDDEFINE»

«DEFINE ctors FOR gmfgen::GenCommonBase»«EXPAND ctors("org.eclipse.gmf.runtime.notation.Node")»«ENDDEFINE»
«DEFINE ctors FOR gmfgen::GenLink»«EXPAND ctors("org.eclipse.gmf.runtime.notation.Edge")»«ENDDEFINE»

«DEFINE ctors(String expectedModelType) FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
public «editPartClassName»(org.eclipse.gmf.runtime.notation.View model) {
	assert model instanceof «expectedModelType»;
	setModel(model);
}
«ENDDEFINE»

«DEFINE ctors FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public «editPartClassName»(org.eclipse.gmf.runtime.notation.Diagram model) {
	setModel(model);
}
«ENDDEFINE»

«DEFINE ctors FOR gmfgen::GenLinkLabel-»
«EXPAND invokeSuperCtor-»
«ENDDEFINE»

«DEFINE ctors FOR gmfgen::GenExternalNodeLabel-»
«EXPAND invokeSuperCtor-»
«ENDDEFINE»

«DEFINE invokeSuperCtor FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
public «editPartClassName»(org.eclipse.gmf.runtime.notation.View model) {
	super(model);
}
«ENDDEFINE»

«DEFINE getViewCode FOR gmfgen::GenCommonBase»getDiagramNode()«ENDDEFINE»

«DEFINE getViewCode FOR gmfgen::GenDiagram»getDiagram()«ENDDEFINE»

«DEFINE getViewCode FOR gmfgen::GenLink»getDiagramEdge()«ENDDEFINE»

«DEFINE getDiagramCode FOR gmfgen::GenCommonBase»«EXPAND getViewCode».getDiagram()«ENDDEFINE»

«DEFINE getDiagramCode FOR gmfgen::GenDiagram»«EXPAND getViewCode»«ENDDEFINE»

«DEFINE getDiagramElementCode FOR gmfgen::GenCommonBase»«EXPAND getDiagramCode».getElement()«ENDDEFINE»

«DEFINE getModelChildren FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected java.util.List getModelChildren() {
	return «EXPAND getViewCode».getVisibleChildren();
}
«ENDDEFINE»

«DEFINE getModelSourceConnections FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected java.util.List getModelSourceConnections() {
	return «EXPAND getViewCode».getSourceEdges();
}
«ENDDEFINE»

«DEFINE getModelTargetConnections FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected java.util.List getModelTargetConnections() {
	return «EXPAND getViewCode».getTargetEdges();
}
«ENDDEFINE»

«DEFINE getModelChildren FOR gmfgen::GenChildLabelNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected java.util.List getModelChildren() {
	return java.util.Collections.EMPTY_LIST;
}
«ENDDEFINE»

«DEFINE getModelSourceConnections FOR gmfgen::GenChildLabelNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected java.util.List getModelSourceConnections() {
	return java.util.Collections.EMPTY_LIST;
}
«ENDDEFINE»

«DEFINE getModelTargetConnections FOR gmfgen::GenChildLabelNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected java.util.List getModelTargetConnections() {
	return java.util.Collections.EMPTY_LIST;
}
«ENDDEFINE»

«DEFINE notSelectable FOR gmfgen::GenCommonBase-»
«IF !isSelectable()-»
«EXPAND xpt::Common::generatedMemberComment»
public boolean isSelectable() {
	return false;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE getTransactionalUpdateManager FOR gmfgen::GenCommonBase-»
«IF needsTransactionalUpdateManager()-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.lite.edit.parts.update.TransactionalUpdateManager getTransactionalUpdateManager() {
	return (org.eclipse.gmf.runtime.lite.edit.parts.update.TransactionalUpdateManager) getViewer().getProperty(org.eclipse.gmf.runtime.lite.edit.parts.update.TransactionalUpdateManager.class.getName());
}
«ENDIF-»
«ENDDEFINE»

«DEFINE activate FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
public void activate() {
	super.activate();
	«EXPAND activateAdditions-»
}
«ENDDEFINE»

«DEFINE deactivate FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::generatedMemberComment»
public void deactivate() {
	«EXPAND deactivateAdditions-»
	super.deactivate();
}
«ENDDEFINE»

«DEFINE activateAdditions FOR gmfgen::GenCommonBase»«ENDDEFINE»
«DEFINE deactivateAdditions FOR gmfgen::GenCommonBase»«ENDDEFINE»

«DEFINE activateAdditions FOR gmfgen::GenContainerBase-»
«EXPAND activateRefreshers-»
«ENDDEFINE»

«DEFINE deactivateAdditions FOR gmfgen::GenContainerBase-»
«EXPAND deactivateRefreshers-»
«ENDDEFINE»

«DEFINE activateAdditions FOR gmfgen::GenDiagram-»
«EXPAND activateRefreshers-»
getTransactionalUpdateManager().install(org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(«EXPAND getViewCode»));
«ENDDEFINE»

«DEFINE deactivateAdditions FOR gmfgen::GenDiagram-»
getTransactionalUpdateManager().uninstall();
«EXPAND deactivateRefreshers-»
«ENDDEFINE»

«DEFINE activateAdditions FOR gmfgen::GenChildLabelNode-»
addExternalRefresher(getLabelRefresher());
«EXPAND activateRefreshers-»
«ENDDEFINE»

«DEFINE deactivateAdditions FOR gmfgen::GenChildLabelNode-»
«EXPAND deactivateRefreshers-»
removeExternalRefresher(getLabelRefresher());
«ENDDEFINE»

«DEFINE activateRefreshers FOR gmfgen::GenContainerBase-»
«EXPAND xpt::diagram::parts::domainModelRefresher::activate-»
«EXPAND xpt::diagram::parts::NotationModelRefresher::installClause-»
«EXPAND xpt::diagram::parts::LinkNotationModelRefresher::installClause-»
«ENDDEFINE»

«DEFINE deactivateRefreshers FOR gmfgen::GenContainerBase-»
«EXPAND xpt::diagram::parts::LinkNotationModelRefresher::uninstallClause-»
«EXPAND xpt::diagram::parts::NotationModelRefresher::uninstallClause-»
«EXPAND xpt::diagram::parts::domainModelRefresher::deactivate-»
«ENDDEFINE»

«DEFINE activateAdditions FOR gmfgen::GenLabel-»
«EXPAND xpt::diagram::parts::LabelController::activateAdditions-»
«ENDDEFINE»

«DEFINE deactivateAdditions FOR gmfgen::GenLabel-»
«EXPAND xpt::diagram::parts::LabelController::deactivateAdditions-»
«ENDDEFINE»

«DEFINE activateAdditions FOR gmfgen::GenLink-»
«EXPAND xpt::diagram::parts::domainModelRefresher::activate-»
«EXPAND xpt::diagram::parts::LinkNotationModelRefresher::installClause-»
«ENDDEFINE»

«DEFINE deactivateAdditions FOR gmfgen::GenLink-»
«EXPAND xpt::diagram::parts::LinkNotationModelRefresher::uninstallClause-»
«EXPAND xpt::diagram::parts::domainModelRefresher::deactivate-»
«ENDDEFINE»

