/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::diagram::policies::ClassNames»
«EXTENSION xpt::diagram::Helper»
«EXTENSION xpt::commands::CommandUtils»

«DEFINE LayoutEditPolicy FOR gmfgen::GenContainerBase-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen»
package «getDiagram().editPoliciesPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» «EXPAND supertypes» {
	«EXPAND getCreateCommand(getDirectChildren())-»
	«EXPAND createAddCommand(getDirectChildren())-»
	«EXPAND createCloneCommand(getDirectChildren())-»
	«EXPAND createChangeConstraintCommand(getDirectChildren())-»
«IF needsXYLayout() && null != getDiagram().palette && getDirectChildren().size() > 0-»
	«EXPAND showSizeOnDropFeedback-»
	«EXPAND adjustConstraint(getDirectChildren())-»
«ENDIF-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE className FOR gmfgen::GenContainerBase»«getLayoutEditPolicyClassName()»«ENDDEFINE»
«DEFINE qualifiedClassName FOR gmfgen::GenContainerBase»«getDiagram().editPoliciesPackageName».«EXPAND className»«ENDDEFINE»

«DEFINE SideAffixedLayoutEditPolicy FOR gmfgen::GenNode-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen»
package «getDiagram().editPoliciesPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND SideAffixedClassName» «EXPAND SideAffixedSupertypes» {
	«EXPAND getCreateCommand(getSideAffixedChildren())-»
	«EXPAND createAddCommand(getSideAffixedChildren())-»
	«EXPAND createCloneCommand(getSideAffixedChildren())-»
	«EXPAND createChangeSideAffixedConstraintCommand(getSideAffixedChildren())-»
«IF null != getDiagram().palette-»
	«EXPAND showSizeOnDropFeedback-»
	«EXPAND adjustConstraint(getSideAffixedChildren())-»
	«EXPAND getExternalLabelsContainer-»
«ENDIF-»
	«EXPAND SideAffixedAdditions-»
}
«ENDDEFINE»

«DEFINE SideAffixedClassName FOR gmfgen::GenContainerBase»«getSideAffixedLayoutEditPolicyClassName()»«ENDDEFINE»
«DEFINE SideAffixedQualifiedClassName FOR gmfgen::GenContainerBase»«getDiagram().editPoliciesPackageName».«EXPAND SideAffixedClassName»«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenContainerBase-»
«IF needsXYLayout()»extends org.eclipse.gmf.runtime.lite.edit.policies.XYLayoutEditPolicyEx«ELSE»extends org.eclipse.gmf.runtime.lite.edit.policies.ListLayoutEditPolicy«ENDIF-»
«ENDDEFINE»

«DEFINE SideAffixedSupertypes FOR gmfgen::GenNode»extends org.eclipse.gmf.runtime.lite.edit.policies.SideAffixedLayoutEditPolicy«ENDDEFINE»

«DEFINE getCreateCommand(Collection[gmfgen::GenNode] childNodes) FOR gmfgen::GenContainerBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
«IF null != getDiagram().palette && childNodes.size() > 0-»
	if (request instanceof org.eclipse.gmf.runtime.lite.requests.CreateRequestEx) {
		org.eclipse.gmf.runtime.lite.requests.CreateRequestEx requestEx = (org.eclipse.gmf.runtime.lite.requests.CreateRequestEx) request;
		if (!«getDiagram().getEditPartQualifiedClassName()».MODEL_ID.equals(requestEx.getModelID())) {
			return null;
		}
		int[] visualIds = requestEx.getVisualIds();
		org.eclipse.emf.common.command.CompoundCommand result = new org.eclipse.emf.common.command.CompoundCommand();
		for(int i = 0; i < visualIds.length; i++) {
			int nextVisualId = visualIds[i];
			switch (nextVisualId) {
«EXPAND getCreateCommandContribution(this) FOREACH childNodes-»
			}
		}
		return new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(«EXPAND xpt::diagram::policies::Common::getDiagramElementCode»), result);
	}
«ENDIF-»
	return null;
}
«ENDDEFINE»

«DEFINE getCreateCommandContribution(gmfgen::GenContainerBase container) FOR gmfgen::GenNode-»
«IF !sansDomain && !modelFacet.metaClass.ecoreClass.abstract-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
	result.append(new «getDiagram().editCommandsPackageName».«EXPAND xpt::commands::CreateNodeCommand::className»(«EXPAND xpt::diagram::policies::Common::getViewCode FOR container», requestEx«IF container.needsXYLayout(this)», (org.eclipse.draw2d.geometry.Rectangle) getConstraintFor(request)«ENDIF»));
	break;
«ENDIF-»
«ENDDEFINE»

«DEFINE createAddCommand(Collection[gmfgen::GenNode] childNodes)  FOR gmfgen::GenContainerBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command createAddCommand(org.eclipse.gef.EditPart child, Object constraint) {
	if (child.getModel() instanceof org.eclipse.gmf.runtime.notation.Node) {
		org.eclipse.gmf.runtime.notation.Node childNode = (org.eclipse.gmf.runtime.notation.Node) child.getModel();
		String modelID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getModelID(childNode);
		if («getDiagram().getEditPartQualifiedClassName()».MODEL_ID.equals(modelID)) {
			int newVisualID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getNodeVisualID(«EXPAND xpt::diagram::policies::Common::getViewCode», childNode.getElement());
			org.eclipse.emf.common.command.Command command = null;
			switch (newVisualID) {
«EXPAND getAddCommandContribution(this) FOREACH childNodes-»
			}
			if (command != null) {
				org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(childNode.getDiagram().getElement());
				return new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(editingDomain, command);
			}
		}
	}
	return null;
}
«ENDDEFINE»

«DEFINE getAddCommandContribution(gmfgen::GenContainerBase container) FOR gmfgen::GenNode-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
	command = new «getDiagram().editCommandsPackageName».«EXPAND xpt::commands::AddNodeCommand::className»(«EXPAND xpt::diagram::policies::Common::getViewCode FOR container», childNode, newVisualID, «IF container.needsXYLayout(this)»(org.eclipse.draw2d.geometry.Rectangle) constraint«ELSE»null«ENDIF»);
	break;
«ENDDEFINE»

«DEFINE createCloneCommand(Collection[gmfgen::GenNode] childNodes)  FOR gmfgen::GenContainerBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command createCloneCommand(org.eclipse.gef.EditPart child, Object constraint) {
	if (child.getModel() instanceof org.eclipse.gmf.runtime.notation.Node) {
		org.eclipse.gmf.runtime.notation.Node childNode = (org.eclipse.gmf.runtime.notation.Node) child.getModel();
		String modelID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getModelID(childNode);
		if («getDiagram().getEditPartQualifiedClassName()».MODEL_ID.equals(modelID)) {
			int newVisualID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getNodeVisualID(«EXPAND xpt::diagram::policies::Common::getViewCode», childNode.getElement());
			org.eclipse.emf.common.command.Command command = null;
			switch (newVisualID) {
«EXPAND getCloneCommandContribution(this) FOREACH childNodes-»
			}
			if (command != null) {
				org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(childNode.getDiagram().getElement());
				return new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(editingDomain, command);
			}
		}
	}
	return null;
}
«ENDDEFINE»

«DEFINE getCloneCommandContribution(gmfgen::GenContainerBase container) FOR gmfgen::GenNode-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
	command = new «getDiagram().editCommandsPackageName».«EXPAND xpt::commands::CloneNodeCommand::className»(«EXPAND xpt::diagram::policies::Common::getViewCode FOR container», childNode, «IF container.needsXYLayout(this)»(org.eclipse.draw2d.geometry.Rectangle) constraint«ELSE»null«ENDIF»);
	break;
«ENDDEFINE»

«DEFINE createChangeConstraintCommand(Collection[gmfgen::GenNode] childNodes) FOR gmfgen::GenContainerBase»«ENDDEFINE»

«DEFINE createChangeConstraintCommand(Collection[gmfgen::GenNode] childNodes) FOR gmfgen::GenNode-»
«IF needsXYLayout()-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command createChangeConstraintCommand(org.eclipse.gef.requests.ChangeBoundsRequest request, org.eclipse.gef.EditPart child, Object constraint) {
«IF hasDirectChildren()-»
	if ((«EXPAND xpt::diagram::policies::Common::getCastToEditPart»).isDirectChild(child)) {
		return super.createChangeConstraintCommand(request, child, constraint);
	}
«ENDIF-»
	return null;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE createChangeSideAffixedConstraintCommand(Collection[gmfgen::GenNode] childNodes) FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command createChangeConstraintCommand(org.eclipse.gef.requests.ChangeBoundsRequest request, org.eclipse.gef.EditPart child, Object constraint) {
	return null;
}
«ENDDEFINE»

«DEFINE showSizeOnDropFeedback FOR gmfgen::GenContainerBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected void showSizeOnDropFeedback(org.eclipse.gef.requests.CreateRequest request) {
	org.eclipse.draw2d.IFigure feedback = getSizeOnDropFeedback(request);
	org.eclipse.draw2d.geometry.Rectangle rect = new org.eclipse.draw2d.geometry.Rectangle(request.getLocation(), request.getSize());
	getLayoutContainer().translateToRelative(rect);
	adjustConstraint(request, rect);
	getLayoutContainer().translateToAbsolute(rect);
	feedback.translateToRelative(rect);
	feedback.setBounds(rect.expand(getCreationFeedbackOffset(request)));
}
«ENDDEFINE»

«DEFINE adjustConstraint(Collection[gmfgen::GenNode] childNodes) FOR gmfgen::GenContainerBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected void adjustConstraint(org.eclipse.gef.requests.CreateRequest request, org.eclipse.draw2d.geometry.Rectangle constraint) {
	if (request instanceof org.eclipse.gmf.runtime.lite.requests.CreateRequestEx) {
		org.eclipse.gmf.runtime.lite.requests.CreateRequestEx requestEx = (org.eclipse.gmf.runtime.lite.requests.CreateRequestEx) request;
		if («getDiagram().getEditPartQualifiedClassName()».MODEL_ID.equals(requestEx.getModelID())) {
			int[] visualIds = requestEx.getVisualIds();
			boolean adjusted = false;
			for(int i = 0; i < visualIds.length && !adjusted; i++) {
				int nextVisualId = visualIds[i];
				switch (nextVisualId) {
«EXPAND adjustConstraint FOREACH childNodes-»
				}
			}
		}
	}
}
«ENDDEFINE»

«DEFINE adjustConstraint FOR gmfgen::GenNode-»
«IF !sansDomain && !modelFacet.metaClass.ecoreClass.abstract-»
case «getEditPartQualifiedClassName()».VISUAL_ID: {
	«EXPAND xpt::commands::Common::adjustConstraint-»
	«EXPAND adjustConstraintLocation-»
	adjusted = true;
	break;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE adjustConstraintLocation FOR gmfgen::GenNode-»
«ENDDEFINE»

«DEFINE adjustConstraintLocation FOR gmfgen::GenChildSideAffixedNode-»
org.eclipse.gmf.runtime.lite.figures.SideAffixedFeedbackPositioner elementPositioner = getSideAffixedElementPositionerForRequest(request);
elementPositioner.setSiblingsParent(getExternalLabelsContainer());
constraint.setBounds(elementPositioner.getValidLocation(constraint));
«ENDDEFINE»

«DEFINE getExternalLabelsContainer FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.draw2d.IFigure getExternalLabelsContainer() {
	org.eclipse.gef.editparts.LayerManager root = (org.eclipse.gef.editparts.LayerManager) getHost().getRoot();
	return root.getLayer(«getDiagram().getEditPartFactoryQualifiedClassName()».EXTERNAL_NODE_LABELS_LAYER);
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenContainerBase»«ENDDEFINE»
«DEFINE SideAffixedAdditions FOR gmfgen::GenContainerBase»«ENDDEFINE»
