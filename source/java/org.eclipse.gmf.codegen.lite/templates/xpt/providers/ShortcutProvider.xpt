/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::commands::CommandUtils»

«DEFINE className FOR gmfgen::GenDiagram»ShortcutProvider«ENDDEFINE»

«DEFINE qualifiedClassName FOR gmfgen::GenDiagram»«providersPackageName».«EXPAND className»«ENDDEFINE»

«DEFINE ShortcutProvider FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::copyright FOR editorGen»
package «providersPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» «EXPAND supertypes» {
	«EXPAND createShortcutEditPart-»
	«EXPAND getCreateShortcutCommand-»
	«EXPAND getRefreshShortcutCommand-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenDiagram»implements org.eclipse.gmf.runtime.lite.shortcuts.IShortcutProvider«ENDDEFINE»

«DEFINE createShortcutEditPart FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.gef.EditPart createShortcutEditPart(org.eclipse.gef.EditPart context, org.eclipse.gmf.runtime.notation.View view) {
	String modelID = «EXPAND xpt::editor::VisualIDRegistry::getModelIDMethodCall»(view);
	if (!«EXPAND xpt::editor::VisualIDRegistry::modelID».equals(modelID)) {
		return null;
	}
	int viewVisualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(view);
	switch (viewVisualID) {
		«EXPAND xpt::diagram::parts::EditPartFactory::doCreate FOREACH getAllContainers()-»
		«EXPAND xpt::diagram::parts::EditPartFactory::doCreate FOREACH links-»
	}
	return null;
}
«ENDDEFINE»

«DEFINE getCreateShortcutCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand getCreateShortcutCommand(org.eclipse.gmf.runtime.notation.View containerView, org.eclipse.emf.ecore.EObject domainElement) {
	org.eclipse.emf.transaction.TransactionalEditingDomain elementEditingDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(domainElement);
	if (elementEditingDomain == null) {
		return null;
	}
	org.eclipse.emf.transaction.TransactionalEditingDomain containerEditingDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(containerView);
	if (containerEditingDomain == null) {
		return null;
	}
	if (!elementEditingDomain.equals(containerEditingDomain)) {
		domainElement = containerEditingDomain.getResourceSet().getEObject(org.eclipse.emf.ecore.util.EcoreUtil.getURI(domainElement), true);
	}
	int visualID = «EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall»(containerView, domainElement);
	switch (visualID) {
	«EXPAND xpt::commands::createNotationalElementCommand::createNotationalNodeCommandForChild(this, "containerView", "domainElement", getCreateShortcutNodeCommandQualifiedClassName()) FOREACH topLevelNodes.select(e|e.modelFacet != null && e.modelFacet.metaClass != null)-»
	default:
		return null;
	}
}
«ENDDEFINE»

«DEFINE getRefreshShortcutCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.emf.common.command.Command getRefreshShortcutCommand(org.eclipse.gmf.runtime.notation.View shortcut) {
	String modelID = «EXPAND xpt::editor::VisualIDRegistry::getModelIDMethodCall»(shortcut);
	if (!«EXPAND xpt::editor::VisualIDRegistry::modelID».equals(modelID)) {
		return null;
	}
	org.eclipse.emf.ecore.EObject underlyingElement = shortcut.getElement();
	org.eclipse.gmf.runtime.notation.View parentView = (org.eclipse.gmf.runtime.notation.View) shortcut.eContainer();
	int oldVisualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(shortcut);
	int newVisualID = «EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall»(parentView, underlyingElement);
	if (newVisualID == -1) {
		return new org.eclipse.gmf.runtime.lite.commands.RemoveNotationalElementCommand(parentView, shortcut);
	} else if (oldVisualID == newVisualID) {
		return null;
	} else {
		org.eclipse.gmf.runtime.lite.commands.CreateNotationalElementCommand notationalCommand = getCreateShortcutCommand(parentView, underlyingElement);
		if (notationalCommand != null) {
			return new org.eclipse.gmf.runtime.lite.commands.ReplaceNotationalElementCommand(parentView, notationalCommand, shortcut);
		} else {
			return new org.eclipse.gmf.runtime.lite.commands.RemoveNotationalElementCommand(parentView, shortcut);
		}
	}
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenDiagram»«ENDDEFINE»

