/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::commands::CommandUtils»
«EXTENSION xpt::diagram::Helper»
«EXTENSION xpt::diagram::LinkFinder»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»

«DEFINE createNotationalNodeCommand(String parentViewCode) FOR gmfgen::GenContainerBase-»
org.eclipse.emf.ecore.EObject domainElement = descriptor.getElement();
int nodeVisualID = descriptor.getVisualID();
switch (nodeVisualID) {
«EXPAND createNotationalNodeCommandForChild(this, parentViewCode, "domainElement") FOREACH getChildNodes().select(e|e.modelFacet != null && e.modelFacet.metaClass != null)-»
default:
	return null;
}
«ENDDEFINE»

«DEFINE createNotationalNodeCommandForChild(gmfgen::GenContainerBase parentContainer, String parentViewCode, String domainElementCode) FOR gmfgen::GenNode-»
«EXPAND createNotationalNodeCommandForChild(parentContainer, parentViewCode, domainElementCode, "org.eclipse.gmf.runtime.lite.commands.CreateNotationalNodeCommand")-»
«ENDDEFINE»

«DEFINE createNotationalNodeCommandForChild(gmfgen::GenContainerBase parentContainer, String parentViewCode, String domainElementCode, String createNotationalNodeCommandFQN) FOR gmfgen::GenNode-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
	if («EXPAND MetaModel::IsInstance(domainElementCode) FOR modelFacet.metaClass») {
		return new «createNotationalNodeCommandFQN»(«parentViewCode», «domainElementCode», «EXPAND defaultConstraint(parentContainer.needsXYLayout() || {this}.typeSelect(gmfgen::GenChildSideAffixedNode).size() > 0)», «getNotationViewFactoryQualifiedClassName()».INSTANCE, false);
	}
	return null;
«ENDDEFINE»

«DEFINE defaultConstraint(boolean xyLayouted) FOR gmfgen::GenNode-»
«IF xyLayouted»new org.eclipse.draw2d.geometry.Rectangle(0, 0, «EXPAND xpt::commands::Common::defaultWidth», «EXPAND xpt::commands::Common::defaultHeight»)«ELSE»null«ENDIF-»
«ENDDEFINE»

«DEFINE createNotationalEdgeCommand(String parentDiagramCode) FOR gmfgen::GenCommonBase-»
«EXPAND defineDecorator-»
«EXPAND instantiateNotationalEdgeCommand(parentDiagramCode)-»
«ENDDEFINE»

«DEFINE defineDecorator FOR gmfgen::GenCommonBase-»
org.eclipse.gmf.runtime.notation.View sourceView = getViewService().findView(linkDescriptor.getSource());
org.eclipse.gmf.runtime.notation.View targetView = getViewService().findView(linkDescriptor.getDestination());
org.eclipse.gmf.runtime.lite.services.IViewDecorator decorator = null;
if (sourceView == null || targetView == null) {
	return null;
}
String sourceModelID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getModelID(sourceView);
if (!«getDiagram().getEditPartQualifiedClassName()».MODEL_ID.equals(sourceModelID)) {
	return null;
}
String targetModelID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getModelID(targetView);
if (!«getDiagram().getEditPartQualifiedClassName()».MODEL_ID.equals(targetModelID)) {
	return null;
}
	«IF needsSourceVisualID()-»
int sourceVisualID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(sourceView);
	«ENDIF-»
	«IF needsTargetVisualID()-»
int targetVisualID = «getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(targetView);
	«ENDIF-»
switch (linkDescriptor.getVisualID()) {
	«EXPAND createDecorator FOREACH containedLinks()-»
}
if (decorator == null) {
	return null;
}
«ENDDEFINE»

«DEFINE createDecorator FOR gmfgen::GenLink-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
«EXPAND restrictEdgeEnds("sourceVisualID", modelFacet.getSourceType()) FOR getDiagram()-»
«EXPAND restrictEdgeEnds("targetVisualID", modelFacet.getTargetType()) FOR getDiagram()-»
	if («EXPAND linkDescriptorCondition FOR modelFacet») {
		decorator = «getNotationViewFactoryQualifiedClassName()».INSTANCE;
	}
	break;
«ENDDEFINE»

«DEFINE instantiateNotationalEdgeCommand(String parentDiagramCode) FOR gmfgen::GenCommonBase-»
return new org.eclipse.gmf.runtime.lite.commands.CreateNotationalEdgeCommand(«parentDiagramCode», linkDescriptor.getElement(), sourceView, targetView, decorator);
«ENDDEFINE»

«DEFINE linkDescriptorCondition FOR gmfgen::LinkModelFacet»«ERROR "Unexpected type"»«ENDDEFINE»

«DEFINE linkDescriptorCondition FOR gmfgen::TypeLinkModelFacet»«EXPAND MetaModel::IsInstance("linkDescriptor.getElement()") FOR metaClass»«ENDDEFINE»

«DEFINE linkDescriptorCondition FOR gmfgen::FeatureLinkModelFacet»linkDescriptor.getElement() == null«ENDDEFINE»

«DEFINE restrictEdgeEnds(String visualIdVar, genmodel::GenClass expectedClass) FOR gmfgen::GenDiagram-»
«LET getRelatedChildLabelGenNodes(expectedClass) AS relatedChildLabelGenNodes-»
«IF relatedChildLabelGenNodes.size() > 0-»
switch («visualIdVar») {
«FOREACH relatedChildLabelGenNodes AS nextNode-»
case  «nextNode.getEditPartQualifiedClassName()».VISUAL_ID:
	return null;
«ENDFOREACH-»
}
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

