include "Java/java.grm"
#pragma -comment
#ifdef COMMENTS
include "Java/javaCommentOverrides.grm"
#endif

% Yijun Yu: May 2011
% redefine method_body
%         [repeat block preferred with '; ]
%     |  [opt annotation_default] ';             % T.D. Oct 2007
% end define

redefine field_declaration
   [comment_nl] ... 
end define

redefine modifier
        'abstract
    |   'final
    |   'public
    |   'protected
    |   'private
    |   'static
    |   'transient
    |   'volatile
    |   'native
    |   'synchronized
    |   'strictfp		% Added strictfp XG July 23, 2002
    |   [repeat annotation ignored]		% T.D. Oct 2007
end define

redefine program
    [package_declaration*]
end define

redefine type_declaration
        [class_declaration]      [NL][NL]
#ifdef COMMENTS
    [comment_nl]
#endif
    |   [interface_declaration]  [NL][NL]
#ifdef COMMENTS
    [comment_nl]
#endif
    |   [enum_declaration]	    [NL] % T.D. Oct 2007
#ifdef COMMENTS
    [comment_nl]
#endif
end define

%redefine enum_body
%    '{                                    [IN]
%       [list enum_element] [opt ',]
%       [repeat class_body_declaration ordered ]    [EX]
%    '} [opt ';]                           [NL][NL]
%end define

% remove some extra spaces
redefine import_declaration
#ifdef COMMENTS
    [comment_nl]
#endif
	'import [opt 'static] [imported_name] '; [NL]
#ifdef COMMENTS
    [comment_nl]
#endif
    | 	
#ifdef COMMENTS
    [comment_nl]
#endif
'; [NL] 	% JRC Apr 08
#ifdef COMMENTS
    [comment_nl]
#endif
end define

redefine class_header
    [repeat modifier ordered] 'class [class_name] [opt extends_clause] [opt implements_clause]
end define

% T.D. Oct 2007 -- added annotation marker 
redefine interface_header
    [repeat modifier ordered] [opt annot_marker] 'interface [interface_name] [opt extends_clause] [opt implements_clause]
end define

redefine enum_header
    [repeat modifier ordered] [opt id] 'enum [opt declared_name] [opt extends_clause] [opt implements_clause]
end define

redefine extends_clause
    'extends [list type_name+ ordered]
end define

redefine implements_clause
    'implements [list qualified_name+ ordered]
end define

redefine package_declaration
#ifdef COMMENTS
    [comment_nl] [NL]
#endif
    [opt package_header scoped]
    [repeat import_declaration] 
    [repeat type_declaration scoped]
end define

redefine class_or_interface_body
    '{                                    [NL][IN]
%       [repeat class_body_declaration scoped ordered ignored when NotGeneratedNot preferred with [LiftToComment] [LiftToComment2] ]    [EX] [NL]
       [repeat class_body_declaration scoped ordered preferred with [LiftToComment] [LiftToComment2] ]    [EX] [NL]
#ifdef COMMENTS
    [comment_nl]
#endif
    '} [opt ';]
#ifdef COMMENTS
    [comment_nl]
#endif
[NL][NL]
end define

% to match Java Code like:
% public <T> void someMethod(T t) {
%	// ...
% }
redefine constructor_declaration
    [NL] [repeat modifier ordered] [opt generic_parameter] [constructor_declarator] [opt throws] [constructor_body] [NL][NL]
end define

redefine variable_declaration
    [repeat modifier ordered] [type_specifier] [variable_declarators] '; [NL]
end define

redefine variable_declarators
    [list variable_declarator+ ordered]
end define

% Method declarations 

% generic method declaration (to match generic types used only in a method's declaration and body)
redefine method_declaration
    [NL] [repeat modifier ordered] [opt generic_parameter] [type_specifier] [method_declarator] [opt throws] [method_body]
end define

redefine throws
    'throws [list qualified_name+ ordered]
end define

redefine annotation_value_list
      [single_annotation_value]	% for single value annotation
    | [list keyed_annotation_value ordered]
end define

redefine single_annotation_value
      [expression]					% must be constant
    | [nested_annotation]
    | { [list expression_or_nested_annotation ordered] }	% array of annotation values
end define

redefine comment_nl
    [empty] |
   [repeat mycomment scoped ignored when SingleLine]
end define

function contains Object [any] 
    match * [any] Object
end function

function Private A  [class_body_declaration]
    match  [class_or_interface_body]
        B  [class_or_interface_body] 
    construct M  [modifier *] _  [^ A] 
    construct PublicModifiers [modifier*] 'public 'protected 
    where not M [contains each PublicModifiers]
end function

function SingleLine A  [mycomment]
    match  [comment_nl]
        B  [comment_nl] 
    construct S_Comment [stringlit] _ [quote A] 
    where S_Comment [grep "^//NON"]
end function

function NotGeneratedNot A  [class_body_declaration]
    match  [class_or_interface_body]
        B  [class_or_interface_body] 
    construct S_Cs [stringlit] _ [quote A]
    where not S_Cs [grep "@generated INV"]
    where not S_Cs [grep "@generated NOT"]
end function

rule remove_comment
    replace * [comment_nl] X [comment_nl]
    deconstruct * [comment] X Y [comment]
    by _
end rule

function put_string F [stringlit] S [stringlit]
   replace [stringlit] Str [stringlit]
   construct d_S [stringlit] S [fput F]
   by Str
end function

function self_comment
    replace [class_body_declaration] X [class_body_declaration]
    construct nc_X [class_body_declaration] X [remove_comment]
    construct s_X [stringlit] _ [unparse nc_X] % [print]
    construct fName [id] 'tmp_comment
    construct fNameNew [id] fName [!]
    construct s_fNameNew [stringlit] _ [quote fNameNew]
    construct s_Head [stringlit] _ [+ "/"] [+ "*"] [+ "*"]
    construct s_End [stringlit] _ [+ " * <!-- e"] [+ "nd-user-doc -->"]
    construct s_Tail [stringlit] _ [+ " *"] [+ "/"]
    construct d_put [stringlit] _
	      [put_string s_fNameNew s_Head]
	      [put_string s_fNameNew " * <!-- begin-user-doc -->"]
	      [put_string s_fNameNew s_X]
    	      [put_string s_fNameNew s_End]
    	      [put_string s_fNameNew " * @generated "]
    	      [put_string s_fNameNew s_Tail]
    	      [put_string s_fNameNew s_X]
    construct rm_fNameNew [stringlit] _ [+ "rm -f "] [+ s_fNameNew]
    construct Y [class_body_declaration] _ [read fNameNew] [system rm_fNameNew]
    by Y
end function

function LiftToComment 
    replace [class_body_declaration*] A1 [class_body_declaration] A2 [class_body_declaration*]
    construct S_Cs [stringlit] _ [quote A1]
    where S_Cs [grep "@generated NOT"]
    construct B1 [class_body_declaration] A1 [self_comment]
    construct B2 [class_body_declaration*] A2 [LiftToComment] [LiftToComment2]
    by _ [. B1] [. B2]
end function

function LiftToComment2
    replace [class_body_declaration*] A1 [class_body_declaration] A2 [class_body_declaration*]
    construct S_Cs [stringlit] _ [quote A1]
    where not S_Cs [grep "@generated NOT"]
    construct B2 [class_body_declaration*] A2 [LiftToComment] [LiftToComment2]
    by _ [. A1] [. B2]
end function
