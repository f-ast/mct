include "Java/java.grm"
#ifdef COMMENTS
include "Java/javaCommentOverrides.grm"
#endif

annotate modifier [repeat annotation ignored]

redefine type_declaration
        [class_declaration]      [NL][NL]
#ifdef COMMENTS
    [comment_nl]
#endif
    |   [interface_declaration]  [NL][NL]
#ifdef COMMENTS
    [comment_nl]
#endif
    |   [enum_declaration]	    [NL] % T.D. Oct 2007
#ifdef COMMENTS
    [comment_nl]
#endif
end define

% remove some extra spaces
redefine import_declaration
#ifdef COMMENTS
    [comment_nl]
#endif
	'import [opt 'static] [imported_name] '; [NL]
#ifdef COMMENTS
    [comment_nl]
#endif
    | 	
#ifdef COMMENTS
    [comment_nl]
#endif
'; [NL] 	% JRC Apr 08
#ifdef COMMENTS
    [comment_nl]
#endif
end define

annotate class_header [repeat modifier ordered] 
annotate interface_header [repeat modifier ordered]
annotate enum_header [repeat modifier ordered] 
annotate extends_clause [list type_name+ ordered]
annotate implements_clause [list qualified_name+ ordered]

redefine package_declaration
#ifdef COMMENTS
    [comment_nl]
#endif
    [opt package_header kept]
    [repeat import_declaration ignored] 
    [repeat type_declaration kept]
end define

redefine class_or_interface_body
    '{                                    [NL][IN]
       [repeat class_body_declaration kept ordered ignored when NotGeneratedNot preferred with [LiftToComment] ]    [EX] [NL]
#ifdef COMMENTS
    [comment_nl]
#endif
    '} [opt ';]
#ifdef COMMENTS
    [comment_nl]
#endif
[NL][NL]
end define

annotate constructor_declaration [repeat modifier ordered] 
annotate variable_declaration [repeat modifier ordered]
annotate variable_declarators [list variable_declarator+ ordered]
annotate method_declaration [repeat modifier ordered]
annotate throws [list qualified_name+ ordered]
annotate annotation_value_list [list keyed_annotation_value ordered]
annotate single_annotation_value [list expression_or_nested_annotation ordered]

redefine comment_nl
    [empty] | [repeat mycomment kept]
end define

function contains Object [any] 
    match * [any] Object
end function

function Private A  [class_body_declaration]
    match  [class_or_interface_body]
        B  [class_or_interface_body] 
    construct M  [modifier *] _  [^ A] 
    construct PublicModifiers [modifier*] 'public 'protected 
    where not M [contains each PublicModifiers]
end function

function NotJavaDoc A  [mycomment]
    match  [comment_nl]
        B  [comment_nl] 
    construct S_Comment [stringlit] _ [quote A] 
    where not S_Comment [grep "\/\*\*"]
end function

function NotGeneratedNot A  [class_body_declaration]
    match  [class_or_interface_body]
        B  [class_or_interface_body] 
    construct S_Cs [stringlit] _ [quote A]
    where not S_Cs [grep "@generated NOT"]
    import Program [program]
    deconstruct * [class_or_interface_body] Program C [class_or_interface_body]
    where C [= B]
end function

function remove_comment
    replace * [comment_nl] X [comment_nl]
    by _
end function

function put_string F [stringlit] S [stringlit]
   replace [stringlit] Str [stringlit]
   construct d_S [stringlit] S [fput F]
   by Str
end function

function self_comment
    replace [class_body_declaration] X [class_body_declaration]
    construct nc_X [class_body_declaration] X [remove_comment]
    construct s_X [stringlit] _ [unparse nc_X]
    construct fName [id] 'tmp_comment
    construct fNameNew [id] fName [!]
    construct s_fNameNew [stringlit] _ [quote fNameNew]
    construct s_Head [stringlit] _ [+ "/"] [+ "*"] [+ "*"]
    construct s_End [stringlit] _ [+ " * <!-- e"] [+ "nd-user-doc -->"]
    construct s_Tail [stringlit] _ [+ " *"] [+ "/"]
    construct d_put [stringlit] _
	      [put_string s_fNameNew s_Head]
	      [put_string s_fNameNew " * <!-- begin-user-doc -->"]
	      [put_string s_fNameNew s_X]
    	      [put_string s_fNameNew s_End]
    	      [put_string s_fNameNew " * @generated "]
    	      [put_string s_fNameNew s_Tail]
    	      [put_string s_fNameNew s_X]
    construct rm_fNameNew [stringlit] _ [+ "rm -f "] [+ s_fNameNew]
    construct Y [class_body_declaration] _ [read fNameNew] [system rm_fNameNew]
    by Y
end function

function LiftToComment 
    replace [class_body_declaration*] A1 [class_body_declaration] A2 [class_body_declaration*]
    construct B1 [class_body_declaration] A1 [self_comment]
    construct B2 [class_body_declaration*] A2 [LiftToComment]
    by _ [. B1] [. B2]
end function
