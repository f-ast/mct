
using System.Reflection;
using System.Runtime.CompilerServices;

[assembly : AssemblyTitle ("Open Finite State Machine Library")] [assembly : AssemblyDescription (
  "Open Finite State Machine Library")] [assembly : AssemblyCompany ("Abdulla G. Abdurakhmanov")] [assembly : AssemblyProduct (
  "Open Finite State Machine")] [assembly : AssemblyCopyright ("(c) 2006 by Abdulla G. Abdurakhmanov")] [assembly :
  AssemblyTrademark ("")] [assembly : AssemblyCulture ("")] [assembly : AssemblyVersion ("1.0.*")] [assembly :
  AssemblyConfiguration ("")] [assembly : AssemblyDelaySign (false)] [assembly : AssemblyKeyFile ("")] [assembly :
  AssemblyKeyName ("")] [assembly : AssemblyFileVersionAttribute ("1.0")]
using System;
using System.Collections.Generic;
using System.Text;
using org.ofsm;

namespace org.ofsm.Examples
{
    class HelloWorld
    {
    }

}

using System;
using System.Collections.Generic;
using System.Text;

namespace OpenFiniteStateMachineLibraryTests
{
    class Program
    {
    }

}

using System;
using test.org.ofsm;
using test.org.ofsm.impl;
using csUnit;

namespace test.org.ofsm
{
    public class AllTests
    {
        [STAThread] public static void Main (System.String [] args)
        ;

    }

}

using System;
using org.ofsm;
using org.ofsm.impl;
using csUnit;

namespace test.org.ofsm
{
    [TestFixture] public class FiniteStateMachineBuilderTest
    {
        [Test] public virtual void testGetInstance ()
        ;

        [Test] public virtual void testGetBuilder ()
        ;

    }

}

using System;
using org.ofsm;
using org.ofsm.impl;
using csUnit;

namespace test.org.ofsm
{
    [TestFixture] public class FiniteStateMachineTest
    {
        [Test] public virtual void testMachine ()
        ;

    }

}

using System;
using System.Collections.Generic;
using org.ofsm;
using org.ofsm.impl;
using csUnit;

namespace test.org.ofsm.impl
{
    [TestFixture] public class FileFiniteStateMachineModelTest
    {
        [Test] public virtual void testUnmarshal ()
        ;

        [Test] public virtual void testMarshal ()
        ;

    }

}

using System;
using FiniteStateMachineBuilder = org.ofsm.impl.FiniteStateMachineBuilder;

namespace org.ofsm
{
    public class FiniteStateMachineFactory
    {
        public static FiniteStateMachineFactory getInstance ()
        ;

        virtual public string getVersion ()
        ;

        public virtual IFiniteStateMachineBuilder newBuilder ()
        ;

    }

}

using System;

namespace org.ofsm
{
    public interface IEvent : INamedObject
    {
    }

}

using System;
using System.Collections.Generic;

namespace org.ofsm
{
    public interface IFiniteStateMachine : INamedObject
    {
    }

}

using System;

namespace org.ofsm
{
    public interface IFiniteStateMachineBuilder
    {
    }

}

using System;

namespace org.ofsm
{
    public interface IFiniteStateMachineInitiable : IFiniteStateMachine
    {
    }

}

using System;
using IEvent = org.ofsm.IEvent;

namespace org.ofsm.impl
{
    [Serializable] public class Event : NamedObject, IEvent
    {
    }

}

using System;
using System.Collections.Generic;
using org.ofsm;

namespace org.ofsm.impl
{
    [Serializable] public class FileFiniteStateMachine : FiniteStateMachine, IFiniteStateMachineInitiable
    {
        public override string getName ()
        ;

        public virtual bool mayProcessed (Uri location)
        ;

        public virtual bool mayProcessed (string streamName)
        ;

        public virtual void init (System.IO.Stream stream)
        ;

        public virtual void init (Uri location)
        ;

        public override void reset ()
        ;

    }

}

using System;
using System.Collections.Generic;
using org.ofsm;

namespace org.ofsm.impl
{
    [Serializable] public class FileFiniteStateMachineBaseModel
    {
        virtual public IState getInitialState ()
        ;

        virtual public void setInitialState (IState value)
        ;

        public ICollection < EventInfo > getEventInfos ()
        ;

        public virtual EventInfo getEventInfo (string name)
        ;

        public virtual void addEventInfo (EventInfo eventInfo)
        ;

        public virtual void deleteEventInfo (EventInfo eventInfo)
        ;

        public ICollection < StateInfo > getStateInfos ()
        ;

        public virtual void addStateInfo (StateInfo stateInfo)
        ;

        public virtual StateInfo getStateInfo (string name)
        ;

        public virtual void deleteStateInfo (StateInfo stateInfo)
        ;

        public virtual void deleteTransitionInfo (IState state, IEvent ev)
        ;

        public virtual void addTransitionInfo (StateTransition transition)
        ;

        public virtual void deleteTransitionInfo (IState state)
        ;

        public ICollection < StateTransition > getTransitionInfo (IState state)
        ;

        public virtual StateTransition getTransitionInfo (IState state, IEvent ev)
        ;

        public IDictionary < IState, LinkedList < StateTransition > > getTransitionInfos ()
        ;

        [Serializable] abstract public class ObjectWithClassInfo
        {
            virtual public string getClassName ()
            ;

            virtual public void setClassName (string value)
            ;

        }
        [Serializable] public class StateInfo : ObjectWithClassInfo
        {
            virtual public State getState ()
            ;

            virtual public void setState (State value)
            ;

            public override string ToString ()
            ;

        }
        [Serializable] public class EventInfo : ObjectWithClassInfo
        {
            virtual public Event getEvent ()
            ;

            virtual public void setEvent (Event value)
            ;

            public override string ToString ()
            ;

        }
    }

}

using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using org.ofsm;

namespace org.ofsm.impl
{
    public class FileFiniteStateMachineModel : FileFiniteStateMachineBaseModel
    {
        public virtual void unmarshal (System.IO.Stream stream)
        ;

        public virtual void marshal (System.IO.Stream stream)
        ;

        public virtual void setSafeUnmarshallingMode (bool mode)
        ;

        protected internal virtual void unmarshalEvents (schema.events events)
        ;

        protected internal virtual EventInfo unmarshalEvent (schema.EventType eventDef)
        ;

        protected internal virtual StateInfo unmarshalState (schema.StateType stateDef)
        ;

        protected internal virtual void unmarshalInitialState (string stateName)
        ;

        protected internal virtual void unmarshalTransitions (schema.transitions defTransitions)
        ;

        protected internal virtual void unmarshalTransition (schema.transition defTransition)
        ;

    }

}

using System;
using System.Collections.Generic;
using org.ofsm;

namespace org.ofsm.impl
{
    [Serializable] public class FiniteStateMachine : IFiniteStateMachine
    {
        protected IDictionary < string, IStateTransition > transitions = new Dictionary < string, IStateTransition > ();
        protected internal IState currentState, initialState;
        virtual public IState getCurrentState ()
        ;

        virtual public void setCurrentState (IState value)
        ;

        virtual public IState getInitialState ()
        ;

        virtual public void setInitialState (IState value)
        ;

        protected internal virtual string generateKey (string eventName, IState state)
        ;

        protected internal virtual string generateKey (IEvent event_Renamed, IState state)
        ;

        protected internal virtual string generateKey (IStateTransition transition)
        ;

        public virtual IState fireEvent (IEvent ev)
        ;

        public virtual IState fireEvent (string eventName)
        ;

        public virtual void addTransition (IStateTransition transition)
        ;

        public virtual void delTranstition (IStateTransition transition)
        ;

        public virtual string getName ()
        ;

        public virtual void addStateChangeListener (IStateChangeListener listener)
        ;

        public virtual void delStateChangeListener (IStateChangeListener listener)
        ;

        public ICollection < IStateTransition > getTransitions ()
        ;

        public virtual IStateTransition getTransitionBy (IEvent ev, IState whenState)
        ;

        public virtual void clearTransitions ()
        ;

        public virtual void reset ()
        ;

    }

}

using System;
using System.Collections.Generic;
using org.ofsm;

namespace org.ofsm.impl
{
    public class FiniteStateMachineBuilder : IFiniteStateMachineBuilder
    {
        protected List < IFiniteStateMachineInitiable > initiableMachines = new List < IFiniteStateMachineInitiable > ();
        protected internal IFiniteStateMachine defaultMachine = new FiniteStateMachine ();
        virtual public IFiniteStateMachine getDefaultMachine ()
        ;

        public virtual IFiniteStateMachine getMachine (Uri uri)
        ;

        public virtual IFiniteStateMachine getMachine (string streamType, System.IO.Stream stream)
        ;

        public virtual IFiniteStateMachine getMachine ()
        ;

        public virtual void addMachine (IFiniteStateMachineInitiable machine)
        ;

        public virtual void addMachine (int index, IFiniteStateMachineInitiable machine)
        ;

        public virtual void delMachine (IFiniteStateMachineInitiable machine)
        ;

    }

}

using System;
using org.ofsm;

namespace org.ofsm.impl
{
    [Serializable] public class NamedObject : INamedObject
    {
        public virtual void setName (string name)
        ;

        public virtual string getName ()
        ;

    }

}

using System;
using org.ofsm;

namespace org.ofsm.impl
{
    [Serializable] public class State : NamedObject, IState
    {
    }

}

using System;
using System.Collections.Generic;
using org.ofsm;

namespace org.ofsm.impl
{
    public class StateTransition : IStateTransition
    {
        protected ICollection < IStateChangeListener > listeners = new LinkedList < IStateChangeListener > ();
        public virtual IEvent getEvent ()
        ;

        public virtual void setEvent (IEvent ev)
        ;

        public virtual IState getFromState ()
        ;

        public virtual void setFromState (IState state)
        ;

        public virtual IState getToState ()
        ;

        public virtual void setToState (IState state)
        ;

        public virtual void addStateChangeListener (IStateChangeListener listener)
        ;

        public virtual void delStateChangeListener (IStateChangeListener listener)
        ;

        public virtual bool fireStateChangingEvent ()
        ;

        public virtual void fireStateChangedEvent ()
        ;

    }

}

using System;

namespace org.ofsm
{
    public interface INamedObject
    {
    }

}

using System;

namespace org.ofsm
{
    public interface IState : INamedObject
    {
    }

}

using System;

namespace org.ofsm
{
    public interface IStateChangeListener
    {
    }

}

using System;

namespace org.ofsm
{
    public interface IStateTransition
    {
    }

}

