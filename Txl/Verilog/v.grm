#pragma -width 1024 -id "`?" 
tokens
    space  "[ \t]+"
    newline  "\n" | "" | "\n"
    id  "[$\u][.$\i]*" | "[$\u][$\i]*\?[bdh][\dabcdefABCDEFx]+" 
    number  "\d+[lL]?"   % DecimalIntegerLiteral | OctalIntegerLiteral 
          | "\d+\?[bdh][\dabcdefABCDEFx]+"
          | "\d+[bdh][\dabcdefABCDEFx]+"
end tokens

comments
    //
    /*  */
end comments

compounds
    !=  '%=  &&  &=  *=  ++  +=   --  -=  /=  ^=  |=  || <<  <<=  <=  ==  >=   ...
end compounds

keys
    'module 'endmodule 'begin 'end 'fork 'join 'specify 'endspecify 'if 'else 'while 'for 'forever 'repeat
    'wait 'case 'casex 'default 'endcase 'function 'endfunction 'task 'endtask 'generate 'endgenerate 'input
    'output 'inout 'integer 'wire 'reg 'event 'genvar 'real 'parameter 'signed '\\\\ '( ') '{ '} '[ '] '; '#
    '@ '$ ', ': '= 'ns 'ps '/ '^ '! '| '.
    'always 'or 
    '`include 
    '`define '`ifdef '`else '`endif '`timescale '? 
end keys

define program
      [module*]
    | [empty]
end define

define macro
    '`include | '`define | '`ifdef | '`else | '`endif | '`timescale
end define

define time_unit
    'ns 'ps
end define

define macro_statement
    [macro] [number] 'ns '/ [number] 'ps [NL]
   |[macro] [id] [opt expr] [NL]
   |[macro] [expr] [NL]
   | '`else [NL]
   | '`endif [NL]
end define

define module
      [module_declaration] '; [NL]
      [repeat statement] [NL]
      'endmodule 
    | [macro_statement]
end define

define statement
  [opt declaration] [opt ';] [NL]
end define
redefine statement
   [macro_statement*] ...
 end define

 redefine statement
   ...[macro_statement*] 
 end define


define module_declaration
    'module [id] '( [list part_module_declaration] ') 
end define

define part_module_declaration
    [macro_statement*] [id] [macro_statement*]
end define


define declaration
    [parameter_specification]
  | [variable_declaration] 
  | [variable_assignment_statement]
  | [if_statement]
  | [case_statement]
  | [block_statement]
  | [qualified_expression]
  | [component_configuration]
  | [function_decl]
end define

 redefine declaration
   [macro_statement*] ...
 end define

 redefine declaration
   ...[macro_statement*] 
 end define

define variable_declaration
    [variable_type] [opt range] [list var] 
end define

define var
   [id] [opt range] 
 | [id] '= [expr]
end define

define parameter_specification
    'parameter [id] '= [expr] 
end define

define variable_type
    'input | 'output | 'reg | 'wire
end define

define variable_assignment_statement
    [expr] '= [expr]
  | 'assign [expr] [opt range] '= [expr]
end define

define block_statement
   [opt 'initial] 'begin [NL] [IN]
	[statement*] [EX]
   'end
end define

define function_call
    [id] [list id] 
end define

define function_decl
    [id] '( [list id] ')
end define

define if_statement
    'if '( [expr] ')[NL][IN]
	[statement][EX]
    [opt else_statement]
end define

define else_statement
    'else [NL][IN]
	[statement][EX]
end define

define case
   'case | 'casex
end define

define case_statement
   [case] '( [expr] ')
     [case_statement_alternative*]
   'endcase
end define

define case_statement_alternative
   [list choice]  ': [statement*]
end define

redefine case_statement_alternative
   [macro_statement*] ...
end define
redefine case_statement_alternative
   ... [macro_statement*] 
end define

define choice
     [number]
   | [id]
   | 'default
end define

define subrange
    [expr] ': [expr] 
end define

define range
    '[ [expr] ': [expr] ']
end define

define shift_expression
  [expr] '<= '# [expr] [expr]
end define

define expr
     [id] 
   | [id] ' 'd [number]
   | [subrange]
   | '( [expr] ')
   | [id] '{ [expr] '}
   | [stringlit]
   | [shift_expression]
   | [number] [opt time_unit]
   | [id] '[ [expr] ']
   | [u_op] [expr] 
   | [expr] [op] [expr] 
   | [expr] '? [expr] ': [expr] 
   | '{ [list expr] '}
   | [function_call]
end define

define qualified_expression
   'always '@ '( [expr] ') [statement]
  | [expr]
end define

define u_op
 '~| '^ | '! | '|
end define

define op
    '+ | '- | '/ | '< | '> | '<= | 'or | '==  | '& | '| | '!= | '|| | '&& | '^ | '>=
end define

define component_configuration
 [id] [opt formal_parameter_list] [id] '( [list component_declaration] ')
end define

define component_declaration
 [SPOFF] '. [id] [SPON] '( [opt expr] ')
end define

redefine component_declaration
  [macro_statement*] ...
end define

redefine component_declaration
   ...[macro_statement*] 
end define

define formal_parameter_list
  '# '( [list expr] ') 
end define
