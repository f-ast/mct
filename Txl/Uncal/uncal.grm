tokens
%    space  "[ \t^L]+"
%    newline  "\n" | "^M" | "^M\n"
    id  "[$\u][$\i]*"
    bool "true" | "false"
end tokens

keys
'cycle 'rec 'if 'then 'else 'let 'llet 'in 'and 'or 'not 'isempty 'isint 'isbool 'isstring 'islabel 'isfloat
end keys

define aexpr
    '{ '}
    |  '( ')
    |  '{  			[IN] 
	[alpat_aexpr_list] 	[EX] [NL]
	[SPOFF] '} [SPON]	
    |  '( 			[IN] [NL]
	[aexpr_list] 		[EX] [NL]
	')
    |  'cycle( [aexpr] ')
    |  'doc( [stringlit] ')
    |  'if [abexpr] 'then [aexpr] 'else [aexpr]
    |  'rec( '\ '( [aexpr_rec_core]
    |  'let [variable] '= [aexpr] 'in [aexpr]
    |  'llet [label_variable] '= [alpat] 'in [aexpr]
    |  [marker]
    |  [variable]
    |  [marker] ':= [aexpr]
    |  [allit]
    |  [aexpr] '@ [aexpr] 
    |  [aexpr] 'U [aexpr]
    |  [aexpr] '++ [aexpr]
end define

define alpat_aexpr_list
    [alpat_aexpr,+] 
%    [alpat_aexpr] 
%   | [alpat_aexpr_list], [NL] [alpat_aexpr] 
end define

define alpat_aexpr
    [alpat] | [NL]  [alpat] [SPOFF] ': [SPON] [aexpr]
end define

define aexpr_list
    [aexpr,+]
end define

define aexpr_rec_core
    [label_variable] ', [variable] ') '. [aexpr] ') '( [aexpr] ')
end define

define alpat
    [label_variable]
    |  [allit]
    |  '( [alpat] ')
    |  [alpat] '+ [alpat]
    |  [alpat] '- [alpat]
    |  [alpat] '* [alpat]
    |  [alpat] '/ [alpat]
    |  [alpat] '^ [alpat]
end define

define alptype
    'isint
    |  'isbool
    |  'isstring
    |  'islabel
    |  'isfloat
end define

define abexpr
    'isempty '( [aexpr] ')
    |  [alptype] '( [alpat] ')
    |  'not [abexpr]
    |  [abexpr] 'and [abexpr]
    |  [abexpr] 'or [abexpr]
    |  [alpat_alcmp_alpat]
    |  [bool]
    |  '( [abexpr] ')
end define

define alpat_alcmp_alpat
    [alpat] '= [alpat]
    |  [alpat] '< [alpat]
    |  [alpat] '> [alpat]
end define

define label_variable
    [id]
end define

define variable
    '$db
    |  '$ [id]
end define

define allit
    [id]
    |  [number]
    |  [bool]
    |  [stringlit]
    |  '!
    |  '?
end define

define marker
    [SPOFF] '& [id] [SPON] 
end define

comments
    (*  *)
end comments

define program
    [aexpr]
end define
