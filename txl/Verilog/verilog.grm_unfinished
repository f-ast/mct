%------ From: Chris Satterlee, Wed, May 3, 1995 ------
%Verilog Formal Syntax Specification
%
%The basis for this formal syntax specification was obtained from the home page
%of Professor Don Thomas, who obtained it from the Verilog Language Reference
%Manual, Version 2.0, available from Open Verilog International (OVI) and is
%used with their permission.  The specification printed here is edited somewhat
%based on the ongoing Verilog standardization process which is being carried out
%by the IEEE 1364 Working Group. Thus, the specification printed here may be
%partially inaccurate. The result of this standardization process may be
%obtained from the IEEE or from OVI, whose offices are at 15466 Los Gatos Blvd,
%Suite 109071, Los Gatos, CA 95032 (408) 353-8899.
%
%This .html file was generated by Chris Satterlee who has allowed us to make it available to you. This is the same BNF that was distributed with the first and second edition of the book (pre-IEEE-standardization). Try it out with your favorite net surfer. For more information, contact:
%
%Chris Satterlee
%RAS System Level Design Engineer
%Silicon Graphics Computer Systems
%Mountain View, CA
%csatt@sgi.com
%
%     1. Source Text
%     2. Declarations
%     3. Primitive Instances
%     4. Module  Instantiations
%     5. Behavioral Statements
%     6. Specify Section
%     7. Expressions
%     8. General 
%
%
%Definition of Items in Formal Syntax Specifications:
%+-----------------------+------------------------------------------------------------+
%|      Item            |               Meaning                                     |
%+-----------------------+------------------------------------------------------------+
%| White space           | may be used to separate lexical tokens                     |
%+-----------------------+------------------------------------------------------------+
%| Angle brackets        | surround each description item and are not literal sym-    |
%|                       | bols. That is, they do not appear in the source descrip-   |
%|                       | tion. Any text outside angle brackets is literal.          |
%+-----------------------+------------------------------------------------------------+
%| <name> in lower case  | is a syntax construct item                                 |
%+-----------------------+------------------------------------------------------------+
%| <NAME> in upper case  | is a lexical token item. Its definition is a terminal node |
%|                       | in the description hierarchy -- that is, its definition    |
%|                       | does not contain any syntax construct items                |
%+-----------------------+------------------------------------------------------------+
%| <name>?               | is an optional item                                        |
%+-----------------------+------------------------------------------------------------+
%| <name>*               | is zero, one, or more items                                |
%+-----------------------+------------------------------------------------------------+
%| <name>+               | is one or more items                                       |
%+-----------------------+------------------------------------------------------------+
%| <name><,<name>>*      | is a comma-separated list of items with at least one       |
%|                       | item in the list                                           |
%+-----------------------+------------------------------------------------------------+
%| <name>               | gives a syntax definition to an item                       |
%+-----------------------+------------------------------------------------------------+
%| |                   | introduces an alternative syntax definition                |
%+-----------------------+------------------------------------------------------------+
%
%1. Source Text

define program
  [description*]
end deine

define description
   [module] | [UDP]
end define

define module
	'module [name_of_module] [opt list_of_ports] ';
	[module_item*]
	'endmodule
end module

define name_of_module
	[id]
end define

define list_of_ports
	[list port]
end define

define port
	[opt port_expression]
	| '. [name_of_port] '( [opt port_expression] ')
end define

define port_expression
	[port_reference] | '{ [list port_reference] '}
end define

define port_reference
	  [name_of_variable] 
	| [name_of_variable] '[ [constant_expression] ']
	| [name_of_variable] '[ [constant_expression] ': [constant_expression] ']
end define

define name_of_port
	[id]
end define

define name_of_variable
	[id]
end define

define module_item
	  [parameter_declaration]
	| [input_declaration]
	| [output_declaration]
	| [inout_declaration]
	| [net_declaration]
	| [reg_declaration]
	| [time_declaration]
	| [integer_declaration]
	| [real_declaration]
	| [event_declaration]
	| [gate_declaration]
	| [UDP_instantiation]
	| [module_instantiation]
	| [parameter_override]
	| [continuous_assign]
	| [specify_block]
	| [initial_statement]
	| [always_statement]
	| [task]
	| [function]
end define

define UDP
	'primitive [name_of_UDP] '( [list name_of_variable] ') ';
	[repeat UDP_declaration+]
	[opt UDP_initial_statement]
	[table_definition]
	'endprimitive
end define

define name_of_UDP
	[id]
end define

define UDP_declaration
	[output_declaration]
	| [reg_declaration]
	| [input_declaration]
end define

define UDP_initial_statement
	'initial [output_terminal_name] '= [init_val] ';
end define

define init_value
	  1'b0
	| 1'b1
	| 1'bx
	| 1'bX
	| 1'B0
	| 1'B1
	| 1'Bx
	| 1'BX
	| 1
	| 0
end define

define output_terminal_name
	[name_of_variable]
end define

define table_definition
	'table [table_entries] 'endtable
end define

define table_entries
	[repeat combinational_entry+]
      | [repeat sequential_entry+]
end define

define combinational_entry
	[level_input_list] ': [OUTPUT_SYMBOL] ';
end define

define sequential_entry
	[input_list] ': [state] ': [next_state] ';
end define

define input_list
	[level_input_list]
      | [edge_input_list]
end define

define level_input_list
	[repeat LEVEL_SYMBOL+]
end define

define edge_input_list
	[LEVEL_SYMBOL*] [edge] [LEVEL_SYMBOL*]
end define

define edge
	'( [LEVEL_SYMBOL] [LEVEL_SYMBOL] ')
	| [EDGE_SYMBOL]
end define

define state
	[LEVEL_SYMBOL]
end define

define next_state
	[OUTPUT_SYMBOL]
     | '- 
end define

tokens
	OUTPUT_SYMBOL '[01xX]'
	LEVEL_SYMBOL '[01xX?bB]'
	EDGE_SYMBOL '[rRfFpPnN*]'
end tokens

define task
	'task [name_of_task] ';
	[tf_declaration*]
	[statement_or_null]
	'endtask
end define

define name_of_task
	[id]
end define

define function
	'function [opt range_or_type] [name_of_function] ';
	[repeat tf_declaration+]
	[statement]
	'endfunction
end define

define range_or_type
	  [range]
	| [integer]
	| [real]
end define

define name_of_function
	[id]
end define

define tf_declaration
	  [parameter_declaration]
	| [input_declaration]
	| [output_declaration]
	| [inout_declaration]
	| [reg_declaration]
	| [time_declaration]
	| [integer_declaration]
	| [real_declaration]
end define

%2. Declarations

define parameter_declaration
	'parameter [list_of_param_assignments] ';
end define

define [list_of_param_assignments]
	[list param_assignment]
end define

define param_assignment
	[id] '= [constant_expression]
end define

define [input_declaration]
	'input [opt range] [list_of_variables] ';
end define

define output_declaration
	'output [opt range] [list_of_variables] ';
end define

define inout_declaration
	'inout [opt range] [list_of_variables] ';
end define

define net_declaration
	  [NETTYPE] [opt expandrange] [opt delay] [list_of_variables] ';
	| 'trireg [opt charge_strength] [opt expandrange] [opt delay] [list_of_variables] ';
	| [NETTYPE] [opt drive_strength] [opt expandrange] [opt delay] [list_of_assignments] ';
end define

define NETTYPE
	'wire  'tri  'tri1  'supply0  'wand  'triand  'tri0  'supply1  'wor  'trior  'trireg
end define

define expandrange
	   [range]
	| 'scalared [range]
	| 'vectored [range]
end define

define reg_declaration
	   'reg [opt range] [list_of_register_variables] ';
end define

define time_declaration
	   'time [list_of_register_variables] ';

end define 

define integer_declaration
	   'integer [list_of_register_variables] ';
end define 

define real_declaration
	   'real [list_of_variables] ';
end define 

define event_declaration
	   'event [list name_of_event] ';
end define 

define continuous_assign
	   'assign [opt drive_strength] [opt delay] [list_of_assignments] ';
	| [NETTYPE] [opt drive_strength] [opt expandrange] [opt delay] [list_of_assignments] ';
end define 

define parameter_override
	   'defparam [list_of_param_assignments] ';
end define 

define list_of_variables
	   [list name_of_variable]
end define 

define name_of_variable
	   [id]
end define 

define list_of_register_variables
	   [lsit register_variable]
end define 

define register_variable
	   [name_of_register]
	| [name_of_memory] '[ [constant_expression] ': [constant_expression] ']
end define 

define name_of_register
	   [id]
end define 

define name_of_memory
	   [id]
end define 

define name_of_event
	   [id]
end define 

define charge_strength
	  '( 'small ')
	| '( 'medium ')
	| '( 'large ')
end define 

define drive_strength
	  '( [STRENGTH0] ', [STRENGTH1] ')
	| '( [STRENGTH1] ', [STRENGTH0] ')
end define 

define STRENGTH0
	'supply0  'strong0  'pull0  'weak0  'highz0
end define 

define STRENGTH1
	'supply1  'strong1  'pull1  'weak1  'highz1
end define 

define range
	   '[ [constant_expression] ': [constant_expression] ']
end define 

define list_of_assignments
	   [list assignment]
end define

% 3. Primitive Instances

define gate_declaration
	   [GATETYPE] [opt drive_strength] [opt delay]  [list gate_instance] ';
end define 

define GATETYPE
	'and  'nand  'or  'nor 'xor  'xnor 'buf  'bufif0 'bufif1  'not  'notif0 'notif1  'pulldown 'pullup
	'nmos  'rnmos 'pmos 'rpmos 'cmos 'rcmos   'tran 'rtran  'tranif0  'rtranif0  'tranif1 'rtranif1
end define 

define delay
	  '# [number]
	| '# [identifier]
	| '# '([list mintypmax_expression]')
end define 

define gate_instance
	   [opt name_of_gate_instance] '( [list terminal] ')
end define 

define name_of_gate_instance
	   [id][opt range]
end define 

define UDP_instantiation
	   [name_of_UDP] [opt drive_strength] [opt delay]
	   [list UDP_instance] ';
end define 

define name_of_UDP
	   [id]
end define 

define UDP_instance
	   [opt name_of_UDP_instance] '( [list terminal] ')
end define 

define name_of_UDP_instance
	   [id][opt range]
end define 

define terminal
	  [expression]
	| [id]
end define 
% 4. Module Instantiations

define module_instantiation
	[name_of_module] [opt parameter_value_assignment]
	[list module_instance] ';
end define 

define name_of_module
	   [id]
end define 

define parameter_value_assignment
	   '# '( [list expression] ')
end define 

define module_instance
	   [name_of_instance] '( [opt list_of_module_connections] ')
end define 

define name_of_instance
	   [id][opt range]
end define 

define list_of_module_connections
	   [list module_port_connection] 
	| [list named_port_connection]
end define 

define module_port_connection
	   [expression]
	| [NULL]
end define 

define NULL
       [empty]
end define 

define named_port_connection
	   '.[id] '( [expression] ')
end define 

% 5. Behavioral Statements

define initial_statement
	   'initial [statement]
end define 

define always_statement
	   'always [statement]
end define 

define statement_or_null
	   [statement]
	| ';
end define 

define statement
	[blocking_assignment] ';
	| [non_blocking_assignment] ';
	| 'if '( [expression] ') [statement_or_null]
	| 'if '( [expression] ') [statement_or_null] 'else [statement_or_null]
	| 'case '( [expression] ') [case_item+] 'endcase
	| 'casez '( [expression] ') [case_item+] 'endcase
	| 'casex '( [expression] ') [case_item+] 'endcase
	| 'forever [statement]
	| 'repeat '( [expression] ') [statement]
	| 'while '( [expression] ') [statement]
	| 'for '( [assignment] '; [expression] '; [assignment] ') [statement]
	| [delay_or_event_control] [statement_or_null]
	| 'wait '( [expression] ') [statement_or_null]
	| '-'] [name_of_event] ';
	| [seq_block]
	| [par_block]
	| [task_enable]
	| [system_task_enable]
	| 'disable [name_of_task] ';
	| 'disable [name_of_block] ';
	| 'assign [assignment] ';
	| 'deassign [lvalue] ';
	| 'force [assignment] ';
	| 'release [lvalue] ';
end define 

define assignment
	   [lvalue] '= [expression]
end define 

define blocking_assignment
	   [lvalue] '= [expression]
	| [lvalue] '= [delay_or_event_control] [expression] ';
end define 

define non_blocking_assignment
	   [lvalue] '['= [expression]
	| [lvalue] '= [delay_or_event_control] [expression] ';
end define 

define delay_or_event_control
	   [delay_control]
	| [event_control]
	| 'repeat '( [expression] ') [event_control]
end define 

define case_item
	   [list expression] ': [statement_or_null]
	| 'default ': [statement_or_null]
	| 'default [statement_or_null]
end define 

define seq_block
	  'begin [statement*] 'end
	| 'begin ': [name_of_block] [block_declaration*] [statement*] 'end
end define 

define par_block
	  'fork [statement*] 'join
	| 'fork ': [name_of_block] [block_declaration*] [statement*] 'join
end define 

define name_of_block
	   [id]
end define 

define block_declaration
	  [parameter_declaration]
	| [reg_declaration]
	| [integer_declaration]
	| [real_declaration]
	| [time_declaration]
	| [event_declaration]
end define 

define task_enable
	   [name_of_task]
	| [name_of_task] '( [list expression] ') ';
end define 

define system_task_enable
	   [name_of_system_task] ';
	| [name_of_system_task] '( [list expression] ') ';
end define 

define name_of_system_task
	   '$[system_identifier] 
end define

define SYSTEM_IDENTIFIER
	[id]
end define

% 6. Specify Section

define specify_block
	   'specify [specify_item*] 'endspecify
end define 

define specify_item
	   [specparam_declaration]
	| [path_declaration]
	| [level_sensitive_path_declaration]
	| [edge_sensitive_path_declaration]
	| [system_timing_check]
	| [sdpd]
end define 

define specparam_declaration
	   'specparam [list_of_param_assignments] ';
end define 

define list_of_param_assignments
	[list param_assignment]
end define 

define param_assignment
	[identifier] '= [constant_expression]
end define 

define path_declaration
	   [path_description] '= [path_delay_value] ';
end define 

define path_description
	  '( [specify_input_terminal_descriptor] '=> [specify_output_terminal_descriptor] ')
	| '( [list_of_path_inputs*] ] [list_of_path_outputs] ')
end define 

define list_of_path_inputs
	   [list specify_input_terminal_descriptor]
end define 

define list_of_path_outputs
	    [list specify_output_terminal_descriptor]
end define 

define specify_input_terminal_descriptor
	   [input_identifier]
	| [input_identifier] '[ [constant_expression] ']
	| [input_identifier] '[ [constant_expression] ': [constant_expression] ']
end define 

define specify_output_terminal_descriptor
	   [output_identifier]
	| [output_identifier] '[ [constant_expression] ']
	| [output_identifier] '[ [constant_expression] ': [constant_expression] ']
end define 

define input_identifier
	   [id] 
end define 

define output_identifier
	   [id]
end define 

define path_delay_value
	   [path_delay_expression]
	| '( [path_delay_expression] ', [path_delay_expression] ')
	| '( [path_delay_expression] ', [path_delay_expression] ', [path_delay_expression] ')
	| '( [path_delay_expression] ', [path_delay_expression] ', [path_delay_expression] ', [path_delay_expression] ',
		[path_delay_expression] ', [path_delay_expression] ')
	| '( [path_delay_expression] ', [path_delay_expression] ', [path_delay_expression] ', [path_delay_expression] ',
		[path_delay_expression] ', [path_delay_expression] ', [path_delay_expression] ', [path_delay_expression]
		', [path_delay_expression] ', [path_delay_expression] ', [path_delay_expression] 
		', [path_delay_expression] ')
end define 

define path_delay_expression
	   [mintypmax_expression]
end define 

define system_timing_check
	  '$ 'setup '( [timing_check_event] ', [timing_check_event] ', [timing_check_limit]
		'[ ',[opt notify_register] '] ') ';
	| '$ 'hold '( [timing_check_event] ', [timing_check_event] ', [timing_check_limit]
		'[ ', [opt notify_register] '] ') ';
	| '$ 'period '( [controlled_timing_check_event] ', [timing_check_limit]
		'[ ',[opt notify_register] '] ') ';
	| '$ 'width '( [controlled_timing_check_event] ', [timing_check_limit]
		'[ ', [constant_expression] ', [notify_register]]? ) ';
	| $skew( [timing_check_event], [timing_check_event],
		[timing_check_limit]
		[,[notify_register]]? ) ';
	| $recovery( [controlled_timing_check_event],
		[timing_check_event],
		[timing_check_limit] [,[notify_register]]? ) ';
	| $setuphold( [timing_check_event], [timing_check_event],
		[timing_check_limit], [timing_check_limit] [,[notify_register]]? ) ';
end define 

define timing_check_event
	   [timing_check_event_control]? [specify_terminal_descriptor]
		[&&& [timing_check_condition]]?

end define define specify_terminal_descriptor
	   [specify_input_terminal_descriptor]
	|[specify_output_terminal_descriptor]

end define define controlled_timing_check_event
	   [timing_check_event_control] [specify_terminal_descriptor]
		[&&&  [timing_check_condition]]?

end define define timing_check_event_control
	   posedge
	| negedge
	| [edge_control_specifier]

end define define edge_control_specifier
	   edge  [ [edge_descriptor][,[edge_descriptor]]*]

end define define edge_descriptor
	   01
	| 10
	| 0x
	| x1
	| 1x
	| x0

end define define timing_check_condition
	   [scalar_timing_check_condition]
	| ( [scalar_timing_check_condition] )

end define define scalar_timing_check_condition
	   [scalar_expression]
	| ~[scalar_expression]
	| [scalar_expression] == [scalar_constant]
	| [scalar_expression] === [scalar_constant]
	| [scalar_expression] != [scalar_constant]
	| [scalar_expression] !== [scalar_constant]

end define define scalar_expression
	A scalar expression is a one bit net or a bit-select of an expanded vector net.

end define define timing_check_limit
	   [expression]

end define define scalar_constant
	   1'b0
	| 1'b1
	| 1'B0
	| 1'B1
	| 'b0
	| 'b1
	| 'B0
	| 'B1
	| 1
	| 0

end define define notify_register
	   [identifier]

end define define level_sensitive_path_declaration
	   if ([conditional_port_expression])
		([specify_input_terminal_descriptor] [polarity_operator]? =>
		[specify_output_terminal_descriptor]) = [path_delay_value]';
	| if ([conditional_port_expression])
		([list_of_path_inputs] [polarity_operator]? *]
		[list_of_path_outputs]) = [path_delay_value]';
	(Note: The following two symbols are literal symbols, not syntax description conventions:)
		*]	=>

end define define conditional_port_expression
	   [port_reference]
	| [UNARY_OPERATOR][port_reference]
	| [port_reference][BINARY_OPERATOR][port_reference]

end define define polarity_operator
	   +
	| -

end define define edge_sensitive_path_declaration
	   [if ([expression])]? ([edge_identifier]?
		[specify_input_terminal_descriptor] =>
		([specify_output_terminal_descriptor] [polarity_operator]?
		: [data_source_expression])) = [path_delay_value]';
	| [if ([expression])]? ([edge_identifier]?
		[specify_input_terminal_descriptor] *]
		([list_of_path_outputs] [polarity_operator]?
		: [data_source_expression])) =[path_delay_value]';

end define define data_source_expression
	Any expression, including constants and lists. Its width must be one bit or
	equal to the  destination's width. If the destination is a list, the data
	source must be as wide as the sum of  the bits of the members.

end define define edge_identifier
	   posedge
	| negedge

end define define sdpd
	::=if([sdpd_conditional_expression])[path_description]=[path_delay_value]';

end define define sdpd_conditional_expresssion
	::=[expression][BINARY_OPERATOR][expression]
	|[UNARY_OPERATOR][expression]


7. Expressions


end define define lvalue
	   [identifier]
	| [identifier] [ [expression] ]
	| [identifier] [ [constant_expression] : [constant_expression] ]
	| [concatenation]

end define define constant_expression
	::=[expression]

end define define mintypmax_expression
	   [expression]
	| [expression] : [expression] : [expression]

end define define expression
	   [primary]
	| [UNARY_OPERATOR] [primary]
	| [expression] [BINARY_OPERATOR] [expression]
	| [expression] [QUESTION_MARK] [expression] : [expression]
	| [STRING]


end define define UNARY_OPERATOR] is one of the following tokens:
	+  -  !  ~  &  ~&  |  ^|  ^  ~^

end define define BINARY_OPERATOR] is one of the following tokens:
	+  -  *  /  %  ==  !=  ===  !==  &&  ||  [  [=  ]  ]=  &  |  ^  ^~  ]]  [[

end define define QUESTION_MARK] is ? (a literal question mark).

end define define STRING] is text enclosed in "" and contained on one line.

end define define primary
	   [number]
	| [identifier]
	| [identifier] [ [expression] ]
	| [identifier] [ [constant_expression] : [constant_expression] ]
	| [concatenation]
	| [multiple_concatenation]
	| [function_call]
	| ( [mintypmax_expression] )

end define define number
	   [DECIMAL_NUMBER]
	| [UNSIGNED_NUMBER]? [BASE] [UNSIGNED_NUMBER]
	| [DECIMAL_NUMBER].[UNSIGNED_NUMBER]
	| [DECIMAL_NUMBER][.[UNSIGNED_NUMBER]]?
		E[DECIMAL_NUMBER]
	| [DECIMAL_NUMBER][.[UNSIGNED_NUMBER]]?
		e[DECIMAL_NUMBER]
	(Note: embedded spaces are illegal in Verilog numbers, but embedded underscore
	characters can be used for spacing in any type of number.)

end define define DECIMAL_NUMBER
	   A number containing a set of any of the following characters, optionally preceded by + or -
	 	0123456789_

end define define UNSIGNED_NUMBER
	   A number containing a set of any of the following characters:
	        0123456789_

end define define NUMBER
	Numbers can be specified in decimal, hexadecimal, octal or binary, and may
	optionally start with a + or -.  The [BASE] token controls what number digits
	are legal.  [BASE] must be one of d, h, o, or b, for the bases decimal,
	hexadecimal, octal, and binary respectively. A number can contain any set of
	the following characters that is consistent with [BASE]:
	0123456789abcdefABCDEFxXzZ?

end define define BASE] is one of the following tokens:
	'b   'B   'o   'O   'd   'D   'h   'H

end define define concatenation
	   { [expression] [,[expression]]* }

end define define multiple_concatenation
	   { [expression] { [expression] [,[expression]]* } }

end define define function_call
	   [name_of_function] ( [expression] [,[expression]]* )
	| [name_of_system_function] ( [expression] [,[expression]]* )
	| [name_of_system_function]

end define define name_of_function
	   [identifier]

end define define name_of_system_function
	   $[SYSTEM_IDENTIFIER]
	(Note: the $ may not be followed by a space.)



8. General


end define define comment
	   [short_comment]
	| [long_comment]

end define define short_comment
	   // [comment_text] [END-OF-LINE]

end define define long_comment
	   /* [comment_text] */

end define define comment_text
	   The comment text is zero or more ASCII characters

end define define identifier
	   [IDENTIFIER][.[IDENTIFIER]]*
	(Note: the period may not be preceded or followed by a space.)

end define 

define IDENTIFIER
	An identifier is any sequence of letters, digits, dollar signs ($), and
	underscore (_) symbol, except that the first must be a letter or the
	underscore; the first character may not be a digit or $. Upper and lower case
	letters are considered to be different. Identifiers may be up to 1024
	characters long. Some Verilog-based tools do not recognize  identifier
	characters beyond the 1024th as a significant part of the identifier. Escaped
	identifiers start with the backslash character (\) and may include any
	printable ASCII character. An escaped identifier ends with white space. The
	leading backslash character is not considered to be part of the identifier.

end define define delay
	   # [number]
	| # [identifier]
	| # ( [mintypmax_expression] [,[mintypmax_expression]]?
		[,[mintypmax_expression]]?)
end define 

define delay_control
	  '# [number]
	| '# [id]
	| '# '( [mintypmax_expression] ')
end define 

define event_control
	  '@ [id]
	| '@ '( [event_expression] ')
end define 

define event_expression
	   [expression]
	| 'posedge [scalar_event_expression]
	| 'negedge [scalar_event_expression]
	| [event_expression] 'or [event_expression]
end define 

define scalar_event_expression
	Scalar 
end define
