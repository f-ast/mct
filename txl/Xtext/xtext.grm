tokens
  id  "[$\u][$\i]*"
end tokens

keys
  'grammar 'with 'generate '= '+= '| '? '* 'enum 'terminal 
  '; '.. '. '[ '] '+ 'import 'as 'returns '::
end keys

comments
   /* */
   //
end comments

define qname
    [id] 
  | [qname] [SPOFF] '. [id] [SPON]
end define

define grammar
  'grammar [qname] 'with [qname] [NL]
end define

define generate
  'generate [id] [opt stringlit] [NL]
end define

define import_stmt
  'import [stringlit] 'as [id] [NL]
end define

define returns
    'returns [id]
  | 'returns [id] [SPOFF] ':: [SPON] [id] 
end define

define grammar_rule
  [opt 'enum] [id] [opt returns] [SPOFF] ': [SPON] [expr] [SPOFF] '; [SPON] [NL]
end define

define terminal_rule
  'terminal [id] [opt returns] ': [SPON] [char_expr*] [SPOFF] '; [SPON] [NL]
end define

define assignment
  [id] | [qname] '= [id]
end define

define expr
    [literal] 
  | [type]
  | '{ [list assignment] '}
  | [expr*]
  | '( [expr*] ')
  | [expr] '| [expr]
  | [expr] [SPOFF] '? [SPON]
  | [expr] [SPOFF] '* [SPON]
  | [expr] [SPOFF] '+ [SPON]
end define

define char_expr
    [charlit] 
  | [id]
  | [charlit] [SPOFF] '.. [SPON] [charlit]
  | '( [char_expr *] ')
  | [char_expr] [SPOFF] '? [SPON]
  | [char_expr] '| [char_expr]
  | [SPOFF] '! [SPON] [char_expr] 
  | [char_expr] [SPOFF] '* [SPON]
  | [char_expr] [SPOFF] '+ [SPON]
end define

define literal
    [type]
  | [stringlit] 
  | [charlit] 
  | [id]
end define

define op
  '= | [SPOFF] '+= [SPON]
end define

define operand
	[id] | [stringlit] | [charlit]
end define

define type
     [id] [SPOFF] [opt '?] [op] [opt '[ ] [operand] [opt '] ]
end define

define program
  [grammar] [opt import_stmt] [generate] [grammar_rule*] [terminal_rule*]
end define
