include "problem.grm"
redefine problem_description
        [indent]  [repeat E +]  [dedent] 
end define

redefine E
                [NL]
        [name]  [opt type]  [opt details]  [opt  ':]  [opt stringlit] 
    |    [NL]
        [name]  [SP]  [SPOFF]  [rel]  [SPON]  [name]  [opt details]  [opt desc] 
end define

redefine details
        '{ [indent]  [list phenomena]  [NL]
        [dedent]  '} 
end define

rule Small B  [E]
    match  [E]
        A  [E] 
construct SA  [stringlit]
    _  [quote  A] 
construct SB  [stringlit]
    _  [quote  B] 
where
    SA  [<  SB] end rule

    keys
        ... <<<<<<  >>>>>> 
    end keys

    compounds
        ... <<<<<<  >>>>>> 
    end compounds

    define Change
            <<<<<<  [NL]
            |  >>>>>>  [NL]
 
    end define

rule normalise_list_problem_description_E
    replace  [repeat E]
        N1  [E]  N2  [E]  Rest  [repeat E] 
    where
        N1  [Small  N2]
    by
        N2  N1  Rest 
end rule

function normalise_ignore_by3_E_details1 E1  [E]
    replace  [E *]
        Seq  [E *] 
    deconstruct E1
        X1  [name]  X2  [opt type]  X3  [opt details]  X4  [opt  ':]  X5  [opt stringlit] 
    construct E2  [E]
        X1  X2  X4  X5 
    by
        Seq  [ . E2 ] 
end function

function normalise_ignore_by4_E_details1
    replace  [program]
        P1  [ program ] 
    construct List1  [E *]
        _  [ ^  P1 ] 
    construct List2  [E *]
        _  [normalise_ignore_by3_E_details1  each  List1]
 
    construct P2  [program]
        P1  [ $  List1  List2 ] 
    by
        P2 
end function

rule normalise_list_details_phenomena
    replace  [list phenomena]
        N1  [phenomena] ,  N2  [phenomena] ,  Rest  [list phenomena] 
    construct T1  [stringlit]
        _  [ quote  N1 ] 
    construct T2  [stringlit]
        _  [ quote  N2 ] 
    where
        T1  [>  T2]
    by
        N2 ,  N1 ,  Rest 
end rule

function program_normalise
    replace  [program]
        Prg  [ program ] 
    by
        Prg  [ normalise_ignore_by4_E_details1 ]  [ normalise_list_problem_description_E ]  [ normalise_list_details_phenomena 
          ] 
end function

function program_remove_clone
    replace  [program]
        Prg  [ program ] 
    export CloneNumber [number]
        0 
    import TXLargs [repeat stringlit]

    deconstruct * TXLargs
        "-diff"  Filename  [ stringlit ] 
    construct P2  [program]
        _  [ read  Filename ]  [ program_normalise ] 
    export Program_Diff [program]
        P2 
    by
        Prg 
end function

redefine program
        ...
    |    [empty]  |  [attr number] 
end define

function print_diff_1
    replace  [program]
        Prg  [ program ] 
    import TXLinput [stringlit]

    construct Str_TmpFile  [stringlit]
        TXLinput  [ +  ".tmp" ] 
    construct Str_RmTmpFile  [stringlit]
        _  [ +  "/bin/rm -f " ]  [ +  Str_TmpFile ] 
    construct P2  [program]
        Prg  [ write  Str_TmpFile ]  [ read  Str_TmpFile ]  [ system  Str_RmTmpFile ] 
    construct S_Diff  [stringlit]
        _  [ quote  P2 ] 
    where not
        S_Diff  [=  ""]
    by
        Prg 
end function

function print_diff_2
    replace  [program]
        Prg  [ program ] 
    import TXLinput [stringlit]

    construct Str_TmpFile  [stringlit]
        TXLinput  [ +  ".tmp" ] 
    construct Str_RmTmpFile  [stringlit]
        _  [ +  "/bin/rm -f " ]  [ +  Str_TmpFile ] 
    construct P2  [program]
        Prg  [ write  Str_TmpFile ]  [ read  Str_TmpFile ]  [ system  Str_RmTmpFile ] 
    construct S_Diff  [stringlit]
        _  [ quote  P2 ] 
    where
        S_Diff  [=  ""]
    by
        _ 
end function

function print_diff
    replace  [program]
        P_diff  [ program ] 
    import CloneNumber [number]

    where
        CloneNumber  [>  0]
    import Program_Diff [program]

    construct P_Clone  [program]
        CloneNumber 
    construct P_Left  [program]
        P_diff  [ print_diff_1 ]  [ print_diff_2 ]  [ printattr ] 
    construct P_Right  [program]
        Program_Diff  [ print_diff_1 ]  [ print_diff_2 ]  [ printattr ] 
    by
        P_Clone 
end function

function main
    replace  [program]
        Prg  [ program ] 
    by
        Prg  [ program_normalise ]  [ program_remove_clone ]  [ print_diff ] 
end function

