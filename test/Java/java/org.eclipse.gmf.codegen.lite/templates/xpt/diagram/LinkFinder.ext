/*
 * Copyright (c) 2007 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/emf/2002/Ecore";
import "http://www.eclipse.org/emf/2002/GenModel";
import "http://www.eclipse.org/gmf/2008/GenModel";
extension xpt::GenModelUtils;
extension xpt::commands::CommandUtils;
extension xpt::diagram::PhantomUtils;

cached Collection[gmfgen::GenLink] incomingLinks(gmfgen::GenCommonBase gcb) :
	let effectiveMetaClass = gcb.getEffectiveMetaClass() :
	(effectiveMetaClass == null ? {} :
		gcb.getDiagram().links.select(e| e.incomingGenClass().ecoreClass.isSuperTypeOf(effectiveMetaClass.ecoreClass)))
;

Collection[gmfgen::GenLink] incomingTypeLinks(gmfgen::GenCommonBase gcb) :
	gcb.incomingLinks().select(e| {e.modelFacet}.typeSelect(gmfgen::TypeLinkModelFacet).size() > 0)
;

cached Collection[gmfgen::GenLink] outgoingLinks(gmfgen::GenCommonBase gcb) :
	let effectiveMetaClass = gcb.getEffectiveMetaClass() :
	(effectiveMetaClass == null ? {} :
		gcb.getDiagram().links.select(e| e.outgoingGenClass().ecoreClass.isSuperTypeOf(effectiveMetaClass.ecoreClass)))
;

cached Collection[gmfgen::GenLink] outgoingNonPhantomLinks(gmfgen::GenCommonBase gcb) :
	gcb.outgoingLinks().select(e| !e.modelFacet.isPhantomLink(gcb.getDiagram()))
;

cached Collection[gmfgen::GenLink] containedLinks(gmfgen::GenCommonBase gcb) :
	let effectiveMetaClass = gcb.getEffectiveMetaClass() :
		(effectiveMetaClass == null ? {} :
			gcb.getDiagram().links.select(e | e.containerGenClass().ecoreClass.isSuperTypeOf(effectiveMetaClass.ecoreClass)))
;

cached Collection[gmfgen::GenLink] containedTypeModelFacetLinks(gmfgen::GenCommonBase gcb) :
	gcb.containedLinks().select(e| {e.modelFacet}.typeSelect(gmfgen::TypeLinkModelFacet).size() > 0)
;

cached Collection[gmfgen::GenLink] containedFeatureModelFacetLinks(gmfgen::GenCommonBase gcb) :
	gcb.containedLinks().select(e| {e.modelFacet}.typeSelect(gmfgen::FeatureLinkModelFacet).size() > 0)
;

cached Collection[gmfgen::GenLink] containedLinksWithSelector(gmfgen::GenCommonBase gcb) :
	gcb.containedTypeModelFacetLinks().select(e| e.modelFacet.getElementSelector() != null)
;

boolean needsSourceVisualID(gmfgen::GenCommonBase gcb) :
	gcb.containedLinks().select(e| e.modelFacet != null && e.getDiagram().getRelatedChildLabelGenNodes(e.modelFacet.getSourceType()).size() > 0).size() > 0
;

boolean needsTargetVisualID(gmfgen::GenCommonBase gcb) :
	gcb.containedLinks().select(e| e.modelFacet != null && e.getDiagram().getRelatedChildLabelGenNodes(e.modelFacet.getTargetType()).size() > 0).size() > 0
;

Collection[gmfgen::GenCommonBase] getPossibleContainers(gmfgen::GenLink link) :
	let containerClass = link.containerGenClass().ecoreClass : 
	(containerClass == null ? {} : 
		{link.getDiagram(), link.getDiagram().getAllNodes(), link.getDiagram().links}.flatten()
			.select(e| let effectiveMetaClass = ((gmfgen::GenCommonBase) e).getEffectiveMetaClass() : effectiveMetaClass == null ? false : 
				containerClass.isSuperTypeOf(effectiveMetaClass.ecoreClass))
	)
;

private gmfgen::GenConstraint getElementSelector(gmfgen::LinkModelFacet facet) :
	null
;

private gmfgen::GenConstraint getElementSelector(gmfgen::TypeLinkModelFacet facet) :
	facet.modelElementSelector
;

private genmodel::GenClass incomingGenClass(gmfgen::GenLink link) :
	link.modelFacet.incomingGenClass()
;

private genmodel::GenClass incomingGenClass(gmfgen::LinkModelFacet facet) :
	null
;

private genmodel::GenClass incomingGenClass(gmfgen::FeatureLinkModelFacet facet) :
	facet.metaFeature.getTypeGenClass()
;

private genmodel::GenClass incomingGenClass(gmfgen::TypeLinkModelFacet facet) :
	facet.targetMetaFeature.getTypeGenClass()
;

private genmodel::GenClass outgoingGenClass(gmfgen::GenLink link) :
	link.modelFacet.outgoingGenClass()
;

private genmodel::GenClass outgoingGenClass(gmfgen::LinkModelFacet facet) :
	null
;

private genmodel::GenClass outgoingGenClass(gmfgen::FeatureLinkModelFacet facet) :
	facet.metaFeature.genClass
;

private genmodel::GenClass outgoingGenClass(gmfgen::TypeLinkModelFacet facet) :
	facet.sourceMetaFeature == null ? facet.containmentMetaFeature.genClass
		: facet.sourceMetaFeature.getTypeGenClass()
;

private genmodel::GenClass getTypeGenClass(genmodel::GenFeature feature) :
	findGenClassifier(feature.genClass.genPackage.genModel, feature.ecoreFeature.eType)
;

private genmodel::GenClass containerGenClass(gmfgen::GenLink link) :
	link.modelFacet.containerGenClass()
;

private genmodel::GenClass containerGenClass(gmfgen::LinkModelFacet facet) :
	null
;

private genmodel::GenClass containerGenClass(gmfgen::TypeLinkModelFacet facet) :
	facet.containmentMetaFeature.genClass
;

private genmodel::GenClass containerGenClass(gmfgen::FeatureLinkModelFacet facet) :
	facet.metaFeature.genClass
;

private genmodel::GenClass getEffectiveMetaClass(gmfgen::GenCommonBase gcb) :
	null
;

private genmodel::GenClass getEffectiveMetaClass(gmfgen::GenDiagram diagram) :
	diagram.domainDiagramElement
;

private genmodel::GenClass getEffectiveMetaClass(gmfgen::GenNode node) :
	node.modelFacet.metaClass
;

private genmodel::GenClass getEffectiveMetaClass(gmfgen::GenLink link) :
	link.modelFacet.getEffectiveMetaClass()
;

private genmodel::GenClass getEffectiveMetaClass(gmfgen::LinkModelFacet facet) :
	null
;

private genmodel::GenClass getEffectiveMetaClass(gmfgen::TypeLinkModelFacet facet) :
	facet.metaClass
;

private genmodel::GenClass getEffectiveMetaClass(gmfgen::GenChildLabelNode node) :
	null
;
