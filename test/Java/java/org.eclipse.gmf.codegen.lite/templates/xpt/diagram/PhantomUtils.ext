/*
 * Copyright (c) 2007 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/emf/2002/Ecore";
import "http://www.eclipse.org/emf/2002/GenModel";
import "http://www.eclipse.org/gmf/2008/GenModel";
extension xpt::GenModelUtils;

Collection[gmfgen::GenTopLevelNode] getPhantomNodes(gmfgen::GenDiagram diagram) :
	diagram.topLevelNodes.select(e| e.modelFacet.isPhantomElement())
;

Collection[genmodel::GenFeature] getPhantomFeatures(gmfgen::GenDiagram diagram) :
	diagram.getPhantomFeatures(diagram.getPhantomNodes())
;

Collection[genmodel::GenFeature] getPhantomFeatures(gmfgen::GenTopLevelNode phantom) :
	phantom.getDiagram().getPhantomFeatures({phantom})
;

private Collection[genmodel::GenFeature] getPhantomFeatures(gmfgen::GenDiagram diagram, Collection[gmfgen::GenTopLevelNode] phantomNodes) :
	diagram.links.select(e| e.modelFacet.isPhantomLink(phantomNodes)).collect(e| ((gmfgen::FeatureLinkModelFacet) e.modelFacet).metaFeature)
;

boolean isPhantomLink(gmfgen::LinkModelFacet facet, gmfgen::GenDiagram diagram) :
	facet.isPhantomLink(diagram.getPhantomNodes())
;

boolean isPhantomLink(gmfgen::LinkModelFacet facet, Collection[gmfgen::GenTopLevelNode] phantoms) :
	false
;

boolean isPhantomLink(gmfgen::FeatureLinkModelFacet facet, Collection[gmfgen::GenTopLevelNode] phantoms) :
	!facet.metaFeature.isContains() ? false :
		(let featureType = facet.metaFeature.getTypeGenClassX().ecoreClass : 
			phantoms.select(e| featureType.isSuperTypeOf(e.modelFacet.metaClass.ecoreClass)).size() > 0)
;
