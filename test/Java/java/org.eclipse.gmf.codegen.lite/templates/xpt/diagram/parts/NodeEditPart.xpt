/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::diagram::parts::Common»
«EXTENSION xpt::diagram::parts::NodeEditPart»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»
«EXTENSION xpt::diagram::Helper»

«DEFINE NodeEditPart FOR gmfgen::GenNode-»
«EXPAND xpt::Common::copyright FOR getDiagram().editorGen»
package «getDiagram().editPartsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «editPartClassName» «EXPAND supertypes» {
	«EXPAND xpt::diagram::parts::Common::visualIDConstant-»
	«EXPAND primaryShapeAttribute-»
	«EXPAND xpt::diagram::parts::Common::ctors-»
	«EXPAND xpt::diagram::parts::Common::registerModel-»
	«EXPAND createEditPolicies-»
	«EXPAND getPrimaryDragEditPolicy-»
	«EXPAND getDragTracker-»

	«EXPAND createFigure-»

	«EXPAND createDecorationPane-»
	«EXPAND xpt::diagram::parts::decorations::decorationManager-»
	«EXPAND xpt::diagram::parts::decorations::createDecorationManager-»
«IF compartments.size() > 0 && hasDirectChildren()-»
	«EXPAND childNodesPane-»
	«EXPAND setupChildNodesPane-»
«ENDIF-»
	«EXPAND createNodeShape-»
	«EXPAND getPrimaryShape FOR primaryShapeQualifiedClassName(viewmap)-»
	«EXPAND setupContentPane-»
	«EXPAND xpt::diagram::parts::Common::contentPane-»

	«EXPAND xpt::diagram::parts::Common::declareViewCode-»
«IF getInnerFixedLabels().size() > 0 || getPinnedCompartments().size() > 0 || getSideAffixedChildren().size() > 0-»
	«EXPAND addFixedChild-»
	«EXPAND removeFixedChild-»
«ENDIF-»

	«EXPAND xpt::diagram::parts::requests::getPrimaryLabelEditPart-»
	«EXPAND xpt::diagram::parts::requests::performRequest-»
	«EXPAND xpt::diagram::parts::requests::getLabelEditPart-»
«IF getExternalLabels().size() > 0-»
	«EXPAND isExternalLabel-»
«ENDIF-»
«IF getExternalLabels().size() > 0 || getSideAffixedChildren().size() > 0-»
	«EXPAND getExternalLabelsContainer-»
«ENDIF-»

«IF (compartments.size() > 0 || getSideAffixedChildren().size() > 0) && hasDirectChildren()-»
	«EXPAND isDirectChild-»
«ENDIF-»

«IF getSideAffixedChildren().size() > 0-»
	«EXPAND isSideAffixedChild-»
«ENDIF-»

«IF getExternalLabels().size() > 0 || (compartments.size() > 0 && hasDirectChildren()) || getPinnedCompartments().size() > 0 || getInnerFixedLabels().size() > 0 || getSideAffixedChildren().size() > 0-»
	«EXPAND addChildVisual-»
	«EXPAND removeChildVisual-»
«ENDIF-»
«IF getExternalLabels().size() > 0 || getSideAffixedChildren().size() > 0-»
	«EXPAND removeNotify-»
«ENDIF-»

	«EXPAND xpt::diagram::parts::Common::getModelChildren-»
	«EXPAND xpt::diagram::parts::Common::getModelSourceConnections-»
	«EXPAND xpt::diagram::parts::Common::getModelTargetConnections-»
	«EXPAND connectionAnchors-»
	«EXPAND xpt::diagram::parts::Common::getAdapter-»

	«EXPAND xpt::diagram::parts::TreeEditPart::getTreeEditPartAdapter-»
	«EXPAND xpt::diagram::parts::Common::externalChildPositionTracker-»

	«EXPAND xpt::diagram::parts::Common::activate-»
	«EXPAND xpt::diagram::parts::Common::deactivate-»
	«EXPAND xpt::diagram::parts::NotationModelRefresher::all-»
	«EXPAND xpt::diagram::parts::LinkNotationModelRefresher::all-»
	«EXPAND xpt::diagram::parts::Common::getTransactionalUpdateManager-»
	«EXPAND xpt::diagram::parts::refresh::refresher-»
	«EXPAND xpt::diagram::parts::refresh::externalRefreshers-»

	«EXPAND xpt::diagram::parts::Common::viewmap FOR viewmap-»
	«EXPAND xpt::diagram::parts::TreeEditPart::TreeEditPart-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE supertypes FOR gmfgen::GenNode»extends org.eclipse.gef.editparts.AbstractGraphicalEditPart implements org.eclipse.gef.NodeEditPart, org.eclipse.gmf.runtime.lite.edit.parts.update.IUpdatableEditPart, org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart, org.eclipse.gmf.runtime.lite.edit.parts.decorations.IDecoratableEditPart«ENDDEFINE»

«DEFINE primaryShapeAttribute FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.draw2d.IFigure primaryShape;
«ENDDEFINE»

«DEFINE createEditPolicies FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected void createEditPolicies() {
	installEditPolicy(org.eclipse.gef.EditPolicy.COMPONENT_ROLE, new «EXPAND xpt::diagram::policies::ComponentEditPolicy::qualifiedClassName»());
	installEditPolicy(org.eclipse.gef.EditPolicy.GRAPHICAL_NODE_ROLE, new «getGraphicalNodeEditPolicyQualifiedClassName()»());
«IF getPrimaryLabel() != null-»
	installEditPolicy(org.eclipse.gef.EditPolicy.DIRECT_EDIT_ROLE, new org.eclipse.gmf.runtime.lite.edit.policies.DelegatingDirectEditPolicy());
«ENDIF-»
«IF getDirectChildren().size() > 0-»
	installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, new «EXPAND xpt::diagram::policies::LayoutEditPolicy::qualifiedClassName»());
«ENDIF-»
«IF getSideAffixedChildren().size() > 0-»
	installEditPolicy(org.eclipse.gmf.runtime.lite.edit.policies.EditPolicyRoles.SIDE_AFFIXED_LAYOUT_ROLE, new «EXPAND xpt::diagram::policies::LayoutEditPolicy::SideAffixedQualifiedClassName»());
«ENDIF-»
	«EXPAND xpt::diagram::parts::Common::behaviour-»
	installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());
	«EXPAND installRefreshers-»
	}
«ENDDEFINE»

«DEFINE installRefreshers FOR gmfgen::GenNode-»
«EXPAND xpt::diagram::parts::NotationModelRefresher::installClause-»
«EXPAND xpt::diagram::parts::LinkNotationModelRefresher::installClause-»
«ENDDEFINE»

«DEFINE getPrimaryDragEditPolicy FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.EditPolicy getPrimaryDragEditPolicy() {
«IF primaryDragEditPolicyQualifiedClassName != null-»
	return new «primaryDragEditPolicyQualifiedClassName»();
«ELSE-»
	«EXPAND returnPrimaryDragEditPolicy-»
«ENDIF-»
}
«ENDDEFINE»

«DEFINE returnPrimaryDragEditPolicy FOR gmfgen::GenNode-»
org.eclipse.gef.editpolicies.ResizableEditPolicy result = new org.eclipse.gef.editpolicies.ResizableEditPolicy()«EXPAND contributeSelectionHandles»;
«EXPAND setResizeConstraints FOR viewmap.getResizeConstraints()-»
return result;
«ENDDEFINE»

«DEFINE returnPrimaryDragEditPolicy FOR gmfgen::GenChildSideAffixedNode-»
return new org.eclipse.gmf.runtime.lite.edit.policies.SideAffixedDragEditPolicy()«EXPAND contributeSelectionHandles»;
«ENDDEFINE»

«DEFINE contributeSelectionHandles FOR gmfgen::GenNode-»
«IF compartments.size() + getExternalLabels().size() > 0-»
{
	protected java.util.List createSelectionHandles() {
		java.util.List result = super.createSelectionHandles();
		for(java.util.Iterator it = getChildren().iterator(); it.hasNext(); ) {
			org.eclipse.gef.EditPart next = (org.eclipse.gef.EditPart) it.next();
			org.eclipse.gmf.runtime.notation.View nextView = (org.eclipse.gmf.runtime.notation.View) next.getModel();
			switch («getDiagram().getVisualIDRegistryQualifiedClassName()».getVisualID(nextView)) {
			«EXPAND addSelectionHandles FOREACH compartments-»
			«EXPAND addSelectionHandles FOREACH getExternalLabels()-»
			}
		}
		return result;
	}
}«ENDIF-»
«ENDDEFINE»

«DEFINE getDragTracker FOR gmfgen::GenNode»«ENDDEFINE»

«DEFINE getDragTracker FOR gmfgen::GenChildSideAffixedNode-»
«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.gef.DragTracker getDragTracker(org.eclipse.gef.Request request) {
	return new org.eclipse.gef.tools.DragEditPartsTracker(this) {
		protected boolean isMove() {
			return true;
		}
	};
}
«ENDDEFINE»

«DEFINE createFigure FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.draw2d.IFigure createFigure() {
	org.eclipse.draw2d.IFigure invisibleRectangle = new org.eclipse.draw2d.Figure();
	invisibleRectangle.setLayoutManager(new org.eclipse.draw2d.StackLayout());
	org.eclipse.draw2d.IFigure shape = createNodeShape();
	invisibleRectangle.add(shape);
	contentPane = setupContentPane(shape);
«IF compartments.size() > 0 && hasDirectChildren()-»
		childNodesPane = createChildNodesPane();
		shape.add(childNodesPane);
«ENDIF-»
	org.eclipse.draw2d.IFigure decorationShape = createDecorationPane();
	if (decorationShape != null) {
		myDecorationManager = createDecorationManager(decorationShape);
		invisibleRectangle.add(decorationShape);
	}
	return invisibleRectangle;
}
«ENDDEFINE»

«DEFINE addSelectionHandles FOR gmfgen::GenCommonBase-»
case «getEditPartQualifiedClassName()».VISUAL_ID:
	result.addAll(((«getEditPartQualifiedClassName()») next).createSelectionHandles());
	break;
«ENDDEFINE»

«DEFINE setResizeConstraints FOR gmfgen::ResizeConstraints-»
«IF resizeHandles == 0-»
		result.setResizeDirections(org.eclipse.draw2d.PositionConstants.NONE);
«ELSE-»
		result.setResizeDirections(«EXPAND resizeHandleName FOREACH resizeHandleNames SEPARATOR ' | '»);
«ENDIF-»
«ENDDEFINE»

«DEFINE resizeHandleName FOR ecore::EString»org.eclipse.draw2d.PositionConstants.«this»«ENDDEFINE»

«DEFINE childNodesPane FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.draw2d.IFigure childNodesPane;

«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.draw2d.IFigure createChildNodesPane() {
	org.eclipse.draw2d.IFigure result = new org.eclipse.draw2d.RectangleFigure()«IF isXYLayout()»«EXPAND forceUseLocalCoordinates»«ENDIF»;
	setupChildNodesPane(result);
	return result;
}
«ENDDEFINE»

«DEFINE createNodeShape FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.draw2d.IFigure createNodeShape() {
	«EXPAND initPrimaryShape(this) FOR viewmap-»
	return primaryShape;
}
«ENDDEFINE»

«DEFINE initPrimaryShape(gmfgen::GenNode node) FOR gmfgen::Viewmap»«ERROR "Unexpected viewmap type " + this»«ENDDEFINE»

«DEFINE initPrimaryShape(gmfgen::GenNode node) FOR gmfgen::FigureViewmap-»
primaryShape = new «primaryShapeQualifiedClassName(this)»()«IF node.compartments.size() == 0 && node.hasDirectChildren() && node.isXYLayout()»«EXPAND forceUseLocalCoordinates»«ENDIF»;
«ENDDEFINE»

«DEFINE initPrimaryShape(gmfgen::GenNode node) FOR gmfgen::SnippetViewmap-»
primaryShape = «body»;
«ENDDEFINE»

«DEFINE initPrimaryShape(gmfgen::GenNode node) FOR gmfgen::InnerClassViewmap-»
«primaryShapeQualifiedClassName(this)» figure = new «primaryShapeQualifiedClassName(this)»();
«IF node.compartments.size() == 0 && node.hasDirectChildren() && node.isXYLayout()-»
figure.setUseLocalCoordinates(true);
«ENDIF-»
primaryShape = figure;
«ENDDEFINE»

«DEFINE forceUseLocalCoordinates FOR Object-»
{
	protected boolean useLocalCoordinates() {
		return true;
	}
}«-»
«ENDDEFINE»

«DEFINE getPrimaryShape FOR ecore::EString-»
«EXPAND xpt::Common::generatedMemberComment»
public «this» getPrimaryShape() {
	return («this») primaryShape;
}
«ENDDEFINE»

«DEFINE setupContentPane FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment("Default implementation treats passed figure as content pane.\n" + 
 "Respects layout one may have set for generated figure.\n" + 
 "@param nodeShape instance of generated figure class")»
protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
	if (nodeShape.getLayoutManager() == null) {
		«EXPAND setLayoutManager("nodeShape", compartments.size() == 0 && isXYLayout())-»
	}
	return nodeShape; // use nodeShape itself as contentPane
}
«ENDDEFINE»

«DEFINE setupChildNodesPane FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected void setupChildNodesPane(org.eclipse.draw2d.IFigure shape) {
	if (shape.getLayoutManager() == null) {
		«EXPAND setLayoutManager("shape", isXYLayout())-»
	}
}
«ENDDEFINE»

«DEFINE setLayoutManager(String shapeVar, Boolean xyLayout) FOR gmfgen::GenNode-»
«IF xyLayout-»
«shapeVar».setLayoutManager(new org.eclipse.draw2d.FreeformLayout() {
	public Object getConstraint(org.eclipse.draw2d.IFigure figure) {
		Object result = constraints.get(figure);
		if (result == null) {
			result = new org.eclipse.draw2d.geometry.Rectangle(0, 0, -1, -1);
		}
		return result;
	}
});
«ELSE-»
org.eclipse.draw2d.ToolbarLayout layout = new org.eclipse.draw2d.ToolbarLayout();
layout.setSpacing(5);
«shapeVar».setLayoutManager(layout);
«ENDIF-»
«ENDDEFINE»

«DEFINE createDecorationPane FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.draw2d.IFigure createDecorationPane() {
	return new org.eclipse.draw2d.Layer();
}
«ENDDEFINE»

«DEFINE addFixedChild FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
«EXPAND addFixedLabel FOREACH getInnerFixedLabels()-»
«EXPAND addFixedCompartment FOREACH getPinnedCompartments()-»
	return false;
}
«ENDDEFINE»

«DEFINE addFixedLabel FOR gmfgen::GenLabel-»
if (childEditPart instanceof «getEditPartQualifiedClassName()») {
	((«getEditPartQualifiedClassName()») childEditPart).«EXPAND setter FOR viewmap»(getPrimaryShape().«EXPAND getter FOR viewmap»());
	return true;
}
«ENDDEFINE»

«DEFINE getter FOR gmfgen::Viewmap»«ERROR "Unexpected type"»«ENDDEFINE»
«DEFINE getter FOR gmfgen::ParentAssignedViewmap»«getterName»«ENDDEFINE»

«DEFINE setter FOR gmfgen::Viewmap»«ERROR "Unexpected type"»«ENDDEFINE»
«DEFINE setter FOR gmfgen::ParentAssignedViewmap»«IF setterName == null»setLabel«ELSE»«setterName»«ENDIF»«ENDDEFINE»

«DEFINE addFixedCompartment FOR gmfgen::GenCompartment-»
if (childEditPart instanceof «getEditPartQualifiedClassName()») {
	org.eclipse.draw2d.IFigure pane = getPrimaryShape().«EXPAND getter FOR viewmap»();
	((«getEditPartQualifiedClassName()») childEditPart).setupCompartmentHolder(pane);
	pane.add(((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure());
	return true;
}	
«ENDDEFINE»

«DEFINE removeFixedChild FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
«REM»ignore labels assuming that they never may be removed«ENDREM»
«EXPAND removeFixedCompartment FOREACH getPinnedCompartments()-»
	return false;
}
«ENDDEFINE»

«DEFINE removeFixedCompartment FOR gmfgen::GenCompartment-»
if (childEditPart instanceof «getEditPartQualifiedClassName()») {
	org.eclipse.draw2d.IFigure pane = getPrimaryShape().«EXPAND getter FOR viewmap»();
	pane.remove(((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure());
	return true;
}	
«ENDDEFINE»

«DEFINE isExternalLabel FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
public boolean isExternalLabel(org.eclipse.gef.EditPart childEditPart) {
«EXPAND returnInstanceof("childEditPart") FOREACH getExternalLabels()-»
	return false;
}
«ENDDEFINE»

«DEFINE isDirectChild FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
public boolean isDirectChild(org.eclipse.gef.EditPart childEditPart) {
«EXPAND returnInstanceof("childEditPart") FOREACH getDirectChildren()-»
	return false;
}
«ENDDEFINE»

«DEFINE isSideAffixedChild FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
public boolean isSideAffixedChild(org.eclipse.gef.EditPart childEditPart) {
	«EXPAND returnInstanceof("childEditPart") FOREACH getSideAffixedChildren()-»
	return false;
}
«ENDDEFINE»

«DEFINE returnInstanceof(String var) FOR gmfgen::GenCommonBase-»
if («var» instanceof «getEditPartQualifiedClassName()») {
	return true;
}
«ENDDEFINE»

«DEFINE addChildVisual FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
«IF getExternalLabels().size() > 0-»
		if (isExternalLabel(childEditPart)) {
			org.eclipse.draw2d.IFigure childFigure = ((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure();
			getExternalLabelsContainer().add(childFigure);
			«EXPAND addPositionTracker-»
			return;
		}
«ENDIF-»
«IF getSideAffixedChildren().size() > 0-»
		if (isSideAffixedChild(childEditPart)) {
			org.eclipse.draw2d.IFigure childFigure = ((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure();
			getExternalLabelsContainer().add(childFigure);
			«EXPAND addPositionTracker-»
			return;
		}
«ENDIF-»
«IF getInnerFixedLabels().size() > 0 || getPinnedCompartments().size() > 0-»
		if (addFixedChild(childEditPart)) {
			return;
		}
«ENDIF-»
«IF compartments.size() > 0 && hasDirectChildren()-»
		if (isDirectChild(childEditPart)) {
			org.eclipse.draw2d.IFigure childFigure = ((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure();
			childNodesPane.add(childFigure);
			return;
		}
«ENDIF-»
	super.addChildVisual(childEditPart, -1);
}
«ENDDEFINE»

«DEFINE removeChildVisual FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
«IF getExternalLabels().size() > 0-»
		if (isExternalLabel(childEditPart)) {
			org.eclipse.draw2d.IFigure childFigure = ((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure();
			«EXPAND removePositionTracker-»
			getExternalLabelsContainer().remove(childFigure);
			return;
		}
«ENDIF-»
«IF getSideAffixedChildren().size() > 0-»
		if (isSideAffixedChild(childEditPart)) {
			org.eclipse.draw2d.IFigure childFigure = ((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure();
			«EXPAND removePositionTracker-»
			getExternalLabelsContainer().remove(childFigure);
			return;
		}
«ENDIF-»
«IF getInnerFixedLabels().size() > 0 || getPinnedCompartments().size() > 0-»
		if (removeFixedChild(childEditPart)) {
			return;
		}
«ENDIF-»
«IF compartments.size() > 0 && hasDirectChildren()-»
		if (isDirectChild(childEditPart)) {
			org.eclipse.draw2d.IFigure childFigure = ((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure();
			childNodesPane.remove(childFigure);
			return;
		}
«ENDIF-»
	super.removeChildVisual(childEditPart);
}
«ENDDEFINE»

«DEFINE addPositionTracker FOR gmfgen::GenNode-»
org.eclipse.gmf.runtime.lite.figures.ExternalChildPositionTracker positionTracker = (org.eclipse.gmf.runtime.lite.figures.ExternalChildPositionTracker) childEditPart.getAdapter(org.eclipse.gmf.runtime.lite.figures.ExternalChildPositionTracker.class);
if (positionTracker != null) {
	getFigure().addAncestorListener(positionTracker);
}
«ENDDEFINE»

«DEFINE removePositionTracker FOR gmfgen::GenNode-»
org.eclipse.gmf.runtime.lite.figures.ExternalChildPositionTracker positionTracker = (org.eclipse.gmf.runtime.lite.figures.ExternalChildPositionTracker) childEditPart.getAdapter(org.eclipse.gmf.runtime.lite.figures.ExternalChildPositionTracker.class);
if (positionTracker != null) {
	getFigure().removeAncestorListener(positionTracker);
}
«ENDDEFINE»

«DEFINE getExternalLabelsContainer FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.draw2d.IFigure getExternalLabelsContainer() {
	org.eclipse.gef.editparts.LayerManager root = (org.eclipse.gef.editparts.LayerManager) getRoot();
	return root.getLayer(«getDiagram().getEditPartFactoryQualifiedClassName()».EXTERNAL_NODE_LABELS_LAYER);
}
«ENDDEFINE»

«DEFINE removeNotify FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
public void removeNotify() {
	for (java.util.Iterator it = getChildren().iterator(); it.hasNext(); ) {
		org.eclipse.gef.EditPart childEditPart = (org.eclipse.gef.EditPart) it.next();
«IF getExternalLabels().size() > 0-»
		if (isExternalLabel(childEditPart)) {
			«EXPAND removePositionTracker-»
			org.eclipse.draw2d.IFigure childFigure = ((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure();
			getExternalLabelsContainer().remove(childFigure);
		}
«ENDIF-»
«IF getSideAffixedChildren().size() > 0-»
		if (isSideAffixedChild(childEditPart)) {
			«EXPAND removePositionTracker-»
			org.eclipse.draw2d.IFigure childFigure = ((org.eclipse.gef.GraphicalEditPart) childEditPart).getFigure();
			getExternalLabelsContainer().remove(childFigure);
		}
«ENDIF-»
	}
	super.removeNotify();
}
«ENDDEFINE»

«DEFINE connectionAnchors FOR gmfgen::GenNode-»
«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.draw2d.ConnectionAnchor getSourceConnectionAnchor(org.eclipse.gef.ConnectionEditPart connection) {
	return new org.eclipse.draw2d.ChopboxAnchor(getFigure());
}

«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.draw2d.ConnectionAnchor getSourceConnectionAnchor(org.eclipse.gef.Request request) {
	return new org.eclipse.draw2d.ChopboxAnchor(getFigure());
}

«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.draw2d.ConnectionAnchor  getTargetConnectionAnchor(org.eclipse.gef.ConnectionEditPart connection) {
	return new org.eclipse.draw2d.ChopboxAnchor(getFigure());
}

«EXPAND xpt::Common::generatedMemberComment»
public org.eclipse.draw2d.ConnectionAnchor  getTargetConnectionAnchor(org.eclipse.gef.Request request) {
	return new org.eclipse.draw2d.ChopboxAnchor(getFigure());
}
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenNode»«ENDDEFINE»

