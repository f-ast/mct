/*
 * Copyright (c) 2007 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

import "http://www.eclipse.org/emf/2002/Ecore";
import "http://www.eclipse.org/emf/2002/GenModel";
import "http://www.eclipse.org/gmf/2008/GenModel";
extension xpt::commands::CommandUtils;
extension xpt::diagram::PhantomUtils;
extension xpt::GenModelUtils;

boolean needsNotationModelRefresher(gmfgen::GenContainerBase gcb) :
	gcb.getChildNodesForNotationModelRefresher().size() > 0
;

boolean needsNotationModelRefresher(gmfgen::GenDiagram diagram) :
	diagram.getChildNodesForNotationModelRefresher().size() > 0 || diagram.getPhantomNodes().size() > 0
;

//Phantom features are not included here 
cached Collection[gmfgen::GenNode] getChildNodesForNotationModelRefresher(gmfgen::GenContainerBase gcb) :
	gcb.getChildNodes().select(e| e.modelFacet != null && e.modelFacet.metaClass != null && !e.modelFacet.isPhantomElement() && e.modelFacet.childMetaFeature != null)
;

Collection[gmfgen::GenNode] getConstraintsInChildren(gmfgen::GenContainerBase gcb) :
	gcb.getChildNodes().select(e| e.modelFacet != null && e.modelFacet.metaClass != null && e.modelFacet.modelElementSelector != null)
;

Collection[genmodel::GenFeature] getChildFeatures(gmfgen::GenContainerBase gcb) :
	//{}.union() provides uniqueness
	{}.union(gcb.getChildNodesForNotationModelRefresher().modelFacet.childMetaFeature)
;

Collection[genmodel::GenFeature] getChildFeaturesForFilter(gmfgen::GenContainerBase gcb) :
	//{}.union() provides uniqueness
	{}.union(gcb.getChildNodesForNotationModelRefresher().modelFacet.childMetaFeatureForFilter())
;

private genmodel::GenFeature childMetaFeatureForFilter(gmfgen::TypeModelFacet modelFacet) :
	modelFacet.childMetaFeature.ecoreFeature.derived ? modelFacet.containmentMetaFeature : modelFacet.childMetaFeature
;

Collection[gmfgen::GenNode] getGenNodes(gmfgen::GenContainerBase genContainerBase, genmodel::GenFeature genFeature) :
JAVA org.eclipse.gmf.internal.codegen.lite.utils.SemanticSyncUtils.getGenNodes(org.eclipse.gmf.codegen.gmfgen.GenContainerBase, org.eclipse.emf.codegen.ecore.genmodel.GenFeature)
;

cached Collection[gmfgen::GenContainerBase] getAllInitableContainers(gmfgen::GenDiagram diagram) :
	diagram.getAllContainersWithChildren().union(diagram.getAllNodes().select(e|e.getInitableCompartments().size() > 0))
;

private Collection[gmfgen::GenContainerBase] getAllContainersWithChildren(gmfgen::GenDiagram diagram) :
	diagram.getAllContainers().select(e| e.needsNotationModelRefresher())
;

cached Collection[gmfgen::GenCompartment] getInitableCompartments(gmfgen::GenNode node) :
	node.compartments.select(e| e.needsNotationModelRefresher())
;

Collection[gmfgen::GenContainerBase] getInitableGrandChildren(gmfgen::GenContainerBase gcb) :
	let allInitableContainers = getAllInitableContainers(gcb.getDiagram()) :
		gcb.getChildNodesForNotationModelRefresher().select(e| allInitableContainers.contains(e))
;
