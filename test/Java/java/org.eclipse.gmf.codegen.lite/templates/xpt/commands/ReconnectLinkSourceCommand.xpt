/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::GenModelUtils»

«DEFINE ReconnectLinkSourceCommand FOR gmfgen::GenLink-»
«EXPAND xpt::Common::copyright FOR diagram.editorGen»
package «diagram.editCommandsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «EXPAND className» «EXPAND supertypes» {
	«EXPAND attributes-»
	«EXPAND ctors-»
	«EXPAND prepare-»
	«EXPAND canReconnect-»
	«EXPAND createCommand-»
	«EXPAND xpt::commands::Common::getRelationshipContainer FOR modelFacet-»
«IF creationConstraints != null-»
	«EXPAND xpt::commands::domainModelRemoveCommand::domainModelRemoveCommand("edge")-»
«ENDIF-»
	«EXPAND additions-»
}
«ENDDEFINE»

«DEFINE className FOR gmfgen::GenLink»Reconnect«EXPAND xpt::commands::Common::commandNameInfix»SourceCommand«ENDDEFINE»
«DEFINE qualifiedClassName FOR gmfgen::GenLink»«getDiagram().editCommandsPackageName».«EXPAND className»«ENDDEFINE»
«DEFINE supertypes FOR gmfgen::GenLink»extends org.eclipse.emf.common.command.CommandWrapper«ENDDEFINE»

«DEFINE attributes FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.notation.Edge edge;
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.notation.View newSource;
	«EXPAND xpt::Common::generatedMemberComment»
	private org.eclipse.gmf.runtime.notation.View oldSource;
«ENDDEFINE»

«DEFINE ctors FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND className»(org.eclipse.gef.requests.ReconnectRequest request) {
		this((org.eclipse.gmf.runtime.notation.Edge)request.getConnectionEditPart().getModel(), (org.eclipse.gmf.runtime.notation.View)request.getTarget().getModel());
	}
	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND className»(org.eclipse.gmf.runtime.notation.Edge edge, org.eclipse.gmf.runtime.notation.View newSource) {
		this.edge = edge;
		this.newSource = newSource;
		this.oldSource = edge.getSource();
	}
«ENDDEFINE»

«DEFINE prepare FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected boolean prepare() {
«IF creationConstraints == null-»
		if (!canReconnect()) {
			return false;
		}
		return super.prepare();
«ELSE-»
		final boolean[] resultHolder = new boolean[1];
		//To validate the reconnection against constraints, the current link should be deleted. Of course, we must then undo its deletion.
		final org.eclipse.emf.transaction.TransactionalEditingDomain domainModelEditDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(oldSource.getDiagram().getElement());
		org.eclipse.emf.common.command.Command command = new org.eclipse.emf.common.command.AbstractCommand() {
			private org.eclipse.emf.common.command.Command deleteCommand = createDomainModelRemoveCommand(domainModelEditDomain);
			public boolean canExecute() {
				return deleteCommand.canExecute();
			}
			public boolean canUndo() {
				return true;
			}
			public void redo() {
			}
			public void undo() {
			}
			public void execute() {
				deleteCommand.execute();
				try {
					resultHolder[0] = canReconnect();
				} finally {
					deleteCommand.undo();
				}
			}
		};
		if (!command.canExecute()) {
			return false;
		}
		new org.eclipse.gmf.runtime.lite.commands.WrappingCommand(domainModelEditDomain, command).execute();
		if (!resultHolder[0]) {
			return false;
		}
		return super.prepare();
«ENDIF-»
	}
«ENDDEFINE»

«DEFINE canReconnect FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment»
	private boolean canReconnect() {
		«EXPAND xpt::commands::Common::checkLinkConstraints("newSource.getElement()", "edge.getTarget().getElement()") FOR creationConstraints-»
		«EXPAND canReconnect FOR modelFacet-»
	}
«ENDDEFINE»

«DEFINE canReconnect FOR gmfgen::LinkModelFacet-»
return false;
«ENDDEFINE»

«DEFINE canReconnect FOR gmfgen::TypeLinkModelFacet-»
«IF containmentMetaFeature == null-»
return false;
«ELSE-»
«ENDIF-»
org.eclipse.emf.ecore.EObject containerEObj = getRelationshipContainer(newSource.getElement(), «EXPAND MetaModel::MetaClass FOR containmentMetaFeature.genClass»);
«EXPAND MetaModel::DeclareAndAssign("container", "containerEObj") FOR containmentMetaFeature.genClass»
if (container == null) {
	return false;
}
«EXPAND checkFeature("container", containmentMetaFeature.genClass) FOR containmentMetaFeature-»
«LET childMetaFeature != null && childMetaFeature != containmentMetaFeature && !childMetaFeature.ecoreFeature.derived AS setChild-»
«IF setChild-»
«EXPAND checkFeature("container", containmentMetaFeature.genClass) FOR childMetaFeature-»
«ENDIF-»
«REM»No need to check the size of the source or target features: their size does not change«ENDREM-»
«REM»Still need to check the eOpposite() of the source feature«ENDREM-»
«LET sourceMetaFeature != null && !sourceMetaFeature.ecoreFeature.derived && ecore::EReference.isSuperTypeOf(sourceMetaFeature.ecoreFeature.eClass()) 
	&& ((ecore::EReference) sourceMetaFeature.ecoreFeature).eOpposite !=containmentMetaFeature.ecoreFeature && 
		(setChild implies ((ecore::EReference) sourceMetaFeature.ecoreFeature).eOpposite != childMetaFeature.ecoreFeature) AS setSource-»
	«IF setSource-»
		«LET sourceMetaFeature.getReverse() AS sourceReverseFeature-»
			«IF sourceReverseFeature != null && !sourceReverseFeature.ecoreFeature.derived && sourceReverseFeature != containmentMetaFeature && sourceReverseFeature != childMetaFeature-»
«EXPAND checkFeature("newSource.getElement()", null) FOR sourceReverseFeature-»
			«ENDIF-»
		«ENDLET-»
	«ENDIF-»
«ENDLET-»
«ENDLET-»
return true;
«ENDDEFINE»

«DEFINE canReconnect FOR gmfgen::FeatureLinkModelFacet-»
«EXPAND checkFeature("newSource.getElement()", null) FOR metaFeature-»
return true;
«ENDDEFINE»

«DEFINE createCommand FOR gmfgen::GenLink-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.common.command.Command createCommand() {
		org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.emf.transaction.util.TransactionUtil.getEditingDomain(oldSource.getDiagram().getElement());
		org.eclipse.emf.common.command.CompoundCommand result = new org.eclipse.emf.common.command.CompoundCommand();
		result.append(new org.eclipse.gmf.runtime.lite.commands.ReconnectNotationalEdgeSourceCommand(edge, newSource));
		«EXPAND appendDomainModelCommand FOR modelFacet-»
		return result;
	}
«ENDDEFINE»

«DEFINE appendDomainModelCommand FOR gmfgen::LinkModelFacet-»
result.append(org.eclipse.emf.common.command.UnexecutableCommand.INSTANCE);
«ENDDEFINE»

«DEFINE appendDomainModelCommand FOR gmfgen::TypeLinkModelFacet-»
«IF containmentMetaFeature == null-»
result.append(org.eclipse.emf.common.command.UnexecutableCommand.INSTANCE);
«ELSE-»
«LET childMetaFeature != null && childMetaFeature != containmentMetaFeature && !childMetaFeature.ecoreFeature.derived AS setChild-»
«LET sourceMetaFeature != null && !sourceMetaFeature.ecoreFeature.derived && ecore::EReference.isSuperTypeOf(sourceMetaFeature.ecoreFeature.eClass()) 
	&& ((ecore::EReference) sourceMetaFeature.ecoreFeature).eOpposite !=containmentMetaFeature.ecoreFeature && 
		(setChild implies ((ecore::EReference) sourceMetaFeature.ecoreFeature).eOpposite != childMetaFeature.ecoreFeature) AS setSource-»
		org.eclipse.emf.ecore.EObject container = getRelationshipContainer(newSource.getElement(), «EXPAND MetaModel::MetaClass FOR containmentMetaFeature.genClass»);
		if (container == null) {
			return org.eclipse.emf.common.command.UnexecutableCommand.INSTANCE;
		}
		org.eclipse.emf.ecore.EObject oldContainer = edge.getElement().eContainer();
		if (oldContainer == null) {
			return org.eclipse.emf.common.command.UnexecutableCommand.INSTANCE;
		}
		if (oldContainer != container) {
			result.append(«EXPAND xpt::commands::Common::unplugFeatureCommand("editingDomain", "oldContainer", "edge.getElement()") FOR containmentMetaFeature»);
			result.append(«EXPAND xpt::commands::Common::plugFeatureCommand("editingDomain", "container", "edge.getElement()") FOR containmentMetaFeature»);
	«IF setChild-»
			result.append(«EXPAND xpt::commands::Common::unplugFeatureCommand("editingDomain", "oldContainer", "edge.getElement()") FOR childMetaFeature»);
			result.append(«EXPAND xpt::commands::Common::plugFeatureCommand("editingDomain", "container", "edge.getElement()") FOR childMetaFeature»);
	«ENDIF-»
		}
	«IF setSource-»
		«IF sourceMetaFeature.ecoreFeature.many-»
		result.append(«EXPAND xpt::commands::Common::unplugFeatureCommand("editingDomain", "edge.getElement()", "oldSource.getElement()") FOR sourceMetaFeature»);
		«ENDIF-»
		result.append(«EXPAND xpt::commands::Common::plugFeatureCommand("editingDomain", "edge.getElement()", "newSource.getElement()") FOR sourceMetaFeature»);
	«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDIF-»
«ENDDEFINE»

«DEFINE appendDomainModelCommand FOR gmfgen::FeatureLinkModelFacet-»
result.append(«EXPAND xpt::commands::Common::unplugFeatureCommand("editingDomain", "oldSource.getElement()", "edge.getTarget().getElement()") FOR metaFeature»);
result.append(«EXPAND xpt::commands::Common::plugFeatureCommand("editingDomain", "newSource.getElement()", "edge.getTarget().getElement()") FOR metaFeature»);
«ENDDEFINE»

«DEFINE checkFeature(String containerVar, genmodel::GenClass containerClass) FOR genmodel::GenFeature-»
«IF ecoreFeature.upperBound > 0-»
if («EXPAND xpt::commands::Common::featureMultiplicityComparator(containerVar, containerClass)») {
	return false;
}
«ENDIF-»
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenLink-»
«ENDDEFINE»
