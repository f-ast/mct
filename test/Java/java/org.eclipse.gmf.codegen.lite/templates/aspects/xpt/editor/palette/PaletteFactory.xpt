/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2008/GenModel"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "http://www.eclipse.org/emf/2002/GenModel"»
«EXTENSION xpt::editor::palette::Utils»

«AROUND Factory FOR gmfgen::Palette-»
«EXPAND xpt::Common::copyright FOR diagram.editorGen-»
package «packageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «factoryClassName» {
	«EXPAND contribute-»
	«EXPAND xpt::editor::palette::PaletteFactory::createGroup FOREACH collectGroups()»
	«EXPAND xpt::editor::palette::PaletteFactory::createEntry FOREACH collectTools()»
	«IF needsNodeToolEntryClass()»«EXPAND xpt::editor::palette::NodeToolEntry::NodeToolEntry»«ENDIF-»
	«IF needsLinkToolEntryClass()»«EXPAND xpt::editor::palette::LinkToolEntry::LinkToolEntry»«ENDIF-»
	«EXPAND additions-»
}
«ENDAROUND»

«DEFINE contribute FOR gmfgen::Palette-»
«EXPAND xpt::Common::generatedMemberComment»
public void contributeToPalette(org.eclipse.gef.palette.PaletteRoot paletteRoot) {
«IF !definesStandardTools()-»
	«EXPAND addStandardTools-»
«ENDIF-»
	«EXPAND xpt::editor::palette::PaletteFactory::addEntry("paletteRoot") FOREACH groups-»
}
«ENDDEFINE»

«DEFINE addStandardTools FOR gmfgen::Palette-»
org.eclipse.gef.palette.PaletteGroup controls = new org.eclipse.gef.palette.PaletteGroup("Controls");
paletteRoot.add(controls);

org.eclipse.gef.palette.ToolEntry tool = new org.eclipse.gef.palette.SelectionToolEntry();
controls.add(tool);
paletteRoot.setDefaultEntry(tool);

controls.add(new org.eclipse.gef.palette.MarqueeToolEntry());
«ENDDEFINE»

«AROUND addEntry(String varName) FOR gmfgen::AbstractToolEntry-»
{
	org.eclipse.gef.palette.PaletteEntry paletteEntry = «createMethodName»();
	if (paletteEntry != null) {
		«varName».add(paletteEntry);
«IF default_ && group.stack-»
		«varName».setActiveEntry(paletteEntry);
«ENDIF-»
	}
}
«ENDAROUND»

«AROUND newEntry(String toolVarName) FOR gmfgen::ToolEntry-»
«IF elements.isEmpty()-»
org.eclipse.gef.palette.ToolEntry «toolVarName» = new org.eclipse.gef.palette.ToolEntry(«EXPAND xpt::editor::palette::PaletteFactory::i18nTitle», «EXPAND xpt::editor::palette::PaletteFactory::i18nDesc», null, null) {};
«ELSE-»
final int[] visualIds = new int[] {
	«EXPAND visualID FOREACH elements SEPARATOR ','-»
};
«LET genNodes.isEmpty() ? "LinkToolEntry" : "NodeToolEntry" AS toolEntryClass-»
«toolEntryClass» «toolVarName» = new «toolEntryClass»(«EXPAND xpt::editor::palette::PaletteFactory::i18nTitle», «EXPAND xpt::editor::palette::PaletteFactory::i18nDesc», visualIds);
«ENDLET-»
«ENDIF-»
«ENDAROUND»

«DEFINE visualID FOR Object»«ERROR "Unexpected Type: " + this»«ENDDEFINE»

«DEFINE visualID FOR gmfgen::GenCommonBase»«EXPAND xpt::editor::VisualIDRegistry::visualID»«ENDDEFINE»

«AROUND setSmallImage(String toolVarName, gmfgen::Palette palette) FOR gmfgen::EntryBase-»
«IF null != smallIconPath-»
«toolVarName».setSmallIcon(«activatorFQN(palette)».findImageDescriptor("«smallIconPath»")); «EXPAND xpt::Common::nonNLS»
«ELSE-»
«toolVarName».setSmallIcon(«EXPAND smallImage(toolVarName)»);
«ENDIF-»
«ENDAROUND»

«DEFINE smallImage(String toolVarName) FOR gmfgen::EntryBase»null«ENDDEFINE»

«DEFINE smallImage(String toolVarName) FOR gmfgen::ToolEntry-»
«IF elements.isEmpty()»null«ELSE»«elementTypesClass()».getImageDescriptor(«EXPAND getElement FOR elements.first()»)«ENDIF-»
«ENDDEFINE»

«DEFINE getElement FOR Object»«ERROR "Unexpected type: " + this»«ENDDEFINE»

«DEFINE getElement FOR gmfgen::GenNode»«EXPAND getElement FOR modelFacet»«ENDDEFINE»
«DEFINE getElement FOR gmfgen::GenLink»«EXPAND getElement FOR modelFacet»«ENDDEFINE»

«DEFINE getElement FOR gmfgen::LinkModelFacet»«ERROR "Unexpected model facet: " + this»«ENDDEFINE»

«DEFINE getElement FOR gmfgen::TypeModelFacet»«EXPAND MetaModel::MetaClass FOR metaClass»«ENDDEFINE»
«DEFINE getElement FOR gmfgen::TypeLinkModelFacet»«EXPAND MetaModel::MetaClass FOR metaClass»«ENDDEFINE»
«DEFINE getElement FOR gmfgen::FeatureLinkModelFacet»«EXPAND MetaModel::MetaFeature FOR metaFeature»«ENDDEFINE»

«DEFINE additions FOR gmfgen::Palette»«ENDDEFINE»
